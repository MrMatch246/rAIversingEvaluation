{
    "functions": {
        "FUN_000809b4": {
            "renaming": {
                "FUN_000809b4": "set_parameter_value_000809b4",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_second_parameter"
            },
            "code": "void set_parameter_value_000809b4(int object_address, int value, int is_second_parameter) {\n  if (is_second_parameter) {\n    *(int *)(object_address + 100) = value;\n  }\n  else {\n    *(int *)(object_address + 0x60) = value;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809b4",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_parameter_value_000809b4"
        },
        "FUN_00081560": {
            "renaming": {
                "String::operator_": "move_string",
                "this": "current_string",
                "rval": "new_string",
                "FUN_00081560": "move_string_00081560"
            },
            "code": "String* __thiscall move_string_00081560(String* current_string, String* new_string) {\n  if (current_string != new_string) {\n    move(current_string, new_string);\n  }\n  return current_string;\n}",
            "called": [
                "move"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "move_string_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00080e6a": {
            "renaming": {
                "FUN_00080e6a": "resetAndIncrementTimeTickIfFalse_00080e6a",
                "iVar1": "isFalse",
                "__false()": "__false",
                "tickReset()": "resetTick()",
                "TimeTick_Increment()": "incrementTimeTick()"
            },
            "code": "void resetAndIncrementTimeTickIfFalse_00080e6a(void)\n{\n  int isFalse = __false();\n  if (isFalse == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "TimeTick_Increment",
                "tickReset",
                "__false"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e6a",
            "calling": [],
            "imported": false,
            "current_name": "resetAndIncrementTimeTickIfFalse_00080e6a"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "check_bits_set_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "num_bits_to_check",
                "iVar1": "num_bits_set"
            },
            "code": "int check_bits_set_00081684(uint *data, uint mask, uint expected, int num_bits_to_check)\n{\n  int num_bits_set = 0;\n  while (num_bits_to_check > 0)\n  {\n    if ((*data & mask) != expected) \n    {\n      while (num_bits_to_check > 0)\n      {\n        if ((*data & mask) == expected) \n        {\n          return num_bits_set;\n        }\n        num_bits_to_check--;\n      }\n      return 0;\n    }\n    num_bits_to_check--;\n    num_bits_set++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "pulseIn"
            ],
            "imported": false,
            "current_name": "check_bits_set_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_ptr_32",
                "puVar4": "source_ptr_32",
                "uVar5": "current_32",
                "uVar6": "previous_32",
                "puVar7": "destination_ptr_32",
                "puVar8": "destination_ptr_32",
                "pcVar9": "destination",
                "bVar10": "is_null"
            },
            "code": "char * copy_string_000825cc(char *destination, char *source)\n{\n    char current_char;\n    unsigned short current_short;\n    unsigned int *source_ptr_32;\n    unsigned int *destination_ptr_32;\n    unsigned int current_32;\n    unsigned int previous_32;\n    bool is_null;\n\n    destination_ptr_32 = (unsigned int *)destination;\n    source_ptr_32 = (unsigned int *)source;\n\n    if ((((unsigned int)destination ^ (unsigned int)source) & 3) != 0)\n    {\n        do\n        {\n            current_char = *source;\n            *destination = current_char;\n            source++;\n            destination++;\n        } while (current_char != '\\0');\n\n        return destination;\n    }\n\n    if (((unsigned int)source & 3) != 0)\n    {\n        if (((unsigned int)source & 1) != 0)\n        {\n            current_char = *source;\n            *destination = current_char;\n            if (current_char == '\\0')\n            {\n                return destination;\n            }\n\n            source++;\n            destination++;\n            destination_ptr_32 = (unsigned int *)destination;\n        }\n\n        if (((unsigned int)source & 2) != 0)\n        {\n            current_short = *(unsigned short *)source;\n            is_null = (current_short & 0xff) == 0;\n\n            if (is_null)\n            {\n                *(char *)destination_ptr_32 = (char)current_short;\n            }\n            else\n            {\n                *(unsigned short *)destination_ptr_32 = current_short;\n                destination_ptr_32++;\n            }\n\n            if ((current_short & 0xff00) == 0)\n            {\n                return destination;\n            }\n\n            source = (char *)((int)source + 2);\n        }\n    }\n\n    previous_32 = 0;\n\n    do\n    {\n        current_32 = *source_ptr_32;\n\n        if ((current_32 + 0xfefefeff & ~current_32 & 0x80808080) != 0)\n        {\n            break;\n        }\n\n        *destination_ptr_32 = current_32;\n        previous_32 = current_32;\n        source_ptr_32++;\n        destination_ptr_32++;\n\n        current_32 = *source_ptr_32;\n\n        if ((current_32 + 0xfefefeff & ~current_32 & 0x80808080) != 0)\n        {\n            break;\n        }\n\n        *destination_ptr_32 = previous_32;\n        previous_32 = current_32;\n        source_ptr_32++;\n        destination_ptr_32++;\n    } while (true);\n\n    do\n    {\n        *(char *)destination_ptr_32 = (char)current_32;\n        current_32 = current_32 >> 8 | current_32 << 24;\n    } while ((current_32 & 0xff) != 0);\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "copy",
                "concat",
                "move"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00083984": {
            "renaming": {
                "FUN_00083984": "call_global_destructors_00083984",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor"
            },
            "code": "void call_global_destructors_00083984(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_000839b0 - (int)PTR___do_global_dtors_aux_fini_array_entry_000839ac >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_000839ac + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor--;\n      (**destructor)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083984",
            "calling": [],
            "imported": false,
            "current_name": "call_global_destructors_00083984"
        },
        "FUN_00080598": {
            "renaming": {
                "FUN_00080598": "servoControl_00080598",
                "_timer5": "timer5",
                "DAT_000805a4": "servoPosition"
            },
            "code": "void servoControl_00080598(void)\n{\n  Servo_Handler(timer5, DAT_000805a4, '\\0');\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080598",
            "calling": [],
            "imported": false,
            "current_name": "servoControl_00080598"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_character_00080aa8",
                "param_1": "character",
                "uVar1": "mask",
                "PTR_DAT_00080ae8": "DAT_00080ae8"
            },
            "code": "int check_character_00080aa8(uint8_t character){\n                      uint32_t mask;\n                      if (character < 0x2d) {\n                        if (character < 0x20) {\n                          mask = 1 << (character & 0xff);\n                          if ((mask & *(uint32_t *)(PTR_DAT_00080ae8 + 0x18)) != mask) {\n                            *(uint32_t *)(PTR_DAT_00080ae8 + 0x10) = mask;\n                          }\n                        }\n                        else {\n                          mask = 1 << (character - 0x20 & 0xff);\n                          if ((mask & *(uint32_t *)(PTR_DAT_00080ae8 + 0x108)) != mask) {\n                            *(uint32_t *)(PTR_DAT_00080ae8 + 0x100) = mask;\n                          }\n                        }\n                        return 0;\n                      }\n                      return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "pinMode",
                "init",
                "init",
                "_initISR"
            ],
            "imported": false,
            "current_name": "check_character_00080aa8"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "is_object_initialized",
                "PTR_object_7862_0008013c": "object_pointer",
                "PTR__etext_00080140": "end_of_text",
                "DAT_00080144": "function_pointer"
            },
            "code": "void execute_function_if_not_null_00080118(int param1, char* param2, int param3, int param4) {\n  if (DAT_00080134 != 0) {\n    param2 = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (void*)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140, param2, param3, DAT_00080144, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_00083a74",
                "param_1": "heap_start",
                "param_2": "size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_mallinfo",
                "iVar3": "sbrk_r_result",
                "uVar4": "mask",
                "iVar5": "padding",
                "PTR___malloc_av__00083b04": "malloc_av",
                "PTR___malloc_current_mallinfo_00083b08": "malloc_mallinfo",
                "PTR___malloc_sbrk_base_00083b0c": "malloc_sbrk_base"
            },
            "code": "int allocate_memory_00083a74(void *heap_start, int size)\n{\n  void *PTR___malloc_av__00083b04 = PTR___PTR___malloc_av__00083b04__00083b04;\n  __malloc_lock();\n  uint32_t mask = *(uint32_t *)(*(int *)(PTR___malloc_av__00083b04 + 8) + 4) & 0xfffffffc;\n  int padding = ((mask - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < padding) {\n    int sbrk_r_result = _sbrk_r(heap_start, 0);\n    if (sbrk_r_result == *(int *)(PTR___malloc_av__00083b04 + 8) + mask) {\n      sbrk_r_result = _sbrk_r(heap_start, -padding);\n      void *PTR___malloc_current_mallinfo_00083b08 = PTR___malloc_current_mallinfo_00083b08;\n      if (sbrk_r_result != -1) {\n        int mallinfo_result = *(int *)PTR___malloc_current_mallinfo_00083b08;\n        *(uint32_t *)(*(int *)(PTR___malloc_av__00083b04 + 8) + 4) = mask - padding | 1;\n        *(int *)PTR___malloc_current_mallinfo_00083b08 = mallinfo_result - padding;\n        __malloc_unlock(heap_start);\n        return 1;\n      }\n      sbrk_r_result = _sbrk_r(heap_start, 0);\n      void *PTR___malloc_sbrk_base_00083b0c = PTR___PTR___malloc_sbrk_base_00083b0c_00083b0c;\n      uint32_t diff = sbrk_r_result - *(int *)(PTR___malloc_av__00083b04 + 8);\n      if (0xf < (int)diff) {\n        int sbrk_base_result = *(int *)PTR___malloc_sbrk_base_00083b0c;\n        *(uint32_t *)(*(int *)(PTR___malloc_av__00083b04 + 8) + 4) = diff | 1;\n        *(int *)PTR___malloc_current_mallinfo_00083b08 = sbrk_r_result - sbrk_base_result;\n      }\n    }\n  }\n  __malloc_unlock(heap_start);\n  return 0;\n}",
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083a74"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "getDefaultValue_00080e80",
                "return": "defaultValue",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int getDefaultValue_00080e80(void)\n{\n    int defaultValue = 0;\n    return defaultValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "getDefaultValue_00080e80"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_parameter_to_max_00080d62",
                "param_1": "parameter_index",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(parameter_index + 0x14)"
            },
            "code": "void set_parameter_to_max_00080d62(int parameter_index)\n{\n    *(int *)(parameter_index + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_to_max_00080d62"
        },
        "FUN_00080e84": {
            "renaming": {
                "FUN_00080e84": "infinite_loop_00080e84"
            },
            "code": "void infinite_loop_00080e84(void)\n{\n  while(true) {\n    // Do nothing block\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e84",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_00080e84"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6::FUN_000814f6": "String::String",
                "thiscall": "__thiscall",
                "this": "this",
                "char* cstr": "char* str",
                "size_t length": "size_t length",
                "char*": "char*",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "length",
                "cstr": "str",
                "nullptr": "nullptr",
                "strlen": "strlen",
                "copy": "copy",
                "FUN_000814f6": "String_000814f6"
            },
            "code": "String_000814f6* __thiscall String_000814f6::String_000814f6(String_000814f6* this, char* str) {\n    size_t length;\n    this->buffer = nullptr;\n    this->capacity = 0;\n    this->length = 0;\n    if (str != nullptr) {\n        length = strlen(str);\n        copy(this, str, length);\n    }\n    return this;\n}",
            "called": [
                "copy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "_GLOBAL__sub_I_steering",
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "String_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "allocate_memory_00080e88",
                "incr": "increment",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory",
                "PTR_heap_00080e9c": "heap_start",
                "PTR__ebss_00080ea0": "end_of_bss"
            },
            "code": "caddr_t allocate_memory_00080e88(int increment) {\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_00080e9c;\n  if (*(int *)PTR_heap_00080e9c == 0) {\n    *(undefined **)PTR_heap_00080e9c = PTR__ebss_00080ea0;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + increment;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00080e88"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "initialize_atexit_function_if_not_already_set_000836d8",
                "DAT_000836e4": "data_initialized",
                "DAT_000836e8": "atexit_function"
            },
            "code": "void initialize_atexit_function_if_not_already_set_000836d8(void)\n{\n  if (DAT_000836e4 != 0) {\n    atexit(DAT_000836e8);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_atexit_function_if_not_already_set_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "sendData_000812b8",
                "this": "self",
                "uc_data": "data",
                "pRVar1": "tx_buffer",
                "uVar2": "next_head",
                "PTR_00081308": "BUFFER_SIZE_MASK"
            },
            "code": "size_t __thiscall UARTClass::sendData_000812b8(UARTClass *this,uint8_t data)\\n\\\n{\\n\\\n  RingBuffer *tx_buffer = this->transmitBuffer;\\n\\\n  if (((int)(this->uart->UART_SR << 0x1e) < 0) && (tx_buffer->tail == tx_buffer->head)) {\\n\\\n    this->uart->UART_THR = (uint)data;\\n\\\n  }\\n\\\n  else {\\n\\\n    uint next_head = (PTR_00081308 & tx_buffer->head + 1U);\\n\\\n    if ((int)next_head < 0) {\\n\\\n      next_head = (next_head - 1 | 0xffffff80) + 1;\\n\\\n    }\\n\\\n    do {\\n\\\n    } while (tx_buffer->tail == next_head);\\n\\\n    tx_buffer->buffer[tx_buffer->head] = data;\\n\\\n    this->transmitBuffer->head = next_head;\\n\\\n    this->uart->UART_IER = 2;\\n\\\n  }\\n\\\n  return 1;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "sendData_000812b8"
        },
        "FUN_00081570": {
            "renaming": {
                "String::FUN_00081570": "reserve_and_copy",
                "*this": "string_obj",
                "cstr": "source_string",
                "length": "source_length",
                "size": "new_size",
                "uVar1": "success_flag",
                "this->len": "string_obj->length",
                "this->buffer": "string_obj->data",
                "FUN_00081570": "reserve_and_copy_00081570"
            },
            "code": "uchar reserve_and_copy_00081570(String *string_obj,char *source_string,uint source_length)\\n{\\n  uchar success_flag;\\n  uint new_size;\\n  \\n  if (source_string == NULL) {\\n    return \"\\0\";\\n  }\\n  if (source_length != 0) {\\n    new_size = string_obj->length + source_length;\\n    success_flag = reserve(string_obj,new_size);\\n    if (success_flag == \"\\0\") {\\n      return \"\\0\";\\n    }\\n    strcpy(string_obj->data + string_obj->length,source_string);\\n    string_obj->length = new_size;\\n  }\\n  return \"\\x01\";\\n}",
            "called": [
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "concat"
            ],
            "imported": false,
            "current_name": "reserve_and_copy_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "configure_timer_000803fc",
                "tc": "timer",
                "channel": "channel",
                "id": "peripheral_id",
                "irqn": "interrupt_number",
                "pmc_enable_periph_clk": "pmc_enable_peripheral_clock",
                "TC_Configure": "TC_Configure",
                "TC_SetRA": "TC_SetRA",
                "DAT_00080448": "DAT_00080448",
                "TC_IER": "TC_IER_CPCS",
                "TC_Start": "TC_Start"
            },
            "code": "void configure_timer_000803fc(Tc *timer, uint32_t channel, uint32_t peripheral_id, IRQn_Type interrupt_number)\n{\n  pmc_enable_peripheral_clock(peripheral_id);\n  TC_Configure(timer, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC | TC_CMR_TCCLKS_TIMER_CLOCK1);\n  TC_SetRA(timer, channel, 0xa41);\n  *(int *)(DAT_00080448 + ((uint)(int)interrupt_number >> 5) * 4) = 1 << ((int)interrupt_number & 0x1fU);\n  timer->TC_CHANNEL[channel].TC_IER = TC_IER_CPCS;\n  TC_Start(timer, channel);\n  return;\n}",
            "called": [
                "TC_Start",
                "pmc_enable_periph_clk",
                "TC_Configure",
                "TC_SetRA"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "configure_timer_000803fc"
        },
        "FUN_00083630": {
            "renaming": {
                "FUN_00083630": "add_data_to_list_00083630",
                "param_1": "data",
                "param_2": "list_pointer",
                "param_3": "list_size",
                "param_4": "list_capacity",
                "puVar1": "list",
                "uVar2": "list_index",
                "iVar3": "global_impure_ptr",
                "uVar4": "bit_mask",
                "DAT_000836d4": "unknown_value",
                "PTR__global_impure_ptr_000836d0": "global_impure_ptr_address"
            },
            "code": "unsigned int add_data_to_list_00083630(int data, unsigned int *list_pointer, unsigned int list_size, unsigned int list_capacity){\n    unsigned int *list;\n    unsigned int list_index;\n    unsigned int bit_mask;\n    unsigned int list_end;\n\n    list = (unsigned int *)*list_pointer;\n    if (list == NULL){\n        list = (unsigned int *)(*(int *)PTR__global_impure_ptr_000836d0 + 0x14c);\n        *(unsigned int **)(*(int *)PTR__global_impure_ptr_000836d0 + 0x148) = list;\n    }\n    list_index = list[1];\n    if (list_size <= list_index){\n        if (DAT_000836d4 != 0){\n            list = (unsigned int *)malloc(400);\n            if (list != NULL){\n                *list = *(unsigned int *)(*(int *)PTR__global_impure_ptr_000836d0 + 0x148);\n                list[1] = 0;\n                *(unsigned int **)(*(int *)PTR__global_impure_ptr_000836d0 + 0x148) = list;\n                list[0x62] = 0;\n                list[99] = 0;\n                goto LAB_00083686;\n            }\n        }\n        return 0xffffffff;\n    }\n    LAB_00083686:\n    if (data != 0){\n        bit_mask = 1 << (list_index & 0xff);\n        list[list_index + 0x22] = list_capacity;\n        list[0x62] |= bit_mask;\n        list[list_index + 0x42] = list_size;\n        if (data == 2){\n            list[99] = bit_mask | list[99];\n        }\n    }\n    list[1] = list_index + 1;\n    list[list_index + 2] = list_capacity;\n    *list_pointer = (unsigned int)list;\n    return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083630",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_data_to_list_00083630"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "readUntil_00081214",
                "this": "stream",
                "terminator": "terminator",
                "iVar1": "currentChar",
                "__return_storage_ptr__": "__return_storage_ptr__",
                "PTR_DAT_00081240": "PTR_DAT_00081240"
            },
            "code": "String* __thiscall readUntil_00081214(String* __return_storage_ptr__, Stream* stream, char terminator)\n{\n  int currentChar;\n  String::String(__return_storage_ptr__, PTR_DAT_00081240);\n  while (true) {\n    currentChar = timedRead(stream);\n    if ((currentChar < 0) || (currentChar == terminator)) {\n      break;\n    }\n    String::concat(__return_storage_ptr__, (char)currentChar);\n  }\n  return __return_storage_ptr__;\n}",
            "called": [
                "concat",
                "String",
                "timedRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readUntil_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_or_return_error_code_0008439c",
                "param_1": "output_buffer",
                "param_2": "byte_to_write",
                "param_3": "buffer_size",
                "*param_1": "*output_buffer",
                "*param_2": "*byte_to_write"
            },
            "code": "int write_byte_or_return_error_code_0008439c(int *output_buffer, unsigned char byte_to_write, uint buffer_size){\n  if (output_buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *output_buffer = (int)byte_to_write;\n    return 1;\n  }\n  *output_buffer = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_code_0008439c"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "seek_and_update_file_position_0008427c",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "seek_result",
                "uVar2": "flag_mask"
            },
            "code": "void seek_and_update_file_position_0008427c(int file_descriptor, int* buffer_address) {\n  int seek_result;\n  ushort flag_mask;\n\n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(buffer_address + 0xe));\n  if (seek_result == -1) {\n    flag_mask = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  }\n  else {\n    flag_mask = *(ushort *)(buffer_address + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(buffer_address + 0x50) = seek_result;\n  }\n  *(ushort *)(buffer_address + 0xc) = flag_mask;\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_file_position_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "data_index",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "updated_data",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_000809be(int data_index, uint32_t update_type, uint32_t update_value)\n{\n  uint32_t updated_data;\n  uint32_t *data_ptr = (uint32_t *)(data_index + 0x70);\n  *(uint32_t *)(data_index + 0x44) = update_value;\n  switch(update_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      updated_data = *data_ptr & *data_ptr & ~update_value;\n      break;\n    case 2:\n      updated_data = *data_ptr | update_value;\n      break;\n    default:\n      goto unknown_update_type;\n  }\n  *data_ptr = updated_data;\n  unknown_update_type:\n  *(uint32_t *)(data_index + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_data_000809be"
        },
        "FUN_00080d70": {
            "renaming": {
                "FUN_00080d70": "execute_isr_if_defined_00080d70",
                "PTR_gpf_isr_00080d7c": "isr_ptr"
            },
            "code": "void execute_isr_if_defined_00080d70(void)\n{\n  code** PTR_gpf_isr_00080d7c = *(code**)(PTR_gpf_isr_00080d7c);\n  if (PTR_gpf_isr_00080d7c != (code*)0x0)\n  {\n    (*PTR_gpf_isr_00080d7c)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d70",
            "calling": [],
            "imported": false,
            "current_name": "execute_isr_if_defined_00080d70"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "reverse_and_find_character_000840f8",
                "__s": "input",
                "__c": "character",
                "__n": "size",
                "puVar1": "end_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "word",
                "pbVar5": "current_byte",
                "pbVar6": "end_byte",
                "uVar7": "comparison_mask",
                "bVar8": "comparison_result"
            },
            "code": "void * reverse_and_find_character_000840f8(void *input, int character, size_t size)\n{\n    uint *current_word;\n    uint *end_word;\n    uint character_mask = character & 0xff;\n\n    if (((uint)input & 3) == 0) {\n        current_word = (uint *)input;\n        end_word = (uint *)size;\n        if ((uint *)0x3 < size) {\n            uint comparison_mask = character_mask | character_mask << 8 | character_mask << 0x10 | character_mask << 0x18;\n            do {\n                uint word = *current_word ^ comparison_mask;\n                if ((word + 0xfefefeff & ~word & 0x80808080) != 0) break;\n                size -= 4;\n                current_word++;\n                end_word = (uint *)size;\n            } while ((uint *)0x3 < size);\n        }\n        input = end_word;\n        byte *end_byte = (byte *)end_word - 1;\n        if ((end_word != (uint *)0x0) && (*current_word != character_mask)) {\n            byte *current_byte = (byte *)0x0;\n            do {\n                input = (void *)((int)input + 1);\n                if (current_byte == end_byte) goto END;\n                current_byte++;\n            } while (*(byte *)input != character_mask);\n        }\n    }\n    else if (size == 0) {\n        input = (uint *)0x0;\n    }\n    else {\n        if (*(byte *)input != character_mask) {\n            current_word = (uint *)((int)input + 1);\n            size--;\n            do {\n                input = current_word;\n                if (((uint)input & 3) == 0) break;\n                if ((uint *)size == (uint *)0x0) goto END;\n                size--;\n                current_word = (uint *)((int)input + 1);\n            } while (*(byte *)input != character_mask);\n        }\n    }\n    END:\n    return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_and_find_character_000840f8"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "receive_and_transmit_data_000813e4",
                "this": "uart",
                "pRVar1": "buffer",
                "RVar2": "uart_status",
                "_pUart": "uart_pointer",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void __thiscall receive_and_transmit_data_000813e4(UARTClass *uart){\n  RingBuffer *rx_buffer = uart->_rx_buffer;\n  RingBuffer *tx_buffer = uart->_tx_buffer;\n  RoReg uart_status = uart->_pUart->UART_SR;\n  \n  if ((int)(uart_status << 0x1f) < 0) {\n    RingBuffer::store_char(rx_buffer, (uint8_t)uart->_pUart->UART_RHR);\n  }\n  \n  if ((int)(uart_status << 0x1e) < 0) {\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      uint8_t next_char = tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n      uart->_pUart->UART_THR = (uint)next_char;\n    } else {\n      uart->_pUart->UART_IDR = 2;\n    }\n  }\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "USART1_Handler",
                "USART3_Handler",
                "USART0_Handler",
                "UART_Handler"
            ],
            "imported": false,
            "current_name": "receive_and_transmit_data_000813e4"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "__sbprintf",
                "__aeabi_uldivmod",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "memchr",
                "__sinit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest8",
                "puVar2": "dest32",
                "puVar3": "dest32",
                "puVar4": "dest8",
                "puVar5": "src32",
                "puVar6": "src8",
                "uVar7": "i",
                "uVar8": "remaining_size",
                "bVar9": "flag"
            },
            "code": "void * copy_memory_00081d48(void *destination, const void *source, size_t size)\n{\n    uint32_t *dest32 = (uint32_t *)destination;\n    const uint32_t *src32 = (const uint32_t *)source;\n    uint8_t *dest8;\n    const uint8_t *src8;\n    size_t i;\n\n    if ((((uint32_t)source | (uint32_t)destination) & 3) != 0)\n    {\n        if (size < 8)\n        {\n            dest8 = (uint8_t *)destination;\n            src8 = (const uint8_t *)source;\n            for (i = 0; i < size; i++)\n            {\n                *dest8++ = *src8++;\n            }\n            return destination;\n        }\n        if ((((uint32_t)source & 3) != 0) && (((uint32_t)destination & 3) != 0))\n        {\n            *destination++ = *source++;\n            size--;\n        }\n    }\n\n    for (i = 0; i < size / 4; i++)\n    {\n        *dest32++ = *src32++;\n    }\n\n    dest8 = (uint8_t *)dest32;\n    src8 = (const uint8_t *)src32;\n    for (i = 0; i < size % 4; i++)\n    {\n        *dest8++ = *src8++;\n    }\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_00081d48"
        },
        "FUN_00083fbc": {
            "renaming": {
                "FUN_00083fbc": "find_and_execute_code_blocks_00083fbc",
                "param_1": "base_address",
                "param_2": "execute_code_block",
                "uVar1": "execute_result",
                "iVar2": "block_address",
                "iVar3": "block_count",
                "uVar4": "result",
                "piVar5": "block_ptr"
            },
            "code": "uint find_and_execute_code_blocks_00083fbc(int base_address, code *execute_code_block) {\n  uint result = 0;\n  int *block_ptr = (int *)(base_address + 0x2e0);\n  if (block_ptr != (int *)0x0) {\n    do {\n      int block_address = block_ptr[2];\n      int block_count = block_ptr[1] + -1;\n      if (-1 < block_count) {\n        do {\n          block_count = block_count + -1;\n          if ((1 < *(ushort *)(block_address + 0xc)) && (*(short *)(block_address + 0xe) != -1)) {\n            uint execute_result = (*execute_code_block)(block_address);\n            result = result | execute_result;\n          }\n          block_address = block_address + 0x68;\n        } while (block_count != -1);\n      }\n      block_ptr = (int *)*block_ptr;\n    } while (block_ptr != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083fbc",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "find_and_execute_code_blocks_00083fbc"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "get_file_status_00084494",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "status_info",
                "puVar1": "error_ptr",
                "iVar2": "file_status"
            },
            "code": "void get_file_status_00084494(int *error_code, int file_descriptor, stat *status_info)\n{\n  undefined *error_ptr;\n  int file_status;\n  error_ptr = PTR_errno_000844b8;\n  *(undefined4 *)PTR_errno_000844b8 = 0;\n  file_status = _fstat(file_descriptor, status_info);\n  if ((file_status == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_00084494"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "allocate_memory_00084018",
                "param_1": "file_descriptor",
                "param_2": "memory",
                "uVar1": "flags",
                "iVar2": "file_status",
                "iVar3": "allocated_memory",
                "uVar4": "flags_uint",
                "bVar5": "is_special_file",
                "auStack_54": "stack_array",
                "local_50": "allocation_size"
            },
            "code": "void allocate_memory_00084018(int file_descriptor, int *memory)\n{\n    ushort flags = *(ushort *)(memory + 3);\n    uint flags_uint = (uint)flags;\n    bool is_special_file = false;\n    undefined stack_array[4];\n    uint allocation_size;\n    \n    if ((int)(flags_uint << 0x1e) < 0) {\n        *memory = (int)memory + 0x43;\n        memory[4] = (int)memory + 0x43;\n        memory[5] = 1;\n        return;\n    }\n    \n    if (-1 < *(short *)((int)memory + 0xe)) {\n        int file_status = _fstat_r(file_descriptor,(int)*(short *)((int)memory + 0xe),stack_array);\n        if (-1 < file_status) {\n            is_special_file = (allocation_size & 0xf000) == 0x2000;\n            if (((allocation_size & 0xf000) == 0x8000) && (memory[10] == DAT_000840f4)) {\n                allocation_size = 0x400;\n                *(ushort *)(memory + 3) = flags | 0x400;\n                memory[0x13] = 0x400;\n            }\n            else {\n                allocation_size = 0x400;\n                *(ushort *)(memory + 3) = flags | 0x800;\n            }\n            goto LAB_00084074;\n        }\n        flags = *(ushort *)(memory + 3);\n        flags_uint = (uint)flags;\n    }\n    \n    *(ushort *)(memory + 3) = flags | 0x800;\n    \n    if ((flags_uint & 0x80) == 0) {\n        allocation_size = 0x400;\n    }\n    else {\n        allocation_size = 0x40;\n    }\n    is_special_file = false;\n    \nLAB_00084074:\n    int *allocated_memory = _malloc_r(file_descriptor, allocation_size);\n    flags = *(ushort *)(memory + 3);\n    \n    if (allocated_memory == 0) {\n        if (-1 < (int)((uint)flags << 0x16)) {\n            *(ushort *)(memory + 3) = flags | 2;\n            *memory = (int)memory + 0x43;\n            memory[4] = (int)memory + 0x43;\n            memory[5] = 1;\n        }\n    }\n    else {\n        *(undefined4 *)(file_descriptor + 0x3c) = DAT_000840f0;\n        *(ushort *)(memory + 3) = flags | 0x80;\n        *memory = allocated_memory;\n        memory[4] = allocated_memory;\n        memory[5] = allocation_size;\n        if ((is_special_file) && (_isatty_r(file_descriptor,(int)*(short *)((int)memory + 0xe)) != 0)) {\n            *(ushort *)(memory + 3) = *(ushort *)(memory + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "convertStringToLong_000815de",
                "this": "str",
                "lVar1": "result",
                "buffer": "buffer"
            },
            "code": "long convertStringToLong_000815de(String* str) {\n  long result = 0;\n  if (str->buffer != nullptr) {\n    result = atol(str->buffer);\n  }\n  return result;\n}",
            "called": [
                "atol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000815de"
        },
        "FUN_00080578": {
            "renaming": {
                "FUN_00080578": "servoTimerHandler_00080578",
                "_timer3": "timer3",
                "DAT_00080584": "servoPosition",
                "'\\x02'": "SERVO_MODE"
            },
            "code": "void servoTimerHandler_00080578(void)\n{\n  Servo_Handler(timer3, DAT_00080584, SERVO_MODE);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080578",
            "calling": [],
            "imported": false,
            "current_name": "servoTimerHandler_00080578"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "signal_handler_000841e4",
                "__sig": "signal",
                "iVar1": "result",
                "_FUN_000841e4_r": "_signal_handler_r"
            },
            "code": "int signal_handler_000841e4(int signal) {\n  int result = _signal_handler_000841e4_r(*(undefined4 *)PTR__impure_ptr_000841f0, signal);\n  return result;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "signal_handler_000841e4"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_mb_cur_max_0008400c",
                "PTR___mb_cur_max_00084014": "mb_cur_max_ptr"
            },
            "code": "int get_mb_cur_max_0008400c(void)\n{\n    int *PTR___mb_cur_max_00084014 = PTR___mb_cur_max_00084014;\n    return *PTR___mb_cur_max_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_mb_cur_max_0008400c"
        },
        "FUN_00080e60": {
            "renaming": {
                "FUN_00080e60": "wait_forever_00080e60"
            },
            "code": "void wait_forever_00080e60(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e60",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00080e60"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "createString_000814d0",
                "this": "strObj",
                "cstr": "cString",
                "length": "strLen",
                "uVar1": "isReserved"
            },
            "code": "String* __thiscall String::createString_000814d0(String* strObj, char* cstr, uint length) {\\n    uchar isReserved = reserveMemory(strObj, length);\\n    if (isReserved == \"\\0\") {\\n        invalidate(strObj);\\n    }\\n    else {\\n        strObj->len = length;\\n        strcpy(strObj->buffer, cstr);\\n    }\\n    return strObj;\\n}",
            "called": [
                "strcpy",
                "reserve",
                "invalidate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "createString_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_initialized_data_to_RAM_and_clear_bss_and_call_main_00080c20",
                "puVar1": "initialized_data_dest_ptr",
                "puVar2": "initialized_data_src_ptr",
                "iVar3": "bss_counter",
                "puVar4": "bss_ptr",
                "PTR_banzai_00080c7c": "initialized_data_start",
                "PTR__etext_00080c78": "initialized_data_end",
                "PTR_completed_7857_00080c80": "bss_start",
                "PTR_completed_7857_00080c84": "bss_end",
                "DAT_00080c90": "exception_table_start",
                "PTR__ebss_00080c88": "bss_end_marker",
                "PTR_exception_table_00080c8c": "exception_table_start_marker",
                "DAT_00080c94": "main_function_ptr"
            },
            "code": "void copy_initialized_data_to_RAM_and_clear_bss_and_call_main_00080c20(void)\n{\n  uint32_t *initialized_data_ptr;\n  uint32_t *PTR__etext_00080c78_ptr;\n  uint32_t *bss_ptr;\n  uint32_t *PTR_completed_7857_00080c84_ptr;\n  uint32_t *exception_table_ptr;\n  uint32_t *DAT_00080c94;\n  initialized_data_ptr = PTR_banzai_00080c7c;\n  PTR__etext_00080c78_ptr = PTR_completed_7857_00080c84;\n  bss_ptr = PTR_completed_7857_00080c80;\n  PTR_completed_7857_00080c84_ptr = PTR__ebss_00080c88;\n  exception_table_ptr = PTR_exception_table_00080c8c + -0x20000000;\n  DAT_00080c94 = DAT_00080c94;\n  if (initialized_data_ptr != PTR__etext_00080c78_ptr) {\n    while (initialized_data_ptr < PTR__etext_00080c78_ptr) {\n      *initialized_data_ptr++ = *PTR__etext_00080c78++;\n    }\n  }\n  while (bss_ptr < PTR_completed_7857_00080c84_ptr) {\n    *bss_ptr++ = 0;\n  }\n  *(uint32_t *)(DAT_00080c90 + 8) = (uint32_t)exception_table_ptr & 0x1fffff80;\n  if (exception_table_ptr < (uint32_t *)0x100000) {\n    *(uint32_t *)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while (1) {\n    // Infinite loop\n  }\n}",
            "called": [
                "main",
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_initialized_data_to_RAM_and_clear_bss_and_call_main_00080c20"
        },
        "FUN_00080e62": {
            "renaming": {
                "FUN_00080e62": "infiniteLoop_00080e62"
            },
            "code": "void infiniteLoop_00080e62(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e62",
            "calling": [],
            "imported": false,
            "current_name": "infiniteLoop_00080e62"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "update_servo_position_0008044c",
                "timer": "timer_sequence",
                "tc": "timer_counter",
                "channel": "servo_channel",
                "bVar1": "servo_count",
                "puVar2": "servo_channel_ptr",
                "puVar3": "servo_count_ptr",
                "puVar4": "servos_ptr",
                "uVar5": "servo_index",
                "RVar6": "timer_register",
                "iVar7": "servo_offset"
            },
            "code": "void update_servo_position_0008044c(timer16_Sequence_t timer, Tc *timer_counter, uint8_t servo_channel) {\n  byte servo_count;\n  uint32_t system_clock_frequency;\n  uint8_t *servo_channel_ptr;\n  uint8_t *servo_count_ptr;\n  int servo_index;\n  int servo_offset;\n  int servo_value;\n  RwReg timer_register;\n\n  servo_count_ptr = PTR_ServoCount_00080554;\n  servo_channel_ptr = PTR_Channel_00080544;\n  servo_index = (int)timer;\n  if ((servo_channel_ptr[servo_index] & 0x80) == 0) {\n    servo_offset = servo_index * 0xc;\n    if (((char)servo_channel_ptr[servo_index] + servo_offset < (int)(uint8_t)*servo_count_ptr) &&\n        ((int)((uint32_t)(uint8_t)PTR_servos_00080548[((char)servo_channel_ptr[servo_index] + servo_offset) * 8] << 0x19) < 0)) {\n      digitalWrite((uint8_t)PTR_servos_00080548[(servo_offset + (char)servo_channel_ptr[servo_index]) * 8] & 0x3f,0);\n    }\n  } else {\n    timer_counter->TC_CHANNEL[servo_channel].TC_CCR = timer_counter->TC_CHANNEL[servo_channel].TC_CCR | 4;\n  }\n  servo_count = *servo_count_ptr;\n  servo_channel_ptr[servo_index] = servo_channel_ptr[servo_index] + 1;\n  servo_offset = servo_index * 0xc;\n  if (((char)servo_channel_ptr[servo_index] + servo_offset < (int)(uint8_t)servo_count) && ((char)PTR_Channel_00080544[servo_index] < '\f')) {\n    servo_value = *(int *)(PTR_servos_00080548 + ((char)PTR_Channel_00080544[servo_index] + servo_offset) * 8 + 4);\n    timer_counter->TC_CHANNEL[servo_channel].TC_RA = timer_counter->TC_CHANNEL[servo_channel].TC_CV + servo_value;\n    if (-1 < (int)((uint32_t)(uint8_t)PTR_servos_00080548[((char)servo_channel_ptr[servo_index] + servo_offset) * 8] << 0x19)) {\n      return;\n    }\n    digitalWrite((uint8_t)PTR_servos_00080548[(servo_offset + (char)servo_channel_ptr[servo_index]) * 8] & 0x3f,1);\n    return;\n  }\n  system_clock_frequency = *(uint32_t *)PTR_SystemCoreClock_0008054c;\n  servo_value = (system_clock_frequency / DAT_00080550) * 20000 >> 5;\n  if (servo_value <= timer_counter->TC_CHANNEL[servo_channel].TC_CV + 4) {\n    servo_value = timer_counter->TC_CHANNEL[servo_channel].TC_CV + 4;\n  }\n  timer_counter->TC_CHANNEL[servo_channel].TC_RA = servo_value;\n  servo_channel_ptr[servo_index] = 0xff;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [
                "TC5_Handler",
                "TC3_Handler",
                "TC4_Handler",
                "TC2_Handler",
                "TC0_Handler"
            ],
            "imported": false,
            "current_name": "update_servo_position_0008044c"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "get_process_id_00080efe"
            },
            "code": "\\_\\_pid_t get_process_id_00080efe(void)\\n{\\n  return -1;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_memcpy_00081e34",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "iVar1": "index",
                "puVar2": "destination_ptr_aligned",
                "puVar3": "source_ptr_aligned",
                "puVar4": "destination_ptr_unaligned",
                "puVar5": "destination_ptr",
                "puVar7": "source_ptr",
                "uVar6": "remaining_bytes",
                "uVar8": "num_bytes",
                "undefined4": "undefined4",
                "undefined": "undefined"
            },
            "code": "void *reverse_memcpy_00081e34(void *destination, void *source, size_t num_bytes) {\n    int index;\n    uint remaining_bytes;\n    uint i;\n    undefined *destination_ptr;\n    undefined *source_ptr;\n    undefined4 *destination_ptr_aligned;\n    undefined4 *source_ptr_aligned;\n    undefined4 *destination_ptr_unaligned;\n    undefined4 *source_ptr_unaligned;\n\n    if ((source < destination) && ((uint)source + num_bytes > (uint)destination)) {\n        destination_ptr = (undefined *)((int)destination + num_bytes);\n        index = num_bytes - 1;\n        if (num_bytes != 0) {\n            do {\n                source_ptr = source_ptr + -1;\n                index = index + -1;\n                destination_ptr = destination_ptr + -1;\n                *destination_ptr = *source_ptr;\n            } while (index != -1);\n        }\n        return destination;\n    }\n    destination_ptr_aligned = (undefined4 *)destination;\n    if (num_bytes < 0x10) {\n        if (num_bytes == 0) {\n            return destination;\n        }\n    }\n    else if ((((uint)destination | (uint)source) & 3) == 0) {\n        source_ptr_aligned = (undefined4 *)source;\n        do {\n            destination_ptr_unaligned = destination_ptr_aligned + 4;\n            *destination_ptr_aligned = *source_ptr_aligned;\n            destination_ptr_aligned[1] = source_ptr_aligned[1];\n            destination_ptr_aligned[2] = source_ptr_aligned[2];\n            destination_ptr_aligned[3] = source_ptr_aligned[3];\n            destination_ptr_aligned = destination_ptr_unaligned;\n            source_ptr_aligned = source_ptr_aligned + 4;\n        } while (destination_ptr_unaligned != (undefined4 *)((int)destination + ((num_bytes - 0x10) & 0xfffffff0) + 0x10));\n        remaining_bytes = num_bytes & 0xf;\n        index = (((num_bytes - 0x10) >> 4) + 1) * 0x10;\n        source = (void *)((int)source + index);\n        destination_ptr_aligned = (undefined4 *)(index + (int)destination);\n        destination_ptr_unaligned = destination_ptr_aligned;\n        source_ptr_unaligned = (undefined4 *)source;\n        if (3 < remaining_bytes) {\n            do {\n                remaining_bytes = remaining_bytes - 4;\n                *destination_ptr_unaligned = *source_ptr_unaligned;\n                destination_ptr_unaligned = destination_ptr_unaligned + 1;\n                source_ptr_unaligned = source_ptr_unaligned + 1;\n            } while (3 < remaining_bytes);\n            index = ((remaining_bytes - 4) & 0xfffffffc) + 4;\n            destination_ptr_aligned = (undefined4 *)((int)destination_ptr_aligned + index);\n            source = (void *)((int)source + index);\n            remaining_bytes = num_bytes & 3;\n        }\n        num_bytes = remaining_bytes;\n        if (num_bytes == 0) {\n            return destination;\n        }\n    }\n    destination_ptr_unaligned = destination_ptr_aligned;\n    do {\n        source_ptr_unaligned = (undefined4 *)((int)destination_ptr_unaligned + 1);\n        *(undefined *)destination_ptr_unaligned = *(undefined *)source;\n        source = (undefined4 *)((int)source + 1);\n        destination_ptr_unaligned = source_ptr_unaligned;\n    } while (source_ptr_unaligned != (undefined4 *)(num_bytes + (int)destination_ptr_aligned));\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_memcpy_00081e34"
        },
        "FUN_00080e66": {
            "renaming": {
                "FUN_00080e66": "infinite_loop_00080e66"
            },
            "code": "void infinite_loop_00080e66(void)\n{\n  while(true){\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e66",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_00080e66"
        },
        "FUN_000826e8": {
            "renaming": {
                "FUN_000826e8": "convert_string_to_int_000826e8",
                "param_1": "result",
                "param_2": "input",
                "param_3": "end_ptr",
                "param_4": "base",
                "bVar1": "current_char_type",
                "bVar2": "is_negative",
                "uVar3": "value",
                "pbVar4": "current_ptr",
                "uVar5": "digit_value",
                "pbVar6": "current_char_ptr",
                "iVar7": "hex_offset",
                "iVar8": "overflow_check",
                "uVar9": "max_dividend",
                "uVar10": "max_value"
            },
            "code": "uint convert_string_to_int_000826e8(undefined4 *result, byte *input, byte **end_ptr, uint base) {\n  byte current_char;\n  byte current_char_type;\n  uint max_value;\n  uint max_dividend;\n  uint value = 0;\n  int sign = 1;\n  int digit_value;\n  int is_overflow = 0;\n  byte *current_ptr = input;\n  \n  do {\n    current_char = *current_ptr;\n    current_char_type = *(byte *)(*(int *)PTR___ctype_ptr___000827f8 + (uint)current_char + 1);\n  } while ((current_char_type & 8) != 0 && (current_ptr++, 1));\n  \n  if (current_char == 0x2d) {\n    sign = -1;\n    current_ptr++;\n    current_char = *current_ptr;\n  } else if (current_char == 0x2b) {\n    current_ptr++;\n    current_char = *current_ptr;\n  }\n  \n  if ((base & 0xffffffef) == 0) {\n    if (current_char == 0x30) {\n      if ((*current_ptr & 0xdf) == 0x58) {\n        current_ptr += 2;\n        base = 0x10;\n      } else if (base == 0) {\n        base = 8;\n      }\n    } else if (base == 0) {\n      base = 10;\n    }\n  }\n  \n  if (sign == -1) {\n    max_value = 0x80000000;\n    max_dividend = 0x80000000 / base;\n  } else {\n    max_value = 0x7fffffff;\n    max_dividend = 0x7fffffff / base;\n  }\n  \n  while (1) {\n    current_char = *current_ptr;\n    current_char_type = *(byte *)(*(int *)PTR___ctype_ptr___000827f8 + (uint)current_char + 1);\n    \n    if ((current_char_type & 4) == 0) {\n      if ((current_char_type & 3) == 0) {\n        break;\n      }\n      if ((current_char_type & 3) == 1) {\n        digit_value = 0x37;\n      } else {\n        digit_value = 0x57;\n      }\n      digit_value = (int)current_char - digit_value;\n    } else {\n      digit_value = (int)current_char - 0x30;\n    }\n    \n    if (digit_value >= (int)base) {\n      break;\n    }\n    \n    if (is_overflow != -1) {\n      if ((max_dividend <= value && value != max_dividend) || (value == max_dividend && ((int)(max_value - base * max_dividend) < digit_value))) {\n        is_overflow = -1;\n      } else {\n        value = base * value + digit_value;\n        is_overflow = 1;\n      }\n    }\n    \n    current_ptr++;\n  }\n  \n  if (is_overflow == -1) {\n    if (sign == -1) {\n      value = 0x80000000;\n    } else {\n      value = 0x7fffffff;\n    }\n    *result = 0x22;\n    if (end_ptr == (byte **)0x0) {\n      return value;\n    }\n  } else {\n    if (sign == -1) {\n      value = -value;\n    }\n    if (end_ptr == (byte **)0x0) {\n      return value;\n    }\n    if (is_overflow == 0) {\n      goto LAB_0008278c;\n    }\n  }\n  current_ptr--;\n  \nLAB_0008278c:\n  *end_ptr = current_ptr;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000826e8",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "convert_string_to_int_000826e8"
        },
        "FUN_00080df0": {
            "renaming": {
                "FUN_00080df0": "iterateCallbacks_00080df0",
                "uVar1": "leadingZeroes",
                "uVar2": "callbacksPtr",
                "bitMask": "bitMask",
                "PTR_callbacksPioC_00080e24": "PTR_callbacksPioC_00080e24",
                "DAT_00080e20": "DAT_00080e20"
            },
            "code": "void iterateCallbacks_00080df0(void)\n{\n  uint bitMask;\n  uint callbacksPtr = *(uint *)(DAT_00080e20 + 0x4c);\n  while( true ) {\n    uint leadingZeroes = count_leading_zeroes(callbacksPtr);\n    if (leadingZeroes > 0x1f) break;\n    uint bitIndex = 0x1f - leadingZeroes & 0xff;\n    code* callback = *(code **)(PTR_callbacksPioC_00080e24 + bitIndex * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bitMask = ~(1 << bitIndex);\n    callbacksPtr = callbacksPtr & bitMask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080df0",
            "calling": [],
            "imported": false,
            "current_name": "iterateCallbacks_00080df0"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "initialize_if_not_initialized_00083850",
                "param_1": "data_ptr",
                "param_2": "flags_ptr",
                "PTR_": "",
                "DAT_": "",
                "__sinit": "__initialize_data",
                "__sflush_r": "__flush_data"
            },
            "code": "void initialize_if_not_initialized_00083850(int data_ptr, int flags_ptr)\n{\n    if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n        __initialize_data();\n    }\n    if (*(short *)(flags_ptr + 0xc) == 0) {\n        return;\n    }\n    __flush_data(data_ptr);\n    return;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "__sbprintf",
                "__swbuf_r",
                "_fclose_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "initialize_if_not_initialized_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "main_loop_000815ec",
                "in_r0": "ctx",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "delay": "delay",
                "setup": "setup",
                "DAT_00081614": "continue_loop",
                "serialEventRun": "serialEventRun"
            },
            "code": "int main_loop_000815ec(void)\n{\n  EVP_PKEY_CTX *ctx;\n  _watchdogDefaultSetup();\n  initialize(ctx);\n  initializeVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_00081614 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "serialEventRun",
                "setup",
                "_watchdogDefaultSetup",
                "delay",
                "loop",
                "init",
                "initVariant"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_000815ec"
        },
        "FUN_000827fc": {
            "renaming": {
                "FUN_000827fc": "convertStringToLong_000827fc",
                "__nptr": "inputString",
                "__endptr": "endPtr",
                "__base": "base",
                "lVar1": "result"
            },
            "code": "long convertStringToLong_000827fc(char* inputString, char** endPtr, int base) {\n  long result = strtol(*(undefined4 *)PTR__impure_ptr_00082810, inputString, endPtr, base);\n  return result;\n}",
            "called": [
                "_strtol_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000827fc",
            "calling": [
                "atol"
            ],
            "imported": false,
            "current_name": "convertStringToLong_000827fc"
        },
        "FUN_00080588": {
            "renaming": {
                "FUN_00080588": "servo_handler_timer4_00080588",
                "DAT_00080594": "data",
                "PTR_": "no change"
            },
            "code": "void servo_handler_timer4_00080588(int timer, int DAT_00080594, char value) {\n  Servo_Handler(timer, DAT_00080594, value);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080588",
            "calling": [],
            "imported": false,
            "current_name": "servo_handler_timer4_00080588"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_values_00080d3e",
                "param_1": "data_pointer",
                "param_2": "new_value1",
                "param_3": "new_value2",
                "param_4": "new_value3",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_1 + 4)": "*data_pointer_as_uint",
                "param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c": "current_value | new_value1 | ((new_value2 & 0xf) << 0x18) | ((new_value3 & 3) << 0x1c)",
                "uint": ""
            },
            "code": "void update_values_00080d3e(int data_pointer, uint new_value1, uint new_value2, uint new_value3) {\n  uint* data_pointer_as_uint = (uint*)(data_pointer + 4);\n  uint current_value = *data_pointer_as_uint;\n  uint updated_value = current_value | new_value1 | ((new_value2 & 0xf) << 0x18) | ((new_value3 & 3) << 0x1c);\n  *data_pointer_as_uint = updated_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_values_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438::FUN_00081438": "initializeUsart",
                "this": "self",
                "Usart": "usartPeripheral",
                "dwIrq": "interruptNumber",
                "dwId": "peripheralId",
                "RingBuffer": "ringBuffer",
                "pRx_buffer": "rxRingBuffer",
                "pTx_buffer": "txRingBuffer",
                "PTR_PTR_write_1_00081458": "ptrPtrWrite",
                "FUN_00081438": "initializeUsart_00081438"
            },
            "code": "initializeUsart_00081438 * __thiscall initializeUsart_00081438(initializeUsart_00081438 *this, Usart *pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer *pRxBuffer, RingBuffer *pTxBuffer)\n{\n  UARTClass::UARTClass(&this->uartClass, (Uart *)pUsart, dwIrq, dwId, pRxBuffer, pTxBuffer);\n  *(undefined **)&this->uartClass = PTR_PTR_write_1_00081458;\n  this->usart = pUsart;\n  return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initializeUsart_00081438"
        },
        "FUN_000841f4": {
            "renaming": {
                "FUN_000841f4": "kill_process_if_running_000841f4",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_type",
                "puVar1": "errno_ptr"
            },
            "code": "void kill_process_if_running_000841f4(int *error_code, int process_id, int signal_type) {\n\tint *errno_ptr;\n\terrno_ptr = PTR_errno_00084218;\n\t*(int *)PTR_errno_00084218 = 0;\n\t_kill(process_id, signal_type);\n\tif ((process_id == -1) && (*(int *)errno_ptr != 0)) {\n\t\t*error_code = *(int *)errno_ptr;\n\t}\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841f4",
            "calling": [
                "_raise_r",
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_000841f4"
        },
        "FUN_000812a0": {
            "renaming": {
                "FUN_000812a0": "wait_for_tx_buffer_empty_000812a0",
                "this": "self",
                "_tx_buffer": "tx_buffer",
                "_iHead": "tx_buffer_head",
                "_iTail": "tx_buffer_tail",
                "_pUart": "UART_SR"
            },
            "code": "void __thiscall UARTClass::wait_for_tx_buffer_empty_000812a0(UARTClass *this)\n{\n  while (this->tx_buffer_head != this->tx_buffer_tail);\n  while (-1 < (int)(this->UART_SR << 0x16));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812a0",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_tx_buffer_empty_000812a0"
        },
        "FUN_0008130c": {
            "renaming": {
                "FUN_0008130c": "updateRxBuffer_0008130c",
                "_rx_buffer": "rx_buffer",
                "_iHead": "rx_buffer_head",
                "_iTail": "rx_buffer_tail",
                "_dwIrq": "irq",
                "_dwId": "id"
            },
            "code": "void __thiscall UARTClass::updateRxBuffer_0008130c(UARTClass *this)\n{\n  this->rx_buffer_head = this->rx_buffer_tail;\n  (**(void (**)(void))(this + 0x14))();\n  *(int *)(DAT_00081344 + (((uint)(int)this->irq >> 5) + 0x20) * 4) = 1 << (uint)(byte)(this->irq & 0x1f);\n  pmc_disable_periph_clk(this->id);\n  return;\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008130c",
            "calling": [],
            "imported": false,
            "current_name": "updateRxBuffer_0008130c"
        },
        "FUN_0008142e": {
            "renaming": {
                "FUN_0008142e": "initialize_USART_0008142e",
                "dwBaudRate": "baudRate"
            },
            "code": "void __thiscall initialize_USART_0008142e(USARTClass *this, uint32_t baudRate) {\n  UARTClass::init(&this->super_UARTClass, baudRate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008142e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_USART_0008142e"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "*(int*)(base_address + 0x14)",
                "1 << (param_2 & 0xff)": "bit_to_set",
                "return;": "return;"
            },
            "code": "void set_bit_at_position_00080d58(int base_address, uint8_t bit_position) {\n    int* target_address = (int*)(base_address + 0x14);\n    int bit_to_set = 1 << (bit_position & 0xff);\n    *target_address = bit_to_set;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081084": {
            "renaming": {
                "__thiscall Print::FUN_00081084": "printBuffer",
                "this": "printObj",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentPrintObj",
                "sVar2": "bytesPrinted",
                "FUN_00081084": "printBuffer_00081084"
            },
            "code": "size_t __thiscall printBuffer_00081084(Print *printObj, uint8_t *buffer, size_t bufferSize) {\n    Print *currentPrintObj = printObj;\n    size_t bytesPrinted = 0;\n    while ((bytesPrinted != bufferSize && (currentPrintObj = (Print *)(**printObj->_vptr_Print)(currentPrintObj, (uint)buffer[bytesPrinted]), currentPrintObj != (Print *)0x0))) {\n        bytesPrinted++;\n    }\n    return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_00081084"
        },
        "FUN_00080558": {
            "renaming": {
                "FUN_00080558": "controlServoTimer1_00080558",
                "_timer1": "timer1_instance",
                "DAT_00080564": "servo_position"
            },
            "code": "void controlServoTimer1_00080558(void)\n{\n  Servo_Handler(timer1_instance, DAT_00080564, '\\0');\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080558",
            "calling": [],
            "imported": false,
            "current_name": "controlServoTimer1_00080558"
        },
        "FUN_00083708": {
            "renaming": {
                "FUN_00083708": "decode_data_00083708",
                "param_1": "data",
                "param_2": "params",
                "piVar1": "ptr1",
                "iVar2": "len",
                "uVar3": "flags",
                "uVar4": "uflags",
                "iVar5": "input_len",
                "pcVar6": "func_ptr",
                "iVar7": "ret_val",
                "diff": "diff"
            },
            "code": "int decode_data_00083708(int *data, int *params) {\n  int *ptr1;\n  int diff;\n  ushort flags;\n  uint uflags;\n  int len;\n  code *func_ptr;\n  int ret_val;\n  int input_len;\n\n  flags = *(ushort *)(params + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    input_len = params[4];\n    if (input_len == 0) {\n      return 0;\n    }\n    diff = *params;\n    if ((flags & 3) == 0) {\n      len = params[5];\n    }\n    else {\n      len = 0;\n    }\n    *params = input_len;\n    diff = diff - input_len;\n    params[2] = len;\n    do {\n      if (diff < 1) {\n        return 0;\n      }\n      len = (*(code *)params[9])(data, params[7], input_len, diff);\n      diff = diff - len;\n      input_len = input_len + len;\n    } while (0 < len);\n    *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(params + 3) = flags | 0x800;\n  if ((params[1] < 1) && (params[0xf] < 1)) {\n    return 0;\n  }\n  func_ptr = (code *)params[10];\n  if (func_ptr == (code *)0x0) {\n    return 0;\n  }\n  uflags = (uint)(flags | 0x800);\n  ret_val = *data;\n  *data = 0;\n  if ((flags & 0x1000) == 0) {\n    len = (*func_ptr)(data, params[7], uflags & 0x1000, 1);\n    if ((len == -1) && (input_len = *data, input_len != 0)) {\n      if ((input_len == 0x1d) || (input_len == 0x16)) {\n        *data = ret_val;\n        return 0;\n      }\n      *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(params + 3);\n    func_ptr = (code *)params[10];\n  }\n  else {\n    len = params[0x14];\n  }\n  if (((int)(uflags << 0x1d) < 0) && (len = len - params[1], params[0xc] != 0)) {\n    len = len - params[0xf];\n  }\n  len = (*func_ptr)(data, params[7], len, 0);\n  if (len == -1) {\n    input_len = *data;\n    if (input_len != 0) {\n      if ((input_len != 0x1d) && (input_len != 0x16)) {\n        *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(params + 3) = *(ushort *)(params + 3) & 0xf7ff;\n      *params = params[4];\n      params[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(params + 3) & 0xf7ff;\n    params[1] = 0;\n    *(ushort *)(params + 3) = flags;\n    *params = params[4];\n  }\n  else {\n    flags = *(ushort *)(params + 3) & 0xf7ff;\n    *params = params[4];\n    *(ushort *)(params + 3) = flags;\n    params[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    params[0x14] = len;\n  }\nLAB_00083774:\n  ptr1 = (int *)params[0xc];\n  *data = ret_val;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != params + 0x10) {\n    _free_r(data);\n  }\n  params[0xc] = 0;\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083708",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "decode_data_00083708"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "initial_value",
                "param_2": "decrement_by",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "result_array",
                "uVar1": "difference",
                "lVar2": "product",
                "high_bits": "high_bits",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void calculate_difference_0008458c(uint32_t initial_value, int32_t decrement_by, uint32_t factor_low, uint32_t factor_high, int32_t *result_array)\n{\n    uint64_t product = (uint64_t)factor_high << 32 | factor_low;\n    uint32_t difference = initial_value - (uint32_t)(product);\n    uint64_t high_bits = product >> 32;\n    int32_t adjusted_decrement = decrement_by - (int32_t)high_bits - (difference > initial_value);\n    result_array[0] = difference;\n    result_array[1] = adjusted_decrement;\n}\n",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "convert_wide_to_multibyte_string_0008434c",
                "param_1": "output_string",
                "param_2": "output_string_size",
                "param_3": "null_term",
                "param_4": "conversion_result",
                "uVar1": "locale_charset",
                "iVar2": "conversion_status",
                "pcVar3": "wctomb_function",
                "auStack_24": "stack_buffer"
            },
            "code": "void convert_wide_to_multibyte_string_0008434c(undefined4 *output_string, int output_string_size, undefined4 null_term, undefined4 *conversion_result) {\n    undefined4 locale_charset;\n    code *wctomb_function;\n    int conversion_status;\n    undefined stack_buffer[12];\n\n    if (output_string_size == 0) {\n        wctomb_function = *(code **)PTR___wctomb_00084398;\n        locale_charset = __locale_charset();\n        conversion_status = (*wctomb_function)(output_string, stack_buffer, 0, locale_charset, conversion_result);\n    }\n    else {\n        wctomb_function = *(code **)PTR___wctomb_00084398;\n        locale_charset = __locale_charset();\n        conversion_status = (*wctomb_function)(output_string, output_string_size, null_term, locale_charset, conversion_result);\n    }\n\n    if (conversion_status == -1) {\n        *conversion_result = 0;\n        *output_string = 0x8a;\n    }\n    return;\n}",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wide_to_multibyte_string_0008434c"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copyFrom_0008151c",
                "String": "StringClass",
                "*this": "thisObject",
                "*rhs": "sourceObject",
                "__dest": "destination",
                "buffer": "stringBuffer",
                "len": "stringLength",
                "capacity": "capacity"
            },
            "code": "void __thiscall String::copyFrom_0008151c(String *this, String *src)\n{\n  char *destination;\n  destination = this->stringBuffer;\n  if (destination != nullptr) {\n    if (((src->stringBuffer != nullptr) && (capacity != 0)) && (src->stringLength <= this->capacity)) {\n      strcpy(destination, src->stringBuffer);\n      this->stringLength = src->stringLength;\n      goto LAB_00081558;\n    }\n    free(destination);\n  }\n  this->stringBuffer = src->stringBuffer;\n  this->capacity = src->capacity;\n  this->stringLength = src->stringLength;\n  src->stringBuffer = nullptr;\n  src->capacity = 0;\nLAB_00081558:\n  src->stringLength = 0;\n  return;\n}",
            "called": [
                "strcpy",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "operator="
            ],
            "imported": false,
            "current_name": "copyFrom_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "line_number",
                "param_2": "column_number",
                "param_3": "expression",
                "param_4": "error_code",
                "puVar1": "file_name_ptr",
                "puVar2": "expression_ptr"
            },
            "code": "void print_assertion_failed_message_000816f8(undefined4 line_number, undefined4 column_number, undefined *expression, undefined4 error_code)\n{\n  undefined *file_name_ptr;\n  undefined *expression_ptr;\n  file_name_ptr = PTR_s__00081730;\n  expression_ptr = PTR_s__00081730;\n  if (expression != (undefined *)0x0) {\n    file_name_ptr = expression;\n    expression_ptr = PTR_s___function__00081728;\n  }\n  fiprintf(*(undefined4 *)(*(int *)PTR__impure_ptr_00081724 + 0xc), PTR_s_assertion___s__failed__file___s__0008172c, error_code, line_number, column_number, expression_ptr, file_name_ptr);\n  abort();\n}",
            "called": [
                "abort",
                "fiprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "TC_Start",
                "TC_Configure"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_message_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "read_file_00084484",
                "__stream": "file_ptr",
                "iVar1": "result"
            },
            "code": "int read_file_00084484(FILE *file_ptr)\n{\n  int result = _read_file_00084484_r(*(undefined4 *)PTR__impure_ptr_00084490, file_ptr);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "read_file_00084484"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "write_data_to_file_00084244",
                "param_1": "file",
                "param_2": "data_offset",
                "param_3": "data",
                "param_4": "data_size",
                "uVar1": "data_flags"
            },
            "code": "void write_data_to_file_00084244(FILE* file, int data_offset, void* data, size_t data_size) {\n  ushort data_flags = *(ushort *)(data_offset + 0xc);\n  if ((int)((uint)data_flags << 0x17) < 0) {\n    _lseek_r(file, (int)*(short *)(data_offset + 0xe), 0, 2);\n    data_flags = *(ushort *)(data_offset + 0xc);\n  }\n  *(ushort *)(data_offset + 0xc) = data_flags & 0xefff;\n  _write_r(file, (int)*(short *)(data_offset + 0xe), data, data_size);\n  return;\n}",
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "write_data_to_file_00084244"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_charset_00084004",
                "PTR_lc_ctype_charset_00084008": "lc_ctype_charset"
            },
            "code": "const char* get_charset_00084004() {\n    return PTR_lc_ctype_charset_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084004"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "register_exit_function_000816ec",
                "param_1": "func",
                "param_2": "arg"
            },
            "code": "void register_exit_function_000816ec(void (*func)(void), void *arg)\n{\n  __cxa_atexit(func, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "register_exit_function_000816ec"
        },
        "FUN_00080568": {
            "renaming": {
                "FUN_00080568": "servoHandlerForTimer2_00080568",
                "_timer2": "timer2_instance",
                "DAT_00080574": "servo_position",
                "'\\x01'": "servo_enabled"
            },
            "code": "void servoHandlerForTimer2_00080568(void)\n{\n  Servo_Handler(timer2_instance, DAT_00080574, servo_enabled);\n  return;\n}",
            "called": [
                "Servo_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080568",
            "calling": [],
            "imported": false,
            "current_name": "servoHandlerForTimer2_00080568"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "checkAndUpdateStringBuffer_000814ae",
                "this": "string",
                "size": "newSize",
                "uVar1": "success",
                "changeBuffer": "changeStringBuffer"
            },
            "code": "uchar __thiscall checkAndUpdateStringBuffer_000814ae(String *string, uint newSize) {\n  uchar success = 1;\n  if ((string->buffer == NULL) || (string->capacity < newSize)) {\n    success = changeStringBuffer(string, newSize);\n    if (success == 0) {\n      return 0;\n    }\n    if (string->len == 0) {\n      *string->buffer = '\\0';\n    }\n  }\n  return 1;\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "copy",
                "concat"
            ],
            "imported": false,
            "current_name": "checkAndUpdateStringBuffer_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "initialize_functions_00081778",
                "puVar1": "fini_function_pointer",
                "puVar2": "init_function_pointer",
                "iVar3": "function_index",
                "ppcVar4": "function_pointer_array",
                "iVar5": "num_functions"
            },
            "code": "void initialize_functions_00081778(void)\n{\n  int num_functions = (int)PTR___preinit_array_end_000817b8 - (int)PTR___preinit_array_end_000817bc >> 2;\n  if (num_functions != 0) {\n    code **function_pointer_array = (code **)(PTR___preinit_array_end_000817bc + -4);\n    int function_index = 0;\n    do {\n      function_index++;\n      function_pointer_array++;\n      (**function_pointer_array)();\n    } while (num_functions != function_index);\n  }\n  undefined *fini_function_pointer = PTR__fini_000817c0;\n  undefined *init_function_pointer = PTR___preinit_array_end_000817c4;\n  _init();\n  int num_fini_functions = (int)fini_function_pointer - (int)init_function_pointer >> 2;\n  if (num_fini_functions != 0) {\n    code **fini_function_pointer_array = (code **)(init_function_pointer + -4);\n    int fini_function_index = 0;\n    do {\n      fini_function_index++;\n      fini_function_pointer_array++;\n      (**fini_function_pointer_array)();\n    } while (num_fini_functions != fini_function_index);\n    return;\n  }\n  return;\n}",
            "called": [
                "_init",
                "register_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_functions_00081778"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "set_bit_00080d30",
                "param_1": "data",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 4)": "*(uint32_t *)(data + 1)",
                "(param_3 & 1) << 7": "bit_value << 7"
            },
            "code": "void set_bit_00080d30(uint32_t* data, uint32_t bit_index, uint32_t bit_value) { \n\tuint32_t* data_ptr = data + 1;\n\tuint32_t current_value = *data_ptr;\n\tuint32_t mask = bit_value << 7;\n\t*data_ptr = current_value | bit_index | mask;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bit_00080d30"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "status": "status",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_message"
            },
            "code": "void exit_with_status_00080eec(int status)\n{\n  char* PTR_s_Exiting_with_status__d__00080ef8 = \"Exiting with status: %d\";\n  iprintf(PTR_s_Exiting_with_status__d__00080ef8, status);\n  while(1);\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "mapValueToMicroseconds_000806f8",
                "this": "servo",
                "value": "inputValue"
            },
            "code": "void __thiscall Servo::mapValueToMicroseconds_000806f8(Servo *servo, int inputValue){\n    int minVal = servo->min * 4 + 0x88;\n    int maxVal = servo->max * 4 + 600;\n    if (inputValue < 0x220) {\n        if (0xb3 < inputValue) {\n            inputValue = 0xb4;\n        }\n        inputValue = map(inputValue & ~(inputValue >> 0x1f),0,0xb4,minVal,maxVal);\n    }\n    mapValueToMicroseconds_000806f8Microseconds(servo,inputValue);\n    return;\n}",
            "called": [
                "map",
                "writeMicroseconds"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "imported": false,
            "current_name": "mapValueToMicroseconds_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(char *__s1,char *__s2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  byte *pbVar3;\n  byte *pbVar4;\n  uint *puVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  \n  if ((((uint)__s1 | (uint)__s2) & 7) != 0) {\n    puVar1 = (uint *)__s1;\n    if (((uint)__s1 & 3) != 0) {\n      puVar1 = (uint *)((uint)__s1 & 0xfffffffc) + 1;\n      uVar6 = *(uint *)((uint)__s1 & 0xfffffffc);\n      pbVar3 = (byte *)__s2;\n      if (((uint)__s1 & 1) == 0) {\nLAB_00082410:\n        pbVar4 = pbVar3 + 1;\n        uVar7 = uVar6 >> 0x10 & 0xff;\n        iVar2 = uVar7 - *pbVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar7 == 0) {\n          return 0;\n        }\n      }\n      else {\n        pbVar4 = (byte *)__s2;\n        if (((uint)__s1 & 2) == 0) {\n          pbVar3 = (byte *)(__s2 + 1);\n          uVar7 = uVar6 >> 8 & 0xff;\n          iVar2 = uVar7 - (byte)*__s2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar7 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      __s2 = (char *)(pbVar4 + 1);\n      iVar2 = (uVar6 >> 0x18) - (uint)*pbVar4;\n      if ((iVar2 != 0) || (uVar6 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar6 = (uint)__s2 & 3;\n    if (uVar6 != 0) {\n      puVar5 = (uint *)((uint)__s2 & 0xfffffffc);\n      if (uVar6 == 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x10;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffff;\n          if ((uVar9 & 0x8080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else if (uVar6 < 2) {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 8;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xffffff;\n          if ((uVar9 & 0x808080) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      else {\n        uVar6 = *puVar5;\n        do {\n          puVar5 = puVar5 + 1;\n          uVar8 = *puVar1;\n          uVar6 = uVar6 >> 0x18;\n          uVar9 = uVar8 + 0xfefefeff & ~uVar8;\n          uVar10 = uVar9 & 0x80808080;\n          uVar7 = uVar8 & 0xff;\n          if ((uVar9 & 0x80) != 0 || uVar7 != uVar6) goto LAB_0008258e;\n          uVar6 = *puVar5;\n          uVar7 = uVar7 ^ uVar8;\n          uVar8 = uVar6 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar10 == 0 && uVar7 == uVar8);\n      }\n      uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar6 = (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n    __s1 = (char *)puVar1;\n    puVar5 = (uint *)__s2;\n    if (((uint)puVar1 & 4) != 0) {\n      __s1 = (char *)(puVar1 + 1);\n      uVar6 = *puVar1;\n      puVar5 = (uint *)((int)__s2 + 4);\n      uVar8 = *(uint *)__s2;\n      uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n      if (uVar6 != uVar8 || uVar10 != 0) {\nLAB_0008259a:\n        uVar7 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n                uVar6 >> 0x18;\n        uVar6 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n                uVar8 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    __s2 = (char *)puVar5;\n    if (((uint)puVar5 & 4) != 0) {\n      uVar6 = *puVar5;\n      puVar1 = puVar5 + 1;\n      do {\n        uVar7 = *(uint *)__s1;\n        uVar8 = *(uint *)((int)__s1 + 4);\n        uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        if (uVar7 != uVar6 || uVar10 != 0) goto LAB_0008258e;\n        uVar9 = *puVar1;\n        uVar6 = puVar1[1];\n        uVar10 = uVar8 + 0xfefefeff & ~uVar8 & 0x80808080;\n        __s1 = (char *)((int)__s1 + 8);\n        puVar1 = puVar1 + 2;\n      } while (uVar8 == uVar9 && uVar10 == 0);\n      uVar7 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 |\n              uVar9 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar6 = *(uint *)__s1;\n    uVar7 = *(uint *)((int)__s1 + 4);\n    uVar8 = *(uint *)__s2;\n    uVar9 = *(uint *)((int)__s2 + 4);\n    uVar10 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    if (uVar6 != uVar8 || uVar10 != 0) goto LAB_0008259a;\n    uVar10 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n    __s1 = (char *)((int)__s1 + 8);\n    __s2 = (char *)((int)__s2 + 8);\n  } while (uVar7 == uVar9 && uVar10 == 0);\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\nLAB_0008259e:\n  uVar8 = uVar10 << 0x18 | (uVar10 >> 8 & 0xff) << 0x10 | (uVar10 >> 0x10 & 0xff) << 8 |\n          uVar10 >> 0x18;\n  if (uVar8 != 0) {\n    iVar2 = count_leading_zeroes(uVar8);\n    uVar7 = uVar7 >> (0x18U - iVar2 & 0xff);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar7 <= uVar6) {\n    iVar2 = -(uint)(uVar7 < uVar6);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar7 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "equals"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000816c8": {
            "renaming": {
                "FUN_000816c8": "incrementTickCount_000816c8",
                "PTR__dwTickCount_000816d4": "tickCountPtr"
            },
            "code": "void incrementTickCount_000816c8(void)\n{\n  int* PTR__dwTickCount_000816d4 = (int*) PTR__dwTickCount_000816d4;\n  *PTR__dwTickCount_000816d4 = *PTR__dwTickCount_000816d4 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816c8",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_000816c8"
        },
        "FUN_000810fc": {
            "renaming": {
                "__thiscall Print::FUN_000810fc": "printNumber",
                "this": "this",
                "n": "number",
                "base": "base",
                "pcVar1": "buffer_pointer",
                "sVar2": "write_count",
                "uVar3": "base_value",
                "uVar4": "quotient",
                "str": "buffer",
                "cVar5": "digit",
                "uVar6": "remainder",
                "buf": "buffer",
                "FUN_000810fc": "printNumber_000810fc"
            },
            "code": "size_t __thiscall Print::printNumber_000810fc(Print *this, ulong number, uint8_t base) {\n  char *buffer_pointer;\n  size_t write_count;\n  uint base_value;\n  uint quotient;\n  uint remainder;\n  char *buffer = new char[33];\n  buffer[32] = '\\0';\n  if (base < 2) {\n    base_value = 10;\n  }\n  else {\n    base_value = (uint)base;\n  }\n  buffer_pointer = buffer + 31;\n  do {\n    quotient = number / base_value;\n    remainder = number - base_value * quotient & 0xff;\n    char digit = (char)remainder;\n    if (remainder < 10) {\n      digit += '0';\n    }\n    else {\n      digit += '7';\n    }\n    *buffer_pointer = digit;\n    number = quotient;\n    buffer_pointer--;\n  } while (quotient != 0);\n  write_count = write(this, buffer_pointer + 1);\n  delete[] buffer;\n  return write_count;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_000810fc"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "file_not_used_00080ec2",
                "file_UNUSED": "file_num",
                "ptr_UNUSED": "file_ptr",
                "len_UNUSED": "file_len"
            },
            "code": "int file_not_used_00080ec2(int file_num, char *file_ptr, int file_len) { \n  return 0; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "file_not_used_00080ec2"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_adc_00080774",
                "ctx": "context",
                "puVar1": "SYS_CLOCK",
                "puVar2": "DACC",
                "iVar3": "PIO_PC1B_PWML3",
                "iVar4": "PIO_PC1B_PWML4",
                "iVar5": "PIO_PC1B_PWML5",
                "iVar6": "PIO_PC2B_PWML7",
                "ulPin": "pin_number",
                "uVar7": "new_pin_number",
                "adc_FUN_00080774": "adc_setup",
                "DAT_0008087c": "DACC",
                "DAT_00080884": "PIO_PC2B_PWML6",
                "DAT_00080888": "PIO_PC1B_PWML2",
                "DAT_0008088c": "PIO_PC1B_PWML1",
                "DAT_00080890": "PIO_PC1B_PWML0",
                "DAT_00080894": "DACC",
                "DAT_00080898": "DACC"
            },
            "code": "int initialize_adc_00080774(EVP_PKEY_CTX *context) {\n  uint32_t pin_number;\n  uint32_t clock_speed = *(uint *)SYS_CLOCK / 1000 - 1;\n  pinMode(0, OUTPUT);\n  pinMode(1, OUTPUT);\n  pinMode(2, OUTPUT);\n  pinMode(3, OUTPUT);\n  pinMode(4, OUTPUT);\n  pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(7, OUTPUT);\n  pinMode(8, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n  pinMode(11, OUTPUT);\n  pinMode(12, OUTPUT);\n  pinMode(13, OUTPUT);\n  pinMode(A0, OUTPUT);\n  pinMode(A1, OUTPUT);\n  pinMode(A2, OUTPUT);\n  pinMode(A3, OUTPUT);\n  pinMode(A4, OUTPUT);\n  pinMode(A5, OUTPUT);\n  pinMode(A6, OUTPUT);\n  pinMode(A7, OUTPUT);\n  pinMode(A8, OUTPUT);\n  pinMode(A9, OUTPUT);\n  pinMode(A10, OUTPUT);\n  pinMode(A11, OUTPUT);\n  pinMode(A12, OUTPUT);\n  pinMode(A13, OUTPUT);\n  pinMode(A14, OUTPUT);\n  pinMode(A15, OUTPUT);\n  pinMode(A16, OUTPUT);\n  pinMode(A17, OUTPUT);\n  pinMode(A18, OUTPUT);\n  pinMode(A19, OUTPUT);\n  pinMode(A20, OUTPUT);\n  pinMode(A21, OUTPUT);\n  pinMode(A22, OUTPUT);\n  pinMode(A23, OUTPUT);\n  pinMode(A24, OUTPUT);\n  pinMode(A25, OUTPUT);\n  pinMode(A26, OUTPUT);\n  pinMode(A27, OUTPUT);\n  pinMode(A28, OUTPUT);\n  pinMode(A29, OUTPUT);\n  pinMode(A30, OUTPUT);\n  pinMode(A31, OUTPUT);\n  pinMode(B0, OUTPUT);\n  pinMode(B1, OUTPUT);\n  pinMode(B2, OUTPUT);\n  pinMode(B3, OUTPUT);\n  pinMode(B4, OUTPUT);\n  pinMode(B5, OUTPUT);\n  pinMode(B6, OUTPUT);\n  pinMode(B7, OUTPUT);\n  pinMode(B8, OUTPUT);\n  pinMode(B9, OUTPUT);\n  pinMode(B10, OUTPUT);\n  pinMode(B11, OUTPUT);\n  pinMode(B12, OUTPUT);\n  pinMode(B13, OUTPUT);\n  pinMode(B14, OUTPUT);\n  pinMode(B15, OUTPUT);\n  pinMode(B16, OUTPUT);\n  pinMode(B17, OUTPUT);\n  pinMode(B18, OUTPUT);\n  pinMode(B19, OUTPUT);\n  pinMode(B20, OUTPUT);\n  pinMode(B21, OUTPUT);\n  pinMode(B22, OUTPUT);\n  pinMode(B23, OUTPUT);\n  pinMode(B24, OUTPUT);\n  pinMode(B25, OUTPUT);\n  pinMode(B26, OUTPUT);\n  pinMode(B27, OUTPUT);\n  pinMode(B28, OUTPUT);\n  pinMode(B29, OUTPUT);\n  pinMode(B30, OUTPUT);\n  pinMode(B31, OUTPUT);\n  pinMode(C0, OUTPUT);\n  pinMode(C1, OUTPUT);\n  pinMode(C2, OUTPUT);\n  pinMode(C3, OUTPUT);\n  pinMode(C4, OUTPUT);\n  pinMode(C5, OUTPUT);\n  pinMode(C6, OUTPUT);\n  pinMode(C7, OUTPUT);\n  pinMode(C8, OUTPUT);\n  pinMode(C9, OUTPUT);\n  pinMode(C10, OUTPUT);\n  pinMode(C11, OUTPUT);\n  pinMode(C12, OUTPUT);\n  pinMode(C13, OUTPUT);\n  pinMode(C14, OUTPUT);\n  pinMode(C15, OUTPUT);\n  pinMode(C16, OUTPUT);\n  pinMode(C17, OUTPUT);\n  pinMode(C18, OUTPUT);\n  pinMode(C19, OUTPUT);\n  pinMode(C20, OUTPUT);\n  pinMode(C21, OUTPUT);\n  pinMode(C22, OUTPUT);\n  pinMode(C23, OUTPUT);\n  pinMode(C24, OUTPUT);\n  pinMode(C25, OUTPUT);\n  pinMode(C26, OUTPUT);\n  pinMode(C27, OUTPUT);\n  pinMode(C28, OUTPUT);\n  pinMode(C29, OUTPUT);\n  pinMode(C30, OUTPUT);\n  pinMode(C31, OUTPUT);\n  pinMode(D0, OUTPUT);\n  pinMode(D1, OUTPUT);\n  pinMode(D2, OUTPUT);\n  pinMode(D3, OUTPUT);\n  pinMode(D4, OUTPUT);\n  pinMode(D5, OUTPUT);\n  pinMode(D6, OUTPUT);\n  pinMode(D7, OUTPUT);\n  pinMode(D8, OUTPUT);\n  pinMode(D9, OUTPUT);\n  pinMode(D10, OUTPUT);\n  pinMode(D11, OUTPUT);\n  pinMode(D12, OUTPUT);\n  pinMode(D13, OUTPUT);\n  pinMode(D14, OUTPUT);\n  pinMode(D15, OUTPUT);\n  pinMode(D16, OUTPUT);\n  pinMode(D17, OUTPUT);\n  pinMode(D18, OUTPUT);\n  pinMode(D19, OUTPUT);\n  pinMode(D20, OUTPUT);\n  pinMode(D21, OUTPUT);\n  pinMode(D22, OUTPUT);\n  pinMode(D23, OUTPUT);\n  pinMode(D24, OUTPUT);\n  pinMode(D25, OUTPUT);\n  pinMode(D26, OUTPUT);\n  pinMode(D27, OUTPUT);\n  pinMode(D28, OUTPUT);\n  pinMode(D29, OUTPUT);\n  pinMode(D30, OUTPUT);\n  pinMode(D31, OUTPUT);\n  pin_number = 0;\n  do {\n    digitalWrite(pin_number, LOW);\n    pin_number++;\n  } while (pin_number != 0x4f);\n  pinMode(PIO_PC0B_PWML0, OUTPUT);\n  digitalWrite(0, HIGH);\n  pinMode(PIO_PC0B_PWML1, OUTPUT);\n  pinMode(PIO_PC0B_PWML2, OUTPUT);\n  pinMode(PIO_PC1B_PWML3, OUTPUT);\n  pinMode(PIO_PC1B_PWML4, OUTPUT);\n  pinMode(PIO_PC1B_PWML5, OUTPUT);\n  pinMode(DAT_00080884, OUTPUT);\n  pinMode(PIO_PC2B_PWML7, OUTPUT);\n  pmc_enable_periph_clk(ID_ADC);\n  adc_setup(DAT_0008087c, clock_speed);\n  analogOutputInit();\n  return adc_disable_all_channel(DAT_0008087c);\n}\n",
            "called": [
                "SystemInit",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "adc_disable_interrupt",
                "PIO_Configure",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "digitalWrite",
                "adc_init",
                "analogOutputInit",
                "adc_configure_trigger"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080774"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "count_pulse_00081624",
                "pin": "pin_number",
                "state": "pulse_state",
                "timeout": "timeout_ms",
                "puVar1": "system_core_clock_ptr",
                "uVar2": "pulse_count",
                "uVar3": "pulse_width",
                "PTR_SystemCoreClock_0008167c": "system_core_clock_ptr",
                "PTR_g_APinDescription_00081678": "pin_description_ptr",
                "DAT_00081680": "pulse_duration_ticks"
            },
            "code": "uint32_t count_pulse_00081624(uint32_t pin_number, uint32_t pulse_state, uint32_t timeout_ms)\n{\n    uint32_t* PTR_SystemCoreClock_0008167c = PTR_SystemCoreClock_0008167c;\n    uint32_t PTR_g_APinDescription_00081678 = PTR_g_APinDescription_00081678 + pin_number * 0x1c;\n    uint32_t pulse_width = *(uint32_t *)(PTR_g_APinDescription_00081678 + 4);\n    if (pulse_state == 0) {\n        pulse_width = 0;\n    }\n    uint32_t pulse_count = countPulseASM(*(int *)(PTR_g_APinDescription_00081678) + 0x3c, pulse_width, ((*(uint32_t *)PTR_SystemCoreClock_0008167c / DAT_00081680) * timeout_ms) / 0x12);\n    if (pulse_count != 0) {\n        pulse_count = (uint32_t)((ulonglong)(pulse_count * 18000 + 16000) / ((ulonglong)*(uint32_t *)PTR_SystemCoreClock_0008167c / 1000));\n    }\n    return pulse_count;\n}",
            "called": [
                "countPulseASM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "count_pulse_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "convert_bytes_to_uint_00080ec8",
                "file_UNUSED": "file_unused",
                "ptr": "bytes",
                "len": "len",
                "iVar1": "index"
            },
            "code": "int convert_bytes_to_uint_00080ec8(int file_unused, char *bytes, int len) {\n  int index;\n  for (index = 0; index < len; index++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)(byte)bytes[index];\n  }\n  return len & ~(len >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "convert_bytes_to_uint_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "Print::FUN_0008117a": "calculate_print_size",
                "this": "print_obj",
                "num": "num",
                "base": "base",
                "sVar1": "print_size",
                "sVar2": "recursive_size",
                "FUN_0008117a": "calculate_print_size_0008117a"
            },
            "code": "size_t calculate_print_size_0008117a(Print *print_obj, int num, int base)\n{\n  size_t print_size;\n  size_t recursive_size;\n  \n  print_size = print(print_obj, num, base);\n  recursive_size = calculate_print_size_0008117a(print_obj);\n  return recursive_size + print_size;\n}",
            "called": [
                "println",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_print_size_0008117a"
        },
        "FUN_000843e0": {
            "renaming": {
                "FUN_000843e0": "close_file_with_error_handling_000843e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_address",
                "iVar2": "close_result"
            },
            "code": "void close_file_with_error_handling_000843e0(int *error_code, int file_descriptor) {\n  undefined *errno_address;\n  int close_result;\n  errno_address = PTR_errno_00084400;\n  *(undefined4 *)PTR_errno_00084400 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_address != 0)) {\n    *error_code = *(int *)errno_address;\n    return;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843e0",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_with_error_handling_000843e0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "__size": "size",
                "pvVar1": "memory_pointer",
                "_FUN_000817f0_r": "_allocate_memory_r"
            },
            "code": "void * allocate_memory_000817f0(size_t size)\n{\n  void *memory_pointer;\n  memory_pointer = (void *)_allocate_memory_000817f0_r(*(undefined4 *)PTR__impure_ptr_000817fc, size);\n  return memory_pointer;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_000817f0"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_one_00080eba(int file_unused)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_0008173c": {
            "renaming": {
                "FUN_0008173c": "register_exit_handler_0008173c",
                "param_1": "handler_type",
                "param_2": "handler_func",
                "param_3": "handler_arg",
                "__register_exitproc": "__register_exitproc",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void register_exit_handler_0008173c(int handler_type, void (*handler_func)(void), void *handler_arg){\n    __register_exitproc(handler_type, handler_func, NULL, handler_arg);\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008173c",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_handler_0008173c"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__00082368;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_00082078;\n  }\n  if (uVar9 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__00082368 + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__00082368 + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000820a0;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "_malloc_r",
                "__malloc_unlock",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "realloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "check_ticks_and_call_callback_if_zero_00081190",
                "iVar1": "ticks"
            },
            "code": "void check_ticks_and_call_callback_if_zero_00081190(void)\n{\n  int ticks = *(int *)PTR_ticks_000811a8;\n  if (ticks != -1)\n  {\n    ticks--;\n    *(int *)PTR_ticks_000811a8 = ticks;\n    if (ticks == 0)\n    {\n      (*DAT_000811ac)();\n    }\n  }\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_call_callback_if_zero_00081190"
        },
        "FUN_000805e8": {
            "renaming": {
                "__thiscall Servo::FUN_000805e8": "attach",
                "pin": "pin",
                "min": "min_pulse_width",
                "max": "max_pulse_width",
                "bVar1": "current_byte",
                "puVar2": "servo_pointer",
                "pTVar3": "timer_pointer",
                "channel": "channel_number",
                "id": "timer_id",
                "iVar4": "i",
                "uVar5": "pin_number",
                "FUN_000805e8": "attach_000805e8"
            },
            "code": "uint8_t __thiscall Servo::attach_000805e8(int pin, int min_pulse_width, int max_pulse_width)\n{\n  byte current_byte;\n  undefined *servo_pointer;\n  Tc *timer_pointer;\n  uint32_t channel_number;\n  uint32_t timer_id;\n  int servo_index;\n  uint pin_number;\n  \n  if (this->servoIndex > 59) goto LAB_00080660;\n  pinMode(pin, OUTPUT);\n  servo_pointer = PTR_servos_00080694;\n  servo_index = this->servoIndex;\n  current_byte = PTR_servos_00080694[servo_index * 8];\n  this->max = (int8_t)((24000U - max_pulse_width) / 4);\n  channel_number = servo_index / 12;\n  pin_number = pin & 63;\n  servo_pointer[servo_index * 8] = current_byte & 192 | pin_number;\n  this->min = (int8_t)((9000U - min_pulse_width) / 4);\n  for (int i = 0; i < 12; i++) {\n    if ((int)((uint)(byte)servo_pointer[(i + channel_number * 12) * 8] << 25) < 0) goto LAB_00080652;\n  }\n  timer_pointer = DAT_00080698;\n  if (channel_number == 0) {\n    timer_id = 30;\n  }\n  else if (channel_number == 1) {\n    timer_id = 31;\n  }\n  else if (channel_number == 2) {\n    timer_id = 32;\n  }\n  else if (channel_number == 3) {\n    channel_number = 2;\n    timer_id = 29;\n  }\n  else if (channel_number == 4) {\n    channel_number = 0;\n    timer_id = 27;\n  }\n  else {\n    goto LAB_00080652;\n  }\n  _initISR(timer_pointer, channel_number, timer_id, (IRQn_Type)timer_id);\n  servo_pointer[(uint)servo_index * 8] = servo_pointer[(uint)servo_index * 8] | 64;\nLAB_00080660:\n  return this->servoIndex;\n}",
            "called": [
                "pinMode",
                "_initISR"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805e8",
            "calling": [
                "attach"
            ],
            "imported": false,
            "current_name": "attach_000805e8"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "initialize_file_00080ebe",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer",
                "dir_UNUSED": "directory"
            },
            "code": "int initialize_file_00080ebe(int file_descriptor, int pointer, int directory) {\n                     return 0;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "initialize_file_00080ebe"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "getTickCount_000816d8",
                "PTR__dwTickCount_000816e0": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_000816d8(void)\n{\n  uint32_t* PTR__dwTickCount_000816e0 = (uint32_t*) PTR__dwTickCount_000816e0;\n  return *PTR__dwTickCount_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "String::FUN_000815b8": "compareStrings",
                "this": "stringObject",
                "cstr": "stringToCompare",
                "uVar1": "result",
                "uVar2": "comparisonResult",
                "FUN_000815b8": "compareStrings_000815b8"
            },
            "code": "unsigned char compareStrings_000815b8(String *stringObject, char *stringToCompare) {\n\tunsigned char result = 0;\n\tif (stringObject->length == 0) {\n\t\tif (stringToCompare == NULL) {\n\t\t\tresult = 1;\n\t\t}\n\t}\n\telse {\n\t\tif (stringToCompare != NULL) {\n\t\t\tint comparisonResult = strcmp(stringObject->buffer, stringToCompare);\n\t\t\tif (comparisonResult == 0) {\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstringToCompare = stringObject->buffer;\n\t\t\tresult = 1;\n\t\t}\n\t}\n\treturn result;\n}",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "compareStrings_000815b8"
        },
        "FUN_00080e28": {
            "renaming": {
                "FUN_00080e28": "process_callbacks_00080e28",
                "uVar1": "leading_zeros",
                "uVar2": "callbacks_mask",
                "PTR_callbacksPioD_00080e5c": "callbacks_array",
                "DAT_00080e58": "data_pointer"
            },
            "code": "void process_callbacks_00080e28(void)\n{\n  uint32_t callbacks_mask = *(uint32_t *)(DAT_00080e58 + 0x4c);\n  while (true) {\n    uint32_t leading_zeros = count_leading_zeroes(callbacks_mask);\n    if (leading_zeros > 31) break;\n    uint32_t callback_index = 31 - leading_zeros;\n    code* callback = *(code**)(PTR_callbacksPioD_00080e5c + callback_index * 4);\n    if (callback != NULL) {\n      (*callback)();\n    }\n    callbacks_mask &= ~(1 << callback_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e28",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_00080e28"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "read_and_update_data_00084220",
                "param_1": "file_descriptor",
                "param_2": "data_ptr",
                "iVar1": "bytes_read",
                "*(short *)(param_2 + 0xe)": "data_to_read",
                "*(int *)(param_2 + 0x50)": "data_counter",
                "*(ushort *)(param_2 + 0xc)": "error_flag"
            },
            "code": "void read_and_update_data_00084220(int file_descriptor, int data_ptr) {\n  int bytes_read = _read_r(file_descriptor, (int)*(short *)(data_ptr + 0xe));\n  if (bytes_read >= 0) {\n    int* data_counter = (int *)(data_ptr + 0x50);\n    *data_counter += bytes_read;\n  }\n  else {\n    ushort* error_flag = (ushort *)(data_ptr + 0xc);\n    *error_flag &= 0xefff;\n  }\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_data_00084220"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "execute_function_with_params_and_stack_pointer_00081750",
                "param_1": "function_parameter_1",
                "param_2": "function_parameter_2",
                "param_3": "stack_value_1",
                "param_4": "stack_value_2",
                "uStack_8": "stack_value_1",
                "uStack_4": "stack_value_2",
                "PTR__impure_ptr_00081774": "PTR__impure_ptr"
            },
            "code": "void execute_function_with_params_and_stack_pointer_00081750(void* function_ptr, int param_1, int param_2, int* stack_pointer)\n{\n  int param_3 = *stack_pointer;\n  int param_4 = *(stack_pointer + 1);\n  function_ptr(param_1, param_2, &param_3);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointer_00081750"
        },
        "FUN_00080db8": {
            "renaming": {
                "FUN_00080db8": "process_callbacks_00080db8",
                "uVar1": "leading_zeros",
                "uVar2": "bit_value",
                "PTR_callbacksPioB_00080dec": "callbacks_pointer",
                "DAT_00080de8": "data_pointer",
                "bit_mask": "mask",
                "bit_index": "index",
                "callback": "callback_function"
            },
            "code": "void process_callbacks_00080db8() {\n  uint bit_mask;\n  uint bit_value = *(uint *)(DAT_00080de8 + 0x4c);\n  while( true ) {\n    uint leading_zeros = count_leading_zeroes(bit_value);\n    if (leading_zeros > 0x1f) break;\n    uint bit_index = 0x1f - leading_zeros;\n    code* callback = *(code **)(PTR_callbacksPioB_00080dec + bit_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bit_mask = ~(1 << bit_index);\n    bit_value = bit_value & bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080db8",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_00080db8"
        },
        "FUN_0008421c": {
            "renaming": {
                "FUN_0008421c": "get_process_id_0008421c"
            },
            "code": "__pid_t get_process_id_0008421c(void)\n{\n  return -1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_0008421c"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_uart_buffers_0008089c",
                "PTR_rx_buffer1_00080930": "rx_buffer1",
                "PTR_tx_buffer1_00080934": "tx_buffer1",
                "PTR_rx_buffer2_00080968": "rx_buffer2",
                "PTR_rx_buffer3_0008093c": "rx_buffer3",
                "PTR_rx_buffer4_00080944": "rx_buffer4",
                "PTR_tx_buffer2_0008096c": "tx_buffer2",
                "PTR_tx_buffer3_00080948": "tx_buffer3",
                "PTR_tx_buffer4_0008094c": "tx_buffer4",
                "PTR_Serial_00080940": "serial",
                "PTR_Serial1_00080954": "serial1",
                "PTR_Serial2_0008095c": "serial2",
                "PTR_Serial3_00080964": "serial3",
                "DAT_00080938": "baudrate",
                "DAT_00080950": "baudrate1",
                "DAT_00080958": "baudrate2",
                "DAT_00080960": "baudrate3"
            },
            "code": "void initialize_uart_buffers_0008089c(void)\n{\n  RingBuffer* PTR_rx_buffer1_00080930 = (RingBuffer*) PTR_PTR_rx_buffer1_00080930_00080930;\n  RingBuffer* PTR_tx_buffer1_00080934 = (RingBuffer*) PTR_PTR_tx_buffer1_00080934_00080934;\n  RingBuffer* PTR_rx_buffer2_00080968 = (RingBuffer*) PTR_PTR_rx_buffer2_00080968_00080968;\n  RingBuffer* PTR_rx_buffer3_0008093c = (RingBuffer*) PTR_PTR_rx_buffer3_0008093c_0008093c;\n  RingBuffer* PTR_rx_buffer4_00080944 = (RingBuffer*) PTR_PTR_rx_buffer4_00080944_00080944;\n  RingBuffer* PTR_tx_buffer2_0008096c = (RingBuffer*) PTR_PTR_tx_buffer2_0008096c_0008096c;\n  RingBuffer* PTR_tx_buffer3_00080948 = (RingBuffer*) PTR_PTR_tx_buffer3_00080948_00080948;\n  RingBuffer* PTR_tx_buffer4_0008094c = (RingBuffer*) PTR_PTR_tx_buffer4_0008094c_0008094c;\n  UARTClass* PTR_Serial_00080940 = (UARTClass*) PTR_Serial_00080940;\n  USARTClass* PTR_Serial1_00080954 = (USARTClass*) PTR_Serial1_00080954;\n  USARTClass* PTR_Serial2_0008095c = (USARTClass*) PTR_Serial2_0008095c;\n  USARTClass* PTR_Serial3_00080964 = (USARTClass*) PTR_Serial3_00080964;\n  RingBuffer::RingBuffer(PTR_rx_buffer1_00080930);\n  RingBuffer::RingBuffer(PTR_tx_buffer1_00080934);\n  RingBuffer::RingBuffer(PTR_rx_buffer2_00080968);\n  RingBuffer::RingBuffer(PTR_rx_buffer3_0008093c);\n  RingBuffer::RingBuffer(PTR_rx_buffer4_00080944);\n  RingBuffer::RingBuffer(PTR_tx_buffer2_0008096c);\n  RingBuffer::RingBuffer(PTR_tx_buffer3_00080948);\n  RingBuffer::RingBuffer(PTR_tx_buffer4_0008094c);\n  UARTClass::UARTClass(PTR_Serial_00080940, DAT_00080938, UART_IRQn, 8, PTR_rx_buffer1_00080930, PTR_tx_buffer1_00080934);\n  USARTClass::USARTClass(PTR_Serial1_00080954, DAT_00080950, USART0_IRQn, 0x11, PTR_rx_buffer2_00080968, PTR_tx_buffer2_0008096c);\n  USARTClass::USARTClass(PTR_Serial2_0008095c, DAT_00080958, USART1_IRQn, 0x12, PTR_rx_buffer3_0008093c, PTR_tx_buffer3_00080948);\n  USARTClass::USARTClass(PTR_Serial3_00080964, DAT_00080960, USART3_IRQn, 0x14, PTR_rx_buffer4_00080944, PTR_tx_buffer4_0008094c);\n}\n",
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_uart_buffers_0008089c"
        },
        "FUN_000816e4": {
            "renaming": {
                "FUN_000816e4": "set_flag_000816e4",
                "param_1": "flag_address"
            },
            "code": "void set_flag_000816e4(int flag_address){\n    *(unsigned int *)(flag_address + 4) = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e4",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_000816e4"
        },
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "ptr_data2",
                "param_3": "ptr_data3",
                "param_4": "ptr_data4",
                "uStack_c": "data2",
                "uStack_8": "data3",
                "uStack_4": "data4"
            },
            "code": "void process_data_000817c8(int data, int* ptr_data2, int* ptr_data3, int* ptr_data4) {\n  int data2 = *ptr_data2;\n  int data3 = *ptr_data3;\n  int data4 = *ptr_data4;\n  call_data_processing(*(int*)PTR__impure_ptr_000817ec, *(int*)(*(int*)PTR__impure_ptr_000817ec + 8), data, &data2);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_000817c8"
        },
        "FUN_00080750": {
            "renaming": {
                "FUN_00080750": "handle_UART_interrupt_00080750",
                "PTR_Serial1_00080758": "PTR_Serial1"
            },
            "code": "void handle_UART_interrupt_00080750(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial1_00080758);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080750",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080750"
        },
        "FUN_00080f0a": {
            "renaming": {
                "FUN_00080f0a": "do_nothing_00080f0a"
            },
            "code": "\nvoid do_nothing_00080f0a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f0a"
        },
        "FUN_00080ea4": {
            "renaming": {
                "FUN_00080ea4": "find_difference_00080ea4",
                "cOld_UNUSED": "old_string",
                "cNew_UNUSED": "new_string"
            },
            "code": "int find_difference_00080ea4(char *old_string, char *new_string) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ea4",
            "calling": [],
            "imported": false,
            "current_name": "find_difference_00080ea4"
        },
        "FUN_00082814": {
            "renaming": {
                "FUN_00082814": "get_signal_handler_pid_00082814",
                "__pid": "pid",
                "__sig": "signal_number",
                "iVar1": "result",
                "_FUN_00082814_r": "_get_signal_handler_pid_r"
            },
            "code": "int get_signal_handler_pid_00082814(__pid_t pid, int signal_number) {\n  int result = _get_signal_handler_pid_00082814_r(*(undefined4 *)PTR__impure_ptr_00082820, pid, signal_number);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082814",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_handler_pid_00082814"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "puVar1": "pin_desc_array",
                "puVar2": "pin_status_array",
                "uVar3": "pio_controller_flags",
                "bVar4": "pin_mode",
                "bVar5": "pin_status",
                "iVar6": "pio_controller",
                "iVar7": "pin_desc_index"
            },
            "code": "void configure_pin_00080f0c(uint32_t pin_number, uint32_t mode) {\n  uint8_t* pin_status_ptr = pin_status_array;\n  pin_desc_t* pin_desc_ptr = pin_desc_array;\n  if (pin_desc_array[pin_number * PIN_DESC_SIZE + PIN_DESC_OFFSET] != 0) {\n    if ((pin_status_array[pin_number] & PIN_STATUS_MASK) == PIN_STATUS_ANALOG) {\n      disable_adc_channel(PIN_ADC_CONTROLLER, pin_desc_array[pin_number * PIN_DESC_SIZE + PIN_ADC_CHANNEL_OFFSET]);\n    }\n    uint8_t pin_status = pin_status_ptr[pin_number];\n    uint8_t pin_mode = pin_status & PIN_STATUS_MODE_MASK;\n    if ((pin_mode < PIN_MODE_PULLUP) && (pin_status != 0)) {\n      if (pin_mode == PIN_MODE_PULLDOWN) {\n        if (mode == PIN_MODE_INPUT) {\n          return;\n        }\n      }\n      else if (pin_mode == PIN_MODE_INPUT) {\n        if (mode == PIN_MODE_PULLDOWN) {\n          return;\n        }\n      }\n      else if (pin_mode == PIN_MODE_OPENDRAIN) {\n        if (mode == PIN_MODE_PUSH_PULL) {\n          return;\n        }\n        goto configure_pin_00080f0c_output;\n      }\n    }\n    if (mode != PIN_MODE_PUSH_PULL) {\nconfigure_pin_00080f0c_input:\n      if (mode == PIN_MODE_INPUT) {\n        int pin_desc_index = pin_number * PIN_DESC_SIZE;\n        enable_pmc_controller(*(uint32_t*)(pin_desc_ptr + pin_desc_index + PIN_DESC_PERIPHERAL_ID_OFFSET));\n        configure_pio_controller(*(uint32_t*)(pin_desc_ptr + pin_desc_index), 3, *(uint32_t*)(pin_desc_ptr + pin_desc_index + PIN_DESC_PULL_OFFSET), 0);\n        pin_status = (pin_status & PIN_STATUS_PULL_MASK) | PIN_STATUS_PULLUP;\n      }\n      else {\n        return;\n      }\n    }\n    else {\nconfigure_pin_00080f0c_output:\n      int pin_desc_index = pin_number * PIN_DESC_SIZE;\n      int pio_controller = *(int*)(pin_desc_ptr + pin_desc_index);\n      uint32_t pio_controller_flags = (*(uint8_t*)(pin_desc_ptr + pin_desc_index + PIN_DESC_PULL_OFFSET) >> 4 == 0) ? 4 : 5;\n      configure_pio_controller(pio_controller, pio_controller_flags, *(uint32_t*)(pin_desc_ptr + pin_desc_index + PIN_DESC_PULL_OFFSET), *(uint32_t*)(pin_desc_ptr + pin_desc_index + PIN_DESC_PERIPHERAL_ID_OFFSET));\n      pin_status = (pin_status & PIN_STATUS_PULL_MASK) | PIN_STATUS_PUSH_PULL;\n      if (*(int*)(pio_controller + PIO_CONTROLLER_DELAY_OFFSET) == -1) {\n        disable_pmc_controller(*(uint32_t*)(pin_desc_ptr + pin_desc_index + PIN_DESC_PERIPHERAL_ID_OFFSET));\n        return;\n      }\n    }\n    pin_status_ptr[pin_number] = pin_status;\n  }\n}\n",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "attach",
                "setup",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "configure_pin_00080f0c"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "seek_file_000844e0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_000844e0(int *error_code, int file_descriptor, int offset, int whence) {\n  int seek_result = 0;\n  int *error_ptr = PTR_errno_00084504;\n  *error_ptr = 0;\n  seek_result = _lseek(file_descriptor, offset, whence);\n  if ((seek_result == -1) && (*error_ptr != 0)) {\n    *error_code = *error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_file_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "FUNC_00083b10"
            },
            "code": "\nvoid FUNC_00083b10(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083c98;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083c98 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083ca0;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083ca4);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083c9c)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083ba4;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083c98 + 4) =\n             *(uint *)(PTR___malloc_av__00083c98 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "__malloc_lock",
                "_malloc_trim_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083b10",
            "calling": [
                "_realloc_r",
                "__sflush_r",
                "_malloc_r",
                "__swsetup_r",
                "_fclose_r",
                "__sfvwrite_r",
                "free"
            ],
            "imported": false,
            "current_name": "FUNC_00083b10"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "allocate_memory_0008236c",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "mem_ptr"
            },
            "code": "void allocate_memory_0008236c(int *error_code, int size)\n{\n    undefined *errno_ptr;\n    caddr_t mem_ptr;\n\n    errno_ptr = PTR_errno_0008238c;\n    *(undefined4 *)PTR_errno_0008238c = 0;\n    mem_ptr = _sbrk(size);\n    if ((mem_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n        *error_code = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008236c"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "write_character_to_stream_000842a4",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "buffer_size",
                "uVar1": "character_to_write",
                "uVar2": "uint_character_to_write",
                "puVar3": "next_byte_in_buffer",
                "iVar4": "result_code"
            },
            "code": "uint write_character_to_stream_000842a4(int stream, uint character, undefined4 *stream_buffer, undefined4 buffer_size)\n{\n  ushort character_to_write;\n  uint uint_character_to_write;\n  undefined *next_byte_in_buffer;\n  int result_code;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n    __sinit();\n  }\n  character_to_write = *(ushort *)(stream_buffer + 3);\n  uint_character_to_write = (uint)character_to_write;\n  stream_buffer[2] = stream_buffer[6];\n  if ((-1 < (int)(uint_character_to_write << 0x1c)) || (result_code = stream_buffer[4], result_code == 0)) {\n    result_code = __swsetup_r(stream, stream_buffer, character_to_write, uint_character_to_write, buffer_size);\n    if (result_code != 0) {\n      return 0xffffffff;\n    }\n    character_to_write = *(ushort *)(stream_buffer + 3);\n    result_code = stream_buffer[4];\n    uint_character_to_write = (uint)character_to_write;\n  }\n  character = character & 0xff;\n  if ((int)(uint_character_to_write << 0x12) < 0) {\n    next_byte_in_buffer = (undefined *)*stream_buffer;\n    result_code = (int)next_byte_in_buffer - result_code;\n    if (result_code < (int)stream_buffer[5]) {\nLAB_000842d6:\n      result_code = result_code + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    stream_buffer[0x19] = stream_buffer[0x19] & 0xffffdfff;\n    next_byte_in_buffer = (undefined *)*stream_buffer;\n    *(ushort *)(stream_buffer + 3) = character_to_write | 0x2000;\n    result_code = (int)next_byte_in_buffer - result_code;\n    if (result_code < (int)stream_buffer[5]) goto LAB_000842d6;\n  }\n  result_code = _fflush_r(stream, stream_buffer);\n  if (result_code != 0) {\n    return 0xffffffff;\n  }\n  next_byte_in_buffer = (undefined *)*stream_buffer;\n  result_code = 1;\nLAB_000842d8:\n  stream_buffer[2] = stream_buffer[2] + -1;\n  *stream_buffer = next_byte_in_buffer + 1;\n  *next_byte_in_buffer = (char)character;\n  if (((stream_buffer[5] == result_code) || (((int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f) < 0 && (character == 10)))) && (result_code = _fflush_r(stream, stream_buffer), result_code != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_character_to_stream_000842a4"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "convert_and_write_to_stream_000839b4",
                "param_1": "stream",
                "param_2": "input",
                "param_3": "buffer",
                "uVar1": "locale_mb_cur_max",
                "uVar3": "output",
                "pbVar4": "buffer_ptr",
                "iVar2": "write_result",
                "abStack_1b": "conversion_buffer",
                "local_1c": "converted_byte"
            },
            "code": "uint convert_and_write_to_stream_000839b4(undefined4 stream, uint input, byte **buffer)\n{\n  uint locale_mb_cur_max = __locale_mb_cur_max();\n  if ((locale_mb_cur_max == 1) && (input - 1 < 0xff)) {\n    uint output = input & 0xff;\n  }\n  else {\n    byte converted_byte;\n    uint conversion_result = _wcrtomb_r(stream, &converted_byte, input, buffer + 0x17);\n    if (conversion_result == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (conversion_result == 0) {\n      return input;\n    }\n    uint output = (uint)converted_byte;\n  }\n  uint i = 0;\n  do {\n    byte *buffer_ptr = buffer[2] + -1;\n    buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)buffer[6] <= (int)buffer_ptr) {\n        **buffer = (byte)output;\n        buffer_ptr = *buffer;\n        output = (uint)*buffer_ptr;\n        if (output != 10) goto LAB_00083a04;\n      }\n      int write_result = __swbuf_r(stream, output, buffer);\n      if (write_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)output;\n      buffer_ptr = *buffer;\nLAB_00083a04:\n      *buffer = buffer_ptr + 1;\n    }\n    if (locale_mb_cur_max <= i + 1) {\n      return input;\n    }\n    output = (uint)abStack_1b[i];\n    i = i + 1;\n  } while(true);\n}",
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_and_write_to_stream_000839b4"
        },
        "FUN_00081176": {
            "renaming": {
                "__thiscall Print::FUN_00081176": "printNumber",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "length",
                "sVar2": "secondLength",
                "FUN_00081176": "printNumber_00081176"
            },
            "code": "size_t Print::printNumber_00081176(Print *this, int number, int base) {\n  size_t length;\n  if (base == 0) {\n    length = (**this->_vptr_Print)(this, number & 0xff);\n    return length;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      length = printChar(this, '-');\n      length += printNumber_00081176(this, -number, (uint8_t)base);\n      return length;\n    }\n  }\n  else {\n    base &= 0xff;\n  }\n  length = printNumber_00081176(this, number, (uint8_t)base);\n  return length;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printNumber_00081176"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_file_mode_to_directory_00080eb0",
                "file_UNUSED": "file_info",
                "st": "file_info",
                "st->st_mode": "file_info->st_mode"
            },
            "code": "int set_file_mode_to_directory_00080eb0(stat *file_info){\n  file_info->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_00080eb0"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "convertStringToLong_00081734",
                "__nptr": "inputString",
                "lVar1": "result"
            },
            "code": "long convertStringToLong_00081734(char* inputString) {\n    long result = strtol(inputString, (char **)0x0, 10);\n    return result;\n}",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "toInt"
            ],
            "imported": false,
            "current_name": "convertStringToLong_00081734"
        },
        "FUN_00080768": {
            "renaming": {
                "FUN_00080768": "uart_interrupt_handler_00080768",
                "PTR_Serial3_00080770": "PTR_Serial3"
            },
            "code": "void uart_interrupt_handler_00080768(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial3_00080770);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080768",
            "calling": [],
            "imported": false,
            "current_name": "uart_interrupt_handler_00080768"
        },
        "FUN_00082824": {
            "renaming": {
                "__sprint_r_part_0": "write_to_stream",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "buffers",
                "piVar1": "current_buffer",
                "iVar2": "write_result",
                "piVar3": "last_buffer",
                "uVar4": "chars_written",
                "puVar5": "char_ptr",
                "uVar6": "buffer_size",
                "uVar7": "num_chars",
                "FUN_00082824": "write_to_stream_00082824"
            },
            "code": "int write_to_stream_00082824(int stream, int buffer_size, int **buffers)\n{\n  int *current_buffer = *buffers;\n  int *last_buffer = buffers[2];\n  int bytes_written = 0;\n\n  if (-1 < *(int *)(buffer_size + 100) << 0x12) {\n    int write_result = __sfvwrite_r();\n    buffers[2] = NULL;\n    buffers[1] = NULL;\n    return write_result;\n  }\n\n  while (last_buffer != NULL) {\n    uint buffer_size = current_buffer[1];\n    uint num_chars = buffer_size >> 2;\n\n    if (num_chars != 0) {\n      undefined4 *char_ptr = (undefined4 *)(*current_buffer + -4);\n      uint chars_written = 0;\n\n      do {\n        char_ptr++;\n        int write_result = _fputwc_r(stream, *char_ptr, buffer_size);\n        chars_written++;\n        if (write_result == -1) {\n          buffers[2] = NULL;\n          buffers[1] = NULL;\n          return -1;\n        }\n      } while (num_chars != chars_written);\n      last_buffer = buffers[2];\n    }\n\n    last_buffer = (int *)((int)last_buffer - (buffer_size & 0xfffffffc));\n    buffers[2] = last_buffer;\n    current_buffer = current_buffer + 2;\n  }\n\n  buffers[2] = NULL;\n  buffers[1] = NULL;\n  return bytes_written;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_00082824"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_bits_set_in_two_params_00080a94",
                "param_1": "ptr_param_1",
                "uVar1": "bits_set_in_both_params"
            },
            "code": "uint check_bits_set_in_two_params_00080a94(int ptr_param_1, uint param_2)\n{\n  uint bits_set_in_both_params = *(uint *)(ptr_param_1 + 8) & param_2;\n  if (bits_set_in_both_params != 0) {\n    if ((param_2 & *(uint *)(ptr_param_1 + 0x18)) == 0) {\n      bits_set_in_both_params = 0;\n    }\n    else {\n      bits_set_in_both_params = 1;\n    }\n  }\n  return bits_set_in_both_params;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bits_set_in_two_params_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "disable_watchdog_timer_00081618",
                "DAT_00081620": "watchdog_timer"
            },
            "code": "void disable_watchdog_timer_00081618(void)\n{\n  WDT_Disable(DAT_00081620);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008455c(uint dividend, int divisor, uint multiplier_low, uint multiplier_high, int *difference) {\n  longlong product = (longlong)multiplier_high << 32 | multiplier_low;\n  uint quotient = dividend / product;\n  difference[0] = dividend - quotient * product;\n  difference[1] = divisor - (int)(product >> 32) - (uint)(dividend < quotient * product);\n  return;\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "memset_custom_00081f00",
                "__s": "ptr",
                "__c": "value",
                "__n": "num",
                "puVar1": "current_word",
                "puVar2": "last_word",
                "puVar3": "last_byte",
                "uVar4": "word_value",
                "uVar5": "byte_value",
                "bVar6": "is_aligned"
            },
            "code": "void * memset_custom_00081f00(void *ptr, int value, size_t num) {\n  uint *current_word;\n  uint *last_word;\n  uint *last_byte;\n  uint word_value;\n  uint byte_value;\n  bool is_aligned;\n  \n  current_word = (uint *)ptr;\n  is_aligned = ((uint)ptr & 3) == 0;\n  if (!is_aligned) {\n    byte_value = (uint)value & 0xffU;\n    last_byte = (uint *)((int)ptr + num - 1);\n    if (num != 0) {\n      *ptr = byte_value;\n      ptr = (void *)((int)ptr + 1);\n      num--;\n      if (((uint)ptr & 3) == 0) {\n        goto do_word_copy;\n      }\n    }\n  }\n  do_word_copy:\n  if (num >= 16) {\n    word_value = (uint)value & 0xffU | ((uint)value & 0xffU) << 8;\n    word_value = word_value | word_value << 0x10;\n    last_word = current_word + (num >> 4) * 4;\n    while (current_word != last_word) {\n      current_word[0] = word_value;\n      current_word[1] = word_value;\n      current_word[2] = word_value;\n      current_word[3] = word_value;\n      current_word += 4;\n    }\n    num &= 0xf;\n    if (num < 4) {\n      goto do_byte_copy;\n    }\n    current_word = last_word;\n  }\n  do_byte_copy:\n  if (num != 0) {\n    byte_value = (uint)value & 0xffU;\n    last_byte = (uint *)((int)current_word + num - 1);\n    while (current_word != last_byte) {\n      *current_word = byte_value;\n      current_word++;\n    }\n    *last_byte = byte_value;\n  }\n  return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "imported": false,
            "current_name": "memset_custom_00081f00"
        },
        "FUN_0008075c": {
            "renaming": {
                "FUN_0008075c": "handle_UART_IRQ_0008075c",
                "PTR_Serial2_00080764": "&Serial2"
            },
            "code": "void handle_UART_IRQ_0008075c(void)\n{\n  UARTClass::IrqHandler(PTR_Serial2_00080764);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008075c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_IRQ_0008075c"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_error_00080eaa",
                "file_UNUSED": "file_not_used"
            },
            "code": "int return_error_00080eaa(int file_not_used)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_00080eaa"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "divide_or_modulo_by_zero_00084530",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_or_modulo_by_zero_00084530(int dividend, int divisor, int quotient, int remainder) {\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n}",
            "called": [
                "__aeabi_idiv0",
                "__gnu_uldivmod_helper"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_modulo_by_zero_00084530"
        },
        "FUN_00085860": {
            "renaming": {
                "FUN_00085860": "do_nothing_00085860"
            },
            "code": "\nvoid do_nothing_00085860(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085860",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085860"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "checkSerialPortsForData_00080970",
                "iVar1": "availableBytes"
            },
            "code": "void checkSerialPortsForData_00080970(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_000809a4);\n  if (availableBytes > 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_000809a8);\n  if (availableBytes > 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_000809ac);\n  if (availableBytes > 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_000809b0);\n  if (availableBytes > 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent3",
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerialPortsForData_00080970"
        },
        "FUN_000806ac": {
            "renaming": {
                "FUN_000806ac": "setServoPosition_000806ac",
                "this": "servo",
                "value": "position",
                "iVar1": "minPositionOffset",
                "iVar2": "positionValue",
                "PTR_servos_000806f4": "SERVO_BASE_ADDRESS",
                "PTR_SystemCoreClock_000806ec": "SYSTEM_CORE_CLOCK_ADDRESS",
                "DAT_000806f0": "TIMER_FREQUENCY"
            },
            "code": "void __thiscall Servo::setServoPosition_000806ac(Servo *servo, int position) {\n  int minPosition = servo->min;\n  int maxPosition = servo->max;\n  int servoIndex = servo->servoIndex;\n  if (servoIndex < 60) {\n    int positionOffset = 136 - minPosition;\n    int positionValue = positionOffset * 4;\n    if (position + positionOffset * -4 >= 0 && position <= (600 - maxPosition) * 4) {\n      positionValue = position;\n    }\n    uint32_t coreClock = *(uint32_t *)PTR_SystemCoreClock_000806ec;\n    uint32_t servoValue = (coreClock / *(uint32_t *)PTR_DAT_000806f0_000806f0) * (positionValue - 2) >> 5;\n    *(uint32_t *)(PTR_PTR_servos_000806f4_000806f4 + (uint32_t)servoIndex * 8 + 4) = servoValue;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806ac",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setServoPosition_000806ac"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_for_flag_and_set_value_20070000",
                "DAT_2007001c": "data_pointer",
                "DAT_20070020": "desired_value",
                "DAT_20070028": "result_pointer",
                "DAT_20070024": "result_value"
            },
            "code": "void wait_for_flag_and_set_value_20070000(void)\n{\n  disableIRQinterrupts();\n  while(-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  while(-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  while(true){}\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "wait_for_flag_and_set_value_20070000"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "print_formatted_string_to_file_000834f0",
                "param_1": "file",
                "param_2": "file_descriptor",
                "iVar1": "printf_result",
                "iVar2": "fflush_result",
                "local_488": "buffer_pointer",
                "local_480": "buffer_size",
                "local_47c": "flags",
                "local_47a": "width",
                "local_478": "buffer_position_pointer",
                "local_474": "width_pointer",
                "local_470": "precision_pointer",
                "local_46c": "length_pointer",
                "local_464": "buffer_length_pointer",
                "local_424": "buffer",
                "auStack_420": "unmodified_buffer"
            },
            "code": "int print_formatted_string_to_file_000834f0(FILE* file, int file_descriptor){\n  int printf_result;\n  int fflush_result;\n  char buffer[1024];\n  char* buffer_pointer = buffer;\n  unsigned short flags = *(unsigned short *)(file_descriptor + 0xc) & 0xfffd;\n  unsigned int buffer_size = 0x400;\n  unsigned int width = 0x400;\n  unsigned int precision = 0;\n  unsigned int length = 0;\n  unsigned int* length_pointer = &length;\n  unsigned int* precision_pointer = &precision;\n  unsigned int* width_pointer = &width;\n  unsigned short* flags_pointer = &flags;\n  unsigned int* buffer_size_pointer = &buffer_size;\n  unsigned int* buffer_length_pointer = &buffer_size;\n  unsigned int* buffer_position_pointer = &buffer_size;\n\n  buffer[0] = 0;\n  printf_result = _vfiprintf_r(file, &buffer_pointer, flags_pointer, width_pointer, precision_pointer, length_pointer);\n  if (printf_result >= 0) {\n    fflush_result = _fflush_r(file, &buffer_pointer);\n    if (fflush_result != 0) {\n      printf_result = -1;\n    }\n  }\n  if ((unsigned int)(flags << 0x19) < 0) {\n    *(unsigned short *)(file_descriptor + 0xc) = *(unsigned short *)(file_descriptor + 0xc) | 0x40;\n  }\n  return printf_result;\n}",
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_to_file_000834f0"
        },
        "FUN_0008125a": {
            "renaming": {
                "__thiscall UARTClass::FUN_0008125a": "get_next_byte_in_rx_buffer",
                "*this": "uart_instance",
                "pRVar2": "rx_buffer",
                "uVar1": "next_byte",
                "FUN_0008125a": "get_next_byte_in_rx_buffer_0008125a"
            },
            "code": "unsigned int get_next_byte_in_rx_buffer_0008125a(UARTClass *uart_instance) {\n    unsigned int next_byte;\n    RingBuffer *rx_buffer = uart_instance->rx_buffer;\n    if (rx_buffer->head_index == rx_buffer->tail_index) {\n        next_byte = 0xffffffff;\n    }\n    else {\n        next_byte = (unsigned int)rx_buffer->buffer[rx_buffer->tail_index];\n    }\n    return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008125a",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_in_rx_buffer_0008125a"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "printNumber_0008113a",
                "this": "self",
                "n": "number",
                "base": "base",
                "sVar1": "printedSize",
                "sVar2": "size",
                "_vptr_Print": "vTable",
                "FUN_0008113aNumber": "printNumber",
                "'-'": "negativeSign"
            },
            "code": "size_t Print::printNumber_0008113a(Print *this,long number,int base)\n{\n  size_t printedSize;\n  \n  if (base == 0) {\n    printedSize = (**this->_vptr_Print)(this,number & 0xff);\n    return printedSize;\n  }\n  if (base == 10) {\n    if (number < 0) {\n      printedSize = printChar(this,'-');\n      printedSize += printNumber_0008113a(this,-number,(uint8_t)base);\n      return printedSize;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  printedSize = printNumber_0008113a(this,number,(uint8_t)base);\n  return printedSize;\n}",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "println",
                "print"
            ],
            "imported": false,
            "current_name": "printNumber_0008113a"
        },
        "FUN_000810d8": {
            "renaming": {
                "__thiscall Print::FUN_000810d8": "size_t Print::printMessage",
                "*this": "printInstance",
                "sVar1": "bytesWritten",
                "PTR_DAT_000810e4": "message",
                "FUN_000810d8": "printMessage_000810d8"
            },
            "code": "size_t Print::printMessage_000810d8(Print *printInstance)\n{\n  size_t bytesWritten;\n  bytesWritten = write(printInstance, PTR_DAT_000810e4);\n  return bytesWritten;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printMessage_000810d8"
        },
        "FUN_00080f04": {
            "renaming": {
                "FUN_00080f04": "getTickCount_00080f04",
                "PTR__dwTickCount_000816e0": "tickCountPtr",
                "*PTR__dwTickCount_000816e0": "*tickCountPtr"
            },
            "code": "uint32_t getTickCount_00080f04(void)\n{\n    uint32_t* PTR__dwTickCount_000816e0 = (uint32_t*)PTR__dwTickCount_000816e0;\n    uint32_t tickCount = *PTR__dwTickCount_000816e0;\n    return tickCount;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "timedRead"
            ],
            "imported": false,
            "current_name": "getTickCount_00080f04"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8::FUN_000805a8": "initializeServo",
                "this": "servo",
                "bVar1": "servoCount",
                "puVar2": "systemCoreClockPtr",
                "PTR_FUN_000805a8Count_000805d8": "servoCountPtr",
                "PTR_SystemCoreClock_000805dc": "systemCoreClockPtr",
                "PTR_servos_000805e4": "servosPtr",
                "DAT_000805e0": "prescaler",
                "FUN_000805a8": "initializeServo_000805a8"
            },
            "code": "initializeServo_000805a8* __thiscall initializeServo_000805a8(initializeServo_000805a8* servo) {\n  byte servoCount = *PTR_initializeServo_000805a8Count_000805d8;\n  if (servoCount < 0x3c) {\n    *PTR_initializeServo_000805a8Count_000805d8 = servoCount + 1;\n    uint* PTR_SystemCoreClock_000805dc = PTR_SystemCoreClock_000805dc;\n    servo->servoIndex = servoCount;\n    *(uint*)(PTR_servos_000805e4 + (uint)servoCount * 8 + 4) = (*(uint*)PTR_SystemCoreClock_000805dc / DAT_000805e0) * 0x5dc >> 5;\n    return servo;\n  }\n  servo->servoIndex = 0xff;\n  return servo;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [
                "_GLOBAL__sub_I_steering"
            ],
            "imported": false,
            "current_name": "initializeServo_000805a8"
        },
        "FUN_00080184": {
            "renaming": {
                "FUN_00080184": "initialize_servos_and_strings_00080184",
                "*this": "string_ptr",
                "cstr": "string_ptr",
                "uVar1": "exit_handler",
                "puVar2": "exit_dso_handle",
                "*this_00": "value_ptr",
                "in_r3": "in_r3",
                "PTR_steering_000801c4": "PTR_steering_000801c4",
                "PTR_throttle_000801d0": "PTR_throttle_000801d0",
                "PTR___dso_handle_000801d8": "PTR___dso_handle_000801d8",
                "DAT_000801d4": "DAT_000801d4",
                "PTR_DAT_000801cc": "PTR_DAT_000801cc",
                "PTR_command_000801c8": "PTR_command_000801c8",
                "PTR_value_000801dc": "PTR_value_000801dc",
                "Servo::Servo": "Servo",
                "String::String": "String"
            },
            "code": "void initialize_servos_and_strings_00080184(void)\n{\n  undefined *string_ptr;\n  undefined4 exit_handler;\n  undefined *exit_dso_handle;\n  undefined *command_ptr;\n  undefined *value_ptr;\n  Servo steering_servo(PTR_steering_000801c4);\n  Servo throttle_servo(PTR_throttle_000801d0);\n  exit_dso_handle = PTR___dso_handle_000801d8;\n  exit_handler = DAT_000801d4;\n  string_ptr = PTR_DAT_000801cc;\n  command_ptr = PTR_command_000801c8;\n  String command_string(command_ptr, string_ptr);\n  value_ptr = PTR_value_000801dc;\n  String value_string(value_ptr, string_ptr);\n  __aeabi_atexit(command_ptr, exit_handler, exit_dso_handle);\n  __aeabi_atexit(value_ptr, exit_handler, exit_dso_handle, in_r3);\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "Servo",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080184",
            "calling": [],
            "imported": false,
            "current_name": "initialize_servos_and_strings_00080184"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "setup",
                "main",
                "loop"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "__thiscall Print::FUN_000810cc": "print_char",
                "this": "print_obj",
                "c": "character",
                "sVar1": "size",
                "FUN_000810cc": "print_char_000810cc"
            },
            "code": "size_t print_char_000810cc(Print *print_obj, char character) {\n  size_t size;\n  size = (**print_obj->_vptr_Print)(print_obj, (int)character);\n  return size;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_char_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "read_00081276",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "bVar1": "byteRead",
                "pRVar2": "rxBuffer"
            },
            "code": "ssize_t __thiscall UARTClass::read_00081276(UARTClass *this,int fileDescriptor,void *buffer,size_t numBytes) {\n  byte byteRead;\n  RingBuffer *rxBuffer;\n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    byteRead = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)byteRead;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "read_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "checkIfTerminal_000844bc",
                "param_1": "error",
                "param_2": "fileDescriptor",
                "puVar1": "errorPointer",
                "iVar2": "isTerminal"
            },
            "code": "void checkIfTerminal_000844bc(int *error, int fileDescriptor)\n{\n    undefined *errorPointer;\n    int isTerminal;\n\n    errorPointer = PTR_errno_000844dc;\n    *(undefined4 *)PTR_errno_000844dc = 0;\n    isTerminal = _isatty(fileDescriptor);\n    if ((isTerminal == -1) && (*(int *)errorPointer != 0)) {\n        *error = *(int *)errorPointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "checkIfTerminal_000844bc"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_parameter_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value",
                "* (undefined4 *) (param_1 + param_2 * 0x40 + 0x14)": "*address",
                "undefined4": "int",
                "*(undefined4 *)": "*",
                "int": "int",
                "offset": "offset",
                "address": "address"
            },
            "code": "void set_parameter_at_index_00080b90(int base_address, int index, int value)\n{\n  int offset = index * 0x40 + 0x14;\n  int* address = (int*)(base_address + offset);\n  *address = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_parameter_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "data",
                "param_2": "status",
                "uVar1": "flags_masked",
                "iVar2": "var_1",
                "uVar3": "flags",
                "uVar4": "flags_short"
            },
            "code": "int process_data_0008356c(uint16_t* data, int* status) {\n    uint16_t flags = data[3];\n    uint32_t flags_shifted = (uint32_t)flags << 28;\n    int result = 0;\n    int var_1 = status[4];\n    if ((*(int *)PTR__impure_ptr_0008362c != 0) && (*(int *)(*(int *)PTR__impure_ptr_0008362c + 0x38) == 0)) {\n        __sinit();\n    }\n    if ((int)flags_shifted < 0) {\n        result = status[4];\n    }\n    else {\n        if (-1 < (int)(flags << 27)) {\n            *status = 9;\n            data[3] = flags | 0x40;\n            return -1;\n        }\n        if ((int)(flags << 29) < 0) {\n            if ((int *)status[12] != NULL) {\n                if ((int *)status[12] != status + 0x10) {\n                    _free_r(status);\n                    flags = data[3];\n                }\n                status[12] = NULL;\n            }\n            flags &= 0xFFDB;\n            *status = var_1;\n            status[1] = 0;\n        }\n        else {\n            var_1 = status[4];\n        }\n        data[3] = flags | 8;\n        flags |= 8;\n    }\n    if ((var_1 == 0) && ((flags & 0x280) != 0x200)) {\n        __smakebuf_r(status, data);\n        flags = data[3];\n        var_1 = status[4];\n    }\n    uint32_t flags_masked = flags & 1;\n    if (flags_masked == 0) {\n        if (-1 < (int)(flags << 0x1E)) {\n            flags_masked = status[5];\n        }\n        status[2] = flags_masked;\n    }\n    else {\n        status[6] = -status[5];\n        status[2] = 0;\n    }\n    if ((var_1 == 0) && ((int)(flags << 0x18) < 0)) {\n        data[3] |= 0x40;\n        return -1;\n    }\n    return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_system_clock_00080b98",
                "puVar1": "system_core_clock_address",
                "iVar2": "timer_base_address",
                "DAT_00080c04": "system_core_clock_address_ptr",
                "DAT_00080c08": "timer_base_address_ptr",
                "DAT_00080c10": "system_core_clock_frequency_hz",
                "DAT_00080c0c": "system_core_clock_prescaler_value",
                "DAT_00080c14": "system_core_clock_source",
                "PTR_SystemCoreClock_00080c1c": "system_core_clock_address_ptr"
            },
            "code": "void initialize_system_clock_00080b98(void)\n{\n    uint32_t *system_core_clock_address = DAT_00080c04;\n    *system_core_clock_address = 0x400;\n    system_core_clock_address[0x80] = 0x400;\n    int32_t timer_base_address = DAT_00080c08;\n    if (-1 < *(int32_t *)(timer_base_address + 0x20) << 7)\n    {\n        *(uint32_t *)(timer_base_address + 0x20) = DAT_00080c10;\n        while (-1 < *(int32_t *)(timer_base_address + 0x68) << 0x1f);\n    }\n    *(uint32_t *)(timer_base_address + 0x20) = DAT_00080c0c;\n    while (-1 < *(int32_t *)(timer_base_address + 0x68) << 0xf);\n    *(uint32_t *)(timer_base_address + 0x30) = *(uint32_t *)(timer_base_address + 0x30) & 0xfffffffc | 1;\n    while (-1 < *(int32_t *)(timer_base_address + 0x68) << 0x1c);\n    *(uint32_t *)(timer_base_address + 0x28) = DAT_00080c14;\n    while (-1 < *(int32_t *)(timer_base_address + 0x68) << 0x1e);\n    *(uint32_t *)(timer_base_address + 0x30) = 0x11;\n    while (-1 < *(int32_t *)(timer_base_address + 0x68) << 0x1c);\n    *(uint32_t *)(timer_base_address + 0x30) = 0x12;\n    while (-1 < *(int32_t *)(timer_base_address + 0x68) << 0x1c);\n    *(uint32_t *)DAT_00080c04 = DAT_00080c10;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "printAndReturnBytesWritten_000810e8",
                "this": "this",
                "c": "message",
                "sVar1": "bytesWritten",
                "sVar2": "totalBytesWritten"
            },
            "code": "size_t __thiscall Print::printAndReturnBytesWritten_000810e8(Print *this, char *message) {\n  size_t bytesWritten = write(this, message);\n  size_t totalBytesWritten = printAndReturnBytesWritten_000810e8(this);\n  return totalBytesWritten + bytesWritten;\n}",
            "called": [
                "write",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "printAndReturnBytesWritten_000810e8"
        },
        "FUN_000843b8": {
            "renaming": {
                "FUN_000843b8": "write_to_file_000843b8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "data_buffer",
                "param_4": "buffer_length",
                "puVar1": "error_pointer",
                "iVar2": "bytes_written"
            },
            "code": "void write_to_file_000843b8(int *error_code, int file_descriptor, char *data_buffer, int buffer_length) {\n  undefined *error_pointer;\n  int bytes_written;\n  error_pointer = PTR_errno_000843dc;\n  *(undefined4 *)PTR_errno_000843dc = 0;\n  bytes_written = _write(file_descriptor, data_buffer, buffer_length);\n  if ((bytes_written == -1) && (*(int *)error_pointer != 0)) {\n    *error_code = *(int *)error_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000843b8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000843b8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_0008073c": {
            "renaming": {
                "FUN_0008073c": "handle_UART_interrupt_0008073c",
                "PTR_Serial_00080744": "serial_object"
            },
            "code": "void handle_UART_interrupt_0008073c(void)\n{\n  UARTClass* PTR_Serial_00080744 = (UARTClass*)PTR_Serial_00080744;\n  PTR_Serial_00080744->IrqHandler();\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073c",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_0008073c"
        },
        "FUN_00081480": {
            "renaming": {
                "String::FUN_00081480": "clearString",
                "this": "str",
                "this->buffer": "str->buffer",
                "this->len": "str->len",
                "this->capacity": "str->capacity",
                "FUN_00081480": "clearString_00081480"
            },
            "code": "void clearString_00081480(String *str) {\n  if (str->buffer != NULL) {\n    free(str->buffer);\n  }\n  str->buffer = NULL;\n  str->len = 0;\n  str->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clearString_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "allocate_memory_00081f9c",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "new_ptr"
            },
            "code": "void * allocate_memory_00081f9c(void *ptr, size_t size) {\n  void *new_ptr;\n  new_ptr = (void *)_allocate_memory_00081f9c_r(*(undefined4 *)PTR__impure_ptr_00081fa8, ptr, size);\n  return new_ptr;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081f9c"
        },
        "FUN_00081244": {
            "renaming": {
                "operator bool": "isUARTClassValid",
                "this": "uartClassPtr",
                "FUN_00081244": "isUARTClassValid_00081244"
            },
            "code": "bool isUARTClassValid_00081244(UARTClass *uartClassPtr) { return true; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081244",
            "calling": [],
            "imported": false,
            "current_name": "isUARTClassValid_00081244"
        },
        "FUN_000836fc": {
            "renaming": {
                "FUN_000836fc": "register_exit_proc_000836fc",
                "__func": "func_ptr",
                "iVar1": "result",
                "__register_exitproc": "__register_exit_proc"
            },
            "code": "int register_exit_proc_000836fc(__func *func_ptr) {\n  int result = __register_exitproc(0, func_ptr, 0, 0);\n  return result;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836fc",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_000836fc"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "getReceivedDataLength_00081248",
                "this": "this",
                "_rx_buffer": "rxBuffer",
                "_iHead": "rxBufferHeadIndex",
                "_iTail": "rxBufferTailIndex"
            },
            "code": "int __thiscall UARTClass::getReceivedDataLength_00081248(UARTClass *this)\n{\n    int headIndex = this->rxBufferHeadIndex;\n    int tailIndex = this->rxBufferTailIndex;\n    int dataLength = headIndex - tailIndex & 0x7f;\n    return dataLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "imported": false,
            "current_name": "getReceivedDataLength_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "forward_ptr_00081800",
                "__ptr": "__forward_ptr",
                "_recursive_call": "forward_ptr_recursive_call"
            },
            "code": "void forward_ptr_00081800(void *__ptr)\n{\n  _recursive_call(*(undefined4 *)PTR__impure_ptr_0008180c,__ptr);\n  return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "~String",
                "invalidate",
                "move"
            ],
            "imported": false,
            "current_name": "forward_ptr_00081800"
        },
        "FUN_0008418c": {
            "renaming": {
                "FUN_0008418c": "execute_command_0008418c",
                "param_1": "command_list",
                "param_2": "command_index",
                "param_3": "signal_number",
                "param_4": "additional_param",
                "_Var1": "process_id",
                "uVar2": "result",
                "iVar3": "function_pointer",
                "pcVar4": "function_pointer"
            },
            "code": "int execute_command_0008418c(int* command_list, uint command_index, int signal_number, int additional_param)\n{\n  __pid_t process_id;\n  int result;\n  code* function_pointer;\n  if (command_index > 31) {\n    *command_list = 22;\n    return -1;\n  }\n  function_pointer = command_list[183];\n  if (function_pointer == nullptr || function_pointer[command_index] == nullptr) {\n    process_id = _getpid_r();\n    result = _kill_r(command_list, process_id, command_index, additional_param);\n    return result;\n  }\n  if (function_pointer[command_index] == (code*)1) {\n    return 0;\n  }\n  if (function_pointer[command_index] != (code*)0xffffffff) {\n    command_list[command_index + 183] = 0;\n    (*function_pointer[command_index])(command_index);\n    return 0;\n  }\n  *command_list = 22;\n  return 1;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008418c",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "execute_command_0008418c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_00080b64": {
            "renaming": {
                "FUN_00080b64": "set_channel_value_00080b64",
                "param_1": "value",
                "param_2": "channel_index",
                "uVar1": "combined_value",
                "PTR_s____source_tc_c_00080b80": "source_pointer",
                "PTR_s_set_channel_value_00080b84": "function_pointer",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "channel_size_pointer"
            },
            "code": "void set_channel_value_00080b64(uint32_t value, uint32_t channel_index) {\n  uint64_t combined_value = ((uint64_t)channel_index << 32) | value;\n  if (channel_index > 2) {\n    combined_value = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80,0x5c,PTR_s_set_channel_value_00080b64_00080b84,PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88);\n  }\n  uint32_t* ptr = (uint32_t*)((int)combined_value + (int)(combined_value >> 32) * 0x40);\n  *ptr = 5;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b64",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_channel_value_00080b64"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "call_afl_if_hypercall_disabled_0008014c",
                "ticks": "num_ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "no_hypercall_ptr",
                "aflCall": "call_afl"
            },
            "code": "uint32_t call_afl_if_hypercall_disabled_0008014c(int ticks) {\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = aflCall(1, ticks, 0);\n    return result;\n  }\n  return 0;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "call_afl_if_hypercall_disabled_0008014c"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "getCharAt_0008159e",
                "this": "this",
                "c": "c",
                "buf": "buffer",
                "sStack_a": "stackVar",
                "uVar1": "result"
            },
            "code": "uchar String::getCharAt_0008159e(String *this, char c) {\n  char buffer[2];\n  short stackVar;\n  uchar result = getCharAt_0008159e(this, buffer, 1);\n  return result;\n}",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "getCharAt_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "set_pin_with_values_000806a0",
                "this": "servo",
                "pin": "pin",
                "uVar1": "result"
            },
            "code": "uint8_t __thiscall Servo::set_pin_with_values_000806a0(Servo *servo, int pin) {\n  uint8_t result = set_pin_with_values_000806a0_with_values(servo, pin, 0x220, 0x960);\n  return result;\n}\n",
            "called": [
                "attach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "set_pin_with_values_000806a0"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "updateRingBuffer_000811ca",
                "this": "buffer",
                "c": "data",
                "_iHead": "head",
                "_iTail": "tail",
                "_aucBuffer": "data"
            },
            "code": "void __thiscall updateRingBuffer_000811ca(RingBuffer *buffer, uint8_t data) {\n  uint head_next = (buffer->head + 1U) & 0x7f;\n  if (head_next != buffer->tail) {\n    buffer->data[buffer->head] = data;\n    buffer->head = head_next;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "updateRingBuffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "setThrottleAndSteeringTo90Degrees_00080164",
                "PTR_throttle_0008017c": "throttleServo",
                "PTR_steering_00080180": "steeringServo"
            },
            "code": "void setThrottleAndSteeringTo90Degrees_00080164(void)\n{\n  Servo::write(PTR_throttle_0008017c, 90);\n  Servo::write(PTR_steering_00080180, 90);\n  return;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "setThrottleAndSteeringTo90Degrees_00080164"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "resizeString_00081496",
                "this": "str",
                "maxStrLen": "maxStrLen",
                "pcVar1": "newBuffer"
            },
            "code": "unsigned char resizeString_00081496(String *str, uint32_t maxStrLen) {\n  char *newBuffer = (char *)realloc(str->buffer, maxStrLen + 1);\n  if (newBuffer != NULL) {\n    str->buffer = newBuffer;\n    str->capacity = maxStrLen;\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resizeString_00081496"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "setPinStatus_00081014",
                "ulPin": "pin",
                "ulVal": "value",
                "puVar1": "pinDescription",
                "puVar2": "pinStatus",
                "iVar3": "outputDataStatus",
                "uVar4": "pinDescription1",
                "uVar5": "pinDescription2",
                "uVar6": "tempValue"
            },
            "code": "void setPinStatus_00081014(uint32_t pin, uint32_t value)\n{\n  undefined *pinStatus;\n  undefined *pinDescription;\n  int outputDataStatus;\n  undefined4 pinDescription1;\n  undefined4 pinDescription2;\n  uint32_t tempValue;\n  \n  pinStatus = PTR_g_pinStatus_00081080;\n  pinDescription = PTR_g_APinDescription_0008107c;\n  if (PTR_g_APinDescription_0008107c[pin * 0x1c + 0xc] != \"\\0\") {\n    tempValue = value;\n    if ((PTR_g_pinStatus_00081080[pin] & 0xf) == 5) {\n      pinMode(pin,1);\n    }\n    pinStatus[pin] = pinStatus[pin] & 0xf | (byte)(value << 4);\n    pinDescription2 = *(undefined4 *)(pinDescription + pin * 0x1c);\n    pinDescription1 = *(undefined4 *)(pinDescription + pin * 0x1c + 4);\n    outputDataStatus = PIO_GetOutputDataStatus(pinDescription2,pinDescription1);\n    if (outputDataStatus == 0) {\n      PIO_PullUp(pinDescription2,pinDescription1,value);\n      return;\n    }\n    PIO_SetOutput(pinDescription2,pinDescription1,value,0,1,tempValue);\n  }\n  return;\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_SetOutput",
                "PIO_GetOutputDataStatus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "Servo_Handler",
                "loop",
                "init"
            ],
            "imported": false,
            "current_name": "setPinStatus_00081014"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "do_nothing_000845bc"
            },
            "code": "\nvoid do_nothing_000845bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000845bc"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_00083da2;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_00083da2;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_00083da2;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_00083da2;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_00083da2;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_00083da2:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_fflush_r",
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "memcpy",
                "__swsetup_r",
                "memchr",
                "memmove"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00084404": {
            "renaming": {
                "FUN_00084404": "flush_output_buffer_and_close_file_00084404",
                "param_1": "file_descriptor",
                "param_2": "stream_pointer",
                "uVar1": "result",
                "iVar2": "function_result"
            },
            "code": "int flush_output_buffer_and_close_file_00084404(int file_descriptor, int stream_pointer)\n{\n  int result;\n  if (stream_pointer != 0)\n  {\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0))\n    {\n      __sinit();\n    }\n    if (*(short *)(stream_pointer + 0xc) != 0)\n    {\n      result = _fflush_r(file_descriptor, stream_pointer);\n      if ((*(code **)(stream_pointer + 0x2c) != (code *)0x0) && ((*(code **)(stream_pointer + 0x2c))(file_descriptor,*(undefined4 *)(stream_pointer + 0x1c)) < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream_pointer + 0xc) << 0x18) < 0)\n      {\n        _free_r(file_descriptor,*(undefined4 *)(stream_pointer + 0x10));\n      }\n      if (*(int *)(stream_pointer + 0x30) != 0)\n      {\n        if (*(int *)(stream_pointer + 0x30) != stream_pointer + 0x40)\n        {\n          _free_r(file_descriptor);\n        }\n        *(undefined4 *)(stream_pointer + 0x30) = 0;\n      }\n      if (*(int *)(stream_pointer + 0x44) != 0)\n      {\n        _free_r(file_descriptor);\n        *(undefined4 *)(stream_pointer + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream_pointer + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084404",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "flush_output_buffer_and_close_file_00084404"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00081b3c;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00081b3c + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00081b3c + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00081b3c + 0x10);\n  puVar12 = PTR___malloc_av__00081b3c + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00081b3c + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00081b3c + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00081d44 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00081d44 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00081c5e;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00081c5e:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00081b44;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_00081b1a;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00081b44 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00081b40 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00081b50;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00081b50 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00081b50 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00081b44 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00081b50;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00081b04;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_00081b48 < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_00081b48 = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00081b4c < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00081b4c = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "__malloc_lock",
                "_free_r",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "_realloc_r",
                "__smakebuf_r",
                "malloc",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_completed_000800f4",
                "*param_1": "*input_string",
                "*PTR_completed_7857_0008010c": "*PTR_completed_flag",
                "DAT_00080110": "DAT_etext_offset",
                "PTR__etext_00080114": "PTR_etext_address"
            },
            "code": "char* check_if_completed_000800f4(char* input_string) {\\n    if (*PTR_completed_7857_0008010c == \"\\0\") {\\n        if (DAT_00080110 != 0) {\\n            input_string = PTR__etext_00080114;\\n        }\\n        *PTR_completed_7857_0008010c = 1;\\n    }\\n    return input_string;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_completed_000800f4"
        },
        "FUN_00080aec": {
            "renaming": {
                "FUN_00080aec": "check_bit_00080aec",
                "param_1": "bit_position",
                "uVar1": "bit_mask",
                "uVar2": "result"
            },
            "code": "int check_bit_00080aec(uint bit_position)\n{\n  uint bit_mask;\n  uint *data_ptr = PTR_DAT_00080b28;\n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      uint result = data_ptr[0x18] & bit_mask;\n      if (result == bit_mask) {\n        data_ptr[0x14] = result;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      uint result = data_ptr[0x108] & bit_mask;\n      if (result == bit_mask) {\n        data_ptr[0x104] = result;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aec",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_00080aec"
        },
        "FUN_0008136c": {
            "renaming": {
                "FUN_0008136c": "initializeUART_0008136c",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "modeReg": "modeReg",
                "_dwId": "id",
                "_pUart": "uartPointer",
                "PTR_SystemCoreClock_000813d4": "systemCoreClockPointer",
                "UART_PTCR": "UART_PTCR",
                "UART_CR": "UART_CR",
                "UART_MR": "UART_MR",
                "UART_BRGR": "UART_BRGR",
                "UART_IDR": "UART_IDR",
                "DAT_000813d8": "irqDataPointer",
                "_dwIrq": "irq",
                "_rx_buffer": "rxBufferPointer",
                "_tx_buffer": "txBufferPointer",
                "_iTail": "tailIndex",
                "_iHead": "headIndex"
            },
            "code": "void __thiscall initializeUART_0008136c(UARTClass *uart, uint32_t baudRate, uint32_t modeReg) {\n  pmc_enable_periph_clk(uart->id);\n  Uart *uartPointer = uart->uartPointer;\n  uartPointer->UART_PTCR = 0x202;\n  uartPointer->UART_CR = 0xac;\n  uint32_t *systemCoreClock = uart->PTR_SystemCoreClock_000813d4;\n  uartPointer->UART_MR = modeReg;\n  uartPointer->UART_BRGR = *systemCoreClock / baudRate >> 4;\n  uartPointer->UART_IDR = 0xffffffff;\n  uartPointer->UART_IER = 0x61;\n  *(int *)(uart->DAT_000813d8 + ((uint)(int)uart->irq >> 5) * 4) = 1 << (uint)(byte)(uart->irq & 0x1f);\n  RingBuffer *rxBuffer = uart->rxBufferPointer;\n  rxBuffer->tailIndex = 0;\n  rxBuffer->headIndex = 0;\n  RingBuffer *txBuffer = uart->txBufferPointer;\n  txBuffer->tailIndex = 0;\n  txBuffer->headIndex = 0;\n  uartPointer->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008136c",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initializeUART_0008136c"
        },
        "FUN_000810c4": {
            "renaming": {
                "__thiscall Print::FUN_000810c4": "size_t Print::writeString",
                "*this": "Print *printObj",
                "str": "char *stringToWrite",
                "sVar1": "size_t bytesWritten",
                "FUN_000810c4": "writeString_000810c4"
            },
            "code": "size_t Print::writeString_000810c4(Print *printObj, char *stringToWrite)\n{\n  size_t bytesWritten;\n  bytesWritten = write(printObj, stringToWrite);\n  return bytesWritten;\n}",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "writeString_000810c4"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "determine_index_and_value_of_param_00080c98",
                "param_1": "param_array",
                "param_2": "param_array_length",
                "param_3": "divisor",
                "param_4": "max_value",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "local_max_values_array"
            },
            "code": "uint32_t determine_index_and_value_of_param_00080c98(uint32_t *param_array, uint32_t param_array_length, uint32_t divisor, uint32_t max_value)\n{\n  uint32_t local_max_values_array[16];\n  local_max_values_array[0] = *(uint32_t *)PTR_DAT_00080d28;\n  local_max_values_array[1] = *(uint32_t *)(PTR_DAT_00080d28 + 4);\n  local_max_values_array[2] = *(uint32_t *)(PTR_DAT_00080d28 + 8);\n  local_max_values_array[3] = *(uint32_t *)(PTR_DAT_00080d28 + 0xc);\n  local_max_values_array[4] = *(uint32_t *)(PTR_DAT_00080d28 + 0x10);\n  local_max_values_array[5] = *(uint32_t *)(PTR_DAT_00080d28 + 0x14);\n  local_max_values_array[6] = *(uint32_t *)(PTR_DAT_00080d28 + 0x18);\n  local_max_values_array[7] = *(uint32_t *)(PTR_DAT_00080d28 + 0x1c);\n  local_max_values_array[8] = *(uint32_t *)(PTR_DAT_00080d28 + 0x20);\n  local_max_values_array[9] = *(uint32_t *)(PTR_DAT_00080d28 + 0x24);\n  local_max_values_array[10] = *(uint32_t *)(PTR_DAT_00080d28 + 0x28);\n  local_max_values_array[11] = *(uint32_t *)(PTR_DAT_00080d28 + 0x2c);\n  local_max_values_array[12] = *(uint32_t *)(PTR_DAT_00080d28 + 0x30);\n  local_max_values_array[13] = *(uint32_t *)(PTR_DAT_00080d28 + 0x34);\n  local_max_values_array[14] = *(uint32_t *)(PTR_DAT_00080d28 + 0x38);\n  local_max_values_array[15] = *(uint32_t *)(PTR_DAT_00080d28 + 0x3c);\n  param_array[0] = 1;\n  param_array[1] = 0;\n  param_array[0x48] = 0x202;\n  param_array[0x41] = 0;\n  param_array[0x45] = 0;\n  uint32_t quotient = param_array_length / (divisor * 2);\n  if (param_array_length == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  uint32_t index = 0;\n  do {\n    if ((uint32_t)(max_value * (int)(((uint64_t)param_array_length / (uint64_t)((quotient + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= local_max_values_array[index]) {\n      param_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | param_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "determine_index_and_value_of_param_00080c98"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "waitForData_000811e8",
                "uVar1": "currentMillis",
                "iVar2": "data",
                "_startMillis": "startMillis",
                "this": "this",
                "_timeout": "timeout",
                "super_Print": "super_Print"
            },
            "code": "int __thiscall Stream::waitForData_000811e8(Stream *this)\n{\n  uint32_t currentMillis;\n  int data;\n  currentMillis = millis();\n  this->startMillis = currentMillis;\n  do {\n    data = (*(this->super_Print)._vptr_Print[3])();\n    if (data >= 0) {\n      return data;\n    }\n    currentMillis = millis();\n  } while (currentMillis - this->startMillis < this->timeout);\n  return -1;\n}",
            "called": [
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "readStringUntil"
            ],
            "imported": false,
            "current_name": "waitForData_000811e8"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "manual_control_00080250",
                "PTR_rxMode_000803bc": "rxMode",
                "PTR_LEDstatus_000803c0": "LEDstatus",
                "PTR_mode_000803cc": "mode",
                "PTR_Serial_000803c8": "Serial",
                "PTR_rxSteer_000803d4": "rx_steer",
                "PTR_rxMotor_000803d8": "rx_motor",
                "PTR_throttle_000803e0": "throttle",
                "PTR_steering_000803e4": "steering",
                "PTR_s_Entered_manual_control_mode__000803d0": "\"Entered manual control mode.\"",
                "PTR_s_Entered_autonomous_control_mode__000803e8": "\"Entered autonomous control mode.\"",
                "PTR_s_steer_000803f4": "\"steer\"",
                "PTR_s_motor_000803f8": "\"motor\"",
                "PTR_command_000803ec": "command",
                "PTR_value_000803f0": "value",
                "SStack_1c": "input"
            },
            "code": "void manual_control_00080250()\n{\n  uint32_t pulse_width = pulseIn(4, 1, 20000);\n  uint32_t* rx_PTR_mode_000803cc = PTR_rxMode_000803bc;\n  *rx_PTR_mode_000803cc = pulse_width;\n  delay(10);\n  bool led_status = *PTR_LEDstatus_000803c0;\n  *PTR_LEDstatus_000803c0 = !led_status;\n  digitalWrite(13, !led_status);\n  uint32_t PTR_mode_000803cc = *PTR_mode_000803cc;\n  if (*rx_PTR_mode_000803cc < 1601)\n  {\n    if (*rx_PTR_mode_000803cc > 901)\n    {\n      if (PTR_mode_000803cc != 0)\n      {\n        straight_and_stop();\n        PTR_Serial_000803c8.println(PTR_s_Entered_manual_control_00080250_PTR_mode_000803cc__000803d0);\n        *PTR_mode_000803cc = 0;\n      }\n      delay(10);\n      uint32_t PTR_rxSteer_000803d4 = map(pulseIn(3, 1, 20000), 1000, 2000, 40, 150);\n      uint32_t PTR_rxMotor_000803d8 = map(*rx_PTR_mode_000803cc, 1000, 2000, 40, 150);\n      while (PTR_Serial_000803c8.available() > 0)\n      {\n        uint32_t in_byte = PTR_Serial_000803c8.read();\n        PTR_Serial_000803c8.print(PTR_rxSteer_000803d4);\n        PTR_Serial_000803c8.print(\",\");\n        PTR_Serial_000803c8.println(PTR_rxMotor_000803d8);\n      }\n      PTR_throttle_000803e0.write(PTR_rxMotor_000803d8);\n      PTR_steering_000803e4.write(PTR_rxSteer_000803d4);\n    }\n    else\n    {\n      if (PTR_mode_000803cc == 0)\n      {\n        straight_and_stop();\n        PTR_Serial_000803c8.println(PTR_s_Entered_autonomous_control_PTR_mode_000803cc__000803e8);\n      }\n      *PTR_mode_000803cc = 1;\n      goto read_serial;\n    }\n  }\n  else\n  {\n    straight_and_stop();\n    PTR_Serial_000803c8.println(\"Error: Pulse width too high.\");\n  }\n\n  return;\n}\n",
            "called": [
                "map",
                "println",
                "pulseIn",
                "print",
                "print",
                "println",
                "delay",
                "~String",
                "toInt",
                "straightAndStop",
                "available",
                "write",
                "equals",
                "digitalWrite",
                "read",
                "readStringUntil",
                "operator="
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "manual_control_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_00080d6a",
                "param_1": "base_address",
                "param_2": "parameter_value"
            },
            "code": "void set_parameter_00080d6a(int base_address, int parameter_value)\n{\n  *(int *)(base_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "UARTClass::FUN_000813dc": "initializeUART",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "init": "init",
                "FUN_000813dc": "initializeUART_000813dc"
            },
            "code": "void __thiscall initializeUART_000813dc(UARTClass *uart, uint32_t baudRate)\n{\n  init(uart, baudRate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initializeUART_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "update_parameters_00080a0a",
                "param_1": "param_list",
                "param_2": "new_param",
                "param_3": "has_param3",
                "param_4": "has_param4",
                "param_5": "has_param5",
                "0x11": "17",
                "0x18": "24",
                "0x19": "25",
                "0x15": "21",
                "0x14": "20",
                "0xd": "13",
                "0xc": "12",
                "4": "4",
                "*param_1": "*param_list"
            },
            "code": "void update_parameters_00080a0a(int *param_list, int new_param, int has_param5, int has_param4, int has_param3) {\n  param_list[17] = new_param;\n  if (has_param5 == 0) {\n    param_list[24] = new_param;\n  }\n  else {\n    param_list[25] = new_param;\n  }\n  if (has_param4 == 0) {\n    param_list[21] = new_param;\n  }\n  else {\n    param_list[20] = new_param;\n  }\n  if (has_param3 == 0) {\n    param_list[13] = new_param;\n  }\n  else {\n    param_list[12] = new_param;\n  }\n  param_list[4] = new_param;\n  *param_list = new_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_parameters_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "set_channel_state_and_data_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_state",
                "param_3": "source_data",
                "uVar3": "concat_input",
                "iVar1": "offset1",
                "iVar2": "offset2"
            },
            "code": "void set_channel_state_and_data_00080b2c(int channel_id, uint32_t channel_state, void *source_data){\n  int offset1;\n  int offset2;\n  uint64_t concat_input;\n\n  concat_input = ((uint64_t)channel_state << 32) | channel_id;\n\n  if(channel_state > 2){\n    source_data = default_source_data;\n    concat_input = (*DAT_00080b60)(source_tc_c, 0x40, default_source_data, sizeof(TC_CHANNEL));\n  }\n\n  offset1 = (int)(concat_input >> 0x20) * 0x40;\n  offset2 = (int)concat_input + offset1;\n\n  *(uint32_t *)(offset2) = 2;\n  *(uint32_t *)(offset2 + 0x28) = 0xffffffff;\n  *(void **)(offset2 + 4) = source_data;\n}",
            "called": [
                "__assert_func"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "_initISR"
            ],
            "imported": false,
            "current_name": "set_channel_state_and_data_00080b2c"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initializeDataStructures_00083888",
                "param_1": "dataStructures",
                "puVar5": "dataStructure1",
                "puVar6": "dataStructure2",
                "DAT_00083968": "defaultDataValue",
                "DAT_0008396c": "defaultDataValue1",
                "DAT_00083970": "defaultDataValue2",
                "DAT_00083974": "defaultDataValue3",
                "DAT_00083978": "defaultDataValue4"
            },
            "code": "void initializeDataStructures_00083888(int dataStructures)\n{\n    if (*(int *)(dataStructures + 0x38) == 0)\n    {\n        undefined4 *dataStructure1 = *(undefined4 **)(dataStructures + 4);\n        undefined4 *dataStructure2 = *(undefined4 **)(dataStructures + 8);\n        undefined4 *dataStructure3 = *(undefined4 **)(dataStructures + 0xc);\n        *(undefined4 *)(dataStructures + 0x3c) = DAT_00083968;\n        *(undefined4 *)(dataStructures + 0x2e4) = 3;\n        *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n        *(undefined4 *)(dataStructures + 0x2e0) = 0;\n        *(undefined2 *)(dataStructure1 + 3) = 4;\n        *dataStructure1 = 0;\n        dataStructure1[1] = 0;\n        dataStructure1[2] = 0;\n        dataStructure1[0x19] = 0;\n        *(undefined2 *)((int)dataStructure1 + 0xe) = 0;\n        dataStructure1[4] = 0;\n        dataStructure1[5] = 0;\n        dataStructure1[6] = 0;\n        memset(dataStructure1 + 0x17, 0, 8);\n        undefined4 uVar4 = DAT_00083978;\n        undefined4 uVar3 = DAT_00083974;\n        undefined4 uVar2 = DAT_00083970;\n        undefined4 uVar1 = DAT_0008396c;\n        dataStructure1[7] = dataStructure1;\n        dataStructure1[8] = uVar1;\n        dataStructure1[9] = uVar2;\n        dataStructure1[10] = uVar3;\n        dataStructure1[0xb] = uVar4;\n        *(undefined2 *)((int)dataStructure2 + 0xe) = 1;\n        *(undefined2 *)(dataStructure2 + 3) = 9;\n        *dataStructure2 = 0;\n        dataStructure2[1] = 0;\n        dataStructure2[2] = 0;\n        dataStructure2[0x19] = 0;\n        dataStructure2[4] = 0;\n        dataStructure2[5] = 0;\n        dataStructure2[6] = 0;\n        memset(dataStructure2 + 0x17, 0, 8);\n        dataStructure2[7] = dataStructure2;\n        dataStructure2[8] = uVar1;\n        dataStructure2[9] = uVar2;\n        dataStructure2[10] = uVar3;\n        dataStructure2[0xb] = uVar4;\n        *(undefined2 *)(dataStructure3 + 3) = 0x12;\n        *(undefined2 *)((int)dataStructure3 + 0xe) = 2;\n        *dataStructure3 = 0;\n        dataStructure3[1] = 0;\n        dataStructure3[2] = 0;\n        dataStructure3[0x19] = 0;\n        dataStructure3[4] = 0;\n        dataStructure3[5] = 0;\n        dataStructure3[6] = 0;\n        memset(dataStructure3 + 0x17, 0, 8);\n        dataStructure3[7] = dataStructure3;\n        dataStructure3[8] = uVar1;\n        dataStructure3[9] = uVar2;\n        dataStructure3[10] = uVar3;\n        dataStructure3[0xb] = uVar4;\n        *(undefined4 *)(dataStructures + 0x38) = 1;\n    }\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "__swsetup_r",
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "initializeDataStructures_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348::FUN_00081348": "UART_Controller::UART_Controller",
                "this": "controller_instance",
                "pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "PTR_PTR_write_1_00081368": "write_pointer",
                "FUN_00081348": "UART_Controller_00081348"
            },
            "code": "UART_Controller_00081348 * __thiscall UART_Controller_00081348::UART_Controller_00081348(UART_Controller_00081348 *this, Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer)\n{\n  undefined *PTR_PTR_write_1_00081368;\n  this->field_0x4 = 0;\n  this->field_0x8 = 1000;\n  PTR_PTR_write_1_00081368 = PTR_PTR_write_1_00081368;\n  this->_pUart = uart;\n  *(undefined **)this = PTR_PTR_write_1_00081368;\n  this->_dwIrq = irq;\n  this->_rx_buffer = rx_buffer;\n  this->_dwId = id;\n  this->_tx_buffer = tx_buffer;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "imported": false,
            "current_name": "UART_Controller_00081348"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "initializeCar_000801e0",
                "UARTClass::begin": "initializeUART",
                "PTR_Serial_00080244": "serial",
                "pinMode": "setPinMode",
                "Servo::attach": "attachServo",
                "PTR_steering_00080248": "steeringServo",
                "PTR_throttle_0008024c": "throttleServo",
                "straightAndStop": "stopCar",
                "delay": "wait",
                "startForkserver": "startServer"
            },
            "code": "void initializeCar_000801e0(void)\n{\n  initializeUART();\n  setPinMode(13, OUTPUT);\n  setPinMode(6, OUTPUT);\n  setPinMode(57, INPUT);\n  setPinMode(4, INPUT_PULLUP);\n  setPinMode(3, INPUT_PULLUP);\n  setPinMode(2, INPUT_PULLUP);\n  attachServo(PTR_steering_00080248, 5);\n  attachServo(PTR_throttle_0008024c, 6);\n  straightAndStop();\n  delay(1000);\n  startForkserver(0);\n  return;\n}",
            "called": [
                "pinMode",
                "straightAndStop",
                "startForkserver",
                "delay",
                "attach",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeCar_000801e0"
        },
        "FUN_00080d80": {
            "renaming": {
                "FUN_00080d80": "processCallbacks_00080d80",
                "uVar1": "bitPosition",
                "uVar2": "bitMask",
                "PTR_callbacksPioA_00080db4": "callbackTableAddress",
                "DAT_00080db0": "dataAddress"
            },
            "code": "void processCallbacks_00080d80(void)\n{\n  uint32_t bitMask;\n  uint32_t bitPosition;\n  uint32_t callbackIndex;\n  bitMask = *(uint32_t *)(DAT_00080db0 + 0x4c);\n  while (true)\n  {\n    bitPosition = count_leading_zeroes(bitMask);\n    if (bitPosition > 0x1f)\n    {\n      break;\n    }\n    bitPosition = 0x1f - bitPosition;\n    callbackIndex = bitPosition * 4 + PTR_callbacksPioA_00080db4;\n    if (*(code **)callbackIndex != (code *)0x0)\n    {\n      (**(code **)callbackIndex)();\n    }\n    bitMask &= ~(1 << bitPosition);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d80",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacks_00080d80"
        },
        "FUN_000811b0": {
            "renaming": {
                "__thiscall FUN_000811b0::FUN_000811b0": "initializeBuffer",
                "this": "buffer",
                "memset": "initializeMemory",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "FUN_000811b0": "initializeBuffer_000811b0"
            },
            "code": "initializeBuffer_000811b0* initializeBuffer_000811b0(initializeBuffer_000811b0 *buffer)\n{\n    memset(buffer, 0, 0x80);\n    buffer->headIndex = 0;\n    buffer->tailIndex = 0;\n    return buffer;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initializeBuffer_000811b0"
        },
        "FUN_0008387c": {
            "renaming": {
                "FUN_0008387c": "walk_function_0008387c",
                "param_1": "ptr",
                "DAT_00083884": "action"
            },
            "code": "void walk_function_0008387c(void* ptr, void (*DAT_00083884)(void *))\n{\n  _fwalk(ptr, DAT_00083884);\n  return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008387c",
            "calling": [],
            "imported": false,
            "current_name": "walk_function_0008387c"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "map_0008145c",
                "x": "value",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max",
                "(uint)": ""
            },
            "code": "long map_0008145c(long value, long input_min, long input_max, long output_min, long output_max) {\n    long input_range = input_max - input_min;\n    long output_range = output_max - output_min;\n    long scaled_value = (value - input_min) * output_range / input_range + output_min;\n    return scaled_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "write",
                "loop"
            ],
            "imported": false,
            "current_name": "map_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "bit_mask",
                "bVar1": "is_negative",
                "PTR_DAT_00000011": "memory[0x11]",
                "PTR_DAT_00000018": "memory[0x18]",
                "PTR_DAT_00000019": "memory[0x19]",
                "PTR_DAT_00000005": "memory[5]",
                "PTR_DAT_00000008": "memory[8]",
                "PTR_DAT_00000009": "memory[9]",
                "PTR_DAT_00000020": "memory[0x20]"
            },
            "code": "void set_values_000809e4(uint32_t *memory, uint32_t value, uint32_t bit_mask) {\n    bool is_negative = (int)(bit_mask << 0x1f) < 0;\n    PTR_DAT_00000011 = value;\n    if (is_negative) {\n        PTR_DAT_00000019 = value;\n    }\n    if (!is_negative) {\n        PTR_DAT_00000018 = value;\n    }\n    bool is_bit_set = (bit_mask & 10) != 0;\n    if (is_bit_set) {\n        PTR_DAT_00000008 = value;\n    }\n    if (!is_bit_set) {\n        PTR_DAT_00000009 = value;\n    }\n    if (((int)(bit_mask << 0x1e) < 0) || ((int)(bit_mask << 0x1c) < 0)) {\n        PTR_DAT_00000020 = value;\n    }\n    PTR_DAT_00000005 = value;\n    *memory = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_values_000809e4"
        },
        "FUN_00081470": {
            "renaming": {
                "FUN_00081470": "do_nothing_00081470"
            },
            "code": "\nvoid __thiscall String::do_nothing_00081470(String *this)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081470",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_00081470"
        },
        "FUN_00081472": {
            "renaming": {
                "_String": "freeBuffer",
                "this": "stringObj",
                "__in_chrg": "inChargeFlag",
                "FUN_00081472": "freeBuffer_00081472"
            },
            "code": "void * freeBuffer_00081472(String *stringObj, int inChargeFlag) {\n\tfree(stringObj->buffer);\n\treturn stringObj;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "freeBuffer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "terminate_program_000836ec",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void terminate_program_000836ec(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}\n",
            "called": [
                "_exit",
                "raise"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "terminate_program_000836ec"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "read_and_return_00080148",
                "a0": "data",
                "a1": "address",
                "a2": "status"
            },
            "code": "uint32_t read_and_return_00080148(uint32_t data, uint32_t address, int32_t status)\n{\n  software_interrupt(0x3f);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "read_and_return_00080148"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "find_string_length_00082688",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "word",
                "uVar3": "current_word",
                "bVar4": "is_last_word"
            },
            "code": "size_t find_string_length_00082688(char* string)\n{\n    size_t length = 0;\n    uint32_t* word = (uint32_t*)((uint32_t)string & 0xfffffffc);\n    size_t offset = -((uint32_t)string & 3);\n    uint32_t current_word = *word;\n    if (((uint32_t)string & 3) != 0) {\n        current_word |= 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n    }\n    while (word++, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n        offset += 4;\n        current_word = *word;\n    }\n    bool is_last_word = (current_word & 0xff) == 0;\n    if (!is_last_word) {\n        offset += 1;\n        is_last_word = (current_word & 0xff00) == 0;\n    }\n    if (!is_last_word) {\n        offset += 1;\n        is_last_word = (current_word & 0xff0000) == 0;\n    }\n    if (!is_last_word) {\n        offset += 1;\n    }\n    return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "write",
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "find_string_length_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "read_file_00084508",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_00084508(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n    int read_result;\n    int *error_ptr = PTR_errno_0008452c;\n    *error_ptr = 0;\n    read_result = _read(file_descriptor, buffer, buffer_size);\n    if ((read_result == -1) && (*error_ptr != 0)) {\n        *error_code = *error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084508"
        },
        "FUN_0008429c": {
            "renaming": {
                "FUN_0008429c": "close_file_descriptor_0008429c",
                "param_1": "file_descriptor_pointer",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_0008429c(void* file_descriptor_pointer, int file_descriptor_offset) {\n    _close_r(file_descriptor_pointer, (int)*(short *)(file_descriptor_offset + 0xe));\n    return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008429c",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_0008429c"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "update_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "update_type",
                "param_3": "new_data",
                "param_4": "bitmask",
                "bVar1": "is_negative"
            },
            "code": "int update_data_00080a30(int data_ptr, int update_type, int new_data, unsigned int bitmask)\n{\n    bool is_negative = (int)(bitmask << 0x1f) < 0;\n    switch(update_type) {\n        case 1:\n        case 2:\n            (*data_ptr)(data_ptr, update_type, new_data);\n            *(int *)(data_ptr + 0x44) = new_data;\n            if (is_negative) {\n                *(int *)(data_ptr + 100) = new_data;\n            }\n            if (!is_negative) {\n                *(int *)(data_ptr + 0x60) = new_data;\n            }\n            break;\n        case 3:\n            (*DAT_00080a8c)(data_ptr, new_data, bitmask, DAT_00080a8c, data_ptr);\n            break;\n        case 4:\n        case 5:\n            (*DAT_00080a90)(data_ptr, new_data, update_type == 5, (bitmask << 0x1d) >> 0x1f, bitmask & 1, update_type, new_data);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "update_data_00080a30"
        },
        "FUN_000810a6": {
            "renaming": {
                "__thiscall Print::FUN_000810a6": "size_t Print::printString",
                "this": "this",
                "str": "string",
                "sVar1": "stringLength",
                "sVar2": "printedLength",
                "_vptr_Print": "_vptr_Print",
                "FUN_000810a6": "printString_000810a6"
            },
            "code": "size_t Print::printString_000810a6(Print *this, char *string) {\n    size_t stringLength;\n    size_t printedLength;\n\n    if (string != NULL) {\n        stringLength = strlen(string);\n        printedLength = (*this->_vptr_Print[1])(stringLength, string, stringLength);\n        return printedLength;\n    }\n    return (size_t)string;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "print",
                "println",
                "println",
                "printNumber"
            ],
            "imported": false,
            "current_name": "printString_000810a6"
        }
    },
    "used_tokens": 137793,
    "layers": [
        [
            "FUN_000840f8",
            "FUN_00081d48",
            "FUN_00084018",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_0008044c",
            "FUN_00081e34",
            "FUN_000826e8",
            "FUN_00080df0",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080588",
            "FUN_00080d3e",
            "FUN_000841f4",
            "FUN_000812a0",
            "FUN_0008130c",
            "FUN_0008142e",
            "FUN_00080d58",
            "FUN_00081084",
            "FUN_00080558",
            "FUN_00083708",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084244",
            "FUN_00084004",
            "FUN_000816ec",
            "FUN_00080568",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_00080d30",
            "FUN_00080eec",
            "FUN_000816c8",
            "FUN_000810fc",
            "FUN_00080ec2",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_000843e0",
            "FUN_00080eba",
            "FUN_0008173c",
            "FUN_00081190",
            "FUN_000805e8",
            "FUN_00080ebe",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00080e28",
            "FUN_00084220",
            "FUN_00080db8",
            "FUN_0008421c",
            "FUN_0008089c",
            "FUN_000816e4",
            "FUN_00080750",
            "FUN_00080ea4",
            "FUN_00080f0c",
            "FUN_000844e0",
            "FUN_0008236c",
            "FUN_000842a4",
            "FUN_000839b4",
            "FUN_00080eb0",
            "FUN_00081734",
            "FUN_00080768",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_00081f00",
            "FUN_0008075c",
            "FUN_00080eaa",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_000806ac",
            "FUN_20070000",
            "FUN_000834f0",
            "FUN_0008125a",
            "FUN_000810d8",
            "FUN_00080f04",
            "FUN_000805a8",
            "FUN_00080184",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000843b8",
            "FUN_0008073c",
            "FUN_00081480",
            "FUN_00081244",
            "FUN_000836fc",
            "FUN_00081248",
            "FUN_0008418c",
            "FUN_0008014c",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00081496",
            "FUN_00081014",
            "FUN_00084404",
            "FUN_000800f4",
            "FUN_00080aec",
            "FUN_0008136c",
            "FUN_000810c4",
            "FUN_00080c98",
            "FUN_000811e8",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_000801e0",
            "FUN_00080d80",
            "FUN_0008387c",
            "FUN_0008145c",
            "FUN_000809e4",
            "FUN_000836ec",
            "FUN_00080148",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_0008429c",
            "FUN_00080a30",
            "FUN_000810a6"
        ],
        [
            "FUN_00081560",
            "FUN_000814f6",
            "FUN_000841e4",
            "FUN_000827fc",
            "FUN_00081438",
            "FUN_00084484",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_000817f0",
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_00082814",
            "FUN_00081176",
            "FUN_00082824",
            "FUN_0008113a",
            "FUN_000810e8",
            "FUN_00081f9c",
            "FUN_00081800",
            "FUN_00080b64",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_000811b0",
            "FUN_00081472"
        ]
    ],
    "locked_functions": []
}