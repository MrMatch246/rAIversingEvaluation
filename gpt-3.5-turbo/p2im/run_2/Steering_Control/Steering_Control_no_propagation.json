{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "process_data_and_call_function_000817c8",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uStack_c": "stack_var_1",
                "uStack_8": "stack_var_2",
                "uStack_4": "stack_var_3",
                "*DAT_000817ec": "*PTR_DAT_000817ec"
            },
            "code": "void process_data_and_call_function_000817c8(undefined4 data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  stack_var_1 = param_2;\n  stack_var_2 = param_3;\n  stack_var_3 = param_4;\n  call_function(*DAT_000817ec, *(undefined4 *)(*DAT_000817ec + 8), data, &stack_var_1);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_parameters_00081560",
                "param_1": "first_param",
                "param_2": "second_param",
                "FUN_0008151c": "call_error_handler"
            },
            "code": "int compare_parameters_00081560(int first_param, int second_param)\n{\n    if (first_param != second_param) {\n        call_error_handler();\n    }\n    return first_param;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "compare_parameters_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "check_bits_00081684",
                "param_1": "bit_array",
                "param_2": "mask",
                "param_3": "expected_bits",
                "param_4": "num_bits_to_check",
                "iVar1": "num_matched_bits",
                "*param_1": "*bit_array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int check_bits_00081684(uint *bit_array, uint mask, uint expected_bits, int num_bits_to_check)\n{\n    int num_matched_bits = 0;\n    \n    while (num_bits_to_check--)\n    {\n        if ((*bit_array & mask) != expected_bits)\n        {\n            int num_remaining_bits = num_bits_to_check;\n            \n            while (num_remaining_bits--)\n            {\n                if ((*bit_array & mask) == expected_bits)\n                {\n                    return num_matched_bits;\n                }\n                num_matched_bits++;\n            }\n            return 0;\n        }\n        num_matched_bits++;\n        bit_array++;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "check_bits_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr",
                "puVar4": "dest_ptr",
                "uVar5": "current_int",
                "uVar6": "next_int",
                "puVar7": "dest_ptr",
                "bVar8": "is_null_byte"
            },
            "code": "void copy_string_000825cc(uint *dest, uint *src)\n{\n    char current_char;\n    ushort current_short;\n    uint *src_ptr;\n    uint *dest_ptr;\n    uint current_int;\n    bool is_null_byte;\n\n    if ((((uint)dest ^ (uint)src) & 3) != 0) {\n        do {\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            src = (uint *)((int)src + 1);\n            dest = (uint *)((int)dest + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n    if (((uint)src & 3) != 0) {\n        src_ptr = src;\n        if (((uint)src & 1) != 0) {\n            src_ptr = (uint *)((int)src + 1);\n            current_char = *(char *)src;\n            *(char *)dest = current_char;\n            dest = (uint *)((int)dest + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        src = src_ptr;\n        if (((uint)src_ptr & 2) != 0) {\n            src = (uint *)((int)src_ptr + 2);\n            current_short = *(ushort *)src_ptr;\n            is_null_byte = (current_short & 0xff) == 0;\n            if (is_null_byte) {\n                *(char *)dest = (char)current_short;\n            }\n            else {\n                *(ushort *)dest = current_short;\n                is_null_byte = (current_short & 0xff00) == 0;\n                dest = (uint *)((int)dest + 2);\n            }\n            if (is_null_byte) {\n                return;\n            }\n        }\n    }\n    current_int = *src;\n    src_ptr = src + 1;\n    dest_ptr = dest;\n    if (((uint)src & 4) != 0) {\n        if ((current_int + 0xfefefeff & ~current_int & 0x80808080) != 0) goto LAB_00082630;\n        dest_ptr = dest + 1;\n        *dest = current_int;\n        src_ptr = src + 2;\n        current_int = src[1];\n    }\n    while (true) {\n        current_int = *src_ptr;\n        if ((current_int + 0xfefefeff & ~current_int & 0x80808080) != 0) break;\n        *dest_ptr = current_int;\n        current_int = *(src_ptr + 1);\n        if ((current_int + 0xfefefeff & ~current_int & 0x80808080) != 0) break;\n        *(dest_ptr + 1) = current_int;\n        src_ptr += 2;\n        dest_ptr += 2;\n    }\nLAB_00082630:\n    do {\n        *(char *)dest_ptr = (char)current_int;\n        current_int = current_int >> 8 | current_int << 0x18;\n        dest_ptr = (uint *)((int)dest_ptr + 1);\n    } while ((current_int & 0xff) != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "process_data_00080118",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "callback",
                "DAT_00080134": "is_data_available",
                "PTR_DAT_0008013c": "data_buffer",
                "DAT_00080140": "callback_function",
                "DAT_00080144": "data_callback"
            },
            "code": "void process_data_00080118(undefined4 param_1, undefined *data, undefined4 data_size, undefined4 callback) {\n  if (DAT_00080134 != 0) {\n    data = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140, data, data_size, DAT_00080144, callback);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "process_data_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_bit_00080aa8",
                "param_1": "bit_position",
                "uVar1": "bit_mask",
                "DAT_00080ae8": "PTR_DAT_00080ae8"
            },
            "code": "int check_bit_00080aa8(uint bit_position){\n    uint bit_mask;\n    if (bit_position < 45) {\n        if (bit_position < 32) {\n            bit_mask = 1 << (bit_position & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x18)) != bit_mask) {\n                *(uint *)(DAT_00080ae8 + 0x10) = bit_mask;\n            }\n        }\n        else {\n            bit_mask = 1 << (bit_position - 0x20 & 0xff);\n            if ((bit_mask & *(uint *)(DAT_00080ae8 + 0x108)) != bit_mask) {\n                *(uint *)(DAT_00080ae8 + 0x100) = bit_mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000803fc",
                "FUN_000813dc",
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "check_bit_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "process_data_00080f0c",
                "param_1": "index",
                "param_2": "mode",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "return_value",
                "uVar4": "bit_mask_1",
                "uVar5": "bit_mask_2",
                "uVar6": "byte_value_1",
                "bVar7": "byte_value_2",
                "iVar9": "index_offset",
                "iVar10": "function_return_value"
            },
            "code": "int process_data_00080f0c(int index, int mode){\n    undefined *data_ptr_1;\n    undefined *data_ptr_2;\n    int return_value;\n    uint bit_mask_1;\n    uint bit_mask_2;\n    byte byte_value_1;\n    byte byte_value_2;\n    int index_offset;\n    int function_return_value;\n    \n    data_ptr_2 = PTR_DAT_0008100c;\n    data_ptr_1 = PTR_DAT_00081008;\n    return_value = index;\n    if (PTR_DAT_00081008[index * 0x1c + 0xc] != \"\\0\") {\n        if ((PTR_DAT_0008100c[index] & 0xf) == 4) {\n            return_value = FUN_00080d58(DAT_00081010,PTR_DAT_00081008[index * 0x1c + 0x19]);\n        }\n        byte_value_1 = data_ptr_2[index];\n        byte_value_2 = byte_value_1 & 0xf;\n        if ((byte_value_2 < 3) && (byte_value_1 != 0)) {\n            if (byte_value_2 == 2) {\n                if (mode == 0) {\n                    return return_value;\n                }\n            }\n            else if (byte_value_2 == 1) {\n                if (mode == 2) {\n                    return return_value;\n                }\n            }\n            else if (byte_value_2 == 3) {\n                if (mode == 1) {\n                    return return_value;\n                }\n                goto LAB_00080f68;\n            }\n        }\n        if (mode != 1) {\nLAB_00080f68:\n            if (mode == 0) {\n                index_offset = index * 0x1c;\n                FUN_00080aa8(*(undefined4 *)(data_ptr_1 + index_offset + 8));\n                function_return_value = FUN_00080a30(*(undefined4 *)(data_ptr_1 + index_offset),3,*(undefined4 *)(data_ptr_1 + index_offset + 4),0);\n                byte_value_1 = data_ptr_2[index] & 0xf0 | 2;\n            }\n            else {\n                if (mode != 2) {\n                    return return_value;\n                }\n                index_offset = index * 0x1c;\n                FUN_00080aa8(*(undefined4 *)(data_ptr_1 + index_offset + 8));\n                function_return_value = FUN_00080a30(*(undefined4 *)(data_ptr_1 + index_offset),3,*(undefined4 *)(data_ptr_1 + index_offset + 4),1);\n                byte_value_1 = data_ptr_2[index] & 0xf0 | 1;\n            }\n            data_ptr_2[index] = byte_value_1;\n            return function_return_value;\n        }\n        index_offset = index * 0x1c;\n        function_return_value = *(int *)(data_ptr_1 + index_offset);\n        if (byte_value_1 >> 4 == 0) {\n            bit_mask_1 = 4;\n        }\n        else {\n            bit_mask_1 = 5;\n        }\n        function_return_value = FUN_00080a30(function_return_value,bit_mask_1,*(undefined4 *)(data_ptr_1 + index_offset + 4),*(undefined4 *)(data_ptr_1 + index_offset + 0x10));\n        data_ptr_2[index] = data_ptr_2[index] & 0xf0 | 3;\n        if (*(int *)(function_return_value + 0x18) == -1) {\n            bit_mask_2 = *(uint *)(data_ptr_1 + index_offset + 8);\n            if (0x2c < bit_mask_2) {\n                return 1;\n            }\n            if (bit_mask_2 < 0x20) {\n                bit_mask_2 = 1 << (bit_mask_2 & 0xff);\n                bit_mask_1 = *(uint *)(DAT_00080b28 + 0x18) & bit_mask_2;\n                if (bit_mask_1 == bit_mask_2) {\n                    *(uint *)(DAT_00080b28 + 0x14) = bit_mask_1;\n                }\n            }\n            else {\n                bit_mask_2 = 1 << (bit_mask_2 - 0x20 & 0xff);\n                bit_mask_1 = *(uint *)(DAT_00080b28 + 0x108) & bit_mask_2;\n                if (bit_mask_1 == bit_mask_2) {\n                    *(uint *)(DAT_00080b28 + 0x104) = bit_mask_1;\n                }\n            }\n            return 0;\n        }\n    }\n    return return_value;\n}",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_block_00083a74",
                "param_1": "base_address",
                "param_2": "size",
                "iVar1": "data_memory_pointer",
                "puVar2": "memory_block_start_pointer",
                "iVar3": "memory_block_end_new",
                "uVar4": "memory_block_end",
                "iVar5": "memory_block_start",
                "DAT_00083b04": "data_memory_start_pointer",
                "PTR_DAT_00083b08": "memory_block_start_new_pointer",
                "DAT_00083b0c": "memory_block_start_old_pointer"
            },
            "code": "int allocate_memory_block_00083a74(uint32_t base_address, int size)\n{\n  int mem_block_start;\n  uint32_t mem_block_end;\n  int mem_block_size_rounded;\n  int result = 0;\n  mem_block_end = *(uint32_t *)(*(int *)(DAT_00083b04 + 8) + 4) & 0xfffffffc;\n  mem_block_size_rounded = ((mem_block_end - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff >= mem_block_size_rounded) {\n    int mem_block_end_new = FUN_0008236c(base_address, 0);\n    if (mem_block_end_new == *(int *)(DAT_00083b04 + 8) + mem_block_end) {\n      int mem_block_start_new = FUN_0008236c(base_address, -mem_block_size_rounded);\n      if (mem_block_start_new != -1) {\n        int mem_block_start = *(int *)PTR_DAT_00083b08;\n        *(uint32_t *)(*(int *)(DAT_00083b04 + 8) + 4) = mem_block_end - mem_block_size_rounded | 1;\n        *(int *)PTR_DAT_00083b08 = mem_block_start - mem_block_size_rounded;\n        do_nothing_00081f98(base_address);\n        result = 1;\n      }\n      else {\n        int mem_block_end_new2 = FUN_0008236c(base_address, 0);\n        uint32_t mem_block_size_new = mem_block_end_new2 - *(int *)(DAT_00083b04 + 8);\n        if (0xf < (int)mem_block_size_new) {\n          int mem_block_start_new2 = *DAT_00083b0c;\n          *(uint32_t *)(*(int *)(DAT_00083b04 + 8) + 4) = mem_block_size_new | 1;\n          *(int *)PTR_DAT_00083b08 = mem_block_end_new2 - mem_block_start_new2;\n        }\n      }\n    }\n  }\n  do_nothing_00081f98(base_address);\n  return result;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "find_integer_000844e0",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void find_integer_000844e0(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n    undefined *ptr = PTR_DAT_00084504;\n    *(undefined4 *)ptr = 0;\n    int status = do_calculation(arg2, arg3, arg4);\n    if(status == -1 && *(int *)ptr != 0)\n    {\n        *result = *(int *)ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "find_integer_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "heap_start",
                "param_2": "block_size",
                "iVar1": "previous_block_size",
                "uVar2": "current_block_size",
                "iVar3": "previous_block_address",
                "uVar4": "current_block_end_address",
                "iVar5": "current_block_address",
                "iVar6": "heap_end_address",
                "uVar7": "current_block_header",
                "iVar8": "heap_start_address"
            },
            "code": "void allocate_memory_block_00083b10(void* heap_start, int block_size)\n{\n  int previous_block_size;\n  uint current_block_size;\n  int previous_block_address;\n  uint current_block_end_address;\n  int current_block_address;\n  int heap_end_address;\n  uint current_block_header;\n  int heap_start_address;\n\n  if (block_size == 0) {\n    return;\n  }\n\n  do_nothing();\n\n  heap_start_address = (int)heap_start;\n  heap_end_address = DAT_00083c98;\n  previous_block_size = *(int *)(heap_start_address - 4);\n  current_block_address = heap_start_address - 8;\n  current_block_size = previous_block_size & 0xfffffffe;\n  previous_block_address = current_block_address + current_block_size;\n  current_block_end_address = *(uint *)(previous_block_address + 4) & 0xfffffffc;\n\n  if (*(int *)(DAT_00083c98 + 8) == previous_block_address) {\n    current_block_end_address += current_block_size;\n    if (-1 < (int)(previous_block_size << 0x1f)) {\n      current_block_address -= *(int *)(heap_start_address - 8);\n      int next_block_address = *(int *)(current_block_address + 0xc);\n      int previous_block_address = *(int *)(current_block_address + 8);\n      current_block_end_address += *(int *)(heap_start_address - 8);\n      *(int *)(previous_block_address + 0xc) = next_block_address;\n      *(int *)(next_block_address + 8) = previous_block_address;\n    }\n    current_block_header = *DAT_00083ca0;\n    *(uint *)(current_block_address + 4) = current_block_end_address | 1;\n    *(int *)(heap_end_address + 8) = current_block_address;\n    if (current_block_header <= current_block_end_address) {\n      call_out_of_memory_handler();\n    }\n  }\n  else {\n    uint is_current_block_free = previous_block_size & 1;\n    *(uint *)(previous_block_address + 4) = current_block_end_address;\n    if (is_current_block_free == 0) {\n      current_block_address -= *(int *)(heap_start_address - 8);\n      int next_block_address = *(int *)(current_block_address + 8);\n      current_block_size = current_block_size + *(int *)(heap_start_address - 8);\n      if (next_block_address == heap_end_address + 8) {\n        is_current_block_free = 1;\n      }\n      else {\n        int previous_block_address = *(int *)(current_block_address + 0xc);\n        *(int *)(next_block_address + 0xc) = previous_block_address;\n        *(int *)(previous_block_address + 8) = next_block_address;\n      }\n    }\n    else {\n      is_current_block_free = 0;\n    }\n    if (-1 < *(int *)(previous_block_address + current_block_end_address + 4) << 0x1f) {\n      current_block_size = current_block_size + current_block_end_address;\n      int next_block_address = *(int *)(previous_block_address + 8);\n      if ((is_current_block_free == 0) && (next_block_address == DAT_00083c9c)) {\n        *(int *)(heap_end_address + 0x14) = current_block_address;\n        *(int *)(heap_end_address + 0x10) = current_block_address;\n        *(int *)(current_block_address + 0xc) = next_block_address;\n        *(int *)(current_block_address + 8) = next_block_address;\n        *(uint *)(current_block_address + 4) = current_block_size | 1;\n        *(uint *)(current_block_address + current_block_size) = current_block_size;\n        goto LAB_00083ba4;\n      }\n      int previous_block_address = *(int *)(previous_block_address + 0xc);\n      *(int *)(next_block_address + 0xc) = previous_block_address;\n      *(int *)(previous_block_address + 8) = next_block_address;\n    }\n    *(uint *)(current_block_address + 4) = current_block_size | 1;\n    *(uint *)(current_block_address + current_block_size) = current_block_size;\n    if (is_current_block_free == 0) {\n      if (current_block_size < 0x200) {\n        uint heap_bitmap = *(uint *)(heap_end_address + 4);\n        int free_block_address = heap_end_address + (current_block_size & 0xfffffff8);\n        int next_block_address = *(int *)(free_block_address + 8);\n        *(int *)(current_block_address + 8) = next_block_address;\n        *(int *)(current_block_address + 0xc) = free_block_address;\n        *(uint *)(heap_end_address + 4) = heap_bitmap | 1 << ((int)(current_block_size >> 3) >> 2 & 0xffU);\n        *(int *)(free_block_address + 8) = current_block_address;\n        *(int *)(next_block_address + 0xc) = current_block_address;\n        do_nothing();\n        return;\n      }\n      uint heap_bitmap_index = current_block_size >> 9;\n      if (heap_bitmap_index < 5) {\n        int lookup_index = (current_block_size >> 6) + 0x38;\n        int lookup_table_index = lookup_index * 2;\n      }\n      else if (heap_bitmap_index < 0x15) {\n        int lookup_index = heap_bitmap_index + 0x5b;\n        int lookup_table_index = lookup_index * 2;\n      }\n      else if (heap_bitmap_index < 0x55) {\n        int lookup_index = (current_block_size >> 0xc) + 0x6e;\n        int lookup_table_index = lookup_index * 2;\n      }\n      else if (heap_bitmap_index < 0x155) {\n        int lookup_index = (current_block_size >> 0xf) + 0x77;\n        int lookup_table_index = lookup_index * 2;\n      }\n      else if (heap_bitmap_index < 0x555) {\n        int lookup_index = (current_block_size >> 0x12) + 0x7c;\n        int lookup_table_index = lookup_index * 2;\n      }\n      else {\n        int lookup_table_index = 0xfc;\n        int lookup_index = 0x7e;\n      }\n      int lookup_table_address = heap_end_address + lookup_table_index * 4;\n      int next_block_address = *(int *)(lookup_table_address + 8);\n      if (next_block_address == lookup_table_address) {\n        *(uint *)(DAT_00083c98 + 4) = *(uint *)(DAT_00083c98 + 4) | 1 << (lookup_index >> 2 & 0xffU);\n        next_block_address = next_block_address;\n      }\n      else {\n        do {\n          if ((*(uint *)(next_block_address + 4) & 0xfffffffc) <= current_block_size) break;\n          next_block_address = *(int *)(next_block_address + 8);\n        } while (lookup_table_address != next_block_address);\n        next_block_address = *(int *)(next_block_address + 0xc);\n      }\n      *(int *)(current_block_address + 0xc) = next_block_address;\n      *(int *)(current_block_address + 8) = next_block_address;\n      *(int *)(next_block_address + 8) = current_block_address;\n      *(int *)(lookup_table_address + 0xc) = current_block_address;\n    }\n  }\n\nLAB_00083ba4:\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_00083a74",
                "FUN_00081f98",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "returnZero_00080e80"
            },
            "code": "int returnZero_00080e80(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "returnZero_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "format_output_string_thunk_0008113a",
                "param_1": "output_string",
                "param_2": "value",
                "param_3": "format",
                "param_4": "additional_arg",
                "iVar1": "formatted_value",
                "iVar2": "sign"
            },
            "code": "int format_output_string_thunk_0008113a(undefined4 *output_string, uint value, uint format, undefined4 additional_arg) {\n  int formatted_value;\n  int sign;\n  if (format == 0) {\n    formatted_value = (**(code **)*output_string)(output_string, value & 0xff);\n    return formatted_value;\n  }\n  if (format == 10) {\n    if ((int)value < 0) {\n      sign = format_output_string_thunk_0008113a(output_string, 0x2d, 0, 0);\n      formatted_value = format_output_string_thunk_0008113a(output_string, -value, 10, 0) + sign;\n      return formatted_value;\n    }\n  }\n  else {\n    format = format & 0xff;\n  }\n  formatted_value = format_output_string_thunk_0008113a(output_string, value, format, additional_arg);\n  return formatted_value;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "format_output_string_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "get_value_if_possible_0008236c",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void get_value_if_possible_0008236c(int *output, undefined4 input)\n{\n  undefined *data_pointer;\n  int result;\n  data_pointer = PTR_DAT_0008238c;\n  *(undefined4 *)data_pointer = 0;\n  result = check_input_validity(input);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "get_value_if_possible_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "set_param_to_max_00080d62",
                "param_1": "param_value",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(param_value + 0x14)"
            },
            "code": "void set_param_to_max_00080d62(int param_value) {\n  *(int *)(param_value + 0x14) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_param_to_max_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_input_000842a4",
                "param_1": "input_length",
                "param_2": "input_char",
                "param_3": "input_buffer",
                "param_4": "input_flag",
                "uVar1": "character",
                "uVar2": "character_value",
                "puVar3": "buffer_pointer",
                "iVar4": "buffer_length"
            },
            "code": "uint process_input_000842a4(int input_length, uint input_char, undefined4 *input_buffer, undefined4 input_flag)\n{\n  ushort character;\n  uint character_value;\n  undefined *buffer_pointer;\n  int buffer_length;\n  if ((input_length != 0) && (*(int *)(input_length + 0x38) == 0)) {\n    initialize_buffer();\n  }\n  character = *(ushort *)(input_buffer + 3);\n  character_value = (uint)character;\n  input_buffer[2] = input_buffer[6];\n  if ((-1 < (int)(character_value << 0x1c)) || (buffer_length = input_buffer[4], buffer_length == 0)) {\n    buffer_length = process_character(input_length, input_buffer, character, character_value, input_flag);\n    if (buffer_length != 0) {\n      return 0xffffffff;\n    }\n    character = *(ushort *)(input_buffer + 3);\n    buffer_length = input_buffer[4];\n    character_value = (uint)character;\n  }\n  input_char = input_char & 0xff;\n  if ((int)(character_value << 0x12) < 0) {\n    buffer_pointer = (undefined *)*input_buffer;\n    buffer_length = (int)buffer_pointer - buffer_length;\n    if (buffer_length < (int)input_buffer[5]) {\n      goto LAB_000842d6;\n    }\n  }\n  else {\n    input_buffer[0x19] = input_buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*input_buffer;\n    *(ushort *)(input_buffer + 3) = character | 0x2000;\n    buffer_length = (int)buffer_pointer - buffer_length;\n    if (buffer_length < (int)input_buffer[5]) {\n      goto LAB_000842d6;\n    }\n  }\n  buffer_length = finalize_input(input_length, input_buffer);\n  if (buffer_length != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*input_buffer;\n  buffer_length = 1;\nLAB_000842d8:\n  input_buffer[2] = input_buffer[2] + -1;\n  *input_buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)input_char;\n  if (((input_buffer[5] == buffer_length) || (((int)((uint)*(ushort *)(input_buffer + 3) << 0x1f) < 0 && (input_char == 10)))) && (buffer_length = finalize_input(input_length, input_buffer), buffer_length != 0)) {\n    return 0xffffffff;\n  }\n  return input_char;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_input_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "initialize_array_with_zeroes_000814f6",
                "param_1": "array",
                "param_2": "array_size",
                "uVar1": "function_result",
                "*param_1": "result",
                "param_1[1]": "second_element",
                "param_1[2]": "third_element"
            },
            "code": "undefined4* initialize_array_with_zeroes_000814f6(undefined4* array, int array_size)\n{\n  undefined4 result = 0;\n  undefined4 second_element = 0;\n  undefined4 third_element = 0;\n  if (array_size != 0) {\n    undefined4 function_result = FUN_00082688(array_size);\n    FUN_000814d0(array, array_size, function_result);\n  }\n  return array;\n}",
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeroes_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "input_num",
                "puVar1": "ptr_data",
                "iVar2": "current_sum"
            },
            "code": "int calculate_sum_00080e88(int input_num)\n{\n  undefined *ptr_data = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  int current_sum = *(int *)ptr_data;\n  *(int *)ptr_data = input_num + current_sum;\n  return current_sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "calculate_sum_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "process_data_000836d8",
                "puVar1": "data_pointer",
                "puVar2": "memory_pointer",
                "iVar3": "data_count",
                "iVar4": "memory_count",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "PTR_DAT_000836e8": "DATA_PTR",
                "DAT_000836e4": "DATA_FLAG",
                "PTR_DAT_000836d0": "MEMORY_PTR",
                "undefined": "uint8_t",
                "undefined4": "uint32_t",
                "FUN_000817f0": "allocate_memory"
            },
            "code": "void process_data_000836d8(void)\n{\n    uint8_t *data_pointer;\n    uint32_t *memory_pointer;\n    int data_count;\n    int memory_count;\n    code *jump_table;\n\n    data_pointer = PTR_DAT_000836e8;\n    if (DAT_000836e4 == 0) {\n        return;\n    }\n    memory_count = *(int *)PTR_DAT_000836d0;\n    memory_pointer = *(uint32_t **)(memory_count + 0x148);\n    if (memory_pointer == (uint32_t *)0x0) {\n        memory_pointer = (uint32_t *)(memory_count + 0x14c);\n        *(uint32_t **)(memory_count + 0x148) = memory_pointer;\n    }\n    data_count = memory_pointer[1];\n    if (0x1f < data_count) {\n        if ((MEMORY_FLAG == 0) ||\n           (memory_pointer = (uint32_t *)allocate_memory(400), memory_pointer == (uint32_t *)0x0)) {\n            (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n            return;\n        }\n        *memory_pointer = *(uint32_t *)(memory_count + 0x148);\n        memory_pointer[1] = 0;\n        data_count = 0;\n        *(uint32_t **)(memory_count + 0x148) = memory_pointer;\n        memory_pointer[0x62] = 0;\n        memory_pointer[99] = 0;\n    }\n    memory_pointer[1] = data_count + 1;\n    memory_pointer[data_count + 2] = data_pointer;\n    (*UNRECOVERED_JUMPTABLE_00)(0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "process_data_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "write_to_buffer_000812b8",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer_ptr",
                "uVar2": "mask",
                "DAT_00081308": "MASK_CONSTANT"
            },
            "code": "int write_to_buffer_000812b8(int buffer_address, int data) {\n  int buffer_ptr = *(int *)(buffer_address + 0x14);\n  int buffer_size = *(int *)(buffer_address + 0x18);\n  \n  if ((*(int *)(*(int *)(buffer_address + 0x18) + 0x14) << 0x1e < 0) && (*(int *)(buffer_ptr + 0x84) == *(int *)(buffer_ptr + 0x80))) {\n    *(int *)(*(int *)(buffer_address + 0x18) + 0x1c) = data;\n  }\n  else {\n    uint32_t mask = DAT_00081308 & *(int *)(buffer_ptr + 0x80) + 1U;\n    if ((int)mask < 0) {\n      mask = (mask - 1 | 0xffffff80) + 1;\n    }\n    while (*(uint *)(buffer_ptr + 0x84) == mask) {\n    }\n    *(char *)(buffer_ptr + *(int *)(buffer_ptr + 0x80)) = (char)data;\n    *(uint *)(*(int *)(buffer_address + 0x14) + 0x80) = mask;\n    *(int *)(*(int *)(buffer_address + 0x18) + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "code": "int32_t get_error_code_thunk_00080efe(void) {\n  return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "get_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "encode_string_000839b4",
                "param_1": "param",
                "param_2": "input_length",
                "param_3": "output_buffer",
                "uVar1": "result",
                "iVar2": "index",
                "uVar3": "current_char",
                "pbVar4": "output_ptr",
                "uVar5": "buffer_length",
                "local_1c": "current_byte",
                "abStack_1b": "buffer"
            },
            "code": "uint encode_string_000839b4(undefined4 param_1, uint input_length, byte **output_buffer)\n{\n  uint result;\n  int index;\n  uint current_char;\n  byte *output_ptr;\n  uint buffer_length;\n  byte current_byte;\n  byte buffer[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12))) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  result = FUN_0008400c();\n  if ((result == 1) && (input_length - 1 < 0xff)) {\n    buffer_length = input_length & 0xff;\n    current_byte = (byte)buffer_length;\n  }\n  else {\n    result = FUN_0008434c(param_1, &current_byte, input_length, output_buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return input_length;\n    }\n    buffer_length = (uint)current_byte;\n  }\n  index = 0;\n  do {\n    output_ptr = output_buffer[2] + -1;\n    output_buffer[2] = output_ptr;\n    if ((int)output_ptr < 0) {\n      if ((int)output_buffer[6] <= (int)output_ptr) {\n        **output_buffer = (byte)buffer_length;\n        output_ptr = *output_buffer;\n        buffer_length = (uint)*output_ptr;\n        if (buffer_length != 10) goto LAB_00083a04;\n      }\n      result = FUN_000842a4(param_1, buffer_length, output_buffer);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)buffer_length;\n      output_ptr = *output_buffer;\nLAB_00083a04:\n      *output_buffer = output_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return input_length;\n    }\n    buffer_length = (uint)buffer[index];\n    index = index + 1;\n  } while (true);\n}\n",
            "called": [
                "FUN_0008400c",
                "FUN_0008434c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "encode_string_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "write_to_buffer_00081570",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "param_3": "bytes_to_write",
                "iVar1": "write_result",
                "iVar2": "current_size",
                "FUN_000814ae": "write_to_buffer",
                "FUN_000825cc": "write_bytes_to_buffer"
            },
            "code": "int write_to_buffer_00081570(int *buffer, int buffer_size, int bytes_to_write) {\n  int current_size = buffer[2];\n  if (buffer_size == 0) {\n    return 0;\n  }\n  if (bytes_to_write != 0) {\n    int write_result = write_to_buffer_00081570(buffer, current_size + bytes_to_write);\n    if (write_result == 0) {\n      return 0;\n    }\n    write_bytes_to_buffer(*buffer + buffer[2], buffer_size);\n    buffer[2] = current_size + bytes_to_write;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "write_to_buffer_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "set_channel_state_000803fc",
                "param_1": "channel_id",
                "param_2": "channel_type",
                "param_3": "channel_state",
                "param_4": "bit_offset",
                "unaff_r4": "unaff_r4",
                "in_lr": "in_lr",
                "uVar1": "channel_id_type"
            },
            "code": "void set_channel_state_000803fc(int channel_id, uint32_t channel_type, uint32_t channel_state, uint32_t bit_offset) {\n  uint64_t channel_id_type = ((uint64_t) channel_type << 32) | channel_id;\n  set_channel_type(channel_state);\n  set_channel_bit(channel_id, channel_type, 0xc002);\n  set_channel_bit(channel_id, channel_type, 0xa41);\n  *(int *)(channel_state + (bit_offset >> 5) * 4) = 1 << (bit_offset & 0x1f);\n  *(uint32_t *)(channel_id + channel_type * 0x40 + 0x24) = 4;\n  if (channel_type > 2) {\n    channel_id_type = (*DAT_00080b8c)(PTR_s____source_tc_c_00080b80, 0x5c, PTR_s_TC_Start_00080b84, PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88, channel_state, channel_id_type);\n  }\n  *(uint32_t *)((int)channel_id_type + (int)((uint64_t) channel_id_type >> 0x20) * 0x40) = 5;\n}",
            "called": [
                "FUN_00080b2c",
                "FUN_00080b90",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "set_channel_state_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_memory_flag_00080eb0",
                "param_1": "memory_address",
                "param_2": "flag",
                "PTR_": "memory_address_",
                "DAT_": "data_"
            },
            "code": "void set_memory_flag_00080eb0(int* memory_address, int flag) {\n    *(memory_address + 1) = flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_memory_flag_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "target_value",
                "uVar1": "current_value",
                "FUN_000814f6": "initialize",
                "FUN_000811e8": "get_next_value",
                "FUN_0008159e": "process_byte"
            },
            "code": "void process_data_00081214(undefined4 arg1, undefined4 arg2, uint32_t target_value) {\n  uint32_t current_value;\n  initialize(arg1, PTR_DAT_00081240);\n  while ((current_value = get_next_value(arg2), -1 < (int)current_value && (current_value != target_value))) {\n    process_byte(arg1, current_value & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "memory_address",
                "param_2": "byte_address",
                "param_3": "byte_value",
                "undefined4": "int",
                "undefined": "unsigned char",
                "*param_1": "*memory_address",
                "*param_2": "*byte_address",
                "0x0": "NULL",
                "0x100": "256",
                "(undefined *)0x0": "NULL",
                "return 0": "return 0;",
                "return 1": "return 1;",
                "0xffffffff": "-1",
                "*param_1 = 0x8a;": "*memory_address = 138;"
            },
            "code": "int write_byte_to_memory_0008439c(int *memory_address, unsigned char *byte_address, unsigned int byte_value) {\n  if (byte_address == NULL) {\n    return 0;\n  }\n  if (byte_value < 256) {\n    *byte_address = (unsigned char)byte_value;\n    return 1;\n  }\n  *memory_address = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "data",
                "param_2": "length",
                "param_3": "data_array",
                "piVar1": "current_data_ptr",
                "iVar2": "result",
                "piVar3": "current_array_ptr",
                "uVar4": "i",
                "puVar5": "data_ptr",
                "uVar6": "data_length",
                "uVar7": "j"
            },
            "code": "int process_data_00082824(undefined4 data, int length, int **data_array)\n{\n  int *current_data_ptr;\n  int result;\n  int *current_array_ptr;\n  uint data_length;\n  undefined4 *data_ptr;\n  uint i;\n  uint j;\n\n  if (-1 < *(int *)(length + 100) << 0x12) {\n    result = FUNC_00083ca8();\n    data_array[2] = (int *)0x0;\n    data_array[1] = (int *)0x0;\n    return result;\n  }\n  current_array_ptr = data_array[2];\n  current_data_ptr = *data_array;\n  while (current_array_ptr != (int *)0x0) {\n    data_length = current_data_ptr[1];\n    j = data_length >> 2;\n    if (j != 0) {\n      data_ptr = (undefined4 *)(*current_data_ptr + -4);\n      i = 0;\n      do {\n        data_ptr = data_ptr + 1;\n        result = FUN_000839b4(data, *data_ptr, length);\n        i = i + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (j != i);\n      current_array_ptr = data_array[2];\n    }\n    current_array_ptr = (int *)((int)current_array_ptr - (data_length & 0xfffffffc));\n    data_array[2] = current_array_ptr;\n    current_data_ptr = current_data_ptr + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data_array[2] = (int *)0x0;\n  data_array[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_000839b4",
                "FUN_00083ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "param_1": "device_status",
                "param_2": "device_info",
                "iVar1": "device_id",
                "uVar2": "status_flags"
            },
            "code": "void update_status_0008427c(int device_status, int* device_info)\n{\n  int device_id = get_device_id(device_status, *(short *)(device_info + 0xe));\n  ushort status_flags;\n  if (device_id == -1) {\n    status_flags = *(ushort *)(device_info + 0xc) & 0xefff;\n  }\n  else {\n    status_flags = *(ushort *)(device_info + 0xc) | 0x1000;\n  }\n  if (device_id != -1) {\n    *(int *)(device_info + 0x50) = device_id;\n  }\n  *(ushort *)(device_info + 0xc) = status_flags;\n  return;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "update_status_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "data_ptr",
                "param_2": "update_type",
                "param_3": "update_val",
                "uVar1": "current_val",
                "PTR_": "data_ptr",
                "DAT_": "update_val"
            },
            "code": "void update_data_000809be(int PTR_, uint8_t update_type, uint32_t DAT_)\n{\n  uint32_t current_val;\n  uint32_t updated_val;\n\n  *(uint32_t *)(PTR_ + 0x44) = DAT_;\n\n  switch(update_type) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      current_val = *(uint32_t *)(PTR_ + 0x70);\n      updated_val = current_val & ~DAT_;\n      break;\n    case 2:\n      current_val = *(uint32_t *)(PTR_ + 0x70);\n      updated_val = current_val | DAT_;\n      break;\n    default:\n      goto invalid_update_type;\n  }\n\n  *(uint32_t *)(PTR_ + 0x70) = updated_val;\n\ninvalid_update_type:\n  *(uint32_t *)(PTR_ + 4) = DAT_;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_data_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_if_bits_are_set_00080a94",
                "param_1": "data_ptr",
                "param_2": "bitmask",
                "uVar1": "result",
                "PTR_": "data_ptr",
                "DAT_": "bitmask"
            },
            "code": "uint check_if_bits_are_set_00080a94(int PTR_, uint DAT_) {\n  uint result = *(uint *)(PTR_ + 8) & DAT_;\n  if (result != 0) {\n    if ((DAT_ & *(uint *)(PTR_ + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_if_bits_are_set_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_data_in_memory_00081618",
                "DAT_00081620": "data_address"
            },
            "code": "void set_data_in_memory_00081618(void)\n{\n    int* address = (int*)(DAT_00081620 + 4);\n    *address = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_data_in_memory_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "output",
                "uVar1": "product_low",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008455c(uint32_t input_1, int32_t input_2, uint32_t multiplier_low, uint32_t multiplier_high, int32_t *output) {\n  uint64_t product = FUNC_000845c0();\n  product *= ((uint64_t)multiplier_high << 32) | multiplier_low;\n  uint32_t product_low = (uint32_t)product;\n  output[0] = (int32_t)(input_1 - product_low);\n  output[1] = input_2 - ((int32_t)(product >> 32)) - (input_1 < product_low);\n  return;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_char_in_array_000840f8",
                "param_1": "array",
                "param_2": "target_char",
                "param_3": "array_end",
                "puVar1": "current_ptr",
                "uVar2": "current_value",
                "pcVar3": "char_ptr_start",
                "pcVar4": "char_ptr_end",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_char_in_array_000840f8(uint *array, char target_char, uint *array_end)\n{\n  uint *current_ptr;\n  uint current_value;\n  char *char_ptr_start;\n  char *char_ptr_end;\n  bool found_target_char;\n  \n  if (((uint)array & 3) == 0) {\n    goto LAB_00084128;\n  }\n  else if (array_end == (uint *)0x0) {\n    goto LAB_00084150;\n  }\n  else if (*(char *)array != target_char) {\n    current_ptr = (uint *)((int)array + 1);\n    array_end = (uint *)((int)array_end + -1);\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) {\n        goto LAB_00084128;\n      }\n      if (array_end == (uint *)0x0) {\n        goto LAB_00084150;\n      }\n      current_ptr = (uint *)((int)array + 1);\n      array_end = (uint *)((int)array_end + -1);\n    } while (*(char *)array != target_char);\n  }\n  return array;\n  \nLAB_00084128:\n  current_ptr = array;\n  if ((uint *)0x3 < array_end) {\n    do {\n      current_value = *array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n      current_ptr = array;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n      array_end = array_end + -1;\n      current_ptr = array + 1;\n      array = array + 1;\n    } while ((uint *)0x3 < array_end);\n  }\n  array = array_end;\n  char_ptr_end = (char *)((int)array - 1);\n  if ((array != (uint *)0x0) && (array = current_ptr, *(char *)current_ptr != target_char)) {\n    char_ptr_start = (char *)0x0;\n    do {\n      array = (uint *)((int)array + 1);\n      found_target_char = char_ptr_start == char_ptr_end;\n      char_ptr_start = char_ptr_start + 1;\n      if (found_target_char) {\n        goto LAB_00084150;\n      }\n    } while (*(char *)array != target_char);\n  }\n  \nLAB_00084150:\n  array = (uint *)0x0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "find_char_in_array_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = FUN_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00083888",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00082824",
                "FUN_000840f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_00081750",
                "FUN_000834f0",
                "FUN_000817c8"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "fill_with_value_00081f00",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current",
                "puVar2": "next",
                "uVar3": "packed_value",
                "uVar4": "remaining_size",
                "bVar5": "is_size_zero",
                "LAB_00081f7c": "last_bytes"
            },
            "code": "void fill_with_value_00081f00(uint32_t *data, uint8_t value, uint32_t size)\n{\n    uint32_t *current = data;\n    uint32_t *end = data + size/4;\n    uint32_t packed_value = (value << 24) | (value << 16) | (value << 8) | value;\n\n    while(current < end)\n    {\n        *current = packed_value;\n        current++;\n    }\n\n    uint8_t *last_bytes = (uint8_t *)current;\n    end = data + size;\n\n    while(last_bytes < (uint8_t *)end)\n    {\n        *last_bytes = value;\n        last_bytes++;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "imported": false,
            "current_name": "fill_with_value_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_max_value_00080eaa"
            },
            "code": "int32_t return_max_value_00080eaa() {\n    return INT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_max_value_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copyMemoryWithAlignmentCheck_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destination",
                "puVar3": "source",
                "uVar4": "i",
                "uVar5": "remainingSize",
                "bVar6": "isSizeLessThanEightBytes",
                "LAB_00081dcc": "alignedCopy"
            },
            "code": "undefined4* copyMemoryWithAlignmentCheck_00081d48(undefined4* destination, undefined4* source, uint size)\n{\n    undefined4* destPtr = destination;\n    uint remainingSize;\n    uint i;\n    bool isSizeLessThanEightBytes = size < 8;\n    bool isSourceDestinationUnaligned = ((uint)source | (uint)destination) & 3;\n\n    if (isSourceDestinationUnaligned)\n    {\n        if (isSizeLessThanEightBytes)\n        {\n            remainingSize = size - 4;\n\n            if (remainingSize > 3)\n            {\n                do\n                {\n                    *destPtr = *source;\n                    destPtr = (undefined4*)((int)destPtr + 1);\n                    source = (undefined4*)((int)source + 1);\n                    remainingSize--;\n                } while (remainingSize > 3);\n            }\n\n            *(undefined*)destPtr = *(undefined*)source;\n            *(undefined*)(destPtr + 1) = *(undefined*)(source + 1);\n            *(undefined*)(destPtr + 2) = *(undefined*)(source + 2);\n            return destination;\n        }\n\n        if (((uint)source & 3) != 0)\n        {\n            remainingSize = 4 - ((uint)destination & 3);\n            size -= remainingSize;\n            source = (undefined4*)((int)source + remainingSize);\n\n            if (((uint)destination & 1) != 0)\n            {\n                *(undefined*)destination = *(undefined*)source;\n                destination = (undefined4*)((int)destination + 1);\n                source = (undefined4*)((int)source + 1);\n            }\n\n            if ((remainingSize & 2) != 0)\n            {\n                *(undefined2*)destination = *(undefined2*)source;\n                destination = (undefined4*)((int)destination + 2);\n                source = (undefined4*)((int)source + 2);\n            }\n        }\n    }\n\n    remainingSize = size >> 6;\n\n    while (remainingSize > 0)\n    {\n        for (i = 0; i < 16; i++)\n        {\n            destPtr[i] = source[i];\n        }\n\n        destPtr += 16;\n        source += 16;\n        remainingSize--;\n    }\n\n    remainingSize = size & 63;\n\n    if (remainingSize > 15)\n    {\n        for (i = 0; i < 16; i++)\n        {\n            destPtr[i] = source[i];\n        }\n\n        destPtr += 16;\n        source += 16;\n        remainingSize -= 16;\n    }\n\n    if (remainingSize > 3)\n    {\n        for (i = 0; i < remainingSize - 3; i += 4)\n        {\n            *destPtr = *source;\n            destPtr++;\n            source++;\n        }\n    }\n\n    if (remainingSize & 2)\n    {\n        *(undefined2*)destPtr = *(undefined2*)source;\n        destPtr = (undefined4*)((int)destPtr + 2);\n        source = (undefined4*)((int)source + 2);\n    }\n\n    if (remainingSize & 1)\n    {\n        *(undefined*)destPtr = *(undefined*)source;\n    }\n\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copyMemoryWithAlignmentCheck_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "findValueInMemory_00084494",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "memoryPtr",
                "iVar2": "functionReturnValue"
            },
            "code": "void findValueInMemory_00084494(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *memoryPtr;\n  int functionReturnValue;\n  \n  memoryPtr = PTR_DAT_000844b8;\n  *(undefined4 *)PTR_DAT_000844b8 = 0;\n  functionReturnValue = callFunction(arg1, arg2, arg3, 0, param_4);\n  if ((functionReturnValue == -1) && (*(int *)memoryPtr != 0)) {\n    *result = *(int *)memoryPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "findValueInMemory_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "check_params_00084530",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "result"
            },
            "code": "int check_params_00084530(int x, int y, int z, int w) {\n  if ((w == 0) && (z == 0)) {\n    if (y != 0 || x != 0) {\n      x = -1;\n    }\n    return x;\n  }\n  int result = compute_result();\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "check_params_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_and_do_nothing_00080970",
                "FUN_00081248": "check_pointer"
            },
            "code": "void check_and_do_nothing_00080970(void)\n{\n  int result;\n  result = check_pointer(PTR_DAT_000809a4);\n  if (result != 0) {\n    do_nothing_0008073a();\n  }\n  result = check_pointer(PTR_DAT_000809a8);\n  if (result != 0) {\n    do_nothing_00080748();\n  }\n  result = check_pointer(PTR_DAT_000809ac);\n  if (result != 0) {\n    do_nothing_0008074a();\n  }\n  result = check_pointer(PTR_DAT_000809b0);\n  if (result != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}",
            "called": [
                "FUN_0008073a",
                "FUN_00080748",
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_0008074a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_and_do_nothing_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "process_data_00084018",
                "param_1": "data",
                "param_2": "buffer",
                "uVar1": "value1",
                "iVar2": "result",
                "iVar3": "status",
                "uVar4": "value2",
                "bVar5": "condition1",
                "auStack_54": "stack",
                "local_50": "unused",
                "PTR_FUN_0008427c_1_000840f4": "PTR_FUN_0008427c_1_000840f4",
                "PTR_LAB_0008387c_1_000840f0": "PTR_LAB_0008387c_1_000840f0"
            },
            "code": "void process_data_00084018(int data, int *buffer)\n{\n    ushort value1 = *(ushort *)(buffer + 3);\n    uint value2 = (uint)value1;\n    if ((int)(value2 << 0x1e) < 0) {\n        *buffer = (int)buffer + 0x43;\n        buffer[4] = (int)buffer + 0x43;\n        buffer[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)buffer + 0xe)) {\n        int result = process_value(data, (int)*(short *)((int)buffer + 0xe), buffer);\n        if (-1 < result) {\n            bool condition1 = (value2 & 0xf000) == 0x2000;\n            if (((value2 & 0xf000) == 0x8000) && ((undefined *)buffer[10] == PTR_FUN_0008427c_1_000840f4)) {\n                result = 0x400;\n                *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x400;\n                buffer[0x13] = 0x400;\n            }\n            else {\n                result = 0x400;\n                *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x800;\n            }\n            goto LAB_00084074;\n        }\n        value1 = *(ushort *)(buffer + 3);\n        value2 = (uint)value1;\n    }\n    *(ushort *)(buffer + 3) = value1 | 0x800;\n    int result;\n    if ((value2 & 0x80) == 0) {\n        result = 0x400;\n    }\n    else {\n        result = 0x40;\n    }\n    bool condition2 = false;\nLAB_00084074:\n    int status = process_status(data, result);\n    value1 = *(ushort *)(buffer + 3);\n    if (status == 0) {\n        if (-1 < (int)((uint)value1 << 0x16)) {\n            *(ushort *)(buffer + 3) = value1 | 2;\n            *buffer = (int)buffer + 0x43;\n            buffer[4] = (int)buffer + 0x43;\n            buffer[5] = 1;\n        }\n    }\n    else {\n        *(undefined **)(data + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n        *(ushort *)(buffer + 3) = value1 | 0x80;\n        *buffer = status;\n        buffer[4] = status;\n        buffer[5] = result;\n        if ((condition1) && (result = process_value(data, (int)*(short *)((int)buffer + 0xe)), result), result != 0) {\n            *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "process_data_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_string_to_int_000815de",
                "param_1": "string_ptr",
                "pbVar4": "current_char",
                "uVar5": "current_byte",
                "pbVar6": "previous_char",
                "bVar1": "char_info",
                "bVar2": "is_overflow",
                "uVar3": "result",
                "uVar9": "max_div",
                "uVar10": "max_value",
                "iVar7": "current_digit",
                "iVar8": "digit_count"
            },
            "code": "uint parse_string_to_int_000815de(byte **string_ptr)\n{\n  if (*string_ptr == NULL) {\n    return 0;\n  }\n  byte *current_char = *string_ptr;\n  bool is_negative = false;\n  if (*current_char == '-') {\n    is_negative = true;\n    current_char++;\n  }\n  else if (*current_char == '+') {\n    current_char++;\n  }\n  uint max_value = is_negative ? 0x80000000 : 0x7fffffff;\n  uint max_div = max_value / 10;\n  int digit_count = 0;\n  uint result = 0;\n  while (true) {\n    byte current_byte = *current_char;\n    if (current_byte < '0' || current_byte > '9') {\n      if (digit_count == 0) {\n        *(undefined4 *)*PTR_DAT_00082810 = 0x22;\n        if (is_negative) {\n          return 0x80000000;\n        }\n        else {\n          return 0x7fffffff;\n        }\n      }\n      else {\n        if (is_negative) {\n          result = -result;\n        }\n        return result;\n      }\n    }\n    int current_digit = current_byte - '0';\n    if (digit_count != -1) {\n      if (max_div <= result && result != max_div) {\n        digit_count = -1;\n      }\n      else {\n        result = result * 10 + current_digit;\n        digit_count = 1;\n      }\n    }\n    current_char++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_string_to_int_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "check_and_process_data_000834f0",
                "param_1": "param",
                "data_ptr": "data_ptr",
                "iVar1": "result",
                "iVar2": "func_result",
                "local_488": "stack_ptrs",
                "local_480": "stack_size",
                "local_47c": "flag",
                "local_47a": "flag2",
                "local_478": "data_buffer",
                "local_474": "var_14",
                "local_470": "var_10",
                "local_46c": "var_c",
                "local_464": "var_8",
                "local_424": "var_0",
                "auStack_420": "stack_buffer",
                "FUNC_0008289c": "process_data",
                "FUN_00083850": "check_data"
            },
            "code": "int check_and_process_data_000834f0(undefined4 param_1, int data_ptr){\n  int result;\n  int func_result;\n  undefined *stack_ptrs [2];\n  undefined4 stack_size;\n  ushort flag;\n  undefined2 flag2;\n  undefined *data_buffer;\n  undefined4 var_14;\n  undefined4 var_10;\n  undefined4 var_c;\n  undefined4 var_8;\n  undefined4 var_0;\n  undefined stack_buffer [1024];\n  var_0 = *(undefined4 *)(data_ptr + 100);\n  var_c = *(undefined4 *)(data_ptr + 0x1c);\n  flag2 = *(undefined2 *)(data_ptr + 0xe);\n  var_8 = *(undefined4 *)(data_ptr + 0x24);\n  stack_ptrs[0] = stack_buffer;\n  flag = *(ushort *)(data_ptr + 0xc) & 0xfffd;\n  stack_size = 0x400;\n  var_14 = 0x400;\n  var_10 = 0;\n  data_buffer = stack_ptrs[0];\n  result = process_data(param_1, stack_ptrs);\n  if ((-1 < result) && (func_result = check_data(param_1, stack_ptrs), func_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) | 0x40;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "check_and_process_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "perform_operation_000841e4",
                "param_1": "operation_index",
                "puVar1": "undefined_ptr",
                "uVar2": "undefined4_var",
                "piVar3": "memory_location",
                "iVar4": "operation_ptr",
                "pcVar5": "operation_function_ptr",
                "unaff_r4": "undefined4_var",
                "unaff_r5": "undefined5_var",
                "in_lr": "return_address",
                "ppiVar6": "memory_array_ptr"
            },
            "code": "int perform_operation_000841e4(uint operation_index)\n{\n    int *memory_location = *memory_array;\n    if (operation_index > 31) {\n        *memory_location = 22;\n        return -1;\n    }\n    int *operation_ptr = memory_location[183];\n    if (operation_ptr == 0 || operation_ptr[operation_index] == 0) {\n        int **memory_array_ptr = memory_array;\n        uint operation_type = thunk_get_operation_type(memory_location);\n        undefined *undefined_location = undefined_ptr;\n        *(undefined4 *)undefined_location = 0;\n        int operation_result = do_nothing(operation_type, operation_index, operation_index, 0, memory_array_ptr, undefined4_var, undefined5_var, return_address);\n        if (operation_result == -1 && *(int *)undefined_location != 0) {\n            *memory_location = *(int *)undefined_location;\n            return -1;\n        }\n        return operation_result;\n    }\n    if (operation_ptr[operation_index] == 1) {\n        return 0;\n    }\n    if (operation_ptr[operation_index] != -1) {\n        operation_ptr[operation_index] = 0;\n        (*(code *)operation_ptr[operation_index])(operation_index);\n        return 0;\n    }\n    *memory_location = 22;\n    return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "perform_operation_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_number_to_string_0008113a",
                "param_1": "function_ptr",
                "param_2": "number",
                "param_3": "base",
                "param_4": "param_4",
                "iVar1": "result",
                "iVar2": "negative_flag"
            },
            "code": "int convert_number_to_string_0008113a(undefined4 *function_ptr, uint number, uint base, undefined4 param_4)\n{\n  int result;\n  int negative_flag;\n  if (base == 0)\n  {\n    result = (**(code **)*function_ptr)(function_ptr,number & 0xff);\n    return result;\n  }\n  if (base == 10)\n  {\n    if ((int)number < 0)\n    {\n      negative_flag = convert_number_to_string_0008113a(function_ptr, 0x2d, 0, 0);\n      result = convert_number_to_string_0008113a(function_ptr, -number, 10, 0) + negative_flag;\n      return result;\n    }\n  }\n  else\n  {\n    base = base & 0xff;\n  }\n  result = convert_number_to_string_0008113a(function_ptr, number, base, param_4);\n  return result;\n}",
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "convert_number_to_string_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_dat_value_0008400c",
                "*DAT_00084014": "data_pointer"
            },
            "code": "int get_dat_value_0008400c() {\n    return **DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_dat_value_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "check_and_update_value_000814d0",
                "param_1": "ptr_array",
                "param_2": "new_value",
                "param_3": "old_value",
                "iVar1": "check_result",
                "FUN_000814ae": "check_value",
                "FUN_00081480": "update_value",
                "FUN_000825cc": "call_function"
            },
            "code": "undefined4 * check_and_update_value_000814d0(undefined4 *ptr_array, undefined4 new_value, undefined4 old_value)\n{\n  int check_result = check_value(ptr_array, old_value);\n  if (check_result == 0) {\n    update_value(ptr_array);\n  }\n  else {\n    ptr_array[2] = new_value;\n    call_function(*ptr_array, old_value);\n  }\n  return ptr_array;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "check_and_update_value_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "copy_and_clear_elf32_rel_table_00080c20",
                "puVar1": "rel_table_ptr",
                "puVar2": "rel_table_data",
                "iVar3": "i",
                "puVar4": "rel_table_end",
                "DAT_00080c78": "rel_table_data",
                "PTR_Elf32_Rel_ARRAY_00080c7c": "rel_table_ptr",
                "PTR_DAT_00080c80": "rel_table_end",
                "PTR_DAT_00080c8c": "rel_table_base_ptr",
                "DAT_00080c90": "DAT_00080c90",
                "DAT_00080c88": "rel_entry_end",
                "DAT_00080c84": "rel_table_end",
                "DAT_00080c94": "function_pointer"
            },
            "code": "void copy_and_clear_elf32_rel_table_00080c20() {\n  undefined *PTR_Elf32_Rel_ARRAY_00080c7c = PTR_Elf32_Rel_ARRAY_00080c7c;\n  undefined *DAT_00080c78 = DAT_00080c78;\n  undefined4 *PTR_DAT_00080c80 = (undefined4 *)PTR_DAT_00080c80;\n  if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c) {\n    for (int i = 0; PTR_Elf32_Rel_ARRAY_00080c7c + i < PTR_DAT_00080c84; i += 4) {\n      *(undefined4 *)(PTR_Elf32_Rel_ARRAY_00080c7c + i) = *(undefined4 *)(DAT_00080c78 + i);\n    }\n  }\n  for (undefined4 *rel_entry_ptr = PTR_DAT_00080c80; rel_entry_ptr < PTR_DAT_00080c88; rel_entry_ptr++) {\n    *rel_entry_ptr = 0;\n  }\n  undefined *PTR_DAT_00080c8c = PTR_DAT_00080c8c + -0x20000000;\n  *(uint *)(DAT_00080c90 + 8) = (uint)PTR_DAT_00080c8c & 0x1fffff80;\n  if (PTR_DAT_00080c8c < (undefined *)0x100000) {\n    *(uint *)(DAT_00080c90 + 8) |= 0x20000000;\n  }\n  (*DAT_00080c94)();\n  while (true) {}\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_elf32_rel_table_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "calculate_data_0008044c",
                "param_1": "index",
                "param_2": "data_array",
                "param_3": "multiplier",
                "PTR_DAT_00080544": "BYTE_ARRAY_PTR",
                "PTR_DAT_00080548": "BYTE_ARRAY_3_PTR",
                "PTR_DAT_00080554": "BYTE_ARRAY_2_PTR",
                "DAT_0008054c": "MAX_VALUE_PTR",
                "DAT_00080550": "MAX_MULTIPLIER_PTR",
                "bVar1": "current_byte",
                "puVar2": "BYTE_ARRAY_PTR",
                "puVar3": "BYTE_ARRAY_2_PTR",
                "puVar4": "BYTE_ARRAY_3_PTR",
                "uVar5": "calculated_value",
                "iVar6": "byte_index"
            },
            "code": "void calculate_data_0008044c(int index, int data_array[], int multiplier){\n    byte current_byte;\n    uint calculated_value;\n    int byte_index;\n    uint max_value = *DAT_0008054c / *DAT_00080550 * 20000 >> 5;\n    if (max_value <= data_array[index] + 4U) {\n        max_value = data_array[index] + 4;\n    }\n    calculated_value = max_value;\n    byte_index = index * 12;\n    if ((*(PTR_DAT_00080544 + index) & 0x80) == 0) {\n        if (((char)*(PTR_DAT_00080544 + index) + byte_index < (int)(uint)(byte)*PTR_DAT_00080554) && ((int)((uint)(byte)PTR_DAT_00080548[((char)*(PTR_DAT_00080544 + index) + byte_index) * 8] << 0x19) < 0)) {\n            call_function_1(PTR_DAT_00080548[(byte_index + (char)*(PTR_DAT_00080544 + index)) * 8] & 0x3f, 0);\n        }\n    }\n    else {\n        *(uint *)(data_array + index * multiplier) = *(uint *)(data_array + index * multiplier) | 4;\n    }\n    current_byte = *PTR_DAT_00080554;\n    *(PTR_DAT_00080544 + index) = *(PTR_DAT_00080544 + index) + 1;\n    if (((char)*(PTR_DAT_00080544 + index) + byte_index < (int)(uint)current_byte) && ((char)*(PTR_DAT_00080544 + index) < '\f')) {\n        *(int *)(data_array + index * multiplier + 0x14) = *(int *)(data_array + index * multiplier + 0x10) + *(int *)(PTR_DAT_00080548 + ((char)*(PTR_DAT_00080544 + index) + byte_index) * 8 + 4);\n        if (-1 < (int)((uint)(byte)PTR_DAT_00080548[((char)*PTR_DAT_00080544 + byte_index) * 8] << 0x19)) {\n            return;\n        }\n        call_function_1(PTR_DAT_00080548[(byte_index + (char)*(PTR_DAT_00080544 + index)) * 8] & 0x3f, 1);\n        return;\n    }\n    calculated_value = max_value;\n    *(PTR_DAT_00080544 + index) = 0xff;\n    return;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "process_data_and_send_000810d8",
                "param_1": "data",
                "param_2": "ptr_data",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_000810a6": "process_data",
                "PTR_DAT_000810e4": "ptr_data"
            },
            "code": "void process_data_and_send_000810d8(void* data, void* PTR_DAT_000810e4, int param_3, int param_4)\n{\n  process_data(data, PTR_DAT_000810e4, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "process_data_and_send_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "return_max_uint32_00080efe",
                "undefined4": "uint32_t"
            },
            "code": "uint32_t return_max_uint32_00080efe(){\n    return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "return_max_uint32_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar2": "source_word",
                "puVar3": "destination_word",
                "puVar4": "temp",
                "puVar6": "source_byte",
                "iVar1": "index",
                "uVar5": "remaining_length",
                "uVar7": "remaining_words"
            },
            "code": "void reverse_copy_00081e34(uint32_t *source, uint32_t *destination, uint32_t length)\n{\n    if (destination < source && source < destination + length) {\n        uint8_t *source_byte = (uint8_t *)source + length;\n        uint8_t *destination_byte = (uint8_t *)destination + length;\n        while (length--) {\n            *--destination_byte = *--source_byte;\n        }\n    } else if (length >= 16 && (((uint32_t)source | (uint32_t)destination) & 3) == 0) {\n        uint32_t *source_word = source;\n        uint32_t *destination_word = destination;\n        uint32_t word_count = length >> 4;\n        while (word_count--) {\n            *destination_word++ = *source_word++;\n            *destination_word++ = *source_word++;\n            *destination_word++ = *source_word++;\n            *destination_word++ = *source_word++;\n        }\n        switch (length & 15) {\n            case 15:\n                *destination_word++ = *source_word++;\n            case 14:\n                *destination_word++ = *source_word++;\n            case 13:\n                *destination_word++ = *source_word++;\n            case 12:\n                *destination_word++ = *source_word++;\n            case 11:\n                *destination_word++ = *source_word++;\n            case 10:\n                *destination_word++ = *source_word++;\n            case 9:\n                *destination_word++ = *source_word++;\n            case 8:\n                *destination_word++ = *source_word++;\n            case 7:\n                *destination_word++ = *source_word++;\n            case 6:\n                *destination_word++ = *source_word++;\n            case 5:\n                *destination_word++ = *source_word++;\n            case 4:\n                *destination_word++ = *source_word++;\n            case 3:\n                *destination_word++ = *source_word++;\n            case 2:\n                *destination_word++ = *source_word++;\n            case 1:\n                *destination_word++ = *source_word++;\n        }\n    } else {\n        uint8_t *source_byte = (uint8_t *)source;\n        uint8_t *destination_byte = (uint8_t *)destination;\n        while (length--) {\n            *destination_byte++ = *source_byte++;\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "reverse_copy_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "process_data_000805a8",
                "param_1": "data",
                "bVar1": "count",
                "puVar2": "data_ptr",
                "PTR_DAT_000805d8": "data_count_ptr",
                "PTR_DAT_000805dc": "data_table_ptr",
                "DAT_000805e0": "data_divisor",
                "PTR_DAT_000805e4": "data_table_ptr"
            },
            "code": "void process_data_000805a8(byte *data)\n{\n  byte count = *PTR_DAT_000805d8;\n  if (count < 0x3c) {\n    *PTR_DAT_000805d8 = count + 1;\n    uint *data_ptr = PTR_DAT_000805dc;\n    *data = count;\n    *(uint *)(PTR_DAT_000805dc + (uint)count * 8 + 4) = (*data_ptr / DAT_000805e0) * 0x5dc >> 5;\n    return;\n  }\n  *data = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_000815ec",
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "call_function_pointer_000810cc",
                "*param_1": "function_pointer"
            },
            "code": "void call_function_pointer_000810cc(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "call_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "getByteFromMemory_00081276",
                "param_1": "address",
                "iVar2": "ptr1",
                "bVar1": "byteValue",
                "ptr2": "startAddress",
                "ptr3": "endAddress"
            },
            "code": "uint getByteFromMemory_00081276(int address)\n{\n  int ptr1 = *(int *)(address + 0x10);\n  int ptr2 = *(int *)(ptr1 + 0x80);\n  int ptr3 = *(int *)(ptr1 + 0x84);\n\n  if (ptr2 != ptr3) {\n    byte byteValue = *(byte *)(ptr1 + ptr3);\n    *(int *)(ptr1 + 0x84) = (ptr3 + 1U) & 0x7f;\n    return (uint)byteValue;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "getByteFromMemory_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "getIntegerValue_000844bc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "dataPointer",
                "iVar2": "returnValue"
            },
            "code": "void getIntegerValue_000844bc(int *outputValue, undefined4 inputValue)\n{\n  undefined *dataPointer;\n  int returnValue;\n  dataPointer = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  returnValue = convertInputToInt(inputValue);\n  if ((returnValue == -1) && (*(int *)dataPointer != 0)) {\n    *outputValue = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "getIntegerValue_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "parse_data_00083850",
                "param_1": "data",
                "param_2": "header",
                "piVar1": "offset_ptr",
                "iVar2": "total_size",
                "uVar3": "flags",
                "uVar4": "flags_shifted",
                "iVar5": "bytes_left",
                "pcVar6": "decoder",
                "unaff_r4": "result",
                "iVar7": "header_size"
            },
            "code": "undefined4 parse_data_00083850(int *data, int *header) {\n  int *offset_ptr;\n  int total_size;\n  ushort flags;\n  uint flags_shifted;\n  int bytes_left;\n  code *decoder;\n  undefined4 result;\n  int header_size;\n  \n  if ((data != (int *)0x0) && (data[14] == 0)) {\n    initialize();\n  }\n  if (*(short *)(header + 6) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(header + 6);\n  flags_shifted = (uint)flags << 0x1c;\n  if ((int)flags_shifted < 0) {\n    header_size = header[4];\n    if (header_size == 0) {\n      return 0;\n    }\n    total_size = *header;\n    if ((flags & 3) == 0) {\n      bytes_left = header[5];\n    }\n    else {\n      bytes_left = 0;\n    }\n    *header = header_size;\n    total_size -= header_size;\n    header[2] = bytes_left;\n    do {\n      if (total_size < 1) {\n        return 0;\n      }\n      bytes_left = (*(code *)header[9])(data, header[7], header_size, total_size, result);\n      total_size -= bytes_left;\n      header_size += bytes_left;\n    } while (0 < bytes_left);\n    *(ushort *)(header + 6) = flags | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(header + 6) = flags | 0x800;\n  if ((header[1] < 1) && (header[15] < 1)) {\n    return 0;\n  }\n  decoder = (code *)header[10];\n  if (decoder == (code *)0x0) {\n    return 0;\n  }\n  flags_shifted = (uint)(flags | 0x800);\n  header_size = *data;\n  *data = 0;\n  if ((flags & 0x1000) == 0) {\n    bytes_left = (*decoder)(data, header[7], flags_shifted & 0x1000, 1);\n    if ((bytes_left == -1) && (total_size = *data, total_size != 0)) {\n      if ((total_size == 0x1d) || (total_size == 0x16)) {\n        *data = header_size;\n        return 0;\n      }\n      *(ushort *)(header + 6) = flags | 0x40;\n      return 0xffffffff;\n    }\n    flags = *(ushort *)(header + 6);\n    decoder = (code *)header[10];\n  }\n  else {\n    bytes_left = header[20];\n  }\n  if (((int)(flags_shifted << 0x1d) < 0) && (bytes_left = bytes_left - header[1], header[12] != 0)) {\n    bytes_left = bytes_left - header[15];\n  }\n  bytes_left = (*decoder)(data, header[7], bytes_left, 0);\n  if (bytes_left == -1) {\n    total_size = *data;\n    if (total_size != 0) {\n      if ((total_size != 0x1d) && (total_size != 0x16)) {\n        *(ushort *)(header + 6) = flags | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(header + 6) = flags & 0xf7ff;\n      *header = header[4];\n      header[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(header + 6) & 0xf7ff;\n    header[1] = 0;\n    *(ushort *)(header + 6) = flags;\n    *header = header[4];\n  }\n  else {\n    flags = *(ushort *)(header + 6) & 0xf7ff;\n    *header = header[4];\n    *(ushort *)(header + 6) = flags;\n    header[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    header[20] = bytes_left;\n  }\nLAB_00083774:\n  offset_ptr = (int *)header[12];\n  *data = header_size;\n  if (offset_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (offset_ptr != header + 16) {\n    cleanup(data);\n  }\n  header[12] = 0;\n  return 0;\n}\n",
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "parse_data_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "perform_task_000815ec",
                "FUN_00081618": "execute_init",
                "FUN_00080774": "setup_communication",
                "do_nothing_000815e8": "do_nothing",
                "do_nothing_00080f08": "enable_feature",
                "FUN_000801e0": "start_processing",
                "DAT_00081614": "data_ready",
                "FUN_00080250": "check_status",
                "FUN_00080970": "process_data"
            },
            "code": "void perform_task_000815ec(void)\n{\n  execute_init();\n  setup_communication();\n  do_nothing();\n  enable_feature(true);\n  start_processing();\n  do {\n    do {\n      check_status();\n    } while (DAT_00081614 == 0);\n    process_data();\n  } while( true );\n}",
            "called": [
                "FUN_00080970",
                "FUN_00080f08",
                "FUN_000815e8",
                "FUN_00080250",
                "FUN_00081618",
                "FUN_00080774",
                "FUN_000801e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "perform_task_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "set_bits_at_positions_00080d3e",
                "param_1": "data",
                "param_2": "value",
                "param_3": "mask",
                "param_4": "position1",
                "PTR_": "",
                "DAT_": "",
                "*(": "*",
                ")=": " = ",
                "|": " | ",
                "&": " & ",
                "<<": " << ",
                "return;": "    return;"
            },
            "code": "void set_bits_at_positions_00080d3e(uint32_t *data, uint32_t value, uint32_t mask, uint8_t position1, uint8_t position2) {\n    uint32_t shifted_value = (value & mask) << position1;\n    uint32_t shifted_mask = mask << position1;\n    *data = (*data & ~shifted_mask) | shifted_value | ((position2 & 0x3) << 0x1c);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_bits_at_positions_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "set_param_and_return_array_00081438",
                "param_1": "array",
                "param_2": "param",
                "*param_1": "*array",
                "PTR_PTR_FUN_000812b8_1_00081458": "PTR_PTR_CONST_000812b8_1_00081458",
                "param_1[9]": "array[9]"
            },
            "code": "undefined4 *set_param_and_return_array_00081438(undefined4 *array, undefined4 param) {\n  call_some_function();\n  *array = PTR_PTR_FUN_000812b8_1_00081458;\n  array[9] = param;\n  return array;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "set_param_and_return_array_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value) {\n  int offset = index * 0x40 + 0x14;\n  int* address_to_write = base_address + offset;\n  *address_to_write = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "iVar2": "value",
                "uVar3": "data",
                "uVar4": "bit",
                "*DAT_0008362c": "data_pointer",
                "FUN_00083888": "initialize",
                "FUN_00083b10": "cleanup",
                "FUN_00084018": "process"
            },
            "code": "uint32_t process_data_0008356c(uint32_t *output, int *input)\n{\n  uint32_t uVar1;\n  int32_t iVar2;\n  uint32_t uVar3;\n  uint16_t data = *(uint16_t *)(input + 3);\n  uVar3 = (uint32_t)data;\n  if ((*DAT_0008362c != 0) && (*(int *)(*DAT_0008362c + 0x38) == 0)) {\n    initialize();\n  }\n  if ((int32_t)(uVar3 << 0x1c) < 0) {\n    iVar2 = input[4];\n  }\n  else {\n    if (-1 < (int32_t)(uVar3 << 0x1b)) {\n      *output = 9;\n      *(uint16_t *)(input + 3) = data | 0x40;\n      return 0xffffffff;\n    }\n    if ((int32_t)(uVar3 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          cleanup(output);\n          data = *(uint16_t *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      iVar2 = input[4];\n      data &= 0xffdb;\n      *input = iVar2;\n      input[1] = 0;\n    }\n    else {\n      iVar2 = input[4];\n    }\n    *(uint16_t *)(input + 3) = data | 8;\n    uVar3 = (uint32_t)(data | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    process(output, input);\n    uVar3 = (uint32_t)*(uint16_t *)(input + 3);\n    iVar2 = input[4];\n  }\n  uint32_t uVar4 = uVar3 & 1;\n  if (uVar4 == 0) {\n    if (-1 < (int32_t)(uVar3 << 0x1e)) {\n      uVar4 = input[5];\n    }\n    input[2] = uVar4;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int32_t)((uint32_t)*(uint16_t *)(input + 3) << 0x18) < 0)) {\n    *(uint16_t *)(input + 3) = *(uint16_t *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10",
                "FUN_00084018"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_system_00080b98",
                "puVar1": "config_ptr",
                "iVar2": "counter",
                "DAT_00080c04": "CONFIG_START_ADDR",
                "*DAT_00080c04": "*config_ptr",
                "DAT_00080c08": "COUNTER_START_ADDR",
                "*(int *)(DAT_00080c08 + 0x20)": "*(int32_t *)(counter + 0x20)",
                "DAT_00080c10": "CONFIG_VALUE_1",
                "*(int *)(iVar2 + 0x68)": "*(int32_t *)(counter + 0x68)",
                "DAT_00080c0c": "CONFIG_VALUE_2",
                "*(uint *)(DAT_00080c08 + 0x30)": "*(uint32_t *)(counter + 0x30)",
                "CONFIG_VALUE_3": "CONFIG_VALUE_3",
                "CONFIG_VALUE_4": "CONFIG_VALUE_4",
                "DAT_00080c14": "CONFIG_VALUE_3",
                "DAT_00080c18": "CONFIG_VALUE_5",
                "*DAT_00080c1c": "*COUNTER_END_ADDR"
            },
            "code": "void initialize_system_00080b98(void)\n{\n    uint32_t *DAT_00080c04;\n    int32_t counter;\n\n    config_ptr = DAT_00080c04;\n    *DAT_00080c04 = 0x400;\n    config_ptr[0x80] = 0x400;\n    counter = DAT_00080c08;\n    if (-1 < *(int *)(DAT_00080c08 + 0x20) << 7) {\n        *(uint32_t *)(counter + 0x20) = DAT_00080c10;\n        do {\n        } while (-1 < *(int32_t *)(counter + 0x68) << 0x1f);\n    }\n    *(uint32_t *)(counter + 0x20) = DAT_00080c0c;\n    do {\n    } while (-1 < *(int32_t *)(counter + 0x68) << 0xf);\n    *(uint *)(DAT_00080c08 + 0x30) = *(uint *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1;\n    do {\n    } while (-1 < *(int32_t *)(counter + 0x68) << 0x1c);\n    *(uint32_t *)(counter + 0x28) = DAT_00080c14;\n    do {\n    } while (-1 < *(int32_t *)(counter + 0x68) << 0x1e);\n    *(uint *)(DAT_00080c08 + 0x30) = CONFIG_VALUE_4;\n    do {\n    } while (-1 < *(int32_t *)(counter + 0x68) << 0x1c);\n    *DAT_00080c1c = DAT_00080c18;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_system_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "sum_of_functions_results_000810e8",
                "param_1": "param",
                "iVar1": "result1",
                "iVar2": "result2",
                "FUN_000810a6": "get_first_function_result",
                "FUN_000810d8": "get_second_function_result"
            },
            "code": "int sum_of_functions_results_000810e8(int param){\n  int result1 = get_first_function_result();\n  int result2 = get_second_function_result(param);\n  return result2 + result1;\n}",
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "sum_of_functions_results_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "array_start_index",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "*array_ptr",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_00080d58(int array_start_index, uint8_t bit_position)\n{\n    int* array_ptr = (int*)(array_start_index + 0x14);\n    int bit_mask = 1 << (bit_position & 0xff);\n    *array_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "reset_data_00081480",
                "param_1": "data",
                "*param_1": "*data",
                "FUN_00081800": "perform_reset"
            },
            "code": "void reset_data_00081480(int *data)\n{\n  if (*data != 0) {\n    perform_reset();\n  }\n  *data = 0;\n  data[2] = 0;\n  data[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "reset_data_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "execute_function_with_params_00081f9c",
                "param_1": "param_1",
                "param_2": "param_2",
                "*DAT_00081fa8": "function_pointer"
            },
            "code": "void execute_function_with_params_00081f9c(void* *DAT_00081fa8, int param_1, int param_2)\n{\n  *DAT_00081fa8(param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_2",
                "difference": "difference",
                "masked_difference": "masked_difference"
            },
            "code": "uint calculate_difference_00081248(int input_param) {\n    int* ptr_1 = (int*)(*(int*)(input_param + 0x10) + 0x80);\n    int* ptr_2 = (int*)(*(int*)(input_param + 0x10) + 0x84);\n    int difference = *ptr_1 - *ptr_2;\n    int masked_difference = difference & 0x7f;\n    return masked_difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "call_function_with_parameter_00081800",
                "param_1": "parameter",
                "*DAT_0008180c": "pointer_to_function"
            },
            "code": "void call_function_with_parameter_00081800(void* *DAT_0008180c, int parameter){\n\tfunction_pointer = *DAT_0008180c;\n\tparam = parameter;\n\t(*function_pointer)(param);\n\treturn;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081472",
                "FUN_0008151c",
                "FUN_00081480"
            ],
            "imported": false,
            "current_name": "call_function_with_parameter_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "base_value",
                "param_2": "subtract_value",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "multiplied_base",
                "lVar2": "multiplied_value"
            },
            "code": "void calculate_difference_0008458c(uint32_t base_value, int32_t subtract_value, uint32_t multiplier_low, uint32_t multiplier_high, int32_t* result_array)\n{\n  uint64_t multiplied_value = (uint64_t)multiplier_high << 32 | multiplier_low;\n  uint32_t multiplied_base = (uint32_t)(multiplied_value * (uint64_t)base_value);\n  result_array[0] = base_value - multiplied_base;\n  result_array[1] = subtract_value - (int32_t)(multiplied_value >> 32) - (uint32_t)(base_value < multiplied_base);\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "output_data",
                "param_2": "input_data_size",
                "param_3": "input_data",
                "param_4": "status",
                "uVar1": "result",
                "iVar2": "function_result",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008434c(undefined4 *output_data, int input_data_size, undefined4 input_data, undefined4 *status)\n{\n  undefined4 result;\n  int function_result;\n  code *function_pointer;\n  undefined stack_buffer[12];\n  \n  if (input_data_size == 0) {\n    function_pointer = *DAT_00084398;\n    result = get_value();\n    function_result = (*function_pointer)(output_data, stack_buffer, 0, result, status);\n  }\n  else {\n    function_pointer = *DAT_00084398;\n    result = get_value();\n    function_result = (*function_pointer)(output_data, input_data_size, input_data, result, status);\n  }\n  if (function_result == -1) {\n    *status = 0;\n    *output_data = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "process_data_0008159e",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "additional_data",
                "local_c": "masked_data",
                "uStack_8": "additional_data_copy",
                "FUN_00081570": "send_data"
            },
            "code": "void process_data_0008159e(uint32_t* data_ptr, uint32_t data, uint32_t additional_data)\n{\n  uint32_t masked_data = data & 0xffff00ff;\n  uint32_t additional_data_copy = additional_data;\n  send_data(data_ptr, &masked_data, 1, 0, data_ptr);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "process_data_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "*param_1": "*data",
                "param_2": "size",
                "bVar1": "result",
                "puVar2": "buffer",
                "uVar3": "value",
                "uVar4": "index",
                "uVar5": "length",
                "iVar6": "i",
                "uVar7": "div_result"
            },
            "code": "byte process_data_000806a0(byte *data, undefined4 size)\n{\n  byte result;\n  undefined *buffer;\n  undefined4 value;\n  uint index;\n  undefined4 length;\n  int i;\n  uint div_result;\n  \n  if (*data > 0x3b) goto LAB_00080660;\n  write_data(size, 1, 0x220, *data, 0x960);\n  buffer = PTR_DAT_00080694;\n  index = (uint)*data;\n  result = buffer[index * 8];\n  data[2] = 0;\n  div_result = index / 0xc;\n  buffer[index * 8] = result & 0xc0 | (byte)size & 0x3f;\n  data[1] = 0;\n  i = 0;\n  do {\n    if ((int)((uint)(byte)buffer[(i + div_result * 0xc) * 8] << 0x19) < 0) goto LAB_00080652;\n    i++;\n  } while (i != 0xc);\n  value = DAT_00080698;\n  if (div_result == 0) {\n    length = 0x1e;\nLAB_0008064c:\n    write_data(value, div_result, length, length);\n  }\n  else {\n    if (div_result == 1) {\n      length = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (div_result == 2) {\n      length = 0x20;\n      goto LAB_0008064c;\n    }\n    value = DAT_0008069c;\n    if (div_result == 3) {\n      div_result = 2;\n      length = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (div_result == 4) {\n      div_result = 0;\n      length = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  buffer[(uint)*data * 8] = buffer[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "copy_values_0008151c",
                "param_1": "source",
                "param_2": "destination"
            },
            "code": "void copy_values_0008151c(int *source, int *destination)\n{\n    if (*source != 0) {\n        if ((*destination != 0) && (PTR_DAT_0008155c != (undefined *)0x0)) {\n            if ((uint)destination[2] <= (uint)source[1]) {\n                FUN_000825cc();\n                source[2] = destination[2];\n                goto END;\n            }\n        }\n        FUN_00081800();\n    }\n    *source = *destination;\n    source[1] = destination[1];\n    source[2] = destination[2];\n    *destination = 0;\n    destination[1] = 0;\nEND:\n    destination[2] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "copy_values_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "assertion_failed_000816f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "message",
                "param_4": "arg4",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "message_ptr",
                "uVar4": "var4"
            },
            "code": "void assertion_failed_000816f8(undefined4 arg1, undefined4 arg2, undefined *message, undefined4 arg4)\n{\n  undefined4 var1 = *(undefined4 *)(*DAT_00081724 + 0xc);\n  undefined4 var2 = arg4;\n  undefined *message_ptr = PTR_s___function__00081728;\n  if (message == (undefined *)0x0) goto LAB_0008171c;\n  do {\n    arg4 = arg1;\n    FUN_00081750(var1, PTR_s_assertion___s__failed__file___s__0008172c, var2, arg1, arg2, message_ptr, message);\n    undefined8 var4 = FUN_000836ec();\n    arg2 = (undefined4)((ulonglong)var4 >> 0x20);\n    var1 = (undefined4)var4;\nLAB_0008171c:\n    message = PTR_s__00081730;\n    var2 = arg4;\n    message_ptr = PTR_s__00081730;\n  } while( true );\n}",
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "assertion_failed_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data",
                "iVar3": "data_ptr",
                "PTR_00084490": "PTR_DATA_PTR",
                "FUN_00083888": "initialize_data_ptr",
                "FUN_00083850": "process_data_ptr"
            },
            "code": "int process_data_00084484(int data)\n{\n  int data_ptr = *PTR_00084490;\n  if (data != 0) {\n    if ((data_ptr != 0) && (*(int *)(data_ptr + 0x38) == 0)) {\n      initialize_data_ptr();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      int result = process_data_00084484_ptr(data_ptr, data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(data + 0x2c))(data_ptr,*(undefined4 *)(data + 0x1c)), result < 0))\n      {\n        return -1;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        process_data_00084484_ptr(data_ptr,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          process_data_00084484_ptr(data_ptr);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        process_data_00084484_ptr(data_ptr);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      do_nothing_0008397c();\n      *(undefined2 *)(data + 0xc) = 0;\n      do_nothing_00083980();\n      return result;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "code": "void update_buffer_000811ca(int buffer_address, undefined new_value)\n{\n  uint new_index = *(int *)(buffer_address + 0x80) + 1U & 0x7f;\n  if (new_index != *(uint *)(buffer_address + 0x84)) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x80) = new_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "send_data_to_device_00080164",
                "param_1": "device_address",
                "param_2": "data_address",
                "param_3": "data_length",
                "param_4": "data_checksum",
                "FUN_000806f8": "send_command",
                "PTR_DAT_0008017c": "command_address",
                "PTR_DAT_00080180": "data_command_address"
            },
            "code": "void send_data_to_device_00080164(uint32_t device_address, uint32_t data_address, uint32_t data_length, uint32_t data_checksum)\n{\n  send_command(device_address, 0x5a);\n  send_command_with_data(data_address, 0x5a, data_length, data_checksum);\n  return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "send_data_to_device_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "input",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "value1",
                "puVar2": "temp_ptr",
                "iVar3": "result",
                "uVar4": "value2"
            },
            "code": "void process_data_00084244(int *output, int input, undefined4 arg1, undefined4 arg2)\n{\n    short value1 = *(short *)(input + 0xe);\n    ushort value2 = *(ushort *)(input + 0xc);\n    if ((int)((uint)value2 << 0x17) < 0) {\n        FUN_000844e0(output, value1, 0, 2);\n        value2 = *(ushort *)(input + 0xc);\n    }\n    *(ushort *)(input + 0xc) = value2 & 0xefff;\n    undefined *temp_ptr = PTR_DAT_000843dc;\n    *(undefined4 *)temp_ptr = 0;\n    int result = FUN_00080ec8((int)value1, arg1, arg2, arg2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n    if ((result == -1) && (*(int *)temp_ptr != 0)) {\n        *output = *(int *)temp_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "validate_input_00081496",
                "param_1": "input_array",
                "param_2": "array_size",
                "iVar1": "result"
            },
            "code": "int validate_input_00081496(int *input_array, int array_size, undefined4 param_3, undefined4 param_4)\n{\n  int result;\n  result = validate_input_00081496_helper(*input_array, array_size + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *input_array = result;\n    input_array[1] = array_size;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "validate_input_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_data_00084004",
                "DAT_00084008": "data"
            },
            "code": "int get_data_00084004() {\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_data_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "process_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "PTR_DAT_0008107c": "data_ptr_1",
                "PTR_DAT_00081080": "data_ptr_2",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "data_2",
                "iVar5": "data_1"
            },
            "code": "void process_data_00081014(int index, int value, undefined4 param_3) {\n  undefined *PTR_DAT_0008107c = PTR_DAT_0008107c;\n  undefined *PTR_DAT_00081080 = PTR_DAT_00081080;\n  if (PTR_DAT_0008107c[index * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081080[index] & 0xf) == 5) {\n      FUN_00080f0c(index, 1, param_3, 5, index, value, param_3);\n    }\n    PTR_DAT_00081080[index] = PTR_DAT_00081080[index] & 0xf | (byte)(value << 4);\n    int data_1 = *(int *)(PTR_DAT_0008107c + index * 0x1c);\n    undefined4 data_2 = *(undefined4 *)(PTR_DAT_0008107c + index * 0x1c + 4);\n    int result = FUN_00080a94(data_1, data_2);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data_1 + 100) = data_2;\n        return;\n      }\n      *(undefined4 *)(data_1 + 0x60) = data_2;\n      return;\n    }\n    FUN_00080a0a(data_1, data_2, value, 0, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080a0a",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "process_data_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "addDataToBuffer_000816ec",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "bufferIndex",
                "puVar1": "bufferStart",
                "iVar3": "PTR_DAT_000836d0",
                "uVar2": "bufferLength",
                "UNRECOVERED_JUMPTABLE_00": "jumpToFunction",
                "DAT_000836d4": "memoryAllocationFlag",
                "allocateMemory": "allocateMemory"
            },
            "code": "void addDataToBuffer_000816ec(int data, int* buffer, int* bufferIndex)\n{\n  int* bufferStart = *(int**)(PTR_DAT_000836d0 + 0x148);\n  if (bufferStart == NULL)\n  {\n    bufferStart = (int*)(PTR_DAT_000836d0 + 0x14c);\n    *(int**)(PTR_DAT_000836d0 + 0x148) = bufferStart;\n  }\n  uint bufferLength = bufferStart[1];\n  if (bufferLength > 0x1f)\n  {\n    if ((DAT_000836d4 == 0) ||\n       ((bufferStart = (int*)allocateMemory(400)) == NULL))\n    {\n      exit(-1);\n    }\n    *bufferStart = *(int*)(PTR_DAT_000836d0 + 0x148);\n    bufferStart[1] = 0;\n    bufferLength = 0;\n    *(int**)(PTR_DAT_000836d0 + 0x148) = bufferStart;\n    bufferStart[0x62] = 0;\n    bufferStart[99] = 0;\n  }\n  uint mask = 1 << (bufferLength & 0xff);\n  bufferStart[bufferLength + 0x22] = data;\n  bufferStart[0x62] |= mask;\n  bufferStart[bufferLength + 0x42] = 0;\n  bufferStart[99] |= mask;\n  bufferStart[1] = bufferLength + 1;\n  bufferStart[bufferLength + 2] = *bufferIndex;\n  jumpToFunction(0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "addDataToBuffer_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = FUN_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00083b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_000817f0",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "is_valid_input_000814ae",
                "param_1": "input_ptr",
                "param_2": "input_len",
                "iVar1": "status",
                "FUN_00081496": "validate_input"
            },
            "code": "int is_valid_input_000814ae(int *input_ptr, uint input_len) {\n  int status;\n\n  if ((*input_ptr == 0) || ((uint)input_ptr[1] < input_len)) {\n    status = validate_input(input_ptr);\n    if (status == 0) {\n      return 0;\n    }\n    if (input_ptr[2] == 0) {\n      *(undefined *)*input_ptr = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "is_valid_input_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_all_functions_00081778",
                "puVar1": "data_start",
                "puVar2": "data_end",
                "iVar3": "i",
                "ppcVar4": "function_pointer",
                "iVar5": "num_functions"
            },
            "code": "void execute_all_functions_00081778(void)\n{\n  int num_functions = (int)PTR_FUNCTION_END - (int)PTR_FUNCTION_START >> 2;\n  if (num_functions != 0) {\n    code **function_pointer = (code **)(PTR_FUNCTION_START - 4);\n    int i = 0;\n    do {\n      i++;\n      function_pointer++;\n      (**function_pointer)();\n    } while (num_functions != i);\n  }\n  undefined *data_end = PTR_DATA_END;\n  undefined *data_start = PTR_DATA_START;\n  do_nothing();\n  int num_data = (int)data_start - (int)data_end >> 2;\n  if (num_data != 0) {\n    code **data_pointer = (code **)(data_end - 4);\n    int i = 0;\n    do {\n      i++;\n      data_pointer++;\n      (**data_pointer)();\n    } while (num_data != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_all_functions_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_and_return_value_000800f4",
                "param_1": "value_to_return",
                "PTR_DAT_0008010c": "pointer_to_data",
                "DAT_00080110": "data",
                "DAT_00080114": "return_value"
            },
            "code": "int check_and_return_value_000800f4(int value_to_return) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      value_to_return = DAT_00080114;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return value_to_return;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_return_value_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "execute_function_000810c4",
                "FUN_000810a6": "call_helper_function"
            },
            "code": "void execute_function_000810c4(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "execute_function_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_register_00080d30",
                "param_1": "register_address",
                "param_2": "value_to_set",
                "param_3": "bit_to_set",
                "*(uint *)(param_1 + 4)": "current_value",
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": "mask",
                "uint": "uint32_t"
            },
            "code": "void update_register_00080d30(uint32_t* register_address, uint32_t value_to_set, uint32_t bit_to_set) {\n  uint32_t current_value = *register_address;\n  uint32_t mask = 1 << bit_to_set;\n  *register_address = current_value | value_to_set | (mask & 0x80);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_register_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "calculate_index_and_set_values_00080c98",
                "param_1": "result",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "threshold",
                "uVar1": "quotient",
                "uVar2": "i",
                "local_58": "max_thresholds"
            },
            "code": "uint calculate_index_and_set_values_00080c98(uint *result, uint input_size, int divisor, int threshold)\n{\n  uint quotient;\n  uint max_thresholds[16];\n  \n  max_thresholds[0] = *(uint *)PTR_DAT_00080d28;\n  max_thresholds[1] = *(uint *)(PTR_DAT_00080d28 + 4);\n  max_thresholds[2] = *(uint *)(PTR_DAT_00080d28 + 8);\n  max_thresholds[3] = *(uint *)(PTR_DAT_00080d28 + 0xc);\n  max_thresholds[4] = *(uint *)(PTR_DAT_00080d28 + 0x10);\n  max_thresholds[5] = *(uint *)(PTR_DAT_00080d28 + 0x14);\n  max_thresholds[6] = *(uint *)(PTR_DAT_00080d28 + 0x18);\n  max_thresholds[7] = *(uint *)(PTR_DAT_00080d28 + 0x1c);\n  max_thresholds[8] = *(uint *)(PTR_DAT_00080d28 + 0x20);\n  max_thresholds[9] = *(uint *)(PTR_DAT_00080d28 + 0x24);\n  max_thresholds[10] = *(uint *)(PTR_DAT_00080d28 + 0x28);\n  max_thresholds[11] = *(uint *)(PTR_DAT_00080d28 + 0x2c);\n  max_thresholds[12] = *(uint *)(PTR_DAT_00080d28 + 0x30);\n  max_thresholds[13] = *(uint *)(PTR_DAT_00080d28 + 0x34);\n  max_thresholds[14] = *(uint *)(PTR_DAT_00080d28 + 0x38);\n  max_thresholds[15] = *(uint *)(PTR_DAT_00080d28 + 0x3c);\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  for (int i = 0; i < 16; i++) {\n    if ((uint)(threshold *\n              (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / (ulonglong)DAT_00080d2c))\n        <= max_thresholds[i]) {\n      result[1] = (i & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "calculate_index_and_set_values_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_status_message",
                "FUN_000817c8": "print_exit_status_message"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param_2, int param_3, int param_4)\n{\n  print_PTR_s_Exiting_with_status__d__00080ef8(status_code);\n  while(true){}\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "find_index_of_first_negative_number_000811e8",
                "param_1": "array",
                "iVar1": "current_index"
            },
            "code": "int find_index_of_first_negative_number_000811e8(int *array) {\n  int current_index = thunk_get_current_index();\n  array[3] = current_index;\n  do {\n    current_index = (**(code **)(*array + 0xc))(array);\n    if (current_index >= 0) {\n      return current_index;\n    }\n    current_index = thunk_get_current_index();\n  } while ((uint)(current_index - array[3]) < (uint)array[2]);\n  return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "find_index_of_first_negative_number_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "calculate_000806f8",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "maxLength",
                "param1": "param1",
                "param2": "param2",
                "param3": "param3"
            },
            "code": "void calculate_000806f8(uint8_t *data, uint length) {\n    uint maxLength = 0xb4;\n    if (length < 0x220) {\n        if (length > 0xb3) maxLength = 0xb3;\n        uint32_t param1 = maxLength & ~(maxLength >> 0x1f);\n        uint32_t param2 = (0x88 - (char)data[1]) * 4;\n        uint32_t param3 = (600 - (char)data[2]) * 4;\n        length = FUN_0008145c(param1, 0, maxLength, param2, param3, length);\n    }\n    if (*data < 0x3c) {\n        uint32_t param1 = (*DAT_000806ec / DAT_000806f0) * ((0x88 - (char)data[1]) * 4 - 2) >> 5;\n        uint32_t param2 = (600 - (char)data[2]) * 4;\n        if ((int)length + (0x88 - (char)data[1]) * -4 >= 0 && (int)length <= (int)param2) {\n            length = length;\n        } else {\n            length = param2;\n        }\n        *(uint *)(PTR_DAT_000806f4 + (uint)*data * 8 + 4) = param1;\n    }\n}\n",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "previous_char",
                "cVar4": "current_digit",
                "uVar2": "remainder",
                "uVar5": "temp",
                "local_15": "N/A"
            },
            "code": "void convert_decimal_to_base_n_000810fc(char *output, uint input, uint base) {\n  char *current_char = output;\n  char *previous_char = output + 1;\n  char current_digit;\n  uint remainder;\n  if (base < 2) {\n    base = 10;\n  }\n  do {\n    remainder = input % base;\n    current_digit = (char)remainder;\n    if (remainder < 10) {\n      current_digit += '0';\n    }\n    else {\n      current_digit += '7';\n    }\n    *current_char = current_digit;\n    input /= base;\n    current_char++;\n  } while (input != 0);\n  reverse_string(output, previous_char);\n}\n\nvoid reverse_string(char *begin, char *end) {\n  char temp;\n  while (end > begin) {\n    temp = *end;\n    *end = *begin;\n    *begin = temp;\n    end--;\n    begin++;\n  }\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_n_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "control_vehicle_00080250",
                "puVar1": "ptr",
                "uVar2": "motor_speed",
                "uVar3": "steer_angle",
                "iVar4": "motor_speed_check",
                "puVar5": "ptr2",
                "auStack_1c": "stack",
                "PTR_DAT_000803bc": "MODE_PTR",
                "PTR_DAT_000803c0": "MOTOR_ON_OFF_PTR",
                "do_nothing_00080f08": "wait",
                "FUN_00081014": "print_message",
                "PTR_DAT_000803cc": "manual_mode_ptr",
                "FUN_00080164": "exit_manual_mode",
                "FUN_000810e8": "print_message",
                "PTR_DAT_000803c8": "vehicle_ptr",
                "PTR_s_Entered_manual_control_mode__000803d0": "MANUAL_MODE_MSG",
                "FUN_00081624": "get_motor_speed",
                "FUN_0008145c": "get_steer_angle",
                "PTR_DAT_000803d4": "MOTOR_SPEED_MSG_PTR",
                "PTR_DAT_000803d8": "STEER_ANGLE_MSG_PTR",
                "FUN_00081248": "get_motor_speed",
                "FUN_00081276": "set_motor_speed",
                "thunk_FUN_0008113a": "set_steer_angle",
                "FUN_000810c4": "print_message",
                "PTR_DAT_000803dc": "MOTOR_SPEED_MSG",
                "FUN_0008117a": "print_message",
                "PTR_DAT_000803e0": "MOTOR_SPEED_PTR",
                "PTR_DAT_000803e4": "STEER_ANGLE_PTR",
                "PTR_DAT_000803e8": "AUTONOMOUS_MODE_MSG",
                "FUN_000806f8": "exit_program",
                "PTR_DAT_000803ec": "MOTOR_SPEED_CHECK_MSG",
                "PTR_s_steer_000803f4": "STEER_ANGLE_CHECK_MSG",
                "FUN_00081472": "wait",
                "PTR_DAT_000803f0": "STEER_ANGLE_CHECK_MSG",
                "PTR_s_motor_000803f8": "MOTOR_SPEED_CHECK_MSG",
                "FUN_000815b8": "get_check_result",
                "FUN_000815de": "get_check_value",
                "PTR_s_error_000803c4": "ERROR_MSG"
            },
            "code": "void control_vehicle_00080250(void)\n{\n  uint32_t motor_speed;\n  uint32_t steer_angle;\n  uint32_t mode;\n  uint32_t *mode_ptr = (uint32_t *)PTR_DAT_000803bc;\n  uint32_t *motor_speed_ptr = (uint32_t *)PTR_DAT_000803e0;\n  uint32_t *steer_angle_ptr = (uint32_t *)PTR_DAT_000803e4;\n  if(*mode_ptr < 0x641)\n  {\n    if(*mode_ptr - 0x385 < 299)\n    {\n      if(!manual_mode)\n      {\n        enter_manual_mode();\n        print_message(PTR_s_Entered_manual_control_mode__000803d0);\n        manual_mode = true;\n      }\n      wait(10);\n      motor_speed = get_motor_speed();\n      steer_angle = get_steer_angle();\n      while(motor_speed > 0)\n      {\n        motor_speed = get_motor_speed();\n        set_motor_speed(motor_speed);\n        set_steer_angle(steer_angle);\n        wait(10);\n      }\n    }\n    else\n    {\n      if(manual_mode)\n      {\n        exit_manual_mode();\n        print_message(PTR_DAT_000803e8);\n        manual_mode = false;\n      }\n      mode = 1;\n      wait(10);\n      while(get_motor_speed() > 0)\n      {\n        motor_speed = get_motor_speed();\n        steer_angle = get_steer_angle();\n        set_motor_speed(motor_speed);\n        set_steer_angle(steer_angle);\n        wait(10);\n      }\n    }\n  }\n  else\n  {\n    print_message(PTR_s_error_000803c4);\n    exit_program();\n  }\n}\n",
            "called": [
                "FUN_0008145c",
                "FUN_00081276",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_00081014",
                "FUN_000815b8",
                "thunk_FUN_0008113a",
                "FUN_00081248",
                "FUN_00081214",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_0008117a",
                "FUN_000806f8",
                "FUN_000810c4",
                "FUN_000815de",
                "FUN_00081560",
                "FUN_00081624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "control_vehicle_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_value_00080d6a",
                "param_1": "object_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(object_address + 0x28)"
            },
            "code": "void set_parameter_value_00080d6a(int object_address, int value){\n    *(int *)(object_address + 0x28) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_parameter_value_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_device_000813dc",
                "param_1": "device_address",
                "param_2": "device_speed",
                "puVar1": "device_data",
                "iVar2": "device_struct_address",
                "puVar3": "device_config"
            },
            "code": "void initialize_device_000813dc(int device_address, uint32_t device_speed)\n{\n    uint32_t *device_config;\n    int device_struct_address;\n    uint32_t *device_data;\n\n    set_device_speed(*(uint32_t *)(device_address + 0x20));\n\n    device_config = *(uint32_t **)(device_address + 0x18);\n    device_config[0x48] = 0x202;\n    *device_config = 0xac;\n    device_data = DAT_000813d4;\n    device_config[1] = 0x800;\n    device_config[8] = *device_data / device_speed >> 4;\n    device_config[3] = 0xffffffff;\n    device_config[2] = 0x61;\n    *(int *)(DAT_000813d8 + ((uint32_t)(int32_t)(char)*(uint8_t *)(device_address + 0x1c) >> 5) * 4) = 1 << (uint32_t)(*(uint8_t *)(device_address + 0x1c) & 0x1f);\n\n    device_struct_address = *(int *)(device_address + 0x10);\n    *(uint32_t *)(device_struct_address + 0x84) = 0;\n    *(uint32_t *)(device_struct_address + 0x80) = 0;\n    device_struct_address = *(int *)(device_address + 0x14);\n    *(uint32_t *)(device_struct_address + 0x84) = 0;\n    *(uint32_t *)(device_struct_address + 0x80) = 0;\n    *device_config = 0x50;\n}\n",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "initialize_device_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "set_values_to_array_00080a0a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "has_value_1",
                "param_4": "has_value_2",
                "param_5": "has_value_3",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_values_to_array_00080a0a(int* array, int value, int has_value_1, int has_value_2, int has_value_3) {\n  array[17] = value;\n  if (has_value_3 == 0) {\n    array[24] = value;\n  }\n  else {\n    array[25] = value;\n  }\n  if (has_value_2 == 0) {\n    array[21] = value;\n  }\n  else {\n    array[20] = value;\n  }\n  if (has_value_1 == 0) {\n    array[13] = value;\n  }\n  else {\n    array[12] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "set_values_to_array_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "initialize_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "channel_size",
                "param_3": "channel_config",
                "iVar1": "offset_bytes",
                "iVar2": "channel_start_address",
                "uVar3": "channel_info"
            },
            "code": "void initialize_channel_00080b2c(int channel_id, uint32_t channel_size, void* channel_config) {\n  int offset_bytes = channel_id * channel_size;\n  int channel_start_address = (int)channel_config + offset_bytes;\n  *(uint32_t*)(channel_start_address) = 2;\n  *(uint32_t*)(channel_start_address + 0x28) = 0xffffffff;\n  *(void**)(channel_start_address + 4) = channel_config;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "initialize_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "send_data_to_server_00080774",
                "puVar1": "data_ptr",
                "puVar2": "config_ptr",
                "iVar3": "config_ptr_1",
                "iVar4": "data_ptr_3",
                "iVar5": "data_ptr_2",
                "iVar6": "data_ptr_1",
                "iVar7": "i",
                "iVar8": "num_iterations"
            },
            "code": "void send_data_to_server_00080774(void)\n{\n  uint *data_ptr;\n  undefined4 *config_ptr;\n  int i;\n  int num_iterations = 0x4f;\n  int data_ptr_1 = PTR_DAT_00080890;\n  int data_ptr_2 = PTR_DAT_0008088c;\n  int data_ptr_3 = PTR_DAT_00080888;\n  int config_ptr_1 = PTR_DAT_00080884;\n\n  initialize_data();\n  config_ptr = PTR_DAT_0008087c;\n  config_ptr[1] = *data_ptr / 1000 - 1;\n  *(undefined *)(PTR_DAT_00080880 + 0x23) = 0xf0;\n  config_ptr[2] = 0;\n  *config_ptr = 7;\n  send_header_to_server();\n\n  for(i = 0; i < num_iterations; i++) {\n    send_data_to_server_00080774(data_ptr_1, 0);\n    send_data_to_server_00080774(data_ptr_2, 0);\n    send_data_to_server_00080774(data_ptr_3, 0);\n    send_data_to_server_00080774(config_ptr_1, 0);\n  }\n\n  *(undefined4 *)(config_ptr_1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_ptr_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_ptr_2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(data_ptr_1 + 0xa0) = 0xffffffff;\n\n  send_data_to_server_00080774(config_ptr_1, 1, 0x300, 0);\n  send_data_to_server_00080774(data_ptr_1, 1);\n  send_data_to_server_00080774(config_ptr_1, 1, 0xc00, 0);\n  send_data_to_server_00080774(config_ptr_1, 1, 0x3000, 0);\n  send_data_to_server_00080774(data_ptr_2, 2, 0x30, 0);\n  send_data_to_server_00080774(data_ptr_3, 1, 0xc00, 0);\n  send_data_to_server_00080774(config_ptr_1, 1, 3, 0);\n  send_data_to_server_00080774(data_ptr_3, 1, 0xc000, 0);\n  send_end_message_to_server(0x25);\n  send_data_to_server_00080774(PTR_DAT_00080898, *data_ptr, PTR_DAT_00080894, 0xc);\n  send_data_to_server_00080774(PTR_DAT_00080898, 0, 0x300000, 1);\n  send_data_to_server_00080774(PTR_DAT_00080898, 0, 0);\n  send_data_to_server_00080774(PTR_DAT_00080898, 0xffffffff);\n  send_data_to_server_00080774(PTR_DAT_00080898);\n}\n",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d30",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080b98",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080d62",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "send_data_to_server_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int return_zero_00080ec2(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_struct_00083888",
                "param_1": "struct_ptr",
                "puVar1": "label_ptr",
                "uVar2": "var1_val",
                "puVar3": "func1_ptr",
                "puVar4": "label2_ptr",
                "puVar5": "struct1",
                "puVar6": "struct2"
            },
            "code": "void initialize_struct_00083888(int struct_ptr)\n{\n  if (*(int *)(struct_ptr + 0x38) == 0) {\n    undefined4 *struct1 = *(undefined4 **)(struct_ptr + 4);\n    *(undefined **)(struct_ptr + 0x3c) = label1;\n    *(undefined4 *)(struct_ptr + 0x2e4) = 3;\n    *(int *)(struct_ptr + 0x2e8) = struct_ptr + 0x2ec;\n    *(undefined4 *)(struct_ptr + 0x2e0) = 0;\n    *(undefined2 *)(struct1 + 3) = 4;\n    *struct1 = 0;\n    struct1[1] = 0;\n    struct1[2] = 0;\n    struct1[0x19] = 0;\n    *(undefined2 *)((int)struct1 + 0xe) = 0;\n    struct1[4] = 0;\n    struct1[5] = 0;\n    struct1[6] = 0;\n    set_to_zero(struct1 + 0x17, 0, 8);\n    undefined *label2 = label2_ptr;\n    undefined *func_ptr1 = func1_ptr;\n    undefined4 var1 = var1_val;\n    undefined *func_ptr2 = func2_ptr;\n    undefined *label3 = label3_ptr;\n    undefined4 *struct2 = *(undefined4 **)(struct_ptr + 8);\n    struct1[7] = struct1;\n    struct1[8] = func_ptr2;\n    struct1[9] = var1;\n    struct1[10] = func_ptr1;\n    struct1[0xb] = label2;\n    *(undefined2 *)((int)struct2 + 0xe) = 1;\n    *(undefined2 *)(struct2 + 3) = 9;\n    *struct2 = 0;\n    struct2[1] = 0;\n    struct2[2] = 0;\n    struct2[0x19] = 0;\n    struct2[4] = 0;\n    struct2[5] = 0;\n    struct2[6] = 0;\n    set_to_zero(struct2 + 0x17, 0, 8);\n    undefined4 *struct3 = *(undefined4 **)(struct_ptr + 0xc);\n    struct2[7] = struct2;\n    struct2[8] = func_ptr2;\n    struct2[9] = var1;\n    struct2[10] = func_ptr1;\n    struct2[0xb] = label2;\n    *(undefined2 *)(struct3 + 3) = 0x12;\n    *(undefined2 *)((int)struct3 + 0xe) = 2;\n    *struct3 = 0;\n    struct3[1] = 0;\n    struct3[2] = 0;\n    struct3[0x19] = 0;\n    struct3[4] = 0;\n    struct3[5] = 0;\n    struct3[6] = 0;\n    set_to_zero(struct3 + 0x17, 0, 8);\n    struct3[7] = struct3;\n    struct3[8] = func_ptr2;\n    struct3[9] = var1;\n    struct3[10] = func_ptr1;\n    struct3[0xb] = label2;\n    *(undefined4 *)(struct_ptr + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_00083850",
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "initialize_struct_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_data_00081348",
                "param_1": "data_array",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "function_pointer"
            },
            "code": "void initialize_data_00081348(undefined4 *data_array, undefined4 param_2, undefined param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6)\n{\n  data_array[0] = PTR_PTR_FUN_000812b8_1_00081368;\n  data_array[1] = 0;\n  data_array[2] = 1000;\n  data_array[3] = param_4;\n  data_array[4] = param_5;\n  data_array[5] = param_6;\n  data_array[6] = param_2;\n  *(undefined *)(data_array + 7) = param_3;\n  data_array[8] = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_data_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_value_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param_4",
                "puVar1": "data_ptr",
                "iVar2": "result",
                "uVar3": "value"
            },
            "code": "int calculate_value_00081624(int index, int flag, int multiplier, undefined4 param_4)\n{\n  uint *data_ptr;\n  int result;\n  undefined4 value;\n  \n  data_ptr = DAT_0008167c;\n  value = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = calculate_result(*(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c, *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4), value, ((*DAT_0008167c / DAT_00081680) * multiplier) / 0x12,param_4);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) / ((ulonglong)*data_ptr / 1000));\n  }\n  return result;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_value_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "process_data_00080ec8",
                "param_1": "buffer_start",
                "param_2": "data_offset",
                "param_3": "data_length",
                "iVar1": "i",
                "processed_data_length": "processed_data_length"
            },
            "code": "uint process_data_00080ec8(undefined4 buffer_start, int data_offset, uint data_length) {\n  int i;\n  uint processed_data_length = 0;\n  for (i = 0; i < (int)data_length; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(data_offset + i);\n    processed_data_length++;\n  }\n  return processed_data_length & ~((int)processed_data_length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "process_data_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "calculate_sum_of_two_values_0008117a",
                "param_1": "value",
                "iVar1": "sum",
                "iVar2": "second_value",
                "FUN_0008113a": "get_first_value",
                "FUN_000810d8": "get_second_value"
            },
            "code": "int calculate_sum_of_two_values_0008117a(undefined4 value)\n{\n  int sum = get_first_value();\n  int second_value = get_second_value(value);\n  return sum + second_value;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_two_values_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "check_and_return_000801e0",
                "param_1": "device_status1",
                "param_2": "device_status2",
                "param_3": "device_mode1",
                "param_4": "device_mode2",
                "FUN_000813dc": "check_device_status",
                "FUN_00080f0c": "set_device_state",
                "FUN_000806a0": "set_device_mode",
                "FUN_00080164": "initialize_device",
                "do_nothing_00080f08": "wait_for_response",
                "PTR_DAT_00080244": "device_status_ptr",
                "PTR_DAT_00080248": "device_mode_ptr1",
                "PTR_DAT_0008024c": "device_mode_ptr2",
                "PTR_DAT_00080160": "device_response_ptr"
            },
            "code": "int check_and_return_000801e0(){\n    check_device_status(PTR_DAT_00080244, 0xe100, device_status1, device_status2, device_status2);\n    set_device_state(0xd, 1);\n    set_device_state(6, 1);\n    set_device_state(0x39, 0);\n    set_device_state(4, 0);\n    set_device_state(3, 0);\n    set_device_state(2, 0);\n    set_device_mode(PTR_DAT_00080248, 5);\n    set_device_mode(PTR_DAT_0008024c, 6);\n    initialize_device();\n    wait_for_response(1000);\n    if (*(int *)PTR_DAT_00080160 == 0) {\n        trigger_interrupt(0x3f);\n        return 1;\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0",
                "FUN_000813dc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_and_return_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_buffer_000811b0",
                "param_1": "buffer_address",
                "FUN_00081f00": "set_buffer",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n    set_buffer(buffer_address, 0, 128);\n    *(undefined4 *)(buffer_address + 128) = 0;\n    *(undefined4 *)(buffer_address + 132) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "call_function_with_data_000817f0",
                "param_1": "param",
                "FUNC_00081810": "function",
                "*DAT_000817fc": "data"
            },
            "code": "void call_function_with_*call_function_with_data_000817f0(void* *call_function_with_data_000817f0, int param)\n{\n  function(**call_function_with_data_000817f0, param);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "call_function_with_data_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_new_value_0008145c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "uint": "unsigned int"
            },
            "code": "int calculate_new_value_0008145c(int value1, int value2, int value3, int value4, int value5) {\n    int numerator = (value1 - value2) * (value5 - value4);\n    int denominator = value3 - value2;\n    int result = (uint)numerator / (uint)denominator + value4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_new_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "return_one_00080eba",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_00080eba() {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "return_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00081e34(piVar9,param_2);\n      }\n      FUN_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "counter"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int counter = *DAT_000811a8;\n  if ((counter != -1) && (--counter == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = counter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "PTR_DAT_00000050": "data[0x11]",
                "PTR_DAT_00000074": "data[0x19]",
                "PTR_DAT_00000070": "data[0x18]",
                "PTR_DAT_00000020": "data[8]",
                "PTR_DAT_00000024": "data[9]",
                "PTR_DAT_00000080": "data[0x20]",
                "PTR_DAT_00000014": "data[5]"
            },
            "code": "void set_values_000809e4(uint32_t *data, uint32_t value, uint32_t flags) {\n    bool is_negative = (int)(flags << 0x1f) < 0;\n    PTR_DAT_00000050 = value;\n    if (is_negative) {\n        PTR_DAT_00000074 = value;\n    }\n    else {\n        PTR_DAT_00000070 = value;\n    }\n    bool has_bit_10_set = (flags & 10) != 0;\n    if (has_bit_10_set) {\n        PTR_DAT_00000020 = value;\n    }\n    else {\n        PTR_DAT_00000024 = value;\n    }\n    if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n        PTR_DAT_00000080 = value;\n    }\n    PTR_DAT_00000014 = value;\n    *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "set_values_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "returnZero_00080ebe"
            },
            "code": "int returnZero_00080ebe() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "returnZero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "get_value_from_pointer_thunk_000816d8",
                "PTR_DAT_000816e0": "value_pointer"
            },
            "code": "int get_value_from_pointer_thunk_000816d8(){\n    int* PTR_DAT_000816e0 = (int*) PTR_DAT_000816e0;\n    return *PTR_DAT_000816e0;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "getValueFromPointer_000816d8",
                "PTR_DAT_000816e0": "pointerValue"
            },
            "code": "getValueFromPointer_000816d8() {\n    return *(undefined4 *)PTR_DAT_000816e0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "getValueFromPointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "validate_input_000815b8",
                "param_1": "input_string",
                "param_2": "default_string",
                "uVar1": "string_length",
                "iVar2": "is_valid"
            },
            "code": "int validate_input_000815b8(byte **input_string, byte *default_string) {\n  uint string_length;\n  int is_valid = 1;\n\n  if (input_string[2] == NULL) {\n    if (default_string == NULL) {\n      return is_valid;\n    }\n  }\n  else {\n    if (default_string != NULL) {\n      string_length = get_string_length(*input_string);\n      goto validate_string;\n    }\n    default_string = *input_string;\n  }\n  string_length = (uint)*default_string;\n\nvalidate_string:\n  is_valid = 1 - string_length;\n  if (string_length > 1) {\n    is_valid = 0;\n  }\n\n  return is_valid;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "validate_input_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "calculateAndUpdateTotalScore_00084220",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "score"
            },
            "code": "void calculateAndUpdateTotalScore_00084220(undefined4 input1, int input2)\n{\n  int score;\n  \n  score = calculateScore(input1,(int)*(short *)(input2 + 0xe));\n  if (score >= 0) {\n    *(int *)(input2 + 0x50) += score;\n    return;\n  }\n  *(ushort *)(input2 + 0xc) &= 0xefff;\n  return;\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "calculateAndUpdateTotalScore_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "reverse_and_return_pointer_00081472",
                "param_1": "pointer_to_reverse",
                "FUN_00081800": "reverse_list"
            },
            "code": "undefined4 *reverse_and_return_pointer_00081472(undefined4 *pointer_to_reverse)\n{\n  reverse_list(*pointer_to_reverse);\n  return pointer_to_reverse;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "reverse_and_return_pointer_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "add_to_buffer_000836ec",
                "uVar1": "value",
                "puVar2": "buffer_ptr",
                "iVar3": "buffer_size",
                "iVar4": "BUFFER_START",
                "UNRECOVERED_JUMPTABLE_00": "jump_to_next_instruction",
                "PTR_DAT_000836d0": "BUFFER_START"
            },
            "code": "void add_to_buffer_000836ec(void)\n{\n    int value = get_value();\n    int* buffer_ptr = *(int**)(PTR_DAT_000836d0 + 0x148);\n    if (buffer_ptr == NULL)\n    {\n        buffer_ptr = (int*)(PTR_DAT_000836d0 + 0x14c);\n        *(int**)(PTR_DAT_000836d0 + 0x148) = buffer_ptr;\n    }\n    int buffer_size = buffer_ptr[1];\n    if (buffer_size > 0x1f)\n    {\n        int* new_buffer = (int*) allocate_memory(400);\n        if (new_buffer == NULL)\n        {\n            error_handler();\n            return;\n        }\n        new_buffer[0] = *(int*)(PTR_DAT_000836d0 + 0x148);\n        new_buffer[1] = 0;\n        buffer_size = 0;\n        *(int**)(PTR_DAT_000836d0 + 0x148) = new_buffer;\n        new_buffer[0x62] = 0;\n        new_buffer[99] = 0;\n    }\n    buffer_ptr[1] = buffer_size + 1;\n    buffer_ptr[buffer_size + 2] = value;\n    jump_to_next_instruction();\n    return;\n}",
            "called": [
                "FUN_000841e4",
                "FUN_000817f0",
                "FUN_00080eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "add_to_buffer_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_and_call_function_00081750",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3_ptr",
                "param_4": "data4_ptr",
                "uStack_8": "temp_data3",
                "uStack_4": "temp_data4",
                "FUNC_0008289c": "call_function_with_data"
            },
            "code": "void process_data_and_call_function_00081750(int data1, int data2, int* data3_ptr, int* data4_ptr) {\n  int temp_data3 = *data3_ptr;\n  int temp_data4 = *data4_ptr;\n  call_function_with_data(data1, data2, &temp_data3);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "count_bytes_until_null_00082688",
                "param_1": "address",
                "iVar1": "byte_count",
                "puVar2": "data",
                "uVar3": "word",
                "bVar4": "is_null_byte"
            },
            "code": "int count_bytes_until_null_00082688(uint32_t address)\n{\n  int byte_count = 0;\n  uint32_t* data = (uint32_t*)(address & 0xfffffffc);\n  int misaligned_bytes = -(address & 3);\n  uint32_t word = *data;\n  if ((address & 3) != 0) {\n    word |= 0xffffffffU >> ((misaligned_bytes + 4U & 0x1f) << 3);\n  }\n  while (data++, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    byte_count += 4;\n    word = *data;\n  }\n  bool is_null_byte = (word & 0xff) == 0;\n  if (!is_null_byte) {\n    byte_count++;\n    is_null_byte = (word & 0xff00) == 0;\n  }\n  if (!is_null_byte) {\n    byte_count++;\n    is_null_byte = (word & 0xff0000) == 0;\n  }\n  if (!is_null_byte) {\n    byte_count++;\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "processResult_00084508",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "dataPtr",
                "iVar2": "status"
            },
            "code": "void processResult_00084508(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *dataPtr;\n  int status;\n  dataPtr = PTR_DAT_0008452c;\n  *(undefined4 *)PTR_DAT_0008452c = 0;\n  status = processData(arg1, arg2, arg3);\n  if ((status == -1) && (*(int *)dataPtr != 0)) {\n    *result = *(int *)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "processResult_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flag",
                "bVar1": "is_negative"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, unsigned int data_flag) {\n  bool is_negative = (int)(data_flag << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*data_ptr)(data_type, data_value, data_flag);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*data_ptr)(data_value, data_flag, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*data_ptr)(data_value, data_type == 5, (data_flag << 0x1d) >> 0x1f, data_flag & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000809be",
                "FUN_00080a0a",
                "FUN_000809e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_data_structures_0008089c",
                "param_1": "data_structure_1_start",
                "param_2": "data_structure_2_start",
                "param_3": "data_structure_3_start",
                "puVar1": "first_pointer",
                "puVar2": "second_pointer",
                "puVar3": "third_pointer",
                "puVar4": "fourth_pointer",
                "puVar5": "fifth_pointer",
                "puVar6": "sixth_pointer",
                "PTR_DAT_00080930": "data_structure_1_start",
                "PTR_DAT_00080934": "data_structure_2_start",
                "PTR_DAT_0008093c": "data_structure_4_start",
                "PTR_DAT_00080940": "data_structure_5_start",
                "DAT_00080938": "data_structure_5_size",
                "PTR_DAT_00080944": "data_structure_6_start",
                "PTR_DAT_00080948": "data_structure_8_start",
                "PTR_DAT_0008094c": "data_structure_9_start",
                "PTR_DAT_00080954": "data_structure_10_start",
                "DAT_00080950": "data_structure_10_size",
                "PTR_DAT_0008095c": "data_structure_11_start",
                "DAT_00080958": "data_structure_11_size",
                "PTR_DAT_00080964": "data_structure_12_start",
                "DAT_00080960": "data_structure_12_size",
                "PTR_DAT_00080968": "data_structure_3_start",
                "PTR_DAT_0008096c": "data_structure_7_start"
            },
            "code": "void initialize_data_structures_0008089c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n{\n  undefined *first_pointer;\n  undefined *second_pointer;\n  undefined *third_pointer;\n  undefined *fourth_pointer;\n  undefined *fifth_pointer;\n  undefined *sixth_pointer;\n\n  first_pointer = PTR_DAT_00080930;\n  second_pointer = PTR_DAT_00080934;\n  initialize_data_structure(first_pointer);\n  initialize_data_structure(second_pointer);\n  fifth_pointer = PTR_DAT_00080968;\n  third_pointer = PTR_DAT_0008093c;\n  initialize_data_structure_2(PTR_DAT_00080940, DAT_00080938, 8, 8, first_pointer, second_pointer, param_3);\n  first_pointer = PTR_DAT_00080944;\n  initialize_data_structure(fifth_pointer);\n  sixth_pointer = PTR_DAT_0008096c;\n  initialize_data_structure(third_pointer);\n  second_pointer = PTR_DAT_00080948;\n  initialize_data_structure(first_pointer);\n  fourth_pointer = PTR_DAT_0008094c;\n  initialize_data_structure(sixth_pointer);\n  initialize_data_structure(second_pointer);\n  initialize_data_structure(fourth_pointer);\n  copy_data_structure(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, fifth_pointer, sixth_pointer);\n  copy_data_structure(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, third_pointer, second_pointer);\n  copy_data_structure(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, first_pointer, fourth_pointer);\n  return;\n}",
            "called": [
                "FUN_00081348",
                "FUN_000811b0",
                "FUN_00081438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "uVar1": "data_processed"
            },
            "code": "void process_data_000810a6(int *data_ptr, int data_size, undefined4 param_3, undefined4 param_4) {\n  if (data_size != 0) {\n    int data_processed = allocate_memory(data_size);\n    (**(code **)(*data_ptr + 4))(data_ptr, data_size, data_processed, *(code **)(*data_ptr + 4), param_4);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810e8",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810c4"
            ],
            "imported": false,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 110435,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081560",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080f0c",
            "FUN_00083a74",
            "FUN_000844e0",
            "FUN_00083b10",
            "FUN_00080e80",
            "thunk_FUN_0008113a",
            "FUN_0008236c",
            "FUN_00080d62",
            "FUN_000842a4",
            "FUN_000814f6",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_000839b4",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00080eb0",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_00082824",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_000834f0",
            "FUN_000841e4",
            "FUN_0008113a",
            "FUN_0008400c",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_0008044c",
            "FUN_000810d8",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080d3e",
            "FUN_00081438",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000810e8",
            "FUN_00080d58",
            "FUN_00081480",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_00081800",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084484",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081496",
            "FUN_00084004",
            "FUN_00081014",
            "FUN_000816ec",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_000810c4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000810fc",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080774",
            "FUN_00080ec2",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_0008117a",
            "FUN_000801e0",
            "FUN_000811b0",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00084220",
            "FUN_00081472",
            "FUN_000836ec",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_00080a30",
            "FUN_0008089c",
            "FUN_000810a6"
        ]
    ],
    "locked_functions": []
}