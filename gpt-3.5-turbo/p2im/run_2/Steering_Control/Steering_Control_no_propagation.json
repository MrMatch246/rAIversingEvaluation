{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputParameter)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return inputParameter;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_devices_00080164",
            "code": "\nvoid initializeDevices_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_devices_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\nundefined8 initializeSystem_000801e0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    triggerInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "software_interrupt": "triggerInterrupt"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000806a0",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_module_00080250",
            "code": "\nvoid controlModule_00080250(void)\n\n{\n  undefined4 status;\n  int count;\n  undefined *ptr;\n  undefined data [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      status = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(status,1000,2000,0x28,0x96);\n      while (count = FUN_00081248(&DAT_20070be8), 0 < count) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = FUN_00081248(&DAT_20070be8);\n      if (0 < count) {\n        FUN_00081214(data,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,data);\n        FUN_00081472(data);\n        FUN_00081214(data,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,data);\n        FUN_00081472(data);\n        FUN_00081276(&DAT_20070be8);\n        count = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        status = FUN_000815de(&DAT_200708c8);\n        ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    status = FUN_000815de(&DAT_200708c8);\n    ptr = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(ptr,status);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_module_00080250",
                "uVar1": "status",
                "iVar2": "count",
                "puVar3": "ptr",
                "auStack_1c": "data"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000810c4",
                "FUN_00081472",
                "FUN_000815b8",
                "FUN_00081248",
                "FUN_000806f8",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_000810e8",
                "FUN_00080f08",
                "FUN_00081276",
                "FUN_00081560",
                "FUN_00081014",
                "FUN_00081624",
                "thunk_FUN_0008113a",
                "FUN_000815de",
                "FUN_0008117a",
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_channel_000803fc",
            "code": "\nvoid initializeChannel_000803fc(int channel,uint size,undefined4 param3,uint bitMask)\n\n{\n  undefined4 unaff_r4;\n  undefined4 in_lr;\n  undefined8 combined;\n  \n  combined = CONCAT44(size,channel);\n  FUN_00080aa8(param3);\n  FUN_00080b2c(channel,size,0xc002);\n  FUN_00080b90(channel,size,0xa41);\n  *(int *)((bitMask >> 5) * 4 + -0x1fff1f00) = 1 << (bitMask & 0x1f);\n  *(undefined4 *)(channel + size * 0x40 + 0x24) = 4;\n  if (2 < size) {\n    combined = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unaff_r4,in_lr);\n  }\n  *(undefined4 *)((int)combined + (int)((ulonglong)combined >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_channel_000803fc",
                "param_1": "channel",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "bitMask",
                "uVar1": "combined"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_flag_0008044c",
            "code": "\nvoid updateFlag_0008044c(int index,int data,int offset)\n\n{\n  uint threshold;\n  int offset2;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offset2 = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offset2 < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset2) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(offset2 + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  threshold = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offset2 = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offset2 < (int)threshold) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offset2) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset2) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(offset2 + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  threshold = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (threshold <= *(int *)(data + 0x10) + 4U) {\n    threshold = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = threshold;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_flag_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "threshold",
                "iVar2": "offset2"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_param_value_000805a8",
            "code": "\nvoid updateParamValue_000805a8(byte *output)\n\n{\n  char currentValue;\n  uint inputValue;\n  \n  inputValue = (uint)DAT_200708f0;\n  if (inputValue < 0x3c) {\n    currentValue = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = currentValue;\n    *(uint *)(&DAT_200708fc + inputValue * 8) =\n         (relArray[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_param_value_000805a8",
                "param_1": "output",
                "cVar1": "currentValue",
                "uVar2": "inputValue",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "decode_and_modify_byte_000806a0",
            "code": "\nbyte decodeAndModifyByte_000806a0(byte *inputByte,undefined4 param2)\n\n{\n  byte newByte;\n  undefined4 constant1;\n  uint divisionResult;\n  undefined4 constant2;\n  int counter;\n  uint inputValue;\n  \n  if (0x3b < *inputByte) goto LAB_00080660;\n  FUN_00080f0c(param2,1,0x220,*inputByte,0x960);\n  inputValue = (uint)*inputByte;\n  newByte = (&DAT_200708f8)[inputValue * 8];\n  inputByte[2] = 0;\n  divisionResult = inputValue / 0xc;\n  (&DAT_200708f8)[inputValue * 8] = newByte & 0xc0 | (byte)param2 & 0x3f;\n  inputByte[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + divisionResult * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (divisionResult == 0) {\n    constant1 = 0x40084000;\n    constant2 = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(constant1,divisionResult,constant2,constant2);\n  }\n  else {\n    if (divisionResult == 1) {\n      constant1 = 0x40084000;\n      constant2 = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (divisionResult == 2) {\n      constant1 = 0x40084000;\n      constant2 = 0x20;\n      goto LAB_0008064c;\n    }\n    if (divisionResult == 3) {\n      constant1 = 0x40080000;\n      divisionResult = 2;\n      constant2 = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (divisionResult == 4) {\n      constant1 = 0x40080000;\n      divisionResult = 0;\n      constant2 = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*inputByte * 8] = (&DAT_200708f8)[(uint)*inputByte * 8] | 0x40;\nLAB_00080660:\n  return *inputByte;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "decode_and_modify_byte_000806a0",
                "param_1": "inputByte",
                "param_2": "param2",
                "bVar1": "newByte",
                "uVar2": "constant1",
                "uVar3": "divisionResult",
                "uVar4": "constant2",
                "iVar5": "counter",
                "uVar6": "inputValue"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "process_data_000806f8",
            "code": "\nvoid processData_000806f8(byte *data,uint size)\n\n{\n  uint clampedSize;\n  \n  if ((int)size < 0x220) {\n    clampedSize = size;\n    if (0xb3 < (int)size) {\n      clampedSize = 0xb4;\n    }\n    size = FUN_0008145c(clampedSize & ~((int)clampedSize >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,size);\n  }\n  if (*data < 0x3c) {\n    clampedSize = (0x88 - (char)data[1]) * 4;\n    if (((int)(size + (0x88 - (char)data[1]) * -4) < 0 == SBORROW4(size,clampedSize)) &&\n       (clampedSize = (600 - (char)data[2]) * 4, (int)size <= (int)clampedSize)) {\n      clampedSize = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].offset / 1000000) * (clampedSize - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "clampedSize",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  iVar1 = 0;\n  do {\n    iVar2 = iVar1 + 1;\n    FUN_00081014(iVar1,0);\n    iVar1 = iVar2;\n  } while (iVar2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00080b98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080aa8",
                "FUN_00080d6a",
                "FUN_00080d62"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_components_0008089c",
            "code": "\nvoid initialize_components_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_components_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = FUN_00081248(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = FUN_00081248(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = FUN_00081248(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = FUN_00081248(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_data_000809be",
            "code": "\nvoid updateData_000809be(int dataPtr,undefined4 mode,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(dataPtr + 0x44) = newValue;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(dataPtr + 0x70) & *(uint *)(dataPtr + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(dataPtr + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(dataPtr + 0x70) = updatedValue;\nswitchD_000809c4_caseD_6:\n  *(uint *)(dataPtr + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "dataPtr",
                "param_2": "mode",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_000809e4",
            "code": "\nvoid setValues_000809e4(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (int)(flags << 0x1f) < 0;\n  array[0x11] = value;\n  if (isFlagSet) {\n    array[0x19] = value;\n  }\n  if (!isFlagSet) {\n    array[0x18] = value;\n  }\n  isFlagSet = (flags & 10) != 0;\n  if (isFlagSet) {\n    array[8] = value;\n  }\n  if (!isFlagSet) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_param_values_00080a0a",
            "code": "\nvoid setParamValues_00080a0a(undefined4 *paramArray,undefined4 value,int flag1,int flag2,int flag3)\n\n{\n  paramArray[0x11] = value;\n  if (flag3 == 0) {\n    paramArray[0x18] = value;\n  }\n  else {\n    paramArray[0x19] = value;\n  }\n  if (flag2 == 0) {\n    paramArray[0x15] = value;\n  }\n  else {\n    paramArray[0x14] = value;\n  }\n  if (flag1 == 0) {\n    paramArray[0xd] = value;\n  }\n  else {\n    paramArray[0xc] = value;\n  }\n  paramArray[4] = value;\n  *paramArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "paramArray",
                "param_2": "value",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_parameter_00080a30",
            "code": "\nundefined4 updateParameter_00080a30(int baseAddress,int option,undefined4 newValue,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    FUN_000809be(baseAddress,option,newValue);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(baseAddress + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(baseAddress + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(baseAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_000809e4(baseAddress,newValue,flag,0x809e5,baseAddress);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(baseAddress,newValue,option == 5,(flag << 0x1d) >> 0x1f,flag & 1,option,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_parameter_00080a30",
                "param_1": "baseAddress",
                "param_2": "option",
                "param_3": "newValue",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_intersection_00080a94",
            "code": "\nuint checkBitwiseIntersection_00080a94(int ptr,uint value)\n\n{\n  uint result;\n  \n  result = *(uint *)(ptr + 8) & value;\n  if (result != 0) {\n    if ((value & *(uint *)(ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_intersection_00080a94",
                "param_1": "ptr",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint bitIndex)\n\n{\n  uint bitMask;\n  \n  if (bitIndex < 0x2d) {\n    if (bitIndex < 0x20) {\n      bitMask = 1 << (bitIndex & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (bitIndex - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "bitIndex",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int iterationOffset;\n  int channelOffset;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  iterationOffset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  channelOffset = (int)combinedParams + iterationOffset;\n  *(undefined4 *)((int)combinedParams + iterationOffset) = 2;\n  *(undefined4 *)(channelOffset + 0x28) = 0xffffffff;\n  *(char **)(channelOffset + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "iterationOffset",
                "iVar2": "channelOffset",
                "uVar3": "combinedParams"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "set_param_value_00080b90",
            "code": "\nvoid setParamValue_00080b90(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array1[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "array1"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *threshold,uint dataSize,int someFactor,int otherFactor)\n\n{\n  uint numIterations;\n  uint index;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  numIterations = dataSize / (uint)(someFactor * 2);\n  if (dataSize == someFactor * 2 * numIterations) {\n    numIterations = numIterations - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(otherFactor * (int)(((ulonglong)dataSize / (ulonglong)((numIterations + 1) * 2)) / 1000000)) <=\n        thresholdValues[index]) {\n      threshold[1] = (index & 0xf) << 0x10 | (numIterations & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "threshold",
                "param_2": "dataSize",
                "param_3": "someFactor",
                "param_4": "otherFactor",
                "uVar1": "numIterations",
                "uVar2": "index",
                "local_58": "thresholdValues"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_flags_00080d30",
            "code": "\nvoid updateFlags_00080d30(int ptr,uint value,uint flag)\n\n{\n  *(uint *)(ptr + 4) = value | *(uint *)(ptr + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "combine_and_update_values_00080d3e",
            "code": "\nvoid combineAndUpdateValues_00080d3e(int baseAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value2 | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "combine_and_update_values_00080d3e",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_value_00080d58",
            "code": "\nvoid setBitValue_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_value_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_memory_00080d62",
            "code": "\nvoid initializeMemory_00080d62(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_memory_00080d62",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 parameterValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = parameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "parameterValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_default_00080e80",
            "code": "\nvoid initializeDefault_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_default_00080e80",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "calculate_sum_00080e88",
            "code": "\nint calculateSum_00080e88(int inputValue)\n\n{\n  int initialValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  initialValue = DAT_20071208;\n  DAT_20071208 = inputValue + DAT_20071208;\n  return initialValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "inputValue",
                "iVar1": "initialValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_return_value_00080eaa",
            "code": "\nundefined4 getReturnValue_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_return_value_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_value_00080eb0",
            "code": "\nundefined4 setMemoryValue_00080eb0(undefined4 value,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_value_00080eb0",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "initialize_application_00080eba",
            "code": "\nundefined4 initializeApplication_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "initialize_application_00080eba"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_default_value_00080ebe",
            "code": "\nundefined4 getDefaultValue_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_default_value_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nvoid initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2",
                "undefined4": "void"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 result,int source,uint length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return length & ~((int)length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "result",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,param3,param4,param4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_default_value_00080efe",
            "code": "\nuint32_t get_default_value_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_default_value_00080efe",
                "undefined4": "uint32_t"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_global_value_thunk_000816d8",
            "code": "\nundefined4 getGlobalValue_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_global_value_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "handle_data_00080f0c",
            "code": "\n\n\nint handleData_00080f0c(int dataIndex,int action)\n\n{\n  int result;\n  uint flag;\n  undefined4 flagType;\n  uint flagMask;\n  byte type;\n  byte dataType;\n  int index;\n  int ptr;\n  \n  result = dataIndex;\n  if ((&DAT_00084b50)[dataIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[dataIndex] & 0xf) == 4) {\n      result = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[dataIndex * 0x1c]);\n    }\n    dataType = (&DAT_20070e1c)[dataIndex];\n    type = dataType & 0xf;\n    if ((type < 3) && (dataType != 0)) {\n      if (type == 2) {\n        if (action == 0) {\n          return result;\n        }\n      }\n      else if (type == 1) {\n        if (action == 2) {\n          return result;\n        }\n      }\n      else if (type == 3) {\n        if (action == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (action != 1) {\nLAB_00080f68:\n      if (action == 0) {\n        result = dataIndex * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        dataType = (&DAT_20070e1c)[dataIndex] & 0xf0 | 2;\n      }\n      else {\n        if (action != 2) {\n          return result;\n        }\n        result = dataIndex * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        dataType = (&DAT_20070e1c)[dataIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[dataIndex] = dataType;\n      return result;\n    }\n    index = dataIndex * 0x1c;\n    ptr = *(int *)(&DAT_00084b44 + index);\n    if (dataType >> 4 == 0) {\n      flagType = 4;\n    }\n    else {\n      flagType = 5;\n    }\n    result = FUN_00080a30(ptr,flagType,*(undefined4 *)(&DAT_00084b48 + index),\n                         *(undefined4 *)(&DAT_00084b54 + index));\n    (&DAT_20070e1c)[dataIndex] = (&DAT_20070e1c)[dataIndex] & 0xf0 | 3;\n    if (*(int *)(ptr + 0x18) == -1) {\n      flag = *(uint *)(&DAT_00084b4c + index);\n      if (0x2c < flag) {\n        return 1;\n      }\n      if (flag < 0x20) {\n        flag = 1 << (flag & 0xff);\n        flagMask = _DAT_400e0618 & flag;\n        if (flagMask == flag) {\n          _DAT_400e0614 = flagMask;\n        }\n      }\n      else {\n        flag = 1 << (flag - 0x20 & 0xff);\n        flagMask = _DAT_400e0708 & flag;\n        if (flagMask == flag) {\n          _DAT_400e0704 = flagMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "handle_data_00080f0c",
                "param_1": "dataIndex",
                "param_2": "action",
                "iVar1": "result",
                "uVar2": "flag",
                "uVar3": "flagType",
                "uVar4": "flagMask",
                "bVar5": "type",
                "bVar6": "dataType",
                "iVar7": "index",
                "iVar8": "ptr"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_status_00081014",
            "code": "\nvoid updateStatus_00081014(int deviceIndex,int status,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int ptrData;\n  \n  if ((&DAT_00084b50)[deviceIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[deviceIndex] & 0xf) == 5) {\n      FUN_00080f0c(deviceIndex,1,param,5,deviceIndex,status,param);\n    }\n    (&DAT_20070e1c)[deviceIndex] = (&DAT_20070e1c)[deviceIndex] & 0xf | (byte)(status << 4);\n    ptrData = *(int *)(&DAT_00084b44 + deviceIndex * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + deviceIndex * 0x1c);\n    result = FUN_00080a94(ptrData,data);\n    if (result == 0) {\n      if (status != 0) {\n        *(undefined4 *)(ptrData + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptrData + 0x60) = data;\n      return;\n    }\n    FUN_00080a0a(ptrData,data,status,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_status_00081014",
                "param_1": "deviceIndex",
                "param_2": "status",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "ptrData"
            },
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "execute_function_000810a6",
            "code": "\nvoid executeFunction_000810a6(int *functionPointer,int inputValue,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (inputValue != 0) {\n    result = FUN_00082688(inputValue);\n    (**(code **)(*functionPointer + 4))(functionPointer,inputValue,result,*(code **)(*functionPointer + 4),param4);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "execute_function_000810a6",
                "param_1": "functionPointer",
                "param_2": "inputValue",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_startup_routine_000810c4",
            "code": "\nvoid executeStartupRoutine_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_startup_routine_000810c4"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "execute_function_000810d8",
            "code": "\nvoid executeFunction_000810d8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000810a6(arg1,&DAT_00085635,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "execute_function_000810d8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_number_to_base_000810fc",
            "code": "\nvoid convertNumberToBase_000810fc(undefined4 outputBuffer,uint inputNumber,uint base)\n\n{\n  char *outputPtr;\n  uint quotient;\n  char *currentDigit;\n  char digitCharacter;\n  uint remainder;\n  char convertedDigitsBuffer [5];\n  \n  convertedDigitsBuffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  outputPtr = convertedDigitsBuffer;\n  do {\n    currentDigit = outputPtr;\n    quotient = inputNumber / base;\n    remainder = inputNumber - base * quotient & 0xff;\n    digitCharacter = (char)remainder;\n    if (remainder < 10) {\n      digitCharacter = digitCharacter + '0';\n    }\n    else {\n      digitCharacter = digitCharacter + '7';\n    }\n    *currentDigit = digitCharacter;\n    inputNumber = quotient;\n    outputPtr = currentDigit + -1;\n  } while (quotient != 0);\n  FUN_000810a6(outputBuffer,currentDigit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_number_to_base_000810fc",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "base",
                "pcVar1": "outputPtr",
                "uVar2": "quotient",
                "pcVar3": "currentDigit",
                "cVar4": "digitCharacter",
                "uVar5": "remainder",
                "local_15": "convertedDigitsBuffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "parse_buffer_data_0008113a",
            "code": "\nint parseBufferData_0008113a(undefined4 *buffer,uint data,uint format,undefined4 arg)\n\n{\n  int result;\n  int negativeResult;\n  \n  if (format == 0) {\n    result = (**(code **)*buffer)(buffer,data & 0xff);\n    return result;\n  }\n  if (format == 10) {\n    format = 10;\n    if ((int)data < 0) {\n      result = FUN_000810cc(buffer,0x2d);\n      negativeResult = FUN_000810fc(buffer,-data,10);\n      return negativeResult + result;\n    }\n  }\n  else {\n    format = format & 0xff;\n  }\n  result = FUN_000810fc(buffer,data,format,arg);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "parse_buffer_data_0008113a",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "format",
                "param_4": "arg",
                "iVar1": "result",
                "iVar2": "negativeResult"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_number_base_thunk_0008113a",
            "code": "\nint convertNumberBase_thunk_0008113a(undefined4 *inputPtr,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negativeFlag;\n  \n  if (base == 0) {\n    result = (**(code **)*inputPtr)(inputPtr,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(inputPtr,0x2d);\n      negativeFlag = FUN_000810fc(inputPtr,-number,10);\n      return negativeFlag + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(inputPtr,number,base,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_number_base_thunk_0008113a",
                "param_1": "inputPtr",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negativeFlag"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "add_function_results_0008117a",
            "code": "\nint addFunctionResults_0008117a(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0008113a();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "add_function_results_0008117a",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_index_00081190",
            "code": "\nvoid execute_if_relocation_index_00081190(void)\n\n{\n  if ((relocation_table[6].relocation_info != 0xffffffff) &&\n     (relocation_table[6].relocation_info = relocation_table[6].relocation_info - 1,\n     relocation_table[6].relocation_info == 0)) {\n    (*(function_to_execute *)((int)&relocation_table[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_index_00081190",
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset",
                "code": "function_to_execute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  FUN_00081f00(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_buffer_000811ca",
            "code": "\nvoid updateBuffer_000811ca(int buffer,undefined data)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = data;\n    *(uint *)(buffer + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "data",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "calculate_new_value_000811e8",
            "code": "\nint calculateNewValue_000811e8(int *array)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  array[3] = result;\n  do {\n    result = (**(code **)(*array + 0xc))(array);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - array[3]) < (uint)array[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "calculate_new_value_000811e8",
                "param_1": "array",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid process_data_00081214(undefined4 input_1,undefined4 input_2,uint desired_value)\n\n{\n  uint result;\n  \n  FUN_000814f6(input_1,&DAT_00085637);\n  while ((result = FUN_000811e8(input_2), -1 < (int)result && (result != desired_value))) {\n    FUN_0008159e(input_1,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "desired_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extractByteFromBuffer_00081276(int buffer)\n\n{\n  byte extractedByte;\n  int bufferAddress;\n  \n  bufferAddress = *(int *)(buffer + 0x10);\n  if (*(int *)(bufferAddress + 0x80) != *(int *)(bufferAddress + 0x84)) {\n    extractedByte = *(byte *)(bufferAddress + *(int *)(bufferAddress + 0x84));\n    *(uint *)(bufferAddress + 0x84) = *(int *)(bufferAddress + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "buffer",
                "bVar1": "extractedByte",
                "iVar2": "bufferAddress"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataAddress,undefined4 newValue)\n\n{\n  int dataOffset;\n  uint newIndex;\n  \n  dataOffset = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataOffset + 0x84) == *(int *)(dataOffset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(dataOffset + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataOffset + 0x84) == newIndex);\n    *(char *)(dataOffset + *(int *)(dataOffset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "iVar1": "dataOffset",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_parameters_00081348",
            "code": "\nvoid initializeParameters_00081348(undefined4 *parameters,undefined4 param_2_value,undefined param_3_value,undefined4 param_4_value,\n                 undefined4 param_5_value,undefined4 param_6_value)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = param_2_value;\n  *parameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(parameters + 7) = param_3_value;\n  parameters[4] = param_5_value;\n  parameters[8] = param_4_value;\n  parameters[5] = param_6_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "param_5": "param_5_value",
                "param_6": "param_6_value"
            },
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "update_memory_settings_000813dc",
            "code": "\nvoid updateMemorySettings_000813dc(int settingAddress,uint pageSize)\n\n{\n  int variable1;\n  undefined4 *dataPointer;\n  \n  FUN_00080aa8(*(undefined4 *)(settingAddress + 0x20));\n  dataPointer = *(undefined4 **)(settingAddress + 0x18);\n  dataPointer[0x48] = 0x202;\n  *dataPointer = 0xac;\n  dataPointer[1] = 0x800;\n  dataPointer[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  dataPointer[3] = 0xffffffff;\n  dataPointer[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(settingAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(settingAddress + 0x1c) & 0x1f);\n  variable1 = *(int *)(settingAddress + 0x10);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  variable1 = *(int *)(settingAddress + 0x14);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  *dataPointer = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "update_memory_settings_000813dc",
                "param_1": "settingAddress",
                "param_2": "pageSize",
                "iVar1": "variable1",
                "puVar2": "dataPointer"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_function_00081438",
            "code": "\nundefined4 * initializeFunction_00081438(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  FUN_00081348();\n  *outputArray = &PTR_FUN_000812b8_1_00085680;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_function_00081438",
                "param_1": "outputArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolated_value_0008145c",
            "code": "\nint calculate_interpolated_value_0008145c(int start_value,int start_index,int end_index,int start_value_index,int end_value_index)\n\n{\n  return (uint)((start_value - start_index) * (end_value_index - start_value_index)) / (uint)(end_index - start_index) + start_value_index;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolated_value_0008145c",
                "param_1": "start_value",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "start_value_index",
                "param_5": "end_value_index"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "execute_function_and_return_parameter_00081472",
            "code": "\nundefined4 * executeFunctionAndReturnParameter_00081472(undefined4 *functionParameter)\n\n{\n  FUN_00081800(*functionParameter);\n  return functionParameter;\n}\n\n",
            "renaming": {
                "FUN_00081472": "execute_function_and_return_parameter_00081472",
                "param_1": "functionParameter"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_data_00081480",
            "code": "\nvoid resetData_00081480(int *dataPointer)\n\n{\n  if (*dataPointer != 0) {\n    FUN_00081800();\n  }\n  *dataPointer = 0;\n  dataPointer[2] = 0;\n  dataPointer[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_data_00081480",
                "param_1": "dataPointer",
                "param_1[2]": "dataPointer[2]",
                "param_1[1]": "dataPointer[1]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "perform_update_00081496",
            "code": "\nint performUpdate_00081496(int *result,int value,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_00081f9c(*result,value + 1,param3,param4,param4);\n  if (returnValue != 0) {\n    *result = returnValue;\n    result[1] = value;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081496": "perform_update_00081496",
                "param_1": "result",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_update_data_000814ae",
            "code": "\nundefined4 check_and_update_data_000814ae(int *data_ptr,uint threshold)\n\n{\n  int result;\n  \n  if ((*data_ptr == 0) || ((uint)data_ptr[1] < threshold)) {\n    result = FUN_00081496(data_ptr);\n    if (result == 0) {\n      return 0;\n    }\n    if (data_ptr[2] == 0) {\n      *(undefined *)*data_ptr = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_update_data_000814ae",
                "param_1": "data_ptr",
                "param_2": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "validate_and_process_000814d0",
            "code": "\nundefined4 * validate_and_process_000814d0(undefined4 *input_array,undefined4 param_value,undefined4 data_value)\n\n{\n  int validation_result;\n  \n  validation_result = FUN_000814ae(input_array,data_value);\n  if (validation_result == 0) {\n    FUN_00081480(input_array);\n  }\n  else {\n    input_array[2] = data_value;\n    FUN_000825cc(*input_array,param_value);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "validate_and_process_000814d0",
                "param_1": "input_array",
                "param_2": "param_value",
                "param_3": "data_value",
                "iVar1": "validation_result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_function_data_000814f6",
            "code": "\nundefined4 * initializeFunctionData_000814f6(undefined4 *outputArray,int inputValue)\n\n{\n  undefined4 result;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputValue != 0) {\n    result = FUN_00082688(inputValue);\n    FUN_000814d0(outputArray,inputValue,result);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_function_data_000814f6",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "uVar1": "result",
                "param_1[1]": "outputArray[1]",
                "param_1[2]": "outputArray[2]"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_params_0008151c",
            "code": "\nvoid updateParams_0008151c(int *srcParams,int *dstParams)\n\n{\n  if (*srcParams != 0) {\n    if ((*dstParams != 0) && ((uint)dstParams[2] <= (uint)srcParams[1])) {\n      FUN_000825cc();\n      srcParams[2] = dstParams[2];\n      goto skipModification;\n    }\n    FUN_00081800();\n  }\n  *srcParams = *dstParams;\n  srcParams[1] = dstParams[1];\n  srcParams[2] = dstParams[2];\n  *dstParams = 0;\n  dstParams[1] = 0;\nskipModification:\n  dstParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_params_0008151c",
                "param_1": "srcParams",
                "param_2": "dstParams",
                "LAB_00081558": "skipModification"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_execute_00081560",
            "code": "\nint check_and_execute_00081560(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    FUN_0008151c();\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_execute_00081560",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "check_and_update_value_00081570",
            "code": "\nundefined4 check_and_update_value_00081570(int *array,int size,int offset)\n\n{\n  int result;\n  int value;\n  \n  value = array[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(array,value + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*array + array[2],size);\n    array[2] = value + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "check_and_update_value_00081570",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "value"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "extract_and_process_data_0008159e",
            "code": "\nvoid extractAndProcessData_0008159e(undefined4 inputParam,undefined4 unusedParam,undefined4 dataParam)\n\n{\n  undefined4 tempVar;\n  undefined4 dataHolder;\n  \n  dataHolder = dataParam;\n  FUN_00081570(inputParam,&tempVar,1,0,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "extract_and_process_data_0008159e",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "param_3": "dataParam",
                "local_c": "tempVar",
                "uStack_8": "dataHolder"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_if_byte_is_zero_000815b8",
            "code": "\nint checkIfByteIsZero_000815b8(byte **array,byte *bytePtr)\n\n{\n  uint length;\n  int result;\n  \n  if (array[2] == (byte *)0x0) {\n    if (bytePtr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (bytePtr != (byte *)0x0) {\n      length = FUN_00082390(*array);\n      goto LAB_000815d4;\n    }\n    bytePtr = *array;\n  }\n  length = (uint)*bytePtr;\nLAB_000815d4:\n  result = 1 - length;\n  if (1 < length) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_if_byte_is_zero_000815b8",
                "param_1": "array",
                "param_2": "bytePtr",
                "uVar1": "length",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_integer_from_byte_array_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseIntegerFromByteArray_000815de(byte **byteArray)\n\n{\n  byte currentByte;\n  byte isNegative;\n  uint parsedInteger;\n  byte *currentPtr;\n  uint byteValue;\n  byte *nextPtr;\n  int tempVar;\n  int signCheck;\n  uint maxValue;\n  uint minValue;\n  \n  currentPtr = *byteArray;\n  if (*byteArray == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    nextPtr = currentPtr;\n    currentPtr = nextPtr + 1;\n    byteValue = (uint)*nextPtr;\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    isNegative = currentByte & 8;\n  } while ((currentByte & 8) != 0);\n  if (byteValue == 0x2d) {\n    currentPtr = nextPtr + 2;\n    byteValue = (uint)nextPtr[1];\n    isNegative = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)nextPtr[1];\n    currentPtr = nextPtr + 2;\n  }\n  if (isNegative == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / 10;\n  signCheck = 0;\n  parsedInteger = 0;\n  do {\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((currentByte & 4) == 0) {\n      if ((currentByte & 3) == 0) {\nLAB_0008277e:\n        if (signCheck == -1) {\n          if (isNegative == 0) {\n            parsedInteger = 0x7fffffff;\n          }\n          else {\n            parsedInteger = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          parsedInteger = -parsedInteger;\n        }\n        return parsedInteger;\n      }\n      if ((currentByte & 3) == 1) {\n        tempVar = 0x37;\n      }\n      else {\n        tempVar = 0x57;\n      }\n      tempVar = byteValue - tempVar;\n    }\n    else {\n      tempVar = byteValue - 0x30;\n    }\n    if (9 < tempVar) goto LAB_0008277e;\n    if (signCheck != -1) {\n      if ((maxValue <= parsedInteger && parsedInteger != maxValue) || ((parsedInteger == maxValue && ((int)(minValue % 10) < tempVar))))\n      {\n        signCheck = -1;\n      }\n      else {\n        parsedInteger = parsedInteger * 10 + tempVar;\n        signCheck = 1;\n      }\n    }\n    byteValue = (uint)*currentPtr;\n    currentPtr = currentPtr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_integer_from_byte_array_000815de",
                "param_1": "byteArray",
                "bVar1": "currentByte",
                "bVar2": "isNegative",
                "uVar3": "parsedInteger",
                "pbVar4": "currentPtr",
                "uVar5": "byteValue",
                "pbVar6": "nextPtr",
                "iVar7": "tempVar",
                "iVar8": "signCheck",
                "uVar9": "maxValue",
                "uVar10": "minValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "execute_loop_000815ec",
            "code": "\nvoid executeLoop_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "execute_loop_000815ec"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int condition,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (condition == 0) {\n    value = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((array[6].r_offset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)array[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "condition",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_bit_pattern_00081684",
            "code": "\nint check_bit_pattern_00081684(uint *ptr_uint_array,uint bit_mask,uint expected_value,int num_elements)\n\n{\n  int result;\n  \n  do {\n    if ((*ptr_uint_array & bit_mask) != expected_value) {\n      do {\n        if ((*ptr_uint_array & bit_mask) == expected_value) {\n          result = 0;\n          do {\n            if ((*ptr_uint_array & bit_mask) != expected_value) {\n              return result;\n            }\n            result = result + 1;\n          } while (num_elements != result);\n          return 0;\n        }\n        num_elements = num_elements + -1;\n      } while (num_elements != 0);\n      return 0;\n    }\n    num_elements = num_elements + -1;\n  } while (num_elements != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "param_1": "ptr_uint_array",
                "param_2": "bit_mask",
                "param_3": "expected_value",
                "param_4": "num_elements",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_data_000816d8",
            "code": "\nundefined4 getGlobalData_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_data_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_parameters_000816ec",
            "code": "\nvoid updateParameters_000816ec(dword value1,dword value2,dword value3)\n\n{\n  dword *pointer;\n  uint index;\n  uint flag;\n  code *jumpTable;\n  \n  if (relArray[48].r_offset == 0) {\n    relArray[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relArray[48].r_offset + 4);\n  pointer = (dword *)relArray[48].r_offset;\n  if (0x1f < (int)index) {\n    pointer = (dword *)FUN_000817f0(400);\n    if (pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    *pointer = relArray[48].r_offset;\n    pointer[1] = 0;\n    index = 0;\n    relArray[48].r_offset = (dword)pointer;\n    pointer[0x62] = 0;\n    pointer[99] = 0;\n  }\n  flag = 1 << (index & 0xff);\n  pointer[index + 0x22] = value1;\n  pointer[0x62] = pointer[0x62] | flag;\n  pointer[index + 0x42] = value3;\n  pointer[99] = flag | pointer[99];\n  pointer[1] = index + 1;\n  pointer[index + 2] = value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_parameters_000816ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "pdVar1": "pointer",
                "uVar2": "index",
                "uVar3": "flag",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failure_message_000816f8",
            "code": "\nvoid printAssertionFailureMessage_000816f8(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 filePointer;\n  undefined4 functionPointer;\n  char *messagePrefix;\n  undefined8 result;\n  \n  filePointer = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  functionPointer = function;\n  messagePrefix = \", function: \";\n  do {\n    function = file;\n    FUN_00081750(filePointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionPointer,file,line,\n                 messagePrefix,assertion);\n    result = FUN_000836ec();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    filePointer = (undefined4)result;\nLAB_0008171c:\n    assertion = \"\";\n    functionPointer = function;\n    messagePrefix = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failure_message_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "filePointer",
                "uVar2": "functionPointer",
                "pcVar3": "messagePrefix",
                "uVar4": "result"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "update_relocation_data_00081750",
            "code": "\nvoid updateRelocationData_00081750(undefined4 offset,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 updatedValue1;\n  undefined4 updatedValue2;\n  \n  updatedValue1 = value2;\n  updatedValue2 = value3;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,value1,&updatedValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "update_relocation_data_00081750",
                "param_1": "offset",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uStack_8": "updatedValue1",
                "uStack_4": "updatedValue2"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_four_function_pointers_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFourFunctionPointers_00081778(void)\n\n{\n  int counter;\n  code **functionPointerArray;\n  \n  FUNC_00085844();\n  functionPointerArray = (code **)0x8584c;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_four_function_pointers_00081778",
                "iVar1": "counter",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "execute_relocation_000817c8",
            "code": "\nvoid executeRelocation_000817c8(undefined4 baseAddress,undefined4 address1,undefined4 address2,undefined4 address3)\n\n{\n  undefined4 newAddress1;\n  undefined4 newAddress2;\n  undefined4 newAddress3;\n  \n  newAddress1 = address1;\n  newAddress2 = address2;\n  newAddress3 = address3;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),baseAddress,&newAddress1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "execute_relocation_000817c8",
                "param_1": "baseAddress",
                "param_2": "address1",
                "param_3": "address2",
                "param_4": "address3",
                "uStack_c": "newAddress1",
                "uStack_8": "newAddress2",
                "uStack_4": "newAddress3"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "execute_relocation_000817f0",
            "code": "\nvoid executeRelocation_000817f0(undefined4 parameter)\n\n{\n  FUN_00081810(relocationArray[140].r_offset,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "execute_relocation_000817f0",
                "param_1": "parameter",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "execute_relocation_00081800",
            "code": "\nvoid executeRelocation_00081800(undefined4 ptrToData)\n\n{\n  FUN_00083b10(relocationTable[140].r_offset,ptrToData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "execute_relocation_00081800",
                "param_1": "ptrToData",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081472",
                "FUN_00081480"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_block_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_00081810(undefined4 *output_pointer,uint size)\n\n{\n  dword index;\n  int temp;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  dword current_offset;\n  uint temp6;\n  int temp7;\n  undefined *ptr;\n  dword temp_offset;\n  dword temp_offset2;\n  int temp_index;\n  dword *temp_ptr;\n  uint total_size;\n  undefined *temp_ptr2;\n  dword *temp_ptr3;\n  uint temp_size;\n  \n  if (size + 0xb < 0x17) {\n    total_size = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    total_size = size + 0xb & 0xfffffff8;\n    if (((int)total_size < 0) || (total_size < size)) {\nLAB_00081876:\n      *output_pointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(output_pointer);\n  index = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (total_size < 0x1f8) {\n    temp_index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + total_size);\n    if ((temp_index != total_size + 0x20070464) ||\n       (temp = temp_index + 8, temp_index = *(int *)(temp_index + 0x14), temp != temp_index)) {\n      temp4 = *(int *)(temp_index + 0xc);\n      temp7 = (*(uint *)(temp_index + 4) & 0xfffffffc) + temp_index;\n      total_size = *(uint *)(temp7 + 4);\n      temp = *(int *)(temp_index + 8);\n      *(int *)(temp + 0xc) = temp4;\n      *(int *)(temp4 + 8) = temp;\n      *(uint *)(temp7 + 4) = total_size | 1;\n      FUNC_00081f98(output_pointer);\n      return (int *)(temp_index + 8);\n    }\n    temp_size = (total_size >> 3) + 2;\n  }\n  else {\n    temp_size = total_size >> 9;\n    if (temp_size == 0) {\n      temp = 0x7e;\n      temp_index = 0x3f;\n    }\n    else if (temp_size < 5) {\n      temp_index = (total_size >> 6) + 0x38;\n      temp = temp_index * 2;\n    }\n    else if (temp_size < 0x15) {\n      temp_index = temp_size + 0x5b;\n      temp = temp_index * 2;\n    }\n    else if (temp_size < 0x55) {\n      temp_index = (total_size >> 0xc) + 0x6e;\n      temp = temp_index * 2;\n    }\n    else if (temp_size < 0x155) {\n      temp_index = (total_size >> 0xf) + 0x77;\n      temp = temp_index * 2;\n    }\n    else if (temp_size < 0x555) {\n      temp_index = (total_size >> 0x12) + 0x7c;\n      temp = temp_index * 2;\n    }\n    else {\n      temp = 0xfc;\n      temp_index = 0x7e;\n    }\n    for (current_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp]; temp * 4 + 0x20070464U != current_offset\n        ; current_offset = *(dword *)(current_offset + 0xc)) {\n      temp_size = *(uint *)(current_offset + 4) & 0xfffffffc;\n      temp4 = temp_size - total_size;\n      if (0xf < temp4) {\n        temp_index = temp_index + -1;\n        break;\n      }\n      if (-1 < temp4) {\n        temp = temp_size + current_offset;\n        total_size = *(uint *)(temp + 4);\n        temp4 = *(int *)(current_offset + 0xc);\n        temp_index = *(int *)(current_offset + 8);\n        *(int *)(temp_index + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp_index;\n        *(uint *)(temp + 4) = total_size | 1;\n        FUNC_00081f98(output_pointer);\n        return (int *)(current_offset + 8);\n      }\n    }\n    temp_size = temp_index + 1;\n  }\n  current_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp3 = temp2 & 0xfffffffc;\n    temp5 = temp3 - total_size;\n    if (0xf < (int)temp5) {\n      current_offset = total_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = total_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = current_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = current_offset;\n      *(undefined4 *)(current_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_offset + 8) = 0x2007046c;\n      *(uint *)(current_offset + 4) = temp5 | 1;\n      *(uint *)(current_offset + temp5) = temp5;\n      FUNC_00081f98(output_pointer);\n      return (int *)(index + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp5) {\n      *(uint *)(temp3 + index + 4) = *(uint *)(temp3 + index + 4) | 1;\n      FUNC_00081f98(output_pointer);\n      return (int *)(index + 8);\n    }\n    if (temp3 < 0x200) {\n      temp3 = temp2 & 0xfffffff8;\n      temp_index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3);\n      current_offset = 1 << ((int)(temp2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(index + 8) = temp_index;\n      *(uint *)(index + 0xc) = temp3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = current_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3) = index;\n      *(dword *)(temp_index + 0xc) = index;\n    }\n    else {\n      temp5 = temp2 >> 9;\n      if (temp5 < 5) {\n        temp = (temp2 >> 6) + 0x38;\n        temp_index = temp * 2;\n      }\n      else if (temp5 < 0x15) {\n        temp = temp5 + 0x5b;\n        temp_index = temp * 2;\n      }\n      else if (temp5 < 0x55) {\n        temp = (temp2 >> 0xc) + 0x6e;\n        temp_index = temp * 2;\n      }\n      else if (temp5 < 0x155) {\n        temp = (temp2 >> 0xf) + 0x77;\n        temp_index = temp * 2;\n      }\n      else if (temp5 < 0x555) {\n        temp = (temp2 >> 0x12) + 0x7c;\n        temp_index = temp * 2;\n      }\n      else {\n        temp_index = 0xfc;\n        temp = 0x7e;\n      }\n      current_offset = temp_index * 4 + 0x20070464;\n      temp_offset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp_index];\n      if (temp_offset == current_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp >> 2 & 0xffU);\n        temp_offset2 = temp_offset;\n      }\n      else {\n        do {\n          temp_offset2 = temp_offset;\n          if ((*(uint *)(temp_offset + 4) & 0xfffffffc) <= temp3) break;\n          temp_offset = *(dword *)(temp_offset + 8);\n          temp_offset2 = temp_offset;\n        } while (current_offset != temp_offset);\n        temp_offset = *(dword *)(temp_offset2 + 0xc);\n      }\n      current_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(index + 0xc) = temp_offset;\n      *(dword *)(index + 8) = temp_offset2;\n      *(dword *)(temp_offset + 8) = index;\n      *(dword *)(temp_offset2 + 0xc) = index;\n    }\n  }\n  index = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp2 = 1 << ((int)temp_size >> 2 & 0xffU);\n  if (temp2 <= current_offset) {\n    if ((current_offset & temp2) == 0) {\n      temp_size = temp_size & 0xfffffffc;\n      do {\n        temp2 = temp2 << 1;\n        temp_size = temp_size + 4;\n      } while ((current_offset & temp2) == 0);\n    }\n    do {\n      temp_ptr3 = &Elf32_Rel_ARRAY_20070000[temp_size + 0x8c].r_info;\n      temp_ptr = temp_ptr3;\n      temp3 = temp_size;\n      do {\n        for (ptr = (undefined *)temp_ptr[3]; temp_ptr != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          temp5 = *(uint *)(ptr + 4) & 0xfffffffc;\n          temp6 = temp5 - total_size;\n          if (0xf < (int)temp6) {\n            temp = *(int *)(ptr + 8);\n            temp_index = *(int *)(ptr + 0xc);\n            temp_ptr2 = ptr + total_size;\n            *(uint *)(ptr + 4) = total_size | 1;\n            *(int *)(temp + 0xc) = temp_index;\n            *(int *)(temp_index + 8) = temp;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp_ptr2;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp_ptr2;\n            *(undefined4 *)(temp_ptr2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr2 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr2 + 4) = temp6 | 1;\n            *(uint *)(temp_ptr2 + temp6) = temp6;\n            FUNC_00081f98(output_pointer);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)temp6) {\n            temp_index = *(int *)(ptr + 8);\n            temp = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + temp5 + 4) = *(uint *)(ptr + temp5 + 4) | 1;\n            *(int *)(temp_index + 0xc) = temp;\n            *(int *)(temp + 8) = temp_index;\n            FUNC_00081f98(output_pointer);\n            return (int *)(ptr + 8);\n          }\n        }\n        temp3 = temp3 + 1;\n        temp_ptr = temp_ptr + 2;\n      } while ((temp3 & 3) != 0);\n      do {\n        temp5 = temp_size & 3;\n        ptr = (undefined *)(temp_ptr3 + -2);\n        temp_size = temp_size - 1;\n        if (temp5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp2;\n          break;\n        }\n        temp_ptr3 = (dword *)*temp_ptr3;\n      } while (temp_ptr3 == (dword *)ptr);\n      temp2 = temp2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp2 &&\n           temp2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp_size = temp3, temp2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp2) == 0; temp2 = temp2 << 1) {\n        temp_size = temp_size + 4;\n      }\n    } while( true );\n  }\n  temp_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((total_size <= temp_size) &&\n     (temp2 = temp_size - total_size, current_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp2))\n  goto LAB_00081b1a;\n  temp2 = Elf32_Rel_ARRAY_20070000[141].r_info + temp_size;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp3 = total_size + DAT_20071218 + 0x10;\n  }\n  else {\n    temp3 = total_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  current_offset = FUN_0008236c(output_pointer,temp3);\n  if ((current_offset == 0xffffffff) || ((current_offset < temp2 && (index != 0x20070464)))) {\n    temp_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp5 = DAT_2007121c + temp3;\n    DAT_2007121c = temp5;\n    if ((temp2 == current_offset) && ((temp2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 + temp_size | 1;\n    }\n    else {\n      temp_offset = current_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp_offset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp5 + (current_offset - temp2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp_offset;\n      temp2 = current_offset & 7;\n      if (temp2 == 0) {\n        temp_index = 0x1000;\n      }\n      else {\n        current_offset = current_offset + (8 - temp2);\n        temp_index = 0x1008 - temp2;\n      }\n      temp_index = temp_index - (temp3 + current_offset & 0xfff);\n      temp = FUN_0008236c(output_pointer,temp_index);\n      if (temp == -1) {\n        temp2 = 1;\n        temp_index = 0;\n      }\n      else {\n        temp2 = (temp - current_offset) + temp_index | 1;\n      }\n      temp5 = DAT_2007121c + temp_index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = current_offset;\n      DAT_2007121c = temp5;\n      *(uint *)(current_offset + 4) = temp2;\n      if (index != 0x20070464) {\n        if (temp_size < 0x10) {\n          *(undefined4 *)(current_offset + 4) = 1;\n          temp_size = 0;\n          goto LAB_00081b04;\n        }\n        temp_size = temp_size - 0xc & 0xfffffff8;\n        *(uint *)(index + 4) = temp_size | *(uint *)(index + 4) & 1;\n        *(undefined4 *)(index + temp_size + 4) = 5;\n        *(undefined4 *)(index + temp_size + 8) = 5;\n        if (0xf < temp_size) {\n          FUN_00083b10(output_pointer,index + 8);\n          temp5 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp5) {\n      DAT_20071214 = temp5;\n    }\n    if (DAT_20071210 < temp5) {\n      DAT_20071210 = temp5;\n    }\n    temp_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp2 = temp_size - total_size;\n  if ((temp_size < total_size) || ((int)temp2 < 0x10)) {\n    FUNC_00081f98(output_pointer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = total_size + current_offset;\n  *(uint *)(current_offset + 4) = total_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp2 | 1;\n  FUNC_00081f98(output_pointer);\n  return (int *)(current_offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_block_00081810",
                "param_1": "output_pointer",
                "param_2": "size",
                "dVar1": "index",
                "iVar2": "temp",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "dVar7": "current_offset",
                "uVar8": "temp6",
                "iVar9": "temp7",
                "puVar10": "ptr",
                "dVar11": "temp_offset",
                "dVar12": "temp_offset2",
                "iVar13": "temp_index",
                "pdVar14": "temp_ptr",
                "uVar15": "total_size",
                "puVar16": "temp_ptr2",
                "pdVar17": "temp_ptr3",
                "uVar18": "temp_size"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "decompiled_function_00081d48",
            "code": "\nundefined4 * decompiledFunction_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destinationPtr;\n  undefined4 *destPtr;\n  undefined4 *sourcePtr;\n  uint offset;\n  uint remainingSize;\n  bool hasRemainingSize;\n  \n  destPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remainingSize = size - 4;\n      if (3 < size) {\n        do {\n          destinationPtr = source;\n          sourcePtr = destPtr;\n          hasRemainingSize = remainingSize != 0;\n          remainingSize = remainingSize - 1;\n          *(undefined *)sourcePtr = *(undefined *)destinationPtr;\n          destPtr = (undefined4 *)((int)sourcePtr + 1);\n          source = (undefined4 *)((int)destinationPtr + 1);\n        } while (hasRemainingSize);\n        *(undefined *)(undefined4 *)((int)sourcePtr + 1) =\n             *(undefined *)(undefined4 *)((int)destinationPtr + 1);\n        *(undefined *)((int)sourcePtr + 2) = *(undefined *)((int)destinationPtr + 2);\n        *(undefined *)((int)sourcePtr + 3) = *(undefined *)((int)destinationPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingSize = 4 - ((uint)destination & 3);\n      size = size - remainingSize;\n      destinationPtr = destination;\n      sourcePtr = source;\n      if (((uint)destination & 1) != 0) {\n        sourcePtr = (undefined4 *)((int)source + 1);\n        destinationPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtr = destinationPtr;\n      source = sourcePtr;\n      if ((remainingSize & 2) != 0) {\n        source = (undefined4 *)((int)sourcePtr + 2);\n        destPtr = (undefined4 *)((int)destinationPtr + 2);\n        *(undefined2 *)destinationPtr = *(undefined2 *)sourcePtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtr = *source;\n    destPtr[1] = source[1];\n    destPtr[2] = source[2];\n    destPtr[3] = source[3];\n    destPtr[4] = source[4];\n    destPtr[5] = source[5];\n    destPtr[6] = source[6];\n    destPtr[7] = source[7];\n    destPtr[8] = source[8];\n    destPtr[9] = source[9];\n    destPtr[10] = source[10];\n    destPtr[0xb] = source[0xb];\n    destPtr[0xc] = source[0xc];\n    destPtr[0xd] = source[0xd];\n    destPtr[0xe] = source[0xe];\n    destPtr[0xf] = source[0xf];\n    destPtr = destPtr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  offset = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtr = *source;\n      destPtr[1] = source[1];\n      destPtr[2] = source[2];\n      destPtr[3] = source[3];\n      destPtr = destPtr + 4;\n      source = source + 4;\n      hasRemainingSize = 0xf < offset;\n      offset = offset - 0x10;\n    } while (hasRemainingSize);\n  }\n  remainingSize = offset + 0xc;\n  sourcePtr = destPtr;\n  destinationPtr = source;\n  if (0xfffffff3 < offset) {\n    do {\n      source = destinationPtr + 1;\n      *sourcePtr = *destinationPtr;\n      hasRemainingSize = 3 < remainingSize;\n      remainingSize = remainingSize - 4;\n      destPtr = sourcePtr + 1;\n      sourcePtr = sourcePtr + 1;\n      destinationPtr = source;\n    } while (hasRemainingSize);\n  }\nLAB_00081dcc:\n  if (remainingSize + 4 != 0) {\n    destinationPtr = destPtr;\n    sourcePtr = source;\n    if ((remainingSize & 1) != 0) {\n      sourcePtr = (undefined4 *)((int)source + 1);\n      destinationPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = *(undefined *)source;\n    }\n    if ((remainingSize + 4 & 2) != 0) {\n      *(undefined2 *)destinationPtr = *(undefined2 *)sourcePtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "decompiled_function_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destinationPtr",
                "puVar2": "destPtr",
                "puVar3": "sourcePtr",
                "uVar4": "offset",
                "uVar5": "remainingSize",
                "bVar6": "hasRemainingSize"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int count;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp_ptr2;\n  uint remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp_ptr2 = (undefined *)((int)dest + size);\n    count = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        count = count + -1;\n        temp_ptr2 = temp_ptr2 + -1;\n        *temp_ptr2 = *(undefined *)temp_ptr;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    count = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + count * 4;\n    dest = dest + count * 4;\n    temp_size = remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      count = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + count);\n      src = (undefined4 *)((int)src + count);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "count",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "temp_size",
                "puVar6": "temp_ptr2",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value_replicated;\n  uint size_cpy;\n  bool is_size_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_size_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_size_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_size_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_replicated = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    size_cpy = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      size_cpy = size - 0x10;\n      do {\n        *dest_ptr = value_replicated;\n        dest_ptr[1] = value_replicated;\n        dest_ptr[2] = value_replicated;\n        dest_ptr[3] = value_replicated;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size_cpy & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((size_cpy >> 4) + 1) * 4;\n      size_cpy = size;\n      dest_ptr = dest;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *dest = value_replicated;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (size_cpy - 4 & 0xfffffffc) + 4);\n    size = size_cpy & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value_replicated",
                "uVar4": "size_cpy",
                "bVar5": "is_size_zero"
            },
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "apply_relocation_00081f9c",
            "code": "\nvoid applyRelocation_00081f9c(undefined4 arg1,undefined4 arg2)\n\n{\n  FUN_00081fac(Elf32_Rel_ARRAY_20070000[140].r_offset,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "apply_relocation_00081f9c",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "rearrange_memory_blocks_00081fac",
            "code": "\nint * rearrangeMemoryBlocks_00081fac(undefined4 *param_ptr,int *memory_blocks,uint block_count)\n\n{\n  dword temp_var1;\n  int *result;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_ptr1;\n  uint temp_var6;\n  uint temp_var7;\n  int *temp_ptr2;\n  \n  if (memory_blocks == (int *)0x0) {\n    result = (int *)FUN_00081810(param_ptr,block_count);\n    return result;\n  }\n  FUNC_00081f94();\n  temp_var4 = memory_blocks[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  result = memory_blocks + -2;\n  if (block_count + 0xb < 0x17) {\n    temp_var7 = 0x10;\n  }\n  else {\n    temp_var7 = block_count + 0xb & 0xfffffff8;\n    if ((int)temp_var7 < 0) goto INVALID_SIZE;\n  }\n  if (temp_var7 < block_count) {\nINVALID_SIZE:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var6 < (int)temp_var7) {\n    temp_var1 = (int)result + temp_var6;\n    if (rel_array[141].r_info == temp_var1) {\n      temp_var2 = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n      temp_var1 = rel_array[141].r_info;\n      if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var6)) {\n        rel_array[141].r_info = (int)result + temp_var7;\n        *(uint *)(rel_array[141].r_info + 4) = (temp_var2 + temp_var6) - temp_var7 | 1;\n        memory_blocks[-1] = temp_var7 | memory_blocks[-1] & 1U;\n        FUNC_00081f98(param_ptr);\n        return memory_blocks;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)temp_var7 <= (int)(temp_var2 + temp_var6)) {\n        temp_var5 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var2 + temp_var6;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_ptr2 = (int *)((int)result - memory_blocks[-2]);\n      temp_var4 = (temp_ptr2[1] & 0xfffffffcU) + temp_var6;\n      if (temp_var1 != 0) {\n        if (temp_var1 == rel_array[141].r_info) {\n          if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var4)) {\n            result = temp_ptr2 + 2;\n            temp_var3 = *result;\n            temp_var5 = temp_ptr2[3];\n            temp_var6 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var6 < 0x25) {\n              temp_ptr1 = result;\n              if (0x13 < temp_var6) {\n                temp_ptr2[2] = *memory_blocks;\n                temp_ptr2[3] = memory_blocks[1];\n                if (temp_var6 < 0x1c) {\n                  memory_blocks = memory_blocks + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_blocks[2];\n                  temp_ptr2[5] = memory_blocks[3];\n                  if (temp_var6 == 0x24) {\n                    temp_ptr2[6] = memory_blocks[4];\n                    temp_ptr1 = memory_blocks + 5;\n                    memory_blocks = memory_blocks + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_blocks = memory_blocks + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *memory_blocks;\n              temp_ptr1[1] = memory_blocks[1];\n              temp_ptr1[2] = memory_blocks[2];\n            }\n            else {\n              FUN_00081e34(result,memory_blocks);\n            }\n            rel_array[141].r_info = (int)temp_ptr2 + temp_var7;\n            *(uint *)(rel_array[141].r_info + 4) = (temp_var2 + temp_var4) - temp_var7 | 1;\n            temp_ptr2[1] = temp_var7 | temp_ptr2[1] & 1U;\n            FUNC_00081f98(param_ptr);\n            return result;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + temp_var4;\n          if ((int)temp_var7 <= (int)temp_var2) {\n            temp_var5 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp_var3 = *temp_ptr1;\n            temp_var5 = temp_ptr2[3];\n            temp_var4 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_var2;\n            if (temp_var4 < 0x25) {\n              result = temp_ptr1;\n              if (0x13 < temp_var4) {\n                temp_ptr2[2] = *memory_blocks;\n                temp_ptr2[3] = memory_blocks[1];\n                if (temp_var4 < 0x1c) {\n                  memory_blocks = memory_blocks + 2;\n                  result = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_blocks[2];\n                  temp_ptr2[5] = memory_blocks[3];\n                  if (temp_var4 == 0x24) {\n                    temp_ptr2[6] = memory_blocks[4];\n                    result = memory_blocks + 5;\n                    memory_blocks = memory_blocks + 6;\n                    temp_ptr2[7] = *result;\n                    result = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_blocks = memory_blocks + 4;\n                    result = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *result = *memory_blocks;\n              result[1] = memory_blocks[1];\n              result[2] = memory_blocks[2];\n              temp_var4 = temp_ptr2[1];\n              result = temp_ptr2;\n              memory_blocks = temp_ptr1;\n            }\n            else {\n              FUN_00081e34(temp_ptr1,memory_blocks);\n              temp_var4 = temp_ptr2[1];\n              result = temp_ptr2;\n              memory_blocks = temp_ptr1;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)temp_var7 <= (int)temp_var4) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_var3 = *temp_ptr1;\n        temp_var5 = temp_ptr2[3];\n        temp_var2 = temp_var6 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var4;\n        if (temp_var2 < 0x25) {\n          result = temp_ptr1;\n          if (0x13 < temp_var2) {\n            temp_ptr2[2] = *memory_blocks;\n            temp_ptr2[3] = memory_blocks[1];\n            if (temp_var2 < 0x1c) {\n              memory_blocks = memory_blocks + 2;\n              result = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = memory_blocks[2];\n              temp_ptr2[5] = memory_blocks[3];\n              if (temp_var2 == 0x24) {\n                temp_ptr2[6] = memory_blocks[4];\n                result = memory_blocks + 5;\n                memory_blocks = memory_blocks + 6;\n                temp_ptr2[7] = *result;\n                result = temp_ptr2 + 8;\n              }\n              else {\n                memory_blocks = memory_blocks + 4;\n                result = temp_ptr2 + 6;\n              }\n            }\n          }\n          *result = *memory_blocks;\n          result[1] = memory_blocks[1];\n          result[2] = memory_blocks[2];\n          temp_var4 = temp_ptr2[1];\n          result = temp_ptr2;\n          memory_blocks = temp_ptr1;\n        }\n        else {\n          FUN_00081e34(temp_ptr1,memory_blocks);\n          temp_var4 = temp_ptr2[1];\n          result = temp_ptr2;\n          memory_blocks = temp_ptr1;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_ptr2 = (int *)FUN_00081810(param_ptr,block_count);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000820a0;\n    temp_var4 = memory_blocks[-1];\n    if (temp_ptr2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result)) {\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        result = memory_blocks;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < temp_var6) {\n          *temp_ptr2 = *memory_blocks;\n          temp_ptr2[1] = memory_blocks[1];\n          if (temp_var6 < 0x1c) {\n            result = memory_blocks + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = memory_blocks[2];\n            temp_ptr2[3] = memory_blocks[3];\n            if (temp_var6 == 0x24) {\n              temp_ptr2[4] = memory_blocks[4];\n              temp_ptr2[5] = memory_blocks[5];\n              result = memory_blocks + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              result = memory_blocks + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *result;\n        temp_ptr1[1] = result[1];\n        temp_ptr1[2] = result[2];\n      }\n      else {\n        FUN_00081e34(temp_ptr2,memory_blocks);\n      }\n      FUN_00083b10(param_ptr,memory_blocks);\n      goto LAB_000820a0;\n    }\n    temp_var6 = temp_var6 + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp_var2 = temp_var6 - temp_var7;\n  temp_ptr2 = memory_blocks;\n  if (temp_var2 < 0x10) {\n    result[1] = temp_var4 & 1 | temp_var6;\n    *(uint *)((int)result + temp_var6 + 4) = *(uint *)((int)result + temp_var6 + 4) | 1;\n  }\n  else {\n    result[1] = temp_var4 & 1 | temp_var7;\n    *(uint *)((int)result + temp_var7 + 4) = temp_var2 | 1;\n    *(uint *)((int)result + temp_var2 + temp_var7 + 4) = *(uint *)((int)result + temp_var2 + temp_var7 + 4) | 1;\n    FUN_00083b10(param_ptr,(int)result + temp_var7 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(param_ptr);\n  return temp_ptr2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "rearrange_memory_blocks_00081fac",
                "param_1": "param_ptr",
                "param_2": "memory_blocks",
                "param_3": "block_count",
                "dVar1": "temp_var1",
                "piVar2": "result",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "piVar7": "temp_ptr1",
                "uVar8": "temp_var6",
                "uVar9": "temp_var7",
                "piVar10": "temp_ptr2",
                "LAB_00082078": "INVALID_SIZE",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_and_assign_value_0008236c",
            "code": "\nvoid checkAndAssignValue_0008236c(int *resultPtr,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080e88(inputValue);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *resultPtr = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_and_assign_value_0008236c",
                "param_1": "resultPtr",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_data_00082390",
            "code": "\nint compareData_00082390(uint *data1,uint *data2)\n\n{\n  uint *ptr_data1;\n  int result;\n  uint *ptr_data2;\n  uint *ptr_temp;\n  uint size;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  \n  if ((((uint)data1 | (uint)data2) & 7) != 0) {\n    ptr_data1 = data1;\n    if (((uint)data1 & 3) != 0) {\n      ptr_data1 = (uint *)((uint)data1 & 0xfffffffc) + 1;\n      size = *(uint *)((uint)data1 & 0xfffffffc);\n      ptr_data2 = data2;\n      if (((uint)data1 & 1) == 0) {\nLAB_00082410:\n        ptr_temp = (uint *)((int)ptr_data2 + 1);\n        temp1 = size >> 0x10 & 0xff;\n        result = temp1 - *(byte *)ptr_data2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr_temp = data2;\n        if (((uint)data1 & 2) == 0) {\n          ptr_data2 = (uint *)((int)data2 + 1);\n          temp1 = size >> 8 & 0xff;\n          result = temp1 - *(byte *)data2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp1 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      data2 = (uint *)((int)ptr_temp + 1);\n      result = (size >> 0x18) - (uint)*(byte *)ptr_temp;\n      if ((result != 0) || (size >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    size = (uint)data2 & 3;\n    if (size != 0) {\n      data2 = (uint *)((uint)data2 & 0xfffffffc);\n      if (size == 2) {\n        size = *data2;\n        do {\n          data2 = data2 + 1;\n          temp2 = *ptr_data1;\n          size = size >> 0x10;\n          temp3 = temp2 + 0xfefefeff & ~temp2;\n          temp4 = temp3 & 0x80808080;\n          temp1 = temp2 & 0xffff;\n          if ((temp3 & 0x8080) != 0 || temp1 != size) goto LAB_0008258e;\n          size = *data2;\n          temp1 = temp1 ^ temp2;\n          temp2 = size * 0x10000;\n          ptr_data1 = ptr_data1 + 1;\n        } while (temp4 == 0 && temp1 == temp2);\n      }\n      else if (size < 2) {\n        size = *data2;\n        do {\n          data2 = data2 + 1;\n          temp2 = *ptr_data1;\n          size = size >> 8;\n          temp3 = temp2 + 0xfefefeff & ~temp2;\n          temp4 = temp3 & 0x80808080;\n          temp1 = temp2 & 0xffffff;\n          if ((temp3 & 0x808080) != 0 || temp1 != size) goto LAB_0008258e;\n          size = *data2;\n          temp1 = temp1 ^ temp2;\n          temp2 = size * 0x1000000;\n          ptr_data1 = ptr_data1 + 1;\n        } while (temp4 == 0 && temp1 == temp2);\n      }\n      else {\n        size = *data2;\n        do {\n          data2 = data2 + 1;\n          temp2 = *ptr_data1;\n          size = size >> 0x18;\n          temp3 = temp2 + 0xfefefeff & ~temp2;\n          temp4 = temp3 & 0x80808080;\n          temp1 = temp2 & 0xff;\n          if ((temp3 & 0x80) != 0 || temp1 != size) goto LAB_0008258e;\n          size = *data2;\n          temp1 = temp1 ^ temp2;\n          temp2 = size * 0x100;\n          ptr_data1 = ptr_data1 + 1;\n        } while (temp4 == 0 && temp1 == temp2);\n      }\n      temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n              temp1 >> 0x18;\n      size = (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    data1 = ptr_data1;\n    ptr_data2 = data2;\n    if (((uint)ptr_data1 & 4) != 0) {\n      data1 = ptr_data1 + 1;\n      size = *ptr_data1;\n      ptr_data2 = data2 + 1;\n      temp2 = *data2;\n      temp4 = size + 0xfefefeff & ~size & 0x80808080;\n      if (size != temp2 || temp4 != 0) {\nLAB_0008259a:\n        temp1 = size << 0x18 | (size >> 8 & 0xff) << 0x10 | (size >> 0x10 & 0xff) << 8 |\n                size >> 0x18;\n        size = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n                temp2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    data2 = ptr_data2;\n    if (((uint)ptr_data2 & 4) != 0) {\n      size = *ptr_data2;\n      ptr_data1 = ptr_data2 + 1;\n      do {\n        temp1 = *data1;\n        temp2 = data1[1];\n        temp4 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n        if (temp1 != size || temp4 != 0) goto LAB_0008258e;\n        temp3 = *ptr_data1;\n        size = ptr_data1[1];\n        temp4 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        data1 = data1 + 2;\n        ptr_data1 = ptr_data1 + 2;\n      } while (temp2 == temp3 && temp4 == 0);\n      temp1 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      size = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    size = *data1;\n    temp1 = data1[1];\n    temp2 = *data2;\n    temp3 = data2[1];\n    temp4 = size + 0xfefefeff & ~size & 0x80808080;\n    if (size != temp2 || temp4 != 0) goto LAB_0008259a;\n    temp4 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    data1 = data1 + 2;\n    data2 = data2 + 2;\n  } while (temp1 == temp3 && temp4 == 0);\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  size = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\nLAB_0008259e:\n  temp2 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\n  if (temp2 != 0) {\n    temp2 = 0x18 - LZCOUNT(temp2);\n    temp1 = temp1 >> (temp2 & 0xff);\n    size = size >> (temp2 & 0xff);\n  }\n  result = 1;\n  if (temp1 <= size) {\n    result = -(uint)(temp1 < size);\n  }\n  return result;\nLAB_0008258e:\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  size = size << 0x18 | (size >> 8 & 0xff) << 0x10 | (size >> 0x10 & 0xff) << 8 | size >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_data_00082390",
                "param_1": "data1",
                "param_2": "data2",
                "puVar1": "ptr_data1",
                "puVar3": "ptr_data2",
                "puVar4": "ptr_temp",
                "uVar5": "size",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "iVar2": "result"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copy_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *src_ptr_temp;\n  uint current_word;\n  uint current_byte;\n  uint *dest_ptr;\n  bool is_last_char_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr_temp = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr_temp = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr_temp;\n    if (((uint)src_ptr_temp & 2) != 0) {\n      src = (uint *)((int)src_ptr_temp + 2);\n      current_short = *(ushort *)src_ptr_temp;\n      is_last_char_zero = (current_short & 0xff) == 0;\n      if (is_last_char_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_last_char_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_last_char_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  src_ptr_temp = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_00082630;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    src_ptr_temp = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    src_ptr = src_ptr_temp + 1;\n    current_byte = *src_ptr_temp;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = current_byte;\n    if ((current_byte + 0xfefefeff & ~current_byte & 0x80808080) != 0) break;\n    src_ptr_temp = src_ptr_temp + 2;\n    current_word = *src_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = current_byte;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)current_word;\n    current_byte = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (current_byte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_ptr",
                "puVar4": "src_ptr_temp",
                "uVar5": "current_word",
                "uVar6": "current_byte",
                "puVar7": "dest_ptr",
                "bVar8": "is_last_char_zero"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_trailing_zeros_00082688",
            "code": "\nint countTrailingZeros_00082688(uint input)\n\n{\n  int trailingZerosCount;\n  uint *ptrInput;\n  uint value;\n  bool isZero;\n  \n  ptrInput = (uint *)(input & 0xfffffffc);\n  trailingZerosCount = -(input & 3);\n  value = *ptrInput;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((trailingZerosCount + 4U & 0x1f) << 3);\n  }\n  while (ptrInput = ptrInput + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    trailingZerosCount = trailingZerosCount + 4;\n    value = *ptrInput;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    trailingZerosCount = trailingZerosCount + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    trailingZerosCount = trailingZerosCount + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    trailingZerosCount = trailingZerosCount + 1;\n  }\n  return trailingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_trailing_zeros_00082688",
                "param_1": "input",
                "iVar1": "trailingZerosCount",
                "puVar2": "ptrInput",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000814f6",
                "FUN_000810a6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 inputData,int size,int **outputData)\n\n{\n  int *currentPointer;\n  int result;\n  int *tempPointer;\n  uint loopCounter1;\n  undefined4 *arrayPointer;\n  uint value1;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUN_00083ca8();\n    outputData[2] = (int *)0x0;\n    outputData[1] = (int *)0x0;\n    return result;\n  }\n  tempPointer = outputData[2];\n  currentPointer = *outputData;\n  while (tempPointer != (int *)0x0) {\n    value1 = currentPointer[1];\n    shiftedValue = value1 >> 2;\n    if (shiftedValue != 0) {\n      arrayPointer = (undefined4 *)(*currentPointer + -4);\n      loopCounter1 = 0;\n      do {\n        arrayPointer = arrayPointer + 1;\n        result = FUN_000839b4(inputData,*arrayPointer,size);\n        loopCounter1 = loopCounter1 + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shiftedValue != loopCounter1);\n      tempPointer = outputData[2];\n    }\n    tempPointer = (int *)((int)tempPointer - (value1 & 0xfffffffc));\n    outputData[2] = tempPointer;\n    currentPointer = currentPointer + 2;\n  }\n  result = 0;\nLAB_00082864:\n  outputData[2] = (int *)0x0;\n  outputData[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "inputData",
                "param_2": "size",
                "param_3": "outputData",
                "piVar1": "currentPointer",
                "iVar2": "result",
                "piVar3": "tempPointer",
                "uVar4": "loopCounter1",
                "puVar5": "arrayPointer",
                "uVar6": "value1",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "parse_format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_0008289c(int formatString,int argList,int *******formatSpec,int **argPtr)\n\n{\n  bool hasFlag;\n  bool isPositive;\n  bool isHash;\n  char signChar;\n  bool isZeroPadded;\n  int ********formatBuffer;\n  int *bufferPtr;\n  int result;\n  char digitChar;\n  int *******start;\n  uint numericDigit;\n  int **vaArgPtr;\n  uint flags;\n  uint nextChar;\n  int numDigits;\n  int ********formatSpecPtr;\n  int numArgs;\n  int *******pppppppiVar18;\n  int *curArg;\n  int *******pppppppiVar20;\n  uint widthValue;\n  int *nextArg;\n  int *******startFormatSpec;\n  undefined4 tempValue;\n  int ********charPtr;\n  bool isLong;\n  longlong combinedValue;\n  int *******maxWidth;\n  int *******remainingWidth;\n  int **argPtrList;\n  int resultLength;\n  char *hexChars;\n  char signChar;\n  undefined paddingChar;\n  undefined hexPrefix;\n  int ********curBufferPtr;\n  int numAddedArgs;\n  int *******bufferTailPtr;\n  undefined paddingChar;\n  char fillChar;\n  undefined hexChar;\n  undefined formatBuffer [4];\n  int *******argPtrStack [16];\n  \n  if ((formatString != 0) && (*(int *)(formatString + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  flags = (uint)*(ushort *)(argList + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(argList + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(argList + 0xc) = (short)flags;\n    *(uint *)(argList + 100) = *(uint *)(argList + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(argList + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = FUN_0008356c(formatString,argList);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(argList + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(argList + 0xe)) {\n    result = FUN_000834f0(formatString,argList,formatSpec,argPtr);\n    return result;\n  }\nLAB_000828ee:\n  hexChars = (char *)0x0;\n  bufferTailPtr = (int *******)0x0;\n  numAddedArgs = 0;\n  resultLength = 0;\n  formatBuffer = (int ********)formatBuffer;\n  argPtrList = argPtr;\n  curBufferPtr = (int ********)formatBuffer;\nLAB_00082902:\n  start = formatSpec;\n  if ((*(char *)formatSpec != '\\0') && (*(char *)formatSpec != '%')) {\n    do {\n      start = (int *******)((int)start + 1);\n      if (*(char *)start == '\\0') break;\n    } while (*(char *)start != '%');\n    pppppppiVar20 = (int *******)((int)start - (int)formatSpec);\n    if (pppppppiVar20 != (int *******)0x0) {\n      numAddedArgs = numAddedArgs + 1;\n      bufferTailPtr = (int *******)((int)bufferTailPtr + (int)pppppppiVar20);\n      *formatBuffer = formatSpec;\n      formatBuffer[1] = pppppppiVar20;\n      if (numAddedArgs < 8) {\n        formatBuffer = formatBuffer + 2;\n      }\n      else {\n        if (bufferTailPtr == (int *******)0x0) {\n          resultLength = resultLength + (int)pppppppiVar20;\n          numAddedArgs = 0;\n          formatBuffer = (int ********)formatBuffer;\n          goto LAB_00082952;\n        }\n        result = FUN_00082824(formatString,argList,&curBufferPtr);\n        formatBuffer = (int ********)formatBuffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      resultLength = resultLength + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)start != '\\0') {\n    signChar = '\\0';\n    nextChar = (uint)*(byte *)((int)start + 1);\n    flags = 0;\n    isZeroPadded = false;\n    isPositive = false;\n    hasFlag = false;\n    isHash = false;\n    isLong = false;\n    pppppppiVar20 = (int *******)0x0;\n    remainingWidth = (int *******)0xffffffff;\n    formatSpec = (int *******)((int)start + 1);\nLAB_00082976:\n    formatSpec = (int *******)((int)formatSpec + 1);\nLAB_0008297a:\n    switch(nextChar) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (nextChar != 0) {\n        maxWidth = (int *******)0x1;\n        remainingWidth = (int *******)0x1;\n        charPtr = (int ********)&paddingChar;\n        paddingChar = (char)nextChar;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isHash = true;\n      nextChar = (uint)*(byte *)formatSpec;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*argPtrList;\n      argPtrList = argPtrList + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      nextChar = (uint)*(byte *)formatSpec;\n      goto LAB_00082976;\n    case 0x2b:\n      nextChar = (uint)*(byte *)formatSpec;\n      signChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      nextChar = (uint)*(byte *)formatSpec;\n      goto LAB_00082976;\n    case 0x2e:\n      nextChar = (uint)*(byte *)formatSpec;\n      start = (int *******)((int)formatSpec + 1);\n      if (nextChar == 0x2a) {\n        nextChar = (uint)*(byte *)((int)formatSpec + 1);\n        remainingWidth = (int *******)*argPtrList;\n        argPtrList = argPtrList + 1;\n        formatSpec = start;\n        if ((int)remainingWidth < 0) {\n          remainingWidth = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      numericDigit = nextChar - 0x30;\n      if (numericDigit < 10) {\n        widthValue = 0;\n        do {\n          formatSpec = (int *******)((int)start + 1);\n          nextChar = (uint)*(byte *)start;\n          widthValue = numericDigit + widthValue * 10;\n          numericDigit = nextChar - 0x30;\n          start = formatSpec;\n        } while (numericDigit < 10);\n        remainingWidth = (int *******)(widthValue | (int)widthValue >> 0x1f);\n      }\n      else {\n        remainingWidth = (int *******)0x0;\n        formatSpec = start;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      nextChar = (uint)*(byte *)formatSpec;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isPositive = true;\n      if (hasFlag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      argPtrList = (int **)((int)argPtrList + 7U & 0xfffffff8);\n      curArg = *argPtrList;\n      nextArg = argPtrList[1];\n      argPtrList = argPtrList + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isPositive = true;\n      if (hasFlag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)isPositive << 4;\n      numDigits = (uint)hasFlag << 5;\n      if ((isPositive == 0) && (numDigits = (uint)isLong << 6, isLong != 0)) {\n        curArg = (int *)(uint)*(ushort *)argPtrList;\n        argPtrList = argPtrList + 1;\n        nextArg = (int *)0x0;\n      }\n      else {\n        result = numDigits;\n        curArg = *argPtrList;\n        argPtrList = argPtrList + 1;\n        nextArg = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isPositive = true;\n      if (hasFlag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isPositive) || (isLong == false)) {\n        result = 1;\n        curArg = *argPtrList;\n        argPtrList = argPtrList + 1;\n        nextArg = (int *)0x0;\n      }\n      else {\n        nextArg = (int *)0x0;\n        curArg = (int *)(uint)*(ushort *)argPtrList;\n        argPtrList = argPtrList + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexChars = \"0123456789ABCDEF\";\n      if (hasFlag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      vaArgPtr = (int **)((int)argPtrList + 7U & 0xfffffff8);\n      argPtrList = vaArgPtr + 2;\n      curArg = *vaArgPtr;\n      nextArg = vaArgPtr[1];\n      goto LAB_00082d2e;\n    case 99:\n      curArg = *argPtrList;\n      argPtrList = argPtrList + 1;\n      maxWidth = (int *******)0x1;\n      paddingChar = SUB41(curArg,0);\n      remainingWidth = (int *******)0x1;\n      charPtr = (int ********)&paddingChar;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (hasFlag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isPositive == false) && (isLong != false)) {\n        curArg = (int *)(int)*(short *)argPtrList;\n        argPtrList = argPtrList + 1;\n        nextArg = (int *)((int)curArg >> 0x1f);\n      }\n      else {\n        curArg = *argPtrList;\n        argPtrList = argPtrList + 1;\n        nextArg = (int *)((int)curArg >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)nextArg < 0) {\n        isLong = curArg != (int *)0x0;\n        curArg = (int *)-(int)curArg;\n        nextArg = (int *)(-(int)nextArg - (uint)isLong);\n        signChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)remainingWidth) {\n        flags = flags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      nextChar = (uint)curArg | (uint)nextArg;\n      result = 1;\n      signChar = signChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isLong = true;\n      nextChar = (uint)*(byte *)formatSpec;\n      goto LAB_00082976;\n    case 0x6c:\n      nextChar = (uint)*(byte *)formatSpec;\n      if (nextChar == 0x6c) {\n        hasFlag = true;\n        nextChar = (uint)*(byte *)((int)formatSpec + 1);\n        formatSpec = (int *******)((int)formatSpec + 1);\n      }\n      else {\n        isPositive = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (hasFlag == false) {\n        if (isPositive == false) {\n          if (isLong) {\n            curArg = *argPtrList;\n            argPtrList = argPtrList + 1;\n            *(short *)curArg = (short)resultLength;\n          }\n          else {\n            curArg = *argPtrList;\n            argPtrList = argPtrList + 1;\n            *curArg = resultLength;\n          }\n        }\n        else {\n          curArg = *argPtrList;\n          argPtrList = argPtrList + 1;\n          *curArg = resultLength;\n        }\n      }\n      else {\n        curArg = *argPtrList;\n        argPtrList = argPtrList + 1;\n        *curArg = resultLength;\n        curArg[1] = resultLength >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (hasFlag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      vaArgPtr = (int **)((int)argPtrList + 7U & 0xfffffff8);\n      argPtrList = vaArgPtr + 2;\n      curArg = *vaArgPtr;\n      nextArg = vaArgPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      curArg = *argPtrList;\n      argPtrList = argPtrList + 1;\n      hexPrefix = 0x78;\n      isZeroPadded = true;\n      nextArg = (int *)0x0;\n      paddingChar = 0x30;\n      hexChars = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      hasFlag = true;\n      nextChar = (uint)*(byte *)formatSpec;\n      goto LAB_00082976;\n    case 0x73:\n      charPtr = (int ********)*argPtrList;\n      signChar = '\\0';\n      argPtrList = argPtrList + 1;\n      if (charPtr != (int ********)0x0) {\n        if ((int)remainingWidth < 0) {\n          remainingWidth = (int *******)FUN_00082688(charPtr);\n          start = (int *******)0x0;\n          signChar = signChar;\n        }\n        else {\n          result = FUN_000840f8(charPtr,0,remainingWidth);\n          signChar = signChar;\n          if (result == 0) {\n            start = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(result - (int)charPtr);\n            if ((int)remainingWidth <= (int)(int *******)(result - (int)charPtr)) {\n              pppppppiVar18 = remainingWidth;\n            }\n            start = (int *******)0x0;\n            remainingWidth = pppppppiVar18;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < remainingWidth) {\n        remainingWidth = (int *******)0x6;\n      }\n      maxWidth = (int *******)((uint)remainingWidth & ~((int)remainingWidth >> 0x1f));\n      charPtr = (int ********)&UNK_00085728;\nLAB_00082d76:\n      signChar = '\\0';\n      start = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!hasFlag) goto LAB_00082ce0;\nLAB_00082bc6:\n      vaArgPtr = (int **)((int)argPtrList + 7U & 0xfffffff8);\n      argPtrList = vaArgPtr + 2;\n      curArg = *vaArgPtr;\n      nextArg = vaArgPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexChars = \"0123456789abcdef\";\n      if (hasFlag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isPositive == false) && (isLong != false)) {\n        nextArg = (int *)0x0;\n        curArg = (int *)(uint)*(ushort *)argPtrList;\n        argPtrList = argPtrList + 1;\n      }\n      else {\n        curArg = *argPtrList;\n        argPtrList = argPtrList + 1;\n        nextArg = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isHash) && (((uint)curArg | (uint)nextArg) != 0)) {\n        isZeroPadded = true;\n        paddingChar = 0x30;\n        result = 2;\n        hexPrefix = (char)nextChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    signChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)remainingWidth) {\n      flags = flags & 0xffffff7f;\n    }\n    nextChar = (uint)curArg | (uint)nextArg;\njoined_r0x00082adc:\n    combinedValue = CONCAT44(nextArg,curArg);\n    start = remainingWidth;\n    if ((nextChar == 0) && (remainingWidth == (int *******)0x0)) {\n      charPtr = (int ********)formatBuffer;\n      if ((result != 0) || (!isHash)) goto LAB_00082b04;\n      charPtr = (int ********)(&fillChar + 1);\n      hexChar = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (nextArg != (int *)0x0 || (int *)0x9 < curArg) {\n        formatSpecPtr = (int ********)(&fillChar + 1);\n        do {\n          charPtr = formatSpecPtr;\n          tempValue = (undefined4)((ulonglong)combinedValue >> 0x20);\n          digitChar = '\\n';\n          FUN_00084530((int)combinedValue,tempValue,10,0);\n          *(char *)charPtr = digitChar + '0';\n          combinedValue = FUN_00084530((int)combinedValue,tempValue,10,0);\n          formatSpecPtr = (int ********)((int)charPtr + -1);\n        } while (combinedValue != 0);\n        remainingWidth = (int *******)((int)formatBuffer - (int)charPtr);\n        goto LAB_00082b04;\n      }\n      hexChar = (char)curArg + '0';\n      charPtr = (int ********)(&fillChar + 1);\n      goto LAB_00083282;\n    }\n    formatSpecPtr = (int ********)(&fillChar + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      charPtr = formatSpecPtr;\n      nextChar = (uint)curArg & 0xf;\n      curArg = (int *)((uint)curArg >> 4 | (int)nextArg << 0x1c);\n      nextArg = (int *)((uint)nextArg >> 4);\n      *(char *)charPtr = hexChars[nextChar];\n      formatSpecPtr = (int ********)((int)charPtr + -1);\n    } while (((uint)curArg | (uint)nextArg) != 0);\n    remainingWidth = (int *******)((int)formatBuffer - (int)charPtr);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (bufferTailPtr != (int *******)0x0) {\n    FUN_00082824(formatString,argList,&curBufferPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(argList + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return resultLength;\nLAB_000830e2:\n  do {\n    charPtr = formatSpecPtr;\n    bufferPtr = (int *)((uint)curArg >> 3 | (int)nextArg << 0x1d);\n    nextArg = (int *)((uint)nextArg >> 3);\n    result = ((uint)curArg & 7) + 0x30;\n    *(char *)charPtr = (char)result;\n    formatSpecPtr = (int ********)((int)charPtr + -1);\n    curArg = bufferPtr;\n  } while (((uint)bufferPtr | (uint)nextArg) != 0);\n  if (isHash) {\n    if (result == 0x30) {\nLAB_00082afe:\n      remainingWidth = (int *******)((int)formatBuffer - (int)charPtr);\n    }\n    else {\n      *(undefined *)((int)charPtr + -1) = 0x30;\n      charPtr = formatSpecPtr;\n      remainingWidth = (int *******)((int)formatBuffer - (int)formatSpecPtr);\n    }\n  }\n  else {\nLAB_00083282:\n    remainingWidth = (int *******)((int)formatBuffer - (int)charPtr);\n  }\nLAB_00082b04:\n  maxWidth = remainingWidth;\n  if ((int)remainingWidth < (int)start) {\n    maxWidth = start;\n  }\n  if (signChar != '\\0') {\n    maxWidth = (int *******)((int)maxWidth + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    maxWidth = (int *******)((int)maxWidth + 2);\n  }\n  if ((flags == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      numAddedArgs = numAddedArgs + 1;\n    }\n    else {\n      do {\n        startFormatSpec = pppppppiVar18;\n        result = numAddedArgs + 1;\n        bufferTailPtr = bufferTailPtr + 4;\n        *formatBuffer = (int *******)0x856f0;\n        formatBuffer[1] = (int *******)0x10;\n        if (result < 8) {\n          numDigits = numAddedArgs + 2;\n          formatBuffer = formatBuffer + 2;\n          numAddedArgs = result;\n        }\n        else if (bufferTailPtr == (int *******)0x0) {\n          numDigits = 1;\n          formatBuffer = (int ********)formatBuffer;\n          numAddedArgs = 0;\n        }\n        else {\n          numAddedArgs = result;\n          result = FUN_00082824(formatString,argList,&curBufferPtr);\n          if (result != 0) goto LAB_00083142;\n          numDigits = numAddedArgs + 1;\n          formatBuffer = (int ********)formatBuffer;\n        }\n        pppppppiVar18 = startFormatSpec + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = startFormatSpec + -4;\n      numAddedArgs = numDigits;\n    }\n    bufferTailPtr = (int *******)((int)bufferTailPtr + (int)pppppppiVar18);\n    *formatBuffer = (int *******)0x856f0;\n    formatBuffer[1] = pppppppiVar18;\n    if (numAddedArgs < 8) {\n      result = numAddedArgs + 1;\n      formatBuffer = formatBuffer + 2;\n    }\n    else if (bufferTailPtr == (int *******)0x0) {\n      result = 1;\n      numAddedArgs = 0;\n      formatBuffer = (int ********)formatBuffer;\n    }\n    else {\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numAddedArgs + 1;\n      formatBuffer = (int ********)formatBuffer;\n    }\n  }\n  else {\n    result = numAddedArgs + 1;\n  }\n  numDigits = result;\n  if (signChar != '\\0') {\n    bufferTailPtr = (int *******)((int)bufferTailPtr + 1);\n    numDigits = 1;\n    *formatBuffer = (int *******)&signChar;\n    formatBuffer[1] = (int *******)0x1;\n    numAddedArgs = result;\n    if (result < 8) {\n      numDigits = result + 1;\n      formatBuffer = formatBuffer + 2;\n    }\n    else if (bufferTailPtr == (int *******)0x0) {\n      numAddedArgs = 0;\n      formatBuffer = (int ********)formatBuffer;\n    }\n    else {\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      numDigits = numAddedArgs + 1;\n      formatBuffer = (int ********)formatBuffer;\n    }\n  }\n  result = numDigits;\n  numArgs = numAddedArgs;\n  if (isZeroPadded) {\n    bufferTailPtr = (int *******)((int)bufferTailPtr + 2);\n    *formatBuffer = (int *******)&paddingChar;\n    formatBuffer[1] = (int *******)0x2;\n    if (numDigits < 8) {\n      result = numDigits + 1;\n      numArgs = numDigits;\n      formatBuffer = formatBuffer + 2;\n    }\n    else if (bufferTailPtr == (int *******)0x0) {\n      result = 1;\n      numArgs = 0;\n      formatBuffer = (int ********)formatBuffer;\n    }\n    else {\n      numAddedArgs = numDigits;\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numAddedArgs + 1;\n      numArgs = numAddedArgs;\n      formatBuffer = (int ********)formatBuffer;\n    }\n  }\n  numAddedArgs = numArgs;\n  if ((flags == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          startFormatSpec = pppppppiVar18;\n          numAddedArgs = numArgs + 1;\n          bufferTailPtr = bufferTailPtr + 4;\n          *formatBuffer = (int *******)\"0000000000000000\";\n          formatBuffer[1] = (int *******)0x10;\n          if (7 < numAddedArgs) break;\n          result = numArgs + 2;\n          formatBuffer = formatBuffer + 2;\nLAB_000831f2:\n          numArgs = numAddedArgs;\n          pppppppiVar18 = startFormatSpec + -4;\n          if ((int)(startFormatSpec + -4) < 0x11) goto LAB_00083218;\n        }\n        if (bufferTailPtr != (int *******)0x0) {\n          result = FUN_00082824(formatString,argList,&curBufferPtr);\n          if (result == 0) {\n            result = numAddedArgs + 1;\n            formatBuffer = (int ********)formatBuffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        numArgs = 0;\n        pppppppiVar18 = startFormatSpec + -4;\n        formatBuffer = (int ********)formatBuffer;\n      } while (0x10 < (int)(startFormatSpec + -4));\nLAB_00083218:\n      pppppppiVar18 = startFormatSpec + -4;\n    }\n    bufferTailPtr = (int *******)((int)bufferTailPtr + (int)pppppppiVar18);\n    *formatBuffer = (int *******)\"0000000000000000\";\n    formatBuffer[1] = pppppppiVar18;\n    numAddedArgs = result;\n    if (result < 8) {\n      result = result + 1;\n      formatBuffer = formatBuffer + 2;\n    }\n    else if (bufferTailPtr == (int *******)0x0) {\n      result = 1;\n      numAddedArgs = 0;\n      formatBuffer = (int ********)formatBuffer;\n    }\n    else {\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numAddedArgs + 1;\n      formatBuffer = (int ********)formatBuffer;\n    }\n  }\n  start = (int *******)((int)start - (int)remainingWidth);\n  formatSpecPtr = (int ********)formatBuffer;\n  if ((int)start < 1) {\nLAB_0008302a:\n    bufferTailPtr = (int *******)((int)bufferTailPtr + (int)remainingWidth);\n    *formatBuffer = (int *******)charPtr;\n    formatBuffer[1] = remainingWidth;\n    remainingWidth = bufferTailPtr;\n    numAddedArgs = result;\n    if (result < 8) goto LAB_000831be;\n    if (bufferTailPtr == (int *******)0x0) {\n      numAddedArgs = 0;\n    }\n    else {\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    numDigits = numAddedArgs;\n    if (0x10 < (int)start) {\n      do {\n        while( true ) {\n          pppppppiVar18 = start;\n          numAddedArgs = numDigits + 1;\n          bufferTailPtr = bufferTailPtr + 4;\n          *formatBuffer = (int *******)\"0000000000000000\";\n          formatBuffer[1] = (int *******)0x10;\n          if (7 < numAddedArgs) break;\n          result = numDigits + 2;\n          formatBuffer = formatBuffer + 2;\nLAB_00082fe6:\n          numDigits = numAddedArgs;\n          start = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (bufferTailPtr != (int *******)0x0) {\n          result = FUN_00082824(formatString,argList,&curBufferPtr);\n          if (result == 0) {\n            result = numAddedArgs + 1;\n            formatBuffer = (int ********)formatBuffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        formatBuffer = (int ********)formatBuffer;\n        numDigits = 0;\n        start = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_0008300e:\n      start = pppppppiVar18 + -4;\n    }\n    bufferTailPtr = (int *******)((int)bufferTailPtr + (int)start);\n    *formatBuffer = (int *******)\"0000000000000000\";\n    formatBuffer[1] = start;\n    if (result < 8) {\n      result = result + 1;\n      formatBuffer = formatBuffer + 2;\n      goto LAB_0008302a;\n    }\n    if (bufferTailPtr != (int *******)0x0) {\n      numAddedArgs = result;\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n      result = numAddedArgs + 1;\n      formatBuffer = (int ********)formatBuffer;\n      goto LAB_0008302a;\n    }\n    argPtrStack[0] = remainingWidth;\n    numAddedArgs = 1;\n    formatBuffer = (int ********)formatBuffer;\n    formatBuffer = (undefined  [4])charPtr;\nLAB_000831be:\n    formatSpecPtr = formatBuffer + 2;\n    bufferTailPtr = remainingWidth;\n  }\n  if (((flags & 4) != 0) &&\n     (start = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)start)) {\n    result = numAddedArgs;\n    if ((int)start < 0x11) {\n      numDigits = numAddedArgs + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numAddedArgs = result + 1;\n          bufferTailPtr = bufferTailPtr + 4;\n          *formatSpecPtr = (int *******)0x856f0;\n          formatSpecPtr[1] = (int *******)0x10;\n          if (7 < numAddedArgs) break;\n          numDigits = result + 2;\n          formatSpecPtr = formatSpecPtr + 2;\nLAB_0008307a:\n          start = start + -4;\n          result = numAddedArgs;\n          if ((int)start < 0x11) goto LAB_000830a2;\n        }\n        if (bufferTailPtr != (int *******)0x0) {\n          result = FUN_00082824(formatString,argList,&curBufferPtr);\n          if (result == 0) {\n            numDigits = numAddedArgs + 1;\n            formatSpecPtr = (int ********)formatBuffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        start = start + -4;\n        numDigits = 1;\n        result = 0;\n        formatSpecPtr = (int ********)formatBuffer;\n      } while (0x10 < (int)start);\n    }\nLAB_000830a2:\n    bufferTailPtr = (int *******)((int)bufferTailPtr + (int)start);\n    *formatSpecPtr = (int *******)0x856f0;\n    formatSpecPtr[1] = start;\n    numAddedArgs = numDigits;\n    if (7 < numDigits) {\n      if (bufferTailPtr == (int *******)0x0) {\n        if ((int)maxWidth < (int)pppppppiVar20) {\n          maxWidth = pppppppiVar20;\n        }\n        resultLength = resultLength + (int)maxWidth;\n        goto LAB_00083186;\n      }\n      result = FUN_00082824(formatString,argList,&curBufferPtr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)maxWidth < (int)pppppppiVar20) {\n    maxWidth = pppppppiVar20;\n  }\n  resultLength = resultLength + (int)maxWidth;\n  if ((bufferTailPtr != (int *******)0x0) &&\n     (result = FUN_00082824(formatString,argList,&curBufferPtr), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  numAddedArgs = 0;\n  formatBuffer = (int ********)formatBuffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  numericDigit = nextChar - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  start = formatSpec;\n  do {\n    formatSpec = (int *******)((int)start + 1);\n    nextChar = (uint)*(byte *)start;\n    pppppppiVar20 = (int *******)(numericDigit + (int)pppppppiVar20 * 10);\n    numericDigit = nextChar - 0x30;\n    start = formatSpec;\n  } while (numericDigit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  nextChar = (uint)*(byte *)formatSpec;\n  if (signChar == '\\0') {\n    signChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "param_1": "formatString",
                "param_2": "argList",
                "param_3": "formatSpec",
                "param_4": "argPtr",
                "bVar1": "hasFlag",
                "bVar2": "isPositive",
                "bVar3": "isHash",
                "cVar4": "signChar",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "formatBuffer",
                "piVar7": "bufferPtr",
                "iVar8": "result",
                "cVar9": "digitChar",
                "pppppppiVar10": "start",
                "uVar11": "numericDigit",
                "uVar13": "flags",
                "uVar14": "nextChar",
                "iVar15": "numDigits",
                "ppppppppiVar16": "formatSpecPtr",
                "iVar17": "numArgs",
                "piVar19": "curArg",
                "piVar22": "nextArg",
                "ppiVar12": "vaArgPtr",
                "uVar21": "widthValue",
                "pppppppiVar23": "startFormatSpec",
                "uVar24": "tempValue",
                "ppppppppiVar25": "charPtr",
                "bVar26": "isLong",
                "lVar27": "combinedValue",
                "local_dc": "maxWidth",
                "local_d4": "remainingWidth",
                "local_c8": "argPtrList",
                "local_c4": "resultLength",
                "local_c0": "hexChars",
                "local_a1": "signChar",
                "local_a0": "paddingChar",
                "local_9f": "hexPrefix",
                "local_9c": "curBufferPtr",
                "local_98": "numAddedArgs",
                "local_94": "bufferTailPtr",
                "local_90": "paddingChar",
                "cStack_6a": "fillChar",
                "local_69": "hexChar",
                "local_68": "formatBuffer",
                "local_64": "argPtrStack"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "decode_data_000834f0",
            "code": "\nint decodeData_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int checkResult;\n  undefined *buffer [2];\n  undefined4 bufferSize;\n  ushort flag;\n  undefined2 value;\n  undefined *currentBuffer;\n  undefined4 copySize;\n  undefined4 offset;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  undefined tempBuffer [1024];\n  \n  ptr3 = *(undefined4 *)(param2 + 100);\n  ptr1 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  ptr2 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = tempBuffer;\n  flag = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  copySize = 0x400;\n  offset = 0;\n  currentBuffer = buffer[0];\n  result = FUN_0008289c(param1,buffer);\n  if ((-1 < result) && (checkResult = FUN_00083850(param1,buffer), checkResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "decode_data_000834f0",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "checkResult",
                "local_488": "buffer",
                "local_480": "bufferSize",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "currentBuffer",
                "local_474": "copySize",
                "local_470": "offset",
                "local_46c": "ptr1",
                "local_464": "ptr2",
                "local_424": "ptr3",
                "auStack_420": "tempBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_data_0008356c",
            "code": "\nundefined4 process_data_0008356c(undefined4 *output_status,int *input_data)\n\n{\n  int index;\n  int tempVar;\n  uint uValue;\n  ushort uFlag;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uFlag = *(ushort *)(input_data + 3);\n  uValue = (uint)uFlag;\n  if ((int)(uValue << 0x1c) < 0) {\n    tempVar = input_data[4];\n  }\n  else {\n    if (-1 < (int)(uValue << 0x1b)) {\n      *output_status = 9;\n      *(ushort *)(input_data + 3) = uFlag | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(uValue << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          FUN_00083b10(output_status);\n          uFlag = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      tempVar = input_data[4];\n      uFlag = uFlag & 0xffdb;\n      *input_data = tempVar;\n      input_data[1] = 0;\n    }\n    else {\n      tempVar = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = uFlag | 8;\n    uValue = (uint)(uFlag | 8);\n  }\n  if ((tempVar == 0) && ((uValue & 0x280) != 0x200)) {\n    FUN_00084018(output_status,input_data);\n    uValue = (uint)*(ushort *)(input_data + 3);\n    tempVar = input_data[4];\n  }\n  if ((uValue & 1) == 0) {\n    index = 0;\n    if (-1 < (int)(uValue << 0x1e)) {\n      index = input_data[5];\n    }\n    input_data[2] = index;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((tempVar == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_data_0008356c",
                "param_1": "output_status",
                "param_2": "input_data",
                "iVar1": "index",
                "iVar2": "tempVar",
                "uVar3": "uValue",
                "uVar4": "uFlag"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_relocations_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeRelocations_000836ec(void)\n\n{\n  dword *relocations;\n  dword result;\n  int currentIndex;\n  code *unrecoveredJumpTable;\n  \n  FUN_000841e4(6);\n  unrecoveredJumpTable = (code *)0x836fb;\n  result = FUN_00080eec(1);\n  if (relocationsArray[48].r_offset == 0) {\n    relocationsArray[48].r_offset = 0x20070184;\n  }\n  currentIndex = *(int *)(relocationsArray[48].r_offset + 4);\n  relocations = (dword *)relocationsArray[48].r_offset;\n  if (0x1f < currentIndex) {\n    relocations = (dword *)FUN_000817f0(400);\n    if (relocations == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    *relocations = relocationsArray[48].r_offset;\n    relocations[1] = 0;\n    currentIndex = 0;\n    relocationsArray[48].r_offset = (dword)relocations;\n    relocations[0x62] = 0;\n    relocations[99] = 0;\n  }\n  relocations[1] = currentIndex + 1;\n  relocations[currentIndex + 2] = result;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_relocations_000836ec",
                "pdVar1": "relocations",
                "dVar2": "result",
                "iVar3": "currentIndex",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "Elf32_Rel_ARRAY_20070000": "relocationsArray"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_000841e4",
                "FUN_00080eec",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "perform_data_processing_00083850",
            "code": "\nundefined4 performDataProcessing_00083850(int *dataPointer,int *configPointer)\n\n{\n  int *pointerVar1;\n  int integerVar2;\n  ushort ushortVar3;\n  uint uintVar4;\n  int integerVar5;\n  code *functionPointerVar6;\n  undefined4 unaff_r4;\n  int integerVar7;\n  \n  if ((dataPointer != (int *)0x0) && (dataPointer[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(configPointer + 3) == 0) {\n    return 0;\n  }\n  ushortVar3 = *(ushort *)(configPointer + 3);\n  if ((int)((uint)ushortVar3 << 0x1c) < 0) {\n    integerVar7 = configPointer[4];\n    if (integerVar7 == 0) {\n      return 0;\n    }\n    integerVar2 = *configPointer;\n    if ((ushortVar3 & 3) == 0) {\n      integerVar5 = configPointer[5];\n    }\n    else {\n      integerVar5 = 0;\n    }\n    *configPointer = integerVar7;\n    integerVar2 = integerVar2 - integerVar7;\n    configPointer[2] = integerVar5;\n    do {\n      if (integerVar2 < 1) {\n        return 0;\n      }\n      integerVar5 = (*(code *)configPointer[9])(dataPointer,configPointer[7],integerVar7,integerVar2,unaff_r4);\n      integerVar2 = integerVar2 - integerVar5;\n      integerVar7 = integerVar7 + integerVar5;\n    } while (0 < integerVar5);\nLAB_000837c8:\n    *(ushort *)(configPointer + 3) = *(ushort *)(configPointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(configPointer + 3) = ushortVar3 | 0x800;\n  if ((configPointer[1] < 1) && (configPointer[0xf] < 1)) {\n    return 0;\n  }\n  functionPointerVar6 = (code *)configPointer[10];\n  if (functionPointerVar6 == (code *)0x0) {\n    return 0;\n  }\n  uintVar4 = (uint)(ushortVar3 | 0x800);\n  integerVar7 = *dataPointer;\n  *dataPointer = 0;\n  if ((ushortVar3 & 0x1000) == 0) {\n    integerVar2 = (*functionPointerVar6)(dataPointer,configPointer[7],uintVar4 & 0x1000,1);\n    if ((integerVar2 == -1) && (integerVar5 = *dataPointer, integerVar5 != 0)) {\n      if ((integerVar5 == 0x1d) || (integerVar5 == 0x16)) {\n        *dataPointer = integerVar7;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    uintVar4 = (uint)*(ushort *)(configPointer + 3);\n    functionPointerVar6 = (code *)configPointer[10];\n  }\n  else {\n    integerVar2 = configPointer[0x14];\n  }\n  if (((int)(uintVar4 << 0x1d) < 0) && (integerVar2 = integerVar2 - configPointer[1], configPointer[0xc] != 0)) {\n    integerVar2 = integerVar2 - configPointer[0xf];\n  }\n  integerVar2 = (*functionPointerVar6)(dataPointer,configPointer[7],integerVar2,0);\n  if (integerVar2 == -1) {\n    integerVar5 = *dataPointer;\n    if (integerVar5 != 0) {\n      if ((integerVar5 != 0x1d) && (integerVar5 != 0x16)) {\n        *(ushort *)(configPointer + 3) = *(ushort *)(configPointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(configPointer + 3) = *(ushort *)(configPointer + 3) & 0xf7ff;\n      *configPointer = configPointer[4];\n      configPointer[1] = 0;\n      goto LAB_00083774;\n    }\n    ushortVar3 = *(ushort *)(configPointer + 3) & 0xf7ff;\n    configPointer[1] = 0;\n    *(ushort *)(configPointer + 3) = ushortVar3;\n    *configPointer = configPointer[4];\n  }\n  else {\n    ushortVar3 = *(ushort *)(configPointer + 3) & 0xf7ff;\n    *configPointer = configPointer[4];\n    *(ushort *)(configPointer + 3) = ushortVar3;\n    configPointer[1] = 0;\n  }\n  if ((int)((uint)ushortVar3 << 0x13) < 0) {\n    configPointer[0x14] = integerVar2;\n  }\nLAB_00083774:\n  pointerVar1 = (int *)configPointer[0xc];\n  *dataPointer = integerVar7;\n  if (pointerVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (pointerVar1 != configPointer + 0x10) {\n    FUN_00083b10(dataPointer);\n  }\n  configPointer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "perform_data_processing_00083850",
                "param_1": "dataPointer",
                "param_2": "configPointer",
                "piVar1": "pointerVar1",
                "iVar2": "integerVar2",
                "uVar3": "ushortVar3",
                "uVar4": "uintVar4",
                "iVar5": "integerVar5",
                "pcVar6": "functionPointerVar6",
                "iVar7": "integerVar7"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStructures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStructures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "copy_and_process_data_000839b4",
            "code": "\nuint copy_and_process_data_000839b4(undefined4 input,uint length,byte **data)\n\n{\n  int result;\n  uint temp;\n  uint byte_value;\n  byte *byte_ptr;\n  uint loop_count;\n  byte current_byte;\n  byte byte_stack [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  result = FUN_0008400c();\n  if ((result == 1) && (length - 1 < 0xff)) {\n    byte_value = length & 0xff;\n    current_byte = (byte)byte_value;\n    temp = 1;\n  }\n  else {\n    temp = FUN_0008434c(input,&current_byte,length,data + 0x17);\n    if (temp == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (temp == 0) {\n      return length;\n    }\n    byte_value = (uint)current_byte;\n  }\n  loop_count = 0;\n  do {\n    byte_ptr = data[2] + -1;\n    data[2] = byte_ptr;\n    if ((int)byte_ptr < 0) {\n      if ((int)data[6] <= (int)byte_ptr) {\n        **data = (byte)byte_value;\n        byte_ptr = *data;\n        byte_value = (uint)*byte_ptr;\n        if (byte_value != 10) goto LAB_00083a04;\n      }\n      result = FUN_000842a4(input,byte_value,data);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)byte_value;\n      byte_ptr = *data;\nLAB_00083a04:\n      *data = byte_ptr + 1;\n    }\n    if (temp <= loop_count + 1) {\n      return length;\n    }\n    byte_value = (uint)byte_stack[loop_count];\n    loop_count = loop_count + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "copy_and_process_data_000839b4",
                "param_1": "input",
                "param_2": "length",
                "param_3": "data",
                "iVar1": "result",
                "uVar2": "temp",
                "uVar3": "byte_value",
                "pbVar4": "byte_ptr",
                "uVar5": "loop_count",
                "local_1c": "current_byte",
                "abStack_1b": "byte_stack"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "calculate_new_address_00083a74",
            "code": "\nundefined4 calculateNewAddress_00083a74(undefined4 param1,int param2)\n\n{\n  int result1;\n  uint maskedRel;\n  int newAddress;\n  \n  FUNC_00081f94();\n  maskedRel = *(uint *)(relocationsArray[141].r_info + 4) & 0xfffffffc;\n  newAddress = ((maskedRel - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newAddress) {\n    result1 = FUN_0008236c(param1,0);\n    if (result1 == relocationsArray[141].r_info + maskedRel) {\n      result1 = FUN_0008236c(param1,-newAddress);\n      if (result1 != -1) {\n        DAT_2007121c = DAT_2007121c - newAddress;\n        *(uint *)(relocationsArray[141].r_info + 4) = maskedRel - newAddress | 1;\n        FUNC_00081f98(param1);\n        return 1;\n      }\n      newAddress = FUN_0008236c(param1,0);\n      if (0xf < (int)(newAddress - relocationsArray[141].r_info)) {\n        DAT_2007121c = newAddress - relocationsArray[270].r_offset;\n        *(dword *)(relocationsArray[141].r_info + 4) =\n             newAddress - relocationsArray[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "calculate_new_address_00083a74",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result1",
                "uVar2": "maskedRel",
                "iVar3": "newAddress",
                "Elf32_Rel_ARRAY_20070000": "relocationsArray"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "reorganize_function_00083b10",
            "code": "\nvoid reorganizeFunction_00083b10(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool flag;\n  uint value1;\n  dword address1;\n  int index2;\n  uint value2;\n  dword address2;\n  uint value3;\n  dword address3;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  value1 = *(uint *)(param2 + -4);\n  address2 = param2 - 8;\n  value2 = value1 & 0xfffffffe;\n  address1 = address2 + value2;\n  value3 = *(uint *)(address1 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == address1) {\n    value3 = value3 + value2;\n    if (-1 < (int)(value1 << 0x1f)) {\n      address2 = address2 - *(int *)(param2 + -8);\n      index2 = *(int *)(address2 + 0xc);\n      index1 = *(int *)(address2 + 8);\n      value3 = value3 + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    address1 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(address2 + 4) = value3 | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = address2;\n    if (address1 <= value3) {\n      FUN_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(address1 + 4) = value3;\n    if ((value1 & 1) == 0) {\n      address2 = address2 - *(int *)(param2 + -8);\n      index1 = *(int *)(address2 + 8);\n      value2 = value2 + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(address2 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(address1 + value3 + 4) << 0x1f) {\n      value2 = value2 + value3;\n      index1 = *(int *)(address1 + 8);\n      if ((!flag) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = address2;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = address2;\n        *(undefined4 *)(address2 + 0xc) = 0x2007046c;\n        *(undefined4 *)(address2 + 8) = 0x2007046c;\n        *(uint *)(address2 + 4) = value2 | 1;\n        *(uint *)(address2 + value2) = value2;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(address1 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(address2 + 4) = value2 | 1;\n    *(uint *)(address2 + value2) = value2;\n    if (!flag) {\n      if (value2 < 0x200) {\n        value1 = value2 & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value1);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(value2 >> 3) >> 2 & 0xffU);\n        *(int *)(address2 + 8) = index1;\n        *(uint *)(address2 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value1) = address2;\n        *(dword *)(index1 + 0xc) = address2;\n        FUNC_00081f98(param1);\n        return;\n      }\n      value1 = value2 >> 9;\n      if (value1 < 5) {\n        index1 = (value2 >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x15) {\n        index1 = value1 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x55) {\n        index1 = (value2 >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x155) {\n        index1 = (value2 >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x555) {\n        index1 = (value2 >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      address3 = index2 * 4 + 0x20070464;\n      address1 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (address1 == address3) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        address3 = address1;\n      }\n      else {\n        do {\n          if ((*(uint *)(address1 + 4) & 0xfffffffc) <= value2) break;\n          address1 = *(dword *)(address1 + 8);\n        } while (address3 != address1);\n        address3 = *(dword *)(address1 + 0xc);\n      }\n      *(dword *)(address2 + 0xc) = address3;\n      *(dword *)(address2 + 8) = address1;\n      *(dword *)(address3 + 8) = address2;\n      *(dword *)(address1 + 0xc) = address2;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "reorganize_function_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "flag",
                "uVar3": "value1",
                "dVar4": "address1",
                "iVar5": "index2",
                "uVar6": "value2",
                "dVar7": "address2",
                "uVar8": "value3",
                "dVar9": "address3"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081800",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "perform_data_processing_00083ca8",
            "code": "\nundefined4 performDataProcessing_00083ca8(undefined4 *inputArray,uint *dataArray,uint **additionalData)\n\n{\n  int returnValue;\n  uint tempVar1;\n  uint tempVar2;\n  ushort flagVar;\n  uint flagValue;\n  uint *ptrVar1;\n  uint *ptrVar2;\n  uint valueVar;\n  uint tempValue;\n  uint tempVar3;\n  uint tempVar4;\n  uint localVar;\n  \n  if (additionalData[2] != (uint *)0x0) {\n    flagVar = *(ushort *)(dataArray + 3);\n    flagValue = (uint)flagVar;\n    if (((int)(flagValue << 0x1c) < 0) && (dataArray[4] != 0)) {\n      ptrVar2 = *additionalData;\n    }\n    else {\n      returnValue = FUN_0008356c(inputArray,dataArray);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flagVar = *(ushort *)(dataArray + 3);\n      flagValue = (uint)flagVar;\n      ptrVar2 = *additionalData;\n    }\n    if ((flagVar & 2) == 0) {\n      tempVar1 = flagValue & 2;\n      tempVar3 = tempVar1;\n      valueVar = tempVar1;\n      localVar = tempVar1;\n      if ((flagValue & 1) == 0) {\n        tempVar1 = 0;\n        tempVar3 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            tempVar3 = *ptrVar2;\n            ptrVar1 = ptrVar2 + 1;\n            ptrVar2 = ptrVar2 + 2;\n            tempVar1 = *ptrVar1;\n          }\n          valueVar = dataArray[2];\n          if ((int)(flagValue << 0x16) < 0) {\n            if (tempVar1 < valueVar) {\n              flagValue = *dataArray;\n              valueVar = tempVar1;\n            }\n            else if ((flagValue & 0x480) == 0) {\n              flagValue = *dataArray;\n            }\n            else {\n              returnValue = *dataArray - dataArray[4];\n              valueVar = returnValue + 1 + tempVar1;\n              tempValue = (int)(dataArray[5] * 3) / 2;\n              if (valueVar <= tempValue) {\n                valueVar = tempValue;\n              }\n              if ((int)(flagValue << 0x15) < 0) {\n                tempValue = FUN_00081810(inputArray,valueVar);\n                if (tempValue == 0) {\n                  *inputArray = 0xc;\n                  flagVar = *(ushort *)(dataArray + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(tempValue,dataArray[4],returnValue);\n                *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempValue = FUN_00081fac(inputArray);\n                if (tempValue == 0) {\n                  FUN_00083b10(inputArray,dataArray[4]);\n                  flagVar = *(ushort *)(dataArray + 3) & 0xff7f;\n                  *inputArray = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              flagValue = tempValue + returnValue;\n              dataArray[4] = tempValue;\n              dataArray[5] = valueVar;\n              *dataArray = flagValue;\n              dataArray[2] = valueVar - returnValue;\n              valueVar = tempVar1;\n            }\n            FUN_00081e34(flagValue,tempVar3,valueVar);\n            dataArray[2] = dataArray[2] - valueVar;\n            *dataArray = *dataArray + valueVar;\n            valueVar = tempVar1;\n          }\n          else if ((dataArray[4] < *dataArray) || (flagValue = dataArray[5], tempVar1 < flagValue)) {\n            if (tempVar1 < valueVar) {\n              valueVar = tempVar1;\n            }\n            FUN_00081e34(*dataArray,tempVar3,valueVar);\n            flagValue = dataArray[2];\n            dataArray[2] = flagValue - valueVar;\n            *dataArray = *dataArray + valueVar;\n            if ((flagValue - valueVar == 0) && (returnValue = FUN_00083850(inputArray,dataArray), returnValue != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            valueVar = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              valueVar = tempVar1;\n            }\n            valueVar = (*(code *)dataArray[9])(inputArray,dataArray[7],tempVar3,(valueVar / flagValue) * flagValue);\n            if ((int)valueVar < 1) goto LAB_00083da2;\n          }\n          ptrVar1 = additionalData[2];\n          tempVar3 = tempVar3 + valueVar;\n          tempVar1 = tempVar1 - valueVar;\n          additionalData[2] = (uint *)((int)ptrVar1 - valueVar);\n          if ((uint *)((int)ptrVar1 - valueVar) == (uint *)0x0) break;\n          flagValue = (uint)*(ushort *)(dataArray + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            valueVar = *ptrVar2;\n            tempVar1 = ptrVar2[1];\n            localVar = 0;\n            ptrVar2 = ptrVar2 + 2;\n          }\n          if (localVar == 0) {\n            returnValue = FUN_000840f8(valueVar,10,tempVar1);\n            if (returnValue == 0) {\n              tempVar3 = tempVar1 + 1;\n              localVar = 1;\n            }\n            else {\n              tempVar3 = (returnValue + 1) - valueVar;\n              localVar = 1;\n            }\n          }\n          tempValue = *dataArray;\n          flagValue = tempVar3;\n          if (tempVar1 <= tempVar3) {\n            flagValue = tempVar1;\n          }\n          tempVar2 = dataArray[5];\n          if ((dataArray[4] < tempValue) && (tempVar4 = dataArray[2] + tempVar2, (int)tempVar4 < (int)flagValue)) {\n            FUN_00081e34(tempValue,valueVar,tempVar4);\n            *dataArray = *dataArray + tempVar4;\n            returnValue = FUN_00083850(inputArray,dataArray);\n            if (returnValue != 0) goto LAB_00083da2;\n          }\n          else if ((int)flagValue < (int)tempVar2) {\n            FUN_00081e34(tempValue,valueVar,flagValue);\n            dataArray[2] = dataArray[2] - flagValue;\n            *dataArray = flagValue + *dataArray;\n            tempVar4 = flagValue;\n          }\n          else {\n            tempVar4 = (*(code *)dataArray[9])(inputArray,dataArray[7],valueVar,tempVar2);\n            if ((int)tempVar4 < 1) goto LAB_00083da2;\n          }\n          tempVar3 = tempVar3 - tempVar4;\n          if (tempVar3 == 0) {\n            returnValue = FUN_00083850(inputArray,dataArray);\n            if (returnValue != 0) goto LAB_00083da2;\n            localVar = 0;\n          }\n          ptrVar1 = additionalData[2];\n          valueVar = valueVar + tempVar4;\n          tempVar1 = tempVar1 - tempVar4;\n          additionalData[2] = (uint *)((int)ptrVar1 - tempVar4);\n        } while ((uint *)((int)ptrVar1 - tempVar4) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      flagValue = 0;\n      do {\n        while( true ) {\n          tempVar3 = flagValue;\n          if (0x7ffffbff < flagValue) {\n            tempVar3 = 0x7ffffc00;\n          }\n          if (flagValue != 0) break;\n          tempVar1 = *ptrVar2;\n          flagValue = ptrVar2[1];\n          ptrVar2 = ptrVar2 + 2;\n        }\n        returnValue = (*(code *)dataArray[9])(inputArray,dataArray[7],tempVar1,tempVar3);\n        if (returnValue < 1) {\nLAB_00083da2:\n          flagVar = *(ushort *)(dataArray + 3);\nLAB_00083da4:\n          *(ushort *)(dataArray + 3) = flagVar | 0x40;\n          return 0xffffffff;\n        }\n        ptrVar1 = additionalData[2];\n        tempVar1 = tempVar1 + returnValue;\n        flagValue = flagValue - returnValue;\n        additionalData[2] = (uint *)((int)ptrVar1 - returnValue);\n      } while ((uint *)((int)ptrVar1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "perform_data_processing_00083ca8",
                "param_1": "inputArray",
                "param_2": "dataArray",
                "param_3": "additionalData",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "flagVar",
                "uVar5": "flagValue",
                "puVar6": "ptrVar1",
                "puVar7": "ptrVar2",
                "uVar8": "valueVar",
                "uVar9": "tempValue",
                "uVar10": "tempVar3",
                "uVar11": "tempVar4",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_offset_value_0008400c",
            "code": "\ndword getOffsetValue_0008400c(void)\n\n{\n  return relArray[275].r_offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_offset_value_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "check_and_process_data_00084018",
            "code": "\nvoid checkAndProcessData_00084018(int data,int *result)\n\n{\n  ushort value_1;\n  int value_2;\n  int value_3;\n  uint value_4;\n  bool flag;\n  undefined temp_array [4];\n  uint local_value;\n  \n  value_1 = *(ushort *)(result + 3);\n  value_4 = (uint)value_1;\n  if ((int)(value_4 << 0x1e) < 0) {\n    *result = (int)result + 0x43;\n    result[4] = (int)result + 0x43;\n    result[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)result + 0xe)) {\n    value_2 = FUN_00084494(data,(int)*(short *)((int)result + 0xe),temp_array);\n    if (-1 < value_2) {\n      flag = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (result[10] == 0x8427d)) {\n        value_2 = 0x400;\n        *(ushort *)(result + 3) = *(ushort *)(result + 3) | 0x400;\n        result[0x13] = 0x400;\n      }\n      else {\n        value_2 = 0x400;\n        *(ushort *)(result + 3) = *(ushort *)(result + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    value_1 = *(ushort *)(result + 3);\n    value_4 = (uint)value_1;\n  }\n  *(ushort *)(result + 3) = value_1 | 0x800;\n  if ((value_4 & 0x80) == 0) {\n    value_2 = 0x400;\n  }\n  else {\n    value_2 = 0x40;\n  }\n  flag = false;\nLAB_00084074:\n  value_3 = FUN_00081810(data,value_2);\n  value_1 = *(ushort *)(result + 3);\n  if (value_3 == 0) {\n    if (-1 < (int)((uint)value_1 << 0x16)) {\n      *(ushort *)(result + 3) = value_1 | 2;\n      *result = (int)result + 0x43;\n      result[4] = (int)result + 0x43;\n      result[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(result + 3) = value_1 | 0x80;\n    *result = value_3;\n    result[4] = value_3;\n    result[5] = value_2;\n    if ((flag) && (value_2 = FUN_000844bc(data,(int)*(short *)((int)result + 0xe)), value_2 != 0))\n    {\n      *(ushort *)(result + 3) = *(ushort *)(result + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "check_and_process_data_00084018",
                "param_1": "data",
                "param_2": "result",
                "uVar1": "value_1",
                "iVar2": "value_2",
                "iVar3": "value_3",
                "uVar4": "value_4",
                "bVar5": "flag",
                "auStack_54": "temp_array",
                "local_50": "local_value"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00084494",
                "FUN_000844bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_character_sequence_000840f8",
            "code": "\nuint * find_character_sequence_000840f8(uint *sequence,char character,uint length)\n\n{\n  uint result;\n  int index;\n  uint *current_ptr;\n  bool end_reached;\n  \n  if (((uint)sequence & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      current_ptr = sequence;\n      do {\n        result = *current_ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        sequence = current_ptr;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) break;\n        length = length - 4;\n        sequence = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      sequence = (uint *)0x0;\n    }\n    else if (*(char *)sequence != character) {\n      index = 0;\n      do {\n        sequence = (uint *)((int)sequence + 1);\n        end_reached = index == length - 1;\n        index = index + 1;\n        if (end_reached) goto LAB_00084150;\n      } while (*(char *)sequence != character);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    sequence = (uint *)0x0;\n  }\n  else if (*(char *)sequence != character) {\n    current_ptr = (uint *)((int)sequence + 1);\n    length = length - 1;\n    do {\n      sequence = current_ptr;\n      if (((uint)sequence & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      current_ptr = (uint *)((int)sequence + 1);\n      length = length - 1;\n    } while (*(char *)sequence != character);\n  }\n  return sequence;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_character_sequence_000840f8",
                "param_1": "sequence",
                "param_2": "character",
                "param_3": "length",
                "uVar1": "result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "end_reached"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "process_parameter_000841e4",
            "code": "\nint processParameter_000841e4(uint input)\n\n{\n  dword offset;\n  undefined4 thunkResult;\n  int data;\n  code *functionPtr;\n  undefined4 unusedRegister1;\n  undefined4 unusedRegister2;\n  undefined4 unusedRegister3;\n  undefined4 constantValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constantValue = 0x20070460;\n  if (0x1f < input) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  data = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((data == 0) || (functionPtr = *(code **)(data + input * 4), functionPtr == (code *)0x0)) {\n    thunkResult = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    data = FUNC_00080efc(thunkResult,input,input,0,constantValue,unusedRegister1,unusedRegister2,unusedRegister3);\n    if ((data == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return data;\n  }\n  if (functionPtr == (code *)0x1) {\n    return 0;\n  }\n  if (functionPtr != (code *)0xffffffff) {\n    *(undefined4 *)(data + input * 4) = 0;\n    (*functionPtr)(input);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "process_parameter_000841e4",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "thunkResult",
                "iVar3": "data",
                "pcVar4": "functionPtr",
                "unaff_r4": "unusedRegister1",
                "unaff_r5": "unusedRegister2",
                "in_lr": "unusedRegister3",
                "uVar5": "constantValue"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_value_if_greater_00084220",
            "code": "\nvoid updateValueIfGreater_00084220(undefined4 inputPtr,int dataPtr)\n\n{\n  int value;\n  \n  value = FUN_00084508(inputPtr,(int)*(short *)(dataPtr + 0xe));\n  if (-1 < value) {\n    *(int *)(dataPtr + 0x50) = *(int *)(dataPtr + 0x50) + value;\n    return;\n  }\n  *(ushort *)(dataPtr + 0xc) = *(ushort *)(dataPtr + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_value_if_greater_00084220",
                "param_1": "inputPtr",
                "param_2": "dataPtr",
                "iVar1": "value"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "extract_data_00084244",
            "code": "\nvoid extractData_00084244(int *result,int data,undefined4 value1,undefined4 value2)\n\n{\n  int status;\n  ushort flag;\n  undefined4 variable1;\n  undefined4 variable2;\n  undefined4 variable3;\n  undefined4 variable4;\n  \n  flag = *(ushort *)(data + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    FUN_000844e0(result,(int)*(short *)(data + 0xe),0,2);\n    flag = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = flag & 0xefff;\n  DAT_20071244 = 0;\n  status = FUN_00080ec8((int)*(short *)(data + 0xe),value1,value2,value2,variable1,variable2,\n                       variable3,variable4);\n  if ((status == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "extract_data_00084244",
                "param_1": "result",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "status",
                "uVar2": "flag",
                "unaff_r4": "variable1",
                "unaff_r5": "variable2",
                "unaff_r6": "variable3",
                "in_lr": "variable4"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_status_0008427c",
            "code": "\nvoid updateStatus_0008427c(undefined4 param_1,int status)\n\n{\n  int result;\n  ushort updatedFlag;\n  \n  result = FUN_000844e0(param_1,(int)*(short *)(status + 0xe));\n  if (result == -1) {\n    updatedFlag = *(ushort *)(status + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(status + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(status + 0x50) = result;\n  }\n  *(ushort *)(status + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "param_2": "status",
                "iVar1": "result",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint processData_000842a4(int input,uint flag,undefined4 *buffer,undefined4 value)\n\n{\n  ushort temp;\n  uint temp2;\n  undefined *ptr;\n  int counter;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  temp = *(ushort *)(buffer + 3);\n  temp2 = (uint)temp;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(temp2 << 0x1c)) || (counter = buffer[4], counter == 0)) {\n    counter = FUN_0008356c(input,buffer,temp,temp2,value);\n    if (counter != 0) {\n      return 0xffffffff;\n    }\n    temp = *(ushort *)(buffer + 3);\n    counter = buffer[4];\n    temp2 = (uint)temp;\n  }\n  flag = flag & 0xff;\n  if ((int)(temp2 << 0x12) < 0) {\n    ptr = (undefined *)*buffer;\n    counter = (int)ptr - counter;\n    if (counter < (int)buffer[5]) {\nLAB_000842d6:\n      counter = counter + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = temp | 0x2000;\n    counter = (int)ptr - counter;\n    if (counter < (int)buffer[5]) goto LAB_000842d6;\n  }\n  counter = FUN_00083850(input,buffer);\n  if (counter != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*buffer;\n  counter = 1;\nLAB_000842d8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = ptr + 1;\n  *ptr = (char)flag;\n  if (((buffer[5] == counter) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (counter = FUN_00083850(input,buffer), counter != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "buffer",
                "param_4": "value",
                "uVar1": "temp",
                "uVar2": "temp2",
                "puVar3": "ptr",
                "iVar4": "counter"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_relocation_0008434c",
            "code": "\nvoid executeRelocation_0008434c(undefined4 *outParam,int size,undefined4 inputParam,undefined4 *result)\n\n{\n  info dVar1;\n  undefined4 returnValue;\n  int status;\n  undefined stackBuffer [12];\n  \n  dVar1 = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    returnValue = FUN_00084004();\n    status = (*(code *)dVar1)(outParam,stackBuffer,0,returnValue,result);\n  }\n  else {\n    returnValue = FUN_00084004();\n    status = (*(code *)dVar1)(outParam,size,inputParam,returnValue,result);\n  }\n  if (status == -1) {\n    *result = 0;\n    *outParam = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_relocation_0008434c",
                "param_1": "outParam",
                "param_2": "size",
                "param_3": "inputParam",
                "param_4": "result",
                "dword": "info",
                "uVar2": "returnValue",
                "iVar3": "status",
                "auStack_24": "stackBuffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "write_byte_0008439c",
            "code": "\nundefined4 write_byte_0008439c(undefined4 *output_ptr,undefined *input_ptr,uint value)\n\n{\n  if (input_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *input_ptr = (char)value;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "write_byte_0008439c",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_param_00084484",
            "code": "\nundefined4 processParam_00084484(int inputValue)\n\n{\n  dword offset;\n  undefined4 returnValue;\n  int result;\n  \n  offset = relArray[140].r_offset;\n  if (inputValue != 0) {\n    if ((relArray[140].r_offset != 0) &&\n       (*(int *)(relArray[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(inputValue + 0xc) != 0) {\n      returnValue = FUN_00083850(offset,inputValue);\n      if ((*(code **)(inputValue + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(inputValue + 0x2c))(offset,*(undefined4 *)(inputValue + 0x1c)), result < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputValue + 0xc) << 0x18) < 0) {\n        FUN_00083b10(offset,*(undefined4 *)(inputValue + 0x10));\n      }\n      if (*(int *)(inputValue + 0x30) != 0) {\n        if (*(int *)(inputValue + 0x30) != inputValue + 0x40) {\n          FUN_00083b10(offset);\n        }\n        *(undefined4 *)(inputValue + 0x30) = 0;\n      }\n      if (*(int *)(inputValue + 0x44) != 0) {\n        FUN_00083b10(offset);\n        *(undefined4 *)(inputValue + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(inputValue + 0xc) = 0;\n      FUNC_00083980();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_param_00084484",
                "param_1": "inputValue",
                "dVar1": "offset",
                "uVar2": "returnValue",
                "iVar3": "result",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [],
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "check_and_set_data_00084494",
            "code": "\nvoid checkAndSetData_00084494(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080eb0(value1,value2,value2,0,value3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "check_and_set_data_00084494",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_assign_error_code_000844bc",
            "code": "\nvoid checkAndAssignErrorCode_000844bc(int *result,undefined4 inputValue)\n\n{\n  int errorCode;\n  \n  DAT_20071244 = 0;\n  errorCode = FUN_00080eba(inputValue);\n  if ((errorCode == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_assign_error_code_000844bc",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "check_and_assign_error_000844e0",
            "code": "\nvoid checkAndAssignError_000844e0(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080ebe(arg1,arg2,arg3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "check_and_assign_error_000844e0",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "check_and_assign_value_00084508",
            "code": "\nvoid checkAndAssignValue_00084508(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080ec2(value1,value2,value3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "check_and_assign_value_00084508",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_parameters_00084530",
            "code": "\nint checkParameters_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_parameters_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_and_adjust_0008455c",
            "code": "\nvoid subtract_and_adjust_0008455c(uint num1,int num2,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000845c0();\n  product = product * CONCAT44(param4,param3);\n  result = (uint)product;\n  *result_array = num1 - result;\n  result_array[1] = (num2 - (int)((ulonglong)product >> 0x20)) - (uint)(num1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_and_adjust_0008455c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "subtract_and_adjust_0008458c",
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value_1,int input_value_2,undefined4 param_3,undefined4 param_4,int *output_values)\n\n{\n  uint result;\n  longlong temp_result;\n  \n  temp_result = FUN_00084860();\n  temp_result = temp_result * CONCAT44(param_4,param_3);\n  result = (uint)temp_result;\n  *output_values = input_value_1 - result;\n  output_values[1] = (input_value_2 - (int)((ulonglong)temp_result >> 0x20)) - (uint)(input_value_1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_5": "output_values",
                "uVar1": "result",
                "lVar2": "temp_result"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_with_remainder_000845c0",
            "code": "\nundefined8 divideWithRemainder_000845c0(uint dividend,uint dividendLow,uint divisor,uint divisorLow)\n\n{\n  longlong quotient;\n  uint quotientLow;\n  uint quotientHigh;\n  uint remainderLow;\n  uint remainderHigh;\n  int shiftAmount;\n  uint tmp1;\n  uint tmp2;\n  uint isNegativeDividend;\n  uint initialGuess;\n  uint quotientGuess;\n  uint tmp3;\n  bool carryFlag;\n  \n  if ((int)dividendLow < 0) {\n    carryFlag = dividend != 0;\n    dividend = -dividend;\n    dividendLow = -dividendLow - (uint)carryFlag;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorLow < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    carryFlag = divisor != 0;\n    divisor = -divisor;\n    divisorLow = -divisorLow - (uint)carryFlag;\n  }\n  if (divisorLow == 0) {\n    if (dividendLow < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        quotientHigh = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendLow = dividendLow << shiftAmount | quotientHigh;\n      }\n      quotientLow = divisor >> 0x10;\n      remainderLow = dividendLow / quotientLow;\n      tmp1 = (divisor & 0xffff) * remainderLow;\n      initialGuess = dividend >> 0x10 | (dividendLow - quotientLow * remainderLow) * 0x10000;\n      quotientHigh = remainderLow;\n      if (initialGuess <= tmp1 && tmp1 - initialGuess != 0) {\n        carryFlag = CARRY4(initialGuess,divisor);\n        initialGuess = initialGuess + divisor;\n        quotientHigh = remainderLow - 1;\n        if ((carryFlag == false) && (initialGuess <= tmp1 && tmp1 - initialGuess != 0)) {\n          quotientHigh = remainderLow - 2;\n          initialGuess = initialGuess + divisor;\n        }\n      }\n      tmp2 = (initialGuess - tmp1) / quotientLow;\n      remainderLow = (divisor & 0xffff) * tmp2;\n      tmp1 = dividend & 0xffff | ((initialGuess - tmp1) - quotientLow * tmp2) * 0x10000;\n      quotientLow = tmp2;\n      if (tmp1 <= remainderLow && remainderLow - tmp1 != 0) {\n        quotientLow = tmp2 - 1;\n        if ((CARRY4(tmp1,divisor) == false) &&\n           (tmp1 + divisor <= remainderLow && remainderLow - (tmp1 + divisor) != 0)) {\n          quotientLow = tmp2 - 2;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendLow = dividendLow - divisor;\n        remainderLow = divisor >> 0x10;\n        tmp3 = divisor & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotientHigh = dividendLow >> (0x20U - shiftAmount & 0xff);\n        remainderLow = divisor >> 0x10;\n        initialGuess = quotientHigh / remainderLow;\n        tmp3 = divisor & 0xffff;\n        tmp1 = tmp3 * initialGuess;\n        tmp2 = dividend >> (0x20U - shiftAmount & 0xff) | dividendLow << shiftAmount;\n        quotientHigh = tmp2 >> 0x10 | (quotientHigh - remainderLow * initialGuess) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientLow = initialGuess;\n        if (quotientHigh <= tmp1 && tmp1 - quotientHigh != 0) {\n          carryFlag = CARRY4(quotientHigh,divisor);\n          quotientHigh = quotientHigh + divisor;\n          quotientLow = initialGuess - 1;\n          if ((carryFlag == false) && (quotientHigh <= tmp1 && tmp1 - quotientHigh != 0)) {\n            quotientLow = initialGuess - 2;\n            quotientHigh = quotientHigh + divisor;\n          }\n        }\n        remainderHigh = (quotientHigh - tmp1) / remainderLow;\n        initialGuess = tmp3 * remainderHigh;\n        dividendLow = tmp2 & 0xffff | ((quotientHigh - tmp1) - remainderLow * remainderHigh) * 0x10000;\n        quotientHigh = remainderHigh;\n        if (dividendLow <= initialGuess && initialGuess - dividendLow != 0) {\n          carryFlag = CARRY4(dividendLow,divisor);\n          dividendLow = dividendLow + divisor;\n          quotientHigh = remainderHigh - 1;\n          if ((carryFlag == false) && (dividendLow <= initialGuess && initialGuess - dividendLow != 0)) {\n            quotientHigh = remainderHigh - 2;\n            dividendLow = dividendLow + divisor;\n          }\n        }\n        dividendLow = dividendLow - initialGuess;\n        quotientHigh = quotientHigh | quotientLow << 0x10;\n      }\n      quotientLow = dividendLow / remainderLow;\n      initialGuess = tmp3 * quotientLow;\n      tmp2 = dividend >> 0x10 | (dividendLow - remainderLow * quotientLow) * 0x10000;\n      tmp1 = quotientLow;\n      if (tmp2 <= initialGuess && initialGuess - tmp2 != 0) {\n        carryFlag = CARRY4(tmp2,divisor);\n        tmp2 = tmp2 + divisor;\n        tmp1 = quotientLow - 1;\n        if ((carryFlag == false) && (tmp2 <= initialGuess && initialGuess - tmp2 != 0)) {\n          tmp1 = quotientLow - 2;\n          tmp2 = tmp2 + divisor;\n        }\n      }\n      remainderHigh = (tmp2 - initialGuess) / remainderLow;\n      tmp3 = tmp3 * remainderHigh;\n      remainderLow = dividend & 0xffff | ((tmp2 - initialGuess) - remainderLow * remainderHigh) * 0x10000;\n      quotientLow = remainderHigh;\n      if (remainderLow <= tmp3 && tmp3 - remainderLow != 0) {\n        quotientLow = remainderHigh - 1;\n        if ((CARRY4(remainderLow,divisor) == false) &&\n           (remainderLow + divisor <= tmp3 && tmp3 - (remainderLow + divisor) != 0)) {\n          quotientLow = remainderHigh - 2;\n        }\n      }\n      quotientLow = quotientLow | tmp1 << 0x10;\n    }\n  }\n  else if (dividendLow < divisorLow) {\n    quotientHigh = 0;\n    quotientLow = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorLow);\n    if (shiftAmount == 0) {\n      if ((divisorLow < dividendLow) || (divisor <= dividend)) {\n        quotientHigh = 0;\n        quotientLow = 1;\n      }\n      else {\n        quotientLow = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - shiftAmount;\n      remainderLow = dividendLow >> (quotientHigh & 0xff);\n      tmp3 = divisor >> (quotientHigh & 0xff) | divisorLow << shiftAmount;\n      initialGuess = tmp3 >> 0x10;\n      quotientLow = remainderLow / initialGuess;\n      tmp2 = (tmp3 & 0xffff) * quotientLow;\n      tmp1 = dividendLow << shiftAmount | dividend >> (quotientHigh & 0xff);\n      remainderLow = tmp1 >> 0x10 | (remainderLow - initialGuess * quotientLow) * 0x10000;\n      quotientHigh = quotientLow;\n      if (remainderLow <= tmp2 && tmp2 - remainderLow != 0) {\n        carryFlag = CARRY4(remainderLow,tmp3);\n        remainderLow = remainderLow + tmp3;\n        quotientHigh = quotientLow - 1;\n        if ((carryFlag == false) && (remainderLow <= tmp2 && tmp2 - remainderLow != 0)) {\n          quotientHigh = quotientLow - 2;\n          remainderLow = remainderLow + tmp3;\n        }\n      }\n      remainderHigh = (remainderLow - tmp2) / initialGuess;\n      quotientGuess = (tmp3 & 0xffff) * remainderHigh;\n      remainderLow = tmp1 & 0xffff | ((remainderLow - tmp2) - initialGuess * remainderHigh) * 0x10000;\n      quotientLow = remainderHigh;\n      if (remainderLow <= quotientGuess && quotientGuess - remainderLow != 0) {\n        carryFlag = CARRY4(remainderLow,tmp3);\n        remainderLow = remainderLow + tmp3;\n        quotientLow = remainderHigh - 1;\n        if ((carryFlag == false) && (remainderLow <= quotientGuess && quotientGuess - remainderLow != 0)) {\n          quotientLow = remainderHigh - 2;\n          remainderLow = remainderLow + tmp3;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotient = (ulonglong)quotientLow * (ulonglong)(divisor << shiftAmount);\n      tmp1 = (uint)((ulonglong)quotient >> 0x20);\n      quotientHigh = 0;\n      if ((remainderLow - quotientGuess < tmp1) ||\n         ((remainderLow - quotientGuess == tmp1 && (dividend << shiftAmount < (uint)quotient)))) {\n        quotientLow = quotientLow - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    carryFlag = quotientLow != 0;\n    quotientLow = -quotientLow;\n    quotientHigh = -quotientHigh - (uint)carryFlag;\n  }\n  return CONCAT44(quotientHigh,quotientLow);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "param_1": "dividend",
                "param_2": "dividendLow",
                "param_3": "divisor",
                "param_4": "divisorLow",
                "lVar1": "quotient",
                "uVar2": "quotientLow",
                "uVar3": "quotientHigh",
                "uVar4": "remainderLow",
                "uVar5": "remainderHigh",
                "iVar6": "shiftAmount",
                "uVar7": "tmp1",
                "uVar8": "tmp2",
                "uVar9": "isNegativeDividend",
                "uVar10": "initialGuess",
                "uVar11": "quotientGuess",
                "uVar12": "tmp3",
                "bVar13": "carryFlag"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_division_00084860",
            "code": "\nulonglong calculateDivision_00084860(uint dividend,uint divisor,uint tmp1,uint tmp2)\n\n{\n  longlong multiplier;\n  uint quotient;\n  uint uVar3;\n  uint uVar4;\n  uint tmp3;\n  uint tmp4;\n  uint tmp5;\n  uint tmp6;\n  uint tmp7;\n  int shiftAmount;\n  bool carryFlag;\n  \n  if (tmp2 == 0) {\n    if (tmp1 <= divisor) {\n      if (tmp1 == 0) {\n        tmp1 = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(tmp1);\n      if (shiftAmount == 0) {\n        divisor = divisor - tmp1;\n        uVar3 = tmp1 >> 0x10;\n        tmp3 = tmp1 & 0xffff;\n        quotient = 1;\n      }\n      else {\n        tmp1 = tmp1 << shiftAmount;\n        tmp6 = divisor >> (0x20U - shiftAmount & 0xff);\n        uVar3 = tmp1 >> 0x10;\n        tmp7 = tmp6 / uVar3;\n        tmp3 = tmp1 & 0xffff;\n        quotient = tmp3 * tmp7;\n        tmp4 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        uVar4 = tmp4 >> 0x10 | (tmp6 - uVar3 * tmp7) * 0x10000;\n        dividend = dividend << shiftAmount;\n        tmp6 = tmp7;\n        if (uVar4 <= quotient && quotient - uVar4 != 0) {\n          carryFlag = CARRY4(uVar4,tmp1);\n          uVar4 = uVar4 + tmp1;\n          tmp6 = tmp7 - 1;\n          if ((carryFlag == false) && (uVar4 <= quotient && quotient - uVar4 != 0)) {\n            tmp6 = tmp7 - 2;\n            uVar4 = uVar4 + tmp1;\n          }\n        }\n        tmp5 = (uVar4 - quotient) / uVar3;\n        tmp7 = tmp3 * tmp5;\n        divisor = tmp4 & 0xffff | ((uVar4 - quotient) - uVar3 * tmp5) * 0x10000;\n        quotient = tmp5;\n        if (divisor <= tmp7 && tmp7 - divisor != 0) {\n          carryFlag = CARRY4(divisor,tmp1);\n          divisor = divisor + tmp1;\n          quotient = tmp5 - 1;\n          if ((carryFlag == false) && (divisor <= tmp7 && tmp7 - divisor != 0)) {\n            quotient = tmp5 - 2;\n            divisor = divisor + tmp1;\n          }\n        }\n        divisor = divisor - tmp7;\n        quotient = quotient | tmp6 << 0x10;\n      }\n      tmp7 = divisor / uVar3;\n      uVar4 = tmp3 * tmp7;\n      tmp4 = dividend >> 0x10 | (divisor - uVar3 * tmp7) * 0x10000;\n      tmp6 = tmp7;\n      if (tmp4 <= uVar4 && uVar4 - tmp4 != 0) {\n        carryFlag = CARRY4(tmp4,tmp1);\n        tmp4 = tmp4 + tmp1;\n        tmp6 = tmp7 - 1;\n        if ((carryFlag == false) && (tmp4 <= uVar4 && uVar4 - tmp4 != 0)) {\n          tmp6 = tmp7 - 2;\n          tmp4 = tmp4 + tmp1;\n        }\n      }\n      tmp7 = (tmp4 - uVar4) / uVar3;\n      tmp3 = tmp3 * tmp7;\n      tmp4 = dividend & 0xffff | ((tmp4 - uVar4) - uVar3 * tmp7) * 0x10000;\n      uVar3 = tmp7;\n      if (tmp4 <= tmp3 && tmp3 - tmp4 != 0) {\n        uVar3 = tmp7 - 1;\n        if ((CARRY4(tmp4,tmp1) == false) &&\n           (tmp4 + tmp1 <= tmp3 && tmp3 - (tmp4 + tmp1) != 0)) {\n          uVar3 = tmp7 - 2;\n        }\n      }\n      return CONCAT44(quotient,uVar3 | tmp6 << 0x10);\n    }\n    shiftAmount = LZCOUNT(tmp1);\n    if (shiftAmount != 0) {\n      tmp6 = dividend >> (0x20U - shiftAmount & 0xff);\n      tmp1 = tmp1 << shiftAmount;\n      dividend = dividend << shiftAmount;\n      divisor = tmp6 | divisor << shiftAmount;\n    }\n    quotient = tmp1 >> 0x10;\n    uVar3 = divisor / quotient;\n    tmp3 = (tmp1 & 0xffff) * uVar3;\n    tmp7 = dividend >> 0x10 | (divisor - quotient * uVar3) * 0x10000;\n    tmp6 = uVar3;\n    if (tmp7 <= tmp3 && tmp3 - tmp7 != 0) {\n      carryFlag = CARRY4(tmp7,tmp1);\n      tmp7 = tmp7 + tmp1;\n      tmp6 = uVar3 - 1;\n      if ((carryFlag == false) && (tmp7 <= tmp3 && tmp3 - tmp7 != 0)) {\n        tmp6 = uVar3 - 2;\n        tmp7 = tmp7 + tmp1;\n      }\n    }\n    tmp4 = (tmp7 - tmp3) / quotient;\n    uVar3 = (tmp1 & 0xffff) * tmp4;\n    tmp3 = dividend & 0xffff | ((tmp7 - tmp3) - quotient * tmp4) * 0x10000;\n    quotient = tmp4;\n    if (tmp3 <= uVar3 && uVar3 - tmp3 != 0) {\n      quotient = tmp4 - 1;\n      if ((CARRY4(tmp3,tmp1) == false) &&\n         (tmp3 + tmp1 <= uVar3 && uVar3 - (tmp3 + tmp1) != 0)) {\n        quotient = tmp4 - 2;\n      }\n    }\n    quotient = quotient | tmp6 << 0x10;\n  }\n  else {\n    if (divisor < tmp2) {\n      return 0;\n    }\n    shiftAmount = LZCOUNT(tmp2);\n    if (shiftAmount == 0) {\n      if ((tmp2 < divisor) || (tmp1 <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shiftAmount;\n      tmp6 = divisor >> (quotient & 0xff);\n      uVar3 = tmp2 << shiftAmount | tmp1 >> (quotient & 0xff);\n      tmp3 = uVar3 >> 0x10;\n      uVar4 = tmp6 / tmp3;\n      tmp7 = (uVar3 & 0xffff) * uVar4;\n      tmp4 = dividend >> (quotient & 0xff) | divisor << shiftAmount;\n      quotient = tmp4 >> 0x10 | (tmp6 - tmp3 * uVar4) * 0x10000;\n      tmp6 = uVar4;\n      if (quotient <= tmp7 && tmp7 - quotient != 0) {\n        carryFlag = CARRY4(quotient,uVar3);\n        quotient = quotient + uVar3;\n        tmp6 = uVar4 - 1;\n        if ((carryFlag == false) && (quotient <= tmp7 && tmp7 - quotient != 0)) {\n          tmp6 = uVar4 - 2;\n          quotient = quotient + uVar3;\n        }\n      }\n      uVar4 = (quotient - tmp7) / tmp3;\n      tmp5 = (uVar3 & 0xffff) * uVar4;\n      tmp3 = tmp4 & 0xffff | ((quotient - tmp7) - tmp3 * uVar4) * 0x10000;\n      quotient = uVar4;\n      if (tmp3 <= tmp5 && tmp5 - tmp3 != 0) {\n        carryFlag = CARRY4(tmp3,uVar3);\n        tmp3 = tmp3 + uVar3;\n        quotient = uVar4 - 1;\n        if ((carryFlag == false) && (tmp3 <= tmp5 && tmp5 - tmp3 != 0)) {\n          quotient = uVar4 - 2;\n          tmp3 = tmp3 + uVar3;\n        }\n      }\n      quotient = quotient | tmp6 << 0x10;\n      multiplier = (ulonglong)quotient * (ulonglong)(tmp1 << shiftAmount);\n      tmp6 = (uint)((ulonglong)multiplier >> 0x20);\n      if ((tmp3 - tmp5 < tmp6) || ((tmp3 - tmp5 == tmp6 && (dividend << shiftAmount < (uint)multiplier)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_division_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "tmp1",
                "param_4": "tmp2",
                "lVar1": "multiplier",
                "uVar2": "quotient",
                "uVar5": "tmp3",
                "uVar6": "tmp4",
                "uVar7": "tmp5",
                "uVar8": "tmp6",
                "uVar9": "tmp7",
                "iVar10": "shiftAmount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 103847,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": []
}