{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "run_application_000816a8",
                "FUN_000816d4": "initialize_system",
                "FUN_00080ae4": "setup_device",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "enable_logging",
                "FUNC_000805d0": "check_for_errors",
                "FUN_00080ce0": "perform_cleanup",
                "DAT_000816d0": "is_system_idle"
            },
            "code": "void run_application_000816a8(void)\n{\n  initialize_system();\n  setup_device();\n  do_nothing();\n  enable_logging(true);\n  start_processing();\n  do {\n    do {\n      check_for_errors();\n    } while (DAT_000816d0() == 0);\n    perform_cleanup();\n  } while(true);\n}",
            "called": [
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_00080ce0",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "run_application_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_register_00081042",
                "param_1": "register_address",
                "param_2": "bits_to_set",
                "param_3": "mask",
                "param_4": "bit_shift"
            },
            "code": "void set_bits_in_register_00081042(uint32_t* register_address, uint32_t mask, uint32_t bits_to_set, uint32_t bit_shift){\n    *register_address = mask | *register_address | (bits_to_set & 0xF) << bit_shift | (bit_shift & 3) << 0x1C;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "param",
                "param_2": "data_size",
                "param_3": "data",
                "piVar1": "current_data_block",
                "iVar2": "status",
                "piVar3": "end_of_data",
                "uVar4": "i",
                "puVar5": "data_block_start",
                "uVar6": "data_block_size",
                "uVar7": "data_block_size_shifted"
            },
            "code": "int process_data_00082ac0(undefined4 param, int data_size, int **data)\n{\n    int *current_data_block = *data;\n    int *end_of_data = data[2];\n    int status = 0;\n    while (current_data_block != (int *)0x0) {\n        uint data_block_size = current_data_block[1] >> 2;\n        if (data_block_size != 0) {\n            undefined4 *data_block_start = (undefined4 *)(*current_data_block + -4);\n            uint i = 0;\n            do {\n                data_block_start++;\n                int result = process_data_00082ac0_block(param, *data_block_start, data_size);\n                i++;\n                if (result == -1) {\n                    goto exit;\n                }\n            } while (data_block_size != i);\n        }\n        current_data_block = (int *)((int)current_data_block + (current_data_block[1] & 0xfffffffc));\n    }\nexit:\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return status;\n}",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_data_and_do_nothing_00080ce0",
                "FUN_000813e4": "check_data",
                "PTR_DAT_00080d14": "PTR_DATA_1",
                "PTR_DAT_00080d18": "PTR_DATA_2",
                "PTR_DAT_00080d1c": "PTR_DATA_3",
                "PTR_DAT_00080d20": "PTR_DATA_4",
                "do_nothing_00080aa8": "do_nothing_1",
                "do_nothing_00080ab8": "do_nothing_2",
                "do_nothing_00080aba": "do_nothing_3",
                "do_nothing_00080abc": "do_nothing_4"
            },
            "code": "void check_data_and_do_nothing_00080ce0(void)\n{\n  int check_result;\n  check_result = check_data(PTR_DAT_00080d14);\n  if (check_result != 0) {\n    do_nothing_1();\n  }\n  check_result = check_data(PTR_DAT_00080d18);\n  if (check_result != 0) {\n    do_nothing_2();\n  }\n  check_result = check_data(PTR_DAT_00080d1c);\n  if (check_result != 0) {\n    do_nothing_3();\n  }\n  check_result = check_data(PTR_DAT_00080d20);\n  if (check_result != 0) {\n    do_nothing_4();\n  }\n  return;\n}",
            "called": [
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_000813e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_data_and_do_nothing_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_with_zeroes_00081682",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "var1",
                "FUN_00082a50": "allocate_memory",
                "FUN_0008165c": "fill_array_with_values"
            },
            "code": "undefined4* initialize_array_with_zeroes_00081682(undefined4* array, int size)\n{\n  array[0] = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (size != 0) {\n    undefined4 var1 = allocate_memory(size);\n    fill_array_with_values(array, size, var1);\n  }\n  return array;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeroes_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "increment_pointer_value_000815fe",
                "param_1": "pointer_to_value",
                "FUN_00081e04": "increment_value_at_pointer"
            },
            "code": "undefined4* increment_pointer_value_000815fe(undefined4* pointer_to_value)\n{\n    increment_value_at_pointer(*pointer_to_value);\n    return pointer_to_value;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "increment_pointer_value_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_shifted_value_00081d1c",
                "param_1": "value",
                "uVar1": "shift_amount",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint calculate_shifted_value_00081d1c(uint value)\n{\n    uint shifted_value;\n    if (((value & 0x80000000) != 0) || (value << 1 < 0x7f000000)) {\n        return 0;\n    }\n    uint shift_amount = 0x9e - ((value << 1) >> 0x18);\n    if (-1 < (int)shift_amount) {\n        shifted_value = (value << 8 | 0x80000000) >> (shift_amount & 0xff);\n        return shifted_value;\n    }\n    if ((shift_amount == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n        return 0;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "output_param",
                "uVar1": "result_1",
                "lVar2": "result_2"
            },
            "code": "void calculate_difference_000847ac(uint32_t input_param_1, int32_t input_param_2, uint32_t input_param_3, uint32_t input_param_4, int32_t *output_param)\n{\n  uint32_t result_1;\n  uint64_t result_2;\n  result_2 = multiply_two_numbers();\n  result_2 = result_2 * ((uint64_t)input_param_4 << 32 | input_param_3);\n  result_1 = (uint32_t)result_2;\n  output_param[0] = input_param_1 - result_1;\n  output_param[1] = input_param_2 - ((int32_t)(result_2 >> 32)) - (input_param_1 < result_1);\n  return;\n}",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "process_data_00080118",
                "param_1": "param_1",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "param_4": "callback_addr",
                "DAT_00080134": "flag_ptr",
                "PTR_DAT_0008013c": "data_ptr",
                "DAT_00080140": "callback_ptr",
                "DAT_00080144": "callback_param"
            },
            "code": "void process_data_00080118(undefined4 param_1, undefined *PTR_DAT_0008013c, undefined4 data_size, undefined4 callback_addr) {\n  bool data_available = (*DAT_00080134 != 0);\n  if (data_available && (*DAT_00080140 != NULL)) {\n    (*DAT_00080140)(DAT_00080134, PTR_DAT_0008013c, data_size, callback_addr, DAT_00080144);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "process_data_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_for_zero_00081c94",
                "in_ZR": "zero",
                "in_CY": "carry",
                "FUN_00081c5c": "call_some_function"
            },
            "code": "bool check_for_zero_00081c94(void)\n{\n  undefined zero = 0;\n  undefined carry = 0;\n  \n  call_some_function();\n  return (bool)zero || !(bool)carry;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_for_zero_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure",
                "puVar1": "string_data1",
                "uVar2": "DAT_00083bfc",
                "puVar3": "PTR_FUN_0008449c_1_00083c00",
                "puVar4": "PTR_LAB_000844bc_1_00083c04",
                "puVar5": "data_structure_5",
                "puVar6": "data_structure_6",
                "data_structure_4": "*(undefined4 **)(data_structure + 4)"
            },
            "code": "void initialize_data_structures_00083b14(int data_structure)\n{\n  if (*(int *)(data_structure + 0x38) == 0) {\n    undefined4 *data_structure_4 = *(undefined4 **)(data_structure + 4);\n    undefined *string_data1 = \"string1\";\n    undefined *string_data2 = \"string2\";\n    undefined *string_data3 = \"string3\";\n    undefined4 *data_structure_8 = *(undefined4 **)(data_structure + 8);\n    undefined4 *data_structure_c = *(undefined4 **)(data_structure + 0xc);\n    *(undefined **)(data_structure + 0x3c) = string_data1;\n    *(undefined4 *)(data_structure + 0x2e4) = 3;\n    *(int *)(data_structure + 0x2e8) = data_structure + 0x2ec;\n    *(undefined4 *)(data_structure + 0x2e0) = 0;\n    *(undefined2 *)(data_structure_4 + 3) = 4;\n    *data_structure_4 = 0;\n    data_structure_4[1] = 0;\n    data_structure_4[2] = 0;\n    data_structure_4[0x19] = 0;\n    *(undefined2 *)((int)data_structure_4 + 0xe) = 0;\n    data_structure_4[4] = 0;\n    data_structure_4[5] = 0;\n    data_structure_4[6] = 0;\n    FUN_00082504(data_structure_4 + 0x17,0,8);\n    undefined4 *data_structure_5 = *(undefined4 **)(data_structure + 4);\n    undefined4 *data_structure_6 = *(undefined4 **)(data_structure + 8);\n    data_structure_4[7] = data_structure_4;\n    data_structure_4[8] = string_data2;\n    data_structure_4[9] = DAT_00083bfc;\n    data_structure_4[10] = PTR_FUN_0008449c_1_00083c00;\n    data_structure_4[0xb] = PTR_LAB_000844bc_1_00083c04;\n    *(undefined2 *)((int)data_structure_6 + 0xe) = 1;\n    *(undefined2 *)(data_structure_6 + 3) = 9;\n    *data_structure_6 = 0;\n    data_structure_6[1] = 0;\n    data_structure_6[2] = 0;\n    data_structure_6[0x19] = 0;\n    data_structure_6[4] = 0;\n    data_structure_6[5] = 0;\n    data_structure_6[6] = 0;\n    FUN_00082504(data_structure_6 + 0x17,0,8);\n    data_structure_4[7] = data_structure_4;\n    data_structure_4[8] = string_data2;\n    data_structure_4[9] = DAT_00083bfc;\n    data_structure_4[10] = PTR_FUN_0008449c_1_00083c00;\n    data_structure_4[0xb] = PTR_LAB_000844bc_1_00083c04;\n    *(undefined2 *)(data_structure_5 + 3) = 0x12;\n    *(undefined2 *)((int)data_structure_5 + 0xe) = 2;\n    *data_structure_5 = 0;\n    data_structure_5[1] = 0;\n    data_structure_5[2] = 0;\n    data_structure_5[0x19] = 0;\n    data_structure_5[4] = 0;\n    data_structure_5[5] = 0;\n    data_structure_5[6] = 0;\n    FUN_00082504(data_structure_5 + 0x17,0,8);\n    data_structure_5[7] = data_structure_5;\n    data_structure_5[8] = string_data2;\n    data_structure_5[9] = DAT_00083bfc;\n    data_structure_5[10] = PTR_FUN_0008449c_1_00083c00;\n    data_structure_5[0xb] = PTR_LAB_000844bc_1_00083c04;\n    *(undefined4 *)(data_structure + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "validate_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "flags",
                "iVar2": "result",
                "iVar3": "status",
                "uVar4": "flags_uint",
                "bVar5": "success",
                "auStack_54": "stack_54",
                "local_50": "unused",
                "PTR_FUN_0008449c_1_00084380": "PTR_FUN_0008449c_1_00084380",
                "FUNC_00081e14": "FUNC_00081e14",
                "PTR_LAB_00083b08_1_0008437c": "PTR_LAB_00083b08_1_0008437c"
            },
            "code": "void validate_000842a4(int input, int *output) {\n  ushort flags = *(ushort *)(output + 3);\n  uint flags_uint = (uint)flags;\n  bool success = false;\n  undefined stack_54 [4];\n  uint status = 0;\n\n  if ((int)(flags_uint << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n\n  if (-1 < *(short *)((int)output + 0xe)) {\n    int result = validate_000842a4_helper(input, (int)*(short *)((int)output + 0xe), stack_54);\n    if (-1 < result) {\n      bool is_2000 = (status & 0xf000) == 0x2000;\n      if (((status & 0xf000) == 0x8000) && ((undefined *)output[10] == PTR_FUN_0008449c_1_00084380)) {\n        status = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      success = true;\n    }\n    else {\n      flags = *(ushort *)(output + 3);\n      flags_uint = (uint)flags;\n    }\n  }\n\n  *(ushort *)(output + 3) = flags | 0x800;\n  if ((flags_uint & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n\n  if (success) {\n    int result = FUNC_00081e14(input, status);\n    flags = *(ushort *)(output + 3);\n    if (result == 0) {\n      if (-1 < (int)((uint)flags << 0x16)) {\n        *(ushort *)(output + 3) = flags | 2;\n        *output = (int)output + 0x43;\n        output[4] = (int)output + 0x43;\n        output[5] = 1;\n      }\n    }\n    else {\n      *(undefined **)(input + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n      *(ushort *)(output + 3) = flags | 0x80;\n      *output = result;\n      output[4] = result;\n      output[5] = status;\n      if ((is_2000) && (result = validate_000842a4_helper(input, (int)*(short *)((int)output + 0xe)), result) != 0) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "validate_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data",
                "uVar1": "result",
                "iVar2": "result",
                "iVar3": "ptr_data",
                "FUN_00083b14": "initialize_data",
                "FUN_00083adc": "process_data_helper",
                "code": "code_ptr",
                "FUN_00083d9c": "cleanup_data"
            },
            "code": "int process_data_000846a4(int data){\n    int ptr_data = *DAT_000846b0;\n    if (data != 0) {\n        if ((ptr_data != 0) && (*(int *)(ptr_data + 0x38) == 0)) {\n            initialize_data();\n        }\n        if (*(short *)(data + 0xc) != 0) {\n            int result = process_data_000846a4_helper(ptr_data, data);\n            if ((*(code **)(data + 0x2c) != (code *)0x0) && (result < 0)) {\n                result = -1;\n            }\n            if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n                cleanup_data(ptr_data, *(undefined4 *)(data + 0x10));\n            }\n            if (*(int *)(data + 0x30) != 0) {\n                if (*(int *)(data + 0x30) != data + 0x40) {\n                    cleanup_data(ptr_data);\n                }\n                *(undefined4 *)(data + 0x30) = 0;\n            }\n            if (*(int *)(data + 0x44) != 0) {\n                cleanup_data(ptr_data);\n                *(undefined4 *)(data + 0x44) = 0;\n            }\n            do_nothing_00083c08();\n            *(undefined2 *)(data + 0xc) = 0;\n            do_nothing_00083c0c();\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083c08",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "load_and_initialize_relocation_table_00080f24",
                "puVar1": "rel_array",
                "puVar2": "data",
                "iVar3": "i",
                "puVar4": "rel_offset_array",
                "DAT_00080f7c": "data",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_array",
                "PTR_DAT_00080f84": "rel_offset_array",
                "DAT_00080f8c": "rel_offset_end",
                "PTR_DAT_00080f90": "memory_region",
                "DAT_00080f94": "memory_region_header",
                "*DAT_00080f98": "function_pointer"
            },
            "code": "void load_and_initialize_relocation_table_00080f24(void)\n{\n  uint32_t *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n  uint8_t *DAT_00080f7c = DAT_00080f7c;\n  uint32_t *PTR_DAT_00080f84 = (uint32_t *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (int i = 0; i < PTR_DAT_00080f88 - PTR_Elf32_Rel_ARRAY_00080f80; i += 4) {\n      *(uint32_t *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(uint32_t *)(DAT_00080f7c + i);\n    }\n  }\n  for (uint32_t *rel_offset = PTR_DAT_00080f84; rel_offset < DAT_00080f8c; rel_offset++) {\n    *rel_offset = 0;\n  }\n  uint8_t *PTR_DAT_00080f90 = PTR_DAT_00080f90 - 0x20000000;\n  *(uint32_t *)(DAT_00080f94 + 8) = (uint32_t)PTR_DAT_00080f90 & 0x1fffff80;\n  if (PTR_DAT_00080f90 < (uint8_t *)0x100000) {\n    *(uint32_t *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while (true) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "load_and_initialize_relocation_table_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint ptr_param1, uint param2)\n{\n  uint result = *(uint *)(ptr_param1 + 8) & param2;\n  if (result != 0) {\n    if ((param2 & *(uint *)(ptr_param1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "puVar3": "data_ptr_3",
                "puVar4": "data_ptr_4",
                "uVar5": "thunk_result",
                "iVar6": "thunk_result_plus_1000"
            },
            "code": "int initialize_system_000804a8(void)\n{\n    // Set up system configuration\n    set_system_config(1, 0);\n    set_system_config(6, 1);\n    set_system_config(0, 1);\n    set_system_config(1, 1);\n    set_system_config(0, 0);\n    set_system_config(1, 0);\n\n    // Set up data structures\n    char* data_ptr_1 = PTR_DAT_000805a8;\n    char* data_ptr_2 = PTR_DAT_000805ac;\n    char* data_ptr_3 = PTR_DAT_000805b0;\n    char* data_ptr_4 = PTR_DAT_000805b4;\n\n    *(short*)(data_ptr_1 + 0xE) = 0x13;\n    *(short*)(data_ptr_1 + 0x10) = 10;\n    *(char**)(data_ptr_1 + 0x14) = data_ptr_2 + 0x26;\n    data_ptr_1[1] = 3;\n    data_ptr_1[0x19] = 3;\n    *(short*)(data_ptr_1 + 0x1A) = 0x14;\n    *(short*)(data_ptr_1 + 0x28) = 3;\n    *(short*)(data_ptr_1 + 4) = 0x10;\n    *(char**)(data_ptr_1 + 8) = data_ptr_2;\n    data_ptr_1[0xD] = 0x10;\n    *(short*)(data_ptr_1 + 0x1C) = 0xC;\n    data_ptr_1[0x25] = 0x10;\n    *(short*)(data_ptr_1 + 0x34) = 8;\n    *(short*)(data_ptr_1 + 0x26) = 0x1C;\n    *(char**)(data_ptr_1 + 0x2C) = data_ptr_2 + 0x38;\n    data_ptr_1[0x30] = 2;\n    data_ptr_1[0x31] = 2;\n    *(char**)(data_ptr_1 + 0x38) = data_ptr_3;\n    data_ptr_1[0x3C] = 2;\n    *data_ptr_1 = 1;\n    data_ptr_1[0xC] = 1;\n    data_ptr_1[0x18] = 1;\n    data_ptr_1[0x24] = 1;\n    *(short*)(data_ptr_1 + 0x3E) = 1;\n    *(short*)(data_ptr_1 + 0x40) = 1;\n    *(short*)(data_ptr_1 + 2) = 0;\n    *(char**)(data_ptr_1 + 0x20) = data_ptr_2 + 0x28;\n    *(short*)(data_ptr_1 + 0x32) = 0;\n    data_ptr_1[0x3D] = 5;\n    *(char**)(data_ptr_1 + 0x44) = data_ptr_3 + 2;\n\n    // Initialize hardware\n    initialize_hardware(PTR_DAT_000805b4, 0x4B00);\n    *(short*)(PTR_DAT_000805b4 + 0x56) = 2000;\n\n    // Initialize system variables\n    *(int*)PTR_DAT_000805b8 = thunk_FUN_00081714();\n    *(int*)PTR_DAT_000805BC = thunk_FUN_00081714() + 1000;\n    *(int*)PTR_DAT_000805C0 = thunk_FUN_00081714() + 1000;\n    *(int*)PTR_DAT_000805C4 = thunk_FUN_00081714() + 1000;\n    *(int*)PTR_DAT_000805C8 = thunk_FUN_00081714() + 1000;\n    *PTR_DAT_000805CC = 0;\n\n    // Check if system initialization was successful\n    if (*(int*)PTR_DAT_00080160 == 0)\n    {\n        software_interrupt(0x3F);\n        return 1;\n    }\n\n    return 0;\n}",
            "called": [
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_input_000802da",
                "param_1": "input_ptr",
                "param_2": "input_length",
                "param_3": "input_data",
                "cVar1": "error_code",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "short_value",
                "uVar5": "uint_value",
                "puVar6": "ptr_value",
                "local_1c": "local_char_value",
                "local_1b": "local_undefined_value",
                "local_1a": "local_short_value"
            },
            "code": "int validate_input_000802da(int input_ptr, unsigned short input_length, unsigned short *input_data)\n{\n    char error_code;\n    byte byte_value;\n    undefined undefined_value;\n    unsigned short short_value;\n    uint uint_value;\n    unsigned short *ptr_value;\n    char local_char_value;\n    undefined local_undefined_value;\n    unsigned short local_short_value;\n    uint_value = (uint)input_length;\n    if (*(char *)(input_ptr + 4) != '\\0') {\n        error_code = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(input_ptr + 7) != '\\0') {\n        error_code = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_char_value - 1U)) {\n        error_code = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(input_ptr + 9) = local_char_value;\n    *(undefined *)(input_ptr + 10) = local_undefined_value;\n    *(unsigned short **)(input_ptr + 0x4c) = input_data;\n    *(char *)(input_ptr + 0xb) = (char)((uint)local_short_value >> 8);\n    *(char *)(input_ptr + 0xc) = (char)local_short_value;\n    error_code = (char)input_length;\n    undefined_value = (undefined)(uint_value >> 8);\n    switch(local_undefined_value) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(undefined *)(input_ptr + 0xd) = undefined_value;\n            break;\n        case 5:\n            short_value = *input_data;\n            if (short_value != 0) {\n                short_value = 1;\n            }\n            *(char *)(input_ptr + 0xd) = -(char)short_value;\n            uint_value = 0;\n            break;\n        case 6:\n            *(char *)(input_ptr + 0xd) = (char)((uint)*input_data >> 8);\n            uint_value = (uint)*input_data;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_value = (byte)(input_length >> 3) & 0xfe;\n            if ((input_length & 0xf) != 0) {\n                byte_value = byte_value + 1;\n            }\n            *(char *)(input_ptr + 0xe) = error_code;\n            *(undefined *)(input_ptr + 0xd) = undefined_value;\n            *(byte *)(input_ptr + 0xf) = byte_value;\n            undefined_value = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(undefined *)(input_ptr + 0xd) = undefined_value;\n            *(char *)(input_ptr + 0xe) = error_code;\n            input_data = input_data + -1;\n            *(char *)(input_ptr + 0xf) = error_code * '\\x02';\n            *(undefined *)(input_ptr + 0x49) = 7;\n            ptr_value = input_data + uint_value;\n            while (input_data != ptr_value) {\n                byte_value = *(byte *)(input_ptr + 0x49);\n                *(char *)(input_ptr + (uint)byte_value + 9) = (char)((uint)input_data[1] >> 8);\n                uint_value = byte_value + 1 & 0xff;\n                *(char *)(input_ptr + 0x49) = (char)uint_value;\n                input_data = input_data + 1;\n                *(char *)(uint_value + input_ptr + 9) = (char)*input_data;\n                *(byte *)(input_ptr + 0x49) = byte_value + 2;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(input_ptr + 0xe) = (char)uint_value;\n    undefined_value = 6;\nLAB_0008034a:\n    *(undefined *)(input_ptr + 0x49) = undefined_value;\n    FUN_00080258(input_ptr);\n    *(undefined *)(input_ptr + 7) = 1;\n    error_code = '\\0';\nLAB_000803cc:\n    return (int)error_code;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_input_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "calculate_index_00080f9c",
                "param_1": "result",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "local_58": "thresholds",
                "uVar1": "num_thresholds",
                "uVar2": "index"
            },
            "code": "uint calculate_index_00080f9c(uint *result, uint input_size, int divisor, int multiplier) {\n  uint thresholds[16];\n  thresholds[0] = *(uint *)PTR_DAT_0008102c;\n  thresholds[1] = *(uint *)(PTR_DAT_0008102c + 4);\n  thresholds[2] = *(uint *)(PTR_DAT_0008102c + 8);\n  thresholds[3] = *(uint *)(PTR_DAT_0008102c + 0xc);\n  thresholds[4] = *(uint *)(PTR_DAT_0008102c + 0x10);\n  thresholds[5] = *(uint *)(PTR_DAT_0008102c + 0x14);\n  thresholds[6] = *(uint *)(PTR_DAT_0008102c + 0x18);\n  thresholds[7] = *(uint *)(PTR_DAT_0008102c + 0x1c);\n  thresholds[8] = *(uint *)(PTR_DAT_0008102c + 0x20);\n  thresholds[9] = *(uint *)(PTR_DAT_0008102c + 0x24);\n  thresholds[10] = *(uint *)(PTR_DAT_0008102c + 0x28);\n  thresholds[11] = *(uint *)(PTR_DAT_0008102c + 0x2c);\n  thresholds[12] = *(uint *)(PTR_DAT_0008102c + 0x30);\n  thresholds[13] = *(uint *)(PTR_DAT_0008102c + 0x34);\n  thresholds[14] = *(uint *)(PTR_DAT_0008102c + 0x38);\n  thresholds[15] = *(uint *)(PTR_DAT_0008102c + 0x3c);\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uint num_thresholds = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * num_thresholds) {\n    num_thresholds--;\n  }\n  uint index = 0;\n  for (uint i = 0; i < 16; i++) {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((num_thresholds + 1) * 2)) / (ulonglong)DAT_00081030)) <= thresholds[i]) {\n      result[1] = (i & 0xf) << 0x10 | (num_thresholds & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index++;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "calculate_index_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "index",
                "param_2": "action",
                "puVar1": "data_ptr",
                "puVar2": "type_ptr",
                "iVar3": "result",
                "uVar4": "var1",
                "uVar5": "var2",
                "uVar6": "flags",
                "bVar7": "type",
                "bVar8": "flags_type"
            },
            "code": "int process_data_00081210(int index, int action)\n{\n  uint8_t *data_ptr;\n  uint8_t *type_ptr;\n  int result;\n  uint8_t type;\n  uint8_t flags;\n  int var1;\n  int var2;\n\n  type_ptr = PTR_DAT_00081310;\n  data_ptr = PTR_DAT_0008130c;\n  result = index;\n  if (data_ptr[index * 0x1c + 0xc] != 0)\n  {\n    type = type_ptr[index] & 0xf;\n    if (type == 4)\n    {\n      result = FUN_0008105c(DAT_00081314,data_ptr[index * 0x1c + 0x19]);\n    }\n    flags = type_ptr[index] >> 4;\n    if (flags < 3 && flags != 0)\n    {\n      if (flags == 2 && action == 0)\n      {\n        return result;\n      }\n      else if (flags == 1 && action == 2)\n      {\n        return result;\n      }\n      else if (flags == 3)\n      {\n        if (action == 1)\n        {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (action != 1)\n    {\nLAB_0008126c:\n      if (action == 0)\n      {\n        var1 = index * 0x1c;\n        FUN_00080e18(*(uint32_t *)(data_ptr + var1 + 8));\n        result = FUN_00080da0(*(uint32_t *)(data_ptr + var1), 3, *(uint32_t *)(data_ptr + var1 + 4), 0);\n        flags = type_ptr[index] & 0xf0 | 2;\n      }\n      else\n      {\n        if (action != 2)\n        {\n          return result;\n        }\n        var1 = index * 0x1c;\n        FUN_00080e18(*(uint32_t *)(data_ptr + var1 + 8));\n        result = FUN_00080da0(*(uint32_t *)(data_ptr + var1), 3, *(uint32_t *)(data_ptr + var1 + 4), 1);\n        flags = type_ptr[index] & 0xf0 | 1;\n      }\n      type_ptr[index] = flags;\n      return result;\n    }\n    var1 = index * 0x1c;\n    var2 = *(int *)(data_ptr + var1);\n    if ((type_ptr[index] >> 4) == 0)\n    {\n      flags = 4;\n    }\n    else\n    {\n      flags = 5;\n    }\n    result = FUN_00080da0(var2, flags, *(uint32_t *)(data_ptr + var1 + 4), *(uint32_t *)(data_ptr + var1 + 0x10));\n    type_ptr[index] = type_ptr[index] & 0xf0 | 3;\n    if (*(int *)(var2 + 0x18) == -1)\n    {\n      flags = *(uint32_t *)(data_ptr + var1 + 8);\n      if (flags > 0x2c)\n      {\n        return 1;\n      }\n      if (flags >= 0x20)\n      {\n        flags = 1 << (flags - 0x20 & 0xff);\n        result = *(uint32_t *)(DAT_00080e98 + 0x108) & flags;\n        if (result == flags)\n        {\n          *(uint32_t *)(DAT_00080e98 + 0x104) = result;\n        }\n      }\n      else\n      {\n        flags = 1 << (flags & 0xff);\n        result = *(uint32_t *)(DAT_00080e98 + 0x18) & flags;\n        if (result == flags)\n        {\n          *(uint32_t *)(DAT_00080e98 + 0x14) = result;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "process_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_to_buffer_00081454",
                "param_1": "buffer_address",
                "param_2": "data",
                "iVar1": "buffer",
                "uVar2": "mask",
                "buffer_size": "buffer_size",
                "buffer_write_index": "buffer_write_index",
                "buffer_read_index": "buffer_read_index"
            },
            "code": "int write_to_buffer_00081454(int buffer_address, int data) {\n    int buffer = *(int *)(buffer_address + 0x14);\n    int buffer_size = *(int *)(buffer_address + 0x18);\n    int buffer_write_index = *(int *)(buffer + 0x80);\n    int buffer_read_index = *(int *)(buffer + 0x84);\n\n    if ((*(int *)(buffer_size + 0x14) << 0x1e < 0) && (*(int *)(buffer + 0x84) == *(int *)(buffer + 0x80))) {\n        *(int *)(buffer_size + 0x1c) = data;\n    }\n    else {\n        uint mask = DAT_000814a4 & (buffer_write_index + 1U);\n        if ((int)mask < 0) {\n            mask = (mask - 1 | 0xffffff80) + 1;\n        }\n        do {\n        } while (*(uint *)(buffer + 0x84) == mask);\n        *(char *)(buffer + buffer_write_index) = (char)data;\n        *(int *)(buffer + 0x80) = mask;\n        *(int *)(buffer_size + 8) = 2;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "processInput_00084728",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void processInput_00084728(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *ptr = PTR_DAT_0008474c;\n  *(undefined4 *)ptr = 0;\n  int result = performCalculation(input1, input2, input3);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "processInput_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_input_00083c40",
                "param_1": "param1",
                "param_2": "input_size",
                "param_3": "input_buffer",
                "uVar1": "verify_result",
                "iVar2": "helper_result",
                "uVar3": "current_char_value",
                "pbVar4": "current_byte",
                "uVar5": "stack_index",
                "local_1c": "current_char",
                "abStack_1b": "stack_chars"
            },
            "code": "uint process_input_00083c40(uint32_t param1, uint32_t input_size, byte **input_buffer)\n{\n  uint32_t uVar1;\n  int32_t iVar2;\n  uint32_t uVar3;\n  byte *current_byte;\n  uint32_t uVar5;\n  byte current_char;\n  byte stack_chars[3];\n  \n  if (-1 < (int32_t)((uint32_t)*(ushort *)(input_buffer + 3) << 0x12)) {\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x2000;\n    input_buffer[0x19] = (byte *)((uint32_t)input_buffer[0x19] | 0x2000);\n  }\n  uVar1 = verify_input();\n  if ((uVar1 == 1) && (input_size - 1 < 0xff)) {\n    uVar3 = input_size & 0xff;\n    current_char = (byte)uVar3;\n  }\n  else {\n    uVar1 = process_input_00083c40_helper(param1, &current_char, input_size, input_buffer + 0x17);\n    if (uVar1 == 0xffffffff) {\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (uVar1 == 0) {\n      return input_size;\n    }\n    uVar3 = (uint32_t)current_char;\n  }\n  uVar5 = 0;\n  do {\n    current_byte = input_buffer[2] + -1;\n    input_buffer[2] = current_byte;\n    if ((int32_t)current_byte < 0) {\n      if ((int32_t)input_buffer[6] <= (int32_t)current_byte) {\n        **input_buffer = (byte)uVar3;\n        current_byte = *input_buffer;\n        uVar3 = (uint32_t)*current_byte;\n        if (uVar3 != 10) goto LAB_00083c90;\n      }\n      iVar2 = process_input_00083c40_helper(param1, uVar3, input_buffer);\n      if (iVar2 == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **input_buffer = (byte)uVar3;\n      current_byte = *input_buffer;\nLAB_00083c90:\n      *input_buffer = current_byte + 1;\n    }\n    if (uVar1 <= uVar5 + 1) {\n      return input_size;\n    }\n    uVar3 = (uint32_t)stack_chars[uVar5];\n    uVar5 = uVar5 + 1;\n  } while( true );\n}",
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_input_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = thunk_FUN_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = thunk_FUN_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = thunk_FUN_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = thunk_FUN_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = thunk_FUN_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = FUN_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = thunk_FUN_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = FUN_0008189c(*(undefined4 *)puVar2);\n  iVar15 = FUN_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = FUN_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = FUN_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008043e",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081c94",
                "FUN_0008189c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "ptr_param_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "ptr_var_1",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "ptr_var_2",
                "result": "result"
            },
            "code": "int calculate_difference_000813e4(int ptr_param_1)\n{\n    int ptr_var_1 = *(int *)(*(int *)(ptr_param_1 + 0x10) + 0x80);\n    int ptr_var_2 = *(int *)(*(int *)(ptr_param_1 + 0x10) + 0x84);\n    int result = ptr_var_1 - ptr_var_2;\n    return result & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_00084290",
                "DAT_00084294": "data"
            },
            "code": "int get_data_00084290() {\n  return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "executeFunction_000846b4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void executeFunction_000846b4(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined *ptr = PTR_DAT_000846d8;\n  *(undefined4 *)ptr = 0;\n  int status = executeSubroutine(arg1, arg2, arg2, 0, arg3);\n  if ((status == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "executeFunction_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer_address",
                "*(undefined4 *)(param_1 + 0x80)": "*(int *)(buffer_address + 0x80)",
                "*(undefined4 *)(param_1 + 0x84)": "*(int *)(buffer_address + 0x84)"
            },
            "code": "int initialize_buffer_000813a8(int buffer_address)\n{\n    // Initialize buffer with zeroes\n    memset((void *)buffer_address, 0, 0x80);\n    // Set two variables at the end of the buffer to zero\n    *(int *)(buffer_address + 0x80) = 0;\n    *(int *)(buffer_address + 0x84) = 0;\n    // Return the buffer address\n    return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_00083d9c",
                "param_1": "memory_address",
                "param_2": "size",
                "iVar1": "current_index",
                "uVar2": "current_size",
                "iVar3": "previous_index",
                "uVar4": "previous_size",
                "iVar5": "new_index",
                "iVar6": "last_index",
                "uVar7": "new_size",
                "iVar8": "heap_start_index"
            },
            "code": "void allocate_memory_00083d9c(void *memory_address, int size)\n{\n  int current_index;\n  uint current_size;\n  int previous_index;\n  uint previous_size;\n  int new_index;\n  int last_index;\n  uint new_size;\n  int heap_start_index;\n  \n  if (size == 0) {\n    return;\n  }\n  do_nothing();\n  heap_start_index = DAT_00083f24;\n  current_size = *(uint *)(size + -4);\n  previous_index = size + -8;\n  new_size = current_size & 0xfffffffe;\n  current_index = previous_index + new_size;\n  previous_size = *(uint *)(current_index + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == current_index) {\n    previous_size = previous_size + new_size;\n    if (-1 < (int)(current_size << 0x1f)) {\n      previous_index = previous_index - *(int *)(size + -8);\n      new_index = *(int *)(previous_index + 0xc);\n      current_index = *(int *)(previous_index + 8);\n      previous_size = previous_size + *(int *)(size + -8);\n      *(int *)(current_index + 0xc) = new_index;\n      *(int *)(new_index + 8) = current_index;\n    }\n    current_size = *DAT_00083f2c;\n    *(uint *)(previous_index + 4) = previous_size | 1;\n    *(int *)(heap_start_index + 8) = previous_index;\n    if (current_size <= previous_size) {\n      FUN_00083d00(memory_address,*(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    current_size = current_size & 1;\n    *(uint *)(current_index + 4) = previous_size;\n    if (current_size == 0) {\n      previous_index = previous_index - *(int *)(size + -8);\n      new_size = new_size + *(int *)(size + -8);\n      if (*(int *)(previous_index + 8) == heap_start_index + 8) {\n        current_size = 1;\n      }\n      else {\n        last_index = *(int *)(previous_index + 0xc);\n        *(int *)(*(int *)(previous_index + 8) + 0xc) = last_index;\n        *(int *)(last_index + 8) = *(int *)(previous_index + 8);\n      }\n    }\n    else {\n      current_size = 0;\n    }\n    if (-1 < *(int *)(current_index + previous_size + 4) << 0x1f) {\n      new_size = new_size + previous_size;\n      new_index = *(int *)(current_index + 8);\n      if ((current_size == 0) && (new_index == DAT_00083f28)) {\n        *(int *)(heap_start_index + 0x14) = previous_index;\n        *(int *)(heap_start_index + 0x10) = previous_index;\n        *(int *)(previous_index + 0xc) = new_index;\n        *(int *)(previous_index + 8) = new_index;\n        *(uint *)(previous_index + 4) = new_size | 1;\n        *(uint *)(previous_index + new_size) = new_size;\n        goto LAB_00083e30;\n      }\n      current_index = *(int *)(current_index + 0xc);\n      *(int *)(new_index + 0xc) = current_index;\n      *(int *)(current_index + 8) = new_index;\n    }\n    *(uint *)(previous_index + 4) = new_size | 1;\n    *(uint *)(previous_index + new_size) = new_size;\n    if (current_size == 0) {\n      if (new_size < 0x200) {\n        current_size = *(uint *)(heap_start_index + 4);\n        new_index = heap_start_index + (new_size & 0xfffffff8);\n        current_index = *(int *)(new_index + 8);\n        *(int *)(previous_index + 8) = current_index;\n        *(int *)(previous_index + 0xc) = new_index;\n        *(uint *)(heap_start_index + 4) = current_size | 1 << ((int)(new_size >> 3) >> 2 & 0xffU);\n        *(int *)(new_index + 8) = previous_index;\n        *(int *)(current_index + 0xc) = previous_index;\n        do_nothing_0008259c(memory_address);\n        return;\n      }\n      current_size = new_size >> 9;\n      if (current_size < 5) {\n        current_index = (new_size >> 6) + 0x38;\n        previous_index = current_index * 2;\n      }\n      else if (current_size < 0x15) {\n        current_index = current_size + 0x5b;\n        previous_index = current_index * 2;\n      }\n      else if (current_size < 0x55) {\n        current_index = (new_size >> 0xc) + 0x6e;\n        previous_index = current_index * 2;\n      }\n      else if (current_size < 0x155) {\n        current_index = (new_size >> 0xf) + 0x77;\n        previous_index = current_index * 2;\n      }\n      else if (current_size < 0x555) {\n        current_index = (new_size >> 0x12) + 0x7c;\n        previous_index = current_index * 2;\n      }\n      else {\n        previous_index = 0xfc;\n        current_index = 0x7e;\n      }\n      heap_start_index = heap_start_index + previous_index * 4;\n      previous_index = *(int *)(heap_start_index + 8);\n      if (previous_index == heap_start_index) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (current_index >> 2 & 0xffU);\n        heap_start_index = previous_index;\n      }\n      else {\n        do {\n          if ((*(uint *)(previous_index + 4) & 0xfffffffc) <= new_size) break;\n          previous_index = *(int *)(previous_index + 8);\n        } while (heap_start_index != previous_index);\n        heap_start_index = *(int *)(previous_index + 0xc);\n      }\n      *(int *)(previous_index + 0xc) = heap_start_index;\n      *(int *)(previous_index + 8) = previous_index;\n      *(int *)(heap_start_index + 8) = previous_index;\n      *(int *)(previous_index + 0xc) = heap_start_index;\n    }\n  }\nLAB_00083e30:\n  do_nothing(memory_address);\n  return;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "temp_result",
                "bVar1": "is_temp_result_negative",
                "bVar5": "is_temp_result_zero"
            },
            "code": "uint calculate_result_00081bf4(uint input_1, uint input_2) {\n  bool is_overflow_1 = (int)(input_1 * 2) >> 0x18 == -1;\n  bool is_overflow_2 = (int)(input_2 * 2) >> 0x18 == -1;\n  if ((is_overflow_1 || is_overflow_2) && ((is_overflow_1 && ((input_1 & 0x7fffff) != 0)) || ((is_overflow_2 && ((input_2 & 0x7fffff) != 0))))) {\n    return 1;\n  }\n  uint temp_result = (input_1 * 2) | (input_2 & 0x7fffffff);\n  bool is_temp_result_zero = temp_result == 0;\n  if (!is_temp_result_zero) {\n    temp_result = input_1 ^ input_2;\n    is_temp_result_zero = temp_result == 0;\n  }\n  bool is_temp_result_negative = -1 < (int)temp_result;\n  if (is_temp_result_negative) {\n    input_1 = (input_1 * 2) + (input_2 * -2);\n    is_temp_result_zero = input_1 == 0;\n  }\n  if (is_temp_result_negative && input_2 <= input_1 && !is_temp_result_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_temp_result_negative || input_2 > input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_temp_result_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_functions_00081d7c",
                "puVar1": "data_start",
                "puVar2": "data_end",
                "iVar3": "i",
                "ppcVar4": "function_ptr",
                "iVar5": "num_functions",
                "PTR_DAT_00081dbc": "PTR_FUNCTION_END",
                "PTR_DAT_00081dc0": "PTR_FUNCTION_START",
                "PTR_DAT_00081dc8": "PTR_DATA_END",
                "PTR_LAB_00081dc4": "PTR_DATA_START"
            },
            "code": "void execute_functions_00081d7c()\n{\n  int num_functions = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(PTR_DAT_00081dc0 - 4);\n    int i = 0;\n    do {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    } while (num_functions != i);\n  }\n  undefined *data_start = PTR_LAB_00081dc4;\n  undefined *data_end = PTR_DAT_00081dc8;\n  do_nothing();\n  int num_data = (int)data_start - (int)data_end >> 2;\n  if (num_data != 0) {\n    code **data_ptr = (code **)(data_end - 4);\n    int i = 0;\n    do {\n      i++;\n      data_ptr++;\n      (**data_ptr)();\n    } while (num_data != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "execute_functions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_and_return_00081c5c",
                "param_1": "first_half",
                "param_2": "second_half",
                "CONCAT44": "concatenated_value",
                "FUN_00081bf4": "call_some_other_function"
            },
            "code": "void concatenate_and_return_00081c5c(uint32_t first_half, uint32_t second_half) {\n  call_some_other_function();\n  uint64_t concatenated_value = ((uint64_t)second_half << 32) | (uint64_t)first_half;\n  return concatenated_value;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": false,
            "current_name": "concatenate_and_return_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "*DAT_000813a0": "*count_ptr",
                "iVar1": "count",
                "*DAT_000813a4": "*callback_ptr"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *DAT_000813a0;\n  if (count != -1) {\n    count--;\n    *DAT_000813a0 = count;\n    if (count == 0) {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "src_word_ptr",
                "puVar4": "src_ptr",
                "uVar5": "current_word",
                "uVar6": "current_word",
                "puVar7": "dest_ptr",
                "bVar8": "end_of_string"
            },
            "code": "void copy_string_00082994(uint *dest, uint *src)\n{\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_word;\n  uint *src_word_ptr;\n  bool end_of_string;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    src_ptr = src;\n    if (((uint)src & 1) != 0) {\n      src_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = src_ptr;\n    if (((uint)src_ptr & 2) != 0) {\n      src = (uint *)((int)src_ptr + 2);\n      current_short = *(ushort *)src_ptr;\n      end_of_string = (current_short & 0xff) == 0;\n      if (end_of_string) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        end_of_string = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (end_of_string) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  src_ptr = src + 1;\n  src_word_ptr = src_ptr;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_000829f8;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    src_ptr = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    src_word_ptr = src_ptr + 1;\n    current_word = *src_ptr;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    if ((src_ptr[1] + 0xfefefeff & ~src_ptr[1] & 0x80808080) != 0) break;\n    src_ptr = src_ptr + 2;\n    dest_ptr = dest + 1;\n    *dest = src_ptr[-1];\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)current_word;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while ((current_word & 0xff) != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_data_structures_00080c0c",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "puVar1": "first_pointer",
                "puVar2": "second_pointer",
                "puVar3": "third_pointer",
                "puVar4": "fourth_pointer",
                "puVar5": "fifth_pointer",
                "puVar6": "sixth_pointer",
                "PTR_DAT_00080ca0": "first_data_pointer",
                "PTR_DAT_00080ca4": "second_data_pointer",
                "PTR_DAT_00080cac": "third_data_pointer",
                "PTR_DAT_00080cb0": "first_structure_pointer",
                "PTR_DAT_00080cb4": "second_structure_pointer",
                "PTR_DAT_00080cb8": "third_structure_pointer",
                "PTR_DAT_00080cbc": "fourth_structure_pointer",
                "PTR_DAT_00080cc4": "first_data_structure_pointer",
                "PTR_DAT_00080ccc": "second_data_structure_pointer",
                "PTR_DAT_00080cd4": "third_data_structure_pointer",
                "PTR_DAT_00080cd8": "fifth_data_pointer",
                "PTR_DAT_00080cdc": "sixth_data_pointer",
                "initialize_pointer": "initialize_pointer",
                "FUN_000813a8": "initialize_pointer",
                "initialize_data": "initialize_data",
                "FUN_000814e4": "initialize_data",
                "DAT_00080ca8": "data_1",
                "DAT_00080cc0": "data_2",
                "DAT_00080cc8": "data_3",
                "DAT_00080cd0": "data_4"
            },
            "code": "void initialize_data_structures_00080c0c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *first_pointer;\n  undefined *second_pointer;\n  undefined *third_pointer;\n  undefined *fourth_pointer;\n  undefined *fifth_pointer;\n  undefined *sixth_pointer;\n  \n  first_pointer = PTR_DAT_00080ca0;\n  second_pointer = PTR_DAT_00080ca4;\n  initialize_pointer(first_pointer);\n  initialize_pointer(second_pointer);\n  fifth_pointer = PTR_DAT_00080cd8;\n  third_pointer = PTR_DAT_00080cac;\n  initialize_data(PTR_DAT_00080cb0, DAT_00080ca8, 8, 8, first_pointer, second_pointer, param_3);\n  first_pointer = PTR_DAT_00080cb4;\n  initialize_pointer(fifth_pointer);\n  sixth_pointer = PTR_DAT_00080cdc;\n  initialize_pointer(third_pointer);\n  second_pointer = PTR_DAT_00080cb8;\n  initialize_pointer(first_pointer);\n  fourth_pointer = PTR_DAT_00080cbc;\n  initialize_pointer(sixth_pointer);\n  initialize_pointer(second_pointer);\n  initialize_pointer(fourth_pointer);\n  initialize_data(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, fifth_pointer, sixth_pointer);\n  initialize_data(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, third_pointer, second_pointer);\n  initialize_data(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, first_pointer, fourth_pointer);\n  return;\n}",
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_values_00080d2e",
                "param_1": "object_address",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "current_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void update_values_00080d2e(int object_address, uint32_t update_type, uint32_t update_value)\n{\n  uint32_t current_value;\n  uint32_t updated_value;\n  \n  *(uint32_t *)(object_address + 0x44) = update_value;\n  \n  switch(update_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    current_value = *(uint32_t *)(object_address + 0x70);\n    updated_value = current_value & ~update_value;\n    break;\n  case 2:\n    current_value = *(uint32_t *)(object_address + 0x70);\n    updated_value = current_value | update_value;\n    break;\n  default:\n    goto invalid_update_type;\n  }\n  *(uint32_t *)(object_address + 0x70) = updated_value;\n  \ninvalid_update_type:\n  *(uint32_t *)(object_address + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_values_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "data_length",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "buffer_length",
                "uVar1": "current_byte",
                "uVar2": "offset",
                "puVar3": "current_byte",
                "iVar4": "offset"
            },
            "code": "uint process_data_000844c4(int data_length, uint data, undefined4 *buffer, undefined4 buffer_length)\n{\n  ushort uVar1;\n  uint uVar2;\n  undefined *current_byte;\n  int offset;\n  \n  if ((data_length != 0) && (*(int *)(data_length + 0x38) == 0)) {\n    initialize_data();\n  }\n  uVar1 = *(ushort *)(buffer + 3);\n  uVar2 = (uint)uVar1;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(uVar2 << 0x1c)) || (offset = buffer[4], offset == 0)) {\n    offset = process_buffer(data_length, buffer, uVar1, uVar2, buffer_length);\n    if (offset != 0) {\n      return 0xffffffff;\n    }\n    uVar1 = *(ushort *)(buffer + 3);\n    offset = buffer[4];\n    uVar2 = (uint)uVar1;\n  }\n  data = data & 0xff;\n  if ((int)(uVar2 << 0x12) < 0) {\n    current_byte = (undefined *)*buffer;\n    offset = (int)current_byte - offset;\n    if (offset < (int)buffer[5]) {\n      goto LAB_000844f6;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    current_byte = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = uVar1 | 0x2000;\n    offset = (int)current_byte - offset;\n    if (offset < (int)buffer[5]) {\n        goto LAB_000844f6;\n    }\n  }\n  offset = finalize_buffer(data_length, buffer);\n  if (offset != 0) {\n    return 0xffffffff;\n  }\n  current_byte = (undefined *)*buffer;\n  offset = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = current_byte + 1;\n  *current_byte = (char)data;\n  if (((buffer[5] == offset) || (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (data == 10)))) && (offset = finalize_buffer(data_length, buffer), offset != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083808",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "reverse_bits_0008189c",
                "param_1": "input_num",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar4": "output_num",
                "uVar3": "negative_flag",
                "uVar5": "carry_bit",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint reverse_bits_0008189c(uint input_num)\n{\n  int leading_zeroes;\n  uint negative_flag;\n  uint output_num;\n  uint shift_amount;\n  if (input_num == 0) {\n    return 0;\n  }\n  negative_flag = input_num & 0x80000000;\n  if ((int)negative_flag < 0) {\n    input_num = -input_num;\n  }\n  leading_zeroes = count_leading_zeroes(input_num);\n  shift_amount = leading_zeroes - 8;\n  output_num = ((negative_flag | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7) {\n    uint carry_bit = 0 << (shift_amount & 0xff);\n    output_num = output_num + (input_num << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < carry_bit);\n    if (carry_bit == 0x80000000) {\n      output_num = output_num & 0xfffffffe;\n    }\n    return output_num;\n  }\n  uint shifted_input = input_num << (leading_zeroes + 0x18U & 0xff);\n  output_num = output_num + ((input_num >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f));\n  if ((shifted_input & 0x7fffffff) == 0) {\n    output_num = output_num & ~(shifted_input >> 0x1f);\n  }\n  return output_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "reverse_bits_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "i",
                "uVar5": "remaining_size",
                "bVar6": "is_less_than_eight"
            },
            "code": "undefined4 *copy_memory_0008234c(undefined4 *dest, undefined4 *src, uint size)\n{\n    undefined4 *dest_ptr;\n    undefined4 *src_ptr;\n    uint remaining_size;\n    uint i;\n    bool is_less_than_eight;\n    \n    dest_ptr = dest;\n    \n    if ((((uint)src | (uint)dest) & 3) != 0) {\n        if (size < 8) {\n            remaining_size = size - 4;\n            if (3 < size) {\n                do {\n                    src_ptr = src;\n                    dest_ptr = dest;\n                    is_less_than_eight = remaining_size != 0;\n                    remaining_size = remaining_size - 1;\n                    *(undefined *)dest_ptr = *(undefined *)src_ptr;\n                    dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n                    src = (undefined4 *)((int)src_ptr + 1);\n                } while (is_less_than_eight);\n                *(undefined *)(undefined4 *)((int)dest_ptr + 1) = *(undefined *)(undefined4 *)((int)src_ptr + 1);\n                *(undefined *)((int)dest_ptr + 2) = *(undefined *)((int)src_ptr + 2);\n                *(undefined *)((int)dest_ptr + 3) = *(undefined *)((int)src_ptr + 3);\n                return dest;\n            }\n            goto LAB_000823d0;\n        }\n        if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n            remaining_size = 4 - ((uint)dest & 3);\n            size = size - remaining_size;\n            src_ptr = src;\n            dest_ptr = dest;\n            if (((uint)dest & 1) != 0) {\n                src_ptr = (undefined4 *)((int)src + 1);\n                dest_ptr = (undefined4 *)((int)dest + 1);\n                *(undefined *)dest = *(undefined *)src;\n            }\n            dest = dest_ptr;\n            src = src_ptr;\n            if ((remaining_size & 2) != 0) {\n                src = (undefined4 *)((int)src_ptr + 2);\n                dest = (undefined4 *)((int)dest_ptr + 2);\n                *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n            }\n        }\n    }\n    i = 0;\n    while (size >= 0x40) {\n        for (i = 0; i < 0x10; i++) {\n            dest_ptr[i] = src[i];\n        }\n        dest_ptr += 0x10;\n        src += 0x10;\n        size -= 0x40;\n    }\n    remaining_size = size - 0x10;\n    if (remaining_size >= 0xffffffcf) {\n        do {\n            for (i = 0; i < 4; i++) {\n                dest_ptr[i] = src[i];\n            }\n            dest_ptr += 4;\n            src += 4;\n            remaining_size -= 0x10;\n        } while (remaining_size >= 0xffffffcf);\n    }\n    while (remaining_size >= 4) {\n        src_ptr = src;\n        dest_ptr = dest;\n        dest_ptr[0] = src_ptr[0];\n        dest_ptr[1] = src_ptr[1];\n        dest_ptr[2] = src_ptr[2];\n        dest_ptr[3] = src_ptr[3];\n        dest_ptr += 4;\n        src += 4;\n        remaining_size -= 4;\n    }\n    if (remaining_size != 0) {\n        src_ptr = src;\n        dest_ptr = dest;\n        if ((remaining_size & 1) != 0) {\n            src_ptr = (undefined4 *)((int)src + 1);\n            dest_ptr = (undefined4 *)((int)dest + 1);\n            *(undefined *)dest = *(undefined *)src;\n        }\n        if ((remaining_size & 2) != 0) {\n            *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n        }\n    }\n    return dest;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_device_00080a68",
                "PTR_DAT_00080a94": "device_config_ptr",
                "PTR_s__00080a98": "serial_config_ptr",
                "DAT_00080aa0": "device_type",
                "DAT_00080a9c": "device_id",
                "PTR_DAT_00080aa4": "device_status_ptr"
            },
            "code": "void initialize_device_00080a68(void)\n{\n  undefined *device_config;\n  device_config = PTR_DAT_00080a94;\n  setup_serial_connection(device_config,PTR_s__00080a98);\n  configure_device(device_config,DAT_00080a9c,DAT_00080aa0);\n  device_config = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  device_config[5] = 0;\n  device_config[6] = 6;\n  *(undefined2 *)(device_config + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_device_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "validate_param_and_call_func_0008165c",
                "param_1": "param_array",
                "param_2": "param_2",
                "param_3": "param_3",
                "iVar1": "result"
            },
            "code": "undefined4 *validate_param_and_call_func_0008165c(undefined4 *param_array, undefined4 param_2, undefined4 param_3) {\n  int result = FUN_0008163a(param_array, param_3);\n  if (result == 0) {\n    FUN_0008160c(param_array);\n  }\n  else {\n    param_array[2] = param_3;\n    FUN_00082994(*param_array, param_2);\n  }\n  return param_array;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008163a",
                "FUN_0008160c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "validate_param_and_call_func_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "uint combine_values_000815f8(int value1, uint value2) {\n  return value2 | value1 << 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_values_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_character_00084384",
                "param_1": "input_array",
                "param_2": "target_char",
                "param_3": "array_length",
                "puVar1": "current_element",
                "uVar2": "element_value",
                "pcVar3": "char_pointer_1",
                "pcVar4": "char_pointer_2",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_character_00084384(uint *input_array, char target_char, uint *array_length)\n{\n  uint *current_element;\n  uint element_value;\n  char *char_pointer_1;\n  char *char_pointer_2;\n  bool found_target_char;\n\n  if (((uint)input_array & 3) == 0) {\n    // If input_array is 4-byte aligned, start searching.\n    current_element = input_array;\n    if ((uint *)0x3 < array_length) {\n      do {\n        element_value = *input_array ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        current_element = input_array;\n        if ((element_value + 0xfefefeff & ~element_value & 0x80808080) != 0) break;\n        array_length = array_length + -1;\n        current_element = input_array + 1;\n        input_array = input_array + 1;\n      } while ((uint *)0x3 < array_length);\n    }\n    input_array = array_length;\n    char_pointer_2 = (char *)((int)input_array + -1);\n    if ((input_array != (uint *)0x0) && (input_array = current_element, *(char *)current_element != target_char)) {\n      char_pointer_1 = (char *)0x0;\n      do {\n        input_array = (uint *)((int)input_array + 1);\n        found_target_char = char_pointer_1 == char_pointer_2;\n        char_pointer_1 = char_pointer_1 + 1;\n        if (found_target_char) goto LAB_000843dc;\n      } while (*(char *)input_array != target_char);\n    }\n  }\n  else if (array_length == (uint *)0x0) {\n    // If input_array is not 4-byte aligned and array_length is 0, return NULL.\n    input_array = (uint *)0x0;\n  }\n  else if (*(char *)input_array != target_char) {\n    // If input_array is not 4-byte aligned and the first element is not the target character, search for the character.\n    current_element = (uint *)((int)input_array + 1);\n    array_length = (uint *)((int)array_length + -1);\n    do {\n      input_array = current_element;\n      if (((uint)input_array & 3) == 0) goto start_search;\n      if (array_length == (uint *)0x0) goto LAB_000843dc;\n      current_element = (uint *)((int)input_array + 1);\n      array_length = (uint *)((int)array_length + -1);\n    } while (*(char *)input_array != target_char);\n  }\n  return input_array;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "find_character_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flag_00081034",
                "param_1": "flag_address",
                "param_2": "new_flag_value",
                "param_3": "flag_mask",
                "PTR_": "flag_ptr",
                "DAT_": "masked_flag"
            },
            "code": "void update_flag_00081034(int flag_address, uint32_t new_flag_value, uint32_t flag_mask) {\n  uint32_t* PTR_ = (uint32_t*)(flag_address + 4);\n  uint32_t DAT_ = new_flag_value | *PTR_ | ((flag_mask & 1) << 7);\n  *PTR_ = DAT_;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_flag_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_to_buffer_00083974",
                "param_1": "buffer_value",
                "puVar1": "buffer_pointer",
                "puVar2": "buffer_array_pointer",
                "iVar3": "buffer_size",
                "iVar4": "buffer_index"
            },
            "code": "undefined4 add_to_buffer_00083974(undefined4 buffer_value)\n{\n  undefined *buffer_pointer;\n  undefined4 *buffer_array_pointer;\n  int buffer_size;\n  int buffer_index;\n  \n  buffer_pointer = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return buffer_value;\n  }\n  buffer_index = *(int *)PTR_DAT_0008396c;\n  buffer_array_pointer = *(undefined4 **)(buffer_index + 0x148);\n  if (buffer_array_pointer == (undefined4 *)0x0) {\n    buffer_array_pointer = (undefined4 *)(buffer_index + 0x14c);\n    *(undefined4 **)(buffer_index + 0x148) = buffer_array_pointer;\n  }\n  buffer_size = buffer_array_pointer[1];\n  if (0x1f < buffer_size) {\n    if ((DAT_00083970 == 0) ||\n       (buffer_array_pointer = (undefined4 *)FUN_00081df4(400), buffer_array_pointer == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_array_pointer = *(undefined4 *)(buffer_index + 0x148);\n    buffer_array_pointer[1] = 0;\n    buffer_size = 0;\n    *(undefined4 **)(buffer_index + 0x148) = buffer_array_pointer;\n    buffer_array_pointer[0x62] = 0;\n    buffer_array_pointer[99] = 0;\n  }\n  buffer_array_pointer[1] = buffer_size + 1;\n  buffer_array_pointer[buffer_size + 2] = buffer_pointer;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "process_result_00084700",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "data_ptr",
                "iVar2": "result_code"
            },
            "code": "void process_result_00084700(int* result, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n\tundefined* data_ptr = PTR_DAT_00084724;\n\t*(undefined4*)data_ptr = 0;\n\tint result_code = execute_task(arg1, arg2, arg3);\n\tif (result_code == -1 && *(int*)data_ptr != 0)\n\t{\n\t\t*result = *(int*)data_ptr;\n\t}\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "process_result_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "getValueFromPtr_thunk_00081714",
                "PTR_DAT_0008171c": "PTR_DATA"
            },
            "code": "int getValueFromPtr_thunk_00081714(){\n    int* ptr = (int*)PTR_DAT_0008171c;\n    return *ptr;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "getValueFromPtr_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "is_CY_false_or_ZR_true_00081ca8",
                "in_CY": "CY",
                "in_ZR": "ZR"
            },
            "code": "bool is_CY_false_or_ZR_true_00081ca8(void)\n{\n  bool is_CY_false = !(bool)CY || (bool)ZR;\n  return is_CY_false;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "is_CY_false_or_ZR_true_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr",
                "puVar2": "flags_ptr",
                "iVar3": "data_address",
                "uVar4": "data_value",
                "iVar5": "data_offset"
            },
            "code": "void update_data_00081318(int index, int value, undefined4 param_3)\\n{\\n  undefined *data_ptr;\\n  undefined *flags_ptr;\\n  int data_offset;\\n  undefined4 data_value;\\n  int data_address;\\n  \\n  flags_ptr = PTR_DAT_00081384;\\n  data_ptr = PTR_DAT_00081380;\\n  \\n  if (data_ptr[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((flags_ptr[index] & 0xf) == 5) {\\n      FUN_00081210(index, 1, param_3, 5, index, value, param_3);\\n    }\\n    flags_ptr[index] = flags_ptr[index] & 0xf | (byte)(value << 4);\\n    data_offset = *(int *)(data_ptr + index * 0x1c);\\n    data_value = *(undefined4 *)(data_ptr + index * 0x1c + 4);\\n    data_address = FUN_00080e04(data_offset, data_value);\\n    if (data_address == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(data_offset + 100) = data_value;\\n        return;\\n      }\\n      *(undefined4 *)(data_offset + 0x60) = data_value;\\n      return;\\n    }\\n    FUN_00080d7a(data_offset, data_value, value, 0, 1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "update_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "readable_return_value_00081714",
                "PTR_DAT_0008171c": "pointer_data"
            },
            "code": "readable_return_value_00081714() {\n  return *(undefined4 *)PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "readable_return_value_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "process_data_0008449c",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "result",
                "uVar2": "flag"
            },
            "code": "void process_data_0008449c(undefined4 data, int data_info){\n  int result = get_processed_data(data, *(short *)(data_info + 0xe));\n  ushort flag;\n  if (result == -1) {\n    flag = *(ushort *)(data_info + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_info + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data_info + 0x50) = result;\n  }\n  *(ushort *)(data_info + 0xc) = flag;\n  return;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "uVar1": "product",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008477c(uint input1, int input2, uint32_t param3, uint32_t param4, int *result_array) {\n  uint32_t product = FUNC_000847e0() * ((uint64_t)param4 << 32 | param3);\n  uint32_t difference1 = input1 - product;\n  uint32_t difference2 = input2 - ((uint64_t)product >> 32) - (input1 < product);\n  result_array[0] = difference1;\n  result_array[1] = difference2;\n  return;\n}",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "data_overflow",
                "uVar2": "next_byte",
                "cVar3": "current_byte",
                "iVar4": "function_result",
                "bVar5": "byte_counter"
            },
            "code": "int process_data_000801b0(int **data)\n{\n  bool data_overflow = false;\n  undefined byte_counter;\n  char current_byte;\n  int function_result;\n  byte data_index = *(byte *)((int)data + 6);\n  \n  if (data_index > 1) {\n    FUN_00081318(data_index, 0);\n  }\n  \n  *(undefined *)((int)data + 0x49) = 0;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    while ((function_result = (**(code **)(**data + 8))()) != 0) {\n      byte_counter = *(byte *)((int)data + 0x49);\n      undefined next_byte = (**(code **)(**data + 0xc))();\n      current_byte = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + byte_counter + 9) = next_byte;\n      byte_counter = current_byte + 1;\n      *(byte *)((int)data + 0x49) = byte_counter;\n      if (byte_counter > 63) {\n        data_overflow = true;\n      }\n    }\n  }\n  \n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  \n  if (data_overflow) {\n    current_byte = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    current_byte = *(char *)((int)data + 0x49);\n  }\n  \n  return (int)current_byte;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "buffer_value",
                "uVar1": "new_buffer_index",
                "DAT_0000084": "current_buffer_index",
                "PTR_0000080": "buffer_index_ptr",
                "*(int *)(param_1 + 0x80)": "*(int *)(buffer_address + buffer_index_ptr)",
                "*(uint *)(param_1 + 0x84)": "*(uint *)(buffer_address + current_buffer_index)",
                "*(undefined *)(param_1 + *(int *)(param_1 + 0x80))": "*(undefined *)(buffer_address + *(int *)(buffer_address + buffer_index_ptr))",
                "*(uint *)(param_1 + 0x80)": "*(uint *)(buffer_address + buffer_index_ptr)",
                "uVar1 != *(uint *)(param_1 + 0x84)": "new_buffer_index != current_buffer_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined buffer_value)\n{\n  uint new_buffer_index;\n  uint DAT_0000084 = *(uint *)(buffer_address + 0x84);\n  new_buffer_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_buffer_index != DAT_0000084) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = buffer_value;\n    *(uint *)(buffer_address + 0x84) = new_buffer_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "param_6": "parameter_6",
                "puVar1": "PTR_PTR_FUNCTION_1"
            },
            "code": "void initialize_parameters_000814e4(undefined4 *parameters, undefined4 parameter_2, undefined parameter_3, undefined4 parameter_4, undefined4 parameter_5, undefined4 parameter_6)\n{\n  parameters[0] = PTR_PTR_FUNCTION_1;\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[3] = parameter_2;\n  parameters[4] = parameter_5;\n  parameters[5] = parameter_6;\n  parameters[6] = parameter_3;\n  parameters[7] = parameter_4;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": false,
            "current_name": "initialize_parameters_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_data_00080d54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "PTR_DAT_00000014": "data[0x11]",
                "PTR_DAT_0000004c": "data[0x19]",
                "PTR_DAT_00000048": "data[0x18]",
                "PTR_DAT_00000020": "data[8]",
                "PTR_DAT_00000024": "data[9]",
                "PTR_DAT_00000080": "data[0x20]",
                "PTR_DAT_00000014_00": "data[5]",
                "PTR_DAT_00000000": "*data"
            },
            "code": "void update_data_00080d54(uint32_t* data, uint32_t value, uint32_t flags) {\n    bool is_negative = (int)(flags << 0x1f) < 0;\n    PTR_DAT_00000014 = value;\n    if (is_negative) {\n        PTR_DAT_0000004c = value;\n    }\n    else {\n        PTR_DAT_00000048 = value;\n    }\n    bool is_bit_set = (flags & 10) != 0;\n    if (is_bit_set) {\n        PTR_DAT_00000020 = value;\n    }\n    else {\n        PTR_DAT_00000024 = value;\n    }\n    if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n        PTR_DAT_00000080 = value;\n    }\n    PTR_DAT_00000014_00 = value;\n    PTR_DAT_00000000 = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_data_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_index",
                "uVar4": "bit"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length)\n{\n  int current_index;\n  uint checksum = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    char bit_index = \"\\b\";\n    do {\n      uint bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_index = bit_index + -1;\n    } while (bit_index != \"\\0\");\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00082ac0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "perform_operation_on_data_00081e04",
                "param_1": "data",
                "*DAT_00081e10": "data_pointer"
            },
            "code": "void perform_operation_on_data_00081e04(int data){\n  perform_complex_operation(**DAT_00081e10,data);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "perform_operation_on_data_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "check_params_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "FUN_000847ac": "calculate_result"
            },
            "code": "int check_params_00084750(int input1, int input2, int input3, int input4)\n{\n    int result;\n    if ((input4 == 0) && (input3 == 0)) {\n        if (input2 != 0 || input1 != 0) {\n            input1 = -1;\n        }\n        result = input1;\n    }\n    else {\n        result = calculate_result();\n    }\n    return result;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "check_params_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar1": "time_ptr",
                "puVar2": "ptr1",
                "iVar3": "n",
                "iVar4": "k",
                "iVar5": "l",
                "iVar6": "m",
                "iVar7": "i",
                "iVar8": "j",
                "DAT_00080be8": "time_ptr_getter()",
                "FUN_00080e9c": "set_mode()",
                "DAT_00080bec": "ptr1_getter()",
                "DAT_00080bf0": "var1_getter()",
                "FUN_00081d7c": "set_mode_2()",
                "FUN_00081318": "function1()",
                "DAT_00080c00": "var3_getter()",
                "DAT_00080bfc": "var2_getter()",
                "DAT_00080bf8": "var1_getter()",
                "DAT_00080bf4": "var4_getter()",
                "FUN_00080da0": "function2()",
                "FUN_00080e18": "function3()",
                "FUN_00080f9c": "function4()",
                "FUN_00081042": "function5()",
                "FUN_00081034": "function6()",
                "FUN_0008106e": "function7()",
                "FUN_00081066": "function8()",
                "DAT_00080c08": "ptr2_getter()"
            },
            "code": "void initialize_system_00080ae4(void)\n{\n  uint *time_ptr;\n  undefined4 *ptr1;\n  int i, j, k, l, m, n;\n  time_ptr = time_getter();\n  ptr1 = DAT_00080bec;\n  ptr1[1] = *time_ptr / 1000 - 1;\n  *(undefined *)(DAT_00080bec + 0x23) = 0xf0;\n  ptr1[2] = 0;\n  set_mode();\n  i = 0;\n  do {\n    j = i + 1;\n    function1(i, 0);\n    m = DAT_00080bf0;\n    l = DAT_00080bfc;\n    k = DAT_00080c00;\n    n = DAT_00080bf4;\n    i = j;\n  } while (j != 0x4f);\n  *(undefined4 *)(k + 0xa0) = 0xffffffff;\n  *(undefined4 *)(n + 0xa0) = 0xffffffff;\n  *(undefined4 *)(m + 0xa0) = 0xffffffff;\n  *(undefined4 *)(l + 0xa0) = 0xffffffff;\n  function2(k, 1, 0x300, 0);\n  function1(0, 1);\n  function2(k, 1, 0xc00, 0);\n  function2(k, 1, 0x3000, 0);\n  function2(l, 2, 0x30, 0);\n  function2(n, 1, 0xc00, 0);\n  function2(k, 1, 3, 0);\n  function2(n, 1, 0xc000, 0);\n  function3(0x25);\n  function4(DAT_00080bec, *time_ptr, DAT_00080c08, 0xc);\n  function5(DAT_00080bec, 0, 0x300000, 1);\n  function6(DAT_00080bec, 0, 0);\n  function7(DAT_00080bec, 0xffffffff);\n  function8(DAT_00080bec);\n}\n",
            "called": [
                "FUN_0008106e",
                "FUN_00081042",
                "FUN_00080e18",
                "FUN_00081034",
                "FUN_00081066",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00081d7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "insert_element_00081d5c",
                "param_1": "new_element",
                "param_2": "element_list",
                "param_3": "element_count",
                "puVar1": "element_ptr",
                "uVar2": "element_index",
                "iVar3": "element_base",
                "uVar4": "bit_mask"
            },
            "code": "uint32_t insert_element_00081d5c(uint32_t new_element, uint32_t *element_list, uint32_t *element_count)\n{\n  uint32_t *element_ptr;\n  uint32_t element_index;\n  uint32_t bit_mask;\n  \n  element_index = *(int *)PTR_DAT_0008396c;\n  element_ptr = *(uint32_t **)(element_index + 0x148);\n  if (element_ptr == (uint32_t *)0x0) {\n    element_ptr = (uint32_t *)(element_index + 0x14c);\n    *(uint32_t **)(element_index + 0x148) = element_ptr;\n  }\n  bit_mask = 1 << (element_ptr[1] & 0xff);\n  if (element_ptr[1] > 0x1f) {\n    if ((DAT_00083970 == 0) || (element_ptr = (uint32_t *)FUN_00081df4(400), element_ptr == (uint32_t *)0x0)) {\n      return 0xffffffff;\n    }\n    *element_ptr = *(uint32_t *)(element_index + 0x148);\n    element_ptr[1] = 0;\n    *(uint32_t **)(element_index + 0x148) = element_ptr;\n    element_ptr[0x62] = 0;\n    element_ptr[99] = 0;\n  }\n  element_ptr[element_ptr[1] + 2] = new_element;\n  element_ptr[element_ptr[1] + 0x22] = element_list;\n  element_ptr[element_ptr[1] + 0x42] = element_count;\n  element_ptr[0x62] |= bit_mask;\n  element_ptr[99] |= bit_mask;\n  element_ptr[1]++;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "insert_element_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "find_integer_00082970",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "error_code"
            },
            "code": "void find_integer_00082970(int *result, undefined4 input)\n{\n  undefined *ptr;\n  int error_code;\n  ptr = PTR_DAT_00082990;\n  *(undefined4 *)ptr = 0;\n  error_code = check_input(input);\n  if ((error_code == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "find_integer_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "get_one_000811be"
            },
            "code": "int get_one_000811be(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "get_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "copy_parameter_to_another_00081c54",
                "param_1": "destination",
                "param_2": "source",
                "FUN_00081c5c": "memcpy"
            },
            "code": "void copy_parameter_to_another_00081c54(void* destination, void* source)\n{\n  memcpy(destination, source, sizeof(source));\n  return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "copy_parameter_to_another_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "check_if_param1_valid_0008163a",
                "param_1": "pointer_to_param1",
                "param_2": "param2",
                "iVar1": "ret_val",
                "return": "status",
                "*param_1": "*pointer_to_param1",
                "uint": "uint32_t"
            },
            "code": "int check_if_param1_valid_0008163a(int *pointer_to_param1, uint32_t param2) {\n  int status = 1;\n  if ((*pointer_to_param1 == 0) || ((uint32_t)pointer_to_param1[1] < param2)) {\n    int ret_val = FUN_00081622(pointer_to_param1);\n    if (ret_val == 0) {\n      status = 0;\n    }\n    if (pointer_to_param1[2] == 0) {\n      *(uint8_t *)*pointer_to_param1 = 0;\n    }\n  }\n  return status;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "check_if_param1_valid_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "call_function_with_data_000825a0",
                "param_1": "param1",
                "param_2": "param2",
                "*DAT_000825ac": "data",
                "FUNC_000825b0": "function"
            },
            "code": "void call_function_with_*call_function_with_data_000825a0(int* *call_function_with_data_000825a0, int param1, int param2) {\n  function(**call_function_with_data_000825a0, param1, param2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "call_function_with_data_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "get_pointer_and_value_000815d4",
                "param_1": "pointer_array",
                "param_2": "value"
            },
            "code": "undefined4* get_pointer_and_value_000815d4(undefined4 *pointer_array, undefined4 value){\n  call_some_function();\n  *pointer_array = PTR_PTR_FUN_00081454_1_000815f4;\n  pointer_array[9] = value;\n  return pointer_array;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "get_pointer_and_value_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00081df4"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "startProcess_00080164",
                "param_1": "processPtr",
                "puVar1": "processAddress",
                "iVar2": "result",
                "PTR_DAT_000801ac": "processAddress",
                "code": "functionPointer",
                "callFunction1": "callFunctionWith1",
                "callFunction2": "callFunctionWith2"
            },
            "code": "void startProcess_00080164(int **processPtr)\n{\n    // Get the address of the process\n    undefined *PTR_DAT_000801ac = PTR_DAT_000801ac;\n    // Set the process pointer to the process address\n    *processPtr = (int *)PTR_DAT_000801ac;\n    // Call a function at offset 0x18 of the process\n    (**(code **)(*(int *)PTR_DAT_000801ac + 0x18))(PTR_DAT_000801ac);\n    // If a certain condition is met, call two other functions\n    if (1 < *(byte *)((int)processPtr + 6)) {\n        callFunction1(*(byte *)((int)processPtr + 6), 1);\n        callFunction2(*(undefined *)((int)processPtr + 6), 0);\n    }\n    // Call a function repeatedly until it returns -1\n    int result;\n    do {\n        result = (**(code **)(**processPtr + 0xc))();\n    } while (-1 < result);\n    // Set some values to zero\n    *(undefined *)((int)processPtr + 0x49) = 0;\n    *(undefined *)((int)processPtr + 0x4a) = 0;\n    *(undefined2 *)(processPtr + 0x15) = 0;\n    *(undefined2 *)((int)processPtr + 0x52) = 0;\n    *(undefined2 *)(processPtr + 0x14) = 0;\n    return;\n}",
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "startProcess_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "num_bytes",
                "iVar1": "i"
            },
            "code": "uint copy_bytes_000811cc(uint dest, int src, uint num_bytes)\n{\n  int i;\n  for (i = 0; i < (int)num_bytes; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(src + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "copy_bytes_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "findValue_000846dc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "dataPointer",
                "iVar2": "result"
            },
            "code": "void findValue_000846dc(int *output, undefined4 input) {\n  undefined *dataPointer;\n  int result;\n  dataPointer = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  result = calculate(input);\n  if ((result == -1) && (*(int *)dataPointer != 0)) {\n    *output = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "findValue_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "result",
                "iVar3": "exponent",
                "uVar4": "mask",
                "0U": "sign_extension",
                "0x7fffffff": "sign_bit"
            },
            "code": "uint calculate_00081894(uint input)\n{\n  int leading_zeroes = 0;\n  uint result = 0;\n  int exponent = 0;\n  uint mask = 0;\n  uint sign_extension = 0;\n  uint sign_bit = 0;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input);\n  exponent = leading_zeroes - 8;\n  mask = (uint)0xffffffff >> (31 - exponent);\n  sign_extension = (input << exponent) & mask;\n  sign_bit = ((uint)0x7fffffff < (0 << exponent)) ? 1 : 0;\n  result = (sign_extension + (uint)0x4a800000 + (0U >> (31 - exponent))) + sign_bit;\n  \n  if (leading_zeroes > 7) {\n    if ((sign_extension & 0x80000000) != 0) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  \n  sign_extension = input << (leading_zeroes + 0x18);\n  result = (result + ((input >> (0x20 - (leading_zeroes + 0x18))) - ((int)sign_extension >> 0x1f)));\n  sign_bit = ((sign_extension & 0x7fffffff) == 0) ? ~(sign_extension >> 0x1f) : result;\n  return sign_bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_or_return_error_000845bc",
                "param_1": "output",
                "param_2": "byte",
                "param_3": "byte_count",
                "*param_1": "*output",
                "*param_2": "*byte",
                "undefined": "unsigned char",
                "undefined4": "int",
                "uint": "unsigned int"
            },
            "code": "int write_byte_or_return_error_000845bc(int *output, unsigned char byte, uint byte_count) {\n  if (output == NULL) {\n    return 0;\n  }\n  if (byte_count < 256) {\n    *output = byte;\n    return 1;\n  }\n  *output = 138;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_or_return_error_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_memory_with_value_00082504",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "value_to_fill",
                "uVar4": "words_to_fill",
                "bVar5": "is_size_zero",
                "LAB_00082580": "end_of_function"
            },
            "code": "void fill_memory_with_value_00082504(uint32_t *memory, uint8_t value, uint32_t size) {\n    uint32_t *current_word;\n    uint32_t words_to_fill;\n    uint32_t remaining_bytes;\n    uint32_t value_to_fill = (value << 24) | (value << 16) | (value << 8) | value;\n\n    if (((uint32_t)memory & 3) != 0) {\n        if (size == 0) {\n            return;\n        }\n        current_word = memory;\n        size--;\n        while (true) {\n            memory = (uint32_t *)((int)current_word + 1);\n            *(uint8_t *)current_word = value;\n            if (((uint32_t)memory & 3) == 0) {\n                break;\n            }\n            current_word = memory;\n            size--;\n            if (size == 0) {\n                return;\n            }\n        }\n    }\n    words_to_fill = size >> 4;\n    remaining_bytes = size & 0xf;\n    while (words_to_fill-- > 0) {\n        *memory++ = value_to_fill;\n        *memory++ = value_to_fill;\n        *memory++ = value_to_fill;\n        *memory++ = value_to_fill;\n    }\n    while (remaining_bytes-- > 0) {\n        *(uint8_t *)memory++ = value;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "input_parameter",
                "*PTR_DAT_0008010c": "*pointer_to_initialized",
                "DAT_00080110": "global_initialized_value",
                "DAT_00080114": "initialized_value"
            },
            "code": "int check_if_initialized_000800f4(int input_parameter) {\\n  if (*PTR_DAT_0008010c == \"\\0\") {\\n    if (DAT_00080110 != 0) {\\n      input_parameter = DAT_00080110;\\n    }\\n    *PTR_DAT_0008010c = 1;\\n  }\\n  return input_parameter;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "parse_data_0008378c",
                "param_1": "data",
                "param_2": "data_size",
                "iVar1": "result",
                "iVar2": "func_result",
                "local_488": "stack_buffer",
                "local_480": "buffer_size",
                "local_47c": "flag",
                "local_47a": "flag2",
                "local_478": "buffer",
                "local_474": "var1",
                "local_470": "var2",
                "local_46c": "var3",
                "local_464": "var4",
                "local_424": "var5",
                "auStack_420": "stack_data"
            },
            "code": "int parse_data_0008378c(undefined4 data, int data_size)\n{\n  int result = 0;\n  int func_result = 0;\n  undefined *stack_buffer [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 flag2;\n  undefined *buffer;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined stack_data [1024];\n  \n  var5 = *(undefined4 *)(data_size + 100);\n  var3 = *(undefined4 *)(data_size + 0x1c);\n  flag2 = *(undefined2 *)(data_size + 0xe);\n  var4 = *(undefined4 *)(data_size + 0x24);\n  stack_buffer[0] = stack_data;\n  flag = *(ushort *)(data_size + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  var1 = 0x400;\n  var2 = 0;\n  buffer = stack_buffer[0];\n  result = FUNC_00082b38(data, stack_buffer);\n  if ((result > -1) && (func_result = FUN_00083adc(data, stack_buffer), func_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data_size + 0xc) = *(ushort *)(data_size + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "parse_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "extract_data_00083adc",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "data_buffer",
                "iVar2": "remaining_data_length",
                "uVar3": "flags",
                "uVar4": "flags_extended",
                "iVar5": "copied_data_length",
                "pcVar6": "extract_data_fn_ptr",
                "unaff_r4": "return_value",
                "iVar7": "total_data_length"
            },
            "code": "undefined4 extract_data_00083adc(int *input_buffer, int *output_buffer)\n{\n    int *data_buffer;\n    int remaining_data_length;\n    int copied_data_length;\n    int extracted_data_length;\n    code *extract_data_00083adc_fn_ptr;\n    undefined4 return_value;\n    int total_data_length;\n    ushort flags;\n    uint flags_extended;\n\n    if ((input_buffer != NULL) && (input_buffer[14] == 0)) {\n        do_something();\n    }\n\n    if (*(short *)(output_buffer + 3) == 0) {\n        return 0;\n    }\n\n    flags = *(ushort *)(output_buffer + 3);\n\n    if ((int)((uint)flags << 0x1c) < 0) {\n        data_buffer = output_buffer[4];\n\n        if (data_buffer == NULL) {\n            return 0;\n        }\n\n        total_data_length = *output_buffer;\n\n        if ((flags & 3) == 0) {\n            remaining_data_length = output_buffer[5];\n        }\n        else {\n            remaining_data_length = 0;\n        }\n\n        *output_buffer = data_buffer;\n        copied_data_length = total_data_length - data_buffer;\n        output_buffer[2] = remaining_data_length;\n\n        do {\n            if (copied_data_length < 1) {\n                return 0;\n            }\n\n            extracted_data_length = (*(code *)output_buffer[9])(input_buffer, output_buffer[7], data_buffer, copied_data_length, return_value);\n            copied_data_length = copied_data_length - extracted_data_length;\n            data_buffer = data_buffer + extracted_data_length;\n        } while (extracted_data_length > 0);\n\n        *(ushort *)(output_buffer + 3) = flags | 0x40;\n        return 0xffffffff;\n    }\n    else {\n        *(ushort *)(output_buffer + 3) = flags | 0x800;\n\n        if ((output_buffer[1] < 1) && (output_buffer[15] < 1)) {\n            return 0;\n        }\n\n        extract_data_00083adc_fn_ptr = (code *)output_buffer[10];\n\n        if (extract_data_00083adc_fn_ptr == NULL) {\n            return 0;\n        }\n\n        flags_extended = (uint)(flags | 0x800);\n        total_data_length = *input_buffer;\n        *input_buffer = 0;\n\n        if ((flags & 0x1000) == 0) {\n            copied_data_length = (*extract_data_00083adc_fn_ptr)(input_buffer, output_buffer[7], flags_extended & 0x1000, 1);\n\n            if ((copied_data_length == -1) && (*input_buffer != 0)) {\n                if ((*input_buffer == 0x1d) || (*input_buffer == 0x16)) {\n                    *input_buffer = total_data_length;\n                    return 0;\n                }\n                else {\n                    *(ushort *)(output_buffer + 3) = flags | 0x40;\n                    return 0xffffffff;\n                }\n            }\n\n            flags = *(ushort *)(output_buffer + 3);\n            extract_data_00083adc_fn_ptr = (code *)output_buffer[10];\n        }\n        else {\n            copied_data_length = output_buffer[20];\n        }\n\n        if (((int)(flags_extended << 0x1d) < 0) && (copied_data_length = copied_data_length - output_buffer[1], output_buffer[12] != 0)) {\n            copied_data_length = copied_data_length - output_buffer[15];\n        }\n\n        copied_data_length = (*extract_data_00083adc_fn_ptr)(input_buffer, output_buffer[7], copied_data_length, 0);\n\n        if (copied_data_length == -1) {\n            extracted_data_length = *input_buffer;\n\n            if (extracted_data_length != 0) {\n                if ((extracted_data_length != 0x1d) && (extracted_data_length != 0x16)) {\n                    *(ushort *)(output_buffer + 3) = flags | 0x40;\n                    return 0xffffffff;\n                }\n                else {\n                    *(ushort *)(output_buffer + 3) = flags & 0xf7ff;\n                    *output_buffer = output_buffer[4];\n                    output_buffer[1] = 0;\n                    goto LAB_00083a00;\n                }\n            }\n            else {\n                flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n                output_buffer[1] = 0;\n                *(ushort *)(output_buffer + 3) = flags;\n                *output_buffer = output_buffer[4];\n            }\n        }\n        else {\n            flags = *(ushort *)(output_buffer + 3) & 0xf7ff;\n            *output_buffer = output_buffer[4];\n            *(ushort *)(output_buffer + 3) = flags;\n            output_buffer[1] = 0;\n        }\n\n        if ((int)((uint)flags << 0x13) < 0) {\n            output_buffer[20] = copied_data_length;\n        }\n\n    LAB_00083a00:\n        data_buffer = (int *)output_buffer[12];\n        *input_buffer = total_data_length;\n\n        if (data_buffer == NULL) {\n            return 0;\n        }\n\n        if (data_buffer != output_buffer + 16) {\n            do_something_else(input_buffer);\n        }\n\n        output_buffer[12] = 0;\n        return 0;\n    }\n}\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "extract_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00082438(piVar9,param_2);\n      }\n      FUN_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_value_at_offset_000803d4",
                "param_1": "offset",
                "iVar1": "index",
                "value": "value",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c"
            },
            "code": "int check_value_at_offset_000803d4(int offset)\n{\n  int index = 0;\n  int value = *(byte *)(offset + 10);\n  if ((value << 0x18) < 0) {\n    *(short *)(offset + 0x54) = *(short *)(offset + 0x54) + 1;\n    return 0xfb;\n  }\n  while (index != 8) {\n    if (PTR_DAT_0008040c[index] == value) {\n      return 0;\n    }\n    index = index + 1;\n  }\n  *(short *)(offset + 0x54) = *(short *)(offset + 0x54) + 1;\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_value_at_offset_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "check_value_0008043e",
                "param_1": "value",
                "cVar1": "result",
                "uVar2": "uVar",
                "piVar3": "thunk_result",
                "iVar4": "comparison_result",
                "unaff_r6": "byte_value",
                "thunk_FUN_00081714": "thunk_function",
                "FUN_000801b0": "function_a",
                "FUN_000803d4": "function_b",
                "*(byte *)((int)param_1 + 5)": "byte_value",
                "*(code **)(**param_1 + 8)": "code_pointer",
                "param_1[0x17]": "value_pointer",
                "*(undefined *)(param_1 + 2)": "undefined_pointer_1",
                "*(undefined *)((int)param_1 + 7)": "undefined_pointer_2",
                "*(short *)(param_1 + 0x15)": "short_pointer"
            },
            "code": "int check_value_0008043e(int **value)\n{\n  char result;\n  uint uVar;\n  int *thunk_result;\n  int comparison_result;\n  uint byte_value;\n  \n  byte_value = *(byte *)((int)value + 5);\n  if (byte_value < 4) {\n    uVar = (**(code **)(**value + 8))();\n    byte_value = uVar & 0xff;\n  }\n  thunk_result = (int *)thunk_function();\n  if (value[0x17] < thunk_result) {\n    *(undefined *)(value + 2) = 0xff;\n    *(undefined *)((int)value + 7) = 0;\n    *(short *)(value + 0x15) = *(short *)(value + 0x15) + 1;\n  }\n  else if (7 < byte_value) {\n    function_a(value);\n    comparison_result = function_b(value);\n    if (comparison_result == 0) {\n      if (*(byte *)((int)value + 10) - 3 < 2) {\n        function_c(value);\n      }\n      *(undefined *)((int)value + 7) = 0;\n      result = *(char *)((int)value + 0x49);\n    }\n    else {\n      *(undefined *)((int)value + 7) = 0;\n      result = (char)comparison_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_value_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_params_0008160c",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "FUN_00081e04": "execute_reset",
                "param_1[1]": "param_array[1]",
                "param_1[2]": "param_array[2]"
            },
            "code": "void reset_params_0008160c(int *param_array)\n{\n  if (*param_array != 0) {\n    execute_reset();\n  }\n  *param_array = 0;\n  param_array[2] = 0;\n  param_array[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_params_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_input_00080e18",
                "param_1": "input",
                "uVar1": "mask",
                "DAT_00080e58": "data",
                "*(uint *)(DAT_00080e58 + 0x18)": "*mask1",
                "*(uint *)(DAT_00080e58 + 0x10)": "*mask2",
                "*(uint *)(DAT_00080e58 + 0x108)": "*mask3",
                "*(uint *)(DAT_00080e58 + 0x100)": "*mask4"
            },
            "code": "int check_input_00080e18(uint input){\n                      int flag = 0;\n                      if (input < 0x2d) {\n                        if (input < 0x20) {\n                          uint mask = 1 << (input & 0xff);\n                          if ((mask & *(uint *)(DAT_00080e58 + 0x18)) != mask) {\n                            *(uint *)(DAT_00080e58 + 0x10) = mask;\n                          }\n                        }\n                        else {\n                          uint mask = 1 << (input - 0x20 & 0xff);\n                          if ((mask & *(uint *)(DAT_00080e58 + 0x108)) != mask) {\n                            *(uint *)(DAT_00080e58 + 0x100) = mask;\n                          }\n                        }\n                      }\n                      else {\n                        flag = 1;\n                      }\n                      return flag;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_input_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "get_default_value_00081184"
            },
            "code": "int get_default_value_00081184(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "get_default_value_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_value_from_pointer_00084298",
                "*DAT_000842a0": "value_pointer",
                "return": "return",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_pointer_00084298() {\n  int* *DAT_000842a0 = DAT_000842a0;\n  int value = **DAT_000842a0;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "address",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(address + 0x14)"
            },
            "code": "void set_default_value_00081066(int address)\n{\n    *(int *)(address + 0x14) = 0xffff;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_default_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_to_int32_00081cd0",
                "param_1": "input",
                "uVar1": "shifted_input_high_byte",
                "uVar2": "shifted_input_low_byte",
                "shifted_input": "shifted_input",
                "shifted_input_with_sign": "shifted_input_with_sign",
                "shift_amount": "shift_amount",
                "shifted_input_final": "shifted_input_final"
            },
            "code": "uint convert_to_int32_00081cd0(uint input) {\n  uint shifted_input = input << 1;\n  if (shifted_input < 0x7f000000) {\n    return 0;\n  }\n  uint shifted_input_high_byte = shifted_input >> 0x18;\n  uint shifted_input_low_byte = 0x9e - shifted_input_high_byte;\n  if (shifted_input_high_byte < 0x9f && shifted_input_low_byte != 0) {\n    uint shifted_input_with_sign = (shifted_input << 8) | 0x80000000;\n    uint shift_amount = shifted_input_low_byte & 0xff;\n    uint shifted_input_final = shifted_input_with_sign >> shift_amount;\n    if ((input & 0x80000000) != 0) {\n      shifted_input_final = -shifted_input_final;\n    }\n    return shifted_input_final;\n  }\n  if (shifted_input_low_byte == 0xffffff9f && (input & 0x7fffff) != 0) {\n    return 0;\n  }\n  if ((input & 0x80000000) == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "convert_to_int32_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "call_function_with_data_00081df4",
                "param_1": "param",
                "FUNC_00081e14": "function_with_data",
                "*DAT_00081e00": "data"
            },
            "code": "void call_function_with_*call_function_with_data_00081df4(void* *call_function_with_data_00081df4, int param){\n  function_with_*call_function_with_data_00081df4(**call_function_with_data_00081df4, param);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "call_function_with_data_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data",
                "iVar2": "offset",
                "bVar3": "index",
                "uVar4": "index",
                "iVar5": "target",
                "uVar1": "processed_data"
            },
            "code": "void process_data_00080410(int data, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  uint index = 0;\n  while( true ) {\n    if (*(byte *)(data + 0xb) >> 1 <= index) break;\n    uint offset = (index * 2 + 3 & 0xff) + data;\n    int target = *(int *)(data + 0x4c);\n    undefined2 processed_data = FUN_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,*(byte *)(data + 0xb),param_4);\n    *(undefined2 *)(target + index * 2) = processed_data;\n    index++;\n  }\n  return;\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data",
                "param_2": "type",
                "param_3": "value",
                "param_4": "bit_value",
                "bVar1": "is_negative",
                "DAT_00080df8": "data_processing_func",
                "DAT_00080dfc": "data_processing_func",
                "DAT_00080e00": "data_processing_func"
            },
            "code": "int process_data_00080da0(int data, int type, int value, unsigned int bit_value) {\n    bool is_negative = (int)(bit_value << 0x1f) < 0;\n    switch(type) {\n        case 1:\n        case 2:\n            (*DAT_00080df8)(data, type, value);\n            *(int *)(data + 0x44) = value;\n            if (is_negative) {\n                *(int *)(data + 100) = value;\n            }\n            if (!is_negative) {\n                *(int *)(data + 0x60) = value;\n            }\n            break;\n        case 3:\n            (*DAT_00080df8)(data, value, bit_value, DAT_00080df8, data);\n            break;\n        case 4:\n        case 5:\n            (*DAT_00080df8)(data, value, type == 5, (bit_value << 0x1d) >> 0x1f, bit_value & 1, type, value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d2e",
                "FUN_00080d54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "process_data_00080258",
                "param_1": "data",
                "param_2": "num_bytes",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "byte_val",
                "uVar2": "result",
                "iVar3": "loop_result",
                "uVar4": "byte_index"
            },
            "code": "void process_data_00080258(int **data, uint8_t num_bytes, uint32_t param_3, uint32_t param_4) {\n    uint8_t byte_val = *(uint8_t *)((int)data + 0x49);\n    uint32_t byte_index = (uint32_t)byte_val;\n    uint16_t result = process_data_00080258_internal(data, byte_index, param_3, param_4, param_4);\n    *(char *)((int)data + byte_index + 9) = (char)((result & 0xFF00) >> 8);\n    *(char *)((int)data + ((byte_index + 1) & 0xFF) + 9) = (char)(result & 0xFF);\n    *(uint8_t *)((int)data + 0x49) = byte_val + 2;\n    if (1 < *(uint8_t *)((int)data + 6)) {\n        call_function_with_byte(*(uint8_t *)((int)data + 6), 1);\n    }\n    if (*(uint8_t *)((int)data + 5) < 4) {\n        (**(function_pointer *)(**data + 4))(*data, (int)data + 9, *(undefined *)((int)data + 0x49));\n    }\n    if (1 < *(uint8_t *)((int)data + 6)) {\n        call_function_with_byte(*(uint8_t *)((int)data + 6), 0);\n    }\n    if (*(uint8_t *)((int)data + 5) < 4) {\n        int loop_result;\n        do {\n            loop_result = (**(function_pointer *)(**data + 0xc))();\n        } while (loop_result >= -1);\n    }\n    *(undefined *)((int)data + 0x49) = 0;\n    int thunk_result = thunk_function();\n    data[0x17] = (int *)(thunk_result + (uint16_t)*(uint16_t *)((int)data + 0x56));\n    *(uint16_t *)((int)data + 0x52) = *(uint16_t *)((int)data + 0x52) + 1;\n    return;\n}",
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "process_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "check_and_set_value_00081622",
                "param_1": "ptr_value",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result"
            },
            "code": "int check_and_set_value_00081622(int *ptr_value, int size, undefined4 arg3, undefined4 arg4)\n{\n  int result = FUN_000825a0(*ptr_value, size + 1, arg3, arg4, arg4);\n  if (result != 0) {\n    *ptr_value = result;\n    ptr_value[1] = size;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "check_and_set_value_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "end_ptr",
                "uVar5": "temp_size",
                "puVar6": "temp_ptr",
                "uVar7": "temp_var"
            },
            "code": "void reverse_copy_00082438(uint32_t* dest, uint32_t* src, uint32_t size)\n{\n    if(src >= dest || src + size <= dest)\n    {\n        for(int i = size - 1; i >= 0; i--)\n        {\n            dest[i] = src[i];\n        }\n    }\n    else\n    {\n        if(size >= 16 && (((uint32_t)src | (uint32_t)dest) & 3) == 0)\n        {\n            uint32_t* end = (uint32_t*)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10);\n            while(dest != end)\n            {\n                *dest++ = *src++;\n                *dest++ = *src++;\n                *dest++ = *src++;\n                *dest++ = *src++;\n            }\n            size = size & 3;\n            if(size == 0)\n            {\n                return;\n            }\n        }\n        while(size--)\n        {\n            *dest++ = *src++;\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_data_structures_00081508",
                "param_1": "data_structure",
                "param_2": "divisor",
                "param_3": "init_value",
                "puVar1": "data_array",
                "iVar2": "integer_var",
                "puVar3": "pointer_var"
            },
            "code": "void initialize_data_structures_00081508(int data_structure, uint32_t divisor, uint32_t init_value)\n{\n  uint32_t *data_array;\n  int integer_var;\n  uint32_t *pointer_var;\n\n  initialize_data_structure_helper(*(uint32_t *)(data_structure + 0x20));\n  pointer_var = *(uint32_t **)(data_structure + 0x18);\n  pointer_var[0x48] = 0x202;\n  *pointer_var = 0xac;\n  data_array = DAT_00081570;\n  pointer_var[1] = init_value;\n  pointer_var[8] = *data_array / divisor >> 4;\n  pointer_var[3] = 0xffffffff;\n  pointer_var[2] = 0x61;\n  *(int *)(DAT_00081574 + ((uint32_t)(int32_t)(char)*(uint8_t *)(data_structure + 0x1c) >> 5) * 4) = 1 << (uint32_t)(*(uint8_t *)(data_structure + 0x1c) & 0x1f);\n  integer_var = *(int *)(data_structure + 0x10);\n  *(uint32_t *)(integer_var + 0x84) = 0;\n  *(uint32_t *)(integer_var + 0x80) = 0;\n  integer_var = *(int *)(data_structure + 0x14);\n  *(uint32_t *)(integer_var + 0x84) = 0;\n  *(uint32_t *)(integer_var + 0x80) = 0;\n  *pointer_var = 0x50;\n  return;\n}\n",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "data",
                "param_2": "status",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "*DAT_000838c8": "*status",
                "FUN_00083b14": "reset_status",
                "FUN_00083d9c": "reset_status"
            },
            "code": "int process_data_00083808(uint16_t *data, int *DAT_000838c8)\n{\n  uint16_t uVar1;\n  int iVar2;\n  uint16_t uVar3;\n  uint16_t uVar4;\n\n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    reset_status();\n  }\n  uVar4 = *(uint16_t *)(data + 3);\n  uVar3 = (uint16_t)uVar4;\n  if ((int)(uVar3 << 0x1c) < 0) {\n    iVar2 = data[4];\n  }\n  else {\n    if (-1 < (int)(uVar3 << 0x1b)) {\n      *DAT_000838c8 = 9;\n      *(uint16_t *)(data + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int)(uVar3 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          reset_status();\n          uVar4 = *(uint16_t *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      iVar2 = data[4];\n      uVar4 = uVar4 & 0xffdb;\n      *data = iVar2;\n      data[1] = 0;\n    }\n    else {\n      iVar2 = data[4];\n    }\n    *(uint16_t *)(data + 3) = uVar4 | 8;\n    uVar3 = (uint16_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    process_data_00083808(status, data);\n    uVar3 = *(uint16_t *)(data + 3);\n    iVar2 = data[4];\n  }\n  uint16_t uVar5 = uVar3 & 1;\n  if (uVar5 == 0) {\n    if (-1 < (int)(uVar3 << 0x1e)) {\n      uVar5 = data[5];\n    }\n    data[2] = uVar5;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int)((uint16_t)*(data + 3) << 0x18) < 0)) {\n    *(uint16_t *)(data + 3) = *(uint16_t *)(data + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_in_integer_0008105c",
                "param_1": "integer_ptr",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "bit_mask"
            },
            "code": "void set_bit_in_integer_0008105c(int* integer_ptr, uint bit_position) {\n    int bit_mask = 1 << (bit_position & 0xff);\n    *integer_ptr |= bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_in_integer_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "data_buffer",
                "param_2": "buffer_size",
                "param_3": "flags",
                "param_4": "output_buffer",
                "uVar1": "result",
                "iVar2": "status",
                "pcVar3": "function_pointer",
                "auStack_24": "aux_buffer"
            },
            "code": "void process_data_0008456c(uint32_t *data_buffer, int buffer_size, uint32_t flags, uint32_t *output_buffer) {\n  uint32_t result = 0;\n  int status = 0;\n  code *function_pointer;\n  uint32_t aux_buffer[3];\n  \n  if (buffer_size == 0) {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    result = get_auxiliary_data();\n    status = (*function_pointer)(data_buffer, aux_buffer, 0, result, output_buffer);\n  }\n  else {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    result = get_auxiliary_data();\n    status = (*function_pointer)(data_buffer, buffer_size, flags, result, output_buffer);\n  }\n  if (status == -1) {\n    *output_buffer = 0;\n    *data_buffer = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_page_permissions_000811b4",
                "param_1": "page_table",
                "param_2": "permissions",
                "PTR_": "page_table",
                "DAT_": "permissions"
            },
            "code": "void set_page_permissions_000811b4(int* PTR_, int DAT_) {\n  *(PTR_ + 1) = DAT_;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_page_permissions_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4",
                "DAT_000816dc": "data"
            },
            "code": "void initialize_data_000816d4(void)\n{\n  int* pointer_to_DAT_000816dc = (int*)(DAT_000816dc + 4);\n  *pointer_to_DAT_000816dc = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_data_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = FUN_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_0008234c",
                "FUN_00084384",
                "FUN_00082438",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_array_with_value_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "has_value_at_index_1",
                "param_4": "has_value_at_index_2",
                "param_5": "has_value_at_index_3",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_array_with_value_00080d7a(int* array, int value, int has_value_at_index_1, int has_value_at_index_2, int has_value_at_index_3) {\n    array[17] = value;\n    if (has_value_at_index_3 == 0) {\n        array[24] = value;\n    }\n    else {\n        array[25] = value;\n    }\n    if (has_value_at_index_2 == 0) {\n        array[21] = value;\n    }\n    else {\n        array[20] = value;\n    }\n    if (has_value_at_index_1 == 0) {\n        array[13] = value;\n    }\n    else {\n        array[12] = value;\n    }\n    array[4] = value;\n    *array = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_array_with_value_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_00080e9c",
                "puVar1": "system_config",
                "iVar2": "system_status",
                "DAT_00080f08": "system_config_ptr",
                "*DAT_00080f08": "*system_config",
                "DAT_00080f0c": "system_status_ptr",
                "*(int *)(DAT_00080f0c + 0x20)": "*(int32_t *)(system_status_ptr + 0x20)",
                "DAT_00080f14": "system_config_default",
                "*(int *)(iVar2 + 0x68)": "*(int32_t *)(system_status + 0x68)",
                "*(undefined4 *)(DAT_00080f0c + 0x20)": "*(uint32_t *)(system_status + 0x20)",
                "DAT_00080f10": "system_config_custom",
                "*(uint *)(DAT_00080f0c + 0x30)": "*(uint32_t *)(system_status + 0x30)",
                "system_config_special": "system_config_special",
                "DAT_00080f18": "system_event_default",
                "*DAT_00080f20": "*system_event_ptr"
            },
            "code": "void initialize_system_00080e9c(void)\n{\n    uint32_t *DAT_00080f08 = DAT_00080f08;\n    *DAT_00080f08 = 0x400;\n    system_config[0x80] = 0x400;\n    int32_t *system_status = DAT_00080f0c;\n    if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7)\n    {\n        *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n        while (-1 < *(int32_t *)(system_status + 0x68) << 0x1f);\n    }\n    *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f10;\n    while (-1 < *(int32_t *)(system_status + 0x68) << 0xf);\n    *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n    while (-1 < *(int32_t *)(system_status + 0x68) << 0x1c);\n    *(uint32_t *)(system_status + 0x28) = system_config_special;\n    while (-1 < *(int32_t *)(system_status + 0x68) << 0x1e);\n    *(uint *)(DAT_00080f0c + 0x30) = 0x11;\n    while (-1 < *(int32_t *)(system_status + 0x68) << 0x1c);\n    *(uint *)(DAT_00080f0c + 0x30) = 0x12;\n    while (-1 < *(int32_t *)(system_status + 0x68) << 0x1c);\n    *DAT_00080f20 = DAT_00080f18;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_system_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data",
                "iVar3": "result",
                "uVar4": "flag",
                "puVar2": "ptr"
            },
            "code": "void process_data_00084464(int *output, int input_address, undefined4 arg1, undefined4 arg2)\n{\n  short data = *(short *)(input_address + 0xe);\n  ushort flag = *(ushort *)(input_address + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    FUN_00084700(output, data, 0, 2);\n    flag = *(ushort *)(input_address + 0xc);\n  }\n  *(ushort *)(input_address + 0xc) = flag & 0xefff;\n  undefined *ptr = PTR_DAT_000845fc;\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  int result = FUN_000811cc((int)data, arg1, arg2, arg2, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_max_uint_000811ae"
            },
            "code": "uint32_t return_max_uint_000811ae(void)\n{\n  return UINT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "return_max_uint_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "add_param_to_global_0008118c",
                "param_1": "param",
                "puVar1": "global_ptr",
                "iVar2": "current_value"
            },
            "code": "int add_param_to_global_0008118c(int param) {\n  undefined *global_ptr;\n  int current_value;\n  global_ptr = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  current_value = *(int *)global_ptr;\n  *(int *)global_ptr = param + current_value;\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "add_param_to_global_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_set_to_zero_00082a50",
                "param_1": "address",
                "iVar1": "offset",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "is_byte_zero"
            },
            "code": "int count_bytes_set_to_zero_00082a50(uint32_t address)\\n\\\n{\\n\\\n    int count = 0;\\n\\\n    uint32_t *ptr = (uint32_t *)(address & 0xfffffffc);\\n\\\n    int offset = -(address & 3);\\n\\\n    uint32_t value = *ptr;\\n\\\n    if ((address & 3) != 0) {\\n\\\n        value |= 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\\n\\\n    }\\n\\\n    while (ptr++, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\\n\\\n        offset += 4;\\n\\\n        value = *ptr;\\n\\\n    }\\n\\\n    if ((value & 0xff) == 0) {\\n\\\n        offset += 1;\\n\\\n        if ((value & 0xff00) == 0) {\\n\\\n            offset += 1;\\n\\\n            if ((value & 0xff0000) == 0) {\\n\\\n                offset += 1;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    count = offset + 1;\\n\\\n    return count;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "count_bytes_set_to_zero_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_value_at_address_offset_0008106e",
                "param_1": "address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(address + 0x28)"
            },
            "code": "void set_value_at_address_offset_0008106e(int address, int value) {\n  *(int *)(address + 0x28) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_value_at_address_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2"
            },
            "code": "int return_zero_000811c2(void) {return 0;}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "returnZero_000811c6"
            },
            "code": "int returnZero_000811c6(void) { \n\treturn 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "returnZero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_block_00083d00",
                "param_1": "memory_pool",
                "param_2": "requested_size",
                "iVar1": "data_segment_start",
                "puVar2": "new_block_size_ptr",
                "iVar3": "temp",
                "uVar4": "block_size",
                "iVar5": "block_start",
                "DAT_00083d90": "data_segment_start_address",
                "do_nothing_00082598": "do_nothing_before_allocation",
                "PTR_DAT_00083d94": "new_block_start_address_ptr",
                "do_nothing_0008259c": "do_nothing_after_allocation",
                "DAT_00083d98": "memory_pool_end_address_ptr",
                "block_header": "block_header_ptr",
                "old_block_end": "old_block_end_address",
                "new_block_end": "new_block_end_address",
                "old_pool_end": "old_memory_pool_end_address"
            },
            "code": "int allocate_memory_block_00083d00(void *memory_pool, int requested_size) {\n    int data_segment_start = DAT_00083d90;\n    do_nothing_00082598();\n    uint32_t *block_header = *(uint32_t **)(data_segment_start + 8);\n    uint32_t block_size = (block_header[1] & 0xfffffffc);\n    int block_start = ((block_size - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n    if (0xfff < block_start) {\n        int old_block_end = block_header[1] + block_size;\n        int new_block_end = FUN_00082970(memory_pool, -block_start);\n        if (new_block_end != -1) {\n            block_header[1] = block_size - block_start | 1;\n            *(int *)PTR_DAT_00083d94 = new_block_end - block_start;\n            do_nothing_0008259c(memory_pool);\n            return 1;\n        }\n        int new_block_start = FUN_00082970(memory_pool, 0);\n        uint32_t new_block_size = new_block_start - block_header[1];\n        if (0xf < new_block_size) {\n            int old_pool_end = *DAT_00083d98;\n            block_header[1] = new_block_size | 1;\n            *(int *)PTR_DAT_00083d94 = new_block_start - old_pool_end;\n        }\n    }\n    do_nothing_0008259c(memory_pool);\n    return 0;\n}",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d00"
        }
    },
    "used_tokens": 96560,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00082ac0",
            "FUN_00080ce0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081c94",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00081454",
            "FUN_00084728",
            "FUN_00083c40",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00083d9c",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00080d2e",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "FUN_00083974",
            "FUN_00084700",
            "thunk_FUN_00081714",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081e04",
            "FUN_00084750",
            "FUN_00080ae4",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000803d4",
            "FUN_0008043e",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_00083d00"
        ]
    ],
    "locked_functions": []
}