{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfUnset_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_unset_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPointer)\n\n{\n  int returnValue;\n  \n  *dataPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081210(*(byte *)((int)dataPointer + 6),1);\n    FUN_00081318(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool exceededMax;\n  undefined value;\n  char result;\n  int returnValue;\n  byte currentCount;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  exceededMax = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      currentCount = *(byte *)((int)data + 0x49);\n      value = (**(code **)(**data + 0xc))();\n      result = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + currentCount + 9) = value;\n      currentCount = result + 1;\n      *(byte *)((int)data + 0x49) = currentCount;\n      if (0x3f < currentCount) {\n        exceededMax = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (exceededMax) {\n    result = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    result = *(char *)((int)data + 0x49);\n  }\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "exceededMax",
                "uVar2": "value",
                "cVar3": "result",
                "iVar4": "returnValue",
                "bVar5": "currentCount"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataAddress,uint dataLength)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitLoopCounter;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentIndex = dataAddress; (currentIndex - dataAddress & 0xffU) < dataLength; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitLoopCounter = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitLoopCounter = bitLoopCounter + -1;\n    } while (bitLoopCounter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitLoopCounter",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_param_value_00080258",
            "code": "\nvoid updateParamValue_00080258(int **paramList,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byteVal;\n  undefined2 ushortVal;\n  int intValue;\n  uint uintVal;\n  \n  byteVal = *(byte *)((int)paramList + 0x49);\n  uintVal = (uint)byteVal;\n  ushortVal = FUN_0008021c(paramList,uintVal,value2,value3,value3);\n  *(char *)((int)paramList + uintVal + 9) = (char)((ushort)ushortVal >> 8);\n  *(char *)((int)paramList + (uintVal + 1 & 0xff) + 9) = (char)ushortVal;\n  *(byte *)((int)paramList + 0x49) = byteVal + 2;\n  if (1 < *(byte *)((int)paramList + 6)) {\n    FUN_00081318(*(byte *)((int)paramList + 6),1);\n  }\n  if (*(byte *)((int)paramList + 5) < 4) {\n    (**(code **)(**paramList + 4))(*paramList,(int)paramList + 9,*(undefined *)((int)paramList + 0x49));\n  }\n  if (1 < *(byte *)((int)paramList + 6)) {\n    FUN_00081318(*(byte *)((int)paramList + 6),0);\n  }\n  if (*(byte *)((int)paramList + 5) < 4) {\n    do {\n      intValue = (**(code **)(**paramList + 0xc))();\n    } while (-1 < intValue);\n  }\n  *(undefined *)((int)paramList + 0x49) = 0;\n  intValue = thunk_FUN_00081714();\n  paramList[0x17] = (int *)(intValue + (uint)*(ushort *)((int)paramList + 0x56));\n  *(short *)((int)paramList + 0x52) = *(short *)((int)paramList + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_param_value_00080258",
                "param_1": "paramList",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "byteVal",
                "uVar2": "ushortVal",
                "iVar3": "intValue",
                "uVar4": "uintVal"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "decode_and_update_000802da",
            "code": "\nint decode_and_update_000802da(int input_addr,uint param1,uint param2,ushort *data)\n\n{\n  char error_code;\n  byte byte_var;\n  undefined temp;\n  ushort temp1;\n  uint temp2;\n  ushort *ptr;\n  undefined param1_lo;\n  undefined param1_hi;\n  ushort param2_lo;\n  \n  param1_lo = (undefined)param1;\n  param1_hi = (undefined)(param1 >> 8);\n  param2_lo = (ushort)param2;\n  temp2 = param2 & 0xffff;\n  if (*(char *)(input_addr + 4) != '\\0') {\n    error_code = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(input_addr + 7) != '\\0') {\n    error_code = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((param1 & 0xff) - 1 & 0xff)) {\n    error_code = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(input_addr + 9) = param1_lo;\n  *(undefined *)(input_addr + 10) = param1_hi;\n  *(ushort **)(input_addr + 0x4c) = data;\n  *(char *)(input_addr + 0xb) = (char)(param1 >> 0x18);\n  *(char *)(input_addr + 0xc) = (char)(param1 >> 0x10);\n  temp = (undefined)(param2 >> 8);\n  switch(param1_hi) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(input_addr + 0xd) = temp;\n    break;\n  case 5:\n    temp1 = *data;\n    if (temp1 != 0) {\n      temp1 = 1;\n    }\n    *(char *)(input_addr + 0xd) = -(char)temp1;\n    temp2 = 0;\n    break;\n  case 6:\n    *(char *)(input_addr + 0xd) = (char)(*data >> 8);\n    temp2 = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_var = (byte)(param2_lo >> 3) & 0xfe;\n    if ((param2 & 0xf) != 0) {\n      byte_var = byte_var + 1;\n    }\n    *(char *)(input_addr + 0xe) = (char)param2;\n    *(undefined *)(input_addr + 0xd) = temp;\n    *(byte *)(input_addr + 0xf) = byte_var;\n    temp = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(input_addr + 0xd) = temp;\n    *(char *)(input_addr + 0xe) = (char)param2;\n    data = data + -1;\n    *(char *)(input_addr + 0xf) = (char)temp2 * '\\x02';\n    *(undefined *)(input_addr + 0x49) = 7;\n    ptr = data + temp2;\n    while (data != ptr) {\n      byte_var = *(byte *)(input_addr + 0x49);\n      *(char *)(input_addr + (uint)byte_var + 9) = (char)(data[1] >> 8);\n      temp2 = byte_var + 1 & 0xff;\n      *(char *)(input_addr + 0x49) = (char)temp2;\n      data = data + 1;\n      *(char *)(temp2 + input_addr + 9) = (char)*data;\n      *(byte *)(input_addr + 0x49) = byte_var + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(input_addr + 0xe) = (char)temp2;\n  temp = 6;\nLAB_0008034a:\n  *(undefined *)(input_addr + 0x49) = temp;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(input_addr);\n  *(undefined *)(input_addr + 7) = 1;\n  error_code = '\\0';\nLAB_000803cc:\n  return (int)error_code;\n}\n\n",
            "renaming": {
                "FUN_000802da": "decode_and_update_000802da",
                "param_1": "input_addr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "data",
                "cVar1": "error_code",
                "bVar2": "byte_var",
                "uVar3": "temp",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "puVar6": "ptr",
                "local_1c": "param1_lo",
                "local_1b": "param1_hi",
                "local_18": "param2_lo"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int currentIndex;\n  byte counter;\n  uint convertedCounter;\n  int arrayPointer;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPointer + 0xb) >> 1 <= convertedCounter) break;\n    currentIndex = (convertedCounter * 2 + 3 & 0xff) + dataPointer;\n    arrayPointer = *(int *)(dataPointer + 0x4c);\n    result = FUN_000815f8(*(undefined *)(currentIndex + 9),*(undefined *)(currentIndex + 10),currentIndex,\n                         *(byte *)(dataPointer + 0xb),param4);\n    *(undefined2 *)(arrayPointer + convertedCounter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "currentIndex",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "arrayPointer"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_update_data_0008043e",
            "code": "\nint check_and_update_data_0008043e(int **data)\n\n{\n  char result;\n  uint temp;\n  int *thunk_result;\n  int error_code;\n  uint limit;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    temp = (**(code **)(**data + 8))();\n    limit = temp & 0xff;\n  }\n  thunk_result = (int *)thunk_FUN_00081714();\n  if (data[0x17] < thunk_result) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < limit) {\n    FUN_000801b0(data);\n    error_code = FUN_000803d4(data);\n    if (error_code == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        FUN_00080410(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)error_code;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_update_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "temp",
                "piVar3": "thunk_result",
                "iVar4": "error_code",
                "unaff_r6": "limit"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int result;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  result = thunk_FUN_00081714();\n  DAT_200709e0 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070a48 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070934 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "iVar1": "result",
                "software_interrupt": "interrupt"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "update_data_000805d0",
            "code": "\n\n\nvoid updateData_000805d0(void)\n\n{\n  uint result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int counter;\n  uint *ptr1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      counter = thunk_FUN_00081714();\n      DAT_200708c0 = counter + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        counter = thunk_FUN_00081714();\n        DAT_200708c0 = counter + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    temp1 = FUN_0008189c(DAT_20070940);\n    temp2 = FUN_00081730(temp1,DAT_200709c8);\n    temp1 = DAT_200708c4;\n    DAT_20070930 = temp2;\n    temp3 = FUN_00081734(temp2,DAT_200708c4);\n    temp3 = FUN_00081944(temp3,DAT_2007094c);\n    temp3 = FUN_00081734(temp3,DAT_20070914);\n    DAT_2007094c = temp3;\n    temp1 = FUN_00081730(temp2,temp1);\n    temp1 = FUN_00081944(temp1,DAT_200709c4);\n    temp1 = FUN_00081730(temp1,DAT_2007096c);\n    DAT_200709c4 = temp1;\n    temp4 = FUN_00081944(temp2,DAT_20070a4c);\n    temp4 = FUN_00081734(temp4,temp3);\n    FUN_00081734(temp4,temp1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = temp2;\n    DAT_20070914 = temp3;\n    DAT_2007096c = temp1;\n    counter = thunk_FUN_00081714();\n    DAT_200709e0 = counter + DAT_20070970;\n  }\n  temp1 = FUN_0008189c(DAT_20070970);\n  counter = FUN_00081ca8(DAT_2007091c,temp1);\n  if (counter != 0) {\n    DAT_2007091c = temp1;\n  }\n  counter = FUN_00081c94(DAT_2007091c,0);\n  if (counter != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "update_data_000805d0",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "counter",
                "puVar7": "ptr1",
                "puVar8": "ptr2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_components_00080c0c",
            "code": "\nvoid initializeComponents_00080c0c(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,parameter3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_components_00080c0c",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_value_00080d2e",
            "code": "\nvoid updateValue_00080d2e(int baseAddress,undefined4 mode,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "mode",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_values_based_on_flags_00080d54",
            "code": "\nvoid setValuesBasedOnFlags_00080d54(undefined4 *outputArray,undefined4 value,uint flags)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = value;\n  if (isFlagSet) {\n    outputArray[0x19] = value;\n  }\n  if (!isFlagSet) {\n    outputArray[0x18] = value;\n  }\n  isFlagSet = (flags & 10) != 0;\n  if (isFlagSet) {\n    outputArray[8] = value;\n  }\n  if (!isFlagSet) {\n    outputArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = value;\n  }\n  outputArray[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_values_based_on_flags_00080d54",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "assign_values_00080d7a",
            "code": "\nvoid assignValues_00080d7a(undefined4 *array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[0x11] = value;\n  if (condition3 == 0) {\n    array[0x18] = value;\n  }\n  else {\n    array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    array[0x15] = value;\n  }\n  else {\n    array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    array[0xd] = value;\n  }\n  else {\n    array[0xc] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "assign_values_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_function_data_00080da0",
            "code": "\nundefined4 updateFunctionData_00080da0(int functionData,int caseValue,undefined4 newValue,uint bitwiseValue)\n\n{\n  bool isNegative;\n  \n  switch(caseValue) {\n  case 1:\n  case 2:\n    FUN_00080d2e(functionData,caseValue,newValue);\n    isNegative = (int)(bitwiseValue << 0x1f) < 0;\n    *(undefined4 *)(functionData + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(functionData + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(functionData + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_00080d54(functionData,newValue,bitwiseValue,0x80d55,functionData);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(functionData,newValue,caseValue == 5,(bitwiseValue << 0x1d) >> 0x1f,bitwiseValue & 1,caseValue,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_function_data_00080da0",
                "param_1": "functionData",
                "param_2": "caseValue",
                "param_3": "newValue",
                "param_4": "bitwiseValue",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "perform_bitwise_operation_00080e04",
            "code": "\nuint performBitwiseOperation_00080e04(int inputValue,uint maskValue)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputValue + 8) & maskValue;\n  if (result != 0) {\n    if ((maskValue & *(uint *)(inputValue + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "perform_bitwise_operation_00080e04",
                "param_1": "inputValue",
                "param_2": "maskValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "update_bitmask_00080e18",
            "code": "\n\n\nundefined4 updateBitmask_00080e18(uint value)\n\n{\n  uint bitmask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitmask = 1 << (value & 0xff);\n      if ((bitmask & _DAT_400e0618) != bitmask) {\n        _DAT_400e0610 = bitmask;\n      }\n    }\n    else {\n      bitmask = 1 << (value - 0x20 & 0xff);\n      if ((bitmask & _DAT_400e0708) != bitmask) {\n        _DAT_400e0700 = bitmask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "update_bitmask_00080e18",
                "param_1": "value",
                "uVar1": "bitmask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  arrayVariable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "arrayVariable"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *threshold,uint dataSize,int blockSize,int thresholdMultiplier)\n\n{\n  uint numBlocks;\n  uint i;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  numBlocks = dataSize / (uint)(blockSize * 2);\n  if (dataSize == blockSize * 2 * numBlocks) {\n    numBlocks = numBlocks - 1;\n  }\n  i = 0;\n  do {\n    if ((uint)(thresholdMultiplier * (int)(((ulonglong)dataSize / (ulonglong)((numBlocks + 1) * 2)) / 1000000)) <=\n        thresholdValues[i]) {\n      threshold[1] = (i & 0xf) << 0x10 | (numBlocks & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    i = i + 1;\n  } while (i != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "threshold",
                "param_2": "dataSize",
                "param_3": "blockSize",
                "param_4": "thresholdMultiplier",
                "local_58": "thresholdValues",
                "uVar1": "numBlocks",
                "uVar2": "i"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_param_00081034",
            "code": "\nvoid updateParam_00081034(int ptr,uint value_1,uint value_2)\n\n{\n  *(uint *)(ptr + 4) = value_1 | *(uint *)(ptr + 4) | (value_2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_param_00081034",
                "param_1": "ptr",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "set_flags_and_values_00081042",
            "code": "\nvoid setFlagsAndValues_00081042(int dataPtr,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataPtr + 4) =\n       value2 | *(uint *)(dataPtr + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "set_flags_and_values_00081042",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_in_integer_0008105c",
            "code": "\nvoid setBitInInteger_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_in_integer_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "init_memory_00081066",
            "code": "\nvoid initMemory_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "init_memory_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_components_00081184",
            "code": "\nundefined4 initializeComponents_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_components_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "sum_with_dat_address_0008118c",
            "code": "\nint sum_with_dat_address_0008118c(int input_value)\n\n{\n  int previous_sum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_sum = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_sum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "sum_with_dat_address_0008118c",
                "param_1": "input_value",
                "iVar1": "previous_sum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_negative_value_000811ae",
            "code": "\nint get_negative_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_negative_value_000811ae",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "get_one_000811be",
            "code": "\nint getOne_000811be(void)\n\n{\n  returnValue 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "get_one_000811be",
                "undefined4": "int",
                "return": "returnValue"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nundefined4 initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_return_value_000811c6",
            "code": "\nundefined4 getReturnValue_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_return_value_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param,int source,uint numBytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)numBytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param",
                "param_2": "source",
                "param_3": "numBytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_value_thunk_00081714",
            "code": "\nundefined4 get_data_value_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_value_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "perform_operation_00081210",
            "code": "\n\n\nint performOperation_00081210(int inputParam,int operation)\n\n{\n  int result;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte lowerNibble;\n  byte combinedNibbles;\n  int tempVar4;\n  int tempVar5;\n  \n  result = inputParam;\n  if ((&DAT_00084d24)[inputParam * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputParam] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[inputParam * 0x1c]);\n    }\n    combinedNibbles = (&DAT_20070d94)[inputParam];\n    lowerNibble = combinedNibbles & 0xf;\n    if ((lowerNibble < 3) && (combinedNibbles != 0)) {\n      if (lowerNibble == 2) {\n        if (operation == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (operation == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (operation == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (operation != 1) {\nLAB_0008126c:\n      if (operation == 0) {\n        result = inputParam * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        combinedNibbles = (&DAT_20070d94)[inputParam] & 0xf0 | 2;\n      }\n      else {\n        if (operation != 2) {\n          return result;\n        }\n        result = inputParam * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        combinedNibbles = (&DAT_20070d94)[inputParam] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[inputParam] = combinedNibbles;\n      return result;\n    }\n    tempVar4 = inputParam * 0x1c;\n    tempVar5 = *(int *)(&DAT_00084d18 + tempVar4);\n    if (combinedNibbles >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    result = FUN_00080da0(tempVar5,tempVar2,*(undefined4 *)(&DAT_00084d1c + tempVar4),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar4));\n    (&DAT_20070d94)[inputParam] = (&DAT_20070d94)[inputParam] & 0xf0 | 3;\n    if (*(int *)(tempVar5 + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + tempVar4);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "perform_operation_00081210",
                "param_1": "inputParam",
                "param_2": "operation",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "lowerNibble",
                "bVar6": "combinedNibbles",
                "iVar7": "tempVar4",
                "iVar8": "tempVar5"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_data_00081318",
            "code": "\nvoid updateData_00081318(int index,int value,undefined4 flag)\n\n{\n  int result;\n  undefined4 data;\n  int ptrData;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,flag,5,index,value,flag);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    ptrData = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(ptrData,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptrData + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptrData + 0x60) = data;\n      return;\n    }\n    FUN_00080d7a(ptrData,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "flag",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "ptrData"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_relocation_index_is_zero_00081388",
            "code": "\nvoid executeIfRelocationIndexIsZero_00081388(void)\n\n{\n  if ((relocationArray[6].relocationInfo != 0xffffffff) &&\n     (relocationArray[6].relocationInfo = relocationArray[6].relocationInfo - 1,\n     relocationArray[6].relocationInfo == 0)) {\n    (*(functionPointer *)((int)&relocationArray[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_relocation_index_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset",
                "code": "functionPointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_block_000813a8",
            "code": "\nint initializeMemoryBlock_000813a8(int memoryAddress)\n\n{\n  FUN_00082504(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_block_000813a8",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_increment_index_000813c2",
            "code": "\nvoid updateAndIncrementIndex_000813c2(int data,undefined value)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(data + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(data + 0x84)) {\n    *(undefined *)(data + *(int *)(data + 0x80)) = value;\n    *(uint *)(data + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_increment_index_000813c2",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newValue)\n\n{\n  int structOffset;\n  uint counter;\n  \n  structOffset = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(structOffset + 0x84) == *(int *)(structOffset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    counter = *(int *)(structOffset + 0x80) + 1U & 0x8000007f;\n    if ((int)counter < 0) {\n      counter = (counter - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(structOffset + 0x84) == counter);\n    *(char *)(structOffset + *(int *)(structOffset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = counter;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "structOffset",
                "uVar2": "counter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *outputArray,undefined4 inputValue,undefined flag,undefined4 parameter1,\n                 undefined4 parameter2,undefined4 parameter3)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue;\n  *outputArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(outputArray + 7) = flag;\n  outputArray[4] = parameter2;\n  outputArray[8] = parameter1;\n  outputArray[5] = parameter3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "flag",
                "param_4": "parameter1",
                "param_5": "parameter2",
                "param_6": "parameter3"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_memory_00081508",
            "code": "\nvoid initializeMemory_00081508(int address,uint size,undefined4 value)\n\n{\n  int tempVar1;\n  undefined4 *pointer;\n  \n  FUN_00080e18(*(undefined4 *)(address + 0x20));\n  pointer = *(undefined4 **)(address + 0x18);\n  pointer[0x48] = 0x202;\n  *pointer = 0xac;\n  pointer[1] = value;\n  pointer[8] = relocationArray[6].r_offset / size >> 4;\n  pointer[3] = 0xffffffff;\n  pointer[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(address + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(address + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(address + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(address + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *pointer = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_memory_00081508",
                "param_1": "address",
                "param_2": "size",
                "param_3": "value",
                "iVar1": "tempVar1",
                "puVar2": "pointer",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_pointer_000815d4",
            "code": "\nundefined4 * initializePointer_000815d4(undefined4 *output,undefined4 input)\n\n{\n  FUN_000814e4();\n  *output = &PTR_FUN_00081454_1_000857d8;\n  output[9] = input;\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_pointer_000815d4",
                "param_1": "output",
                "param_2": "input"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_byte_and_int_000815f8",
            "code": "\nuint combineByteAndInt_000815f8(int byteValue,uint intValue)\n\n{\n  return intValue | byteValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_byte_and_int_000815f8",
                "param_1": "byteValue",
                "param_2": "intValue"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_and_return_pointer_000815fe",
            "code": "\nundefined4 * executeAndReturnPointer_000815fe(undefined4 *inputData)\n\n{\n  FUN_00081e04(*inputData);\n  return inputData;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_and_return_pointer_000815fe",
                "param_1": "inputData"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_variables_0008160c",
            "code": "\nvoid resetVariables_0008160c(int *variable)\n\n{\n  if (*variable != 0) {\n    FUN_00081e04();\n  }\n  *variable = 0;\n  variable[2] = 0;\n  variable[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_variables_0008160c",
                "param_1": "variable",
                "param_1[2]": "variable[2]",
                "param_1[1]": "variable[1]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "check_and_update_value_00081622",
            "code": "\nint checkAndUpdateValue_00081622(int *ptr,int count,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*ptr,count + 1,value1,value2,value2);\n  if (result != 0) {\n    *ptr = result;\n    ptr[1] = count;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "check_and_update_value_00081622",
                "param_1": "ptr",
                "param_2": "count",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_set_data_0008163a",
            "code": "\nundefined4 checkAndSetData_0008163a(int *data,uint threshold)\n\n{\n  int result;\n  \n  if ((*data == 0) || ((uint)data[1] < threshold)) {\n    result = FUN_00081622(data);\n    if (result == 0) {\n      return 0;\n    }\n    if (data[2] == 0) {\n      *(undefined *)*data = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_set_data_0008163a",
                "param_1": "data",
                "param_2": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "check_and_update_param_0008165c",
            "code": "\nundefined4 * checkAndUpdateParam_0008165c(undefined4 *paramArray,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_0008163a(paramArray,value2);\n  if (result == 0) {\n    FUN_0008160c(paramArray);\n  }\n  else {\n    paramArray[2] = value2;\n    FUN_00082994(*paramArray,value1);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "check_and_update_param_0008165c",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_parameter_values_00081682",
            "code": "\nundefined4 * initializeParameterValues_00081682(undefined4 *outputArray,int inputValue)\n\n{\n  undefined4 resultValue;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputValue != 0) {\n    resultValue = FUN_00082a50(inputValue);\n    FUN_0008165c(outputArray,inputValue,resultValue);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_parameter_values_00081682",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "uVar1": "resultValue"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_infinite_loop_000816a8",
            "code": "\nvoid run_infinite_loop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_infinite_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_address_000816d4",
            "code": "\n\n\nvoid initializeMemoryAddress_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_address_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_00081714",
            "code": "\nundefined4 get_data_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint floatA,uint floatB,undefined4 intA,uint floatC)\n\n{\n  int shiftedFloatA;\n  int shiftedFloatB;\n  uint signBitMask;\n  uint normalizedFloatA;\n  uint absFloatA;\n  uint numBitsToShift;\n  uint difference;\n  bool condition;\n  \n  signBitMask = floatB ^ 0x80000000;\n  absFloatA = floatA << 1;\n  condition = absFloatA == 0;\n  if (!condition) {\n    floatC = floatB << 1;\n    condition = floatC == 0;\n  }\n  if (!condition) {\n    condition = absFloatA == floatC;\n  }\n  shiftedFloatA = (int)absFloatA >> 0x18;\n  if (!condition) {\n    condition = shiftedFloatA == -1;\n  }\n  if (!condition) {\n    condition = (int)floatC >> 0x18 == -1;\n  }\n  if (condition) {\n    shiftedFloatB = (int)(floatB << 1) >> 0x18;\n    if (shiftedFloatA == -1 || shiftedFloatB == -1) {\n      absFloatA = signBitMask;\n      if (shiftedFloatA == -1) {\n        absFloatA = floatA;\n      }\n      if (shiftedFloatA != -1 || shiftedFloatB != -1) {\n        signBitMask = absFloatA;\n      }\n      condition = (absFloatA & 0x7fffff) == 0;\n      if (condition) {\n        condition = (signBitMask & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = absFloatA == signBitMask;\n      }\n      if (!condition) {\n        absFloatA = absFloatA | 0x400000;\n      }\n      return absFloatA;\n    }\n    if (((floatA ^ signBitMask) & 0x7fffffff) != 0) {\n      if (absFloatA == 0) {\n        floatA = signBitMask;\n      }\n      return floatA;\n    }\n    if (floatA != signBitMask) {\n      return 0;\n    }\n    if ((absFloatA & 0xff000000) == 0) {\n      signBitMask = floatA << 1;\n      if ((floatA & 0x80000000) != 0) {\n        signBitMask = signBitMask | 0x80000000;\n      }\n      return signBitMask;\n    }\n    if (absFloatA < 0xfe000000) {\n      return floatA + 0x800000;\n    }\n    floatA = floatA & 0x80000000;\nLAB_0008186a:\n    return floatA | 0x7f800000;\n  }\n  absFloatA = absFloatA >> 0x18;\n  floatC = floatC >> 0x18;\n  difference = floatC - absFloatA;\n  condition = difference != 0;\n  numBitsToShift = absFloatA;\n  if (condition && absFloatA <= floatC) {\n    numBitsToShift = absFloatA + difference;\n  }\n  if (condition && absFloatA <= floatC) {\n    signBitMask = signBitMask ^ floatA;\n  }\n  if (condition && absFloatA <= floatC) {\n    floatA = floatA ^ signBitMask;\n  }\n  if (condition && absFloatA <= floatC) {\n    signBitMask = signBitMask ^ floatA;\n  }\n  if (floatC < absFloatA) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return floatA;\n  }\n  absFloatA = floatA & 0xffffff | 0x800000;\n  if ((floatA & 0x80000000) != 0) {\n    absFloatA = -absFloatA;\n  }\n  normalizedFloatA = signBitMask & 0xffffff | 0x800000;\n  if ((signBitMask & 0x80000000) != 0) {\n    normalizedFloatA = -normalizedFloatA;\n  }\n  if (numBitsToShift == difference) {\n    normalizedFloatA = normalizedFloatA ^ 0x800000;\n    if (numBitsToShift == 0) {\n      absFloatA = absFloatA ^ 0x800000;\n      numBitsToShift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  absFloatA = absFloatA + ((int)normalizedFloatA >> (difference & 0xff));\n  normalizedFloatA = normalizedFloatA << (0x20 - difference & 0xff);\n  floatA = absFloatA & 0x80000000;\n  if ((int)absFloatA < 0) {\n    condition = normalizedFloatA != 0;\n    normalizedFloatA = -normalizedFloatA;\n    absFloatA = -absFloatA - (uint)condition;\n  }\n  if (absFloatA < 0x800000) {\n    signBitMask = normalizedFloatA & 0x80000000;\n    normalizedFloatA = normalizedFloatA << 1;\n    absFloatA = absFloatA * 2 + (uint)(signBitMask != 0);\n    signBitMask = numBitsToShift - 2;\n    if ((absFloatA & 0x800000) == 0) {\n      difference = LZCOUNT(absFloatA) - 8;\n      absFloatA = absFloatA << (difference & 0xff);\n      if ((int)signBitMask < (int)difference) {\n        absFloatA = absFloatA >> (-(signBitMask - difference) & 0xff);\n      }\n      else {\n        absFloatA = absFloatA + (signBitMask - difference) * 0x800000;\n      }\n      return absFloatA | floatA;\n    }\n  }\n  else {\n    signBitMask = numBitsToShift - 1;\n    if (0xffffff < absFloatA) {\n      signBitMask = absFloatA & 1;\n      absFloatA = absFloatA >> 1;\n      normalizedFloatA = (uint)(signBitMask != 0) << 0x1f | normalizedFloatA >> 1;\n      signBitMask = numBitsToShift;\n      if (0xfd < numBitsToShift) goto LAB_0008186a;\n    }\n  }\n  absFloatA = absFloatA + signBitMask * 0x800000 + (uint)(0x7fffffff < normalizedFloatA);\n  if (normalizedFloatA == 0x80000000) {\n    absFloatA = absFloatA & 0xfffffffe;\n  }\n  return absFloatA | floatA;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "floatA",
                "param_2": "floatB",
                "param_3": "intA",
                "param_4": "floatC",
                "iVar1": "shiftedFloatA",
                "iVar2": "shiftedFloatB",
                "uVar3": "signBitMask",
                "uVar4": "normalizedFloatA",
                "uVar5": "absFloatA",
                "uVar6": "numBitsToShift",
                "uVar7": "difference",
                "bVar8": "condition"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_00081734",
            "code": "\nuint calculateFloat_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool isZero;\n  \n  result2 = input1 << 1;\n  isZero = result2 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = result2 == input4;\n  }\n  shiftedInput1 = (int)result2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result2 = input2;\n      if (shiftedInput1 == -1) {\n        result2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = result2;\n      }\n      isZero = (result2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result2 == input2;\n      }\n      if (!isZero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp2 = input4 - result2;\n  isZero = temp2 != 0;\n  temp1 = result2;\n  if (isZero && result2 <= input4) {\n    temp1 = result2 + temp2;\n  }\n  if (isZero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isZero;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_0008186a;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "compute_value_00081894",
            "code": "\nuint computeValue_00081894(uint input)\n\n{\n  uint result;\n  uint temp2;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = LZCOUNT(input);\n  temp2 = result - 8;\n  constant = temp2 * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    mask = 0 << (temp2 & 0xff);\n    result = constant + (input << (temp2 & 0xff)) +\n            (0U >> (0x20 - temp2 & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  temp2 = input << result + 0x18;\n  result = constant + ((input >> (0x20 - (result + 0x18) & 0xff)) - ((int)temp2 >> 0x1f));\n  if ((temp2 & 0x7fffffff) == 0) {\n    result = result & ~(temp2 >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081894": "compute_value_00081894",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "temp2",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_unsigned_number_0008189c",
            "code": "\nuint calculateUnsignedNumber_0008189c(uint inputNumber)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint signBit;\n  int adjustedValue;\n  \n  signBit = inputNumber & 0x80000000;\n  if ((int)signBit < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputNumber);\n  shiftValue = leadingZeros - 8;\n  adjustedValue = ((signBit | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    signBit = adjustedValue + (inputNumber << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftValue = inputNumber << leadingZeros + 0x18;\n  signBit = adjustedValue + ((inputNumber >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftValue >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_unsigned_number_0008189c",
                "param_1": "inputNumber",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "signBit",
                "iVar4": "adjustedValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong mulResultLong;\n  uint result;\n  uint input1Shifted;\n  int sum;\n  int sumNormalized;\n  uint mulResult;\n  int overflow;\n  uint mulResultShifted;\n  bool isZeroOrFull;\n  bool isNegativeOverflow;\n  \n  input1Shifted = input1 >> 0x17 & 0xff;\n  isZeroOrFull = input1Shifted == 0;\n  if (!isZeroOrFull) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZeroOrFull = param4 == 0;\n  }\n  if (!isZeroOrFull) {\n    isZeroOrFull = input1Shifted == 0xff;\n  }\n  if (!isZeroOrFull) {\n    isZeroOrFull = param4 == 0xff;\n  }\n  if (isZeroOrFull) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (input1Shifted == 0xff || param4 == 0xff) {\n      isZeroOrFull = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZeroOrFull = input2 == 0;\n        result = input1;\n      }\n      if (!isZeroOrFull) {\n        isZeroOrFull = input2 == 0x80000000;\n      }\n      mulResultShifted = result;\n      if (((isZeroOrFull) || ((input1Shifted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (mulResultShifted = input2, (input2 & 0x7fffff) != 0)))) {\n        return mulResultShifted | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    isZeroOrFull = (input1 & 0x7fffffff) == 0;\n    if (!isZeroOrFull) {\n      isZeroOrFull = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZeroOrFull) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZeroOrFull = input1Shifted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZeroOrFull) {\n        input1 = input1 << 1;\n        isZeroOrFull = (input1 & 0x800000) == 0;\n      }\n      if (!isZeroOrFull) break;\n      input1Shifted = input1Shifted - 1;\n    }\n    input1 = input1 | result;\n    isZeroOrFull = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZeroOrFull) {\n        input2 = input2 << 1;\n        isZeroOrFull = (input2 & 0x800000) == 0;\n      }\n      if (!isZeroOrFull) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1Shifted + param4;\n  mulResultShifted = input1 ^ input2;\n  input1Shifted = input1 << 9;\n  isZeroOrFull = input1Shifted == 0;\n  if (!isZeroOrFull) {\n    input2 = input2 << 9;\n    isZeroOrFull = input2 == 0;\n  }\n  if (isZeroOrFull) {\n    if (input1Shifted == 0) {\n      input2 = input2 << 9;\n    }\n    result = mulResultShifted & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegativeOverflow = SBORROW4(sum,0x7f);\n    sumNormalized = sum + -0x7f;\n    isZeroOrFull = sumNormalized == 0;\n    overflow = sumNormalized;\n    if (!isZeroOrFull && 0x7e < sum) {\n      isNegativeOverflow = SBORROW4(0xff,sumNormalized);\n      overflow = 0xff - sumNormalized;\n      isZeroOrFull = sumNormalized == 0xff;\n    }\n    if (!isZeroOrFull && overflow < 0 == isNegativeOverflow) {\n      result = result | sumNormalized * 0x800000;\n    }\n    if (!isZeroOrFull && overflow < 0 == isNegativeOverflow) {\n      return result;\n    }\n    result = result | 0x800000;\n    mulResult = 0;\n    isNegativeOverflow = SBORROW4(sumNormalized,1);\n    mulResultShifted = sum - 0x80;\n    isZeroOrFull = mulResultShifted == 0;\n    input1Shifted = mulResultShifted;\n  }\n  else {\n    mulResultLong = (ulonglong)(input1Shifted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    mulResult = (uint)mulResultLong;\n    result = (uint)((ulonglong)mulResultLong >> 0x20);\n    isZeroOrFull = result < 0x800000;\n    if (isZeroOrFull) {\n      result = result << 1;\n    }\n    if (isZeroOrFull) {\n      result = result | mulResult >> 0x1f;\n      mulResult = mulResult << 1;\n    }\n    result = mulResultShifted & 0x80000000 | result;\n    mulResultShifted = (sum + -0x7f) - (uint)isZeroOrFull;\n    isNegativeOverflow = SBORROW4(mulResultShifted,0xfd);\n    isZeroOrFull = mulResultShifted == 0xfd;\n    input1Shifted = mulResultShifted - 0xfd;\n    if (mulResultShifted < 0xfe) {\n      result = result + mulResultShifted * 0x800000 + (uint)(0x7fffffff < mulResult);\n      if (mulResult == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZeroOrFull || (int)input1Shifted < 0 != isNegativeOverflow) {\n    isZeroOrFull = (int)(mulResultShifted + 0x19) < 0;\n    if (mulResultShifted == 0xffffffe7 || isZeroOrFull != SCARRY4(mulResultShifted,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mulResultShifted != 0xffffffe7 && isZeroOrFull == SCARRY4(mulResultShifted,0x19)) {\n      input1Shifted = (result << 1) >> (-mulResultShifted & 0xff);\n      mulResultShifted = result << (mulResultShifted + 0x20 & 0xff);\n      input1Shifted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1Shifted >> 1) + (uint)((byte)input1Shifted & 1);\n      if ((mulResult | mulResultShifted << 1) == 0) {\n        input1Shifted = input1Shifted & ~(mulResultShifted >> 0x1f);\n      }\n      return input1Shifted;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "input1Shifted",
                "bVar9": "isZeroOrFull",
                "uVar2": "result",
                "uVar8": "mulResultShifted",
                "iVar4": "sum",
                "iVar5": "sumNormalized",
                "iVar7": "overflow",
                "bVar10": "isNegativeOverflow",
                "uVar6": "mulResult",
                "lVar1": "mulResultLong"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculate_bitwise_operations_00081bf4",
            "code": "\nuint calculate_bitwise_operations_00081bf4(uint input_value_1,uint input_value_2)\n\n{\n  bool is_negative_value;\n  uint double_input_value_1;\n  uint double_input_value_2;\n  uint combined_value;\n  bool is_zero_value;\n  \n  double_input_value_1 = input_value_1 * 2;\n  double_input_value_2 = input_value_2 * 2;\n  if (((int)double_input_value_1 >> 0x18 == -1 || (int)double_input_value_2 >> 0x18 == -1) &&\n     ((((int)double_input_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_value = double_input_value_1 | input_value_2 & 0x7fffffff;\n  is_zero_value = combined_value == 0;\n  if (!is_zero_value) {\n    combined_value = input_value_1 ^ input_value_2;\n    is_zero_value = combined_value == 0;\n  }\n  is_negative_value = -1 < (int)combined_value;\n  if (is_negative_value) {\n    input_value_1 = double_input_value_1 + input_value_2 * -2;\n    is_zero_value = input_value_1 == 0;\n  }\n  if ((is_negative_value && double_input_value_2 <= double_input_value_1) && !is_zero_value) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!is_negative_value || double_input_value_2 > double_input_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_zero_value) {\n    input_value_1 = input_value_1 | 1;\n  }\n  return input_value_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculate_bitwise_operations_00081bf4",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar2": "double_input_value_1",
                "uVar3": "double_input_value_2",
                "uVar4": "combined_value",
                "bVar1": "is_negative_value",
                "bVar5": "is_zero_value"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "copy_parameters_00081c54",
            "code": "\nvoid copyParameters_00081c54(undefined4 dst,undefined4 src)\n\n{\n  FUN_00081c5c(src,dst);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "copy_parameters_00081c54",
                "param_1": "dst",
                "param_2": "src"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 firstParam,undefined4 secondParam)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_cy_and_zr_00081c94",
            "code": "\nbool check_CY_and_ZR_00081c94(void)\n\n{\n  undefined zero;\n  undefined carry;\n  \n  FUN_00081c5c();\n  return !(bool)carry || (bool)zero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_cy_and_zr_00081c94",
                "in_CY": "carry",
                "in_ZR": "zero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_if_zero_or_carry_00081ca8",
            "code": "\nbool checkIfZeroOrCarry_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined hasCarry;\n  \n  FUN_00081c54();\n  return !(bool)hasCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_if_zero_or_carry_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "hasCarry"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extracted_value_00081cd0",
            "code": "\nuint extractedValue_00081cd0(uint inputValueMasked)\n\n{\n  uint shiftedBits;\n  uint bitMaskedDifference;\n  \n  if (inputValueMasked << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedBits = (inputValueMasked << 1) >> 0x18;\n  bitMaskedDifference = 0x9e - shiftedBits;\n  if (shiftedBits < 0x9f && bitMaskedDifference != 0) {\n    shiftedBits = (inputValueMasked << 8 | 0x80000000) >> (bitMaskedDifference & 0xff);\n    if ((inputValueMasked & 0x80000000) != 0) {\n      shiftedBits = -shiftedBits;\n    }\n    return shiftedBits;\n  }\n  if ((bitMaskedDifference == 0xffffff9f) && ((inputValueMasked & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValueMasked = inputValueMasked & 0x80000000;\n  if (inputValueMasked == 0) {\n    inputValueMasked = 0x7fffffff;\n  }\n  return inputValueMasked;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extracted_value_00081cd0",
                "param_1": "inputValueMasked",
                "uVar1": "shiftedBits",
                "uVar2": "bitMaskedDifference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "validate_param_00081d1c",
            "code": "\nuint validateParam_00081d1c(uint input)\n\n{\n  uint shiftCount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftCount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shiftCount) {\n    return (input << 8 | 0x80000000) >> (shiftCount & 0xff);\n  }\n  if ((shiftCount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "validate_param_00081d1c",
                "param_1": "input",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newValue1,dword newValue2,dword newValue3)\n\n{\n  dword *pointer;\n  uint index;\n  uint bitMask;\n  \n  if (relocationArray[48].r_offset == 0) {\n    relocationArray[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocationArray[48].r_offset + 4);\n  pointer = (dword *)relocationArray[48].r_offset;\n  if (0x1f < (int)index) {\n    pointer = (dword *)FUN_00081df4(400);\n    if (pointer == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *pointer = relocationArray[48].r_offset;\n    pointer[1] = 0;\n    index = 0;\n    relocationArray[48].r_offset = (dword)pointer;\n    pointer[0x62] = 0;\n    pointer[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  pointer[index + 0x22] = newValue1;\n  pointer[0x62] = pointer[0x62] | bitMask;\n  pointer[index + 0x42] = newValue3;\n  pointer[99] = bitMask | pointer[99];\n  pointer[1] = index + 1;\n  pointer[index + 2] = newValue2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "pdVar1": "pointer",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_callbacks_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeCallbacks_00081d7c(void)\n\n{\n  int iterationCount;\n  code **callbackPointer;\n  \n  FUNC_00085858();\n  callbackPointer = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    callbackPointer = callbackPointer + 1;\n    (**callbackPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_callbacks_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "callbackPointer"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "initialize_relocation_00081df4",
            "code": "\nvoid initializeRelocation_00081df4(undefined4 param)\n\n{\n  FUN_00081e14(relocationArray[140].r_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "initialize_relocation_00081df4",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocation_00081e04",
            "code": "\nvoid executeRelocation_00081e04(undefined4 data)\n\n{\n  FUN_00083d9c(relocationTable[140].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocation_00081e04",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *output_ptr,uint size)\n\n{\n  dword info_1;\n  int current_offset_1;\n  uint temp_size;\n  uint temp_offset;\n  int var_1;\n  uint var_2;\n  dword current_offset_2;\n  uint var_3;\n  int var_4;\n  undefined *ptr_1;\n  dword ptr_2;\n  dword ptr_3;\n  int var_5;\n  dword *ptr_4;\n  uint var_6;\n  undefined *ptr_5;\n  dword *ptr_6;\n  uint var_7;\n  \n  if (size + 0xb < 0x17) {\n    var_6 = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    var_6 = size + 0xb & 0xfffffff8;\n    if (((int)var_6 < 0) || (var_6 < size)) {\nLAB_00081e7a:\n      *output_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_ptr);\n  info_1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (var_6 < 0x1f8) {\n    var_5 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + var_6);\n    if ((var_5 != var_6 + 0x20070464) ||\n       (current_offset_1 = var_5 + 8, var_5 = *(int *)(var_5 + 0x14), current_offset_1 != var_5)) {\n      var_1 = *(int *)(var_5 + 0xc);\n      var_4 = (*(uint *)(var_5 + 4) & 0xfffffffc) + var_5;\n      var_6 = *(uint *)(var_4 + 4);\n      current_offset_1 = *(int *)(var_5 + 8);\n      *(int *)(current_offset_1 + 0xc) = var_1;\n      *(int *)(var_1 + 8) = current_offset_1;\n      *(uint *)(var_4 + 4) = var_6 | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(var_5 + 8);\n    }\n    var_7 = (var_6 >> 3) + 2;\n  }\n  else {\n    var_7 = var_6 >> 9;\n    if (var_7 == 0) {\n      current_offset_1 = 0x7e;\n      var_5 = 0x3f;\n    }\n    else if (var_7 < 5) {\n      var_5 = (var_6 >> 6) + 0x38;\n      current_offset_1 = var_5 * 2;\n    }\n    else if (var_7 < 0x15) {\n      var_5 = var_7 + 0x5b;\n      current_offset_1 = var_5 * 2;\n    }\n    else if (var_7 < 0x55) {\n      var_5 = (var_6 >> 0xc) + 0x6e;\n      current_offset_1 = var_5 * 2;\n    }\n    else if (var_7 < 0x155) {\n      var_5 = (var_6 >> 0xf) + 0x77;\n      current_offset_1 = var_5 * 2;\n    }\n    else if (var_7 < 0x555) {\n      var_5 = (var_6 >> 0x12) + 0x7c;\n      current_offset_1 = var_5 * 2;\n    }\n    else {\n      current_offset_1 = 0xfc;\n      var_5 = 0x7e;\n    }\n    for (current_offset_2 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[current_offset_1]; current_offset_1 * 4 + 0x20070464U != current_offset_2\n        ; current_offset_2 = *(dword *)(current_offset_2 + 0xc)) {\n      var_7 = *(uint *)(current_offset_2 + 4) & 0xfffffffc;\n      var_1 = var_7 - var_6;\n      if (0xf < var_1) {\n        var_5 = var_5 + -1;\n        break;\n      }\n      if (-1 < var_1) {\n        current_offset_1 = var_7 + current_offset_2;\n        var_6 = *(uint *)(current_offset_1 + 4);\n        var_1 = *(int *)(current_offset_2 + 0xc);\n        var_5 = *(int *)(current_offset_2 + 8);\n        *(int *)(var_5 + 0xc) = var_1;\n        *(int *)(var_1 + 8) = var_5;\n        *(uint *)(current_offset_1 + 4) = var_6 | 1;\n        FUNC_0008259c(output_ptr);\n        return (int *)(current_offset_2 + 8);\n      }\n    }\n    var_7 = var_5 + 1;\n  }\n  current_offset_2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp_size = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp_offset = temp_size & 0xfffffffc;\n    var_2 = temp_offset - var_6;\n    if (0xf < (int)var_2) {\n      current_offset_2 = var_6 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = var_6 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = current_offset_2;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = current_offset_2;\n      *(undefined4 *)(current_offset_2 + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_offset_2 + 8) = 0x2007046c;\n      *(uint *)(current_offset_2 + 4) = var_2 | 1;\n      *(uint *)(current_offset_2 + var_2) = var_2;\n      FUNC_0008259c(output_ptr);\n      return (int *)(info_1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)var_2) {\n      *(uint *)(temp_offset + info_1 + 4) = *(uint *)(temp_offset + info_1 + 4) | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(info_1 + 8);\n    }\n    if (temp_offset < 0x200) {\n      temp_offset = temp_size & 0xfffffff8;\n      var_5 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_offset);\n      current_offset_2 = 1 << ((int)(temp_size >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info_1 + 8) = var_5;\n      *(uint *)(info_1 + 0xc) = temp_offset + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = current_offset_2;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp_offset) = info_1;\n      *(dword *)(var_5 + 0xc) = info_1;\n    }\n    else {\n      var_2 = temp_size >> 9;\n      if (var_2 < 5) {\n        current_offset_1 = (temp_size >> 6) + 0x38;\n        var_5 = current_offset_1 * 2;\n      }\n      else if (var_2 < 0x15) {\n        current_offset_1 = var_2 + 0x5b;\n        var_5 = current_offset_1 * 2;\n      }\n      else if (var_2 < 0x55) {\n        current_offset_1 = (temp_size >> 0xc) + 0x6e;\n        var_5 = current_offset_1 * 2;\n      }\n      else if (var_2 < 0x155) {\n        current_offset_1 = (temp_size >> 0xf) + 0x77;\n        var_5 = current_offset_1 * 2;\n      }\n      else if (var_2 < 0x555) {\n        current_offset_1 = (temp_size >> 0x12) + 0x7c;\n        var_5 = current_offset_1 * 2;\n      }\n      else {\n        var_5 = 0xfc;\n        current_offset_1 = 0x7e;\n      }\n      current_offset_2 = var_5 * 4 + 0x20070464;\n      ptr_2 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[var_5];\n      if (ptr_2 == current_offset_2) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (current_offset_1 >> 2 & 0xffU);\n        ptr_3 = ptr_2;\n      }\n      else {\n        do {\n          ptr_3 = ptr_2;\n          if ((*(uint *)(ptr_2 + 4) & 0xfffffffc) <= temp_offset) break;\n          ptr_2 = *(dword *)(ptr_2 + 8);\n          ptr_3 = ptr_2;\n        } while (current_offset_2 != ptr_2);\n        ptr_2 = *(dword *)(ptr_3 + 0xc);\n      }\n      current_offset_2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info_1 + 0xc) = ptr_2;\n      *(dword *)(info_1 + 8) = ptr_3;\n      *(dword *)(ptr_2 + 8) = info_1;\n      *(dword *)(ptr_3 + 0xc) = info_1;\n    }\n  }\n  info_1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp_size = 1 << ((int)var_7 >> 2 & 0xffU);\n  if (temp_size <= current_offset_2) {\n    if ((current_offset_2 & temp_size) == 0) {\n      var_7 = var_7 & 0xfffffffc;\n      do {\n        temp_size = temp_size << 1;\n        var_7 = var_7 + 4;\n      } while ((current_offset_2 & temp_size) == 0);\n    }\n    do {\n      ptr_6 = &Elf32_Rel_ARRAY_20070000[var_7 + 0x8c].r_info;\n      ptr_4 = ptr_6;\n      temp_offset = var_7;\n      do {\n        for (ptr_1 = (undefined *)ptr_4[3]; ptr_4 != (dword *)ptr_1;\n            ptr_1 = *(undefined **)(ptr_1 + 0xc)) {\n          var_2 = *(uint *)(ptr_1 + 4) & 0xfffffffc;\n          var_3 = var_2 - var_6;\n          if (0xf < (int)var_3) {\n            current_offset_1 = *(int *)(ptr_1 + 8);\n            var_5 = *(int *)(ptr_1 + 0xc);\n            ptr_5 = ptr_1 + var_6;\n            *(uint *)(ptr_1 + 4) = var_6 | 1;\n            *(int *)(current_offset_1 + 0xc) = var_5;\n            *(int *)(var_5 + 8) = current_offset_1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr_5;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr_5;\n            *(undefined4 *)(ptr_5 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr_5 + 8) = 0x2007046c;\n            *(uint *)(ptr_5 + 4) = var_3 | 1;\n            *(uint *)(ptr_5 + var_3) = var_3;\n            FUNC_0008259c(output_ptr);\n            return (int *)(ptr_1 + 8);\n          }\n          if (-1 < (int)var_3) {\n            var_5 = *(int *)(ptr_1 + 8);\n            current_offset_1 = *(int *)(ptr_1 + 0xc);\n            *(uint *)(ptr_1 + var_2 + 4) = *(uint *)(ptr_1 + var_2 + 4) | 1;\n            *(int *)(var_5 + 0xc) = current_offset_1;\n            *(int *)(current_offset_1 + 8) = var_5;\n            FUNC_0008259c(output_ptr);\n            return (int *)(ptr_1 + 8);\n          }\n        }\n        temp_offset = temp_offset + 1;\n        ptr_4 = ptr_4 + 2;\n      } while ((temp_offset & 3) != 0);\n      do {\n        var_2 = var_7 & 3;\n        ptr_1 = (undefined *)(ptr_6 + -2);\n        var_7 = var_7 - 1;\n        if (var_2 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp_size;\n          break;\n        }\n        ptr_6 = (dword *)*ptr_6;\n      } while (ptr_6 == (dword *)ptr_1);\n      temp_size = temp_size * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp_size &&\n           temp_size - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (var_7 = temp_offset, temp_size == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp_size) == 0; temp_size = temp_size << 1) {\n        var_7 = var_7 + 4;\n      }\n    } while( true );\n  }\n  var_7 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((var_6 <= var_7) &&\n     (temp_size = var_7 - var_6, current_offset_2 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp_size))\n  goto LAB_0008211e;\n  temp_size = Elf32_Rel_ARRAY_20070000[141].r_info + var_7;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp_offset = var_6 + DAT_20071190 + 0x10;\n  }\n  else {\n    temp_offset = var_6 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  current_offset_2 = FUN_00082970(output_ptr,temp_offset);\n  if ((current_offset_2 == 0xffffffff) || ((current_offset_2 < temp_size && (info_1 != 0x20070464)))) {\n    var_7 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset_2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    var_2 = DAT_20071194 + temp_offset;\n    DAT_20071194 = var_2;\n    if ((temp_size == current_offset_2) && ((temp_size & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_offset + var_7 | 1;\n    }\n    else {\n      ptr_2 = current_offset_2;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        ptr_2 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = var_2 + (current_offset_2 - temp_size);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = ptr_2;\n      temp_size = current_offset_2 & 7;\n      if (temp_size == 0) {\n        var_5 = 0x1000;\n      }\n      else {\n        current_offset_2 = current_offset_2 + (8 - temp_size);\n        var_5 = 0x1008 - temp_size;\n      }\n      var_5 = var_5 - (temp_offset + current_offset_2 & 0xfff);\n      current_offset_1 = FUN_00082970(output_ptr,var_5);\n      if (current_offset_1 == -1) {\n        temp_size = 1;\n        var_5 = 0;\n      }\n      else {\n        temp_size = (current_offset_1 - current_offset_2) + var_5 | 1;\n      }\n      var_2 = DAT_20071194 + var_5;\n      Elf32_Rel_ARRAY_20070000[141].r_info = current_offset_2;\n      DAT_20071194 = var_2;\n      *(uint *)(current_offset_2 + 4) = temp_size;\n      if (info_1 != 0x20070464) {\n        if (var_7 < 0x10) {\n          *(undefined4 *)(current_offset_2 + 4) = 1;\n          var_7 = 0;\n          goto LAB_00082108;\n        }\n        var_7 = var_7 - 0xc & 0xfffffff8;\n        *(uint *)(info_1 + 4) = var_7 | *(uint *)(info_1 + 4) & 1;\n        *(undefined4 *)(info_1 + var_7 + 4) = 5;\n        *(undefined4 *)(info_1 + var_7 + 8) = 5;\n        if (0xf < var_7) {\n          FUN_00083d9c(output_ptr,info_1 + 8);\n          var_2 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < var_2) {\n      DAT_2007118c = var_2;\n    }\n    if (DAT_20071188 < var_2) {\n      DAT_20071188 = var_2;\n    }\n    var_7 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset_2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temp_size = var_7 - var_6;\n  if ((var_7 < var_6) || ((int)temp_size < 0x10)) {\n    FUNC_0008259c(output_ptr);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = var_6 + current_offset_2;\n  *(uint *)(current_offset_2 + 4) = var_6 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp_size | 1;\n  FUNC_0008259c(output_ptr);\n  return (int *)(current_offset_2 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "output_ptr",
                "param_2": "size",
                "dVar1": "info_1",
                "iVar2": "current_offset_1",
                "uVar3": "temp_size",
                "uVar4": "temp_offset",
                "iVar5": "var_1",
                "uVar6": "var_2",
                "dVar7": "current_offset_2",
                "uVar8": "var_3",
                "iVar9": "var_4",
                "puVar10": "ptr_1",
                "dVar11": "ptr_2",
                "dVar12": "ptr_3",
                "iVar13": "var_5",
                "pdVar14": "ptr_4",
                "uVar15": "var_6",
                "puVar16": "ptr_5",
                "pdVar17": "ptr_6",
                "uVar18": "var_7"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint remainingLength;\n  uint remainingLengthMinus4;\n  bool isRemainingLengthMinus4;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      remainingLengthMinus4 = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          tempPtr = srcPtr;\n          isRemainingLengthMinus4 = remainingLengthMinus4 != 0;\n          remainingLengthMinus4 = remainingLengthMinus4 - 1;\n          *(undefined *)tempPtr = *(undefined *)destPtr;\n          srcPtr = (undefined4 *)((int)tempPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemainingLengthMinus4);\n        *(undefined *)(undefined4 *)((int)tempPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)tempPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)tempPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto performCopy;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingLengthMinus4 = 4 - ((uint)destination & 3);\n      length = length - remainingLengthMinus4;\n      destPtr = destination;\n      tempPtr = source;\n      if (((uint)destination & 1) != 0) {\n        tempPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = destPtr;\n      source = tempPtr;\n      if ((remainingLengthMinus4 & 2) != 0) {\n        source = (undefined4 *)((int)tempPtr + 2);\n        srcPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *srcPtr = *source;\n    destPtr[1] = source[1];\n    destPtr[2] = source[2];\n    destPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *srcPtr = *source;\n      destPtr[1] = source[1];\n      destPtr[2] = source[2];\n      destPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      isRemainingLengthMinus4 = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (isRemainingLengthMinus4);\n  }\n  remainingLengthMinus4 = remainingLength + 0xc;\n  tempPtr = srcPtr;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *tempPtr = *destPtr;\n      isRemainingLengthMinus4 = 3 < remainingLengthMinus4;\n      remainingLengthMinus4 = remainingLengthMinus4 - 4;\n      srcPtr = tempPtr + 1;\n      tempPtr = tempPtr + 1;\n      destPtr = source;\n    } while (isRemainingLengthMinus4);\n  }\nperformCopy:\n  if (remainingLengthMinus4 + 4 != 0) {\n    destPtr = srcPtr;\n    tempPtr = source;\n    if ((remainingLengthMinus4 & 1) != 0) {\n      tempPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((remainingLengthMinus4 + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar3": "tempPtr",
                "uVar4": "remainingLength",
                "uVar5": "remainingLengthMinus4",
                "bVar6": "isRemainingLengthMinus4",
                "LAB_000823d0": "performCopy",
                "puVar2[1]": "destPtr[1]",
                "puVar2[2]": "destPtr[2]",
                "puVar2[3]": "destPtr[3]",
                "puVar2[4]": "srcPtr[4]",
                "puVar2[5]": "srcPtr[5]",
                "puVar2[6]": "srcPtr[6]",
                "puVar2[7]": "srcPtr[7]",
                "puVar2[8]": "srcPtr[8]",
                "puVar2[9]": "srcPtr[9]",
                "puVar2[10]": "srcPtr[10]",
                "puVar2[0xb]": "srcPtr[0xb]",
                "puVar2[0xc]": "srcPtr[0xc]",
                "puVar2[0xd]": "srcPtr[0xd]",
                "puVar2[0xe]": "srcPtr[0xe]",
                "puVar2[0xf]": "srcPtr[0xf]"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_reverse_00082438",
            "code": "\nvoid copy_reverse_00082438(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_length;\n  undefined *temp_byte_ptr;\n  uint temp_remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + length), dest < temp_ptr)) {\n    temp_byte_ptr = (undefined *)((int)dest + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_byte_ptr = temp_byte_ptr + -1;\n        *temp_byte_ptr = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    temp_remainder = length & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_length = temp_remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < temp_remainder) {\n      do {\n        temp_length = temp_length - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_length);\n      index = (temp_remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      temp_remainder = length & 3;\n    }\n    length = temp_remainder;\n    if (length == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_reverse_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "temp_length",
                "puVar6": "temp_byte_ptr",
                "uVar7": "temp_remainder"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "byte_fill_00082504",
            "code": "\nvoid byteFill_00082504(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 valueChunks;\n  uint remainingSize;\n  bool isZeroSize;\n  \n  if (((uint)destination & 3) != 0) {\n    isZeroSize = size == 0;\n    destPtr = destination;\n    size = size - 1;\n    if (isZeroSize) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)destination & 3) == 0) break;\n      isZeroSize = size == 0;\n      destPtr = destination;\n      size = size - 1;\n      if (isZeroSize) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    valueChunks = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = destination;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *destPtr = valueChunks;\n        destPtr[1] = valueChunks;\n        destPtr[2] = valueChunks;\n        destPtr[3] = valueChunks;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = destination;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *destination = valueChunks;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "byte_fill_00082504",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "valueChunks",
                "uVar4": "remainingSize",
                "bVar5": "isZeroSize"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_elf_rel_000825a0",
            "code": "\nvoid process_elf_rel_000825a0(undefined4 param1,undefined4 param2)\n\n{\n  FUN_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_elf_rel_000825a0",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "decompile_function_000825b0",
            "code": "\nint * decompile_function_000825b0(undefined4 *param_null,int *param_array,uint param_length)\n\n{\n  dword temp_dvar1;\n  int *result_array;\n  uint temp_uvar3;\n  int temp_ivar4;\n  uint temp_uvar5;\n  int temp_ivar6;\n  int *temp_array1;\n  uint temp_uvar8;\n  uint temp_uvar9;\n  int *temp_array2;\n  \n  if (param_array == (int *)0x0) {\n    result_array = (int *)FUN_00081e14(param_null,param_length);\n    return result_array;\n  }\n  FUNC_00082598();\n  temp_uvar5 = param_array[-1];\n  temp_uvar8 = temp_uvar5 & 0xfffffffc;\n  result_array = param_array + -2;\n  if (param_length + 0xb < 0x17) {\n    temp_uvar9 = 0x10;\n  }\n  else {\n    temp_uvar9 = param_length + 0xb & 0xfffffff8;\n    if ((int)temp_uvar9 < 0) goto LAB_0008267c;\n  }\n  if (temp_uvar9 < param_length) {\nLAB_0008267c:\n    *param_null = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_uvar8 < (int)temp_uvar9) {\n    temp_dvar1 = (int)result_array + temp_uvar8;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_dvar1) {\n      temp_uvar3 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_dvar1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp_uvar9 + 0x10) <= (int)(temp_uvar3 + temp_uvar8)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result_array + temp_uvar9;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uvar3 + temp_uvar8) - temp_uvar9 | 1;\n        param_array[-1] = temp_uvar9 | param_array[-1] & 1U;\n        FUNC_0008259c(param_null);\n        return param_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_dvar1 + 4) & 0xfffffffe) + temp_dvar1 + 4) & 1) == 0) {\n      temp_uvar3 = *(uint *)(temp_dvar1 + 4) & 0xfffffffc;\n      if ((int)temp_uvar9 <= (int)(temp_uvar3 + temp_uvar8)) {\n        temp_ivar6 = *(int *)(temp_dvar1 + 0xc);\n        temp_ivar4 = *(int *)(temp_dvar1 + 8);\n        *(int *)(temp_ivar4 + 0xc) = temp_ivar6;\n        *(int *)(temp_ivar6 + 8) = temp_ivar4;\n        temp_uvar8 = temp_uvar3 + temp_uvar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_uvar3 = 0;\n      temp_dvar1 = 0;\n    }\n    if (-1 < (int)(temp_uvar5 << 0x1f)) {\n      temp_array2 = (int *)((int)result_array - param_array[-2]);\n      temp_uvar5 = (temp_array2[1] & 0xfffffffcU) + temp_uvar8;\n      if (temp_dvar1 != 0) {\n        if (temp_dvar1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp_uvar9 + 0x10) <= (int)(temp_uvar3 + temp_uvar5)) {\n            result_array = temp_array2 + 2;\n            temp_ivar4 = *result_array;\n            temp_ivar6 = temp_array2[3];\n            temp_uvar8 = temp_uvar8 - 4;\n            *(int *)(temp_ivar4 + 0xc) = temp_ivar6;\n            *(int *)(temp_ivar6 + 8) = temp_ivar4;\n            if (temp_uvar8 < 0x25) {\n              temp_array1 = result_array;\n              if (0x13 < temp_uvar8) {\n                temp_array2[2] = *param_array;\n                temp_array2[3] = param_array[1];\n                if (temp_uvar8 < 0x1c) {\n                  param_array = param_array + 2;\n                  temp_array1 = temp_array2 + 4;\n                }\n                else {\n                  temp_array2[4] = param_array[2];\n                  temp_array2[5] = param_array[3];\n                  if (temp_uvar8 == 0x24) {\n                    temp_array2[6] = param_array[4];\n                    temp_array1 = param_array + 5;\n                    param_array = param_array + 6;\n                    temp_array2[7] = *temp_array1;\n                    temp_array1 = temp_array2 + 8;\n                  }\n                  else {\n                    param_array = param_array + 4;\n                    temp_array1 = temp_array2 + 6;\n                  }\n                }\n              }\n              *temp_array1 = *param_array;\n              temp_array1[1] = param_array[1];\n              temp_array1[2] = param_array[2];\n            }\n            else {\n              FUN_00082438(result_array,param_array);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_array2 + temp_uvar9;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_uvar3 + temp_uvar5) - temp_uvar9 | 1;\n            temp_array2[1] = temp_uvar9 | temp_array2[1] & 1U;\n            FUNC_0008259c(param_null);\n            return result_array;\n          }\n        }\n        else {\n          temp_uvar3 = temp_uvar3 + temp_uvar5;\n          if ((int)temp_uvar9 <= (int)temp_uvar3) {\n            temp_ivar6 = *(int *)(temp_dvar1 + 0xc);\n            temp_ivar4 = *(int *)(temp_dvar1 + 8);\n            *(int *)(temp_ivar4 + 0xc) = temp_ivar6;\n            *(int *)(temp_ivar6 + 8) = temp_ivar4;\n            temp_array1 = temp_array2 + 2;\n            temp_ivar4 = *temp_array1;\n            temp_ivar6 = temp_array2[3];\n            temp_uvar5 = temp_uvar8 - 4;\n            *(int *)(temp_ivar4 + 0xc) = temp_ivar6;\n            *(int *)(temp_ivar6 + 8) = temp_ivar4;\n            temp_uvar8 = temp_uvar3;\n            if (temp_uvar5 < 0x25) {\n              result_array = temp_array1;\n              if (0x13 < temp_uvar5) {\n                temp_array2[2] = *param_array;\n                temp_array2[3] = param_array[1];\n                if (temp_uvar5 < 0x1c) {\n                  param_array = param_array + 2;\n                  result_array = temp_array2 + 4;\n                }\n                else {\n                  temp_array2[4] = param_array[2];\n                  temp_array2[5] = param_array[3];\n                  if (temp_uvar5 == 0x24) {\n                    temp_array2[6] = param_array[4];\n                    result_array = param_array + 5;\n                    param_array = param_array + 6;\n                    temp_array2[7] = *result_array;\n                    result_array = temp_array2 + 8;\n                  }\n                  else {\n                    param_array = param_array + 4;\n                    result_array = temp_array2 + 6;\n                  }\n                }\n              }\n              *result_array = *param_array;\n              result_array[1] = param_array[1];\n              result_array[2] = param_array[2];\n              temp_uvar5 = temp_array2[1];\n              result_array = temp_array2;\n              param_array = temp_array1;\n            }\n            else {\n              FUN_00082438(temp_array1,param_array);\n              temp_uvar5 = temp_array2[1];\n              result_array = temp_array2;\n              param_array = temp_array1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp_uvar9 <= (int)temp_uvar5) {\n        temp_array1 = temp_array2 + 2;\n        temp_ivar4 = *temp_array1;\n        temp_ivar6 = temp_array2[3];\n        temp_uvar3 = temp_uvar8 - 4;\n        *(int *)(temp_ivar4 + 0xc) = temp_ivar6;\n        *(int *)(temp_ivar6 + 8) = temp_ivar4;\n        temp_uvar8 = temp_uvar5;\n        if (temp_uvar3 < 0x25) {\n          result_array = temp_array1;\n          if (0x13 < temp_uvar3) {\n            temp_array2[2] = *param_array;\n            temp_array2[3] = param_array[1];\n            if (temp_uvar3 < 0x1c) {\n              param_array = param_array + 2;\n              result_array = temp_array2 + 4;\n            }\n            else {\n              temp_array2[4] = param_array[2];\n              temp_array2[5] = param_array[3];\n              if (temp_uvar3 == 0x24) {\n                temp_array2[6] = param_array[4];\n                result_array = param_array + 5;\n                param_array = param_array + 6;\n                temp_array2[7] = *result_array;\n                result_array = temp_array2 + 8;\n              }\n              else {\n                param_array = param_array + 4;\n                result_array = temp_array2 + 6;\n              }\n            }\n          }\n          *result_array = *param_array;\n          result_array[1] = param_array[1];\n          result_array[2] = param_array[2];\n          temp_uvar5 = temp_array2[1];\n          result_array = temp_array2;\n          param_array = temp_array1;\n        }\n        else {\n          FUN_00082438(temp_array1,param_array);\n          temp_uvar5 = temp_array2[1];\n          result_array = temp_array2;\n          param_array = temp_array1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_array2 = (int *)FUN_00081e14(param_null,param_length);\n    if (temp_array2 == (int *)0x0) goto LAB_000826a4;\n    temp_uvar5 = param_array[-1];\n    if (temp_array2 + -2 != (int *)((temp_uvar5 & 0xfffffffe) + (int)result_array)) {\n      temp_uvar8 = temp_uvar8 - 4;\n      if (temp_uvar8 < 0x25) {\n        result_array = param_array;\n        temp_array1 = temp_array2;\n        if (0x13 < temp_uvar8) {\n          *temp_array2 = *param_array;\n          temp_array2[1] = param_array[1];\n          if (temp_uvar8 < 0x1c) {\n            result_array = param_array + 2;\n            temp_array1 = temp_array2 + 2;\n          }\n          else {\n            temp_array2[2] = param_array[2];\n            temp_array2[3] = param_array[3];\n            if (temp_uvar8 == 0x24) {\n              temp_array2[4] = param_array[4];\n              temp_array2[5] = param_array[5];\n              result_array = param_array + 6;\n              temp_array1 = temp_array2 + 6;\n            }\n            else {\n              result_array = param_array + 4;\n              temp_array1 = temp_array2 + 4;\n            }\n          }\n        }\n        *temp_array1 = *result_array;\n        temp_array1[1] = result_array[1];\n        temp_array1[2] = result_array[2];\n      }\n      else {\n        FUN_00082438(temp_array2,param_array);\n      }\n      FUN_00083d9c(param_null,param_array);\n      goto LAB_000826a4;\n    }\n    temp_uvar8 = temp_uvar8 + (temp_array2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_uvar3 = temp_uvar8 - temp_uvar9;\n  temp_array2 = param_array;\n  if (temp_uvar3 < 0x10) {\n    result_array[1] = temp_uvar5 & 1 | temp_uvar8;\n    *(uint *)((int)result_array + temp_uvar8 + 4) = *(uint *)((int)result_array + temp_uvar8 + 4) | 1;\n  }\n  else {\n    result_array[1] = temp_uvar5 & 1 | temp_uvar9;\n    *(uint *)((int)result_array + temp_uvar9 + 4) = temp_uvar3 | 1;\n    *(uint *)((int)result_array + temp_uvar3 + temp_uvar9 + 4) = *(uint *)((int)result_array + temp_uvar3 + temp_uvar9 + 4) | 1;\n    FUN_00083d9c(param_null,(int)result_array + temp_uvar9 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(param_null);\n  return temp_array2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "decompile_function_000825b0",
                "param_1": "param_null",
                "param_2": "param_array",
                "param_3": "param_length",
                "dVar1": "temp_dvar1",
                "piVar2": "result_array",
                "uVar3": "temp_uvar3",
                "iVar4": "temp_ivar4",
                "uVar5": "temp_uvar5",
                "iVar6": "temp_ivar6",
                "piVar7": "temp_array1",
                "uVar8": "temp_uvar8",
                "uVar9": "temp_uvar9",
                "piVar10": "temp_array2"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_return_value_and_update_00082970",
            "code": "\nvoid checkReturnValueAndUpdate_00082970(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_0008118c(inputValue);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_return_value_and_update_00082970",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_check_00082994",
            "code": "\nvoid copyStringWithAlignmentCheck_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentValue;\n  uint *nextSourceValue;\n  uint *nextAlignedSource;\n  uint currentValueAligned;\n  uint shiftedValue;\n  uint *destinationPointer;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextAlignedSource = source;\n    if (((uint)source & 1) != 0) {\n      nextAlignedSource = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextAlignedSource;\n    if (((uint)nextAlignedSource & 2) != 0) {\n      source = (uint *)((int)nextAlignedSource + 2);\n      currentValue = *(ushort *)nextAlignedSource;\n      isZeroByte = (currentValue & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)currentValue;\n      }\n      else {\n        *(ushort *)destination = currentValue;\n        isZeroByte = (currentValue & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentValueAligned = *source;\n  nextAlignedSource = source + 1;\n  destinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentValueAligned + 0xfefefeff & ~currentValueAligned & 0x80808080) != 0) goto LAB_000829f8;\n    destinationPointer = destination + 1;\n    *destination = currentValueAligned;\n    nextAlignedSource = source + 2;\n    currentValueAligned = source[1];\n  }\n  while( true ) {\n    nextSourceValue = nextAlignedSource + 1;\n    shiftedValue = *nextAlignedSource;\n    destination = destinationPointer;\n    if ((currentValueAligned + 0xfefefeff & ~currentValueAligned & 0x80808080) != 0) break;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentValueAligned;\n    currentValueAligned = shiftedValue;\n    if ((shiftedValue + 0xfefefeff & ~shiftedValue & 0x80808080) != 0) break;\n    nextAlignedSource = nextAlignedSource + 2;\n    currentValueAligned = *nextSourceValue;\n    destinationPointer = destinationPointer + 2;\n    *destination = shiftedValue;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentValueAligned;\n    shiftedValue = currentValueAligned & 0xff;\n    currentValueAligned = currentValueAligned >> 8 | currentValueAligned << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (shiftedValue != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentValue",
                "puVar3": "nextSourceValue",
                "puVar4": "nextAlignedSource",
                "uVar5": "currentValueAligned",
                "uVar6": "shiftedValue",
                "puVar7": "destinationPointer",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint num)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(num & 0xfffffffc);\n  leadingZeros = -(num & 3);\n  value = *ptr;\n  if ((num & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "num",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "extract_data_from_param_00082ac0",
            "code": "\nint extractDataFromParam_00082ac0(undefined4 inputFlag,int inputValue,int **pointerArray)\n\n{\n  int *currentPointer;\n  int returnValue;\n  int *currentPtrArray;\n  uint loopCounter;\n  undefined4 *undefinedArrayPtr;\n  uint tempVariable1;\n  uint tempVariable2;\n  \n  if (-1 < *(int *)(inputValue + 100) << 0x12) {\n    returnValue = FUN_00083f34();\n    pointerArray[2] = (int *)0x0;\n    pointerArray[1] = (int *)0x0;\n    return returnValue;\n  }\n  currentPtrArray = pointerArray[2];\n  currentPointer = *pointerArray;\n  while (currentPtrArray != (int *)0x0) {\n    tempVariable1 = currentPointer[1];\n    tempVariable2 = tempVariable1 >> 2;\n    if (tempVariable2 != 0) {\n      undefinedArrayPtr = (undefined4 *)(*currentPointer + -4);\n      loopCounter = 0;\n      do {\n        undefinedArrayPtr = undefinedArrayPtr + 1;\n        returnValue = FUN_00083c40(inputFlag,*undefinedArrayPtr,inputValue);\n        loopCounter = loopCounter + 1;\n        if (returnValue == -1) goto LAB_00082b00;\n      } while (tempVariable2 != loopCounter);\n      currentPtrArray = pointerArray[2];\n    }\n    currentPtrArray = (int *)((int)currentPtrArray - (tempVariable1 & 0xfffffffc));\n    pointerArray[2] = currentPtrArray;\n    currentPointer = currentPointer + 2;\n  }\n  returnValue = 0;\nLAB_00082b00:\n  pointerArray[2] = (int *)0x0;\n  pointerArray[1] = (int *)0x0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "extract_data_from_param_00082ac0",
                "param_1": "inputFlag",
                "param_2": "inputValue",
                "param_3": "pointerArray",
                "piVar1": "currentPointer",
                "iVar2": "returnValue",
                "piVar3": "currentPtrArray",
                "uVar4": "loopCounter",
                "puVar5": "undefinedArrayPtr",
                "uVar6": "tempVariable1",
                "uVar7": "tempVariable2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_00082b38(int ptr1,int ptr2,int *******formatString,int **args)\n\n{\n  bool hasLeadingPlus;\n  bool isNegative;\n  bool hasSharpPrefix;\n  char signCharacter;\n  bool hasLeadingZeros;\n  int ********formatArgs;\n  int *currentArg;\n  int result;\n  char tempChar;\n  int *******currentFormatSpecifier;\n  uint tempUInt1;\n  int **tempPtrPtr;\n  uint tempUShort;\n  uint tempUInt2;\n  int tempInt1;\n  int ********ptempPtrPtr1;\n  int tempInt2;\n  int *******tempPtrPtr2;\n  int *piVar19;\n  int *******tempFormatSpecifier;\n  uint tempUInt3;\n  int *tempIntPtr;\n  int *******tempPtrPtr4;\n  undefined4 tempUInt4;\n  int ********ppppppppiVar25;\n  bool hasIsShortLongPrefix;\n  longlong tempLongLong;\n  int *******numArgsProcessed;\n  int *******currentArgIndex;\n  int **currentArgPtr;\n  int resultLength;\n  char *outputBuffer;\n  char leadingSignCharacter;\n  undefined leadingZeroCharacter;\n  undefined leadingSpaceCharacter;\n  int ********localFormatArgs;\n  int localFormatArgsSize;\n  int *******formatArgsBuffer;\n  undefined tempChar1;\n  char tempChar2;\n  undefined tempChar3;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((ptr1 != 0) && (*(int *)(ptr1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  tempUShort = (uint)*(ushort *)(ptr2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(ptr2 + 0xc) << 0x12)) {\n    tempUShort = tempUShort | 0x2000;\n    *(short *)(ptr2 + 0xc) = (short)tempUShort;\n    *(uint *)(ptr2 + 100) = *(uint *)(ptr2 + 100) & 0xffffdfff;\n  }\n  if (((int)(tempUShort << 0x1c) < 0) && (*(int *)(ptr2 + 0x10) != 0)) {\n    if ((tempUShort & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(ptr1,ptr2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(ptr2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(ptr2 + 0xe)) {\n    result = FUN_0008378c(ptr1,ptr2,formatString,args);\n    return result;\n  }\nLAB_00082b8a:\n  outputBuffer = (char *)0x0;\n  formatArgsBuffer = (int *******)0x0;\n  localFormatArgsSize = 0;\n  resultLength = 0;\n  formatArgs = (int ********)local_68;\n  currentArgPtr = args;\n  localFormatArgs = (int ********)local_68;\nLAB_00082b9e:\n  currentFormatSpecifier = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      currentFormatSpecifier = (int *******)((int)currentFormatSpecifier + 1);\n      if (*(char *)currentFormatSpecifier == '\\0') break;\n    } while (*(char *)currentFormatSpecifier != '%');\n    tempFormatSpecifier = (int *******)((int)currentFormatSpecifier - (int)formatString);\n    if (tempFormatSpecifier != (int *******)0x0) {\n      localFormatArgsSize = localFormatArgsSize + 1;\n      formatArgsBuffer = (int *******)((int)formatArgsBuffer + (int)tempFormatSpecifier);\n      *formatArgs = formatString;\n      formatArgs[1] = tempFormatSpecifier;\n      if (localFormatArgsSize < 8) {\n        formatArgs = formatArgs + 2;\n      }\n      else {\n        if (formatArgsBuffer == (int *******)0x0) {\n          resultLength = resultLength + (int)tempFormatSpecifier;\n          localFormatArgsSize = 0;\n          formatArgs = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n        formatArgs = (int ********)local_68;\n        if (result != 0) goto LAB_000833de;\n      }\n      resultLength = resultLength + (int)tempFormatSpecifier;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentFormatSpecifier != '\\0') {\n    leadingSignCharacter = '\\0';\n    tempUInt2 = (uint)*(byte *)((int)currentFormatSpecifier + 1);\n    tempUShort = 0;\n    hasLeadingZeros = false;\n    isNegative = false;\n    hasLeadingPlus = false;\n    hasSharpPrefix = false;\n    hasIsShortLongPrefix = false;\n    tempFormatSpecifier = (int *******)0x0;\n    currentArgIndex = (int *******)0xffffffff;\n    formatString = (int *******)((int)currentFormatSpecifier + 1);\nLAB_00082c12:\n    formatString = (int *******)((int)formatString + 1);\nLAB_00082c16:\n    switch(tempUInt2) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (tempUInt2 != 0) {\n        numArgsProcessed = (int *******)0x1;\n        currentArgIndex = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&tempChar1;\n        tempChar1 = (char)tempUInt2;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasSharpPrefix = true;\n      tempUInt2 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2a:\n      tempFormatSpecifier = (int *******)*currentArgPtr;\n      currentArgPtr = currentArgPtr + 1;\n      if ((int)tempFormatSpecifier < 0) {\n        tempFormatSpecifier = (int *******)-(int)tempFormatSpecifier;\n        goto switchD_00082c20_caseD_2d;\n      }\n      tempUInt2 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2b:\n      tempUInt2 = (uint)*(byte *)formatString;\n      leadingSignCharacter = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      tempUShort = tempUShort | 4;\n      tempUInt2 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2e:\n      tempUInt2 = (uint)*(byte *)formatString;\n      currentFormatSpecifier = (int *******)((int)formatString + 1);\n      if (tempUInt2 == 0x2a) {\n        tempUInt2 = (uint)*(byte *)((int)formatString + 1);\n        currentArgIndex = (int *******)*currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        formatString = currentFormatSpecifier;\n        if ((int)currentArgIndex < 0) {\n          currentArgIndex = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      tempUInt1 = tempUInt2 - 0x30;\n      if (tempUInt1 < 10) {\n        tempUInt3 = 0;\n        do {\n          formatString = (int *******)((int)currentFormatSpecifier + 1);\n          tempUInt2 = (uint)*(byte *)currentFormatSpecifier;\n          tempUInt3 = tempUInt1 + tempUInt3 * 10;\n          tempUInt1 = tempUInt2 - 0x30;\n          currentFormatSpecifier = formatString;\n        } while (tempUInt1 < 10);\n        currentArgIndex = (int *******)(tempUInt3 | (int)tempUInt3 >> 0x1f);\n      }\n      else {\n        currentArgIndex = (int *******)0x0;\n        formatString = currentFormatSpecifier;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      tempUShort = tempUShort | 0x80;\n      tempUInt2 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isNegative = true;\n      if (hasLeadingPlus == false) goto LAB_00083028;\nLAB_00082e98:\n      currentArgPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      piVar19 = *currentArgPtr;\n      tempIntPtr = currentArgPtr[1];\n      currentArgPtr = currentArgPtr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isNegative = true;\n      if (hasLeadingPlus != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isNegative << 4;\n      tempInt1 = (uint)hasLeadingPlus << 5;\n      if ((isNegative == 0) && (tempInt1 = (uint)hasIsShortLongPrefix << 6, hasIsShortLongPrefix != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        tempIntPtr = (int *)0x0;\n      }\n      else {\n        result = tempInt1;\n        piVar19 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        tempIntPtr = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isNegative = true;\n      if (hasLeadingPlus != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isNegative) || (hasIsShortLongPrefix == false)) {\n        result = 1;\n        piVar19 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        tempIntPtr = (int *)0x0;\n      }\n      else {\n        tempIntPtr = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      outputBuffer = \"0123456789ABCDEF\";\n      if (hasLeadingPlus == false) goto LAB_00083196;\nLAB_00082fb6:\n      tempPtrPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      currentArgPtr = tempPtrPtr + 2;\n      piVar19 = *tempPtrPtr;\n      tempIntPtr = tempPtrPtr[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *currentArgPtr;\n      currentArgPtr = currentArgPtr + 1;\n      numArgsProcessed = (int *******)0x1;\n      tempChar1 = SUB41(piVar19,0);\n      currentArgIndex = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&tempChar1;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (hasLeadingPlus != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isNegative == false) && (hasIsShortLongPrefix != false)) {\n        piVar19 = (int *)(int)*(short *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        tempIntPtr = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        tempIntPtr = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)tempIntPtr < 0) {\n        hasIsShortLongPrefix = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        tempIntPtr = (int *)(-(int)tempIntPtr - (uint)hasIsShortLongPrefix);\n        leadingSignCharacter = '-';\n        signCharacter = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)currentArgIndex) {\n        tempUShort = tempUShort & 0xffffff7f;\n      }\n      hasLeadingZeros = false;\n      tempUInt2 = (uint)piVar19 | (uint)tempIntPtr;\n      result = 1;\n      signCharacter = leadingSignCharacter;\n      goto joined_r0x00082d78;\n    case 0x68:\n      hasIsShortLongPrefix = true;\n      tempUInt2 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x6c:\n      tempUInt2 = (uint)*(byte *)formatString;\n      if (tempUInt2 == 0x6c) {\n        hasLeadingPlus = true;\n        tempUInt2 = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isNegative = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (hasLeadingPlus == false) {\n        if (isNegative == false) {\n          if (hasIsShortLongPrefix) {\n            piVar19 = *currentArgPtr;\n            currentArgPtr = currentArgPtr + 1;\n            *(short *)piVar19 = (short)resultLength;\n          }\n          else {\n            piVar19 = *currentArgPtr;\n            currentArgPtr = currentArgPtr + 1;\n            *piVar19 = resultLength;\n          }\n        }\n        else {\n          piVar19 = *currentArgPtr;\n          currentArgPtr = currentArgPtr + 1;\n          *piVar19 = resultLength;\n        }\n      }\n      else {\n        piVar19 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        *piVar19 = resultLength;\n        piVar19[1] = resultLength >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (hasLeadingPlus == false) goto LAB_00082f2a;\nLAB_00082d42:\n      tempPtrPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      currentArgPtr = tempPtrPtr + 2;\n      piVar19 = *tempPtrPtr;\n      tempIntPtr = tempPtrPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar19 = *currentArgPtr;\n      currentArgPtr = currentArgPtr + 1;\n      leadingSpaceCharacter = 0x78;\n      hasLeadingZeros = true;\n      tempIntPtr = (int *)0x0;\n      leadingZeroCharacter = 0x30;\n      outputBuffer = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      hasLeadingPlus = true;\n      tempUInt2 = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*currentArgPtr;\n      leadingSignCharacter = '\\0';\n      currentArgPtr = currentArgPtr + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)currentArgIndex < 0) {\n          currentArgIndex = (int *******)FUN_00082a50(ppppppppiVar25);\n          currentFormatSpecifier = (int *******)0x0;\n          signCharacter = leadingSignCharacter;\n        }\n        else {\n          result = FUN_00084384(ppppppppiVar25,0,currentArgIndex);\n          signCharacter = leadingSignCharacter;\n          if (result == 0) {\n            currentFormatSpecifier = (int *******)0x0;\n          }\n          else {\n            tempPtrPtr2 = (int *******)(result - (int)ppppppppiVar25);\n            if ((int)currentArgIndex <= (int)(int *******)(result - (int)ppppppppiVar25)) {\n              tempPtrPtr2 = currentArgIndex;\n            }\n            currentFormatSpecifier = (int *******)0x0;\n            currentArgIndex = tempPtrPtr2;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < currentArgIndex) {\n        currentArgIndex = (int *******)0x6;\n      }\n      numArgsProcessed = (int *******)((uint)currentArgIndex & ~((int)currentArgIndex >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      leadingSignCharacter = '\\0';\n      currentFormatSpecifier = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!hasLeadingPlus) goto LAB_00082f7c;\nLAB_00082e62:\n      tempPtrPtr = (int **)((int)currentArgPtr + 7U & 0xfffffff8);\n      currentArgPtr = tempPtrPtr + 2;\n      piVar19 = *tempPtrPtr;\n      tempIntPtr = tempPtrPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      outputBuffer = \"0123456789abcdef\";\n      if (hasLeadingPlus != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isNegative == false) && (hasIsShortLongPrefix != false)) {\n        tempIntPtr = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n      }\n      else {\n        piVar19 = *currentArgPtr;\n        currentArgPtr = currentArgPtr + 1;\n        tempIntPtr = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasSharpPrefix) && (((uint)piVar19 | (uint)tempIntPtr) != 0)) {\n        hasLeadingZeros = true;\n        leadingZeroCharacter = 0x30;\n        result = 2;\n        leadingSpaceCharacter = (char)tempUInt2;\n      }\n      else {\n        result = 2;\n      }\n    }\n    leadingSignCharacter = '\\0';\n    signCharacter = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)currentArgIndex) {\n      tempUShort = tempUShort & 0xffffff7f;\n    }\n    tempUInt2 = (uint)piVar19 | (uint)tempIntPtr;\njoined_r0x00082d78:\n    tempLongLong = CONCAT44(tempIntPtr,piVar19);\n    currentFormatSpecifier = currentArgIndex;\n    if ((tempUInt2 == 0) && (currentArgIndex == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((result != 0) || (!hasSharpPrefix)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&tempChar2 + 1);\n      tempChar3 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (tempIntPtr != (int *)0x0 || (int *)0x9 < piVar19) {\n        ptempPtrPtr1 = (int ********)(&tempChar2 + 1);\n        do {\n          ppppppppiVar25 = ptempPtrPtr1;\n          tempUInt4 = (undefined4)((ulonglong)tempLongLong >> 0x20);\n          tempChar = '\\n';\n          FUN_00084750((int)tempLongLong,tempUInt4,10,0);\n          *(char *)ppppppppiVar25 = tempChar + '0';\n          tempLongLong = FUN_00084750((int)tempLongLong,tempUInt4,10,0);\n          ptempPtrPtr1 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (tempLongLong != 0);\n        currentArgIndex = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      tempChar3 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&tempChar2 + 1);\n      goto LAB_0008351e;\n    }\n    ptempPtrPtr1 = (int ********)(&tempChar2 + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ptempPtrPtr1;\n      tempUInt2 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)tempIntPtr << 0x1c);\n      tempIntPtr = (int *)((uint)tempIntPtr >> 4);\n      *(char *)ppppppppiVar25 = outputBuffer[tempUInt2];\n      ptempPtrPtr1 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)tempIntPtr) != 0);\n    currentArgIndex = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (formatArgsBuffer != (int *******)0x0) {\n    FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(ptr2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return resultLength;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ptempPtrPtr1;\n    currentArg = (int *)((uint)piVar19 >> 3 | (int)tempIntPtr << 0x1d);\n    tempIntPtr = (int *)((uint)tempIntPtr >> 3);\n    result = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)result;\n    ptempPtrPtr1 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = currentArg;\n  } while (((uint)currentArg | (uint)tempIntPtr) != 0);\n  if (hasSharpPrefix) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      currentArgIndex = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ptempPtrPtr1;\n      currentArgIndex = (int *******)((int)local_68 - (int)ptempPtrPtr1);\n    }\n  }\n  else {\nLAB_0008351e:\n    currentArgIndex = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  numArgsProcessed = currentArgIndex;\n  if ((int)currentArgIndex < (int)currentFormatSpecifier) {\n    numArgsProcessed = currentFormatSpecifier;\n  }\n  if (signCharacter != '\\0') {\n    numArgsProcessed = (int *******)((int)numArgsProcessed + 1);\n  }\nLAB_00082dba:\n  if (hasLeadingZeros) {\n    numArgsProcessed = (int *******)((int)numArgsProcessed + 2);\n  }\n  if ((tempUShort == 0) &&\n     (tempPtrPtr2 = (int *******)((int)tempFormatSpecifier - (int)numArgsProcessed), 0 < (int)tempPtrPtr2)) {\n    if ((int)tempPtrPtr2 < 0x11) {\n      localFormatArgsSize = localFormatArgsSize + 1;\n    }\n    else {\n      do {\n        tempPtrPtr4 = tempPtrPtr2;\n        result = localFormatArgsSize + 1;\n        formatArgsBuffer = formatArgsBuffer + 4;\n        *formatArgs = (int *******)0x85808;\n        formatArgs[1] = (int *******)0x10;\n        if (result < 8) {\n          tempInt1 = localFormatArgsSize + 2;\n          formatArgs = formatArgs + 2;\n          localFormatArgsSize = result;\n        }\n        else if (formatArgsBuffer == (int *******)0x0) {\n          tempInt1 = 1;\n          formatArgs = (int ********)local_68;\n          localFormatArgsSize = 0;\n        }\n        else {\n          localFormatArgsSize = result;\n          result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n          if (result != 0) goto LAB_000833de;\n          tempInt1 = localFormatArgsSize + 1;\n          formatArgs = (int ********)local_68;\n        }\n        tempPtrPtr2 = tempPtrPtr4 + -4;\n      } while (0x10 < (int)tempPtrPtr2);\n      tempPtrPtr2 = tempPtrPtr4 + -4;\n      localFormatArgsSize = tempInt1;\n    }\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + (int)tempPtrPtr2);\n    *formatArgs = (int *******)0x85808;\n    formatArgs[1] = tempPtrPtr2;\n    if (localFormatArgsSize < 8) {\n      result = localFormatArgsSize + 1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsBuffer == (int *******)0x0) {\n      result = 1;\n      localFormatArgsSize = 0;\n      formatArgs = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n      result = localFormatArgsSize + 1;\n      formatArgs = (int ********)local_68;\n    }\n  }\n  else {\n    result = localFormatArgsSize + 1;\n  }\n  tempInt1 = result;\n  if (leadingSignCharacter != '\\0') {\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + 1);\n    tempInt1 = 1;\n    *formatArgs = (int *******)&leadingSignCharacter;\n    formatArgs[1] = (int *******)0x1;\n    localFormatArgsSize = result;\n    if (result < 8) {\n      tempInt1 = result + 1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsBuffer == (int *******)0x0) {\n      localFormatArgsSize = 0;\n      formatArgs = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n      tempInt1 = localFormatArgsSize + 1;\n      formatArgs = (int ********)local_68;\n    }\n  }\n  result = tempInt1;\n  tempInt2 = localFormatArgsSize;\n  if (hasLeadingZeros) {\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + 2);\n    *formatArgs = (int *******)&leadingZeroCharacter;\n    formatArgs[1] = (int *******)0x2;\n    if (tempInt1 < 8) {\n      result = tempInt1 + 1;\n      tempInt2 = tempInt1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsBuffer == (int *******)0x0) {\n      result = 1;\n      tempInt2 = 0;\n      formatArgs = (int ********)local_68;\n    }\n    else {\n      localFormatArgsSize = tempInt1;\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n      result = localFormatArgsSize + 1;\n      tempInt2 = localFormatArgsSize;\n      formatArgs = (int ********)local_68;\n    }\n  }\n  localFormatArgsSize = tempInt2;\n  if ((tempUShort == 0x80) &&\n     (tempPtrPtr2 = (int *******)((int)tempFormatSpecifier - (int)numArgsProcessed), 0 < (int)tempPtrPtr2)) {\n    if (0x10 < (int)tempPtrPtr2) {\n      do {\n        while( true ) {\n          tempPtrPtr4 = tempPtrPtr2;\n          localFormatArgsSize = tempInt2 + 1;\n          formatArgsBuffer = formatArgsBuffer + 4;\n          *formatArgs = (int *******)&DAT_00085848;\n          formatArgs[1] = (int *******)0x10;\n          if (7 < localFormatArgsSize) break;\n          result = tempInt2 + 2;\n          formatArgs = formatArgs + 2;\nLAB_0008348e:\n          tempInt2 = localFormatArgsSize;\n          tempPtrPtr2 = tempPtrPtr4 + -4;\n          if ((int)(tempPtrPtr4 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (formatArgsBuffer != (int *******)0x0) {\n          result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n          if (result == 0) {\n            result = localFormatArgsSize + 1;\n            formatArgs = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        tempInt2 = 0;\n        tempPtrPtr2 = tempPtrPtr4 + -4;\n        formatArgs = (int ********)local_68;\n      } while (0x10 < (int)(tempPtrPtr4 + -4));\nLAB_000834b4:\n      tempPtrPtr2 = tempPtrPtr4 + -4;\n    }\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + (int)tempPtrPtr2);\n    *formatArgs = (int *******)&DAT_00085848;\n    formatArgs[1] = tempPtrPtr2;\n    localFormatArgsSize = result;\n    if (result < 8) {\n      result = result + 1;\n      formatArgs = formatArgs + 2;\n    }\n    else if (formatArgsBuffer == (int *******)0x0) {\n      result = 1;\n      localFormatArgsSize = 0;\n      formatArgs = (int ********)local_68;\n    }\n    else {\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n      result = localFormatArgsSize + 1;\n      formatArgs = (int ********)local_68;\n    }\n  }\n  currentFormatSpecifier = (int *******)((int)currentFormatSpecifier - (int)currentArgIndex);\n  ptempPtrPtr1 = (int ********)local_68;\n  if ((int)currentFormatSpecifier < 1) {\nLAB_000832c6:\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + (int)currentArgIndex);\n    *formatArgs = (int *******)ppppppppiVar25;\n    formatArgs[1] = currentArgIndex;\n    currentArgIndex = formatArgsBuffer;\n    localFormatArgsSize = result;\n    if (result < 8) goto LAB_0008345a;\n    if (formatArgsBuffer == (int *******)0x0) {\n      localFormatArgsSize = 0;\n    }\n    else {\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    tempInt1 = localFormatArgsSize;\n    if (0x10 < (int)currentFormatSpecifier) {\n      do {\n        while( true ) {\n          tempPtrPtr2 = currentFormatSpecifier;\n          localFormatArgsSize = tempInt1 + 1;\n          formatArgsBuffer = formatArgsBuffer + 4;\n          *formatArgs = (int *******)&DAT_00085848;\n          formatArgs[1] = (int *******)0x10;\n          if (7 < localFormatArgsSize) break;\n          result = tempInt1 + 2;\n          formatArgs = formatArgs + 2;\nLAB_00083282:\n          tempInt1 = localFormatArgsSize;\n          currentFormatSpecifier = tempPtrPtr2 + -4;\n          if ((int)(tempPtrPtr2 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (formatArgsBuffer != (int *******)0x0) {\n          result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n          if (result == 0) {\n            result = localFormatArgsSize + 1;\n            formatArgs = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formatArgs = (int ********)local_68;\n        tempInt1 = 0;\n        currentFormatSpecifier = tempPtrPtr2 + -4;\n      } while (0x10 < (int)(tempPtrPtr2 + -4));\nLAB_000832aa:\n      currentFormatSpecifier = tempPtrPtr2 + -4;\n    }\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + (int)currentFormatSpecifier);\n    *formatArgs = (int *******)&DAT_00085848;\n    formatArgs[1] = currentFormatSpecifier;\n    if (result < 8) {\n      result = result + 1;\n      formatArgs = formatArgs + 2;\n      goto LAB_000832c6;\n    }\n    if (formatArgsBuffer != (int *******)0x0) {\n      localFormatArgsSize = result;\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n      result = localFormatArgsSize + 1;\n      formatArgs = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = currentArgIndex;\n    localFormatArgsSize = 1;\n    formatArgs = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ptempPtrPtr1 = formatArgs + 2;\n    formatArgsBuffer = currentArgIndex;\n  }\n  if (((tempUShort & 4) != 0) &&\n     (currentFormatSpecifier = (int *******)((int)tempFormatSpecifier - (int)numArgsProcessed), 0 < (int)currentFormatSpecifier)) {\n    result = localFormatArgsSize;\n    if ((int)currentFormatSpecifier < 0x11) {\n      tempInt1 = localFormatArgsSize + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          localFormatArgsSize = result + 1;\n          formatArgsBuffer = formatArgsBuffer + 4;\n          *ptempPtrPtr1 = (int *******)0x85808;\n          ptempPtrPtr1[1] = (int *******)0x10;\n          if (7 < localFormatArgsSize) break;\n          tempInt1 = result + 2;\n          ptempPtrPtr1 = ptempPtrPtr1 + 2;\nLAB_00083316:\n          currentFormatSpecifier = currentFormatSpecifier + -4;\n          result = localFormatArgsSize;\n          if ((int)currentFormatSpecifier < 0x11) goto LAB_0008333e;\n        }\n        if (formatArgsBuffer != (int *******)0x0) {\n          result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n          if (result == 0) {\n            tempInt1 = localFormatArgsSize + 1;\n            ptempPtrPtr1 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentFormatSpecifier = currentFormatSpecifier + -4;\n        tempInt1 = 1;\n        result = 0;\n        ptempPtrPtr1 = (int ********)local_68;\n      } while (0x10 < (int)currentFormatSpecifier);\n    }\nLAB_0008333e:\n    formatArgsBuffer = (int *******)((int)formatArgsBuffer + (int)currentFormatSpecifier);\n    *ptempPtrPtr1 = (int *******)0x85808;\n    ptempPtrPtr1[1] = currentFormatSpecifier;\n    localFormatArgsSize = tempInt1;\n    if (7 < tempInt1) {\n      if (formatArgsBuffer == (int *******)0x0) {\n        if ((int)numArgsProcessed < (int)tempFormatSpecifier) {\n          numArgsProcessed = tempFormatSpecifier;\n        }\n        resultLength = resultLength + (int)numArgsProcessed;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)numArgsProcessed < (int)tempFormatSpecifier) {\n    numArgsProcessed = tempFormatSpecifier;\n  }\n  resultLength = resultLength + (int)numArgsProcessed;\n  if ((formatArgsBuffer != (int *******)0x0) &&\n     (result = FUN_00082ac0(ptr1,ptr2,&localFormatArgs), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  localFormatArgsSize = 0;\n  formatArgs = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  tempUInt1 = tempUInt2 - 0x30;\n  tempFormatSpecifier = (int *******)0x0;\n  currentFormatSpecifier = formatString;\n  do {\n    formatString = (int *******)((int)currentFormatSpecifier + 1);\n    tempUInt2 = (uint)*(byte *)currentFormatSpecifier;\n    tempFormatSpecifier = (int *******)(tempUInt1 + (int)tempFormatSpecifier * 10);\n    tempUInt1 = tempUInt2 - 0x30;\n    currentFormatSpecifier = formatString;\n  } while (tempUInt1 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  tempUInt2 = (uint)*(byte *)formatString;\n  if (leadingSignCharacter == '\\0') {\n    leadingSignCharacter = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "formatString",
                "param_4": "args",
                "bVar1": "hasLeadingPlus",
                "bVar2": "isNegative",
                "bVar3": "hasSharpPrefix",
                "cVar4": "signCharacter",
                "bVar5": "hasLeadingZeros",
                "ppppppppiVar6": "formatArgs",
                "piVar7": "currentArg",
                "iVar8": "result",
                "cVar9": "tempChar",
                "pppppppiVar10": "currentFormatSpecifier",
                "uVar11": "tempUInt1",
                "ppiVar12": "tempPtrPtr",
                "uVar13": "tempUShort",
                "uVar14": "tempUInt2",
                "uVar21": "tempUInt3",
                "iVar15": "tempInt1",
                "pppppppiVar16": "tempPtrPtr1",
                "iVar17": "tempInt2",
                "pppppppiVar18": "tempPtrPtr2",
                "piVar22": "tempIntPtr",
                "pppppppiVar20": "tempFormatSpecifier",
                "uVar24": "tempUInt4",
                "pppppppiVar23": "tempPtrPtr4",
                "bVar26": "hasIsShortLongPrefix",
                "lVar27": "tempLongLong",
                "local_dc": "numArgsProcessed",
                "local_d4": "currentArgIndex",
                "local_c8": "currentArgPtr",
                "local_c4": "resultLength",
                "local_c0": "outputBuffer",
                "local_a1": "leadingSignCharacter",
                "local_a0": "leadingZeroCharacter",
                "local_9f": "leadingSpaceCharacter",
                "local_9c": "localFormatArgs",
                "local_98": "localFormatArgsSize",
                "local_94": "formatArgsBuffer",
                "local_90": "tempChar1",
                "cStack_6a": "tempChar2",
                "local_69": "tempChar3"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_binary_data_0008378c",
            "code": "\nint processBinaryData_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int checkResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize;\n  ushort modifiedValue;\n  undefined2 valueToUpdate;\n  undefined *bufferPtr;\n  undefined4 bufferSize1;\n  undefined4 someValue;\n  undefined4 bufferSize2;\n  undefined4 bufferSize3;\n  undefined4 otherDataArray;\n  undefined stackArray [1024];\n  \n  otherDataArray = *(undefined4 *)(param2 + 100);\n  bufferSize2 = *(undefined4 *)(param2 + 0x1c);\n  valueToUpdate = *(undefined2 *)(param2 + 0xe);\n  bufferSize3 = *(undefined4 *)(param2 + 0x24);\n  bufferArray[0] = stackArray;\n  modifiedValue = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  bufferSize1 = 0x400;\n  someValue = 0;\n  bufferPtr = bufferArray[0];\n  result = FUN_00082b38(param1,bufferArray);\n  if ((-1 < result) && (checkResult = FUN_00083adc(param1,bufferArray), checkResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)modifiedValue << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_binary_data_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "checkResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize",
                "local_47c": "modifiedValue",
                "local_47a": "valueToUpdate",
                "local_478": "bufferPtr",
                "local_474": "bufferSize1",
                "local_470": "someValue",
                "local_46c": "bufferSize2",
                "local_464": "bufferSize3",
                "local_424": "otherDataArray",
                "auStack_420": "stackArray"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "validate_and_process_data_00083808",
            "code": "\nundefined4 validate_and_process_data_00083808(undefined4 *param_1,int *param_2)\n\n{\n  int intermediate_value1;\n  int intermediate_value2;\n  uint masked_value;\n  ushort original_value;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  original_value = *(ushort *)(param_2 + 3);\n  masked_value = (uint)original_value;\n  if ((int)(masked_value << 0x1c) < 0) {\n    intermediate_value2 = param_2[4];\n  }\n  else {\n    if (-1 < (int)(masked_value << 0x1b)) {\n      *param_1 = 9;\n      *(ushort *)(param_2 + 3) = original_value | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(masked_value << 0x1d) < 0) {\n      if ((int *)param_2[0xc] != (int *)0x0) {\n        if ((int *)param_2[0xc] != param_2 + 0x10) {\n          FUN_00083d9c(param_1);\n          original_value = *(ushort *)(param_2 + 3);\n        }\n        param_2[0xc] = 0;\n      }\n      intermediate_value2 = param_2[4];\n      original_value = original_value & 0xffdb;\n      *param_2 = intermediate_value2;\n      param_2[1] = 0;\n    }\n    else {\n      intermediate_value2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = original_value | 8;\n    masked_value = (uint)(original_value | 8);\n  }\n  if ((intermediate_value2 == 0) && ((masked_value & 0x280) != 0x200)) {\n    FUN_000842a4(param_1,param_2);\n    masked_value = (uint)*(ushort *)(param_2 + 3);\n    intermediate_value2 = param_2[4];\n  }\n  if ((masked_value & 1) == 0) {\n    intermediate_value1 = 0;\n    if (-1 < (int)(masked_value << 0x1e)) {\n      intermediate_value1 = param_2[5];\n    }\n    param_2[2] = intermediate_value1;\n  }\n  else {\n    param_2[6] = -param_2[5];\n    param_2[2] = 0;\n  }\n  if ((intermediate_value2 == 0) && ((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0)) {\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "validate_and_process_data_00083808",
                "iVar1": "intermediate_value1",
                "iVar2": "intermediate_value2",
                "uVar3": "masked_value",
                "uVar4": "original_value"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input_value)\n\n{\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *dataBuffer,int *packetHeader)\n\n{\n  int *ptrVar1;\n  int index;\n  ushort flags;\n  uint tempVar;\n  int tempVar2;\n  code *callbackFunc;\n  undefined4 returnValue;\n  int tempVar3;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(packetHeader + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(packetHeader + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar3 = packetHeader[4];\n    if (tempVar3 == 0) {\n      return 0;\n    }\n    index = *packetHeader;\n    if ((flags & 3) == 0) {\n      tempVar2 = packetHeader[5];\n    }\n    else {\n      tempVar2 = 0;\n    }\n    *packetHeader = tempVar3;\n    index = index - tempVar3;\n    packetHeader[2] = tempVar2;\n    do {\n      if (index < 1) {\n        return 0;\n      }\n      tempVar2 = (*(code *)packetHeader[9])(dataBuffer,packetHeader[7],tempVar3,index,returnValue);\n      index = index - tempVar2;\n      tempVar3 = tempVar3 + tempVar2;\n    } while (0 < tempVar2);\nLAB_00083a54:\n    *(ushort *)(packetHeader + 3) = *(ushort *)(packetHeader + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(packetHeader + 3) = flags | 0x800;\n  if ((packetHeader[1] < 1) && (packetHeader[0xf] < 1)) {\n    return 0;\n  }\n  callbackFunc = (code *)packetHeader[10];\n  if (callbackFunc == (code *)0x0) {\n    return 0;\n  }\n  tempVar = (uint)(flags | 0x800);\n  tempVar3 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((flags & 0x1000) == 0) {\n    index = (*callbackFunc)(dataBuffer,packetHeader[7],tempVar & 0x1000,1);\n    if ((index == -1) && (tempVar2 = *dataBuffer, tempVar2 != 0)) {\n      if ((tempVar2 == 0x1d) || (tempVar2 == 0x16)) {\n        *dataBuffer = tempVar3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    tempVar = (uint)*(ushort *)(packetHeader + 3);\n    callbackFunc = (code *)packetHeader[10];\n  }\n  else {\n    index = packetHeader[0x14];\n  }\n  if (((int)(tempVar << 0x1d) < 0) && (index = index - packetHeader[1], packetHeader[0xc] != 0)) {\n    index = index - packetHeader[0xf];\n  }\n  index = (*callbackFunc)(dataBuffer,packetHeader[7],index,0);\n  if (index == -1) {\n    tempVar2 = *dataBuffer;\n    if (tempVar2 != 0) {\n      if ((tempVar2 != 0x1d) && (tempVar2 != 0x16)) {\n        *(ushort *)(packetHeader + 3) = *(ushort *)(packetHeader + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(packetHeader + 3) = *(ushort *)(packetHeader + 3) & 0xf7ff;\n      *packetHeader = packetHeader[4];\n      packetHeader[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(packetHeader + 3) & 0xf7ff;\n    packetHeader[1] = 0;\n    *(ushort *)(packetHeader + 3) = flags;\n    *packetHeader = packetHeader[4];\n  }\n  else {\n    flags = *(ushort *)(packetHeader + 3) & 0xf7ff;\n    *packetHeader = packetHeader[4];\n    *(ushort *)(packetHeader + 3) = flags;\n    packetHeader[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    packetHeader[0x14] = index;\n  }\nLAB_00083a00:\n  ptrVar1 = (int *)packetHeader[0xc];\n  *dataBuffer = tempVar3;\n  if (ptrVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptrVar1 != packetHeader + 0x10) {\n    FUN_00083d9c(dataBuffer);\n  }\n  packetHeader[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "dataBuffer",
                "param_2": "packetHeader",
                "piVar1": "ptrVar1",
                "iVar2": "index",
                "uVar3": "flags",
                "uVar4": "tempVar",
                "iVar5": "tempVar2",
                "pcVar6": "callbackFunc",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar3"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStruct)\n\n{\n  undefined4 *firstStruct;\n  undefined4 *secondStruct;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    firstStruct = *(undefined4 **)(dataStruct + 4);\n    *(undefined **)(dataStruct + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(firstStruct + 3) = 4;\n    *firstStruct = 0;\n    firstStruct[1] = 0;\n    firstStruct[2] = 0;\n    firstStruct[0x19] = 0;\n    *(undefined2 *)((int)firstStruct + 0xe) = 0;\n    firstStruct[4] = 0;\n    firstStruct[5] = 0;\n    firstStruct[6] = 0;\n    FUN_00082504(firstStruct + 0x17,0,8);\n    secondStruct = *(undefined4 **)(dataStruct + 8);\n    firstStruct[7] = firstStruct;\n    firstStruct[8] = &LAB_00084440_1;\n    firstStruct[9] = 0x84465;\n    firstStruct[10] = 0x8449d;\n    firstStruct[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)secondStruct + 0xe) = 1;\n    *(undefined2 *)(secondStruct + 3) = 9;\n    *secondStruct = 0;\n    secondStruct[1] = 0;\n    secondStruct[2] = 0;\n    secondStruct[0x19] = 0;\n    secondStruct[4] = 0;\n    secondStruct[5] = 0;\n    secondStruct[6] = 0;\n    FUN_00082504(secondStruct + 0x17,0,8);\n    firstStruct = *(undefined4 **)(dataStruct + 0xc);\n    secondStruct[7] = secondStruct;\n    secondStruct[8] = &LAB_00084440_1;\n    secondStruct[9] = 0x84465;\n    secondStruct[10] = 0x8449d;\n    secondStruct[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(firstStruct + 3) = 0x12;\n    *(undefined2 *)((int)firstStruct + 0xe) = 2;\n    *firstStruct = 0;\n    firstStruct[1] = 0;\n    firstStruct[2] = 0;\n    firstStruct[0x19] = 0;\n    firstStruct[4] = 0;\n    firstStruct[5] = 0;\n    firstStruct[6] = 0;\n    FUN_00082504(firstStruct + 0x17,0,8);\n    firstStruct[7] = firstStruct;\n    firstStruct[8] = &LAB_00084440_1;\n    firstStruct[9] = 0x84465;\n    firstStruct[10] = 0x8449d;\n    firstStruct[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStruct",
                "puVar1": "firstStruct",
                "puVar2": "secondStruct"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int counter;\n  uint result;\n  uint currentValue;\n  byte *currentByte;\n  uint index;\n  byte tempValue;\n  byte tempArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  counter = FUN_00084298();\n  if ((counter == 1) && (param2 - 1 < 0xff)) {\n    currentValue = param2 & 0xff;\n    tempValue = (byte)currentValue;\n    result = 1;\n  }\n  else {\n    result = FUN_0008456c(param1,&tempValue,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    currentValue = (uint)tempValue;\n  }\n  index = 0;\n  do {\n    currentByte = param3[2] + -1;\n    param3[2] = currentByte;\n    if ((int)currentByte < 0) {\n      if ((int)param3[6] <= (int)currentByte) {\n        **param3 = (byte)currentValue;\n        currentByte = *param3;\n        currentValue = (uint)*currentByte;\n        if (currentValue != 10) goto LAB_00083c90;\n      }\n      counter = FUN_000844c4(param1,currentValue,param3);\n      if (counter == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentValue;\n      currentByte = *param3;\nLAB_00083c90:\n      *param3 = currentByte + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    currentValue = (uint)tempArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "counter",
                "uVar2": "result",
                "uVar3": "currentValue",
                "pbVar4": "currentByte",
                "uVar5": "index",
                "local_1c": "tempValue",
                "abStack_1b": "tempArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_memory_00083d00",
            "code": "\nundefined4 relocateMemory_00083d00(undefined4 param1,int param2)\n\n{\n  int result;\n  uint mask;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  mask = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((mask - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = FUN_00082970(param1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + mask) {\n      result = FUN_00082970(param1,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask - adjustedOffset | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      adjustedOffset = FUN_00082970(param1,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_memory_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "mask",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_entry_00083d9c",
            "code": "\nvoid processRelocationEntry_00083d9c(undefined4 param,int entry)\n\n{\n  int previous;\n  bool isSelfReference;\n  uint typeOffset;\n  dword previousEntry;\n  int current;\n  uint totalOffset;\n  dword currentEntry;\n  uint currentSize;\n  dword targetEntry;\n  \n  if (entry == 0) {\n    return;\n  }\n  FUNC_00082598();\n  typeOffset = *(uint *)(entry + -4);\n  currentEntry = entry - 8;\n  totalOffset = typeOffset & 0xfffffffe;\n  previousEntry = currentEntry + totalOffset;\n  currentSize = *(uint *)(previousEntry + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == previousEntry) {\n    currentSize = currentSize + totalOffset;\n    if (-1 < (int)(typeOffset << 0x1f)) {\n      currentEntry = currentEntry - *(int *)(entry + -8);\n      current = *(int *)(currentEntry + 0xc);\n      previous = *(int *)(currentEntry + 8);\n      currentSize = currentSize + *(int *)(entry + -8);\n      *(int *)(previous + 0xc) = current;\n      *(int *)(current + 8) = previous;\n    }\n    previousEntry = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(currentEntry + 4) = currentSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = currentEntry;\n    if (previousEntry <= currentSize) {\n      FUN_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(previousEntry + 4) = currentSize;\n    if ((typeOffset & 1) == 0) {\n      currentEntry = currentEntry - *(int *)(entry + -8);\n      previous = *(int *)(currentEntry + 8);\n      totalOffset = totalOffset + *(int *)(entry + -8);\n      if (previous == 0x2007046c) {\n        isSelfReference = true;\n      }\n      else {\n        current = *(int *)(currentEntry + 0xc);\n        *(int *)(previous + 0xc) = current;\n        *(int *)(current + 8) = previous;\n        isSelfReference = false;\n      }\n    }\n    else {\n      isSelfReference = false;\n    }\n    if (-1 < *(int *)(previousEntry + currentSize + 4) << 0x1f) {\n      totalOffset = totalOffset + currentSize;\n      previous = *(int *)(previousEntry + 8);\n      if ((!isSelfReference) && (previous == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = currentEntry;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = currentEntry;\n        *(undefined4 *)(currentEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(currentEntry + 8) = 0x2007046c;\n        *(uint *)(currentEntry + 4) = totalOffset | 1;\n        *(uint *)(currentEntry + totalOffset) = totalOffset;\n        goto LAB_00083e30;\n      }\n      current = *(int *)(previousEntry + 0xc);\n      *(int *)(previous + 0xc) = current;\n      *(int *)(current + 8) = previous;\n    }\n    *(uint *)(currentEntry + 4) = totalOffset | 1;\n    *(uint *)(currentEntry + totalOffset) = totalOffset;\n    if (!isSelfReference) {\n      if (totalOffset < 0x200) {\n        typeOffset = totalOffset & 0xfffffff8;\n        previous = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + typeOffset);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(totalOffset >> 3) >> 2 & 0xffU);\n        *(int *)(currentEntry + 8) = previous;\n        *(uint *)(currentEntry + 0xc) = typeOffset + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + typeOffset) = currentEntry;\n        *(dword *)(previous + 0xc) = currentEntry;\n        FUNC_0008259c(param);\n        return;\n      }\n      typeOffset = totalOffset >> 9;\n      if (typeOffset < 5) {\n        previous = (totalOffset >> 6) + 0x38;\n        current = previous * 2;\n      }\n      else if (typeOffset < 0x15) {\n        previous = typeOffset + 0x5b;\n        current = previous * 2;\n      }\n      else if (typeOffset < 0x55) {\n        previous = (totalOffset >> 0xc) + 0x6e;\n        current = previous * 2;\n      }\n      else if (typeOffset < 0x155) {\n        previous = (totalOffset >> 0xf) + 0x77;\n        current = previous * 2;\n      }\n      else if (typeOffset < 0x555) {\n        previous = (totalOffset >> 0x12) + 0x7c;\n        current = previous * 2;\n      }\n      else {\n        current = 0xfc;\n        previous = 0x7e;\n      }\n      targetEntry = current * 4 + 0x20070464;\n      previousEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[current];\n      if (previousEntry == targetEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (previous >> 2 & 0xffU);\n        targetEntry = previousEntry;\n      }\n      else {\n        do {\n          if ((*(uint *)(previousEntry + 4) & 0xfffffffc) <= totalOffset) break;\n          previousEntry = *(dword *)(previousEntry + 8);\n        } while (targetEntry != previousEntry);\n        targetEntry = *(dword *)(previousEntry + 0xc);\n      }\n      *(dword *)(currentEntry + 0xc) = targetEntry;\n      *(dword *)(currentEntry + 8) = previousEntry;\n      *(dword *)(targetEntry + 8) = currentEntry;\n      *(dword *)(previousEntry + 0xc) = currentEntry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocation_entry_00083d9c",
                "param_1": "param",
                "param_2": "entry",
                "iVar1": "previous",
                "bVar2": "isSelfReference",
                "uVar3": "typeOffset",
                "dVar4": "previousEntry",
                "iVar5": "current",
                "uVar6": "totalOffset",
                "dVar7": "currentEntry",
                "uVar8": "currentSize",
                "dVar9": "targetEntry"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *outputBufferPtr,uint *inputBufferPtr,uint **helperBufferPtr)\n\n{\n  int result;\n  uint tempVar1;\n  uint tempVar2;\n  ushort flag;\n  uint size;\n  uint *tempPtr1;\n  uint *tempPtr2;\n  uint length;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  \n  if (helperBufferPtr[2] != (uint *)0x0) {\n    flag = *(ushort *)(inputBufferPtr + 3);\n    size = (uint)flag;\n    if (((int)(size << 0x1c) < 0) && (inputBufferPtr[4] != 0)) {\n      tempPtr2 = *helperBufferPtr;\n    }\n    else {\n      result = FUN_00083808(outputBufferPtr,inputBufferPtr);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(inputBufferPtr + 3);\n      size = (uint)flag;\n      tempPtr2 = *helperBufferPtr;\n    }\n    if ((flag & 2) == 0) {\n      tempVar1 = size & 2;\n      tempVar4 = tempVar1;\n      length = tempVar1;\n      tempVar6 = tempVar1;\n      if ((size & 1) == 0) {\n        tempVar1 = 0;\n        tempVar4 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            tempVar4 = *tempPtr2;\n            tempPtr1 = tempPtr2 + 1;\n            tempPtr2 = tempPtr2 + 2;\n            tempVar1 = *tempPtr1;\n          }\n          length = inputBufferPtr[2];\n          if ((int)(size << 0x16) < 0) {\n            if (tempVar1 < length) {\n              size = *inputBufferPtr;\n              length = tempVar1;\n            }\n            else if ((size & 0x480) == 0) {\n              size = *inputBufferPtr;\n            }\n            else {\n              result = *inputBufferPtr - inputBufferPtr[4];\n              length = result + 1 + tempVar1;\n              tempVar3 = (int)(inputBufferPtr[5] * 3) / 2;\n              if (length <= tempVar3) {\n                length = tempVar3;\n              }\n              if ((int)(size << 0x15) < 0) {\n                tempVar3 = FUN_00081e14(outputBufferPtr,length);\n                if (tempVar3 == 0) {\n                  *outputBufferPtr = 0xc;\n                  flag = *(ushort *)(inputBufferPtr + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(tempVar3,inputBufferPtr[4],result);\n                *(ushort *)(inputBufferPtr + 3) = *(ushort *)(inputBufferPtr + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempVar3 = FUN_000825b0(outputBufferPtr);\n                if (tempVar3 == 0) {\n                  FUN_00083d9c(outputBufferPtr,inputBufferPtr[4]);\n                  flag = *(ushort *)(inputBufferPtr + 3) & 0xff7f;\n                  *outputBufferPtr = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              size = tempVar3 + result;\n              inputBufferPtr[4] = tempVar3;\n              inputBufferPtr[5] = length;\n              *inputBufferPtr = size;\n              inputBufferPtr[2] = length - result;\n              length = tempVar1;\n            }\n            FUN_00082438(size,tempVar4,length);\n            inputBufferPtr[2] = inputBufferPtr[2] - length;\n            *inputBufferPtr = *inputBufferPtr + length;\n            length = tempVar1;\n          }\n          else if ((inputBufferPtr[4] < *inputBufferPtr) || (size = inputBufferPtr[5], tempVar1 < size)) {\n            if (tempVar1 < length) {\n              length = tempVar1;\n            }\n            FUN_00082438(*inputBufferPtr,tempVar4,length);\n            size = inputBufferPtr[2];\n            inputBufferPtr[2] = size - length;\n            *inputBufferPtr = *inputBufferPtr + length;\n            if ((size - length == 0) && (result = FUN_00083adc(outputBufferPtr,inputBufferPtr), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            length = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              length = tempVar1;\n            }\n            length = (*(code *)inputBufferPtr[9])(outputBufferPtr,inputBufferPtr[7],tempVar4,(length / size) * size);\n            if ((int)length < 1) goto LAB_0008402e;\n          }\n          tempPtr1 = helperBufferPtr[2];\n          tempVar4 = tempVar4 + length;\n          tempVar1 = tempVar1 - length;\n          helperBufferPtr[2] = (uint *)((int)tempPtr1 - length);\n          if ((uint *)((int)tempPtr1 - length) == (uint *)0x0) break;\n          size = (uint)*(ushort *)(inputBufferPtr + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            length = *tempPtr2;\n            tempVar1 = tempPtr2[1];\n            tempVar6 = 0;\n            tempPtr2 = tempPtr2 + 2;\n          }\n          if (tempVar6 == 0) {\n            result = FUN_00084384(length,10,tempVar1);\n            if (result == 0) {\n              tempVar4 = tempVar1 + 1;\n              tempVar6 = 1;\n            }\n            else {\n              tempVar4 = (result + 1) - length;\n              tempVar6 = 1;\n            }\n          }\n          tempVar3 = *inputBufferPtr;\n          size = tempVar4;\n          if (tempVar1 <= tempVar4) {\n            size = tempVar1;\n          }\n          tempVar2 = inputBufferPtr[5];\n          if ((inputBufferPtr[4] < tempVar3) && (tempVar5 = inputBufferPtr[2] + tempVar2, (int)tempVar5 < (int)size)) {\n            FUN_00082438(tempVar3,length,tempVar5);\n            *inputBufferPtr = *inputBufferPtr + tempVar5;\n            result = FUN_00083adc(outputBufferPtr,inputBufferPtr);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)size < (int)tempVar2) {\n            FUN_00082438(tempVar3,length,size);\n            inputBufferPtr[2] = inputBufferPtr[2] - size;\n            *inputBufferPtr = size + *inputBufferPtr;\n            tempVar5 = size;\n          }\n          else {\n            tempVar5 = (*(code *)inputBufferPtr[9])(outputBufferPtr,inputBufferPtr[7],length,tempVar2);\n            if ((int)tempVar5 < 1) goto LAB_0008402e;\n          }\n          tempVar4 = tempVar4 - tempVar5;\n          if (tempVar4 == 0) {\n            result = FUN_00083adc(outputBufferPtr,inputBufferPtr);\n            if (result != 0) goto LAB_0008402e;\n            tempVar6 = 0;\n          }\n          tempPtr1 = helperBufferPtr[2];\n          length = length + tempVar5;\n          tempVar1 = tempVar1 - tempVar5;\n          helperBufferPtr[2] = (uint *)((int)tempPtr1 - tempVar5);\n        } while ((uint *)((int)tempPtr1 - tempVar5) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      size = 0;\n      do {\n        while( true ) {\n          tempVar4 = size;\n          if (0x7ffffbff < size) {\n            tempVar4 = 0x7ffffc00;\n          }\n          if (size != 0) break;\n          tempVar1 = *tempPtr2;\n          size = tempPtr2[1];\n          tempPtr2 = tempPtr2 + 2;\n        }\n        result = (*(code *)inputBufferPtr[9])(outputBufferPtr,inputBufferPtr[7],tempVar1,tempVar4);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(inputBufferPtr + 3);\nLAB_00084030:\n          *(ushort *)(inputBufferPtr + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        tempPtr1 = helperBufferPtr[2];\n        tempVar1 = tempVar1 + result;\n        size = size - result;\n        helperBufferPtr[2] = (uint *)((int)tempPtr1 - result);\n      } while ((uint *)((int)tempPtr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "outputBufferPtr",
                "param_2": "inputBufferPtr",
                "param_3": "helperBufferPtr",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "flag",
                "uVar5": "size",
                "puVar6": "tempPtr1",
                "puVar7": "tempPtr2",
                "uVar8": "length",
                "uVar9": "tempVar3",
                "uVar10": "tempVar4",
                "uVar11": "tempVar5",
                "local_2c": "tempVar6"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_elf_rel_info_00084298",
            "code": "\ndword getElfRelInfo_00084298(void)\n\n{\n  return relArray[274].relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_elf_rel_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "validate_and_update_data_000842a4",
            "code": "\nvoid validate_and_update_data_000842a4(int data,int *data_info)\n\n{\n  ushort info_value;\n  int result;\n  int function_result;\n  uint info_value_as_uint;\n  bool is_flag_set;\n  undefined temp_buffer [4];\n  uint local_value;\n  \n  info_value = *(ushort *)(data_info + 3);\n  info_value_as_uint = (uint)info_value;\n  if ((int)(info_value_as_uint << 0x1e) < 0) {\n    *data_info = (int)data_info + 0x43;\n    data_info[4] = (int)data_info + 0x43;\n    data_info[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)data_info + 0xe)) {\n    result = FUN_000846b4(data,(int)*(short *)((int)data_info + 0xe),temp_buffer);\n    if (-1 < result) {\n      is_flag_set = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (data_info[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x400;\n        data_info[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    info_value = *(ushort *)(data_info + 3);\n    info_value_as_uint = (uint)info_value;\n  }\n  *(ushort *)(data_info + 3) = info_value | 0x800;\n  if ((info_value_as_uint & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  is_flag_set = false;\nLAB_00084300:\n  function_result = FUN_00081e14(data,result);\n  info_value = *(ushort *)(data_info + 3);\n  if (function_result == 0) {\n    if (-1 < (int)((uint)info_value << 0x16)) {\n      *(ushort *)(data_info + 3) = info_value | 2;\n      *data_info = (int)data_info + 0x43;\n      data_info[4] = (int)data_info + 0x43;\n      data_info[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(data_info + 3) = info_value | 0x80;\n    *data_info = function_result;\n    data_info[4] = function_result;\n    data_info[5] = result;\n    if ((is_flag_set) && (result = FUN_000846dc(data,(int)*(short *)((int)data_info + 0xe)), result != 0))\n    {\n      *(ushort *)(data_info + 3) = *(ushort *)(data_info + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "validate_and_update_data_000842a4",
                "param_1": "data",
                "param_2": "data_info",
                "uVar1": "info_value",
                "iVar2": "result",
                "iVar3": "function_result",
                "uVar4": "info_value_as_uint",
                "bVar5": "is_flag_set",
                "auStack_54": "temp_buffer",
                "local_50": "local_value"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_byte_sequence_00084384",
            "code": "\nuint * find_byte_sequence_00084384(uint *data_ptr,char target_byte,uint data_length)\n\n{\n  uint xored_byte;\n  int index;\n  uint *ptr;\n  bool is_last_byte;\n  \n  if (((uint)data_ptr & 3) == 0) {\nLAB_000843b4:\n    if (3 < data_length) {\n      ptr = data_ptr;\n      do {\n        xored_byte = *ptr ^ CONCAT22(CONCAT11(target_byte,target_byte),CONCAT11(target_byte,target_byte));\n        data_ptr = ptr;\n        if ((xored_byte + 0xfefefeff & ~xored_byte & 0x80808080) != 0) break;\n        data_length = data_length - 4;\n        data_ptr = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < data_length);\n    }\n    if (data_length == 0) {\n      data_ptr = (uint *)0x0;\n    }\n    else if (*(char *)data_ptr != target_byte) {\n      index = 0;\n      do {\n        data_ptr = (uint *)((int)data_ptr + 1);\n        is_last_byte = index == data_length - 1;\n        index = index + 1;\n        if (is_last_byte) goto LAB_000843dc;\n      } while (*(char *)data_ptr != target_byte);\n    }\n  }\n  else if (data_length == 0) {\nLAB_000843dc:\n    data_ptr = (uint *)0x0;\n  }\n  else if (*(char *)data_ptr != target_byte) {\n    ptr = (uint *)((int)data_ptr + 1);\n    data_length = data_length - 1;\n    do {\n      data_ptr = ptr;\n      if (((uint)data_ptr & 3) == 0) goto LAB_000843b4;\n      if (data_length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)data_ptr + 1);\n      data_length = data_length - 1;\n    } while (*(char *)data_ptr != target_byte);\n  }\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_byte_sequence_00084384",
                "param_1": "data_ptr",
                "param_2": "target_byte",
                "param_3": "data_length",
                "uVar1": "xored_byte",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_byte"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *result,int data,undefined4 param1,undefined4 param2)\n\n{\n  int returnValue;\n  ushort value;\n  undefined4 unaffValue1;\n  undefined4 unaffValue2;\n  undefined4 unaffValue3;\n  undefined4 linkRegister;\n  \n  value = *(ushort *)(data + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(result,(int)*(short *)(data + 0xe),0,2);\n    value = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  returnValue = FUN_000811cc((int)*(short *)(data + 0xe),param1,param2,param2,unaffValue1,unaffValue2,\n                       unaffValue3,linkRegister);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "returnValue",
                "uVar2": "value",
                "unaff_r4": "unaffValue1",
                "unaff_r5": "unaffValue2",
                "unaff_r6": "unaffValue3",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_status_0008449c",
            "code": "\nvoid updateStatus_0008449c(undefined4 status,int data)\n\n{\n  int result;\n  ushort updatedFlag;\n  \n  result = FUN_00084700(status,(int)*(short *)(data + 0xe));\n  if (result == -1) {\n    updatedFlag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_status_0008449c",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int inputParam,uint data,undefined4 *array,undefined4 value)\n\n{\n  ushort ushortValue;\n  uint uintValue;\n  undefined *ptr;\n  int index;\n  \n  if ((inputParam != 0) && (*(int *)(inputParam + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  ushortValue = *(ushort *)(array + 3);\n  uintValue = (uint)ushortValue;\n  array[2] = array[6];\n  if ((-1 < (int)(uintValue << 0x1c)) || (index = array[4], index == 0)) {\n    index = FUN_00083808(inputParam,array,ushortValue,uintValue,value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(array + 3);\n    index = array[4];\n    uintValue = (uint)ushortValue;\n  }\n  data = data & 0xff;\n  if ((int)(uintValue << 0x12) < 0) {\n    ptr = (undefined *)*array;\n    index = (int)ptr - index;\n    if (index < (int)array[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    array[0x19] = array[0x19] & 0xffffdfff;\n    ptr = (undefined *)*array;\n    *(ushort *)(array + 3) = ushortValue | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)array[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(inputParam,array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*array;\n  index = 1;\nLAB_000844f8:\n  array[2] = array[2] + -1;\n  *array = ptr + 1;\n  *ptr = (char)data;\n  if (((array[5] == index) ||\n      (((int)((uint)*(ushort *)(array + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (index = FUN_00083adc(inputParam,array), index != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "inputParam",
                "param_2": "data",
                "param_3": "array",
                "param_4": "value",
                "uVar1": "ushortValue",
                "uVar2": "uintValue",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_function_0008456c",
            "code": "\nvoid executeFunction_0008456c(undefined4 *functionPtr,int isSpecialCase,undefined4 specialValue,undefined4 *resultPtr)\n\n{\n  code *functionPointer;\n  undefined4 newValue;\n  int returnValue;\n  undefined temporaryData [12];\n  \n  functionPointer = DAT_20070898;\n  if (isSpecialCase == 0) {\n    newValue = FUN_00084290();\n    returnValue = (*functionPointer)(functionPtr,temporaryData,0,newValue,resultPtr);\n  }\n  else {\n    newValue = FUN_00084290();\n    returnValue = (*functionPointer)(functionPtr,isSpecialCase,specialValue,newValue,resultPtr);\n  }\n  if (returnValue == -1) {\n    *resultPtr = 0;\n    *functionPtr = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_function_0008456c",
                "param_1": "functionPtr",
                "param_2": "isSpecialCase",
                "param_3": "specialValue",
                "param_4": "resultPtr",
                "pcVar1": "functionPointer",
                "uVar2": "newValue",
                "iVar3": "returnValue",
                "auStack_24": "temporaryData"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_param_to_undefined4_000845bc",
            "code": "\nundefined4 convertParamToUndefined4_000845bc(undefined4 *outputPointer,undefined *inputPointer,uint value)\n\n{\n  if (inputPointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *inputPointer = (char)value;\n    return 1;\n  }\n  *outputPointer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_param_to_undefined4_000845bc",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "param_3": "value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "validate_and_process_param_000846a4",
            "code": "\nundefined4 validate_and_process_param_000846a4(int input_param)\n\n{\n  dword r_offset;\n  undefined4 result;\n  int returnValue;\n  \n  r_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = FUN_00083adc(r_offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input_param + 0x2c))(r_offset,*(undefined4 *)(input_param + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(r_offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          FUN_00083d9c(r_offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        FUN_00083d9c(r_offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "validate_and_process_param_000846a4",
                "param_1": "input_param",
                "dVar1": "r_offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "find_and_assign_value_000846b4",
            "code": "\nvoid findAndAssignValue_000846b4(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "find_and_assign_value_000846b4",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_update_value_000846dc",
            "code": "\nvoid checkAndUpdateValue_000846dc(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811be(inputValue);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_update_value_000846dc",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_save_result_00084700",
            "code": "\nvoid checkAndSaveResult_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_save_result_00084700",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "initialize_data_00084728",
            "code": "\nvoid initializeData_00084728(int *outputData,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(paramA,paramB,paramC);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputData = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "initialize_data_00084728",
                "param_1": "outputData",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "verify_input_00084750",
            "code": "\nint verify_input_00084750(int input1,int input2,int flag1,int flag2)\n\n{\n  int result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "verify_input_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculateDifference_0008477c(uint inputValue,int intValue,undefined4 firstWord,undefined4 secondWord,int *outputArray)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000847e0();\n  product = product * CONCAT44(secondWord,firstWord);\n  result = (uint)product;\n  *outputArray = inputValue - result;\n  outputArray[1] = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "inputValue",
                "param_2": "intValue",
                "param_3": "firstWord",
                "param_4": "secondWord",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_adjust_000847ac",
            "code": "\nvoid subtractAndAdjust_000847ac(uint inputValue,int secondParam,undefined4 paramA,undefined4 paramB,int *outputArray)\n\n{\n  uint result;\n  longlong tempValue;\n  \n  tempValue = FUN_00084a80();\n  tempValue = tempValue * CONCAT44(paramB,paramA);\n  result = (uint)tempValue;\n  *outputArray = inputValue - result;\n  outputArray[1] = (secondParam - (int)((ulonglong)tempValue >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_adjust_000847ac",
                "param_1": "inputValue",
                "param_2": "secondParam",
                "param_3": "paramA",
                "param_4": "paramB",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "tempValue"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_and_remainder_000847e0",
            "code": "\nundefined8 divideAndRemainder_000847e0(uint dividend,uint dividendHigh,uint divisor,uint divisorHigh)\n\n{\n  longlong quotientRemainder;\n  uint quotient;\n  uint remainder;\n  uint shift;\n  uint temp;\n  int bit;\n  uint temp1;\n  uint temp2;\n  uint negativeDividendHigh;\n  uint quotient1;\n  uint remainder1;\n  uint divisorExtended;\n  bool hasRemainder;\n  \n  if ((int)dividendHigh < 0) {\n    hasRemainder = dividend != 0;\n    dividend = -dividend;\n    dividendHigh = -dividendHigh - (uint)hasRemainder;\n    negativeDividendHigh = 0xffffffff;\n  }\n  else {\n    negativeDividendHigh = 0;\n  }\n  if ((int)divisorHigh < 0) {\n    negativeDividendHigh = ~negativeDividendHigh;\n    hasRemainder = divisor != 0;\n    divisor = -divisor;\n    divisorHigh = -divisorHigh - (uint)hasRemainder;\n  }\n  if (divisorHigh == 0) {\n    if (dividendHigh < divisor) {\n      bit = LZCOUNT(divisor);\n      if (bit != 0) {\n        remainder = dividend >> (0x20U - bit & 0xff);\n        divisor = divisor << bit;\n        dividend = dividend << bit;\n        dividendHigh = dividendHigh << bit | remainder;\n      }\n      quotient = divisor >> 0x10;\n      shift = dividendHigh / quotient;\n      temp1 = (divisor & 0xffff) * shift;\n      quotient1 = dividend >> 0x10 | (dividendHigh - quotient * shift) * 0x10000;\n      remainder = shift;\n      if (quotient1 <= temp1 && temp1 - quotient1 != 0) {\n        hasRemainder = CARRY4(quotient1,divisor);\n        quotient1 = quotient1 + divisor;\n        remainder = shift - 1;\n        if ((hasRemainder == false) && (quotient1 <= temp1 && temp1 - quotient1 != 0)) {\n          remainder = shift - 2;\n          quotient1 = quotient1 + divisor;\n        }\n      }\n      temp2 = (quotient1 - temp1) / quotient;\n      shift = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((quotient1 - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= shift && shift - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= shift && shift - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      remainder = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      bit = LZCOUNT(divisor);\n      if (bit == 0) {\n        dividendHigh = dividendHigh - divisor;\n        shift = divisor >> 0x10;\n        divisorExtended = divisor & 0xffff;\n        remainder = 1;\n      }\n      else {\n        divisor = divisor << bit;\n        remainder = dividendHigh >> (0x20U - bit & 0xff);\n        shift = divisor >> 0x10;\n        quotient1 = remainder / shift;\n        divisorExtended = divisor & 0xffff;\n        temp1 = divisorExtended * quotient1;\n        temp2 = dividend >> (0x20U - bit & 0xff) | dividendHigh << bit;\n        remainder = temp2 >> 0x10 | (remainder - shift * quotient1) * 0x10000;\n        dividend = dividend << bit;\n        quotient = quotient1;\n        if (remainder <= temp1 && temp1 - remainder != 0) {\n          hasRemainder = CARRY4(remainder,divisor);\n          remainder = remainder + divisor;\n          quotient = quotient1 - 1;\n          if ((hasRemainder == false) && (remainder <= temp1 && temp1 - remainder != 0)) {\n            quotient = quotient1 - 2;\n            remainder = remainder + divisor;\n          }\n        }\n        temp = (remainder - temp1) / shift;\n        quotient1 = divisorExtended * temp;\n        dividendHigh = temp2 & 0xffff | ((remainder - temp1) - shift * temp) * 0x10000;\n        remainder = temp;\n        if (dividendHigh <= quotient1 && quotient1 - dividendHigh != 0) {\n          hasRemainder = CARRY4(dividendHigh,divisor);\n          dividendHigh = dividendHigh + divisor;\n          remainder = temp - 1;\n          if ((hasRemainder == false) && (dividendHigh <= quotient1 && quotient1 - dividendHigh != 0)) {\n            remainder = temp - 2;\n            dividendHigh = dividendHigh + divisor;\n          }\n        }\n        dividendHigh = dividendHigh - quotient1;\n        remainder = remainder | quotient << 0x10;\n      }\n      quotient = dividendHigh / shift;\n      quotient1 = divisorExtended * quotient;\n      temp2 = dividend >> 0x10 | (dividendHigh - shift * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= quotient1 && quotient1 - temp2 != 0) {\n        hasRemainder = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((hasRemainder == false) && (temp2 <= quotient1 && quotient1 - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp = (temp2 - quotient1) / shift;\n      divisorExtended = divisorExtended * temp;\n      shift = dividend & 0xffff | ((temp2 - quotient1) - shift * temp) * 0x10000;\n      quotient = temp;\n      if (shift <= divisorExtended && divisorExtended - shift != 0) {\n        quotient = temp - 1;\n        if ((CARRY4(shift,divisor) == false) &&\n           (shift + divisor <= divisorExtended && divisorExtended - (shift + divisor) != 0)) {\n          quotient = temp - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividendHigh < divisorHigh) {\n    remainder = 0;\n    quotient = 0;\n  }\n  else {\n    bit = LZCOUNT(divisorHigh);\n    if (bit == 0) {\n      if ((divisorHigh < dividendHigh) || (divisor <= dividend)) {\n        remainder = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        remainder = 0;\n      }\n    }\n    else {\n      remainder = 0x20 - bit;\n      shift = dividendHigh >> (remainder & 0xff);\n      divisorExtended = divisor >> (remainder & 0xff) | divisorHigh << bit;\n      quotient1 = divisorExtended >> 0x10;\n      quotient = shift / quotient1;\n      temp2 = (divisorExtended & 0xffff) * quotient;\n      temp1 = dividendHigh << bit | dividend >> (remainder & 0xff);\n      shift = temp1 >> 0x10 | (shift - quotient1 * quotient) * 0x10000;\n      remainder = quotient;\n      if (shift <= temp2 && temp2 - shift != 0) {\n        hasRemainder = CARRY4(shift,divisorExtended);\n        shift = shift + divisorExtended;\n        remainder = quotient - 1;\n        if ((hasRemainder == false) && (shift <= temp2 && temp2 - shift != 0)) {\n          remainder = quotient - 2;\n          shift = shift + divisorExtended;\n        }\n      }\n      temp = (shift - temp2) / quotient1;\n      remainder1 = (divisorExtended & 0xffff) * temp;\n      shift = temp1 & 0xffff | ((shift - temp2) - quotient1 * temp) * 0x10000;\n      quotient = temp;\n      if (shift <= remainder1 && remainder1 - shift != 0) {\n        hasRemainder = CARRY4(shift,divisorExtended);\n        shift = shift + divisorExtended;\n        quotient = temp - 1;\n        if ((hasRemainder == false) && (shift <= remainder1 && remainder1 - shift != 0)) {\n          quotient = temp - 2;\n          shift = shift + divisorExtended;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      quotientRemainder = (ulonglong)quotient * (ulonglong)(divisor << bit);\n      temp1 = (uint)((ulonglong)quotientRemainder >> 0x20);\n      remainder = 0;\n      if ((shift - remainder1 < temp1) ||\n         ((shift - remainder1 == temp1 && (dividend << bit < (uint)quotientRemainder)))) {\n        quotient = quotient - 1;\n        remainder = 0;\n      }\n    }\n  }\n  if (negativeDividendHigh != 0) {\n    hasRemainder = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)hasRemainder;\n  }\n  return CONCAT44(remainder,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_and_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisor",
                "param_4": "divisorHigh",
                "lVar1": "quotientRemainder",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "uVar4": "shift",
                "uVar5": "temp",
                "iVar6": "bit",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "negativeDividendHigh",
                "uVar10": "quotient1",
                "uVar11": "remainder1",
                "uVar12": "divisorExtended",
                "bVar13": "hasRemainder"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_quotient_00084a80",
            "code": "\nulonglong calculateQuotient_00084a80(uint dividend,uint divisor,uint num1,uint num2)\n\n{\n  longlong result;\n  uint quotient;\n  uint dividendUpper;\n  uint product;\n  uint dividendLower;\n  uint temp1;\n  uint quotient1;\n  uint temp2;\n  uint quotient2;\n  int count;\n  bool carry;\n  \n  if (num2 == 0) {\n    if (num1 <= divisor) {\n      if (num1 == 0) {\n        num1 = 1 / 0;\n      }\n      count = leadingZerosCount(num1);\n      if (count == 0) {\n        divisor = divisor - num1;\n        dividendUpper = num1 >> 0x10;\n        dividendLower = num1 & 0xffff;\n        quotient = 1;\n      }\n      else {\n        num1 = num1 << count;\n        temp2 = divisor >> (0x20U - count & 0xff);\n        dividendUpper = num1 >> 0x10;\n        quotient2 = temp2 / dividendUpper;\n        dividendLower = num1 & 0xffff;\n        quotient = dividendLower * quotient2;\n        temp1 = dividend >> (0x20U - count & 0xff) | divisor << count;\n        product = temp1 >> 0x10 | (temp2 - dividendUpper * quotient2) * 0x10000;\n        dividend = dividend << count;\n        temp2 = quotient2;\n        if (product <= quotient && quotient - product != 0) {\n          carry = carry4(product,num1);\n          product = product + num1;\n          temp2 = quotient2 - 1;\n          if ((carry == false) && (product <= quotient && quotient - product != 0)) {\n            temp2 = quotient2 - 2;\n            product = product + num1;\n          }\n        }\n        quotient1 = (product - quotient) / dividendUpper;\n        quotient2 = dividendLower * quotient1;\n        divisor = temp1 & 0xffff | ((product - quotient) - dividendUpper * quotient1) * 0x10000;\n        quotient = quotient1;\n        if (divisor <= quotient2 && quotient2 - divisor != 0) {\n          carry = carry4(divisor,num1);\n          divisor = divisor + num1;\n          quotient = quotient1 - 1;\n          if ((carry == false) && (divisor <= quotient2 && quotient2 - divisor != 0)) {\n            quotient = quotient1 - 2;\n            divisor = divisor + num1;\n          }\n        }\n        divisor = divisor - quotient2;\n        quotient = quotient | temp2 << 0x10;\n      }\n      quotient2 = divisor / dividendUpper;\n      product = dividendLower * quotient2;\n      temp1 = dividend >> 0x10 | (divisor - dividendUpper * quotient2) * 0x10000;\n      temp2 = quotient2;\n      if (temp1 <= product && product - temp1 != 0) {\n        carry = carry4(temp1,num1);\n        temp1 = temp1 + num1;\n        temp2 = quotient2 - 1;\n        if ((carry == false) && (temp1 <= product && product - temp1 != 0)) {\n          temp2 = quotient2 - 2;\n          temp1 = temp1 + num1;\n        }\n      }\n      quotient2 = (temp1 - product) / dividendUpper;\n      dividendLower = dividendLower * quotient2;\n      temp1 = dividend & 0xffff | ((temp1 - product) - dividendUpper * quotient2) * 0x10000;\n      dividendUpper = quotient2;\n      if (temp1 <= dividendLower && dividendLower - temp1 != 0) {\n        dividendUpper = quotient2 - 1;\n        if ((carry4(temp1,num1) == false) &&\n           (temp1 + num1 <= dividendLower && dividendLower - (temp1 + num1) != 0)) {\n          dividendUpper = quotient2 - 2;\n        }\n      }\n      return concat44(quotient,dividendUpper | temp2 << 0x10);\n    }\n    count = leadingZerosCount(num1);\n    if (count != 0) {\n      temp2 = dividend >> (0x20U - count & 0xff);\n      num1 = num1 << count;\n      dividend = dividend << count;\n      divisor = temp2 | divisor << count;\n    }\n    quotient = num1 >> 0x10;\n    dividendUpper = divisor / quotient;\n    dividendLower = (num1 & 0xffff) * dividendUpper;\n    quotient2 = dividend >> 0x10 | (divisor - quotient * dividendUpper) * 0x10000;\n    temp2 = dividendUpper;\n    if (quotient2 <= dividendLower && dividendLower - quotient2 != 0) {\n      carry = carry4(quotient2,num1);\n      quotient2 = quotient2 + num1;\n      temp2 = dividendUpper - 1;\n      if ((carry == false) && (quotient2 <= dividendLower && dividendLower - quotient2 != 0)) {\n        temp2 = dividendUpper - 2;\n        quotient2 = quotient2 + num1;\n      }\n    }\n    temp1 = (quotient2 - dividendLower) / quotient;\n    dividendUpper = (num1 & 0xffff) * temp1;\n    dividendLower = dividend & 0xffff | ((quotient2 - dividendLower) - quotient * temp1) * 0x10000;\n    quotient = temp1;\n    if (dividendLower <= dividendUpper && dividendUpper - dividendLower != 0) {\n      quotient = temp1 - 1;\n      if ((carry4(dividendLower,num1) == false) &&\n         (dividendLower + num1 <= dividendUpper && dividendUpper - (dividendLower + num1) != 0)) {\n        quotient = temp1 - 2;\n      }\n    }\n    quotient = quotient | temp2 << 0x10;\n  }\n  else {\n    if (divisor < num2) {\n      return 0;\n    }\n    count = leadingZerosCount(num2);\n    if (count == 0) {\n      if ((num2 < divisor) || (num1 <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - count;\n      temp2 = divisor >> (quotient & 0xff);\n      dividendUpper = num2 << count | num1 >> (quotient & 0xff);\n      dividendLower = dividendUpper >> 0x10;\n      product = temp2 / dividendLower;\n      quotient2 = (dividendUpper & 0xffff) * product;\n      temp1 = dividend >> (quotient & 0xff) | divisor << count;\n      quotient = temp1 >> 0x10 | (temp2 - dividendLower * product) * 0x10000;\n      temp2 = product;\n      if (quotient <= quotient2 && quotient2 - quotient != 0) {\n        carry = carry4(quotient,dividendUpper);\n        quotient = quotient + dividendUpper;\n        temp2 = product - 1;\n        if ((carry == false) && (quotient <= quotient2 && quotient2 - quotient != 0)) {\n          temp2 = product - 2;\n          quotient = quotient + dividendUpper;\n        }\n      }\n      product = (quotient - quotient2) / dividendLower;\n      quotient1 = (dividendUpper & 0xffff) * product;\n      dividendLower = temp1 & 0xffff | ((quotient - quotient2) - dividendLower * product) * 0x10000;\n      quotient = product;\n      if (dividendLower <= quotient1 && quotient1 - dividendLower != 0) {\n        carry = carry4(dividendLower,dividendUpper);\n        dividendLower = dividendLower + dividendUpper;\n        quotient = product - 1;\n        if ((carry == false) && (dividendLower <= quotient1 && quotient1 - dividendLower != 0)) {\n          quotient = product - 2;\n          dividendLower = dividendLower + dividendUpper;\n        }\n      }\n      quotient = quotient | temp2 << 0x10;\n      result = (ulonglong)quotient * (ulonglong)(num1 << count);\n      temp2 = (uint)((ulonglong)result >> 0x20);\n      if ((dividendLower - quotient1 < temp2) || ((dividendLower - quotient1 == temp2 && (dividend << count < (uint)result)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_quotient_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "num1",
                "param_4": "num2",
                "lVar1": "result",
                "uVar2": "quotient",
                "uVar3": "dividendUpper",
                "uVar4": "product",
                "uVar5": "dividendLower",
                "uVar6": "temp1",
                "uVar7": "quotient1",
                "uVar8": "temp2",
                "uVar9": "quotient2",
                "iVar10": "count",
                "bVar11": "carry",
                "CARRY4": "carry4",
                "CONCAT44": "concat44",
                "LZCOUNT": "leadingZerosCount"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 104538,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}