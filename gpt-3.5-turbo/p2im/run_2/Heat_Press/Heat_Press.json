{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "initialize_and_process_data_000816a8",
                "set_data_to_0x8000_000816d4": "set_data_to_zero",
                "initialize_and_process_data_00080ae4": "initialize_data",
                "do_nothing_000816a6": "do_nothing",
                "do_nothing_0008120c": "do_nothing_with_parameter",
                "initialize_data_000804a8": "initialize_data2",
                "FUNC_000805d0": "process_data",
                "DAT_000816d0": "data_flag",
                "check_differences_00080ce0": "check_for_differences"
            },
            "code": "void initialize_and_process_data_000816a8(void)\n{\n  set_data_to_zero();\n  initialize_data();\n  do_nothing();\n  do_nothing_with_parameter(1);\n  initialize_data2();\n  do {\n    do {\n      process_data();\n    } while (DAT_000816d0 == 0);\n    check_for_differences();\n  } while (true);\n}",
            "called": [
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_00080ce0",
                "FUN_000805d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_uint_00081042",
                "param_1": "ptr_value",
                "param_2": "mask",
                "param_3": "shift",
                "param_4": "bits_to_set",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void set_bits_in_uint_00081042(uint32_t* PTR_value, uint32_t mask, uint32_t shift, uint32_t bits_to_set) {\n    uint32_t* PTR_target = PTR_value + 1;\n    uint32_t current_value = *PTR_target;\n    uint32_t shifted_bits = (bits_to_set & 0xf) << shift;\n    uint32_t masked_value = current_value & mask;\n    *PTR_target = masked_value | shifted_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_bits_in_uint_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "ptr_array",
                "piVar1": "current_ptr",
                "iVar2": "status",
                "piVar3": "previous_ptr",
                "uVar4": "i",
                "puVar5": "data_ptr",
                "uVar6": "array_size",
                "uVar7": "num_elements"
            },
            "code": "int process_data_00082ac0(int data, int size, int **ptr_array)\n{\n  int *current_ptr;\n  int status;\n  int *previous_ptr;\n  uint array_size;\n  undefined4 *data_ptr;\n  uint i;\n  uint num_elements;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    status = FUNC_00083f34();\n    ptr_array[2] = (int *)0x0;\n    ptr_array[1] = (int *)0x0;\n    return status;\n  }\n  previous_ptr = ptr_array[2];\n  current_ptr = *ptr_array;\n  while (previous_ptr != (int *)0x0) {\n    array_size = current_ptr[1];\n    num_elements = array_size >> 2;\n    if (num_elements != 0) {\n      data_ptr = (undefined4 *)(*current_ptr + -4);\n      i = 0;\n      do {\n        data_ptr = data_ptr + 1;\n        status = process_data_00082ac0_00083c40(data, *data_ptr, size);\n        i = i + 1;\n        if (status == -1) goto LAB_00082b00;\n      } while (num_elements != i);\n      previous_ptr = ptr_array[2];\n    }\n    previous_ptr = (int *)((int)previous_ptr - (array_size & 0xfffffffc));\n    ptr_array[2] = previous_ptr;\n    current_ptr = current_ptr + 2;\n  }\n  status = 0;\nLAB_00082b00:\n  ptr_array[2] = (int *)0x0;\n  ptr_array[1] = (int *)0x0;\n  return status;\n}",
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_differences_00080ce0",
                "calculate_difference_000813e4": "calculate_difference",
                "PTR_DAT_00080d14": "PTR_DATA_1",
                "PTR_DAT_00080d18": "PTR_DATA_2",
                "PTR_DAT_00080d1c": "PTR_DATA_3",
                "PTR_DAT_00080d20": "PTR_DATA_4",
                "do_nothing_00080aa8": "do_nothing",
                "do_nothing_00080ab8": "do_something",
                "do_nothing_00080aba": "do_something_else",
                "do_nothing_00080abc": "do_another_thing"
            },
            "code": "void check_differences_00080ce0(void)\n{\n  int difference;\n  difference = calculate_difference(PTR_DAT_00080d14);\n  if (difference != 0) {\n    do_nothing();\n  }\n  difference = calculate_difference(PTR_DAT_00080d18);\n  if (difference != 0) {\n    do_something();\n  }\n  difference = calculate_difference(PTR_DAT_00080d1c);\n  if (difference != 0) {\n    do_something_else();\n  }\n  difference = calculate_difference(PTR_DAT_00080d20);\n  if (difference != 0) {\n    do_another_thing();\n  }\n  return;\n}",
            "called": [
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_differences_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_array_with_zeros_00081682",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "count_until_null"
            },
            "code": "undefined4 *initialize_array_with_zeros_00081682(undefined4 *array, int size)\n{\n    undefined4 count_until_null;\n\n    array[0] = 0;\n    array[1] = 0;\n    array[2] = 0;\n\n    if (size != 0) {\n        count_until_null = count_bytes_until_null(size);\n        process_data_and_check_if_valid(array, size, count_until_null);\n    }\n\n    return array;\n}",
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeros_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "allocateMemory_000815fe",
                "*param_1": "memoryBlock",
                "allocate_memory_block_00081e04": "allocateMemoryBlock"
            },
            "code": "void allocateMemory_000815fe(int* memoryBlock) {\n    // code to allocate memory block\n}\n\nint* allocateMemory_000815fe(int* memoryBlock) {\n    allocateMemory_000815fe(memoryBlock);\n    return memoryBlock;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "allocateMemory_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "check_number_00081d1c",
                "param_1": "number",
                "uVar1": "result",
                "is_negative": "is_negative",
                "is_valid": "is_valid",
                "shift_amount": "shift_amount",
                "shift_distance": "shift_distance"
            },
            "code": "uint check_number_00081d1c(uint number) {\n  uint result;\n  bool is_negative = (number & 0x80000000) != 0;\n  bool is_valid = (number << 1) < 0x7f000000;\n\n  if (is_negative || !is_valid) {\n    return 0;\n  }\n\n  uint shift_amount = (number << 1) >> 0x18;\n  uint shift_distance = 0x9e - shift_amount;\n\n  if ((int)shift_distance >= 0) {\n    result = (number << 8 | 0x80000000) >> (shift_distance & 0xff);\n  }\n  else if (shift_distance == 0xffffff9f && (number & 0x7fffff) != 0) {\n    return 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_number_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "multiplier_1",
                "param_4": "multiplier_2",
                "param_5": "output_array",
                "uVar1": "difference",
                "lVar2": "product",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void calculate_difference_000847ac(uint input_1, int input_2, uint32_t multiplier_1, uint32_t multiplier_2, int *output_array)\n{\n  uint32_t product = FUNC_00084a80() * ((uint64_t)multiplier_1 << 32 | multiplier_2);\n  uint32_t difference = input_1 - product;\n  uint32_t shifted_product = product >> 32;\n  output_array[1] = input_2 - shifted_product - (input_1 < product);\n  *output_array = difference;\n}\n",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "DAT_00080134": "flag",
                "PTR_DAT_0008013c": "data_pointer",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "code_pointer"
            },
            "code": "void execute_function_if_not_null_00080118(int parameter1, char* parameter2, int parameter3, int parameter4)\n{\n    if (DAT_00080134 != 0) {\n        parameter2 = PTR_DAT_0008013c;\n    }\n    if ((*DAT_00080140 != 0) && (DAT_00080144 != (code*)0x0)) {\n        (*DAT_00080144)(DAT_00080140, parameter2, parameter3, DAT_00080144, parameter4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_if_carry_or_zero_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag",
                "concatenate_32bit_00081c5c": "concatenate_32bit"
            },
            "code": "bool check_if_carry_or_zero_00081c94(void)\n{\n  undefined carry_flag;\n  undefined zero_flag;\n  concatenate_32bit();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_if_carry_or_zero_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_buffers_00083b14",
                "param_1": "buffer_address",
                "puVar1": "ptr1",
                "uVar2": "var1",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "puVar5": "buffer1",
                "puVar6": "buffer2",
                "PTR_LAB_00083b08_1_00083bf4": "buffer_label_1",
                "PTR_LAB_000844bc_1_00083c04": "buffer_label_2",
                "PTR_FUN_0008449c_1_00083c00": "function_label_1",
                "DAT_00083bfc": "constant_1",
                "PTR_LAB_00084440_1_00083bf8": "buffer_label_3"
            },
            "code": "void initialize_buffers_00083b14(int buffer_address)\n{\n    if (*(int *)(buffer_address + 0x38) == 0) {\n        undefined4 *buffer1 = *(undefined4 **)(buffer_address + 4);\n        *(undefined **)(buffer_address + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n        *(undefined4 *)(buffer_address + 0x2e4) = 3;\n        *(int *)(buffer_address + 0x2e8) = buffer_address + 0x2ec;\n        *(undefined4 *)(buffer_address + 0x2e0) = 0;\n        buffer1[3] = 4;\n        *buffer1 = 0;\n        buffer1[1] = 0;\n        buffer1[2] = 0;\n        buffer1[0x19] = 0;\n        *(undefined2 *)((int)buffer1 + 0xe) = 0;\n        buffer1[4] = 0;\n        buffer1[5] = 0;\n        buffer1[6] = 0;\n        fill_buffer_with_value(buffer1 + 0x17, 0, 8);\n        undefined *ptr1 = PTR_LAB_000844bc_1_00083c04;\n        undefined *ptr2 = PTR_process_and_update_result_0008449c_1_00083c00;\n        undefined4 var1 = DAT_00083bfc;\n        undefined *ptr3 = PTR_LAB_00084440_1_00083bf8;\n        undefined *ptr4 = buffer_label_4;\n        undefined4 *buffer2 = *(undefined4 **)(buffer_address + 8);\n        buffer1[7] = buffer1;\n        buffer1[8] = ptr1;\n        buffer1[9] = var1;\n        buffer1[10] = ptr2;\n        buffer1[0xb] = ptr3;\n        *(undefined2 *)((int)buffer2 + 0xe) = 1;\n        *(undefined2 *)(buffer2 + 3) = 9;\n        *buffer2 = 0;\n        buffer2[1] = 0;\n        buffer2[2] = 0;\n        buffer2[0x19] = 0;\n        buffer2[4] = 0;\n        buffer2[5] = 0;\n        buffer2[6] = 0;\n        fill_buffer_with_value(buffer2 + 0x17, 0, 8);\n        undefined4 *buffer3 = *(undefined4 **)(buffer_address + 0xc);\n        buffer2[7] = buffer2;\n        buffer2[8] = ptr1;\n        buffer2[9] = var1;\n        buffer2[10] = ptr2;\n        buffer2[0xb] = ptr3;\n        *(undefined2 *)(buffer3 + 3) = 0x12;\n        *(undefined2 *)((int)buffer3 + 0xe) = 2;\n        *buffer3 = 0;\n        buffer3[1] = 0;\n        buffer3[2] = 0;\n        buffer3[0x19] = 0;\n        buffer3[4] = 0;\n        buffer3[5] = 0;\n        buffer3[6] = 0;\n        fill_buffer_with_value(buffer3 + 0x17, 0, 8);\n        buffer3[7] = buffer3;\n        buffer3[8] = ptr1;\n        buffer3[9] = var1;\n        buffer3[10] = ptr2;\n        buffer3[0xb] = ptr4;\n        *(undefined4 *)(buffer_address + 0x38) = 1;\n    }\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_00083808",
                "FUN_00082b38",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "initialize_buffers_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "initialize_memory_000842a4",
                "param_1": "memory_size",
                "param_2": "memory_info",
                "uVar1": "memory_info_value",
                "iVar2": "initialized_memory_size",
                "iVar3": "initialized_memory",
                "uVar4": "memory_info_uint",
                "bVar5": "is_memory_info_value_0x2000",
                "auStack_54": "stack_array",
                "local_50": "memory_info_size"
            },
            "code": "void initialize_memory_000842a4(int memory_size, int* memory_info)\n{\n    ushort memory_info_value = *(ushort *)(memory_info + 3);\n    uint memory_info_uint = (uint)memory_info_value;\n    if ((int)(memory_info_uint << 0x1e) < 0) {\n        *memory_info = (int)memory_info + 0x43;\n        memory_info[4] = (int)memory_info + 0x43;\n        memory_info[5] = 1;\n        return;\n    }\n    if (-1 < *(short *)((int)memory_info + 0xe)) {\n        int initialized_memory_size = initialize_memory_000842a4_000846b4(memory_size, (int)*(short *)((int)memory_info + 0xe), auStack_54);\n        if (-1 < initialized_memory_size) {\n            bool is_memory_info_value_0x2000 = (local_50 & 0xf000) == 0x2000;\n            if (((local_50 & 0xf000) == 0x8000) && ((undefined *)memory_info[10] == PTR_FUN_0008449c_1_00084380)) {\n                initialized_memory_size = 0x400;\n                *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 0x400;\n                memory_info[0x13] = 0x400;\n            }\n            else {\n                initialized_memory_size = 0x400;\n                *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 0x800;\n            }\n            goto LAB_00084300;\n        }\n        memory_info_value = *(ushort *)(memory_info + 3);\n        memory_info_uint = (uint)memory_info_value;\n    }\n    *(ushort *)(memory_info + 3) = memory_info_value | 0x800;\n    int memory_info_size = ((memory_info_uint & 0x80) == 0) ? 0x400 : 0x40;\n    bool is_memory_info_value_0x8000 = false;\nLAB_00084300:\n    int initialized_memory = FUNC_00081e14(memory_size, memory_info_size);\n    memory_info_value = *(ushort *)(memory_info + 3);\n    if (initialized_memory == 0) {\n        if (-1 < (int)((uint)memory_info_value << 0x16)) {\n            *(ushort *)(memory_info + 3) = memory_info_value | 2;\n            *memory_info = (int)memory_info + 0x43;\n            memory_info[4] = (int)memory_info + 0x43;\n            memory_info[5] = 1;\n        }\n    }\n    else {\n        *(undefined **)(memory_size + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n        *(ushort *)(memory_info + 3) = memory_info_value | 0x80;\n        *memory_info = initialized_memory;\n        memory_info[4] = initialized_memory;\n        memory_info[5] = memory_info_size;\n        if ((is_memory_info_value_0x2000) && (initialized_memory_size = get_default_value_000846dc(memory_size, (int)*(short *)((int)memory_info + 0xe)), initialized_memory_size != 0)) {\n            *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 1;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_000846b4",
                "FUN_000846dc",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "initialize_memory_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "decompress_data_000846a4",
                "param_1": "input_data",
                "uVar1": "result",
                "iVar2": "data_ptr",
                "iVar3": "buffer_ptr",
                "initialize_buffers_00083b14": "initialize_buffers",
                "decompress_data_00083adc": "decompress_data",
                "allocate_memory_block_00083d9c": "allocate_memory_block",
                "do_nothing_00083c08": "do_nothing",
                "do_nothing_00083c0c": "do_nothing"
            },
            "code": "undefined4 decompress_data_000846a4(int input_data)\n{\n    undefined4 result;\n    int buffer_ptr;\n    int data_ptr;\n    buffer_ptr = *buffer_data;\n    if (input_data != 0)\n    {\n        if ((buffer_ptr != 0) && (*(int *)(buffer_ptr + 0x38) == 0))\n        {\n            initialize_buffers();\n        }\n        if (*(short *)(input_data + 0xc) != 0)\n        {\n            result = decompress_data_000846a4(buffer_ptr, input_data);\n            if ((*(code **)(input_data + 0x2c) != (code *)0x0) && ((data_ptr = (**(code **)(input_data + 0x2c))(buffer_ptr,*(undefined4 *)(input_data + 0x1c))), data_ptr < 0))\n            {\n                result = 0xffffffff;\n            }\n            if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x18) < 0)\n            {\n                allocate_memory_block(buffer_ptr,*(undefined4 *)(input_data + 0x10));\n            }\n            if (*(int *)(input_data + 0x30) != 0)\n            {\n                if (*(int *)(input_data + 0x30) != input_data + 0x40)\n                {\n                    allocate_memory_block(buffer_ptr);\n                }\n                *(undefined4 *)(input_data + 0x30) = 0;\n            }\n            if (*(int *)(input_data + 0x44) != 0)\n            {\n                allocate_memory_block(buffer_ptr);\n                *(undefined4 *)(input_data + 0x44) = 0;\n            }\n            do_nothing();\n            *(undefined2 *)(input_data + 0xc) = 0;\n            do_nothing();\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083c0c",
                "FUN_00083c08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "decompress_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_and_clear_relocation_table_00080f24",
                "puVar1": "rel_table_start",
                "puVar2": "src",
                "iVar3": "i",
                "puVar4": "dst",
                "PTR_Elf32_Rel_ARRAY_00080f80": "rel_table_start",
                "DAT_00080f7c": "src",
                "PTR_DAT_00080f84": "dst",
                "PTR_DAT_00080f88": "rel_table_end",
                "DAT_00080f94": "base_address",
                "PTR_DAT_00080f90": "base_address",
                "(uint *)(DAT_00080f94 + 8)": "base_address + 8",
                "(uint)PTR_DAT_00080f90 & 0x1fffff80": "base_address & 0x1fffff80",
                "(undefined *)0x100000": "0x100000",
                "(*DAT_00080f98)()": "call_function_pointer",
                "puVar1 + iVar3": "rel_table_start + i",
                "*(undefined4 *)(puVar1 + iVar3)": "*(undefined4 *)(rel_table_start + i)",
                "*(undefined4 *)(puVar2 + iVar3)": "*(undefined4 *)(src + i)",
                "*(uint *)(iVar3 + 8)": "*(uint *)(base_address + 8)",
                "puVar4 < DAT_00080f8c": "dst < PTR_DAT_00080f8c"
            },
            "code": "void copy_and_clear_relocation_table_00080f24(void)\n{\n  undefined *PTR_Elf32_Rel_ARRAY_00080f80 = PTR_Elf32_Rel_ARRAY_00080f80;\n  undefined *PTR_DAT_00080f88 = PTR_DAT_00080f88;\n  undefined *DAT_00080f7c = DAT_00080f7c;\n  undefined4 *PTR_DAT_00080f84 = (undefined4 *)PTR_DAT_00080f84;\n  int i;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (i = 0; PTR_Elf32_Rel_ARRAY_00080f80 + i < PTR_DAT_00080f88; i += 4) {\n      *(undefined4 *)(PTR_Elf32_Rel_ARRAY_00080f80 + i) = *(undefined4 *)(DAT_00080f7c + i);\n    }\n  }\n  for (; puVar4 < DAT_00080f8c; PTR_DAT_00080f84++) {\n    *PTR_DAT_00080f84 = 0;\n  }\n  undefined *DAT_00080f94 = PTR_DAT_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\n  if (DAT_00080f94 < (undefined *)0x100000) {\n    *(uint *)(DAT_00080f94 + 8) |= 0x20000000;\n  }\n  (*DAT_00080f98)();\n  while(true);\n}",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_relocation_table_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint ptr_param1, uint param2)\n{\n  uint result = *(uint *)(ptr_param1 + 8) & param2;\n  if (result != 0) {\n    if ((param2 & *(uint *)(ptr_param1 + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_data_000804a8",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "puVar3": "data_ptr_3",
                "puVar4": "data_ptr_4",
                "uVar5": "data_1",
                "iVar6": "data_2"
            },
            "code": "undefined8 initialize_data_000804a8()\n{\n  // set some initial data values\n  handle_data(1, 0);\n  handle_data(6, 1);\n  handle_data(0, 1);\n  handle_data(1, 1);\n  handle_data(0, 0);\n  handle_data(1, 0);\n\n  // set some more data values\n  uint8_t *data_ptr_1 = PTR_DAT_000805a8;\n  uint8_t *data_ptr_2 = PTR_DAT_000805ac;\n  *(uint16_t *)(data_ptr_1 + 0xE) = 0x13;\n  *(uint16_t *)(data_ptr_1 + 0x10) = 10;\n  *(uint8_t **)(data_ptr_1 + 0x14) = data_ptr_2 + 0x26;\n  data_ptr_1[1] = 3;\n  data_ptr_1[0x19] = 3;\n  *(uint16_t *)(data_ptr_1 + 0x1A) = 0x14;\n  *(uint16_t *)(data_ptr_1 + 0x28) = 3;\n  *(uint16_t *)(data_ptr_1 + 4) = 0x10;\n  *(uint8_t **)(data_ptr_1 + 8) = data_ptr_2;\n  data_ptr_1[0xD] = 0x10;\n  *(uint16_t *)(data_ptr_1 + 0x1C) = 0xC;\n  data_ptr_1[0x25] = 0x10;\n  *(uint16_t *)(data_ptr_1 + 0x34) = 8;\n  uint8_t *data_ptr_3 = PTR_DAT_000805b0;\n  *(uint16_t *)(data_ptr_1 + 0x26) = 0x1C;\n  *(uint8_t **)(data_ptr_1 + 0x2C) = data_ptr_2 + 0x38;\n  uint8_t *data_ptr_4 = PTR_DAT_000805b4;\n  data_ptr_1[0x30] = 2;\n  data_ptr_1[0x31] = 2;\n  *(uint8_t **)(data_ptr_1 + 0x38) = data_ptr_3;\n  data_ptr_1[0x3C] = 2;\n  *data_ptr_1 = 1;\n  data_ptr_1[0xC] = 1;\n  data_ptr_1[0x18] = 1;\n  data_ptr_1[0x24] = 1;\n  *(uint16_t *)(data_ptr_1 + 0x3E) = 1;\n  *(uint16_t *)(data_ptr_1 + 0x40) = 1;\n  *(uint16_t *)(data_ptr_1 + 2) = 0;\n  *(uint8_t **)(data_ptr_1 + 0x20) = data_ptr_2 + 0x28;\n  *(uint16_t *)(data_ptr_1 + 0x32) = 0;\n  data_ptr_1[0x3D] = 5;\n  *(uint8_t **)(data_ptr_1 + 0x44) = data_ptr_3 + 2;\n\n  // process some data\n  uint8_t *data_ptr_5 = PTR_DAT_000805b4;\n  process_data(data_ptr_4, 0x4B00);\n  *(uint16_t *)(data_ptr_4 + 0x56) = 2000;\n  uint32_t data_1 = get_data_from_pointer_thunk_00081714();\n  *(uint32_t *)PTR_DAT_000805b8 = data_1;\n  uint32_t data_2 = get_data_from_pointer_thunk_00081714();\n  *(uint32_t *)PTR_DAT_000805bc = data_2 + 1000;\n  uint32_t data_3 = get_data_from_pointer_thunk_00081714();\n  *(uint32_t *)PTR_DAT_000805c0 = data_3 + 1000;\n  uint32_t data_4 = get_data_from_pointer_thunk_00081714();\n  *(uint32_t *)PTR_DAT_000805c4 = data_4 + 1000;\n  uint32_t data_5 = get_data_from_pointer_thunk_00081714();\n  *(uint32_t *)PTR_DAT_000805c8 = data_5 + 1000;\n\n  // check for software interrupt\n  if (*(uint32_t *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3F);\n    return 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_data_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "validate_and_update_data_000802da",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_array",
                "cVar1": "return_value",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "ushort_value",
                "uVar5": "uint_value",
                "puVar6": "ushort_ptr",
                "local_1c": "local_char_value",
                "local_1b": "local_undefined_value",
                "local_1a": "local_ushort_value"
            },
            "code": "int validate_and_update_data_000802da(int data_ptr, ushort data_length, ushort *data_array)\n{\n    char return_value;\n    byte byte_value;\n    undefined undefined_value;\n    ushort ushort_value;\n    uint uint_value;\n    ushort *ushort_ptr;\n    char local_char_value;\n    undefined local_undefined_value;\n    ushort local_ushort_value;\n    uint_value = (uint)data_length;\n    if (*(char *)(data_ptr + 4) != '\\0') {\n        return_value = -2;\n        goto LAB_000803cc;\n    }\n    if (*(char *)(data_ptr + 7) != '\\0') {\n        return_value = -1;\n        goto LAB_000803cc;\n    }\n    if (0xf6 < (byte)(local_char_value - 1U)) {\n        return_value = -3;\n        goto LAB_000803cc;\n    }\n    *(char *)(data_ptr + 9) = local_char_value;\n    *(undefined *)(data_ptr + 10) = local_undefined_value;\n    *(ushort **)(data_ptr + 0x4c) = data_array;\n    *(char *)(data_ptr + 0xb) = (char)((uint)local_ushort_value >> 8);\n    *(char *)(data_ptr + 0xc) = (char)local_ushort_value;\n    return_value = (char)data_length;\n    undefined_value = (undefined)(uint_value >> 8);\n    switch(local_undefined_value) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(undefined *)(data_ptr + 0xd) = undefined_value;\n            break;\n        case 5:\n            ushort_value = *data_array;\n            if (ushort_value != 0) {\n                ushort_value = 1;\n            }\n            *(char *)(data_ptr + 0xd) = -(char)ushort_value;\n            uint_value = 0;\n            break;\n        case 6:\n            *(char *)(data_ptr + 0xd) = (char)((uint)*data_array >> 8);\n            uint_value = (uint)*data_array;\n            break;\n        default:\n            goto switchD_0008031e_caseD_7;\n        case 0xf:\n            byte_value = (byte)(data_length >> 3) & 0xfe;\n            if ((data_length & 0xf) != 0) {\n                byte_value = byte_value + 1;\n            }\n            *(char *)(data_ptr + 0xe) = return_value;\n            *(undefined *)(data_ptr + 0xd) = undefined_value;\n            *(byte *)(data_ptr + 0xf) = byte_value;\n            undefined_value = 7;\n            goto LAB_0008034a;\n        case 0x10:\n            *(undefined *)(data_ptr + 0xd) = undefined_value;\n            *(char *)(data_ptr + 0xe) = return_value;\n            data_array = data_array + -1;\n            *(char *)(data_ptr + 0xf) = return_value * '\\x02';\n            *(undefined *)(data_ptr + 0x49) = 7;\n            ushort_ptr = data_array + uint_value;\n            while (data_array != ushort_ptr) {\n                byte_value = *(byte *)(data_ptr + 0x49);\n                *(char *)(data_ptr + (uint)byte_value + 9) = (char)((uint)data_array[1] >> 8);\n                uint_value = byte_value + 1 & 0xff;\n                *(char *)(data_ptr + 0x49) = (char)uint_value;\n                data_array = data_array + 1;\n                *(char *)(uint_value + data_ptr + 9) = (char)*data_array;\n                *(byte *)(data_ptr + 0x49) = byte_value + 2;\n            }\n            goto switchD_0008031e_caseD_7;\n    }\n    *(char *)(data_ptr + 0xe) = (char)uint_value;\n    undefined_value = 6;\nLAB_0008034a:\n    *(undefined *)(data_ptr + 0x49) = undefined_value;\nswitchD_0008031e_caseD_7:\n    calculate_checksum_and_update_data(data_ptr);\n    *(undefined *)(data_ptr + 7) = 1;\n    return_value = '\\0';\nLAB_000803cc:\n    return (int)return_value;\n}",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "validate_and_update_data_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_threshold_00080f9c",
                "*param_1": "*threshold",
                "param_2": "data_size",
                "param_3": "factor",
                "param_4": "max_threshold",
                "local_58": "local_thresholds",
                "uVar1": "num_blocks",
                "uVar2": "i"
            },
            "code": "uint32_t find_threshold_00080f9c(uint32_t *threshold, uint32_t data_size, int factor, int max_threshold) {\n  uint32_t local_thresholds[16];\n  local_thresholds[0] = *(uint32_t *)PTR_DAT_0008102c;\n  local_thresholds[1] = *(uint32_t *)(PTR_DAT_0008102c + 4);\n  local_thresholds[2] = *(uint32_t *)(PTR_DAT_0008102c + 8);\n  local_thresholds[3] = *(uint32_t *)(PTR_DAT_0008102c + 0xc);\n  local_thresholds[4] = *(uint32_t *)(PTR_DAT_0008102c + 0x10);\n  local_thresholds[5] = *(uint32_t *)(PTR_DAT_0008102c + 0x14);\n  local_thresholds[6] = *(uint32_t *)(PTR_DAT_0008102c + 0x18);\n  local_thresholds[7] = *(uint32_t *)(PTR_DAT_0008102c + 0x1c);\n  local_thresholds[8] = *(uint32_t *)(PTR_DAT_0008102c + 0x20);\n  local_thresholds[9] = *(uint32_t *)(PTR_DAT_0008102c + 0x24);\n  local_thresholds[10] = *(uint32_t *)(PTR_DAT_0008102c + 0x28);\n  local_thresholds[11] = *(uint32_t *)(PTR_DAT_0008102c + 0x2c);\n  local_thresholds[12] = *(uint32_t *)(PTR_DAT_0008102c + 0x30);\n  local_thresholds[13] = *(uint32_t *)(PTR_DAT_0008102c + 0x34);\n  local_thresholds[14] = *(uint32_t *)(PTR_DAT_0008102c + 0x38);\n  local_thresholds[15] = *(uint32_t *)(PTR_DAT_0008102c + 0x3c);\n  *threshold = 1;\n  *(threshold + 1) = 0;\n  *(threshold + 0x48) = 0x202;\n  *(threshold + 0x41) = 0;\n  *(threshold + 0x45) = 0;\n  uint32_t num_blocks = data_size / (uint32_t)(factor * 2);\n  if (data_size == factor * 2 * num_blocks) {\n    num_blocks = num_blocks - 1;\n  }\n  uint32_t i = 0;\n  do {\n    if ((uint32_t)(max_threshold * (int)(((uint64_t)data_size / (uint64_t)((num_blocks + 1) * 2)) / (uint64_t)DAT_00081030)) <= local_thresholds[i]) {\n      *(threshold + 1) = (i & 0xf) << 0x10 | (num_blocks & 0xff) << 8 | *(threshold + 1);\n      return 0;\n    }\n    i = i + 1;\n  } while (i != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "find_threshold_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "handle_data_00081210",
                "param_1": "index",
                "param_2": "type",
                "puVar1": "data_ptr",
                "puVar2": "bit_ptr",
                "iVar3": "result",
                "uVar4": "bit_mask",
                "uVar5": "bit_check",
                "uVar6": "data_bit",
                "bVar7": "data_type",
                "bVar8": "data_bitmask",
                "iVar9": "data_index",
                "iVar10": "data_arg1"
            },
            "code": "int handle_data_00081210(int index, int type, int arg1, int arg2) {\n    int result = 0;\n    uint bit_mask;\n    uint bit_check;\n    uint data_index;\n    uint data_type;\n    uint data_arg1;\n    uint data_arg2;\n    uint data_bitmask;\n    uint data_bitcheck;\n    undefined *data_ptr = PTR_DAT_0008130c;\n    undefined *bit_ptr = PTR_DAT_00081310;\n\n    data_index = index * 0x1c;\n    data_type = *(uint *)(data_ptr + data_index + 0xc);\n\n    if (data_type != 0) {\n        if ((bit_ptr[index] & 0xf) == 4) {\n            result = set_bit_at_position(DAT_00081314, data_ptr[data_index + 0x19]);\n        }\n        uint data_bit = bit_ptr[index] & 0xf;\n        if ((data_bit < 3) && (bit_ptr[index] != 0)) {\n            if (data_bit == 2 && type == 0) {\n                return result;\n            }\n            else if (data_bit == 1 && type == 2) {\n                return result;\n            }\n            else if (data_bit == 3) {\n                if (type == 1) {\n                    return result;\n                }\n                else {\n                    goto LAB_0008126c;\n                }\n            }\n        }\n        if (type == 1) {\n            goto LAB_0008126c;\n        }\n        else if (type == 0) {\n            data_arg1 = *(uint *)(data_ptr + data_index + 8);\n            check_and_set_bit(*(uint *)(data_ptr + data_index + 8));\n            data_arg2 = *(uint *)(data_ptr + data_index + 4);\n            data_bitmask = bit_ptr[index] & 0xf0 | 2;\n        }\n        else if (type == 2) {\n            data_arg1 = *(uint *)(data_ptr + data_index + 8);\n            check_and_set_bit(*(uint *)(data_ptr + data_index + 8));\n            data_arg2 = *(uint *)(data_ptr + data_index + 4);\n            data_bitmask = bit_ptr[index] & 0xf0 | 1;\n        }\n        result = handle_data_00081210(data_arg1, 3, data_arg2, 0);\n        bit_ptr[index] = data_bitmask;\n        return result;\n    }\n    else {\n        return result;\n    }\n\nLAB_0008126c:\n    if (type == 0) {\n        data_arg1 = *(uint *)(data_ptr + data_index + 8);\n        check_and_set_bit(*(uint *)(data_ptr + data_index + 8));\n        result = handle_data_00081210(*(uint *)(data_ptr + data_index), 3, *(uint *)(data_ptr + data_index + 4), 0);\n        data_bitmask = bit_ptr[index] & 0xf0 | 2;\n    }\n    else if (type == 2) {\n        data_arg1 = *(uint *)(data_ptr + data_index + 8);\n        check_and_set_bit(*(uint *)(data_ptr + data_index + 8));\n        result = handle_data_00081210(*(uint *)(data_ptr + data_index), 3, *(uint *)(data_ptr + data_index + 4), 1);\n        data_bitmask = bit_ptr[index] & 0xf0 | 1;\n    }\n    bit_ptr[index] = data_bitmask;\n    return result;\n}",
            "called": [
                "FUN_00080da0",
                "FUN_00080e18",
                "FUN_0008105c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "handle_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_to_buffer_00081454",
                "param_1": "buffer_address",
                "param_2": "value",
                "iVar1": "buffer_info_address",
                "uVar2": "buffer_write_index_plus_one",
                "buffer_start_address": "buffer_start_address",
                "buffer_size": "buffer_size",
                "buffer_write_index": "buffer_write_index",
                "buffer_write_index_address": "buffer_write_index_address",
                "buffer_read_index": "buffer_read_index",
                "buffer_read_index_address": "buffer_read_index_address"
            },
            "code": "int write_to_buffer_00081454(int buffer_address, int value) {\n  int buffer_info_address = *(int *)(buffer_address + 0x18);\n  int buffer_size = *(int *)(buffer_info_address + 0x14);\n  int buffer_start_address = *(int *)(buffer_address + 0x14);\n  int buffer_end_address = buffer_start_address + buffer_size;\n  int buffer_write_index = *(int *)(buffer_info_address + 0x80);\n  int buffer_write_index_address = buffer_start_address + buffer_write_index;\n  int buffer_read_index = *(int *)(buffer_info_address + 0x84);\n  int buffer_read_index_address = buffer_start_address + buffer_read_index;\n  if ((*(int *)(buffer_read_index_address) << 0x1e < 0) && (*(int *)(buffer_start_address + 0x84) == *(int *)(buffer_start_address + 0x80))) {\n    *(int *)(buffer_info_address + 0x1c) = value;\n  }\n  else {\n    uint buffer_write_index_plus_one = 0x7f & buffer_write_index + 1U;\n    if ((int)buffer_write_index_plus_one < 0) {\n      buffer_write_index_plus_one = (buffer_write_index_plus_one - 1 | 0xffffff80) + 1;\n    }\n    while (*(uint *)(buffer_read_index_address) == buffer_write_index_plus_one) {\n    }\n    *(char *)(buffer_write_index_address) = (char)value;\n    *(int *)(buffer_start_address + 0x80) = buffer_write_index_plus_one;\n    *(int *)(buffer_info_address + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_to_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "return_if_error_00084728",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void return_if_error_00084728(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n    undefined *data_pointer;\n    int result;\n    data_pointer = PTR_DAT_0008474c;\n    *(undefined4 *)PTR_DAT_0008474c = 0;\n    result = return_zero_000811c6(input1, input2, input3);\n    if ((result == -1) && (*(int *)data_pointer != 0)) {\n        *output = *(int *)data_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "return_if_error_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "output_buffer",
                "uVar1": "result_value",
                "iVar2": "index",
                "uVar3": "current_index",
                "pbVar4": "output_pointer",
                "uVar5": "index",
                "local_1c": "current_byte",
                "abStack_1b": "previous_byte_array"
            },
            "code": "uint process_data_00083c40(uint data, uint data_length, byte **output_buffer){\n  uint result_value;\n  int index;\n  uint current_byte_value;\n  byte *output_pointer;\n  uint current_index;\n  byte current_byte;\n  byte previous_byte_array[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12)) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  result_value = get_dat_value_00084298();\n  if ((result_value == 1) && (data_length - 1 < 0xff)) {\n    current_index = data_length & 0xff;\n    current_byte = (byte)current_index;\n  }\n  else {\n    result_value = process_data_00083c40_0008456c(data, &current_byte, data_length, output_buffer + 0x17);\n    if (result_value == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result_value == 0) {\n      return data_length;\n    }\n    current_index = (uint)current_byte;\n  }\n  index = 0;\n  do {\n    output_pointer = output_buffer[2] + -1;\n    output_buffer[2] = output_pointer;\n    if ((int)output_pointer < 0) {\n      if ((int)output_buffer[6] <= (int)output_pointer) {\n        **output_buffer = (byte)current_index;\n        output_pointer = *output_buffer;\n        current_index = (uint)*output_pointer;\n        if (current_index != 10) goto LAB_00083c90;\n      }\n      index = process_data_00083c40_000844c4(data, current_index, output_buffer);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)current_index;\n      output_pointer = *output_buffer;\nLAB_00083c90:\n      *output_buffer = output_pointer + 1;\n    }\n    if (result_value <= index + 1) {\n      return data_length;\n    }\n    current_index = (uint)previous_byte_array[index];\n    index = index + 1;\n  } while(true);\n}",
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  int iVar16;\n  int *piVar17;\n  undefined4 uVar18;\n  int iVar19;\n  \n  puVar7 = PTR_DAT_0008089c;\n  puVar9 = PTR_DAT_00080898;\n  puVar8 = PTR_DAT_00080894;\n  puVar3 = PTR_DAT_0008087c;\n  puVar5 = PTR_DAT_00080878;\n  puVar4 = PTR_DAT_00080874;\n  puVar2 = PTR_DAT_00080834;\n  puVar1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  iVar16 = *(int *)PTR_DAT_00080894;\n  iVar15 = iVar16 - *(int *)PTR_DAT_00080874;\n  if (iVar15 < 0) {\n    iVar15 = iVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = iVar15;\n  puVar6 = PTR_DAT_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar15 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_DAT_00080880 = iVar15;\n  if (iVar15 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar15 + 0x3c;\n  }\n  iVar15 = *(int *)puVar3;\n  iVar19 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar15;\n  *(short *)(puVar1 + 0x38) = (short)iVar19;\n  if ((iVar15 == 0) && (iVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_DAT_00080888;\n  puVar3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == iVar16) {\n    iVar15 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = iVar15;\n    if (iVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar16;\n    puVar3 = PTR_DAT_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_DAT_0008088c;\n  puVar3 = PTR_DAT_00080860;\n  iVar15 = *(int *)puVar7;\n  if (iVar15 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *piVar17 = iVar15;\n  }\n  else {\n    if (iVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      uVar11 = get_data_from_pointer_thunk_00081714();\n      puVar7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        iVar15 = get_data_from_pointer_thunk_00081714();\n        *(int *)puVar7 = iVar15 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)puVar3 + 1;\n    piVar17 = (int *)PTR_DAT_00080a20;\n    puVar3 = PTR_DAT_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar11 = get_data_from_pointer_thunk_00081714();\n      puVar3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < uVar11) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        iVar15 = get_data_from_pointer_thunk_00081714();\n        *(int *)puVar3 = iVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar11 = get_data_from_pointer_thunk_00081714();\n      puVar8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < uVar11) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        iVar15 = get_data_from_pointer_thunk_00081714();\n        *(int *)puVar8 = iVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar11 = get_data_from_pointer_thunk_00081714();\n  puVar8 = PTR_DAT_00080a60;\n  puVar3 = PTR_DAT_00080a5c;\n  puVar5 = PTR_DAT_00080a58;\n  puVar4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < uVar11) {\n    uVar12 = reverse_bits_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    uVar12 = FUNC_00081730(uVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = uVar12;\n    puVar9 = PTR_DAT_00080a34;\n    uVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    uVar13 = FUNC_00081734(uVar12,uVar18);\n    uVar13 = FUNC_00081944(uVar13,*(undefined4 *)puVar8);\n    puVar7 = PTR_DAT_00080a64;\n    uVar13 = FUNC_00081734(uVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)puVar8 = uVar13;\n    uVar18 = FUNC_00081730(uVar12,uVar18);\n    uVar18 = FUNC_00081944(uVar18,*(undefined4 *)PTR_DAT_00080a38);\n    puVar8 = PTR_DAT_00080a3c;\n    uVar18 = FUNC_00081730(uVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = uVar18;\n    uVar14 = FUNC_00081944(uVar12,*(undefined4 *)PTR_DAT_00080a40);\n    uVar14 = FUNC_00081734(uVar14,uVar13);\n    FUNC_00081734(uVar14,uVar18);\n    uVar14 = convert_param_to_int32_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = uVar14;\n    uVar14 = reverse_bits_0008189c();\n    *(undefined4 *)puVar9 = uVar12;\n    *(undefined4 *)puVar4 = uVar14;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar13;\n    *(undefined4 *)puVar8 = uVar18;\n    iVar15 = get_data_from_pointer_thunk_00081714();\n    *(int *)puVar5 = iVar15 + *(int *)puVar2;\n  }\n  uVar12 = reverse_bits_0008189c(*(undefined4 *)puVar2);\n  iVar15 = reverse_endianess_and_concatenate_params_00081ca8(*(undefined4 *)puVar4,uVar12);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = uVar12;\n  }\n  iVar15 = check_if_carry_or_zero_00081c94(*(undefined4 *)puVar4,0);\n  if (iVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  uVar10 = check_number_00081d1c(*(undefined4 *)puVar4);\n  iVar15 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_000802da",
                "FUN_00081730",
                "FUN_00081894",
                "FUN_00081ca8",
                "FUN_00081d1c",
                "FUN_00081734",
                "FUN_00081c94",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_0008189c",
                "FUN_0008043e",
                "FUN_00081cd0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input",
                "*PTR_": "*ptr_",
                "DAT_": "difference",
                "+ 0x10": "plus_offset_0x10",
                "+ 0x80": "plus_offset_0x80",
                "+ 0x84": "plus_offset_0x84"
            },
            "code": "int calculate_difference_000813e4(int input)\n{\n    int *PTR_1 = (int *)(*(int *)(input + 0x10) + 0x80);\n    int *PTR_2 = (int *)(*(int *)(input + 0x10) + 0x84);\n    int DAT_ = *PTR_1 - *PTR_2;\n    return DAT_ & 0x7f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_data_00084290",
                "DAT_00084294": "data"
            },
            "code": "int get_data_00084290() {\n    return DAT_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_data_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "initialize_memory_000846b4",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "size",
                "param_4": "flags",
                "puVar1": "memory_pointer",
                "iVar2": "set_memory_flags_result"
            },
            "code": "void initialize_memory_000846b4(int *result, int start_address, int size, int flags)\n{\n  undefined *memory_pointer;\n  int set_memory_flags_result;\n  memory_pointer = PTR_DAT_000846d8;\n  *(int *)PTR_DAT_000846d8 = 0;\n  set_memory_flags_result = set_memory_flags_000811b4(start_address, size, size, 0, flags);\n  if ((set_memory_flags_result == -1) && (*(int *)memory_pointer != 0)) {\n    *result = *(int *)memory_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "initialize_memory_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer_address",
                "fill_buffer_with_value_00082504": "fill_buffer_with_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int initialize_buffer_000813a8(int buffer_address)\n{\n    int buffer_size = 0x80;\n    int fill_value = 0;\n    fill_buffer_with_value(buffer_address, fill_value, buffer_size);\n    *(int *)(buffer_address + buffer_size) = 0;\n    *(int *)(buffer_address + buffer_size + 4) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "allocate_memory_block_00083d9c",
                "param_1": "heap_start",
                "param_2": "block_size",
                "iVar1": "index",
                "iVar3": "heap_index",
                "iVar5": "prev_block",
                "iVar6": "prev_block_prev",
                "iVar8": "heap_end",
                "uVar2": "block_flags",
                "uVar4": "prev_block_size_aligned",
                "uVar7": "next_block_size",
                "do_nothing_00082598": "do_nothing",
                "DAT_00083f24": "heap_end",
                "PTR_DAT_00083f30": "unknown_pointer",
                "DAT_00083f28": "heap_start",
                "DAT_00083f2c": "heap_top",
                "allocate_memory_block_00083d00": "unknown_function",
                "do_nothing_0008259c": "do_nothing"
            },
            "code": "void allocate_memory_block_00083d9c(void* DAT_00083f28, int block_size) {\n  if (block_size == 0) {\n    return;\n  }\n  do_nothing();\n  int DAT_00083f24 = DAT_00083f24;\n  uint block_flags = *(uint*)(block_size - 4);\n  int prev_block = block_size - 8;\n  uint block_size_aligned = block_flags & 0xfffffffe;\n  int block_end = prev_block + block_size_aligned;\n  uint next_block_size = *(uint*)(block_end + 4) & 0xfffffffc;\n  if (*(int*)(DAT_00083f24 + 8) == block_end) {\n    next_block_size += block_size_aligned;\n    if (-1 < (int)(block_flags << 0x1f)) {\n      prev_block -= *(int*)(block_size - 8);\n      int prev_block_prev = *(int*)(prev_block + 0xc);\n      int prev_block_next = *(int*)(prev_block + 8);\n      next_block_size += *(int*)(block_size - 8);\n      *(int*)(prev_block_next + 0xc) = prev_block_prev;\n      *(int*)(prev_block_prev + 8) = prev_block_next;\n    }\n    uint DAT_00083f2c_size = *DAT_00083f2c;\n    *(uint*)(prev_block + 4) = next_block_size | 1;\n    *(int*)(DAT_00083f24 + 8) = prev_block;\n    if (DAT_00083f2c_size <= next_block_size) {\n      allocate_memory_block_00083d9c_00083d00(DAT_00083f28, *(undefined4*)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    block_flags = block_flags & 1;\n    *(uint*)(block_end + 4) = next_block_size;\n    if (block_flags == 0) {\n      prev_block -= *(int*)(block_size - 8);\n      int prev_block_next = *(int*)(prev_block + 8);\n      uint prev_block_size_aligned = block_size_aligned + *(int*)(block_size - 8);\n      if (prev_block_next == DAT_00083f24 + 8) {\n        block_flags = 1;\n      }\n      else {\n        int prev_block_prev = *(int*)(prev_block + 0xc);\n        *(int*)(prev_block_next + 0xc) = prev_block_prev;\n        *(int*)(prev_block_prev + 8) = prev_block_next;\n      }\n    }\n    else {\n      block_flags = 0;\n    }\n    if (-1 < *(int*)(block_end + next_block_size + 4) << 0x1f) {\n      uint prev_block_size_aligned = block_size_aligned + next_block_size;\n      int prev_block_next = *(int*)(block_end + 8);\n      if ((block_flags == 0) && (prev_block_next == DAT_00083f28)) {\n        *(int*)(DAT_00083f24 + 0x14) = prev_block;\n        *(int*)(DAT_00083f24 + 0x10) = prev_block;\n        *(int*)(prev_block + 0xc) = prev_block_next;\n        *(int*)(prev_block + 8) = prev_block_next;\n        *(uint*)(prev_block + 4) = prev_block_size_aligned | 1;\n        *(uint*)(prev_block + prev_block_size_aligned) = prev_block_size_aligned;\n        goto LAB_00083e30;\n      }\n      int next_block_prev = *(int*)(block_end + 0xc);\n      *(int*)(prev_block_next + 0xc) = next_block_prev;\n      *(int*)(next_block_prev + 8) = prev_block_next;\n    }\n    *(uint*)(prev_block + 4) = block_size_aligned | 1;\n    *(uint*)(prev_block + block_size_aligned) = block_size_aligned;\n    if (block_flags == 0) {\n      if (block_size_aligned < 0x200) {\n        uint DAT_00083f2c_flags = *(uint*)(DAT_00083f24 + 4);\n        int DAT_00083f2c_block = DAT_00083f24 + (block_size_aligned & 0xfffffff8);\n        int DAT_00083f2c_next = *(int*)(DAT_00083f2c_block + 8);\n        *(int*)(prev_block + 8) = DAT_00083f2c_next;\n        *(int*)(prev_block + 0xc) = DAT_00083f2c_block;\n        *(uint*)(DAT_00083f24 + 4) = DAT_00083f2c_flags | 1 << ((int)(block_size_aligned >> 3) >> 2 & 0xffU);\n        *(int*)(DAT_00083f2c_block + 8) = prev_block;\n        *(int*)(DAT_00083f2c_next + 0xc) = prev_block;\n        do_nothing_0008259c(DAT_00083f28);\n        return;\n      }\n      uint block_size_log = block_size_aligned >> 9;\n      if (block_size_log < 5) {\n        int index = (block_size_aligned >> 6) + 0x38;\n        int heap_index = index * 2;\n      }\n      else if (block_size_log < 0x15) {\n        int index = block_size_log + 0x5b;\n        int heap_index = index * 2;\n      }\n      else if (block_size_log < 0x55) {\n        int index = (block_size_aligned >> 0xc) + 0x6e;\n        int heap_index = index * 2;\n      }\n      else if (block_size_log < 0x155) {\n        int index = (block_size_aligned >> 0xf) + 0x77;\n        int heap_index = index * 2;\n      }\n      else if (block_size_log < 0x555) {\n        int index = (block_size_aligned >> 0x12) + 0x7c;\n        int heap_index = index * 2;\n      }\n      else {\n        int heap_index = 0xfc;\n        int index = 0x7e;\n      }\n      int heap_index_block = DAT_00083f24 + index * 4;\n      int heap_index_next = *(int*)(heap_index_block + 8);\n      if (heap_index_next == heap_index_block) {\n        *(uint*)(DAT_00083f24 + 4) = *(uint*)(DAT_00083f24 + 4) | 1 << (index >> 2 & 0xffU);\n        heap_index_next = heap_index_block;\n      }\n      else {\n        do {\n          if ((*(uint*)(heap_index_next + 4) & 0xfffffffc) <= block_size_aligned) break;\n          heap_index_next = *(int*)(heap_index_next + 8);\n        } while (heap_index_block != heap_index_next);\n        heap_index_block = *(int*)(heap_index_next + 0xc);\n      }\n      *(int*)(prev_block + 0xc) = heap_index_block;\n      *(int*)(prev_block + 8) = heap_index_next;\n      *(int*)(heap_index_block + 8) = prev_block;\n      *(int*)(heap_index_next + 0xc) = prev_block;\n    }\n  }\nLAB_00083e30:\n  do_nothing(DAT_00083f28);\n  return;\n}",
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_000825b0",
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_00081e14",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "bVar1": "isNegative1",
                "bVar5": "isZero"
            },
            "code": "uint calculate_00081bf4(uint input1, uint input2)\n{\n  bool isNegative1;\n  uint result1;\n  uint result2;\n  uint result3;\n  bool isZero;\n  \n  result1 = input1 * 2;\n  result2 = input2 * 2;\n  if (((int)result1 >> 0x18 == -1 || (int)result2 >> 0x18 == -1) && ((((int)result1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)result2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  result3 = result1 | input2 & 0x7fffffff;\n  isZero = result3 == 0;\n  if (!isZero) {\n    result3 = input1 ^ input2;\n    isZero = result3 == 0;\n  }\n  isNegative1 = -1 < (int)result3;\n  if (isNegative1) {\n    input1 = result1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative1 && result2 <= result1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative1 || result2 > result1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "process_data_00081d7c",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "i",
                "ppcVar4": "ptr",
                "iVar5": "num_ptrs",
                "PTR_DAT_00081dbc": "PTR_DATA_END",
                "PTR_DAT_00081dc0": "PTR_DATA_START",
                "PTR_DAT_00081dc8": "PTR_LAB_START",
                "PTR_LAB_00081dc4": "PTR_LAB_END"
            },
            "code": "void process_data_00081d7c(void)\n{\n  int num_ptrs = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (num_ptrs != 0) {\n    code **ptr = (code **)(PTR_DAT_00081dc0 - 4);\n    int i = 0;\n    while (i != num_ptrs) {\n      i++;\n      ptr++;\n      (**ptr)();\n    }\n  }\n  undefined *ptr1 = PTR_DAT_00081dc8;\n  undefined *ptr2 = PTR_DAT_00081dc0;\n  do_nothing();\n  int num_ptrs2 = (int)ptr1 - (int)ptr2 >> 2;\n  if (num_ptrs2 != 0) {\n    code **ptr = (code **)(ptr2 - 4);\n    int i = 0;\n    while (i != num_ptrs2) {\n      i++;\n      ptr++;\n      (**ptr)();\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "process_data_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_32bit_00081c5c",
                "param_1": "first_half",
                "param_2": "second_half",
                "CONCAT44": "concatenate_64bit",
                "calculate_00081bf4": "calculate"
            },
            "code": "uint64_t concatenate_32bit_00081c5c(uint32_t param_1, uint32_t param_2) {\n  calculate();\n  return ((uint64_t)param_2 << 32) | param_1;\n}",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "imported": false,
            "current_name": "concatenate_32bit_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_call_if_zero_00081388",
                "DAT_000813a0": "count_ptr",
                "DAT_000813a4": "callback_ptr",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081388(void)\n{\n  int count = *DAT_000813a0;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000813a4)();\n  }\n  *DAT_000813a0 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_and_reverse_00082994",
                "param_1": "source",
                "param_2": "destination",
                "cVar1": "current_char",
                "uVar2": "current_ushort",
                "puVar3": "next_source",
                "puVar4": "current_source_2",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "current_destination",
                "bVar8": "is_null"
            },
            "code": "void copy_and_reverse_00082994(uint *source, uint *destination)\n{\n  char current_char;\n  ushort current_ushort;\n  uint *current_source = source;\n  uint *current_destination = destination;\n  uint current_uint;\n  bool is_null;\n  \n  if ((((uint)source ^ (uint)destination) & 3) != 0) {\n    do {\n      current_char = *(char *)current_source;\n      *(char *)current_destination = current_char;\n      current_source = (uint *)((int)current_source + 1);\n      current_destination = (uint *)((int)current_destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)destination & 3) != 0) {\n    uint *current_source_2 = source;\n    if (((uint)destination & 1) != 0) {\n      current_source_2 = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      current_destination = (uint *)((int)current_destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = current_source_2;\n    if (((uint)current_source_2 & 2) != 0) {\n      source = (uint *)((int)current_source_2 + 2);\n      current_ushort = *(ushort *)current_source_2;\n      is_null = (current_ushort & 0xff) == 0;\n      if (is_null) {\n        *(char *)current_destination = (char)current_ushort;\n      }\n      else {\n        *(ushort *)current_destination = current_ushort;\n        is_null = (current_ushort & 0xff00) == 0;\n        current_destination = (uint *)((int)current_destination + 2);\n      }\n      if (is_null) {\n        return;\n      }\n    }\n  }\n  current_uint = *source;\n  uint *current_source_3 = source + 1;\n  uint *current_destination_2 = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    current_destination_2 = destination + 1;\n    *destination = current_uint;\n    current_source_3 = source + 2;\n    current_uint = source[1];\n  }\n  while( true ) {\n    uint *next_source = current_source_3 + 1;\n    uint next_uint = *current_source_3;\n    current_destination = current_destination_2;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    current_destination = current_destination_2 + 1;\n    *current_destination_2 = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    current_source_3 = current_source_3 + 2;\n    current_uint = *next_source;\n    current_destination_2 = current_destination + 1;\n    *current_destination = next_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)current_destination = (char)current_uint;\n    uint last_char = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    current_destination = (uint *)((int)current_destination + 1);\n  } while (last_char != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_and_reverse_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_and_write_buffers_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "buffer1_ptr",
                "puVar2": "buffer2_ptr",
                "puVar3": "buffer3_ptr",
                "puVar4": "buffer4_ptr",
                "puVar5": "buffer5_ptr",
                "puVar6": "buffer6_ptr"
            },
            "code": "void initialize_and_write_buffers_00080c0c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n    undefined *buffer1_ptr = PTR_DAT_00080ca0;\n    undefined *buffer2_ptr = PTR_DAT_00080ca4;\n    undefined *buffer3_ptr = PTR_DAT_00080cac;\n    undefined *buffer4_ptr = PTR_DAT_00080cb0;\n    undefined *buffer5_ptr = PTR_DAT_00080cb4;\n    undefined *buffer6_ptr = PTR_DAT_00080cb8;\n    undefined *buffer7_ptr = PTR_DAT_00080cbc;\n    undefined *buffer8_ptr = PTR_DAT_00080cd8;\n    undefined *buffer9_ptr = PTR_DAT_00080cdc;\n    initialize_buffer_000813a8(buffer1_ptr);\n    initialize_buffer_000813a8(buffer2_ptr);\n    initialize_buffer_000813a8(buffer3_ptr);\n    initialize_parameters_000814e4(buffer4_ptr, DAT_00080ca8, 8, 8, buffer1_ptr, buffer2_ptr, param_3);\n    initialize_buffer_000813a8(buffer5_ptr);\n    initialize_buffer_000813a8(buffer6_ptr);\n    initialize_buffer_000813a8(buffer7_ptr);\n    initialize_buffer_000813a8(buffer8_ptr);\n    initialize_buffer_000813a8(buffer9_ptr);\n    write_to_buffer_with_param_000815d4(PTR_DAT_00080cc4, DAT_00080cc0, 0x11, 0x11, buffer8_ptr, buffer9_ptr);\n    write_to_buffer_with_param_000815d4(PTR_DAT_00080ccc, DAT_00080cc8, 0x12, 0x12, buffer3_ptr, buffer6_ptr);\n    write_to_buffer_with_param_000815d4(PTR_DAT_00080cd4, DAT_00080cd0, 0x14, 0x14, buffer5_ptr, buffer7_ptr);\n}",
            "called": [
                "FUN_000814e4",
                "FUN_000815d4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_write_buffers_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_data_00080d2e",
                "param_1": "data_address",
                "param_2": "operation_type",
                "param_3": "data_value",
                "uVar1": "new_data_value"
            },
            "code": "void set_data_00080d2e(int data_address, uint32_t operation_type, uint32_t data_value) {\n    uint32_t new_data_value;\n    if (operation_type == 1) {\n        new_data_value = *(uint32_t *)(data_address + 0x70) & *(uint32_t *)(data_address + 0x70) & ~data_value;\n    } else if (operation_type == 2) {\n        new_data_value = *(uint32_t *)(data_address + 0x70) | data_value;\n    } else {\n        *(uint32_t *)(data_address + 4) = data_value;\n        return;\n    }\n    *(uint32_t *)(data_address + 0x70) = new_data_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "set_data_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "device_id",
                "param_2": "input_data",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "data",
                "uVar2": "data_uint",
                "puVar3": "buffer_ptr",
                "iVar4": "buffer_start"
            },
            "code": "uint process_data_000844c4(int device_id, uint input_data, undefined4 *buffer, undefined4 buffer_size) {\n  ushort data;\n  uint data_uint;\n  undefined *buffer_ptr;\n  int buffer_start;\n  if ((device_id != 0) && (*(int *)(device_id + 0x38) == 0)) {\n    initialize_buffers();\n  }\n  data = *(ushort *)(buffer + 3);\n  data_uint = (uint)data;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(data_uint << 0x1c)) || (buffer_start = buffer[4], buffer_start == 0)) {\n    buffer_start = process_data_000844c4_helper(device_id, buffer, data, data_uint, buffer_size);\n    if (buffer_start != 0) {\n      return 0xffffffff;\n    }\n    data = *(ushort *)(buffer + 3);\n    buffer_start = buffer[4];\n    data_uint = (uint)data;\n  }\n  input_data = input_data & 0xff;\n  if ((int)(data_uint << 0x12) < 0) {\n    buffer_ptr = (undefined *)*buffer;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)buffer[5]) {\nLAB_000844f6:\n      buffer_start = buffer_start + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = data | 0x2000;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)buffer[5]) goto LAB_000844f6;\n  }\n  buffer_start = decompress_data(device_id, buffer);\n  if (buffer_start != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*buffer;\n  buffer_start = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)input_data;\n  if (((buffer[5] == buffer_start) || (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (input_data == 10)))) && (buffer_start = decompress_data(device_id, buffer), buffer_start != 0)) {\n    return 0xffffffff;\n  }\n  return input_data;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00083b14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "reverse_bits_0008189c",
                "param_1": "num",
                "iVar1": "leading_zeroes",
                "uVar2": "reversed_num",
                "uVar3": "sign_bit",
                "iVar4": "shift_amount",
                "uVar5": "mask"
            },
            "code": "uint reverse_bits_0008189c(uint num)\n{\n  int leading_zeroes;\n  uint reversed_num;\n  uint sign_bit;\n  int shift_amount;\n  uint mask;\n  \n  sign_bit = num & 0x80000000;\n  if ((int)sign_bit < 0) {\n    num = -num;\n  }\n  if (num == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(num);\n  shift_amount = leading_zeroes - 8;\n  mask = 0 << (shift_amount & 0xff);\n  reversed_num = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes > 7) {\n    reversed_num += (num << (shift_amount & 0xff)) + (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      reversed_num &= 0xfffffffe;\n    }\n    return reversed_num;\n  }\n  mask = num << (leading_zeroes + 0x18U & 0xff);\n  reversed_num += ((num >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)mask >> 0x1f));\n  if ((mask & 0x7fffffff) == 0) {\n    reversed_num &= ~(mask >> 0x1f);\n  }\n  return reversed_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "reverse_bits_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copyMemoryWithAlignmentCheck_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dst",
                "puVar2": "src",
                "puVar3": "remainingLength",
                "uVar4": "i",
                "uVar5": "isLengthGreaterThan63",
                "bVar6": "isLengthGreaterThan15"
            },
            "code": "undefined4 *copyMemoryWithAlignmentCheck_0008234c(undefined4 *destination, undefined4 *source, uint length)\n{\n  undefined4 *dst = destination;\n  undefined4 *src = source;\n  uint remainingLength;\n  uint i;\n  bool isLengthGreaterThan63;\n  bool isLengthGreaterThan15;\n  bool isDstUnaligned = ((uint)destination & 3) != 0;\n  bool isSrcUnaligned = ((uint)source & 3) != 0;\n  if (isDstUnaligned || isSrcUnaligned) {\n    if (length < 8) {\n      remainingLength = length - 4;\n      if (remainingLength > 3) {\n        do {\n          *dst = *src;\n          dst = (undefined4 *)((int)dst + 1);\n          src = (undefined4 *)((int)src + 1);\n          remainingLength--;\n        } while (remainingLength > 3);\n        *(undefined *)(undefined4 *)((int)dst + 1) =\n             *(undefined *)(undefined4 *)((int)src + 1);\n        *(undefined *)((int)dst + 2) = *(undefined *)((int)src + 2);\n        *(undefined *)((int)dst + 3) = *(undefined *)((int)src + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if (isDstUnaligned && isSrcUnaligned) {\n      remainingLength = 4 - ((uint)destination & 3);\n      length -= remainingLength;\n      src = (undefined4 *)((int)src + (remainingLength & 2));\n      dst = (undefined4 *)((int)dst + (remainingLength & 2));\n      if ((remainingLength & 1) != 0) {\n        *(undefined *)destination = *(undefined *)source;\n        src = (undefined4 *)((int)source + 1);\n        dst = (undefined4 *)((int)destination + 1);\n      }\n    }\n    else if (isDstUnaligned) {\n      remainingLength = 4 - ((uint)destination & 3);\n      length -= remainingLength;\n      dst = (undefined4 *)((int)dst + (remainingLength & 2));\n      if ((remainingLength & 1) != 0) {\n        *(undefined *)destination = *(undefined *)source;\n        src = (undefined4 *)((int)source + 1);\n        dst = (undefined4 *)((int)destination + 1);\n      }\n    }\n    else {\n      remainingLength = 4 - ((uint)source & 3);\n      length -= remainingLength;\n      src = (undefined4 *)((int)src + (remainingLength & 2));\n      if ((remainingLength & 1) != 0) {\n        *(undefined *)dst = *(undefined *)src;\n        src = (undefined4 *)((int)src + 1);\n        dst = (undefined4 *)((int)dst + 1);\n      }\n    }\n  }\n  isLengthGreaterThan63 = length > 63;\n  while (isLengthGreaterThan63) {\n    for (i = 0; i < 16; i++) {\n      dst[i] = src[i];\n    }\n    dst += 16;\n    src += 16;\n    length -= 64;\n    isLengthGreaterThan63 = length > 63;\n  }\n  isLengthGreaterThan15 = length > 15;\n  if (isLengthGreaterThan15) {\n    for (i = 0; i < 4; i++) {\n      dst[i] = src[i];\n    }\n    dst += 4;\n    src += 4;\n    length -= 16;\n  }\n  remainingLength = length + 12;\n  if (remainingLength != 0) {\n    for (i = 0; i < remainingLength; i += 4) {\n      *dst = *src;\n      dst++;\n      src++;\n    }\n    if ((remainingLength & 2) != 0) {\n      *(undefined2 *)dst = *(undefined2 *)src;\n    }\n    if ((remainingLength & 1) != 0) {\n      *(undefined *)dst = *(undefined *)src;\n    }\n  }\n  return destination;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "copyMemoryWithAlignmentCheck_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_and_add_to_buffer_00080a68",
                "puVar1": "buffer_pointer",
                "PTR_DAT_00080a94": "buffer_start",
                "PTR_s__00080a98": "array_start",
                "initialize_array_with_zeros_00081682": "initialize_array_with_zeros",
                "add_to_buffer_00081d5c": "add_to_buffer",
                "DAT_00080aa0": "data_start",
                "DAT_00080a9c": "data_size",
                "PTR_DAT_00080aa4": "buffer_end"
            },
            "code": "void initialize_and_add_to_buffer_00080a68(void)\n{\n  undefined *PTR_DAT_00080a94 = PTR_DAT_00080a94;\n  initialize_array_with_zeros_00081682(PTR_DAT_00080a94, PTR_s__00080a98);\n  add_to_buffer_00081d5c(PTR_DAT_00080a94, DAT_00080aa0, DAT_00080a9c);\n  undefined *PTR_DAT_00080aa4 = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  PTR_DAT_00080aa4[5] = 0;\n  PTR_DAT_00080aa4[6] = 6;\n  *(undefined2 *)(PTR_DAT_00080aa4 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_add_to_buffer_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "process_data_and_check_if_valid_0008165c",
                "param_1": "data_array",
                "param_2": "data_length",
                "param_3": "data_check",
                "iVar1": "is_valid"
            },
            "code": "undefined4 *process_data_and_check_if_valid_0008165c(undefined4 *data_array, undefined4 data_length, undefined4 data_check) {\n  int is_valid = process_data_and_check_0008163a(data_array, data_check);\n  if (is_valid == 0) {\n    clear_memory_if_not_null_0008160c(data_array);\n  }\n  else {\n    data_array[2] = data_check;\n    copy_and_reverse_00082994(*data_array, data_length);\n  }\n  return data_array;\n}",
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "process_data_and_check_if_valid_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_params_000815f8",
                "param_1": "input_param",
                "param_2": "input_byte",
                "result": "combined_params"
            },
            "code": "uint16_t combine_params_000815f8(int param_1, uint8_t param_2) {\n  uint16_t result = (param_1 << 8) | param_2;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_params_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_size",
                "puVar1": "current_ptr",
                "uVar2": "current_value",
                "pcVar3": "char_ptr_start",
                "pcVar4": "char_ptr_end",
                "bVar5": "found_target_char"
            },
            "code": "uint * find_char_in_buffer_00084384(uint *buffer, char target_char, uint *buffer_size)\n{\n  uint *current_ptr;\n  uint current_value;\n  char *char_ptr_start;\n  char *char_ptr_end;\n  bool found_target_char;\n  \n  if (((uint)buffer & 3) == 0) {\n    goto LAB_FIND_CHAR_IN_BUFFER_1;\n  }\n  else if (buffer_size == (uint *)0x0) {\n    goto LAB_FIND_CHAR_IN_BUFFER_3;\n  }\n  else if (*(char *)buffer != target_char) {\n    current_ptr = (uint *)((int)buffer + 1);\n    buffer_size = (uint *)((int)buffer_size + -1);\n    do {\n      buffer = current_ptr;\n      if (((uint)buffer & 3) == 0) goto LAB_FIND_CHAR_IN_BUFFER_1;\n      if (buffer_size == (uint *)0x0) goto LAB_FIND_CHAR_IN_BUFFER_3;\n      current_ptr = (uint *)((int)buffer + 1);\n      buffer_size = (uint *)((int)buffer_size + -1);\n    } while (*(char *)buffer != target_char);\n  }\n  return buffer;\n\nLAB_FIND_CHAR_IN_BUFFER_1:\n  current_ptr = buffer;\n  if ((uint *)0x3 < buffer_size) {\n    do {\n      current_value = *buffer ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n      current_ptr = buffer;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) break;\n      buffer_size = buffer_size + -1;\n      current_ptr = buffer + 1;\n      buffer = buffer + 1;\n    } while ((uint *)0x3 < buffer_size);\n  }\n  buffer = buffer_size;\n  char_ptr_end = (char *)((int)buffer - 1);\n  if ((buffer != (uint *)0x0) && (buffer = current_ptr, *(char *)current_ptr != target_char)) {\n    char_ptr_start = (char *)0x0;\n    do {\n      current_ptr = (uint *)((int)current_ptr + 1);\n      found_target_char = char_ptr_start == char_ptr_end;\n      char_ptr_start = char_ptr_start + 1;\n      if (found_target_char) goto LAB_FIND_CHAR_IN_BUFFER_2;\n    } while (*(char *)current_ptr != target_char);\n  }\n  \nLAB_FIND_CHAR_IN_BUFFER_2:\n  return current_ptr;\n\nLAB_FIND_CHAR_IN_BUFFER_3:\n  return (uint *)0x0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_flag_00081034",
                "param_1": "flag_ptr",
                "param_2": "flag_value",
                "param_3": "mask",
                "PTR_": "",
                "DAT_": "",
                "*(uint *)(param_1 + 4)": "*flag_ptr",
                "param_2 | *(uint *)(param_1 + 4)": "masked_flag_value",
                "(param_3 & 1) << 7": "(mask & 1) << 7",
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": "new_flag_value",
                "return;": ""
            },
            "code": "void update_flag_00081034(uint32_t* flag_ptr, uint32_t flag_value, uint32_t mask) {\n    uint32_t current_flag_value = *flag_ptr;\n    uint32_t masked_flag_value = flag_value & mask;\n    uint32_t new_flag_value = current_flag_value | masked_flag_value | ((mask & 1) << 7);\n    *flag_ptr = new_flag_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_flag_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "add_data_to_buffer_00083974",
                "param_1": "data",
                "puVar1": "data_ptr",
                "puVar2": "buffer_ptr",
                "iVar3": "buffer_size",
                "iVar4": "buffer_start"
            },
            "code": "undefined4 add_data_to_buffer_00083974(undefined4 data)\n{\n  undefined *data_ptr;\n  undefined4 *buffer_ptr;\n  int buffer_size;\n  int buffer_start;\n  \n  data_ptr = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return data;\n  }\n  buffer_start = *(int *)PTR_DAT_0008396c;\n  buffer_ptr = *(undefined4 **)(buffer_start + 0x148);\n  if (buffer_ptr == (undefined4 *)0x0) {\n    buffer_ptr = (undefined4 *)(buffer_start + 0x14c);\n    *(undefined4 **)(buffer_start + 0x148) = buffer_ptr;\n  }\n  buffer_size = buffer_ptr[1];\n  if (0x1f < buffer_size) {\n    if ((DAT_00083970 == 0) ||\n       (buffer_ptr = (undefined4 *)process_data_00081df4(400), buffer_ptr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_ptr = *(undefined4 *)(buffer_start + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_size = 0;\n    *(undefined4 **)(buffer_start + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  buffer_ptr[1] = buffer_size + 1;\n  buffer_ptr[buffer_size + 2] = data_ptr;\n  return 0;\n}",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "add_data_to_buffer_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "process_and_return_result_00084700",
                "param_1": "result",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "data_ptr",
                "iVar2": "zero_result"
            },
            "code": "void process_and_return_result_00084700(int *result, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *data_ptr;\n  int zero_result;\n\n  data_ptr = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  zero_result = return_zero_000811c2(arg2, arg3, arg4);\n  if ((zero_result == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "process_and_return_result_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "get_data_from_pointer_thunk_00081714",
                "PTR_DAT_0008171c": "PTR_DATA"
            },
            "code": "int get_data_from_pointer_thunk_00081714() {\n    int* data_pointer = (int*)PTR_DAT_0008171c;\n    return *data_pointer;\n}",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_00080258",
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "reverse_endianess_and_concatenate_params_00081ca8",
                "in_ZR": "is_ZR_nonzero",
                "in_CY": "is_CY_zero",
                "concatenate_params_and_reverse_endianess_00081c54": "concatenate_params_and_reverse_endianess"
            },
            "code": "bool reverse_endianess_and_concatenate_params_00081ca8(void)\n{\n    bool is_CY_zero = false;\n    bool is_ZR_nonzero = false;\n    \n    concatenate_params_and_reverse_endianess();\n    \n    if(in_CY == 0)\n    {\n        is_CY_zero = true;\n    }\n    if(in_ZR != 0)\n    {\n        is_ZR_nonzero = true;\n    }\n    \n    return is_CY_zero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "reverse_endianess_and_concatenate_params_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "handle_data_00081318",
                "param_1": "data_index",
                "param_2": "flag",
                "param_3": "value",
                "puVar1": "data_ptr",
                "puVar2": "flag_ptr",
                "iVar3": "bitwise_result",
                "uVar4": "current_value",
                "iVar5": "data_offset"
            },
            "code": "void handle_data_00081318(int data_index, int flag, undefined4 value)\\n{\\n  undefined *data_ptr;\\n  undefined *flag_ptr;\\n  int data_offset;\\n  undefined4 current_value;\\n  int bitwise_result;\\n\\n  flag_ptr = flag_data;\\n  data_ptr = data_array;\\n  if (flag_data[data_index * 0x1c + 0xc] != \"\\0\") {\\n    if ((flag_data[data_index] & 0xf) == 5) {\\n      handle_data_00081318(data_index, 1, value, 5, data_index, flag, value);\\n    }\\n    flag_data[data_index] = flag_data[data_index] & 0xf | (byte)(flag << 4);\\n    data_offset = *(int *)(data_array + data_index * 0x1c);\\n    current_value = *(undefined4 *)(data_array + data_index * 0x1c + 4);\\n    bitwise_result = check_bitwise_and(data_offset, current_value);\\n    if (bitwise_result == 0) {\\n      if (flag != 0) {\\n        *(undefined4 *)(data_offset + 100) = current_value;\\n        return;\\n      }\\n      *(undefined4 *)(data_offset + 0x60) = current_value;\\n      return;\\n    }\\n    update_data_at_indices(data_offset, current_value, flag, 0, 1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_000801b0",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "imported": false,
            "current_name": "handle_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_data_from_pointer_00081714",
                "PTR_DAT_0008171c": "ptr"
            },
            "code": "unsigned int get_data_from_pointer_00081714(void)\n{\n  unsigned int* PTR_DAT_0008171c = (unsigned int*) PTR_DAT_0008171c;\n  return *PTR_DAT_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "process_and_update_result_0008449c",
                "param_1": "input",
                "param_2": "output_buffer",
                "iVar1": "processed_input",
                "uVar2": "updated_flag"
            },
            "code": "void process_and_update_result_0008449c(int input, int* output_buffer){\n  int processed_input = process_input(input, *(short *)(output_buffer + 0xe));\n  ushort updated_flag;\n  if (processed_input == -1) {\n    updated_flag = *(ushort *)(output_buffer + 0xc) & 0xefff;\n  }\n  else {\n    updated_flag = *(ushort *)(output_buffer + 0xc) | 0x1000;\n  }\n  if (processed_input != -1) {\n    *(int *)(output_buffer + 0x50) = processed_input;\n  }\n  *(ushort *)(output_buffer + 0xc) = updated_flag;\n}",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "process_and_update_result_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "multiplier_1",
                "param_4": "multiplier_2",
                "param_5": "output_array",
                "uVar1": "product",
                "lVar2": "shifted_product"
            },
            "code": "void calculate_difference_0008477c(uint32_t input_1, int32_t input_2, uint32_t multiplier_1, uint32_t multiplier_2, int32_t *output_array)\n{\n  uint32_t product = FUNC_000847e0() * ((uint64_t)multiplier_2 << 32 | multiplier_1);\n  uint32_t difference = input_1 - product;\n  uint32_t shifted_product = product >> 32;\n  int32_t difference2 = input_2 - (int32_t)shifted_product - (difference > input_1);\n  output_array[0] = difference;\n  output_array[1] = difference2;\n}\n",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "is_overflow",
                "uVar2": "current_byte",
                "cVar3": "byte_count",
                "iVar4": "code_result",
                "bVar5": "current_byte_index"
            },
            "code": "int process_data_000801b0(int **data)\n{\n    bool is_overflow;\n    undefined current_byte;\n    char byte_count;\n    int code_result;\n    byte current_byte_index;\n\n    if (1 < *(byte *)((int)data + 6)) {\n        handle_data(*(byte *)((int)data + 6), 0);\n    }\n\n    is_overflow = false;\n    *(undefined *)((int)data + 0x49) = 0;\n\n    if (*(byte *)((int)data + 5) < 4) {\n        while (code_result = (**(code **)(**data + 8))(), code_result != 0) {\n            current_byte_index = *(byte *)((int)data + 0x49);\n            current_byte = (**(code **)(**data + 0xc))();\n            byte_count = *(char *)((int)data + 0x49);\n            *(undefined *)((int)data + current_byte_index + 9) = current_byte;\n            current_byte_index = byte_count + 1;\n            *(byte *)((int)data + 0x49) = current_byte_index;\n\n            if (0x3f < current_byte_index) {\n                is_overflow = true;\n            }\n        }\n    }\n\n    *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n\n    if (is_overflow) {\n        byte_count = -3;\n        *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    }\n    else {\n        byte_count = *(char *)((int)data + 0x49);\n    }\n\n    return (int)byte_count;\n}",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer_address",
                "param_2": "new_value",
                "uVar1": "new_buffer_index",
                "*(int *)(param_1 + 0x80)": "current_buffer_index",
                "*(uint *)(param_1 + 0x84)": "current_buffer_index",
                "*(undefined *)(param_1 + *(int *)(param_1 + 0x80))": "buffer_value",
                "*(uint *)(param_1 + 0x80)": "buffer_index"
            },
            "code": "void update_buffer_000813c2(int buffer_address, undefined new_value)\n{\n  uint new_buffer_index;\n  uint current_buffer_index = *(uint *)(buffer_address + 0x84);\n  new_buffer_index = (*(int *)(buffer_address + 0x80) + 1U) & 0x7f;\n  if (new_buffer_index != current_buffer_index) {\n    *(undefined *)(buffer_address + *(int *)(buffer_address + 0x80)) = new_value;\n    *(uint *)(buffer_address + 0x84) = new_buffer_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "initial_value",
                "param_3": "limit",
                "param_4": "value_1",
                "param_5": "value_2",
                "param_6": "value_3",
                "puVar1": "ptr_to_fun"
            },
            "code": "void initialize_parameters_000814e4(int *parameters, int initial_value, int limit, int value_1, int value_2, int value_3)\n{\n  parameters[0] = initial_value;\n  parameters[1] = limit;\n  int *ptr_to_fun = PTR_PTR_FUN_00081454_1_00081504;\n  parameters[2] = value_1;\n  *parameters = ptr_to_fun;\n  parameters[3] = value_2;\n  parameters[4] = value_3;\n  parameters[5] = 0;\n  parameters[6] = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_parameters_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_parameters_00080d54",
                "param_1": "parameters",
                "param_2": "new_parameter_value",
                "param_3": "parameter_flags",
                "bVar1": "is_flag_set"
            },
            "code": "void update_parameters_00080d54(int* parameters, int new_parameter_value, unsigned int parameter_flags) {\n  bool is_flag_set = (int)(parameter_flags << 0x1f) < 0;\n  parameters[17] = new_parameter_value;\n  if (is_flag_set) {\n    parameters[25] = new_parameter_value;\n  }\n  if (!is_flag_set) {\n    parameters[24] = new_parameter_value;\n  }\n  is_flag_set = (parameter_flags & 10) != 0;\n  if (is_flag_set) {\n    parameters[8] = new_parameter_value;\n  }\n  if (!is_flag_set) {\n    parameters[9] = new_parameter_value;\n  }\n  if (((int)(parameter_flags << 0x1e) < 0) || ((int)(parameter_flags << 0x1c) < 0)) {\n    parameters[32] = new_parameter_value;\n  }\n  parameters[5] = new_parameter_value;\n  *parameters = new_parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_parameters_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "xor_result",
                "cVar3": "bit_counter",
                "uVar4": "shifted_xor_result"
            },
            "code": "uint calculate_checksum_0008021c(int start_index, uint length)\n{\n  int current_index;\n  uint xor_result;\n  char bit_counter;\n  uint shifted_xor_result;\n  \n  xor_result = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    xor_result = xor_result ^ *(byte *)(current_index + 9);\n    bit_counter = \"\\b\";\n    do {\n      shifted_xor_result = xor_result >> 1;\n      if (xor_result & 1) {\n        shifted_xor_result = shifted_xor_result ^ 0xa001;\n      }\n      xor_result = shifted_xor_result;\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != \"\\0\");\n  }\n  return (xor_result & 0xff) << 8 | xor_result >> 8;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_buffers_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = process_data_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)decompress_and_check_data_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)count_bytes_until_null_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_buffer_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          calculate_difference_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = calculate_difference_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_data_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_data_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008378c",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082ac0",
                "FUN_00082a50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "allocate_memory_block_00081e04",
                "param_1": "size",
                "*DAT_00081e10": "ptr"
            },
            "code": "void allocate_memory_block_00081e04(void* *DAT_00081e10, int size)\n{\n  allocate_memory_block_00081e04(*DAT_00081e10, size);\n  return;\n}",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "calculate_difference_00084750",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "difference"
            },
            "code": "int calculate_difference_00084750(int num1, int num2, int num3, int num4) {\n  int difference;\n  \n  if (num4 == 0 && num3 == 0) {\n    if (num2 != 0 || num1 != 0) {\n      num1 = -1;\n    }\n    return num1;\n  }\n  difference = calculate_difference_00084750_000847ac();\n  return difference;\n}",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "calculate_difference_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_and_process_data_00080ae4",
                "puVar1": "data_ptr",
                "puVar2": "param_ptr",
                "iVar3": "var_3",
                "iVar4": "var_4",
                "iVar5": "var_5",
                "iVar6": "data_array_3",
                "iVar7": "num_iterations",
                "iVar8": "i",
                "DAT_00080be8": "data_array_1",
                "initialize_memory_00080e9c": "initialize_memory",
                "DAT_00080bec": "param_array_1",
                "process_data_00081d7c": "process_data",
                "handle_data_00081318": "handle_data",
                "DAT_00080c00": "data_array_1",
                "DAT_00080bfc": "data_array_2",
                "DAT_00080bf8": "data_array_4",
                "DAT_00080bf4": "data_array_3",
                "handle_data_00080da0": "handle_data",
                "check_and_set_bit_00080e18": "check_and_set_bit",
                "find_threshold_00080f9c": "find_threshold",
                "set_bits_in_uint_00081042": "set_bits_in_uint",
                "update_flag_00081034": "update_flag",
                "set_param_value_0008106e": "set_param_value",
                "set_param_1_to_65535_00081066": "set_param_1_to_65535"
            },
            "code": "void initialize_and_process_data_00080ae4()\n{\n  uint *data_ptr;\n  undefined4 *param_ptr;\n  int i;\n  int num_iterations = 0x4f;\n  int var_1;\n  int var_2;\n  int var_3;\n  int var_4;\n  int var_5;\n  initialize_memory();\n  data_ptr = DAT_00080be8;\n  param_ptr = DAT_00080bec;\n  DAT_00080bec[1] = *data_ptr / 1000 - 1;\n  *(undefined *)(DAT_00080bfc + 0x23) = 0xf0;\n  DAT_00080bec[2] = 0;\n  *DAT_00080bec = 7;\n  process_data();\n  for (i = 0; i < num_iterations; i++) {\n    var_1 = DAT_00080bf4;\n    var_2 = DAT_00080bfc;\n    var_3 = DAT_00080be8;\n    var_4 = DAT_00080bf8;\n    var_5 = i + 1;\n    handle_data(i, 0);\n  }\n  *(undefined4 *)(var_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(var_2 + 0xa0) = 0xffffffff;\n  handle_data(var_3, 1, 0x300, 0);\n  handle_data(0, 1);\n  handle_data(var_3, 1, 0xc00, 0);\n  handle_data(var_3, 1, 0x3000, 0);\n  handle_data(var_2, 2, 0x30, 0);\n  handle_data(var_4, 1, 0xc00, 0);\n  handle_data(var_3, 1, 3, 0);\n  handle_data(var_4, 1, 0xc000, 0);\n  check_and_set_bit(0x25);\n  find_threshold(param_array_2, *data_ptr, param_array_3, 0xc);\n  set_bits_in_uint(param_array_2, 0, 0x300000, 1);\n  update_flag(param_array_2, 0, 0);\n  set_param_value(param_array_2, 0xffffffff);\n  set_param_1_to_65535(param_array_2);\n}\n",
            "called": [
                "FUN_00081034",
                "FUN_00080f9c",
                "FUN_00080da0",
                "FUN_00081042",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00081d7c",
                "FUN_00081066"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "add_to_buffer_00081d5c",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "buffer_size",
                "puVar1": "buffer_ptr",
                "uVar2": "buffer_index",
                "uVar4": "bit_mask",
                "iVar3": "buffer_start"
            },
            "code": "uint32_t add_to_buffer_00081d5c(uint32_t data, uint32_t *buffer, uint32_t buffer_size)\n{\n  uint32_t *buffer_ptr;\n  uint32_t buffer_index;\n  uint32_t bit_mask;\n  int32_t buffer_start = *(int32_t *)PTR_DAT_0008396c;\n  buffer_ptr = *(uint32_t **)(buffer_start + 0x148);\n  if (buffer_ptr == (uint32_t *)0x0) {\n    buffer_ptr = (uint32_t *)(buffer_start + 0x14c);\n    *(uint32_t **)(buffer_start + 0x148) = buffer_ptr;\n  }\n  buffer_index = buffer_ptr[1];\n  if (buffer_index > 0x1f) {\n    if ((DAT_00083970 == 0) ||\n       (buffer_ptr = (uint32_t *)process_data_00081df4(400), buffer_ptr == (uint32_t *)0x0)) {\n      return 0xffffffff;\n    }\n    *buffer_ptr = *(uint32_t *)(buffer_start + 0x148);\n    buffer_ptr[1] = 0;\n    buffer_index = 0;\n    *(uint32_t **)(buffer_start + 0x148) = buffer_ptr;\n    buffer_ptr[0x62] = 0;\n    buffer_ptr[99] = 0;\n  }\n  bit_mask = 1 << (buffer_index & 0xff);\n  buffer_ptr[buffer_index + 0x22] = data;\n  buffer_ptr[0x62] = buffer_ptr[0x62] | bit_mask;\n  buffer_ptr[buffer_index + 0x42] = buffer_size;\n  buffer_ptr[99] = bit_mask | buffer_ptr[99];\n  buffer_ptr[1] = buffer_index + 1;\n  buffer_ptr[buffer_index + 2] = buffer;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "add_to_buffer_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "get_previous_value_and_set_to_zero_00082970",
                "param_1": "result",
                "param_2": "value",
                "puVar1": "ptr",
                "iVar2": "previous_value"
            },
            "code": "void get_previous_value_and_set_to_zero_00082970(int *result, undefined4 value) {\n  undefined *ptr = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  int previous_value = add_to_value_and_return_previous_0008118c(value);\n  if (previous_value == -1 && *(int *)ptr != 0) {\n    *result = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": false,
            "current_name": "get_previous_value_and_set_to_zero_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "get_default_value_000811be",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_default_value_000811be(void)\n{\n    int default_value = 1;\n    return default_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "get_default_value_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "concatenate_params_and_reverse_endianess_00081c54",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "code": "void concatenate_params_and_reverse_endianess_00081c54(uint32_t param_1, uint32_t param_2)\n{\n    concatenate_32bit_00081c5c(param_2, param_1);\n    return;\n}",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "concatenate_params_and_reverse_endianess_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "process_data_and_check_0008163a",
                "param_1": "data_ptr",
                "param_2": "threshold",
                "iVar1": "result"
            },
            "code": "int process_data_and_check_0008163a(int *data_ptr, uint threshold) {\n  int result;\n  if ((data_ptr[0] == 0) || ((uint)data_ptr[1] < threshold)) {\n    result = process_data(data_ptr);\n    if (result == 0) {\n      return 0;\n    }\n    if (data_ptr[2] == 0) {\n      *(undefined *)*data_ptr = 0;\n    }\n  }\n  return 1;\n}",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "process_data_and_check_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "call_func_with_data_pointer_and_params_000825a0",
                "param_1": "param_1",
                "param_2": "param_2",
                "FUNC_000825b0": "call_func_with_data_pointer",
                "*DAT_000825ac": "data_pointer"
            },
            "code": "void call_func_with_*call_func_with_data_pointer_and_params_000825a0(int* *DAT_000825ac, int param_1, int param_2)\n{\n  call_func_with_*DAT_000825ac(**DAT_000825ac, param_1, param_2);\n  return;\n}",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "call_func_with_data_pointer_and_params_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "write_to_buffer_with_param_000815d4",
                "param_1": "buffer",
                "param_2": "parameter",
                "initialize_parameters_000814e4": "initialize_parameters",
                "PTR_PTR_write_to_buffer_00081454_1_000815f4": "write_to_buffer_pointer"
            },
            "code": "undefined4* write_to_buffer_with_param_000815d4(undefined4* buffer, undefined4 parameter) {\n  initialize_parameters();\n  *buffer = PTR_PTR_write_to_buffer_00081454_1_000815f4;\n  buffer[9] = parameter;\n  return buffer;\n}",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "write_to_buffer_with_param_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(param_1);\n  uVar1 = DAT_00082140;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00082140 + uVar15 + 0xc);\n    if ((iVar13 != DAT_00082140 + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00082140 + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_0008259c(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00082140 + 0x10);\n  iVar4 = DAT_00082140 + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_0008259c(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00082348 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_0008259c(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00082262;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00082262:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00082148;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_0008211e;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00082148 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  uVar6 = get_previous_value_and_set_to_zero_00082970(param_1,uVar17);\n  puVar3 = PTR_DAT_00082154;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00082154 + uVar17;\n    *(uint *)PTR_DAT_00082154 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00082148 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = get_previous_value_and_set_to_zero_00082970(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00082154;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          allocate_memory_block_00083d9c(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_0008214c < uVar11) {\n      *(uint *)PTR_DAT_0008214c = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00082150 < uVar11) {\n      *(uint *)PTR_DAT_00082150 = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_0008259c(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_0008259c(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00081df4",
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "data",
                "puVar1": "data_ptr",
                "iVar2": "status"
            },
            "code": "void process_data_00080164(int **data)\n{\n  undefined *data_ptr;\n  int status;\n  data_ptr = data[0];\n  *data = (int *)data[0];\n  (**(code **)(*(int *)data_ptr + 0x18))(data_ptr);\n  if (1 < *(byte *)((int)data + 6)) {\n    handle_data_00081210(*(byte *)((int)data + 6),1);\n    handle_data_00081318(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    status = (**(code **)(*data[0] + 0xc))();\n  } while (-1 < status);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "process_data_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "num_bytes_to_copy",
                "iVar1": "i"
            },
            "code": "uint copy_bytes_000811cc(uint8_t *dest, uint8_t *src, uint num_bytes_to_copy) {\n  int i;\n  for (i = 0; i < (int)num_bytes_to_copy; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(src + i);\n  }\n  return num_bytes_to_copy & ~((int)num_bytes_to_copy >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "copy_bytes_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "get_default_value_000846dc",
                "param_1": "output_value",
                "param_2": "input_value",
                "puVar1": "default_value_ptr",
                "iVar2": "default_value"
            },
            "code": "void get_default_value_000846dc(int *output_value, undefined4 input_value) {\n    undefined *default_value_ptr;\n    int default_value;\n\n    default_value_ptr = PTR_DAT_000846fc;\n    *(undefined4 *)default_value_ptr = 0;\n    default_value = get_default_value_000846dc_000811be(input_value);\n    if ((default_value == -1) && (*(int *)default_value_ptr != 0)) {\n        *output_value = *(int *)default_value_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "get_default_value_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_00081894",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift",
                "iVar3": "coefficient",
                "uVar4": "mask"
            },
            "code": "uint calculate_00081894(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  uint shift = leading_zeroes - 8;\n  int coefficient = shift * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint mask = 0 << (shift & 0xff);\n    uint result = coefficient + (input << (shift & 0xff)) + (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint mask = input << (leading_zeroes + 0x18U & 0xff);\n  uint result = coefficient + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)mask >> 0x1f));\n  if ((mask & 0x7fffffff) == 0) {\n    result = result & ~(mask >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_buffer_000845bc",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "buffer_size",
                "*param_2": "*byte",
                "*param_1": "*buffer"
            },
            "code": "int write_byte_to_buffer_000845bc(int* buffer, unsigned char byte, uint buffer_size) {\n  if (buffer == NULL) {\n    return 0;\n  }\n  if (buffer_size < 256) {\n    *buffer = byte;\n    return 1;\n  }\n  *buffer = 0x8a;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_buffer_with_value_00082504",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_word",
                "puVar2": "next_word",
                "uVar3": "value_to_fill",
                "uVar4": "remaining_size",
                "bVar5": "zero_size"
            },
            "code": "void fill_buffer_with_value_00082504(uint32_t *buffer, uint8_t value, uint32_t size)\n{\n  uint32_t *current_word;\n  uint32_t remaining_size;\n  uint32_t value_to_fill;\n\n  if (((uint32_t)buffer & 3) != 0) {\n    bool zero_size = size == 0;\n    current_word = buffer;\n    size = size - 1;\n    if (zero_size) {\n      return;\n    }\n    while( true ) {\n      buffer = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      if (((uint32_t)buffer & 3) == 0) break;\n      zero_size = size == 0;\n      current_word = buffer;\n      size = size - 1;\n      if (zero_size) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value_to_fill = (value << 24) | (value << 16) | (value << 8) | value;\n    remaining_size = size;\n    current_word = buffer;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *current_word = value_to_fill;\n        current_word[1] = value_to_fill;\n        current_word[2] = value_to_fill;\n        current_word[3] = value_to_fill;\n        current_word = current_word + 4;\n      } while (current_word != (uint32_t *)((int)buffer + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      buffer = buffer + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      current_word = buffer;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *buffer = value_to_fill;\n      buffer = buffer + 1;\n    } while (3 < size);\n    buffer = (uint32_t *)((int)current_word + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    current_word = buffer;\n    do {\n      uint32_t *next_word = (uint32_t *)((int)current_word + 1);\n      *(uint8_t *)current_word = value;\n      current_word = next_word;\n    } while (current_word != (uint32_t *)(size + (int)buffer));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_buffer_with_value_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_initialized_000800f4",
                "param_1": "input_arg",
                "*PTR_DAT_0008010c": "string_ptr",
                "DAT_00080110": "int_var",
                "DAT_00080114": "return_val"
            },
            "code": "int check_if_initialized_000800f4(int input_arg) {\n  if (**PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      input_arg = DAT_00080114;\n    }\n    **PTR_DAT_0008010c = 1;\n  }\n  return input_arg;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "decompress_and_check_data_0008378c",
                "param_1": "data",
                "param_2": "data_size",
                "iVar1": "result",
                "iVar2": "decompressed_size",
                "local_488": "decompressed_data_ptr",
                "local_480": "decompressed_data_buffer_size",
                "local_47c": "data_flags",
                "local_47a": "unknown_value",
                "local_478": "decompressed_data",
                "local_474": "decompressed_data_buffer_size",
                "local_470": "unused",
                "local_46c": "data_header",
                "local_464": "decompressed_data_size",
                "local_424": "unused",
                "auStack_420": "decompressed_data"
            },
            "code": "int decompress_and_check_data_0008378c(undefined4 data, int data_size)\n{\n  int result = 0;\n  int decompressed_size = 0;\n  undefined *decompressed_data_ptr[2];\n  undefined4 decompressed_data_size = *(undefined4 *)(data_size + 100);\n  undefined4 data_header = *(undefined4 *)(data_size + 0x1c);\n  ushort data_flags = *(ushort *)(data_size + 0xc) & 0xfffd;\n  undefined2 unknown_value = *(undefined2 *)(data_size + 0xe);\n  undefined *decompressed_data = decompressed_data_ptr[0];\n  decompressed_data_ptr[0] = (undefined *)auStack_420;\n  undefined4 decompressed_data_buffer_size = 0x400;\n  int decompress_result = decompress_data(data, decompressed_data_ptr);\n  if ((decompress_result >= 0) && (decompressed_size = decompress_result, decompressed_size != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)data_flags << 0x19) < 0) {\n    *(ushort *)(data_size + 0xc) = *(ushort *)(data_size + 0xc) | 0x40;\n  }\n  return result;\n}",
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "decompress_and_check_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "decompress_data_00083adc",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "current_output_pos",
                "iVar2": "compressed_block_size",
                "uVar3": "flags",
                "uVar4": "flags_shifted",
                "iVar5": "uncompressed_block_size",
                "pcVar6": "decompress_function",
                "unaff_r4": "result",
                "iVar7": "input_buffer_size",
                "compressed_data_offset": "current_compressed_size",
                "uncompressed_data_offset": "current_uncompressed_size",
                "compressed_block_size": "current_compressed_size",
                "uncompressed_block_size": "current_uncompressed_size",
                "error_code": "error_code",
                "current_output_pos": "current_output_pos",
                "current_input_pos": "input_buffer",
                "decompress_function": "decompress_function",
                "flags": "flags",
                "flags_shifted": "flags_shifted",
                "current_compressed_size": "current_compressed_size",
                "input_buffer_size": "input_buffer_size"
            },
            "code": "int decompress_data_00083adc(int *input_buffer, int *output_buffer)\n{\n    int *current_output_pos;\n    int *current_input_pos;\n    int compressed_block_size;\n    int uncompressed_block_size;\n    int result = 0;\n    code *decompress_function;\n    ushort flags;\n    uint flags_shifted;\n    int current_compressed_size;\n    int current_uncompressed_size;\n\n    if (input_buffer != NULL && input_buffer[0xE] == 0)\n    {\n        initialize_buffers();\n    }\n\n    if (*(short *)(output_buffer + 3) == 0)\n    {\n        return 0;\n    }\n\n    flags = *(ushort *)(output_buffer + 3);\n    flags_shifted = (uint)flags << 0x1C;\n\n    if ((int)flags_shifted < 0)\n    {\n        int compressed_data_offset = output_buffer[4];\n\n        if (compressed_data_offset == 0)\n        {\n            return 0;\n        }\n\n        int uncompressed_data_offset = *output_buffer;\n        if ((flags & 3) == 0)\n        {\n            uncompressed_block_size = output_buffer[5];\n        }\n        else\n        {\n            uncompressed_block_size = 0;\n        }\n\n        *output_buffer = compressed_data_offset;\n        compressed_block_size = uncompressed_data_offset - compressed_data_offset;\n        output_buffer[2] = uncompressed_block_size;\n\n        do\n        {\n            if (compressed_block_size < 1)\n            {\n                return 0;\n            }\n\n            current_compressed_size = (*(code *)output_buffer[9])(input_buffer, output_buffer[7], compressed_data_offset, compressed_block_size, result);\n            compressed_block_size = compressed_block_size - current_compressed_size;\n            compressed_data_offset = compressed_data_offset + current_compressed_size;\n        } while (0 < current_compressed_size);\n\n        *(ushort *)(output_buffer + 3) = flags | 0x40;\n        return -1;\n    }\n\n    *(ushort *)(output_buffer + 3) = flags | 0x800;\n\n    if (output_buffer[1] < 1 && output_buffer[0xF] < 1)\n    {\n        return 0;\n    }\n\n    decompress_function = (code *)output_buffer[10];\n    if (decompress_function == NULL)\n    {\n        return 0;\n    }\n\n    flags_shifted = (uint)(flags | 0x800);\n    int input_buffer_size = *input_buffer;\n    *input_buffer = 0;\n\n    if ((flags & 0x1000) == 0)\n    {\n        current_uncompressed_size = (*decompress_function)(input_buffer, output_buffer[7], flags_shifted & 0x1000, 1);\n\n        if (current_uncompressed_size == -1)\n        {\n            int error_code = *input_buffer;\n            if (error_code != 0)\n            {\n                if (error_code == 0x1D || error_code == 0x16)\n                {\n                    *input_buffer = input_buffer_size;\n                    return 0;\n                }\n                else\n                {\n                    *(ushort *)(output_buffer + 3) = flags | 0x40;\n                    return -1;\n                }\n            }\n\n            flags = *(ushort *)(output_buffer + 3);\n            decompress_function = (code *)output_buffer[10];\n        }\n        else\n        {\n            flags = *(ushort *)(output_buffer + 3);\n        }\n    }\n    else\n    {\n        current_uncompressed_size = output_buffer[0x14];\n    }\n\n    if ((int)((uint)flags << 0x1D) < 0)\n    {\n        current_uncompressed_size = current_uncompressed_size - output_buffer[1];\n        if (output_buffer[0xC] != 0)\n        {\n            current_uncompressed_size = current_uncompressed_size - output_buffer[0xF];\n        }\n    }\n\n    current_compressed_size = (*decompress_function)(input_buffer, output_buffer[7], current_uncompressed_size, 0);\n\n    if (current_compressed_size == -1)\n    {\n        int error_code = *input_buffer;\n        if (error_code != 0)\n        {\n            if (error_code == 0x1D || error_code == 0x16)\n            {\n                *(ushort *)(output_buffer + 3) = flags & 0xF7FF;\n                *output_buffer = output_buffer[4];\n                output_buffer[1] = 0;\n                goto LAB_00083a00;\n            }\n            else\n            {\n                *(ushort *)(output_buffer + 3) = flags | 0x40;\n                return -1;\n            }\n        }\n        else\n        {\n            flags = *(ushort *)(output_buffer + 3) & 0xF7FF;\n            output_buffer[1] = 0;\n            *(ushort *)(output_buffer + 3) = flags;\n            *output_buffer = output_buffer[4];\n        }\n    }\n    else\n    {\n        flags = *(ushort *)(output_buffer + 3) & 0xF7FF;\n        *output_buffer = output_buffer[4];\n        *(ushort *)(output_buffer + 3) = flags;\n        output_buffer[1] = 0;\n    }\n\n    if ((int)((uint)flags << 0x13) < 0)\n    {\n        output_buffer[0x14] = current_compressed_size;\n    }\n\nLAB_00083a00:\n    current_output_pos = (int *)output_buffer[0xC];\n    *input_buffer = input_buffer_size;\n\n    if (current_output_pos == NULL)\n    {\n        return 0;\n    }\n\n    if (current_output_pos != output_buffer + 0x10)\n    {\n        allocate_memory_block(input_buffer);\n    }\n\n    output_buffer[0xC] = 0;\n    return 0;\n}",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "decompress_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081e14(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00082598();\n  iVar4 = DAT_0008296c;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_0008267c;\n  }\n  if (uVar8 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_0008296c + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_0008296c + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_0008259c(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              reverse_copy_array_00082438(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_0008259c(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              reverse_copy_array_00082438(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          reverse_copy_array_00082438(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar9 = (int *)FUNC_00081e14(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000826a4;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        reverse_copy_array_00082438(piVar9,param_2);\n      }\n      allocate_memory_block_00083d9c(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    allocate_memory_block_00083d9c(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_value_at_index_000803d4",
                "param_1": "index",
                "iVar1": "i",
                "value": "value",
                "PTR_DAT_0008040c": "PTR_DAT_0008040c",
                "*(byte *)(param_1 + 10)": "*(byte *)(index + 10)",
                "*(short *)(param_1 + 0x54)": "*(short *)(index + 0x54)"
            },
            "code": "int check_value_at_index_000803d4(int index) {\n    int value = *(byte *)(index + 10);\n    if ((int)((uint)value << 0x18) < 0) {\n        *(short *)(index + 0x54) += 1;\n        return 0xfb;\n    }\n    for (int i = 0; i < 8; i++) {\n        if (PTR_DAT_0008040c[i] == value) {\n            return 0;\n        }\n    }\n    *(short *)(index + 0x54) += 1;\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_value_at_index_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "check_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "function_result",
                "unaff_r6": "data_value",
                "piVar3": "data_pointer",
                "iVar4": "check_result"
            },
            "code": "int check_data_0008043e(int **data)\n{\n  char result;\n  uint8_t data_length = *(uint8_t *)((int)data + 5);\n  uint8_t data_value;\n  int *data_pointer = (int *)get_data_from_pointer_thunk_00081714();\n  if (data_length < 4) {\n    uint8_t function_result = (**(code **)(**data + 8))();\n    data_value = function_result & 0xff;\n  }\n  if (data[0x17] < data_pointer) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (data_value > 7) {\n    process_data(data);\n    int check_result = check_value_at_index(data);\n    if (check_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        iterate_and_combine_data(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = 0;\nLAB_000804a2:\n  return (int)result;\n}",
            "called": [
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714",
                "FUN_00080410"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "clear_memory_if_not_null_0008160c",
                "param_1": "ptr_param1",
                "*param_1": "*ptr_param1",
                "allocate_memory_block_00081e04": "allocate_memory_block",
                "param_1[1]": "ptr_param1[1]",
                "param_1[2]": "ptr_param1[2]"
            },
            "code": "void clear_memory_if_not_null_0008160c(int *ptr_param1)\n{\n  if (*ptr_param1 != 0) {\n    allocate_memory_block();\n  }\n  *ptr_param1 = 0;\n  ptr_param1[2] = 0;\n  ptr_param1[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "clear_memory_if_not_null_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "code": "int check_and_set_bit_00080e18(uint bit_position)\n{\n  uint bit_mask;\n\n  if (bit_position < 45) {\n    if (bit_position < 32) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210",
                "FUN_00081508"
            ],
            "imported": false,
            "current_name": "check_and_set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "int return_zero_00081184(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_dat_value_00084298",
                "DAT_000842a0": "data_pointer"
            },
            "code": "int get_dat_value_00084298(void)\n{\n  int* DAT_000842a0 = DAT_000842a0;\n  return *DAT_000842a0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_param_1_to_65535_00081066",
                "param_1": "param_1",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(param_1 + 20)"
            },
            "code": "void set_param_1_to_65535_00081066(int param_1)\n{\n  *(int *)(param_1 + 20) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_param_1_to_65535_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_param_to_int32_00081cd0",
                "param_1": "param",
                "uVar1": "shift_amount",
                "uVar2": "shift_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_param_to_int32_00081cd0(uint param)\n{\n  uint result;\n  uint shift_value;\n  uint shift_amount;\n  \n  if ((param << 1) < 0x7f000000) {\n    return 0;\n  }\n  \n  shift_amount = (param << 1) >> 0x18;\n  shift_value = 0x9e - shift_amount;\n  \n  if ((shift_amount < 0x9f) && (shift_value != 0)) {\n    result = (param << 8 | 0x80000000) >> (shift_value & 0xff);\n    if ((param & 0x80000000) != 0) {\n      result = -result;\n    }\n    return result;\n  }\n  \n  if ((shift_value == 0xffffff9f) && ((param & 0x7fffff) != 0)) {\n    return 0;\n  }\n  \n  if ((param & 0x80000000) == 0) {\n    result = 0x7fffffff;\n  } else {\n    result = param;\n  }\n  \n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "convert_param_to_int32_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "process_data_00081df4",
                "param_1": "data",
                "FUNC_00081e14": "execute_function",
                "*DAT_00081e00": "data",
                "*data": "data",
                "size": "size"
            },
            "code": "void process_*process_data_00081df4(void **process_data_00081df4, int size)\n{\n  execute_function(**process_data_00081df4, size);\n  return;\n}",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "process_data_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "iterate_and_combine_00080410",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "combined_params",
                "iVar2": "ptr_to_input",
                "bVar3": "index",
                "uVar4": "index_as_uint",
                "iVar5": "ptr_to_output"
            },
            "code": "void iterate_and_combine_00080410(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  uint8_t index = 0;\n  uint8_t max_index = *(uint8_t *)(input + 0xb) >> 1;\n  while (index < max_index) {\n    uint8_t offset = (index * 2 + 3 & 0xff);\n    uint32_t ptr_to_input = offset + input;\n    uint32_t ptr_to_output = *(uint32_t *)(input + 0x4c) + index * 2;\n    uint16_t combined_params = combine_params_000815f8(*(undefined *)(ptr_to_input + 9), *(undefined *)(ptr_to_input + 10), ptr_to_input, *(uint8_t *)(input + 0xb), param_4);\n    *(uint16_t *)(ptr_to_output) = combined_params;\n    index++;\n  }\n}",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "iterate_and_combine_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "handle_data_00080da0",
                "param_1": "data_handler",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flags",
                "bVar1": "is_negative_flag"
            },
            "code": "int handle_data_00080da0(int data_handler, int data_type, int data_value, uint32_t data_flags)\n{\n    bool is_negative_flag = (int)(data_flags << 0x1f) < 0;\n    switch(data_type) {\n        case 1:\n        case 2:\n            (*data_handler)(data_type, data_value);\n            *(int *)(data_handler + 0x44) = data_value;\n            if (is_negative_flag) {\n                *(int *)(data_handler + 100) = data_value;\n            }\n            if (!is_negative_flag) {\n                *(int *)(data_handler + 0x60) = data_value;\n            }\n            break;\n        case 3:\n            (*data_handler)(data_type, data_value, data_flags, data_handler, data_value);\n            break;\n        case 4:\n        case 5:\n            (*data_handler)(data_type, data_value, (data_type == 5), (data_flags << 0x1d) >> 0x1f, (data_flags & 1), data_type, data_value);\n            break;\n        default:\n            return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "handle_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "calculate_checksum_and_update_data_00080258",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "data_index",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "data_index_uint"
            },
            "code": "void calculate_checksum_and_update_data_00080258(int **data, int data_size, int param_3, int param_4) {\n  byte data_index = *(byte *)((int)data + 0x49);\n  uint data_index_uint = (uint)data_index;\n  undefined2 checksum = calculate_checksum_0008021c(data, data_index_uint, param_3, param_4, param_4);\n  *(char *)((int)data + data_index_uint + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)data + (data_index_uint + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)data + 0x49) = data_index + 2;\n  if (data[0x6][0x0] > 1) {\n    handle_data_00081318(data[0x6][0x0],1);\n  }\n  if (data[0x5][0x0] < 4) {\n    (**(code **)(*data)[0x4])(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (data[0x6][0x0] > 1) {\n    handle_data_00081318(data[0x6][0x0],0);\n  }\n  if (data[0x5][0x0] < 4) {\n    do {\n      int result = (**(code **)(*data)[0xc])();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  int new_data = get_data_from_pointer_thunk_00081714();\n  data[0x17] = (int *)(new_data + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}",
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "calculate_checksum_and_update_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "process_data_00081622",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "iVar1": "result"
            },
            "code": "int process_data_00081622(int *data_ptr, int data_size, undefined4 param_3, undefined4 param_4)\n{\n  int result;\n  result = call_func_with_data_pointer_and_params(*data_ptr, data_size + 1, param_3, param_4, param_4);\n  if (result != 0) {\n    *data_ptr = result;\n    data_ptr[1] = data_size;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "process_data_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_array_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "i",
                "puVar2": "destination_word",
                "puVar3": "source_word",
                "puVar4": "destination_byte",
                "puVar6": "destination_byte_next",
                "uVar5": "remaining_length",
                "uVar7": "remaining_padding"
            },
            "code": "void reverse_copy_array_00082438(uint32_t *destination, uint32_t *source, uint32_t length)\n{\n    if (destination >= source && destination < source + length)\n    {\n        uint8_t *destination_byte = (uint8_t *)destination + length;\n        uint32_t i = length - 1;\n        if (length != 0)\n        {\n            do\n            {\n                destination_byte--;\n                i--;\n                *destination_byte = (uint8_t)(*source >> (i * 8));\n            } while (i != UINT32_MAX);\n        }\n        return;\n    }\n    if (length < 16)\n    {\n        if (length == 0)\n        {\n            return;\n        }\n    }\n    else if ((((uint32_t)destination | (uint32_t)source) & 3) == 0)\n    {\n        uint32_t *destination_word = destination;\n        uint32_t *source_word = source;\n        do\n        {\n            *destination_word++ = *source_word++;\n            *destination_word++ = *source_word++;\n            *destination_word++ = *source_word++;\n            *destination_word++ = *source_word++;\n        } while (destination_word != (uint32_t *)((uint32_t)destination + (length - 16 & 0xFFFFFFF0) + 16));\n        uint32_t i = (length - 16 >> 4) + 1;\n        uint32_t remaining_length = length & 0xF;\n        source += i;\n        destination += i;\n        uint32_t *destination_remaining = destination;\n        uint32_t *source_remaining = source;\n        if (remaining_length > 3)\n        {\n            do\n            {\n                remaining_length -= 4;\n                *destination_remaining++ = *source_remaining++;\n            } while (remaining_length > 3);\n            uint32_t remaining_padding = (length - 4 * (i + 1)) + 4;\n            destination += remaining_padding;\n            source += remaining_padding;\n            remaining_length = length & 3;\n        }\n        length = remaining_length;\n        if (length == 0)\n        {\n            return;\n        }\n    }\n    uint8_t *destination_byte = (uint8_t *)destination;\n    do\n    {\n        uint8_t *destination_byte_next = destination_byte + 1;\n        *destination_byte = (uint8_t)(*source);\n        source = (uint32_t *)((uint32_t)source + 1);\n        destination_byte = destination_byte_next;\n    } while (destination_byte != (uint8_t *)(length + (uint32_t)destination));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "reverse_copy_array_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "set_flags_and_values_00081508",
                "param_1": "flag",
                "param_2": "divisor",
                "param_3": "value",
                "puVar1": "dat_00081570",
                "iVar2": "int_1",
                "puVar3": "data"
            },
            "code": "void set_flags_and_values_00081508(int flag, uint divisor, uint value) {\n  check_and_set_bit(flag);\n  uint* data = *(uint**)(flag + 0x18);\n  data[0x48] = 0x202;\n  *data = 0xac;\n  uint* dat_00081570 = DAT_00081570;\n  data[1] = value;\n  data[8] = *dat_00081570 / divisor >> 4;\n  data[3] = 0xffffffff;\n  data[2] = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)(char)*(byte *)(flag + 0x1c) >> 5) * 4) = 1 << (uint)(*(byte *)(flag + 0x1c) & 0x1f);\n  int* int_1 = *(int**)(flag + 0x10);\n  *(uint *)(int_1 + 0x84) = 0;\n  *(uint *)(int_1 + 0x80) = 0;\n  int* int_2 = *(int **)(flag + 0x14);\n  *(uint *)(int_2 + 0x84) = 0;\n  *(uint *)(int_2 + 0x80) = 0;\n  *data = 0x50;\n}",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_and_values_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "data_buffer",
                "param_2": "memory_buffer",
                "uVar1": "buffer_value_shifted_anded",
                "iVar2": "memory_value",
                "uVar3": "buffer_value_shifted",
                "uVar4": "buffer_value"
            },
            "code": "int process_data_00083808(uint16_t *data_buffer, int *memory_buffer) {\n    uint16_t buffer_value = *(data_buffer + 3);\n    uint32_t buffer_value_shifted = (uint32_t)buffer_value;\n    int memory_value = *(memory_buffer + 4);\n\n    if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n        initialize_buffers();\n    }\n\n    if ((int)(buffer_value_shifted << 0x1c) < 0) {\n        memory_value = memory_buffer[4];\n    }\n    else {\n        if (-1 < (int)(buffer_value_shifted << 0x1b)) {\n            *data_buffer = 9;\n            *(data_buffer + 3) = buffer_value | 0x40;\n            return -1;\n        }\n        if ((int)(buffer_value_shifted << 0x1d) < 0) {\n            if ((int *)memory_buffer[0xc] != (int *)0x0) {\n                if ((int *)memory_buffer[0xc] != memory_buffer + 0x10) {\n                    allocate_memory_block(param_1);\n                    buffer_value = *(data_buffer + 3);\n                }\n                memory_buffer[0xc] = 0;\n            }\n            buffer_value = buffer_value & 0xffdb;\n            *memory_buffer = memory_value;\n            memory_buffer[1] = 0;\n            memory_value = memory_buffer[4];\n        }\n        *(data_buffer + 3) = buffer_value | 8;\n        buffer_value_shifted = (uint32_t)(buffer_value | 8);\n    }\n\n    if ((memory_value == 0) && ((buffer_value_shifted & 0x280) != 0x200)) {\n        initialize_memory(data_buffer, memory_buffer);\n        buffer_value_shifted = (uint32_t)*(data_buffer + 3);\n        memory_value = memory_buffer[4];\n    }\n\n    uint32_t buffer_value_shifted_anded = buffer_value_shifted & 1;\n    if (buffer_value_shifted_anded == 0) {\n        if (-1 < (int)(buffer_value_shifted << 0x1e)) {\n            buffer_value_shifted_anded = memory_buffer[5];\n        }\n        memory_buffer[2] = buffer_value_shifted_anded;\n    }\n    else {\n        memory_buffer[6] = -memory_buffer[5];\n        memory_buffer[2] = 0;\n    }\n\n    if ((memory_value == 0) && ((int)(buffer_value_shifted << 0x18) < 0)) {\n        *(data_buffer + 3) = *(data_buffer + 3) | 0x40;\n        return -1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_000844c4",
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "array",
                "param_2": "position",
                "*(int *)(param_1 + 0x14)": "*array_position",
                "1 << (param_2 & 0xff)": "1 << bit_position"
            },
            "code": "void set_bit_at_position_0008105c(int* array, uint8_t position) {\n    uint8_t bit_position = position & 0xff;\n    int* array_position = array + 0x14;\n    *array_position = 1 << bit_position;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "output",
                "param_2": "input_length",
                "param_3": "input_data",
                "param_4": "result",
                "uVar1": "data",
                "iVar2": "status",
                "pcVar3": "function_pointer",
                "auStack_24": "stack_data"
            },
            "code": "void process_data_0008456c(undefined4 *output, int input_length, undefined4 input_data, undefined4 *result)\n{\n    undefined4 data;\n    int status;\n    code *function_pointer;\n    undefined stack_data[12];\n    \n    if (input_length == 0) {\n        function_pointer = *(code **)PTR_DAT_000845b8;\n        data = get_data_00084290();\n        status = (*function_pointer)(output, stack_data, 0, data, result);\n    }\n    else {\n        function_pointer = *(code **)PTR_DAT_000845b8;\n        data = get_data_00084290();\n        status = (*function_pointer)(output, input_length, input_data, data, result);\n    }\n    if (status == -1) {\n        *result = 0;\n        *output = 0x8a;\n    }\n    return;\n}",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_memory_flags_000811b4",
                "param_1": "pointer_to_address",
                "param_2": "flags",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(pointer_to_address + 4)"
            },
            "code": "void set_memory_flags_000811b4(int* pointer_to_address, int flags) {\n    *(int *)(pointer_to_address + 4) = flags;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_memory_flags_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "set_data_to_0x8000_000816d4",
                "DAT_000816dc": "data_buffer",
                "undefined4": "uint32_t"
            },
            "code": "void set_data_to_0x8000_000816d4(void)\n{\n  *(uint32_t *)(DAT_000816dc + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "set_data_to_0x8000_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    else {\n      iVar1 = process_data_00083808(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00084244;\n    }\n    DAT_00084244 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081e14(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                copyMemoryWithAlignmentCheck_0008234c(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_000825b0(param_1);\n                if (uVar7 == 0) {\n                  allocate_memory_block_00083d9c(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            reverse_copy_array_00082438(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            reverse_copy_array_00082438(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = decompress_data_00083adc(param_1,param_2), iVar1 != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_0008402e;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = find_char_in_buffer_00084384(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            reverse_copy_array_00082438(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = decompress_data_00083adc(param_1,param_2);\n            if (iVar1 != 0) goto LAB_0008402e;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            reverse_copy_array_00082438(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_0008402e;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = decompress_data_00083adc(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_0008402e;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_0008402e:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_00083adc",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008234c",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_data_at_indices_00080d7a",
                "param_1": "data",
                "param_2": "value",
                "param_3": "index1",
                "param_4": "index2",
                "param_5": "index3",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_data_at_indices_00080d7a(int* data, int value, int index1, int index2, int index3) {\n    data[17] = value;\n    if (index3 == 0) {\n        data[24] = value;\n    }\n    else {\n        data[25] = value;\n    }\n    if (index2 == 0) {\n        data[21] = value;\n    }\n    else {\n        data[20] = value;\n    }\n    if (index1 == 0) {\n        data[13] = value;\n    }\n    else {\n        data[12] = value;\n    }\n    data[4] = value;\n    *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "update_data_at_indices_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "puVar1": "ptr_int_1",
                "iVar2": "ptr_int_2",
                "DAT_00080f08": "PTR_DAT_00080f08",
                "DAT_00080f0c": "DAT_00080f0c",
                "DAT_00080f14": "PTR_DAT_00080f14",
                "DAT_00080f10": "PTR_DAT_00080f10",
                "DAT_00080f18": "PTR_DAT_00080f18",
                "DAT_00080f20": "PTR_DAT_00080f20"
            },
            "code": "void initialize_memory_00080e9c()\n{\n  int *ptr_int_1 = DAT_00080f08;\n  *DAT_00080f08 = 0x400;\n  ptr_int_1[0x80] = 0x400;\n  int ptr_int_2 = DAT_00080f0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(int *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    while (-1 < *(int *)(ptr_int_2 + 0x68) << 0x1f);\n  }\n  *(int *)(ptr_int_2 + 0x20) = DAT_00080f10;\n  while (-1 < *(int *)(ptr_int_2 + 0x68) << 0xf);\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int *)(ptr_int_2 + 0x68) << 0x1c);\n  *(int *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  while (-1 < *(int *)(ptr_int_2 + 0x68) << 0x1e);\n  *(int *)(DAT_00080f0c + 0x30) = 0x11;\n  while (-1 < *(int *)(ptr_int_2 + 0x68) << 0x1c);\n  *(int *)(DAT_00080f0c + 0x30) = 0x12;\n  while (-1 < *(int *)(ptr_int_2 + 0x68) << 0x1c);\n  *DAT_00080f20 = PTR_DAT_00080f1c;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_memory_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "data_address",
                "param_3": "param_3",
                "param_4": "param_4",
                "sVar1": "data_value",
                "puVar2": "data_pointer",
                "iVar3": "copy_result",
                "uVar4": "flag"
            },
            "code": "void process_data_00084464(int *result, int data_address, undefined4 param_3, undefined4 param_4) {\n  short data_value = *(short *)(data_address + 0xe);\n  ushort flag = *(ushort *)(data_address + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    process_and_return_result(result, data_value, 0, 2);\n    flag = *(ushort *)(data_address + 0xc);\n  }\n  *(ushort *)(data_address + 0xc) = flag & 0xefff;\n  undefined *data_pointer = PTR_DAT_000845fc;\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  int copy_result = copy_bytes(data_value, param_3, param_4, param_4, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((copy_result == -1) && (*(int *)data_pointer != 0)) {\n    *result = *(int *)data_pointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "undefined4": "int32_t"
            },
            "code": "int32_t get_error_code_000811ae(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "add_to_value_and_return_previous_0008118c",
                "param_1": "value_to_add",
                "puVar1": "ptr_data",
                "iVar2": "current_value"
            },
            "code": "int add_to_value_and_return_previous_0008118c(int value_to_add)\n{\n  undefined *ptr_data = PTR_DAT_000811a0;\n  int current_value = *(int *)ptr_data;\n  if (current_value == 0) {\n    *(undefined4 *)ptr_data = DAT_000811a4;\n  }\n  *(int *)ptr_data = current_value + value_to_add;\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "add_to_value_and_return_previous_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "count_bytes_until_null_00082a50",
                "param_1": "memory_address",
                "iVar1": "byte_count",
                "puVar2": "memory_pointer",
                "uVar3": "current_memory_value",
                "bVar4": "byte_found"
            },
            "code": "int count_bytes_until_null_00082a50(uint32_t memory_address) {\n  int byte_count = 0;\n  uint32_t *memory_pointer;\n  uint32_t current_memory_value;\n  bool byte_found;\n  \n  memory_pointer = (uint32_t *)(memory_address & 0xfffffffc);\n  byte_count = -(memory_address & 3);\n  current_memory_value = *memory_pointer;\n  if ((memory_address & 3) != 0) {\n    current_memory_value = current_memory_value | 0xffffffffU >> ((byte_count + 4U & 0x1f) << 3);\n  }\n  while (memory_pointer = memory_pointer + 1, (current_memory_value + 0xfefefeff & ~current_memory_value & 0x80808080) == 0) {\n    byte_count = byte_count + 4;\n    current_memory_value = *memory_pointer;\n  }\n  byte_found = (current_memory_value & 0xff) == 0;\n  if (!byte_found) {\n    byte_count = byte_count + 1;\n    byte_found = (current_memory_value & 0xff00) == 0;\n  }\n  if (!byte_found) {\n    byte_count = byte_count + 1;\n    byte_found = (current_memory_value & 0xff0000) == 0;\n  }\n  if (!byte_found) {\n    byte_count = byte_count + 1;\n  }\n  return byte_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "count_bytes_until_null_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "base_address",
                "param_2": "param_value"
            },
            "code": "void set_param_value_0008106e(int base_address, int param_value) {\n  *(int *)(base_address + 0x28) = param_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_param_value_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2"
            },
            "code": "int return_zero_000811c2() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "return_zero_000811c6",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_zero_000811c6(void)\n{\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "return_zero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_block_00083d00",
                "param_1": "memory_pool_start",
                "param_2": "requested_size",
                "iVar1": "memory_pool_start_address",
                "puVar2": "data_segment_address",
                "iVar3": "previous_block_end_address",
                "uVar4": "block_header",
                "iVar5": "block_start_address"
            },
            "code": "int allocate_memory_block_00083d00(uint32_t* memory_pool_start, int requested_size) {\n  int previous_block_end = 0;\n  int memory_pool_start_address = DAT_00083d90;\n  do_nothing_00082598();\n  uint32_t block_header = *(uint32_t *)(*(int *)(memory_pool_start_address + 8) + 4) & 0xfffffffc;\n  int block_start_address = ((block_header - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < block_start_address) {\n    int previous_block_end_address = get_previous_block_end_address_00082970(memory_pool_start, 0);\n    if (previous_block_end_address == *(int *)(memory_pool_start_address + 8) + block_header) {\n      previous_block_end_address = get_previous_block_end_address_00082970(memory_pool_start, -block_start_address);\n      undefined* data_segment_address = PTR_DAT_00083d94;\n      if (previous_block_end_address != -1) {\n        int new_block_end_address = *(int *)PTR_DAT_00083d94;\n        *(uint32_t *)(*(int *)(memory_pool_start_address + 8) + 4) = block_header - block_start_address | 1;\n        *(int *)data_segment_address = new_block_end_address - block_start_address;\n        do_nothing_0008259c(memory_pool_start);\n        return 1;\n      }\n      block_start_address = get_previous_block_end_address_00082970(memory_pool_start, 0);\n      data_segment_address = PTR_DAT_00083d94;\n      block_header = block_start_address - *(int *)(memory_pool_start_address + 8);\n      if (0xf < (int)block_header) {\n        int previous_block_end_address = *DAT_00083d98;\n        *(uint32_t *)(*(int *)(memory_pool_start_address + 8) + 4) = block_header | 1;\n        *(int *)data_segment_address = block_start_address - previous_block_end_address;\n      }\n    }\n  }\n  do_nothing_0008259c(memory_pool_start);\n  return 0;\n}",
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083d00"
        }
    },
    "used_tokens": 97019,
    "layers": [
        [
            "FUN_00081042",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_00080f9c",
            "FUN_00081454",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080d2e",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "thunk_FUN_00081714",
            "FUN_00081714",
            "FUN_0008477c",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081d5c",
            "FUN_000811be",
            "FUN_000825a0",
            "FUN_000811cc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_000803d4",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080da0",
            "FUN_00082438",
            "FUN_0008105c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6"
        ],
        [
            "FUN_00080ce0",
            "FUN_00083b14",
            "FUN_00081210",
            "FUN_00084728",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00081c5c",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00084750",
            "FUN_00082970",
            "FUN_000815d4",
            "FUN_000846dc",
            "FUN_00080410",
            "FUN_00081622",
            "FUN_00081508",
            "FUN_0008456c"
        ],
        [
            "FUN_00081c94",
            "FUN_000842a4",
            "FUN_00080c0c",
            "FUN_00081318",
            "FUN_0008449c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00084464",
            "FUN_00083d00"
        ],
        [
            "FUN_00083d9c",
            "FUN_00081ca8",
            "FUN_000801b0",
            "FUN_00080ae4",
            "FUN_00080164",
            "FUN_00080258"
        ],
        [
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00081e04",
            "FUN_00083adc",
            "FUN_0008043e",
            "FUN_00083808"
        ],
        [
            "FUN_000816a8",
            "FUN_000815fe",
            "FUN_000846a4",
            "FUN_000844c4",
            "FUN_0008378c",
            "FUN_0008160c"
        ],
        [
            "FUN_00083c40",
            "FUN_0008165c"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ]
    ],
    "locked_functions": []
}