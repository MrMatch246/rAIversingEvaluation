{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPtr)\n\n{\n  int returnValue;\n  \n  *dataPtr = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPtr + 6)) {\n    update_parameter_and_bitwise_operation_00081210(*(byte *)((int)dataPtr + 6),1);\n    update_parameter_and_bitwise_operation_00081318(*(undefined *)((int)dataPtr + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPtr + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPtr + 0x49) = 0;\n  *(undefined *)((int)dataPtr + 0x4a) = 0;\n  *(undefined2 *)(dataPtr + 0x15) = 0;\n  *(undefined2 *)((int)dataPtr + 0x52) = 0;\n  *(undefined2 *)(dataPtr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPtr",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isOverLimit;\n  undefined newValue;\n  char charValue;\n  int result;\n  byte bytesCounter;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameter_and_bitwise_operation_00081318(*(byte *)((int)data + 6),0);\n  }\n  isOverLimit = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (result = (**(code **)(**data + 8))(), result != 0) {\n      bytesCounter = *(byte *)((int)data + 0x49);\n      newValue = (**(code **)(**data + 0xc))();\n      charValue = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + bytesCounter + 9) = newValue;\n      bytesCounter = charValue + 1;\n      *(byte *)((int)data + 0x49) = bytesCounter;\n      if (0x3f < bytesCounter) {\n        isOverLimit = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverLimit) {\n    charValue = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    charValue = *(char *)((int)data + 0x49);\n  }\n  return (int)charValue;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isOverLimit",
                "uVar2": "newValue",
                "cVar3": "charValue",
                "iVar4": "result",
                "bVar5": "bytesCounter"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_count;\n  uint bit_check;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_count = '\\b';\n    do {\n      bit_check = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_check != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_count = bit_count + -1;\n    } while (bit_count != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_start",
                "param_2": "data_length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_count",
                "uVar4": "bit_check"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_increment_00080258",
            "code": "\nvoid updateChecksumAndIncrement_00080258(int **ptrArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte currentByte;\n  undefined2 checksum;\n  int result;\n  uint byteValue;\n  \n  currentByte = *(byte *)((int)ptrArray + 0x49);\n  byteValue = (uint)currentByte;\n  checksum = calculate_checksum_0008021c(ptrArray,byteValue,param3,param4,param4);\n  *(char *)((int)ptrArray + byteValue + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)ptrArray + (byteValue + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)ptrArray + 0x49) = currentByte + 2;\n  if (1 < *(byte *)((int)ptrArray + 6)) {\n    update_parameter_and_bitwise_operation_00081318(*(byte *)((int)ptrArray + 6),1);\n  }\n  if (*(byte *)((int)ptrArray + 5) < 4) {\n    (**(code **)(**ptrArray + 4))(*ptrArray,(int)ptrArray + 9,*(undefined *)((int)ptrArray + 0x49));\n  }\n  if (1 < *(byte *)((int)ptrArray + 6)) {\n    update_parameter_and_bitwise_operation_00081318(*(byte *)((int)ptrArray + 6),0);\n  }\n  if (*(byte *)((int)ptrArray + 5) < 4) {\n    do {\n      result = (**(code **)(**ptrArray + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)ptrArray + 0x49) = 0;\n  result = get_global_data_thunk_00081714();\n  ptrArray[0x17] = (int *)(result + (uint)*(ushort *)((int)ptrArray + 0x56));\n  *(short *)((int)ptrArray + 0x52) = *(short *)((int)ptrArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_increment_00080258",
                "param_1": "ptrArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "currentByte",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "byteValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_data_000802da",
            "code": "\nint processData_000802da(int inputAddress,uint value1,uint value2,ushort *dataPointer)\n\n{\n  char errorCode;\n  byte byteValue;\n  undefined tempValue;\n  ushort tempValue2;\n  uint tempValue3;\n  ushort *pointer;\n  undefined lowerByte;\n  undefined upperByte;\n  ushort ushortValue;\n  \n  lowerByte = (undefined)value1;\n  upperByte = (undefined)(value1 >> 8);\n  ushortValue = (ushort)value2;\n  tempValue3 = value2 & 0xffff;\n  if (*(char *)(inputAddress + 4) != '\\0') {\n    errorCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(inputAddress + 7) != '\\0') {\n    errorCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((value1 & 0xff) - 1 & 0xff)) {\n    errorCode = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(inputAddress + 9) = lowerByte;\n  *(undefined *)(inputAddress + 10) = upperByte;\n  *(ushort **)(inputAddress + 0x4c) = dataPointer;\n  *(char *)(inputAddress + 0xb) = (char)(value1 >> 0x18);\n  *(char *)(inputAddress + 0xc) = (char)(value1 >> 0x10);\n  tempValue = (undefined)(value2 >> 8);\n  switch(upperByte) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(inputAddress + 0xd) = tempValue;\n    break;\n  case 5:\n    tempValue2 = *dataPointer;\n    if (tempValue2 != 0) {\n      tempValue2 = 1;\n    }\n    *(char *)(inputAddress + 0xd) = -(char)tempValue2;\n    tempValue3 = 0;\n    break;\n  case 6:\n    *(char *)(inputAddress + 0xd) = (char)(*dataPointer >> 8);\n    tempValue3 = (uint)*dataPointer;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteValue = (byte)(ushortValue >> 3) & 0xfe;\n    if ((value2 & 0xf) != 0) {\n      byteValue = byteValue + 1;\n    }\n    *(char *)(inputAddress + 0xe) = (char)value2;\n    *(undefined *)(inputAddress + 0xd) = tempValue;\n    *(byte *)(inputAddress + 0xf) = byteValue;\n    tempValue = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(inputAddress + 0xd) = tempValue;\n    *(char *)(inputAddress + 0xe) = (char)value2;\n    dataPointer = dataPointer + -1;\n    *(char *)(inputAddress + 0xf) = (char)tempValue3 * '\\x02';\n    *(undefined *)(inputAddress + 0x49) = 7;\n    pointer = dataPointer + tempValue3;\n    while (dataPointer != pointer) {\n      byteValue = *(byte *)(inputAddress + 0x49);\n      *(char *)(inputAddress + (uint)byteValue + 9) = (char)(dataPointer[1] >> 8);\n      tempValue3 = byteValue + 1 & 0xff;\n      *(char *)(inputAddress + 0x49) = (char)tempValue3;\n      dataPointer = dataPointer + 1;\n      *(char *)(tempValue3 + inputAddress + 9) = (char)*dataPointer;\n      *(byte *)(inputAddress + 0x49) = byteValue + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(inputAddress + 0xe) = (char)tempValue3;\n  tempValue = 6;\nLAB_0008034a:\n  *(undefined *)(inputAddress + 0x49) = tempValue;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_increment_00080258(inputAddress);\n  *(undefined *)(inputAddress + 7) = 1;\n  errorCode = '\\0';\nLAB_000803cc:\n  return (int)errorCode;\n}\n\n",
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "param_1": "inputAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "dataPointer",
                "cVar1": "errorCode",
                "bVar2": "byteValue",
                "uVar3": "tempValue",
                "uVar4": "tempValue2",
                "uVar5": "tempValue3",
                "puVar6": "pointer",
                "local_1c": "lowerByte",
                "local_1b": "upperByte",
                "local_18": "ushortValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_unique_byte_000803d4",
            "code": "\nundefined4 check_unique_byte_000803d4(int data)\n\n{\n  int index;\n  \n  if ((int)((uint)*(target_byte *)(data + 10) << 0x18) < 0) {\n    *(short *)(data + 0x54) = *(short *)(data + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(target_byte *)(data + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(data + 0x54) = *(short *)(data + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_unique_byte_000803d4",
                "param_1": "data",
                "iVar1": "index",
                "byte": "target_byte"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined2 combinedValue;\n  int computedIndex;\n  byte counter;\n  uint convertedCounter;\n  int arrayPointer;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataPointer + 0xb) >> 1 <= convertedCounter) break;\n    computedIndex = (convertedCounter * 2 + 3 & 0xff) + dataPointer;\n    arrayPointer = *(int *)(dataPointer + 0x4c);\n    combinedValue = combine_values_000815f8(*(undefined *)(computedIndex + 9),*(undefined *)(computedIndex + 10),computedIndex,\n                         *(byte *)(dataPointer + 0xb),value3);\n    *(undefined2 *)(arrayPointer + convertedCounter * 2) = combinedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "combinedValue",
                "iVar2": "computedIndex",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "arrayPointer"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint process_data_0008043e(int **input_params)\n\n{\n  char result;\n  uint len_result;\n  int *global_data;\n  int check_result;\n  uint unencrypted_byte;\n  \n  if (*(byte *)((int)input_params + 5) < 4) {\n    len_result = (**(code **)(**input_params + 8))();\n    unencrypted_byte = len_result & 0xff;\n  }\n  global_data = (int *)get_global_data_thunk_00081714();\n  if (input_params[0x17] < global_data) {\n    *(undefined *)(input_params + 2) = 0xff;\n    *(undefined *)((int)input_params + 7) = 0;\n    *(short *)(input_params + 0x15) = *(short *)(input_params + 0x15) + 1;\n  }\n  else if (7 < unencrypted_byte) {\n    process_data_0008043e_000801b0(input_params);\n    check_result = check_unique_byte_000803d4(input_params);\n    if (check_result == 0) {\n      if (*(byte *)((int)input_params + 10) - 3 < 2) {\n        process_data_0008043e_00080410(input_params);\n      }\n      *(undefined *)((int)input_params + 7) = 0;\n      result = *(char *)((int)input_params + 0x49);\n    }\n    else {\n      *(undefined *)((int)input_params + 7) = 0;\n      result = (char)check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "input_params",
                "cVar1": "result",
                "uVar2": "len_result",
                "piVar3": "global_data",
                "iVar4": "check_result",
                "unaff_r6": "unencrypted_byte"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_configuration_000804a8",
            "code": "\nundefined8 initialize_system_configuration_000804a8(void)\n\n{\n  int iVar1;\n  \n  update_parameter_and_bitwise_operation(1,0);\n  update_parameter_and_bitwise_operation(6,1);\n  update_parameter_and_bitwise_operation(0,1);\n  update_parameter_and_bitwise_operation(1,1);\n  update_parameter_and_bitwise_operation_2(0,0);\n  update_parameter_and_bitwise_operation_2(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_data();\n  iVar1 = get_global_data();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_global_data();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_global_data();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_global_data();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_configuration_000804a8",
                "update_parameter_and_bitwise_operation_00081210": "update_parameter_and_bitwise_operation",
                "update_parameter_and_bitwise_operation_00081318": "update_parameter_and_bitwise_operation_2",
                "initialize_data_00080164": "initialize_data",
                "get_global_data_thunk_00081714": "get_global_data"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint globalData;\n  undefined4 hashValue1;\n  undefined4 floatNum1;\n  undefined4 modifiedFloat;\n  undefined4 floatNum2;\n  int tempVar;\n  uint *pointerVar1;\n  undefined4 *pointerVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    globalData = get_global_data_thunk_00081714();\n    if (DAT_200708c8 < globalData) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      process_data_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = compute_endianness_and_bitwise_shift_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_hash_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = compute_endianness_and_bitwise_shift_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      process_data_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointerVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      process_data_000802da(&DAT_200709e4,*pointerVar2,pointerVar2[1],pointerVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointerVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      process_data_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_data_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointerVar1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointerVar1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (globalData = get_global_data_thunk_00081714(), DAT_200708c0 < globalData))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      tempVar = get_global_data_thunk_00081714();\n      DAT_200708c0 = tempVar + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      globalData = get_global_data_thunk_00081714();\n      if (DAT_200708c0 < globalData) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_global_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointerVar1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      globalData = get_global_data_thunk_00081714();\n      if (DAT_200708c0 < globalData) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_global_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  globalData = get_global_data_thunk_00081714();\n  if (DAT_200709e0 < globalData) {\n    hashValue1 = calculate_hash_0008189c(DAT_20070940);\n    floatNum1 = calculate_floating_point_number_00081730(hashValue1,DAT_200709c8);\n    hashValue1 = DAT_200708c4;\n    DAT_20070930 = floatNum1;\n    modifiedFloat = calculate_modified_float_00081734(floatNum1,DAT_200708c4);\n    modifiedFloat = calculate_floating_point_00081944(modifiedFloat,DAT_2007094c);\n    modifiedFloat = calculate_modified_float_00081734(modifiedFloat,DAT_20070914);\n    DAT_2007094c = modifiedFloat;\n    hashValue1 = calculate_floating_point_number_00081730(floatNum1,hashValue1);\n    hashValue1 = calculate_floating_point_00081944(hashValue1,DAT_200709c4);\n    hashValue1 = calculate_floating_point_number_00081730(hashValue1,DAT_2007096c);\n    DAT_200709c4 = hashValue1;\n    floatNum2 = calculate_floating_point_00081944(floatNum1,DAT_20070a4c);\n    floatNum2 = calculate_modified_float_00081734(floatNum2,modifiedFloat);\n    calculate_modified_float_00081734(floatNum2,hashValue1);\n    DAT_20070910 = convert_integer_00081cd0();\n    DAT_2007091c = calculate_hash_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = floatNum1;\n    DAT_20070914 = modifiedFloat;\n    DAT_2007096c = hashValue1;\n    tempVar = get_global_data_thunk_00081714();\n    DAT_200709e0 = tempVar + DAT_20070970;\n  }\n  hashValue1 = calculate_hash_0008189c(DAT_20070970);\n  tempVar = check_carry_and_zero_00081ca8(DAT_2007091c,hashValue1);\n  if (tempVar != 0) {\n    DAT_2007091c = hashValue1;\n  }\n  tempVar = check_concatenation_result_00081c94(DAT_2007091c,0);\n  if (tempVar != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = compute_decoded_value_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "globalData",
                "uVar2": "hashValue1",
                "uVar3": "floatNum1",
                "uVar4": "modifiedFloat",
                "uVar5": "floatNum2",
                "iVar6": "tempVar",
                "puVar7": "pointerVar1",
                "puVar8": "pointerVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_relocation_info_00080a68",
            "code": "\nvoid initialize_relocation_info_00080a68(void)\n\n{\n  initialize_relocation_data_00081682(&DAT_20070954,\"\");\n  update_relocation_entry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_relocation_info_00080a68",
                "update_relocation_entry_00081d5c": "update_relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int counter1;\n  int counter2;\n  \n  initializeMemory();\n  _DAT_e000e014 = someArray[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  executeSeveralFunctions();\n  counter1 = 0;\n  do {\n    counter2 = counter1 + 1;\n    updateParameterAndBitwiseOperation(counter1,0);\n    counter1 = counter2;\n  } while (counter2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  updateParameter(0x400e0e00,1,0x300,0);\n  updateParameterAndBitwiseOperation(0,1);\n  updateParameter(0x400e0e00,1,0xc00,0);\n  updateParameter(0x400e0e00,1,0x3000,0);\n  updateParameter(0x400e1400,2,0x30,0);\n  updateParameter(0x400e1000,1,0xc00,0);\n  updateParameter(0x400e0e00,1,3,0);\n  updateParameter(0x400e1000,1,0xc000,0);\n  setBit(0x25);\n  calculateThreshold(0x400c0000,someArray[6].r_offset,20000000,0xc);\n  updateFlags(0x400c0000,0,0x300000,1);\n  updateValueWithMask(0x400c0000,0,0);\n  setParamValue(0x400c0000,0xffffffff);\n  setParamValueToFFFF(0x400c0000);\n  endFunction;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "initialize_memory_00080e9c": "initializeMemory",
                "Elf32_Rel_ARRAY_20070000": "someArray",
                "execute_several_functions_00081d7c": "executeSeveralFunctions",
                "iVar1": "counter1",
                "iVar2": "counter2",
                "update_parameter_and_bitwise_operation_00081318": "updateParameterAndBitwiseOperation",
                "update_parameter_00080da0": "updateParameter",
                "set_bit_00080e18": "setBit",
                "calculate_threshold_00080f9c": "calculateThreshold",
                "update_flags_00081042": "updateFlags",
                "update_value_with_mask_00081034": "updateValueWithMask",
                "set_param_value_0008106e": "setParamValue",
                "set_param_value_to_ffff_00081066": "setParamValueToFFFF",
                "return": "endFunction"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_system_00080c0c",
            "code": "\nvoid initialize_system_00080c0c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  initialize_memory_000813a8(&DAT_20070b84);\n  initialize_memory_000813a8(&DAT_20070ad8);\n  initialize_function_parameters_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,arg3);\n  initialize_memory_000813a8(&DAT_20070de4);\n  initialize_memory_000813a8(&DAT_20070e6c);\n  initialize_memory_000813a8(&DAT_20070ef4);\n  initialize_memory_000813a8(&DAT_20070a50);\n  initialize_memory_000813a8(&DAT_20070c84);\n  initialize_memory_000813a8(&DAT_20070d0c);\n  initialize_parameters_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_parameters_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_parameters_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_system_00080c0c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_update_data_00080ce0",
            "code": "\nvoid checkAndUpdateData_00080ce0(void)\n\n{\n  int iVar1;\n  \n  iVar1 = calculateDifference(&DAT_20070b60);\n  if (iVar1 != 0) {\n    FUNC_00080aa8();\n  }\n  iVar1 = calculateDifference(&DAT_20070c0c);\n  if (iVar1 != 0) {\n    FUNC_00080ab8();\n  }\n  iVar1 = calculateDifference(&DAT_20070c34);\n  if (iVar1 != 0) {\n    FUNC_00080aba();\n  }\n  iVar1 = calculateDifference(&DAT_20070c5c);\n  if (iVar1 != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_update_data_00080ce0",
                "calculate_difference_000813e4": "calculateDifference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_flag_value_00080d2e",
            "code": "\nvoid updateFlagValue_00080d2e(int baseAddress,undefined4 flagType,uint flagValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = flagValue;\n  switch(flagType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~flagValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | flagValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = flagValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_flag_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "flagType",
                "param_3": "flagValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_param_values_00080d54",
            "code": "\nvoid updateParamValues_00080d54(undefined4 *paramArray,undefined4 newValue,uint valueFlags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(valueFlags << 0x1f) < 0;\n  paramArray[0x11] = newValue;\n  if (isNegative) {\n    paramArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[0x18] = newValue;\n  }\n  isNegative = (valueFlags & 10) != 0;\n  if (isNegative) {\n    paramArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[9] = newValue;\n  }\n  if (((int)(valueFlags << 0x1e) < 0) || ((int)(valueFlags << 0x1c) < 0)) {\n    paramArray[0x20] = newValue;\n  }\n  paramArray[5] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_param_values_00080d54",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "valueFlags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_params_00080d7a",
            "code": "\nvoid updateParams_00080d7a(undefined4 *paramsArray,undefined4 newValue,int param3Condition,int param4Condition,int param5Condition)\n\n{\n  paramsArray[0x11] = newValue;\n  if (param5Condition == 0) {\n    paramsArray[0x18] = newValue;\n  }\n  else {\n    paramsArray[0x19] = newValue;\n  }\n  if (param4Condition == 0) {\n    paramsArray[0x15] = newValue;\n  }\n  else {\n    paramsArray[0x14] = newValue;\n  }\n  if (param3Condition == 0) {\n    paramsArray[0xd] = newValue;\n  }\n  else {\n    paramsArray[0xc] = newValue;\n  }\n  paramsArray[4] = newValue;\n  *paramsArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_params_00080d7a",
                "param_1": "paramsArray",
                "param_2": "newValue",
                "param_3": "param3Condition",
                "param_4": "param4Condition",
                "param_5": "param5Condition"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_00080da0",
            "code": "\nundefined4 updateParameter_00080da0(int deviceAddress,int parameterType,undefined4 newValue,uint flagValue)\n\n{\n  bool isNegative;\n  \n  switch(parameterType) {\n  case 1:\n  case 2:\n    updateFlagValue(deviceAddress,parameterType,newValue);\n    isNegative = (int)(flagValue << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(deviceAddress + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(deviceAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    updateParamValues(deviceAddress,newValue,flagValue,0x80d55,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    updateParameter_00080da0s(deviceAddress,newValue,parameterType == 5,(flagValue << 0x1d) >> 0x1f,flagValue & 1,parameterType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_00080da0",
                "param_1": "deviceAddress",
                "param_2": "parameterType",
                "param_3": "newValue",
                "param_4": "flagValue",
                "bVar1": "isNegative",
                "update_flag_value_00080d2e": "updateFlagValue",
                "update_param_values_00080d54": "updateParamValues",
                "update_params_00080d7a": "updateParameters"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_intersection_00080e04",
            "code": "\nuint checkIntersection_00080e04(int objectPointer,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(objectPointer + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(objectPointer + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_intersection_00080e04",
                "param_1": "objectPointer",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "set_bit_00080e18",
            "code": "\n\n\nundefined4 setBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  symbol_table[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "symbol_table"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  initialize_system_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *result,uint totalSize,int blockSize,int thresholdMultiplier)\n\n{\n  uint numBlocks;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  numBlocks = totalSize / (uint)(blockSize * 2);\n  if (totalSize == blockSize * 2 * numBlocks) {\n    numBlocks = numBlocks - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(thresholdMultiplier * (int)(((ulonglong)totalSize / (ulonglong)((numBlocks + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (numBlocks & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "result",
                "param_2": "totalSize",
                "param_3": "blockSize",
                "param_4": "thresholdMultiplier",
                "local_58": "thresholds",
                "uVar1": "numBlocks",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_value_with_mask_00081034",
            "code": "\nvoid updateValueWithMask_00081034(int dataAddress,uint newValue,uint mask)\n\n{\n  *(uint *)(dataAddress + 4) = newValue | *(uint *)(dataAddress + 4) | (mask & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_value_with_mask_00081034",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "param_3": "mask"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid updateFlags_00081042(int baseAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value2 | *(uint *)(baseAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_param_value_to_ffff_00081066",
            "code": "\nvoid setParamValueToFFFF_00081066(int param)\n\n{\n  *(undefined4 *)(param + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_param_value_to_ffff_00081066",
                "param_1": "param"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "return_zero_00081184",
            "code": "\nundefined4 return_zero_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_new_value_0008118c",
            "code": "\nint calculateNewValue_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_new_value_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_status_000811ae",
            "code": "\nundefined4 get_default_status_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_status_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param_ptr,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param_ptr",
                "param_2": "memory_address"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_000811be",
            "code": "\nundefined4 initialize_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nundefined4 initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "check_status_000811c6",
            "code": "\nundefined4 check_status_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "check_status_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "process_data_000811cc",
            "code": "\n\n\nuint processData_000811cc(undefined4 status,int data,uint size)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)size; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(data + index);\n  }\n  return size & ~((int)size >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "status",
                "param_2": "data",
                "param_3": "size",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_data_thunk_00081714",
            "code": "\nundefined4 getGlobalData_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_data_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_parameter_and_bitwise_operation_00081210",
            "code": "\n\n\nint updateParameterAndBitwiseOperation_00081210(int inputParam1,int inputParam2)\n\n{\n  int returnValue;\n  uint tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  byte bitVar1;\n  byte bitVar2;\n  int tempVar1;\n  int tempVar2;\n  \n  returnValue = inputParam1;\n  if ((&DAT_00084d24)[inputParam1 * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputParam1] & 0xf) == 4) {\n      returnValue = set_bit_0008105c(0x400c0000,(&DAT_00084d31)[inputParam1 * 0x1c]);\n    }\n    bitVar2 = (&DAT_20070d94)[inputParam1];\n    bitVar1 = bitVar2 & 0xf;\n    if ((bitVar1 < 3) && (bitVar2 != 0)) {\n      if (bitVar1 == 2) {\n        if (inputParam2 == 0) {\n          return returnValue;\n        }\n      }\n      else if (bitVar1 == 1) {\n        if (inputParam2 == 2) {\n          return returnValue;\n        }\n      }\n      else if (bitVar1 == 3) {\n        if (inputParam2 == 1) {\n          return returnValue;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (inputParam2 != 1) {\nLAB_0008126c:\n      if (inputParam2 == 0) {\n        returnValue = inputParam1 * 0x1c;\n        set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),0);\n        bitVar2 = (&DAT_20070d94)[inputParam1] & 0xf0 | 2;\n      }\n      else {\n        if (inputParam2 != 2) {\n          return returnValue;\n        }\n        returnValue = inputParam1 * 0x1c;\n        set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + returnValue));\n        returnValue = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + returnValue),3,\n                             *(undefined4 *)(&DAT_00084d1c + returnValue),1);\n        bitVar2 = (&DAT_20070d94)[inputParam1] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[inputParam1] = bitVar2;\n      return returnValue;\n    }\n    tempVar1 = inputParam1 * 0x1c;\n    tempVar2 = *(int *)(&DAT_00084d18 + tempVar1);\n    if (bitVar2 >> 4 == 0) {\n      tempVar4 = 4;\n    }\n    else {\n      tempVar4 = 5;\n    }\n    returnValue = update_parameter_00080da0(tempVar2,tempVar4,*(undefined4 *)(&DAT_00084d1c + tempVar1),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar1));\n    (&DAT_20070d94)[inputParam1] = (&DAT_20070d94)[inputParam1] & 0xf0 | 3;\n    if (*(int *)(tempVar2 + 0x18) == -1) {\n      tempVar3 = *(uint *)(&DAT_00084d20 + tempVar1);\n      if (0x2c < tempVar3) {\n        return 1;\n      }\n      if (tempVar3 < 0x20) {\n        tempVar3 = 1 << (tempVar3 & 0xff);\n        tempVar5 = _DAT_400e0618 & tempVar3;\n        if (tempVar5 == tempVar3) {\n          _DAT_400e0614 = tempVar5;\n        }\n      }\n      else {\n        tempVar3 = 1 << (tempVar3 - 0x20 & 0xff);\n        tempVar5 = _DAT_400e0708 & tempVar3;\n        if (tempVar5 == tempVar3) {\n          _DAT_400e0704 = tempVar5;\n        }\n      }\n      return 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_parameter_and_bitwise_operation_00081210",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "returnValue",
                "iVar7": "tempVar1",
                "iVar8": "tempVar2",
                "uVar2": "tempVar3",
                "uVar3": "tempVar4",
                "uVar4": "tempVar5",
                "bVar5": "bitVar1",
                "bVar6": "bitVar2"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_parameter_and_bitwise_operation_00081318",
            "code": "\nvoid updateParameterAndBitwiseOperation_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int address;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_parameter_and_bitwise_operation_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = check_intersection_00080e04(address,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = data;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = data;\n      return;\n    }\n    update_params_00080d7a(address,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_parameter_and_bitwise_operation_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "address"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "check_and_update_relocation_00081388",
            "code": "\nvoid checkAndUpdateRelocation_00081388(void)\n\n{\n  if ((relArray[6].relInfo != 0xffffffff) &&\n     (relArray[6].relInfo = relArray[6].relInfo - 1,\n     relArray[6].relInfo == 0)) {\n    (*(functionToExecute *)((int)&relArray[0].relOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "check_and_update_relocation_00081388",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relInfo",
                "r_offset": "relOffset",
                "code": "functionToExecute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  fillMemoryWithByte(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress",
                "fill_memory_with_byte_00082504": "fillMemoryWithByte"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_store_value_000813c2",
            "code": "\nvoid updateAndStoreValue_000813c2(int baseAddress,undefined newValue)\n\n{\n  uint currentOffset;\n  \n  currentOffset = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (currentOffset != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = currentOffset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_store_value_000813c2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "currentOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataOffset,undefined4 newData)\n\n{\n  int ptr1;\n  uint tempVar;\n  \n  ptr1 = *(int *)(dataOffset + 0x14);\n  if ((*(int *)(*(int *)(dataOffset + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataOffset + 0x18) + 0x1c) = newData;\n  }\n  else {\n    tempVar = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)tempVar < 0) {\n      tempVar = (tempVar - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == tempVar);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)newData;\n    *(uint *)(*(int *)(dataOffset + 0x14) + 0x80) = tempVar;\n    *(undefined4 *)(*(int *)(dataOffset + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataOffset",
                "param_2": "newData",
                "iVar1": "ptr1",
                "uVar2": "tempVar"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_parameters_000814e4",
            "code": "\nvoid initializeFunctionParameters_000814e4(undefined4 *functionParams,undefined4 param2,undefined param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  functionParams[1] = 0;\n  functionParams[2] = 1000;\n  functionParams[6] = param2;\n  *functionParams = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(functionParams + 7) = param3;\n  functionParams[4] = param5;\n  functionParams[8] = param4;\n  functionParams[5] = param6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_parameters_000814e4",
                "param_1": "functionParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_components_00081508",
            "code": "\nvoid initializeComponents_00081508(int param1,uint param2,undefined4 param3)\n\n{\n  int index;\n  undefined4 *componentArray;\n  \n  set_bit_00080e18(*(undefined4 *)(param1 + 0x20));\n  componentArray = *(undefined4 **)(param1 + 0x18);\n  componentArray[0x48] = 0x202;\n  *componentArray = 0xac;\n  componentArray[1] = param3;\n  componentArray[8] = relArray[6].r_offset / param2 >> 4;\n  componentArray[3] = 0xffffffff;\n  componentArray[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  index = *(int *)(param1 + 0x10);\n  *(undefined4 *)(index + 0x84) = 0;\n  *(undefined4 *)(index + 0x80) = 0;\n  index = *(int *)(param1 + 0x14);\n  *(undefined4 *)(index + 0x84) = 0;\n  *(undefined4 *)(index + 0x80) = 0;\n  *componentArray = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_components_00081508",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar2": "componentArray",
                "iVar1": "index",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_parameters_000815d4",
            "code": "\nundefined4 * initializeParameters_000815d4(undefined4 *parameterArray,undefined4 inputParameter)\n\n{\n  initialize_function_parameters_000814e4();\n  *parameterArray = &PTR_update_data_00081454_1_000857d8;\n  parameterArray[9] = inputParameter;\n  return parameterArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_parameters_000815d4",
                "param_1": "parameterArray",
                "param_2": "inputParameter",
                "param_1[9]": "parameterArray[9]"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "update_relocation_info_000815fe",
            "code": "\nundefined4 * update_relocation_info_000815fe(undefined4 *relocated_data)\n\n{\n  update_relocation_info_000815fe_00081e04(*relocated_data);\n  return relocated_data;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "update_relocation_info_000815fe",
                "param_1": "relocated_data"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_relocation_data_0008160c",
            "code": "\nvoid reset_relocation_data_0008160c(int *relocation_data)\n\n{\n  if (*relocation_data != 0) {\n    update_relocation_info();\n  }\n  *relocation_data = 0;\n  relocation_data[2] = 0;\n  relocation_data[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_relocation_data_0008160c",
                "param_1": "relocation_data",
                "update_relocation_info_00081e04": "update_relocation_info"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "relocate_symbol_00081622",
            "code": "\nint relocateSymbol_00081622(int *symbol,int index,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  \n  result = relocate_symbols_000825a0(*symbol,index + 1,arg1,arg2,arg2);\n  if (result != 0) {\n    *symbol = result;\n    symbol[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "relocate_symbol_00081622",
                "param_1": "symbol",
                "param_2": "index",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_relocation_0008163a",
            "code": "\nundefined4 check_relocation_0008163a(int *ptr_array,uint value)\n\n{\n  int result;\n  \n  if ((*ptr_array == 0) || ((uint)ptr_array[1] < value)) {\n    result = relocate_symbol_00081622(ptr_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (ptr_array[2] == 0) {\n      *(undefined *)*ptr_array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_relocation_0008163a",
                "param_1": "ptr_array",
                "param_2": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_relocation_data_0008165c",
            "code": "\nundefined4 * updateRelocationData_0008165c(undefined4 *relocationData,undefined4 sourceString,undefined4 newData)\n\n{\n  int relocationStatus;\n  \n  relocationStatus = check_relocation_0008163a(relocationData,newData);\n  if (relocationStatus == 0) {\n    reset_relocation_data_0008160c(relocationData);\n  }\n  else {\n    relocationData[2] = newData;\n    copy_string_00082994(*relocationData,sourceString);\n  }\n  return relocationData;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_relocation_data_0008165c",
                "param_1": "relocationData",
                "param_2": "sourceString",
                "param_3": "newData",
                "iVar1": "relocationStatus"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_relocation_data_00081682",
            "code": "\nundefined4 * initialize_relocation_data_00081682(undefined4 *relocation_data,int input_value)\n\n{\n  undefined4 count_leading_zeroes_result;\n  \n  *relocation_data = 0;\n  relocation_data[1] = 0;\n  relocation_data[2] = 0;\n  if (input_value != 0) {\n    count_leading_zeroes_result = count_leading_zeroes_00082a50(input_value);\n    update_relocation_data_0008165c(relocation_data,input_value,count_leading_zeroes_result);\n  }\n  return relocation_data;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_relocation_data_00081682",
                "param_1": "relocation_data",
                "param_2": "input_value",
                "uVar1": "count_leading_zeroes_result"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "initialize_system_000816a8",
            "code": "\nvoid initialize_system_000816a8(void)\n\n{\n  initialize_data();\n  initialize_system_000816a8_components();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  configure_system_settings();\n  do {\n    process_data();\n    check_and_update_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "initialize_system_000816a8",
                "initialize_data_000816d4": "initialize_data",
                "initialize_system_00080ae4": "initialize_system_components",
                "initialize_system_configuration_000804a8": "configure_system_settings",
                "process_data_000805d0": "process_data",
                "check_and_update_data_00080ce0": "check_and_update_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_value_00081714",
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_number_00081730",
            "code": "\nuint calculateFloatingPointNumber_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int signBit;\n  int temp;\n  uint exponentBits1;\n  uint exponentBits2;\n  uint mantissaBits1;\n  uint mantissaBits2;\n  uint difference;\n  bool isZero;\n  \n  exponentBits1 = input2 ^ 0x80000000;\n  mantissaBits1 = input1 << 1;\n  isZero = mantissaBits1 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = mantissaBits1 == input4;\n  }\n  signBit = (int)mantissaBits1 >> 0x18;\n  if (!isZero) {\n    isZero = signBit == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    temp = (int)(input2 << 1) >> 0x18;\n    if (signBit == -1 || temp == -1) {\n      mantissaBits1 = exponentBits1;\n      if (signBit == -1) {\n        mantissaBits1 = input1;\n      }\n      if (signBit != -1 || temp != -1) {\n        exponentBits1 = mantissaBits1;\n      }\n      isZero = (mantissaBits1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (exponentBits1 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = mantissaBits1 == exponentBits1;\n      }\n      if (!isZero) {\n        mantissaBits1 = mantissaBits1 | 0x400000;\n      }\n      return mantissaBits1;\n    }\n    if (((input1 ^ exponentBits1) & 0x7fffffff) != 0) {\n      if (mantissaBits1 == 0) {\n        input1 = exponentBits1;\n      }\n      return input1;\n    }\n    if (input1 != exponentBits1) {\n      return 0;\n    }\n    if ((mantissaBits1 & 0xff000000) == 0) {\n      exponentBits1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        exponentBits1 = exponentBits1 | 0x80000000;\n      }\n      return exponentBits1;\n    }\n    if (mantissaBits1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  mantissaBits1 = mantissaBits1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - mantissaBits1;\n  isZero = difference != 0;\n  mantissaBits2 = mantissaBits1;\n  if (isZero && mantissaBits1 <= input4) {\n    mantissaBits2 = mantissaBits1 + difference;\n  }\n  if (isZero && mantissaBits1 <= input4) {\n    exponentBits1 = exponentBits1 ^ input1;\n  }\n  if (isZero && mantissaBits1 <= input4) {\n    input1 = input1 ^ exponentBits1;\n  }\n  if (isZero && mantissaBits1 <= input4) {\n    exponentBits1 = exponentBits1 ^ input1;\n  }\n  if (input4 < mantissaBits1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  mantissaBits1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    mantissaBits1 = -mantissaBits1;\n  }\n  exponentBits2 = exponentBits1 & 0xffffff | 0x800000;\n  if ((exponentBits1 & 0x80000000) != 0) {\n    exponentBits2 = -exponentBits2;\n  }\n  if (mantissaBits2 == difference) {\n    exponentBits2 = exponentBits2 ^ 0x800000;\n    if (mantissaBits2 == 0) {\n      mantissaBits1 = mantissaBits1 ^ 0x800000;\n      mantissaBits2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mantissaBits1 = mantissaBits1 + ((int)exponentBits2 >> (difference & 0xff));\n  exponentBits2 = exponentBits2 << (0x20 - difference & 0xff);\n  input1 = mantissaBits1 & 0x80000000;\n  if ((int)mantissaBits1 < 0) {\n    isZero = exponentBits2 != 0;\n    exponentBits2 = -exponentBits2;\n    mantissaBits1 = -mantissaBits1 - (uint)isZero;\n  }\n  if (mantissaBits1 < 0x800000) {\n    exponentBits1 = exponentBits2 & 0x80000000;\n    exponentBits2 = exponentBits2 << 1;\n    mantissaBits1 = mantissaBits1 * 2 + (uint)(exponentBits1 != 0);\n    exponentBits1 = mantissaBits2 - 2;\n    if ((mantissaBits1 & 0x800000) == 0) {\n      difference = LZCOUNT(mantissaBits1) - 8;\n      mantissaBits1 = mantissaBits1 << (difference & 0xff);\n      if ((int)exponentBits1 < (int)difference) {\n        mantissaBits1 = mantissaBits1 >> (-(exponentBits1 - difference) & 0xff);\n      }\n      else {\n        mantissaBits1 = mantissaBits1 + (exponentBits1 - difference) * 0x800000;\n      }\n      return mantissaBits1 | input1;\n    }\n  }\n  else {\n    exponentBits1 = mantissaBits2 - 1;\n    if (0xffffff < mantissaBits1) {\n      exponentBits1 = mantissaBits1 & 1;\n      mantissaBits1 = mantissaBits1 >> 1;\n      exponentBits2 = (uint)(exponentBits1 != 0) << 0x1f | exponentBits2 >> 1;\n      exponentBits1 = mantissaBits2;\n      if (0xfd < mantissaBits2) goto LAB_0008186a;\n    }\n  }\n  mantissaBits1 = mantissaBits1 + exponentBits1 * 0x800000 + (uint)(0x7fffffff < exponentBits2);\n  if (exponentBits2 == 0x80000000) {\n    mantissaBits1 = mantissaBits1 & 0xfffffffe;\n  }\n  return mantissaBits1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_number_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "signBit",
                "iVar2": "temp",
                "uVar3": "exponentBits1",
                "uVar4": "exponentBits2",
                "uVar5": "mantissaBits1",
                "uVar6": "mantissaBits2",
                "uVar7": "difference",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_modified_float_00081734",
            "code": "\nuint calculateModifiedFloat_00081734(uint inputFloat1,uint inputFloat2,undefined4 parameter3,uint parameter4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint shiftedFloat1;\n  uint shiftedFloat2;\n  uint tempFloat1;\n  uint tempFloat2;\n  bool isZero;\n  \n  shiftedFloat2 = inputFloat1 << 1;\n  isZero = shiftedFloat2 == 0;\n  if (!isZero) {\n    parameter4 = inputFloat2 << 1;\n    isZero = parameter4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedFloat2 == parameter4;\n  }\n  shiftedInput1 = (int)shiftedFloat2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)parameter4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(inputFloat2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedFloat2 = inputFloat2;\n      if (shiftedInput1 == -1) {\n        shiftedFloat2 = inputFloat1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        inputFloat2 = shiftedFloat2;\n      }\n      isZero = (shiftedFloat2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (inputFloat2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedFloat2 == inputFloat2;\n      }\n      if (!isZero) {\n        shiftedFloat2 = shiftedFloat2 | 0x400000;\n      }\n      return shiftedFloat2;\n    }\n    if (((inputFloat1 ^ inputFloat2) & 0x7fffffff) != 0) {\n      if (shiftedFloat2 == 0) {\n        inputFloat1 = inputFloat2;\n      }\n      return inputFloat1;\n    }\n    if (inputFloat1 != inputFloat2) {\n      return 0;\n    }\n    if ((shiftedFloat2 & 0xff000000) == 0) {\n      shiftedFloat2 = inputFloat1 << 1;\n      if ((inputFloat1 & 0x80000000) != 0) {\n        shiftedFloat2 = shiftedFloat2 | 0x80000000;\n      }\n      return shiftedFloat2;\n    }\n    if (shiftedFloat2 < 0xfe000000) {\n      return inputFloat1 + 0x800000;\n    }\n    inputFloat1 = inputFloat1 & 0x80000000;\nLAB_0008186a:\n    return inputFloat1 | 0x7f800000;\n  }\n  shiftedFloat2 = shiftedFloat2 >> 0x18;\n  parameter4 = parameter4 >> 0x18;\n  tempFloat2 = parameter4 - shiftedFloat2;\n  isZero = tempFloat2 != 0;\n  tempFloat1 = shiftedFloat2;\n  if (isZero && shiftedFloat2 <= parameter4) {\n    tempFloat1 = shiftedFloat2 + tempFloat2;\n  }\n  if (isZero && shiftedFloat2 <= parameter4) {\n    inputFloat2 = inputFloat2 ^ inputFloat1;\n  }\n  if (isZero && shiftedFloat2 <= parameter4) {\n    inputFloat1 = inputFloat1 ^ inputFloat2;\n  }\n  if (isZero && shiftedFloat2 <= parameter4) {\n    inputFloat2 = inputFloat2 ^ inputFloat1;\n  }\n  if (parameter4 < shiftedFloat2) {\n    tempFloat2 = -tempFloat2;\n  }\n  if (0x19 < tempFloat2) {\n    return inputFloat1;\n  }\n  shiftedFloat2 = inputFloat1 & 0xffffff | 0x800000;\n  if ((inputFloat1 & 0x80000000) != 0) {\n    shiftedFloat2 = -shiftedFloat2;\n  }\n  shiftedFloat1 = inputFloat2 & 0xffffff | 0x800000;\n  if ((inputFloat2 & 0x80000000) != 0) {\n    shiftedFloat1 = -shiftedFloat1;\n  }\n  if (tempFloat1 == tempFloat2) {\n    shiftedFloat1 = shiftedFloat1 ^ 0x800000;\n    if (tempFloat1 == 0) {\n      shiftedFloat2 = shiftedFloat2 ^ 0x800000;\n      tempFloat1 = 1;\n    }\n    else {\n      tempFloat2 = tempFloat2 - 1;\n    }\n  }\n  shiftedFloat2 = shiftedFloat2 + ((int)shiftedFloat1 >> (tempFloat2 & 0xff));\n  shiftedFloat1 = shiftedFloat1 << (0x20 - tempFloat2 & 0xff);\n  inputFloat1 = shiftedFloat2 & 0x80000000;\n  if ((int)shiftedFloat2 < 0) {\n    isZero = shiftedFloat1 != 0;\n    shiftedFloat1 = -shiftedFloat1;\n    shiftedFloat2 = -shiftedFloat2 - (uint)isZero;\n  }\n  if (shiftedFloat2 < 0x800000) {\n    tempFloat2 = shiftedFloat1 & 0x80000000;\n    shiftedFloat1 = shiftedFloat1 << 1;\n    shiftedFloat2 = shiftedFloat2 * 2 + (uint)(tempFloat2 != 0);\n    tempFloat2 = tempFloat1 - 2;\n    if ((shiftedFloat2 & 0x800000) == 0) {\n      tempFloat1 = LZCOUNT(shiftedFloat2) - 8;\n      shiftedFloat2 = shiftedFloat2 << (tempFloat1 & 0xff);\n      if ((int)tempFloat2 < (int)tempFloat1) {\n        shiftedFloat2 = shiftedFloat2 >> (-(tempFloat2 - tempFloat1) & 0xff);\n      }\n      else {\n        shiftedFloat2 = shiftedFloat2 + (tempFloat2 - tempFloat1) * 0x800000;\n      }\n      return shiftedFloat2 | inputFloat1;\n    }\n  }\n  else {\n    tempFloat2 = tempFloat1 - 1;\n    if (0xffffff < shiftedFloat2) {\n      tempFloat2 = shiftedFloat2 & 1;\n      shiftedFloat2 = shiftedFloat2 >> 1;\n      shiftedFloat1 = (uint)(tempFloat2 != 0) << 0x1f | shiftedFloat1 >> 1;\n      tempFloat2 = tempFloat1;\n      if (0xfd < tempFloat1) goto LAB_0008186a;\n    }\n  }\n  shiftedFloat2 = shiftedFloat2 + tempFloat2 * 0x800000 + (uint)(0x7fffffff < shiftedFloat1);\n  if (shiftedFloat1 == 0x80000000) {\n    shiftedFloat2 = shiftedFloat2 & 0xfffffffe;\n  }\n  return shiftedFloat2 | inputFloat1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_modified_float_00081734",
                "param_1": "inputFloat1",
                "param_2": "inputFloat2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "shiftedFloat1",
                "uVar4": "shiftedFloat2",
                "uVar5": "tempFloat1",
                "uVar6": "tempFloat2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "compute_endianness_and_bitwise_shift_00081894",
            "code": "\nuint computeEndiannessAndBitwiseShift_00081894(uint inputValue)\n\n{\n  uint leadingZerosCount;\n  uint shiftAmount;\n  int intermediateValue;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(inputValue);\n  shiftAmount = leadingZerosCount - 8;\n  intermediateValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZerosCount) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZerosCount = intermediateValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZerosCount = leadingZerosCount & 0xfffffffe;\n    }\n    return leadingZerosCount;\n  }\n  shiftAmount = inputValue << leadingZerosCount + 0x18;\n  leadingZerosCount = intermediateValue + ((inputValue >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZerosCount = leadingZerosCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00081894": "compute_endianness_and_bitwise_shift_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftAmount",
                "iVar3": "intermediateValue",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_hash_0008189c",
            "code": "\nuint calculateHash_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint isNegative;\n  int intermediateResult;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  intermediateResult = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    isNegative = intermediateResult + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  isNegative = intermediateResult + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "intermediateResult"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong lVar1;\n  uint result;\n  uint exponent1;\n  int sum;\n  int diff;\n  uint product;\n  int diff2;\n  uint exponent2;\n  bool isZero;\n  bool isNegative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      exponent2 = result;\n      if (((isZero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (exponent2 = input2, (input2 & 0x7fffff) != 0)))) {\n        return exponent2 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  exponent2 = input1 ^ input2;\n  exponent1 = input1 << 9;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = exponent2 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    diff2 = diff;\n    if (!isZero && 0x7e < sum) {\n      isNegative = SBORROW4(0xff,diff);\n      diff2 = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && diff2 < 0 == isNegative) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero && diff2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    isNegative = SBORROW4(diff,1);\n    exponent2 = sum - 0x80;\n    isZero = exponent2 == 0;\n    exponent1 = exponent2;\n  }\n  else {\n    lVar1 = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = exponent2 & 0x80000000 | result;\n    exponent2 = (sum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(exponent2,0xfd);\n    isZero = exponent2 == 0xfd;\n    exponent1 = exponent2 - 0xfd;\n    if (exponent2 < 0xfe) {\n      result = result + exponent2 * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)exponent1 < 0 != isNegative) {\n    isZero = (int)(exponent2 + 0x19) < 0;\n    if (exponent2 == 0xffffffe7 || isZero != SCARRY4(exponent2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (exponent2 != 0xffffffe7 && isZero == SCARRY4(exponent2,0x19)) {\n      exponent1 = (result << 1) >> (-exponent2 & 0xff);\n      exponent2 = result << (exponent2 + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | exponent2 << 1) == 0) {\n        exponent1 = exponent1 & ~(exponent2 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "exponent2",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "diff2",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_and_xor_00081bf4",
            "code": "\nuint check_overflow_and_xor_00081bf4(uint result,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint bitwise_OR_result;\n  bool is_zero;\n  \n  input_1_times_2 = result * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((result & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  bitwise_OR_result = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = bitwise_OR_result == 0;\n  if (!is_zero) {\n    bitwise_OR_result = result ^ input_2;\n    is_zero = bitwise_OR_result == 0;\n  }\n  is_negative = -1 < (int)bitwise_OR_result;\n  if (is_negative) {\n    result = input_1_times_2 + input_2 * -2;\n    is_zero = result == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    result = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    result = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    result = result | 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_and_xor_00081bf4",
                "param_1": "result",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "bitwise_OR_result",
                "bVar5": "is_zero",
                "bVar1": "is_negative"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_parameters_00081c54",
            "code": "\nvoid concatenateParameters_00081c54(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_00081c5c(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_parameters_00081c54",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  check_overflow_and_xor_00081bf4();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_concatenation_result_00081c94",
            "code": "\nbool check_concatenation_result_00081c94(void)\n\n{\n  undefined isConcatenationSuccessful;\n  undefined isConcatenationNeeded;\n  \n  concatenate_params_00081c5c();\n  return !(bool)isConcatenationNeeded || (bool)isConcatenationSuccessful;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_concatenation_result_00081c94",
                "in_ZR": "isConcatenationSuccessful",
                "in_CY": "isConcatenationNeeded"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_carry_and_zero_00081ca8",
            "code": "\nbool check_carry_and_zero_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  concatenate_parameters_00081c54();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_carry_and_zero_00081ca8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_integer_00081cd0",
            "code": "\nuint convertInteger_00081cd0(uint inputCopy)\n\n{\n  uint tempValue;\n  uint difference;\n  \n  if (inputCopy << 1 < 0x7f000000) {\n    return 0;\n  }\n  tempValue = (inputCopy << 1) >> 0x18;\n  difference = 0x9e - tempValue;\n  if (tempValue < 0x9f && difference != 0) {\n    tempValue = (inputCopy << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputCopy & 0x80000000) != 0) {\n      tempValue = -tempValue;\n    }\n    return tempValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputCopy & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputCopy = inputCopy & 0x80000000;\n  if (inputCopy == 0) {\n    inputCopy = 0x7fffffff;\n  }\n  return inputCopy;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_integer_00081cd0",
                "param_1": "inputCopy",
                "uVar1": "tempValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "compute_decoded_value_00081d1c",
            "code": "\nuint computeDecodedValue_00081d1c(uint inputValue)\n\n{\n  uint decodedValue;\n  \n  if (((inputValue bitwiseAnd 0x80000000) notEqual 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  decodedValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)decodedValue) {\n    return (inputValue << 8 | 0x80000000) >> (decodedValue bitwiseAnd 0xff);\n  }\n  if ((decodedValue == 0xffffff9f) bitwiseAndbitwiseAnd ((inputValue bitwiseAnd 0x7fffff) notEqual 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "compute_decoded_value_00081d1c",
                "param_1": "inputValue",
                "uVar1": "decodedValue",
                "&": "bitwiseAnd",
                "!": "not",
                "!=": "notEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newValue,dword value2,dword newValue)\n\n{\n  dword *relocationEntry;\n  uint entryIndex;\n  uint flag;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    relocationEntry = (dword *)relocate_symbols_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    entryIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  flag = 1 << (entryIndex & 0xff);\n  relocationEntry[entryIndex + 0x22] = newValue;\n  relocationEntry[0x62] = relocationEntry[0x62] | flag;\n  relocationEntry[entryIndex + 0x42] = newValue;\n  relocationEntry[99] = flag | relocationEntry[99];\n  relocationEntry[1] = entryIndex + 1;\n  relocationEntry[entryIndex + 2] = value2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newValue",
                "param_2": "value2",
                "param_3": "newValue",
                "pdVar1": "relocationEntry",
                "uVar2": "entryIndex",
                "uVar3": "flag"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_several_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeSeveralFunctions_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPointers;\n  \n  FUNC_00085858();\n  functionPointers = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointers = functionPointers + 1;\n    (**functionPointers)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_several_functions_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointers"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "relocate_symbols_00081df4",
            "code": "\nvoid relocateSymbols_00081df4(undefined4 arg)\n\n{\n  relocate_symbols_00081e14(symbolTable[140].r_offset,arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "relocate_symbols_00081df4",
                "param_1": "arg",
                "Elf32_Rel_ARRAY_20070000": "symbolTable"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "update_relocation_info_00081e04",
            "code": "\nvoid update_relocation_info_00081e04(undefined4 relocation_offset)\n\n{\n  update_relocation_info_00081e04_00083d9c(relocation_array[140].r_offset,relocation_offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "update_relocation_info_00081e04",
                "param_1": "relocation_offset",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "relocate_symbols_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocateSymbols_00081e14(undefined4 *symbolTable,uint numSymbols)\n\n{\n  dword info;\n  int index;\n  uint alignment;\n  uint remainder;\n  int nextIndex;\n  uint size;\n  dword offset;\n  uint flags;\n  int prevIndex;\n  undefined *ptr;\n  dword nextOffset;\n  dword prevOffset;\n  int sectionIndex;\n  dword *relTable;\n  uint alignedSize;\n  undefined *symbolPtr;\n  dword *pinfo7;\n  uint uVar18;\n  \n  if (numSymbols + 0xb < 0x17) {\n    alignedSize = 0x10;\n    if (0x10 < numSymbols) goto LAB_00081e7a;\n  }\n  else {\n    alignedSize = numSymbols + 0xb & 0xfffffff8;\n    if (((int)alignedSize < 0) || (alignedSize < numSymbols)) {\nLAB_00081e7a:\n      *symbolTable = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(symbolTable);\n  info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignedSize < 0x1f8) {\n    sectionIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignedSize);\n    if ((sectionIndex != alignedSize + 0x20070464) ||\n       (index = sectionIndex + 8, sectionIndex = *(int *)(sectionIndex + 0x14), index != sectionIndex)) {\n      nextIndex = *(int *)(sectionIndex + 0xc);\n      prevIndex = (*(uint *)(sectionIndex + 4) & 0xfffffffc) + sectionIndex;\n      alignedSize = *(uint *)(prevIndex + 4);\n      index = *(int *)(sectionIndex + 8);\n      *(int *)(index + 0xc) = nextIndex;\n      *(int *)(nextIndex + 8) = index;\n      *(uint *)(prevIndex + 4) = alignedSize | 1;\n      FUNC_0008259c(symbolTable);\n      return (int *)(sectionIndex + 8);\n    }\n    uVar18 = (alignedSize >> 3) + 2;\n  }\n  else {\n    uVar18 = alignedSize >> 9;\n    if (uVar18 == 0) {\n      index = 0x7e;\n      sectionIndex = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      sectionIndex = (alignedSize >> 6) + 0x38;\n      index = sectionIndex * 2;\n    }\n    else if (uVar18 < 0x15) {\n      sectionIndex = uVar18 + 0x5b;\n      index = sectionIndex * 2;\n    }\n    else if (uVar18 < 0x55) {\n      sectionIndex = (alignedSize >> 0xc) + 0x6e;\n      index = sectionIndex * 2;\n    }\n    else if (uVar18 < 0x155) {\n      sectionIndex = (alignedSize >> 0xf) + 0x77;\n      index = sectionIndex * 2;\n    }\n    else if (uVar18 < 0x555) {\n      sectionIndex = (alignedSize >> 0x12) + 0x7c;\n      index = sectionIndex * 2;\n    }\n    else {\n      index = 0xfc;\n      sectionIndex = 0x7e;\n    }\n    for (offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[index]; index * 4 + 0x20070464U != offset\n        ; offset = *(dword *)(offset + 0xc)) {\n      uVar18 = *(uint *)(offset + 4) & 0xfffffffc;\n      nextIndex = uVar18 - alignedSize;\n      if (0xf < nextIndex) {\n        sectionIndex = sectionIndex + -1;\n        break;\n      }\n      if (-1 < nextIndex) {\n        index = uVar18 + offset;\n        alignedSize = *(uint *)(index + 4);\n        nextIndex = *(int *)(offset + 0xc);\n        sectionIndex = *(int *)(offset + 8);\n        *(int *)(sectionIndex + 0xc) = nextIndex;\n        *(int *)(nextIndex + 8) = sectionIndex;\n        *(uint *)(index + 4) = alignedSize | 1;\n        FUNC_0008259c(symbolTable);\n        return (int *)(offset + 8);\n      }\n    }\n    uVar18 = sectionIndex + 1;\n  }\n  offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    alignment = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    remainder = alignment & 0xfffffffc;\n    size = remainder - alignedSize;\n    if (0xf < (int)size) {\n      offset = alignedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = offset;\n      *(undefined4 *)(offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(offset + 8) = 0x2007046c;\n      *(uint *)(offset + 4) = size | 1;\n      *(uint *)(offset + size) = size;\n      FUNC_0008259c(symbolTable);\n      return (int *)(info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)size) {\n      *(uint *)(remainder + info + 4) = *(uint *)(remainder + info + 4) | 1;\n      FUNC_0008259c(symbolTable);\n      return (int *)(info + 8);\n    }\n    if (remainder < 0x200) {\n      remainder = alignment & 0xfffffff8;\n      sectionIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + remainder);\n      offset = 1 << ((int)(alignment >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info + 8) = sectionIndex;\n      *(uint *)(info + 0xc) = remainder + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + remainder) = info;\n      *(dword *)(sectionIndex + 0xc) = info;\n    }\n    else {\n      size = alignment >> 9;\n      if (size < 5) {\n        index = (alignment >> 6) + 0x38;\n        sectionIndex = index * 2;\n      }\n      else if (size < 0x15) {\n        index = size + 0x5b;\n        sectionIndex = index * 2;\n      }\n      else if (size < 0x55) {\n        index = (alignment >> 0xc) + 0x6e;\n        sectionIndex = index * 2;\n      }\n      else if (size < 0x155) {\n        index = (alignment >> 0xf) + 0x77;\n        sectionIndex = index * 2;\n      }\n      else if (size < 0x555) {\n        index = (alignment >> 0x12) + 0x7c;\n        sectionIndex = index * 2;\n      }\n      else {\n        sectionIndex = 0xfc;\n        index = 0x7e;\n      }\n      offset = sectionIndex * 4 + 0x20070464;\n      nextOffset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[sectionIndex];\n      if (nextOffset == offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        prevOffset = nextOffset;\n      }\n      else {\n        do {\n          prevOffset = nextOffset;\n          if ((*(uint *)(nextOffset + 4) & 0xfffffffc) <= remainder) break;\n          nextOffset = *(dword *)(nextOffset + 8);\n          prevOffset = nextOffset;\n        } while (offset != nextOffset);\n        nextOffset = *(dword *)(prevOffset + 0xc);\n      }\n      offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info + 0xc) = nextOffset;\n      *(dword *)(info + 8) = prevOffset;\n      *(dword *)(nextOffset + 8) = info;\n      *(dword *)(prevOffset + 0xc) = info;\n    }\n  }\n  info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  alignment = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (alignment <= offset) {\n    if ((offset & alignment) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        alignment = alignment << 1;\n        uVar18 = uVar18 + 4;\n      } while ((offset & alignment) == 0);\n    }\n    do {\n      pinfo7 = &Elf32_Rel_ARRAY_20070000[uVar18 + 0x8c].r_info;\n      relTable = pinfo7;\n      remainder = uVar18;\n      do {\n        for (ptr = (undefined *)relTable[3]; relTable != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          size = *(uint *)(ptr + 4) & 0xfffffffc;\n          flags = size - alignedSize;\n          if (0xf < (int)flags) {\n            index = *(int *)(ptr + 8);\n            sectionIndex = *(int *)(ptr + 0xc);\n            symbolPtr = ptr + alignedSize;\n            *(uint *)(ptr + 4) = alignedSize | 1;\n            *(int *)(index + 0xc) = sectionIndex;\n            *(int *)(sectionIndex + 8) = index;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)symbolPtr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)symbolPtr;\n            *(undefined4 *)(symbolPtr + 0xc) = 0x2007046c;\n            *(undefined4 *)(symbolPtr + 8) = 0x2007046c;\n            *(uint *)(symbolPtr + 4) = flags | 1;\n            *(uint *)(symbolPtr + flags) = flags;\n            FUNC_0008259c(symbolTable);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)flags) {\n            sectionIndex = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + size + 4) = *(uint *)(ptr + size + 4) | 1;\n            *(int *)(sectionIndex + 0xc) = index;\n            *(int *)(index + 8) = sectionIndex;\n            FUNC_0008259c(symbolTable);\n            return (int *)(ptr + 8);\n          }\n        }\n        remainder = remainder + 1;\n        relTable = relTable + 2;\n      } while ((remainder & 3) != 0);\n      do {\n        size = uVar18 & 3;\n        ptr = (undefined *)(pinfo7 + -2);\n        uVar18 = uVar18 - 1;\n        if (size == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~alignment;\n          break;\n        }\n        pinfo7 = (dword *)*pinfo7;\n      } while (pinfo7 == (dword *)ptr);\n      alignment = alignment * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= alignment &&\n           alignment - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (uVar18 = remainder, alignment == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & alignment) == 0; alignment = alignment << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignedSize <= uVar18) &&\n     (alignment = uVar18 - alignedSize, offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)alignment))\n  goto LAB_0008211e;\n  alignment = Elf32_Rel_ARRAY_20070000[141].r_info + uVar18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    remainder = alignedSize + DAT_20071190 + 0x10;\n  }\n  else {\n    remainder = alignedSize + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  offset = update_value_00082970(symbolTable,remainder);\n  if ((offset == 0xffffffff) || ((offset < alignment && (info != 0x20070464)))) {\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    size = DAT_20071194 + remainder;\n    DAT_20071194 = size;\n    if ((alignment == offset) && ((alignment & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = remainder + uVar18 | 1;\n    }\n    else {\n      nextOffset = offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        nextOffset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = size + (offset - alignment);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = nextOffset;\n      alignment = offset & 7;\n      if (alignment == 0) {\n        sectionIndex = 0x1000;\n      }\n      else {\n        offset = offset + (8 - alignment);\n        sectionIndex = 0x1008 - alignment;\n      }\n      sectionIndex = sectionIndex - (remainder + offset & 0xfff);\n      index = update_value_00082970(symbolTable,sectionIndex);\n      if (index == -1) {\n        alignment = 1;\n        sectionIndex = 0;\n      }\n      else {\n        alignment = (index - offset) + sectionIndex | 1;\n      }\n      size = DAT_20071194 + sectionIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = offset;\n      DAT_20071194 = size;\n      *(uint *)(offset + 4) = alignment;\n      if (info != 0x20070464) {\n        if (uVar18 < 0x10) {\n          *(undefined4 *)(offset + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00082108;\n        }\n        uVar18 = uVar18 - 0xc & 0xfffffff8;\n        *(uint *)(info + 4) = uVar18 | *(uint *)(info + 4) & 1;\n        *(undefined4 *)(info + uVar18 + 4) = 5;\n        *(undefined4 *)(info + uVar18 + 8) = 5;\n        if (0xf < uVar18) {\n          update_relocation_info_00083d9c(symbolTable,info + 8);\n          size = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < size) {\n      DAT_2007118c = size;\n    }\n    if (DAT_20071188 < size) {\n      DAT_20071188 = size;\n    }\n    uVar18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  alignment = uVar18 - alignedSize;\n  if ((uVar18 < alignedSize) || ((int)alignment < 0x10)) {\n    FUNC_0008259c(symbolTable);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignedSize + offset;\n  *(uint *)(offset + 4) = alignedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignment | 1;\n  FUNC_0008259c(symbolTable);\n  return (int *)(offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "relocate_symbols_00081e14",
                "param_1": "symbolTable",
                "param_2": "numSymbols",
                "dVar1": "info",
                "iVar2": "index",
                "uVar3": "alignment",
                "uVar4": "remainder",
                "iVar5": "nextIndex",
                "uVar6": "size",
                "dVar7": "offset",
                "uVar8": "flags",
                "iVar9": "prevIndex",
                "puVar10": "ptr",
                "dVar11": "nextOffset",
                "dVar12": "prevOffset",
                "iVar13": "sectionIndex",
                "pdVar14": "relTable",
                "uVar15": "alignedSize",
                "puVar16": "symbolPtr"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destIter;\n  undefined4 *srcIter;\n  uint remainingSize;\n  uint copySize;\n  bool isRemainingSizeZero;\n  \n  destIter = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copySize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcIter = destIter;\n          isRemainingSizeZero = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)srcIter = *(undefined *)destPtr;\n          destIter = (undefined4 *)((int)srcIter + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemainingSizeZero);\n        *(undefined *)(undefined4 *)((int)srcIter + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcIter + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcIter + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copySize = 4 - ((uint)destination & 3);\n      size = size - copySize;\n      destPtr = destination;\n      srcIter = source;\n      if (((uint)destination & 1) != 0) {\n        srcIter = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destIter = destPtr;\n      source = srcIter;\n      if ((copySize & 2) != 0) {\n        source = (undefined4 *)((int)srcIter + 2);\n        destIter = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcIter;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destIter = *source;\n    destIter[1] = source[1];\n    destIter[2] = source[2];\n    destIter[3] = source[3];\n    destIter[4] = source[4];\n    destIter[5] = source[5];\n    destIter[6] = source[6];\n    destIter[7] = source[7];\n    destIter[8] = source[8];\n    destIter[9] = source[9];\n    destIter[10] = source[10];\n    destIter[0xb] = source[0xb];\n    destIter[0xc] = source[0xc];\n    destIter[0xd] = source[0xd];\n    destIter[0xe] = source[0xe];\n    destIter[0xf] = source[0xf];\n    destIter = destIter + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destIter = *source;\n      destIter[1] = source[1];\n      destIter[2] = source[2];\n      destIter[3] = source[3];\n      destIter = destIter + 4;\n      source = source + 4;\n      isRemainingSizeZero = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemainingSizeZero);\n  }\n  copySize = remainingSize + 0xc;\n  srcIter = destIter;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *srcIter = *destPtr;\n      isRemainingSizeZero = 3 < copySize;\n      copySize = copySize - 4;\n      destIter = srcIter + 1;\n      srcIter = srcIter + 1;\n      destPtr = source;\n    } while (isRemainingSizeZero);\n  }\nLAB_000823d0:\n  if (copySize + 4 != 0) {\n    destPtr = destIter;\n    srcIter = source;\n    if ((copySize & 1) != 0) {\n      srcIter = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destIter + 1);\n      *(undefined *)destIter = *(undefined *)source;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcIter;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destIter",
                "puVar3": "srcIter",
                "uVar4": "remainingSize",
                "uVar5": "copySize",
                "bVar6": "isRemainingSizeZero"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int count;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint tempSize;\n  undefined *destEnd;\n  uint remainder;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + size), dest < tempPtr)) {\n    destEnd = (undefined *)((int)dest + size);\n    count = size - 1;\n    if (size != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        count = count + -1;\n        destEnd = destEnd + -1;\n        *destEnd = *(undefined *)tempPtr;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    count = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + count * 4;\n    dest = dest + count * 4;\n    tempSize = remainder;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainder) {\n      do {\n        tempSize = tempSize - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempSize);\n      count = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + count);\n      src = (undefined4 *)((int)src + count);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "count",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempSize",
                "puVar6": "destEnd",
                "uVar7": "remainder"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_with_byte_00082504",
            "code": "\nvoid fillMemoryWithByte_00082504(undefined4 *destPtr,undefined byteToFill,uint numBytes)\n\n{\n  undefined4 *currDestPtr;\n  undefined4 *nextDestPtr;\n  undefined4 fillPattern;\n  uint remainingBytes;\n  bool isZeroNumBytes;\n  \n  if (((uint)destPtr & 3) != 0) {\n    isZeroNumBytes = numBytes == 0;\n    currDestPtr = destPtr;\n    numBytes = numBytes - 1;\n    if (isZeroNumBytes) {\n      return;\n    }\n    while( true ) {\n      destPtr = (undefined4 *)((int)currDestPtr + 1);\n      *(undefined *)currDestPtr = byteToFill;\n      if (((uint)destPtr & 3) == 0) break;\n      isZeroNumBytes = numBytes == 0;\n      currDestPtr = destPtr;\n      numBytes = numBytes - 1;\n      if (isZeroNumBytes) {\n        return;\n      }\n    }\n  }\n  if (3 < numBytes) {\n    fillPattern = CONCAT22(CONCAT11(byteToFill,byteToFill),CONCAT11(byteToFill,byteToFill));\n    remainingBytes = numBytes;\n    currDestPtr = destPtr;\n    if (0xf < numBytes) {\n      remainingBytes = numBytes - 0x10;\n      do {\n        *currDestPtr = fillPattern;\n        currDestPtr[1] = fillPattern;\n        currDestPtr[2] = fillPattern;\n        currDestPtr[3] = fillPattern;\n        currDestPtr = currDestPtr + 4;\n      } while (currDestPtr != (undefined4 *)((int)destPtr + (remainingBytes & 0xfffffff0) + 0x10));\n      numBytes = numBytes & 0xf;\n      destPtr = destPtr + ((remainingBytes >> 4) + 1) * 4;\n      remainingBytes = numBytes;\n      currDestPtr = destPtr;\n      if (numBytes < 4) goto LAB_00082580;\n    }\n    do {\n      numBytes = numBytes - 4;\n      *destPtr = fillPattern;\n      destPtr = destPtr + 1;\n    } while (3 < numBytes);\n    destPtr = (undefined4 *)((int)currDestPtr + (remainingBytes - 4 & 0xfffffffc) + 4);\n    numBytes = remainingBytes & 3;\n  }\nLAB_00082580:\n  if (numBytes != 0) {\n    currDestPtr = destPtr;\n    do {\n      nextDestPtr = (undefined4 *)((int)currDestPtr + 1);\n      *(undefined *)currDestPtr = byteToFill;\n      currDestPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(numBytes + (int)destPtr));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "param_1": "destPtr",
                "param_2": "byteToFill",
                "param_3": "numBytes",
                "puVar1": "currDestPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "fillPattern",
                "uVar4": "remainingBytes",
                "bVar5": "isZeroNumBytes"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "relocate_symbols_000825a0",
            "code": "\nvoid relocateSymbols_000825a0(undefined4 inputParam,undefined4 outputParam)\n\n{\n  relocate_symbols_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,inputParam,outputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "relocate_symbols_000825a0",
                "param_1": "inputParam",
                "param_2": "outputParam"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "relocate_symbols_000825b0",
            "code": "\nint * relocate_symbols_000825b0(undefined4 *symbol_table,int *relocated_data,uint data_size)\n\n{\n  dword var1;\n  int *result;\n  uint var3;\n  int var4;\n  uint var5;\n  int var6;\n  int *var7;\n  uint var8;\n  uint var9;\n  int *var10;\n  \n  if (relocated_data == (int *)0x0) {\n    result = (int *)relocate_symbols_000825b0_00081e14(symbol_table,data_size);\n    return result;\n  }\n  FUNC_00082598();\n  var5 = relocated_data[-1];\n  var8 = var5 & 0xfffffffc;\n  result = relocated_data + -2;\n  if (data_size + 0xb < 0x17) {\n    var9 = 0x10;\n  }\n  else {\n    var9 = data_size + 0xb & 0xfffffff8;\n    if ((int)var9 < 0) goto LAB_0008267c;\n  }\n  if (var9 < data_size) {\nLAB_0008267c:\n    *symbol_table = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)var8 < (int)var9) {\n    var1 = (int)result + var8;\n    if (relocation_array[141].r_info == var1) {\n      var3 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n      var1 = relocation_array[141].r_info;\n      if ((int)(var9 + 0x10) <= (int)(var3 + var8)) {\n        relocation_array[141].r_info = (int)result + var9;\n        *(uint *)(relocation_array[141].r_info + 4) = (var3 + var8) - var9 | 1;\n        relocated_data[-1] = var9 | relocated_data[-1] & 1U;\n        FUNC_0008259c(symbol_table);\n        return relocated_data;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(var1 + 4) & 0xfffffffe) + var1 + 4) & 1) == 0) {\n      var3 = *(uint *)(var1 + 4) & 0xfffffffc;\n      if ((int)var9 <= (int)(var3 + var8)) {\n        var6 = *(int *)(var1 + 0xc);\n        var4 = *(int *)(var1 + 8);\n        *(int *)(var4 + 0xc) = var6;\n        *(int *)(var6 + 8) = var4;\n        var8 = var3 + var8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      var3 = 0;\n      var1 = 0;\n    }\n    if (-1 < (int)(var5 << 0x1f)) {\n      var10 = (int *)((int)result - relocated_data[-2]);\n      var5 = (var10[1] & 0xfffffffcU) + var8;\n      if (var1 != 0) {\n        if (var1 == relocation_array[141].r_info) {\n          if ((int)(var9 + 0x10) <= (int)(var3 + var5)) {\n            result = var10 + 2;\n            var4 = *result;\n            var6 = var10[3];\n            var8 = var8 - 4;\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            if (var8 < 0x25) {\n              var7 = result;\n              if (0x13 < var8) {\n                var10[2] = *relocated_data;\n                var10[3] = relocated_data[1];\n                if (var8 < 0x1c) {\n                  relocated_data = relocated_data + 2;\n                  var7 = var10 + 4;\n                }\n                else {\n                  var10[4] = relocated_data[2];\n                  var10[5] = relocated_data[3];\n                  if (var8 == 0x24) {\n                    var10[6] = relocated_data[4];\n                    var7 = relocated_data + 5;\n                    relocated_data = relocated_data + 6;\n                    var10[7] = *var7;\n                    var7 = var10 + 8;\n                  }\n                  else {\n                    relocated_data = relocated_data + 4;\n                    var7 = var10 + 6;\n                  }\n                }\n              }\n              *var7 = *relocated_data;\n              var7[1] = relocated_data[1];\n              var7[2] = relocated_data[2];\n            }\n            else {\n              copy_memory_00082438(result,relocated_data);\n            }\n            relocation_array[141].r_info = (int)var10 + var9;\n            *(uint *)(relocation_array[141].r_info + 4) = (var3 + var5) - var9 | 1;\n            var10[1] = var9 | var10[1] & 1U;\n            FUNC_0008259c(symbol_table);\n            return result;\n          }\n        }\n        else {\n          var3 = var3 + var5;\n          if ((int)var9 <= (int)var3) {\n            var6 = *(int *)(var1 + 0xc);\n            var4 = *(int *)(var1 + 8);\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            var7 = var10 + 2;\n            var4 = *var7;\n            var6 = var10[3];\n            var5 = var8 - 4;\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            var8 = var3;\n            if (var5 < 0x25) {\n              result = var7;\n              if (0x13 < var5) {\n                var10[2] = *relocated_data;\n                var10[3] = relocated_data[1];\n                if (var5 < 0x1c) {\n                  relocated_data = relocated_data + 2;\n                  result = var10 + 4;\n                }\n                else {\n                  var10[4] = relocated_data[2];\n                  var10[5] = relocated_data[3];\n                  if (var5 == 0x24) {\n                    var10[6] = relocated_data[4];\n                    result = relocated_data + 5;\n                    relocated_data = relocated_data + 6;\n                    var10[7] = *result;\n                    result = var10 + 8;\n                  }\n                  else {\n                    relocated_data = relocated_data + 4;\n                    result = var10 + 6;\n                  }\n                }\n              }\n              *result = *relocated_data;\n              result[1] = relocated_data[1];\n              result[2] = relocated_data[2];\n              var5 = var10[1];\n              result = var10;\n              relocated_data = var7;\n            }\n            else {\n              copy_memory_00082438(var7,relocated_data);\n              var5 = var10[1];\n              result = var10;\n              relocated_data = var7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)var9 <= (int)var5) {\n        var7 = var10 + 2;\n        var4 = *var7;\n        var6 = var10[3];\n        var3 = var8 - 4;\n        *(int *)(var4 + 0xc) = var6;\n        *(int *)(var6 + 8) = var4;\n        var8 = var5;\n        if (var3 < 0x25) {\n          result = var7;\n          if (0x13 < var3) {\n            var10[2] = *relocated_data;\n            var10[3] = relocated_data[1];\n            if (var3 < 0x1c) {\n              relocated_data = relocated_data + 2;\n              result = var10 + 4;\n            }\n            else {\n              var10[4] = relocated_data[2];\n              var10[5] = relocated_data[3];\n              if (var3 == 0x24) {\n                var10[6] = relocated_data[4];\n                result = relocated_data + 5;\n                relocated_data = relocated_data + 6;\n                var10[7] = *result;\n                result = var10 + 8;\n              }\n              else {\n                relocated_data = relocated_data + 4;\n                result = var10 + 6;\n              }\n            }\n          }\n          *result = *relocated_data;\n          result[1] = relocated_data[1];\n          result[2] = relocated_data[2];\n          var5 = var10[1];\n          result = var10;\n          relocated_data = var7;\n        }\n        else {\n          copy_memory_00082438(var7,relocated_data);\n          var5 = var10[1];\n          result = var10;\n          relocated_data = var7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    var10 = (int *)relocate_symbols_000825b0_00081e14(symbol_table,data_size);\n    if (var10 == (int *)0x0) goto LAB_000826a4;\n    var5 = relocated_data[-1];\n    if (var10 + -2 != (int *)((var5 & 0xfffffffe) + (int)result)) {\n      var8 = var8 - 4;\n      if (var8 < 0x25) {\n        result = relocated_data;\n        var7 = var10;\n        if (0x13 < var8) {\n          *var10 = *relocated_data;\n          var10[1] = relocated_data[1];\n          if (var8 < 0x1c) {\n            result = relocated_data + 2;\n            var7 = var10 + 2;\n          }\n          else {\n            var10[2] = relocated_data[2];\n            var10[3] = relocated_data[3];\n            if (var8 == 0x24) {\n              var10[4] = relocated_data[4];\n              var10[5] = relocated_data[5];\n              result = relocated_data + 6;\n              var7 = var10 + 6;\n            }\n            else {\n              result = relocated_data + 4;\n              var7 = var10 + 4;\n            }\n          }\n        }\n        *var7 = *result;\n        var7[1] = result[1];\n        var7[2] = result[2];\n      }\n      else {\n        copy_memory_00082438(var10,relocated_data);\n      }\n      update_relocation_info_00083d9c(symbol_table,relocated_data);\n      goto LAB_000826a4;\n    }\n    var8 = var8 + (var10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  var3 = var8 - var9;\n  var10 = relocated_data;\n  if (var3 < 0x10) {\n    result[1] = var5 & 1 | var8;\n    *(uint *)((int)result + var8 + 4) = *(uint *)((int)result + var8 + 4) | 1;\n  }\n  else {\n    result[1] = var5 & 1 | var9;\n    *(uint *)((int)result + var9 + 4) = var3 | 1;\n    *(uint *)((int)result + var3 + var9 + 4) = *(uint *)((int)result + var3 + var9 + 4) | 1;\n    update_relocation_info_00083d9c(symbol_table,(int)result + var9 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(symbol_table);\n  return var10;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "relocate_symbols_000825b0",
                "param_1": "symbol_table",
                "param_2": "relocated_data",
                "param_3": "data_size",
                "dVar1": "var1",
                "piVar2": "result",
                "uVar3": "var3",
                "iVar4": "var4",
                "uVar5": "var5",
                "iVar6": "var6",
                "piVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "piVar10": "var10",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "update_value_00082970",
            "code": "\nvoid updateValue_00082970(int *output,undefined4 input)\n\n{\n  int newValue;\n  \n  DAT_200711bc = 0;\n  newValue = calculate_new_value_0008118c(input);\n  if ((newValue == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "update_value_00082970",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "newValue"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *tempPointer1;\n  uint *tempPointer2;\n  uint currentUint;\n  uint tempUint;\n  uint *finalPointer;\n  bool isZeroByte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    tempPointer2 = source;\n    if (((uint)source & 1) != 0) {\n      tempPointer2 = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = tempPointer2;\n    if (((uint)tempPointer2 & 2) != 0) {\n      source = (uint *)((int)tempPointer2 + 2);\n      currentShort = *(ushort *)tempPointer2;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentUint = *source;\n  tempPointer2 = source + 1;\n  finalPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) goto LAB_000829f8;\n    finalPointer = destination + 1;\n    *destination = currentUint;\n    tempPointer2 = source + 2;\n    currentUint = source[1];\n  }\n  while( true ) {\n    tempPointer1 = tempPointer2 + 1;\n    tempUint = *tempPointer2;\n    destination = finalPointer;\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) break;\n    destination = finalPointer + 1;\n    *finalPointer = currentUint;\n    currentUint = tempUint;\n    if ((tempUint + 0xfefefeff & ~tempUint & 0x80808080) != 0) break;\n    tempPointer2 = tempPointer2 + 2;\n    currentUint = *tempPointer1;\n    finalPointer = finalPointer + 2;\n    *destination = tempUint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentUint;\n    tempUint = currentUint & 0xff;\n    currentUint = currentUint >> 8 | currentUint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (tempUint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "tempPointer1",
                "puVar4": "tempPointer2",
                "uVar5": "currentUint",
                "uVar6": "tempUint",
                "puVar7": "finalPointer",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeroes_00082a50",
            "code": "\nint countLeadingZeroes_00082a50(uint input)\n\n{\n  int leadingZeroes;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeroes = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeroes + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeroes = leadingZeroes + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeroes = leadingZeroes + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeroes = leadingZeroes + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeroes = leadingZeroes + 1;\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeroes_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeroes",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 arg1,int arg2,int **arg3)\n\n{\n  int *pointer;\n  int result;\n  int *currentPtr;\n  uint count;\n  undefined4 *dataPtr;\n  uint tempVar1;\n  uint tempVar2;\n  \n  if (-1 < *(int *)(arg2 + 100) << 0x12) {\n    result = improve_and_process_data_00083f34();\n    arg3[2] = (int *)0x0;\n    arg3[1] = (int *)0x0;\n    return result;\n  }\n  currentPtr = arg3[2];\n  pointer = *arg3;\n  while (currentPtr != (int *)0x0) {\n    tempVar1 = pointer[1];\n    tempVar2 = tempVar1 >> 2;\n    if (tempVar2 != 0) {\n      dataPtr = (undefined4 *)(*pointer + -4);\n      count = 0;\n      do {\n        dataPtr = dataPtr + 1;\n        result = process_data_00083c40(arg1,*dataPtr,arg2);\n        count = count + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (tempVar2 != count);\n      currentPtr = arg3[2];\n    }\n    currentPtr = (int *)((int)currentPtr - (tempVar1 & 0xfffffffc));\n    arg3[2] = currentPtr;\n    pointer = pointer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  arg3[2] = (int *)0x0;\n  arg3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "piVar1": "pointer",
                "iVar2": "result",
                "piVar3": "currentPtr",
                "uVar4": "count",
                "puVar5": "dataPtr",
                "uVar6": "tempVar1",
                "uVar7": "tempVar2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = initialize_check_update_symbols_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeroes_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_first_occurrence_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int reverseResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize1;\n  ushort maskedValue;\n  undefined2 value1;\n  undefined *buffer;\n  undefined4 bufferSize2;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined stackBuffer [1024];\n  \n  value5 = *(undefined4 *)(param2 + 100);\n  value3 = *(undefined4 *)(param2 + 0x1c);\n  value1 = *(undefined2 *)(param2 + 0xe);\n  value4 = *(undefined4 *)(param2 + 0x24);\n  bufferArray[0] = stackBuffer;\n  maskedValue = *(ushort *)(param2 + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  value2 = 0;\n  buffer = bufferArray[0];\n  result = FUNC_00082b38(param1,bufferArray);\n  if ((-1 < result) && (reverseResult = reverse_and_update_data_00083adc(param1,bufferArray), reverseResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)maskedValue << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "iVar2": "reverseResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize1",
                "local_47c": "maskedValue",
                "local_47a": "value1",
                "local_478": "buffer",
                "local_474": "bufferSize2",
                "local_470": "value2",
                "local_46c": "value3",
                "local_464": "value4",
                "local_424": "value5",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = reverse_and_update_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "initialize_check_update_symbols_00083808",
            "code": "\nundefined4 initialize_check_update_symbols_00083808(undefined4 *result,int *param_array)\n\n{\n  int symbol_check_result;\n  int symbol_count;\n  uint flags;\n  ushort temp_ushort;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  temp_ushort = *(ushort *)(param_array + 3);\n  flags = (uint)temp_ushort;\n  if ((int)(flags << 0x1c) < 0) {\n    symbol_count = param_array[4];\n  }\n  else {\n    if (-1 < (int)(flags << 0x1b)) {\n      *result = 9;\n      *(ushort *)(param_array + 3) = temp_ushort | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(flags << 0x1d) < 0) {\n      if ((int *)param_array[0xc] != (int *)0x0) {\n        if ((int *)param_array[0xc] != param_array + 0x10) {\n          update_relocation_info_00083d9c(result);\n          temp_ushort = *(ushort *)(param_array + 3);\n        }\n        param_array[0xc] = 0;\n      }\n      symbol_count = param_array[4];\n      temp_ushort = temp_ushort & 0xffdb;\n      *param_array = symbol_count;\n      param_array[1] = 0;\n    }\n    else {\n      symbol_count = param_array[4];\n    }\n    *(ushort *)(param_array + 3) = temp_ushort | 8;\n    flags = (uint)(temp_ushort | 8);\n  }\n  if ((symbol_count == 0) && ((flags & 0x280) != 0x200)) {\n    initialize_and_check_symbols_000842a4(result,param_array);\n    flags = (uint)*(ushort *)(param_array + 3);\n    symbol_count = param_array[4];\n  }\n  if ((flags & 1) == 0) {\n    symbol_check_result = 0;\n    if (-1 < (int)(flags << 0x1e)) {\n      symbol_check_result = param_array[5];\n    }\n    param_array[2] = symbol_check_result;\n  }\n  else {\n    param_array[6] = -param_array[5];\n    param_array[2] = 0;\n  }\n  if ((symbol_count == 0) && ((int)((uint)*(ushort *)(param_array + 3) << 0x18) < 0)) {\n    *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "initialize_check_update_symbols_00083808",
                "param_1": "result",
                "param_2": "param_array",
                "iVar1": "symbol_check_result",
                "iVar2": "symbol_count",
                "uVar3": "flags",
                "uVar4": "temp_ushort"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "reverse_and_update_data_00083adc",
            "code": "\nundefined4 reverse_and_update_data_00083adc(int *data_array,int *info_array)\n\n{\n  int *ptr_var1;\n  int var2;\n  ushort ushort_var;\n  uint uint_var;\n  int var5;\n  code *function_ptr;\n  undefined4 unaff_var;\n  int var7;\n  \n  if ((data_array != (int *)0x0) && (data_array[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(info_array + 3) == 0) {\n    return 0;\n  }\n  ushort_var = *(ushort *)(info_array + 3);\n  if ((int)((uint)ushort_var << 0x1c) < 0) {\n    var7 = info_array[4];\n    if (var7 == 0) {\n      return 0;\n    }\n    var2 = *info_array;\n    if ((ushort_var & 3) == 0) {\n      var5 = info_array[5];\n    }\n    else {\n      var5 = 0;\n    }\n    *info_array = var7;\n    var2 = var2 - var7;\n    info_array[2] = var5;\n    do {\n      if (var2 < 1) {\n        return 0;\n      }\n      var5 = (*(code *)info_array[9])(data_array,info_array[7],var7,var2,unaff_var);\n      var2 = var2 - var5;\n      var7 = var7 + var5;\n    } while (0 < var5);\nLAB_00083a54:\n    *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info_array + 3) = ushort_var | 0x800;\n  if ((info_array[1] < 1) && (info_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)info_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  uint_var = (uint)(ushort_var | 0x800);\n  var7 = *data_array;\n  *data_array = 0;\n  if ((ushort_var & 0x1000) == 0) {\n    var2 = (*function_ptr)(data_array,info_array[7],uint_var & 0x1000,1);\n    if ((var2 == -1) && (var5 = *data_array, var5 != 0)) {\n      if ((var5 == 0x1d) || (var5 == 0x16)) {\n        *data_array = var7;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uint_var = (uint)*(ushort *)(info_array + 3);\n    function_ptr = (code *)info_array[10];\n  }\n  else {\n    var2 = info_array[0x14];\n  }\n  if (((int)(uint_var << 0x1d) < 0) && (var2 = var2 - info_array[1], info_array[0xc] != 0)) {\n    var2 = var2 - info_array[0xf];\n  }\n  var2 = (*function_ptr)(data_array,info_array[7],var2,0);\n  if (var2 == -1) {\n    var5 = *data_array;\n    if (var5 != 0) {\n      if ((var5 != 0x1d) && (var5 != 0x16)) {\n        *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) & 0xf7ff;\n      *info_array = info_array[4];\n      info_array[1] = 0;\n      goto LAB_00083a00;\n    }\n    ushort_var = *(ushort *)(info_array + 3) & 0xf7ff;\n    info_array[1] = 0;\n    *(ushort *)(info_array + 3) = ushort_var;\n    *info_array = info_array[4];\n  }\n  else {\n    ushort_var = *(ushort *)(info_array + 3) & 0xf7ff;\n    *info_array = info_array[4];\n    *(ushort *)(info_array + 3) = ushort_var;\n    info_array[1] = 0;\n  }\n  if ((int)((uint)ushort_var << 0x13) < 0) {\n    info_array[0x14] = var2;\n  }\nLAB_00083a00:\n  ptr_var1 = (int *)info_array[0xc];\n  *data_array = var7;\n  if (ptr_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr_var1 != info_array + 0x10) {\n    update_relocation_info_00083d9c(data_array);\n  }\n  info_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "reverse_and_update_data_00083adc",
                "param_1": "data_array",
                "param_2": "info_array",
                "piVar1": "ptr_var1",
                "iVar2": "var2",
                "uVar3": "ushort_var",
                "uVar4": "uint_var",
                "iVar5": "var5",
                "pcVar6": "function_ptr",
                "unaff_r4": "unaff_var",
                "iVar7": "var7"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructPointer)\n\n{\n  undefined4 *structPointer1;\n  undefined4 *structPointer2;\n  \n  if (*(int *)(dataStructPointer + 0x38) == 0) {\n    structPointer1 = *(undefined4 **)(dataStructPointer + 4);\n    *(undefined **)(dataStructPointer + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructPointer + 0x2e4) = 3;\n    *(int *)(dataStructPointer + 0x2e8) = dataStructPointer + 0x2ec;\n    *(undefined4 *)(dataStructPointer + 0x2e0) = 0;\n    *(undefined2 *)(structPointer1 + 3) = 4;\n    *structPointer1 = 0;\n    structPointer1[1] = 0;\n    structPointer1[2] = 0;\n    structPointer1[0x19] = 0;\n    *(undefined2 *)((int)structPointer1 + 0xe) = 0;\n    structPointer1[4] = 0;\n    structPointer1[5] = 0;\n    structPointer1[6] = 0;\n    fill_memory_with_byte_00082504(structPointer1 + 0x17,0,8);\n    structPointer2 = *(undefined4 **)(dataStructPointer + 8);\n    structPointer1[7] = structPointer1;\n    structPointer1[8] = &LAB_00084440_1;\n    structPointer1[9] = 0x84465;\n    structPointer1[10] = 0x8449d;\n    structPointer1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)structPointer2 + 0xe) = 1;\n    *(undefined2 *)(structPointer2 + 3) = 9;\n    *structPointer2 = 0;\n    structPointer2[1] = 0;\n    structPointer2[2] = 0;\n    structPointer2[0x19] = 0;\n    structPointer2[4] = 0;\n    structPointer2[5] = 0;\n    structPointer2[6] = 0;\n    fill_memory_with_byte_00082504(structPointer2 + 0x17,0,8);\n    structPointer1 = *(undefined4 **)(dataStructPointer + 0xc);\n    structPointer2[7] = structPointer2;\n    structPointer2[8] = &LAB_00084440_1;\n    structPointer2[9] = 0x84465;\n    structPointer2[10] = 0x8449d;\n    structPointer2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(structPointer1 + 3) = 0x12;\n    *(undefined2 *)((int)structPointer1 + 0xe) = 2;\n    *structPointer1 = 0;\n    structPointer1[1] = 0;\n    structPointer1[2] = 0;\n    structPointer1[0x19] = 0;\n    structPointer1[4] = 0;\n    structPointer1[5] = 0;\n    structPointer1[6] = 0;\n    fill_memory_with_byte_00082504(structPointer1 + 0x17,0,8);\n    structPointer1[7] = structPointer1;\n    structPointer1[8] = &LAB_00084440_1;\n    structPointer1[9] = 0x84465;\n    structPointer1[10] = 0x8449d;\n    structPointer1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructPointer + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructPointer",
                "puVar1": "structPointer1",
                "puVar2": "structPointer2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocationInfo;\n  uint result;\n  uint data;\n  byte *bytePtr;\n  uint counter;\n  byte lowerByte;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocationInfo = get_relocation_info_00084298();\n  if ((relocationInfo == 1) && (param2 - 1 < 0xff)) {\n    data = param2 & 0xff;\n    lowerByte = (byte)data;\n    result = 1;\n  }\n  else {\n    result = process_data_0008456c(param1,&lowerByte,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    data = (uint)lowerByte;\n  }\n  counter = 0;\n  do {\n    bytePtr = param3[2] + -1;\n    param3[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)param3[6] <= (int)bytePtr) {\n        **param3 = (byte)data;\n        bytePtr = *param3;\n        data = (uint)*bytePtr;\n        if (data != 10) goto LAB_00083c90;\n      }\n      relocationInfo = process_data_000844c4(param1,data,param3);\n      if (relocationInfo == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)data;\n      bytePtr = *param3;\nLAB_00083c90:\n      *param3 = bytePtr + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    data = (uint)byteArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "relocationInfo",
                "uVar2": "result",
                "uVar3": "data",
                "pbVar4": "bytePtr",
                "uVar5": "counter",
                "local_1c": "lowerByte",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_relocation_info_00083d00",
            "code": "\nundefined4 updateRelocationInfo_00083d00(undefined4 param,int offset)\n\n{\n  int result;\n  uint infoOffset;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  infoOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((infoOffset - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = update_value_00082970(param,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + infoOffset) {\n      result = update_value_00082970(param,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = infoOffset - adjustedOffset | 1;\n        FUNC_0008259c(param);\n        return 1;\n      }\n      adjustedOffset = update_value_00082970(param,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_relocation_info_00083d00",
                "param_1": "param",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "infoOffset",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_info_00083d9c",
            "code": "\nvoid updateRelocationInfo_00083d9c(undefined4 param1,int param2)\n\n{\n  int index;\n  bool isSpecialCase;\n  uint adjustedSize;\n  dword currentReloc;\n  int prevRelocOffset;\n  uint newOffset;\n  dword newReloc;\n  uint newOffsetPlusSize;\n  dword nextReloc;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  adjustedSize = *(uint *)(param2 + -4);\n  newReloc = param2 - 8;\n  newOffset = adjustedSize & 0xfffffffe;\n  currentReloc = newReloc + newOffset;\n  newOffsetPlusSize = *(uint *)(currentReloc + 4) & 0xfffffffc;\n  if (relocationArray[141].r_info == currentReloc) {\n    newOffsetPlusSize = newOffsetPlusSize + newOffset;\n    if (-1 < (int)(adjustedSize << 0x1f)) {\n      newReloc = newReloc - *(int *)(param2 + -8);\n      prevRelocOffset = *(int *)(newReloc + 0xc);\n      index = *(int *)(newReloc + 8);\n      newOffsetPlusSize = newOffsetPlusSize + *(int *)(param2 + -8);\n      *(int *)(index + 0xc) = prevRelocOffset;\n      *(int *)(prevRelocOffset + 8) = index;\n    }\n    currentReloc = relocationArray[269].r_info;\n    *(uint *)(newReloc + 4) = newOffsetPlusSize | 1;\n    relocationArray[141].r_info = newReloc;\n    if (currentReloc <= newOffsetPlusSize) {\n      updateRelocationInfo_00083d9c(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentReloc + 4) = newOffsetPlusSize;\n    if ((adjustedSize & 1) == 0) {\n      newReloc = newReloc - *(int *)(param2 + -8);\n      index = *(int *)(newReloc + 8);\n      newOffset = newOffset + *(int *)(param2 + -8);\n      if (index == 0x2007046c) {\n        isSpecialCase = true;\n      }\n      else {\n        prevRelocOffset = *(int *)(newReloc + 0xc);\n        *(int *)(index + 0xc) = prevRelocOffset;\n        *(int *)(prevRelocOffset + 8) = index;\n        isSpecialCase = false;\n      }\n    }\n    else {\n      isSpecialCase = false;\n    }\n    if (-1 < *(int *)(currentReloc + newOffsetPlusSize + 4) << 0x1f) {\n      newOffset = newOffset + newOffsetPlusSize;\n      index = *(int *)(currentReloc + 8);\n      if ((!isSpecialCase) && (index == 0x2007046c)) {\n        relocationArray[142].r_info = newReloc;\n        relocationArray[143].r_offset = newReloc;\n        *(undefined4 *)(newReloc + 0xc) = 0x2007046c;\n        *(undefined4 *)(newReloc + 8) = 0x2007046c;\n        *(uint *)(newReloc + 4) = newOffset | 1;\n        *(uint *)(newReloc + newOffset) = newOffset;\n        goto LAB_00083e30;\n      }\n      prevRelocOffset = *(int *)(currentReloc + 0xc);\n      *(int *)(index + 0xc) = prevRelocOffset;\n      *(int *)(prevRelocOffset + 8) = index;\n    }\n    *(uint *)(newReloc + 4) = newOffset | 1;\n    *(uint *)(newReloc + newOffset) = newOffset;\n    if (!isSpecialCase) {\n      if (newOffset < 0x200) {\n        adjustedSize = newOffset & 0xfffffff8;\n        index = *(int *)((int)&relocationArray[0x8d].r_info + adjustedSize);\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << ((int)(newOffset >> 3) >> 2 & 0xffU);\n        *(int *)(newReloc + 8) = index;\n        *(uint *)(newReloc + 0xc) = adjustedSize + 0x20070464;\n        *(dword *)((int)&relocationArray[0x8d].r_info + adjustedSize) = newReloc;\n        *(dword *)(index + 0xc) = newReloc;\n        FUNC_0008259c(param1);\n        return;\n      }\n      adjustedSize = newOffset >> 9;\n      if (adjustedSize < 5) {\n        index = (newOffset >> 6) + 0x38;\n        prevRelocOffset = index * 2;\n      }\n      else if (adjustedSize < 0x15) {\n        index = adjustedSize + 0x5b;\n        prevRelocOffset = index * 2;\n      }\n      else if (adjustedSize < 0x55) {\n        index = (newOffset >> 0xc) + 0x6e;\n        prevRelocOffset = index * 2;\n      }\n      else if (adjustedSize < 0x155) {\n        index = (newOffset >> 0xf) + 0x77;\n        prevRelocOffset = index * 2;\n      }\n      else if (adjustedSize < 0x555) {\n        index = (newOffset >> 0x12) + 0x7c;\n        prevRelocOffset = index * 2;\n      }\n      else {\n        prevRelocOffset = 0xfc;\n        index = 0x7e;\n      }\n      nextReloc = prevRelocOffset * 4 + 0x20070464;\n      currentReloc = (&relocationArray[0x8d].r_info)[prevRelocOffset];\n      if (currentReloc == nextReloc) {\n        relocationArray[141].r_offset =\n             relocationArray[141].r_offset | 1 << (index >> 2 & 0xffU);\n        nextReloc = currentReloc;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentReloc + 4) & 0xfffffffc) <= newOffset) break;\n          currentReloc = *(dword *)(currentReloc + 8);\n        } while (nextReloc != currentReloc);\n        nextReloc = *(dword *)(currentReloc + 0xc);\n      }\n      *(dword *)(newReloc + 0xc) = nextReloc;\n      *(dword *)(newReloc + 8) = currentReloc;\n      *(dword *)(nextReloc + 8) = newReloc;\n      *(dword *)(currentReloc + 0xc) = newReloc;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_info_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index",
                "bVar2": "isSpecialCase",
                "uVar3": "adjustedSize",
                "dVar4": "currentReloc",
                "iVar5": "prevRelocOffset",
                "uVar6": "newOffset",
                "dVar7": "newReloc",
                "uVar8": "newOffsetPlusSize",
                "dVar9": "nextReloc",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "update_relocation_info_00083d00": "updateRelocationInfo"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "improve_and_process_data_00083f34",
            "code": "\nundefined4 improve_and_process_data_00083f34(undefined4 *output_ptr,uint *input_ptr,uint **additional_data_ptr)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flag;\n  uint temp;\n  uint *ptr1;\n  uint *ptr2;\n  uint size;\n  uint relocation_size;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  \n  if (additional_data_ptr[2] != (uint *)0x0) {\n    flag = *(ushort *)(input_ptr + 3);\n    temp = (uint)flag;\n    if (((int)(temp << 0x1c) < 0) && (input_ptr[4] != 0)) {\n      ptr2 = *additional_data_ptr;\n    }\n    else {\n      result = initialize_check_update_symbols_00083808(output_ptr,input_ptr);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input_ptr + 3);\n      temp = (uint)flag;\n      ptr2 = *additional_data_ptr;\n    }\n    if ((flag & 2) == 0) {\n      value1 = temp & 2;\n      temp2 = value1;\n      size = value1;\n      temp4 = value1;\n      if ((temp & 1) == 0) {\n        value1 = 0;\n        temp2 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          size = input_ptr[2];\n          if ((int)(temp << 0x16) < 0) {\n            if (value1 < size) {\n              temp = *input_ptr;\n              size = value1;\n            }\n            else if ((temp & 0x480) == 0) {\n              temp = *input_ptr;\n            }\n            else {\n              result = *input_ptr - input_ptr[4];\n              size = result + 1 + value1;\n              relocation_size = (int)(input_ptr[5] * 3) / 2;\n              if (size <= relocation_size) {\n                size = relocation_size;\n              }\n              if ((int)(temp << 0x15) < 0) {\n                relocation_size = relocate_symbols_00081e14(output_ptr,size);\n                if (relocation_size == 0) {\n                  *output_ptr = 0xc;\n                  flag = *(ushort *)(input_ptr + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(relocation_size,input_ptr[4],result);\n                *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                relocation_size = relocate_symbols_000825b0(output_ptr);\n                if (relocation_size == 0) {\n                  update_relocation_info_00083d9c(output_ptr,input_ptr[4]);\n                  flag = *(ushort *)(input_ptr + 3) & 0xff7f;\n                  *output_ptr = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp = relocation_size + result;\n              input_ptr[4] = relocation_size;\n              input_ptr[5] = size;\n              *input_ptr = temp;\n              input_ptr[2] = size - result;\n              size = value1;\n            }\n            copy_memory_00082438(temp,temp2,size);\n            input_ptr[2] = input_ptr[2] - size;\n            *input_ptr = *input_ptr + size;\n            size = value1;\n          }\n          else if ((input_ptr[4] < *input_ptr) || (temp = input_ptr[5], value1 < temp)) {\n            if (value1 < size) {\n              size = value1;\n            }\n            copy_memory_00082438(*input_ptr,temp2,size);\n            temp = input_ptr[2];\n            input_ptr[2] = temp - size;\n            *input_ptr = *input_ptr + size;\n            if ((temp - size == 0) && (result = reverse_and_update_data_00083adc(output_ptr,input_ptr), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            size = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              size = value1;\n            }\n            size = (*(code *)input_ptr[9])(output_ptr,input_ptr[7],temp2,(size / temp) * temp);\n            if ((int)size < 1) goto LAB_0008402e;\n          }\n          ptr1 = additional_data_ptr[2];\n          temp2 = temp2 + size;\n          value1 = value1 - size;\n          additional_data_ptr[2] = (uint *)((int)ptr1 - size);\n          if ((uint *)((int)ptr1 - size) == (uint *)0x0) break;\n          temp = (uint)*(ushort *)(input_ptr + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            size = *ptr2;\n            value1 = ptr2[1];\n            temp4 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp4 == 0) {\n            result = find_first_occurrence_00084384(size,10,value1);\n            if (result == 0) {\n              temp2 = value1 + 1;\n              temp4 = 1;\n            }\n            else {\n              temp2 = (result + 1) - size;\n              temp4 = 1;\n            }\n          }\n          relocation_size = *input_ptr;\n          temp = temp2;\n          if (value1 <= temp2) {\n            temp = value1;\n          }\n          value2 = input_ptr[5];\n          if ((input_ptr[4] < relocation_size) && (temp3 = input_ptr[2] + value2, (int)temp3 < (int)temp)) {\n            copy_memory_00082438(relocation_size,size,temp3);\n            *input_ptr = *input_ptr + temp3;\n            result = reverse_and_update_data_00083adc(output_ptr,input_ptr);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp < (int)value2) {\n            copy_memory_00082438(relocation_size,size,temp);\n            input_ptr[2] = input_ptr[2] - temp;\n            *input_ptr = temp + *input_ptr;\n            temp3 = temp;\n          }\n          else {\n            temp3 = (*(code *)input_ptr[9])(output_ptr,input_ptr[7],size,value2);\n            if ((int)temp3 < 1) goto LAB_0008402e;\n          }\n          temp2 = temp2 - temp3;\n          if (temp2 == 0) {\n            result = reverse_and_update_data_00083adc(output_ptr,input_ptr);\n            if (result != 0) goto LAB_0008402e;\n            temp4 = 0;\n          }\n          ptr1 = additional_data_ptr[2];\n          size = size + temp3;\n          value1 = value1 - temp3;\n          additional_data_ptr[2] = (uint *)((int)ptr1 - temp3);\n        } while ((uint *)((int)ptr1 - temp3) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp = 0;\n      do {\n        while( true ) {\n          temp2 = temp;\n          if (0x7ffffbff < temp) {\n            temp2 = 0x7ffffc00;\n          }\n          if (temp != 0) break;\n          value1 = *ptr2;\n          temp = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input_ptr[9])(output_ptr,input_ptr[7],value1,temp2);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(input_ptr + 3);\nLAB_00084030:\n          *(ushort *)(input_ptr + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = additional_data_ptr[2];\n        value1 = value1 + result;\n        temp = temp - result;\n        additional_data_ptr[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "improve_and_process_data_00083f34",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "additional_data_ptr",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flag",
                "uVar5": "temp",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "size",
                "uVar9": "relocation_size",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "local_2c": "temp4"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relArray[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_and_check_symbols_000842a4",
            "code": "\nvoid initializeAndCheckSymbols_000842a4(int param1,int *param2)\n\n{\n  ushort ushortValue;\n  int initializeMemoryResult;\n  int relocateSymbolsResult;\n  uint uVar4;\n  bool isConditionMet;\n  undefined stackArray [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(param2 + 3);\n  uVar4 = (uint)ushortValue;\n  if ((int)(uVar4 << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    initializeMemoryResult = initialize_memory_000846b4(param1,(int)*(short *)((int)param2 + 0xe),stackArray);\n    if (-1 < initializeMemoryResult) {\n      isConditionMet = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (param2[10] == 0x8449d)) {\n        initializeMemoryResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        initializeMemoryResult = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushortValue = *(ushort *)(param2 + 3);\n    uVar4 = (uint)ushortValue;\n  }\n  *(ushort *)(param2 + 3) = ushortValue | 0x800;\n  if ((uVar4 & 0x80) == 0) {\n    initializeMemoryResult = 0x400;\n  }\n  else {\n    initializeMemoryResult = 0x40;\n  }\n  isConditionMet = false;\nLAB_00084300:\n  relocateSymbolsResult = relocate_symbols_00081e14(param1,initializeMemoryResult);\n  ushortValue = *(ushort *)(param2 + 3);\n  if (relocateSymbolsResult == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(param2 + 3) = ushortValue | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(param2 + 3) = ushortValue | 0x80;\n    *param2 = relocateSymbolsResult;\n    param2[4] = relocateSymbolsResult;\n    param2[5] = initializeMemoryResult;\n    if ((isConditionMet) && (initializeMemoryResult = initialize_and_check_value_000846dc(param1,(int)*(short *)((int)param2 + 0xe)), initializeMemoryResult != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_and_check_symbols_000842a4",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushortValue",
                "iVar2": "initializeMemoryResult",
                "iVar3": "relocateSymbolsResult",
                "bVar5": "isConditionMet",
                "auStack_54": "stackArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint size)\n\n{\n  uint uVar1;\n  int index;\n  uint *ptr;\n  bool is_last_element;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < size) {\n      ptr = array;\n      do {\n        uVar1 = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((uVar1 + 0xfefefeff & ~uVar1 & 0x80808080) != 0) break;\n        size = size - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_element = index == size - 1;\n        index = index + 1;\n        if (is_last_element) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (size == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    size = size - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (size == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      size = size - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "size",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_element"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_and_update_data_00084464",
            "code": "\nvoid processAndUpdateData_00084464(int *dataArray,int dataStructIndex,undefined4 paramA,undefined4 paramB)\n\n{\n  int iVar1;\n  ushort ushortValue;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  ushortValue = *(ushort *)(dataStructIndex + 0xc);\n  if ((int)((uint)ushortValue << 0x17) < 0) {\n    initializeAndCheck(dataArray,(int)*(short *)(dataStructIndex + 0xe),0,2);\n    ushortValue = *(ushort *)(dataStructIndex + 0xc);\n  }\n  *(ushort *)(dataStructIndex + 0xc) = ushortValue & 0xefff;\n  DAT_200711bc = 0;\n  iVar1 = processData((int)*(short *)(dataStructIndex + 0xe),paramA,paramB,paramB,tempVar1,tempVar2,\n                       tempVar3,tempVar4);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *dataArray = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_and_update_data_00084464",
                "param_1": "dataArray",
                "param_2": "dataStructIndex",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "unaff_r6": "tempVar3",
                "in_lr": "tempVar4",
                "uVar2": "ushortValue",
                "initialize_and_check_00084700": "initializeAndCheck",
                "process_data_000811cc": "processData"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "initialize_and_check_0008449c",
            "code": "\nvoid initializeAndCheck_0008449c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  \n  result = initialize_and_check_00084700(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "initialize_and_check_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int dataStruct,uint symbol,undefined4 *ptrArray,undefined4 size)\n\n{\n  ushort ushortValue;\n  uint uintValue;\n  undefined *undefinedPtr;\n  int offset;\n  \n  if ((dataStruct != 0) && (*(int *)(dataStruct + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  ushortValue = *(ushort *)(ptrArray + 3);\n  uintValue = (uint)ushortValue;\n  ptrArray[2] = ptrArray[6];\n  if ((-1 < (int)(uintValue << 0x1c)) || (offset = ptrArray[4], offset == 0)) {\n    offset = initialize_check_update_symbols_00083808(dataStruct,ptrArray,ushortValue,uintValue,size);\n    if (offset != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(ptrArray + 3);\n    offset = ptrArray[4];\n    uintValue = (uint)ushortValue;\n  }\n  symbol = symbol & 0xff;\n  if ((int)(uintValue << 0x12) < 0) {\n    undefinedPtr = (undefined *)*ptrArray;\n    offset = (int)undefinedPtr - offset;\n    if (offset < (int)ptrArray[5]) {\nLAB_000844f6:\n      offset = offset + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    ptrArray[0x19] = ptrArray[0x19] & 0xffffdfff;\n    undefinedPtr = (undefined *)*ptrArray;\n    *(ushort *)(ptrArray + 3) = ushortValue | 0x2000;\n    offset = (int)undefinedPtr - offset;\n    if (offset < (int)ptrArray[5]) goto LAB_000844f6;\n  }\n  offset = reverse_and_update_data_00083adc(dataStruct,ptrArray);\n  if (offset != 0) {\n    return 0xffffffff;\n  }\n  undefinedPtr = (undefined *)*ptrArray;\n  offset = 1;\nLAB_000844f8:\n  ptrArray[2] = ptrArray[2] + -1;\n  *ptrArray = undefinedPtr + 1;\n  *undefinedPtr = (char)symbol;\n  if (((ptrArray[5] == offset) ||\n      (((int)((uint)*(ushort *)(ptrArray + 3) << 0x1f) < 0 && (symbol == 10)))) &&\n     (offset = reverse_and_update_data_00083adc(dataStruct,ptrArray), offset != 0)) {\n    return 0xffffffff;\n  }\n  return symbol;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "dataStruct",
                "param_2": "symbol",
                "param_3": "ptrArray",
                "param_4": "size",
                "uVar1": "ushortValue",
                "uVar2": "uintValue",
                "puVar3": "undefinedPtr",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *outputPtr,int inputSize,undefined4 inputValue,undefined4 *resultPtr)\n\n{\n  code *functionPtr;\n  undefined4 memoryAddress;\n  int returnValue;\n  undefined inputBuffer [12];\n  \n  functionPtr = DAT_20070898;\n  if (inputSize == 0) {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPtr)(outputPtr,inputBuffer,0,memoryAddress,resultPtr);\n  }\n  else {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPtr)(outputPtr,inputSize,inputValue,memoryAddress,resultPtr);\n  }\n  if (returnValue == -1) {\n    *resultPtr = 0;\n    *outputPtr = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "outputPtr",
                "param_2": "inputSize",
                "param_3": "inputValue",
                "param_4": "resultPtr",
                "pcVar1": "functionPtr",
                "uVar2": "memoryAddress",
                "iVar3": "returnValue",
                "auStack_24": "inputBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "store_character_in_memory_000845bc",
            "code": "\nundefined4 store_character_in_memory_000845bc(undefined4 *memory_address,undefined *target_pointer,uint character_value)\n\n{\n  if (target_pointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (character_value < 0x100) {\n    *target_pointer = (char)character_value;\n    return 1;\n  }\n  *memory_address = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "store_character_in_memory_000845bc",
                "param_1": "memory_address",
                "param_2": "target_pointer",
                "param_3": "character_value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_relocation_000846a4",
            "code": "\nundefined4 process_relocation_000846a4(int relocation_entry)\n\n{\n  dword relocation_offset;\n  undefined4 result;\n  int error_code;\n  \n  relocation_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (relocation_entry != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083b14();\n    }\n    if (*(short *)(relocation_entry + 0xc) != 0) {\n      result = reverse_and_update_data_00083adc(relocation_offset,relocation_entry);\n      if ((*(code **)(relocation_entry + 0x2c) != (code *)0x0) &&\n         (error_code = (**(code **)(relocation_entry + 0x2c))(relocation_offset,*(undefined4 *)(relocation_entry + 0x1c)), error_code < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(relocation_entry + 0xc) << 0x18) < 0) {\n        update_relocation_info_00083d9c(relocation_offset,*(undefined4 *)(relocation_entry + 0x10));\n      }\n      if (*(int *)(relocation_entry + 0x30) != 0) {\n        if (*(int *)(relocation_entry + 0x30) != relocation_entry + 0x40) {\n          update_relocation_info_00083d9c(relocation_offset);\n        }\n        *(undefined4 *)(relocation_entry + 0x30) = 0;\n      }\n      if (*(int *)(relocation_entry + 0x44) != 0) {\n        update_relocation_info_00083d9c(relocation_offset);\n        *(undefined4 *)(relocation_entry + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(relocation_entry + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_relocation_000846a4",
                "param_1": "relocation_entry",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "iVar3": "error_code"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_memory_000846b4",
            "code": "\nvoid initializeMemory_000846b4(int *result,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_memory_000811b4(paramA,paramB,paramB,0,paramC);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_memory_000846b4",
                "param_1": "result",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "initialize_and_check_value_000846dc",
            "code": "\nvoid initializeAndCheckValue_000846dc(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = initialize_000811be(inputValue);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "initialize_and_check_value_000846dc",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "initialize_and_check_00084700",
            "code": "\nvoid initializeAndCheck_00084700(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_000811c2(arg1,arg2,arg3);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "initialize_and_check_00084700",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "update_status_00084728",
            "code": "\nvoid updateStatus_00084728(int *result,undefined4 val1,undefined4 val2,undefined4 val3)\n\n{\n  int status;\n  \n  DAT_200711bc = 0;\n  status = check_status_000811c6(val1,val2,val3);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "update_status_00084728",
                "param_1": "result",
                "param_2": "val1",
                "param_3": "val2",
                "param_4": "val3",
                "iVar1": "status"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculate_result_00084750(int input_1,int input_2,int flag_1,int flag_2)\n\n{\n  int result;\n  \n  if ((flag_2 == 0) && (flag_1 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = subtract_param_and_multiply_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "flag_1",
                "param_4": "flag_2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_store_0008477c",
            "code": "\nvoid subtractAndStore_0008477c(uint inputValue,int subtractValue,undefined4 concatenationLow,undefined4 concatenationHigh,int *resultArray)\n\n{\n  uint calculationResult;\n  longlong multiplicationResult;\n  \n  multiplicationResult = division_with_remainder_000847e0();\n  multiplicationResult = multiplicationResult * CONCAT44(concatenationHigh,concatenationLow);\n  calculationResult = (uint)multiplicationResult;\n  *resultArray = inputValue - calculationResult;\n  resultArray[1] = (subtractValue - (int)((ulonglong)multiplicationResult >> 0x20)) - (uint)(inputValue < calculationResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_store_0008477c",
                "param_1": "inputValue",
                "param_2": "subtractValue",
                "param_3": "concatenationLow",
                "param_4": "concatenationHigh",
                "param_5": "resultArray",
                "uVar1": "calculationResult",
                "lVar2": "multiplicationResult"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_param_and_multiply_000847ac",
            "code": "\nvoid subtractParamAndMultiply_000847ac(uint inputValue,int param2,undefined4 param3,undefined4 param4,int *outputParams)\n\n{\n  uint result;\n  longlong product;\n  \n  product = perform_division_00084a80();\n  product = product * CONCAT44(param4,param3);\n  result = (uint)product;\n  *outputParams = inputValue - result;\n  outputParams[1] = (param2 - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_param_and_multiply_000847ac",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputParams",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "division_with_remainder_000847e0",
            "code": "\nundefined8 divisionWithRemainder_000847e0(uint dividend,uint dividendHigh,uint divisor,uint divisorHigh)\n\n{\n  longlong quotient;\n  uint quotientLow;\n  uint quotientHigh;\n  uint remainder;\n  uint temp1;\n  int shift;\n  uint tmp1;\n  uint tmp2;\n  uint isNegativeDividend;\n  uint tmp3;\n  uint tmp4;\n  uint tmp5;\n  bool isNegativeRemainder;\n  \n  if ((int)dividendHigh < 0) {\n    isNegativeRemainder = dividend != 0;\n    dividend = -dividend;\n    dividendHigh = -dividendHigh - (uint)isNegativeRemainder;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorHigh < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    isNegativeRemainder = divisor != 0;\n    divisor = -divisor;\n    divisorHigh = -divisorHigh - (uint)isNegativeRemainder;\n  }\n  if (divisorHigh == 0) {\n    if (dividendHigh < divisor) {\n      shift = LZCOUNT(divisor);\n      if (shift != 0) {\n        quotientHigh = dividend >> (0x20U - shift & 0xff);\n        divisor = divisor << shift;\n        dividend = dividend << shift;\n        dividendHigh = dividendHigh << shift | quotientHigh;\n      }\n      quotientLow = divisor >> 0x10;\n      remainder = dividendHigh / quotientLow;\n      tmp1 = (divisor & 0xffff) * remainder;\n      tmp3 = dividend >> 0x10 | (dividendHigh - quotientLow * remainder) * 0x10000;\n      quotientHigh = remainder;\n      if (tmp3 <= tmp1 && tmp1 - tmp3 != 0) {\n        isNegativeRemainder = CARRY4(tmp3,divisor);\n        tmp3 = tmp3 + divisor;\n        quotientHigh = remainder - 1;\n        if ((isNegativeRemainder == false) && (tmp3 <= tmp1 && tmp1 - tmp3 != 0)) {\n          quotientHigh = remainder - 2;\n          tmp3 = tmp3 + divisor;\n        }\n      }\n      tmp2 = (tmp3 - tmp1) / quotientLow;\n      remainder = (divisor & 0xffff) * tmp2;\n      tmp1 = dividend & 0xffff | ((tmp3 - tmp1) - quotientLow * tmp2) * 0x10000;\n      quotientLow = tmp2;\n      if (tmp1 <= remainder && remainder - tmp1 != 0) {\n        quotientLow = tmp2 - 1;\n        if ((CARRY4(tmp1,divisor) == false) &&\n           (tmp1 + divisor <= remainder && remainder - (tmp1 + divisor) != 0)) {\n          quotientLow = tmp2 - 2;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotientHigh = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividendHigh = dividendHigh - divisor;\n        remainder = divisor >> 0x10;\n        tmp5 = divisor & 0xffff;\n        quotientHigh = 1;\n      }\n      else {\n        divisor = divisor << shift;\n        quotientHigh = dividendHigh >> (0x20U - shift & 0xff);\n        remainder = divisor >> 0x10;\n        tmp3 = quotientHigh / remainder;\n        tmp5 = divisor & 0xffff;\n        tmp1 = tmp5 * tmp3;\n        tmp2 = dividend >> (0x20U - shift & 0xff) | dividendHigh << shift;\n        quotientHigh = tmp2 >> 0x10 | (quotientHigh - remainder * tmp3) * 0x10000;\n        dividend = dividend << shift;\n        quotientLow = tmp3;\n        if (quotientHigh <= tmp1 && tmp1 - quotientHigh != 0) {\n          isNegativeRemainder = CARRY4(quotientHigh,divisor);\n          quotientHigh = quotientHigh + divisor;\n          quotientLow = tmp3 - 1;\n          if ((isNegativeRemainder == false) && (quotientHigh <= tmp1 && tmp1 - quotientHigh != 0)) {\n            quotientLow = tmp3 - 2;\n            quotientHigh = quotientHigh + divisor;\n          }\n        }\n        temp1 = (quotientHigh - tmp1) / remainder;\n        tmp3 = tmp5 * temp1;\n        dividendHigh = tmp2 & 0xffff | ((quotientHigh - tmp1) - remainder * temp1) * 0x10000;\n        quotientHigh = temp1;\n        if (dividendHigh <= tmp3 && tmp3 - dividendHigh != 0) {\n          isNegativeRemainder = CARRY4(dividendHigh,divisor);\n          dividendHigh = dividendHigh + divisor;\n          quotientHigh = temp1 - 1;\n          if ((isNegativeRemainder == false) && (dividendHigh <= tmp3 && tmp3 - dividendHigh != 0)) {\n            quotientHigh = temp1 - 2;\n            dividendHigh = dividendHigh + divisor;\n          }\n        }\n        dividendHigh = dividendHigh - tmp3;\n        quotientHigh = quotientHigh | quotientLow << 0x10;\n      }\n      quotientLow = dividendHigh / remainder;\n      tmp3 = tmp5 * quotientLow;\n      tmp2 = dividend >> 0x10 | (dividendHigh - remainder * quotientLow) * 0x10000;\n      tmp1 = quotientLow;\n      if (tmp2 <= tmp3 && tmp3 - tmp2 != 0) {\n        isNegativeRemainder = CARRY4(tmp2,divisor);\n        tmp2 = tmp2 + divisor;\n        tmp1 = quotientLow - 1;\n        if ((isNegativeRemainder == false) && (tmp2 <= tmp3 && tmp3 - tmp2 != 0)) {\n          tmp1 = quotientLow - 2;\n          tmp2 = tmp2 + divisor;\n        }\n      }\n      temp1 = (tmp2 - tmp3) / remainder;\n      tmp5 = tmp5 * temp1;\n      remainder = dividend & 0xffff | ((tmp2 - tmp3) - remainder * temp1) * 0x10000;\n      quotientLow = temp1;\n      if (remainder <= tmp5 && tmp5 - remainder != 0) {\n        quotientLow = temp1 - 1;\n        if ((CARRY4(remainder,divisor) == false) &&\n           (remainder + divisor <= tmp5 && tmp5 - (remainder + divisor) != 0)) {\n          quotientLow = temp1 - 2;\n        }\n      }\n      quotientLow = quotientLow | tmp1 << 0x10;\n    }\n  }\n  else if (dividendHigh < divisorHigh) {\n    quotientHigh = 0;\n    quotientLow = 0;\n  }\n  else {\n    shift = LZCOUNT(divisorHigh);\n    if (shift == 0) {\n      if ((divisorHigh < dividendHigh) || (divisor <= dividend)) {\n        quotientHigh = 0;\n        quotientLow = 1;\n      }\n      else {\n        quotientLow = 0;\n        quotientHigh = 0;\n      }\n    }\n    else {\n      quotientHigh = 0x20 - shift;\n      remainder = dividendHigh >> (quotientHigh & 0xff);\n      tmp5 = divisor >> (quotientHigh & 0xff) | divisorHigh << shift;\n      tmp3 = tmp5 >> 0x10;\n      quotientLow = remainder / tmp3;\n      tmp2 = (tmp5 & 0xffff) * quotientLow;\n      tmp1 = dividendHigh << shift | dividend >> (quotientHigh & 0xff);\n      remainder = tmp1 >> 0x10 | (remainder - tmp3 * quotientLow) * 0x10000;\n      quotientHigh = quotientLow;\n      if (remainder <= tmp2 && tmp2 - remainder != 0) {\n        isNegativeRemainder = CARRY4(remainder,tmp5);\n        remainder = remainder + tmp5;\n        quotientHigh = quotientLow - 1;\n        if ((isNegativeRemainder == false) && (remainder <= tmp2 && tmp2 - remainder != 0)) {\n          quotientHigh = quotientLow - 2;\n          remainder = remainder + tmp5;\n        }\n      }\n      temp1 = (remainder - tmp2) / tmp3;\n      tmp4 = (tmp5 & 0xffff) * temp1;\n      remainder = tmp1 & 0xffff | ((remainder - tmp2) - tmp3 * temp1) * 0x10000;\n      quotientLow = temp1;\n      if (remainder <= tmp4 && tmp4 - remainder != 0) {\n        isNegativeRemainder = CARRY4(remainder,tmp5);\n        remainder = remainder + tmp5;\n        quotientLow = temp1 - 1;\n        if ((isNegativeRemainder == false) && (remainder <= tmp4 && tmp4 - remainder != 0)) {\n          quotientLow = temp1 - 2;\n          remainder = remainder + tmp5;\n        }\n      }\n      quotientLow = quotientLow | quotientHigh << 0x10;\n      quotient = (ulonglong)quotientLow * (ulonglong)(divisor << shift);\n      tmp1 = (uint)((ulonglong)quotient >> 0x20);\n      quotientHigh = 0;\n      if ((remainder - tmp4 < tmp1) ||\n         ((remainder - tmp4 == tmp1 && (dividend << shift < (uint)quotient)))) {\n        quotientLow = quotientLow - 1;\n        quotientHigh = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    isNegativeRemainder = quotientLow != 0;\n    quotientLow = -quotientLow;\n    quotientHigh = -quotientHigh - (uint)isNegativeRemainder;\n  }\n  return CONCAT44(quotientHigh,quotientLow);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "division_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisor",
                "param_4": "divisorHigh",
                "lVar1": "quotient",
                "uVar2": "quotientLow",
                "uVar3": "quotientHigh",
                "uVar4": "remainder",
                "uVar5": "temp1",
                "iVar6": "shift",
                "uVar7": "tmp1",
                "uVar8": "tmp2",
                "uVar9": "isNegativeDividend",
                "uVar10": "tmp3",
                "uVar11": "tmp4",
                "uVar12": "tmp5",
                "bVar13": "isNegativeRemainder"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "perform_division_00084a80",
            "code": "\nulonglong performDivision_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int bitShift;\n  bool isCarry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      bitShift = LZCOUNT(quotient);\n      if (bitShift == 0) {\n        divisor = divisor - quotient;\n        temp2 = quotient >> 0x10;\n        temp4 = quotient & 0xffff;\n        temp1 = 1;\n      }\n      else {\n        quotient = quotient << bitShift;\n        temp7 = divisor >> (0x20U - bitShift & 0xff);\n        temp2 = quotient >> 0x10;\n        temp8 = temp7 / temp2;\n        temp4 = quotient & 0xffff;\n        temp1 = temp4 * temp8;\n        temp5 = dividend >> (0x20U - bitShift & 0xff) | divisor << bitShift;\n        temp3 = temp5 >> 0x10 | (temp7 - temp2 * temp8) * 0x10000;\n        dividend = dividend << bitShift;\n        temp7 = temp8;\n        if (temp3 <= temp1 && temp1 - temp3 != 0) {\n          isCarry = CARRY4(temp3,quotient);\n          temp3 = temp3 + quotient;\n          temp7 = temp8 - 1;\n          if ((isCarry == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n            temp7 = temp8 - 2;\n            temp3 = temp3 + quotient;\n          }\n        }\n        temp6 = (temp3 - temp1) / temp2;\n        temp8 = temp4 * temp6;\n        divisor = temp5 & 0xffff | ((temp3 - temp1) - temp2 * temp6) * 0x10000;\n        temp1 = temp6;\n        if (divisor <= temp8 && temp8 - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          temp1 = temp6 - 1;\n          if ((isCarry == false) && (divisor <= temp8 && temp8 - divisor != 0)) {\n            temp1 = temp6 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp8;\n        temp1 = temp1 | temp7 << 0x10;\n      }\n      temp8 = divisor / temp2;\n      temp3 = temp4 * temp8;\n      temp5 = dividend >> 0x10 | (divisor - temp2 * temp8) * 0x10000;\n      temp7 = temp8;\n      if (temp5 <= temp3 && temp3 - temp5 != 0) {\n        isCarry = CARRY4(temp5,quotient);\n        temp5 = temp5 + quotient;\n        temp7 = temp8 - 1;\n        if ((isCarry == false) && (temp5 <= temp3 && temp3 - temp5 != 0)) {\n          temp7 = temp8 - 2;\n          temp5 = temp5 + quotient;\n        }\n      }\n      temp8 = (temp5 - temp3) / temp2;\n      temp4 = temp4 * temp8;\n      temp5 = dividend & 0xffff | ((temp5 - temp3) - temp2 * temp8) * 0x10000;\n      temp2 = temp8;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        temp2 = temp8 - 1;\n        if ((CARRY4(temp5,quotient) == false) &&\n           (temp5 + quotient <= temp4 && temp4 - (temp5 + quotient) != 0)) {\n          temp2 = temp8 - 2;\n        }\n      }\n      return CONCAT44(temp1,temp2 | temp7 << 0x10);\n    }\n    bitShift = LZCOUNT(quotient);\n    if (bitShift != 0) {\n      temp7 = dividend >> (0x20U - bitShift & 0xff);\n      quotient = quotient << bitShift;\n      dividend = dividend << bitShift;\n      divisor = temp7 | divisor << bitShift;\n    }\n    temp1 = quotient >> 0x10;\n    temp2 = divisor / temp1;\n    temp4 = (quotient & 0xffff) * temp2;\n    temp8 = dividend >> 0x10 | (divisor - temp1 * temp2) * 0x10000;\n    temp7 = temp2;\n    if (temp8 <= temp4 && temp4 - temp8 != 0) {\n      isCarry = CARRY4(temp8,quotient);\n      temp8 = temp8 + quotient;\n      temp7 = temp2 - 1;\n      if ((isCarry == false) && (temp8 <= temp4 && temp4 - temp8 != 0)) {\n        temp7 = temp2 - 2;\n        temp8 = temp8 + quotient;\n      }\n    }\n    temp5 = (temp8 - temp4) / temp1;\n    temp2 = (quotient & 0xffff) * temp5;\n    temp4 = dividend & 0xffff | ((temp8 - temp4) - temp1 * temp5) * 0x10000;\n    temp1 = temp5;\n    if (temp4 <= temp2 && temp2 - temp4 != 0) {\n      temp1 = temp5 - 1;\n      if ((CARRY4(temp4,quotient) == false) &&\n         (temp4 + quotient <= temp2 && temp2 - (temp4 + quotient) != 0)) {\n        temp1 = temp5 - 2;\n      }\n    }\n    temp1 = temp1 | temp7 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    bitShift = LZCOUNT(remainder);\n    if (bitShift == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      temp1 = 0;\n    }\n    else {\n      temp1 = 0x20 - bitShift;\n      temp7 = divisor >> (temp1 & 0xff);\n      temp2 = remainder << bitShift | quotient >> (temp1 & 0xff);\n      temp4 = temp2 >> 0x10;\n      temp3 = temp7 / temp4;\n      temp8 = (temp2 & 0xffff) * temp3;\n      temp5 = dividend >> (temp1 & 0xff) | divisor << bitShift;\n      temp1 = temp5 >> 0x10 | (temp7 - temp4 * temp3) * 0x10000;\n      temp7 = temp3;\n      if (temp1 <= temp8 && temp8 - temp1 != 0) {\n        isCarry = CARRY4(temp1,temp2);\n        temp1 = temp1 + temp2;\n        temp7 = temp3 - 1;\n        if ((isCarry == false) && (temp1 <= temp8 && temp8 - temp1 != 0)) {\n          temp7 = temp3 - 2;\n          temp1 = temp1 + temp2;\n        }\n      }\n      temp3 = (temp1 - temp8) / temp4;\n      temp6 = (temp2 & 0xffff) * temp3;\n      temp4 = temp5 & 0xffff | ((temp1 - temp8) - temp4 * temp3) * 0x10000;\n      temp1 = temp3;\n      if (temp4 <= temp6 && temp6 - temp4 != 0) {\n        isCarry = CARRY4(temp4,temp2);\n        temp4 = temp4 + temp2;\n        temp1 = temp3 - 1;\n        if ((isCarry == false) && (temp4 <= temp6 && temp6 - temp4 != 0)) {\n          temp1 = temp3 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp1 = temp1 | temp7 << 0x10;\n      result = (ulonglong)temp1 * (ulonglong)(quotient << bitShift);\n      temp7 = (uint)((ulonglong)result >> 0x20);\n      if ((temp4 - temp6 < temp7) || ((temp4 - temp6 == temp7 && (dividend << bitShift < (uint)result)))\n         ) {\n        temp1 = temp1 - 1;\n      }\n    }\n  }\n  return (ulonglong)temp1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "perform_division_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "bitShift",
                "bVar11": "isCarry"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 90527,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}