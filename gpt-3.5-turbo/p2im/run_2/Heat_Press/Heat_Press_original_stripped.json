{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "in_r0": "key_context",
                "init": "initialize",
                "initVariant": "initialize_variant",
                "delay": "delay_seconds",
                "DAT_000816d0": "data_flag"
            },
            "code": "int main_loop_000816a8(void)\n{\n  EVP_PKEY_CTX *key_context;\n  _watchdogDefaultSetup();\n  initialize(key_context);\n  initialize_variant();\n  delay_seconds(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_000816d0 == 0);\n    serialEventRun();\n  } while( true );\n}",
            "called": [
                "initVariant",
                "delay",
                "setup",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "init",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "set_bits_in_memory_00081042",
                "param_1": "memory_address",
                "param_2": "bit_mask",
                "param_3": "bit_offset",
                "param_4": "bit_value",
                "PTR_": "memory_",
                "DAT_": "data_"
            },
            "code": "void set_bits_in_memory_00081042(uint32_t* PTR_address, uint32_t bit_mask, uint32_t bit_offset, uint32_t bit_value) {\n  uint32_t* PTR_location = PTR_address + 1;\n  uint32_t current_value = *PTR_location;\n  uint32_t new_value = current_value | bit_mask | ((bit_offset & 0xf) << 0x18) | ((bit_value & 3) << 0x1c);\n  *PTR_location = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "write_to_stream_part_0",
                "param_1": "stream",
                "param_2": "stream_mode",
                "param_3": "stream_buffer",
                "piVar1": "buffer_pointer_1",
                "iVar2": "write_result",
                "piVar3": "buffer_pointer_2",
                "uVar4": "buffer_size_1",
                "puVar5": "buffer_pointer_3",
                "uVar6": "buffer_size_2",
                "uVar7": "buffer_size_3",
                "FUN_00082ac0": "write_to_stream_part_0_00082ac0"
            },
            "code": "int write_to_stream_part_0_00082ac0(undefined4 stream, int stream_mode, int **stream_buffer) {\n  int *buffer_pointer_1;\n  int write_result;\n  int *buffer_pointer_2;\n  uint buffer_size_1;\n  undefined4 *buffer_pointer_3;\n  uint buffer_size_2;\n  uint buffer_size_3;\n  \n  if (-1 < *(int *)(stream_mode + 100) << 0x12) {\n    write_result = __sfvwrite_r();\n    stream_buffer[2] = (int *)0x0;\n    stream_buffer[1] = (int *)0x0;\n    return write_result;\n  }\n  buffer_pointer_2 = stream_buffer[2];\n  buffer_pointer_1 = *stream_buffer;\n  while (buffer_pointer_2 != (int *)0x0) {\n    buffer_size_2 = buffer_pointer_1[1];\n    buffer_size_3 = buffer_size_2 >> 2;\n    if (buffer_size_3 != 0) {\n      buffer_pointer_3 = (undefined4 *)(*buffer_pointer_1 + -4);\n      buffer_size_1 = 0;\n      do {\n        buffer_pointer_3 = buffer_pointer_3 + 1;\n        write_result = _fputwc_r(stream, *buffer_pointer_3, stream_mode);\n        buffer_size_1 = buffer_size_1 + 1;\n        if (write_result == -1) goto LAB_00082b00;\n      } while (buffer_size_3 != buffer_size_1);\n      buffer_pointer_2 = stream_buffer[2];\n    }\n    buffer_pointer_2 = (int *)((int)buffer_pointer_2 - (buffer_size_2 & 0xfffffffc));\n    stream_buffer[2] = buffer_pointer_2;\n    buffer_pointer_1 = buffer_pointer_1 + 2;\n  }\n  write_result = 0;\nLAB_00082b00:\n  stream_buffer[2] = (int *)0x0;\n  stream_buffer[1] = (int *)0x0;\n  return write_result;\n}",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_part_0_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "checkAvailableSerialPorts_00080ce0",
                "iVar1": "availableBytes",
                "PTR_Serial_00080d14": "PTR_Serial_00080d14",
                "UARTClass::available": "UARTClass::available",
                "serialEvent": "serialEvent",
                "PTR_Serial1_00080d18": "PTR_Serial1_00080d18",
                "serialEvent1": "serialEvent1",
                "PTR_Serial2_00080d1c": "PTR_Serial2_00080d1c",
                "serialEvent2": "serialEvent2",
                "PTR_Serial3_00080d20": "PTR_Serial3_00080d20",
                "serialEvent3": "serialEvent3"
            },
            "code": "void checkAvailableSerialPorts_00080ce0(void)\n{\n  int availableBytes;\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n  if (availableBytes != 0) {\n    serialEvent();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n  if (availableBytes != 0) {\n    serialEvent1();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n  if (availableBytes != 0) {\n    serialEvent2();\n  }\n  availableBytes = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n  if (availableBytes != 0) {\n    serialEvent3();\n  }\n  return;\n}",
            "called": [
                "serialEvent",
                "available",
                "serialEvent2",
                "serialEvent3",
                "serialEvent1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkAvailableSerialPorts_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "wait_forever_00081164"
            },
            "code": "void wait_forever_00081164(void)\n{\n    while(true)\n    {\n        // Do nothing and wait forever\n    }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "wait_forever_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682::FUN_00081682": "String::String",
                "cstr": "str",
                "buffer": "buffer",
                "capacity": "capacity",
                "len": "length",
                "copy": "copy",
                "FUN_00081682": "String_00081682"
            },
            "code": "String_00081682 * __thiscall String_00081682::String_00081682(String_00081682 *this,char *str)\n{\n  size_t length;\n  this->buffer = nullptr;\n  this->capacity = 0;\n  this->length = 0;\n  if (str != nullptr) {\n    length = strlen(str);\n    copy(this, str, length);\n  }\n  return this;\n}",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "String_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "infinite_loop_00081166"
            },
            "code": "void infinite_loop_00081166(void)\n{\n    while(1);\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "getProcessID_00081202"
            },
            "code": "__pid_t getProcessID_00081202(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "getProcessID_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "_String": "freeStringBuffer",
                "this": "string",
                "__in_chrg": "inCharge",
                "FUN_000815fe": "freeStringBuffer_000815fe"
            },
            "code": "void* freeStringBuffer_000815fe(String* string, int inCharge) {\n  free(string->buffer);\n  return string;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "freeStringBuffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "set_flag_00081720",
                "param_1": "flag"
            },
            "code": "void set_flag_00081720(int flag) {\n  *(undefined4 *)(flag + 4) = 0x8000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_flag_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "validate_param_00081d1c",
                "param_1": "param",
                "uVar1": "shift_amount",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint validate_param_00081d1c(uint param)\n{\n  uint shifted_param = param << 1;\n  uint msb = shifted_param & 0x80000000;\n  uint shifted_msb = msb >> 31;\n  uint overflow_check = shifted_param | shifted_msb;\n  if (overflow_check < 0x7f000000)\n  {\n    return 0;\n  }\n  uint shift_amount = 0x9e - ((shifted_param) >> 0x18);\n  if (shift_amount < 0)\n  {\n    if ((shift_amount == 0xffffff9f) && ((param & 0x7fffff) != 0))\n    {\n      return 0;\n    }\n    else\n    {\n      return 0xffffffff;\n    }\n  }\n  else\n  {\n    uint shifted_result = param << 8;\n    uint sign_bit = 0x80000000;\n    uint shifted_sign_bit = sign_bit >> shift_amount;\n    uint result = shifted_result | shifted_sign_bit;\n    return result >> (shift_amount & 0xff);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "validate_param_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_proc_00083988",
                "__func": "exit_func",
                "iVar1": "exit_proc"
            },
            "code": "int register_exit_proc_00083988(__func *exit_func)\n{\n  int exit_proc;\n  exit_proc = __register_exitproc(0,exit_func,0,0);\n  return exit_proc;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_proc_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "difference",
                "uVar1": "product"
            },
            "code": "void calculate_difference_000847ac(uint numerator, int denominator, uint factor_low, uint factor_high, int *difference) {\n    uint product = numerator * ((uint64_t)factor_high << 32 | factor_low);\n    difference[0] = numerator - product;\n    difference[1] = denominator - (int)(product >> 32) - (numerator < product);\n}",
            "called": [
                "__udivdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_available_00080118",
                "param_1": "param_1",
                "param_2": "argument",
                "param_3": "arg_size",
                "param_4": "function_ptr",
                "DAT_00080134": "global_flag",
                "PTR_object_7862_0008013c": "object_pointer",
                "PTR__etext_00080140": "code_end_address",
                "DAT_00080144": "function_ptr_argument"
            },
            "code": "void execute_function_if_available_00080118(undefined4 param_1, undefined *argument, undefined4 arg_size, undefined4 function_ptr){\n    if (DAT_00080134 != 0) {\n        argument = PTR_object_7862_0008013c;\n    }\n    if ((*(int *)PTR__etext_00080140 != 0) && (function_ptr != (code *)0x0)) {\n        (*function_ptr)(PTR__etext_00080140, argument, arg_size, function_ptr, DAT_00080144);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_if_available_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "getTickCount_00081208",
                "PTR__dwTickCount_0008171c": "tickCountPtr"
            },
            "code": "uint32_t getTickCount_00081208(void)\n{\n  return *(uint32_t *)PTR__dwTickCount_0008171c;\n}",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "poll",
                "setup",
                "sendTxBuffer",
                "loop"
            ],
            "imported": false,
            "current_name": "getTickCount_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "FUNC_00081728"
            },
            "code": "\nuint FUNC_00081728(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_0008186a:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "is_not_CY_or_ZR_00081c94",
                "in_CY": "is_CY",
                "in_ZR": "is_ZR"
            },
            "code": "bool is_not_CY_or_ZR_00081c94(void)\n{\n  bool is_CY = __aeabi_cfcmpeq();\n  bool is_ZR = false;\n  return !is_CY || is_ZR;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_CY_or_ZR_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "iterate_and_execute_callbacks_000810f4",
                "uVar1": "leading_zeros",
                "uVar2": "bits_to_check",
                "PTR_callbacksPioC_00081128": "PTR_callbacks",
                "DAT_00081124": "DAT_starting_address"
            },
            "code": "void iterate_and_execute_callbacks_000810f4(void)\n{\n  uint32_t bits_to_check = *(uint32_t *)(DAT_00081124 + 0x4c);\n  while( true ) {\n    uint32_t leading_zeros = count_leading_zeroes(bits_to_check);\n    if (leading_zeros > 0x1f) break;\n    uint32_t index = 0x1f - leading_zeros;\n    code* callback = *(code **)(PTR_callbacksPioC_00081128PioC_00081128 + index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    bits_to_check &= ~(1 << index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "iterate_and_execute_callbacks_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_structure_address",
                "main_data_structure": "main_data_structure",
                "secondary_data_structure_1": "secondary_data_structure_1",
                "secondary_data_structure_2": "secondary_data_structure_2"
            },
            "code": "void initialize_data_structures_00083b14(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *main_data_structure = *(undefined4 **)(param_1 + 4);\n    undefined4 *secondary_data_structure_1 = *(undefined4 **)(param_1 + 8);\n    undefined4 *secondary_data_structure_2 = *(undefined4 **)(param_1 + 0xc);\n    main_data_structure[0] = 0;\n    main_data_structure[1] = 0;\n    main_data_structure[2] = 0;\n    main_data_structure[3] = DAT_00083bf4;\n    main_data_structure[4] = 0;\n    main_data_structure[5] = 0;\n    main_data_structure[6] = 0;\n    main_data_structure[7] = main_data_structure;\n    main_data_structure[8] = DAT_00083bf8;\n    main_data_structure[9] = DAT_00083bfc;\n    main_data_structure[10] = DAT_00083c00;\n    main_data_structure[11] = DAT_00083c04;\n    main_data_structure[22] = 0;\n    main_data_structure[23] = 0;\n    secondary_data_structure_1[0] = 0;\n    secondary_data_structure_1[1] = 0;\n    secondary_data_structure_1[2] = 0;\n    secondary_data_structure_1[3] = 0;\n    secondary_data_structure_1[4] = 0;\n    secondary_data_structure_1[5] = 0;\n    secondary_data_structure_1[6] = 0;\n    secondary_data_structure_1[7] = secondary_data_structure_1;\n    secondary_data_structure_1[8] = DAT_00083bf8;\n    secondary_data_structure_1[9] = DAT_00083bfc;\n    secondary_data_structure_1[10] = DAT_00083c00;\n    secondary_data_structure_1[11] = DAT_00083c04;\n    secondary_data_structure_1[22] = 0;\n    secondary_data_structure_1[23] = 0;\n    secondary_data_structure_2[0] = 0;\n    secondary_data_structure_2[1] = 0;\n    secondary_data_structure_2[2] = 0;\n    secondary_data_structure_2[3] = 0;\n    secondary_data_structure_2[4] = 0;\n    secondary_data_structure_2[5] = 0;\n    secondary_data_structure_2[6] = 0;\n    secondary_data_structure_2[7] = secondary_data_structure_2;\n    secondary_data_structure_2[8] = DAT_00083bf8;\n    secondary_data_structure_2[9] = DAT_00083bfc;\n    secondary_data_structure_2[10] = DAT_00083c00;\n    secondary_data_structure_2[11] = DAT_00083c04;\n    secondary_data_structure_2[22] = 0;\n    secondary_data_structure_2[23] = 0;\n    *(int *)(param_1 + 0x38) = 1;\n  }\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_vfiprintf_r",
                "__swsetup_r",
                "_fclose_r",
                "_fflush_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "allocate_memory_000842a4",
                "param_1": "file_descriptor",
                "param_2": "memory_block",
                "uVar1": "flags",
                "iVar2": "file_status",
                "iVar3": "alloc_size",
                "uVar4": "flags_uint",
                "bVar5": "is_executable",
                "auStack_54": "undefined_stack_buffer",
                "local_50": "local_file_status"
            },
            "code": "void allocate_memory_000842a4(int file_descriptor, int *memory_block)\n{\n  ushort flags = *(ushort *)(memory_block + 3);\n  uint flags_uint = (uint)flags;\n  if ((int)(flags_uint << 0x1e) < 0) {\n    *memory_block = (int)memory_block + 0x43;\n    memory_block[4] = (int)memory_block + 0x43;\n    memory_block[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory_block + 0xe)) {\n    int file_status = _fstat_r(file_descriptor, (int)*(short *)((int)memory_block + 0xe), undefined_stack_buffer);\n    if (-1 < file_status) {\n      bool is_executable = (local_50 & 0xf000) == 0x2000;\n      if (((local_50 & 0xf000) == 0x8000) && (memory_block[10] == DAT_00084380)) {\n        int alloc_size = 0x400;\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x400;\n        memory_block[0x13] = 0x400;\n      }\n      else {\n        int alloc_size = 0x400;\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x800;\n      }\n      goto allocation;\n    }\n    flags = *(ushort *)(memory_block + 3);\n    flags_uint = (uint)flags;\n  }\n  *(ushort *)(memory_block + 3) = flags | 0x800;\n  int alloc_size = (flags_uint & 0x80) == 0 ? 0x400 : 0x40;\n  bool is_executable = false;\nallocation:\n  int *allocated_memory_block = _malloc_r(file_descriptor, alloc_size);\n  flags = *(ushort *)(memory_block + 3);\n  if (allocated_memory_block == 0) {\n    if (-1 < (int)((uint)flags << 0x16)) {\n      *(ushort *)(memory_block + 3) = flags | 2;\n      *memory_block = (int)memory_block + 0x43;\n      memory_block[4] = (int)memory_block + 0x43;\n      memory_block[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(file_descriptor + 0x3c) = DAT_0008437c;\n    *(ushort *)(memory_block + 3) = flags | 0x80;\n    *memory_block = allocated_memory_block;\n    memory_block[4] = allocated_memory_block;\n    memory_block[5] = alloc_size;\n    if ((is_executable) && (_isatty_r(file_descriptor,(int)*(short *)((int)memory_block + 0xe)) != 0)) {\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 1;\n    }\n  }\n}",
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "FUN_00081dcc": "copy_parameters_to_stack_and_call_function_00081dcc",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uStack_c": "stack_parameter_1",
                "uStack_8": "stack_parameter_2",
                "uStack_4": "stack_parameter_3"
            },
            "code": "void copy_parameters_to_stack_and_call_function_00081dcc(int parameter_1, int parameter_2, int parameter_3, int parameter_4)\n{\n  int stack_parameter_1;\n  int stack_parameter_2;\n  int stack_parameter_3;\n  \n  stack_parameter_1 = parameter_2;\n  stack_parameter_2 = parameter_3;\n  stack_parameter_3 = parameter_4;\n  _vfcopy_parameters_to_stack_and_call_function_00081dcc_r(*(int *)PTR__impure_ptr_00081df0, *(int *)(*(int *)PTR__impure_ptr_00081df0 + 8), parameter_1, &stack_parameter_1);\n  return;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "copy_parameters_to_stack_and_call_function_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "waitForTransmission_0008143c",
                "this": "uartObject",
                "_tx_buffer": "txBufferObject",
                "_iHead": "txBufferHead",
                "_iTail": "txBufferTail",
                "_pUart": "uartPointer",
                "UARTClass": "UART"
            },
            "code": "void __thiscall UARTClass::waitForTransmission_0008143c(UARTClass *this)\n{\n  while (this->txBufferHead() != this->txBufferTail());\n  while ((this->uartPointer()->UART_SR & (1 << 22)) == 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmission_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "read_file_000846a4",
                "__stream": "file_pointer",
                "iVar1": "result"
            },
            "code": "int read_file_000846a4(FILE *file_pointer) {\n  int result = _read_file_000846a4_r(*(undefined4 *)PTR__impure_ptr_000846b0, file_pointer);\n  return result;\n}",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "read_file_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "copy_initialized_data_to_completed_00080f24",
                "puVar1": "source_ptr",
                "puVar2": "dest_ptr",
                "puVar4": "completed_ptr",
                "iVar3": "data_start",
                "PTR_banzai_00080f80": "banzai",
                "PTR__etext_00080f7c": "etext",
                "PTR_completed_7857_00080f84": "completed_start",
                "PTR__ebss_00080f8c": "ebss",
                "DAT_00080f94": "entry_point",
                "PTR_exception_table_00080f90": "exception_table"
            },
            "code": "void copy_initialized_data_to_completed_00080f24(void)\n{\n  uint32_t *source_ptr = PTR_banzai_00080f80;\n  uint32_t *dest_ptr = PTR__etext_00080f7c;\n  uint32_t *completed_ptr = PTR_completed_7857_00080f84;\n  if (PTR__etext_00080f7c != PTR_banzai_00080f80) {\n    while (source_ptr < completed_end) {\n      *source_ptr++ = *dest_ptr++;\n    }\n  }\n  while (completed_ptr < PTR__ebss_00080f8c) {\n    *completed_ptr++ = 0;\n  }\n  uint32_t *PTR_exception_table_00080f90_ptr = PTR_exception_table_00080f90 - 0x20000000;\n  *(uint32_t *)(data_start + 8) = (uint32_t)PTR_exception_table_00080f90 & 0x1fffff80;\n  if (PTR_exception_table_00080f90_ptr < (uint32_t *)0x100000) {\n    *(uint32_t *)(data_start + 8) |= 0x20000000;\n  }\n  (*DAT_00080f94)();\n  while(true) {}\n}\n",
            "called": [
                "banzai",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "copy_initialized_data_to_completed_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_and_00080e04",
                "param_1": "ptr_input",
                "param_2": "mask",
                "uVar1": "result"
            },
            "code": "uint check_bitwise_and_00080e04(uint ptr_input, uint mask) {\n  uint result = *(uint *)(ptr_input + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(ptr_input + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bitwise_and_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "setupModbus_000804a8",
                "puVar1": "telegramPtr",
                "puVar2": "dataPtr",
                "puVar3": "data8024Ptr",
                "this": "masterPtr",
                "uVar4": "currentMillis",
                "PTR_au16data_000805ac": "data",
                "PTR_telegram_000805a8": "telegram",
                "PTR_data8024_000805b0": "data8024",
                "PTR_master_000805b4": "master",
                "PTR_u32wait_000805b8": "wait",
                "PTR_tiempopid1_000805bc": "tiempopid1",
                "PTR_dutyalto1_000805c0": "dutyalto1",
                "PTR_dutybajo1_000805c4": "dutybajo1",
                "PTR_reloj_000805c8": "reloj",
                "PTR_u8state_000805cc": "state",
                "pinMode": "pinMode",
                "digitalWrite": "digitalWrite",
                "millis": "millis",
                "Modbus::begin": "modbus.begin",
                "startForkserver": "startForkserver"
            },
            "code": "void setupModbus_000804a8()\n{\n  uint32_t currentMillis;\n  uint16_t *PTR_au16data_000805acPtr;\n  uint8_t *PTR_telegram_000805a8Ptr;\n  uint8_t *PTR_PTR_au16data_000805ac8024_000805b0Ptr;\n  uint8_t *PTR_master_000805b4Ptr;\n  Modbus *modbusPtr;\n\n  pinMode(LED_BUILTIN, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(A0, INPUT);\n  pinMode(A1, INPUT);\n  digitalWrite(LED_BUILTIN, LOW);\n  digitalWrite(6, LOW);\n\n  PTR_telegram_000805a8Ptr = PTR_telegram_000805a8;\n  PTR_au16data_000805acPtr = PTR_au16data_000805ac;\n  PTR_PTR_au16data_000805ac8024_000805b0Ptr = PTR_PTR_au16data_000805ac8024_000805b0;\n  PTR_master_000805b4Ptr = PTR_master_000805b4;\n  modbusPtr = &modbus;\n\n  *(uint16_t *)(PTR_telegram_000805a8 + 0xE) = 0x13;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x10) = 10;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x14) = PTR_au16data_000805acPtr + 0x26;\n  PTR_telegram_000805a8[1] = 3;\n  PTR_telegram_000805a8[0x19] = 3;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x1A) = 0x14;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x28) = 3;\n  *(uint16_t *)(PTR_telegram_000805a8 + 4) = 0x10;\n  *(uint8_t **)(PTR_telegram_000805a8 + 8) = PTR_au16data_000805acPtr;\n  PTR_telegram_000805a8[0xD] = 0x10;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x1C) = 0xC;\n  PTR_telegram_000805a8[0x25] = 0x10;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x34) = 8;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x26) = 0x1C;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x2C) = PTR_au16data_000805acPtr + 0x38;\n  PTR_telegram_000805a8[0x30] = 2;\n  PTR_telegram_000805a8[0x31] = 2;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x38) = PTR_PTR_au16data_000805ac8024_000805b0Ptr;\n  PTR_telegram_000805a8[0x3C] = 2;\n  *PTR_telegram_000805a8 = 1;\n  PTR_telegram_000805a8[0xC] = 1;\n  PTR_telegram_000805a8[0x18] = 1;\n  PTR_telegram_000805a8[0x24] = 1;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x3E) = 1;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x40) = 1;\n  *(uint16_t *)(PTR_telegram_000805a8 + 2) = 0;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x20) = PTR_au16data_000805acPtr + 0x28;\n  *(uint16_t *)(PTR_telegram_000805a8 + 0x32) = 0;\n  PTR_telegram_000805a8[0x3D] = 5;\n  *(uint8_t **)(PTR_telegram_000805a8 + 0x44) = PTR_PTR_au16data_000805ac8024_000805b0Ptr + 2;\n\n  modbus.begin(PTR_master_000805b4Ptr, 0x4B00);\n  *(uint16_t *)(PTR_master_000805b4 + 0x56) = 2000;\n\n  currentMillis = millis();\n  *(uint32_t *)PTR_u32wait_000805b8 = currentMillis;\n  currentMillis = millis();\n  *(uint32_t *)PTR_tiempopid1_000805bc = currentMillis + 1000;\n  currentMillis = millis();\n  *(uint32_t *)PTR_dutyalto1_000805c0 = currentMillis + 1000;\n  currentMillis = millis();\n  *(uint32_t *)PTR_dutybajo1_000805c4 = currentMillis + 1000;\n  currentMillis = millis();\n  *(uint32_t *)PTR_reloj_000805c8 = currentMillis + 1000;\n  *PTR_u8state_000805cc = 0;\n  startForkserver(0);\n}\n",
            "called": [
                "pinMode",
                "startForkserver",
                "digitalWrite",
                "begin",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "setupModbus_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "read_and_update_00084440",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "iVar1": "bytes_read",
                "*(int *)(param_2 + 0x50)": "total_bytes_read",
                "*(ushort *)(param_2 + 0xc)": "flag"
            },
            "code": "void read_and_update_00084440(int file_descriptor, int buffer_address)\n{\n  int bytes_read = _read_r(file_descriptor, (int)*(short *)(buffer_address + 0xe));\n  if (bytes_read >= 0) {\n    int* total_bytes_read = (int *)(buffer_address + 0x50);\n    *total_bytes_read += bytes_read;\n    return;\n  }\n  else {\n    ushort* flag = (ushort *)(buffer_address + 0xc);\n    *flag &= 0xefff;\n    return;\n  }\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "build_response_000802da",
                "this": "modbus_instance",
                "telegram": "modbus_telegram",
                "uVar1": "unit_id_high_byte",
                "in_r1": "starting_address",
                "bVar3": "byte_count_temp",
                "in_r2": "data_pointer",
                "puVar4": "register_pointer",
                "uVar5": "response_size",
                "uVar6": "data_temp",
                "uVar7": "data_length",
                "puVar8": "register_pointer_end",
                "local_1c": "function_code_temp",
                "local_1b": "byte_count",
                "local_1a": "data",
                "uVar2": "unit_id_low_byte"
            },
            "code": "int8_t __thiscall Modbus::build_response_000802da(Modbus *this, modbus_t telegram) {\n  uchar function_code;\n  ushort starting_address;\n  byte byte_count;\n  ushort *data_pointer;\n  ushort *register_pointer;\n  uint8_t response_size;\n  ushort data;\n  uint data_length;\n  ushort *register_pointer_end;\n  uchar unit_id;\n  uchar state;\n  \n  data_length = (uint)starting_address;\n  if (this->unit_id != \"\\0\") {\n    return -2;\n  }\n  if (this->state != \"\\0\") {\n    return -1;\n  }\n  if (0xf6 < (byte)(function_code - 1)) {\n    return -3;\n  }\n  this->response_buffer[0] = function_code;\n  this->response_buffer[1] = byte_count;\n  this->register_pointer = data_pointer;\n  this->response_buffer[2] = (uchar)((uint)data >> 8);\n  this->response_buffer[3] = (uchar)data;\n  unit_id = (uchar)starting_address;\n  switch(byte_count) {\n  case \"\\x01\":\n  case \"\\x02\":\n  case \"\\x03\":\n  case \"\\x04\":\n    this->response_buffer[4] = (uchar)(data_length >> 8);\n    break;\n  case \"\\x05\":\n    data = *data_pointer;\n    if (data != 0) {\n      data = 1;\n    }\n    this->response_buffer[4] = -(char)data;\n    data_length = 0;\n    break;\n  case \"\\x06\":\n    this->response_buffer[4] = (uchar)((uint)*data_pointer >> 8);\n    data_length = (uint)*data_pointer;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case \"\\x0f\":\n    byte_count = (byte)(starting_address >> 3) & 0xfe;\n    if ((starting_address & 0xf) != 0) {\n      byte_count = byte_count + 1;\n    }\n    this->response_buffer[5] = unit_id;\n    this->response_buffer[4] = (uchar)(data_length >> 8);\n    this->response_buffer[6] = byte_count;\n    response_size = \"\\a\";\n    goto LAB_0008034a;\n  case \"\\x10\":\n    this->response_buffer[4] = (uchar)(data_length >> 8);\n    this->response_buffer[5] = unit_id;\n    register_pointer = data_pointer + -1;\n    this->response_buffer[6] = unit_id * \"\\x02\";\n    this->response_buffer_size = \"\\a\";\n    register_pointer_end = register_pointer + data_length;\n    while (register_pointer != register_pointer_end) {\n      byte_count = this->response_buffer_size;\n      this->response_buffer[byte_count] = (uchar)((uint)register_pointer[1] >> 8);\n      data_length = byte_count + 1 & 0xff;\n      this->response_buffer_size = (uint8_t)data_length;\n      register_pointer = register_pointer + 1;\n      this->response_buffer[data_length] = (uchar)*register_pointer;\n      this->response_buffer_size = byte_count + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  this->response_buffer[5] = (uchar)data_length;\n  response_size = \"\\x06\";\nLAB_0008034a:\n  this->response_buffer_size = response_size;\nswitchD_0008031e_caseD_7:\n  send_response(this);\n  this->state = \"\\x01\";\n  return \"\\0\";\n}",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "build_response_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "find_index_of_value_00080f9c",
                "*param_1": "array",
                "param_2": "array_len",
                "param_3": "value",
                "param_4": "divisor",
                "local_58": "bucket_sizes",
                "uVar1": "quotient",
                "uVar2": "i"
            },
            "code": "int find_index_of_value_00080f9c(uint *array, uint array_len, int value, int divisor) {\n  uint bucket_sizes[16];\n\n  for (int i = 0; i < 16; i++) {\n    bucket_sizes[i] = *(uint *)(PTR_DAT_0008102c + i * 4);\n  }\n\n  int quotient = array_len / (divisor * 2);\n  if (array_len == divisor * 2 * quotient) {\n    quotient--;\n  }\n\n  for (int i = 0; i < 16; i++) {\n    if ((uint)(value * (int)(((double)array_len / (double)((quotient + 1) * 2)) / (double)DAT_00081030)) <= bucket_sizes[i]) {\n      return (i & 0xf) << 0x10 | (quotient & 0xff) << 8;\n    }\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "find_index_of_value_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pin",
                "ulMode": "mode",
                "puVar1": "pin_desc",
                "puVar2": "pin_status",
                "uVar3": "pio_attr",
                "bVar4": "status",
                "bVar5": "status",
                "iVar6": "pio_config",
                "iVar7": "pin_desc_offset"
            },
            "code": "void configure_pin_00081210(uint32_t pin, uint32_t mode)\\n{\\n    uint8_t *pin_status = PTR_g_pinStatus_00081310;\\n    uint8_t *pin_desc = PTR_g_APinDescription_0008130c;\\n    if (pin_desc[pin * 0x1c + 0xc] != \"\\0\") {\\n        if ((pin_status[pin] & 0xf) == 4) {\\n            adc_disable_channel(DAT_00081314,pin_desc[pin * 0x1c + 0x19]);\\n        }\\n        uint8_t status = pin_status[pin] & 0xf;\\n        if ((status < 3) && (pin_status[pin] != 0)) {\\n            if (status == 2 && mode == 0) {\\n                return;\\n            }\\n            else if (status == 1 && mode == 2) {\\n                return;\\n            }\\n            else if (status == 3 && mode == 1) {\\n                return;\\n            }\\n        }\\n        if (mode == 1) {\\n            int pin_desc_offset = pin * 0x1c;\\n            int pio_config = *(int *)(pin_desc + pin_desc_offset);\\n            uint32_t pio_attr = (pin_status[pin] >> 4 == 0) ? 4 : 5;\\n            PIO_Configure(pio_config, pio_attr, *(uint32_t *)(pin_desc + pin_desc_offset + 4), *(uint32_t *)(pin_desc + pin_desc_offset + 0x10));\\n            pin_status[pin] = (pin_status[pin] & 0xf0) | 3;\\n            if (*(int *)(pio_config + 0x18) == -1) {\\n                pmc_disable_periph_clk(*(uint32_t *)(pin_desc + pin_desc_offset + 8));\\n                return;\\n            }\\n        }\\n        else {\\n            int pin_desc_offset = pin * 0x1c;\\n            if (mode == 0) {\\n                pmc_enable_periph_clk(*(uint32_t *)(pin_desc + pin_desc_offset + 8));\\n                PIO_Configure(*(uint32_t *)(pin_desc + pin_desc_offset), 3, *(uint32_t *)(pin_desc + pin_desc_offset + 4), 0);\\n                pin_status[pin] = (pin_status[pin] & 0xf0) | 2;\\n            }\\n            else if (mode == 2) {\\n                pmc_enable_periph_clk(*(uint32_t *)(pin_desc + pin_desc_offset + 8));\\n                PIO_Configure(*(uint32_t *)(pin_desc + pin_desc_offset), 3, *(uint32_t *)(pin_desc + pin_desc_offset + 4), 1);\\n                pin_status[pin] = (pin_status[pin] & 0xf0) | 1;\\n            }\\n        }\\n    }\\n}",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "setup",
                "digitalWrite",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "read_data_from_stream_00083994",
                "param_1": "stream",
                "param_2": "data_buffer",
                "piVar1": "free_func",
                "iVar2": "bytes_remaining",
                "uVar3": "flags",
                "uVar4": "flags_and_size",
                "iVar5": "bytes_read",
                "pcVar6": "read_func",
                "iVar7": "old_pos",
                "new_pos": "new_pos",
                "old_pos": "old_pos"
            },
            "code": "int read_data_from_stream_00083994(int *stream, int *data_buffer)\n{\n  int *read_func;\n  int bytes_remaining;\n  ushort flags;\n  uint flags_and_size;\n  int bytes_read;\n  int new_pos;\n  int old_pos;\n  int *free_func;\n  \n  flags = *(ushort *)(data_buffer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    new_pos = data_buffer[4];\n    if (new_pos == 0) {\n      return 0;\n    }\n    old_pos = *data_buffer;\n    if ((flags & 3) == 0) {\n      bytes_remaining = data_buffer[5];\n    }\n    else {\n      bytes_remaining = 0;\n    }\n    *data_buffer = new_pos;\n    bytes_read = old_pos - new_pos;\n    data_buffer[2] = bytes_remaining;\n    do {\n      if (bytes_read < 1) {\n        return 0;\n      }\n      bytes_remaining = (*(code *)data_buffer[9])(stream,data_buffer[7],new_pos,bytes_read);\n      bytes_read = bytes_read - bytes_remaining;\n      new_pos = new_pos + bytes_remaining;\n    } while (0 < bytes_remaining);\n    *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(data_buffer + 3) = flags | 0x800;\n  if ((data_buffer[1] < 1) && (data_buffer[0xf] < 1)) {\n    return 0;\n  }\n  read_func = (code *)data_buffer[10];\n  if (read_func == (code *)0x0) {\n    return 0;\n  }\n  flags_and_size = (uint)(flags | 0x800);\n  old_pos = *stream;\n  *stream = 0;\n  if ((flags & 0x1000) == 0) {\n    bytes_read = (*read_func)(stream,data_buffer[7],flags_and_size & 0x1000,1);\n    if ((bytes_read == -1) && (bytes_remaining = *stream, bytes_remaining != 0)) {\n      if ((bytes_remaining == 0x1d) || (bytes_remaining == 0x16)) {\n        *stream = old_pos;\n        return 0;\n      }\n      *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    flags_and_size = (uint)*(ushort *)(data_buffer + 3);\n    read_func = (code *)data_buffer[10];\n  }\n  else {\n    bytes_read = data_buffer[0x14];\n  }\n  if (((int)(flags_and_size << 0x1d) < 0) && (bytes_read = bytes_read - data_buffer[1], data_buffer[0xc] != 0)) {\n    bytes_read = bytes_read - data_buffer[0xf];\n  }\n  bytes_read = (*read_func)(stream,data_buffer[7],bytes_read,0);\n  if (bytes_read == -1) {\n    bytes_remaining = *stream;\n    if (bytes_remaining != 0) {\n      if ((bytes_remaining != 0x1d) && (bytes_remaining != 0x16)) {\n        *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) & 0xf7ff;\n      *data_buffer = data_buffer[4];\n      data_buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(data_buffer + 3) & 0xf7ff;\n    data_buffer[1] = 0;\n    *(ushort *)(data_buffer + 3) = flags;\n    *data_buffer = data_buffer[4];\n  }\n  else {\n    flags = *(ushort *)(data_buffer + 3) & 0xf7ff;\n    *data_buffer = data_buffer[4];\n    *(ushort *)(data_buffer + 3) = flags;\n    data_buffer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    data_buffer[0x14] = bytes_read;\n  }\nLAB_00083a00:\n  free_func = (int *)data_buffer[0xc];\n  *stream = old_pos;\n  if (free_func == (int *)0x0) {\n    return 0;\n  }\n  if (free_func != data_buffer + 0x10) {\n    _free_r(stream);\n  }\n  data_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "read_data_from_stream_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "sendData_00081454",
                "this": "self",
                "uc_data": "data",
                "pRVar1": "txBuffer",
                "uVar2": "nextHeadIndex",
                "DAT_000814a4": "PTR_DAT_000814a4"
            },
            "code": "size_t __thiscall UARTClass::sendData_00081454(UARTClass *this, uint8_t data) {\n  RingBuffer *txBuffer = this->txBuffer;\n  if ((this->uartStatus << 0x1e) < 0 && txBuffer->tailIndex == txBuffer->headIndex) {\n    this->uart->UART_THR = (uint)data;\n  }\n  else {\n    uint nextHeadIndex = DAT_000814a4 & txBuffer->headIndex + 1U;\n    if ((int)nextHeadIndex < 0) {\n      nextHeadIndex = (nextHeadIndex - 1 | 0xffffff80) + 1;\n    }\n    while (txBuffer->tailIndex == nextHeadIndex);\n    txBuffer->buffer[txBuffer->headIndex] = data;\n    txBuffer->headIndex = nextHeadIndex;\n    this->uart->UART_IER = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "sendData_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "FUNC_00081730"
            },
            "code": "\nuint FUNC_00081730(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if ((uVar4 & 0x800000) == 0) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_0008186a;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_file_and_set_error_00084600",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_set_error_00084600(int *error_code, int file_descriptor) {\n  undefined *error_ptr = PTR_errno_00084620;\n  *(undefined4 *)PTR_errno_00084620 = 0;\n  int close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "FUN_00081578": "initialize_UART_00081578",
                "this": "uart",
                "dwBaudRate": "baud_rate",
                "init": "init",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void __thiscall initialize_UART_00081578(UARTClass *uart, uint32_t baud_rate)\n{\n  init(uart, baud_rate, 0x800);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initialize_UART_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "__aeabi_frsub",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_file_00084728",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_bytes"
            },
            "code": "void read_file_00084728(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  int *errno_ptr = PTR_errno_0008474c;\n  *(int *)PTR_errno_0008474c = 0;\n  int read_bytes = _read(file_descriptor, buffer, buffer_size);\n  if (read_bytes == -1 && *(int *)errno_ptr != 0) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "loop_forever_0008116a"
            },
            "code": "void loop_forever_0008116a(void)\n{\n  while(true)\n  {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "loop_forever_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "FUN_000813e0": "isOperational_000813e0",
                "this": "this"
            },
            "code": "bool UARTClass::isOperational_000813e0() const { return true; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "isOperational_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "convert_to_multibyte_encoding_00083c40",
                "param_1": "locale",
                "param_2": "character",
                "param_3": "output_stream",
                "uVar1": "bytes_written",
                "iVar2": "swbuf_result",
                "uVar3": "current_byte",
                "pbVar4": "output_ptr",
                "uVar5": "i",
                "local_1c": "current_byte_stack[0]",
                "abStack_1b": "current_byte_stack"
            },
            "code": "uint convert_to_multibyte_encoding_00083c40(undefined4 locale, uint character, byte **output_stream) {\n  uint bytes_written;\n  int swbuf_result;\n  uint current_byte;\n  byte *output_ptr;\n  byte current_byte_stack[3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_stream + 3) << 0x12)) {\n    *(ushort *)(output_stream + 3) = *(ushort *)(output_stream + 3) | 0x2000;\n    output_stream[0x19] = (byte *)((uint)output_stream[0x19] | 0x2000);\n  }\n  bytes_written = __locale_mb_cur_max();\n  if ((bytes_written == 1) && (character - 1 < 0xff)) {\n    current_byte = character & 0xff;\n    current_byte_stack[0] = (byte)current_byte;\n  }\n  else {\n    bytes_written = _wcrtomb_r(locale,&current_byte,character,output_stream + 0x17);\n    if (bytes_written == 0xffffffff) {\n      *(ushort *)(output_stream + 3) = *(ushort *)(output_stream + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (bytes_written == 0) {\n      return character;\n    }\n    current_byte_stack[0] = (byte)current_byte;\n  }\n  for (uint i = 0; true; i++) {\n    output_ptr = output_stream[2] + -1;\n    output_stream[2] = output_ptr;\n    if ((int)output_ptr < 0) {\n      if ((int)output_stream[6] <= (int)output_ptr) {\n        **output_stream = (byte)current_byte;\n        output_ptr = *output_stream;\n        current_byte = (uint)*output_ptr;\n        if (current_byte != 10) goto LAB_00083c90;\n      }\n      swbuf_result = __swbuf_r(locale,current_byte,output_stream);\n      if (swbuf_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_stream = (byte)current_byte;\n      output_ptr = *output_stream;\n      LAB_00083c90:\n      *output_stream = output_ptr + 1;\n    }\n    if (bytes_written <= i + 1) {\n      return character;\n    }\n    current_byte = (uint)current_byte_stack[i];\n  }\n}",
            "called": [
                "__locale_mb_cur_max",
                "__swbuf_r",
                "_wcrtomb_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "convert_to_multibyte_encoding_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "tick_and_time_increment_0008116e",
                "iVar1": "is_false"
            },
            "code": "void tick_and_time_increment_0008116e(void)\n{\n  int is_false = __false();\n  if (is_false == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}",
            "called": [
                "__false",
                "tickReset",
                "TimeTick_Increment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "tick_and_time_increment_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "FUNC_000805d0"
            },
            "code": "\nvoid FUNC_000805d0(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined *puVar6;\n  undefined *puVar7;\n  undefined *puVar8;\n  undefined *puVar9;\n  undefined2 uVar10;\n  uint uVar11;\n  uint32_t uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  int iVar16;\n  int iVar17;\n  int *piVar18;\n  undefined4 uVar19;\n  int iVar20;\n  \n  puVar7 = PTR_estado_0008089c;\n  puVar9 = PTR_segundos_00080898;\n  puVar8 = PTR_minutos_00080894;\n  puVar3 = PTR_mmt_0008087c;\n  puVar5 = PTR_ssres_00080878;\n  puVar4 = PTR_mmres_00080874;\n  puVar2 = PTR_duty1_00080834;\n  puVar1 = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  iVar17 = *(int *)PTR_minutos_00080894;\n  iVar16 = iVar17 - *(int *)PTR_mmres_00080874;\n  if (iVar16 < 0) {\n    iVar16 = iVar16 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = iVar16;\n  puVar6 = PTR_sst_00080880;\n  uVar11 = *(uint *)puVar9;\n  iVar16 = uVar11 - *(int *)puVar5;\n  *(int *)PTR_sst_00080880 = iVar16;\n  if (iVar16 < 0) {\n    *(int *)puVar3 = *(int *)puVar3 + -1;\n    *(int *)puVar6 = iVar16 + 0x3c;\n  }\n  iVar16 = *(int *)puVar3;\n  iVar20 = *(int *)puVar6;\n  *(short *)(puVar1 + 0x36) = (short)iVar16;\n  *(short *)(puVar1 + 0x38) = (short)iVar20;\n  if ((iVar16 == 0) && (iVar20 == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n  }\n  puVar6 = PTR_segundosp_00080888;\n  puVar3 = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == iVar17) {\n    iVar16 = 1 - uVar11;\n    if (1 < uVar11) {\n      iVar16 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = iVar16;\n    if (iVar16 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)puVar3 = iVar17;\n    puVar3 = PTR_espera_plancha_00080a50;\n    *(uint *)puVar6 = uVar11;\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    *(undefined4 *)puVar3 = 0;\n  }\n  puVar6 = PTR_espera_plancha_0008088c;\n  puVar3 = PTR_tiempo_espera_00080860;\n  iVar16 = *(int *)puVar7;\n  if (iVar16 == 0) {\n    *(undefined4 *)puVar4 = 0;\n    *(undefined4 *)puVar5 = 0;\n    piVar18 = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *piVar18 = iVar16;\n  }\n  else {\n    if (iVar16 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      uVar12 = millis();\n      puVar7 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar6 = *(int *)puVar6 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar7 = uVar12 + 1000;\n      }\n    }\n    if (*(int *)puVar6 < *(int *)puVar3) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)puVar3 + 1;\n    piVar18 = (int *)PTR_mmres_00080a20;\n    puVar3 = PTR_ssres_00080a1c;\n    if (*(int *)puVar4 < *(int *)puVar8) {\n      uVar12 = millis();\n      puVar3 = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < uVar12) {\n        *(int *)puVar5 = *(int *)puVar5 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar3 = uVar12 + 1000;\n      }\n    }\n    else {\n      if (*(int *)puVar4 != *(int *)puVar8) goto LAB_000808f4;\n      if (*(int *)puVar9 < *(int *)puVar5) {\n        iVar16 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      uVar12 = millis();\n      puVar8 = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < uVar12) {\n        *(int *)puVar3 = *(int *)puVar3 + 1;\n        uVar12 = millis();\n        *(uint32_t *)puVar8 = uVar12 + 1000;\n      }\n    }\n    if (0x3b < *(int *)puVar5) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)puVar4 = *(int *)puVar4 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar12 = millis();\n  puVar8 = PTR_kia1_00080a60;\n  puVar3 = PTR_incre_00080a5c;\n  puVar5 = PTR_tiempopid1_00080a58;\n  puVar4 = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < uVar12) {\n    uVar13 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    uVar13 = __aeabi_fsub(uVar13,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = uVar13;\n    puVar9 = PTR_ep1_00080a34;\n    uVar19 = *(undefined4 *)PTR_ep1_00080a34;\n    uVar14 = __addsf3(uVar13,uVar19);\n    uVar14 = __aeabi_fmul(uVar14,*(undefined4 *)puVar8);\n    puVar7 = PTR_kip1_00080a64;\n    uVar14 = __addsf3(uVar14,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)puVar8 = uVar14;\n    uVar19 = __aeabi_fsub(uVar13,uVar19);\n    uVar19 = __aeabi_fmul(uVar19,*(undefined4 *)PTR_kda1_00080a38);\n    puVar8 = PTR_kdp1_00080a3c;\n    uVar19 = __aeabi_fsub(uVar19,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = uVar19;\n    uVar15 = __aeabi_fmul(uVar13,*(undefined4 *)PTR_kpa1_00080a40);\n    uVar15 = __addsf3(uVar15,uVar14);\n    __addsf3(uVar15,uVar19);\n    uVar15 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = uVar15;\n    uVar15 = __floatsisf();\n    *(undefined4 *)puVar9 = uVar13;\n    *(undefined4 *)puVar4 = uVar15;\n    *(undefined4 *)puVar3 = 0;\n    *(undefined4 *)puVar7 = uVar14;\n    *(undefined4 *)puVar8 = uVar19;\n    uVar12 = millis();\n    *(uint32_t *)puVar5 = uVar12 + *(int *)puVar2;\n  }\n  uVar13 = __floatsisf(*(undefined4 *)puVar2);\n  iVar16 = __aeabi_fcmpge(*(undefined4 *)puVar4,uVar13);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = uVar13;\n  }\n  iVar16 = __aeabi_fcmple(*(undefined4 *)puVar4,0);\n  if (iVar16 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  uVar10 = __fixunssfsi(*(undefined4 *)puVar4);\n  iVar16 = *(int *)puVar3;\n  *(undefined2 *)(puVar1 + 0x2a) = uVar10;\n  *(int *)puVar3 = iVar16 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "__aeabi_f2iz",
                "__aeabi_fcmple",
                "__fixunssfsi",
                "query",
                "__aeabi_fsub",
                "poll",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "millis",
                "__floatsisf",
                "__floatunsisf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculateRXBufferLength_000813e4",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "bufferLength": "bufferLength"
            },
            "code": "int __thiscall UARTClass::calculateRXBufferLength_000813e4(UARTClass *this)\n{\n    int headIndex = this->_rx_buffer->_iHead;\n    int tailIndex = this->_rx_buffer->_iTail;\n    int bufferLength = headIndex - tailIndex & 0x7f;\n    return bufferLength;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateRXBufferLength_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "isEndOfString_00081cbc",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_00081cbc(void)\n{\n  char currentChar;\n  __aeabi_cfrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfString_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_UART_IRQ_00080aac",
                "PTR_Serial_00080ab4": "PTR_Serial"
            },
            "code": "void handle_UART_IRQ_00080aac(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial_00080ab4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_IRQ_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "PTR_lc_ctype_charset_00084294": "lc_ctype_charset"
            },
            "code": "const char* get_charset_00084290() {\n  return PTR_lc_ctype_charset_00084294;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "get_file_info_000846b4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_stats",
                "puVar1": "error_code_ptr",
                "iVar2": "file_stat_result"
            },
            "code": "void get_file_info_000846b4(int *error_code, int file_descriptor, struct stat *file_stats)\n{\n  int file_stat_result;\n  int *error_code_ptr;\n  error_code_ptr = PTR_errno_000846d8;\n  *(int *)PTR_errno_000846d8 = 0;\n  file_stat_result = _fstat(file_descriptor, file_stats);\n  if ((file_stat_result == -1) && (*(int *)error_code_ptr != 0)) {\n    *error_code = *(int *)error_code_ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "get_file_info_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "check_for_update_000811a8",
                "cOld_UNUSED": "old_version",
                "cNew_UNUSED": "new_version"
            },
            "code": "int check_for_update_000811a8(char *old_version, char *new_version) {\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "check_for_update_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8::FUN_000813a8": "InitializeQueue",
                "this": "queue",
                "memset": "initializeMemory",
                "_iHead": "head",
                "_iTail": "tail",
                "FUN_000813a8": "InitializeQueue_000813a8"
            },
            "code": "InitializeQueue_000813a8 * __thiscall InitializeQueue_000813a8(InitializeQueue_000813a8 *queue)\n{\n  memset(queue, 0, 0x80);\n  queue->_iHead = 0;\n  queue->_iTail = 0;\n  return queue;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "InitializeQueue_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "FUNC_00083d9c"
            },
            "code": "\nvoid FUNC_00083d9c(undefined4 param_1,int param_2)\n\n{\n  undefined *puVar1;\n  uint uVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined *puVar8;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  puVar8 = PTR___malloc_av__00083f24;\n  uVar2 = *(uint *)(param_2 + -4);\n  iVar6 = param_2 + -8;\n  uVar5 = uVar2 & 0xfffffffe;\n  iVar4 = iVar6 + uVar5;\n  uVar7 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == iVar4) {\n    uVar7 = uVar7 + uVar5;\n    if (-1 < (int)(uVar2 << 0x1f)) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      iVar3 = *(int *)(iVar6 + 0xc);\n      iVar4 = *(int *)(iVar6 + 8);\n      uVar7 = uVar7 + *(int *)(param_2 + -8);\n      *(int *)(iVar4 + 0xc) = iVar3;\n      *(int *)(iVar3 + 8) = iVar4;\n    }\n    uVar2 = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(iVar6 + 4) = uVar7 | 1;\n    *(int *)(puVar8 + 8) = iVar6;\n    if (uVar2 <= uVar7) {\n      _malloc_trim_r(param_1,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    uVar2 = uVar2 & 1;\n    *(uint *)(iVar4 + 4) = uVar7;\n    if (uVar2 == 0) {\n      iVar6 = iVar6 - *(int *)(param_2 + -8);\n      puVar1 = *(undefined **)(iVar6 + 8);\n      uVar5 = uVar5 + *(int *)(param_2 + -8);\n      if (puVar1 == puVar8 + 8) {\n        uVar2 = 1;\n      }\n      else {\n        iVar3 = *(int *)(iVar6 + 0xc);\n        *(int *)(puVar1 + 0xc) = iVar3;\n        *(undefined **)(iVar3 + 8) = puVar1;\n      }\n    }\n    else {\n      uVar2 = 0;\n    }\n    if (-1 < *(int *)(iVar4 + uVar7 + 4) << 0x1f) {\n      uVar5 = uVar5 + uVar7;\n      puVar1 = *(undefined **)(iVar4 + 8);\n      if ((uVar2 == 0) && (puVar1 == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(puVar8 + 0x14) = iVar6;\n        *(int *)(puVar8 + 0x10) = iVar6;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(undefined **)(iVar6 + 8) = puVar1;\n        *(uint *)(iVar6 + 4) = uVar5 | 1;\n        *(uint *)(iVar6 + uVar5) = uVar5;\n        goto LAB_00083e30;\n      }\n      iVar4 = *(int *)(iVar4 + 0xc);\n      *(int *)(puVar1 + 0xc) = iVar4;\n      *(undefined **)(iVar4 + 8) = puVar1;\n    }\n    *(uint *)(iVar6 + 4) = uVar5 | 1;\n    *(uint *)(iVar6 + uVar5) = uVar5;\n    if (uVar2 == 0) {\n      if (uVar5 < 0x200) {\n        uVar2 = *(uint *)(puVar8 + 4);\n        puVar1 = puVar8 + (uVar5 & 0xfffffff8);\n        iVar4 = *(int *)(puVar1 + 8);\n        *(int *)(iVar6 + 8) = iVar4;\n        *(undefined **)(iVar6 + 0xc) = puVar1;\n        *(uint *)(puVar8 + 4) = uVar2 | 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU);\n        *(int *)(puVar1 + 8) = iVar6;\n        *(int *)(iVar4 + 0xc) = iVar6;\n        __malloc_unlock(param_1);\n        return;\n      }\n      uVar2 = uVar5 >> 9;\n      if (uVar2 < 5) {\n        iVar4 = (uVar5 >> 6) + 0x38;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x15) {\n        iVar4 = uVar2 + 0x5b;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x55) {\n        iVar4 = (uVar5 >> 0xc) + 0x6e;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x155) {\n        iVar4 = (uVar5 >> 0xf) + 0x77;\n        iVar3 = iVar4 * 2;\n      }\n      else if (uVar2 < 0x555) {\n        iVar4 = (uVar5 >> 0x12) + 0x7c;\n        iVar3 = iVar4 * 2;\n      }\n      else {\n        iVar3 = 0xfc;\n        iVar4 = 0x7e;\n      }\n      puVar8 = puVar8 + iVar3 * 4;\n      puVar1 = *(undefined **)(puVar8 + 8);\n      if (puVar1 == puVar8) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (iVar4 >> 2 & 0xffU);\n        puVar8 = puVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(puVar1 + 4) & 0xfffffffc) <= uVar5) break;\n          puVar1 = *(undefined **)(puVar1 + 8);\n        } while (puVar8 != puVar1);\n        puVar8 = *(undefined **)(puVar1 + 0xc);\n      }\n      *(undefined **)(iVar6 + 0xc) = puVar8;\n      *(undefined **)(iVar6 + 8) = puVar1;\n      *(int *)(puVar8 + 8) = iVar6;\n      *(int *)(puVar1 + 0xc) = iVar6;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param_1);\n  return;\n}\n\n",
            "called": [
                "_malloc_trim_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083d9c",
            "calling": [
                "__sfvwrite_r",
                "__swsetup_r",
                "_fclose_r",
                "_realloc_r",
                "free",
                "__sflush_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "FUNC_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_bitwise_multiply_000818c8",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "multiplicand_copy",
                "uVar3": "multiplier_copy",
                "uVar4": "mask",
                "uVar5": "leading_zeroes",
                "iVar3": "shift",
                "iVar6": "factor",
                "uVar7": "product",
                "bVar8": "is_negative"
            },
            "code": "uint calculate_bitwise_multiply_000818c8(uint multiplicand, uint multiplier)\n{\n  uint result = 0;\n  if ((multiplicand | multiplier) == 0) {\n    return multiplicand;\n  }\n  bool is_negative = false;\n  if ((int)(multiplier & 0x80000000) < 0) {\n    is_negative = multiplicand != 0;\n    multiplicand = -multiplicand;\n    multiplier = -multiplier - (uint)is_negative;\n  }\n  uint multiplicand_copy = multiplicand;\n  uint multiplier_copy = multiplier;\n  if (multiplier == 0) {\n    multiplicand_copy = 0;\n    multiplier_copy = multiplicand;\n  }\n  uint mask = 0x5b000000 | (multiplier & 0x80000000);\n  if (multiplier == 0) {\n    mask += 0xf0000000;\n  }\n  int leading_zeroes = count_leading_zeroes(multiplier_copy);\n  uint shift = leading_zeroes - 8;\n  int factor = (mask - 0x800000) + shift * -0x800000;\n  if (leading_zeroes < 8) {\n    uint multiplicand_shifted = multiplicand_copy << (leading_zeroes + 0x18U & 0xff);\n    uint multiplier_shifted = multiplier_copy >> (0x20 - (leading_zeroes + 0x18U) & 0xff);\n    uint product = multiplicand_shifted | (multiplier_shifted >> 31);\n    result = factor + multiplier_shifted - (product >> 31);\n    if ((multiplicand_copy | (product << 1)) == 0) {\n      result &= ~(product >> 31);\n    }\n    return result;\n  }\n  uint multiplicand_shifted = multiplicand_copy << (shift & 0xff);\n  uint multiplier_shifted = multiplier_copy << (shift & 0xff);\n  uint carry = multiplicand_copy >> (0x20 - shift & 0xff);\n  uint product = multiplicand_shifted | (multiplier_shifted >> 31);\n  result = factor + multiplier_shifted + carry + (uint)(0x7fffffff < product);\n  if (product == 0x80000000) {\n    result &= 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_bitwise_multiply_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "inputs_have_same_sign",
                "bVar5": "combined_inputs_are_zero",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint calculate_result_00081bf4(uint input_1, uint input_2)\n{\n    bool overflow_detected = false;\n    uint doubled_input_1 = input_1 * 2;\n    uint doubled_input_2 = input_2 * 2;\n    \n    if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) && ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    \n    uint combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n    bool combined_inputs_are_zero = combined_inputs == 0;\n    \n    if (!combined_inputs_are_zero) {\n        uint xor_result = input_1 ^ input_2;\n        combined_inputs_are_zero = xor_result == 0;\n    }\n    \n    bool inputs_have_same_sign = -1 < (int)(input_1 ^ input_2);\n    \n    if (inputs_have_same_sign) {\n        input_1 = doubled_input_1 + input_2 * -2;\n        combined_inputs_are_zero = input_1 == 0;\n    }\n    \n    if (inputs_have_same_sign && doubled_input_2 <= doubled_input_1 && !combined_inputs_are_zero) {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    \n    if (!inputs_have_same_sign || doubled_input_2 > doubled_input_1) {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    \n    if (!combined_inputs_are_zero) {\n        input_1 = input_1 | 1;\n    }\n    \n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_preinit_array_and_fini_00081d7c",
                "puVar1": "fini_array_start_ptr",
                "puVar2": "preinit_array_start_ptr",
                "iVar3": "num_funcs_executed",
                "ppcVar4": "func_ptr_ptr",
                "iVar5": "num_funcs"
            },
            "code": "void execute_preinit_array_and_fini_00081d7c() {\n  void (**preinit_func_ptr)() = &__preinit_array_end;\n  int num_preinit_funcs = ((int)&__preinit_array_end - (int)&__preinit_array_start) / sizeof(void (*)());\n  for (int i = 0; i < num_preinit_funcs; i++) {\n    preinit_func_ptr[i]();\n  }\n  void **fini_func_ptr = &__fini_array_start;\n  int num_fini_funcs = ((int)&__fini_array_end - (int)&__fini_array_start) / sizeof(void (*)());\n  for (int i = 0; i < num_fini_funcs; i++) {\n    ((void (*)())fini_func_ptr[i])();\n  }\n}\n",
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_array_and_fini_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "processCallbacks_000810bc",
                "uVar1": "callbackIndex",
                "uVar2": "bitMask",
                "PTR_callbacksPioB_000810f0": "callbackFunctionPointerArray",
                "DAT_000810ec": "dataPointer",
                "count_leading_zeroes": "getNumberOfLeadingZeros"
            },
            "code": "void processCallbacks_000810bc(void)\n{\n  uint32_t bitMask;\n  uint32_t callbackIndex;\n  uint32_t callbackFunctionPtr;\n  bitMask = *(uint32_t *)(DAT_000810ec + 0x4c);\n  while (true)\n  {\n    callbackIndex = count_leading_zeroes(bitMask);\n    if (callbackIndex > 31) break;\n    callbackIndex = 31 - callbackIndex;\n    callbackFunctionPtr = *(uint32_t *)(PTR_callbacksPioB_000810f0 + callbackIndex * 4);\n    if (callbackFunctionPtr != 0)\n    {\n      (*(void (*)(void))callbackFunctionPtr)();\n    }\n    bitMask &= ~(1 << callbackIndex);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacks_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "compare_floats_00081c5c",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "float compare_floats_00081c5c(float a, float b) {\n    __cmpsf2();\n    return CONCAT44(b,a);\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple"
            ],
            "imported": false,
            "current_name": "compare_floats_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "check_ticks_and_call_callback_if_zero_00081388",
                "iVar1": "ticks"
            },
            "code": "void check_ticks_and_call_callback_if_zero_00081388(void)\n{\n  int ticks = *(int *)PTR_ticks_000813a0;\n  if (ticks != -1)\n  {\n    ticks--;\n    *(int *)PTR_ticks_000813a0 = ticks;\n    if (ticks == 0)\n    {\n      (*DAT_000813a4)();\n    }\n  }\n  return;\n}",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "check_ticks_and_call_callback_if_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "source_uint_ptr",
                "puVar4": "source_uint_ptr",
                "uVar5": "current_uint",
                "uVar6": "current_uint",
                "puVar7": "destination_uint_ptr",
                "puVar8": "destination_uint_ptr",
                "pcVar9": "destination",
                "bVar10": "byte_is_zero"
            },
            "code": "char * copy_string_00082994(char *destination, char *source)\n{\n    char current_char;\n    unsigned short current_short;\n    unsigned int *source_uint_ptr;\n    unsigned int *destination_uint_ptr;\n    unsigned int current_uint;\n    bool byte_is_zero;\n\n    destination_uint_ptr = (unsigned int *)destination;\n    if ((((unsigned int)destination ^ (unsigned int)source) & 3) != 0)\n    {\n        do\n        {\n            current_char = *source;\n            *destination = current_char;\n            source++;\n            destination++;\n        } while (current_char != '\\0');\n        return destination;\n    }\n    if (((unsigned int)source & 3) != 0)\n    {\n        source_uint_ptr = (unsigned int *)source;\n        if (((unsigned int)source & 1) != 0)\n        {\n            source_uint_ptr = (unsigned int *)(source + 1);\n            current_char = *source;\n            destination_uint_ptr = (unsigned int *)(destination + 1);\n            *destination = current_char;\n            if (current_char == '\\0')\n            {\n                return destination;\n            }\n        }\n        source = (char *)source_uint_ptr;\n        if (((unsigned int)source_uint_ptr & 2) != 0)\n        {\n            source = (char *)((int)source_uint_ptr + 2);\n            current_short = *(unsigned short *)source_uint_ptr;\n            byte_is_zero = (current_short & 0xff) == 0;\n            if (byte_is_zero)\n            {\n                *(char *)destination_uint_ptr = (char)current_short;\n            }\n            else\n            {\n                *(unsigned short *)destination_uint_ptr = current_short;\n                byte_is_zero = (current_short & 0xff00) == 0;\n                destination_uint_ptr = (unsigned int *)((int)destination_uint_ptr + 2);\n            }\n            if (byte_is_zero)\n            {\n                return destination;\n            }\n        }\n    }\n    current_uint = *(unsigned int *)source;\n    source_uint_ptr = (unsigned int *)((int)source + 4);\n    destination_uint_ptr = destination_uint_ptr;\n    if (((unsigned int)source & 4) != 0)\n    {\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0)\n        {\n            goto LAB_000829f8;\n        }\n        *destination_uint_ptr = current_uint;\n        source_uint_ptr = (unsigned int *)((int)source + 8);\n        current_uint = *(unsigned int *)((int)source + 4);\n        destination_uint_ptr++;\n    }\n    while (true)\n    {\n        current_uint = *source_uint_ptr;\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0)\n        {\n            break;\n        }\n        *destination_uint_ptr = current_uint;\n        source_uint_ptr++;\n        destination_uint_ptr++;\n        current_uint = *source_uint_ptr;\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0)\n        {\n            break;\n        }\n        *destination_uint_ptr = current_uint;\n        source_uint_ptr++;\n        destination_uint_ptr++;\n    }\nLAB_000829f8:\n    do\n    {\n        *(char *)destination_uint_ptr = (char)current_uint;\n        current_uint = current_uint >> 8 | current_uint << 24;\n        destination_uint_ptr = (unsigned int *)((int)destination_uint_ptr + 1);\n    } while ((current_uint & 0xff) != 0);\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initializeUARTBuffers_00080c0c",
                "puVar1": "rxBuffer1",
                "puVar2": "txBuffer1",
                "this": "rxBuffer3",
                "this_00": "txBuffer4",
                "this_01": "rxBuffer2",
                "this_02": "txBuffer2"
            },
            "code": "void initializeUARTBuffers_00080c0c(void)\n{\n  RingBuffer* rxBuffer1 = (RingBuffer*) rx_buffer1_00080ca0;\n  RingBuffer* txBuffer1 = (RingBuffer*) tx_buffer1_00080ca4;\n  RingBuffer* rxBuffer2 = (RingBuffer*) rx_buffer2_00080cd8;\n  RingBuffer* rxBuffer3 = (RingBuffer*) rx_buffer3_00080cac;\n  RingBuffer* txBuffer2 = (RingBuffer*) tx_buffer2_00080cdc;\n  RingBuffer* txBuffer3 = (RingBuffer*) tx_buffer3_00080cb8;\n  RingBuffer* rxBuffer4 = (RingBuffer*) rx_buffer4_00080cb4;\n  RingBuffer* txBuffer4 = (RingBuffer*) tx_buffer4_00080cbc;\n  UARTClass::UARTClass((UARTClass*) Serial_00080cb0, DAT_00080ca8, UART_IRQn, 8, rxBuffer1, txBuffer1);\n  USARTClass::USARTClass((USARTClass*) Serial1_00080cc4, DAT_00080cc0, USART0_IRQn, 0x11, rxBuffer2, txBuffer2);\n  USARTClass::USARTClass((USARTClass*) Serial2_00080ccc, DAT_00080cc8, USART1_IRQn, 0x12, rxBuffer3, txBuffer3);\n  USARTClass::USARTClass((USARTClass*) Serial3_00080cd4, DAT_00080cd0, USART3_IRQn, 0x14, rxBuffer4, txBuffer4);\n}",
            "called": [
                "USARTClass",
                "RingBuffer",
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initializeUARTBuffers_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "kill_process_and_return_errno_00084418",
                "param_1": "return_errno",
                "param_2": "process_id",
                "param_3": "signal",
                "puVar1": "errno_ptr"
            },
            "code": "void kill_process_and_return_errno_00084418(int *return_errno, int process_id, int signal) {\n    undefined *errno_ptr;\n    errno_ptr = PTR_errno_0008443c;\n    *(undefined4 *)PTR_errno_0008443c = 0;\n    _kill(process_id, signal);\n    if ((process_id == -1) && (*(int *)errno_ptr != 0)) {\n        *return_errno = *(int *)errno_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "kill_process_and_return_errno_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "set_param_00080d2e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "mode",
                "uVar1": "masked_value",
                "uVar2": "or_value"
            },
            "code": "void set_param_00080d2e(uint32_t base_address, uint32_t value, uint32_t mode) {\n  *(uint32_t *)(base_address + 0x44) = value;\n  switch(mode) {\n    case 0:\n    case 3:\n    case 4:\n    case 5:\n      return;\n    case 1:\n      uint32_t masked_value = *(uint32_t *)(base_address + 0x70) & *(uint32_t *)(base_address + 0x70) & ~value;\n      *(uint32_t *)(base_address + 0x70) = masked_value;\n      break;\n    case 2:\n      uint32_t or_value = *(uint32_t *)(base_address + 0x70) | value;\n      *(uint32_t *)(base_address + 0x70) = or_value;\n      break;\n    default:\n      *(uint32_t *)(base_address + 4) = value;\n      return;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "set_param_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "FUNC_00081944"
            },
            "code": "\nuint FUNC_00081944(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_00081a94;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_00081a94:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_until_flag_is_set_20070000",
                "DAT_2007001c": "PTR_FLAG",
                "DAT_20070020": "FLAG_VALUE_1",
                "DAT_20070028": "PTR_RESULT",
                "DAT_20070024": "RESULT_VALUE"
            },
            "code": "void wait_until_flag_is_set_20070000(void)\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n  } while( true );\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "Reset_Handler",
                "tickReset"
            ],
            "imported": false,
            "current_name": "wait_until_flag_is_set_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "PTR_s_Exiting_with_status__d__000811fc": "exit_status_message",
                "status": "exit_status"
            },
            "code": "void exit_with_status_000811f0(int status)\n{\n  iprintf(\"Exiting with status %d\\n\",status);\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "exit_with_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "incrementTickCount_00081704",
                "PTR__dwTickCount_00081710": "tickCountPtr"
            },
            "code": "void incrementTickCount_00081704(void)\n{\n  int* PTR__dwTickCount_00081710 = (int*)PTR__dwTickCount_00081710;\n  *PTR__dwTickCount_00081710 = *PTR__dwTickCount_00081710 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "incrementTickCount_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "execute_global_destructors_00083c10",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor_array"
            },
            "code": "void execute_global_destructors_00083c10(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_00083c3c - (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n  if (num_destructors != 0) {\n    code **destructor_array = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + num_destructors * 4);\n    do {\n      num_destructors--;\n      destructor_array--;\n      (**destructor_array)();\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "execute_global_destructors_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "calculate_result_00081bec",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "multiplied_input1",
                "uVar3": "multiplied_input2",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_inputs_zero",
                "bVar1": "is_negative"
            },
            "code": "uint calculate_result_00081bec(uint input1, uint input2)\n{\n    bool is_negative;\n    uint multiplied_input1 = input1 * 2;\n    uint multiplied_input2 = input2 * 2;\n    if (((int)multiplied_input1 >> 0x18 == -1 || (int)multiplied_input2 >> 0x18 == -1) && ((((int)multiplied_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)multiplied_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0))))))\n    {\n        return 1;\n    }\n    uint combined_inputs = multiplied_input1 | input2 & 0x7fffffff;\n    bool is_combined_inputs_zero = combined_inputs == 0;\n    if (!is_combined_inputs_zero)\n    {\n        combined_inputs = input1 ^ input2;\n        is_combined_inputs_zero = combined_inputs == 0;\n    }\n    is_negative = -1 < (int)combined_inputs;\n    if (is_negative)\n    {\n        input1 = multiplied_input1 + input2 * -2;\n        is_combined_inputs_zero = input1 == 0;\n    }\n    if ((is_negative && multiplied_input2 <= multiplied_input1) && !is_combined_inputs_zero)\n    {\n        input1 = (int)input2 >> 0x1f;\n    }\n    if (!is_negative || multiplied_input2 > multiplied_input1)\n    {\n        input1 = ~((int)input2 >> 0x1f);\n    }\n    if (!is_combined_inputs_zero)\n    {\n        input1 = input1 | 1;\n    }\n    return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "write_to_file_000844c4",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "character_as_short",
                "uVar2": "character_as_uint",
                "puVar3": "buffer_pointer",
                "iVar4": "bytes_written"
            },
            "code": "uint write_to_file_000844c4(int file_descriptor, uint character, undefined4 *buffer, undefined4 buffer_size)\n{\n  ushort character_as_short;\n  uint character_as_uint;\n  undefined *buffer_pointer;\n  int bytes_written;\n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n    __sinit();\n  }\n  character_as_short = *(ushort *)(buffer + 3);\n  character_as_uint = (uint)character_as_short;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(character_as_uint << 0x1c)) || (bytes_written = buffer[4], bytes_written == 0)) {\n    bytes_written = __swsetup_r(file_descriptor, buffer, character_as_short, character_as_uint, buffer_size);\n    if (bytes_written != 0) {\n      return 0xffffffff;\n    }\n    character_as_short = *(ushort *)(buffer + 3);\n    bytes_written = buffer[4];\n    character_as_uint = (uint)character_as_short;\n  }\n  character = character & 0xff;\n  if ((int)(character_as_uint << 0x12) < 0) {\n    buffer_pointer = (undefined *)*buffer;\n    bytes_written = (int)buffer_pointer - bytes_written;\n    if (bytes_written < (int)buffer[5]) {\n        bytes_written = bytes_written + 1;\n        goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_pointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = character_as_short | 0x2000;\n    bytes_written = (int)buffer_pointer - bytes_written;\n    if (bytes_written < (int)buffer[5]) goto LAB_000844f8;\n  }\n  bytes_written = _fflush_r(file_descriptor, buffer);\n  if (bytes_written != 0) {\n    return 0xffffffff;\n  }\n  buffer_pointer = (undefined *)*buffer;\n  bytes_written = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_pointer + 1;\n  *buffer_pointer = (char)character;\n  if (((buffer[5] == bytes_written) || (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) && (bytes_written = _fflush_r(file_descriptor, buffer), bytes_written != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n",
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_to_file_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_result_0008189c",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "result",
                "uVar3": "sign_bit_mask",
                "iVar4": "shifted_result",
                "uVar5": "sign_bit",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_result_0008189c(uint input_value)\n{\n    int leading_zeroes_count;\n    uint result;\n    uint sign_bit_mask;\n    uint shifted_input_value;\n    uint sign_bit;\n    uint shifted_result;\n\n    sign_bit_mask = input_value & 0x80000000;\n    if ((int)sign_bit_mask < 0) {\n        input_value = -input_value;\n    }\n    if (input_value == 0) {\n        return 0;\n    }\n    leading_zeroes_count = count_leading_zeroes(input_value);\n    shifted_input_value = input_value << (leading_zeroes_count + 0x18U & 0xff);\n    sign_bit = shifted_input_value >> 0x1f;\n    shifted_result = (sign_bit_mask | 0x4b000000) - 0x800000 + (leading_zeroes_count - 8) * -0x800000;\n    if (7 < leading_zeroes_count) {\n        result = shifted_result + (input_value << (leading_zeroes_count - 8 & 0xff)) + (0U >> (0x20 - (leading_zeroes_count - 8 & 0xff))) + (uint)(0x7fffffff < (uint)(0 << (leading_zeroes_count - 8 & 0xff)));\n        if ((0 << (leading_zeroes_count - 8 & 0xff)) == 0x80000000) {\n            result = result & 0xfffffffe;\n        }\n        return result;\n    }\n    result = shifted_result + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - (int)sign_bit);\n    if ((shifted_input_value & 0x7fffffff) == 0) {\n        result = result & ~(shifted_input_value >> 0x1f);\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_result_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "dest8",
                "puVar2": "dest32",
                "puVar3": "dest",
                "puVar4": "dest8",
                "puVar5": "src32",
                "puVar6": "src8",
                "uVar7": "i",
                "uVar8": "remainder",
                "bVar9": "is_valid_alignment"
            },
            "code": "void* copy_memory_0008234c(void* destination, void* source, size_t size)\n{\n    uint32_t* dest = (uint32_t*) destination;\n    uint32_t* src = (uint32_t*) source;\n    size_t remainder = size;\n\n    if ((((uint32_t) source | (uint32_t) destination) & 3) != 0)\n    {\n        if (size < 8)\n        {\n            remainder = size - 4;\n            uint8_t* dest8 = (uint8_t*) destination;\n            if (3 < size)\n            {\n                do\n                {\n                    *dest8++ = *src++;\n                } while (--remainder);\n                dest8[0] = src[0];\n                dest8[1] = src[1];\n                dest8[2] = src[2];\n                return destination;\n            }\n            goto copy_remainder;\n        }\n        if ((((uint32_t) source & 3) != 0) && (((uint32_t) destination & 3) != 0))\n        {\n            remainder = 4 - ((uint32_t) destination & 3);\n            size -= remainder;\n            uint32_t* dest32 = (uint32_t*) destination;\n            uint32_t* src32 = (uint32_t*) source;\n            if (((uint32_t) destination & 1) != 0)\n            {\n                src32 = (uint32_t*)((int)source + 1);\n                dest32 = (uint32_t*)((int)destination + 1);\n                *(uint8_t*)destination = *(uint8_t*)source;\n            }\n            dest = dest32;\n            src = src32;\n            if ((remainder & 2) != 0)\n            {\n                src = (uint32_t*)((int)src32 + 2);\n                dest = (uint32_t*)((int)dest32 + 2);\n                *(uint16_t*)dest32 = *(uint16_t*)src32;\n            }\n        }\n    }\n    while (0x3f < size)\n    {\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n        *dest++ = *src++;\n    }\n    copy_remainder:\n    remainder &= 3;\n    if (remainder != 0)\n    {\n        uint8_t* dest8 = (uint8_t*) dest;\n        uint8_t* src8 = (uint8_t*) src;\n        do\n        {\n            *dest8++ = *src8++;\n        } while (--remainder);\n    }\n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_master_00080a68",
                "puVar1": "rx_string",
                "PTR_RxString_00080a94": "rx_string",
                "String::String": "String_constructor",
                "PTR_s__00080a98": "s_string",
                "__aeabi_atexit": "atexit_handler",
                "DAT_00080aa0": "atexit_arg1",
                "PTR___dso_handle_00080a9c": "atexit_arg2",
                "PTR_master_00080aa4": "master_ptr"
            },
            "code": "void initialize_master_00080a68()\n{\n  String* PTR_RxString_00080a94 = PTR_RxString_00080a94;\n  String::String(PTR_RxString_00080a94, PTR_s__00080a98);\n  __aeabi_atexit(PTR_RxString_00080a94, DAT_00080aa0, PTR___dso_handle_00080a9c);\n  int* PTR_master_00080aa4 = PTR_master_00080aa4;\n  PTR_master_00080aa4[4] = 0;\n  PTR_RxString_00080a94[5] = 0;\n  PTR_RxString_00080a94[6] = 6;\n  *(unsigned short*)(PTR_RxString_00080a94 + 0x56) = 1000;\n  return;\n}",
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_master_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "initializeString_0008165c",
                "this": "strObject",
                "cstr": "str",
                "length": "strLength",
                "uVar1": "isReserved",
                "reserve": "reserveBuffer",
                "invalidate": "invalidateBuffer",
                "len": "length",
                "buffer": "strBuffer"
            },
            "code": "String* __thiscall String::initializeString_0008165c(String* this, char* str, uint length) {\\n    uchar isReserved = reserveBuffer(this, length);\\n    if (isReserved == \"\\0\") {\\n        invalidateBuffer(this);\\n    }\\n    else {\\n        this->length = length;\\n        strcpy(this->strBuffer, str);\\n    }\\n    return this;\\n}",
            "called": [
                "strcpy",
                "invalidate",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "initializeString_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "concatenate_bytes_000815f8",
                "h": "high_byte",
                "l": "low_byte"
            },
            "code": "uint16_t concatenate_bytes_000815f8(uint8_t high_byte, uint8_t low_byte) {\n  return CONCAT11(high_byte, low_byte);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "concatenate_bytes_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "reverse_string_00084384",
                "__s": "string",
                "__c": "character",
                "__n": "length",
                "puVar1": "last_word",
                "puVar2": "current_word",
                "uVar3": "character_mask",
                "uVar4": "character_check",
                "pbVar5": "current_byte",
                "pbVar6": "last_byte",
                "uVar7": "all_characters_mask",
                "bVar8": "end_of_string"
            },
            "code": "void * reverse_string_00084384(void *string, int character, size_t length) {\n  uint *current_word;\n  uint *last_word;\n  uint character_mask;\n  uint all_characters_mask;\n  byte *current_byte;\n  byte *last_byte;\n  uint character_check;\n  bool end_of_string;\n  \n  character_mask = character & 0xff;\n  if (((uint)string & 3) == 0) {\n    current_word = (uint *)string;\n    last_word = (uint *)length;\n    if ((uint *)0x3 < length) {\n      all_characters_mask = character_mask | character_mask << 8;\n      do {\n        character_check = *string ^ (all_characters_mask | all_characters_mask << 0x10);\n        current_word = (uint *)string;\n        last_word = (uint *)length;\n        if ((character_check + 0xfefefeff & ~character_check & 0x80808080) != 0) break;\n        length = length + -4;\n        current_word = (uint *)((int)string + 4);\n        string = (uint *)((int)string + 4);\n        last_word = (uint *)length;\n      } while ((uint *)0x3 < length);\n    }\n    string = last_word;\n    last_byte = (byte *)((int)string + -1);\n    if (((uint *)string != (uint *)0x0) && (string = current_word, *(byte *)current_word != character_mask)) {\n      current_byte = (byte *)0x0;\n      do {\n        string = (void *)((int)string + 1);\n        end_of_string = current_byte == last_byte;\n        current_byte = current_byte + 1;\n        if (end_of_string) goto LAB_000843dc;\n      } while (*string != character_mask);\n    }\n  }\n  else if (length == 0) {\n    string = (uint *)0x0;\n  }\n  else {\n    if (*string != character_mask) {\n      current_word = (uint *)((int)string + 1);\n      length = (size_t)(length - 1);\n      do {\n        string = current_word;\n        if (((uint)string & 3) == 0) goto LAB_000843b4;\n        if ((uint *)length == (uint *)0x0) goto LAB_000843dc;\n        current_word = (uint *)((int)string + 1);\n        length = (size_t)(length + -1);\n      } while (*string != character_mask);\n    }\n  }\n  return string;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "reverse_string_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "get_signal_handler_pid_00082ab0",
                "__pid": "pid",
                "__sig": "sig",
                "iVar1": "result"
            },
            "code": "int get_signal_handler_pid_00082ab0(__pid_t pid, int sig) {\n  int result = _get_signal_handler_pid_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc, pid, sig);\n  return result;\n}",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "get_signal_handler_pid_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "check_if_not_null_00081c6c",
                "in_ZR": "input_char"
            },
            "code": "bool check_if_not_null_00081c6c(char input_char) {\n\t__aeabi_cfcmpeq();\n\treturn input_char != '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_not_null_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_value_at_address_00081034",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_value_at_address_00081034(uint32_t *address, uint32_t data, uint32_t mask) {\n    uint32_t current_data = *address;\n    uint32_t masked_data = data & mask;\n    uint32_t shifted_masked_data = masked_data << 7;\n    uint32_t updated_data = current_data | shifted_masked_data;\n    *address = updated_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_value_at_address_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "file_descriptor",
                "param_2": "file_descriptor_offset"
            },
            "code": "void close_file_descriptor_000844bc(int file_descriptor, int file_descriptor_offset) {\n  _close_r(file_descriptor, (int)*(short *)(file_descriptor_offset + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "check_atexit_00083974",
                "DAT_00083980": "exit_function_pointer",
                "DAT_00083984": "exit_function"
            },
            "code": "void check_atexit_00083974(void)\n{\n  if (DAT_00083980 != 0) {\n    atexit(DAT_00083980);\n    return;\n  }\n  return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "check_atexit_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_file_00084700",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result",
                "PTR_errno_00084724": "errno_location"
            },
            "code": "void seek_file_00084700(int *result, int file_descriptor, int offset, int whence) {\n    int seek_result = lseek(file_descriptor, offset, whence);\n    if (seek_result == -1 && errno != 0) {\n        *result = errno;\n        return;\n    }\n    return;\n}",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_bit_and_set_00080e5c",
                "param_1": "bit_position",
                "uVar1": "bit_mask",
                "uVar2": "data",
                "DAT_00080e98": "data_start"
            },
            "code": "int check_bit_and_set_00080e5c(uint bit_position)\n{\n    uint bit_mask;\n    uint *data_pointer;\n\n    if (bit_position < 45) {\n        if (bit_position < 32) {\n            bit_mask = 1 << bit_position;\n            data_pointer = (uint *)(DAT_00080e98 + 0x18);\n        }\n        else {\n            bit_mask = 1 << (bit_position - 32);\n            data_pointer = (uint *)(DAT_00080e98 + 0x108);\n        }\n        if ((*data_pointer & bit_mask) == bit_mask) {\n            *data_pointer = bit_mask;\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "pinMode",
                "end"
            ],
            "imported": false,
            "current_name": "check_bit_and_set_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "is_greater_than_zero_00081ca8",
                "in_CY": "is_CY_greater_than_zero",
                "in_ZR": "is_ZR_greater_than_zero"
            },
            "code": "bool is_greater_than_zero_00081ca8(void)\n{\n  bool is_CY_greater_than_zero = __aeabi_cfrcmple();\n  bool is_ZR_greater_than_zero = !(bool)in_CY;\n  return is_CY_greater_than_zero || is_ZR_greater_than_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_greater_than_zero_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "setPinValue_00081318",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "puVar1": "pinDescriptionPtr",
                "puVar2": "pinStatusPtr",
                "iVar3": "outputDataStatus",
                "uVar4": "pinDescription2",
                "uVar5": "pinDescription1",
                "uVar6": "pinValue"
            },
            "code": "void setPinValue_00081318(uint32_t pinNumber, uint32_t pinValue) {\\n    uint32_t* pinStatusPtr = PTR_g_pinStatus_00081384;\\n    uint32_t* pinDescriptionPtr = PTR_g_APinDescription_00081380;\\n    if (pinDescriptionPtr[pinNumber * 0x1c + 0xc] != \"\\0\") {\\n        uint32_t pinStatus = pinStatusPtr[pinNumber];\\n        if ((pinStatus & 0xf) == 5) {\\n            pinMode(pinNumber, OUTPUT);\\n        }\\n        pinStatusPtr[pinNumber] = pinStatus & 0xf | (byte)(pinValue << 4);\\n        uint32_t pinDescription1 = *(uint32_t *)(pinDescriptionPtr + pinNumber * 0x1c);\\n        uint32_t pinDescription2 = *(uint32_t *)(pinDescriptionPtr + pinNumber * 0x1c + 4);\\n        int outputDataStatus = PIO_GetOutputDataStatus(pinDescription1, pinDescription2);\\n        if (outputDataStatus == 0) {\\n            PIO_PullUp(pinDescription1, pinDescription2, pinValue);\\n            return;\\n        }\\n        PIO_SetOutput(pinDescription1, pinDescription2, pinValue, 0, 1, pinValue);\\n    }\\n}",
            "called": [
                "pinMode",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "setup",
                "begin",
                "getRxBuffer",
                "init",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "setPinValue_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "getTickCount_00081714",
                "PTR__dwTickCount_0008171c": "dwTickCount"
            },
            "code": "unsigned long getTickCount_00081714() {\n    return *(unsigned long *)PTR__PTR__dwTickCount_0008171c_0008171c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "getTickCount_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "isEndOfInput_00081c80",
                "in_CY": "inputChar"
            },
            "code": "bool isEndOfInput_00081c80(void)\n{\n  char inputChar;\n  __aeabi_cfcmpeq();\n  return inputChar == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "isEndOfInput_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "seek_and_update_0008449c",
                "param_1": "file_descriptor",
                "param_2": "data_buffer",
                "iVar1": "seek_result",
                "uVar2": "flag",
                "*(short *)(param_2 + 0xe)": "seek_offset",
                "*(ushort *)(param_2 + 0xc)": "flag",
                "*(int *)(param_2 + 0x50)": "seek_result"
            },
            "code": "void seek_and_update_0008449c(int file_descriptor, int* data_buffer)\n{\n  int seek_result;\n  ushort flag;\n  int seek_offset = *(short *)(data_buffer + 0xe);\n  seek_result = _lseek_r(file_descriptor, seek_offset);\n  if (seek_result == -1) {\n    flag = *(ushort *)(data_buffer + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(data_buffer + 0xc) | 0x1000;\n    *(int *)(data_buffer + 0x50) = seek_result;\n  }\n  *(ushort *)(data_buffer + 0xc) = flag;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "seek_and_update_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_malloc_trim_r",
                "_free_r",
                "_realloc_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "difference",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "code": "void calculate_difference_0008477c(uint32_t dividend, int32_t divisor, uint32_t multiplier_low, uint32_t multiplier_high, int32_t *difference) {\n    uint64_t product = (uint64_t)multiplier_low * (uint64_t)dividend;\n    product += (uint64_t)multiplier_high * (uint64_t)dividend << 32;\n    uint32_t quotient = (uint32_t)(product / divisor);\n    difference[0] = dividend - quotient;\n    difference[1] = divisor - ((int64_t)quotient * (int64_t)multiplier_low >> 32) - (uint32_t)(dividend < quotient);\n}",
            "called": [
                "__divdi3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "readModbusData_000801b0",
                "this": "modbusInstance",
                "bVar1": "isBufferOverflow",
                "uVar2": "receivedByte",
                "uVar3": "bufferSize",
                "iVar4": "readResult",
                "bVar5": "bufferIndex",
                "u8txenpin": "transmitEnablePin",
                "u8BufferSize": "bufferSize",
                "u8serno": "serialNumber",
                "au8Buffer": "dataBuffer",
                "u16InCnt": "incomingDataCount",
                "u16errCnt": "errorCount",
                "digitalWrite": "digitalWrite"
            },
            "code": "int8_t __thiscall readModbusData_000801b0(Modbus *modbusInstance) {\n  bool isBufferOverflow = false;\n  uchar receivedByte;\n  uint8_t bufferSize;\n  int readResult;\n  byte bufferIndex;\n  \n  if (modbusInstance->transmitEnablePin > 1) {\n    digitalWrite((uint)modbusInstance->transmitEnablePin, 0);\n  }\n  bufferSize = 0;\n  if (modbusInstance->serialNumber < 4) {\n    while (readResult = (**(code **)(*(int *)modbusInstance->port + 8))(), readResult != 0) {\n      bufferIndex = bufferSize;\n      receivedByte = (**(code **)(*(int *)modbusInstance->port + 0xc))();\n      modbusInstance->dataBuffer[bufferIndex] = receivedByte;\n      bufferIndex++;\n      bufferSize = bufferIndex;\n      if (bufferSize > 63) {\n        isBufferOverflow = true;\n      }\n    }\n  }\n  modbusInstance->incomingDataCount++;\n  if (isBufferOverflow) {\n    bufferSize = 253;\n    modbusInstance->errorCount++;\n  }\n  return bufferSize;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "readModbusData_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "addByteToBuffer_000813c2",
                "this": "buffer",
                "c": "byteToAdd",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_aucBuffer": "bufferArray"
            },
            "code": "void __thiscall RingBuffer::addByteToBuffer_000813c2(RingBuffer *buffer, uint8_t byteToAdd) {\n  uint headIndex = (buffer->headIndex + 1U) & 0x7f;\n  if (headIndex != buffer->tailIndex) {\n    buffer->bufferArray[buffer->headIndex] = byteToAdd;\n    buffer->headIndex = headIndex;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "addByteToBuffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4::FUN_000814e4": "UARTController::UARTController",
                "*this": "this",
                "pUart": "uart",
                "dwIrq": "irq",
                "dwId": "id",
                "pRx_buffer": "rx_buffer",
                "pTx_buffer": "tx_buffer",
                "puVar1": "write_pointer",
                "FUN_000814e4": "UARTController_000814e4"
            },
            "code": "UARTController_000814e4 * __thiscall UARTController_000814e4::UARTController_000814e4(Uart *uart, IRQn_Type irq, uint32_t id, RingBuffer *rx_buffer, RingBuffer *tx_buffer) {\n    undefined *write_pointer;\n    this->_pUart = uart;\n    this->_dwIrq = irq;\n    this->_dwId = id;\n    this->_rx_buffer = rx_buffer;\n    this->_tx_buffer = tx_buffer;\n    this->field_0x4 = 0;\n    this->field_0x8 = 1000;\n    write_pointer = PTR_PTR_write_1_00081504;\n    *(undefined **)this = write_pointer;\n    return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTController_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_data_00080d54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "PTR_DAT_00000018": "data[17]",
                "PTR_DAT_00000048": "data[25]",
                "PTR_DAT_00000044": "data[24]",
                "PTR_DAT_00000020": "data[8]",
                "PTR_DAT_00000024": "data[9]",
                "PTR_DAT_00000080": "data[32]",
                "PTR_DAT_00000014": "data[5]"
            },
            "code": "void update_data_00080d54(uint32_t* data, uint32_t value, uint32_t flags)\n{\n    bool is_negative = (int)(flags << 0x1f) < 0;\n    PTR_DAT_00000018 = value;\n    if (is_negative)\n    {\n        PTR_DAT_00000048 = value;\n    }\n    if (!is_negative)\n    {\n        PTR_DAT_00000044 = value;\n    }\n    bool has_flag_10 = (flags & 10) != 0;\n    if (has_flag_10)\n    {\n        PTR_DAT_00000020 = value;\n    }\n    if (!has_flag_10)\n    {\n        PTR_DAT_00000024 = value;\n    }\n    if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0))\n    {\n        PTR_DAT_00000080 = value;\n    }\n    PTR_DAT_00000014 = value;\n    *data = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_data_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculateModbusCRC_0008021c",
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "pMVar1": "currentModbusInstance",
                "uVar2": "crcValue",
                "cVar3": "bitIndex",
                "uVar4": "bitValue"
            },
            "code": "uint16_t __thiscall calculateModbusCRC_0008021c(Modbus *modbusInstance, uint8_t bufferLength) {\n  Modbus *currentModbusInstance;\n  uint16_t crcValue = 0xffff;\n  for (currentModbusInstance = modbusInstance; ((int)currentModbusInstance - (int)modbusInstance & 0xffU) < (uint)bufferLength; currentModbusInstance = (Modbus *)((int)&currentModbusInstance->port + 1)) {\n    crcValue = crcValue ^ currentModbusInstance->buffer[0];\n    char bitIndex = 8;\n    do {\n      uint8_t bitValue = crcValue & 1;\n      crcValue = crcValue >> 1;\n      if (bitValue != 0) {\n        crcValue = crcValue ^ 0xa001;\n      }\n      bitIndex = bitIndex + -1;\n    } while (bitIndex != 0);\n  }\n  return (ushort)(crcValue << 8) | (ushort)(crcValue >> 8);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculateModbusCRC_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sbprintf",
                "__swsetup_r",
                "strlen",
                "__sprint_r.part.0",
                "__sinit",
                "__aeabi_uldivmod",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "traverse_and_apply_function_to_all_files_in_directory_00083b08",
                "param_1": "function_pointer",
                "DAT_00083b10": "directory_path",
                "_fwalk": "_fwalk"
            },
            "code": "void traverse_and_apply_function_to_all_files_in_directory_00083b08(void (*function_pointer)(char*), char* DAT_00083b10) {\n    _fwalk(function_pointer, DAT_00083b10);\n    return;\n}",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "traverse_and_apply_function_to_all_files_in_directory_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "call_function_with_ptr_00081e04",
                "__ptr": "ptr",
                "_FUN_00081e04_r": "call_function",
                "PTR__impure_ptr_00081e10": "PTR__impure_ptr"
            },
            "code": "void call_function_with_ptr_00081e04(void *ptr){\n    call_function(*(undefined4 *)PTR__impure_ptr_00081e10_00081e10, ptr);\n    return;\n}",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "~String",
                "invalidate"
            ],
            "imported": false,
            "current_name": "call_function_with_ptr_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "updateUARTBuffer_000814a8",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_dwIrq": "irqNum",
                "DAT_000814e0": "irqRegister",
                "pmc_disable_periph_clk": "disablePeripheralClock"
            },
            "code": "void __thiscall updateUARTBuffer_000814a8(UARTClass *uart) {\n    int irqIndex = (uint)(int)uart->_dwIrq >> 5 + 0x20;\n    int irqBit = 1 << (uint)(byte)(uart->_dwIrq & 0x1f);\n    uart->_rx_buffer->_iHead = uart->_rx_buffer->_iTail;\n    (**(code **)(*(int *)uart + 0x14))();\n    *(int *)(DAT_000814e0 + irqIndex * 4) = irqBit;\n    pmc_disable_periph_clk(uart->_dwId);\n}",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "updateUARTBuffer_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "execute_callbacks_on_pin_change_00081084",
                "uVar1": "leading_zeroes_count",
                "uVar2": "pin_states",
                "PTR_callbacksPioA_000810b8": "callbacks_array",
                "DAT_000810b4": "pin_data",
                "count_leading_zeroes": "count_leading_zeroes",
                "code": "callback"
            },
            "code": "void execute_callbacks_on_pin_change_00081084(void)\n{\n  uint32_t pin_states = *(uint32_t *)(DAT_000810b4 + 0x4c);\n  while( true ) {\n    uint32_t leading_zeroes_count = count_leading_zeroes(pin_states);\n    if (leading_zeroes_count > 0x1f) break;\n    uint32_t pin_index = 0x1f - leading_zeroes_count;\n    code* callback = *(code **)(PTR_callbacksPioA_000810b8 + pin_index * 4);\n    if (callback != (code *)0x0) {\n      (*callback)();\n    }\n    pin_states &= ~(1 << pin_index);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_on_pin_change_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "divide_or_crash_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder"
            },
            "code": "void divide_or_crash_00084750(int dividend, int divisor, int quotient, int remainder) {\n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n}",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "divide_or_crash_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_adc_00080ae4",
                "ctx": "context",
                "puVar1": "clock_address",
                "puVar2": "data_address",
                "iVar3": "adc_channel_1",
                "iVar4": "adc_channel_0",
                "iVar5": "adc_channel_3",
                "iVar6": "adc_disable_all_channel_result",
                "ulPin": "pin_num",
                "uVar7": "adc_pin_value",
                "DAT_00080bec": "data_address",
                "DAT_00080bf0": "register_address",
                "DAT_00080bf4": "adc_pin_group",
                "DAT_00080bf8": "adc_pin_attribute",
                "DAT_00080bfc": "adc_pin_number",
                "DAT_00080c00": "adc_channel_2",
                "DAT_00080c04": "adc_resolution",
                "DAT_00080c08": "adc_base_address"
            },
            "code": "int initialize_adc_00080ae4(EVP_PKEY_CTX *context){\n  uint32_t pin_num;\n  uint32_t max_frequency;\n  uint32_t adc_channel_0;\n  uint32_t adc_channel_1;\n  uint32_t DAT_00080c00;\n  uint32_t adc_channel_3;\n  uint32_t DAT_00080bf4;\n  uint32_t DAT_00080bfc;\n  uint32_t adc_pin_function;\n  uint32_t DAT_00080bf8;\n  uint32_t adc_pin_mode;\n  uint32_t adc_pin_value;\n  SystemInit();\n  max_frequency = *(uint *)PTR_SystemCoreClock_00080be8 / 1000 - 1;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  *(undefined4 *)(DAT_00080bec + 0x08) = 7;\n  __libc_initialize_adc_00080ae4_array();\n  pin_num = 0;\n  do {\n    adc_pin_value = pin_num + 1;\n    digitalWrite(pin_num,0);\n    DAT_00080c00 = DAT_00080bf4;\n    adc_channel_1 = DAT_00080bf8;\n    adc_channel_0 = DAT_00080bfc;\n    adc_channel_3 = DAT_00080c00;\n    pin_num = adc_pin_value;\n  } while (adc_pin_value != 0x4f);\n  *(undefined4 *)(adc_channel_3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(adc_channel_0 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(adc_channel_1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(DAT_00080c00 + 0xa0) = 0xffffffff;\n  DAT_00080bf4 = DAT_00080bf4;\n  PIO_Configure(DAT_00080bf4,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(DAT_00080bf4,1,0xc00,0);\n  PIO_Configure(DAT_00080bf4,1,0x3000,0);\n  DAT_00080bfc = DAT_00080bfc;\n  PIO_Configure(DAT_00080bfc,2,0x30,0);\n  adc_pin_function = DAT_00080bf8;\n  PIO_Configure(adc_pin_function,1,0xc00,0);\n  PIO_Configure(DAT_00080bf4,1,3,0);\n  DAT_00080bf8 = DAT_00080bf8;\n  PIO_Configure(DAT_00080bf8,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_configure_timing(DAT_00080c08,0,0x300000,1);\n  adc_configure_trigger(DAT_00080c08,0,0);\n  adc_disable_interrupt(DAT_00080c08,0xffffffff);\n  adc_channel_3 = adc_disable_all_channel(DAT_00080c08);\n  analogOutputInit();\n  return adc_channel_3;\n}",
            "called": [
                "PIO_Configure",
                "adc_init",
                "digitalWrite",
                "adc_disable_all_channel",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_configure_trigger",
                "SystemInit",
                "adc_configure_timing",
                "analogOutputInit",
                "adc_disable_interrupt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_adc_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_exit_function_00081d5c",
                "param_1": "func_ptr",
                "param_2": "arg"
            },
            "code": "void register_exit_function_00081d5c(void (*func_ptr)(void), void *arg){\n  __cxa_atexit(func_ptr, arg);\n  return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_exit_function_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "memory_location",
                "param_2": "memory_size",
                "puVar1": "errno_pointer",
                "pcVar2": "sbrk_result"
            },
            "code": "void allocate_memory_00082970(int *memory_location, int memory_size) {\n    undefined *errno_pointer;\n    caddr_t sbrk_result;\n    errno_pointer = PTR_errno_00082990;\n    *(undefined4 *)PTR_errno_00082990 = 0;\n    sbrk_result = _sbrk(memory_size);\n    if ((sbrk_result == (caddr_t)0xffffffff) && (*(int *)errno_pointer != 0)) {\n        *memory_location = *(int *)errno_pointer;\n        return;\n    }\n    return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be"
            },
            "code": "int return_one_000811be() {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "FUNC_00084a80"
            },
            "code": "\nundefined8 FUNC_00084a80(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "check_hypercall_0008014c",
                "ticks": "ticks",
                "uVar1": "result",
                "PTR_noHyperCall_00080160": "PTR_noHyperCall_00080160",
                "aflCall": "aflCall"
            },
            "code": "uint32_t check_hypercall_0008014c(uint32_t ticks)\n{\n  uint32_t result;\n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = aflCall(1,ticks,0);\n    return result;\n  }\n  return 0;\n}\n",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "check_hypercall_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compareFloats_00081c54",
                "param_1": "first",
                "param_2": "second"
            },
            "code": "void compareFloats_00081c54(float first, float second)\n{\n    __aeabi_cfcmpeq(second, first);\n    return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compareFloats_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "String::FUN_0008163a": "CheckAndUpdateBuffer",
                "this": "str",
                "size": "required_size",
                "uVar1": "success_flag",
                "FUN_0008163a": "CheckAndUpdateBuffer_0008163a"
            },
            "code": "uchar __thiscall CheckAndUpdateBuffer_0008163a(String *str,uint required_size)\\n{\\n  uchar success_flag;\\n  if ((str->buffer == (char *)0x0) || (str->capacity < required_size)) {\\n    success_flag = changeBuffer(str,required_size);\\n    if (success_flag == \"\\0\") {\\n      return \"\\0\";\\n    }\\n    if (str->len == 0) {\\n      *str->buffer = \"\\0\";\\n    }\\n  }\\n  return \"\\x01\";\\n}",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "CheckAndUpdateBuffer_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "FUNC_00081aac"
            },
            "code": "\nuint FUNC_00081aac(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_00081aa2:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_00081ac4;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_00081ac4:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "allocate_memory_000825a0",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "allocated_memory",
                "_FUN_000825a0_r": "allocate_memory_r"
            },
            "code": "void * allocate_memory_000825a0(void *ptr, size_t size) {\n  void *allocated_memory;\n  allocated_memory = (void *)allocate_memory_000825a0_r(*(undefined4 *)PTR__impure_ptr_000825ac, ptr, size);\n  return allocated_memory;\n}",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4::FUN_000815d4": "UARTClass::UARTClass",
                "*this": "this",
                "Usart* pUsart": "Usart* usart",
                "IRQn_Type dwIrq": "IRQn_Type irq",
                "uint32_t dwId": "uint32_t id",
                "RingBuffer* pRx_buffer": "RingBuffer* rx_buffer",
                "RingBuffer* pTx_buffer": "RingBuffer* tx_buffer",
                "_pUsart": "usart",
                "PTR_PTR_write_1_000815f4": "write_function_ptr",
                "FUN_000815d4": "UARTClass_000815d4"
            },
            "code": "UARTClass_000815d4* __thiscall UARTClass_000815d4::UARTClass_000815d4(UARTClass_000815d4* this, Usart* usart, IRQn_Type irq, uint32_t id, RingBuffer* rx_buffer, RingBuffer* tx_buffer) {\n    UARTClass_000815d4::UARTClass_000815d4(&this->super_UARTClass_000815d4, (Uart*)usart, irq, id, rx_buffer, tx_buffer);\n    *(undefined**)&this->super_UARTClass_000815d4 = PTR_PTR_write_1_000815f4;\n    this->usart = usart;\n    return this;\n}",
            "called": [
                "UARTClass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "UARTClass_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "set_value_at_index_00080d24",
                "param_1": "array_address",
                "param_2": "value",
                "param_3": "index",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(array_address + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(array_address + 0x60)"
            },
            "code": "void set_value_at_index_00080d24(int array_address, int value, int index) {\n  if (index != 0) {\n    *(int *)(array_address + 100) = value;\n    return;\n  }\n  *(int *)(array_address + 0x60) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "FUNC_00081e14"
            },
            "code": "\nint * FUNC_00081e14(undefined4 *param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  undefined *puVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined4 *puVar10;\n  undefined *puVar11;\n  undefined *puVar12;\n  undefined *puVar13;\n  undefined4 *puVar14;\n  uint uVar15;\n  undefined4 *puVar16;\n  undefined *puVar17;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081e7a;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081e7a:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_1);\n  puVar1 = PTR___malloc_av__00082140;\n  if (uVar15 < 0x1f8) {\n    puVar13 = *(undefined **)(PTR___malloc_av__00082140 + uVar15 + 0xc);\n    if ((puVar13 != PTR___malloc_av__00082140 + uVar15) ||\n       (puVar12 = puVar13 + 8, puVar13 = *(undefined **)(puVar13 + 0x14), puVar12 != puVar13)) {\n      uVar9 = *(uint *)(puVar13 + 4);\n      iVar6 = *(int *)(puVar13 + 0xc);\n      uVar15 = *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4);\n      iVar2 = *(int *)(puVar13 + 8);\n      *(int *)(iVar2 + 0xc) = iVar6;\n      *(int *)(iVar6 + 8) = iVar2;\n      *(uint *)(puVar13 + (uVar9 & 0xfffffffc) + 4) = uVar15 | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    uVar9 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar9 = uVar15 >> 9;\n    if (uVar9 == 0) {\n      iVar6 = 0x7e;\n      iVar2 = 0x3f;\n    }\n    else if (uVar9 < 5) {\n      iVar2 = (uVar15 >> 6) + 0x38;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x15) {\n      iVar2 = uVar9 + 0x5b;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x55) {\n      iVar2 = (uVar15 >> 0xc) + 0x6e;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x155) {\n      iVar2 = (uVar15 >> 0xf) + 0x77;\n      iVar6 = iVar2 * 2;\n    }\n    else if (uVar9 < 0x555) {\n      iVar2 = (uVar15 >> 0x12) + 0x7c;\n      iVar6 = iVar2 * 2;\n    }\n    else {\n      iVar6 = 0xfc;\n      iVar2 = 0x7e;\n    }\n    for (puVar13 = *(undefined **)(PTR___malloc_av__00082140 + iVar6 * 4 + 0xc);\n        PTR___malloc_av__00082140 + iVar6 * 4 != puVar13; puVar13 = *(undefined **)(puVar13 + 0xc))\n    {\n      uVar9 = *(uint *)(puVar13 + 4) & 0xfffffffc;\n      if (0xf < (int)(uVar9 - uVar15)) {\n        iVar2 = iVar2 + -1;\n        break;\n      }\n      if (-1 < (int)(uVar9 - uVar15)) {\n        uVar15 = *(uint *)(puVar13 + uVar9 + 4);\n        iVar6 = *(int *)(puVar13 + 0xc);\n        iVar2 = *(int *)(puVar13 + 8);\n        *(int *)(iVar2 + 0xc) = iVar6;\n        *(int *)(iVar6 + 8) = iVar2;\n        *(uint *)(puVar13 + uVar9 + 4) = uVar15 | 1;\n        __malloc_unlock(param_1);\n        return (int *)(puVar13 + 8);\n      }\n    }\n    uVar9 = iVar2 + 1;\n  }\n  puVar13 = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  puVar12 = PTR___malloc_av__00082140 + 8;\n  if (puVar13 == puVar12) {\n    uVar3 = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    uVar3 = *(uint *)(puVar13 + 4);\n    uVar4 = uVar3 & 0xfffffffc;\n    uVar7 = uVar4 - uVar15;\n    if (0xf < (int)uVar7) {\n      puVar5 = puVar13 + uVar15;\n      *(uint *)(puVar13 + 4) = uVar15 | 1;\n      *(undefined **)(puVar1 + 0x14) = puVar5;\n      *(undefined **)(puVar1 + 0x10) = puVar5;\n      *(undefined **)(puVar5 + 0xc) = puVar12;\n      *(undefined **)(puVar5 + 8) = puVar12;\n      *(uint *)(puVar5 + 4) = uVar7 | 1;\n      *(uint *)(puVar5 + uVar7) = uVar7;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = puVar12;\n    *(undefined **)(puVar1 + 0x10) = puVar12;\n    if (-1 < (int)uVar7) {\n      *(uint *)(puVar13 + uVar4 + 4) = *(uint *)(puVar13 + uVar4 + 4) | 1;\n      __malloc_unlock(param_1);\n      return (int *)(puVar13 + 8);\n    }\n    if (uVar4 < 0x200) {\n      puVar5 = puVar1 + (uVar3 & 0xfffffff8);\n      iVar2 = *(int *)(puVar5 + 8);\n      uVar3 = 1 << ((int)(uVar3 >> 3) >> 2 & 0xffU) | *(uint *)(puVar1 + 4);\n      *(int *)(puVar13 + 8) = iVar2;\n      *(undefined **)(puVar13 + 0xc) = puVar5;\n      *(uint *)(puVar1 + 4) = uVar3;\n      *(undefined **)(puVar5 + 8) = puVar13;\n      *(undefined **)(iVar2 + 0xc) = puVar13;\n    }\n    else {\n      uVar7 = uVar3 >> 9;\n      if (uVar7 < 5) {\n        iVar6 = (uVar3 >> 6) + 0x38;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x15) {\n        iVar6 = uVar7 + 0x5b;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x55) {\n        iVar6 = (uVar3 >> 0xc) + 0x6e;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x155) {\n        iVar6 = (uVar3 >> 0xf) + 0x77;\n        iVar2 = iVar6 * 2;\n      }\n      else if (uVar7 < 0x555) {\n        iVar6 = (uVar3 >> 0x12) + 0x7c;\n        iVar2 = iVar6 * 2;\n      }\n      else {\n        iVar2 = 0xfc;\n        iVar6 = 0x7e;\n      }\n      puVar5 = puVar1 + iVar2 * 4;\n      puVar17 = *(undefined **)(puVar5 + 8);\n      if (puVar17 == puVar5) {\n        uVar3 = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (iVar6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = uVar3;\n        puVar11 = puVar17;\n      }\n      else {\n        do {\n          puVar11 = puVar17;\n          if ((*(uint *)(puVar17 + 4) & 0xfffffffc) <= uVar4) break;\n          puVar17 = *(undefined **)(puVar17 + 8);\n          puVar11 = puVar17;\n        } while (puVar5 != puVar17);\n        puVar17 = *(undefined **)(puVar11 + 0xc);\n        uVar3 = *(uint *)(puVar1 + 4);\n      }\n      *(undefined **)(puVar13 + 0xc) = puVar17;\n      *(undefined **)(puVar13 + 8) = puVar11;\n      *(undefined **)(puVar17 + 8) = puVar13;\n      *(undefined **)(puVar11 + 0xc) = puVar13;\n    }\n  }\n  uVar4 = 1 << ((int)uVar9 >> 2 & 0xffU);\n  if (uVar4 <= uVar3) {\n    if ((uVar3 & uVar4) == 0) {\n      uVar9 = uVar9 & 0xfffffffc;\n      do {\n        uVar4 = uVar4 << 1;\n        uVar9 = uVar9 + 4;\n      } while ((uVar3 & uVar4) == 0);\n    }\n    do {\n      puVar16 = (undefined4 *)(puVar1 + uVar9 * 8);\n      puVar14 = puVar16;\n      uVar3 = uVar9;\n      do {\n        for (puVar10 = (undefined4 *)puVar14[3]; puVar14 != puVar10;\n            puVar10 = (undefined4 *)puVar10[3]) {\n          uVar7 = puVar10[1] & 0xfffffffc;\n          uVar8 = uVar7 - uVar15;\n          if (0xf < (int)uVar8) {\n            iVar6 = puVar10[2];\n            iVar2 = puVar10[3];\n            puVar13 = (undefined *)(uVar15 + (int)puVar10);\n            puVar10[1] = uVar15 | 1;\n            *(int *)(iVar6 + 0xc) = iVar2;\n            *(int *)(iVar2 + 8) = iVar6;\n            *(undefined **)(puVar1 + 0x14) = puVar13;\n            *(undefined **)(puVar1 + 0x10) = puVar13;\n            *(undefined **)(puVar13 + 0xc) = puVar12;\n            *(undefined **)(puVar13 + 8) = puVar12;\n            *(uint *)(puVar13 + 4) = uVar8 | 1;\n            *(uint *)(puVar13 + uVar8) = uVar8;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n          if (-1 < (int)uVar8) {\n            iVar2 = puVar10[2];\n            iVar6 = puVar10[3];\n            *(uint *)((int)puVar10 + uVar7 + 4) = *(uint *)((int)puVar10 + uVar7 + 4) | 1;\n            *(int *)(iVar2 + 0xc) = iVar6;\n            *(int *)(iVar6 + 8) = iVar2;\n            __malloc_unlock(param_1);\n            return puVar10 + 2;\n          }\n        }\n        uVar3 = uVar3 + 1;\n        puVar14 = puVar14 + 2;\n      } while ((uVar3 & 3) != 0);\n      do {\n        uVar7 = uVar9 & 3;\n        puVar14 = puVar16 + -2;\n        uVar9 = uVar9 - 1;\n        if (uVar7 == 0) {\n          uVar7 = *(uint *)(puVar1 + 4) & ~uVar4;\n          *(uint *)(puVar1 + 4) = uVar7;\n          goto LAB_00082262;\n        }\n        puVar16 = (undefined4 *)*puVar16;\n      } while (puVar16 == puVar14);\n      uVar7 = *(uint *)(puVar1 + 4);\nLAB_00082262:\n      uVar4 = uVar4 * 2;\n      if ((uVar7 <= uVar4 && uVar4 - uVar7 != 0) || (uVar9 = uVar3, uVar4 == 0)) break;\n      for (; (uVar7 & uVar4) == 0; uVar4 = uVar4 << 1) {\n        uVar9 = uVar9 + 4;\n      }\n    } while( true );\n  }\n  puVar13 = PTR___malloc_sbrk_base_00082148;\n  puVar12 = *(undefined **)(puVar1 + 8);\n  uVar9 = *(uint *)(puVar12 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar9) && (uVar3 = uVar9 - uVar15, puVar5 = puVar12, 0xf < (int)uVar3))\n  goto LAB_0008211e;\n  puVar17 = puVar12 + uVar9;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    uVar3 = uVar15 + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  puVar5 = (undefined *)_sbrk_r(param_1,uVar3);\n  puVar11 = PTR___malloc_current_mallinfo_00082154;\n  if ((puVar5 == (undefined *)0xffffffff) || ((puVar5 < puVar17 && (puVar12 != puVar1)))) {\n    puVar5 = *(undefined **)(puVar1 + 8);\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar4 = *(int *)PTR___malloc_current_mallinfo_00082154 + uVar3;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = uVar4;\n    if ((puVar17 == puVar5) && (((uint)puVar17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(puVar1 + 8) + 4) = uVar3 + uVar9 | 1;\n    }\n    else {\n      if (*(int *)puVar13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = puVar5;\n      }\n      else {\n        *(undefined **)puVar11 = puVar5 + (uVar4 - (int)puVar17);\n      }\n      uVar4 = (uint)puVar5 & 7;\n      if (uVar4 == 0) {\n        iVar2 = 0x1000;\n      }\n      else {\n        puVar5 = puVar5 + (8 - uVar4);\n        iVar2 = 0x1008 - uVar4;\n      }\n      iVar2 = iVar2 - ((uint)(puVar5 + uVar3) & 0xfff);\n      iVar6 = _sbrk_r(param_1,iVar2);\n      if (iVar6 == -1) {\n        uVar3 = 1;\n        iVar2 = 0;\n      }\n      else {\n        uVar3 = (iVar6 - (int)puVar5) + iVar2 | 1;\n      }\n      uVar4 = *(int *)puVar11 + iVar2;\n      *(undefined **)(puVar1 + 8) = puVar5;\n      *(uint *)puVar11 = uVar4;\n      *(uint *)(puVar5 + 4) = uVar3;\n      puVar13 = PTR___malloc_current_mallinfo_00082154;\n      if (puVar12 != puVar1) {\n        if (uVar9 < 0x10) {\n          *(undefined4 *)(puVar5 + 4) = 1;\n          uVar9 = 0;\n          goto LAB_00082108;\n        }\n        uVar9 = uVar9 - 0xc & 0xfffffff8;\n        *(uint *)(puVar12 + 4) = uVar9 | *(uint *)(puVar12 + 4) & 1;\n        *(undefined4 *)(puVar12 + uVar9 + 4) = 5;\n        *(undefined4 *)(puVar12 + uVar9 + 8) = 5;\n        if (0xf < uVar9) {\n          _free_r(param_1,puVar12 + 8);\n          uVar4 = *(uint *)puVar13;\n        }\n      }\n    }\n    puVar5 = *(undefined **)(puVar1 + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < uVar4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = uVar4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < uVar4) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = uVar4;\n    }\n    uVar9 = *(uint *)(puVar5 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  uVar3 = uVar9 - uVar15;\n  if ((uVar9 < uVar15) || ((int)uVar3 < 0x10)) {\n    __malloc_unlock(param_1);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(puVar5 + 4) = uVar15 | 1;\n  *(undefined **)(puVar1 + 8) = puVar5 + uVar15;\n  *(uint *)(puVar5 + uVar15 + 4) = uVar3 | 1;\n  __malloc_unlock(param_1);\n  return (int *)(puVar5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081e14",
            "calling": [
                "__sfvwrite_r",
                "malloc",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "FUNC_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_hash_000818b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "hash",
                "uVar2": "shifted_input_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_value",
                "iVar5": "constant",
                "uVar6": "shifted_input_1"
            },
            "code": "uint calculate_hash_000818b8(uint input_1, uint input_2)\n{\n  uint hash = 0;\n  uint shift_value = 0;\n\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n\n  if (input_2 == 0) {\n    shift_value = 24;\n    input_2 = input_1;\n  }\n  else {\n    shift_value = __builtin_clz(input_2) - 8;\n  }\n\n  uint shifted_input_2 = input_2 << (shift_value + 8);\n  uint shifted_input_1 = input_1 << shift_value;\n  uint carry = (int)shifted_input_1 >> 31;\n\n  hash = (shifted_input_2 - shifted_input_1) + carry;\n\n  if (shifted_input_1 == 0x80000000) {\n    hash = hash & 0xfffffffe;\n  }\n\n  return hash;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "Initialize_Modbus_00080164",
                "this": "modbus_instance",
                "u32speed": "baud_rate",
                "puVar1": "serial_ptr",
                "iVar2": "read_result",
                "PTR_Serial_000801ac": "serial_ptr",
                "port": "modbus_instance->port",
                "u8txenpin": "modbus_instance->tx_enable_pin",
                "pinMode": "pinMode",
                "digitalWrite": "digitalWrite",
                "u8BufferSize": "modbus_instance->buffer_size",
                "u8lastRec": "modbus_instance->last_received",
                "u16errCnt": "modbus_instance->error_count",
                "u16OutCnt": "modbus_instance->outgoing_count",
                "u16InCnt": "modbus_instance->incoming_count"
            },
            "code": "void __thiscall Initialize_Modbus_00080164(Modbus *modbus_instance,long baud_rate)\\n{\\n  undefined *PTR_Serial_000801ac;\\n  int read_result;\\n  PTR_Serial_000801ac = PTR_Serial_000801ac;\\n  modbus_instance->port = (HardwareSerial *)PTR_Serial_000801ac;\\n  (**(code **)(*(int *)PTR_Serial_000801ac + 0x18))(PTR_Serial_000801ac);\\n  if (1 < modbus_instance->tx_enable_pin) {\\n    pinMode((uint)modbus_instance->tx_enable_pin,1);\\n    digitalWrite((uint)modbus_instance->tx_enable_pin,0);\\n  }\\n  do {\\n    read_result = (**(code **)(*(int *)modbus_instance->port + 0xc))();\\n  } while (-1 < read_result);\\n  modbus_instance->buffer_size = \"\\0\";\\n  modbus_instance->last_received = \"\\0\";\\n  modbus_instance->error_count = 0;\\n  modbus_instance->outgoing_count = 0;\\n  modbus_instance->incoming_count = 0;\\n  return;\\n}",
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "Initialize_Modbus_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "count_bytes_000811cc",
                "file_UNUSED": "file",
                "ptr": "buffer",
                "len": "length",
                "iVar1": "i"
            },
            "code": "uint32_t count_bytes_000811cc(uint32_t file, char *buffer, uint32_t length)\n{\n  uint32_t i;\n  for (i = 0; i < length; i++) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)buffer[i];\n  }\n  return length & ~(length >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "count_bytes_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_is_terminal_000846dc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_is_terminal_000846dc(int *error_code, int file_descriptor) {\n    undefined *error_ptr;\n    int is_terminal;\n\n    error_ptr = PTR_errno_000846fc;\n    *(undefined4 *)PTR_errno_000846fc = 0;\n    is_terminal = _isatty(file_descriptor);\n    if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_is_terminal_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "result",
                "bVar1": "is_result_positive",
                "bVar5": "is_result_zero"
            },
            "code": "uint calculate_result_00081be4(uint input_1, uint input_2)\n{\n  bool is_negative_1 = ((int)input_1 >> 0x18 == -1);\n  bool is_negative_2 = ((int)input_2 >> 0x18 == -1);\n  uint doubled_input_1 = input_1 * 2;\n  uint doubled_input_2 = input_2 * 2;\n  \n  if ((is_negative_1 || is_negative_2) && ((is_negative_1 && ((input_1 & 0x7fffff) != 0)) || (is_negative_2 && ((input_2 & 0x7fffff) != 0)))) {\n    return 0xffffffff;\n  }\n  \n  uint result = doubled_input_1 | input_2 & 0x7fffffff;\n  bool is_result_zero = (result == 0);\n  \n  if (!is_result_zero) {\n    result = input_1 ^ input_2;\n    is_result_zero = (result == 0);\n  }\n  \n  bool is_result_positive = (-1 < (int)result);\n  \n  if (is_result_positive) {\n    result = doubled_input_1 + input_2 * -2;\n    is_result_zero = (result == 0);\n  }\n  \n  if (is_result_positive && (doubled_input_2 <= doubled_input_1) && !is_result_zero) {\n    result = (int)input_2 >> 0x1f;\n  }\n  \n  if (!is_result_positive || (doubled_input_2 > doubled_input_1)) {\n    result = ~((int)input_2 >> 0x1f);\n  }\n  \n  if (!is_result_zero) {\n    result = result | 1;\n  }\n  \n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "initialize_USART_000815ca",
                "this": "this_USART",
                "dwBaudRate": "baud_rate",
                "super_UARTClass": "uart_class"
            },
            "code": "void __thiscall initialize_USART_000815ca(USARTClass *this, uint32_t baud_rate)\n{\n  UARTClass::init(&this->uart_class, baud_rate, 0x8c0);\n  return;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "initialize_USART_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_value_from_param_00081894",
                "param_1": "input_param",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "carry",
                "count_leading_zeroes": "count_leading_zeroes"
            },
            "code": "uint calculate_value_from_param_00081894(uint input_param)\n{\n  int leading_zeroes = count_leading_zeroes(input_param);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_param = input_param << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = multiplier + shifted_param + shifted_zero + carry;\n    if (shifted_zero == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_param = input_param << (leading_zeroes + 0x18U & 0xff);\n  int shifted_multiplier = multiplier + ((input_param >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_param >> 0x1f));\n  uint carry = (uint)((shifted_param & 0x7fffffff) == 0);\n  uint result = shifted_multiplier & ~(shifted_param >> 0x1f);\n  if (carry) {\n    result = result & ~(shifted_param >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_value_from_param_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "data_size",
                "param_2": "callback",
                "uVar1": "callback_result",
                "iVar2": "item",
                "iVar3": "count",
                "uVar4": "result",
                "piVar5": "data"
            },
            "code": "uint process_data_00084248(int data_size, code *callback) {\n  uint result = 0;\n  int *data = (int *)(data_size + 0x2e0);\n  if (data != (int *)0x0) {\n    do {\n      int item = data[2];\n      int count = data[1] + -1;\n      if (-1 < count) {\n        do {\n          count = count + -1;\n          if ((1 < *(ushort *)(item + 0xc)) && (*(short *)(item + 0xe) != -1)) {\n            uint callback_result = (*callback)(item);\n            result = result | callback_result;\n          }\n          item = item + 0x68;\n        } while (count != -1);\n      }\n      data = (int *)*data;\n    } while (data != (int *)0x0);\n    return result;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_if_possible_000845bc",
                "param_1": "output_address",
                "param_2": "byte_to_write",
                "param_3": "max_memory_size",
                "*param_1": "*output_address",
                "*param_2": "*byte_to_write"
            },
            "code": "int write_byte_to_memory_if_possible_000845bc(int* output_address, unsigned char byte_to_write, unsigned int max_memory_size) {\n    if (output_address == NULL) {\n        return 0;\n    }\n    if (max_memory_size < 0x100) {\n        *output_address = (int)byte_to_write;\n        return 1;\n    }\n    *output_address = 0x8a;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "write_byte_to_memory_if_possible_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "readByte_00081412",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "byteCount",
                "bVar1": "currentByte",
                "pRVar2": "rxBuffer"
            },
            "code": "ssize_t __thiscall UARTClass::readByte_00081412(UARTClass *this,int fileDescriptor,void *buffer,size_t byteCount) {\n  byte currentByte;\n  RingBuffer *rxBuffer;\n  rxBuffer = this->_rx_buffer;\n  if (rxBuffer->_iHead != rxBuffer->_iTail) {\n    currentByte = rxBuffer->_aucBuffer[rxBuffer->_iTail];\n    rxBuffer->_iTail = (rxBuffer->_iTail + 1U) & 0x7f;\n    return (uint)currentByte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "readByte_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "add_to_buffer_000838cc",
                "param_1": "buffer_index",
                "param_2": "value_to_add",
                "param_3": "buffer",
                "param_4": "buffer_full_flag",
                "puVar1": "current_buffer",
                "uVar2": "buffer_size",
                "iVar3": "global_impure_ptr",
                "uVar4": "bit_to_set",
                "puVar2": "new_buffer"
            },
            "code": "int add_to_buffer_000838cc(int buffer_index, int value_to_add, int* buffer, int* buffer_full_flag) {\n    int* global_impure_ptr = *(int**)PTR__global_impure_ptr_0008396c;\n    int* current_buffer = *(int**)(global_impure_ptr + 0x148);\n    if (current_buffer == NULL) {\n        current_buffer = (int*)(global_impure_ptr + 0x14c);\n        *(int**)(global_impure_ptr + 0x148) = current_buffer;\n    }\n    uint32_t buffer_size = current_buffer[1];\n    if (buffer_size > 0x1f) {\n        if (DAT_00083970 != 0) {\n            int* new_buffer = (int*)malloc(400);\n            if (new_buffer != NULL) {\n                *new_buffer = *(int*)(global_impure_ptr + 0x148);\n                new_buffer[1] = 0;\n                buffer_size = 0;\n                *(int**)(global_impure_ptr + 0x148) = new_buffer;\n                new_buffer[0x62] = 0;\n                new_buffer[99] = 0;\n                goto LAB_00083922;\n            }\n        }\n        return -1;\n    }\nLAB_00083922:\n    if (buffer_index != 0) {\n        uint32_t bit_to_set = 1 << (buffer_size & 0xff);\n        current_buffer[buffer_size + 0x22] = value_to_add;\n        current_buffer[0x62] |= bit_to_set;\n        current_buffer[buffer_size + 0x42] = *buffer_full_flag;\n        if (buffer_index == 2) {\n            current_buffer[99] |= bit_to_set;\n        }\n    }\n    current_buffer[1] = buffer_size + 1;\n    current_buffer[buffer_size + 2] = buffer[0];\n    return 0;\n}",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "add_to_buffer_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "memset_custom_00082504",
                "__s": "ptr",
                "__c": "value",
                "__n": "num",
                "puVar1": "word_ptr",
                "puVar2": "byte_ptr",
                "puVar3": "word_ptr",
                "uVar4": "word_val",
                "uVar5": "byte_val",
                "bVar6": "is_aligned"
            },
            "code": "void *memset_custom_00082504(void *ptr, int value, size_t num)\n{\n    uint32_t *word_ptr;\n    uint32_t *byte_ptr;\n    uint32_t word_val;\n    uint32_t byte_val;\n    bool is_aligned;\n\n    byte_ptr = (uint32_t *)ptr;\n    is_aligned = ((uint32_t)ptr & 3) == 0;\n\n    if (!is_aligned)\n    {\n        if (num == 0) return ptr;\n        *byte_ptr = (uint8_t)value;\n        num--;\n        byte_ptr++;\n    }\n\n    if (num >= 16)\n    {\n        word_val = value & 0xffU | ((value & 0xffU) << 8) | ((value & 0xffU) << 16) | ((value & 0xffU) << 24);\n        byte_val = num & 0xf;\n        num = num >> 4;\n        word_ptr = byte_ptr;\n\n        while (num-- > 0)\n        {\n            *word_ptr++ = word_val;\n            *word_ptr++ = word_val;\n            *word_ptr++ = word_val;\n            *word_ptr++ = word_val;\n        }\n\n        byte_ptr = (uint32_t *)((uint32_t)word_ptr + (byte_val & 0xfffffffc));\n        byte_val &= 3;\n    }\n\n    while (byte_val-- > 0)\n    {\n        *byte_ptr++ = (uint8_t)value;\n    }\n\n    return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "imported": false,
            "current_name": "memset_custom_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "check_if_completed_000800f4",
                "param_1": "text",
                "PTR_completed_7857_0008010c": "completed_flag",
                "DAT_00080110": "data",
                "PTR__etext_00080114": "end_of_text"
            },
            "code": "char* check_if_completed_000800f4(char* text){\n  if (*PTR_completed_7857_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      text = PTR__etext_00080114;\n    }\n    *PTR_completed_7857_0008010c = 1;\n  }\n  return text;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "check_if_completed_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_formatted_string_0008378c",
                "param_1": "file_stream",
                "param_2": "stream_buffer",
                "local_488": "buffers",
                "local_480": "stack_buffer_size",
                "local_47c": "format_flags",
                "local_47a": "format_width",
                "local_478": "buffer",
                "local_474": "heap_buffer_size",
                "local_470": "unused",
                "local_46c": "heap_buffer",
                "local_464": "bytes_written",
                "local_424": "stream_buffer_backup",
                "auStack_420": "stack_buffer"
            },
            "code": "int print_formatted_string_0008378c(FILE* file_stream, int stream_buffer, const char* format_string, ...) {\n\tint print_result;\n\tint flush_result;\n\tchar stack_buffer[1024];\n\tchar* heap_buffer;\n\tva_list arguments;\n\tva_start(arguments, format_string);\n\tprint_result = vsnprintf(stack_buffer, sizeof(stack_buffer), format_string, arguments);\n\tva_end(arguments);\n\tif (print_result >= sizeof(stack_buffer)) {\n\t\theap_buffer = malloc(print_result + 1);\n\t\tif (heap_buffer == NULL) {\n\t\t\treturn -1;\n\t\t}\n\t\tva_start(arguments, format_string);\n\t\tprint_result = vsnprintf(heap_buffer, print_result + 1, format_string, arguments);\n\t\tva_end(arguments);\n\t\tflush_result = fwrite(heap_buffer, 1, print_result, file_stream);\n\t\tfree(heap_buffer);\n\t} else {\n\t\tflush_result = fwrite(stack_buffer, 1, print_result, file_stream);\n\t}\n\tif (flush_result == print_result) {\n\t\treturn print_result;\n\t} else {\n\t\treturn -1;\n\t}\n}\n",
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "flush_stream_if_not_empty_00083adc",
                "param_1": "stream_address",
                "param_2": "short_address",
                "*(int *)(param_1 + 0x38)": "*stream_pointer",
                "*(short *)(param_2 + 0xc)": "*short_pointer",
                "__sinit()": "initialize_stream()",
                "__sflush_r(param_1)": "flush_stream(stream_address)"
            },
            "code": "void flush_stream_if_not_empty_00083adc(int stream_address, int short_address)\n{\n    int* stream_pointer = (int*)(stream_address + 0x38);\n    short* short_pointer = (short*)(short_address + 0xc);\n    if ((stream_address != 0) && (*stream_pointer == 0)) {\n        __sinit();\n    }\n    if (*short_pointer == 0) {\n        return;\n    }\n    __sflush_r(stream_address);\n    return;\n}",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "_fclose_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_stream_if_not_empty_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "FUNC_000825b0"
            },
            "code": "\nint * FUNC_000825b0(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  size_t sVar5;\n  uint uVar6;\n  int *piVar7;\n  uint uVar8;\n  uint uVar9;\n  int *piVar10;\n  int iVar11;\n  \n  if (param_2 == (int *)0x0) {\n    piVar3 = (int *)_malloc_r(param_1,param_3);\n    return piVar3;\n  }\n  __malloc_lock();\n  puVar1 = PTR___malloc_av__0008296c;\n  uVar6 = param_2[-1];\n  uVar8 = uVar6 & 0xfffffffc;\n  piVar3 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar9 = 0x10;\n  }\n  else {\n    uVar9 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar9 < 0) goto LAB_0008267c;\n  }\n  if (uVar9 < param_3) {\nLAB_0008267c:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar8 < (int)uVar9) {\n    iVar2 = (int)piVar3 + uVar8;\n    iVar11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (iVar11 == iVar2) {\n      uVar4 = *(uint *)(iVar11 + 4) & 0xfffffffc;\n      iVar2 = iVar11;\n      if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar8)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)piVar3 + uVar9;\n        *(uint *)((int)piVar3 + uVar9 + 4) = (uVar4 + uVar8) - uVar9 | 1;\n        param_2[-1] = uVar9 | param_2[-1] & 1U;\n        __malloc_unlock(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar2 + 4) & 0xfffffffe) + iVar2 + 4) & 1) == 0) {\n      uVar4 = *(uint *)(iVar2 + 4) & 0xfffffffc;\n      if ((int)uVar9 <= (int)(uVar4 + uVar8)) {\n        iVar11 = *(int *)(iVar2 + 0xc);\n        iVar2 = *(int *)(iVar2 + 8);\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar4 + uVar8;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      uVar4 = 0;\n      iVar2 = 0;\n    }\n    if (-1 < (int)(uVar6 << 0x1f)) {\n      piVar10 = (int *)((int)piVar3 - param_2[-2]);\n      uVar6 = (piVar10[1] & 0xfffffffcU) + uVar8;\n      if (iVar2 != 0) {\n        if (iVar2 == iVar11) {\n          if ((int)(uVar9 + 0x10) <= (int)(uVar4 + uVar6)) {\n            piVar3 = piVar10 + 2;\n            iVar2 = *piVar3;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            if (sVar5 < 0x25) {\n              piVar7 = piVar3;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar7 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar7 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar7;\n                    piVar7 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar7 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar7 = *param_2;\n              piVar7[1] = param_2[1];\n              piVar7[2] = param_2[2];\n            }\n            else {\n              memmove(piVar3,param_2,sVar5);\n            }\n            *(uint *)(puVar1 + 8) = (int)piVar10 + uVar9;\n            *(uint *)((int)piVar10 + uVar9 + 4) = (uVar4 + uVar6) - uVar9 | 1;\n            piVar10[1] = uVar9 | piVar10[1] & 1U;\n            __malloc_unlock(param_1);\n            return piVar3;\n          }\n        }\n        else {\n          uVar4 = uVar4 + uVar6;\n          if ((int)uVar9 <= (int)uVar4) {\n            iVar11 = *(int *)(iVar2 + 0xc);\n            iVar2 = *(int *)(iVar2 + 8);\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            piVar7 = piVar10 + 2;\n            iVar2 = *piVar7;\n            iVar11 = piVar10[3];\n            sVar5 = uVar8 - 4;\n            *(int *)(iVar2 + 0xc) = iVar11;\n            *(int *)(iVar11 + 8) = iVar2;\n            uVar8 = uVar4;\n            if (sVar5 < 0x25) {\n              piVar3 = piVar7;\n              if (0x13 < sVar5) {\n                piVar10[2] = *param_2;\n                piVar10[3] = param_2[1];\n                if (sVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar3 = piVar10 + 4;\n                }\n                else {\n                  piVar10[4] = param_2[2];\n                  piVar10[5] = param_2[3];\n                  if (sVar5 == 0x24) {\n                    piVar10[6] = param_2[4];\n                    piVar3 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar10[7] = *piVar3;\n                    piVar3 = piVar10 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar3 = piVar10 + 6;\n                  }\n                }\n              }\n              *piVar3 = *param_2;\n              piVar3[1] = param_2[1];\n              piVar3[2] = param_2[2];\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            else {\n              memmove(piVar7,param_2,sVar5);\n              uVar6 = piVar10[1];\n              piVar3 = piVar10;\n              param_2 = piVar7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)uVar9 <= (int)uVar6) {\n        piVar7 = piVar10 + 2;\n        iVar2 = *piVar7;\n        iVar11 = piVar10[3];\n        sVar5 = uVar8 - 4;\n        *(int *)(iVar2 + 0xc) = iVar11;\n        *(int *)(iVar11 + 8) = iVar2;\n        uVar8 = uVar6;\n        if (sVar5 < 0x25) {\n          piVar3 = piVar7;\n          if (0x13 < sVar5) {\n            piVar10[2] = *param_2;\n            piVar10[3] = param_2[1];\n            if (sVar5 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar3 = piVar10 + 4;\n            }\n            else {\n              piVar10[4] = param_2[2];\n              piVar10[5] = param_2[3];\n              if (sVar5 == 0x24) {\n                piVar10[6] = param_2[4];\n                piVar3 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar10[7] = *piVar3;\n                piVar3 = piVar10 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar3 = piVar10 + 6;\n              }\n            }\n          }\n          *piVar3 = *param_2;\n          piVar3[1] = param_2[1];\n          piVar3[2] = param_2[2];\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        else {\n          memmove(piVar7,param_2,sVar5);\n          uVar6 = piVar10[1];\n          piVar3 = piVar10;\n          param_2 = piVar7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    piVar10 = (int *)_malloc_r(param_1,param_3);\n    if (piVar10 == (int *)0x0) goto LAB_000826a4;\n    uVar6 = param_2[-1];\n    if (piVar10 + -2 != (int *)((uVar6 & 0xfffffffe) + (int)piVar3)) {\n      sVar5 = uVar8 - 4;\n      if (sVar5 < 0x25) {\n        piVar3 = param_2;\n        piVar7 = piVar10;\n        if (0x13 < sVar5) {\n          *piVar10 = *param_2;\n          piVar10[1] = param_2[1];\n          if (sVar5 < 0x1c) {\n            piVar3 = param_2 + 2;\n            piVar7 = piVar10 + 2;\n          }\n          else {\n            piVar10[2] = param_2[2];\n            piVar10[3] = param_2[3];\n            if (sVar5 == 0x24) {\n              piVar10[4] = param_2[4];\n              piVar10[5] = param_2[5];\n              piVar3 = param_2 + 6;\n              piVar7 = piVar10 + 6;\n            }\n            else {\n              piVar3 = param_2 + 4;\n              piVar7 = piVar10 + 4;\n            }\n          }\n        }\n        *piVar7 = *piVar3;\n        piVar7[1] = piVar3[1];\n        piVar7[2] = piVar3[2];\n      }\n      else {\n        memmove(piVar10,param_2,sVar5);\n      }\n      _free_r(param_1,param_2);\n      goto LAB_000826a4;\n    }\n    uVar8 = uVar8 + (piVar10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  uVar4 = uVar8 - uVar9;\n  piVar10 = param_2;\n  if (uVar4 < 0x10) {\n    piVar3[1] = uVar6 & 1 | uVar8;\n    *(uint *)((int)piVar3 + uVar8 + 4) = *(uint *)((int)piVar3 + uVar8 + 4) | 1;\n  }\n  else {\n    piVar3[1] = uVar6 & 1 | uVar9;\n    *(uint *)((int)piVar3 + uVar9 + 4) = uVar4 | 1;\n    *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) = *(uint *)((int)piVar3 + uVar4 + uVar9 + 4) | 1;\n    _free_r(param_1,(int)piVar3 + uVar9 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_1);\n  return piVar10;\n}\n\n",
            "called": [
                "memmove",
                "_free_r",
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000825b0",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "FUNC_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "processCallbacks_0008112c",
                "uVar1": "callbackIndex",
                "uVar2": "bitmask"
            },
            "code": "void processCallbacks_0008112c(void)\n{\n  uint bitmask;\n  uint callbackIndex;\n  \n  bitmask = *(uint *)(DAT_callbackBitmask + 0x4c);\n  while( true ) {\n    callbackIndex = count_leading_zeroes(bitmask);\n    if (callbackIndex > 0x1f) break;\n    callbackIndex = 0x1f - callbackIndex;\n    if (*(code **)(PTR_callbacksPioD_00081160 + callbackIndex * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioD_00081160 + callbackIndex * 4))();\n    }\n    bitmask = bitmask & ~(1 << callbackIndex);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "processCallbacks_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "checkBufferValidity_000803d4",
                "iVar1": "bufferIndex",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount",
                "PTR_fctsupported_0008040c": "supportedFunctions",
                "secondByte": "secondByte"
            },
            "code": "uint8_t __thiscall Modbus::checkBufferValidity_000803d4(Modbus *this)\\n{\\n  int bufferIndex;\\n  uint8_t secondByte = this->au8Buffer[1];\\n  if ((secondByte << 0x18) < 0) {\\n    this->errorCount++;\\n    return 0xfb;\\n  }\\n  bufferIndex = 0;\\n  do {\\n    if (this->PTR_fctsupported_0008040c[bufferIndex] == secondByte) {\\n      return \"\\0\";\\n    }\\n    bufferIndex++;\\n  } while (bufferIndex != 8);\\n  this->errorCount++;\\n  return \"\\x01\";\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "checkBufferValidity_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_000845d8(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n    undefined *error_ptr;\n    int write_result;\n    error_ptr = PTR_errno_000845fc;\n    *(undefined4 *)PTR_errno_000845fc = 0;\n    write_result = _write(file_descriptor, buffer, buffer_size);\n    if ((write_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n        return;\n    }\n    return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "readDataFromPort_0008043e",
                "__fds": "fileDescriptors",
                "__nfds": "numberOfDescriptors",
                "__timeout": "timeoutInMilliseconds",
                "bVar1": "byteRead",
                "uVar2": "receivedByte",
                "uVar3": "currentTime",
                "unaff_r6": "portNumber",
                "u8serno": "serialNumber",
                "u32timeOut": "timeout",
                "u8lastError": "lastError",
                "u8state": "state",
                "u16errCnt": "errorCount",
                "getRxBuffer": "getRxBuffer",
                "validateAnswer": "validateAnswer",
                "au8Buffer": "buffer",
                "get_FC3": "getFunctionCode3"
            },
            "code": "int __thiscall Modbus::readDataFromPort_0008043e(Modbus *this, int *fileDescriptors, int numberOfDescriptors, int timeoutInMilliseconds) {\\n\"\n                     \"    byte byteRead;\\n\"\n                     \"    uint8_t receivedByte;\\n\"\n                     \"    uint32_t currentTime = millis();\\n\"\n                     \"    uint portNumber;\\n\"\n                     \"\\n\"\n                     \"    if (this->serialNumber < 4) {\\n\"\n                     \"        byteRead = (**(code **)(*(int *)this->port + 8))();\\n\"\n                     \"        portNumber = (uint)byteRead;\\n\"\n                     \"    }\\n\"\n                     \"\\n\"\n                     \"    if (this->timeout < currentTime) {\\n\"\n                     \"        this->lastError = 0xff;\\n\"\n                     \"        this->state = \"\\0\";\\n\"\n                     \"        this->errorCount = this->errorCount + 1;\\n\"\n                     \"    }\\n\"\n                     \"    else if (7 < portNumber) {\\n\"\n                     \"        getRxBuffer(this);\\n\"\n                     \"        receivedByte = validateAnswer(this);\\n\"\n                     \"        if (receivedByte == \"\\0\") {\\n\"\n                     \"            if (this->buffer[1] - 3 < 2) {\\n\"\n                     \"                getFunctionCode3(this);\\n\"\n                     \"            }\\n\"\n                     \"            this->state = \"\\0\";\\n\"\n                     \"            receivedByte = this->bufferSize;\\n\"\n                     \"        }\\n\"\n                     \"        else {\\n\"\n                     \"            this->state = \"\\0\";\\n\"\n                     \"        }\\n\"\n                     \"        return (int)(char)receivedByte;\\n\"\n                     \"    }\\n\"\n                     \"    return 0;\\n\"\n                     \"}",
            "called": [
                "get_FC3",
                "validateAnswer",
                "getRxBuffer",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "readDataFromPort_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "clearString_0008160c",
                "this": "stringToClear",
                "buffer": "stringBuffer",
                "len": "length",
                "capacity": "capacity"
            },
            "code": "void __thiscall clearString_0008160c(String *stringToClear)\n{\n  if (stringToClear->buffer != NULL)\n  {\n    free(stringToClear->buffer);\n  }\n  stringToClear->buffer = NULL;\n  stringToClear->length = 0;\n  stringToClear->capacity = 0;\n  return;\n}",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clearString_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "check_valid_char_00080e18",
                "param_1": "character",
                "uVar1": "mask"
            },
            "code": "uint8_t check_valid_char_00080e18(uint8_t character) {\n    uint32_t mask;\n    if (character < 0x2d) {\n        if (character < 0x20) {\n            mask = 1 << (character & 0xff);\n            if ((mask & *(uint32_t *)(DAT_00080e58 + 0x18)) != mask) {\n                *(uint32_t *)(DAT_00080e58 + 0x10) = mask;\n            }\n        }\n        else {\n            mask = 1 << (character - 0x20 & 0xff);\n            if ((mask & *(uint32_t *)(DAT_00080e58 + 0x108)) != mask) {\n                *(uint32_t *)(DAT_00080e58 + 0x100) = mask;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "imported": false,
            "current_name": "check_valid_char_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "returnZero_00081184"
            },
            "code": "int returnZero_00081184(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "returnZero_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "receive_and_transmit_data_00081580",
                "this": "uart_instance",
                "pRVar1": "buffer",
                "RVar2": "uart_status",
                "_pUart": "uart",
                "_rx_buffer": "rx_buffer",
                "_tx_buffer": "tx_buffer",
                "_iTail": "tail_index",
                "_iHead": "head_index",
                "_aucBuffer": "data_buffer"
            },
            "code": "void __thiscall UARTClass::receive_and_transmit_data_00081580(UARTClass *uart_instance) {\n  RingBuffer *rx_buffer = uart_instance->_rx_buffer;\n  RingBuffer *tx_buffer = uart_instance->_tx_buffer;\n  RoReg uart_status = uart_instance->_pUart->UART_SR;\n  if ((int)(uart_status << 0x1f) < 0) {\n    RingBuffer::store_char(rx_buffer, (uint8_t)uart_instance->_pUart->UART_RHR);\n  }\n  if ((int)(uart_status << 0x1e) < 0) {\n    if (tx_buffer->_iTail != tx_buffer->_iHead) {\n      uint8_t data = tx_buffer->_aucBuffer[tx_buffer->_iTail];\n      tx_buffer->_iTail = (tx_buffer->_iTail + 1U) & 0x7f;\n      uart_instance->_pUart->UART_THR = (uint)data;\n    }\n    else {\n      uart_instance->_pUart->UART_IDR = 2;\n    }\n  }\n}",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "UART_Handler",
                "USART1_Handler",
                "USART0_Handler",
                "USART3_Handler"
            ],
            "imported": false,
            "current_name": "receive_and_transmit_data_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "GetMaxMultibyteCharacterLength_00084298",
                "PTR___mb_cur_max_000842a0": "max_mb_cur_ptr"
            },
            "code": "GetMaxMultibyteCharacterLength_00084298() {\n    int* PTR___mb_cur_max_000842a0 = PTR___mb_cur_max_000842a0;\n    int max_mb_cur_len = *PTR___mb_cur_max_000842a0;\n    return max_mb_cur_len;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "GetMaxMultibyteCharacterLength_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "handle_UART_interrupt_00080ac0",
                "PTR_Serial1_00080ac8": "PTR_Serial1"
            },
            "code": "void handle_UART_interrupt_00080ac0(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial1_00080ac8);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "target_address",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(target_address + 0x14)",
                "0xffff": "65535"
            },
            "code": "void set_default_value_00081066(int target_address)\n{\n  *(int *)(target_address + 0x14) = 65535;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_default_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "unsigned_int_value",
                "uVar1": "abs_value",
                "uVar2": "shift_amount",
                "uVar3": "shifted_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint convert_to_signed_int_00081cd0(uint unsigned_int_value) {\n    uint sign_bit_mask = 0x80000000;\n    uint abs_value;\n    uint shift_amount;\n    uint shifted_value;\n    if (unsigned_int_value << 1 < 0x7f000000) {\n        return 0;\n    }\n    abs_value = (unsigned_int_value << 1) >> 0x18;\n    shift_amount = 0x9e - abs_value;\n    if (abs_value < 0x9f && shift_amount != 0) {\n        shifted_value = (unsigned_int_value << 8 | sign_bit_mask) >> (shift_amount & 0xff);\n        if ((unsigned_int_value & sign_bit_mask) != 0) {\n            shifted_value = -shifted_value;\n        }\n        return shifted_value;\n    }\n    if ((shift_amount == 0xffffff9f) && ((unsigned_int_value & 0x7fffff) != 0)) {\n        return 0;\n    }\n    unsigned_int_value = unsigned_int_value & sign_bit_mask;\n    if (unsigned_int_value == 0) {\n        unsigned_int_value = 0x7fffffff;\n    }\n    return unsigned_int_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "convert_to_signed_int_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "infiniteLoop_00081188"
            },
            "code": "void infiniteLoop_00081188(void)\n{\n  while(true)\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "SVC_Handler",
                "__halt",
                "PendSV_Handler"
            ],
            "imported": false,
            "current_name": "infiniteLoop_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "allocated_memory"
            },
            "code": "void * allocate_memory_00081df4(size_t size)\n{\n  void *allocated_memory;\n  allocated_memory = (void *)_allocate_memory_00081df4_r(*(undefined4 *)PTR__impure_ptr_00081e00, size);\n  return allocated_memory;\n}",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "ReadHoldingRegisters_00080410",
                "this": "modbus",
                "uVar1": "byteIndex",
                "uVar2": "bufferIndex",
                "bVar3": "registerIndex",
                "uVar4": "registerIndex",
                "puVar5": "registers",
                "au8Buffer": "buffer",
                "au16regs": "holdingRegisters"
            },
            "code": "void __thiscall ReadHoldingRegisters_00080410(Modbus *modbus)\n{\n    uint16_t bufferIndex;\n    uint byteIndex;\n    byte registerIndex;\n    uint16_t *registers = modbus->holdingRegisters;\n    registerIndex = 0;\n    while(registerIndex < modbus->au8Buffer[2] >> 1)\n    {\n        bufferIndex = (registerIndex * 2) + 3;\n        byteIndex = modbus->au8Buffer[bufferIndex];\n        byteIndex <<= 8;\n        byteIndex |= modbus->au8Buffer[bufferIndex + 1];\n        registers[registerIndex] = byteIndex;\n        registerIndex++;\n    }\n    return;\n}",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "ReadHoldingRegisters_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_data_00080da0",
                "param_1": "data",
                "param_2": "type",
                "param_3": "result",
                "param_4": "flag",
                "bVar1": "is_negative_flag",
                "*DAT_00080df8": "*PTR_FUNCTION_1",
                "*(undefined4 *)(param_1 + 0x44)": "*(int *)(data + 0x44)",
                "*(undefined4 *)(param_1 + 100)": "*(int *)(data + 100)",
                "*(undefined4 *)(param_1 + 0x60)": "*(int *)(data + 0x60)",
                "*DAT_00080dfc": "*PTR_FUNCTION_2",
                "*DAT_00080e00": "*PTR_FUNCTION_3"
            },
            "code": "int process_data_00080da0(int data, int type, int result, uint32_t flag)\n{\n  bool is_negative_flag = (int)(flag << 0x1f) < 0;\n  switch(type) {\n    case 1:\n    case 2:\n      (*DAT_00080df8)(data, type, result);\n      *(int *)(data + 0x44) = result;\n      if (is_negative_flag) {\n        *(int *)(data + 100) = result;\n      }\n      if (!is_negative_flag) {\n        *(int *)(data + 0x60) = result;\n      }\n      break;\n    case 3:\n      (*DAT_00080dfc)(data, result, flag, PTR_FUNCTION_2, data);\n      break;\n    case 4:\n    case 5:\n      (*DAT_00080e00)(data, result, type == 5, (flag << 0x1d) >> 0x1f, flag & 1, type, result);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "pinMode",
                "init"
            ],
            "imported": false,
            "current_name": "process_data_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "sendModbusData_00080258",
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "uVar1": "crcValue",
                "uVar2": "timeoutValue",
                "iVar3": "portReadStatus",
                "u8BufferSize": "bufferSize",
                "au8Buffer": "buffer",
                "u8txenpin": "txEnablePin",
                "u8serno": "serialNumber",
                "port": "serialPort",
                "u16timeOut": "timeOutDuration",
                "u32timeOut": "timeOut",
                "u16OutCnt": "sentPacketCount"
            },
            "code": "void __thiscall sendModbusData_00080258(Modbus *modbusInstance) {\n  byte bufferLength;\n  uint16_t crcValue;\n  uint32_t timeoutValue;\n  int portReadStatus;\n  \n  bufferLength = modbusInstance->bufferSize;\n  crcValue = calcCRC(modbusInstance, bufferLength);\n  modbusInstance->buffer[bufferLength] = (uchar)((uint)crcValue >> 8);\n  modbusInstance->buffer[(bufferLength + 1) & 0xff] = (uchar)crcValue;\n  modbusInstance->bufferSize = bufferLength + 2;\n  if (1 < modbusInstance->txEnablePin) {\n    digitalWrite((uint)modbusInstance->txEnablePin, 1);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    (**(code **)(*(int *)modbusInstance->port + 4))(modbusInstance->port, modbusInstance->buffer, modbusInstance->bufferSize);\n  }\n  if (1 < modbusInstance->txEnablePin) {\n    digitalWrite((uint)modbusInstance->txEnablePin, 0);\n  }\n  if (modbusInstance->serialNumber < 4) {\n    do {\n      portReadStatus = (**(code **)(*(int *)modbusInstance->port + 0xc))();\n    } while (-1 < portReadStatus);\n  }\n  modbusInstance->bufferSize = 0;\n  timeoutValue = millis();\n  modbusInstance->timeOut = timeoutValue + modbusInstance->timeOutDuration;\n  modbusInstance->sentPacketCount = modbusInstance->sentPacketCount + 1;\n  return;\n}",
            "called": [
                "calcCRC",
                "digitalWrite",
                "millis"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "sendModbusData_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "String::FUN_00081622": "resizeStringBuffer",
                "this": "str",
                "maxStrLen": "maxStrLen",
                "pcVar1": "newBuffer",
                "uchar": "unsigned char",
                "FUN_00081622": "resizeStringBuffer_00081622"
            },
            "code": "unsigned char resizeStringBuffer_00081622(String *str, uint32_t maxStrLen)\n{\n\tchar *newBuffer = (char *)realloc(str->buffer, maxStrLen + 1);\n\tif (newBuffer != NULL) {\n\t\tstr->buffer = newBuffer;\n\t\tstr->capacity = maxStrLen;\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resizeStringBuffer_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar2": "dest",
                "puVar3": "src",
                "puVar4": "dest",
                "puVar5": "dest_end",
                "puVar7": "src_end",
                "iVar1": "i",
                "uVar6": "leftover",
                "uVar8": "count"
            },
            "code": "void * reverse_copy_00082438(void *destination, const void *source, size_t size)\n{\n    int i = 0;\n    uint leftover = size % 4;\n    uint count = size / 4;\n    uint *dest = (uint *)destination;\n    const uint *src = (const uint *)source;\n    \n    if (source < destination && destination < source + size)\n    {\n        char *dest_end = (char *)destination + size;\n        char *src_end = (char *)source + size;\n        \n        while (count--)\n        {\n            dest[3 - i] = src[3 - i];\n            dest[2 - i] = src[2 - i];\n            dest[1 - i] = src[1 - i];\n            dest[0 - i] = src[0 - i];\n            i += 4;\n        }\n        \n        while (leftover--)\n        {\n            *--dest_end = *--src_end;\n        }\n    }\n    else\n    {\n        while (count--)\n        {\n            dest[i] = src[i];\n            dest[i + 1] = src[i + 1];\n            dest[i + 2] = src[i + 2];\n            dest[i + 3] = src[i + 3];\n            i += 4;\n        }\n        \n        while (leftover--)\n        {\n            *(char *)(dest + count + 1) = *(char *)(src + count + 1);\n        }\n    }\n    \n    return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "reverse_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initializeUART_00081508",
                "this": "uart",
                "dwBaudRate": "baudRate",
                "modeReg": "modeReg",
                "puVar1": "clockFrequency",
                "pRVar2": "rxBuffer/txBuffer",
                "pUVar3": "uartInstance",
                "_dwId": "_dwId",
                "_pUart": "_pUart",
                "UART_PTCR": "UART_PTCR",
                "UART_CR": "UART_CR",
                "UART_MR": "UART_MR",
                "UART_BRGR": "UART_BRGR",
                "UART_IDR": "UART_IDR",
                "UART_IER": "UART_IER",
                "_dwIrq": "_dwIrq",
                "_rx_buffer": "_rx_buffer",
                "_tx_buffer": "_tx_buffer",
                "_iTail": "_iTail",
                "_iHead": "_iHead",
                "PTR_SystemCoreClock_00081570": "PTR_SystemCoreClock_00081570",
                "DAT_00081574": "DAT_00081574"
            },
            "code": "void __thiscall initializeUART_00081508(UARTClass *uart,uint32_t baudRate,uint32_t modeReg)\n{\n  pmc_enable_periph_clk(uart->_dwId);\n  Uart *uartInstance = uart->_pUart;\n  uartInstance->UART_PTCR = 0x202;\n  uartInstance->UART_CR = 0xac;\n  uartInstance->UART_MR = modeReg;\n  uint32_t clockFrequency = *(uint *)PTR_SystemCoreClock_00081570;\n  uint32_t baudRateDivisor = clockFrequency / baudRate >> 4;\n  uartInstance->UART_BRGR = baudRateDivisor;\n  uartInstance->UART_IDR = 0xffffffff;\n  uartInstance->UART_IER = 0x61;\n  uint32_t interruptBitIndex = uart->_dwIrq & 0x1f;\n  uint32_t interruptArrayIndex = (uint)(int)uart->_dwIrq >> 5;\n  *(int *)(DAT_00081574 + interruptArrayIndex * 4) = 1 << interruptBitIndex;\n  RingBuffer *rxBuffer = uart->_rx_buffer;\n  rxBuffer->_iTail = 0;\n  rxBuffer->_iHead = 0;\n  RingBuffer *txBuffer = uart->_tx_buffer;\n  txBuffer->_iTail = 0;\n  txBuffer->_iHead = 0;\n  uartInstance->UART_CR = 0x50;\n}",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initializeUART_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "data",
                "param_2": "status",
                "uVar1": "temp_var_1",
                "iVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "PTR__impure_ptr_000838c8": "PTR_impure_ptr",
                "__sinit": "initialize",
                "_free_r": "free_memory",
                "__smakebuf_r": "make_buffer",
                "uVar5": "temp_var_5"
            },
            "code": "int process_data_00083808(uint16_t *data, int *status)\n{\n    uint16_t uVar1;\n    int iVar2;\n    uint16_t uVar3;\n    uint16_t uVar4;\n    \n    if ((*(int *)PTR__impure_ptr_000838c8 != 0) && (*(int *)(*(int *)PTR__impure_ptr_000838c8 + 0x38) == 0)) {\n        __sinit();\n    }\n    uVar4 = *(uint16_t *)(status + 3);\n    uVar3 = (uint16_t)uVar4;\n    if ((int)(uVar3 << 0x1c) < 0) {\n        iVar2 = status[4];\n    }\n    else {\n        if (-1 < (int)(uVar3 << 0x1b)) {\n            *data = 9;\n            *(uint16_t *)(status + 3) = uVar4 | 0x40;\n            return -1;\n        }\n        if ((int)(uVar3 << 0x1d) < 0) {\n            if ((int *)status[0xc] != (int *)0x0) {\n                if ((int *)status[0xc] != status + 0x10) {\n                    _free_r(data);\n                    uVar4 = *(uint16_t *)(status + 3);\n                }\n                status[0xc] = 0;\n            }\n            iVar2 = status[4];\n            uVar4 = uVar4 & 0xffdb;\n            *status = iVar2;\n            status[1] = 0;\n        }\n        else {\n            iVar2 = status[4];\n        }\n        *(uint16_t *)(status + 3) = uVar4 | 8;\n        uVar3 = (uint16_t)(uVar4 | 8);\n    }\n    if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n        __smakebuf_r(data, status);\n        uVar3 = *(uint16_t *)(status + 3);\n        iVar2 = status[4];\n    }\n    uint16_t uVar5 = uVar3 & 1;\n    if (uVar5 == 0) {\n        if (-1 < (int)(uVar3 << 0x1e)) {\n            uVar5 = status[5];\n        }\n        status[2] = uVar5;\n    }\n    else {\n        status[6] = -status[5];\n        status[2] = 0;\n    }\n    if ((iVar2 == 0) && ((int)((uint16_t)*(status + 3) << 0x18) < 0)) {\n        *(uint16_t *)(status + 3) = *(uint16_t *)(status + 3) | 0x40;\n        return -1;\n    }\n    return 0;\n}",
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "_vfiprintf_r",
                "__sfvwrite_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "FUNC_000847e0"
            },
            "code": "\nundefined8 FUNC_000847e0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "FUNC_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "position",
                "param_2": "bit_value",
                "*(int *)(param_1 + 0x14)": "*data_ptr",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_at_position_0008105c(int position, uint8_t bit_value) {\n    int* data_ptr = (int*)(position + 0x14);\n    int bit_mask = 1 << (bit_value & 0xff);\n    *data_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_wchar_to_char_and_set_error_if_failed_0008456c",
                "param_1": "output_buffer",
                "param_2": "output_buffer_size",
                "param_3": "input_char",
                "param_4": "error_flag",
                "uVar1": "locale_charset",
                "iVar2": "result",
                "pcVar3": "conversion_function",
                "auStack_24": "temporary_buffer"
            },
            "code": "void convert_wchar_to_char_and_set_error_if_failed_0008456c(char *output_buffer, int output_buffer_size, wchar_t input_char, int *error_flag) {\n  \n  code *conversion_function = *(code **)PTR___wctomb_000845b8;\n  \n  undefined4 locale_charset = __locale_charset();\n  int result = 0;\n  \n  if (output_buffer_size == 0) {\n    result = (*conversion_function)(output_buffer, (undefined *)(&input_char), 0, locale_charset, error_flag);\n  }\n  else {\n    result = (*conversion_function)(output_buffer, output_buffer_size, (undefined *)(&input_char), locale_charset, error_flag);\n  }\n  \n  if (result == -1) {\n    *error_flag = 0;\n    *output_buffer = 0x8a;\n  }\n  \n  return;\n}",
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_wchar_to_char_and_set_error_if_failed_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_to_directory_000811b4",
                "file_UNUSED": "unused_file_parameter",
                "st": "file_stats"
            },
            "code": "int set_file_mode_to_directory_000811b4(stat *file_stats) {\n  file_stats->st_mode = 0x2000;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "__thiscall UARTClass::FUN_000813f6": "get_next_byte_from_rx_buffer",
                "*this": "uart_instance",
                "pRVar2": "rx_buffer",
                "uVar1": "next_byte",
                "_iHead": "head",
                "_iTail": "tail",
                "_aucBuffer": "buffer",
                "FUN_000813f6": "get_next_byte_from_rx_buffer_000813f6"
            },
            "code": "uint32_t get_next_byte_from_rx_buffer_000813f6(UARTClass *uart_instance) {\n  uint32_t next_byte;\n  RingBuffer *rx_buffer = uart_instance->rx_buffer;\n  if (rx_buffer->head == rx_buffer->tail) {\n    next_byte = 0xffffffff;\n  }\n  else {\n    next_byte = (uint32_t)rx_buffer->buffer[rx_buffer->tail];\n  }\n  return next_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_from_rx_buffer_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_watchdog_timer_000816d4",
                "DAT_000816dc": "wdt_timeout"
            },
            "code": "void disable_watchdog_timer_000816d4(void)\n{\n  WDT_Disable(DAT_000816dc);\n  return;\n}",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "FUNC_00083f34"
            },
            "code": "\nundefined4 FUNC_00083f34(undefined4 *param_1,void **param_2,undefined4 *param_3)\n\n{\n  void **ppvVar1;\n  int iVar2;\n  void *pvVar3;\n  void *pvVar4;\n  ushort uVar5;\n  uint uVar6;\n  int iVar7;\n  void **ppvVar8;\n  void *pvVar9;\n  void *pvVar10;\n  void *pvVar11;\n  void *pvVar12;\n  void *__n;\n  size_t __n_00;\n  void *local_2c;\n  \n  if (param_3[2] != 0) {\n    uVar5 = *(ushort *)(param_2 + 3);\n    uVar6 = (uint)uVar5;\n    if (((int)(uVar6 << 0x1c) < 0) && (param_2[4] != (void *)0x0)) {\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    else {\n      iVar2 = __swsetup_r(param_1,param_2);\n      if (iVar2 != 0) {\n        return 0xffffffff;\n      }\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar6 = (uint)uVar5;\n      ppvVar8 = (void **)*param_3;\n      pvVar3 = DAT_00084244;\n    }\n    DAT_00084244 = pvVar3;\n    if ((uVar5 & 2) == 0) {\n      pvVar3 = (void *)(uVar6 & 2);\n      pvVar11 = (void *)(uVar6 & 1);\n      pvVar9 = pvVar3;\n      pvVar10 = pvVar3;\n      local_2c = pvVar3;\n      pvVar12 = pvVar11;\n      if (pvVar11 == (void *)0x0) {\n        while( true ) {\n          while (pvVar11 == (void *)0x0) {\n            pvVar12 = *ppvVar8;\n            ppvVar1 = ppvVar8 + 1;\n            ppvVar8 = ppvVar8 + 2;\n            pvVar11 = *ppvVar1;\n          }\n          pvVar3 = param_2[2];\n          if ((int)(uVar6 << 0x16) < 0) {\n            if (pvVar11 < pvVar3) {\n              pvVar9 = *param_2;\n              pvVar3 = pvVar11;\n            }\n            else if ((uVar6 & 0x480) == 0) {\n              pvVar9 = *param_2;\n            }\n            else {\n              __n_00 = (int)*param_2 - (int)param_2[4];\n              pvVar3 = (void *)(__n_00 + 1 + (int)pvVar11);\n              pvVar9 = (void *)(((int)param_2[5] * 3) / 2);\n              if (pvVar3 <= pvVar9) {\n                pvVar3 = pvVar9;\n              }\n              if ((int)(uVar6 << 0x15) < 0) {\n                pvVar10 = (void *)_malloc_r(param_1,pvVar3);\n                if (pvVar10 == (void *)0x0) {\n                  *param_1 = 0xc;\n                  uVar5 = *(ushort *)(param_2 + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(pvVar10,param_2[4],__n_00);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                pvVar10 = (void *)_realloc_r(param_1);\n                if (pvVar10 == (void *)0x0) {\n                  _free_r(param_1,param_2[4]);\n                  uVar5 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              pvVar9 = (void *)((int)pvVar10 + __n_00);\n              param_2[4] = pvVar10;\n              param_2[5] = pvVar3;\n              *param_2 = pvVar9;\n              param_2[2] = (void *)((int)pvVar3 - __n_00);\n              pvVar3 = pvVar11;\n            }\n            memmove(pvVar9,pvVar12,(size_t)pvVar3);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            pvVar3 = pvVar11;\n          }\n          else if ((param_2[4] < *param_2) || (pvVar9 = param_2[5], pvVar11 < pvVar9)) {\n            if (pvVar11 < pvVar3) {\n              pvVar3 = pvVar11;\n            }\n            memmove(*param_2,pvVar12,(size_t)pvVar3);\n            pvVar9 = param_2[2];\n            param_2[2] = (void *)((int)pvVar9 - (int)pvVar3);\n            *param_2 = (void *)((int)*param_2 + (int)pvVar3);\n            if (((void *)((int)pvVar9 - (int)pvVar3) == (void *)0x0) &&\n               (iVar2 = _fflush_r(param_1,param_2), iVar2 != 0)) goto LAB_0008402e;\n          }\n          else {\n            pvVar3 = (void *)0x7fffffff;\n            if (pvVar11 < (void *)0x7fffffff) {\n              pvVar3 = pvVar11;\n            }\n            pvVar3 = (void *)(*(code *)param_2[9])\n                                       (param_1,param_2[7],pvVar12,\n                                        ((uint)pvVar3 / (uint)pvVar9) * (int)pvVar9);\n            if ((int)pvVar3 < 1) goto LAB_0008402e;\n          }\n          iVar2 = param_3[2];\n          pvVar11 = (void *)((int)pvVar11 - (int)pvVar3);\n          param_3[2] = iVar2 - (int)pvVar3;\n          if (iVar2 - (int)pvVar3 == 0) break;\n          uVar6 = (uint)*(ushort *)(param_2 + 3);\n          pvVar12 = (void *)((int)pvVar12 + (int)pvVar3);\n        }\n      }\n      else {\n        do {\n          while (pvVar3 == (void *)0x0) {\n            pvVar10 = *ppvVar8;\n            pvVar3 = ppvVar8[1];\n            local_2c = (void *)0x0;\n            ppvVar8 = ppvVar8 + 2;\n          }\n          if (local_2c == (void *)0x0) {\n            pvVar9 = memchr(pvVar10,10,(size_t)pvVar3);\n            if (pvVar9 == (void *)0x0) {\n              pvVar9 = (void *)((int)pvVar3 + 1);\n              local_2c = (void *)0x1;\n            }\n            else {\n              pvVar9 = (void *)((int)pvVar9 + (1 - (int)pvVar10));\n              local_2c = (void *)0x1;\n            }\n          }\n          pvVar12 = *param_2;\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          pvVar4 = param_2[5];\n          if ((param_2[4] < pvVar12) &&\n             (__n = (void *)((int)param_2[2] + (int)pvVar4), (int)__n < (int)pvVar11)) {\n            memmove(pvVar12,pvVar10,(size_t)__n);\n            *param_2 = (void *)((int)*param_2 + (int)__n);\n            iVar2 = _fflush_r(param_1,param_2);\n            if (iVar2 != 0) goto LAB_0008402e;\n          }\n          else if ((int)pvVar11 < (int)pvVar4) {\n            memmove(pvVar12,pvVar10,(size_t)pvVar11);\n            param_2[2] = (void *)((int)param_2[2] - (int)pvVar11);\n            *param_2 = (void *)((int)pvVar11 + (int)*param_2);\n            __n = pvVar11;\n          }\n          else {\n            __n = (void *)(*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar4);\n            if ((int)__n < 1) goto LAB_0008402e;\n          }\n          pvVar9 = (void *)((int)pvVar9 - (int)__n);\n          if ((pvVar9 == (void *)0x0) &&\n             (iVar2 = _fflush_r(param_1,param_2), local_2c = pvVar9, iVar2 != 0)) goto LAB_0008402e;\n          iVar2 = param_3[2];\n          pvVar10 = (void *)((int)pvVar10 + (int)__n);\n          pvVar3 = (void *)((int)pvVar3 - (int)__n);\n          param_3[2] = iVar2 - (int)__n;\n        } while (iVar2 - (int)__n != 0);\n      }\n    }\n    else {\n      pvVar10 = (void *)0x0;\n      pvVar9 = (void *)0x0;\n      do {\n        while( true ) {\n          pvVar11 = pvVar9;\n          if (pvVar3 <= pvVar9) {\n            pvVar11 = pvVar3;\n          }\n          if (pvVar9 != (void *)0x0) break;\n          pvVar10 = *ppvVar8;\n          pvVar9 = ppvVar8[1];\n          ppvVar8 = ppvVar8 + 2;\n        }\n        iVar2 = (*(code *)param_2[9])(param_1,param_2[7],pvVar10,pvVar11);\n        if (iVar2 < 1) {\nLAB_0008402e:\n          uVar5 = *(ushort *)(param_2 + 3);\nLAB_00084030:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n          return 0xffffffff;\n        }\n        iVar7 = param_3[2];\n        pvVar10 = (void *)((int)pvVar10 + iVar2);\n        pvVar9 = (void *)((int)pvVar9 - iVar2);\n        param_3[2] = iVar7 - iVar2;\n      } while (iVar7 - iVar2 != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "memcpy",
                "_free_r",
                "__swsetup_r",
                "memmove",
                "_realloc_r",
                "_fflush_r",
                "memchr",
                "_malloc_r"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "FUNC_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "call_isr_if_not_null_00081074",
                "PTR_gpf_isr_00081080": "gpf_isr_ptr"
            },
            "code": "void call_isr_if_not_null_00081074(void)\n{\n  if (*(code **)PTR_gpf_isr_00081080 != (code *)0x0) {\n    (**(code **)PTR_gpf_isr_00081080)();\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "call_isr_if_not_null_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_data_at_indices_00080d7a",
                "param_1": "data",
                "param_2": "new_data",
                "param_3": "index1",
                "param_4": "index2",
                "param_5": "index3",
                "PTR_": "data_",
                "DAT_": "data_"
            },
            "code": "void update_data_at_indices_00080d7a(undefined4 *data, undefined4 new_data, int index1, int index2, int index3) {\n    data[17] = new_data;\n    if (index3 == 0) {\n        data[24] = new_data;\n    }\n    else {\n        data[25] = new_data;\n    }\n    if (index2 == 0) {\n        data[21] = new_data;\n    }\n    else {\n        data[20] = new_data;\n    }\n    if (index1 == 0) {\n        data[13] = new_data;\n    }\n    else {\n        data[12] = new_data;\n    }\n    data[4] = new_data;\n    *data = new_data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_data_at_indices_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_clock_00080e9c",
                "puVar1": "system_clock_control",
                "iVar2": "system_control_block",
                "DAT_00080f08": "system_clock_control_address",
                "DAT_00080f0c": "system_control_block_address",
                "DAT_00080f10": "system_clock_source_pll",
                "DAT_00080f14": "system_clock_source_primary_oscillator",
                "DAT_00080f18": "system_clock_divider",
                "PTR_SystemCoreClock_00080f20": "system_core_clock_address",
                "system_clock_divider_div_2": "0x12",
                "system_clock_divider": "0x11",
                "system_core_clock_value": "system_core_clock_value",
                "puVar1[0x80]": "system_clock_control[0x80]"
            },
            "code": "void initialize_system_clock_00080e9c(void)\n{\n  uint32_t *system_clock_control = DAT_00080f08;\n  *system_clock_control = 0x400;\n  system_clock_control[0x80] = 0x400;\n  int32_t *system_control_block = DAT_00080f0c;\n  if (-1 < *(int32_t *)(system_control_block + 0x20) << 7) {\n    *(uint32_t *)(system_control_block + 0x20) = DAT_00080f14;\n    while (-1 < *(int32_t *)(system_control_block + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(system_control_block + 0x20) = DAT_00080f10;\n  while (-1 < *(int32_t *)(system_control_block + 0x68) << 0xf);\n  *(uint32_t *)(system_control_block + 0x30) = *(uint32_t *)(system_control_block + 0x30) & 0xfffffffc | 1;\n  while (-1 < *(int32_t *)(system_control_block + 0x68) << 0x1c);\n  *(uint32_t *)(system_control_block + 0x28) = DAT_00080f18;\n  while (-1 < *(int32_t *)(system_control_block + 0x68) << 0x1e);\n  *(uint32_t *)(system_control_block + 0x30) = DAT_00080f18_div_2;\n  while (-1 < *(int32_t *)(system_control_block + 0x68) << 0x1c);\n  *(uint32_t *)PTR_SystemCoreClock_00080f20 = system_core_clock_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "write_to_file_if_positive_offset_00084464",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "current_offset_value"
            },
            "code": "void write_to_file_if_positive_offset_00084464(int file_descriptor, int offset, void *buffer, int buffer_size)\n{\n    ushort current_offset_value = *(ushort *)(offset + 0xc);\n    if ((int)((uint)current_offset_value << 0x17) < 0) {\n        _lseek_r(file_descriptor, (int)*(short *)(offset + 0xe), 0, 2);\n        current_offset_value = *(ushort *)(offset + 0xc);\n    }\n    *(ushort *)(offset + 0xc) = current_offset_value & 0xefff;\n    _write_r(file_descriptor, (int)*(short *)(offset + 0xe), buffer, buffer_size);\n    return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_if_positive_offset_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_000811ae",
                "file_UNUSED": "file_not_used"
            },
            "code": "int return_error_000811ae(int file_not_used)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "sendSoftwareInterruptToCpu_00080148",
                "a0": "interruptCode",
                "a1": "unusedParam",
                "a2": "unusedParam2"
            },
            "code": "uint32_t sendSoftwareInterruptToCpu_00080148(uint32_t interruptCode, uint32_t unusedParam, int32_t unusedParam2)\n{\n  software_interrupt(interruptCode);\n  return unusedParam;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "sendSoftwareInterruptToCpu_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handle_UART_IRQ_00080ad8",
                "PTR_Serial3_00080ae0": "PTR_Serial3"
            },
            "code": "void handle_UART_IRQ_00080ad8(void)\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial3_00080ae0);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_IRQ_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "close_file_00084624",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "return_value",
                "__sinit": "initialize_stream",
                "_fflush_r": "flush_stream",
                "code": "function_pointer",
                "_free_r": "free_memory",
                "__sfp_lock_acquire": "acquire_lock",
                "__sfp_lock_release": "release_lock"
            },
            "code": "int close_file_00084624(int file_descriptor, int stream) {\n    int result;\n    if (stream == 0) {\n        return 0;\n    }\n    if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x38) == 0)) {\n        __sinit();\n    }\n    if (*(short *)(stream + 0xc) != 0) {\n        result = _fflush_r(file_descriptor, stream);\n        if ((*(code **)(stream + 0x2c) != (code *)0x0) && ((**(code **)(stream + 0x2c))(file_descriptor, *(undefined4 *)(stream + 0x1c)) < 0)) {\n            result = 0xffffffff;\n        }\n        if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0) {\n            _free_r(file_descriptor, *(undefined4 *)(stream + 0x10));\n        }\n        if (*(int *)(stream + 0x30) != 0) {\n            if (*(int *)(stream + 0x30) != stream + 0x40) {\n                _free_r(file_descriptor);\n            }\n            *(undefined4 *)(stream + 0x30) = 0;\n        }\n        if (*(int *)(stream + 0x44) != 0) {\n            _free_r(file_descriptor);\n            *(undefined4 *)(stream + 0x44) = 0;\n        }\n        __sfp_lock_acquire();\n        *(undefined2 *)(stream + 0xc) = 0;\n        __sfp_lock_release();\n        return result;\n    }\n    return 0;\n}",
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sfp_lock_acquire",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "close_file_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_0008118c",
                "incr": "size",
                "puVar1": "heap_pointer",
                "pcVar2": "allocated_memory",
                "PTR_heap_000811a0": "heap_start",
                "PTR__ebss_000811a4": "end_of_bss"
            },
            "code": "caddr_t allocate_memory_0008118c(int size)\n{\n  undefined *heap_pointer;\n  caddr_t allocated_memory;\n  \n  heap_pointer = PTR_heap_000811a0;\n  if (*(int *)PTR_heap_000811a0 == 0) {\n    *(undefined **)PTR_heap_000811a0 = PTR__ebss_000811a4;\n  }\n  allocated_memory = *(caddr_t *)heap_pointer;\n  *(caddr_t *)heap_pointer = allocated_memory + size;\n  return allocated_memory;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "find_string_length_00082a50",
                "__s": "string",
                "sVar1": "offset",
                "puVar2": "word_ptr",
                "uVar3": "word",
                "bVar4": "is_last_byte_zero"
            },
            "code": "size_t find_string_length_00082a50(char* string) {\n  size_t length = 0;\n  uint32_t* word_ptr = (uint32_t*)((uint32_t)string & 0xfffffffc);\n  size_t offset = -((uint32_t)string & 3);\n  uint32_t word = *word_ptr;\n  if (((uint32_t)string & 3) != 0) {\n    word = word | 0xffffffffU >> ((offset + 4 & 0x1f) << 3);\n  }\n  while (word_ptr++, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    offset += 4;\n    word = *word_ptr;\n  }\n  bool is_last_byte_zero = (word & 0xff) == 0;\n  if (!is_last_byte_zero) {\n    offset++;\n    is_last_byte_zero = (word & 0xff00) == 0;\n  }\n  if (!is_last_byte_zero) {\n    offset++;\n    is_last_byte_zero = (word & 0xff0000) == 0;\n  }\n  if (!is_last_byte_zero) {\n    offset++;\n  }\n  return offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "_vfiprintf_r",
                "String"
            ],
            "imported": false,
            "current_name": "find_string_length_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_parameter_value_0008106e",
                "param_1": "base_address",
                "param_2": "parameter_value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + 0x28)"
            },
            "code": "void set_parameter_value_0008106e(int base_address, int parameter_value) {\n  *(int *)(base_address + 0x28) = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_parameter_value_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "initialize_file_000811c2",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "pointer",
                "dir_UNUSED": "directory"
            },
            "code": "int initialize_file_000811c2(int file_descriptor, int pointer, int directory) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "initialize_file_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "__thiscall Print::FUN_000816e0": "printBuffer",
                "this": "printInstance",
                "buffer": "buffer",
                "size": "bufferSize",
                "pPVar1": "currentInstance",
                "sVar2": "bytesPrinted",
                "FUN_000816e0": "printBuffer_000816e0"
            },
            "code": "size_t Print::printBuffer_000816e0(Print *printInstance, uint8_t *buffer, size_t bufferSize) {\n    Print *currentInstance = printInstance;\n    size_t bytesPrinted = 0;\n    while ((bytesPrinted != bufferSize && (currentInstance = (Print *)(**printInstance->_vptr_Print)(currentInstance,(uint)buffer[bytesPrinted]), currentInstance != (Print *)0x0))) {\n        bytesPrinted = bytesPrinted + 1;\n    }\n    return bytesPrinted;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "printBuffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handle_UART_interrupt_00080acc",
                "PTR_Serial2_00080ad4": "&Serial2"
            },
            "code": "void handle_UART_interrupt_00080acc(void)\n{\n  UARTClass::IrqHandler(PTR_Serial2_00080ad4);\n  return;\n}",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "zero_out_file_000811c6",
                "file_UNUSED": "file",
                "ptr_UNUSED": "data_buffer",
                "len_UNUSED": "buffer_len"
            },
            "code": "int zero_out_file_000811c6(int file, char *data_buffer, int buffer_len)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "zero_out_file_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "heap_start_address",
                "param_2": "allocation_size",
                "puVar1": "malloc_av",
                "puVar2": "malloc_current_mallinfo",
                "iVar3": "sbrk_r_result",
                "uVar4": "malloc_av_size",
                "iVar5": "gap_size"
            },
            "code": "int allocate_memory_00083d00(void* heap_start_address, int allocation_size) {\n  void* malloc_av = PTR___malloc_av__00083d90;\n  __malloc_lock();\n  uint32_t malloc_av_size = *(uint32_t*)((int)malloc_av + 8) & 0xfffffffc;\n  int gap_size = ((malloc_av_size - allocation_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < gap_size) {\n    int sbrk_r_result = _sbrk_r(heap_start_address, 0);\n    if (sbrk_r_result == *(int*)((int)malloc_av + 8) + malloc_av_size) {\n      sbrk_r_result = _sbrk_r(heap_start_address, -gap_size);\n      void* malloc_current_mallinfo = PTR___malloc_current_mallinfo_00083d94;\n      if (sbrk_r_result != -1) {\n        int mallinfo_size = *(int*)malloc_current_mallinfo;\n        *(uint32_t*)((int)malloc_av + 4) = malloc_av_size - gap_size | 1;\n        *(int*)malloc_current_mallinfo = mallinfo_size - gap_size;\n        __malloc_unlock(heap_start_address);\n        return 1;\n      }\n      sbrk_r_result = _sbrk_r(heap_start_address, 0);\n      void* malloc_sbrk_base = PTR___malloc_sbrk_base_00083d98;\n      uint32_t new_malloc_av_size = sbrk_r_result - *(int*)((int)malloc_av + 8);\n      if (0xf < (int)new_malloc_av_size) {\n        int sbrk_base = *(int*)malloc_sbrk_base;\n        *(uint32_t*)((int)malloc_av + 4) = new_malloc_av_size | 1;\n        *(int*)malloc_current_mallinfo = sbrk_r_result - sbrk_base;\n      }\n    }\n  }\n  __malloc_unlock(heap_start_address);\n  return 0;\n}",
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_process_00081d68",
                "param_1": "exit_code",
                "param_2": "exit_handler",
                "param_3": "dtor_handler"
            },
            "code": "void register_exit_process_00081d68(int exit_code, void* exit_handler, void* dtor_handler, void* sep_handler)\n{\n  __register_exitproc(exit_code, exit_handler, dtor_handler, sep_handler);\n  return;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_process_00081d68"
        }
    },
    "used_tokens": 126584,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00080ce0",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_00081202",
            "FUN_00081720",
            "FUN_00081d1c",
            "FUN_00083988",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081208",
            "FUN_00081c94",
            "FUN_000810f4",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_0008143c",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_00084440",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00083994",
            "FUN_00081454",
            "FUN_00084600",
            "FUN_00081578",
            "FUN_00084728",
            "FUN_0008116a",
            "FUN_000813e0",
            "FUN_00083c40",
            "FUN_0008116e",
            "FUN_000813e4",
            "FUN_00081cbc",
            "FUN_00080aac",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000811a8",
            "FUN_000818c8",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_000810bc",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00084418",
            "FUN_00080d2e",
            "FUN_20070000",
            "FUN_000811f0",
            "FUN_00081704",
            "FUN_00083c10",
            "FUN_00081bec",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081c6c",
            "FUN_00081034",
            "FUN_000844bc",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00080e5c",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_00081c80",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00083b08",
            "FUN_000814a8",
            "FUN_00081084",
            "FUN_00084750",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_0008014c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00080d24",
            "FUN_000818b8",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081be4",
            "FUN_000815ca",
            "FUN_00081894",
            "FUN_00084248",
            "FUN_000845bc",
            "FUN_00081412",
            "FUN_000838cc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_0008112c",
            "FUN_000803d4",
            "FUN_000845d8",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00081580",
            "FUN_00084298",
            "FUN_00080ac0",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081188",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000813f6",
            "FUN_000816d4",
            "FUN_00081074",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_00080148",
            "FUN_00080ad8",
            "FUN_00084624",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000816e0",
            "FUN_00080acc",
            "FUN_000811c6",
            "FUN_00083d00",
            "FUN_00081d68"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ]
    ],
    "locked_functions": []
}