{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_completed_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 set_completed_flag_000800f4(undefined4 input)\n\n{\n  if ((char)completion_flag == '\\0') {\n    completion_flag._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_completed_flag_000800f4",
                "param_1": "input",
                "completed_7857": "completion_flag"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080148": {
            "entrypoint": "0x00080148",
            "current_name": "send_interrupt_and_return_00080148",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t send_interrupt_and_return_00080148(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  trigger_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_00080148": "send_interrupt_and_return_00080148",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008014c": {
            "entrypoint": "0x0008014c",
            "current_name": "execute_hyper_call_0008014c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint executeHyperCall_0008014c(int ticks)\n\n{\n  uint32_t result;\n  \n  if (isHyperCallDisabled == 0) {\n    result = aflCall(1,ticks,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008014c": "execute_hyper_call_0008014c",
                "noHyperCall": "isHyperCallDisabled",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_modbus_00080164",
            "code": "\n/* DWARF original prototype: void  begin(Modbus * modbus, long baudRate) */\n\nvoid __modbuscall Modbus::initializeModbus_00080164(Modbus *modbus,long baudRate)\n\n{\n  int inputStatus;\n  \n  modbus->port = &serialPort;\n  (**(code **)(serialClass + 0x18))(&Serial);\n  if (1 < modbus->transmitEnablePin) {\n    pinMode((pinNumber)modbus->transmitEnablePin,1);\n    digitalWrite((pinNumber)modbus->transmitEnablePin,0);\n  }\n  do {\n    inputStatus = (**(code **)(*(int *)modbus->port + 0xc))();\n  } while (-1 < inputStatus);\n  modbus->bufferSize = '\\0';\n  modbus->lastReceived = '\\0';\n  modbus->errorCount = 0;\n  modbus->outputCount = 0;\n  modbus->inputCount = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "modbus",
                "u32speed": "baudRate",
                "iVar1": "inputStatus",
                "Serial.super_HardwareSerial": "serialPort",
                "Serial._0_4_": "serialClass",
                "uint": "pinNumber",
                "u8txenpin": "transmitEnablePin",
                "u8BufferSize": "bufferSize",
                "u8lastRec": "lastReceived",
                "u16errCnt": "errorCount",
                "u16OutCnt": "outputCount",
                "u16InCnt": "inputCount",
                "FUN_00080164": "initialize_modbus_00080164"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "get_rx_buffer_000801b0",
            "code": "\n/* DWARF original prototype: int8_t  getRxBuffer_000801b0(Modbus * modbusObj) */\n\nint8_t __modbusObjcall Modbus::getRxBuffer_000801b0(Modbus *modbusObj)\n\n{\n  bool isBufferFull;\n  uchar receivedByte;\n  uint8_t bufferSize;\n  int readResult;\n  byte currentBufferSize;\n  \n  if (1 < modbusObj->u8txenpin) {\n    digitalWrite((uint)modbusObj->u8txenpin,0);\n  }\n  isBufferFull = false;\n  modbusObj->u8BufferSize = '\\0';\n  if (modbusObj->u8serno < 4) {\n    while (readResult = (**(code **)(*(int *)modbusObj->port + 8))(), readResult != 0) {\n      currentBufferSize = modbusObj->u8BufferSize;\n      receivedByte = (**(code **)(*(int *)modbusObj->port + 0xc))();\n      bufferSize = modbusObj->u8BufferSize;\n      modbusObj->au8Buffer[currentBufferSize] = receivedByte;\n      currentBufferSize = bufferSize + 1;\n      modbusObj->u8BufferSize = currentBufferSize;\n      if (0x3f < currentBufferSize) {\n        isBufferFull = true;\n      }\n    }\n  }\n  modbusObj->u16InCnt = modbusObj->u16InCnt + 1;\n  if (isBufferFull) {\n    bufferSize = 0xfd;\n    modbusObj->u16errCnt = modbusObj->u16errCnt + 1;\n  }\n  else {\n    bufferSize = modbusObj->u8BufferSize;\n  }\n  return bufferSize;\n}\n\n",
            "renaming": {
                "this": "modbusObj",
                "bVar1": "isBufferFull",
                "uVar2": "receivedByte",
                "uVar3": "bufferSize",
                "iVar4": "readResult",
                "bVar5": "currentBufferSize",
                "FUN_000801b0": "get_rx_buffer_000801b0"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_crc_0008021c",
            "code": "\n/* DWARF original prototype: uint16_t  calcCRC(Modbus * modbusInstance, uint8_t bufferLength) */\n\nuint16_t __modbusInstancecall Modbus::calculateCRC_0008021c(Modbus *modbusInstance,uint8_t bufferLength)\n\n{\n  Modbus *currentModbus;\n  uint crc;\n  char bitCount;\n  uint bitValue;\n  uint unusedVariable;\n  \n  crc = 0xffff;\n  for (currentModbus = modbusInstance; ((int)currentModbus - (int)modbusInstance & 0xffU) < (uint)bufferLength;\n      currentModbus = (Modbus *)((int)&currentModbus->port + 1)) {\n    crc = crc ^ currentModbus->au8Buffer[0];\n    bitCount = '\\b';\n    do {\n      bitValue = crc & 1;\n      crc = crc >> 1;\n      if (bitValue != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (ushort)(crc << 8) | (ushort)(crc >> 8);\n}\n\n",
            "renaming": {
                "this": "modbusInstance",
                "u8length": "bufferLength",
                "pMVar1": "currentModbus",
                "uVar2": "crc",
                "cVar3": "bitCount",
                "uVar4": "bitValue",
                "flag": "unusedVariable",
                "FUN_0008021c": "calculate_crc_0008021c"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "send_tx_buffer_00080258",
            "code": "\n/* DWARF original prototype: void  sendTxBuffer_00080258(ModbusObj * this) */\n\nvoid __thiscall ModbusObj::sendTxBuffer_00080258(ModbusObj *this)\n\n{\n  bufferLength bufferSize;\n  crcValue calculatedCRC;\n  crcValue crc;\n  timeStamp currentTime;\n  status returnValue;\n  \n  bufferSize = this->u8BufferSize;\n  calculatedCRC = calcCRC(this,bufferSize);\n  this->au8Buffer[bufferSize] = (uchar)(calculatedCRC >> 8);\n  this->au8Buffer[bufferSize + 1 & 0xff] = (uchar)calculatedCRC;\n  this->u8BufferSize = bufferSize + 2;\n  if (1 < this->u8txenpin) {\n    digitalWrite((ustatus)this->u8txenpin,1);\n  }\n  if (this->u8serno < 4) {\n    (**(code **)(*(status *)this->port + 4))(this->port,this->au8Buffer,this->u8BufferSize);\n  }\n  if (1 < this->u8txenpin) {\n    digitalWrite((ustatus)this->u8txenpin,0);\n  }\n  if (this->u8serno < 4) {\n    do {\n      returnValue = (**(code **)(*(status *)this->port + 0xc))();\n    } while (-1 < returnValue);\n  }\n  this->u8BufferSize = '\\0';\n  currentTime = millis();\n  this->u32timeOut = currentTime + this->u16timeOut;\n  this->u16OutCnt = this->u16OutCnt + 1;\n  return;\n}\n\n",
            "renaming": {
                "Modbus": "ModbusObj",
                "byte": "bufferLength",
                "uint16_t": "crcValue",
                "uint32_t": "timeStamp",
                "int": "status",
                "u8length": "bufferSize",
                "uVar1": "calculatedCRC",
                "u16crc": "crc",
                "uVar2": "currentTime",
                "iVar3": "returnValue",
                "FUN_00080258": "send_tx_buffer_00080258"
            },
            "calling": [
                "query"
            ],
            "called": [
                "millis",
                "digitalWrite",
                "calcCRC"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_modbus_telegram_000802da",
            "code": "\n/* DWARF original prototype: int8_t  query(ModbusDevice * modbusDevice, telegram telegram) */\n\nint8_t __modbusDevicecall ModbusDevice::processModbusTelegram_000802da(ModbusDevice *modbusDevice,telegram telegram)\n\n{\n  uchar tempVar1;\n  uint regAddress;\n  uint8_t numBytes;\n  byte byteVariable;\n  ushort regData;\n  ushort *ptrVar4;\n  uint8_t tempVar5;\n  ushort tempVar6;\n  ushort *ptrRegData;\n  uint tempVar7;\n  ushort *ptrVar8;\n  uchar lowerRegAddress;\n  uchar upperRegAddress;\n  uchar tempVar2;\n  \n  lowerRegAddress = (uchar)regAddress;\n  upperRegAddress = (uchar)(regAddress >> 8);\n  tempVar7 = (uint)regData;\n  if (modbusDevice->u8id != '\\0') {\n    return -2;\n  }\n  if (modbusDevice->u8state != '\\0') {\n    return -1;\n  }\n  if (0xf6 < ((regAddress & 0xff) - 1 & 0xff)) {\n    return -3;\n  }\n  modbusDevice->au8Buffer[0] = lowerRegAddress;\n  modbusDevice->au8Buffer[1] = upperRegAddress;\n  modbusDevice->au16regs = ptrRegData;\n  modbusDevice->au8Buffer[2] = (uchar)(regAddress >> 0x18);\n  modbusDevice->au8Buffer[3] = (uchar)(regAddress >> 0x10);\n  tempVar1 = (uchar)regData;\n  tempVar2 = (uchar)(regData >> 8);\n  switch(upperRegAddress) {\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n    modbusDevice->au8Buffer[4] = tempVar2;\n    break;\n  case '\\x05':\n    tempVar6 = *ptrRegData;\n    if (tempVar6 != 0) {\n      tempVar6 = 1;\n    }\n    modbusDevice->au8Buffer[4] = -(char)tempVar6;\n    tempVar7 = 0;\n    break;\n  case '\\x06':\n    modbusDevice->au8Buffer[4] = (uchar)(*ptrRegData >> 8);\n    tempVar7 = (uint)*ptrRegData;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case '\\x0f':\n    byteVariable = (byte)(regData >> 3) & 0xfe;\n    if ((regData & 0xf) != 0) {\n      byteVariable = byteVariable + 1;\n    }\n    modbusDevice->au8Buffer[5] = tempVar1;\n    modbusDevice->au8Buffer[4] = tempVar2;\n    modbusDevice->au8Buffer[6] = byteVariable;\n    tempVar5 = '\\a';\n    goto LAB_0008034a;\n  case '\\x10':\n    modbusDevice->au8Buffer[4] = tempVar2;\n    modbusDevice->au8Buffer[5] = tempVar1;\n    ptrVar4 = ptrRegData + -1;\n    modbusDevice->au8Buffer[6] = tempVar1 * '\\x02';\n    modbusDevice->u8BufferSize = '\\a';\n    ptrVar8 = ptrVar4 + tempVar7;\n    while (ptrVar4 != ptrVar8) {\n      byteVariable = modbusDevice->u8BufferSize;\n      modbusDevice->au8Buffer[byteVariable] = (uchar)(ptrVar4[1] >> 8);\n      tempVar7 = byteVariable + 1 & 0xff;\n      modbusDevice->u8BufferSize = (uint8_t)tempVar7;\n      ptrVar4 = ptrVar4 + 1;\n      modbusDevice->au8Buffer[tempVar7] = (uchar)*ptrVar4;\n      modbusDevice->u8BufferSize = byteVariable + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  modbusDevice->au8Buffer[5] = (uchar)tempVar7;\n  tempVar5 = '\\x06';\nLAB_0008034a:\n  modbusDevice->u8BufferSize = tempVar5;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(modbusDevice);\n  modbusDevice->u8state = '\\x01';\n  return '\\0';\n}\n\n",
            "renaming": {
                "Modbus": "ModbusDevice",
                "this": "modbusDevice",
                "modbus_t": "telegram",
                "uVar1": "tempVar1",
                "in_r1": "regAddress",
                "u8bytesno": "numBytes",
                "bVar3": "byteVariable",
                "in_r2": "regData",
                "puVar4": "ptrVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "in_r3": "ptrRegData",
                "uVar7": "tempVar7",
                "puVar8": "ptrVar8",
                "local_1c": "lowerRegAddress",
                "local_1b": "upperRegAddress",
                "uVar2": "tempVar2",
                "FUN_000802da": "process_modbus_telegram_000802da"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "validate_answer_000803d4",
            "code": "\n/* DWARF orindexgindexnal prototype: uindexnt8_t  valindexdateAnswer(modbusInstance * modbus) */\n\nuindexnt8_t __modbuscall modbusInstance::validateAnswer_000803d4(modbusInstance *modbus)\n\n{\n  uindexnt8_t index;\n  indexnt comparisonIndex;\n  \n  indexf ((indexnt)((uindexnt)modbus->buffer[1] << 0x18) < 0) {\n    modbus->errorCount = modbus->errorCount + 1;\n    return 0xfb;\n  }\n  comparisonIndex = 0;\n  do {\n    indexf (\"\\x01\\x02\\x03\\x04\\x05\\x06\\x0f\\x10\"[comparisonIndex] == modbus->buffer[1]) {\n      return '\\0';\n    }\n    comparisonIndex = comparisonIndex + 1;\n  } whindexle (comparisonIndex != 8);\n  modbus->errorCount = modbus->errorCount + 1;\n  return '\\x01';\n}\n\n",
            "renaming": {
                "FUN_000803d4": "validate_answer_000803d4",
                "Modbus": "modbusInstance",
                "this": "modbus",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount",
                "i": "index",
                "iVar1": "comparisonIndex"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "extract_registers_from_buffer_00080410",
            "code": "\n/* DWARF original prototype: void  get_FC3(Modbus * modbusObject) */\n\nvoid __modbusObjectcall Modbus::extractRegistersFromBuffer_00080410(Modbus *modbusObject)\n\n{\n  uint16_t registerValue;\n  uint index;\n  byte counter;\n  uint byteIndex;\n  uint16_t *registerArray;\n  \n  counter = 0;\n  while( true ) {\n    byteIndex = (uint)counter;\n    counter = counter + 1;\n    index = byteIndex * 2 + 3 & 0xff;\n    if (modbusObject->au8Buffer[2] >> 1 <= byteIndex) break;\n    registerArray = modbusObject->au16regs;\n    registerValue = makeWord(modbusObject->au8Buffer[index],modbusObject->au8Buffer[index + 1]);\n    registerArray[byteIndex] = registerValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "modbusObject",
                "uVar1": "registerValue",
                "uVar2": "index",
                "bVar3": "counter",
                "uVar4": "byteIndex",
                "puVar5": "registerArray",
                "FUN_00080410": "extract_registers_from_buffer_00080410"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "poll_modbus_0008043e",
            "code": "\n/* DWARF original prototype: int8_t  poll(Modbus * modbus) */\n\nint __modbuscall Modbus::pollModbus_0008043e(Modbus *modbus,pollfd *pollFds,nfds_t numFds,int timeout)\n\n{\n  byte serialByte;\n  uint8_t validationResult;\n  uint8_t exception;\n  uint32_t currentMillis;\n  uint8_t currentByte;\n  uint unaff_r6;\n  \n  if (modbus->serialNumber < 4) {\n    serialByte = (**(code **)(*(int *)modbus->modbusPort + 8))();\n    unaff_r6 = (uint)serialByte;\n  }\n  currentMillis = millis();\n  if (modbus->timeoutValue < currentMillis) {\n    modbus->lastError = 0xff;\n    modbus->currentState = '\\0';\n    modbus->errorCount = modbus->errorCount + 1;\n  }\n  else if (7 < unaff_r6) {\n    readBuffer(modbus);\n    validationResult = checkResponse(modbus);\n    if (validationResult == '\\0') {\n      if (modbus->responseBuffer[1] - 3 < 2) {\n        process_FC3(modbus);\n      }\n      modbus->currentState = '\\0';\n      validationResult = modbus->u8BufferSize;\n    }\n    else {\n      modbus->currentState = '\\0';\n    }\n    goto LAB_000804a2;\n  }\n  validationResult = '\\0';\nLAB_000804a2:\n  return (int)(char)validationResult;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "poll_modbus_0008043e",
                "__fds": "pollFds",
                "__nfds": "numFds",
                "__timeout": "timeout",
                "bVar1": "serialByte",
                "uVar2": "validationResult",
                "u8exception": "exception",
                "uVar3": "currentMillis",
                "u8current": "currentByte",
                "this": "modbus",
                "u8serno": "serialNumber",
                "port": "modbusPort",
                "u32timeOut": "timeoutValue",
                "u8lastError": "lastError",
                "u8state": "currentState",
                "u16errCnt": "errorCount",
                "getRxBuffer": "readBuffer",
                "validateAnswer": "checkResponse",
                "au8Buffer": "responseBuffer",
                "get_FC3": "process_FC3"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "getRxBuffer",
                "get_FC3",
                "validateAnswer",
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_modbus_000804a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeModbus_000804a8(void)\n\n{\n  uint32_t currentTime;\n  \n  pinMode(1,0);\n  pinMode(6,1);\n  pinMode(0,1);\n  pinMode(1,1);\n  digitalWrite(0,0);\n  digitalWrite(1,0);\n  modbusTelegram[1].u16RegAdd = 0x13;\n  modbusTelegram[1].u16CoilsNo = 10;\n  modbusTelegram[1].au16reg = modbusData + 0x13;\n  modbusTelegram[0].u8fct = '\\x03';\n  modbusTelegram[2].u8fct = '\\x03';\n  modbusTelegram[2].u16RegAdd = 0x14;\n  modbusTelegram[3].u16CoilsNo = 3;\n  modbusTelegram[0].u16CoilsNo = 0x10;\n  modbusTelegram[0].au16reg = modbusData;\n  modbusTelegram[1].u8fct = '\\x10';\n  modbusTelegram[2].u16CoilsNo = 0xc;\n  modbusTelegram[3].u8fct = '\\x10';\n  modbusTelegram[4].u16CoilsNo = 8;\n  modbusTelegram[3].u16RegAdd = 0x1c;\n  modbusTelegram[3].au16reg = modbusData + 0x1c;\n  modbusTelegram[4].u8id = '\\x02';\n  modbusTelegram[4].u8fct = '\\x02';\n  modbusTelegram[4].au16reg = data8024;\n  modbusTelegram[5].u8id = '\\x02';\n  modbusTelegram[0].u8id = '\\x01';\n  modbusTelegram[1].u8id = '\\x01';\n  modbusTelegram[2].u8id = '\\x01';\n  modbusTelegram[3].u8id = '\\x01';\n  modbusTelegram[5].u16RegAdd = 1;\n  modbusTelegram[5].u16CoilsNo = 1;\n  modbusTelegram[0].u16RegAdd = 0;\n  modbusTelegram[2].au16reg = modbusData + 0x14;\n  modbusTelegram[4].u16RegAdd = 0;\n  modbusTelegram[5].u8fct = '\\x05';\n  modbusTelegram[5].au16reg = data8024 + 1;\n  Modbus::begin(&modbusMaster,0x4b00);\n  modbusMaster.u16timeOut = 2000;\n  waitTime = millis();\n  currentTime = millis();\n  pid1Time = currentTime + 1000;\n  currentTime = millis();\n  dutyHigh1 = currentTime + 1000;\n  currentTime = millis();\n  dutyLow1 = currentTime + 1000;\n  currentTime = millis();\n  clock = currentTime + 1000;\n  state = '\\0';\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_modbus_000804a8",
                "uVar1": "currentTime",
                "u32wait": "waitTime",
                "tiempopid1": "pid1Time",
                "dutyalto1": "dutyHigh1",
                "dutybajo1": "dutyLow1",
                "reloj": "clock",
                "u8state": "state",
                "au16data": "modbusData",
                "master": "modbusMaster",
                "telegram": "modbusTelegram"
            },
            "calling": [
                "main"
            ],
            "called": [
                "pinMode",
                "millis",
                "startForkserver",
                "digitalWrite",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_modbus_data_000805d0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processModbusData_000805d0(void)\n\n{\n  modbus_t currentTelegram;\n  modbus_t telegramForState1;\n  modbus_t telegramForState5;\n  modbus_t telegramForState9;\n  uint32_t currentTime;\n  undefined4 tempVar;\n  float temperatureDifference;\n  float proportionalTerm;\n  float derivativeTerm;\n  int comparisonResult;\n  pollfd *pollingFileDescriptors;\n  nfds_t numberOfFileDescriptors;\n  int *pointerToData;\n  uint currentState;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  float *pointerToEP1;\n  undefined4 parameter3;\n  ulong *pointerToReloj;\n  float *pointerToKDP1;\n  \n  currentState = (uint)previousState;\n  switch(currentState) {\n  case 0:\n    currentTime = millis();\n    if (previousWaitTime < currentTime) goto LAB_000806ca;\n    break;\n  case 1:\n    Modbus::poll(&master,pollingFileDescriptors,numberOfFileDescriptors,currentState);\n    if (master.previousState == '\\0') {\n      currentTelegram._4_4_ = parameter2;\n      currentTelegram.u8id = (char)parameter1;\n      currentTelegram.u8fct = (char)((uint)parameter1 >> 8);\n      currentTelegram.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      currentTelegram.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,currentTelegram);\n      previousState = previousState + '\\x01';\n      previousWaitTime = millis();\n      temperatureZ1 = (int)dataArray[1];\n      temperatureZ2 = (int)dataArray[2];\n      gainPA1 = (float)__floatunsisf(dataArray[6]);\n      gainIA1 = (float)__floatsisf(dataArray[7] / 10);\n      gainDA1 = (float)__floatunsisf(dataArray[8]);\n      dutyCycle2 = (int)dataArray[12];\n      dutyCycle1 = (int)dataArray[9];\n      minutes = (int)dataArray[14];\n      seconds = (int)dataArray[15];\n    }\n    break;\n  case 2:\n  case 4:\n  case 6:\n  case 8:\n    Modbus::poll(&master,pollingFileDescriptors,numberOfFileDescriptors,currentState);\n    if (master.previousState == '\\0') {\n      previousState = previousState + '\\x01';\n      previousWaitTime = millis();\n    }\n    break;\n  case 3:\n    Modbus::poll(&master,pollingFileDescriptors,numberOfFileDescriptors,currentState);\n    if (master.previousState == '\\0') {\n      telegramForState1._4_4_ = parameter2;\n      telegramForState1.u8id = (char)parameter1;\n      telegramForState1.u8fct = (char)((uint)parameter1 >> 8);\n      telegramForState1.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      telegramForState1.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,telegramForState1);\n      previousState = previousState + '\\x01';\n      previousWaitTime = millis();\n      waitingTime = (int)dataArray[30];\n      state = (int)dataArray[29];\n    }\n    break;\n  case 5:\n    Modbus::poll(&master,pollingFileDescriptors,numberOfFileDescriptors,currentState);\n    if (master.previousState == '\\0') {\nLAB_000806c4:\n      telegramForState5._4_4_ = parameter2;\n      telegramForState5.u8id = (char)parameter1;\n      telegramForState5.u8fct = (char)((uint)parameter1 >> 8);\n      telegramForState5.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      telegramForState5.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,telegramForState5);\n      goto LAB_000806ca;\n    }\n    break;\n  case 7:\n    Modbus::poll(&master,pollingFileDescriptors,numberOfFileDescriptors,currentState);\n    if ((endCycle == 1) && (master.previousState == '\\0')) {\n      dataArray[29] = 0;\n      endCycle = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    previousState = previousState + '\\x01';\n    break;\n  case 9:\n    Modbus::poll(&master,pollingFileDescriptors,numberOfFileDescriptors,currentState);\n    if (master.previousState == '\\0') {\n      telegramForState9._4_4_ = parameter2;\n      telegramForState9.u8id = (char)parameter1;\n      telegramForState9.u8fct = (char)((uint)parameter1 >> 8);\n      telegramForState9.u16RegAdd = (short)((uint)parameter1 >> 0x10);\n      telegramForState9.au16reg = (uint16_t *)parameter3;\n      Modbus::query(&master,telegramForState9);\n      previousWaitTime = millis();\n    }\n    previousState = '\\0';\n  }\n  modifiedMinutes = minutes - Mmres;\n  if (modifiedMinutes < 0) {\n    modifiedMinutes = modifiedMinutes + 0x3c;\n  }\n  modifiedSeconds = seconds - Ssres;\n  if (modifiedSeconds < 0) {\n    modifiedMinutes = modifiedMinutes + -1;\n    modifiedSeconds = modifiedSeconds + 0x3c;\n  }\n  dataArray[27] = (ushort)modifiedMinutes;\n  dataArray[28] = (ushort)modifiedSeconds;\n  if ((modifiedMinutes == 0) && (modifiedSeconds == 0)) {\n    endCycle = 1;\n    Mmres = modifiedSeconds;\n    Ssres = modifiedSeconds;\n  }\n  if (previousMinutes == minutes) {\n    previousSeconds = 1 - seconds;\n    if (1 < (uint)seconds) {\n      previousSeconds = 0;\n    }\n    if (previousSeconds != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    previousSeconds = seconds;\n    Mmres = 0;\n    Ssres = 0;\n    ironStandby = 0;\n    previousMinutes = minutes;\n  }\n  if (state == 0) {\n    Mmres = state;\n    Ssres = state;\n    pointerToData = &ironStandby;\nLAB_000808f2:\n    *pointerToData = Ssres;\n  }\n  else {\n    if (state != 1) goto LAB_000808f4;\n    if ((ironStandby < waitingTime) && (currentTime = millis(), clock < currentTime)) {\n      ironStandby = ironStandby + 1;\n      pointerToReloj = &clock;\n      currentTime = millis();\n      *pointerToReloj = currentTime + 1000;\n    }\n    if (ironStandby < waitingTime) goto LAB_000808f4;\n    ironStandby = waitingTime + 1;\n    if (Mmres < minutes) {\n      currentTime = millis();\n      if (clock < currentTime) {\n        Ssres = Ssres + 1;\n        currentTime = millis();\n        clock = currentTime + 1000;\n      }\n    }\n    else {\n      if (Mmres != minutes) goto LAB_000808f4;\n      if (seconds < Ssres) {\n        pointerToData = &Mmres;\n        Ssres = 0;\n        goto LAB_000808f2;\n      }\n      currentTime = millis();\n      if (clock < currentTime) {\n        Ssres = Ssres + 1;\n        currentTime = millis();\n        clock = currentTime + 1000;\n      }\n    }\n    if (0x3b < Ssres) {\n      Ssres = 0;\n      Mmres = Mmres + 1;\n    }\n  }\nLAB_000808f4:\n  currentTime = millis();\n  if (pid1Time < currentTime) {\n    tempVar = __floatsisf(temperatureZ1);\n    temperatureDifference = (float)__aeabi_fsub(tempVar,temperatura1);\n    pointerToEP1 = &ep1;\n    e1 = temperatureDifference;\n    derivativeTerm = ep1;\n    tempVar = __addsf3(temperatureDifference,ep1);\n    tempVar = __aeabi_fmul(tempVar,gainIA1);\n    proportionalTerm = (float)__addsf3(tempVar,kip1);\n    gainIA1 = proportionalTerm;\n    tempVar = __aeabi_fsub(temperatureDifference,derivativeTerm);\n    tempVar = __aeabi_fmul(tempVar,gainDA1);\n    pointerToKDP1 = &kdp1;\n    derivativeTerm = (float)__aeabi_fsub(tempVar,kdp1);\n    gainDA1 = derivativeTerm;\n    tempVar = __aeabi_fmul(temperatureDifference,gainPA1);\n    tempVar = __addsf3(tempVar,proportionalTerm);\n    __addsf3(tempVar,derivativeTerm);\n    pid1 = __aeabi_f2iz();\n    limitedOutput = (float)__floatsisf();\n    *pointerToEP1 = temperatureDifference;\n    increment = 0;\n    kip1 = proportionalTerm;\n    *pointerToKDP1 = derivativeTerm;\n    currentTime = millis();\n    pid1Time = currentTime + dutyCycle1;\n  }\n  derivativeTerm = (float)__floatsisf(dutyCycle1);\n  comparisonResult = __aeabi_fcmpge(limitedOutput,derivativeTerm);\n  if (comparisonResult != 0) {\n    limitedOutput = derivativeTerm;\n  }\n  comparisonResult = __aeabi_fcmple(limitedOutput,0);\n  if (comparisonResult != 0) {\n    limitedOutput = 0.0;\n  }\n  dataArray[21] = __fixunssfsi(limitedOutput);\n  increment = increment + 1;\n  input1 = data8024[0] & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_modbus_data_000805d0",
                "telegram": "currentTelegram",
                "telegram_00": "telegramForState1",
                "telegram_01": "telegramForState5",
                "telegram_02": "telegramForState9",
                "uVar1": "currentTime",
                "uVar2": "tempVar",
                "fVar3": "temperatureDifference",
                "fVar4": "proportionalTerm",
                "fVar5": "derivativeTerm",
                "iVar6": "comparisonResult",
                "in_r1": "pollingFileDescriptors",
                "in_r2": "numberOfFileDescriptors",
                "piVar7": "pointerToData",
                "__timeout": "currentState",
                "in_stack_ffffffc8": "parameter1",
                "in_stack_ffffffcc": "parameter2",
                "pfVar8": "pointerToEP1",
                "in_stack_ffffffd0": "parameter3",
                "puVar9": "pointerToReloj",
                "pfVar10": "pointerToKDP1",
                "u32wait": "previousWaitTime",
                "u8state": "previousState",
                "tempe_z1": "temperatureZ1",
                "tempe_z2": "temperatureZ2",
                "kpa1": "gainPA1",
                "kia1": "gainIA1",
                "kda1": "gainDA1",
                "duty2": "dutyCycle2",
                "duty1": "dutyCycle1",
                "minutos": "minutes",
                "segundos": "seconds",
                "tiempo_espera": "waitingTime",
                "estado": "state",
                "terminar_ciclo": "endCycle",
                "mmt": "modifiedMinutes",
                "sst": "modifiedSeconds",
                "au16data": "dataArray",
                "mmres": "Mmres",
                "ssres": "Ssres",
                "minutosp": "previousMinutes",
                "segundosp": "previousSeconds",
                "espera_plancha": "ironStandby",
                "reloj": "clock",
                "incre": "increment",
                "tiempopid1": "pid1Time",
                "YN": "limitedOutput",
                "in1": "input1"
            },
            "calling": [
                "main"
            ],
            "called": [
                "__floatunsisf",
                "__aeabi_fmul",
                "__aeabi_fcmple",
                "__addsf3",
                "__floatsisf",
                "query",
                "__aeabi_fsub",
                "__aeabi_fcmpge",
                "poll",
                "millis",
                "__fixunssfsi",
                "__aeabi_f2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_master_settings_00080a68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeMasterSettings_00080a68(void)\n\n{\n  String::String(&receivedString,\"\");\n  registerCleanupFunction(&receivedString,0x815ff,&dynamicSharedObjectHandle);\n  masterDeviceId = '\\0';\n  masterSerialNumber = '\\0';\n  masterTransmitEnablePin = '\\x06';\n  masterTimeout = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_master_settings_00080a68",
                "RxString": "receivedString",
                "&RxString": "&receivedString",
                "__aeabi_atexit": "registerCleanupFunction",
                "__dso_handle": "dynamicSharedObjectHandle",
                "master.u8id": "masterDeviceId",
                "master.u8serno": "masterSerialNumber",
                "master.u8txenpin": "masterTransmitEnablePin",
                "master.u16timeOut": "masterTimeout"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aac": {
            "entrypoint": "0x00080aac",
            "current_name": "initialize_uart_irq_handler_00080aac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeUartIRQHandler_00080aac(void)\n\n{\n  UARTClass::IrqHandler(&Serial);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aac": "initialize_uart_irq_handler_00080aac"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ac0": {
            "entrypoint": "0x00080ac0",
            "current_name": "handle_serial_interrupt_00080ac0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerialInterrupt_00080ac0(void)\n\n{\n  handleUARTInterrupt(&Serial1.super_UARTClass);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ac0": "handle_serial_interrupt_00080ac0",
                "UARTClass::IrqHandler": "handleUARTInterrupt"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080acc": {
            "entrypoint": "0x00080acc",
            "current_name": "handle_serial_interrupt_00080acc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerialInterrupt_00080acc(void)\n\n{\n  UARTClass::IrqHandler(serialInstance);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080acc": "handle_serial_interrupt_00080acc",
                "&Serial2.super_UARTClass": "serialInstance"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ad8": {
            "entrypoint": "0x00080ad8",
            "current_name": "handle_serial3_irq_00080ad8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSerial3IRQ_00080ad8(void)\n\n{\n  UARTClass::IrqHandler(&serial3.super_UARTClass);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ad8": "handle_serial3_irq_00080ad8",
                "Serial3": "serial3"
            },
            "calling": [],
            "called": [
                "IrqHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nint initializeSystem_00080ae4(EVP_PKEY_CTX *context)\n\n{\n  int returnValue;\n  uint32_t pinNumber;\n  uint32_t nextPinNumber;\n  \n  SystemInit();\n  _DAT_e000e014 = SystemCoreClock / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  pinNumber = 0;\n  do {\n    nextPinNumber = pinNumber + 1;\n    digitalWrite(pinNumber,0);\n    pinNumber = nextPinNumber;\n  } while (nextPinNumber != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(&DAT_400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(&DAT_400e0e00,1,0xc00,0);\n  PIO_Configure(&DAT_400e0e00,1,0x3000,0);\n  PIO_Configure(&DAT_400e1400,2,0x30,0);\n  PIO_Configure(&DAT_400e1000,1,0xc00,0);\n  PIO_Configure(&DAT_400e0e00,1,3,0);\n  PIO_Configure(&DAT_400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,SystemCoreClock,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  returnValue = adc_disable_all_channel(0x400c0000);\n  analogOutputInit();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "ctx": "context",
                "iVar1": "returnValue",
                "ulPin": "pinNumber",
                "uVar2": "nextPinNumber"
            },
            "calling": [
                "main"
            ],
            "called": [
                "PIO_Configure",
                "SystemInit",
                "adc_configure_trigger",
                "adc_disable_interrupt",
                "analogOutputInit",
                "adc_configure_timing",
                "digitalWrite",
                "__libc_init_array",
                "pmc_enable_periph_clk",
                "adc_disable_all_channel",
                "adc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_serial_communication_00080c0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_00080c0c(void)\n\n{\n  RingBuffer::RingBuffer(&receiveBuffer1);\n  RingBuffer::RingBuffer(&transmitBuffer1);\n  UARTClass::UARTClass(&serialPort1,(UartPeripheral *)0x400e0800,UARTInterrupt,8,&receiveBuffer1,&transmitBuffer1);\n  RingBuffer::RingBuffer(&receiveBuffer2);\n  RingBuffer::RingBuffer(&receiveBuffer3);\n  RingBuffer::RingBuffer(&receiveBuffer4);\n  RingBuffer::RingBuffer(&transmitBuffer2);\n  RingBuffer::RingBuffer(&transmitBuffer3);\n  RingBuffer::RingBuffer(&transmitBuffer4);\n  USARTClass::USARTClass(&serialPort2,(UsartPeripheral *)0x40098000,USART0Interrupt,0x11,&receiveBuffer2,&transmitBuffer2);\n  USARTClass::USARTClass(&serialPort3,(UsartPeripheral *)0x4009c000,USART1Interrupt,0x12,&receiveBuffer3,&transmitBuffer3);\n  USARTClass::USARTClass(&serialPort4,(UsartPeripheral *)0x400a4000,USART3Interrupt,0x14,&receiveBuffer4,&transmitBuffer4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_serial_communication_00080c0c",
                "rx_buffer1": "receiveBuffer1",
                "tx_buffer1": "transmitBuffer1",
                "Serial": "serialPort1",
                "rx_buffer2": "receiveBuffer2",
                "rx_buffer3": "receiveBuffer3",
                "rx_buffer4": "receiveBuffer4",
                "tx_buffer2": "transmitBuffer2",
                "tx_buffer3": "transmitBuffer3",
                "tx_buffer4": "transmitBuffer4",
                "Serial1": "serialPort2",
                "Serial2": "serialPort3",
                "Serial3": "serialPort4",
                "Uart": "UartPeripheral",
                "Usart": "UsartPeripheral",
                "UART_IRQn": "UARTInterrupt",
                "USART0_IRQn": "USART0Interrupt",
                "USART1_IRQn": "USART1Interrupt",
                "USART3_IRQn": "USART3Interrupt"
            },
            "calling": [],
            "called": [
                "UARTClass",
                "RingBuffer",
                "USARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_handle_serial_event_00080ce0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndHandleSerialEvent_00080ce0(void)\n\n{\n  int numAvailable;\n  \n  numAvailable = UARTClass::available(&DefaultSerial);\n  if (numAvailable != 0) {\n    serialEvent();\n  }\n  numAvailable = UARTClass::available(&SerialUART1);\n  if (numAvailable != 0) {\n    serialEvent1();\n  }\n  numAvailable = UARTClass::available(&SerialUART2);\n  if (numAvailable != 0) {\n    serialEvent2();\n  }\n  numAvailable = UARTClass::available(&SerialUART3);\n  if (numAvailable != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_handle_serial_event_00080ce0",
                "iVar1": "numAvailable",
                "&Serial": "&DefaultSerial",
                "&Serial1.super_UARTClass": "&SerialUART1",
                "&Serial2.super_UARTClass": "&SerialUART2",
                "&Serial3.super_UARTClass": "&SerialUART3"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent2",
                "serialEvent3",
                "serialEvent1",
                "serialEvent",
                "available"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d24": {
            "entrypoint": "0x00080d24",
            "current_name": "update_data_00080d24",
            "code": "\nvoid updateData_00080d24(int dataPointer,undefined4 newValue,int flag)\n\n{\n  if (flag != 0) {\n    *(undefined4 *)(dataPointer + 100) = newValue;\n    return;\n  }\n  *(undefined4 *)(dataPointer + 0x60) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d24": "update_data_00080d24",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_param_00080d2e",
            "code": "\nvoid updateParam_00080d2e(int ptrToData,undefined4 type,uint newValue)\n\n{\n  uint result;\n  \n  *(uint *)(ptrToData + 0x44) = newValue;\n  switch(type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(ptrToData + 0x70) & *(uint *)(ptrToData + 0x70) & ~newValue;\n    break;\n  case 2:\n    result = *(uint *)(ptrToData + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(ptrToData + 0x70) = result;\nswitchD_00080d34_caseD_6:\n  *(uint *)(ptrToData + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_param_00080d2e",
                "param_1": "ptrToData",
                "param_2": "type",
                "param_3": "newValue",
                "uVar1": "result"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_param_values_00080d54",
            "code": "\nvoid setParamValues_00080d54(undefined4 *paramArray,undefined4 paramValue,uint paramFlag)\n\n{\n  bool isHighBitSet;\n  \n  isHighBitSet = (int)(paramFlag << 0x1f) < 0;\n  paramArray[0x11] = paramValue;\n  if (isHighBitSet) {\n    paramArray[0x19] = paramValue;\n  }\n  if (!isHighBitSet) {\n    paramArray[0x18] = paramValue;\n  }\n  isHighBitSet = (paramFlag & 10) != 0;\n  if (isHighBitSet) {\n    paramArray[8] = paramValue;\n  }\n  if (!isHighBitSet) {\n    paramArray[9] = paramValue;\n  }\n  if (((int)(paramFlag << 0x1e) < 0) || ((int)(paramFlag << 0x1c) < 0)) {\n    paramArray[0x20] = paramValue;\n  }\n  paramArray[5] = paramValue;\n  *paramArray = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_param_values_00080d54",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "param_3": "paramFlag",
                "bVar1": "isHighBitSet"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_param_values_00080d7a",
            "code": "\nvoid set_param_values_00080d7a(undefined4 *param_array,undefined4 new_param_value,int condition_1,int condition_2,int condition_3)\n\n{\n  param_array[0x11] = new_param_value;\n  if (condition_3 == 0) {\n    param_array[0x18] = new_param_value;\n  }\n  else {\n    param_array[0x19] = new_param_value;\n  }\n  if (condition_2 == 0) {\n    param_array[0x15] = new_param_value;\n  }\n  else {\n    param_array[0x14] = new_param_value;\n  }\n  if (condition_1 == 0) {\n    param_array[0xd] = new_param_value;\n  }\n  else {\n    param_array[0xc] = new_param_value;\n  }\n  param_array[4] = new_param_value;\n  *param_array = new_param_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_param_values_00080d7a",
                "param_1": "param_array",
                "param_2": "new_param_value",
                "param_3": "condition_1",
                "param_4": "condition_2",
                "param_5": "condition_3"
            },
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "set_pio_attributes_00080da0",
            "code": "\nundefined4 setPIOAttributes_00080da0(int pioController,int attributeType,undefined4 attributeValue,uint bitmask)\n\n{\n  bool isNegative;\n  \n  switch(attributeType) {\n  case 1:\n  case 2:\n    configurePeripheral(pioController,attributeType,attributeValue);\n    isNegative = (int)(bitmask << 0x1f) < 0;\n    *(undefined4 *)(pioController + 0x44) = attributeValue;\n    if (isNegative) {\n      *(undefined4 *)(pioController + 100) = attributeValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(pioController + 0x60) = attributeValue;\n    }\n    break;\n  case 3:\n    setInput(pioController,attributeValue,bitmask,0x80d55,pioController);\n    break;\n  case 4:\n  case 5:\n    setOutput(pioController,attributeValue,attributeType == 5,(bitmask << 0x1d) >> 0x1f,bitmask & 1,attributeType,attributeValue\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "set_pio_attributes_00080da0",
                "param_1": "pioController",
                "param_2": "attributeType",
                "param_3": "attributeValue",
                "param_4": "bitmask",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "configurePeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "init"
            ],
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint checkBitwiseIntersection_00080e04(int inputPointer,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputPointer + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(inputPointer + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "inputPointer",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bitmask_00080e18",
            "code": "\n\n\nundefined4 check_and_update_bitmask_00080e18(uint value)\n\n{\n  uint mask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      mask = 1 << (value & 0xff);\n      if ((mask & _DAT_400e0618) != mask) {\n        _DAT_400e0610 = mask;\n      }\n    }\n    else {\n      mask = 1 << (value - 0x20 & 0xff);\n      if ((mask & _DAT_400e0708) != mask) {\n        _DAT_400e0700 = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bitmask_00080e18",
                "param_1": "value",
                "uVar1": "mask"
            },
            "calling": [
                "pinMode",
                "init",
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e5c": {
            "entrypoint": "0x00080e5c",
            "current_name": "check_flag_00080e5c",
            "code": "\n\n\nundefined4 check_flag_00080e5c(uint flag)\n\n{\n  uint bit_mask;\n  uint masked_bits;\n  \n  if (flag < 0x2d) {\n    if (flag < 0x20) {\n      bit_mask = 1 << (flag & 0xff);\n      masked_bits = _DAT_400e0618 & bit_mask;\n      if (masked_bits == bit_mask) {\n        _DAT_400e0614 = masked_bits;\n      }\n    }\n    else {\n      bit_mask = 1 << (flag - 0x20 & 0xff);\n      masked_bits = _DAT_400e0708 & bit_mask;\n      if (masked_bits == bit_mask) {\n        _DAT_400e0704 = masked_bits;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e5c": "check_flag_00080e5c",
                "param_1": "flag",
                "uVar1": "bit_mask",
                "uVar2": "masked_bits"
            },
            "calling": [
                "pinMode",
                "end"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_data_00080e9c",
            "code": "\n\n\nvoid initializeData_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  coreClock = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_data_00080e9c",
                "SystemCoreClock": "coreClock"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f24": {
            "entrypoint": "0x00080f24",
            "current_name": "copy_memory_and_initialize_00080f24",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid copyMemoryAndInitialize_00080f24(void)\n\n{\n  int offset;\n  undefined4 *ptr;\n  \n  for (offset = 0; source + offset < destination; offset = offset + 4) {\n    *(undefined4 *)(source + offset) = *(undefined4 *)(sourceEnd + offset);\n  }\n  for (ptr = destination; ptr < destinationEnd; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080f24": "copy_memory_and_initialize_00080f24",
                "iVar1": "offset",
                "puVar2": "ptr",
                "banzai": "source",
                "&completed_7857": "destination",
                "&_etext": "sourceEnd",
                "&_ebss": "destinationEnd"
            },
            "calling": [],
            "called": [
                "banzai",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *output,uint totalSize,int elementSize,int timeValue)\n\n{\n  uint numElements;\n  uint i;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  numElements = totalSize / (uint)(elementSize * 2);\n  if (totalSize == elementSize * 2 * numElements) {\n    numElements = numElements - 1;\n  }\n  i = 0;\n  do {\n    if ((uint)(timeValue * (int)(((ulonglong)totalSize / (ulonglong)((numElements + 1) * 2)) / 1000000)) <=\n        thresholds[i]) {\n      output[1] = (i & 0xf) << 0x10 | (numElements & 0xff) << 8 | output[1];\n      return 0;\n    }\n    i = i + 1;\n  } while (i != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output",
                "param_2": "totalSize",
                "param_3": "elementSize",
                "param_4": "timeValue",
                "local_58": "thresholds",
                "param_1[1]": "output[1]",
                "param_1[0x48]": "output[0x48]",
                "param_1[0x41]": "output[0x41]",
                "param_1[0x45]": "output[0x45]",
                "uVar1": "numElements",
                "uVar2": "i"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_param_with_value_00081034",
            "code": "\nvoid updateParamWithValue_00081034(int baseAddress,uint valueToOr,uint bitToSet)\n\n{\n  *(uint *)(baseAddress + 4) = valueToOr | *(uint *)(baseAddress + 4) | (bitToSet & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_param_with_value_00081034",
                "param_1": "baseAddress",
                "param_2": "valueToOr",
                "param_3": "bitToSet"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_registers_00081042",
            "code": "\nvoid updateRegisters_00081042(int registerAddress,uint fieldValue,uint registerValue,uint bitmask)\n\n{\n  *(uint *)(registerAddress + 4) =\n       registerValue | *(uint *)(registerAddress + 4) | (fieldValue & 0xf) << 0x18 | (bitmask & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_registers_00081042",
                "param_1": "registerAddress",
                "param_2": "fieldValue",
                "param_3": "registerValue",
                "param_4": "bitmask"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_in_memory_0008105c",
            "code": "\nvoid setBitInMemory_0008105c(int memoryAddress,uint bitPosition)\n\n{\n  *(int *)(memoryAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_in_memory_0008105c",
                "param_1": "memoryAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "baseAddress"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081074": {
            "entrypoint": "0x00081074",
            "current_name": "execute_isr_if_present_00081074",
            "code": "\nvoid execute_isr_if_present_00081074(void)\n\n{\n  if (interrupt_service_routine != (code *)0x0) {\n    (*interrupt_service_routine)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081074": "execute_isr_if_present_00081074",
                "gpf_isr": "interrupt_service_routine"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081084": {
            "entrypoint": "0x00081084",
            "current_name": "process_interrupts_00081084",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_00081084(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint leadingZeros;\n  \n  for (interruptStatus = _DAT_400e0e4c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << leadingZeros)) {\n    leadingZeros = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (pioACallbacks[leadingZeros] != (interruptCB)0x0) {\n      (*pioACallbacks[leadingZeros])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081084": "process_interrupts_00081084",
                "isr": "interruptStatus",
                "uVar1": "leadingZeros",
                "callbacksPioA": "pioACallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810bc": {
            "entrypoint": "0x000810bc",
            "current_name": "process_interrupts_000810bc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_000810bc(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint zeroCount;\n  \n  for (interruptStatus = _DAT_400e104c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << zeroCount)) {\n    zeroCount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (pioBCallbacks[zeroCount] != (interruptCB)0x0) {\n      (*pioBCallbacks[zeroCount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810bc": "process_interrupts_000810bc",
                "isr": "interruptStatus",
                "uVar1": "zeroCount",
                "callbacksPioB": "pioBCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810f4": {
            "entrypoint": "0x000810f4",
            "current_name": "process_interrupts_000810f4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid processInterrupts_000810f4(void)\n\n{\n  uint8_t leading_zeros;\n  uint32_t interruptStatus;\n  uint leadingOnesCount;\n  \n  for (interruptStatus = _DAT_400e124c; (uint)LZCOUNT(interruptStatus) < 0x20; interruptStatus = interruptStatus & ~(1 << leadingOnesCount)) {\n    leadingOnesCount = 0x1fU - LZCOUNT(interruptStatus) & 0xff;\n    if (pioInterruptCallbacks[leadingOnesCount] != (interruptCB)0x0) {\n      (*pioInterruptCallbacks[leadingOnesCount])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810f4": "process_interrupts_000810f4",
                "isr": "interruptStatus",
                "uVar1": "leadingOnesCount",
                "callbacksPioC": "pioInterruptCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008112c": {
            "entrypoint": "0x0008112c",
            "current_name": "handle_interrupts_0008112c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_0008112c(void)\n\n{\n  uint8_t trailing_zeros;\n  uint32_t interrupt_status;\n  uint num_zeros;\n  \n  for (interrupt_status = _DAT_400e144c; (uint)LZCOUNT(interrupt_status) < 0x20; interrupt_status = interrupt_status & ~(1 << num_zeros)) {\n    num_zeros = 0x1fU - LZCOUNT(interrupt_status) & 0xff;\n    if (interruptCallbacks[num_zeros] != (interruptCB)0x0) {\n      (*interruptCallbacks[num_zeros])();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008112c": "handle_interrupts_0008112c",
                "leading_zeros": "trailing_zeros",
                "isr": "interrupt_status",
                "uVar1": "num_zeros",
                "callbacksPioD": "interruptCallbacks"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081164": {
            "entrypoint": "0x00081164",
            "current_name": "infinite_loop_00081164",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00081164(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00081164": "infinite_loop_00081164"
            },
            "calling": [
                "__halt"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081166": {
            "entrypoint": "0x00081166",
            "current_name": "infinite_loop_00081166",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_00081166(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00081166": "infinite_loop_00081166"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008116a": {
            "entrypoint": "0x0008116a",
            "current_name": "infinite_loop_0008116a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_0008116a(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0008116a": "infinite_loop_0008116a"
            },
            "calling": [],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008116e": {
            "entrypoint": "0x0008116e",
            "current_name": "reset_tick_and_increment_time_tick_0008116e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetTickAndIncrementTimeTick_0008116e(void)\n\n{\n  int iVar1;\n  \n  iVar1 = __false();\n  if (iVar1 == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008116e": "reset_tick_and_increment_time_tick_0008116e"
            },
            "calling": [],
            "called": [
                "TimeTick_Increment",
                "__false",
                "tickReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_program_00081184",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint initializeProgram_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_program_00081184"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081188": {
            "entrypoint": "0x00081188",
            "current_name": "endless_loop_00081188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid endlessLoop_00081188(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00081188": "endless_loop_00081188"
            },
            "calling": [
                "__halt",
                "SVC_Handler",
                "PendSV_Handler"
            ],
            "called": [
                "__halt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "expand_heap_0008118c",
            "code": "\nvoid * expandHeap_0008118c(intptr_t delta)\n\n{\n  uchar *previousHeap;\n  uchar *previousHeap;\n  \n  if (currentHeap == (uchar *)0x0) {\n    currentHeap = &endOfBss;\n  }\n  previousHeap = currentHeap;\n  currentHeap = currentHeap + delta;\n  return previousHeap;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "expand_heap_0008118c",
                "__delta": "delta",
                "puVar1": "previousHeap",
                "prev_heap": "previousHeap",
                "_sbrk::heap": "currentHeap",
                "_ebss": "endOfBss"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811a8": {
            "entrypoint": "0x000811a8",
            "current_name": "reverse_string_000811a8",
            "code": "\nint reverseString_000811a8(char *inputString,char *outputString)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811a8": "reverse_string_000811a8",
                "__from": "inputString",
                "__to": "outputString"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "check_file_descriptor_000811ae",
            "code": "\nint check_file_descriptor_000811ae(int file_descriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "check_file_descriptor_000811ae",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_device_flag_000811b4",
            "code": "\nint setDeviceFlag_000811b4(int fileDescriptor,stat *fileStat)\n\n{\n  *(undefined4 *)((int)&fileStat->deviceNumber + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_device_flag_000811b4",
                "__fd": "fileDescriptor",
                "__buf": "fileStat",
                "st_dev": "deviceNumber"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_file_descriptor_000811be",
            "code": "\nint checkFileDescriptor_000811be(int fileDescriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_file_descriptor_000811be",
                "__fd": "fileDescriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_file_offset_000811c2",
            "code": "\n__off_t get_file_offset_000811c2(int file_descriptor,__off_t offset_value,int origin)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_file_offset_000811c2",
                "__fd": "file_descriptor",
                "__offset": "offset_value",
                "__whence": "origin"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "process_file_000811c6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint process_file_000811c6(int file_descriptor,char *data_pointer,int data_length)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "process_file_000811c6",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "data_pointer",
                "len_UNUSED": "data_length"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_to_memory_000811cc",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nint copyToMemory_000811cc(int fileDescriptor,char *sourceArray,int length)\n\n{\n  int index;\n  \n  for (index = 0; index < length; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)(byte)sourceArray[index];\n  }\n  return length & ~(length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_to_memory_000811cc",
                "file_UNUSED": "fileDescriptor",
                "ptr": "sourceArray",
                "len": "length",
                "iVar1": "index"
            },
            "calling": [
                "_write_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811f0": {
            "entrypoint": "0x000811f0",
            "current_name": "exit_with_status_000811f0",
            "code": "\nvoid exitWithStatus_000811f0(int status)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000811f0": "exit_with_status_000811f0",
                "__status": "status"
            },
            "calling": [],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081200": {
            "entrypoint": "0x00081200",
            "current_name": "FUNC_00081200",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081200": "FUNC_00081200"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081202": {
            "entrypoint": "0x00081202",
            "current_name": "get_process_id_00081202",
            "code": "\n\n\nprocess_id get_process_id_00081202(void)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081202": "get_process_id_00081202",
                "__pid_t": "process_id"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081208": {
            "entrypoint": "0x00081208",
            "current_name": "get_tick_count_00081208",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTickCount_00081208(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_00081208": "get_tick_count_00081208",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "sendTxBuffer",
                "setup",
                "poll",
                "loop"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008120e": {
            "entrypoint": "0x0008120e",
            "current_name": "FUNC_0008120e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0008120e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120e": "FUNC_0008120e"
            },
            "calling": [
                "init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "configure_pin_00081210",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_00081210(uint32_t pinNumber,uint32_t pinMode)\n\n{\n  undefined4 configValue;\n  byte pinStatusMask;\n  byte pinStatus;\n  Pio_conflict *portConf;\n  \n  if (pinDescription[pinNumber].pinNumberType != PIN_NOT_DEFINED) {\n    if ((pinStatusArray[pinNumber] & 0xf) == 4) {\n      disableADCChannel(0x400c0000,pinDescription[pinNumber].ulADCChannelNumber);\n    }\n    pinStatus = pinStatusArray[pinNumber];\n    pinStatusMask = pinStatus & 0xf;\n    if ((pinStatusMask < 3) && (pinStatus != 0)) {\n      if (pinStatusMask == 2) {\n        if (pinMode == 0) {\n          return;\n        }\n      }\n      else if (pinStatusMask == 1) {\n        if (pinMode == 2) {\n          return;\n        }\n      }\n      else if (pinStatusMask == 3) {\n        if (pinMode == 1) {\n          return;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (pinMode != 1) {\nLAB_0008126c:\n      if (pinMode == 0) {\n        enablePeripheralClock(pinDescription[pinNumber].ulPeripheralId);\n        configurePIO(pinDescription[pinNumber].pPort,3,pinDescription[pinNumber].pinNumber,0);\n        pinStatus = pinStatusArray[pinNumber] & 0xf0 | 2;\n      }\n      else {\n        if (pinMode != 2) {\n          return;\n        }\n        enablePeripheralClock(pinDescription[pinNumber].ulPeripheralId);\n        configurePIO(pinDescription[pinNumber].pPort,3,pinDescription[pinNumber].pinNumber,1);\n        pinStatus = pinStatusArray[pinNumber] & 0xf0 | 1;\n      }\n      pinStatusArray[pinNumber] = pinStatus;\n      return;\n    }\n    portConf = pinDescription[pinNumber].pPort;\n    if (pinStatus >> 4 == 0) {\n      configValue = 4;\n    }\n    else {\n      configValue = 5;\n    }\n    configurePIO(portConf,configValue,pinDescription[pinNumber].pinNumber,\n                  pinDescription[pinNumber].pinNumberConfiguration);\n    pinStatusArray[pinNumber] = pinStatusArray[pinNumber] & 0xf0 | 3;\n    if (portConf->PIO_OSR == 0xffffffff) {\n      disablePeripheralClock(pinDescription[pinNumber].ulPeripheralId);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pinNumber",
                "ulMode": "pinMode",
                "uVar1": "configValue",
                "bVar2": "pinStatusMask",
                "bVar3": "pinStatus",
                "pPVar4": "portConf",
                "g_APinDescription": "pinDescription",
                "PIO_NOT_A_PIN": "PIN_NOT_DEFINED",
                "g_pinStatus": "pinStatusArray",
                "adc_disable_channel": "disableADCChannel",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "PIO_Configure": "configurePIO",
                "pmc_disable_periph_clk": "disablePeripheralClock"
            },
            "calling": [
                "setup",
                "begin",
                "digitalWrite"
            ],
            "called": [
                "PIO_Configure",
                "pmc_disable_periph_clk",
                "adc_disable_channel",
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "configure_pin_00081318",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_00081318(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  int outputStatus;\n  uint32_t pin;\n  Pio_conflict *pinPort;\n  uint32_t adjustedValue;\n  \n  if (g_APinDescription[pinNumber].pinNumberType != PIO_NOT_A_PIN) {\n    adjustedValue = pinValue;\n    if ((g_pinStatus[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1);\n    }\n    g_pinStatus[pinNumber] = g_pinStatus[pinNumber] & 0xf | (byte)(pinValue << 4);\n    pinPort = g_APinDescription[pinNumber].pPort;\n    pin = g_APinDescription[pinNumber].pinNumber;\n    outputStatus = PIO_GetOutputDataStatus(pinPort,pin);\n    if (outputStatus == 0) {\n      PIO_PullUp(pinPort,pin,pinValue);\n      return;\n    }\n    PIO_SetOutput(pinPort,pin,pinValue,0,1,adjustedValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "configure_pin_00081318",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "iVar1": "outputStatus",
                "uVar2": "pin",
                "uVar4": "adjustedValue",
                "pPVar3": "pinPort"
            },
            "calling": [
                "getRxBuffer",
                "sendTxBuffer",
                "setup",
                "init",
                "begin"
            ],
            "called": [
                "pinMode",
                "PIO_SetOutput",
                "PIO_PullUp",
                "PIO_GetOutputDataStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "check_and_call_banzai_00081388",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid checkAndCallBanzai_00081388(void)\n\n{\n  if ((tickCounter != -1) && (tickCounter = tickCounter + -1, tickCounter == 0)) {\n    banzai();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "check_and_call_banzai_00081388",
                "ticks": "tickCounter"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "banzai"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_ring_buffer_000813a8",
            "code": "\n/* DWARF original prototype: RingBuffer *  RingBuffer(RingBuffer * buffer) */\n\nRingBuffer * __buffercall RingBuffer::initializeRingBuffer_000813a8(RingBuffer *buffer)\n\n{\n  initializeBuffer(buffer,0,0x80);\n  buffer->headIndex = 0;\n  buffer->tailIndex = 0;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_ring_buffer_000813a8",
                "this": "buffer",
                "memset": "initializeBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "store_byte_in_ring_buffer_000813c2",
            "code": "\n/* DWARF original prototype: void  store_char(RingBuffer * buffer, uint8_t c) */\n\nvoid __buffercall RingBuffer::store_byte_in_ring_buffer_000813c2(RingBuffer *buffer,uint8_t c)\n\n{\n  int i;\n  uint next_head_index;\n  \n  i = buffer->head_index;\n  next_head_index = i + 1U & 0x7f;\n  if (next_head_index != buffer->tail_index) {\n    buffer->buffer_data[buffer->head_index] = c;\n    buffer->head_index = next_head_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "store_byte_in_ring_buffer_000813c2",
                "this": "buffer",
                "_iHead": "head_index",
                "uVar1": "next_head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer_data"
            },
            "calling": [
                "IrqHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e0": {
            "entrypoint": "0x000813e0",
            "current_name": "is_uart_class_valid_000813e0",
            "code": "\n/* DWARF original name: operator bool\n   DWARF original prototype: bool  operator_bool(UARTClass * uartInstance) */\n\nbool __uartInstancecall UARTClass::isUARTClassValid_000813e0(UARTClass *uartInstance)\n\n{\n  return true;\n}\n\n",
            "renaming": {
                "FUN_000813e0": "is_uart_class_valid_000813e0",
                "this": "uartInstance"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_available_data_size_000813e4",
            "code": "\n/* DWARF original prototype: int  available(UARTClass * uartInstance) */\n\nint __uartInstancecall UARTClass::calculateAvailableDataSize_000813e4(UARTClass *uartInstance)\n\n{\n  return uartInstance->receiveBuffer->headIndex - uartInstance->receiveBuffer->tailIndex & 0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_available_data_size_000813e4",
                "this": "uartInstance",
                "_rx_buffer": "receiveBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813f6": {
            "entrypoint": "0x000813f6",
            "current_name": "peek_000813f6",
            "code": "\n/* DWARF original prototype: int  peek_000813f6(UARTClass * uart) */\n\nint __uartcall UARTClass::peek_000813f6(UARTClass *uart)\n\n{\n  uint result;\n  RingBuffer *ringBuffer;\n  \n  ringBuffer = uart->_rx_buffer;\n  if (ringBuffer->_iHead == ringBuffer->_iTail) {\n    result = 0xffffffff;\n  }\n  else {\n    result = (uint)ringBuffer->_aucBuffer[ringBuffer->_iTail];\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000813f6": "peek_000813f6",
                "this": "uart",
                "pRVar2": "ringBuffer",
                "uVar1": "result"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081412": {
            "entrypoint": "0x00081412",
            "current_name": "read_byte_from_rx_buffer_00081412",
            "code": "\n/* DWARF original prototype: int  read(UARTClass * uart_instance) */\n\nssize_t __uart_instancecall UARTClass::read_byte_from_rx_buffer_00081412(UARTClass *uart_instance,int file_descriptor,void *buffer,size_t num_bytes)\n\n{\n  uint8_t bVar1;\n  uint8_t uint8_t;\n  CircularBuffer *rx_buffer;\n  \n  rx_buffer = uart_instance->_rx_buffer;\n  if (rx_buffer->head_index != rx_buffer->tail_index) {\n    bVar1 = rx_buffer->buffer_data[rx_buffer->tail_index];\n    rx_buffer->tail_index = rx_buffer->tail_index + 1U & 0x7f;\n    return (uint)bVar1;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_00081412": "read_byte_from_rx_buffer_00081412",
                "this": "uart_instance",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "byte": "uint8_t",
                "uc": "uint8_t",
                "RingBuffer": "CircularBuffer",
                "pRVar2": "rx_buffer",
                "_iHead": "head_index",
                "_iTail": "tail_index",
                "_aucBuffer": "buffer_data"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008143c": {
            "entrypoint": "0x0008143c",
            "current_name": "wait_for_transmission_completion_0008143c",
            "code": "\n/* DWARF original prototype: void  flush(UARTClass * uartObject) */\n\nvoid __uartObjectcall UARTClass::waitForTransmissionCompletion_0008143c(UARTClass *uartObject)\n\n{\n  do {\n  } while (uartObject->transmitBuffer->headIndex != uartObject->transmitBuffer->tailIndex);\n  do {\n  } while (-1 < (int)(uartObject->uartPeriph->UART_SR << 0x16));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008143c": "wait_for_transmission_completion_0008143c",
                "this": "uartObject",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_pUart": "uartPeriph"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "write_data_00081454",
            "code": "\n/* DWARF original prototype: size_t  write(UARTClass * uart_object, uint8_t uc_data) */\n\nssize_t UARTObject UARTClass::write_data_00081454(UARTClass *uart_object,int data,void *buffer,size_t size)\n\n{\n  RingBuffer *ring_buffer;\n  uint new_head_index;\n  \n  ring_buffer = uart_object->_tx_buffer;\n  if (((int)(uart_object->_pUart->UART_SR << 0x1e) < 0) && (ring_buffer->_iTail == ring_buffer->_iHead)) {\n    uart_object->_pUart->UART_THR = data;\n  }\n  else {\n    new_head_index = ring_buffer->_iHead + 1U & 0x8000007f;\n    if ((int)new_head_index < 0) {\n      new_head_index = (new_head_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ring_buffer->_iTail == new_head_index);\n    ring_buffer->_aucBuffer[ring_buffer->_iHead] = (uchar)data;\n    uart_object->_tx_buffer->_iHead = new_head_index;\n    uart_object->_pUart->UART_IER = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "write_data_00081454",
                "__thiscall": "UARTObject",
                "this": "uart_object",
                "__fd": "data",
                "__buf": "buffer",
                "__n": "size",
                "pRVar1": "ring_buffer",
                "uVar2": "new_head_index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814a8": {
            "entrypoint": "0x000814a8",
            "current_name": "end_uart_000814a8",
            "code": "\n/* DWARF original prototype: void  end(UARTClass * uart) */\n\nvoid __uartcall UARTClass::endUART_000814a8(UARTClass *uart)\n\n{\n  uart->rxBuffer->inputHead = uart->rxBuffer->inputTail;\n  (**(code **)(*(int *)uart + 0x14))();\n  *(int *)((((uint)(int)uart->irqValue >> 5) + 0x20) * 4 + -0x1fff1f00) =\n       1 << (uint)(byte)(uart->irqValue & 0x1f);\n  pmc_disable_periph_clk(uart->deviceId);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814a8": "end_uart_000814a8",
                "this": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "inputHead",
                "_iTail": "inputTail",
                "_dwIrq": "irqValue",
                "_dwId": "deviceId"
            },
            "calling": [],
            "called": [
                "pmc_disable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_uart_000814e4",
            "code": "\n/* DWARF original prototype: UARTClass *  UARTClass(UARTClass * uartInstance, uart * puart, irq dwIrq,\n   uint32_t id, buffer * pRx_buffer, buffer * pTx_buffer) */\n\nUARTClass * __uartInstancecall\nUARTClass::initializeUART_000814e4(UARTClass *uartInstance,uart *puart,irq dwIrq,uint32_t id,buffer *pRx_buffer,\n          buffer *pTx_buffer)\n\n{\n  *(undefined4 *)&uartInstance->field_0x4 = 0;\n  *(undefined4 *)&uartInstance->field_0x8 = 1000;\n  uartInstance->_puart = puart;\n  *(undefined ***)uartInstance = &PTR_write_1_000857a8;\n  uartInstance->_dwIrq = dwIrq;\n  uartInstance->_rx_buffer = pRx_buffer;\n  uartInstance->_id = id;\n  uartInstance->_tx_buffer = pTx_buffer;\n  return uartInstance;\n}\n\n",
            "renaming": {
                "Uart": "uart",
                "IRQn_Type": "irq",
                "dwId": "id",
                "RingBuffer": "buffer",
                "this": "uartInstance",
                "FUN_000814e4": "initialize_uart_000814e4"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_uart_00081508",
            "code": "\n/* DWARF original prototype: void  init(UARTClass * uartInstance, uint32_t dwBaudRate, uint32_t modeReg) */\n\nint __uartInstancecall UARTClass::initializeUart_00081508(UARTClass *uartInstance,EVP_PKEY_CTX *evpPkeyCtx)\n\n{\n  uint irqIndex;\n  RingBuffer *ringBuffer;\n  RwReg modeRegValue;\n  Uart *uartPointer;\n  \n  enablePeripheralClock(uartInstance->_dwId);\n  uartPointer = uartInstance->_pUart;\n  uartPointer->UART_PTCR = 0x202;\n  uartPointer->UART_CR = 0xac;\n  uartPointer->UART_MR = modeRegValue;\n  uartPointer->UART_BRGR = systemCoreClock / (uint)evpPkeyCtx >> 4;\n  uartPointer->UART_IDR = 0xffffffff;\n  uartPointer->UART_IER = 0x61;\n  irqIndex = (uint)(int)uartInstance->_dwIrq >> 5;\n  *(int *)(irqIndex * 4 + -0x1fff1f00) = 1 << (uint)(byte)(uartInstance->_dwIrq & 0x1f);\n  ringBuffer = uartInstance->_rx_buffer;\n  ringBuffer->tailIndex = 0;\n  ringBuffer->headIndex = 0;\n  ringBuffer = uartInstance->_tx_buffer;\n  ringBuffer->tailIndex = 0;\n  ringBuffer->headIndex = 0;\n  uartPointer->UART_CR = 0x50;\n  return irqIndex;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_uart_00081508",
                "this": "uartInstance",
                "ctx": "evpPkeyCtx",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "pUVar3": "uartPointer",
                "in_r2": "modeRegValue",
                "SystemCoreClock": "systemCoreClock",
                "uVar1": "irqIndex",
                "pRVar2": "ringBuffer",
                "_iTail": "tailIndex",
                "_iHead": "headIndex"
            },
            "calling": [
                "begin",
                "begin"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081578": {
            "entrypoint": "0x00081578",
            "current_name": "initialize_uart_00081578",
            "code": "\n/* DWARF original prototype: void  begin(UARTClass * uartInstance, uint32_t baudRate) */\n\nvoid __uartInstancecall UARTClass::initializeUART_00081578(UARTClass *uartInstance,uint32_t baudRate)\n\n{\n  initialize(uartInstance,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081578": "initialize_uart_00081578",
                "this": "uartInstance",
                "dwBaudRate": "baudRate",
                "init": "initialize"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081580": {
            "entrypoint": "0x00081580",
            "current_name": "process_interrupt_00081580",
            "code": "\n/* DWARF original prototype: void  IrqHandler(UARTClass * uartInstance) */\n\nvoid __uartInstancecall UARTClass::processInterrupt_00081580(UARTClass *uartInstance)\n\n{\n  RingBuffer *txBuffer;\n  uint32_t uartStatus;\n  RoReg uartSR;\n  \n  uartSR = uartInstance->_pUart->UART_SR;\n  if ((int)(uartSR << 0x1f) < 0) {\n    RingBuffer::store_char(uartInstance->_rx_buffer,(uint8_t)uartInstance->_pUart->UART_RHR);\n  }\n  if ((int)(uartSR << 0x1e) < 0) {\n    txBuffer = uartInstance->_tx_buffer;\n    if (txBuffer->_iTail != txBuffer->_iHead) {\n      uartInstance->_pUart->UART_THR = (uint)txBuffer->_aucBuffer[txBuffer->_iTail];\n      txBuffer->_iTail = txBuffer->_iTail + 1U & 0x7f;\n      return;\n    }\n    uartInstance->_pUart->UART_IDR = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081580": "process_interrupt_00081580",
                "this": "uartInstance",
                "pRVar1": "txBuffer",
                "status": "uartStatus",
                "RVar2": "uartSR"
            },
            "calling": [
                "USART1_Handler",
                "UART_Handler",
                "USART3_Handler",
                "USART0_Handler"
            ],
            "called": [
                "store_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815ca": {
            "entrypoint": "0x000815ca",
            "current_name": "initialize_usart_000815ca",
            "code": "\n/* DWARF original prototype: void  begin(USARTClass * usartInstance, uint32_t baudRate) */\n\nvoid __usartInstancecall USARTClass::initializeUSART_000815ca(USARTClass *usartInstance,uint32_t baudRate)\n\n{\n  UARTClass::init(&usartInstance->super_UARTClass,(EVP_PKEY_CTX *)baudRate);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815ca": "initialize_usart_000815ca",
                "this": "usartInstance",
                "dwBaudRate": "baudRate"
            },
            "calling": [],
            "called": [
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_usart_class_000815d4",
            "code": "\n/* DWARF original prototype: USARTClass *  USARTClass(USARTClass * usartObj, Usart * usartPointer, IRQn_Type\n   interruptType, uint32_t identification, RingBuffer * rxBuffer, RingBuffer * txBuffer) */\n\nUSARTClass * __usartObjcall\nUSARTClass::initializeUSARTClass_000815d4(USARTClass *usartObj,Usart *usartPointer,IRQn_Type interruptType,uint32_t identification,RingBuffer *rxBuffer,\n          RingBuffer *txBuffer)\n\n{\n  UARTObject::UARTObject(&usartObj->superUARTObject,(Uart *)usartPointer,interruptType,identification,rxBuffer,txBuffer);\n  *(undefined ***)&usartObj->superUARTObject = &PTR_write_1_000857d8;\n  usartObj->usartInstance = usartPointer;\n  return usartObj;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_usart_class_000815d4",
                "this": "usartObj",
                "pUsart": "usartPointer",
                "dwIrq": "interruptType",
                "dwId": "identification",
                "pRx_buffer": "rxBuffer",
                "pTx_buffer": "txBuffer",
                "UARTClass": "UARTObject",
                "super_UARTClass": "superUARTObject",
                "_pUsart": "usartInstance"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_bytes_000815f8",
            "code": "\n/* WARNING: Unknown calowBytelowByteing convention */\n\nuint16_t combineBytes_000815f8(uint8_t highByte,uint8_t lowByte)\n\n{\n  return CONCAT11(highByte,lowByte);\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_bytes_000815f8",
                "h": "highByte",
                "l": "lowByte"
            },
            "calling": [
                "get_FC3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "free_buffer_000815fe",
            "code": "\n/* DWARF original prototype: void *  ~String(String * stringObject, int chargeFlag) */\n\nvoid * __stringObjectcall String::freeBuffer_000815fe(String *stringObject,int chargeFlag)\n\n{\n  free(stringObject->buffer);\n  return stringObject;\n}\n\n",
            "renaming": {
                "this": "stringObject",
                "__in_chrg": "chargeFlag",
                "FUN_000815fe": "free_buffer_000815fe"
            },
            "calling": [],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "clear_string_0008160c",
            "code": "\n/* DWARF original prototype: void  invalidate(String * str) */\n\nvoid __strcall String::clearString_0008160c(String *str)\n\n{\n  if (str->strBuffer != (char *)0x0) {\n    free(str->strBuffer);\n  }\n  str->strBuffer = (char *)0x0;\n  str->strLength = 0;\n  str->strCapacity = 0;\n  return;\n}\n\n",
            "renaming": {
                "this": "str",
                "buffer": "strBuffer",
                "len": "strLength",
                "capacity": "strCapacity",
                "FUN_0008160c": "clear_string_0008160c"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "change_buffer_00081622",
            "code": "\n/* DWARF original prototype: uchar  changeBuffer_00081622(String * strObj, uint newMaxStrLen) */\n\nuchar __strObjcall String::changeBuffer_00081622(String *strObj,uint newMaxStrLen)\n\n{\n  char *newBuffer;\n  char *newbuffer;\n  \n  newBuffer = (char *)realloc(strObj->buffer,newMaxStrLen + 1);\n  if (newBuffer != (char *)0x0) {\n    strObj->buffer = newBuffer;\n    strObj->capacity = newMaxStrLen;\n    newBuffer = (char *)0x1;\n  }\n  return (uchar)newBuffer;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "maxStrLen": "newMaxStrLen",
                "pcVar1": "newBuffer",
                "FUN_00081622": "change_buffer_00081622"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "reserve_memory_0008163a",
            "code": "\n/* DWARF original prototype: uchar  reserve(String * strObj, uint newSize) */\n\nuchar __strObjcall String::reserveMemory_0008163a(String *strObj,uint newSize)\n\n{\n  uchar success;\n  \n  if ((strObj->buffer == (char *)0x0) || (strObj->capacity < newSize)) {\n    success = resizeBuffer(strObj,newSize);\n    if (success == '\\0') {\n      return '\\0';\n    }\n    if (strObj->len == 0) {\n      *strObj->buffer = '\\0';\n    }\n  }\n  return '\\x01';\n}\n\n",
            "renaming": {
                "this": "strObj",
                "size": "newSize",
                "uVar1": "success",
                "changeBuffer": "resizeBuffer",
                "FUN_0008163a": "reserve_memory_0008163a"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "copy_and_assign_0008165c",
            "code": "\n/* DWARF original prototype: String *  copy(String * stringObject, char * cstr, uint length) */\n\nint __stringObjectcall String::copyAndAssign_0008165c(String *stringObject,EVP_PKEY_CTX *destinationContext,EVP_PKEY_CTX *sourceContext)\n\n{\n  uchar isReserved;\n  \n  isReserved = reserve(stringObject,(uint)sourceContext);\n  if (isReserved == '\\0') {\n    invalidate(stringObject);\n  }\n  else {\n    stringObject->len = (uint)sourceContext;\n    strcpy(stringObject->buffer,(char *)destinationContext);\n  }\n  return (int)stringObject;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "copy_and_assign_0008165c",
                "this": "stringObject",
                "dst": "destinationContext",
                "src": "sourceContext",
                "uVar1": "isReserved"
            },
            "calling": [
                "String"
            ],
            "called": [
                "reserve",
                "invalidate",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_string_00081682",
            "code": "\n/* DWARF original prototype: String *  String(String * strObj, char * cString) */\n\nString * __strObjcall String::initializeString_00081682(String *strObj,char *cString)\n\n{\n  EVP_PKEY_CTX *stringLength;\n  \n  strObj->buffer = (char *)0x0;\n  strObj->capacity = 0;\n  strObj->len = 0;\n  if (cString != (char *)0x0) {\n    stringLength = (EVP_PKEY_CTX *)strlen(cString);\n    copy(strObj,(EVP_PKEY_CTX *)cString,stringLength);\n  }\n  return strObj;\n}\n\n",
            "renaming": {
                "this": "strObj",
                "cstr": "cString",
                "src": "stringLength",
                "FUN_00081682": "initialize_string_00081682"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "main_loop_000816a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint mainLoop_000816a8(void)\n\n{\n  EVP_PKEY_CTX *context;\n  \n  configureWatchdog();\n  initialize(context);\n  initializeVariant();\n  pause(1);\n  configure();\n  execute {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "in_r0": "context",
                "_watchdogDefaultSetup": "configureWatchdog",
                "init": "initialize",
                "initVariant": "initializeVariant",
                "delay": "pause",
                "setup": "configure",
                "do": "execute",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "_watchdogDefaultSetup",
                "serialEventRun",
                "setup",
                "loop",
                "init",
                "delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "disable_watchdog_000816d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableWatchdog_000816d4(void)\n\n{\n  disableWatchdog_000816d4Timer(0x400e1a50);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "disable_watchdog_000816d4",
                "WDT_Disable": "disableWatchdogTimer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "WDT_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816e0": {
            "entrypoint": "0x000816e0",
            "current_name": "write_data_to_file_000816e0",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000816f6 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * print_object, uint8_t * buffer, size_t size) */\n\nssize_t __print_objectcall Print::write_data_to_file_000816e0(Print *print_object,int file_descriptor,void *buffer,size_t size)\n\n{\n  Print *current_print_object;\n  void *current_address;\n  \n  current_address = (void *)0x0;\n  current_print_object = print_object;\n  while ((current_address != buffer &&\n         (current_print_object = (Print *)(**print_object->_vptr_Print)(current_print_object,(uint)*(byte *)(file_descriptor + (int)current_address)),\n         current_print_object != (Print *)0x0))) {\n    current_address = (void *)((int)current_address + 1);\n  }\n  return (ssize_t)current_address;\n}\n\n",
            "renaming": {
                "FUN_000816e0": "write_data_to_file_000816e0",
                "this": "print_object",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "size",
                "pvVar2": "current_address",
                "pPVar1": "current_print_object"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081704": {
            "entrypoint": "0x00081704",
            "current_name": "update_tick_counter_00081704",
            "code": "\nvoid updateTickCounter_00081704(void)\n\n{\n  tickCounter = tickCounter + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081704": "update_tick_counter_00081704",
                "_dwTickCount": "tickCounter"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_tick_count_00081714",
            "code": "\nundefined4 getTickCount_00081714(void)\n\n{\n  return tickCount;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_tick_count_00081714",
                "_dwTickCount": "tickCount"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081720": {
            "entrypoint": "0x00081720",
            "current_name": "initialize_value_00081720",
            "code": "\nvoid initializeValue_00081720(int dataPointer)\n\n{\n  *(undefined4 *)(dataPointer + 4) = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081720": "initialize_value_00081720",
                "param_1": "dataPointer"
            },
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081728": {
            "entrypoint": "0x00081728",
            "current_name": "decompile_and_negate_00081728",
            "code": "\nvoid decompile_and_negate_00081728(uint input_value)\n\n{\n  decrement_sign_bit(input_value ^ 0x80000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081728": "decompile_and_negate_00081728",
                "param_1": "input_value",
                "__addsf3": "decrement_sign_bit"
            },
            "calling": [],
            "called": [
                "__addsf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "compute_bitwise_00081730",
            "code": "\nuint computeBitwise_00081730(uint num1,uint num2,undefined4 val1,uint val2)\n\n{\n  int leftShiftedNum1;\n  int leftShiftedNum2;\n  uint flippedNum2;\n  uint tempNum1;\n  uint tempNum2;\n  uint tempNum3;\n  uint difference;\n  bool isEqual;\n  \n  flippedNum2 = num2 ^ 0x80000000;\n  tempNum2 = num1 << 1;\n  isEqual = tempNum2 == 0;\n  if (!isEqual) {\n    val2 = num2 << 1;\n    isEqual = val2 == 0;\n  }\n  if (!isEqual) {\n    isEqual = tempNum2 == val2;\n  }\n  leftShiftedNum1 = (int)tempNum2 >> 0x18;\n  if (!isEqual) {\n    isEqual = leftShiftedNum1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)val2 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    leftShiftedNum2 = (int)(num2 << 1) >> 0x18;\n    if (leftShiftedNum1 == -1 || leftShiftedNum2 == -1) {\n      tempNum2 = flippedNum2;\n      if (leftShiftedNum1 == -1) {\n        tempNum2 = num1;\n      }\n      if (leftShiftedNum1 != -1 || leftShiftedNum2 != -1) {\n        flippedNum2 = tempNum2;\n      }\n      isEqual = (tempNum2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (flippedNum2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = tempNum2 == flippedNum2;\n      }\n      if (!isEqual) {\n        tempNum2 = tempNum2 | 0x400000;\n      }\n      return tempNum2;\n    }\n    if (((num1 ^ flippedNum2) & 0x7fffffff) != 0) {\n      if (tempNum2 == 0) {\n        num1 = flippedNum2;\n      }\n      return num1;\n    }\n    if (num1 != flippedNum2) {\n      return 0;\n    }\n    if ((tempNum2 & 0xff000000) == 0) {\n      flippedNum2 = num1 << 1;\n      if ((num1 & 0x80000000) != 0) {\n        flippedNum2 = flippedNum2 | 0x80000000;\n      }\n      return flippedNum2;\n    }\n    if (tempNum2 < 0xfe000000) {\n      return num1 + 0x800000;\n    }\n    num1 = num1 & 0x80000000;\nLAB_0008186a:\n    return num1 | 0x7f800000;\n  }\n  tempNum2 = tempNum2 >> 0x18;\n  val2 = val2 >> 0x18;\n  difference = val2 - tempNum2;\n  isEqual = difference != 0;\n  tempNum3 = tempNum2;\n  if (isEqual && tempNum2 <= val2) {\n    tempNum3 = tempNum2 + difference;\n  }\n  if (isEqual && tempNum2 <= val2) {\n    flippedNum2 = flippedNum2 ^ num1;\n  }\n  if (isEqual && tempNum2 <= val2) {\n    num1 = num1 ^ flippedNum2;\n  }\n  if (isEqual && tempNum2 <= val2) {\n    flippedNum2 = flippedNum2 ^ num1;\n  }\n  if (val2 < tempNum2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return num1;\n  }\n  tempNum2 = num1 & 0xffffff | 0x800000;\n  if ((num1 & 0x80000000) != 0) {\n    tempNum2 = -tempNum2;\n  }\n  tempNum1 = flippedNum2 & 0xffffff | 0x800000;\n  if ((flippedNum2 & 0x80000000) != 0) {\n    tempNum1 = -tempNum1;\n  }\n  if (tempNum3 == difference) {\n    tempNum1 = tempNum1 ^ 0x800000;\n    if (tempNum3 == 0) {\n      tempNum2 = tempNum2 ^ 0x800000;\n      tempNum3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  tempNum2 = tempNum2 + ((int)tempNum1 >> (difference & 0xff));\n  tempNum1 = tempNum1 << (0x20 - difference & 0xff);\n  num1 = tempNum2 & 0x80000000;\n  if ((int)tempNum2 < 0) {\n    isEqual = tempNum1 != 0;\n    tempNum1 = -tempNum1;\n    tempNum2 = -tempNum2 - (uint)isEqual;\n  }\n  if (tempNum2 < 0x800000) {\n    flippedNum2 = tempNum1 & 0x80000000;\n    tempNum1 = tempNum1 << 1;\n    tempNum2 = tempNum2 * 2 + (uint)(flippedNum2 != 0);\n    flippedNum2 = tempNum3 - 2;\n    if ((tempNum2 & 0x800000) == 0) {\n      difference = LZCOUNT(tempNum2) - 8;\n      tempNum2 = tempNum2 << (difference & 0xff);\n      if ((int)flippedNum2 < (int)difference) {\n        tempNum2 = tempNum2 >> (-(flippedNum2 - difference) & 0xff);\n      }\n      else {\n        tempNum2 = tempNum2 + (flippedNum2 - difference) * 0x800000;\n      }\n      return tempNum2 | num1;\n    }\n  }\n  else {\n    flippedNum2 = tempNum3 - 1;\n    if (0xffffff < tempNum2) {\n      flippedNum2 = tempNum2 & 1;\n      tempNum2 = tempNum2 >> 1;\n      tempNum1 = (uint)(flippedNum2 != 0) << 0x1f | tempNum1 >> 1;\n      flippedNum2 = tempNum3;\n      if (0xfd < tempNum3) goto LAB_0008186a;\n    }\n  }\n  tempNum2 = tempNum2 + flippedNum2 * 0x800000 + (uint)(0x7fffffff < tempNum1);\n  if (tempNum1 == 0x80000000) {\n    tempNum2 = tempNum2 & 0xfffffffe;\n  }\n  return tempNum2 | num1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "compute_bitwise_00081730",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "val1",
                "param_4": "val2",
                "iVar1": "leftShiftedNum1",
                "iVar2": "leftShiftedNum2",
                "uVar3": "flippedNum2",
                "uVar4": "tempNum1",
                "uVar5": "tempNum2",
                "uVar6": "tempNum3",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_number_00081734",
            "code": "\nuint calculateFloatingPointNumber_00081734(uint floatingPointNumber1,uint floatingPointNumber2,undefined4 parameter3,uint parameter4)\n\n{\n  int shiftedNumber1;\n  int shiftedNumber2;\n  uint result1;\n  uint shiftedResult1;\n  uint shiftedResult2;\n  uint diff;\n  bool isZero;\n  \n  shiftedResult1 = floatingPointNumber1 << 1;\n  isZero = shiftedResult1 == 0;\n  if (!isZero) {\n    parameter4 = floatingPointNumber2 << 1;\n    isZero = parameter4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedResult1 == parameter4;\n  }\n  shiftedNumber1 = (int)shiftedResult1 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedNumber1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)parameter4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedNumber2 = (int)(floatingPointNumber2 << 1) >> 0x18;\n    if (shiftedNumber1 == -1 || shiftedNumber2 == -1) {\n      shiftedResult1 = floatingPointNumber2;\n      if (shiftedNumber1 == -1) {\n        shiftedResult1 = floatingPointNumber1;\n      }\n      if (shiftedNumber1 != -1 || shiftedNumber2 != -1) {\n        floatingPointNumber2 = shiftedResult1;\n      }\n      isZero = (shiftedResult1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (floatingPointNumber2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedResult1 == floatingPointNumber2;\n      }\n      if (!isZero) {\n        shiftedResult1 = shiftedResult1 | 0x400000;\n      }\n      return shiftedResult1;\n    }\n    if (((floatingPointNumber1 ^ floatingPointNumber2) & 0x7fffffff) != 0) {\n      if (shiftedResult1 == 0) {\n        floatingPointNumber1 = floatingPointNumber2;\n      }\n      return floatingPointNumber1;\n    }\n    if (floatingPointNumber1 != floatingPointNumber2) {\n      return 0;\n    }\n    if ((shiftedResult1 & 0xff000000) == 0) {\n      shiftedResult1 = floatingPointNumber1 << 1;\n      if ((floatingPointNumber1 & 0x80000000) != 0) {\n        shiftedResult1 = shiftedResult1 | 0x80000000;\n      }\n      return shiftedResult1;\n    }\n    if (shiftedResult1 < 0xfe000000) {\n      return floatingPointNumber1 + 0x800000;\n    }\n    floatingPointNumber1 = floatingPointNumber1 & 0x80000000;\nLAB_0008186a:\n    return floatingPointNumber1 | 0x7f800000;\n  }\n  shiftedResult1 = shiftedResult1 >> 0x18;\n  parameter4 = parameter4 >> 0x18;\n  diff = parameter4 - shiftedResult1;\n  isZero = diff != 0;\n  shiftedResult2 = shiftedResult1;\n  if (isZero && shiftedResult1 <= parameter4) {\n    shiftedResult2 = shiftedResult1 + diff;\n  }\n  if (isZero && shiftedResult1 <= parameter4) {\n    floatingPointNumber2 = floatingPointNumber2 ^ floatingPointNumber1;\n  }\n  if (isZero && shiftedResult1 <= parameter4) {\n    floatingPointNumber1 = floatingPointNumber1 ^ floatingPointNumber2;\n  }\n  if (isZero && shiftedResult1 <= parameter4) {\n    floatingPointNumber2 = floatingPointNumber2 ^ floatingPointNumber1;\n  }\n  if (parameter4 < shiftedResult1) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return floatingPointNumber1;\n  }\n  shiftedResult1 = floatingPointNumber1 & 0xffffff | 0x800000;\n  if ((floatingPointNumber1 & 0x80000000) != 0) {\n    shiftedResult1 = -shiftedResult1;\n  }\n  result1 = floatingPointNumber2 & 0xffffff | 0x800000;\n  if ((floatingPointNumber2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shiftedResult2 == diff) {\n    result1 = result1 ^ 0x800000;\n    if (shiftedResult2 == 0) {\n      shiftedResult1 = shiftedResult1 ^ 0x800000;\n      shiftedResult2 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + ((int)result1 >> (diff & 0xff));\n  result1 = result1 << (0x20 - diff & 0xff);\n  floatingPointNumber1 = shiftedResult1 & 0x80000000;\n  if ((int)shiftedResult1 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    shiftedResult1 = -shiftedResult1 - (uint)isZero;\n  }\n  if (shiftedResult1 < 0x800000) {\n    diff = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shiftedResult1 = shiftedResult1 * 2 + (uint)(diff != 0);\n    diff = shiftedResult2 - 2;\n    if ((shiftedResult1 & 0x800000) == 0) {\n      shiftedResult2 = LZCOUNT(shiftedResult1) - 8;\n      shiftedResult1 = shiftedResult1 << (shiftedResult2 & 0xff);\n      if ((int)diff < (int)shiftedResult2) {\n        shiftedResult1 = shiftedResult1 >> (-(diff - shiftedResult2) & 0xff);\n      }\n      else {\n        shiftedResult1 = shiftedResult1 + (diff - shiftedResult2) * 0x800000;\n      }\n      return shiftedResult1 | floatingPointNumber1;\n    }\n  }\n  else {\n    diff = shiftedResult2 - 1;\n    if (0xffffff < shiftedResult1) {\n      diff = shiftedResult1 & 1;\n      shiftedResult1 = shiftedResult1 >> 1;\n      result1 = (uint)(diff != 0) << 0x1f | result1 >> 1;\n      diff = shiftedResult2;\n      if (0xfd < shiftedResult2) goto LAB_0008186a;\n    }\n  }\n  shiftedResult1 = shiftedResult1 + diff * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shiftedResult1 = shiftedResult1 & 0xfffffffe;\n  }\n  return shiftedResult1 | floatingPointNumber1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_number_00081734",
                "param_1": "floatingPointNumber1",
                "param_2": "floatingPointNumber2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "iVar1": "shiftedNumber1",
                "iVar2": "shiftedNumber2",
                "uVar3": "result1",
                "uVar4": "shiftedResult1",
                "uVar5": "shiftedResult2",
                "uVar6": "diff",
                "bVar7": "isZero"
            },
            "calling": [
                "loop",
                "__aeabi_frsub"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_result_00081894",
            "code": "\nuint calculateResult_00081894(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  int constantValue;\n  uint bitMask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    bitMask = 0 << (shiftAmount & 0xff);\n    leadingZeroes = constantValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < bitMask);\n    if (bitMask == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  shiftAmount = inputValue << leadingZeroes + 0x18;\n  leadingZeroes = constantValue + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_result_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "bitMask"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "count_and_adjust_0008189c",
            "code": "\nuint countAndAdjust_0008189c(uint input)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  uint signBit;\n  int adjustedValue;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(input);\n  shiftAmount = leadingZeroes - 8;\n  adjustedValue = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftAmount & 0xff);\n    signBit = adjustedValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeroes + 0x18;\n  signBit = adjustedValue + ((input >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "count_and_adjust_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "adjustedValue"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000818b8": {
            "entrypoint": "0x000818b8",
            "current_name": "calculate_shifted_sum_000818b8",
            "code": "\nuint calculate_shifted_sum_000818b8(uint input_1,uint input_2)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint shifted_bits;\n  uint shifted_sum;\n  int constant;\n  \n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  temp_1 = input_1;\n  temp_2 = input_2;\n  if (input_2 == 0) {\n    temp_1 = 0;\n    temp_2 = input_1;\n  }\n  constant = 0x5b000000;\n  if (input_2 == 0) {\n    constant = 0x4b000000;\n  }\n  shifted_bits = leading_zeros_count(temp_2);\n  shifted_sum = shifted_bits - 8;\n  constant = constant + -0x800000 + shifted_sum * -0x800000;\n  if (shifted_bits < 8) {\n    shifted_sum = temp_2 << shifted_bits + 0x18;\n    temp_2 = constant + ((temp_2 >> (0x20 - (shifted_bits + 0x18) & 0xff)) - ((int)shifted_sum >> 0x1f));\n    if ((temp_1 | shifted_sum << 1) == 0) {\n      temp_2 = temp_2 & ~(shifted_sum >> 0x1f);\n    }\n    return temp_2;\n  }\n  shifted_bits = temp_1 << (shifted_sum & 0xff);\n  temp_2 = constant + (temp_2 << (shifted_sum & 0xff)) +\n          (temp_1 >> (0x20 - shifted_sum & 0xff)) + (uint)(0x7fffffff < shifted_bits);\n  if (shifted_bits == 0x80000000) {\n    temp_2 = temp_2 & 0xfffffffe;\n  }\n  return temp_2;\n}\n\n",
            "renaming": {
                "FUN_000818b8": "calculate_shifted_sum_000818b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "shifted_bits",
                "uVar4": "shifted_sum",
                "iVar5": "constant",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000818c8": {
            "entrypoint": "0x000818c8",
            "current_name": "calculate_bitwise_addition_with_overflow_000818c8",
            "code": "\nuint calculateBitwiseAdditionWithOverflow_000818c8(uint input1,uint input2)\n\n{\n  uint absInput1;\n  uint absInput2;\n  uint shiftCount;\n  uint shiftedValue;\n  uint signBit;\n  int adjustedSignBit;\n  bool isInput1NonZero;\n  \n  if ((input1 | input2) == 0) {\n    return input1;\n  }\n  signBit = input2 & 0x80000000;\n  if ((int)signBit < 0) {\n    isInput1NonZero = input1 != 0;\n    input1 = -input1;\n    input2 = -input2 - (uint)isInput1NonZero;\n  }\n  absInput2 = input1;\n  absInput1 = input2;\n  if (input2 == 0) {\n    absInput2 = 0;\n    absInput1 = input1;\n  }\n  signBit = signBit | 0x5b000000;\n  if (input2 == 0) {\n    signBit = signBit + 0xf0000000;\n  }\n  shiftCount = LZCOUNT(absInput1);\n  shiftedValue = shiftCount - 8;\n  adjustedSignBit = (signBit - 0x800000) + shiftedValue * -0x800000;\n  if (shiftCount < 8) {\n    shiftedValue = absInput1 << shiftCount + 0x18;\n    signBit = adjustedSignBit + ((absInput1 >> (0x20 - (shiftCount + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n    if ((absInput2 | shiftedValue << 1) == 0) {\n      signBit = signBit & ~(shiftedValue >> 0x1f);\n    }\n    return signBit;\n  }\n  shiftCount = absInput2 << (shiftedValue & 0xff);\n  signBit = adjustedSignBit + (absInput1 << (shiftedValue & 0xff)) +\n          (absInput2 >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < shiftCount);\n  if (shiftCount == 0x80000000) {\n    signBit = signBit & 0xfffffffe;\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_000818c8": "calculate_bitwise_addition_with_overflow_000818c8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "absInput1",
                "uVar2": "absInput2",
                "uVar3": "shiftCount",
                "uVar4": "shiftedValue",
                "uVar5": "signBit",
                "iVar6": "adjustedSignBit",
                "bVar7": "isInput1NonZero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong result1;\n  uint result2;\n  uint flag1;\n  int flag2;\n  int temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  bool condition1;\n  bool condition2;\n  \n  flag1 = input1 >> 0x17 & 0xff;\n  condition1 = flag1 == 0;\n  if (!condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    condition1 = input4 == 0;\n  }\n  if (!condition1) {\n    condition1 = flag1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input4 == 0xff;\n  }\n  if (condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (flag1 == 0xff || input4 == 0xff) {\n      condition1 = input1 == 0 || input1 == 0x80000000;\n      result2 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition1 = input2 == 0;\n        result2 = input1;\n      }\n      if (!condition1) {\n        condition1 = input2 == 0x80000000;\n      }\n      temp4 = result2;\n      if (((condition1) || ((flag1 == 0xff && ((result2 & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp4 = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp4 | 0x7fc00000;\n      }\n      result2 = result2 ^ input2;\n      goto LAB_00081a94;\n    }\n    condition1 = (input1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition1 = flag1 == 0;\n    result2 = input1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input1 = input1 << 1;\n        condition1 = (input1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      flag1 = flag1 - 1;\n    }\n    input1 = input1 | result2;\n    condition1 = input4 == 0;\n    result2 = input2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input2 = input2 << 1;\n        condition1 = (input2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result2;\n  }\n  flag2 = flag1 + input4;\n  temp4 = input1 ^ input2;\n  flag1 = input1 << 9;\n  condition1 = flag1 == 0;\n  if (!condition1) {\n    input2 = input2 << 9;\n    condition1 = input2 == 0;\n  }\n  if (condition1) {\n    if (flag1 == 0) {\n      input2 = input2 << 9;\n    }\n    result2 = temp4 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(flag2,0x7f);\n    temp1 = flag2 + -0x7f;\n    condition1 = temp1 == 0;\n    temp3 = temp1;\n    if (!condition1 && 0x7e < flag2) {\n      condition2 = SBORROW4(0xff,temp1);\n      temp3 = 0xff - temp1;\n      condition1 = temp1 == 0xff;\n    }\n    if (!condition1 && temp3 < 0 == condition2) {\n      result2 = result2 | temp1 * 0x800000;\n    }\n    if (!condition1 && temp3 < 0 == condition2) {\n      return result2;\n    }\n    result2 = result2 | 0x800000;\n    temp2 = 0;\n    condition2 = SBORROW4(temp1,1);\n    temp4 = flag2 - 0x80;\n    condition1 = temp4 == 0;\n    flag1 = temp4;\n  }\n  else {\n    result1 = (ulonglong)(flag1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp2 = (uint)result1;\n    result2 = (uint)((ulonglong)result1 >> 0x20);\n    condition1 = result2 < 0x800000;\n    if (condition1) {\n      result2 = result2 << 1;\n    }\n    if (condition1) {\n      result2 = result2 | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result2 = temp4 & 0x80000000 | result2;\n    temp4 = (flag2 + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(temp4,0xfd);\n    condition1 = temp4 == 0xfd;\n    flag1 = temp4 - 0xfd;\n    if (temp4 < 0xfe) {\n      result2 = result2 + temp4 * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result2 = result2 & 0xfffffffe;\n      }\n      return result2;\n    }\n  }\n  if (condition1 || (int)flag1 < 0 != condition2) {\n    condition1 = (int)(temp4 + 0x19) < 0;\n    if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n      result2 = result2 & 0x80000000;\n    }\n    if (temp4 != 0xffffffe7 && condition1 == SCARRY4(temp4,0x19)) {\n      flag1 = (result2 << 1) >> (-temp4 & 0xff);\n      temp4 = result2 << (temp4 + 0x20 & 0xff);\n      flag1 = ((uint)((result2 & 0x80000000) != 0) << 0x1f | flag1 >> 1) + (uint)((byte)flag1 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        flag1 = flag1 & ~(temp4 >> 0x1f);\n      }\n      return flag1;\n    }\n    return result2;\n  }\nLAB_00081a94:\n  return result2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "result1",
                "uVar2": "result2",
                "uVar3": "flag1",
                "iVar4": "flag2",
                "iVar5": "temp1",
                "uVar6": "temp2",
                "iVar7": "temp3",
                "uVar8": "temp4",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081aac": {
            "entrypoint": "0x00081aac",
            "current_name": "float_conversion_00081aac",
            "code": "\nuint floatConversion_00081aac(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    flag1 = input4 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = input4 == 0xff;\n  }\n  if (flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    temp6 = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (temp6 = input2, input4 == 0xff)) {\nLAB_00081aa2:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        temp6 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      flag1 = (input1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = temp2 == 0;\n        temp6 = input1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input1 = input1 << 1;\n            flag1 = (input1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | temp6;\n        flag1 = input4 == 0;\n        temp6 = input2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input2 = input2 << 1;\n            flag1 = (input2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | temp6;\n        goto LAB_00081ac4;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_00081ac4:\n    temp3 = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      flag1 = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp5);\n        flag1 = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      flag2 = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      flag1 = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      flag1 = temp1 <= temp2;\n      if (!flag1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)flag1;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | temp6;\n        }\n        flag1 = temp1 >> 1 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 1;\n        }\n        flag1 = temp1 >> 2 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 2;\n        }\n        flag1 = temp1 >> 3 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        flag1 = temp2 == 0;\n        if (!flag1) {\n          temp6 = temp6 >> 4;\n          flag1 = temp6 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp4,0xfd);\n      flag1 = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (flag1 || (int)temp6 < 0 != flag2) {\n      flag1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      temp6 = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081aac": "float_conversion_00081aac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081be4": {
            "entrypoint": "0x00081be4",
            "current_name": "calculate_result_00081be4",
            "code": "\nuint calculate_result_00081be4(uint output,uint output)\n\n{\n  bool is_negative;\n  uint double_input1;\n  uint double_input2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input1 = output * 2;\n  double_input2 = output * 2;\n  if (((int)double_input1 >> 0x18 == -1 || (int)double_input2 >> 0x18 == -1) &&\n     ((((int)double_input1 >> 0x18 == -1 && ((output & 0x7fffff) != 0)) ||\n      (((int)double_input2 >> 0x18 == -1 && ((output & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  combined_inputs = double_input1 | output & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = output ^ output;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    output = double_input1 + output * -2;\n    is_zero = output == 0;\n  }\n  if ((is_negative && double_input2 <= double_input1) && !is_zero) {\n    output = (int)output >> 0x1f;\n  }\n  if (!is_negative || double_input2 > double_input1) {\n    output = ~((int)output >> 0x1f);\n  }\n  if (!is_zero) {\n    output = output | 1;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "output",
                "param_2": "output",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bec": {
            "entrypoint": "0x00081bec",
            "current_name": "check_overflow_and_bitwise_operations_00081bec",
            "code": "\nuint check_overflow_and_bitwise_operations_00081bec(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_variables;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_variables = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_variables == 0;\n  if (!is_zero) {\n    combined_variables = input_1 ^ input_2;\n    is_zero = combined_variables == 0;\n  }\n  is_negative = -1 < (int)combined_variables;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bec": "check_overflow_and_bitwise_operations_00081bec",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_variables",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "determine_equality_00081bf4",
            "code": "\nuint determineEquality_00081bf4(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint input1Doubled;\n  uint input2Doubled;\n  uint combinedInputs;\n  bool isZero;\n  \n  input1Doubled = input1 * 2;\n  input2Doubled = input2 * 2;\n  if (((int)input1Doubled >> 0x18 == -1 || (int)input2Doubled >> 0x18 == -1) &&\n     ((((int)input1Doubled >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2Doubled >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedInputs = input1Doubled | input2 & 0x7fffffff;\n  isZero = combinedInputs == 0;\n  if (!isZero) {\n    combinedInputs = input1 ^ input2;\n    isZero = combinedInputs == 0;\n  }\n  isNegative = -1 < (int)combinedInputs;\n  if (isNegative) {\n    input1 = input1Doubled + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && input2Doubled <= input1Doubled) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || input2Doubled > input1Doubled) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "determine_equality_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "input1Doubled",
                "uVar3": "input2Doubled",
                "uVar4": "combinedInputs",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "compare_and_return_00081c54",
            "code": "\nvoid compareAndReturn_00081c54(undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cfcmpeq(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "compare_and_return_00081c54",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_parameters_00081c5c",
            "code": "\nundefined8 concatenateParameters_00081c5c(undefined4 input1,undefined4 input2)\n\n{\n  __cmpsf2();\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_parameters_00081c5c",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c6c": {
            "entrypoint": "0x00081c6c",
            "current_name": "is_input_not_zero_00081c6c",
            "code": "\nbool is_input_not_zero_00081c6c(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_00081c6c": "is_input_not_zero_00081c6c",
                "in_ZR": "input_character"
            },
            "calling": [],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c80": {
            "entrypoint": "0x00081c80",
            "current_name": "is_cy_null_00081c80",
            "code": "\nbool is_CY_null_00081c80(void)\n\n{\n  char CY_value;\n  \n  __aeabi_cfcmpeq();\n  return CY_value == '\\0';\n}\n\n",
            "renaming": {
                "FUN_00081c80": "is_cy_null_00081c80",
                "in_CY": "CY_value"
            },
            "calling": [],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_for_equal_flags_00081c94",
            "code": "\nbool check_for_equal_flags_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_for_equal_flags_00081c94",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_order_00081ca8",
            "code": "\nbool checkOrder_00081ca8(void)\n\n{\n  undefined isZero;\n  undefined isNegative;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isNegative || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_order_00081ca8",
                "in_ZR": "isZero",
                "in_CY": "isNegative"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cbc": {
            "entrypoint": "0x00081cbc",
            "current_name": "is_char_null_00081cbc",
            "code": "\nbool isCharNull_00081cbc(void)\n\n{\n  char inputChar;\n  \n  __aeabi_cfrcmple();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_00081cbc": "is_char_null_00081cbc",
                "in_CY": "inputChar"
            },
            "calling": [],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "number_conversion_00081cd0",
            "code": "\nuint numberConversion_00081cd0(uint inputNumber)\n\n{\n  uint shiftedNumber;\n  uint difference;\n  \n  if (inputNumber << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedNumber = (inputNumber << 1) >> 0x18;\n  difference = 0x9e - shiftedNumber;\n  if (shiftedNumber < 0x9f && difference != 0) {\n    shiftedNumber = (inputNumber << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputNumber & 0x80000000) != 0) {\n      shiftedNumber = -shiftedNumber;\n    }\n    return shiftedNumber;\n  }\n  if ((difference == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputNumber = inputNumber & 0x80000000;\n  if (inputNumber == 0) {\n    inputNumber = 0x7fffffff;\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "number_conversion_00081cd0",
                "param_1": "inputNumber",
                "uVar1": "shiftedNumber",
                "uVar2": "difference"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_parameter_validity_00081d1c",
            "code": "\nuint checkParameterValidity_00081d1c(uint inputNumber)\n\n{\n  uint shiftAmount;\n  \n  if (((inputNumber & 0x80000000) != 0) || (inputNumber << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((inputNumber << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (inputNumber << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_parameter_validity_00081d1c",
                "param_1": "inputNumber",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "register_exit_handler_00081d5c",
            "code": "\nvoid registerExitHandler_00081d5c(undefined4 exitFunction,undefined4 exitHandler)\n\n{\n  __cxa_atexit(exitHandler,exitFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "register_exit_handler_00081d5c",
                "param_1": "exitFunction",
                "param_2": "exitHandler"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d68": {
            "entrypoint": "0x00081d68",
            "current_name": "register_exit_handler_00081d68",
            "code": "\nvoid register_exit_handler_00081d68(undefined4 handler_function,undefined4 arg1,undefined4 arg2)\n\n{\n  __register_exitproc(2,handler_function,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d68": "register_exit_handler_00081d68",
                "param_1": "handler_function",
                "param_2": "arg1",
                "param_3": "arg2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "run_initialization_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid runInitializationFunctions_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  initialize();\n  functionPointer = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointer = functionPointer + 1;\n    (**functionPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "run_initialization_functions_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer",
                "_init": "initialize"
            },
            "calling": [
                "init"
            ],
            "called": [
                "register_fini",
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081dcc": {
            "entrypoint": "0x00081dcc",
            "current_name": "print_formatted_value_00081dcc",
            "code": "\nvoid printFormattedValue_00081dcc(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  _vfiprintf_r(_impure_ptr,*(undefined4 *)(_impure_ptr + 8),formatString,&arg1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081dcc": "print_formatted_value_00081dcc",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_c": "arg1_copy",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_00081df4",
            "code": "\nvoid * allocateMemory_00081df4(size_t size)\n\n{\n  void *allocatedMemory;\n  \n  allocatedMemory = (void *)_malloc_r(_impure_ptr,size);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "free_memory_block_00081e04",
            "code": "\nvoid freeMemoryBlock_00081e04(void *memoryBlock)\n\n{\n  _free_r(_impure_ptr,memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "free_memory_block_00081e04",
                "__ptr": "memoryBlock"
            },
            "calling": [
                "~String",
                "invalidate"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_dynamic_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_dynamic_memory_00081e14(undefined4 *param_lock,uint required_size)\n\n{\n  undefined1 *pointer1;\n  int index;\n  uint remainder;\n  uint temp;\n  int counter1;\n  uint temp2;\n  uint temp3;\n  uint aligned_size;\n  undefined4 *pointer2;\n  undefined1 *pointer3;\n  undefined1 *pointer4;\n  undefined1 *block_header;\n  uint aligned_required_size;\n  undefined4 *new_block_header;\n  undefined4 *iterator;\n  undefined1 *malloc_data;\n  \n  if (required_size + 0xb < 0x17) {\n    aligned_required_size = 0x10;\n    if (0x10 < required_size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_required_size = required_size + 0xb & 0xfffffff8;\n    if (((int)aligned_required_size < 0) || (aligned_required_size < required_size)) {\nLAB_00081e7a:\n      *param_lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param_lock);\n  new_block_header = DAT_20070474;\n  if (aligned_required_size < 0x1f8) {\n    block_header = *(undefined1 **)((int)&DAT_20070470 + aligned_required_size);\n    if ((block_header != &malloc_free_blocks + aligned_required_size) ||\n       (pointer4 = block_header + 8, block_header = *(undefined1 **)(block_header + 0x14), pointer4 != block_header)) {\n      aligned_size = *(uint *)(block_header + 4);\n      counter1 = *(int *)(block_header + 0xc);\n      aligned_required_size = *(uint *)(block_header + (aligned_size & 0xfffffffc) + 4);\n      index = *(int *)(block_header + 8);\n      *(int *)(index + 0xc) = counter1;\n      *(int *)(counter1 + 8) = index;\n      *(uint *)(block_header + (aligned_size & 0xfffffffc) + 4) = aligned_required_size | 1;\n      __malloc_unlock(param_lock);\n      return (int *)(block_header + 8);\n    }\n    aligned_size = (aligned_required_size >> 3) + 2;\n  }\n  else {\n    aligned_size = aligned_required_size >> 9;\n    if (aligned_size == 0) {\n      counter1 = 0x7e;\n      index = 0x3f;\n    }\n    else if (aligned_size < 5) {\n      index = (aligned_required_size >> 6) + 0x38;\n      counter1 = index * 2;\n    }\n    else if (aligned_size < 0x15) {\n      index = aligned_size + 0x5b;\n      counter1 = index * 2;\n    }\n    else if (aligned_size < 0x55) {\n      index = (aligned_required_size >> 0xc) + 0x6e;\n      counter1 = index * 2;\n    }\n    else if (aligned_size < 0x155) {\n      index = (aligned_required_size >> 0xf) + 0x77;\n      counter1 = index * 2;\n    }\n    else if (aligned_size < 0x555) {\n      index = (aligned_required_size >> 0x12) + 0x7c;\n      counter1 = index * 2;\n    }\n    else {\n      counter1 = 0xfc;\n      index = 0x7e;\n    }\n    for (block_header = (undefined1 *)(&DAT_20070470)[counter1]; &malloc_free_blocks + counter1 * 4 != block_header;\n        block_header = *(undefined1 **)(block_header + 0xc)) {\n      aligned_size = *(uint *)(block_header + 4) & 0xfffffffc;\n      if (0xf < (int)(aligned_size - aligned_required_size)) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < (int)(aligned_size - aligned_required_size)) {\n        aligned_required_size = *(uint *)(block_header + aligned_size + 4);\n        counter1 = *(int *)(block_header + 0xc);\n        index = *(int *)(block_header + 8);\n        *(int *)(index + 0xc) = counter1;\n        *(int *)(counter1 + 8) = index;\n        *(uint *)(block_header + aligned_size + 4) = aligned_required_size | 1;\n        __malloc_unlock(param_lock);\n        return (int *)(block_header + 8);\n      }\n    }\n    aligned_size = index + 1;\n  }\n  remainder = DAT_20070468;\n  if ((undefined1 **)DAT_20070474 != &DAT_2007046c) {\n    remainder = DAT_20070474[1];\n    temp = remainder & 0xfffffffc;\n    temp2 = temp - aligned_required_size;\n    if (0xf < (int)temp2) {\n      iterator = (undefined4 *)(aligned_required_size + (int)DAT_20070474);\n      DAT_20070474[1] = aligned_required_size | 1;\n      DAT_20070474 = iterator;\n      DAT_20070478 = iterator;\n      iterator[3] = &DAT_2007046c;\n      iterator[2] = &DAT_2007046c;\n      iterator[1] = temp2 | 1;\n      *(uint *)((int)iterator + temp2) = temp2;\n      __malloc_unlock(param_lock);\n      return new_block_header + 2;\n    }\n    DAT_20070478 = &DAT_2007046c;\n    DAT_20070474 = &DAT_2007046c;\n    if (-1 < (int)temp2) {\n      *(uint *)((int)new_block_header + temp + 4) = *(uint *)((int)new_block_header + temp + 4) | 1;\n      __malloc_unlock(param_lock);\n      return new_block_header + 2;\n    }\n    if (temp < 0x200) {\n      temp = remainder & 0xfffffff8;\n      index = *(int *)((int)&DAT_2007046c + temp);\n      remainder = 1 << ((int)(remainder >> 3) >> 2 & 0xffU) | DAT_20070468;\n      new_block_header[2] = index;\n      new_block_header[3] = &malloc_free_blocks + temp;\n      DAT_20070468 = remainder;\n      *(undefined4 **)((int)&DAT_2007046c + temp) = new_block_header;\n      *(undefined4 **)(index + 0xc) = new_block_header;\n    }\n    else {\n      temp2 = remainder >> 9;\n      if (temp2 < 5) {\n        counter1 = (remainder >> 6) + 0x38;\n        index = counter1 * 2;\n      }\n      else if (temp2 < 0x15) {\n        counter1 = temp2 + 0x5b;\n        index = counter1 * 2;\n      }\n      else if (temp2 < 0x55) {\n        counter1 = (remainder >> 0xc) + 0x6e;\n        index = counter1 * 2;\n      }\n      else if (temp2 < 0x155) {\n        counter1 = (remainder >> 0xf) + 0x77;\n        index = counter1 * 2;\n      }\n      else if (temp2 < 0x555) {\n        counter1 = (remainder >> 0x12) + 0x7c;\n        index = counter1 * 2;\n      }\n      else {\n        index = 0xfc;\n        counter1 = 0x7e;\n      }\n      block_header = (&DAT_2007046c)[index];\n      if (block_header == &malloc_free_blocks + index * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (counter1 >> 2 & 0xffU);\n        pointer4 = block_header;\n      }\n      else {\n        do {\n          pointer4 = block_header;\n          if ((*(uint *)(block_header + 4) & 0xfffffffc) <= temp) break;\n          block_header = *(undefined1 **)(block_header + 8);\n          pointer4 = block_header;\n        } while (&malloc_free_blocks + index * 4 != block_header);\n        block_header = *(undefined1 **)(pointer4 + 0xc);\n      }\n      remainder = DAT_20070468;\n      new_block_header[3] = block_header;\n      new_block_header[2] = pointer4;\n      *(undefined4 **)(block_header + 8) = new_block_header;\n      *(undefined4 **)(pointer4 + 0xc) = new_block_header;\n    }\n  }\n  block_header = DAT_2007046c;\n  temp = 1 << ((int)aligned_size >> 2 & 0xffU);\n  if (temp <= remainder) {\n    if ((remainder & temp) == 0) {\n      aligned_size = aligned_size & 0xfffffffc;\n      do {\n        temp = temp << 1;\n        aligned_size = aligned_size + 4;\n      } while ((remainder & temp) == 0);\n    }\n    do {\n      iterator = (undefined4 *)(&malloc_free_blocks + aligned_size * 8);\n      new_block_header = iterator;\n      remainder = aligned_size;\n      do {\n        for (pointer2 = (undefined4 *)new_block_header[3]; new_block_header != pointer2; pointer2 = (undefined4 *)pointer2[3])\n        {\n          temp2 = pointer2[1] & 0xfffffffc;\n          temp3 = temp2 - aligned_required_size;\n          if (0xf < (int)temp3) {\n            counter1 = pointer2[2];\n            index = pointer2[3];\n            new_block_header = (undefined4 *)(aligned_required_size + (int)pointer2);\n            pointer2[1] = aligned_required_size | 1;\n            *(int *)(counter1 + 0xc) = index;\n            *(int *)(index + 8) = counter1;\n            DAT_20070474 = new_block_header;\n            DAT_20070478 = new_block_header;\n            new_block_header[3] = &DAT_2007046c;\n            new_block_header[2] = &DAT_2007046c;\n            new_block_header[1] = temp3 | 1;\n            *(uint *)((int)new_block_header + temp3) = temp3;\n            __malloc_unlock(param_lock);\n            return pointer2 + 2;\n          }\n          if (-1 < (int)temp3) {\n            index = pointer2[2];\n            counter1 = pointer2[3];\n            *(uint *)((int)pointer2 + temp2 + 4) = *(uint *)((int)pointer2 + temp2 + 4) | 1;\n            *(int *)(index + 0xc) = counter1;\n            *(int *)(counter1 + 8) = index;\n            __malloc_unlock(param_lock);\n            return pointer2 + 2;\n          }\n        }\n        remainder = remainder + 1;\n        new_block_header = new_block_header + 2;\n      } while ((remainder & 3) != 0);\n      do {\n        temp2 = aligned_size & 3;\n        new_block_header = iterator + -2;\n        aligned_size = aligned_size - 1;\n        if (temp2 == 0) {\n          DAT_20070468 = DAT_20070468 & ~temp;\n          break;\n        }\n        iterator = (undefined4 *)*iterator;\n      } while (iterator == new_block_header);\n      temp = temp * 2;\n      if ((DAT_20070468 <= temp && temp - DAT_20070468 != 0) || (aligned_size = remainder, temp == 0))\n      break;\n      for (; (DAT_20070468 & temp) == 0; temp = temp << 1) {\n        aligned_size = aligned_size + 4;\n      }\n    } while( true );\n  }\n  aligned_size = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  if ((aligned_required_size <= aligned_size) && (remainder = aligned_size - aligned_required_size, pointer4 = DAT_2007046c, 0xf < (int)remainder))\n  goto LAB_0008211e;\n  malloc_data = DAT_2007046c + aligned_size;\n  if (sbrk_base == (undefined1 *)0xffffffff) {\n    remainder = aligned_required_size + top_padding + 0x10;\n  }\n  else {\n    remainder = aligned_required_size + top_padding + 0x100f & 0xfffff000;\n  }\n  pointer4 = (undefined1 *)sbrk_r(param_lock,remainder);\n  if ((pointer4 == (undefined1 *)0xffffffff) || ((pointer4 < malloc_data && (block_header != &malloc_free_blocks))))\n  {\n    aligned_size = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    pointer4 = DAT_2007046c;\n  }\n  else {\n    pointer3 = current_mallinfo + remainder;\n    current_mallinfo = pointer3;\n    if ((malloc_data == pointer4) && (((uint)malloc_data & 0xfff) == 0)) {\n      *(uint *)(DAT_2007046c + 4) = remainder + aligned_size | 1;\n    }\n    else {\n      pointer1 = pointer4;\n      if (sbrk_base != (undefined1 *)0xffffffff) {\n        pointer1 = sbrk_base;\n        current_mallinfo = pointer3 + ((int)pointer4 - (int)malloc_data);\n      }\n      sbrk_base = pointer1;\n      temp = (uint)pointer4 & 7;\n      if (temp == 0) {\n        index = 0x1000;\n      }\n      else {\n        pointer4 = pointer4 + (8 - temp);\n        index = 0x1008 - temp;\n      }\n      index = index - ((uint)(pointer4 + remainder) & 0xfff);\n      counter1 = sbrk_r(param_lock,index);\n      if (counter1 == -1) {\n        remainder = 1;\n        index = 0;\n      }\n      else {\n        remainder = (counter1 - (int)pointer4) + index | 1;\n      }\n      pointer3 = current_mallinfo + index;\n      DAT_2007046c = pointer4;\n      current_mallinfo = pointer3;\n      *(uint *)(pointer4 + 4) = remainder;\n      if (block_header != &malloc_free_blocks) {\n        if (aligned_size < 0x10) {\n          *(undefined4 *)(pointer4 + 4) = 1;\n          aligned_size = 0;\n          goto LAB_00082108;\n        }\n        aligned_size = aligned_size - 0xc & 0xfffffff8;\n        *(uint *)(block_header + 4) = aligned_size | *(uint *)(block_header + 4) & 1;\n        *(undefined4 *)(block_header + aligned_size + 4) = 5;\n        *(undefined4 *)(block_header + aligned_size + 8) = 5;\n        if (0xf < aligned_size) {\n          _free_r(param_lock,block_header + 8);\n          pointer3 = current_mallinfo;\n        }\n      }\n    }\n    if (max_sbrked_mem < pointer3) {\n      max_sbrked_mem = pointer3;\n    }\n    if (max_total_mem < pointer3) {\n      max_total_mem = pointer3;\n    }\n    aligned_size = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n    pointer4 = DAT_2007046c;\n  }\nLAB_00082108:\n  remainder = aligned_size - aligned_required_size;\n  if ((aligned_size < aligned_required_size) || ((int)remainder < 0x10)) {\n    __malloc_unlock(param_lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  DAT_2007046c = pointer4 + aligned_required_size;\n  *(uint *)(pointer4 + 4) = aligned_required_size | 1;\n  *(uint *)(DAT_2007046c + 4) = remainder | 1;\n  __malloc_unlock(param_lock);\n  return (int *)(pointer4 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_dynamic_memory_00081e14",
                "param_1": "param_lock",
                "param_2": "required_size",
                "puVar1": "pointer1",
                "iVar2": "index",
                "uVar3": "remainder",
                "uVar4": "temp",
                "iVar5": "counter1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "aligned_size",
                "puVar9": "pointer2",
                "puVar10": "pointer3",
                "puVar11": "pointer4",
                "puVar12": "block_header",
                "uVar13": "aligned_required_size",
                "puVar14": "new_block_header",
                "puVar15": "iterator",
                "puVar16": "malloc_data",
                "__malloc_av_": "malloc_free_blocks",
                "__malloc_sbrk_base": "sbrk_base",
                "__malloc_top_pad": "top_padding",
                "_sbrk_r": "sbrk_r",
                "__malloc_current_mallinfo": "current_mallinfo",
                "__malloc_max_sbrked_mem": "max_sbrked_mem",
                "__malloc_max_total_mem": "max_total_mem"
            },
            "calling": [
                "malloc",
                "__sfvwrite_r",
                "_realloc_r",
                "__smakebuf_r"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nvoid * copyMemory_0008234c(void *destination,void *source,size_t size)\n\n{\n  undefined *destPtr;\n  undefined4 *destPtrAligned;\n  undefined4 *destPtrAlignedTemp;\n  undefined *currDestPtr;\n  undefined4 *srcPtrAligned;\n  undefined *currSrcPtr;\n  uint remainingSize;\n  uint unalignedBytes;\n  bool isRemainingSizeGreaterThanZero;\n  \n  destPtrAlignedTemp = (undefined4 *)destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      unalignedBytes = size - 4;\n      destPtr = (undefined *)destination;\n      if (3 < size) {\n        do {\n          currSrcPtr = (undefined *)source;\n          currDestPtr = destPtr;\n          isRemainingSizeGreaterThanZero = unalignedBytes != 0;\n          unalignedBytes = unalignedBytes - 1;\n          *currDestPtr = *currSrcPtr;\n          destPtr = currDestPtr + 1;\n          source = currSrcPtr + 1;\n        } while (isRemainingSizeGreaterThanZero);\n        currDestPtr[1] = currSrcPtr[1];\n        currDestPtr[2] = currSrcPtr[2];\n        currDestPtr[3] = currSrcPtr[3];\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      unalignedBytes = 4 - ((uint)destination & 3);\n      size = size - unalignedBytes;\n      destPtrAligned = (undefined4 *)destination;\n      srcPtrAligned = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)destination & 1) != 0) {\n        srcPtrAligned = (undefined4 *)((int)source + 1);\n        destPtrAligned = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *source;\n      }\n      destPtrAlignedTemp = destPtrAligned;\n      source = srcPtrAligned;\n      if ((unalignedBytes & 2) != 0) {\n        source = (void *)((int)srcPtrAligned + 2);\n        destPtrAlignedTemp = (undefined4 *)((int)destPtrAligned + 2);\n        *(undefined2 *)destPtrAligned = *(undefined2 *)srcPtrAligned;\n      }\n    }\n  }\n  while (0x3f < size) {\n                    /* WARNING: Load size is inaccurate */\n    *destPtrAlignedTemp = *source;\n    destPtrAlignedTemp[1] = *(undefined4 *)((int)source + 4);\n    destPtrAlignedTemp[2] = *(undefined4 *)((int)source + 8);\n    destPtrAlignedTemp[3] = *(undefined4 *)((int)source + 0xc);\n    destPtrAlignedTemp[4] = *(undefined4 *)((int)source + 0x10);\n    destPtrAlignedTemp[5] = *(undefined4 *)((int)source + 0x14);\n    destPtrAlignedTemp[6] = *(undefined4 *)((int)source + 0x18);\n    destPtrAlignedTemp[7] = *(undefined4 *)((int)source + 0x1c);\n    destPtrAlignedTemp[8] = *(undefined4 *)((int)source + 0x20);\n    destPtrAlignedTemp[9] = *(undefined4 *)((int)source + 0x24);\n    destPtrAlignedTemp[10] = *(undefined4 *)((int)source + 0x28);\n    destPtrAlignedTemp[0xb] = *(undefined4 *)((int)source + 0x2c);\n    destPtrAlignedTemp[0xc] = *(undefined4 *)((int)source + 0x30);\n    destPtrAlignedTemp[0xd] = *(undefined4 *)((int)source + 0x34);\n    destPtrAlignedTemp[0xe] = *(undefined4 *)((int)source + 0x38);\n    destPtrAlignedTemp[0xf] = *(undefined4 *)((int)source + 0x3c);\n    destPtrAlignedTemp = destPtrAlignedTemp + 0x10;\n    source = (undefined4 *)((int)source + 0x40);\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *destPtrAlignedTemp = *source;\n      destPtrAlignedTemp[1] = *(undefined4 *)((int)source + 4);\n      destPtrAlignedTemp[2] = *(undefined4 *)((int)source + 8);\n      destPtrAlignedTemp[3] = *(undefined4 *)((int)source + 0xc);\n      destPtrAlignedTemp = destPtrAlignedTemp + 4;\n      source = (void *)((int)source + 0x10);\n      isRemainingSizeGreaterThanZero = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isRemainingSizeGreaterThanZero);\n  }\n  unalignedBytes = remainingSize + 0xc;\n  srcPtrAligned = destPtrAlignedTemp;\n  destPtrAligned = (undefined4 *)source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtrAligned + 1;\n      *srcPtrAligned = *destPtrAligned;\n      isRemainingSizeGreaterThanZero = 3 < unalignedBytes;\n      unalignedBytes = unalignedBytes - 4;\n      destPtrAlignedTemp = srcPtrAligned + 1;\n      srcPtrAligned = srcPtrAligned + 1;\n      destPtrAligned = (undefined4 *)source;\n    } while (isRemainingSizeGreaterThanZero);\n  }\nLAB_000823d0:\n  if (unalignedBytes + 4 != 0) {\n    destPtrAligned = destPtrAlignedTemp;\n    srcPtrAligned = (undefined4 *)source;\n                    /* WARNING: Load size is inaccurate */\n    if ((unalignedBytes & 1) != 0) {\n      srcPtrAligned = (undefined4 *)((int)source + 1);\n      destPtrAligned = (undefined4 *)((int)destPtrAlignedTemp + 1);\n      *(undefined *)destPtrAlignedTemp = *source;\n    }\n    if ((unalignedBytes + 4 & 2) != 0) {\n      *(undefined2 *)destPtrAligned = *(undefined2 *)srcPtrAligned;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "__dest": "destination",
                "__src": "source",
                "__n": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrAligned",
                "puVar3": "destPtrAlignedTemp",
                "puVar4": "currDestPtr",
                "puVar5": "srcPtrAligned",
                "puVar6": "currSrcPtr",
                "uVar7": "remainingSize",
                "uVar8": "unalignedBytes",
                "bVar9": "isRemainingSizeGreaterThanZero"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_reverse_00082438",
            "code": "\nvoid * copyReverse_00082438(void *destination,void *source,size_t length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  undefined *tempPtr2;\n  uint remainingLength;\n  undefined *tempPtr3;\n  uint remainingModulo;\n  \n  if ((source < destination) && (tempPtr2 = (undefined *)((int)source + length), destination < tempPtr2)) {\n    tempPtr3 = (undefined *)((int)destination + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr2 = tempPtr2 + -1;\n        index = index + -1;\n        tempPtr3 = tempPtr3 + -1;\n        *tempPtr3 = *tempPtr2;\n      } while (index != -1);\n    }\n    return destination;\n  }\n  destPtr = (undefined4 *)destination;\n  if (length < 0x10) {\n    if (length == 0) {\n      return destination;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    srcPtr = (undefined4 *)source;\n    do {\n      tempPtr = destPtr + 4;\n      *destPtr = *srcPtr;\n      destPtr[1] = srcPtr[1];\n      destPtr[2] = srcPtr[2];\n      destPtr[3] = srcPtr[3];\n      destPtr = tempPtr;\n      srcPtr = srcPtr + 4;\n    } while (tempPtr != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x10));\n    remainingModulo = length & 0xf;\n    index = ((length - 0x10 >> 4) + 1) * 0x10;\n    source = (void *)((int)source + index);\n    destPtr = (undefined4 *)(index + (int)destination);\n    remainingLength = remainingModulo;\n    srcPtr = destPtr;\n    tempPtr = (undefined4 *)source;\n    if (3 < remainingModulo) {\n      do {\n        remainingLength = remainingLength - 4;\n        *srcPtr = *tempPtr;\n        srcPtr = srcPtr + 1;\n        tempPtr = tempPtr + 1;\n      } while (3 < remainingLength);\n      index = (remainingModulo - 4 & 0xfffffffc) + 4;\n      destPtr = (undefined4 *)((int)destPtr + index);\n      source = (void *)((int)source + index);\n      remainingModulo = length & 3;\n    }\n    length = remainingModulo;\n    if (length == 0) {\n      return destination;\n    }\n  }\n  srcPtr = destPtr;\n  do {\n                    /* WARNING: Load size is inaccurate */\n    tempPtr = (undefined4 *)((int)srcPtr + 1);\n    *(undefined *)srcPtr = *source;\n    source = (undefined4 *)((int)source + 1);\n    srcPtr = tempPtr;\n  } while (tempPtr != (undefined4 *)(length + (int)destPtr));\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_reverse_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "puVar5": "tempPtr2",
                "puVar7": "tempPtr3",
                "uVar6": "remainingLength",
                "uVar8": "remainingModulo"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "memset_00082504",
            "code": "\nvoid * memset_00082504(void *destination,int value,size_t count)\n\n{\n  uint *dst_ptr;\n  uint *src_ptr;\n  uint *ptr;\n  uint u32_value;\n  uint u32_count;\n  bool is_empty;\n  \n  src_ptr = (uint *)destination;\n  if (((uint)destination & 3) != 0) {\n    is_empty = count == 0;\n    dst_ptr = (uint *)destination;\n    count = count - 1;\n    if (is_empty) {\n      return destination;\n    }\n    while( true ) {\n      src_ptr = (uint *)((int)dst_ptr + 1);\n      *(char *)dst_ptr = (char)value;\n      if (((uint)src_ptr & 3) == 0) break;\n      is_empty = count == 0;\n      dst_ptr = src_ptr;\n      count = count - 1;\n      if (is_empty) {\n        return destination;\n      }\n    }\n  }\n  if (3 < count) {\n    u32_value = value & 0xffU | (value & 0xffU) << 8;\n    u32_value = u32_value | u32_value << 0x10;\n    u32_count = count;\n    dst_ptr = src_ptr;\n    if (0xf < count) {\n      u32_count = count - 0x10;\n      do {\n        *dst_ptr = u32_value;\n        dst_ptr[1] = u32_value;\n        dst_ptr[2] = u32_value;\n        dst_ptr[3] = u32_value;\n        dst_ptr = dst_ptr + 4;\n      } while (dst_ptr != (uint *)((int)src_ptr + (u32_count & 0xfffffff0) + 0x10));\n      count = count & 0xf;\n      src_ptr = src_ptr + ((u32_count >> 4) + 1) * 4;\n      u32_count = count;\n      dst_ptr = src_ptr;\n      if (count < 4) goto LAB_00082580;\n    }\n    do {\n      count = count - 4;\n      *src_ptr = u32_value;\n      src_ptr = src_ptr + 1;\n    } while (3 < count);\n    src_ptr = (uint *)((int)dst_ptr + (u32_count - 4 & 0xfffffffc) + 4);\n    count = u32_count & 3;\n  }\nLAB_00082580:\n  if (count != 0) {\n    dst_ptr = src_ptr;\n    do {\n      ptr = (uint *)((int)dst_ptr + 1);\n      *(char *)dst_ptr = (char)value;\n      dst_ptr = ptr;\n    } while (ptr != (uint *)(count + (int)src_ptr));\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00082504": "memset_00082504",
                "__s": "destination",
                "__c": "value",
                "__n": "count",
                "puVar1": "dst_ptr",
                "puVar2": "src_ptr",
                "puVar3": "ptr",
                "uVar4": "u32_value",
                "uVar5": "u32_count",
                "bVar6": "is_empty"
            },
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "_malloc_trim_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "_malloc_trim_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "realloc_memory_000825a0",
            "code": "\nvoid * reallocMemory_000825a0(void *ptr,size_t size)\n\n{\n  void *result;\n  \n  result = (void *)_realloc_r(_impure_ptr,ptr,size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "realloc_memory_000825a0",
                "__ptr": "ptr",
                "__size": "size",
                "pvVar1": "result"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "realloc_memory_000825b0",
            "code": "\nint * realloc_memory_000825b0(undefined4 *param_lock,int *ptr_to_reallocate,uint size)\n\n{\n  int temp_1;\n  int *new_ptr;\n  uint temp_2;\n  size_t temp_3;\n  uint var_1;\n  int var_2;\n  int *var_3;\n  uint var_4;\n  uint var_5;\n  int *var_6;\n  \n  if (ptr_to_reallocate == (int *)0x0) {\n    new_ptr = (int *)_malloc_r(param_lock,size);\n    return new_ptr;\n  }\n  __malloc_lock();\n  var_1 = ptr_to_reallocate[-1];\n  var_4 = var_1 & 0xfffffffc;\n  new_ptr = ptr_to_reallocate + -2;\n  if (size + 0xb < 0x17) {\n    var_5 = 0x10;\n  }\n  else {\n    var_5 = size + 0xb & 0xfffffff8;\n    if ((int)var_5 < 0) goto LAB_0008267c;\n  }\n  if (var_5 < size) {\nLAB_0008267c:\n    *param_lock = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)var_4 < (int)var_5) {\n    temp_1 = (int)new_ptr + var_4;\n    if (DAT_2007046c == temp_1) {\n      temp_2 = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n      temp_1 = DAT_2007046c;\n      if ((int)(var_5 + 0x10) <= (int)(temp_2 + var_4)) {\n        DAT_2007046c = (int)new_ptr + var_5;\n        *(uint *)(DAT_2007046c + 4) = (temp_2 + var_4) - var_5 | 1;\n        ptr_to_reallocate[-1] = var_5 | ptr_to_reallocate[-1] & 1U;\n        __malloc_unlock(param_lock);\n        return ptr_to_reallocate;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_1 + 4) & 0xfffffffe) + temp_1 + 4) & 1) == 0) {\n      temp_2 = *(uint *)(temp_1 + 4) & 0xfffffffc;\n      if ((int)var_5 <= (int)(temp_2 + var_4)) {\n        var_2 = *(int *)(temp_1 + 0xc);\n        temp_1 = *(int *)(temp_1 + 8);\n        *(int *)(temp_1 + 0xc) = var_2;\n        *(int *)(var_2 + 8) = temp_1;\n        var_4 = temp_2 + var_4;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_2 = 0;\n      temp_1 = 0;\n    }\n    if (-1 < (int)(var_1 << 0x1f)) {\n      var_6 = (int *)((int)new_ptr - ptr_to_reallocate[-2]);\n      var_1 = (var_6[1] & 0xfffffffcU) + var_4;\n      if (temp_1 != 0) {\n        if (temp_1 == DAT_2007046c) {\n          if ((int)(var_5 + 0x10) <= (int)(temp_2 + var_1)) {\n            new_ptr = var_6 + 2;\n            temp_1 = *new_ptr;\n            var_2 = var_6[3];\n            temp_3 = var_4 - 4;\n            *(int *)(temp_1 + 0xc) = var_2;\n            *(int *)(var_2 + 8) = temp_1;\n            if (temp_3 < 0x25) {\n              var_3 = new_ptr;\n              if (0x13 < temp_3) {\n                var_6[2] = *ptr_to_reallocate;\n                var_6[3] = ptr_to_reallocate[1];\n                if (temp_3 < 0x1c) {\n                  ptr_to_reallocate = ptr_to_reallocate + 2;\n                  var_3 = var_6 + 4;\n                }\n                else {\n                  var_6[4] = ptr_to_reallocate[2];\n                  var_6[5] = ptr_to_reallocate[3];\n                  if (temp_3 == 0x24) {\n                    var_6[6] = ptr_to_reallocate[4];\n                    var_3 = ptr_to_reallocate + 5;\n                    ptr_to_reallocate = ptr_to_reallocate + 6;\n                    var_6[7] = *var_3;\n                    var_3 = var_6 + 8;\n                  }\n                  else {\n                    ptr_to_reallocate = ptr_to_reallocate + 4;\n                    var_3 = var_6 + 6;\n                  }\n                }\n              }\n              *var_3 = *ptr_to_reallocate;\n              var_3[1] = ptr_to_reallocate[1];\n              var_3[2] = ptr_to_reallocate[2];\n            }\n            else {\n              memmove(new_ptr,ptr_to_reallocate,temp_3);\n            }\n            DAT_2007046c = (int)var_6 + var_5;\n            *(uint *)(DAT_2007046c + 4) = (temp_2 + var_1) - var_5 | 1;\n            var_6[1] = var_5 | var_6[1] & 1U;\n            __malloc_unlock(param_lock);\n            return new_ptr;\n          }\n        }\n        else {\n          temp_2 = temp_2 + var_1;\n          if ((int)var_5 <= (int)temp_2) {\n            var_2 = *(int *)(temp_1 + 0xc);\n            temp_1 = *(int *)(temp_1 + 8);\n            *(int *)(temp_1 + 0xc) = var_2;\n            *(int *)(var_2 + 8) = temp_1;\n            var_3 = var_6 + 2;\n            temp_1 = *var_3;\n            var_2 = var_6[3];\n            temp_3 = var_4 - 4;\n            *(int *)(temp_1 + 0xc) = var_2;\n            *(int *)(var_2 + 8) = temp_1;\n            var_4 = temp_2;\n            if (temp_3 < 0x25) {\n              new_ptr = var_3;\n              if (0x13 < temp_3) {\n                var_6[2] = *ptr_to_reallocate;\n                var_6[3] = ptr_to_reallocate[1];\n                if (temp_3 < 0x1c) {\n                  ptr_to_reallocate = ptr_to_reallocate + 2;\n                  new_ptr = var_6 + 4;\n                }\n                else {\n                  var_6[4] = ptr_to_reallocate[2];\n                  var_6[5] = ptr_to_reallocate[3];\n                  if (temp_3 == 0x24) {\n                    var_6[6] = ptr_to_reallocate[4];\n                    new_ptr = ptr_to_reallocate + 5;\n                    ptr_to_reallocate = ptr_to_reallocate + 6;\n                    var_6[7] = *new_ptr;\n                    new_ptr = var_6 + 8;\n                  }\n                  else {\n                    ptr_to_reallocate = ptr_to_reallocate + 4;\n                    new_ptr = var_6 + 6;\n                  }\n                }\n              }\n              *new_ptr = *ptr_to_reallocate;\n              new_ptr[1] = ptr_to_reallocate[1];\n              new_ptr[2] = ptr_to_reallocate[2];\n              var_1 = var_6[1];\n              new_ptr = var_6;\n              ptr_to_reallocate = var_3;\n            }\n            else {\n              memmove(var_3,ptr_to_reallocate,temp_3);\n              var_1 = var_6[1];\n              new_ptr = var_6;\n              ptr_to_reallocate = var_3;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)var_5 <= (int)var_1) {\n        var_3 = var_6 + 2;\n        temp_1 = *var_3;\n        var_2 = var_6[3];\n        temp_3 = var_4 - 4;\n        *(int *)(temp_1 + 0xc) = var_2;\n        *(int *)(var_2 + 8) = temp_1;\n        var_4 = var_1;\n        if (temp_3 < 0x25) {\n          new_ptr = var_3;\n          if (0x13 < temp_3) {\n            var_6[2] = *ptr_to_reallocate;\n            var_6[3] = ptr_to_reallocate[1];\n            if (temp_3 < 0x1c) {\n              ptr_to_reallocate = ptr_to_reallocate + 2;\n              new_ptr = var_6 + 4;\n            }\n            else {\n              var_6[4] = ptr_to_reallocate[2];\n              var_6[5] = ptr_to_reallocate[3];\n              if (temp_3 == 0x24) {\n                var_6[6] = ptr_to_reallocate[4];\n                new_ptr = ptr_to_reallocate + 5;\n                ptr_to_reallocate = ptr_to_reallocate + 6;\n                var_6[7] = *new_ptr;\n                new_ptr = var_6 + 8;\n              }\n              else {\n                ptr_to_reallocate = ptr_to_reallocate + 4;\n                new_ptr = var_6 + 6;\n              }\n            }\n          }\n          *new_ptr = *ptr_to_reallocate;\n          new_ptr[1] = ptr_to_reallocate[1];\n          new_ptr[2] = ptr_to_reallocate[2];\n          var_1 = var_6[1];\n          new_ptr = var_6;\n          ptr_to_reallocate = var_3;\n        }\n        else {\n          memmove(var_3,ptr_to_reallocate,temp_3);\n          var_1 = var_6[1];\n          new_ptr = var_6;\n          ptr_to_reallocate = var_3;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    var_6 = (int *)_malloc_r(param_lock,size);\n    if (var_6 == (int *)0x0) goto LAB_000826a4;\n    var_1 = ptr_to_reallocate[-1];\n    if (var_6 + -2 != (int *)((var_1 & 0xfffffffe) + (int)new_ptr)) {\n      temp_3 = var_4 - 4;\n      if (temp_3 < 0x25) {\n        new_ptr = ptr_to_reallocate;\n        var_3 = var_6;\n        if (0x13 < temp_3) {\n          *var_6 = *ptr_to_reallocate;\n          var_6[1] = ptr_to_reallocate[1];\n          if (temp_3 < 0x1c) {\n            new_ptr = ptr_to_reallocate + 2;\n            var_3 = var_6 + 2;\n          }\n          else {\n            var_6[2] = ptr_to_reallocate[2];\n            var_6[3] = ptr_to_reallocate[3];\n            if (temp_3 == 0x24) {\n              var_6[4] = ptr_to_reallocate[4];\n              var_6[5] = ptr_to_reallocate[5];\n              new_ptr = ptr_to_reallocate + 6;\n              var_3 = var_6 + 6;\n            }\n            else {\n              new_ptr = ptr_to_reallocate + 4;\n              var_3 = var_6 + 4;\n            }\n          }\n        }\n        *var_3 = *new_ptr;\n        var_3[1] = new_ptr[1];\n        var_3[2] = new_ptr[2];\n      }\n      else {\n        memmove(var_6,ptr_to_reallocate,temp_3);\n      }\n      _free_r(param_lock,ptr_to_reallocate);\n      goto LAB_000826a4;\n    }\n    var_4 = var_4 + (var_6[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_2 = var_4 - var_5;\n  var_6 = ptr_to_reallocate;\n  if (temp_2 < 0x10) {\n    new_ptr[1] = var_1 & 1 | var_4;\n    *(uint *)((int)new_ptr + var_4 + 4) = *(uint *)((int)new_ptr + var_4 + 4) | 1;\n  }\n  else {\n    new_ptr[1] = var_1 & 1 | var_5;\n    *(uint *)((int)new_ptr + var_5 + 4) = temp_2 | 1;\n    *(uint *)((int)new_ptr + temp_2 + var_5 + 4) = *(uint *)((int)new_ptr + temp_2 + var_5 + 4) | 1;\n    _free_r(param_lock,(int)new_ptr + var_5 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(param_lock);\n  return var_6;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "realloc_memory_000825b0",
                "param_1": "param_lock",
                "param_2": "ptr_to_reallocate",
                "param_3": "size",
                "iVar1": "temp_1",
                "piVar2": "new_ptr",
                "uVar3": "temp_2",
                "sVar4": "temp_3",
                "uVar5": "var_1",
                "iVar6": "var_2",
                "piVar7": "var_3",
                "uVar8": "var_4",
                "uVar9": "var_5",
                "piVar10": "var_6"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_malloc_r",
                "_free_r",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "allocate_memory_00082970",
            "code": "\nvoid allocateMemory_00082970(int *errorCode,intptr_t sizeToAllocate)\n\n{\n  void *allocatedMemory;\n  \n  errno = 0;\n  allocatedMemory = _sbrk(sizeToAllocate);\n  if ((allocatedMemory == (void *)0xffffffff) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "errorCode",
                "param_2": "sizeToAllocate",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nchar * copy_string_00082994(char *destination,char *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *ptr_variable_3;\n  uint *ptr_variable_4;\n  uint current_uint;\n  uint next_uint;\n  uint *ptr_variable_7;\n  uint *ptr_variable_8;\n  char *dest_ptr;\n  bool boolean_var;\n  \n  dest_ptr = destination;\n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *source;\n      *dest_ptr = current_char;\n      source = source + 1;\n      dest_ptr = dest_ptr + 1;\n    } while (current_char != '\\0');\n    return destination;\n  }\n  ptr_variable_8 = (uint *)destination;\n  if (((uint)source & 3) != 0) {\n    ptr_variable_4 = (uint *)source;\n    if (((uint)source & 1) != 0) {\n      ptr_variable_4 = (uint *)(source + 1);\n      current_char = *source;\n      ptr_variable_8 = (uint *)(destination + 1);\n      *destination = current_char;\n      if (current_char == '\\0') {\n        return destination;\n      }\n    }\n    source = (char *)ptr_variable_4;\n    if (((uint)ptr_variable_4 & 2) != 0) {\n      source = (char *)((int)ptr_variable_4 + 2);\n      current_short = *(ushort *)ptr_variable_4;\n      boolean_var = (current_short & 0xff) == 0;\n      if (boolean_var) {\n        *(char *)ptr_variable_8 = (char)current_short;\n      }\n      else {\n        *(ushort *)ptr_variable_8 = current_short;\n        boolean_var = (current_short & 0xff00) == 0;\n        ptr_variable_8 = (uint *)((int)ptr_variable_8 + 2);\n      }\n      if (boolean_var) {\n        return destination;\n      }\n    }\n  }\n  current_uint = *(uint *)source;\n  ptr_variable_4 = (uint *)((int)source + 4);\n  ptr_variable_7 = ptr_variable_8;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    ptr_variable_7 = ptr_variable_8 + 1;\n    *ptr_variable_8 = current_uint;\n    ptr_variable_4 = (uint *)((int)source + 8);\n    current_uint = *(uint *)((int)source + 4);\n  }\n  while( true ) {\n    ptr_variable_3 = ptr_variable_4 + 1;\n    next_uint = *ptr_variable_4;\n    ptr_variable_8 = ptr_variable_7;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    ptr_variable_8 = ptr_variable_7 + 1;\n    *ptr_variable_7 = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    ptr_variable_4 = ptr_variable_4 + 2;\n    current_uint = *ptr_variable_3;\n    ptr_variable_7 = ptr_variable_7 + 2;\n    *ptr_variable_8 = next_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)ptr_variable_8 = (char)current_uint;\n    next_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    ptr_variable_8 = (uint *)((int)ptr_variable_8 + 1);\n  } while (next_uint != 0);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "__dest": "destination",
                "__src": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "ptr_variable_3",
                "puVar4": "ptr_variable_4",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "ptr_variable_7",
                "puVar8": "ptr_variable_8",
                "pcVar9": "dest_ptr",
                "bVar10": "boolean_var"
            },
            "calling": [
                "copy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nsize_t countLeadingZeros_00082a50(char *inputString)\n\n{\n  size_t leadingZeros;\n  uint *ptr_uint;\n  uint tempUint;\n  bool isZero;\n  \n  ptr_uint = (uint *)((uint)inputString & 0xfffffffc);\n  leadingZeros = -((uint)inputString & 3);\n  tempUint = *ptr_uint;\n  if (((uint)inputString & 3) != 0) {\n    tempUint = tempUint | 0xffffffffU >> ((leadingZeros + 4 & 0x1f) << 3);\n  }\n  while (ptr_uint = ptr_uint + 1, (tempUint + 0xfefefeff & ~tempUint & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    tempUint = *ptr_uint;\n  }\n  isZero = (tempUint & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (tempUint & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (tempUint & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "__s": "inputString",
                "sVar1": "leadingZeros",
                "puVar2": "ptr_uint",
                "uVar3": "tempUint",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ab0": {
            "entrypoint": "0x00082ab0",
            "current_name": "kill_process_00082ab0",
            "code": "\nint killProcess_00082ab0(targetPID_t targetPID,int signalNumber)\n\n{\n  int result;\n  \n  result = _kill_r(_impure_ptr,targetPID,signalNumber);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ab0": "kill_process_00082ab0",
                "__pid": "targetPID",
                "__sig": "signalNumber",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "_kill_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "write_to_file_00082ac0",
            "code": "\nint writeToFile_00082ac0(undefined4 stream,int fileDescriptor,int **bufferArray)\n\n{\n  int *currentBuffer;\n  int result;\n  int *remainingBuffer;\n  uint bufferIndex;\n  undefined4 *currentChar;\n  uint bufferSize;\n  uint numBuffers;\n  \n  if (-1 < *(int *)(fileDescriptor + 100) << 0x12) {\n    result = __sfvwrite_r();\n    bufferArray[2] = (int *)0x0;\n    bufferArray[1] = (int *)0x0;\n    return result;\n  }\n  remainingBuffer = bufferArray[2];\n  currentBuffer = *bufferArray;\n  while (remainingBuffer != (int *)0x0) {\n    bufferSize = currentBuffer[1];\n    numBuffers = bufferSize >> 2;\n    if (numBuffers != 0) {\n      currentChar = (undefined4 *)(*currentBuffer + -4);\n      bufferIndex = 0;\n      do {\n        currentChar = currentChar + 1;\n        result = _fputwc_r(stream,*currentChar,fileDescriptor);\n        bufferIndex = bufferIndex + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (numBuffers != bufferIndex);\n      remainingBuffer = bufferArray[2];\n    }\n    remainingBuffer = (int *)((int)remainingBuffer - (bufferSize & 0xfffffffc));\n    bufferArray[2] = remainingBuffer;\n    currentBuffer = currentBuffer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  bufferArray[2] = (int *)0x0;\n  bufferArray[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "write_to_file_00082ac0",
                "param_1": "stream",
                "param_2": "fileDescriptor",
                "param_3": "bufferArray",
                "piVar1": "currentBuffer",
                "iVar2": "result",
                "piVar3": "remainingBuffer",
                "uVar4": "bufferIndex",
                "puVar5": "currentChar",
                "uVar6": "bufferSize",
                "uVar7": "numBuffers"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fputwc_r",
                "__sfvwrite_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_00082b38(int strBuffer,int formatBuffer,int *******formatSpecifier,int **args)\n\n{\n  bool isLengthModifier;\n  bool isSignSpecifier;\n  bool isAlternateForm;\n  char sign;\n  bool hasZeroPadding;\n  void *ptrBuffer;\n  int ********pptrBufferArray;\n  int *ptrIntBuffer;\n  int result;\n  char baseCharacter;\n  int *******currentFormatSpecifier;\n  uint digit;\n  int **pptrArg;\n  uint formatFlags;\n  uint currentChar;\n  int i;\n  int ********ptempBufferArray;\n  int tempBufferIndex;\n  int *******remainingFormatSpecifier;\n  int *ptrArg1;\n  int *******startFormatSpecifier;\n  uint multiplier;\n  int *piVar23;\n  int *******pppppppiVar24;\n  undefined4 quotient;\n  int ********stringValue;\n  bool useShortArg;\n  longlong combinedArg;\n  int *******currentArgLength;\n  int *******maxArgLength;\n  int **ptrArgArray;\n  int totalLength;\n  char *intBuffer;\n  char alternateFormCharacter;\n  undefined zeroPadCharacter;\n  undefined basePrefix;\n  int ********tempBufferArray;\n  int tempBufferIndex;\n  int *******formattedStrLength;\n  undefined baseCharacter;\n  char zeroPaddingChar;\n  undefined zeroPadChar;\n  undefined tempBuffer [4];\n  int *******tempBufferArray [16];\n  \n  if ((strBuffer != 0) && (*(int *)(strBuffer + 0x38) == 0)) {\n    stringValueinit();\n  }\n  formatFlags = (uint)*(ushort *)(formatBuffer + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatBuffer + 0xc) << 0x12)) {\n    formatFlags = formatFlags | 0x2000;\n    *(short *)(formatBuffer + 0xc) = (short)formatFlags;\n    *(uint *)(formatBuffer + 100) = *(uint *)(formatBuffer + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlags << 0x1c) < 0) && (*(int *)(formatBuffer + 0x10) != 0)) {\n    if ((formatFlags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = stringValuewsetup_r(strBuffer,formatBuffer);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatBuffer + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(formatBuffer + 0xe)) {\n    result = stringValuebprintf(strBuffer,formatBuffer,formatSpecifier,args);\n    return result;\n  }\nLAB_00082b8a:\n  intBuffer = (char *)0x0;\n  formattedStrLength = (int *******)0x0;\n  tempBufferIndex = 0;\n  totalLength = 0;\n  pptrBufferArray = (int ********)tempBuffer;\n  ptrArgArray = args;\n  tempBufferArray = (int ********)tempBuffer;\nLAB_00082b9e:\n  currentFormatSpecifier = formatSpecifier;\n  if ((*(char *)formatSpecifier != '\\0') && (*(char *)formatSpecifier != '%')) {\n    do {\n      currentFormatSpecifier = (int *******)((int)currentFormatSpecifier + 1);\n      if (*(char *)currentFormatSpecifier == '\\0') break;\n    } while (*(char *)currentFormatSpecifier != '%');\n    startFormatSpecifier = (int *******)((int)currentFormatSpecifier - (int)formatSpecifier);\n    if (startFormatSpecifier != (int *******)0x0) {\n      tempBufferIndex = tempBufferIndex + 1;\n      formattedStrLength = (int *******)((int)formattedStrLength + (int)startFormatSpecifier);\n      *pptrBufferArray = formatSpecifier;\n      pptrBufferArray[1] = startFormatSpecifier;\n      if (tempBufferIndex < 8) {\n        pptrBufferArray = pptrBufferArray + 2;\n      }\n      else {\n        if (formattedStrLength == (int *******)0x0) {\n          totalLength = totalLength + (int)startFormatSpecifier;\n          tempBufferIndex = 0;\n          pptrBufferArray = (int ********)tempBuffer;\n          goto LAB_00082bee;\n        }\n        result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n        pptrBufferArray = (int ********)tempBuffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      totalLength = totalLength + (int)startFormatSpecifier;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentFormatSpecifier != '\\0') {\n    alternateFormCharacter = '\\0';\n    currentChar = (uint)*(byte *)((int)currentFormatSpecifier + 1);\n    formatFlags = 0;\n    hasZeroPadding = false;\n    isSignSpecifier = false;\n    isLengthModifier = false;\n    isAlternateForm = false;\n    useShortArg = false;\n    startFormatSpecifier = (int *******)0x0;\n    maxArgLength = (int *******)0xffffffff;\n    formatSpecifier = (int *******)((int)currentFormatSpecifier + 1);\nLAB_00082c12:\n    formatSpecifier = (int *******)((int)formatSpecifier + 1);\nLAB_00082c16:\n    switch(currentChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (currentChar != 0) {\n        currentArgLength = (int *******)0x1;\n        maxArgLength = (int *******)0x1;\n        stringValue = (int ********)&baseCharacter;\n        baseCharacter = (char)currentChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isAlternateForm = true;\n      currentChar = (uint)*(byte *)formatSpecifier;\n      goto LAB_00082c12;\n    case 0x2a:\n      startFormatSpecifier = (int *******)*ptrArgArray;\n      ptrArgArray = ptrArgArray + 1;\n      if ((int)startFormatSpecifier < 0) {\n        startFormatSpecifier = (int *******)-(int)startFormatSpecifier;\n        goto switchD_00082c20_caseD_2d;\n      }\n      currentChar = (uint)*(byte *)formatSpecifier;\n      goto LAB_00082c12;\n    case 0x2b:\n      currentChar = (uint)*(byte *)formatSpecifier;\n      alternateFormCharacter = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      formatFlags = formatFlags | 4;\n      currentChar = (uint)*(byte *)formatSpecifier;\n      goto LAB_00082c12;\n    case 0x2e:\n      currentChar = (uint)*(byte *)formatSpecifier;\n      currentFormatSpecifier = (int *******)((int)formatSpecifier + 1);\n      if (currentChar == 0x2a) {\n        currentChar = (uint)*(byte *)((int)formatSpecifier + 1);\n        maxArgLength = (int *******)*ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        formatSpecifier = currentFormatSpecifier;\n        if ((int)maxArgLength < 0) {\n          maxArgLength = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = currentChar - 0x30;\n      if (digit < 10) {\n        multiplier = 0;\n        do {\n          formatSpecifier = (int *******)((int)currentFormatSpecifier + 1);\n          currentChar = (uint)*(byte *)currentFormatSpecifier;\n          multiplier = digit + multiplier * 10;\n          digit = currentChar - 0x30;\n          currentFormatSpecifier = formatSpecifier;\n        } while (digit < 10);\n        maxArgLength = (int *******)(multiplier | (int)multiplier >> 0x1f);\n      }\n      else {\n        maxArgLength = (int *******)0x0;\n        formatSpecifier = currentFormatSpecifier;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      formatFlags = formatFlags | 0x80;\n      currentChar = (uint)*(byte *)formatSpecifier;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isSignSpecifier = true;\n      if (isLengthModifier == false) goto LAB_00083028;\nLAB_00082e98:\n      ptrArgArray = (int **)((int)ptrArgArray + 7U & 0xfffffff8);\n      ptrArg1 = *ptrArgArray;\n      piVar23 = ptrArgArray[1];\n      ptrArgArray = ptrArgArray + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isSignSpecifier = true;\n      if (isLengthModifier != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isSignSpecifier << 4;\n      i = (uint)isLengthModifier << 5;\n      if ((isSignSpecifier == 0) && (i = (uint)useShortArg << 6, useShortArg != 0)) {\n        ptrArg1 = (int *)(uint)*(ushort *)ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        piVar23 = (int *)0x0;\n      }\n      else {\n        result = i;\n        ptrArg1 = *ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        piVar23 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isSignSpecifier = true;\n      if (isLengthModifier != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isSignSpecifier) || (useShortArg == false)) {\n        result = 1;\n        ptrArg1 = *ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        piVar23 = (int *)0x0;\n      }\n      else {\n        piVar23 = (int *)0x0;\n        ptrArg1 = (int *)(uint)*(ushort *)ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      intBuffer = \"0123456789ABCDEF\";\n      if (isLengthModifier == false) goto LAB_00083196;\nLAB_00082fb6:\n      pptrArg = (int **)((int)ptrArgArray + 7U & 0xfffffff8);\n      ptrArgArray = pptrArg + 2;\n      ptrArg1 = *pptrArg;\n      piVar23 = pptrArg[1];\n      goto LAB_00082fca;\n    case 99:\n      ptrArg1 = *ptrArgArray;\n      ptrArgArray = ptrArgArray + 1;\n      currentArgLength = (int *******)0x1;\n      baseCharacter = SUB41(ptrArg1,0);\n      maxArgLength = (int *******)0x1;\n      stringValue = (int ********)&baseCharacter;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLengthModifier != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isSignSpecifier == false) && (useShortArg != false)) {\n        ptrArg1 = (int *)(int)*(short *)ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        piVar23 = (int *)((int)ptrArg1 >> 0x1f);\n      }\n      else {\n        ptrArg1 = *ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        piVar23 = (int *)((int)ptrArg1 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar23 < 0) {\n        useShortArg = ptrArg1 != (int *)0x0;\n        ptrArg1 = (int *)-(int)ptrArg1;\n        piVar23 = (int *)(-(int)piVar23 - (uint)useShortArg);\n        alternateFormCharacter = '-';\n        sign = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)maxArgLength) {\n        formatFlags = formatFlags & 0xffffff7f;\n      }\n      hasZeroPadding = false;\n      currentChar = (uint)ptrArg1 | (uint)piVar23;\n      result = 1;\n      sign = alternateFormCharacter;\n      goto joined_r0x00082d78;\n    case 0x68:\n      useShortArg = true;\n      currentChar = (uint)*(byte *)formatSpecifier;\n      goto LAB_00082c12;\n    case 0x6c:\n      currentChar = (uint)*(byte *)formatSpecifier;\n      if (currentChar == 0x6c) {\n        isLengthModifier = true;\n        currentChar = (uint)*(byte *)((int)formatSpecifier + 1);\n        formatSpecifier = (int *******)((int)formatSpecifier + 1);\n      }\n      else {\n        isSignSpecifier = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLengthModifier == false) {\n        if (isSignSpecifier == false) {\n          if (useShortArg) {\n            ptrArg1 = *ptrArgArray;\n            ptrArgArray = ptrArgArray + 1;\n            *(short *)ptrArg1 = (short)totalLength;\n          }\n          else {\n            ptrArg1 = *ptrArgArray;\n            ptrArgArray = ptrArgArray + 1;\n            *ptrArg1 = totalLength;\n          }\n        }\n        else {\n          ptrArg1 = *ptrArgArray;\n          ptrArgArray = ptrArgArray + 1;\n          *ptrArg1 = totalLength;\n        }\n      }\n      else {\n        ptrArg1 = *ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        *ptrArg1 = totalLength;\n        ptrArg1[1] = totalLength >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLengthModifier == false) goto LAB_00082f2a;\nLAB_00082d42:\n      pptrArg = (int **)((int)ptrArgArray + 7U & 0xfffffff8);\n      ptrArgArray = pptrArg + 2;\n      ptrArg1 = *pptrArg;\n      piVar23 = pptrArg[1];\n      result = 0;\n      break;\n    case 0x70:\n      ptrArg1 = *ptrArgArray;\n      ptrArgArray = ptrArgArray + 1;\n      basePrefix = 0x78;\n      hasZeroPadding = true;\n      piVar23 = (int *)0x0;\n      zeroPadCharacter = 0x30;\n      intBuffer = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLengthModifier = true;\n      currentChar = (uint)*(byte *)formatSpecifier;\n      goto LAB_00082c12;\n    case 0x73:\n      stringValue = (int ********)*ptrArgArray;\n      alternateFormCharacter = '\\0';\n      ptrArgArray = ptrArgArray + 1;\n      if (stringValue != (int ********)0x0) {\n        if ((int)maxArgLength < 0) {\n          maxArgLength = (int *******)strlen((char *)stringValue);\n          currentFormatSpecifier = (int *******)0x0;\n          sign = alternateFormCharacter;\n        }\n        else {\n          ptrBuffer = memchr(stringValue,0,(size_t)maxArgLength);\n          sign = alternateFormCharacter;\n          if (ptrBuffer == (void *)0x0) {\n            currentFormatSpecifier = (int *******)0x0;\n          }\n          else {\n            remainingFormatSpecifier = (int *******)((int)ptrBuffer - (int)stringValue);\n            if ((int)maxArgLength <= (int)(int *******)((int)ptrBuffer - (int)stringValue)) {\n              remainingFormatSpecifier = maxArgLength;\n            }\n            currentFormatSpecifier = (int *******)0x0;\n            maxArgLength = remainingFormatSpecifier;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < maxArgLength) {\n        maxArgLength = (int *******)0x6;\n      }\n      currentArgLength = (int *******)((uint)maxArgLength & ~((int)maxArgLength >> 0x1f));\n      stringValue = (int ********)&UNK_00085840;\nLAB_00083012:\n      alternateFormCharacter = '\\0';\n      currentFormatSpecifier = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLengthModifier) goto LAB_00082f7c;\nLAB_00082e62:\n      pptrArg = (int **)((int)ptrArgArray + 7U & 0xfffffff8);\n      ptrArgArray = pptrArg + 2;\n      ptrArg1 = *pptrArg;\n      piVar23 = pptrArg[1];\n      result = 1;\n      break;\n    case 0x78:\n      intBuffer = \"0123456789abcdef\";\n      if (isLengthModifier != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isSignSpecifier == false) && (useShortArg != false)) {\n        piVar23 = (int *)0x0;\n        ptrArg1 = (int *)(uint)*(ushort *)ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n      }\n      else {\n        ptrArg1 = *ptrArgArray;\n        ptrArgArray = ptrArgArray + 1;\n        piVar23 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isAlternateForm) && (((uint)ptrArg1 | (uint)piVar23) != 0)) {\n        hasZeroPadding = true;\n        zeroPadCharacter = 0x30;\n        result = 2;\n        basePrefix = (char)currentChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    alternateFormCharacter = '\\0';\n    sign = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)maxArgLength) {\n      formatFlags = formatFlags & 0xffffff7f;\n    }\n    currentChar = (uint)ptrArg1 | (uint)piVar23;\njoined_r0x00082d78:\n    combinedArg = CONCAT44(piVar23,ptrArg1);\n    currentFormatSpecifier = maxArgLength;\n    if ((currentChar == 0) && (maxArgLength == (int *******)0x0)) {\n      stringValue = (int ********)tempBuffer;\n      if ((result != 0) || (!isAlternateForm)) goto LAB_00082da0;\n      stringValue = (int ********)(&zeroPaddingChar + 1);\n      zeroPadChar = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (piVar23 != (int *)0x0 || (int *)0x9 < ptrArg1) {\n        ptempBufferArray = (int ********)(&zeroPaddingChar + 1);\n        do {\n          stringValue = ptempBufferArray;\n          quotient = (undefined4)((ulonglong)combinedArg >> 0x20);\n          baseCharacter = '\\n';\n          __aeabi_uldivmod((int)combinedArg,quotient,10,0);\n          *(char *)stringValue = baseCharacter + '0';\n          combinedArg = __aeabi_uldivmod((int)combinedArg,quotient,10,0);\n          ptempBufferArray = (int ********)((int)stringValue + -1);\n        } while (combinedArg != 0);\n        maxArgLength = (int *******)((int)tempBuffer - (int)stringValue);\n        goto LAB_00082da0;\n      }\n      zeroPadChar = (char)ptrArg1 + '0';\n      stringValue = (int ********)(&zeroPaddingChar + 1);\n      goto LAB_0008351e;\n    }\n    ptempBufferArray = (int ********)(&zeroPaddingChar + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      stringValue = ptempBufferArray;\n      currentChar = (uint)ptrArg1 & 0xf;\n      ptrArg1 = (int *)((uint)ptrArg1 >> 4 | (int)piVar23 << 0x1c);\n      piVar23 = (int *)((uint)piVar23 >> 4);\n      *(char *)stringValue = intBuffer[currentChar];\n      ptempBufferArray = (int ********)((int)stringValue + -1);\n    } while (((uint)ptrArg1 | (uint)piVar23) != 0);\n    maxArgLength = (int *******)((int)tempBuffer - (int)stringValue);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (formattedStrLength != (int *******)0x0) {\n    stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(formatBuffer + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalLength;\nLAB_0008337e:\n  do {\n    stringValue = ptempBufferArray;\n    ptrIntBuffer = (int *)((uint)ptrArg1 >> 3 | (int)piVar23 << 0x1d);\n    piVar23 = (int *)((uint)piVar23 >> 3);\n    result = ((uint)ptrArg1 & 7) + 0x30;\n    *(char *)stringValue = (char)result;\n    ptempBufferArray = (int ********)((int)stringValue + -1);\n    ptrArg1 = ptrIntBuffer;\n  } while (((uint)ptrIntBuffer | (uint)piVar23) != 0);\n  if (isAlternateForm) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      maxArgLength = (int *******)((int)tempBuffer - (int)stringValue);\n    }\n    else {\n      *(undefined *)((int)stringValue + -1) = 0x30;\n      stringValue = ptempBufferArray;\n      maxArgLength = (int *******)((int)tempBuffer - (int)ptempBufferArray);\n    }\n  }\n  else {\nLAB_0008351e:\n    maxArgLength = (int *******)((int)tempBuffer - (int)stringValue);\n  }\nLAB_00082da0:\n  currentArgLength = maxArgLength;\n  if ((int)maxArgLength < (int)currentFormatSpecifier) {\n    currentArgLength = currentFormatSpecifier;\n  }\n  if (sign != '\\0') {\n    currentArgLength = (int *******)((int)currentArgLength + 1);\n  }\nLAB_00082dba:\n  if (hasZeroPadding) {\n    currentArgLength = (int *******)((int)currentArgLength + 2);\n  }\n  if ((formatFlags == 0) &&\n     (remainingFormatSpecifier = (int *******)((int)startFormatSpecifier - (int)currentArgLength), 0 < (int)remainingFormatSpecifier)) {\n    if ((int)remainingFormatSpecifier < 0x11) {\n      tempBufferIndex = tempBufferIndex + 1;\n    }\n    else {\n      do {\n        pppppppiVar24 = remainingFormatSpecifier;\n        result = tempBufferIndex + 1;\n        formattedStrLength = formattedStrLength + 4;\n        *pptrBufferArray = (int *******)0x85808;\n        pptrBufferArray[1] = (int *******)0x10;\n        if (result < 8) {\n          i = tempBufferIndex + 2;\n          pptrBufferArray = pptrBufferArray + 2;\n          tempBufferIndex = result;\n        }\n        else if (formattedStrLength == (int *******)0x0) {\n          i = 1;\n          pptrBufferArray = (int ********)tempBuffer;\n          tempBufferIndex = 0;\n        }\n        else {\n          tempBufferIndex = result;\n          result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n          if (result != 0) goto LAB_000833de;\n          i = tempBufferIndex + 1;\n          pptrBufferArray = (int ********)tempBuffer;\n        }\n        remainingFormatSpecifier = pppppppiVar24 + -4;\n      } while (0x10 < (int)remainingFormatSpecifier);\n      remainingFormatSpecifier = pppppppiVar24 + -4;\n      tempBufferIndex = i;\n    }\n    formattedStrLength = (int *******)((int)formattedStrLength + (int)remainingFormatSpecifier);\n    *pptrBufferArray = (int *******)0x85808;\n    pptrBufferArray[1] = remainingFormatSpecifier;\n    if (tempBufferIndex < 8) {\n      result = tempBufferIndex + 1;\n      pptrBufferArray = pptrBufferArray + 2;\n    }\n    else if (formattedStrLength == (int *******)0x0) {\n      result = 1;\n      tempBufferIndex = 0;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n    else {\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n      result = tempBufferIndex + 1;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n  }\n  else {\n    result = tempBufferIndex + 1;\n  }\n  i = result;\n  if (alternateFormCharacter != '\\0') {\n    formattedStrLength = (int *******)((int)formattedStrLength + 1);\n    i = 1;\n    *pptrBufferArray = (int *******)&alternateFormCharacter;\n    pptrBufferArray[1] = (int *******)0x1;\n    tempBufferIndex = result;\n    if (result < 8) {\n      i = result + 1;\n      pptrBufferArray = pptrBufferArray + 2;\n    }\n    else if (formattedStrLength == (int *******)0x0) {\n      tempBufferIndex = 0;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n    else {\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n      i = tempBufferIndex + 1;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n  }\n  result = i;\n  tempBufferIndex = tempBufferIndex;\n  if (hasZeroPadding) {\n    formattedStrLength = (int *******)((int)formattedStrLength + 2);\n    *pptrBufferArray = (int *******)&zeroPadCharacter;\n    pptrBufferArray[1] = (int *******)0x2;\n    if (i < 8) {\n      result = i + 1;\n      tempBufferIndex = i;\n      pptrBufferArray = pptrBufferArray + 2;\n    }\n    else if (formattedStrLength == (int *******)0x0) {\n      result = 1;\n      tempBufferIndex = 0;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n    else {\n      tempBufferIndex = i;\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n      result = tempBufferIndex + 1;\n      tempBufferIndex = tempBufferIndex;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n  }\n  tempBufferIndex = tempBufferIndex;\n  if ((formatFlags == 0x80) &&\n     (remainingFormatSpecifier = (int *******)((int)startFormatSpecifier - (int)currentArgLength), 0 < (int)remainingFormatSpecifier)) {\n    if (0x10 < (int)remainingFormatSpecifier) {\n      do {\n        while( true ) {\n          pppppppiVar24 = remainingFormatSpecifier;\n          tempBufferIndex = tempBufferIndex + 1;\n          formattedStrLength = formattedStrLength + 4;\n          *pptrBufferArray = (int *******)&zeroes_6718;\n          pptrBufferArray[1] = (int *******)0x10;\n          if (7 < tempBufferIndex) break;\n          result = tempBufferIndex + 2;\n          pptrBufferArray = pptrBufferArray + 2;\nLAB_0008348e:\n          tempBufferIndex = tempBufferIndex;\n          remainingFormatSpecifier = pppppppiVar24 + -4;\n          if ((int)(pppppppiVar24 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (formattedStrLength != (int *******)0x0) {\n          result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n          if (result == 0) {\n            result = tempBufferIndex + 1;\n            pptrBufferArray = (int ********)tempBuffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        tempBufferIndex = 0;\n        remainingFormatSpecifier = pppppppiVar24 + -4;\n        pptrBufferArray = (int ********)tempBuffer;\n      } while (0x10 < (int)(pppppppiVar24 + -4));\nLAB_000834b4:\n      remainingFormatSpecifier = pppppppiVar24 + -4;\n    }\n    formattedStrLength = (int *******)((int)formattedStrLength + (int)remainingFormatSpecifier);\n    *pptrBufferArray = (int *******)&zeroes_6718;\n    pptrBufferArray[1] = remainingFormatSpecifier;\n    tempBufferIndex = result;\n    if (result < 8) {\n      result = result + 1;\n      pptrBufferArray = pptrBufferArray + 2;\n    }\n    else if (formattedStrLength == (int *******)0x0) {\n      result = 1;\n      tempBufferIndex = 0;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n    else {\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n      result = tempBufferIndex + 1;\n      pptrBufferArray = (int ********)tempBuffer;\n    }\n  }\n  currentFormatSpecifier = (int *******)((int)currentFormatSpecifier - (int)maxArgLength);\n  ptempBufferArray = (int ********)tempBuffer;\n  if ((int)currentFormatSpecifier < 1) {\nLAB_000832c6:\n    formattedStrLength = (int *******)((int)formattedStrLength + (int)maxArgLength);\n    *pptrBufferArray = (int *******)stringValue;\n    pptrBufferArray[1] = maxArgLength;\n    maxArgLength = formattedStrLength;\n    tempBufferIndex = result;\n    if (result < 8) goto LAB_0008345a;\n    if (formattedStrLength == (int *******)0x0) {\n      tempBufferIndex = 0;\n    }\n    else {\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    i = tempBufferIndex;\n    if (0x10 < (int)currentFormatSpecifier) {\n      do {\n        while( true ) {\n          remainingFormatSpecifier = currentFormatSpecifier;\n          tempBufferIndex = i + 1;\n          formattedStrLength = formattedStrLength + 4;\n          *pptrBufferArray = (int *******)&zeroes_6718;\n          pptrBufferArray[1] = (int *******)0x10;\n          if (7 < tempBufferIndex) break;\n          result = i + 2;\n          pptrBufferArray = pptrBufferArray + 2;\nLAB_00083282:\n          i = tempBufferIndex;\n          currentFormatSpecifier = remainingFormatSpecifier + -4;\n          if ((int)(remainingFormatSpecifier + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (formattedStrLength != (int *******)0x0) {\n          result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n          if (result == 0) {\n            result = tempBufferIndex + 1;\n            pptrBufferArray = (int ********)tempBuffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        pptrBufferArray = (int ********)tempBuffer;\n        i = 0;\n        currentFormatSpecifier = remainingFormatSpecifier + -4;\n      } while (0x10 < (int)(remainingFormatSpecifier + -4));\nLAB_000832aa:\n      currentFormatSpecifier = remainingFormatSpecifier + -4;\n    }\n    formattedStrLength = (int *******)((int)formattedStrLength + (int)currentFormatSpecifier);\n    *pptrBufferArray = (int *******)&zeroes_6718;\n    pptrBufferArray[1] = currentFormatSpecifier;\n    if (result < 8) {\n      result = result + 1;\n      pptrBufferArray = pptrBufferArray + 2;\n      goto LAB_000832c6;\n    }\n    if (formattedStrLength != (int *******)0x0) {\n      tempBufferIndex = result;\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n      result = tempBufferIndex + 1;\n      pptrBufferArray = (int ********)tempBuffer;\n      goto LAB_000832c6;\n    }\n    tempBufferArray[0] = maxArgLength;\n    tempBufferIndex = 1;\n    pptrBufferArray = (int ********)tempBuffer;\n    tempBuffer = (undefined  [4])stringValue;\nLAB_0008345a:\n    ptempBufferArray = pptrBufferArray + 2;\n    formattedStrLength = maxArgLength;\n  }\n  if (((formatFlags & 4) != 0) &&\n     (currentFormatSpecifier = (int *******)((int)startFormatSpecifier - (int)currentArgLength), 0 < (int)currentFormatSpecifier)) {\n    result = tempBufferIndex;\n    if ((int)currentFormatSpecifier < 0x11) {\n      i = tempBufferIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          tempBufferIndex = result + 1;\n          formattedStrLength = formattedStrLength + 4;\n          *ptempBufferArray = (int *******)0x85808;\n          ptempBufferArray[1] = (int *******)0x10;\n          if (7 < tempBufferIndex) break;\n          i = result + 2;\n          ptempBufferArray = ptempBufferArray + 2;\nLAB_00083316:\n          currentFormatSpecifier = currentFormatSpecifier + -4;\n          result = tempBufferIndex;\n          if ((int)currentFormatSpecifier < 0x11) goto LAB_0008333e;\n        }\n        if (formattedStrLength != (int *******)0x0) {\n          result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n          if (result == 0) {\n            i = tempBufferIndex + 1;\n            ptempBufferArray = (int ********)tempBuffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentFormatSpecifier = currentFormatSpecifier + -4;\n        i = 1;\n        result = 0;\n        ptempBufferArray = (int ********)tempBuffer;\n      } while (0x10 < (int)currentFormatSpecifier);\n    }\nLAB_0008333e:\n    formattedStrLength = (int *******)((int)formattedStrLength + (int)currentFormatSpecifier);\n    *ptempBufferArray = (int *******)0x85808;\n    ptempBufferArray[1] = currentFormatSpecifier;\n    tempBufferIndex = i;\n    if (7 < i) {\n      if (formattedStrLength == (int *******)0x0) {\n        if ((int)currentArgLength < (int)startFormatSpecifier) {\n          currentArgLength = startFormatSpecifier;\n        }\n        totalLength = totalLength + (int)currentArgLength;\n        goto LAB_00083422;\n      }\n      result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)currentArgLength < (int)startFormatSpecifier) {\n    currentArgLength = startFormatSpecifier;\n  }\n  totalLength = totalLength + (int)currentArgLength;\n  if ((formattedStrLength != (int *******)0x0) &&\n     (result = stringValueprint_r_part_0(strBuffer,formatBuffer,&tempBufferArray), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  tempBufferIndex = 0;\n  pptrBufferArray = (int ********)tempBuffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = currentChar - 0x30;\n  startFormatSpecifier = (int *******)0x0;\n  currentFormatSpecifier = formatSpecifier;\n  do {\n    formatSpecifier = (int *******)((int)currentFormatSpecifier + 1);\n    currentChar = (uint)*(byte *)currentFormatSpecifier;\n    startFormatSpecifier = (int *******)(digit + (int)startFormatSpecifier * 10);\n    digit = currentChar - 0x30;\n    currentFormatSpecifier = formatSpecifier;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  currentChar = (uint)*(byte *)formatSpecifier;\n  if (alternateFormCharacter == '\\0') {\n    alternateFormCharacter = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "format_string_00082b38",
                "param_1": "strBuffer",
                "param_2": "formatBuffer",
                "param_3": "formatSpecifier",
                "param_4": "args",
                "bVar1": "isLengthModifier",
                "bVar2": "isSignSpecifier",
                "bVar3": "isAlternateForm",
                "cVar4": "sign",
                "bVar5": "hasZeroPadding",
                "pvVar6": "ptrBuffer",
                "pppppppiVar7": "ptrBufferArray",
                "piVar8": "ptrIntBuffer",
                "iVar9": "result",
                "cVar10": "baseCharacter",
                "pppppppiVar11": "currentFormatSpecifier",
                "uVar12": "digit",
                "piVar13": "ptrArg",
                "uVar14": "formatFlags",
                "uVar15": "currentChar",
                "uVar22": "multiplier",
                "iVar16": "i",
                "pppppppiVar17": "tempBufferArray",
                "iVar18": "tempBufferIndex",
                "pppppppiVar19": "remainingFormatSpecifier",
                "piVar20": "ptrArg1",
                "pppppppiVar21": "startFormatSpecifier",
                "uVar25": "quotient",
                "__s": "stringValue",
                "bVar26": "useShortArg",
                "lVar27": "combinedArg",
                "local_dc": "currentArgLength",
                "local_d4": "maxArgLength",
                "local_c8": "ptrArgArray",
                "local_c4": "totalLength",
                "local_c0": "intBuffer",
                "local_a1": "alternateFormCharacter",
                "local_a0": "zeroPadCharacter",
                "local_9f": "basePrefix",
                "local_9c": "tempBufferArray",
                "local_98": "tempBufferIndex",
                "local_94": "formattedStrLength",
                "local_90": "baseCharacter",
                "cStack_6a": "zeroPaddingChar",
                "local_69": "zeroPadChar",
                "local_68": "tempBuffer",
                "local_64": "tempBufferArray"
            },
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "called": [
                "memchr",
                "__sbprintf",
                "__swsetup_r",
                "__sprint_r.part.0",
                "strlen",
                "__sinit",
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "print_and_check_0008378c",
            "code": "\nint print_and_check_0008378c(undefined4 output_stream,int data)\n\n{\n  int printf_result;\n  int flush_result;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort data_value;\n  undefined2 data_length;\n  undefined *buffer_pointer;\n  undefined4 buffer_size_2;\n  undefined4 some_value;\n  undefined4 data_offset;\n  undefined4 another_value;\n  undefined4 another_variable;\n  undefined stack_buffer [1024];\n  \n  another_variable = *(undefined4 *)(data + 100);\n  data_offset = *(undefined4 *)(data + 0x1c);\n  data_length = *(undefined2 *)(data + 0xe);\n  another_value = *(undefined4 *)(data + 0x24);\n  buffer[0] = stack_buffer;\n  data_value = *(ushort *)(data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_2 = 0x400;\n  some_value = 0;\n  buffer_pointer = buffer[0];\n  printf_result = _vfiprintf_r(output_stream,buffer);\n  if ((-1 < printf_result) && (flush_result = _fflush_r(output_stream,buffer), flush_result != 0)) {\n    printf_result = -1;\n  }\n  if ((int)((uint)data_value << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return printf_result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "print_and_check_0008378c",
                "param_1": "output_stream",
                "param_2": "data",
                "iVar1": "printf_result",
                "iVar2": "flush_result",
                "local_488": "buffer",
                "local_480": "buffer_size",
                "local_47c": "data_value",
                "local_47a": "data_length",
                "local_478": "buffer_pointer",
                "local_474": "buffer_size_2",
                "local_470": "some_value",
                "local_46c": "data_offset",
                "local_464": "another_value",
                "local_424": "another_variable",
                "auStack_420": "stack_buffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_vfiprintf_r",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_data_00083808",
            "code": "\nundefined4 processData_00083808(undefined4 *result,int *data)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint ushortVal;\n  ushort tempVar3;\n  \n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x38) == 0)) {\n    __sinit();\n  }\n  tempVar3 = *(ushort *)(data + 3);\n  ushortVal = (uint)tempVar3;\n  if ((int)(ushortVal << 0x1c) < 0) {\n    tempVar2 = data[4];\n  }\n  else {\n    if (-1 < (int)(ushortVal << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = tempVar3 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(ushortVal << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          _free_r(result);\n          tempVar3 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      tempVar2 = data[4];\n      tempVar3 = tempVar3 & 0xffdb;\n      *data = tempVar2;\n      data[1] = 0;\n    }\n    else {\n      tempVar2 = data[4];\n    }\n    *(ushort *)(data + 3) = tempVar3 | 8;\n    ushortVal = (uint)(tempVar3 | 8);\n  }\n  if ((tempVar2 == 0) && ((ushortVal & 0x280) != 0x200)) {\n    __smakebuf_r(result,data);\n    ushortVal = (uint)*(ushort *)(data + 3);\n    tempVar2 = data[4];\n  }\n  if ((ushortVal & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(ushortVal << 0x1e)) {\n      tempVar1 = data[5];\n    }\n    data[2] = tempVar1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "ushortVal",
                "uVar4": "tempVar3"
            },
            "calling": [
                "__swbuf_r",
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__sinit",
                "__smakebuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000838cc": {
            "entrypoint": "0x000838cc",
            "current_name": "update_data_000838cc",
            "code": "\nundefined4 updateData_000838cc(int type,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 *dataArr;\n  uint count;\n  uint bitMask;\n  \n  if (DAT_20070180 == (undefined4 *)0x0) {\n    DAT_20070180 = (undefined4 *)&DAT_20070184;\n  }\n  count = DAT_20070180[1];\n  dataArr = DAT_20070180;\n  if (0x1f < (int)count) {\n    dataArr = (undefined4 *)malloc(400);\n    if (dataArr == (undefined4 *)0x0) {\n      return 0xffffffff;\n    }\n    *dataArr = DAT_20070180;\n    dataArr[1] = 0;\n    count = 0;\n    DAT_20070180 = dataArr;\n    dataArr[0x62] = 0;\n    dataArr[99] = 0;\n  }\n  if (type != 0) {\n    bitMask = 1 << (count & 0xff);\n    dataArr[count + 0x22] = data1;\n    dataArr[0x62] = dataArr[0x62] | bitMask;\n    dataArr[count + 0x42] = data2;\n    if (type == 2) {\n      dataArr[99] = bitMask | dataArr[99];\n    }\n  }\n  dataArr[1] = count + 1;\n  dataArr[count + 2] = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000838cc": "update_data_000838cc",
                "param_1": "type",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "dataArr",
                "uVar2": "count",
                "uVar3": "bitMask"
            },
            "calling": [
                "atexit",
                "__cxa_atexit"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "FUNC_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083978) */\n\nvoid FUNC_00083974(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083974": "FUNC_00083974"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "atexit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083988": {
            "entrypoint": "0x00083988",
            "current_name": "register_exit_procedure_00083988",
            "code": "\nint registerExitProcedure_00083988(functionPointer *functionPointer)\n\n{\n  int returnValue;\n  \n  returnValue = registerExitProc(0,functionPointer,0,0);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00083988": "register_exit_procedure_00083988",
                "__register_exitproc": "registerExitProc",
                "__func": "functionPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083994": {
            "entrypoint": "0x00083994",
            "current_name": "process_data_00083994",
            "code": "\nundefined4 processData_00083994(int *data,int *config)\n\n{\n  int *tempPtr;\n  int length;\n  ushort flags;\n  uint newFlags;\n  int tempVar;\n  code *callback;\n  int tempVar2;\n  \n  flags = *(ushort *)(config + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar2 = config[4];\n    if (tempVar2 == 0) {\n      return 0;\n    }\n    length = *config;\n    if ((flags & 3) == 0) {\n      tempVar = config[5];\n    }\n    else {\n      tempVar = 0;\n    }\n    *config = tempVar2;\n    length = length - tempVar2;\n    config[2] = tempVar;\n    do {\n      if (length < 1) {\n        return 0;\n      }\n      tempVar = (*(code *)config[9])(data,config[7],tempVar2,length);\n      length = length - tempVar;\n      tempVar2 = tempVar2 + tempVar;\n    } while (0 < tempVar);\nLAB_00083a54:\n    *(ushort *)(config + 3) = *(ushort *)(config + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(config + 3) = flags | 0x800;\n  if ((config[1] < 1) && (config[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)config[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  newFlags = (uint)(flags | 0x800);\n  tempVar2 = *data;\n  *data = 0;\n  if ((flags & 0x1000) == 0) {\n    length = (*callback)(data,config[7],newFlags & 0x1000,1);\n    if ((length == -1) && (tempVar = *data, tempVar != 0)) {\n      if ((tempVar == 0x1d) || (tempVar == 0x16)) {\n        *data = tempVar2;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    newFlags = (uint)*(ushort *)(config + 3);\n    callback = (code *)config[10];\n  }\n  else {\n    length = config[0x14];\n  }\n  if (((int)(newFlags << 0x1d) < 0) && (length = length - config[1], config[0xc] != 0)) {\n    length = length - config[0xf];\n  }\n  length = (*callback)(data,config[7],length,0);\n  if (length == -1) {\n    tempVar = *data;\n    if (tempVar != 0) {\n      if ((tempVar != 0x1d) && (tempVar != 0x16)) {\n        *(ushort *)(config + 3) = *(ushort *)(config + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(config + 3) = *(ushort *)(config + 3) & 0xf7ff;\n      *config = config[4];\n      config[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(config + 3) & 0xf7ff;\n    config[1] = 0;\n    *(ushort *)(config + 3) = flags;\n    *config = config[4];\n  }\n  else {\n    flags = *(ushort *)(config + 3) & 0xf7ff;\n    *config = config[4];\n    *(ushort *)(config + 3) = flags;\n    config[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    config[0x14] = length;\n  }\nLAB_00083a00:\n  tempPtr = (int *)config[0xc];\n  *data = tempVar2;\n  if (tempPtr == (int *)0x0) {\n    return 0;\n  }\n  if (tempPtr != config + 0x10) {\n    _free_r(data);\n  }\n  config[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083994": "process_data_00083994",
                "param_1": "data",
                "param_2": "config",
                "piVar1": "tempPtr",
                "iVar2": "length",
                "uVar3": "flags",
                "uVar4": "newFlags",
                "iVar5": "tempVar",
                "pcVar6": "callback",
                "iVar7": "tempVar2"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "flush_if_buffer_not_empty_00083adc",
            "code": "\nvoid flushIfBufferNotEmpty_00083adc(int bufferPointer,int streamPointer)\n\n{\n  if ((bufferPointer != 0) && (*(int *)(bufferPointer + 0x38) == 0)) {\n    initializeStream();\n  }\n  if (*(short *)(streamPointer + 0xc) == 0) {\n    return;\n  }\n  flushStream(bufferPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "flush_if_buffer_not_empty_00083adc",
                "param_1": "bufferPointer",
                "param_2": "streamPointer",
                "__sinit": "initializeStream",
                "__sflush_r": "flushStream"
            },
            "calling": [
                "__swbuf_r",
                "__sbprintf",
                "__sfvwrite_r",
                "_fclose_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b08": {
            "entrypoint": "0x00083b08",
            "current_name": "initialize_file_walk_00083b08",
            "code": "\nvoid initializeFileWalk_00083b08(undefined4 fileList)\n\n{\n  fileWalk(fileList,0x846a5);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b08": "initialize_file_walk_00083b08",
                "param_1": "fileList",
                "_fwalk": "fileWalk"
            },
            "calling": [],
            "called": [
                "_fwalk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructuresPtr)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructuresPtr + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructuresPtr + 4);\n    *(undefined4 *)(dataStructuresPtr + 0x3c) = 0x83b09;\n    *(undefined4 *)(dataStructuresPtr + 0x2e4) = 3;\n    *(int *)(dataStructuresPtr + 0x2e8) = dataStructuresPtr + 0x2ec;\n    *(undefined4 *)(dataStructuresPtr + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructuresPtr + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84441;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = 0x844bd;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructuresPtr + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84441;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = 0x844bd;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84441;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = 0x844bd;\n    *(undefined4 *)(dataStructuresPtr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructuresPtr",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "__swbuf_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "_fflush_r",
                "_fclose_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "_fclose_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c10": {
            "entrypoint": "0x00083c10",
            "current_name": "execute_fini_functions_00083c10",
            "code": "\nvoid execute_fini_functions_00083c10(void)\n\n{\n  int counter;\n  code **function_ptr;\n  \n  counter = 1;\n  function_ptr = (code **)&fini_array_end;\n  do {\n    counter = counter + -1;\n    function_ptr = function_ptr + -1;\n    (**function_ptr)();\n  } while (counter != 0);\n  _fini();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c10": "execute_fini_functions_00083c10",
                "iVar1": "counter",
                "ppcVar2": "function_ptr",
                "__fini_array_end": "fini_array_end"
            },
            "calling": [],
            "called": [
                "_fini",
                "__do_global_dtors_aux"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "convert_and_print_00083c40",
            "code": "\nuint convertAndPrint_00083c40(undefined4 mbstate,uint inputChar,byte **outputBuffer)\n\n{\n  int maxBytes;\n  uint result;\n  uint convertedChar;\n  byte *bufferEnd;\n  uint counter;\n  byte tempChar;\n  byte conversionBuffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(outputBuffer + 3) << 0x12)) {\n    *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 0x2000;\n    outputBuffer[0x19] = (byte *)((uint)outputBuffer[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (inputChar - 1 < 0xff)) {\n    convertedChar = inputChar & 0xff;\n    tempChar = (byte)convertedChar;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(mbstate,&tempChar,inputChar,outputBuffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return inputChar;\n    }\n    convertedChar = (uint)tempChar;\n  }\n  counter = 0;\n  do {\n    bufferEnd = outputBuffer[2] + -1;\n    outputBuffer[2] = bufferEnd;\n    if ((int)bufferEnd < 0) {\n      if ((int)outputBuffer[6] <= (int)bufferEnd) {\n        **outputBuffer = (byte)convertedChar;\n        bufferEnd = *outputBuffer;\n        convertedChar = (uint)*bufferEnd;\n        if (convertedChar != 10) goto LAB_00083c90;\n      }\n      maxBytes = __swbuf_r(mbstate,convertedChar,outputBuffer);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **outputBuffer = (byte)convertedChar;\n      bufferEnd = *outputBuffer;\nLAB_00083c90:\n      *outputBuffer = bufferEnd + 1;\n    }\n    if (result <= counter + 1) {\n      return inputChar;\n    }\n    convertedChar = (uint)conversionBuffer[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "convert_and_print_00083c40",
                "param_1": "mbstate",
                "param_2": "inputChar",
                "param_3": "outputBuffer",
                "iVar1": "maxBytes",
                "uVar2": "result",
                "uVar3": "convertedChar",
                "pbVar4": "bufferEnd",
                "uVar5": "counter",
                "local_1c": "tempChar",
                "abStack_1b": "conversionBuffer"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "__swbuf_r",
                "__locale_mb_cur_max",
                "_wcrtomb_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "allocate_memory_00083d00",
            "code": "\nundefined4 allocate_memory_00083d00(undefined4 mem_lock,int desired_size)\n\n{\n  int current_value;\n  uint current_size;\n  int adjusted_value;\n  \n  __malloc_lock();\n  current_size = *(uint *)(DAT_2007046c + 4) & 0xfffffffc;\n  adjusted_value = ((current_size - desired_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_value) {\n    current_value = _sbrk_r(mem_lock,0);\n    if (current_value == DAT_2007046c + current_size) {\n      current_value = _sbrk_r(mem_lock,-adjusted_value);\n      if (current_value != -1) {\n        __malloc_current_mallinfo = __malloc_current_mallinfo - adjusted_value;\n        *(uint *)(DAT_2007046c + 4) = current_size - adjusted_value | 1;\n        __malloc_unlock(mem_lock);\n        return 1;\n      }\n      adjusted_value = _sbrk_r(mem_lock,0);\n      if (0xf < adjusted_value - DAT_2007046c) {\n        __malloc_current_mallinfo = adjusted_value - __malloc_sbrk_base;\n        *(uint *)(DAT_2007046c + 4) = adjusted_value - DAT_2007046c | 1;\n      }\n    }\n  }\n  __malloc_unlock(mem_lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "mem_lock",
                "param_2": "desired_size",
                "iVar1": "current_value",
                "uVar2": "current_size",
                "iVar3": "adjusted_value"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "deallocate_memory_block_00083d9c",
            "code": "\nvoid deallocateMemoryBlock_00083d9c(undefined4 param1,int param2)\n\n{\n  undefined4 *ptr1;\n  bool bVar2;\n  uint sizeAndFlags;\n  int index;\n  int nextBlock;\n  undefined1 *currentBlock;\n  uint blockSize;\n  undefined1 *previousBlock;\n  int previousBlockIndex;\n  uint nextBlockSize;\n  \n  if (param2 == 0) {\n    return;\n  }\n  lockMemoryAllocation();\n  sizeAndFlags = *(uint *)(param2 + -4);\n  previousBlockIndex = param2 + -8;\n  blockSize = sizeAndFlags & 0xfffffffe;\n  nextBlock = previousBlockIndex + blockSize;\n  nextBlockSize = *(uint *)(nextBlock + 4) & 0xfffffffc;\n  if (DAT_2007046c == nextBlock) {\n    nextBlockSize = nextBlockSize + blockSize;\n    if (-1 < (int)(sizeAndFlags << 0x1f)) {\n      previousBlockIndex = previousBlockIndex - *(int *)(param2 + -8);\n      index = *(int *)(previousBlockIndex + 0xc);\n      nextBlock = *(int *)(previousBlockIndex + 8);\n      nextBlockSize = nextBlockSize + *(int *)(param2 + -8);\n      *(int *)(nextBlock + 0xc) = index;\n      *(int *)(index + 8) = nextBlock;\n    }\n    sizeAndFlags = trimThreshold;\n    *(uint *)(previousBlockIndex + 4) = nextBlockSize | 1;\n    DAT_2007046c = previousBlockIndex;\n    if (sizeAndFlags <= nextBlockSize) {\n      trimHeap(param1,topPad);\n    }\n  }\n  else {\n    *(uint *)(nextBlock + 4) = nextBlockSize;\n    if ((sizeAndFlags & 1) == 0) {\n      previousBlockIndex = previousBlockIndex - *(int *)(param2 + -8);\n      ptr1 = *(undefined4 **)(previousBlockIndex + 8);\n      blockSize = blockSize + *(int *)(param2 + -8);\n      if (ptr1 == &DAT_2007046c) {\n        bVar2 = true;\n      }\n      else {\n        index = *(int *)(previousBlockIndex + 0xc);\n        ptr1[3] = index;\n        *(undefined4 **)(index + 8) = ptr1;\n        bVar2 = false;\n      }\n    }\n    else {\n      bVar2 = false;\n    }\n    if (-1 < *(int *)(nextBlock + nextBlockSize + 4) << 0x1f) {\n      blockSize = blockSize + nextBlockSize;\n      ptr1 = *(undefined4 **)(nextBlock + 8);\n      if ((!bVar2) && (ptr1 == &DAT_2007046c)) {\n        DAT_20070474 = previousBlockIndex;\n        DAT_20070478 = previousBlockIndex;\n        *(int **)(previousBlockIndex + 0xc) = &DAT_2007046c;\n        *(int **)(previousBlockIndex + 8) = &DAT_2007046c;\n        *(uint *)(previousBlockIndex + 4) = blockSize | 1;\n        *(uint *)(previousBlockIndex + blockSize) = blockSize;\n        goto LAB_00083e30;\n      }\n      nextBlock = *(int *)(nextBlock + 0xc);\n      ptr1[3] = nextBlock;\n      *(undefined4 **)(nextBlock + 8) = ptr1;\n    }\n    *(uint *)(previousBlockIndex + 4) = blockSize | 1;\n    *(uint *)(previousBlockIndex + blockSize) = blockSize;\n    if (!bVar2) {\n      if (blockSize < 0x200) {\n        sizeAndFlags = blockSize & 0xfffffff8;\n        nextBlock = *(int *)((int)&DAT_2007046c + sizeAndFlags);\n        DAT_20070468 = DAT_20070468 | 1 << ((int)(blockSize >> 3) >> 2 & 0xffU);\n        *(int *)(previousBlockIndex + 8) = nextBlock;\n        *(undefined1 **)(previousBlockIndex + 0xc) = &__malloc_av_ + sizeAndFlags;\n        *(int *)((int)&DAT_2007046c + sizeAndFlags) = previousBlockIndex;\n        *(int *)(nextBlock + 0xc) = previousBlockIndex;\n        unlockMemoryAllocation(param1);\n        return;\n      }\n      sizeAndFlags = blockSize >> 9;\n      if (sizeAndFlags < 5) {\n        nextBlock = (blockSize >> 6) + 0x38;\n        index = nextBlock * 2;\n      }\n      else if (sizeAndFlags < 0x15) {\n        nextBlock = sizeAndFlags + 0x5b;\n        index = nextBlock * 2;\n      }\n      else if (sizeAndFlags < 0x55) {\n        nextBlock = (blockSize >> 0xc) + 0x6e;\n        index = nextBlock * 2;\n      }\n      else if (sizeAndFlags < 0x155) {\n        nextBlock = (blockSize >> 0xf) + 0x77;\n        index = nextBlock * 2;\n      }\n      else if (sizeAndFlags < 0x555) {\n        nextBlock = (blockSize >> 0x12) + 0x7c;\n        index = nextBlock * 2;\n      }\n      else {\n        index = 0xfc;\n        nextBlock = 0x7e;\n      }\n      currentBlock = (undefined1 *)(&DAT_2007046c)[index];\n      if (currentBlock == &__malloc_av_ + index * 4) {\n        DAT_20070468 = DAT_20070468 | 1 << (nextBlock >> 2 & 0xffU);\n        previousBlock = currentBlock;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentBlock + 4) & 0xfffffffc) <= blockSize) break;\n          currentBlock = *(undefined1 **)(currentBlock + 8);\n        } while (&__malloc_av_ + index * 4 != currentBlock);\n        previousBlock = *(undefined1 **)(currentBlock + 0xc);\n      }\n      *(undefined1 **)(previousBlockIndex + 0xc) = previousBlock;\n      *(undefined1 **)(previousBlockIndex + 8) = currentBlock;\n      *(int *)(previousBlock + 8) = previousBlockIndex;\n      *(int *)(currentBlock + 0xc) = previousBlockIndex;\n    }\n  }\nLAB_00083e30:\n  unlockMemoryAllocation(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "deallocate_memory_block_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "ptr1",
                "uVar3": "sizeAndFlags",
                "iVar4": "index",
                "iVar5": "nextBlock",
                "puVar6": "currentBlock",
                "uVar7": "blockSize",
                "puVar8": "previousBlock",
                "iVar9": "previousBlockIndex",
                "uVar10": "nextBlockSize",
                "__malloc_lock": "lockMemoryAllocation",
                "__malloc_unlock": "unlockMemoryAllocation",
                "__malloc_trim_threshold": "trimThreshold",
                "__malloc_top_pad": "topPad",
                "_malloc_trim_r": "trimHeap"
            },
            "calling": [
                "__swsetup_r",
                "__sfvwrite_r",
                "_malloc_r",
                "_realloc_r",
                "__sflush_r",
                "_fclose_r",
                "free"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_malloc_trim_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "handle_data_transfer_00083f34",
            "code": "\nundefined4 handleDataTransfer_00083f34(undefined4 *errorCode,void **dataBuffer,undefined4 *transferInfo)\n\n{\n  void **pointerVar1;\n  int status;\n  void *sourcePtr;\n  void *destPtr;\n  void *remainingData;\n  void *transferSize;\n  ushort transferFlags;\n  uint transferSizeUInt;\n  int transferSizeInt;\n  void **transferFuncPtr;\n  void *dataPtr;\n  void *dataEndPtr;\n  void *size_t_n;\n  size_t size_t_n_00;\n  void *localPtr;\n  \n  if (transferInfo[2] != 0) {\n    transferFlags = *(ushort *)(dataBuffer + 3);\n    transferSizeUInt = (uint)transferFlags;\n    if (((int)(transferSizeUInt << 0x1c) < 0) && (dataBuffer[4] != (void *)0x0)) {\n      transferFuncPtr = (void **)*transferInfo;\n    }\n    else {\n      status = __swsetup_r(errorCode,dataBuffer);\n      if (status != 0) {\n        return 0xffffffff;\n      }\n      transferFlags = *(ushort *)(dataBuffer + 3);\n      transferSizeUInt = (uint)transferFlags;\n      transferFuncPtr = (void **)*transferInfo;\n    }\n    if ((transferFlags & 2) == 0) {\n      remainingData = (void *)(transferSizeUInt & 2);\n      dataEndPtr = remainingData;\n      dataPtr = remainingData;\n      localPtr = remainingData;\n      if ((transferSizeUInt & 1) == 0) {\n        remainingData = (void *)0x0;\n        dataEndPtr = (void *)0x0;\n        while( true ) {\n          while (remainingData == (void *)0x0) {\n            dataEndPtr = *transferFuncPtr;\n            pointerVar1 = transferFuncPtr + 1;\n            transferFuncPtr = transferFuncPtr + 2;\n            remainingData = *pointerVar1;\n          }\n          dataPtr = dataBuffer[2];\n          if ((int)(transferSizeUInt << 0x16) < 0) {\n            if (remainingData < dataPtr) {\n              sourcePtr = *dataBuffer;\n              dataPtr = remainingData;\n            }\n            else if ((transferSizeUInt & 0x480) == 0) {\n              sourcePtr = *dataBuffer;\n            }\n            else {\n              size_t_n_00 = (int)*dataBuffer - (int)dataBuffer[4];\n              dataPtr = (void *)(size_t_n_00 + 1 + (int)remainingData);\n              sourcePtr = (void *)(((int)dataBuffer[5] * 3) / 2);\n              if (dataPtr <= sourcePtr) {\n                dataPtr = sourcePtr;\n              }\n              if ((int)(transferSizeUInt << 0x15) < 0) {\n                destPtr = (void *)_malloc_r(errorCode,dataPtr);\n                if (destPtr == (void *)0x0) {\n                  *errorCode = 0xc;\n                  transferFlags = *(ushort *)(dataBuffer + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(destPtr,dataBuffer[4],size_t_n_00);\n                *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                destPtr = (void *)_realloc_r(errorCode);\n                if (destPtr == (void *)0x0) {\n                  _free_r(errorCode,dataBuffer[4]);\n                  transferFlags = *(ushort *)(dataBuffer + 3) & 0xff7f;\n                  *errorCode = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              sourcePtr = (void *)((int)destPtr + size_t_n_00);\n              dataBuffer[4] = destPtr;\n              dataBuffer[5] = dataPtr;\n              *dataBuffer = sourcePtr;\n              dataBuffer[2] = (void *)((int)dataPtr - size_t_n_00);\n              dataPtr = remainingData;\n            }\n            memmove(sourcePtr,dataEndPtr,(size_t)dataPtr);\n            dataBuffer[2] = (void *)((int)dataBuffer[2] - (int)dataPtr);\n            *dataBuffer = (void *)((int)*dataBuffer + (int)dataPtr);\n            dataPtr = remainingData;\n          }\n          else if ((dataBuffer[4] < *dataBuffer) || (sourcePtr = dataBuffer[5], remainingData < sourcePtr)) {\n            if (remainingData < dataPtr) {\n              dataPtr = remainingData;\n            }\n            memmove(*dataBuffer,dataEndPtr,(size_t)dataPtr);\n            sourcePtr = dataBuffer[2];\n            dataBuffer[2] = (void *)((int)sourcePtr - (int)dataPtr);\n            *dataBuffer = (void *)((int)*dataBuffer + (int)dataPtr);\n            if (((void *)((int)sourcePtr - (int)dataPtr) == (void *)0x0) &&\n               (status = _fflush_r(errorCode,dataBuffer), status != 0)) goto LAB_0008402e;\n          }\n          else {\n            dataPtr = (void *)0x7fffffff;\n            if (remainingData < (void *)0x7fffffff) {\n              dataPtr = remainingData;\n            }\n            dataPtr = (void *)(*(code *)dataBuffer[9])\n                                        (errorCode,dataBuffer[7],dataEndPtr,\n                                         ((uint)dataPtr / (uint)sourcePtr) * (int)sourcePtr);\n            if ((int)dataPtr < 1) goto LAB_0008402e;\n          }\n          status = transferInfo[2];\n          dataEndPtr = (void *)((int)dataEndPtr + (int)dataPtr);\n          remainingData = (void *)((int)remainingData - (int)dataPtr);\n          transferInfo[2] = status - (int)dataPtr;\n          if (status - (int)dataPtr == 0) break;\n          transferSizeUInt = (uint)*(ushort *)(dataBuffer + 3);\n        }\n      }\n      else {\n        do {\n          while (remainingData == (void *)0x0) {\n            dataPtr = *transferFuncPtr;\n            remainingData = transferFuncPtr[1];\n            localPtr = (void *)0x0;\n            transferFuncPtr = transferFuncPtr + 2;\n          }\n          if (localPtr == (void *)0x0) {\n            dataEndPtr = memchr(dataPtr,10,(size_t)remainingData);\n            if (dataEndPtr == (void *)0x0) {\n              dataEndPtr = (void *)((int)remainingData + 1);\n              localPtr = (void *)0x1;\n            }\n            else {\n              dataEndPtr = (void *)((int)dataEndPtr + (1 - (int)dataPtr));\n              localPtr = (void *)0x1;\n            }\n          }\n          destPtr = *dataBuffer;\n          sourcePtr = dataEndPtr;\n          if (remainingData <= dataEndPtr) {\n            sourcePtr = remainingData;\n          }\n          transferSize = dataBuffer[5];\n          if ((dataBuffer[4] < destPtr) &&\n             (size_t_n = (void *)((int)dataBuffer[2] + (int)transferSize), (int)size_t_n < (int)sourcePtr)) {\n            memmove(destPtr,dataPtr,(size_t)size_t_n);\n            *dataBuffer = (void *)((int)*dataBuffer + (int)size_t_n);\n            status = _fflush_r(errorCode,dataBuffer);\n            if (status != 0) goto LAB_0008402e;\n          }\n          else if ((int)sourcePtr < (int)transferSize) {\n            memmove(destPtr,dataPtr,(size_t)sourcePtr);\n            dataBuffer[2] = (void *)((int)dataBuffer[2] - (int)sourcePtr);\n            *dataBuffer = (void *)((int)sourcePtr + (int)*dataBuffer);\n            size_t_n = sourcePtr;\n          }\n          else {\n            size_t_n = (void *)(*(code *)dataBuffer[9])(errorCode,dataBuffer[7],dataPtr,transferSize);\n            if ((int)size_t_n < 1) goto LAB_0008402e;\n          }\n          dataEndPtr = (void *)((int)dataEndPtr - (int)size_t_n);\n          if (dataEndPtr == (void *)0x0) {\n            status = _fflush_r(errorCode,dataBuffer);\n            if (status != 0) goto LAB_0008402e;\n            localPtr = (void *)0x0;\n          }\n          status = transferInfo[2];\n          dataPtr = (void *)((int)dataPtr + (int)size_t_n);\n          remainingData = (void *)((int)remainingData - (int)size_t_n);\n          transferInfo[2] = status - (int)size_t_n;\n        } while (status - (int)size_t_n != 0);\n      }\n    }\n    else {\n      dataEndPtr = (void *)0x0;\n      remainingData = (void *)0x0;\n      do {\n        while( true ) {\n          dataPtr = remainingData;\n          if ((void *)0x7ffffbff < remainingData) {\n            dataPtr = (void *)0x7ffffc00;\n          }\n          if (remainingData != (void *)0x0) break;\n          dataEndPtr = *transferFuncPtr;\n          remainingData = transferFuncPtr[1];\n          transferFuncPtr = transferFuncPtr + 2;\n        }\n        status = (*(code *)dataBuffer[9])(errorCode,dataBuffer[7],dataEndPtr,dataPtr);\n        if (status < 1) {\nLAB_0008402e:\n          transferFlags = *(ushort *)(dataBuffer + 3);\nLAB_00084030:\n          *(ushort *)(dataBuffer + 3) = transferFlags | 0x40;\n          return 0xffffffff;\n        }\n        transferSizeInt = transferInfo[2];\n        dataEndPtr = (void *)((int)dataEndPtr + status);\n        remainingData = (void *)((int)remainingData - status);\n        transferInfo[2] = transferSizeInt - status;\n      } while (transferSizeInt - status != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "handle_data_transfer_00083f34",
                "param_1": "errorCode",
                "param_2": "dataBuffer",
                "param_3": "transferInfo",
                "ppvVar1": "pointerVar1",
                "iVar2": "status",
                "pvVar3": "sourcePtr",
                "pvVar4": "destPtr",
                "pvVar5": "remainingData",
                "pvVar6": "transferSize",
                "uVar7": "transferFlags",
                "uVar8": "transferSizeUInt",
                "iVar9": "transferSizeInt",
                "ppvVar10": "transferFuncPtr",
                "pvVar11": "dataPtr",
                "pvVar12": "dataEndPtr",
                "__n": "size_t_n",
                "__n_00": "size_t_n_00",
                "local_2c": "localPtr"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memchr",
                "__swsetup_r",
                "_malloc_r",
                "_realloc_r",
                "_free_r",
                "memcpy",
                "_fflush_r",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084248": {
            "entrypoint": "0x00084248",
            "current_name": "process_data_00084248",
            "code": "\nuint processData_00084248(int dataOffset,code *callbackFunc)\n\n{\n  uint callbackResult;\n  int ptrData1;\n  int count;\n  uint result;\n  int *ptrData2;\n  \n  ptrData2 = (int *)(dataOffset + 0x2e0);\n  if (ptrData2 != (int *)0x0) {\n    result = 0;\n    do {\n      ptrData1 = ptrData2[2];\n      count = ptrData2[1] + -1;\n      if (-1 < count) {\n        do {\n          count = count + -1;\n          if ((1 < *(ushort *)(ptrData1 + 0xc)) && (*(short *)(ptrData1 + 0xe) != -1)) {\n            callbackResult = (*callbackFunc)(ptrData1);\n            result = result | callbackResult;\n          }\n          ptrData1 = ptrData1 + 0x68;\n        } while (count != -1);\n      }\n      ptrData2 = (int *)*ptrData2;\n    } while (ptrData2 != (int *)0x0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "dataOffset",
                "param_2": "callbackFunc",
                "uVar1": "callbackResult",
                "iVar2": "ptrData1",
                "iVar3": "count",
                "uVar4": "result",
                "piVar5": "ptrData2"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_charset_00084290",
            "code": "\nchar * getCharset_00084290(void)\n\n{\n  return charset;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_charset_00084290",
                "lc_ctype_charset": "charset"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_max_multi_byte_char_size_00084298",
            "code": "\nundefined4 getMaxMultiByteCharSize_00084298(void)\n\n{\n  return __mb_cur_max;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_max_multi_byte_char_size_00084298"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_file_000842a4",
            "code": "\nvoid processFile_000842a4(int fileDescriptor,int *fileInfo)\n\n{\n  ushort permissions;\n  int status;\n  int allocationResult;\n  uint permissionsCopy;\n  bool isExecutable;\n  undefined fileStat [4];\n  uint fileMode;\n  \n  permissions = *(ushort *)(fileInfo + 3);\n  permissionsCopy = (uint)permissions;\n  if ((int)(permissionsCopy << 0x1e) < 0) {\n    *fileInfo = (int)fileInfo + 0x43;\n    fileInfo[4] = (int)fileInfo + 0x43;\n    fileInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInfo + 0xe)) {\n    status = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe),fileStat);\n    if (-1 < status) {\n      isExecutable = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (fileInfo[10] == 0x8449d)) {\n        status = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x400;\n        fileInfo[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    permissions = *(ushort *)(fileInfo + 3);\n    permissionsCopy = (uint)permissions;\n  }\n  *(ushort *)(fileInfo + 3) = permissions | 0x800;\n  if ((permissionsCopy & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  isExecutable = false;\nLAB_00084300:\n  allocationResult = _malloc_r(fileDescriptor,status);\n  permissions = *(ushort *)(fileInfo + 3);\n  if (allocationResult == 0) {\n    if (-1 < (int)((uint)permissions << 0x16)) {\n      *(ushort *)(fileInfo + 3) = permissions | 2;\n      *fileInfo = (int)fileInfo + 0x43;\n      fileInfo[4] = (int)fileInfo + 0x43;\n      fileInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(fileDescriptor + 0x3c) = 0x83b09;\n    *(ushort *)(fileInfo + 3) = permissions | 0x80;\n    *fileInfo = allocationResult;\n    fileInfo[4] = allocationResult;\n    fileInfo[5] = status;\n    if ((isExecutable) && (status = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe)), status != 0)) {\n      *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_file_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "permissions",
                "iVar2": "status",
                "iVar3": "allocationResult",
                "uVar4": "permissionsCopy",
                "bVar5": "isExecutable",
                "auStack_54": "fileStat",
                "local_50": "fileMode"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_malloc_r",
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nvoid * find_first_occurrence_00084384(void *data,int target,size_t size)\n\n{\n  uint target_byte;\n  uint xor_result;\n  int index;\n  uint *data_ptr;\n  uint combined_target;\n  bool is_last_byte;\n  \n  target_byte = target & 0xff;\n  if (((uint)data & 3) == 0) {\ncheck_alignment:\n    if (3 < size) {\n      combined_target = target_byte | target_byte << 8;\n      data_ptr = (uint *)data;\n      do {\n        xor_result = *data_ptr ^ (combined_target | combined_target << 0x10);\n        data = data_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        size = size - 4;\n        data = data_ptr + 1;\n        data_ptr = data_ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      data = (uint *)0x0;\n    }\n    else {\n                    /* WARNING: Load size is inaccurate */\n      if (*data != target_byte) {\n        index = 0;\n        do {\n          data = (void *)((int)data + 1);\n          is_last_byte = index == size - 1;\n          index = index + 1;\n          if (is_last_byte) goto not_found;\n                    /* WARNING: Load size is inaccurate */\n        } while (*data != target_byte);\n      }\n    }\n  }\n  else if (size == 0) {\nnot_found:\n    data = (uint *)0x0;\n  }\n  else {\n                    /* WARNING: Load size is inaccurate */\n    if (*data != target_byte) {\n      data_ptr = (uint *)((int)data + 1);\n      size = size - 1;\n      do {\n        data = data_ptr;\n        if (((uint)data & 3) == 0) goto check_alignment;\n        if (size == 0) goto not_found;\n                    /* WARNING: Load size is inaccurate */\n        data_ptr = (uint *)((int)data + 1);\n        size = size - 1;\n      } while (*data != target_byte);\n    }\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "__s": "data",
                "__c": "target",
                "__n": "size",
                "uVar1": "target_byte",
                "uVar2": "xor_result",
                "iVar3": "index",
                "puVar4": "data_ptr",
                "uVar5": "combined_target",
                "bVar6": "is_last_byte",
                "LAB_000843b4": "check_alignment",
                "LAB_000843dc": "not_found"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084418": {
            "entrypoint": "0x00084418",
            "current_name": "kill_process_00084418",
            "code": "\nvoid killProcess_00084418(int *errorCode,int processID,int signal)\n\n{\n  errorNumber = 0;\n  _kill(processID,signal);\n  if ((processID == -1) && (errorNumber != 0)) {\n    *errorCode = errorNumber;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084418": "kill_process_00084418",
                "param_1": "errorCode",
                "param_2": "processID",
                "param_3": "signal",
                "errno": "errorNumber"
            },
            "calling": [
                "kill"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084440": {
            "entrypoint": "0x00084440",
            "current_name": "update_data_00084440",
            "code": "\nvoid updateData_00084440(undefined4 fileDescriptor,int dataAddress)\n\n{\n  int bytesRead;\n  \n  bytesRead = _read_r(fileDescriptor,(int)*(short *)(dataAddress + 0xe));\n  if (-1 < bytesRead) {\n    *(int *)(dataAddress + 0x50) = *(int *)(dataAddress + 0x50) + bytesRead;\n    return;\n  }\n  *(ushort *)(dataAddress + 0xc) = *(ushort *)(dataAddress + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084440": "update_data_00084440",
                "param_1": "fileDescriptor",
                "param_2": "dataAddress",
                "iVar1": "bytesRead"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "update_file_contents_00084464",
            "code": "\nvoid updateFileContents_00084464(undefined4 fileDescriptor,int bufferPointer,undefined4 dataPointer,undefined4 dataSize)\n\n{\n  ushort bufferValue;\n  \n  bufferValue = *(ushort *)(bufferPointer + 0xc);\n  if ((int)((uint)bufferValue << 0x17) < 0) {\n    seekToPosition(fileDescriptor,(int)*(short *)(bufferPointer + 0xe),0,2);\n    bufferValue = *(ushort *)(bufferPointer + 0xc);\n  }\n  *(ushort *)(bufferPointer + 0xc) = bufferValue & 0xefff;\n  writeToFile(fileDescriptor,(int)*(short *)(bufferPointer + 0xe),dataPointer,dataSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "update_file_contents_00084464",
                "param_1": "fileDescriptor",
                "param_2": "bufferPointer",
                "param_3": "dataPointer",
                "param_4": "dataSize",
                "uVar1": "bufferValue",
                "_lseek_r": "seekToPosition",
                "_write_r": "writeToFile"
            },
            "calling": [],
            "called": [
                "_write_r",
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_seek_position_0008449c",
            "code": "\nvoid updateSeekPosition_0008449c(undefined4 fileDescriptor,int bufferLocation)\n\n{\n  int seekResult;\n  ushort updatedBitmask;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(bufferLocation + 0xe));\n  if (seekResult == -1) {\n    updatedBitmask = *(ushort *)(bufferLocation + 0xc) & 0xefff;\n  }\n  else {\n    updatedBitmask = *(ushort *)(bufferLocation + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(bufferLocation + 0x50) = seekResult;\n  }\n  *(ushort *)(bufferLocation + 0xc) = updatedBitmask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_seek_position_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "bufferLocation",
                "iVar1": "seekResult",
                "uVar2": "updatedBitmask"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "close_file_descriptor_000844bc",
            "code": "\nvoid closeFileDescriptor_000844bc(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  _close_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "write_to_stream_000844c4",
            "code": "\nuint write_to_stream_000844c4(int stream,uint character,undefined4 *stream_buffer,undefined4 stream_size)\n\n{\n  ushort stream_flags;\n  uint stream_flags_shifted;\n  undefined *stream_ptr;\n  int stream_offset;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x38) == 0)) {\n    __sinit();\n  }\n  stream_flags = *(ushort *)(stream_buffer + 3);\n  stream_flags_shifted = (uint)stream_flags;\n  stream_buffer[2] = stream_buffer[6];\n  if ((-1 < (int)(stream_flags_shifted << 0x1c)) || (stream_offset = stream_buffer[4], stream_offset == 0)) {\n    stream_offset = __swsetup_r(stream,stream_buffer,stream_flags,stream_flags_shifted,stream_size);\n    if (stream_offset != 0) {\n      return 0xffffffff;\n    }\n    stream_flags = *(ushort *)(stream_buffer + 3);\n    stream_offset = stream_buffer[4];\n    stream_flags_shifted = (uint)stream_flags;\n  }\n  character = character & 0xff;\n  if ((int)(stream_flags_shifted << 0x12) < 0) {\n    stream_ptr = (undefined *)*stream_buffer;\n    stream_offset = (int)stream_ptr - stream_offset;\n    if (stream_offset < (int)stream_buffer[5]) {\nLAB_000844f6:\n      stream_offset = stream_offset + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    stream_buffer[0x19] = stream_buffer[0x19] & 0xffffdfff;\n    stream_ptr = (undefined *)*stream_buffer;\n    *(ushort *)(stream_buffer + 3) = stream_flags | 0x2000;\n    stream_offset = (int)stream_ptr - stream_offset;\n    if (stream_offset < (int)stream_buffer[5]) goto LAB_000844f6;\n  }\n  stream_offset = _fflush_r(stream,stream_buffer);\n  if (stream_offset != 0) {\n    return 0xffffffff;\n  }\n  stream_ptr = (undefined *)*stream_buffer;\n  stream_offset = 1;\nLAB_000844f8:\n  stream_buffer[2] = stream_buffer[2] + -1;\n  *stream_buffer = stream_ptr + 1;\n  *stream_ptr = (char)character;\n  if (((stream_buffer[5] == stream_offset) ||\n      (((int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (stream_offset = _fflush_r(stream,stream_buffer), stream_offset != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "write_to_stream_000844c4",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "stream_size",
                "uVar1": "stream_flags",
                "uVar2": "stream_flags_shifted",
                "puVar3": "stream_ptr",
                "iVar4": "stream_offset"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "convert_string_to_char_0008456c",
            "code": "\nvoid convertStringToChar_0008456c(undefined4 *outputString,int inputLength,undefined4 inputChar,undefined4 *conversionError)\n\n{\n  code *convertFunction;\n  undefined4 localeCharset;\n  int conversionResult;\n  undefined conversionBuffer [12];\n  \n  convertFunction = __wctomb;\n  if (inputLength == 0) {\n    localeCharset = __locale_charset();\n    conversionResult = (*convertFunction)(outputString,conversionBuffer,0,localeCharset,conversionError);\n  }\n  else {\n    localeCharset = __locale_charset();\n    conversionResult = (*convertFunction)(outputString,inputLength,inputChar,localeCharset,conversionError);\n  }\n  if (conversionResult == -1) {\n    *conversionError = 0;\n    *outputString = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "convert_string_to_char_0008456c",
                "param_1": "outputString",
                "param_2": "inputLength",
                "param_3": "inputChar",
                "param_4": "conversionError",
                "pcVar1": "convertFunction",
                "uVar2": "localeCharset",
                "iVar3": "conversionResult",
                "auStack_24": "conversionBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "extract_byte_from_value_000845bc",
            "code": "\nundefined4 extract_byte_from_value_000845bc(undefined4 *output_ptr,undefined *buffer,uint input_value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (input_value < 0x100) {\n    *buffer = (char)input_value;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "extract_byte_from_value_000845bc",
                "param_1": "output_ptr",
                "param_2": "buffer",
                "param_3": "input_value"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845d8": {
            "entrypoint": "0x000845d8",
            "current_name": "write_to_file_000845d8",
            "code": "\nvoid writeToFile_000845d8(int *errorFlag,int fileDescriptor,char *data,int numBytes)\n\n{\n  int writeStatus;\n  \n  errno = 0;\n  writeStatus = _write(fileDescriptor,data,numBytes);\n  if ((writeStatus == -1) && (errno != 0)) {\n    *errorFlag = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000845d8": "write_to_file_000845d8",
                "param_1": "errorFlag",
                "param_2": "fileDescriptor",
                "param_3": "data",
                "param_4": "numBytes",
                "iVar1": "writeStatus"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084600": {
            "entrypoint": "0x00084600",
            "current_name": "close_file_and_handle_errors_00084600",
            "code": "\nvoid closeFileAndHandleErrors_00084600(int *errorPointer,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorPointer = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084600": "close_file_and_handle_errors_00084600",
                "param_1": "errorPointer",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084624": {
            "entrypoint": "0x00084624",
            "current_name": "flush_and_free_resources_00084624",
            "code": "\nundefined4 flushAndFreeResources_00084624(int streamPtr,int filePtr)\n\n{\n  undefined4 result;\n  int returnValue;\n  \n  if (filePtr != 0) {\n    if ((streamPtr != 0) && (*(int *)(streamPtr + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(filePtr + 0xc) != 0) {\n      result = _fflush_r(streamPtr,filePtr);\n      if ((*(code **)(filePtr + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(filePtr + 0x2c))(streamPtr,*(undefined4 *)(filePtr + 0x1c)), returnValue < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(filePtr + 0xc) << 0x18) < 0) {\n        _free_r(streamPtr,*(undefined4 *)(filePtr + 0x10));\n      }\n      if (*(int *)(filePtr + 0x30) != 0) {\n        if (*(int *)(filePtr + 0x30) != filePtr + 0x40) {\n          _free_r(streamPtr);\n        }\n        *(undefined4 *)(filePtr + 0x30) = 0;\n      }\n      if (*(int *)(filePtr + 0x44) != 0) {\n        _free_r(streamPtr);\n        *(undefined4 *)(filePtr + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(filePtr + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084624": "flush_and_free_resources_00084624",
                "param_1": "streamPtr",
                "param_2": "filePtr",
                "uVar1": "result",
                "iVar2": "returnValue"
            },
            "calling": [
                "fclose"
            ],
            "called": [
                "__sfp_lock_release",
                "_free_r",
                "__sfp_lock_acquire",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "close_file_000846a4",
            "code": "\nint closeFile_000846a4(FILE *stream)\n\n{\n  int returnValue;\n  \n  returnValue = _fclose_r(_impure_ptr,stream);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "close_file_000846a4",
                "__stream": "stream",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "_fclose_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_file_status_000846b4",
            "code": "\nvoid checkFileStatus_000846b4(int *errorCode,int fileDescriptor,stat *status)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _fstat(fileDescriptor,status);\n  if ((result == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_file_status_000846b4",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "status",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_is_terminal_000846dc",
            "code": "\nvoid checkIsTerminal_000846dc(int *errorResult,int fileDescriptor)\n\n{\n  int isTerminal;\n  \n  errorNumber = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (errorNumber != 0)) {\n    *errorResult = errorNumber;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_is_terminal_000846dc",
                "param_1": "errorResult",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal",
                "errno": "errorNumber"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "update_file_pointer_00084700",
            "code": "\nvoid updateFilePointer_00084700(int *errorCode,int fileDescriptor,__off_t offset,int origin)\n\n{\n  __off_t result;\n  \n  errno = 0;\n  result = _lseek(fileDescriptor,offset,origin);\n  if ((result == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "update_file_pointer_00084700",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "origin",
                "_Var1": "result"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "read_file_00084728",
            "code": "\nvoid readFile_00084728(int *errorCode,int fileDescriptor,char *buffer,int bufferSize)\n\n{\n  int readResult;\n  \n  errno = 0;\n  readResult = _read(fileDescriptor,buffer,bufferSize);\n  if ((readResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "read_file_00084728",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "handle_division_00084750",
            "code": "\nvoid handleDivision_00084750(int dividend,int divisor,int remainder,int flag)\n\n{\n  if ((flag == 0) && (remainder == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084750": "handle_division_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "flag"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculateDifference_0008477c(uint inputValue,int subtractionValue,undefined4 operand1,undefined4 operand2,int *resultArray)\n\n{\n  uint product;\n  longlong longResult;\n  \n  longResult = __divdi3();\n  longResult = longResult * CONCAT44(operand2,operand1);\n  product = (uint)longResult;\n  *resultArray = inputValue - product;\n  resultArray[1] = (subtractionValue - (int)((ulonglong)longResult >> 0x20)) - (uint)(inputValue < product);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "inputValue",
                "param_2": "subtractionValue",
                "param_3": "operand1",
                "param_4": "operand2",
                "param_5": "resultArray",
                "uVar1": "product",
                "lVar2": "longResult"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_calculate_000847ac",
            "code": "\nvoid subtractAndCalculate_000847ac(uint inputValue,int intValue,undefined4 firstValue,undefined4 secondValue,int *outputArray)\n\n{\n  uint multipliedValue;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(secondValue,firstValue);\n  multipliedValue = (uint)product;\n  *outputArray = inputValue - multipliedValue;\n  finalResult = (intValue - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < multipliedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_calculate_000847ac",
                "param_1": "inputValue",
                "param_2": "intValue",
                "param_3": "firstValue",
                "param_4": "secondValue",
                "param_5": "outputArray",
                "uVar1": "multipliedValue",
                "lVar2": "product",
                "param_5[1]": "finalResult"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847dc": {
            "entrypoint": "0x000847dc",
            "current_name": "FUNC_000847dc",
            "code": "\nvoid FUNC_000847dc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847dc": "FUNC_000847dc"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "div_remainder_with_lz_count_000847e0",
            "code": "\nundefined8 divRemainderWithLZCount_000847e0(uint dividend,uint dividendHigh,uint divisor,uint divisorHigh)\n\n{\n  longlong result64;\n  uint quotient;\n  uint remainder;\n  uint shiftCount;\n  uint temp;\n  int lzCount;\n  uint tempQuotient;\n  uint tempRemainder;\n  uint isNegDividend;\n  uint quotientHigh;\n  uint tempQuotientHigh;\n  uint tempDivisorHigh;\n  bool isNegDivisor;\n  \n  if ((int)dividendHigh < 0) {\n    isNegDivisor = dividend != 0;\n    dividend = -dividend;\n    dividendHigh = -dividendHigh - (uint)isNegDivisor;\n    isNegDividend = 0xffffffff;\n  }\n  else {\n    isNegDividend = 0;\n  }\n  if ((int)divisorHigh < 0) {\n    isNegDividend = ~isNegDividend;\n    isNegDivisor = divisor != 0;\n    divisor = -divisor;\n    divisorHigh = -divisorHigh - (uint)isNegDivisor;\n  }\n  if (divisorHigh == 0) {\n    if (dividendHigh < divisor) {\n      lzCount = LZCOUNT(divisor);\n      if (lzCount != 0) {\n        remainder = dividend >> (0x20U - lzCount & 0xff);\n        divisor = divisor << lzCount;\n        dividend = dividend << lzCount;\n        dividendHigh = dividendHigh << lzCount | remainder;\n      }\n      quotient = divisor >> 0x10;\n      shiftCount = dividendHigh / quotient;\n      tempQuotient = (divisor & 0xffff) * shiftCount;\n      quotientHigh = dividend >> 0x10 | (dividendHigh - quotient * shiftCount) * 0x10000;\n      remainder = shiftCount;\n      if (quotientHigh <= tempQuotient && tempQuotient - quotientHigh != 0) {\n        isNegDivisor = CARRY4(quotientHigh,divisor);\n        quotientHigh = quotientHigh + divisor;\n        remainder = shiftCount - 1;\n        if ((isNegDivisor == false) && (quotientHigh <= tempQuotient && tempQuotient - quotientHigh != 0)) {\n          remainder = shiftCount - 2;\n          quotientHigh = quotientHigh + divisor;\n        }\n      }\n      tempRemainder = (quotientHigh - tempQuotient) / quotient;\n      shiftCount = (divisor & 0xffff) * tempRemainder;\n      tempQuotient = dividend & 0xffff | ((quotientHigh - tempQuotient) - quotient * tempRemainder) * 0x10000;\n      quotient = tempRemainder;\n      if (tempQuotient <= shiftCount && shiftCount - tempQuotient != 0) {\n        quotient = tempRemainder - 1;\n        if ((CARRY4(tempQuotient,divisor) == false) &&\n           (tempQuotient + divisor <= shiftCount && shiftCount - (tempQuotient + divisor) != 0)) {\n          quotient = tempRemainder - 2;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      remainder = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      lzCount = LZCOUNT(divisor);\n      if (lzCount == 0) {\n        dividendHigh = dividendHigh - divisor;\n        shiftCount = divisor >> 0x10;\n        tempDivisorHigh = divisor & 0xffff;\n        remainder = 1;\n      }\n      else {\n        divisor = divisor << lzCount;\n        remainder = dividendHigh >> (0x20U - lzCount & 0xff);\n        shiftCount = divisor >> 0x10;\n        quotientHigh = remainder / shiftCount;\n        tempDivisorHigh = divisor & 0xffff;\n        tempQuotient = tempDivisorHigh * quotientHigh;\n        tempRemainder = dividend >> (0x20U - lzCount & 0xff) | dividendHigh << lzCount;\n        remainder = tempRemainder >> 0x10 | (remainder - shiftCount * quotientHigh) * 0x10000;\n        dividend = dividend << lzCount;\n        quotient = quotientHigh;\n        if (remainder <= tempQuotient && tempQuotient - remainder != 0) {\n          isNegDivisor = CARRY4(remainder,divisor);\n          remainder = remainder + divisor;\n          quotient = quotientHigh - 1;\n          if ((isNegDivisor == false) && (remainder <= tempQuotient && tempQuotient - remainder != 0)) {\n            quotient = quotientHigh - 2;\n            remainder = remainder + divisor;\n          }\n        }\n        temp = (remainder - tempQuotient) / shiftCount;\n        quotientHigh = tempDivisorHigh * temp;\n        dividendHigh = tempRemainder & 0xffff | ((remainder - tempQuotient) - shiftCount * temp) * 0x10000;\n        remainder = temp;\n        if (dividendHigh <= quotientHigh && quotientHigh - dividendHigh != 0) {\n          isNegDivisor = CARRY4(dividendHigh,divisor);\n          dividendHigh = dividendHigh + divisor;\n          remainder = temp - 1;\n          if ((isNegDivisor == false) && (dividendHigh <= quotientHigh && quotientHigh - dividendHigh != 0)) {\n            remainder = temp - 2;\n            dividendHigh = dividendHigh + divisor;\n          }\n        }\n        dividendHigh = dividendHigh - quotientHigh;\n        remainder = remainder | quotient << 0x10;\n      }\n      quotient = dividendHigh / shiftCount;\n      quotientHigh = tempDivisorHigh * quotient;\n      tempRemainder = dividend >> 0x10 | (dividendHigh - shiftCount * quotient) * 0x10000;\n      tempQuotient = quotient;\n      if (tempRemainder <= quotientHigh && quotientHigh - tempRemainder != 0) {\n        isNegDivisor = CARRY4(tempRemainder,divisor);\n        tempRemainder = tempRemainder + divisor;\n        tempQuotient = quotient - 1;\n        if ((isNegDivisor == false) && (tempRemainder <= quotientHigh && quotientHigh - tempRemainder != 0)) {\n          tempQuotient = quotient - 2;\n          tempRemainder = tempRemainder + divisor;\n        }\n      }\n      temp = (tempRemainder - quotientHigh) / shiftCount;\n      tempDivisorHigh = tempDivisorHigh * temp;\n      shiftCount = dividend & 0xffff | ((tempRemainder - quotientHigh) - shiftCount * temp) * 0x10000;\n      quotient = temp;\n      if (shiftCount <= tempDivisorHigh && tempDivisorHigh - shiftCount != 0) {\n        quotient = temp - 1;\n        if ((CARRY4(shiftCount,divisor) == false) &&\n           (shiftCount + divisor <= tempDivisorHigh && tempDivisorHigh - (shiftCount + divisor) != 0)) {\n          quotient = temp - 2;\n        }\n      }\n      quotient = quotient | tempQuotient << 0x10;\n    }\n  }\n  else if (dividendHigh < divisorHigh) {\n    remainder = 0;\n    quotient = 0;\n  }\n  else {\n    lzCount = LZCOUNT(divisorHigh);\n    if (lzCount == 0) {\n      if ((divisorHigh < dividendHigh) || (divisor <= dividend)) {\n        remainder = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        remainder = 0;\n      }\n    }\n    else {\n      remainder = 0x20 - lzCount;\n      shiftCount = dividendHigh >> (remainder & 0xff);\n      tempDivisorHigh = divisor >> (remainder & 0xff) | divisorHigh << lzCount;\n      quotientHigh = tempDivisorHigh >> 0x10;\n      quotient = shiftCount / quotientHigh;\n      tempRemainder = (tempDivisorHigh & 0xffff) * quotient;\n      tempQuotient = dividendHigh << lzCount | dividend >> (remainder & 0xff);\n      shiftCount = tempQuotient >> 0x10 | (shiftCount - quotientHigh * quotient) * 0x10000;\n      remainder = quotient;\n      if (shiftCount <= tempRemainder && tempRemainder - shiftCount != 0) {\n        isNegDivisor = CARRY4(shiftCount,tempDivisorHigh);\n        shiftCount = shiftCount + tempDivisorHigh;\n        remainder = quotient - 1;\n        if ((isNegDivisor == false) && (shiftCount <= tempRemainder && tempRemainder - shiftCount != 0)) {\n          remainder = quotient - 2;\n          shiftCount = shiftCount + tempDivisorHigh;\n        }\n      }\n      temp = (shiftCount - tempRemainder) / quotientHigh;\n      tempQuotientHigh = (tempDivisorHigh & 0xffff) * temp;\n      shiftCount = tempQuotient & 0xffff | ((shiftCount - tempRemainder) - quotientHigh * temp) * 0x10000;\n      quotient = temp;\n      if (shiftCount <= tempQuotientHigh && tempQuotientHigh - shiftCount != 0) {\n        isNegDivisor = CARRY4(shiftCount,tempDivisorHigh);\n        shiftCount = shiftCount + tempDivisorHigh;\n        quotient = temp - 1;\n        if ((isNegDivisor == false) && (shiftCount <= tempQuotientHigh && tempQuotientHigh - shiftCount != 0)) {\n          quotient = temp - 2;\n          shiftCount = shiftCount + tempDivisorHigh;\n        }\n      }\n      quotient = quotient | remainder << 0x10;\n      result64 = (ulonglong)quotient * (ulonglong)(divisor << lzCount);\n      tempQuotient = (uint)((ulonglong)result64 >> 0x20);\n      remainder = 0;\n      if ((shiftCount - tempQuotientHigh < tempQuotient) ||\n         ((shiftCount - tempQuotientHigh == tempQuotient && (dividend << lzCount < (uint)result64)))) {\n        quotient = quotient - 1;\n        remainder = 0;\n      }\n    }\n  }\n  if (isNegDividend != 0) {\n    isNegDivisor = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)isNegDivisor;\n  }\n  return CONCAT44(remainder,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "div_remainder_with_lz_count_000847e0",
                "param_1": "dividend",
                "param_2": "dividendHigh",
                "param_3": "divisor",
                "param_4": "divisorHigh",
                "lVar1": "result64",
                "uVar2": "quotient",
                "uVar3": "remainder",
                "uVar4": "shiftCount",
                "uVar5": "temp",
                "iVar6": "lzCount",
                "uVar7": "tempQuotient",
                "uVar8": "tempRemainder",
                "uVar9": "isNegDividend",
                "uVar10": "quotientHigh",
                "uVar11": "tempQuotientHigh",
                "uVar12": "tempDivisorHigh",
                "bVar13": "isNegDivisor"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_division_00084a80",
            "code": "\nulonglong calculateDivision_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint quotient4;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int bitShiftCount;\n  bool isCarry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      bitShiftCount = LZCOUNT(quotient);\n      if (bitShiftCount == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        quotient4 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << bitShiftCount;\n        temp3 = divisor >> (0x20U - bitShiftCount & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp4 = temp3 / quotient2;\n        quotient4 = quotient & 0xffff;\n        quotient1 = quotient4 * temp4;\n        temp1 = dividend >> (0x20U - bitShiftCount & 0xff) | divisor << bitShiftCount;\n        quotient3 = temp1 >> 0x10 | (temp3 - quotient2 * temp4) * 0x10000;\n        dividend = dividend << bitShiftCount;\n        temp3 = temp4;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          isCarry = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp3 = temp4 - 1;\n          if ((isCarry == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp3 = temp4 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp2 = (quotient3 - quotient1) / quotient2;\n        temp4 = quotient4 * temp2;\n        divisor = temp1 & 0xffff | ((quotient3 - quotient1) - quotient2 * temp2) * 0x10000;\n        quotient1 = temp2;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp2 - 1;\n          if ((isCarry == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            quotient1 = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp4;\n        quotient1 = quotient1 | temp3 << 0x10;\n      }\n      temp4 = divisor / quotient2;\n      quotient3 = quotient4 * temp4;\n      temp1 = dividend >> 0x10 | (divisor - quotient2 * temp4) * 0x10000;\n      temp3 = temp4;\n      if (temp1 <= quotient3 && quotient3 - temp1 != 0) {\n        isCarry = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        temp3 = temp4 - 1;\n        if ((isCarry == false) && (temp1 <= quotient3 && quotient3 - temp1 != 0)) {\n          temp3 = temp4 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      temp4 = (temp1 - quotient3) / quotient2;\n      quotient4 = quotient4 * temp4;\n      temp1 = dividend & 0xffff | ((temp1 - quotient3) - quotient2 * temp4) * 0x10000;\n      quotient2 = temp4;\n      if (temp1 <= quotient4 && quotient4 - temp1 != 0) {\n        quotient2 = temp4 - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= quotient4 && quotient4 - (temp1 + quotient) != 0)) {\n          quotient2 = temp4 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp3 << 0x10);\n    }\n    bitShiftCount = LZCOUNT(quotient);\n    if (bitShiftCount != 0) {\n      temp3 = dividend >> (0x20U - bitShiftCount & 0xff);\n      quotient = quotient << bitShiftCount;\n      dividend = dividend << bitShiftCount;\n      divisor = temp3 | divisor << bitShiftCount;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    quotient4 = (quotient & 0xffff) * quotient2;\n    temp4 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp3 = quotient2;\n    if (temp4 <= quotient4 && quotient4 - temp4 != 0) {\n      isCarry = CARRY4(temp4,quotient);\n      temp4 = temp4 + quotient;\n      temp3 = quotient2 - 1;\n      if ((isCarry == false) && (temp4 <= quotient4 && quotient4 - temp4 != 0)) {\n        temp3 = quotient2 - 2;\n        temp4 = temp4 + quotient;\n      }\n    }\n    temp1 = (temp4 - quotient4) / quotient1;\n    quotient2 = (quotient & 0xffff) * temp1;\n    quotient4 = dividend & 0xffff | ((temp4 - quotient4) - quotient1 * temp1) * 0x10000;\n    quotient1 = temp1;\n    if (quotient4 <= quotient2 && quotient2 - quotient4 != 0) {\n      quotient1 = temp1 - 1;\n      if ((CARRY4(quotient4,quotient) == false) &&\n         (quotient4 + quotient <= quotient2 && quotient2 - (quotient4 + quotient) != 0)) {\n        quotient1 = temp1 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    bitShiftCount = LZCOUNT(remainder);\n    if (bitShiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - bitShiftCount;\n      temp3 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << bitShiftCount | quotient >> (quotient1 & 0xff);\n      quotient4 = quotient2 >> 0x10;\n      quotient3 = temp3 / quotient4;\n      temp4 = (quotient2 & 0xffff) * quotient3;\n      temp1 = dividend >> (quotient1 & 0xff) | divisor << bitShiftCount;\n      quotient1 = temp1 >> 0x10 | (temp3 - quotient4 * quotient3) * 0x10000;\n      temp3 = quotient3;\n      if (quotient1 <= temp4 && temp4 - quotient1 != 0) {\n        isCarry = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp3 = quotient3 - 1;\n        if ((isCarry == false) && (quotient1 <= temp4 && temp4 - quotient1 != 0)) {\n          temp3 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - temp4) / quotient4;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      quotient4 = temp1 & 0xffff | ((quotient1 - temp4) - quotient4 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (quotient4 <= temp2 && temp2 - quotient4 != 0) {\n        isCarry = CARRY4(quotient4,quotient2);\n        quotient4 = quotient4 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((isCarry == false) && (quotient4 <= temp2 && temp2 - quotient4 != 0)) {\n          quotient1 = quotient3 - 2;\n          quotient4 = quotient4 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp3 << 0x10;\n      result = (ulonglong)quotient1 * (ulonglong)(quotient << bitShiftCount);\n      temp3 = (uint)((ulonglong)result >> 0x20);\n      if ((quotient4 - temp2 < temp3) || ((quotient4 - temp2 == temp3 && (dividend << bitShiftCount < (uint)result)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_division_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "result",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "quotient4",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "iVar10": "bitShiftCount",
                "bVar11": "isCarry"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00085874": {
            "entrypoint": "0x00085874",
            "current_name": "FUNC_00085874",
            "code": "\nvoid FUNC_00085874(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085874": "FUNC_00085874"
            },
            "calling": [
                "__libc_fini_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_20070000": {
            "entrypoint": "0x20070000",
            "current_name": "disable_ir_qinterrupts_20070000",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableIRQinterrupts_20070000(void)\n\n{\n  disableIRQinterrupts_20070000();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_20070000": "disable_ir_qinterrupts_20070000"
            },
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 118299,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080148",
            "FUN_0008014c",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080aac",
            "FUN_00080ac0",
            "FUN_00080acc",
            "FUN_00080ad8",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d24",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e5c",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081074",
            "FUN_00081084",
            "FUN_000810bc",
            "FUN_000810f4",
            "FUN_0008112c",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_0008116a",
            "FUN_0008116e",
            "FUN_00081184",
            "FUN_00081188",
            "FUN_0008118c",
            "FUN_000811a8",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_000811f0",
            "FUN_00081202",
            "FUN_00081208",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e0",
            "FUN_000813e4",
            "FUN_000813f6",
            "FUN_00081412",
            "FUN_0008143c",
            "FUN_00081454",
            "FUN_000814a8",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_00081578",
            "FUN_00081580",
            "FUN_000815ca",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_000816e0",
            "FUN_00081704",
            "FUN_00081714",
            "FUN_00081720",
            "FUN_00081728",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_000818b8",
            "FUN_000818c8",
            "FUN_00081944",
            "FUN_00081aac",
            "FUN_00081be4",
            "FUN_00081bec",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c6c",
            "FUN_00081c80",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cbc",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d68",
            "FUN_00081d7c",
            "FUN_00081dcc",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ab0",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_000838cc",
            "FUN_00083988",
            "FUN_00083994",
            "FUN_00083adc",
            "FUN_00083b08",
            "FUN_00083b14",
            "FUN_00083c10",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084248",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084418",
            "FUN_00084440",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844bc",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000845d8",
            "FUN_00084600",
            "FUN_00084624",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80",
            "FUN_20070000"
        ]
    ],
    "locked_functions": []
}