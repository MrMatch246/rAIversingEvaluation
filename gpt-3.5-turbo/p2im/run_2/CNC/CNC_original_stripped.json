{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "set_limits_enabled_0800192c",
                "PTR_settings_08001954": "settings",
                "PTR_limits_enabled_08001958": "limits_enabled"
            },
            "code": "void set_limits_enabled_0800192c(void)\n{\n    if ((PTR_settings_08001954[0x28] & 8) == 0)\n    {\n        *PTR_limits_enabled_08001958 = 0;\n    }\n    else\n    {\n        *PTR_limits_enabled_08001958 = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "grbl_main",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "set_limits_enabled_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "set_priority_group_08006950",
                "PriorityGroup": "priority_group",
                "reg_value": "reg_value",
                "PriorityGroupTmp": "priority_group_tmp",
                "DAT_08006994": "DAT_08006994",
                "uint32_t": "uint",
                "mask": "mask",
                "shift": "shift",
                "value": "value"
            },
            "code": "void set_priority_group_08006950(uint32_t priority_group) {\n  uint32_t reg_value;\n  uint32_t priority_group_tmp;\n  uint32_t mask = 0xf8ff;\n  uint32_t shift = 8;\n  uint32_t value = (priority_group & 7) << shift | 0x5fa0000;\n  *(uint *)(DAT_08006994 + 0xc) = (*(uint *)(DAT_08006994 + 0xc) & mask) | value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "imported": false,
            "current_name": "set_priority_group_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "calculate_08008ba0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "product",
                "uVar3": "shift_amount"
            },
            "code": "uint calculate_08008ba0(uint dividend, uint divisor) {\n    uint quotient;\n    int product;\n    uint shift_amount;\n    \n    product = divisor * 2 + 0x200000;\n    if (divisor * 2 < 0xffe00000) {\n        if (product >= 0) {\n            return 0;\n        }\n        quotient = product >> 0x15;\n        shift_amount = -quotient - 0x3e1;\n        if (quotient < 0xfffffc20 && shift_amount != 0) {\n            quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shift_amount & 0xff);\n            if ((divisor & 0x80000000) != 0) {\n                quotient = -quotient;\n            }\n            return quotient;\n        }\n    }\n    else if ((dividend | divisor << 0xc) != 0) {\n        return 0;\n    }\n    divisor = divisor & 0x80000000;\n    if (divisor == 0) {\n        divisor = 0x7fffffff;\n    }\n    return divisor;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "calculate_trapezoid_for_block",
                "lround",
                "__kernel_cos",
                "__ieee754_rem_pio2",
                "plan_buffer_line",
                "gc_execute_line",
                "__kernel_rem_pio2",
                "__kernel_sin"
            ],
            "imported": false,
            "current_name": "calculate_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "HAL_DeInit"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005b90": {
            "renaming": {
                "FUN_08005b90": "clear_bit_in_uint32_t_at_offset_from_DAT_08005ba8_08005b90",
                "DAT_08005ba8": "data_at_offset_from_DAT_08005ba8",
                "PTR_": "ptr_to_",
                "uint": "uint32_t",
                "*": "ptr_to_",
                "&": "bitwise_and",
                "0xfffffffb": "bitwise_not_4th_bit"
            },
            "code": "void clear_bit_in_uint32_t_at_offset_from_DAT_08005ba8_08005b90(void)\n{\n  uint32_t* PTR_uint32_t = (uint32_t*)(DAT_08005ba8 + 4);\n  *PTR_uint32_t &= ~(1 << 2);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b90",
            "calling": [],
            "imported": false,
            "current_name": "clear_bit_in_uint32_t_at_offset_from_DAT_08005ba8_08005b90"
        },
        "FUN_080071d0": {
            "renaming": {
                "FUN_080071d0": "configure_gpio_pins_080071d0",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin_mask",
                "uVar1": "bit_mask",
                "uVar2": "pin_check",
                "iocurrent": "unused_iocurrent",
                "ioposition": "unused_ioposition",
                "position": "position",
                "tmp": "unused_tmp",
                "DAT_08007308": "dat_array",
                "*DAT_0800730c": "dat_pointer",
                "DAT_0800730c": "dat_array_2"
            },
            "code": "void configure_gpio_pins_080071d0(GPIO_TypeDef *gpio, uint32_t pin_mask) {\n  for (uint32_t position = 0; position < 16; position++) {\n    uint32_t bit_mask = 1 << position;\n    if (pin_mask & bit_mask) {\n      uint32_t moder_mask = ~(3 << (position * 2));\n      gpio->MODER &= moder_mask;\n      uint32_t afr_index = position / 8;\n      uint32_t afr_shift = (position % 8) * 4;\n      uint32_t afr_mask = ~(0xf << afr_shift);\n      gpio->AFR[afr_index] &= afr_mask;\n      uint32_t ospeedr_mask = ~(3 << (position * 2));\n      gpio->OSPEEDR &= ospeedr_mask;\n      uint32_t otyper_mask = ~(1 << position);\n      gpio->OTYPER &= otyper_mask;\n      uint32_t pupdr_mask = ~(3 << (position * 2));\n      gpio->PUPDR &= pupdr_mask;\n      uint32_t dat_index = (position / 4) + 2;\n      uint32_t dat_shift = (position % 4) * 4;\n      uint32_t dat_mask = ~(0xf << dat_shift);\n      *(uint *)(DAT_08007308 + dat_index * 4) &= dat_mask;\n      *DAT_0800730c &= ~bit_mask;\n      DAT_0800730c[1] &= ~bit_mask;\n      DAT_0800730c[2] &= ~bit_mask;\n      DAT_0800730c[3] &= ~bit_mask;\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071d0",
            "calling": [],
            "imported": false,
            "current_name": "configure_gpio_pins_080071d0"
        },
        "FUN_08008e60": {
            "renaming": {
                "FUN_08008e60": "calculate_hash_08008e60",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "output",
                "uVar2": "shifted_input_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "constant",
                "uVar6": "shifted_input_1"
            },
            "code": "uint calculate_hash_08008e60(uint input_1, uint input_2) {\n  uint output;\n  uint leading_zeroes;\n  uint shifted_input_2;\n  uint shifted_input_1;\n  uint temp_var;\n  uint constant;\n\n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  output = input_1;\n  if (input_2 == 0) {\n    output = 0;\n    input_2 = input_1;\n  }\n  constant = 0x5b000000;\n  if (input_2 == 0) {\n    constant = 0x4b000000;\n  }\n  leading_zeroes = count_leading_zeroes(input_2);\n  shifted_input_2 = input_2 << (leading_zeroes - 8);\n  temp_var = constant + ((leading_zeroes - 8) * -0x800000) - 0x800000;\n  if (leading_zeroes < 8) {\n    shifted_input_1 = input_1 << (leading_zeroes + 24);\n    output = temp_var + ((input_2 >> (32 - (leading_zeroes + 24))) - ((int)shifted_input_1 >> 31));\n    if ((output | (shifted_input_1 << 1)) == 0) {\n      output = output & ~(shifted_input_1 >> 31);\n    }\n    return output;\n  }\n  shifted_input_1 = input_1 << (leading_zeroes - 8);\n  temp_var = temp_var + (input_2 << (leading_zeroes - 8)) + (input_1 >> (32 - (leading_zeroes - 8))) + (uint)(0x7fffffff < (input_1 << (leading_zeroes - 8)));\n  if ((input_1 << (leading_zeroes - 8)) == 0x80000000) {\n    temp_var = temp_var & 0xfffffffe;\n  }\n  return temp_var;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08008e60"
        },
        "FUN_08005984": {
            "renaming": {
                "FUN_08005984": "execute_afl_call_08005984",
                "ticks": "ticks",
                "uVar1": "call_result",
                "PTR_noHyperCall_080059b0": "PTR_noHyperCall_080059b0",
                "aflCall": "aflCall"
            },
            "code": "uint32_t execute_afl_call_08005984(int ticks)\n{\n  uint32_t call_result;\n\n  if (*(int *)PTR_noHyperCall_080059b0 == 0) {\n    call_result = aflCall(1, ticks, 0);\n  }\n  else {\n    call_result = 0;\n  }\n  return call_result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_afl_call_08005984"
        },
        "FUN_080082c8": {
            "renaming": {
                "FUN_080082c8": "FUNC_080082c8"
            },
            "code": "\nulonglong FUNC_080082c8(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if (uVar7 - 1 != 0 && 0xfffff < uVar10) goto LAB_080083e0;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082c8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_080082c8"
        },
        "FUN_08006718": {
            "renaming": {
                "FUN_08006718": "configure_oscillator_08006718",
                "*RCC_OscInitStruct": "*osc_init",
                "uVar1": "leading_zeroes",
                "result_2": "",
                "result_3": "",
                "result_4": "",
                "result_5": "",
                "result_6": "",
                "result_7": "",
                "result": "",
                "result_1": "",
                "DAT_080068b8": "rcc_registers",
                "RCC_OscInitTypeDef": "RCC_OscillatorInitTypeDef",
                "OscillatorType": "OscillatorType",
                "HSEState": "HSEState",
                "HSIState": "HSIState",
                "HSICalibrationValue": "HSICalibrationValue",
                "LSEState": "LSEState",
                "LSIState": "LSIState",
                "PLLState": "PLLState",
                "PLLSource": "PLLSource",
                "PLLM": "PLLM",
                "PLLN": "PLLN",
                "PLLP": "PLLP",
                "PLLQ": "PLLQ"
            },
            "code": "void configure_oscillator_08006718(RCC_OscInitTypeDef *osc_init)\n{\n    uint32_t *rcc_cr = (uint32_t*)0x40023800;\n    uint32_t *rcc_cfgr = (uint32_t*)0x40023808;\n    uint32_t *rcc_pllcfgr = (uint32_t*)0x40023804;\n\n    osc_init->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;\n\n    if ((*rcc_cr & RCC_CR_HSERDY) == RCC_CR_HSERDY) {\n        osc_init->HSEState = RCC_HSE_ON;\n    }\n    else if ((*rcc_cr & RCC_CR_HSIDIV) == RCC_CR_HSIDIV) {\n        osc_init->HSEState = RCC_HSE_BYPASS;\n    }\n    else {\n        osc_init->HSEState = RCC_HSE_OFF;\n    }\n\n    if ((*rcc_cr & RCC_CR_HSIRDY) == RCC_CR_HSIRDY) {\n        osc_init->HSIState = RCC_HSI_ON;\n    }\n    else {\n        osc_init->HSIState = RCC_HSI_OFF;\n    }\n\n    osc_init->HSICalibrationValue = (*rcc_cfgr & RCC_CFGR_HSITRIM) >> RCC_CFGR_HSITRIM_Pos;\n\n    if ((*rcc_cr & RCC_CR_LSERDY) == RCC_CR_LSERDY) {\n        osc_init->LSEState = RCC_LSE_ON;\n    }\n    else if ((*rcc_cr & RCC_CR_LSEBYP) == RCC_CR_LSEBYP) {\n        osc_init->LSEState = RCC_LSE_BYPASS;\n    }\n    else {\n        osc_init->LSEState = RCC_LSE_OFF;\n    }\n\n    if ((*rcc_cr & RCC_CR_LSIRDY) == RCC_CR_LSIRDY) {\n        osc_init->LSIState = RCC_LSI_ON;\n    }\n    else {\n        osc_init->LSIState = RCC_LSI_OFF;\n    }\n\n    if ((*rcc_pllcfgr & RCC_PLLCFGR_PLLR) == RCC_PLLCFGR_PLLR) {\n        osc_init->PLL.PLLState = RCC_PLL_ON;\n    }\n    else {\n        osc_init->PLL.PLLState = RCC_PLL_OFF;\n    }\n\n    osc_init->PLL.PLLSource = (*rcc_pllcfgr & RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;\n    osc_init->PLL.PLLM = (*rcc_pllcfgr & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;\n    osc_init->PLL.PLLN = (*rcc_pllcfgr & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;\n    osc_init->PLL.PLLP = (*rcc_pllcfgr & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;\n    osc_init->PLL.PLLQ = (*rcc_pllcfgr & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006718",
            "calling": [],
            "imported": false,
            "current_name": "configure_oscillator_08006718"
        },
        "FUN_08007a10": {
            "renaming": {
                "FUN_08007a10": "set_timer_flag_08007a10",
                "tim": "timer",
                "DAT_40000000": "TIMER1",
                "DAT_08007a64": "TIMER_FLAG",
                "DAT_08007a68": "TIMER2",
                "DAT_08007a6c": "TIMER3"
            },
            "code": "void set_timer_flag_08007a10(TIM_TypeDef *timer) {\n  uint32_t *timer_flag = (uint32_t *)DAT_08007a64;\n  if (timer == (TIM_TypeDef *)&DAT_40000000) {\n    *timer_flag |= 1;\n  }\n  else if (timer == DAT_08007a68) {\n    *timer_flag |= 2;\n  }\n  else if (timer == DAT_08007a6c) {\n    *timer_flag |= 4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "g540_timer_init",
                "step_timer_init"
            ],
            "imported": false,
            "current_name": "set_timer_flag_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "FUN_0800856c": "calculate_bits_0800856c",
                "param_1": "number",
                "uVar1": "absolute_value_shifted",
                "uVar2": "absolute_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes_count",
                "uVar5": "shift_amount_with_offset",
                "uVar6": "is_negative_mask",
                "in_r12": "high_bits_mask",
                "bVar7": "is_leading_zeroes_negative",
                "bVar8": "is_leading_zeroes_zero",
                "bVar9": "is_shift_amount_negative"
            },
            "code": "ulonglong calculate_bits_0800856c(uint number)\n{\n  uint absolute_value;\n  uint leading_zeroes_count;\n  uint shift_amount;\n  uint high_bits_mask;\n  uint low_bits_mask;\n  uint high_bits;\n  uint low_bits;\n  bool is_negative;\n  bool is_leading_zeroes_negative;\n  bool is_leading_zeroes_zero;\n  \n  if (number == 0) {\n    return 0;\n  }\n  is_negative = (number & 0x80000000) != 0;\n  absolute_value = is_negative ? -number : number;\n  leading_zeroes_count = count_leading_zeroes(absolute_value);\n  shift_amount = leading_zeroes_count + 0x15;\n  is_leading_zeroes_negative = shift_amount < 0;\n  is_leading_zeroes_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    shift_amount = is_leading_zeroes_negative || is_leading_zeroes_zero ? 0x20 - leading_zeroes_count : shift_amount;\n    high_bits = absolute_value << (shift_amount & 0xff);\n    low_bits_mask = 0U >> ((0x20 - shift_amount) & 0xff);\n    low_bits = high_bits | low_bits_mask;\n    high_bits_mask = 0 << (shift_amount & 0xff);\n  } else {\n    high_bits_mask = absolute_value & 0x80000000;\n    shift_amount = is_leading_zeroes_negative || is_leading_zeroes_zero ? 0x20 - leading_zeroes_count : shift_amount;\n    high_bits = absolute_value << (shift_amount & 0xff);\n    low_bits_mask = 0U >> ((0x20 - shift_amount) & 0xff);\n    low_bits = high_bits | low_bits_mask;\n  }\n  if (shift_amount < 0x433) {\n    return CONCAT44(low_bits | high_bits_mask, high_bits);\n  }\n  uint shift_amount_complement = ~(0x432 - shift_amount);\n  if (shift_amount_complement > 0x1e) {\n    return CONCAT44(number, high_bits >> ((shift_amount_complement - 0x1f) & 0xff)) & 0x80000000ffffffff;\n  }\n  int shift_amount_difference = shift_amount_complement - 0x13;\n  if (shift_amount_difference == 0 || (shift_amount_complement - 0x1f < 0) != (shift_amount_difference < 0)) {\n    shift_amount_complement++;\n    uint high_bits_shifted = high_bits >> (shift_amount_complement & 0xff);\n    uint low_bits_shifted = low_bits << ((0x20 - shift_amount_complement) & 0xff);\n    return CONCAT44(high_bits_mask | high_bits_shifted, low_bits_shifted | (high_bits << ((shift_amount_complement - 0x20) & 0xff)));\n  }\n  return CONCAT44(number, high_bits >> ((0x20 - (0xc - shift_amount_difference)) & 0xff) | (low_bits << ((0xc - shift_amount_difference) & 0xff))) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "calculate_trapezoid_for_block",
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "imported": false,
            "current_name": "calculate_bits_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "FUN_08008b00": "convert_float_to_double_08008b00",
                "param_1": "float_num"
            },
            "code": "undefined4 convert_float_to_double_08008b00(undefined4 float_num)\n{\n  __nedf2();\n  return float_num;\n}",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "__aeabi_dcmplt",
                "__aeabi_cdrcmple",
                "__aeabi_dcmpeq",
                "__aeabi_dcmple"
            ],
            "imported": false,
            "current_name": "convert_float_to_double_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "FUN_0800585c": "wake_up_if_asleep_0800585c",
                "PTR_sys_08005878": "PTR_sys_state",
                "st_wake_up": "wake_up_system"
            },
            "code": "void wake_up_if_asleep_0800585c(void)\n{\n    if (PTR_sys_08005878[1] == '\\x02') {\n        PTR_sys_08005878[1] = 3;\n        wake_up_system();\n    }\n    return;\n}",
            "called": [
                "st_wake_up"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "mc_go_home",
                "protocol_execute_runtime",
                "mc_line"
            ],
            "imported": false,
            "current_name": "wake_up_if_asleep_0800585c"
        },
        "FUN_08008cd0": {
            "renaming": {
                "FUN_08008cd0": "FUNC_08008cd0"
            },
            "code": "\nuint FUNC_08008cd0(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_1 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = param_2;\n      if (iVar7 == -1) {\n        uVar4 = uVar2;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        param_2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == param_2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        uVar2 = param_2;\n      }\n      return uVar2;\n    }\n    if (uVar2 != param_2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      param_1 = param_1 << 1;\n      if ((uVar2 & 0x80000000) != 0) {\n        param_1 = param_1 | 0x80000000;\n      }\n      return param_1;\n    }\n    if (uVar4 < 0xfe000000) {\n      return uVar2 + 0x800000;\n    }\n    uVar2 = uVar2 & 0x80000000;\nLAB_08008e12:\n    return uVar2 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_2 = param_2 ^ uVar2;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return uVar2;\n  }\n  uVar4 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  uVar2 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar6 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar6 != 0);\n    uVar6 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || uVar4 < 0x800000) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar5 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar5 & 0xff);\n      if ((int)uVar6 < (int)uVar5) {\n        uVar4 = uVar4 >> (-(uVar6 - uVar5) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar6 - uVar5) * 0x800000;\n      }\n      return uVar4 | uVar2;\n    }\n  }\n  else {\n    uVar6 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar6 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar6 != 0) << 0x1f | uVar3 >> 1;\n      uVar6 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  uVar4 = uVar4 + uVar6 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | uVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08008cd0"
        },
        "FUN_0800597c": {
            "renaming": {
                "FUN_0800597c": "interrupt_handler_0800597c",
                "a0": "data",
                "a1": "flags",
                "a2": "interrupt_type"
            },
            "code": "uint32_t interrupt_handler_0800597c(uint32_t data, uint32_t flags, int32_t interrupt_type)\n{\n  software_interrupt(0x3f);\n  return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "interrupt_handler_0800597c"
        },
        "FUN_08009314": {
            "renaming": {
                "FUN_08009314": "infinite_loop_08009314"
            },
            "code": "void infinite_loop_08009314(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [
                "DMA1_Stream3_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009314",
            "calling": [
                "DMA1_Stream3_IRQHandler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08009314"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "calculate_08009798",
                "__x": "input",
                "in_r1": "shift",
                "iVar1": "exponent",
                "in_d0": "result"
            },
            "code": "double calculate_08009798(double input) {\n  int exponent;\n  int shift;\n  double result;\n  exponent = ((uint)(shift << 1) >> 0x15) - 0x3ff;\n  if (exponent < 0x14) {\n    if (exponent < 0) {\n      return result;\n    }\n  }\n  else {\n    if (exponent < 0x34) {\n      return result;\n    }\n    if (exponent != 0x400) {\n      return result;\n    }\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "protocol_execute_line",
                "gc_execute_line",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "calculate_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "FUNC_08008cd8"
            },
            "code": "\nuint FUNC_08008cd8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || uVar4 < 0x800000) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cd8",
            "calling": [
                "intersection_distance",
                "report_realtime_status",
                "mc_arc",
                "plan_buffer_line",
                "mc_dwell",
                "max_allowable_speed",
                "gc_execute_line",
                "estimate_acceleration_distance"
            ],
            "imported": false,
            "current_name": "FUNC_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "debounce_input_handler_08007930",
                "puVar1": "debounce_control",
                "uVar2": "current_input",
                "uVar3": "off_on_bits",
                "iVar4": "state",
                "off_bits": "off_mask",
                "on_bits": "on_mask"
            },
            "code": "void debounce_input_handler_08007930(void) {\n  uint32_t current_input;\n  uint32_t previous_input;\n  uint32_t state;\n  DEBOUNCE_CTRL *debounce_control;\n  debounce_control = PTR_debounce_080079b8;\n  if (*(int *)PTR_debounce_ready_080079bc != 0) {\n    state = *(uint *)(debounce_control + 0x14);\n    current_input = debounce_input();\n    *(uint32_t *)(debounce_control + state * 4) = current_input;\n    if (state == 3) {\n      state = 0;\n    }\n    else {\n      state++;\n    }\n    *(uint *)(debounce_control + 0x14) = state;\n    previous_input = debounce_rd();\n    if (previous_input != *(uint *)(debounce_control + 0x10)) {\n      uint32_t off_bits = *(uint *)(debounce_control + 0x10);\n      uint32_t on_bits = previous_input;\n      if ((~off_bits & on_bits) != 0) {\n        debounce_on_handler(~off_bits & on_bits);\n      }\n      if ((~on_bits & off_bits) != 0) {\n        debounce_off_handler(~on_bits & off_bits);\n      }\n      *(uint *)(debounce_control + 0x10) = previous_input;\n    }\n  }\n  return;\n}",
            "called": [
                "debounce_on_handler",
                "debounce_input",
                "debounce_rd",
                "debounce_off_handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "debounce_input_handler_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "is_completed_08000188",
                "*param_1": "init_ptr",
                "*PTR_completed_8911_080001a0": "completed_flag",
                "DAT_080001a4": "data",
                "PTR__init_080001a8": "init_ptr"
            },
            "code": "bool is_completed_08000188(bool **PTR_completed_8911_080001a0, int DAT_080001a4, int *PTR__init_080001a8) {\n                          if (**PTR_completed_8911_080001a0 == false) {\n                              if (DAT_080001a4 != 0) {\n                                  PTR__init_080001a8 = &DAT_080001a4;\n                              }\n                              **PTR_completed_8911_080001a0 = true;\n                          }\n                          return PTR__init_080001a8;\n                      }",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "is_completed_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "FUNC_080082d0"
            },
            "code": "\nulonglong FUNC_080082d0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if (uVar9 - 1 != 0 && 0xfffff < uVar11) goto LAB_080083e0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d0",
            "calling": [
                "__ieee754_atan2",
                "mc_arc",
                "cos",
                "__ieee754_sqrt",
                "sin",
                "__ieee754_hypot",
                "report_realtime_status",
                "__kernel_cos",
                "__ieee754_rem_pio2",
                "plan_buffer_line",
                "atan",
                "__kernel_rem_pio2",
                "__kernel_sin"
            ],
            "imported": false,
            "current_name": "FUNC_080082d0"
        },
        "FUN_08008e70": {
            "renaming": {
                "FUN_08008e70": "calculate_quotient_08008e70",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "shifted_dividend",
                "uVar2": "remainder",
                "iVar3": "leading_zeros",
                "uVar4": "shift_amount",
                "iVar6": "adjustment",
                "uVar5": "sign_bit",
                "uVar7": "shifted_divisor",
                "bVar8": "dividend_non_zero"
            },
            "code": "uint calculate_quotient_08008e70(uint dividend, uint divisor)\n{\n  uint quotient = 0;\n  uint sign_bit = divisor & 0x80000000;\n  if (sign_bit != 0) {\n    bool dividend_non_zero = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)dividend_non_zero;\n  }\n  uint remainder = dividend;\n  if (divisor != 0) {\n    sign_bit |= 0x5b000000;\n    if (dividend == 0) {\n      sign_bit += 0xf0000000;\n    }\n    int leading_zeros = count_leading_zeroes(divisor);\n    uint shift_amount = leading_zeros - 8;\n    int adjustment = (sign_bit - 0x800000) + shift_amount * -0x800000;\n    if (leading_zeros < 8) {\n      uint shifted_divisor = divisor << (leading_zeros + 0x18U & 0xff);\n      uint shifted_dividend = remainder << (leading_zeros + 0x18U & 0xff);\n      uint quotient_candidate = (shifted_dividend >> 0x1f) + (shifted_divisor >> 0x1f) + adjustment;\n      if ((remainder | (shifted_divisor << 1)) == 0) {\n        quotient_candidate &= ~(shifted_divisor >> 0x1f);\n      }\n      quotient = quotient_candidate;\n    }\n    else {\n      uint shifted_dividend = remainder << shift_amount;\n      uint shifted_divisor = divisor << shift_amount;\n      uint quotient_candidate = shifted_dividend / shifted_divisor;\n      quotient = quotient_candidate + adjustment;\n      if ((remainder << (32 - shift_amount)) == divisor) {\n        quotient &= 0xfffffffe;\n      }\n    }\n  }\n  return quotient;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e70",
            "calling": [],
            "imported": false,
            "current_name": "calculate_quotient_08008e70"
        },
        "FUN_08009318": {
            "renaming": {
                "FUN_08009318": "calculate_08009318",
                "__x": "input",
                "in_r0": "upper_bits",
                "in_r1": "lower_bits",
                "uVar1": "exponent_diff",
                "uVar2": "exponent",
                "in_d0": "result",
                "extraout_d0": "addend2",
                "extraout_d0_00": "addend1",
                "extraout_d0_01": "addend3",
                "uVar3": "undefined_variable"
            },
            "code": "double calculate_08009318(double input){\n  uint upper_bits;\n  uint lower_bits;\n  uint exponent;\n  uint exponent_diff;\n  double result;\n  double addend1;\n  double addend2;\n  double addend3;\n  undefined8 uVar3;\n  \n  exponent = (lower_bits << 1) >> 0x15;\n  exponent_diff = exponent - 0x3ff;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      uVar3 = __aeabi_dadd(upper_bits, lower_bits, DAT_08009400, DAT_08009404);\n      __aeabi_dcmpgt((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), 0, 0);\n      result = addend1;\n    }\n    else if ((lower_bits & DAT_08009408 >> (exponent_diff & 0xff) | upper_bits) != 0) {\n      uVar3 = __aeabi_dadd(upper_bits, lower_bits, DAT_08009400, DAT_08009404);\n      __aeabi_dcmpgt((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), 0, 0);\n      result = addend2;\n    }\n  }\n  else if ((int)exponent_diff < 0x34) {\n    if ((0xffffffffU >> (exponent - 0x413 & 0xff) & upper_bits) != 0) {\n      uVar3 = __aeabi_dadd(upper_bits, lower_bits, DAT_08009400, DAT_08009404);\n      __aeabi_dcmpgt((int)uVar3, (int)((ulonglong)uVar3 >> 0x20), 0, 0);\n      result = addend3;\n    }\n  }\n  else if (exponent_diff == 0x400) {\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}",
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "calculate_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "FUN_080018cc": "set_x_in_memory_080018cc",
                "x": "new_x",
                "val": "old_data",
                "PTR_DAT_080018f8": "data_ptr",
                "DAT_080018f8": "data_offset",
                "mask": "mask",
                "new_data": "new_data"
            },
            "code": "void set_x_in_memory_080018cc(uint32_t new_x) {\n  uint32_t* PTR_DAT_080018f8 = (uint32_t*)(DAT_080018f8 + 0x14);\n  uint32_t old_data = *(uint32_t*)PTR_DAT_080018f8;\n  uint32_t mask = 0xfffffaaf;\n  uint32_t new_data = new_x | (old_data & mask);\n  *PTR_DAT_080018f8 = new_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "homing_cycle"
            ],
            "imported": false,
            "current_name": "set_x_in_memory_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "FUN_080079e0": "set_interrupt_priority_080079e0",
                "IRQn": "interrupt_number",
                "DAT_08007a0c": "interrupt_register_base_address",
                "interrupt_register_address": "interrupt_register_address",
                "IRQn_Type": "interrupt_type",
                "interrupt_bit_position": "interrupt_bit_position",
                "interrupt_bit_mask": "interrupt_bit_mask"
            },
            "code": "void set_interrupt_priority_080079e0(IRQn_Type interrupt_number)\n{\n    int *interrupt_register_address = (int *)(DAT_08007a0c + ((uint)(int)interrupt_number >> 5) * 4);\n    int interrupt_bit_position = IRQn & 0x1fU;\n    int interrupt_bit_mask = 1 << interrupt_bit_position;\n    *interrupt_register_address = interrupt_bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "enable_tim_interrupt"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "FUN_08006a58": "set_interrupt_handler_08006a58",
                "IRQn": "irq_number",
                "DAT_08006a88": "interrupt_register_base"
            },
            "code": "void set_interrupt_handler_08006a58(IRQn_Type irq_number) {\n    int* interrupt_register = (int*)(DAT_08006a88 + (((uint)(int)irq_number >> 5) + 0x40) * 4);\n    int interrupt_bit = 1 << (irq_number & 0x1fU);\n    *interrupt_register = interrupt_bit;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "FUN_08005a84": "get_uwTick_value_08005a84",
                "PTR_uwTick_08005a94": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08005a84(void)\n{\n  uint32_t *PTR_uwTick_08005a94 = (uint32_t *)PTR_uwTick_08005a94;\n  return *PTR_uwTick_08005a94;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "HAL_Delay",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "get_current_usecs",
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "FUN_08008b10": "compare_double_equals_08008b10",
                "in_ZR": "input_char"
            },
            "code": "bool compare_double_equals_08008b10(void)\\n{\\n  char input_char;\\n  __aeabi_cdcmpeq();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "imported": false,
            "current_name": "compare_double_equals_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "FUNC_08004e30"
            },
            "code": "\nuint8_t FUNC_08004e30(int parameter,float value)\n\n{\n  undefined uVar1;\n  undefined2 uVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint in_r1;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined4 extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 extraout_r1_05;\n  undefined4 extraout_r1_06;\n  \n  switch(parameter) {\n  case 0:\n  case 1:\n  case 2:\n    iVar3 = __aeabi_fcmple(value,in_r1,0);\n    if (iVar3 != 0) {\n      return '\\b';\n    }\n    *(uint *)(PTR_settings_080051a8 + parameter * 4) = in_r1;\n    break;\n  case 3:\n    iVar3 = __aeabi_fcmplt(in_r1,DAT_080051ac);\n    if (iVar3 != 0) {\n      return '\\t';\n    }\n    uVar4 = __aeabi_f2d(in_r1);\n    round((double)CONCAT44(parameter,in_r1));\n    uVar1 = __aeabi_d2uiz(uVar4,extraout_r1);\n    PTR_settings_080051a8[0xd] = uVar1;\n    break;\n  case 4:\n    *(uint *)(PTR_settings_080051a8 + 0x10) = in_r1;\n    break;\n  case 5:\n    *(uint *)(PTR_settings_080051a8 + 0x14) = in_r1;\n    break;\n  case 6:\n    uVar4 = __aeabi_f2d(in_r1);\n    trunc((double)CONCAT44(parameter,in_r1));\n    uVar2 = __aeabi_d2uiz(uVar4,extraout_r1_00);\n    *(undefined2 *)(PTR_settings_080051a8 + 0x18) = uVar2;\n    break;\n  case 7:\n    uVar4 = __aeabi_f2d(in_r1);\n    round((double)CONCAT44(parameter,in_r1));\n    uVar1 = __aeabi_d2uiz(uVar4,extraout_r1_01);\n    PTR_settings_080051a8[0x3c] = uVar1;\n    break;\n  case 8:\n    uVar4 = __aeabi_fmul(in_r1,DAT_080051b0);\n    uVar4 = __aeabi_fmul(uVar4,DAT_080051b0);\n    *(undefined4 *)(PTR_settings_080051a8 + 0x20) = uVar4;\n    break;\n  case 9:\n    *(uint *)(PTR_settings_080051a8 + 0x24) = in_r1 & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_settings_080051a8 + 0x1c) = in_r1;\n    break;\n  case 0xb:\n    uVar4 = __aeabi_f2d(in_r1);\n    round((double)CONCAT44(parameter,in_r1));\n    uVar1 = __aeabi_d2uiz(uVar4,extraout_r1_02);\n    PTR_settings_080051a8[0x3e] = uVar1;\n    break;\n  case 0xc:\n    uVar4 = __aeabi_f2d(in_r1);\n    round((double)CONCAT44(parameter,in_r1));\n    uVar1 = __aeabi_d2uiz(uVar4,extraout_r1_03);\n    PTR_settings_080051a8[0x3d] = uVar1;\n    break;\n  case 0xd:\n    iVar3 = __aeabi_fcmpeq(in_r1,0);\n    if (iVar3 == 0) {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    iVar3 = __aeabi_fcmpeq(in_r1,0);\n    if (iVar3 == 0) {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    iVar3 = __aeabi_fcmpeq(in_r1,0);\n    if (iVar3 == 0) {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    iVar3 = __aeabi_fcmpeq(in_r1,0);\n    if (iVar3 == 0) {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] & 0xf7;\n    }\n    limits_init();\n    break;\n  case 0x11:\n    iVar3 = __aeabi_fcmpeq(in_r1,0);\n    if (iVar3 == 0) {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_settings_080051a8[0x28] = PTR_settings_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    uVar4 = __aeabi_f2d(in_r1);\n    trunc((double)CONCAT44(parameter,in_r1));\n    uVar2 = __aeabi_d2uiz(uVar4,extraout_r1_04);\n    *(undefined2 *)(PTR_settings_080051a8 + 0x2a) = uVar2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_settings_080051a8 + 0x2c) = in_r1;\n    break;\n  case 0x14:\n    *(uint *)(PTR_settings_080051a8 + 0x30) = in_r1;\n    break;\n  case 0x15:\n    uVar4 = __aeabi_f2d(in_r1);\n    round((double)CONCAT44(parameter,in_r1));\n    uVar2 = __aeabi_d2uiz(uVar4,extraout_r1_05);\n    *(undefined2 *)(PTR_settings_080051a8 + 0x34) = uVar2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_settings_080051a8 + 0x38) = in_r1;\n    break;\n  case 0x17:\n    uVar4 = __aeabi_f2d(in_r1);\n    trunc((double)CONCAT44(parameter,in_r1));\n    uVar2 = __aeabi_d2uiz(uVar4,extraout_r1_06);\n    *(undefined2 *)(PTR_settings_080051a8 + 0x1a) = uVar2;\n    break;\n  default:\n    return '\\x06';\n  }\n  write_global_settings();\n  return '\\0';\n}\n\n",
            "called": [
                "__aeabi_fcmple",
                "round",
                "__aeabi_fcmpeq",
                "__aeabi_fmul",
                "limits_init",
                "__aeabi_d2uiz",
                "trunc",
                "__aeabi_f2d",
                "__aeabi_fcmplt",
                "write_global_settings"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004e30",
            "calling": [
                "protocol_execute_line"
            ],
            "imported": false,
            "current_name": "FUNC_08004e30"
        },
        "FUN_0800736c": {
            "renaming": {
                "FUN_0800736c": "toggle_GPIO_pin_state_0800736c",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "ODR": "pin_state"
            },
            "code": "void toggle_GPIO_pin_state_0800736c(GPIO_TypeDef *GPIO_port, uint16_t pin_number)\n{\n  GPIO_port->ODR ^= (uint)pin_number;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800736c",
            "calling": [],
            "imported": false,
            "current_name": "toggle_GPIO_pin_state_0800736c"
        },
        "FUN_08008c30": {
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result2",
                "uVar2": "product",
                "uVar3": "sum",
                "in_r12": "temp",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "SCARRY4": "carry"
            },
            "code": "uint calculate_float_08008c30(uint input1, uint input2) {\n  uint product = input2 * 2;\n  bool is_less_than = product < 0x70000000;\n  uint sum = product + 0x90000000;\n  uint result = sum;\n  if (!is_less_than) {\n    uint temp = product + 0x8fe00000;\n    result = temp;\n  }\n  bool is_zero = result == 0;\n  if (!is_less_than && sum >= 0x200000) {\n    is_zero = temp == 0x1fc00000;\n  }\n  if (((is_less_than || sum < 0x200000) || 0x1fc00000 < temp) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)product >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(product + 0x92e00000) < 0 != SCARRY4(sum,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    uint shift_amount = 0x18 - (product + 0x92e00000 >> 0x15);\n    uint shifted_input1 = input1 >> (shift_amount & 0xff);\n    if (input1 << (0x20 - shift_amount & 0xff) != 0) {\n      shifted_input1 = shifted_input1 | 1;\n    }\n    uint shifted_input2 = (input2 & 0x1fffff) | 0x100000;\n    input1 = shifted_input1 | shifted_input2 << (0x20 - shift_amount & 0xff);\n    shifted_input2 = (shifted_input2 >> (shift_amount & 0xff)) << 1;\n  }\n  uint shifted_input1 = input1 >> 0x1d;\n  uint multiplied = shifted_input2 * 4;\n  bool carry = 0x7fffffff < input1 * 8;\n  uint result2 = (input2 & 0x80000000 | shifted_input1) + multiplied + carry;\n  if (input1 * 8 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "homing_cycle",
                "report_realtime_status",
                "report_gcode_parameters",
                "mc_arc",
                "plan_buffer_line",
                "to_millimeters",
                "max_allowable_speed",
                "gc_execute_line",
                "read_float",
                "report_gcode_modes"
            ],
            "imported": false,
            "current_name": "calculate_float_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "FUNC_080082d4"
            },
            "code": "\nulonglong FUNC_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if (uVar7 - 1 != 0 && 0xfffff < uVar10) goto LAB_080083e0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d4",
            "calling": [
                "scalbn",
                "__ieee754_atan2",
                "round",
                "ceil",
                "mc_arc",
                "floor",
                "__ieee754_sqrt",
                "__ieee754_hypot",
                "__kernel_cos",
                "trunc",
                "__ieee754_rem_pio2",
                "__aeabi_drsub",
                "atan",
                "__kernel_rem_pio2",
                "__kernel_sin"
            ],
            "imported": false,
            "current_name": "FUNC_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "FUN_08007bf0": "update_timer_08007bf0",
                "ticks": "current_ticks",
                "TIMx": "timer_instance",
                "_DAT_4000002c": "PTR_TIM2_ARR",
                "_DAT_40000024": "PTR_TIM2_CNT"
            },
            "code": "void update_timer_08007bf0(uint32_t ticks)\n{\n  uint32_t current_ticks;\n  TIM_TypeDef *timer_instance;\n\n  current_ticks = ticks;\n  _DAT_4000002c = current_ticks;\n  if (current_ticks <= _DAT_40000024) {\n    _DAT_40000024 = current_ticks;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "set_step_events_per_minute"
            ],
            "imported": false,
            "current_name": "update_timer_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "FUN_08008590": "shift_and_mask_08008590",
                "param_1": "num",
                "param_2": "mask",
                "param_3": "shift_amount",
                "param_4": "masked",
                "uVar1": "sign_bit",
                "uVar2": "shifted_num_copy",
                "uVar3": "shifted_mask_copy",
                "uVar4": "shift",
                "uVar5": "shifted_num",
                "uVar7": "leading_zeroes",
                "iVar6": "count",
                "in_r12": "unused",
                "bVar8": "is_left_shifted_zero",
                "bVar9": "is_masked_ff",
                "bVar10": "is_shift_negative"
            },
            "code": "uint64_t shift_and_mask_08008590(uint32_t num, uint32_t mask, uint32_t shift_amount)\n{\n  uint32_t shifted_num = num << 1;\n  uint32_t sign_bit = ((num & 0x80000000) != 0) << 0x1f;\n  uint32_t shifted_mask = ((int)shifted_num >> 3) >> 1;\n  uint32_t masked = shifted_num & 0xff000000;\n  bool is_masked_zero = masked == 0;\n  bool is_masked_ff = masked == 0xff000000;\n  uint64_t result;\n  if (!is_masked_zero && !is_masked_ff)\n  {\n    result = ((uint64_t)sign_bit | shifted_mask) << 0x1d | num;\n    result ^= 0x3800000000000000;\n  }\n  else if ((shifted_num & 0xffffff) == 0)\n  {\n    result = ((uint64_t)sign_bit | shifted_mask) << 0x1d | num;\n  }\n  else if (is_masked_ff)\n  {\n    result = ((uint64_t)sign_bit | shifted_mask) << 0x1d | num;\n    result |= 0x8000000000000;\n  }\n  else\n  {\n    uint32_t shifted_num_copy = shifted_num;\n    uint32_t shifted_mask_copy = shifted_mask;\n    if (shifted_mask_copy == 0)\n    {\n      shifted_num_copy = 0;\n      shifted_mask_copy = num << 1;\n    }\n    int leading_zeroes = count_leading_zeroes(shifted_mask_copy);\n    if (shifted_mask_copy == 0)\n    {\n      leading_zeroes += 0x20;\n    }\n    uint32_t shift = leading_zeroes - 0xb;\n    if (shift < 0)\n    {\n      shift = 0;\n    }\n    else if (shift > 0x20)\n    {\n      shift = 0x20;\n    }\n    uint32_t left_shifted_mask = shifted_mask_copy << (shift & 0xff);\n    uint32_t right_shifted_mask = shifted_mask_copy >> (0xcU - leading_zeroes + shift & 0xff);\n    uint32_t left_shifted_num = shifted_num_copy << (shift & 0xff);\n    uint32_t right_shifted_num = num >> (0x20 - shift & 0xff);\n    uint32_t masked_shifted_num = (left_shifted_num | right_shifted_num) & left_shifted_mask;\n    result = ((uint64_t)sign_bit | masked_shifted_num >> (0x380 - leading_zeroes) * 0x100000) << 0x20 | left_shifted_num >> (0x380 - leading_zeroes) * 0x100000 | right_shifted_num << (leading_zeroes - 0x20 & 0xff);\n  }\n  return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "protocol_execute_line",
                "homing_cycle",
                "mc_arc",
                "mc_dwell",
                "max_allowable_speed",
                "read_float",
                "report_gcode_modes",
                "settings_store_global_setting",
                "calculate_trapezoid_for_block",
                "report_realtime_status",
                "report_gcode_parameters",
                "plan_buffer_line",
                "to_millimeters",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "shift_and_mask_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "TIMx": "timer",
                "APB1_CLOCK_FREQ": "DAT_40000028",
                "SYS_CORE_CLOCK_FREQ_ADDR": "PTR_SystemCoreClock_08007b68"
            },
            "code": "void initialize_timer_08007ad0(TIM_TypeDef* timer){\\n\\\n        enable_tim_clock(timer);\\n\\\n        timer->CR1 = 0;\\n\\\n        timer->CR2 = 0;\\n\\\n        timer->SMCR = 0;\\n\\\n        timer->DIER = 0;\\n\\\n        timer->CNT = 0;\\n\\\n        timer->PSC = (uint32_t)((uint64_t)APB1_CLOCK_FREQ * (uint64_t)*(uint32_t*)SYS_CORE_CLOCK_FREQ_ADDR >> 0x38) - 1;\\n\\\n        timer->ARR = 0;\\n\\\n        timer->RCR = 0;\\n\\\n        timer->CCR1 = 0;\\n\\\n        timer->CCR2 = 0;\\n\\\n        timer->CCR3 = 0;\\n\\\n        timer->CCR4 = 0;\\n\\\n        timer->BDTR = 0;\\n\\\n        timer->DCR = 0;\\n\\\n        enable_tim_interrupt(timer, 0, 0);\\n\\\n    }",
            "called": [
                "enable_tim_interrupt",
                "enable_tim_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "timers_init"
            ],
            "imported": false,
            "current_name": "initialize_timer_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "code": "\nuint8_t FUNC_080005b4(char *line)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  uint8_t uVar3;\n  int iVar4;\n  float fVar5;\n  undefined4 uVar6;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined4 extraout_r1_03;\n  undefined4 extraout_r1_04;\n  uint uVar7;\n  float fVar8;\n  float value_00;\n  float seconds;\n  undefined8 extraout_d0;\n  undefined8 extraout_d0_00;\n  undefined8 extraout_d0_01;\n  undefined8 extraout_d0_02;\n  undefined8 extraout_d0_03;\n  undefined8 uVar9;\n  undefined8 extraout_d0_04;\n  undefined8 extraout_d0_05;\n  float extraout_s2;\n  float extraout_s2_00;\n  float extraout_s2_01;\n  float extraout_s2_02;\n  float extraout_s2_03;\n  float extraout_s2_04;\n  float extraout_s2_05;\n  float extraout_s3;\n  float extraout_s3_00;\n  float extraout_s3_01;\n  float extraout_s3_02;\n  float extraout_s3_03;\n  float extraout_s3_04;\n  float extraout_s3_05;\n  undefined4 in_stack_ffffff48;\n  undefined4 in_stack_ffffff4c;\n  float coord_data_2 [3];\n  float coord_data_1 [3];\n  float coord_data [3];\n  float offset [3];\n  float target [3];\n  float value;\n  char letter;\n  uint8_t char_counter;\n  float y;\n  float x;\n  uint8_t isclockwise;\n  float h_x2_div_d;\n  uint8_t i_3;\n  uint8_t i_2;\n  uint8_t i_1;\n  uint8_t i;\n  uint8_t l;\n  float r;\n  float p;\n  uint8_t group_number;\n  uint8_t non_modal_action;\n  uint8_t absolute_override;\n  float inverse_feed_rate;\n  uint8_t axis_words;\n  uint16_t modal_group_words;\n  int int_value;\n  \n  if (PTR_sys_08000808[1] == '\\x06') {\n    uVar3 = '\\f';\n  }\n  else {\n    char_counter = '\\0';\n    modal_group_words = 0;\n    axis_words = '\\0';\n    inverse_feed_rate = DAT_0800080c;\n    absolute_override = '\\0';\n    non_modal_action = '\\0';\n    memset(target,0,0xc);\n    memset(offset,0,0xc);\n    *PTR_gc_08000810 = 0;\n    group_number = '\\0';\n    while (iVar4 = next_statement(&letter,&value,line,&char_counter), iVar4 != 0) {\n      uVar6 = __aeabi_f2d(value);\n      trunc((double)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n      int_value = __aeabi_d2iz(uVar6,extraout_r1);\n      if (letter == 'G') {\n        switch(int_value) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          group_number = '\\x02';\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          group_number = '\\x01';\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          group_number = '\\x03';\n          break;\n        case 0x14:\n        case 0x15:\n          group_number = '\\a';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          group_number = '\\t';\n          break;\n        case 0x5a:\n        case 0x5b:\n          group_number = '\\x04';\n          break;\n        case 0x5d:\n        case 0x5e:\n          group_number = '\\x06';\n        }\n        switch(int_value) {\n        case 0:\n          PTR_gc_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_gc_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_gc_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_gc_08000ca0[1] = 3;\n          break;\n        case 4:\n          non_modal_action = '\\x01';\n          break;\n        default:\n          *PTR_gc_08000ca0 = 3;\n          break;\n        case 10:\n          non_modal_action = '\\x02';\n          break;\n        case 0x11:\n          select_plane('\\0','\\x01','\\x02');\n          break;\n        case 0x12:\n          select_plane('\\x02','\\0','\\x01');\n          break;\n        case 0x13:\n          select_plane('\\x01','\\x02','\\0');\n          break;\n        case 0x14:\n          PTR_gc_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_gc_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar6 = __aeabi_fmul(value,DAT_08000ca4);\n          uVar6 = __aeabi_f2d(uVar6);\n          trunc((double)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          int_value = __aeabi_d2iz(uVar6,extraout_r1_00);\n          switch(int_value) {\n          case 0x118:\n            non_modal_action = '\\x03';\n            break;\n          case 0x119:\n            non_modal_action = '\\x04';\n            break;\n          default:\n            *PTR_gc_08000ca0 = 3;\n            break;\n          case 300:\n            non_modal_action = '\\x05';\n            break;\n          case 0x12d:\n            non_modal_action = '\\x06';\n          }\n          break;\n        case 0x35:\n          absolute_override = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_gc_08000ca0[0x1c] = (char)int_value + -0x36;\n          break;\n        case 0x50:\n          PTR_gc_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_gc_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_gc_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          uVar6 = __aeabi_fmul(value,DAT_08000ca4);\n          uVar6 = __aeabi_f2d(uVar6);\n          trunc((double)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          int_value = __aeabi_d2iz(uVar6,extraout_r1_01);\n          if (int_value == 0x398) {\n            non_modal_action = '\\a';\n          }\n          else if (int_value == 0x399) {\n            non_modal_action = '\\b';\n          }\n          else {\n            *PTR_gc_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_gc_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_gc_08000ca0[2] = 0;\n        }\n      }\n      else if (letter == 'M') {\n        if (int_value == 0x1e) {\nLAB_08000b96:\n          group_number = '\\x05';\n        }\n        else if (int_value < 0x1f) {\n          if (int_value < 3) {\n            if (-1 < int_value) goto LAB_08000b96;\n          }\n          else if (int_value - 3U < 3) {\n            group_number = '\\b';\n          }\n        }\n        switch(int_value) {\n        case 0:\n          PTR_gc_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_gc_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_gc_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_gc_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_gc_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_gc_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_gc_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_gc_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_gc_08000ca0[7] = 0;\n        }\n      }\n      if (group_number != '\\0') {\n        if (((int)(uint)modal_group_words >> group_number & 1U) == 0) {\n          modal_group_words = modal_group_words | (ushort)(1 << group_number);\n        }\n        else {\n          *PTR_gc_08000ca0 = 5;\n        }\n        group_number = '\\0';\n      }\n    }\n    if (*PTR_gc_08000ff0 == '\\0') {\n      p = 0.0;\n      r = 0.0;\n      l = '\\0';\n      char_counter = '\\0';\nswitchD_08000d18_caseD_47:\n      iVar4 = next_statement(&letter,&value,line,&char_counter);\n      if (iVar4 != 0) {\n        fVar8 = (float)extraout_d0;\n        switch(letter) {\n        case 'F':\n          iVar4 = __aeabi_fcmple(value,0);\n          if (iVar4 != 0) {\n            *PTR_gc_08000ff0 = 6;\n          }\n          if (PTR_gc_08000ff0[2] == '\\0') {\n            fVar8 = value;\n            to_millimeters(value_00);\n            *(float *)(PTR_gc_08000ff0 + 8) = fVar8;\n          }\n          else {\n            fVar8 = value;\n            to_millimeters(value_00);\n            inverse_feed_rate = fVar8;\n          }\n          break;\n        case 'G':\n        case 'M':\n        case 'N':\n          break;\n        default:\n          *PTR_gc_08000ff0 = 3;\n          break;\n        case 'I':\n        case 'J':\n        case 'K':\n          uVar7 = (uint)(byte)letter;\n          fVar5 = value;\n          to_millimeters(fVar8);\n          offset[uVar7 - 0x49] = fVar5;\n          break;\n        case 'L':\n          uVar6 = __aeabi_f2d(value);\n          trunc((double)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          l = __aeabi_d2uiz(uVar6,extraout_r1_02);\n          break;\n        case 'P':\n          p = value;\n          break;\n        case 'R':\n          fVar5 = value;\n          to_millimeters(fVar8);\n          r = fVar5;\n          break;\n        case 'S':\n          iVar4 = __aeabi_fcmplt(value,0);\n          if (iVar4 != 0) {\n            *PTR_gc_08000ff0 = 6;\n          }\n          break;\n        case 'T':\n          iVar4 = __aeabi_fcmplt(value,0);\n          if (iVar4 != 0) {\n            *PTR_gc_08000ff0 = 6;\n          }\n          uVar6 = __aeabi_f2d(value);\n          trunc((double)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          uVar2 = __aeabi_d2uiz(uVar6,extraout_r1_03);\n          PTR_gc_08000ff0[0x18] = uVar2;\n          break;\n        case 'X':\n          target[0] = value;\n          to_millimeters(fVar8);\n          axis_words = axis_words | 1;\n          break;\n        case 'Y':\n          target[1] = value;\n          to_millimeters(fVar8);\n          axis_words = axis_words | 2;\n          break;\n        case 'Z':\n          target[2] = value;\n          to_millimeters(fVar8);\n          axis_words = axis_words | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_gc_08000ff0 == '\\0') {\n        uVar9 = extraout_d0;\n        fVar8 = extraout_s2;\n        fVar5 = extraout_s3;\n        if (PTR_sys_08000ff4[1] != '\\a') {\n          spindle_run(PTR_gc_08000ff0[6]);\n          coolant_run(PTR_gc_08000ff0[7]);\n          uVar9 = extraout_d0_00;\n          fVar8 = extraout_s2_00;\n          fVar5 = extraout_s3_00;\n        }\n        if ((modal_group_words & 0x200) != 0) {\n          uVar3 = settings_read_coord_data(PTR_gc_08000ff0[0x1c],coord_data);\n          puVar1 = PTR_gc_08000ff0;\n          if (uVar3 == '\\0') {\n            return '\\n';\n          }\n          *(float *)(PTR_gc_08000ff0 + 0x20) = coord_data[0];\n          *(float *)(puVar1 + 0x24) = coord_data[1];\n          *(float *)(puVar1 + 0x28) = coord_data[2];\n          uVar9 = extraout_d0_01;\n          fVar8 = extraout_s2_01;\n          fVar5 = extraout_s3_01;\n        }\n        switch(non_modal_action) {\n        case '\\x01':\n          iVar4 = __aeabi_fcmplt(p,0);\n          if (iVar4 == 0) {\n            if (PTR_sys_08000ff4[1] != '\\a') {\n              mc_dwell(seconds);\n            }\n          }\n          else {\n            *PTR_gc_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          uVar6 = __aeabi_f2d(p);\n          trunc((double)CONCAT44(in_stack_ffffff4c,in_stack_ffffff48));\n          int_value = __aeabi_d2iz(uVar6,extraout_r1_04);\n          if ((((l == '\\x02') || (l == '\\x14')) && (-1 < int_value)) && (int_value < 7)) {\n            if ((axis_words == '\\0') && (l == '\\x02')) {\n              *PTR_gc_08000ff0 = 6;\n            }\n            else {\n              if (int_value < 1) {\n                int_value = (int)(byte)PTR_gc_08001304[0x1c];\n              }\n              else {\n                int_value = int_value + -1;\n              }\n              uVar3 = settings_read_coord_data((uint8_t)int_value,coord_data_2);\n              if (uVar3 == '\\0') {\n                return '\\n';\n              }\n              for (i = '\\0'; i < 3; i = i + '\\x01') {\n                if (((int)(uint)axis_words >> i & 1U) != 0) {\n                  if (l == '\\x14') {\n                    uVar7 = (uint)i;\n                    fVar8 = (float)__aeabi_fsub(*(undefined4 *)(PTR_gc_08001304 + (i + 2) * 4 + 4),\n                                                target[i]);\n                    coord_data_2[uVar7] = fVar8;\n                  }\n                  else {\n                    coord_data_2[i] = target[i];\n                  }\n                }\n              }\n              settings_write_coord_data((uint8_t)int_value,coord_data_2);\n              puVar1 = PTR_gc_08001304;\n              if (int_value == (uint)(byte)PTR_gc_08001304[0x1c]) {\n                *(float *)(PTR_gc_08001304 + 0x20) = coord_data_2[0];\n                *(float *)(puVar1 + 0x24) = coord_data_2[1];\n                *(float *)(puVar1 + 0x28) = coord_data_2[2];\n              }\n            }\n          }\n          else {\n            *PTR_gc_08000ff0 = 3;\n          }\n          axis_words = '\\0';\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (axis_words != '\\0') {\n            for (i_1 = '\\0'; i_1 < 3; i_1 = i_1 + '\\x01') {\n              if (((int)(uint)axis_words >> i_1 & 1U) == 0) {\n                target[i_1] = *(float *)(PTR_gc_08001304 + (i_1 + 2) * 4 + 4);\n              }\n              else if (PTR_gc_08001304[4] == '\\0') {\n                uVar7 = (uint)i_1;\n                fVar8 = (float)__addsf3(target[i_1],\n                                        *(undefined4 *)(PTR_gc_08001304 + (i_1 + 2) * 4 + 4));\n                target[uVar7] = fVar8;\n                uVar9 = extraout_d0_03;\n                fVar8 = extraout_s2_03;\n                fVar5 = extraout_s3_03;\n              }\n              else {\n                fVar8 = target[i_1];\n                uVar6 = __addsf3(*(undefined4 *)(PTR_gc_08001304 + (i_1 + 8) * 4),\n                                 *(undefined4 *)(PTR_gc_08001304 + (i_1 + 10) * 4 + 4));\n                uVar7 = (uint)i_1;\n                fVar8 = (float)__addsf3(fVar8,uVar6);\n                target[uVar7] = fVar8;\n                uVar9 = extraout_d0_02;\n                fVar8 = extraout_s2_02;\n                fVar5 = extraout_s3_02;\n              }\n            }\n            mc_line((float)uVar9,(float)((ulonglong)uVar9 >> 0x20),fVar8,fVar5,SUB41(target[0],0));\n          }\n          if (non_modal_action == '\\x05') {\n            uVar3 = settings_read_coord_data('\\a',coord_data_1);\n            uVar9 = extraout_d0_04;\n            fVar8 = extraout_s2_04;\n            fVar5 = extraout_s3_04;\n            if (uVar3 == '\\0') {\n              return '\\n';\n            }\n          }\n          else {\n            uVar3 = settings_read_coord_data('\\x06',coord_data_1);\n            uVar9 = extraout_d0_05;\n            fVar8 = extraout_s2_05;\n            fVar5 = extraout_s3_05;\n            if (uVar3 == '\\0') {\n              return '\\n';\n            }\n          }\n          mc_line((float)uVar9,(float)((ulonglong)uVar9 >> 0x20),fVar8,fVar5,\n                  SUB41(coord_data_1[0],0));\n          puVar1 = PTR_gc_08001304;\n          *(float *)(PTR_gc_08001304 + 0xc) = coord_data_1[0];\n          *(float *)(puVar1 + 0x10) = coord_data_1[1];\n          *(float *)(puVar1 + 0x14) = coord_data_1[2];\n          axis_words = '\\0';\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (non_modal_action == '\\x06') {\n            settings_write_coord_data('\\a',DAT_0800130c);\n          }\n          else {\n            settings_write_coord_data('\\x06',DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (axis_words == '\\0') {\n            *PTR_gc_08001304 = 6;\n          }\n          else {\n            for (i_2 = '\\0'; i_2 < 3; i_2 = i_2 + '\\x01') {\n              if (((int)(uint)axis_words >> i_2 & 1U) != 0) {\n                uVar6 = __aeabi_fsub(*(undefined4 *)(PTR_gc_08001304 + (i_2 + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_gc_08001304 + (i_2 + 8) * 4));\n                uVar7 = (uint)i_2;\n                uVar6 = __aeabi_fsub(uVar6,target[i_2]);\n                *(undefined4 *)(PTR_gc_08001304 + (uVar7 + 10) * 4 + 4) = uVar6;\n              }\n            }\n          }\n          axis_words = '\\0';\n          break;\n        case '\\b':\n          memset(DAT_08001310,0,0xc);\n        }\n        if (((modal_group_words & 4) != 0) || (axis_words != '\\0')) {\n          if ((PTR_gc_08001574[2] != '\\0') &&\n             ((iVar4 = __aeabi_fcmplt(inverse_feed_rate,0), iVar4 != 0 &&\n              (PTR_gc_08001574[1] != '\\x04')))) {\n            *PTR_gc_08001574 = 6;\n          }\n          if (((absolute_override != '\\0') && (PTR_gc_08001574[1] != '\\0')) &&\n             (PTR_gc_08001574[1] != '\\x01')) {\n            *PTR_gc_08001574 = 6;\n          }\n          if (*PTR_gc_08001574 != '\\0') {\n            return *PTR_gc_08001574;\n          }\n          for (i_3 = '\\0'; puVar1 = PTR_gc_08001840, i_3 < 3; i_3 = i_3 + '\\x01') {\n            if (((int)(uint)axis_words >> i_3 & 1U) == 0) {\n              target[i_3] = *(float *)(PTR_gc_08001574 + (i_3 + 2) * 4 + 4);\n            }\n            else if (absolute_override == '\\0') {\n              if (PTR_gc_08001574[4] == '\\0') {\n                uVar7 = (uint)i_3;\n                fVar8 = (float)__addsf3(target[i_3],\n                                        *(undefined4 *)(PTR_gc_08001574 + (i_3 + 2) * 4 + 4));\n                target[uVar7] = fVar8;\n              }\n              else {\n                fVar8 = target[i_3];\n                uVar6 = __addsf3(*(undefined4 *)(PTR_gc_08001574 + (i_3 + 8) * 4),\n                                 *(undefined4 *)(PTR_gc_08001574 + (i_3 + 10) * 4 + 4));\n                uVar7 = (uint)i_3;\n                fVar8 = (float)__addsf3(fVar8,uVar6);\n                target[uVar7] = fVar8;\n              }\n            }\n          }\n          if ((byte)PTR_gc_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            uVar3 = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_gc_08001574[1]])()\n            ;\n            return uVar3;\n          }\n          if (*PTR_gc_08001840 != '\\0') {\n            return *PTR_gc_08001840;\n          }\n          *(float *)(PTR_gc_08001840 + 0xc) = target[0];\n          *(float *)(puVar1 + 0x10) = target[1];\n          *(float *)(puVar1 + 0x14) = target[2];\n        }\n        if (PTR_gc_08001840[5] != '\\0') {\n          plan_synchronize();\n          PTR_sys_08001848[0x10] = 0;\n          if (PTR_gc_08001840[5] == '\\x02') {\n            mc_reset();\n          }\n          else {\n            PTR_gc_08001840[5] = 0;\n          }\n        }\n        uVar3 = *PTR_gc_08001840;\n      }\n      else {\n        uVar3 = *PTR_gc_08000ff0;\n      }\n    }\n    else {\n      uVar3 = *PTR_gc_08000ff0;\n    }\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "next_statement",
                "memset",
                "__truncdfsf2",
                "mc_arc",
                "__aeabi_d2iz",
                "mc_dwell",
                "mc_line",
                "__addsf3",
                "__aeabi_fcmpeq",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "hypot",
                "__aeabi_fcmplt",
                "__divdf3",
                "settings_read_coord_data",
                "settings_write_coord_data",
                "plan_synchronize",
                "__aeabi_fcmple",
                "spindle_run",
                "__aeabi_fsub",
                "select_plane",
                "sqrt",
                "coolant_run",
                "__aeabi_fmul",
                "trunc",
                "to_millimeters",
                "mc_reset"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005b4",
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "imported": false,
            "current_name": "FUNC_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "FUN_080039a0": "resetLineBufferAndInitReport_080039a0",
                "PTR_buttons_enabled_080039b8": "PTR_buttons_enabled_080039b8",
                "protocol_reset_line_buffer": "protocol_reset_line_buffer",
                "report_init_message": "report_init_message"
            },
            "code": "void resetLineBufferAndInitReport_080039a0() \\n\\\n{\\n\\\n  protocol_reset_line_buffer();\\n\\\n  report_init_message();\\n\\\n  *(undefined4 *)PTR_buttons_enabled_080039b8 = 1;\\n\\\n  return;\\n\\\n}",
            "called": [
                "protocol_reset_line_buffer",
                "report_init_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "resetLineBufferAndInitReport_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "compare_and_concatenate_08009204",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "float32_t compare_and_concatenate_08009204(float32_t value1, float32_t value2){\n    __cmpsf2(); //compares two single precision floating point values\n    return CONCAT44(value2, value1); //concatenates two 32-bit values into a 64-bit value\n}",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "compare_and_concatenate_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "update_entry_speed_080029d8",
                "previous": "previous_block",
                "current": "current_block",
                "next": "next_block",
                "iVar1": "comparison_result",
                "uVar2": "inverted_speed_limit",
                "fVar3": "new_entry_speed",
                "acceleration": "acceleration",
                "acceleration_00": "acceleration_00",
                "target_velocity": "target_velocity",
                "target_velocity_00": "target_velocity_00",
                "distance": "distance",
                "distance_00": "distance_00"
            },
            "code": "void update_entry_speed_080029d8(block_t *previous_block, block_t *current_block, block_t *next_block) {\n  int comparison_result;\n  uint32_t inverted_speed_limit;\n  float acceleration;\n  float acceleration_00;\n  float target_velocity;\n  float target_velocity_00;\n  float distance;\n  float distance_00;\n\n  if (current_block != NULL && next_block != NULL && current_block->entry_speed != current_block->max_entry_speed) {\n    if (current_block->nominal_length_flag == false && current_block->max_entry_speed > next_block->entry_speed) {\n      float new_entry_speed = current_block->max_entry_speed;\n      inverted_speed_limit = *(uint32_t *)(PTR_settings_08002a90 + 0x20) ^ 0x80000000;\n      max_allowable_speed(acceleration, target_velocity, distance);\n      comparison_result = new_entry_speed < inverted_speed_limit;\n      if (comparison_result == true) {\n        new_entry_speed = (float)(*(uint32_t *)(PTR_settings_08002a90 + 0x20) ^ 0x80000000);\n        max_allowable_speed(acceleration_00, target_velocity_00, distance_00);\n      }\n      current_block->entry_speed = new_entry_speed;\n    }\n    else {\n      current_block->entry_speed = current_block->max_entry_speed;\n    }\n    current_block->recalculate_flag = true;\n  }\n}\n",
            "called": [
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "planner_reverse_pass"
            ],
            "imported": false,
            "current_name": "update_entry_speed_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_timer_ticks_08007c5e",
                "ticks": "ticks",
                "TIMx": "timer",
                "_DAT_40000038": "timer_ARR"
            },
            "code": "void set_timer_ticks_08007c5e(TIM_TypeDef *timer, uint32_t ticks)\n{\n  timer->ARR = ticks;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "st_wake_up"
            ],
            "imported": false,
            "current_name": "set_timer_ticks_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "write_step_using_settings_08005760",
                "PTR_settings_08005774": "settings_ptr"
            },
            "code": "void write_step_using_settings_08005760() {\n    uint16_t PTR_settings_08005774 = *(uint16_t *)(PTR_settings_08005774 + 0x18);\n    step_wr(PTR_settings_08005774);\n    return;\n}",
            "called": [
                "step_wr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "write_step_using_settings_08005760"
        },
        "FUN_080078d0": {
            "renaming": {
                "FUN_080078d0": "do_nothing_080078d0"
            },
            "code": "\nvoid do_nothing_080078d0(uint32_t bits)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078d0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080078d0"
        },
        "FUN_08008b24": {
            "renaming": {
                "FUN_08008b24": "isEndOfString_08008b24",
                "in_CY": "current_char"
            },
            "code": "bool isEndOfString_08008b24(void)\n{\n  char current_char;\n  __aeabi_cdcmpeq();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "__ieee754_hypot",
                "sqrt",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "isEndOfString_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(uint16_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "limits_go_home",
                "report_alarm_message",
                "mc_dwell"
            ],
            "imported": false,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "update_sys_info_0800587c",
                "PTR_sys_0800589c": "sys_info"
            },
            "code": "void update_sys_info_0800587c(void) {\n  if (PTR_sys_0800589c[1] == '\\x03') {\n    PTR_sys_0800589c[1] = 4;\n    PTR_sys_0800589c[0x10] = 0;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "protocol_execute_runtime"
            ],
            "imported": false,
            "current_name": "update_sys_info_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "FUN_08008a02": "calculate_result_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp4",
                "unaff_r4": "mask",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "mask",
                "bVar4": "bVar",
                "LAB_08008874": "label1",
                "LAB_08008838": "label2"
            },
            "code": "ulonglong calculate_result_08008a02(uint input1, uint input2, uint input3, uint input4) {\n  uint mask = 0xffc00000;\n  uint temp1 = input4 & mask;\n  uint temp2 = input2;\n  if ((input3 != mask) && (temp1 != mask)) {\n    if (input3 == mask) {\n      if (((input1 | (input2 << 12)) == 0) && (temp1 != mask)) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp1 == mask) {\n      input1 = input3;\n      temp2 = input4;\n      if ((input3 | (input4 << 12)) == 0) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool bVar = ((input1 | (input2 << 1)) == 0) || ((input3 | (input4 << 1)) == 0);\n      if (!bVar) {\n        if (input3 == 0) {\n          uint temp3 = input2 & 0x80000000;\n          do {\n            uint temp4 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = (input2 * 2) + (uint)(temp4 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 |= temp3;\n          if (temp1 != 0) {\n            return ((ulonglong)input2 << 0x20) | input1;\n          }\n        }\n        do {\n          uint temp5 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = (input4 * 2) + (uint)(temp5 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return ((ulonglong)temp2 << 0x20) | input1;\n      }\n      if ((input1 | (input2 << 1)) != 0) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n      if ((input3 | (input4 << 1)) != 0) {\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n  }\n  return ((ulonglong)temp2 << 0x20) | input1 | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "s": "str",
                "local_c": "byte_ptr"
            },
            "code": "void print_string_0800369c(char* str) {\n  uint8_t *byte_ptr;\n  byte_ptr = (uint8_t *)str;\n  while (*byte_ptr != '\\0') {\n    serial_write(*byte_ptr);\n    byte_ptr++;\n  }\n  return;\n}",
            "called": [
                "serial_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "imported": false,
            "current_name": "print_string_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "FUN_08005a98": "delay_until_08005a98",
                "Delay": "target_time",
                "uVar1": "current_time",
                "uVar2": "new_time",
                "timingdelay": "N/A"
            },
            "code": "void delay_until_08005a98(uint32_t target_time)\n{\n    uint32_t current_time;\n    current_time = HAL_GetTick();\n    while(current_time < target_time)\n    {\n        current_time = HAL_GetTick();\n    }\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "_delay_ms"
            ],
            "imported": false,
            "current_name": "delay_until_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "FUNC_08008cdc"
            },
            "code": "\nuint FUNC_08008cdc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if (uVar4 - 1 == 0 || uVar3 < 0x800000) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08008e12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cdc",
            "calling": [
                "intersection_distance",
                "report_realtime_status",
                "__aeabi_frsub",
                "mc_arc",
                "plan_buffer_line",
                "max_allowable_speed",
                "gc_execute_line",
                "printFloat",
                "estimate_acceleration_distance"
            ],
            "imported": false,
            "current_name": "FUNC_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "printCoordData_080044e8",
                "coord_select": "coordIndex",
                "uVar1": "success",
                "extraout_s0": "currentCoordValue",
                "extraout_s0_00": "xCoordValue",
                "extraout_s0_01": "yCoordValue",
                "extraout_s0_02": "zCoordValue",
                "extraout_s0_03": "eCoordValue",
                "extraout_s0_04": "fCoordValue",
                "extraout_s0_05": "sCoordValue",
                "extraout_s0_06": "tCoordValue",
                "extraout_s0_07": "bCoordValue",
                "extraout_s0_08": "nextCoordValue",
                "extraout_s0_09": "prevCoordValue",
                "extraout_s0_10": "g92Offset",
                "extraout_s0_11": "scaleFactor",
                "extraout_s0_12": "fVar",
                "uVar3": "g92Offset",
                "coord_data": "coordData",
                "i": "coordDataIndex"
            },
            "code": "void printCoordData_080044e8(void)\n{\n    uint8_t success;\n    float currentCoordValue;\n    float nextCoordValue;\n    float g92Offset = 0.0;\n    float scaleFactor = 1.0;\n    float fVar;\n    float prevCoordValue;\n    uint8_t coordIndex = 0;\n    uint8_t maxCoordIndex = 7;\n    while(coordIndex <= maxCoordIndex)\n    {\n        success = settings_read_coord_data(coordIndex, coordData);\n        if(success == 0) break;\n        printPgmString(PTR_DAT_08004698);\n        currentCoordValue = 0.0;\n        nextCoordValue = 0.0;\n        switch(coordIndex)\n        {\n            case 0:\n                printPgmString(PTR_DAT_0800469c);\n                currentCoordValue = xCoordValue;\n                nextCoordValue = yCoordValue;\n                break;\n            case 1:\n                printPgmString(PTR_DAT_080046a0);\n                currentCoordValue = yCoordValue;\n                nextCoordValue = zCoordValue;\n                break;\n            case 2:\n                printPgmString(PTR_DAT_080046a4);\n                currentCoordValue = zCoordValue;\n                nextCoordValue = eCoordValue;\n                break;\n            case 3:\n                printPgmString(PTR_DAT_080046a8);\n                currentCoordValue = eCoordValue;\n                nextCoordValue = 0.0;\n                break;\n            case 4:\n                printPgmString(PTR_DAT_080046ac);\n                currentCoordValue = fCoordValue;\n                nextCoordValue = sCoordValue;\n                break;\n            case 5:\n                printPgmString(PTR_DAT_080046b0);\n                currentCoordValue = sCoordValue;\n                nextCoordValue = 0.0;\n                break;\n            case 6:\n                printPgmString(PTR_DAT_080046b4);\n                currentCoordValue = tCoordValue;\n                nextCoordValue = 0.0;\n                break;\n            case 7:\n                printPgmString(PTR_DAT_080046b8);\n                currentCoordValue = bCoordValue;\n                nextCoordValue = 0.0;\n                break;\n        }\n        if((PTR_settings_080046bc[0x28] & 1) == 0)\n        {\n            printFloat(currentCoordValue);\n        }\n        else\n        {\n            g92Offset = __aeabi_f2d(coordData[coordIndex + 10]) * scaleFactor;\n            g92Offset = __muldf3((int)g92Offset, (int)((ulonglong)g92Offset >> 0x20), DAT_08004690, DAT_08004694);\n            currentCoordValue = (float)__truncdfsf2((int)g92Offset, (int)((ulonglong)g92Offset >> 0x20));\n            printFloat(currentCoordValue);\n        }\n        if(coordIndex < 2)\n        {\n            printPgmString(PTR_DAT_080046c0);\n            prevCoordValue = currentCoordValue;\n            currentCoordValue = nextCoordValue;\n            nextCoordValue = prevCoordValue;\n        }\n        else if(coordIndex == 2)\n        {\n            printPgmString(PTR_DAT_080046c4);\n            prevCoordValue = currentCoordValue;\n            currentCoordValue = nextCoordValue;\n            nextCoordValue = prevCoordValue;\n        }\n        else\n        {\n            printPgmString(PTR_DAT_080046c4);\n        }\n        coordIndex++;\n    }\n    report_status_message('\\n');\n}",
            "called": [
                "settings_read_coord_data",
                "report_status_message",
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3",
                "printPgmString",
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "protocol_execute_line"
            ],
            "imported": false,
            "current_name": "printCoordData_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "FUN_08006c9c": "determine_tick_range_08006c9c",
                "ticks": "current_tick",
                "DAT_08006cdc": "tick_range",
                "bVar1": "is_valid_tick_range"
            },
            "code": "uint32_t determine_tick_range_08006c9c(uint32_t current_tick)\n{\n  bool is_valid_DAT_08006cdc;\n  uint32_t* DAT_08006cdc = (uint32_t*)0x08006cdc;\n  uint32_t DAT_08006cdc_start = current_tick - 1;\n  is_valid_DAT_08006cdc = DAT_08006cdc_start < 0x1000000;\n  if (is_valid_DAT_08006cdc) {\n    DAT_08006cdc[1] = DAT_08006cdc_start;\n    NVIC_SetPriority(SysTick_IRQn, 0xf);\n    DAT_08006cdc[2] = 0;\n    *DAT_08006cdc = 7;\n  }\n  return (uint32_t)!is_valid_DAT_08006cdc;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "imported": false,
            "current_name": "determine_tick_range_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,\n                      int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined4 extraout_r1;\n  int iVar5;\n  uint *puVar6;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined4 uVar7;\n  uint **ppuVar8;\n  int iVar9;\n  int iVar10;\n  undefined4 *puVar11;\n  undefined4 uVar12;\n  uint uVar13;\n  uint *puVar14;\n  int iVar15;\n  int iVar16;\n  undefined8 *puVar17;\n  undefined8 *puVar18;\n  undefined8 *puVar19;\n  undefined4 *puVar20;\n  undefined8 *puVar21;\n  undefined4 uVar22;\n  int iVar23;\n  undefined4 *puVar24;\n  bool bVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  undefined8 uVar29;\n  ulonglong uVar30;\n  undefined4 in_stack_fffffd78;\n  int local_280;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined4 local_168;\n  undefined4 uStack_164;\n  undefined8 local_160;\n  undefined8 uStack_c8;\n  \n  uVar29 = CONCAT44(param_5,param_5);\n  iVar16 = *(int *)(PTR_init_jk_0800a894 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (int)((longlong)DAT_0800a898 * (longlong)(param_3 + -3) >> 0x22) -\n                (param_3 + -3 >> 0x1f);\n    iVar10 = (local_26c + 1) * -0x18;\n  }\n  else {\n    iVar10 = -0x18;\n    local_26c = 0;\n  }\n  param_3 = param_3 + iVar10;\n  iVar10 = local_26c - iVar9;\n  if (-1 < iVar16 + iVar9) {\n    iVar23 = iVar16 + iVar9 + 1 + iVar10;\n    puVar19 = &uStack_208;\n    do {\n      while (iVar10 < 0) {\n        iVar10 = iVar10 + 1;\n        *(undefined4 *)puVar19 = 0;\n        *(undefined4 *)((int)puVar19 + 4) = 0;\n        puVar19 = puVar19 + 1;\n        if (iVar10 == iVar23) goto LAB_0800a626;\n      }\n      uVar27 = __aeabi_i2d(*(undefined4 *)(param_6 + iVar10 * 4));\n      iVar10 = iVar10 + 1;\n      *puVar19 = uVar27;\n      puVar19 = puVar19 + 1;\n    } while (iVar10 != iVar23);\n  }\nLAB_0800a626:\n  puVar11 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar16) {\n    puVar17 = &uStack_208 + param_4;\n    iVar23 = iVar16 + param_4;\n    iVar10 = iVar9;\n    puVar19 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar27 = 0;\n      }\n      else {\n        uVar27 = 0;\n        puVar24 = puVar11;\n        puVar21 = puVar17;\n        do {\n          puVar20 = puVar24 + 2;\n          uVar26 = __muldf3(*puVar20,puVar24[3],*(undefined4 *)(puVar21 + -1),\n                            *(undefined4 *)((int)puVar21 + -4));\n          uVar27 = __aeabi_dadd((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          puVar24 = puVar20;\n          puVar21 = puVar21 + -1;\n        } while (puVar20 != puVar11 + param_4 * 2);\n      }\n      iVar10 = iVar10 + 1;\n      *puVar19 = uVar27;\n      puVar17 = puVar17 + 1;\n      puVar19 = puVar19 + 1;\n    } while (iVar10 != iVar23);\n  }\n  local_260[0] = local_258 + iVar16 + -1;\n  local_280 = iVar16;\n  do {\n    iVar23 = *(int *)(&uStack_c8 + local_280);\n    uVar27 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + local_280 * 8 + 4),iVar23);\n    iVar10 = local_280;\n    if (0 < local_280) {\n      puVar19 = &uStack_c8 + local_280;\n      puVar6 = local_258;\n      do {\n        uVar7 = (undefined4)((ulonglong)uVar27 >> 0x20);\n        __muldf3((int)uVar27,uVar7,0,DAT_0800a89c);\n        __aeabi_d2iz();\n        uVar26 = __aeabi_i2d();\n        uVar3 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        uVar28 = __muldf3((int)uVar26,uVar3,0,DAT_0800a8a0);\n        __subdf3((int)uVar27,uVar7,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n        uVar2 = __aeabi_d2iz();\n        puVar17 = puVar19 + -1;\n        uVar7 = *(undefined4 *)puVar17;\n        uVar12 = *(undefined4 *)((int)puVar19 + -4);\n        *puVar6 = uVar2;\n        uVar27 = __aeabi_dadd((int)uVar26,uVar3,uVar7,uVar12);\n        iVar23 = (int)uVar27;\n        puVar19 = puVar17;\n        puVar6 = puVar6 + 1;\n      } while (puVar17 != &uStack_c8);\n    }\n    scalbn((double)CONCAT44(iVar10,in_stack_fffffd78),iVar23);\n    __muldf3();\n    floor((double)CONCAT44(iVar10,in_stack_fffffd78));\n    uVar27 = __muldf3();\n    uVar27 = __subdf3(iVar23,extraout_r1,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n    uVar2 = __aeabi_d2iz();\n    uVar26 = __aeabi_i2d();\n    uVar27 = __subdf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                      (int)((ulonglong)uVar26 >> 0x20));\n    uVar7 = (undefined4)((ulonglong)uVar27 >> 0x20);\n    uVar3 = (undefined4)uVar27;\n    if (param_3 < 1) {\n      if (param_3 == 0) {\n        iVar23 = (int)local_258[iVar10 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar23 = __aeabi_dcmpge(uVar3,uVar7,0,DAT_0800ac3c);\n      if (iVar23 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar10 < 1) {\n          uVar27 = __subdf3(0,DAT_0800ac38,uVar3,uVar7);\n          iVar23 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar23 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar5 = (int)local_258[iVar10 + -1] >> (0x18U - param_3 & 0xff);\n      uVar13 = local_258[iVar10 + -1] - (iVar5 << (0x18U - param_3 & 0xff));\n      iVar23 = (int)uVar13 >> (0x17U - param_3 & 0xff);\n      local_258[iVar10 + -1] = uVar13;\n      uVar2 = uVar2 + iVar5;\njoined_r0x0800a8b8:\n      if (0 < iVar23) {\n        uVar2 = uVar2 + 1;\n        if (iVar10 < 1) {\n          uVar13 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          uVar13 = local_258[0];\n          if (local_258[0] == 0) {\n            if (iVar10 != 1) {\n              puVar6 = local_258;\n              iVar5 = 1;\n              do {\n                puVar6 = puVar6 + 1;\n                uVar13 = *puVar6;\n                if (uVar13 != 0) {\n                  iVar15 = iVar5 + 1;\n                  goto LAB_0800a8e2;\n                }\n                iVar5 = iVar5 + 1;\n              } while (iVar5 != iVar10);\n            }\n          }\n          else {\n            iVar15 = 1;\n            iVar5 = 0;\nLAB_0800a8e2:\n            local_258[iVar5] = 0x1000000 - uVar13;\n            if (iVar15 < iVar10) {\n              uVar13 = local_258[iVar15];\n              puVar6 = local_258 + iVar15;\n              while( true ) {\n                puVar14 = puVar6 + 1;\n                *puVar6 = 0xffffff - uVar13;\n                if (puVar14 == local_258 + iVar10) break;\n                uVar13 = *puVar14;\n                puVar6 = puVar14;\n              }\n            }\n            uVar13 = 1;\n          }\n        }\n        if (0 < param_3) {\n          if (param_3 == 1) {\n            local_258[iVar10 + -1] = local_258[iVar10 + -1] & 0x7fffff;\n          }\n          else if (param_3 == 2) {\n            local_258[iVar10 + -1] = local_258[iVar10 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar23 == 2) {\n          uVar27 = __subdf3(0,DAT_0800ac38,uVar3,uVar7);\n          if (uVar13 != 0) {\n            uVar3 = 0;\n            scalbn((double)CONCAT44(iVar10,in_stack_fffffd78),0);\n            uVar27 = __subdf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar3,extraout_r1_00);\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    iVar15 = (int)uVar27;\n    iVar5 = __aeabi_dcmpeq(iVar15,(int)((ulonglong)uVar27 >> 0x20),0,0);\n    if (iVar5 == 0) {\n      scalbn((double)CONCAT44(iVar10,in_stack_fffffd78),iVar15);\n      iVar9 = __aeabi_dcmpge();\n      if (iVar9 == 0) {\n        iVar5 = iVar10;\n        uVar13 = __aeabi_d2iz(iVar15,extraout_r1_02);\n        local_258[iVar5] = uVar13;\n        iVar10 = iVar5;\n      }\n      else {\n        __muldf3(iVar15,extraout_r1_02,0,DAT_0800ade8);\n        uVar13 = __aeabi_d2iz();\n        uVar27 = __aeabi_i2d();\n        uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),0,DAT_0800ade4);\n        __subdf3(iVar15,extraout_r1_02,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        iVar9 = iVar10;\n        uVar4 = __aeabi_d2iz();\n        iVar5 = iVar10 + 1;\n        local_258[iVar10] = uVar4;\n        local_258[iVar5] = uVar13;\n        iVar10 = iVar9;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar5 = iVar10 + -1;\n    if (iVar16 <= iVar5) {\n      uVar13 = 0;\n      puVar6 = local_258 + iVar10 + 0x3fffffff;\n      do {\n        puVar14 = puVar6 + -1;\n        uVar13 = uVar13 | *puVar6;\n        puVar6 = puVar14;\n      } while (puVar14 != local_260[0]);\n      if (uVar13 != 0) break;\n    }\n    if (local_258[iVar16 + -1] == 0) {\n      local_280 = 1;\n      ppuVar8 = local_260 + iVar16;\n      do {\n        puVar6 = *ppuVar8;\n        local_280 = local_280 + 1;\n        ppuVar8 = ppuVar8 + -1;\n      } while (puVar6 == (uint *)0x0);\n      local_280 = iVar10 + local_280;\n    }\n    else {\n      local_280 = iVar10 + 1;\n    }\n    iVar23 = iVar10 + 1;\n    puVar24 = (undefined4 *)(param_6 + (iVar23 + local_26c + 0x3fffffff) * 4);\n    puVar19 = &uStack_208 + iVar10 + param_4;\n    puVar17 = &uStack_c8 + iVar23;\n    do {\n      puVar24 = puVar24 + 1;\n      uVar27 = __aeabi_i2d(*puVar24);\n      *puVar19 = uVar27;\n      puVar21 = puVar19 + 1;\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar20 = puVar11;\n        while( true ) {\n          puVar19 = puVar19 + -1;\n          puVar1 = puVar20 + 2;\n          uVar27 = __muldf3((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),*puVar1,puVar20[3]);\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,\n                                (int)((ulonglong)uVar27 >> 0x20));\n          if (puVar1 == puVar11 + param_4 * 2) break;\n          uVar27 = *puVar19;\n          puVar20 = puVar1;\n        }\n      }\n      *puVar17 = uVar26;\n      iVar23 = iVar23 + 1;\n      puVar19 = puVar21;\n      puVar17 = puVar17 + 1;\n    } while (iVar23 <= local_280);\n  } while( true );\n  if (local_258[iVar5] == 0) {\n    puVar6 = local_258 + iVar10 + 0x3ffffffe;\n    do {\n      uVar13 = *puVar6;\n      iVar5 = iVar5 + -1;\n      puVar6 = puVar6 + -1;\n    } while (uVar13 == 0);\n  }\nLAB_0800a9f6:\n  uVar3 = 0;\n  scalbn((double)CONCAT44(iVar10,in_stack_fffffd78),0);\n  uVar27 = CONCAT44(extraout_r1_01,uVar3);\n  if (iVar5 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        puVar19 = (undefined8 *)&local_168;\n        uVar29 = 0;\nLAB_0800abe4:\n        if (iVar23 == 0) {\n          uVar3 = *(undefined4 *)(puVar19 + 1);\n          uVar7 = *(undefined4 *)((int)puVar19 + 0xc);\n          *local_260[1] = local_168;\n          *(undefined4 *)((int)local_260[1] + 4) = uStack_164;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar29;\n          *(undefined4 *)((int)local_260[1] + 8) = uVar3;\n          *(undefined4 *)((int)local_260[1] + 0xc) = uVar7;\n          return uVar2 & 7;\n        }\n        iVar9 = *(int *)((int)puVar19 + 4);\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar29;\n        iVar16 = *(int *)((int)puVar19 + 0xc);\n        *(undefined4 *)((int)local_260[1] + 8) = *(undefined4 *)(puVar19 + 1);\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar29 >> 0x20) + -0x80000000;\n        uVar3 = *(undefined4 *)puVar19;\n        *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = iVar16 + -0x80000000;\n        *local_260[1] = uVar3;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar29 >> 0x20);\n      if (iVar23 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar29;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar29 = 0;\n  }\n  else {\n    puVar17 = &uStack_c8 + iVar5;\n    puVar6 = local_258 + iVar5 + 1;\n    puVar19 = &uStack_c8 + iVar5 + 1;\n    do {\n      uVar3 = (undefined4)((ulonglong)uVar27 >> 0x20);\n      puVar6 = puVar6 + -1;\n      uVar26 = __aeabi_i2d(*puVar6);\n      uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar27,uVar3);\n      puVar19 = puVar19 + -1;\n      *puVar19 = uVar26;\n      uVar27 = __muldf3((int)uVar27,uVar3,0,DAT_0800ac40);\n    } while (puVar6 != local_258);\n    puVar19 = (undefined8 *)&local_168;\n    iVar9 = 0;\n    uVar3 = DAT_0800ac30;\n    uVar7 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = uVar3;\n      DAT_0800ac34 = uVar7;\n      if (iVar16 < 0) {\n        uVar27 = 0;\n      }\n      else {\n        uVar27 = 0;\n        iVar10 = 0;\n        puVar21 = puVar17;\n        puVar11 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          uVar26 = __muldf3(*(undefined4 *)puVar21,*(undefined4 *)((int)puVar21 + 4),uVar3,uVar7);\n          uVar27 = __aeabi_dadd((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          iVar10 = iVar10 + 1;\n          if ((iVar16 < iVar10) || (iVar9 < iVar10)) break;\n          uVar3 = *puVar11;\n          uVar7 = puVar11[1];\n          puVar21 = puVar21 + 1;\n          puVar11 = puVar11 + 2;\n        }\n      }\n      bVar25 = iVar9 != iVar5;\n      puVar19[iVar9] = uVar27;\n      puVar17 = puVar17 + -1;\n      iVar9 = iVar9 + 1;\n      uVar3 = DAT_0800ac30;\n      uVar7 = DAT_0800ac34;\n    } while (bVar25);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar5 != 0) {\n          puVar17 = puVar19 + iVar5;\n          uVar29 = *puVar17;\n          do {\n            uVar7 = (undefined4)((ulonglong)uVar29 >> 0x20);\n            uVar3 = (undefined4)uVar29;\n            uVar12 = *(undefined4 *)(puVar17 + -1);\n            uVar22 = *(undefined4 *)((int)puVar17 + -4);\n            uVar29 = __aeabi_dadd(uVar3,uVar7,uVar12,uVar22);\n            uVar27 = __subdf3(uVar12,uVar22,(int)uVar29,(int)((ulonglong)uVar29 >> 0x20));\n            uVar27 = __aeabi_dadd((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar3,uVar7);\n            *puVar17 = uVar27;\n            puVar17 = puVar17 + -1;\n            *puVar17 = uVar29;\n          } while (puVar19 != puVar17);\n          if (1 < iVar5) {\n            puVar21 = puVar19 + iVar5;\n            uVar29 = *puVar21;\n            puVar17 = puVar21;\n            do {\n              uVar7 = (undefined4)((ulonglong)uVar29 >> 0x20);\n              uVar3 = (undefined4)uVar29;\n              uVar12 = *(undefined4 *)(puVar17 + -1);\n              uVar22 = *(undefined4 *)((int)puVar17 + -4);\n              uVar29 = __aeabi_dadd(uVar3,uVar7,uVar12,uVar22);\n              uVar27 = __subdf3(uVar12,uVar22,(int)uVar29,(int)((ulonglong)uVar29 >> 0x20));\n              uVar27 = __aeabi_dadd((int)uVar27,(int)((ulonglong)uVar27 >> 0x20),uVar3,uVar7);\n              *puVar17 = uVar27;\n              puVar17 = puVar17 + -1;\n              *puVar17 = uVar29;\n            } while (&local_160 != puVar17);\n            uVar29 = 0;\n            puVar18 = puVar19 + 2;\n            puVar17 = puVar21 + 1;\n            do {\n              puVar21 = puVar17 + -1;\n              uVar29 = __aeabi_dadd((int)uVar29,(int)((ulonglong)uVar29 >> 0x20),\n                                    *(undefined4 *)puVar21,*(undefined4 *)((int)puVar17 + -4));\n              puVar17 = puVar21;\n            } while (puVar18 != puVar21);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar29 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      puVar17 = puVar19 + iVar5 + 1;\n      do {\n        puVar21 = puVar17 + -1;\n        uVar29 = __aeabi_dadd((int)uVar29,(int)((ulonglong)uVar29 >> 0x20),*(undefined4 *)puVar21,\n                              *(undefined4 *)((int)puVar17 + -4));\n        puVar17 = puVar21;\n      } while (puVar19 != puVar21);\n      goto LAB_0800aafc;\n    }\n    uVar29 = 0;\n    puVar17 = puVar19 + iVar5 + 1;\n    do {\n      puVar21 = puVar17 + -1;\n      uVar29 = __aeabi_dadd((int)uVar29,(int)((ulonglong)uVar29 >> 0x20),*(undefined4 *)puVar21,\n                            *(undefined4 *)((int)puVar17 + -4));\n      puVar17 = puVar21;\n    } while (puVar19 != puVar21);\n  }\n  iVar9 = (int)((ulonglong)uVar29 >> 0x20);\n  uVar3 = (undefined4)uVar29;\n  if (iVar23 == 0) {\n    *(undefined8 *)local_260[1] = uVar29;\n    uVar30 = __subdf3(local_168,uStack_164,uVar3,iVar9);\n    if (iVar5 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar19 = (undefined8 *)&local_168;\n    do {\n      uVar30 = __aeabi_dadd((int)uVar30,(int)(uVar30 >> 0x20),*(undefined4 *)(puVar19 + 1),\n                            *(undefined4 *)((int)puVar19 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar19 = puVar19 + 1;\n    } while (iVar9 <= iVar5);\n    if (iVar23 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar3;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar30 = __subdf3(local_168,uStack_164,uVar3,iVar9);\n    if (0 < iVar5) goto LAB_0800ad04;\n  }\n  uVar30 = uVar30 & 0xffffffff | (ulonglong)((int)(uVar30 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_260[1] + 8) = uVar30;\n  return uVar2 & 7;\n}\n\n",
            "called": [
                "floor",
                "scalbn",
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__aeabi_d2iz",
                "__aeabi_i2d",
                "__subdf3",
                "__aeabi_dcmpge"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "imported": false,
            "current_name": "FUNC_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "FUN_0800195c": "check_and_reset_memory_0800195c",
                "PTR_sys_08001990": "sys_data",
                "mc_reset": "reset_memory"
            },
            "code": "void check_and_reset_memory_0800195c(void)\n{\n    if ((PTR_sys_08001990[1] != '\\x06') && ((PTR_sys_08001990[2] & 0x20) == 0)) {\n        reset_memory();\n        PTR_sys_08001990[2] |= 0x40;\n    }\n    return;\n}",
            "called": [
                "mc_reset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "debounce_on_handler"
            ],
            "imported": false,
            "current_name": "check_and_reset_memory_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "are_characters_equal_08009214",
                "in_ZR": "character"
            },
            "code": "bool are_characters_equal_08009214(char character) {\\n  __aeabi_cfcmpeq();\\n  return character != \"\\0\";\\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "mc_arc",
                "gc_execute_line",
                "read_float",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "are_characters_equal_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "FUN_08004dd2": "get_version_and_settings_08004dd2",
                "bVar1": "version_byte",
                "iVar2": "copy_result",
                "version": "version_number",
                "PTR_settings_08004e2c": "settings_pointer",
                "memcpy_from_eeprom_with_checksum": "memcpy_from_eeprom_with_checksum",
                "settings_reset": "reset_settings"
            },
            "code": "uint8_t get_version_and_settings_08004dd2(void)\n{\n  byte version_byte;\n  int copy_result;\n  uint8_t version_number;\n  \n  version_byte = eeprom_get_char(0);\n  if (version_byte == 5) {\n    copy_result = memcpy_from_eeprom_with_checksum(PTR_settings_08004e2c, 1, 0x40);\n    if (copy_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (version_byte > 4) {\n      return 0;\n    }\n    copy_result = memcpy_from_eeprom_with_checksum(PTR_settings_08004e2c, 1, 0x28);\n    if (copy_result == 0) {\n      return 0;\n    }\n    reset_settings(false);\n  }\n  return 1;\n}",
            "called": [
                "settings_reset",
                "memcpy_from_eeprom_with_checksum",
                "eeprom_get_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "settings_init"
            ],
            "imported": false,
            "current_name": "get_version_and_settings_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "execute_step_08005778",
                "PTR_saved_step_bits_0800578c": "PTR_saved_step_bits_0800578c",
                "step_wr": "step_wr",
                "uint": "uint",
                "ushort": "uint16_t"
            },
            "code": "void execute_step_08005778(void)\n{\n  uint16_t* saved_step_bits = (uint16_t*) PTR_saved_step_bits_0800578c;\n  uint16_t step_bits = *saved_step_bits;\n  step_wr(step_bits);\n  return;\n}",
            "called": [
                "step_wr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "execute_step_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUN_080028bc": "calculateAcceleration_080028bc",
                "in_r0": "initialRate",
                "in_r1": "targetRate",
                "in_r2": "acceleration",
                "uVar1": "deltaRateSquared",
                "uVar2": "accelerationSquared",
                "fVar3": "result"
            },
            "code": "float calculateAcceleration_080028bc(float initialRate, float targetRate, float acceleration){\n  float deltaRateSquared = __aeabi_fmul(initialRate, initialRate);\n  deltaRateSquared = __aeabi_fsub(__aeabi_fmul(targetRate, targetRate), deltaRateSquared);\n  float accelerationSquared = __addsf3(acceleration, acceleration);\n  float result = (float)__aeabi_fdiv(deltaRateSquared, accelerationSquared);\n  return result;\n}",
            "called": [
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fsub",
                "__aeabi_fdiv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "imported": false,
            "current_name": "calculateAcceleration_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "FUN_08006628": "calculateSystemCoreClock_08006628",
                "uVar1": "sysClockFreq",
                "uVar2": "leadingZeroes",
                "result": "apbAhbPrescaler",
                "result_1": "systemCoreClock",
                "PTR_SystemCoreClock_0800667c": "systemCoreClockAddress",
                "PTR_APBAHBPrescTable_08006678": "apbAhbPrescalerTable",
                "DAT_08006674": "data08006674"
            },
            "code": "uint32_t calculateSystemCoreClock_08006628(void)\n{\n  uint32_t sysClockFreq = HAL_RCC_GetSysClockFreq();\n  uint leadingZeroes = count_leading_zeroes(0xf000000);\n  uint apbAhbPrescalerIndex = (*(uint *)(DAT_08006674 + 8) & 0xf0) >> (leadingZeroes & 0xff);\n  uint32_t apbAhbPrescaler = PTR_APBAHBPrescTable_08006678[apbAhbPrescalerIndex];\n  *(uint32_t *)PTR_SystemCoreClock_0800667c = sysClockFreq >> apbAhbPrescaler;\n  return *(uint32_t *)PTR_SystemCoreClock_0800667c;\n}",
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006628",
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "imported": false,
            "current_name": "calculateSystemCoreClock_08006628"
        },
        "FUN_080078e2": {
            "renaming": {
                "FUN_080078e2": "do_nothing_080078e2"
            },
            "code": "\nvoid do_nothing_080078e2(uint32_t bits)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078e2",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080078e2"
        },
        "FUN_08008b38": {
            "renaming": {
                "FUN_08008b38": "is_not_equal_08008b38",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_not_equal_08008b38(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_zero;\n  \n  is_CY_zero = __aeabi_cdcmpeq() == 0;\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b38",
            "calling": [],
            "imported": false,
            "current_name": "is_not_equal_08008b38"
        },
        "FUN_0800738e": {
            "renaming": {
                "FUN_0800738e": "check_and_trigger_GPIO_interrupt_0800738e",
                "GPIO_Pin": "pin",
                "PTR_080073bc": "DAT_080073bc",
                "DAT_080073bc + 0x14": "DAT_080073bc_14_Ptr",
                "GPIO_Pin_Ptr": "GPIO_Pin_Ptr",
                "GPIO_Pin_Ptr_as_uint_Ptr": "GPIO_Pin_Ptr_as_uint_Ptr"
            },
            "code": "void check_and_trigger_GPIO_interrupt_0800738e(uint16_t pin){\n  uint16_t* GPIO_Pin_Ptr = &pin;\n  uint32_t* PTR_080073bc + 0x14 = (uint32_t*)(PTR_080073bc + 0x14);\n  uint32_t* GPIO_Pin_Ptr_as_uint_Ptr = (uint32_t*)GPIO_Pin_Ptr;\n  \n  if ((*GPIO_Pin_Ptr_as_uint_Ptr & *PTR_080073bc + 0x14) != 0) {\n    *PTR_080073bc + 0x14 = *GPIO_Pin_Ptr_as_uint_Ptr;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": false,
            "current_name": "check_and_trigger_GPIO_interrupt_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(uint32_t us)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "homing_cycle"
            ],
            "imported": false,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "FUNC_080053a0"
            },
            "code": "\nvoid FUNC_080053a0(void)\n\n{\n  block_t *pbVar1;\n  int iVar2;\n  \n  dirn_wr((uint)*(ushort *)PTR_dirn_bits_080055f0);\n  *(undefined2 *)PTR_saved_step_bits_080055f8 = *(undefined2 *)PTR_step_bits_080055f4;\n  if (*(int *)PTR_current_block_080055fc == 0) {\n    pbVar1 = plan_get_current_block();\n    *(block_t **)PTR_current_block_080055fc = pbVar1;\n    if (*(int *)PTR_current_block_080055fc == 0) {\n      st_go_idle();\n      PTR_sys_08005600[2] = PTR_sys_08005600[2] | 4;\n    }\n    else {\n      if (PTR_sys_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_st_08005604 + 0x1c) =\n             *(undefined4 *)(*(int *)PTR_current_block_080055fc + 0x28);\n        set_step_events_per_minute(*(uint32_t *)(PTR_st_08005604 + 0x1c));\n        *(undefined4 *)(PTR_st_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_st_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_current_block_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_current_block_080055fc + 0x30);\n      *(int *)PTR_st_08005604 = -(*(int *)(*(int *)PTR_current_block_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_st_08005604 + 4) = *(undefined4 *)PTR_st_08005604;\n      *(undefined4 *)(PTR_st_08005604 + 8) = *(undefined4 *)PTR_st_08005604;\n      *(undefined4 *)(PTR_st_08005604 + 0xc) =\n           *(undefined4 *)(*(int *)PTR_current_block_080055fc + 0x10);\n      *(undefined4 *)(PTR_st_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_current_block_080055fc != 0) {\n    *(undefined2 *)PTR_dirn_bits_080055f0 = **(undefined2 **)PTR_current_block_080055fc;\n    *(undefined2 *)PTR_step_bits_080055f4 = 0;\n    *(int *)PTR_st_08005604 =\n         *(int *)(*(int *)PTR_current_block_080055fc + 4) + *(int *)PTR_st_08005604;\n    if (0 < *(int *)PTR_st_08005604) {\n      *(ushort *)PTR_step_bits_080055f4 = *(ushort *)PTR_step_bits_080055f4 | 0x10;\n      *(int *)PTR_st_08005604 = *(int *)PTR_st_08005604 - *(int *)(PTR_st_08005604 + 0xc);\n      if ((*(ushort *)PTR_dirn_bits_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_sys_08005600 + 4) = *(int *)(PTR_sys_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_sys_08005600 + 4) = *(int *)(PTR_sys_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_st_08005604 + 4) =\n         *(int *)(*(int *)PTR_current_block_080055fc + 8) + *(int *)(PTR_st_08005604 + 4);\n    if (0 < *(int *)(PTR_st_08005604 + 4)) {\n      *(ushort *)PTR_step_bits_080055f4 = *(ushort *)PTR_step_bits_080055f4 | 0x440;\n      *(int *)(PTR_st_08005604 + 4) =\n           *(int *)(PTR_st_08005604 + 4) - *(int *)(PTR_st_08005604 + 0xc);\n      if ((*(ushort *)PTR_dirn_bits_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_sys_08005600 + 8) = *(int *)(PTR_sys_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_sys_08005600 + 8) = *(int *)(PTR_sys_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_st_08005604 + 8) =\n         *(int *)(*(int *)PTR_current_block_080055fc + 0xc) + *(int *)(PTR_st_08005604 + 8);\n    if (0 < *(int *)(PTR_st_08005604 + 8)) {\n      *(ushort *)PTR_step_bits_080055f4 = *(ushort *)PTR_step_bits_080055f4 | 0x100;\n      *(int *)(PTR_st_08005604 + 8) =\n           *(int *)(PTR_st_08005604 + 8) - *(int *)(PTR_st_08005604 + 0xc);\n      if ((*(ushort *)PTR_dirn_bits_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_sys_08005600 + 0xc) = *(int *)(PTR_sys_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_sys_08005600 + 0xc) = *(int *)(PTR_sys_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_st_08005604 + 0x10) = *(int *)(PTR_st_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_st_08005604 + 0x10) < *(uint *)(*(int *)PTR_current_block_080055fc + 0x10)) {\n      if (PTR_sys_08005600[1] == '\\x04') {\n        iVar2 = iterate_trapezoid_cycle_counter();\n        if (iVar2 != 0) {\n          if (*(uint *)(*(int *)PTR_current_block_080055fc + 0x30) <\n              *(uint *)(PTR_st_08005604 + 0x1c)) {\n            *(int *)(PTR_st_08005604 + 0x1c) =\n                 *(int *)(PTR_st_08005604 + 0x1c) -\n                 *(int *)(*(int *)PTR_current_block_080055fc + 0x30);\n            set_step_events_per_minute(*(uint32_t *)(PTR_st_08005604 + 0x1c));\n          }\n          else {\n            st_go_idle();\n            PTR_sys_08005600[2] = PTR_sys_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_st_08005748 + 0x10) <\n               *(uint *)(*(int *)PTR_current_block_0800574c + 0x34)) {\n        iVar2 = iterate_trapezoid_cycle_counter();\n        if (iVar2 != 0) {\n          *(int *)(PTR_st_08005748 + 0x1c) =\n               *(int *)(PTR_st_08005748 + 0x1c) +\n               *(int *)(*(int *)PTR_current_block_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_current_block_0800574c + 0x3c) <=\n              *(uint *)(PTR_st_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_st_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_current_block_0800574c + 0x3c);\n          }\n          set_step_events_per_minute(*(uint32_t *)(PTR_st_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_st_08005748 + 0x10) <\n               *(uint *)(*(int *)PTR_current_block_0800574c + 0x38)) {\n        if (*(int *)(PTR_st_08005748 + 0x1c) != *(int *)(*(int *)PTR_current_block_0800574c + 0x3c))\n        {\n          *(undefined4 *)(PTR_st_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_current_block_0800574c + 0x3c);\n          set_step_events_per_minute(*(uint32_t *)(PTR_st_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_st_08005748 + 0x10) ==\n               *(int *)(*(int *)PTR_current_block_0800574c + 0x38)) {\n        if (*(int *)(PTR_st_08005748 + 0x1c) == *(int *)(*(int *)PTR_current_block_0800574c + 0x3c))\n        {\n          *(undefined4 *)(PTR_st_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_st_08005748 + 0x18) = 420000 - *(int *)(PTR_st_08005748 + 0x18);\n        }\n      }\n      else {\n        iVar2 = iterate_trapezoid_cycle_counter();\n        if (iVar2 != 0) {\n          if (*(uint *)(PTR_st_08005748 + 0x20) < *(uint *)(PTR_st_08005748 + 0x1c)) {\n            *(int *)(PTR_st_08005748 + 0x1c) =\n                 *(int *)(PTR_st_08005748 + 0x1c) -\n                 *(int *)(*(int *)PTR_current_block_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_st_08005748 + 0x1c) = *(uint *)(PTR_st_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_st_08005748 + 0x1c) <\n              *(uint *)(*(int *)PTR_current_block_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_st_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_current_block_0800574c + 0x2c);\n          }\n          set_step_events_per_minute(*(uint32_t *)(PTR_st_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_step_bits_08005754 = 0;\n      *(undefined4 *)PTR_current_block_0800574c = 0;\n      plan_discard_current_block();\n    }\n  }\n  *(ushort *)PTR_step_bits_08005754 =\n       *(ushort *)PTR_step_bits_08005754 ^ *(ushort *)(PTR_settings_08005758 + 0x18);\n  *(ushort *)PTR_dirn_bits_0800575c =\n       *(ushort *)PTR_dirn_bits_0800575c ^ *(ushort *)(PTR_settings_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "iterate_trapezoid_cycle_counter",
                "plan_discard_current_block",
                "st_go_idle",
                "plan_get_current_block",
                "dirn_wr",
                "set_step_events_per_minute"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053a0",
            "calling": [
                "TIM2_IRQHandler"
            ],
            "imported": false,
            "current_name": "FUNC_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "iVar1": "index",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "PTR_completed_8911_0800930c": "completed_ptr",
                "PTR_SystemCoreClock_08009304": "clock_ptr",
                "PTR_completed_8911_08009308": "end_clock_ptr",
                "PTR___fini_array_end_08009300": "fini_array_end_ptr",
                "PTR__ebss_08009310": "ebss_ptr"
            },
            "code": "void initialize_system_080092c4(void)\n{\n  int index;\n  undefined4 *PTR_completed_8911_0800930c = (undefined4 *)PTR_completed_8911_0800930c;\n  undefined4 *PTR_SystemCoreClock_08009304 = PTR_SystemCoreClock_08009304;\n  code *jump_table_ptr = (code *)0x80092fa;\n  for (index = 0; PTR_SystemCoreClock_08009304 + index < PTR_completed_8911_08009308; index += 4) {\n    *(undefined4 *)(PTR_SystemCoreClock_08009304 + index) = *(undefined4 *)(PTR___fini_array_end_08009300 + index);\n  }\n  for (; PTR_completed_8911_0800930c < PTR__ebss_08009310; PTR_completed_8911_0800930c++) {\n    *PTR_completed_8911_0800930c = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "__libc_init_array",
                "SystemInit",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_080092c4"
        },
        "FUN_0800770e": {
            "renaming": {
                "FUN_0800770e": "do_nothing_0800770e"
            },
            "code": "\nvoid do_nothing_0800770e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800770e",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800770e"
        },
        "FUN_08008250": {
            "renaming": {
                "FUN_08008250": "print_data_to_usart_08008250",
                "data": "data"
            },
            "code": "void print_data_to_usart_08008250(uint8_t data)\n{\n  usart_putc(data);\n  return;\n}",
            "called": [
                "usart_putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "printString",
                "printInteger",
                "print_uint32_base10",
                "print_base2",
                "printPgmString",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_data_to_usart_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "FUN_0800184c": "validate_input_0800184c",
                "letter": "output_letter",
                "float_ptr": "output_float_ptr",
                "line": "input_string",
                "char_counter": "input_char_counter",
                "iVar1": "result"
            },
            "code": "int validate_input_0800184c(char *letter, float *float_ptr, char *input_string, uint8_t *char_counter) {\n  int result;\n  if (input_string[*char_counter] == '\\0') {\n    result = 0;\n  }\n  else {\n    *letter = input_string[*char_counter];\n    if (((byte)*letter < 0x41) || (0x5a < (byte)*letter)) {\n      *PTR_gc_080018c8 = 2;\n      result = 0;\n    }\n    else {\n      *char_counter = *char_counter + '\\x01';\n      result = read_float(input_string, char_counter, float_ptr);\n      if (result == 0) {\n        *PTR_gc_080018c8 = 1;\n        result = 0;\n      }\n      else {\n        result = 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "read_float"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "validate_input_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "FUNC_08001f00"
            },
            "code": "\nvoid FUNC_08001f00(float *position,float *target,float *offset,uint8_t axis_0,uint8_t axis_1,\n           uint8_t axis_linear,float feed_rate,uint8_t invert_feed_rate,float radius,\n           uint8_t isclockwise)\n\n{\n  uint uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  int iVar6;\n  float fVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined8 extraout_d0;\n  undefined8 extraout_d0_00;\n  undefined8 extraout_d0_01;\n  float extraout_s2;\n  float z;\n  float extraout_s2_00;\n  float extraout_s3;\n  float feed_rate_00;\n  float extraout_s3_00;\n  float feed_rate_01;\n  undefined8 uVar8;\n  undefined8 uVar9;\n  undefined3 in_stack_00000009;\n  undefined4 in_stack_00000010;\n  char in_stack_00000014;\n  uint in_stack_ffffff78;\n  undefined4 in_stack_ffffff7c;\n  undefined3 in_stack_ffffff80;\n  uint uVar10;\n  byte bVar11;\n  float arc_target [3];\n  float r_axisi;\n  float sin_Ti;\n  float cos_Ti;\n  float sin_T;\n  float cos_T;\n  float linear_per_segment;\n  float theta_per_segment;\n  uint16_t segments;\n  float millimeters_of_travel;\n  float rt_axis1;\n  float rt_axis0;\n  float linear_travel;\n  float center_axis1;\n  float center_axis0;\n  int8_t count;\n  uint16_t i;\n  float angular_travel;\n  float r_axis1;\n  float r_axis0;\n  \n  uVar10 = CONCAT13(axis_0,in_stack_ffffff80);\n  center_axis0 = (float)__addsf3(feed_rate,position[axis_0],offset[axis_0]);\n  center_axis1 = (float)__addsf3(position[axis_1],offset[axis_1]);\n  uVar1 = __aeabi_fsub(target[axis_linear],position[axis_linear]);\n  bVar11 = (byte)(uVar10 >> 0x18);\n  r_axis0 = (float)((uint)offset[bVar11] ^ 0x80000000);\n  r_axis1 = (float)((uint)offset[axis_1] ^ 0x80000000);\n  uVar2 = __aeabi_fsub(target[bVar11],center_axis0);\n  uVar3 = __aeabi_fsub(target[axis_1],center_axis1);\n  uVar4 = __aeabi_fmul(r_axis0,uVar3);\n  uVar5 = __aeabi_fmul(r_axis1,uVar2);\n  uVar4 = __aeabi_fsub(uVar4,uVar5);\n  uVar8 = __aeabi_f2d(uVar4);\n  uVar2 = __aeabi_fmul(r_axis0,uVar2);\n  uVar3 = __aeabi_fmul(r_axis1,uVar3);\n  uVar2 = __addsf3(uVar2,uVar3);\n  uVar9 = __aeabi_f2d(uVar2);\n  uVar8 = atan2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),(int)uVar9,\n                (int)((ulonglong)uVar9 >> 0x20));\n  angular_travel = (float)__truncdfsf2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n  if (in_stack_00000014 == '\\0') {\n    iVar6 = __aeabi_fcmple(angular_travel,0);\n    if (iVar6 != 0) {\n      uVar8 = __aeabi_f2d(angular_travel);\n      uVar8 = __aeabi_dadd((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),DAT_08002240,DAT_08002244);\n      angular_travel = (float)__truncdfsf2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n    }\n  }\n  else {\n    iVar6 = __aeabi_fcmpge(angular_travel,0);\n    if (iVar6 != 0) {\n      uVar8 = __aeabi_f2d(angular_travel);\n      uVar8 = __subdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),DAT_08002240,DAT_08002244);\n      angular_travel = (float)__truncdfsf2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n    }\n  }\n  uVar2 = __aeabi_fmul(angular_travel,in_stack_00000010);\n  uVar2 = __aeabi_f2d(uVar2);\n  __aeabi_f2d(uVar1 & 0x7fffffff);\n  hypot((double)CONCAT44(in_stack_ffffff7c,in_stack_ffffff78),(double)CONCAT44(offset,uVar10));\n  uVar2 = __truncdfsf2(uVar2,extraout_r1);\n  iVar6 = __aeabi_fcmpeq(uVar2,0);\n  if (iVar6 == 0) {\n    uVar2 = __aeabi_fdiv(uVar2,*(undefined4 *)(PTR_settings_08002248 + 0x1c));\n    uVar2 = __aeabi_f2d(uVar2);\n    floor((double)CONCAT44(in_stack_ffffff7c,in_stack_ffffff78));\n    segments = __aeabi_d2uiz(uVar2,extraout_r1_00);\n    if (isclockwise != '\\0') {\n      uVar2 = __floatsisf(segments);\n      __aeabi_fmul(_invert_feed_rate,uVar2);\n    }\n    uVar2 = __floatsisf(segments);\n    sin_T = (float)__aeabi_fdiv(angular_travel,uVar2);\n    uVar2 = __floatsisf(segments);\n    linear_per_segment = (float)__aeabi_fdiv(uVar1,uVar2);\n    uVar8 = __aeabi_f2d(sin_T);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),0,DAT_0800224c);\n    uVar9 = __aeabi_f2d(sin_T);\n    uVar8 = __muldf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),(int)uVar9,\n                     (int)((ulonglong)uVar9 >> 0x20));\n    uVar8 = __subdf3(0,DAT_08002250,(int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n    cos_T = (float)__truncdfsf2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n    count = '\\0';\n    theta_per_segment = sin_T;\n    arc_target[axis_linear] = position[axis_linear];\n    uVar8 = extraout_d0;\n    fVar7 = extraout_s2;\n    feed_rate_01 = extraout_s3;\n    for (i = 1; i < segments; i = i + 1) {\n      if ((int)count < (int)(uint)(byte)PTR_settings_08002248[0x3e]) {\n        uVar2 = __aeabi_fmul(r_axis0,sin_T);\n        uVar3 = __aeabi_fmul(r_axis1,cos_T);\n        fVar7 = (float)__addsf3(uVar2,uVar3);\n        uVar2 = __aeabi_fmul(r_axis0,cos_T);\n        uVar3 = __aeabi_fmul(r_axis1,sin_T);\n        r_axis0 = (float)__aeabi_fsub(uVar2,uVar3);\n        count = count + '\\x01';\n        r_axis1 = fVar7;\n      }\n      else {\n        uVar2 = __floatsisf(i);\n        uVar2 = __aeabi_fmul(uVar2,theta_per_segment);\n        uVar2 = __aeabi_f2d(uVar2);\n        cos((double)CONCAT44(in_stack_ffffff7c,in_stack_ffffff78));\n        uVar2 = __truncdfsf2(uVar2,extraout_r1_01);\n        uVar3 = __floatsisf(i);\n        uVar3 = __aeabi_fmul(uVar3,theta_per_segment);\n        uVar3 = __aeabi_f2d(uVar3);\n        sin((double)CONCAT44(in_stack_ffffff7c,in_stack_ffffff78));\n        uVar3 = __truncdfsf2(uVar3,extraout_r1_02);\n        uVar4 = __aeabi_fmul((uint)offset[uVar10 >> 0x18] ^ 0x80000000,uVar2);\n        uVar5 = __aeabi_fmul(offset[axis_1],uVar3);\n        r_axis0 = (float)__addsf3(uVar4,uVar5);\n        uVar3 = __aeabi_fmul((uint)offset[uVar10 >> 0x18] ^ 0x80000000,uVar3);\n        uVar2 = __aeabi_fmul(offset[axis_1],uVar2);\n        r_axis1 = (float)__aeabi_fsub(uVar3,uVar2);\n        count = '\\0';\n      }\n      uVar1 = uVar10 >> 0x18;\n      fVar7 = (float)__addsf3(center_axis0,r_axis0);\n      arc_target[uVar1] = fVar7;\n      fVar7 = (float)__addsf3(center_axis1,r_axis1);\n      arc_target[axis_1] = fVar7;\n      fVar7 = (float)__addsf3(arc_target[axis_linear],linear_per_segment);\n      arc_target[axis_linear] = fVar7;\n      in_stack_ffffff78 = (uint)isclockwise;\n      mc_line((float)extraout_d0_00,(float)((ulonglong)extraout_d0_00 >> 0x20),z,feed_rate_00,\n              SUB41(arc_target[0],0));\n      if (*PTR_sys_08002404 != '\\0') {\n        return;\n      }\n      uVar8 = extraout_d0_01;\n      fVar7 = extraout_s2_00;\n      feed_rate_01 = extraout_s3_00;\n    }\n    mc_line((float)uVar8,(float)((ulonglong)uVar8 >> 0x20),fVar7,feed_rate_01,SUB41(*target,0));\n  }\n  return;\n}\n\n",
            "called": [
                "__aeabi_fcmple",
                "__aeabi_fcmpge",
                "atan2",
                "__truncdfsf2",
                "__aeabi_fsub",
                "__aeabi_dadd",
                "__muldf3",
                "cos",
                "__aeabi_fdiv",
                "mc_line",
                "__subdf3",
                "floor",
                "__addsf3",
                "sin",
                "__aeabi_fmul",
                "__aeabi_fcmpeq",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "hypot",
                "__floatsisf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f00",
            "calling": [
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "FUNC_08001f00"
        },
        "FUN_08005ad4": {
            "renaming": {
                "FUN_08005ad4": "get_top_bits_of_first_dat_08005ad4",
                "*DAT_08005ae8": "data_ptr",
                "DAT_08005ae8": "data_ptr",
                "first_data": "first_data",
                "top_bits": "top_bits"
            },
            "code": "uint32_t get_top_bits_of_first_dat_08005ad4(void)\n{\n    uint32_t* *DAT_08005ae8 = DAT_08005ae8;\n    uint32_t first_data = **DAT_08005ae8;\n    uint32_t top_bits = first_data >> 0x10;\n    return top_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ad4",
            "calling": [],
            "imported": false,
            "current_name": "get_top_bits_of_first_dat_08005ad4"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_flag_for_data_08005b3c",
                "DAT_08005b54": "data_ptr",
                "PTR_": ""
            },
            "code": "void set_flag_for_data_08005b3c(uint32_t* DAT_08005b54)\n{\n  uint32_t* flag_ptr = DAT_08005b54 + 1;\n  *flag_ptr |= 2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [],
            "imported": false,
            "current_name": "set_flag_for_data_08005b3c"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "set_NVIC_priority_group_08006ce0",
                "PriorityGroup": "priority_group"
            },
            "code": "void set_NVIC_priority_group_08006ce0(uint32_t priority_group) {\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}",
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "set_NVIC_priority_group_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "disable_interrupt_08006d4a",
                "IRQn": "interrupt"
            },
            "code": "void disable_interrupt_08006d4a(IRQn_Type interrupt)\n{\n  NVIC_DisableIRQ(interrupt);\n  return;\n}",
            "called": [
                "NVIC_DisableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": false,
            "current_name": "disable_interrupt_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "FUNC_08008894"
            },
            "code": "\nulonglong FUNC_08008894(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_08008a02();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_080089b2;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_080089b2:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008894",
            "calling": [
                "__ieee754_sqrt",
                "__ieee754_atan2",
                "sqrt",
                "homing_cycle",
                "plan_buffer_line",
                "gc_execute_line",
                "atan"
            ],
            "imported": false,
            "current_name": "FUNC_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "write_to_eeprom_08000374",
                "destination": "location",
                "source": "data",
                "size": "data_size",
                "local_1c": "remaining_size",
                "local_18": "current_byte",
                "local_14": "current_location",
                "checksum": "checksum"
            },
            "code": "void write_to_eeprom_08000374(uint destination, char *source, uint size)\n{\n  uint remaining_size = size;\n  uchar *current_byte = (uchar *)source;\n  uint current_location = destination;\n  uchar checksum = 0;\n  if (*(int *)PTR_eeprom_ready_080003e8 == 0) {\n    eeprom_init();\n    current_byte = (uchar *)source;\n    current_location = destination;\n  }\n  while (remaining_size != 0) {\n    checksum += *current_byte;\n    eeprom_put_char(current_location, *current_byte);\n    current_byte++;\n    current_location++;\n    remaining_size--;\n  }\n  eeprom_put_char(current_location, checksum);\n  return;\n}",
            "called": [
                "eeprom_put_char",
                "eeprom_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "settings_write_coord_data",
                "settings_store_startup_line",
                "write_global_settings"
            ],
            "imported": false,
            "current_name": "write_to_eeprom_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "print_unsigned_long_080037fc",
                "n": "number",
                "local_c": "abs_number",
                "serial_write": "serial_write",
                "print_uint32_base10": "print_uint32_base10"
            },
            "code": "void print_unsigned_long_080037fc(long number) {\n  unsigned long abs_number;\n  abs_number = number;\n  if (number < 0) {\n    serial_write('-');\n    abs_number = -number;\n  }\n  print_uint32_base10(abs_number);\n  return;\n}",
            "called": [
                "print_uint32_base10",
                "serial_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "report_grbl_settings",
                "report_startup_line",
                "report_gcode_modes"
            ],
            "imported": false,
            "current_name": "print_unsigned_long_080037fc"
        },
        "FUN_08007dd8": {
            "renaming": {
                "FUN_08007dd8": "disable_timer_output_08007dd8",
                "puVar1": "timer_control_register",
                "TIMx": "N/A",
                "DAT_08007e04": "timer_control_register"
            },
            "code": "void disable_timer_output_08007dd8(void)\n{\n  uint32_t *DAT_08007e04 = DAT_08007e04;\n  *DAT_08007e04 &= 0xfffffffe;\n  DAT_08007e04[8] &= 0xffffffef;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007dd8",
            "calling": [],
            "imported": false,
            "current_name": "disable_timer_output_08007dd8"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "FUN_0800a1bc": "multiply_add_0800a1bc",
                "param_1": "a",
                "param_2": "b",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "temp",
                "uVar4": "candidate",
                "uVar5": "diff",
                "uVar6": "mask",
                "uVar7": "bit",
                "uVar8": "dividend",
                "uVar9": "divisor",
                "uVar10": "remainder",
                "uVar11": "bit_count",
                "uVar12": "temp_dividend",
                "uVar13": "quotient",
                "uVar14": "product"
            },
            "code": "uint multiply_add_0800a1bc(uint a, uint b)\n{\n    uint result;\n    if ((0x0800a340 & ~b) == 0) {\n        result = a + b;\n    }\n    else if ((int)b < 1) {\n        if ((b & 0x7fffffff | a) == 0) {\n            result = a;\n        }\n        else if (b != 0) {\n            uint diff = a - b;\n            result = diff / b;\n        }\n        else {\n            do {\n                uint high_bits = a >> 0xb;\n                b -= 0x15;\n                a = a << 0x15;\n            } while (high_bits == 0);\n            uint shift_amount = b;\n            if ((int)a < 0) {\n                shift_amount = 0x20;\n            }\n            result = a >> shift_amount;\n        }\n    }\n    else {\n        uint shift_amount = (int)b >> 0x14;\n        if (shift_amount != 0) {\n            b = b << (0x20 - shift_amount);\n            a = a << (0x20 - shift_amount);\n        }\n        uint mask = 0x80000000;\n        uint quotient = 0;\n        for (int i = 0; i < 0x16; i++) {\n            uint candidate = quotient + mask;\n            if ((int)a < (int)b) {\n                if ((int)(candidate + mask) >= 0) {\n                    quotient = quotient + mask + mask;\n                }\n                else {\n                    quotient = quotient + mask;\n                }\n            }\n            else if (a == b || b <= (b << 1) - a) {\n                quotient = quotient + mask;\n                a = a - b;\n            }\n            mask = mask >> 1;\n            b = b >> 1;\n        }\n        result = quotient;\n    }\n    return result;\n}",
            "called": [
                "__aeabi_dadd",
                "__muldf3",
                "__subdf3",
                "__divdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "__ieee754_hypot",
                "sqrt"
            ],
            "imported": false,
            "current_name": "multiply_add_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "FUN_0800525c": "spindle_direction_0800525c",
                "direction": "new_direction",
                "*PTR_current_direction_080052a8": "*current_direction",
                "plan_synchronize": "plan_synchronize",
                "spindle_stop": "spindle_stop",
                "spindle_rev": "spindle_reverse",
                "spindle_fwd": "spindle_forward"
            },
            "code": "void spindle_direction_0800525c(int8_t new_direction)\n{\n    int8_t current_direction = *PTR_current_direction_080052a8;\n    if (new_direction != current_direction) {\n        plan_synchronize();\n        if (new_direction == 0) {\n            spindle_stop();\n        }\n        else {\n            if (new_direction < 1) {\n                spindle_reverse();\n            }\n            else {\n                spindle_forward();\n            }\n            spindle_on();\n        }\n        *PTR_current_direction_080052a8 = new_direction;\n    }\n}\n",
            "called": [
                "plan_synchronize",
                "spindle_stop",
                "spindle_fwd",
                "spindle_on",
                "spindle_rev"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "spindle_direction_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "FUN_080073d4": "set_bit_in_short_080073d4",
                "n": "bit_index",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_short_080073d4(int bit_index)\n{\n    int short_index = bit_index >> 4;\n    short* target_short = (short*)(short_index * 0x400 + 0x4002001a);\n    int bit_offset = bit_index & 0xf;\n    short bit_mask = 1 << bit_offset;\n    *target_short = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "debounce_off_handler"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_080073d4"
        },
        "FUN_080085e4": {
            "renaming": {
                "FUN_080085e4": "FUNC_080085e4"
            },
            "code": "\nulonglong FUNC_080085e4(uint param_1,uint param_2)\n\n{\n  byte bVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  uint uVar9;\n  bool bVar10;\n  bool bVar11;\n  bool bVar12;\n  \n  if ((param_1 | param_2) == 0) {\n    return CONCAT44(param_2,param_1);\n  }\n  uVar8 = param_2 & 0x80000000;\n  uVar3 = param_2;\n  if ((int)uVar8 < 0) {\n    bVar11 = param_1 != 0;\n    param_1 = -param_1;\n    uVar3 = -param_2 - (uint)bVar11;\n  }\n  iVar7 = 0x432;\n  uVar9 = uVar3 >> 0x16;\n  if (uVar9 != 0) {\n    iVar7 = 3;\n    if (uVar3 >> 0x19 != 0) {\n      iVar7 = 6;\n    }\n    if (uVar3 >> 0x1c != 0) {\n      iVar7 = iVar7 + 3;\n    }\n    uVar4 = iVar7 - ((int)uVar3 >> 0x1f);\n    uVar9 = param_1 << (0x20 - uVar4 & 0xff);\n    param_1 = param_1 >> (uVar4 & 0xff) | uVar3 << (0x20 - uVar4 & 0xff);\n    uVar3 = uVar3 >> (uVar4 & 0xff);\n    iVar7 = uVar4 + 0x432;\n  }\n  if (0xfffff < uVar3) {\n    if (0x1fffff < uVar3) {\n      uVar4 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      bVar1 = (byte)param_1;\n      param_1 = (uint)(uVar4 != 0) << 0x1f | param_1 >> 1;\n      uVar9 = (uint)(bVar1 & 1) << 0x1f | uVar9 >> 1;\n      iVar7 = iVar7 + 1;\n      if (0xffbfffff < (uint)(iVar7 * 0x200000)) {\n        return (ulonglong)(uVar8 | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_080083e0:\n    bVar11 = 0x7fffffff < uVar9;\n    if (uVar9 == 0x80000000) {\n      bVar11 = (param_1 & 1) != 0;\n    }\n    return CONCAT44(uVar3 + iVar7 * 0x100000 + (uint)CARRY4(param_1,(uint)bVar11) | uVar8,\n                    param_1 + bVar11);\n  }\n  bVar10 = (uVar9 & 0x80000000) != 0;\n  uVar9 = uVar9 << 1;\n  uVar4 = param_1 * 2;\n  bVar11 = CARRY4(param_1,param_1);\n  param_1 = param_1 * 2 + (uint)bVar10;\n  uVar3 = uVar3 * 2 + (uint)(bVar11 || CARRY4(uVar4,(uint)bVar10));\n  bVar11 = iVar7 != 0;\n  iVar7 = iVar7 + -1;\n  if (bVar11 && 0xfffff < uVar3) goto LAB_080083e0;\n  uVar2 = param_1;\n  uVar4 = uVar3;\n  if (uVar3 == 0) {\n    uVar2 = 0;\n    uVar4 = param_1;\n  }\n  iVar5 = count_leading_zeroes(uVar4);\n  if (uVar3 == 0) {\n    iVar5 = iVar5 + 0x20;\n  }\n  uVar6 = iVar5 - 0xb;\n  bVar12 = SBORROW4(uVar6,0x20);\n  uVar3 = iVar5 - 0x2b;\n  bVar11 = (int)uVar3 < 0;\n  bVar10 = uVar3 == 0;\n  if ((int)uVar6 < 0x20) {\n    bVar12 = SCARRY4(uVar3,0xc);\n    iVar5 = iVar5 + -0x1f;\n    bVar11 = iVar5 < 0;\n    bVar10 = iVar5 == 0;\n    uVar3 = uVar6;\n    if (!bVar10 && bVar11 == bVar12) {\n      uVar2 = uVar4 << (uVar6 & 0xff);\n      uVar4 = uVar4 >> (0xcU - iVar5 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar10 || bVar11 != bVar12) {\n    uVar9 = 0x20 - uVar3;\n  }\n  uVar4 = uVar4 << (uVar3 & 0xff);\n  if (bVar10 || bVar11 != bVar12) {\n    uVar4 = uVar4 | uVar2 >> (uVar9 & 0xff);\n  }\n  if (bVar10 || bVar11 != bVar12) {\n    uVar2 = uVar2 << (uVar3 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar6 <= iVar7) {\n    return CONCAT44(uVar4 + (iVar7 - uVar6) * 0x100000 | uVar8,uVar2);\n  }\n  uVar3 = ~(iVar7 - uVar6);\n  if ((int)uVar3 < 0x1f) {\n    iVar7 = uVar3 - 0x13;\n    if (iVar7 != 0 && iVar7 < 0 == SCARRY4(uVar3 - 0x1f,0xc)) {\n      return CONCAT44(param_2,uVar2 >> (0x20 - (0xcU - iVar7) & 0xff) |\n                              uVar4 << (0xcU - iVar7 & 0xff)) & 0x80000000ffffffff;\n    }\n    uVar3 = uVar3 + 1;\n    return CONCAT44(uVar8 | uVar4 >> (uVar3 & 0xff),\n                    uVar2 >> (uVar3 & 0xff) | uVar4 << (0x20 - uVar3 & 0xff));\n  }\n  return CONCAT44(param_2,uVar4 >> (uVar3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080085e4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_080085e4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "FUN_08006dfe": "clear_pending_interrupt_08006dfe",
                "IRQn": "interrupt"
            },
            "code": "void clear_pending_interrupt_08006dfe(IRQn_Type interrupt)\n{\n  NVIC_ClearPendingIRQ(interrupt);\n  return;\n}",
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": false,
            "current_name": "clear_pending_interrupt_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66"
            },
            "code": "void reset_system_08006d66(void)\n{\n    NVIC_SystemReset();\n    return;\n}",
            "called": [
                "NVIC_SystemReset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": false,
            "current_name": "reset_system_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "FUN_08006e88": "configureGPIO_08006e88",
                "GPIOx": "GPIO",
                "GPIO_Init": "init",
                "uVar1": "alternateFunction",
                "uVar2": "bitMask",
                "uVar3": "pinMask",
                "iVar4": "extiValue",
                "temp": "temp",
                "iocurrent": "iocurrent",
                "ioposition": "ioposition",
                "position": "position"
            },
            "code": "void configureGPIO_08006e88(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *init){\n    uint32_t position, bitMask;\n    for (position = 0; position < 0x10; position++) {\n        bitMask = 1 << position;\n        if (init->Pin & bitMask) {\n            if ((init->Mode == GPIO_MODE_AF_PP) || (init->Mode == GPIO_MODE_AF_OD)) {\n                uint32_t alternateFunction = init->Alternate;\n                uint32_t afRegister = (position >> 3);\n                uint32_t afShift = ((position & 7) << 2);\n                GPIO->AFR[afRegister] &= ~(0xf << afShift);\n                GPIO->AFR[afRegister] |= alternateFunction << afShift;\n            }\n            uint32_t moderShift = ((position & 0x7f) << 1);\n            GPIO->MODER &= ~(3 << moderShift);\n            GPIO->MODER |= (init->Mode & 3) << moderShift;\n            if (((init->Mode == GPIO_MODE_INPUT) || (init->Mode == GPIO_MODE_OUTPUT_PP)) ||\n                (init->Mode == GPIO_MODE_OUTPUT_OD) || (init->Mode == GPIO_MODE_AF_PP) ||\n                (init->Mode == GPIO_MODE_AF_OD)) {\n                uint32_t ospeedrShift = ((position & 0x7f) << 1);\n                GPIO->OSPEEDR &= ~(3 << ospeedrShift);\n                GPIO->OSPEEDR |= init->Speed << ospeedrShift;\n                GPIO->OTYPER &= ~(1 << position);\n                GPIO->OTYPER |= (init->Mode >> 4 & 1) << position;\n            }\n            uint32_t pupdrShift = ((position & 0x7f) << 1);\n            GPIO->PUPDR &= ~(3 << pupdrShift);\n            GPIO->PUPDR |= init->Pull << pupdrShift;\n            if ((init->Mode & GPIO_MODE_IT_RISING_FALLING) != 0) {\n                uint32_t extiMask = ~(0xf << ((position & 3) << 2));\n                uint32_t extiRegister = ((position >> 2) + 2) * 4;\n                uint32_t extiShift = ((position & 3) << 2);\n                *(uint *)(EXTI_BASE + 0x44) |= 0x4000;\n                *(uint *)(EXTI_BASE + extiRegister) &= extiMask;\n                uint32_t extiValue = ((GPIO - GPIOA) >> 10) & 0xf;\n                *(uint *)(EXTI_BASE + extiRegister) |= extiValue << extiShift;\n                *(uint *)(EXTI_BASE) &= ~bitMask;\n                *(uint *)(EXTI_BASE + 4) &= ~bitMask;\n                if ((init->Mode & GPIO_MODE_IT_RISING) != 0) {\n                    *(uint *)(EXTI_BASE) |= bitMask;\n                }\n                if ((init->Mode & GPIO_MODE_IT_FALLING) != 0) {\n                    *(uint *)(EXTI_BASE + 4) |= bitMask;\n                }\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "gpio_init",
                "HAL_RCC_MCOConfig"
            ],
            "imported": false,
            "current_name": "configureGPIO_08006e88"
        },
        "FUN_0800b4f0": {
            "renaming": {
                "FUN_0800b4f0": "call_global_destructors_0800b4f0",
                "iVar1": "num_destructors",
                "ppcVar2": "destructor",
                "PTR___fini_array_end_0800b514": "fini_array_end",
                "PTR___do_global_dtors_aux_fini_array_entry_0800b518": "do_global_dtors_aux_fini_array_entry"
            },
            "code": "void call_global_destructors_0800b4f0(void)\n{\n  int num_destructors = (int)PTR___fini_array_end_0800b514 - (int)PTR___do_global_dtors_aux_fini_array_entry_0800b518 >> 2;\n  if (num_destructors != 0) {\n    code **destructor = (code **)(PTR___do_global_dtors_aux_fini_array_entry_0800b518 + ((int)PTR___fini_array_end_0800b514 - (int)PTR___do_global_dtors_aux_fini_array_entry_0800b518) - 4);\n    do {\n      num_destructors--;\n      (**destructor)();\n      destructor--;\n    } while (num_destructors != 0);\n  }\n  _fini();\n  return;\n}",
            "called": [
                "frame_dummy",
                "_fini",
                "__do_global_dtors_aux"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4f0",
            "calling": [],
            "imported": false,
            "current_name": "call_global_destructors_0800b4f0"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "coolant_run"
            ],
            "imported": false,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "FUN_080036f0": "print_bits_080036f0",
                "n": "num",
                "bits": "num_bits",
                "data": "bit",
                "i": "i",
                "mask": "mask"
            },
            "code": "void print_bits_080036f0(uint num, int num_bits) {\n  uint8_t bit;\n  int i;\n  uint32_t mask;\n  mask = 1 << (num_bits - 1 & 0xff);\n  for (i = 0; i < num_bits; i++) {\n    if ((mask & num) == 0) {\n      bit = '0';\n    }\n    else {\n      bit = '1';\n    }\n    serial_write(bit);\n    mask >>= 1;\n  }\n  return;\n}",
            "called": [
                "serial_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "print_uint16_base2",
                "print_uint8_base2"
            ],
            "imported": false,
            "current_name": "print_bits_080036f0"
        },
        "FUN_08005c74": {
            "renaming": {
                "FUN_08005c74": "set_flags_08005c74",
                "DAT_08005ce4": "flag_ptr",
                "DAT_08005ce8": "mask"
            },
            "code": "void set_flags_08005c74(void)\n{\n  unsigned int *DAT_08005ce4 = DAT_08005ce4;\n  *DAT_08005ce4 |= 0x81;\n  DAT_08005ce4[2] = 0;\n  *DAT_08005ce4 &= 0xfaf6ffff;\n  DAT_08005ce4[1] = 0;\n  DAT_08005ce4[1] |= DAT_08005ce8;\n  DAT_08005ce4[0x21] = 0;\n  DAT_08005ce4[0x21] |= 0x20003000;\n  *DAT_08005ce4 &= 0xfffbffff;\n  DAT_08005ce4[3] = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c74",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_08005c74"
        },
        "FUN_08002edc": {
            "renaming": {
                "FUN_08002edc": "perform_planner_passes_08002edc",
                "planner_reverse_pass": "reverse_pass_planner",
                "planner_forward_pass": "forward_pass_planner",
                "FUN_08002edc_trapezoids": "calculate_trapezoids"
            },
            "code": "void perform_planner_passes_08002edc(void)\n{\n  reverse_pass_planner();\n  forward_pass_planner();\n  calculate_trapezoids();\n  return;\n}",
            "called": [
                "planner_forward_pass",
                "planner_recalculate_trapezoids",
                "planner_reverse_pass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "perform_planner_passes_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "FUN_0800375c": "print_base2_of_uint_0800375c",
                "n": "number",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void print_base2_of_uint_0800375c(uint16_t number, uint16_t base) {\n    print_base2((uint)number, base);\n}",
            "called": [
                "print_base2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "report_grbl_settings"
            ],
            "imported": false,
            "current_name": "print_base2_of_uint_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "FUN_08009990": "calculate_arc_tangent_08009990",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "y1",
                "param_4": "y2",
                "param_5": "angle",
                "iVar1": "difference",
                "unaff_r4": "unused",
                "uVar2": "shifted_bits",
                "uVar3": "abs_y2",
                "uVar4": "abs_y1",
                "uVar5": "result",
                "DAT_08009af0": "0x4034000000000000",
                "DAT_08009af4": "0x0",
                "DAT_08009b18": "0x7fffffff"
            },
            "code": "void calculate_arc_tangent_08009990(uint32_t x1, uint32_t x2, uint32_t y1, uint32_t y2, double angle)\n{\n  int difference;\n  uint32_t abs_y2 = y2 & DAT_08009b18;\n  uint32_t abs_y1 = y1 & DAT_08009b18;\n  if ((DAT_08009b18 < (abs_y2 | (-y1 | y1) >> 0x1f)) || (DAT_08009b18 < (abs_y1 | (-x1 | x1) >> 0x1f))) {\n    __aeabi_dadd(y1, y2, x1, x2);\n  }\n  else {\n    if ((y2 + 0xc0100000 | y1) == 0) {\n      atan(angle);\n      return;\n    }\n    uint32_t uVar2 = (int)y2 >> 0x1e & 2U | x2 >> 0x1f;\n    if (((((abs_y1 | y1) != 0) && ((abs_y2 | y2) != 0)) && (abs_y2 != DAT_08009b18)) && (abs_y1 != DAT_08009b18)) {\n      difference = (int)(abs_y1 - abs_y2) >> 0x14;\n      if (((int)(abs_y1 - abs_y2) < 0x3d00000) && ((-1 < (int)y2 || (difference + 0x3c < 0 == SCARRY4(difference, 0x3c))))){\n        __divdf3(x1, x2, y1, y2);\n        double abs_y2_converted = (double)CONCAT44(0, y2);\n        fabs(abs_y2_converted);\n        atan(abs_y2_converted);\n      }\n      if (uVar2 != 1) {\n        if (uVar2 == 2) {\n          double result = __subdf3();\n          __subdf3(DAT_08009af0, DAT_08009af4, (int)result, (int)((unsigned long long)result >> 0x20));\n        }\n        else if (uVar2 != 0) {\n          double result = __subdf3();\n          __subdf3((int)result, (int)((unsigned long long)result >> 0x20), DAT_08009af0, DAT_08009af4);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "__aeabi_dadd",
                "fabs",
                "atan",
                "__subdf3",
                "__divdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_arc_tangent_08009990"
        },
        "FUN_08005b58": {
            "renaming": {
                "FUN_08005b58": "clear_bit_in_uint_array_08005b58",
                "DAT_08005b70": "data_array",
                "PTR_": ""
            },
            "code": "void clear_bit_in_uint_array_08005b58(void)\n{\n  uint* data_ptr = (uint*)(DAT_08005b70 + 4);\n  uint data = *data_ptr;\n  uint mask = 0xfffffffd;\n  data &= mask;\n  *data_ptr = data;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b58",
            "calling": [],
            "imported": false,
            "current_name": "clear_bit_in_uint_array_08005b58"
        },
        "FUN_08007e58": {
            "renaming": {
                "FUN_08007e58": "is_usart_data_ready_08007e58",
                "usart": "usart_instance",
                "DAT_08007e80": "DAT_GPIOA_IDR",
                "uint": "bool",
                "PTR_USART1": "PTR_USART1",
                "MASK_USART1_RX_PIN": "MASK_USART1_RX_PIN"
            },
            "code": "bool is_usart_data_ready_08007e58(void)\n{\n  USART_TypeDef *usart_instance = PTR_USART1;\n  return (bool)((*DAT_08007e80 & MASK_USART1_RX_PIN) != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "serial_read"
            ],
            "imported": false,
            "current_name": "is_usart_data_ready_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "HAL_DeInit_080059f8",
                "DAT_08005a4c": "data_ptr"
            },
            "code": "HAL_StatusTypeDef HAL_DeInit_080059f8(void)\n{\n    uint32_t* DAT_08005a4c = (uint32_t*)(DAT_08005a4c);\n    DAT_08005a4c[5] = 0xFFFFFFFF;\n    DAT_08005a4c[5] = 0;\n    DAT_08005a4c[6] = 0xFFFFFFFF;\n    DAT_08005a4c[6] = 0;\n    DAT_08005a4c[4] = 0xFFFFFFFF;\n    DAT_08005a4c[4] = 0;\n    DAT_08005a4c[3] = 0xFFFFFFFF;\n    DAT_08005a4c[3] = 0;\n    DAT_08005a4c[2] = 0xFFFFFFFF;\n    DAT_08005a4c[2] = 0;\n    HAL_MspDeInit();\n    return HAL_OK;\n}",
            "called": [
                "HAL_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": false,
            "current_name": "HAL_DeInit_080059f8"
        },
        "FUN_08009194": {
            "renaming": {
                "FUN_08009194": "calculate_result_08009194",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "is_greater_than_negative",
                "uVar2": "shifted_input1",
                "uVar3": "shifted_input2",
                "uVar4": "or_result",
                "bVar5": "is_zero"
            },
            "code": "uint calculate_result_08009194(uint input1, uint input2)\n{\n    bool is_negative1 = ((int)input1 >> 0x18 == -1);\n    bool is_negative2 = ((int)input2 >> 0x18 == -1);\n    uint shifted_input1 = input1 * 2;\n    uint shifted_input2 = input2 * 2;\n    if ((is_negative1 || is_negative2) && (((is_negative1 && ((input1 & 0x7fffff) != 0)) || (is_negative2 && ((input2 & 0x7fffff) != 0))))\n    {\n        return 1;\n    }\n    uint or_result = shifted_input1 | input2 & 0x7fffffff;\n    bool is_zero = (or_result == 0);\n    if (!is_zero)\n    {\n        uint xor_result = input1 ^ input2;\n        is_zero = (xor_result == 0);\n    }\n    bool is_greater_than_negative = -1 < (int)(input1 ^ input2);\n    if (is_greater_than_negative)\n    {\n        input1 = shifted_input1 + input2 * -2;\n        is_zero = (input1 == 0);\n    }\n    if (is_greater_than_negative && shifted_input2 <= shifted_input1 && !is_zero)\n    {\n        input1 = (int)input2 >> 0x1f;\n    }\n    if (!is_greater_than_negative || shifted_input2 > shifted_input1)\n    {\n        input1 = ~((int)input2 >> 0x1f);\n    }\n    if (!is_zero)\n    {\n        input1 = input1 | 1;\n    }\n    return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009194",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08009194"
        },
        "FUN_08003f34": {
            "renaming": {
                "FUN_08003f34": "execute_protocol_08003f34",
                "PTR_iscomment_08004028": "is_comment",
                "PTR_char_counter_08004020": "char_counter",
                "PTR_line_08004024": "line_buffer",
                "PTR_sys_0800401c": "system_status"
            },
            "code": "void execute_protocol_08003f34(void)\\n{\\n  bool PTR_iscomment_08004028 = false;\\n  uint8_t status_code;\\n  uint8_t PTR_char_counter_08004020 = 0;\\n  byte character;\\n  while(true) {\\n    while(true) {\\n      character = serial_read();\\n      if (character == 0xff) {\\n        return;\\n      }\\n      if ((character == 10) || (character == 0xd)) break;\\n      if (*PTR_iscomment_08004028 == false) {\\n        if ((0x20 < character) && (character != 0x2f)) {\\n          if (character == 0x28) {\\n            *PTR_iscomment_08004028 = true;\\n          }\\n          else if (PTR_char_counter_08004020 == -1) {\\n            report_status_message(\"\\r\");\\n            protocol_reset_PTR_line_08004024();\\n          }\\n          else if ((character < 0x61) || (0x7a < character)) {\\n            byte current_char = PTR_char_counter_08004020;\\n            PTR_char_counter_08004020++;\\n            PTR_line_08004024[current_char] = character;\\n          }\\n          else {\\n            byte current_char = PTR_char_counter_08004020;\\n            PTR_char_counter_08004020++;\\n            PTR_line_08004024[current_char] = character - 0x20;\\n          }\\n        }\\n      }\\n      else if (character == 0x29) {\\n        *PTR_iscomment_08004028 = false;\\n      }\\n    }\\n    protocol_execute_runtime();\\n    if (*PTR_sys_0800401c != \"\\0\") break;\\n    if (PTR_char_counter_08004020 == \"\\0\") {\\n      report_status_message(\"\\0\");\\n    }\\n    else {\\n      PTR_line_08004024[PTR_char_counter_08004020] = 0;\\n      status_code = protocol_execute_line(PTR_line_08004024);\\n      report_status_message(status_code);\\n    }\\n    protocol_reset_PTR_line_08004024();\\n  }\\n}",
            "called": [
                "protocol_reset_line_buffer",
                "protocol_execute_line",
                "report_status_message",
                "serial_read",
                "protocol_execute_runtime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "execute_protocol_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "FUN_080095b8": "calculate_significand_080095b8",
                "__x": "input",
                "in_r0": "fraction_bits_lower",
                "in_r1": "bits_as_uint",
                "uVar1": "carry_bit",
                "uVar2": "exponent_bits",
                "uVar3": "fraction_bits",
                "uVar5": "exponent_difference",
                "lVar4": "sign",
                "CARRY4": "has_carry"
            },
            "code": "long calculate_significand_080095b8(double input)\n{\n    uint exponent_bits;\n    uint fraction_bits;\n    uint carry_bit;\n    uint shifted_fraction_bits;\n    long sign;\n    uint significand;\n    exponent_bits = (in_r1 << 1) >> 0x15;\n    fraction_bits = in_r1 & 0xfffff | 0x100000;\n    sign = (int)in_r1 < 0 ? -1 : 1;\n    if ((int)(exponent_bits - 0x3ff) < 0)\n    {\n        if ((int)exponent_bits < 0)\n        {\n            if (exponent_bits != 0xffffffff)\n            {\n                sign = 0;\n            }\n            return sign;\n        }\n        shifted_fraction_bits = fraction_bits + (0x80000 >> (exponent_bits & 0xff)) >> (0x14 - exponent_bits & 0xff);\n    }\n    else\n    {\n        if (exponent_bits > 0x1e)\n        {\n            sign = __aeabi_d2iz();\n            return sign;\n        }\n        if ((int)exponent_bits < 0x34)\n        {\n            carry_bit = 0x80000000 >> (exponent_bits - 0x413 & 0xff);\n            if (CARRY4(carry_bit, in_r0) != false)\n            {\n                fraction_bits = fraction_bits + 1;\n            }\n            shifted_fraction_bits = (fraction_bits << (exponent_bits - 0x413 & 0xff)) | (carry_bit + in_r0 >> (0x34 - exponent_bits & 0xff));\n        }\n        else\n        {\n            shifted_fraction_bits = (fraction_bits << (exponent_bits - 0x413 & 0xff)) | (in_r0 << (exponent_bits - 0x433 & 0xff));\n        }\n    }\n    significand = shifted_fraction_bits * sign;\n    return significand;\n}",
            "called": [
                "__aeabi_d2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "calculate_significand_080095b8"
        },
        "FUN_08007e4c": {
            "renaming": {
                "FUN_08007e4c": "do_nothing_08007e4c"
            },
            "code": "\nvoid do_nothing_08007e4c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e4c",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007e4c"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "setIRQPriority_08006cf6",
                "IRQn": "IRQn",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "priorityGrouping",
                "prioritygroup": "N/A",
                "NVIC_GetPriorityGrouping": "NVIC_GetPriorityGrouping",
                "NVIC_EncodePriority": "NVIC_EncodePriority",
                "NVIC_SetPriority": "NVIC_SetPriority"
            },
            "code": "void setIRQPriority_08006cf6(IRQn_Type IRQn, uint32_t preemptPriority, uint32_t subPriority)\n{\n  uint32_t priorityGrouping = NVIC_GetPriorityGrouping();\n  uint32_t priority = NVIC_EncodePriority(priorityGrouping, preemptPriority, subPriority);\n  NVIC_SetPriority(IRQn, priority);\n  return;\n}",
            "called": [
                "NVIC_GetPriorityGrouping",
                "NVIC_EncodePriority",
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "enable_tim_interrupt"
            ],
            "imported": false,
            "current_name": "setIRQPriority_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "FUN_08002ef0": "copy_block_buffer_head_to_tail_and_update_next_buffer_head_08002ef0",
                "PTR_block_buffer_tail_08002f1c": "block_buffer_tail",
                "PTR_block_buffer_head_08002f18": "block_buffer_head",
                "PTR_next_buffer_head_08002f20": "next_buffer_head",
                "uVar1": "next_block"
            },
            "code": "void copy_block_buffer_head_to_tail_and_update_next_buffer_head_08002ef0(void)\n{\n  uint8_t next_block;\n  *PTR_block_buffer_tail_08002f1c = *PTR_block_buffer_head_08002f18;\n  next_block = next_block_index(*PTR_block_buffer_head_08002f18);\n  *PTR_next_buffer_head_08002f20 = next_block;\n  return;\n}",
            "called": [
                "next_block_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "plan_init"
            ],
            "imported": false,
            "current_name": "copy_block_buffer_head_to_tail_and_update_next_buffer_head_08002ef0"
        },
        "FUN_08006e7c": {
            "renaming": {
                "FUN_08006e7c": "do_nothing_08006e7c"
            },
            "code": "\nvoid do_nothing_08006e7c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e7c",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08006e7c"
        },
        "FUN_08001d4c": {
            "renaming": {
                "FUN_08001d4c": "homing_sequence_08001d4c",
                "homing_rate": "homing_rate_1",
                "homing_rate_00": "homing_rate_2",
                "extraout_s0": "homing_rate_extra",
                "homing_rate_01": "homing_rate_3",
                "extraout_s0_00": "unused_variable",
                "homing_rate_02": "previous_homing_rate",
                "n_cycle": "cycle_count",
                "PTR_settings_08001dd8": "settings_pointer"
            },
            "code": "void homing_sequence_08001d4c(void)\\n{\\n  float homing_rate_1;\\n  float homing_rate_2;\\n  float homing_rate_3;\\n  float current_homing_rate;\\n  float homing_rate_extra;\\n  float previous_homing_rate;\\n  int8_t cycle_count;\\n\\n  st_wake_up();\\n  homing_cycle(\"\\x04\", \"\\x01\", false, homing_rate_1);\\n  homing_cycle(\"\\x03\", \"\\x01\", false, homing_rate_2);\\n  delay_ms(*(uint16_t *)(PTR_settings_08001dd8 + 0x34));\\n  cycle_count = 2;\\n  previous_homing_rate = homing_rate_extra;\\n  while (cycle_count > 0) {\\n    current_homing_rate = previous_homing_rate;\\n    homing_cycle(\"\\a\", \"\\0\", true, current_homing_rate);\\n    delay_ms(*(uint16_t *)(PTR_settings_08001dd8 + 0x34));\\n    previous_homing_rate = homing_rate_3;\\n    cycle_count--;\\n    if (cycle_count > 0) {\\n      homing_cycle(\"\\a\", \"\\x01\", false, homing_rate_3);\\n      delay_ms(*(uint16_t *)(PTR_settings_08001dd8 + 0x34));\\n      previous_homing_rate = homing_rate_extra;\\n    }\\n  }\\n  st_go_idle();\\n  return;\\n}",
            "called": [
                "st_wake_up",
                "homing_cycle",
                "st_go_idle",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "mc_go_home"
            ],
            "imported": false,
            "current_name": "homing_sequence_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "FUN_08000268": "calculateElapsedTimeInMilliseconds_08000268",
                "uVar1": "currentTick",
                "DAT_0800029c": "timeConstant",
                "DAT_08000298": "dataPointer",
                "PTR_DAT_08000298": "pointerToDataPointer",
                "*(uint *)(DAT_08000298 + 8)": "dataPointerValue"
            },
            "code": "uint64_t calculateElapsedTimeInMilliseconds_08000268(void)\n{\n  uint32_t currentTick = HAL_GetTick();\n  uint32_t tickDifference = currentTick + 1 - (uint32_t)(((uint64_t)DAT_0800029c) * ((uint32_t)(*(uint32_t *)(DAT_08000298 + 8)) >> 3) >> 33);\n  return (uint64_t)tickDifference * 1000;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "_delay_us"
            ],
            "imported": false,
            "current_name": "calculateElapsedTimeInMilliseconds_08000268"
        },
        "FUN_0800918c": {
            "renaming": {
                "FUN_0800918c": "calculate_result_0800918c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "multiplied_input1",
                "uVar3": "multiplied_input2",
                "uVar4": "result",
                "bVar1": "is_negative",
                "bVar5": "is_result_zero"
            },
            "code": "uint calculate_result_0800918c(uint input1, uint input2) {\n  bool is_negative;\n  uint multiplied_input1 = input1 * 2;\n  uint multiplied_input2 = input2 * 2;\n  if (((int)multiplied_input1 >> 0x18 == -1 || (int)multiplied_input2 >> 0x18 == -1) && ((((int)multiplied_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) || (((int)multiplied_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  uint result = multiplied_input1 | input2 & 0x7fffffff;\n  bool is_result_zero = result == 0;\n  if (!is_result_zero) {\n    result = input1 ^ input2;\n    is_result_zero = result == 0;\n  }\n  is_negative = -1 < (int)result;\n  if (is_negative) {\n    input1 = multiplied_input1 + input2 * -2;\n    is_result_zero = input1 == 0;\n  }\n  if ((is_negative && multiplied_input2 <= multiplied_input1) && !is_result_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || multiplied_input2 > multiplied_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800918c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_0800918c"
        },
        "FUN_08003778": {
            "renaming": {
                "FUN_08003778": "print_decimal_08003778",
                "n": "num",
                "uVar1": "index",
                "local_1c": "remainder",
                "uStack_15": "digit",
                "buf": "buffer",
                "i": "index"
            },
            "code": "void print_decimal_08003778(ulong num)\n{\n  uint index = 0;\n  ulong remainder = num;\n  uint8_t digit;\n  uchar buffer[10];\n\n  if (num == 0) {\n    serial_write('0');\n  }\n  else {\n    while (remainder != 0) {\n      digit = (uint) index;\n      index++;\n      buffer[digit] = (char) remainder + (char)((ulonglong)DAT_080037f8 * (ulonglong)remainder >> 0x23) * -10 + '0';\n      remainder = (ulong)((ulonglong)DAT_080037f8 * (ulonglong)remainder >> 0x23);\n    }\n    while (index != 0) {\n      index--;\n      serial_write(buffer[index]);\n    }\n  }\n}",
            "called": [
                "serial_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "printInteger"
            ],
            "imported": false,
            "current_name": "print_decimal_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_impure_ptr_value_0800b3dc",
                "PTR__impure_ptr_0800b3e4": "impure_ptr"
            },
            "code": "int get_impure_ptr_value_0800b3dc(void)\n{\n    int* PTR__impure_ptr_0800b3e4 = (int*)PTR__PTR__impure_ptr_0800b3e4_0800b3e4;\n    return *PTR__impure_ptr_0800b3e4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "sqrt",
                "hypot"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "FUN_080046d0": "printData_080046d0",
                "bVar1": "data5",
                "cVar2": "data6",
                "bVar2": "data7",
                "bVar3": "data8",
                "n": "data1",
                "n_00": "data2",
                "uVar3": "data3",
                "PTR_gc_08004890": "data",
                "PTR_DAT_080048a8": "dataString1",
                "PTR_DAT_080048ac": "dataString2",
                "PTR_DAT_080048b0": "dataString3",
                "PTR_DAT_080048b4": "dataString4",
                "PTR_DAT_080048b8": "dataString5",
                "PTR_DAT_080048c0": "dataString6",
                "PTR_DAT_080048c4": "dataString7",
                "PTR_DAT_080048c8": "dataString8",
                "PTR_DAT_080048cc": "dataString9",
                "PTR_DAT_080048d0": "dataString10",
                "PTR_DAT_080048d4": "dataString11",
                "PTR_DAT_080048d8": "dataString12",
                "PTR_DAT_080048dc": "dataString13",
                "PTR_DAT_080048e0": "dataString14",
                "PTR_DAT_080048e4": "dataString15",
                "PTR_DAT_080048e8": "dataString16",
                "PTR_DAT_080048ec": "dataString17",
                "PTR_DAT_080048f0": "dataString18",
                "PTR_DAT_080048f4": "dataString19",
                "PTR_DAT_080048f8": "dataString20",
                "PTR_DAT_080048fc": "dataString21"
            },
            "code": "void printData_080046d0() {\\n    byte PTR_gc_08004890Length = (byte)PTR_gc_08004890[1];\\n    if (PTR_gc_08004890Length > 4) {\\n        printPgmString(PTR_DAT_080048a8);\\n        printInteger((byte)PTR_gc_08004890[0x1c] + 0x36);\\n        bool isDataEnabled = (PTR_gc_08004890[0x19] == \"\\0\");\\n        bool isDataValid = (PTR_gc_08004890[0x1a] == \"\\x01\");\\n        if (isDataEnabled) {\\n            if (isDataValid) {\\n                printPgmString(PTR_DAT_080048ac);\\n            }\\n            else {\\n                printPgmString(PTR_DAT_080048b0);\\n            }\\n        }\\n        else {\\n            printPgmString(PTR_DAT_080048b4);\\n        }\\n        bool isData2Enabled = (PTR_gc_08004890[3] == \"\\0\");\\n        if (isData2Enabled) {\\n            printPgmString(PTR_DAT_080048bc);\\n        }\\n        else {\\n            printPgmString(PTR_DAT_080048b8);\\n        }\\n        bool isData3Enabled = (PTR_gc_08004890[4] == \"\\0\");\\n        if (isData3Enabled) {\\n            printPgmString(PTR_DAT_080048c4);\\n        }\\n        else {\\n            printPgmString(PTR_DAT_080048c0);\\n        }\\n        bool isData4Enabled = (PTR_gc_08004890[2] == \"\\0\");\\n        if (isData4Enabled) {\\n            printPgmString(PTR_DAT_080048cc);\\n        }\\n        else {\\n            printPgmString(PTR_DAT_080048c8);\\n        }\\n        byte bVar1 = PTR_gc_08004890[5];\\n        if (bVar1 == 2) {\\n            printPgmString(PTR_DAT_080048d8);\\n        }\\n        else if (bVar1 < 3) {\\n            if (bVar1 == 0) {\\n                printPgmString(PTR_DAT_080048d0);\\n            }\\n            else if (bVar1 == 1) {\\n                printPgmString(PTR_DAT_080048d4);\\n            }\\n        }\\n        char cVar2 = PTR_gc_08004890[6];\\n        if (cVar2 == \"\\x01\") {\\n            printPgmString(PTR_DAT_080048dc);\\n        }\\n        else if (cVar2 < \"\\x02\") {\\n            if (cVar2 == -1) {\\n                printPgmString(PTR_DAT_080048e0);\\n            }\\n            else if (cVar2 == \"\\0\") {\\n                printPgmString(PTR_DAT_080048e4);\\n            }\\n        }\\n        byte bVar2 = PTR_gc_08004890[7];\\n        if (bVar2 == 2) {\\n            printPgmString(PTR_DAT_080048f0);\\n        }\\n        else if (bVar2 < 3) {\\n            if (bVar2 == 0) {\\n                printPgmString(PTR_DAT_080048e8);\\n            }\\n            else if (bVar2 == 1) {\\n                printPgmString(PTR_DAT_080048ec);\\n            }\\n        }\\n        printPgmString(PTR_DAT_080048f4);\\n        byte bVar3 = (byte)PTR_gc_08004890[0x18];\\n        printInteger((uint)bVar3);\\n        printPgmString(PTR_DAT_080048f8);\\n        if (isData2Enabled) {\\n            printFloat(*(float*)(PTR_gc_08004890 + 8));\\n        }\\n        else {\\n            float n = *(float*)(PTR_gc_08004890 + 8);\\n            float n_00 = (n * 1.8) + 32;\\n            printFloat(n_00);\\n        }\\n        printPgmString(PTR_DAT_080048fc);\\n    }\\n    else {\\n        (*(code *)(&switchD_080046de::switchPTR_gc_08004890D_080046e4)[PTR_gc_08004890Length])();\\n    }\\n}",
            "called": [
                "printInteger",
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3",
                "printPgmString",
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "protocol_execute_line"
            ],
            "imported": false,
            "current_name": "printData_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "FUN_08006d72": "configureSysTick_08006d72",
                "TicksNumb": "numTicks",
                "uVar1": "status"
            },
            "code": "uint32_t configureSysTick_08006d72(uint32_t numTicks)\n{\n  uint32_t status;\n  status = SysTick_Config(numTicks);\n  return status;\n}",
            "called": [
                "SysTick_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configureSysTick_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "FUN_0800756c": "set_flag_0800756c",
                "DAT_080075bc": "flag_ptr",
                "DAT_080075c0": "flag_value",
                "DAT_080075c4": "undefined_ptr"
            },
            "code": "void set_flag_0800756c(void)\n{\n  int* DAT_080075bc = DAT_080075bc;\n  *DAT_080075bc |= 1;\n  DAT_080075bc[2] = 0;\n  *DAT_080075bc &= 0xfef6ffff;\n  DAT_080075bc[1] = DAT_080075c0;\n  *DAT_080075bc &= 0xfffbffff;\n  DAT_080075bc[3] = 0;\n  *(undefined4 *)(DAT_080075c4 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flag_0800756c"
        },
        "FUN_0800691c": {
            "renaming": {
                "FUN_0800691c": "check_for_ccs_interrupt_0800691c",
                "DAT_0800693c": "PTR_ccs_reg_base",
                "DAT_08006940": "PTR_ccs_interrupt_flag"
            },
            "code": "void check_for_ccs_interrupt_0800691c(void)\n{\n  uint32_t *ccs_reg = (uint32_t *)(DAT_0800693c + 0xc);\n  if ((*ccs_reg & 0x80) == 0x80) {\n    HAL_RCC_CCSCallback();\n    *DAT_08006940 = 0x80;\n  }\n  return;\n}",
            "called": [
                "HAL_RCC_CCSCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800691c",
            "calling": [],
            "imported": false,
            "current_name": "check_for_ccs_interrupt_0800691c"
        },
        "FUN_080001f8": {
            "renaming": {
                "FUN_080001f8": "stop_coolant_flow_080001f8",
                "*PTR_current_coolant_mode_0800020c": "*current_coolant_mode",
                "coolant_stop": "coolant_stop"
            },
            "code": "void stop_coolant_flow_080001f8(void)\n{\n  *PTR_current_coolant_mode_0800020c = 0;\n  coolant_stop();\n  return;\n}",
            "called": [
                "coolant_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "stop_coolant_flow_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "FUN_08002f74": "get_next_block_08002f74",
                "pbVar1": "next_block",
                "*PTR_block_buffer_head_08002fa0": "head",
                "*PTR_block_buffer_tail_08002fa4": "tail",
                "block_t": "block",
                "PTR_block_buffer_08002fa8": "buffer"
            },
            "code": "block_t* get_next_block_08002f74(void)\n{\n    block_t* next_block = NULL;\n    if (*PTR_block_PTR_block_buffer_08002fa8_*PTR_block_buffer_head_08002fa0_08002fa0 == *PTR_block_PTR_block_buffer_08002fa8_*PTR_block_buffer_tail_08002fa4_08002fa4)\n    {\n        next_block = NULL;\n    }\n    else\n    {\n        uint8_t *PTR_block_buffer_tail_08002fa4 = *PTR_block_PTR_block_buffer_08002fa8_*PTR_block_buffer_tail_08002fa4_08002fa4;\n        next_block = (block_t*)(PTR_block_PTR_block_buffer_08002fa8_08002fa8 + *PTR_block_buffer_tail_08002fa4 * 0x40);\n    }\n    return next_block;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "plan_synchronize",
                "step_period_isr"
            ],
            "imported": false,
            "current_name": "get_next_block_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "FUN_0800b3e8": "initialize_global_dtors_0800b3e8",
                "param_1": "ctx",
                "iVar1": "i",
                "ppcVar2": "function_pointer",
                "iVar3": "num_functions",
                "PTR___preinit_array_end_0800b420": "start_of_preinit_array",
                "PTR___preinit_array_end_0800b424": "end_of_preinit_array",
                "PTR___preinit_array_end_0800b42c": "start_of_global_dtors_array",
                "PTR___do_global_dtors_aux_fini_array_entry_0800b428": "end_of_global_dtors_array"
            },
            "code": "void initialize_global_dtors_0800b3e8(EVP_PKEY_CTX *ctx)\n{\n  int num_functions = (int)PTR___preinit_array_end_0800b420 - (int)PTR___preinit_array_end_0800b424 >> 2;\n  if (num_functions != 0) {\n    int i = 0;\n    code **function_pointer = (code **)PTR___preinit_array_end_0800b424;\n    do {\n      i++;\n      ctx = (EVP_PKEY_CTX *)(**function_pointer)();\n      function_pointer++;\n    } while (num_functions != i);\n  }\n  function_pointer = (code **)PTR___preinit_array_end_0800b42c;\n  int num_global_dtors = (int)PTR___do_global_dtors_aux_fini_array_entry_0800b428 - (int)PTR___preinit_array_end_0800b42c;\n  _init(ctx);\n  num_global_dtors = num_global_dtors >> 2;\n  if (num_global_dtors != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_pointer)();\n      function_pointer++;\n    } while (num_global_dtors != i);\n  }\n  return;\n}",
            "called": [
                "_init",
                "register_fini",
                "frame_dummy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_global_dtors_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "FUN_080096e8": "calculate_cosine_080096e8",
                "__x": "x",
                "in_r0": "register_0",
                "in_r1": "register_1",
                "dVar2": "result",
                "local_28": "local_variable_1",
                "uStack_24": "local_variable_2",
                "local_20": "local_variable_3",
                "uStack_1c": "local_variable_4",
                "DAT_08009790": "constant_threshold_1",
                "DAT_08009794": "constant_threshold_2",
                "__subdf3": "subtract_double_float",
                "__ieee754_rem_pio2": "compute_remainder",
                "__kernel_cos": "compute_kernel_cosine",
                "__kernel_FUN_080096e8": "compute_kernel_function"
            },
            "code": "double calculate_cosine_080096e8(double x) {\n  uint abs_x = (uint)fabs(x);\n  double result;\n  if (DAT_08009790 < (int)(abs_x & 0x7fffffff)) {\n    if (DAT_08009794 < (int)(abs_x & 0x7fffffff)) {\n      result = (double)__subdf3();\n    }\n    else {\n      uint remainder = __ieee754_rem_pio2(x, abs_x, &local_28);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = (double)__kernel_cos(local_28, uStack_24, local_20, uStack_1c);\n      }\n      else if (remainder == 2 || remainder == 0) {\n        result = (double)__kernel_calculate_cosine_080096e8(local_28, uStack_24, local_20, uStack_1c, 1);\n      }\n      else {\n        result = (double)__kernel_cos(local_28, uStack_24, local_20, uStack_1c);\n      }\n    }\n    return result;\n  }\n  result = (double)__kernel_calculate_cosine_080096e8(0, abs_x, 0, 0, 0);\n  return result;\n}",
            "called": [
                "__kernel_cos",
                "__ieee754_rem_pio2",
                "__subdf3",
                "__kernel_sin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "mc_arc"
            ],
            "imported": false,
            "current_name": "calculate_cosine_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "FUN_08006a18": "checkIfInterruptEnabled_08006a18",
                "IRQn": "interruptNumber",
                "DAT_08006a54": "interruptTable",
                "uint32_t": "unsigned long",
                "uint": "unsigned",
                "interruptBit": "interruptStatus"
            },
            "code": "uint32_t checkIfInterruptEnabled_08006a18(IRQn_Type IRQn) {\n    uint32_t interruptBit = (*(uint *)(DAT_08006a54 + (((uint)(int)IRQn >> 5) + 0x40) * 4)) & (1 << (IRQn & 0x1fU));\n    return (interruptBit != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "imported": false,
            "current_name": "checkIfInterruptEnabled_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_distance_08002c18",
                "block_t": "Block",
                "entry_factor": "entry_rate",
                "exit_factor": "exit_rate",
                "uVar1": "initial_rate",
                "uVar2": "final_rate",
                "uVar5": "steps",
                "in_r1": "entry_rate_multiplier",
                "extraout_r1": "ceil_result",
                "extraout_r1_00": "ceil_result_2",
                "extraout_r1_01": "ceil_result_3",
                "extraout_r1_02": "floor_result",
                "extraout_r1_03": "ceil_result_4",
                "in_r2": "exit_rate_multiplier",
                "acceleration": "acceleration_distance",
                "acceleration_00": "acceleration_distance_2",
                "acceleration_01": "acceleration_distance_3",
                "distance": "intersection_distance",
                "uVar6": "float_conversion"
            },
            "code": "void calculate_acceleration_distance_08002c18(block_t *block, float entry_rate, float exit_rate)\n{\n    uint32_t initial_rate;\n    uint32_t final_rate;\n    int32_t decelerate_steps;\n    int32_t acceleration_per_minute;\n    int32_t plateau_steps;\n    int32_t accelerate_steps;\n    float acceleration;\n    float distance;\n    float acceleration_00;\n    float acceleration_01;\n    float rate_delta = block->final_rate - block->initial_rate;\n\n    initial_rate = (uint32_t)roundf(entry_rate * block->nominal_rate);\n    block->initial_rate = initial_rate;\n    final_rate = (uint32_t)roundf(block->nominal_rate * exit_rate);\n    block->final_rate = final_rate;\n\n    acceleration_per_minute = (int32_t)roundf(rate_delta * 0x32);\n    acceleration = estimate_acceleration_distance(acceleration_per_minute, block->nominal_rate);\n\n    accelerate_steps = (int32_t)roundf(initial_rate / block->nominal_rate);\n    plateau_steps = block->step_event_count - accelerate_steps - (int32_t)roundf(final_rate / block->nominal_rate);\n\n    if (plateau_steps < 0) {\n        acceleration_01 = estimate_acceleration_distance(-acceleration_per_minute, block->nominal_rate);\n        distance = intersection_distance(block->step_event_count, acceleration_01);\n        accelerate_steps = (int32_t)roundf(sqrtf((2 * distance) / acceleration));\n        plateau_steps = 0;\n    }\n\n    block->accelerate_until = accelerate_steps;\n    block->decelerate_after = accelerate_steps + plateau_steps;\n}\n",
            "called": [
                "intersection_distance",
                "floor",
                "__floatunsisf",
                "ceil",
                "__aeabi_fmul",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__muldf3",
                "__aeabi_d2iz",
                "__floatsisf",
                "__aeabi_i2d",
                "estimate_acceleration_distance"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "imported": false,
            "current_name": "calculate_acceleration_distance_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "is_interrupt_enabled_08006ac0",
                "IRQn": "irq_num",
                "DAT_08006afc": "irq_data_ptr"
            },
            "code": "bool is_interrupt_enabled_08006ac0(IRQn_Type irq_num) {\n    uint32_t* irq_ptr = (uint32_t*)(DAT_08006afc + (((uint32_t)irq_num >> 5) + 0x80) * 4);\n    uint32_t irq_mask = 1u << (irq_num & 0x1f);\n    return ((*irq_ptr & irq_mask) != 0);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "imported": false,
            "current_name": "is_interrupt_enabled_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "coolant_stop"
            ],
            "imported": false,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "FUN_08002ba8": "process_blocks_08002ba8",
                "previous": "previous_block",
                "next": "next_block",
                "block": "blocks",
                "block_index": "block_index",
                "PTR_block_buffer_tail_08002c0c": "PTR_block_buffer_tail_08002c0c",
                "PTR_block_buffer_head_08002c14": "PTR_block_buffer_head_08002c14",
                "PTR_block_buffer_08002c10": "PTR_block_buffer_08002c10",
                "FUN_08002ba8_kernel": "process_block_kernel",
                "next_block_index": "next_block_index"
            },
            "code": "void process_blocks_08002ba8(void)\n{\n  block_t *previous_block;\n  block_t *next_block;\n  block_t *blocks[3];\n  uint8_t block_index;\n  \n  block_index = *PTR_block_buffer_tail_08002c0c;\n  blocks[1] = NULL;\n  blocks[2] = NULL;\n  while (previous_block = blocks[1], block_index != *PTR_block_buffer_head_08002c14) {\n    blocks[1] = blocks[2];\n    next_block = (block_t *)(PTR_block_buffer_08002c10 + (uint)block_index * 0x40);\n    process_block_kernel(previous_block, blocks[2], next_block);\n    block_index = next_block_index(block_index);\n    blocks[2] = next_block;\n  }\n  process_block_kernel(blocks[1], blocks[2], NULL);\n  return;\n}",
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "planner_recalculate"
            ],
            "imported": false,
            "current_name": "process_blocks_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_0800919c(uint input_1, uint input_2)\n{\n    bool is_negative;\n    uint doubled_input_1 = input_1 * 2;\n    uint doubled_input_2 = input_2 * 2;\n    \n    if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) && ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) || (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    \n    uint combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n    bool is_combined_zero = combined_inputs == 0;\n    \n    if (!is_combined_zero) {\n        combined_inputs = input_1 ^ input_2;\n        is_combined_zero = combined_inputs == 0;\n    }\n    \n    is_negative = -1 < (int)combined_inputs;\n    \n    if (is_negative) {\n        input_1 = doubled_input_1 + input_2 * -2;\n        is_combined_zero = input_1 == 0;\n    }\n    \n    if (is_negative && doubled_input_2 <= doubled_input_1 && !is_combined_zero) {\n        input_1 = (int)input_2 >> 0x1f;\n    }\n    \n    if (!is_negative || doubled_input_2 > doubled_input_1) {\n        input_1 = ~((int)input_2 >> 0x1f);\n    }\n    \n    if (!is_combined_zero) {\n        input_1 = input_1 | 1;\n    }\n    \n    return input_1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "calculate_0800b2cc",
                "__x": "input",
                "in_d0": "result"
            },
            "code": "double calculate_0800b2cc(double input){\n  double result;\n  // perform calculations here\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "__ieee754_atan2",
                "__ieee754_rem_pio2",
                "atan"
            ],
            "imported": false,
            "current_name": "calculate_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "FUN_0800854c": "calculate_shifted_value_0800854c",
                "param_1": "input_value",
                "uVar1": "output_value_lower",
                "uVar2": "shifted_value",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "in_r12": "unused_value",
                "bVar5": "is_negative_shift",
                "bVar6": "is_zero_shift",
                "bVar7": "is_negative_shift_amount"
            },
            "code": "ulonglong calculate_shifted_value_0800854c(uint input_value)\n{\n  uint leading_zeroes_count;\n  uint shifted_value;\n  uint shift_amount;\n  uint output_value = 0;\n  bool is_negative_shift;\n  bool is_zero_shift;\n  bool is_negative_shift_amount;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes_count + 0x15;\n  is_negative_shift_amount = SBORROW4(shift_amount,0x20);\n  shifted_value = leading_zeroes_count - 0xb;\n  is_negative_shift = (int)shifted_value < 0;\n  is_zero_shift = shifted_value == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative_shift_amount = SCARRY4(shifted_value,0xc);\n    leading_zeroes_count = leading_zeroes_count + 1;\n    is_negative_shift = leading_zeroes_count < 0;\n    is_zero_shift = leading_zeroes_count == 0;\n    shifted_value = shift_amount;\n    if (!is_zero_shift && is_negative_shift == is_negative_shift_amount) {\n      output_value = input_value << (shift_amount & 0xff);\n      input_value = input_value >> (0xcU - leading_zeroes_count & 0xff);\n      goto END_CALCULATION;\n    }\n  }\n  if (is_zero_shift || is_negative_shift != is_negative_shift_amount) {\n    shift_amount = 0x20 - shifted_value;\n  }\n  input_value = input_value << (shifted_value & 0xff);\n  if (is_zero_shift || is_negative_shift != is_negative_shift_amount) {\n    input_value = input_value | 0U >> (shift_amount & 0xff);\n  }\n  if (is_zero_shift || is_negative_shift != is_negative_shift_amount) {\n    output_value = 0 << (shifted_value & 0xff);\n  }\n  END_CALCULATION:\n  if ((int)shift_amount < 0x433) {\n    return CONCAT44(input_value + (0x432 - shift_amount) * 0x100000,output_value);\n  }\n  shifted_value = ~(0x432 - shift_amount);\n  if (0x1e < (int)shifted_value) {\n    return (ulonglong)(input_value >> (shifted_value - 0x1f & 0xff));\n  }\n  shifted_value = shifted_value - 0x13;\n  if (shifted_value == 0 || shifted_value < 0 != SCARRY4(shifted_value - 0x1f,0xc)) {\n    shifted_value = shifted_value + 1;\n    return CONCAT44(input_value >> (shifted_value & 0xff),\n                    output_value >> (shifted_value & 0xff) | input_value << (0x20 - shifted_value & 0xff));\n  }\n  return (ulonglong)(output_value >> (0x20 - (0xcU - shifted_value) & 0xff) | input_value << (0xcU - shifted_value & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "homing_cycle"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "FUN_08008e44": "convert_twos_complement_to_float_08008e44",
                "param_1": "number",
                "uVar2": "exponent",
                "uVar3": "sign_bit",
                "iVar1": "leading_zeroes",
                "iVar4": "mantissa",
                "uVar5": "carry_bit"
            },
            "code": "uint convert_twos_complement_to_float_08008e44(uint number)\n{\n  int leading_zeroes = count_leading_zeroes(number);\n  uint exponent = leading_zeroes - 8;\n  uint sign_bit = number & 0x80000000;\n  uint mantissa;\n  if (number == 0) {\n    return 0;\n  }\n  if ((int)sign_bit < 0) {\n    number = -number;\n  }\n  if (leading_zeroes > 7) {\n    mantissa = (number << (exponent & 0xff)) + (0U >> (0x20 - exponent & 0xff)) + (uint)(0x7fffffff < (0 << (exponent & 0xff)));\n    if ((0 << (exponent & 0xff)) == 0x80000000) {\n      mantissa = mantissa & 0xfffffffe;\n    }\n    return (sign_bit | ((exponent + 127) << 23) | (mantissa >> 9));\n  }\n  mantissa = ((number << (leading_zeroes + 0x18U & 0xff)) - (int)(number << (0x20 - (leading_zeroes + 0x18U) & 0xff))) >> 1;\n  if ((mantissa & 0x7fffffff) == 0) {\n    return sign_bit;\n  }\n  return (sign_bit | ((127 - exponent) << 23) | mantissa);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "calculate_trapezoid_for_block",
                "gc_set_current_position",
                "report_realtime_status",
                "mc_go_home",
                "plan_cycle_reinitialize",
                "mc_arc",
                "plan_buffer_line",
                "mc_dwell"
            ],
            "imported": false,
            "current_name": "convert_twos_complement_to_float_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "FUN_0800733e": "set_GPIO_PinState_0800733e",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "Pin",
                "PinState": "PinState",
                "BSRRH": "Reset_Pin",
                "BSRRL": "Set_Pin"
            },
            "code": "void set_GPIO_PinState_0800733e(GPIO_TypeDef *GPIO_port, uint16_t Pin, GPIO_PinState PinState)\n{\n  if (PinState == GPIO_PIN_RESET) {\n    GPIO_port->BSRRH = Pin;\n  }\n  else {\n    GPIO_port->BSRRL = Pin;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "gpio_init"
            ],
            "imported": false,
            "current_name": "set_GPIO_PinState_0800733e"
        },
        "FUN_08005aec": {
            "renaming": {
                "FUN_08005aec": "get_first_twelve_bits_of_dat_b00_08005aec",
                "DAT_08005b00": "data_pointer"
            },
            "code": "uint32_t get_first_twelve_bits_of_dat_b00_08005aec(void)\n{\n  uint32_t* DAT_08005b00 = DAT_08005b00;\n  uint32_t first_twelve_bits = *DAT_08005b00 & 0xFFF;\n  return first_twelve_bits;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aec",
            "calling": [],
            "imported": false,
            "current_name": "get_first_twelve_bits_of_dat_b00_08005aec"
        },
        "FUN_08005b74": {
            "renaming": {
                "FUN_08005b74": "set_flag_on_08005b74",
                "DAT_08005b8c": "flag_data",
                "PTR_": ""
            },
            "code": "void set_flag_on_08005b74(void)\n{\n    uint* flag_ptr = (uint*)(DAT_08005b8c + 4);\n    *flag_ptr |= 4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b74",
            "calling": [],
            "imported": false,
            "current_name": "set_flag_on_08005b74"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "set_step_and_wake_up_0800583c",
                "step_wr": "step_write",
                "st_wake_up": "step_wake_up",
                "st_go_idle": "step_go_idle",
                "current_setting": "current_step_setting"
            },
            "code": "void set_step_and_wake_up_0800583c(void)\n{\n  uint16_t current_setting = *(ushort *)(PTR_settings_08005858 + 0x18);\n  step_write(current_setting);\n  step_wake_up();\n  step_go_idle();\n  return;\n}",
            "called": [
                "st_wake_up",
                "st_go_idle",
                "step_wr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "set_step_and_wake_up_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "FUN_08001e98": "execute_command_08001e98",
                "x": "x_pos",
                "y": "y_pos",
                "z": "z_pos",
                "feed_rate": "feed_rate",
                "invert_feed_rate": "invert_feed_rate",
                "uVar1": "buffer_check_result",
                "x_00": "x_buffered_pos",
                "y_00": "y_buffered_pos",
                "z_00": "z_buffered_pos",
                "feed_rate_00": "feed_rate_buffered",
                "PTR_sys_08001efc": "sys_ptr_08001efc"
            },
            "code": "void execute_command_08001e98(float x_pos,float y_pos,float z_pos,float feed_rate,uint8_t invert_feed_rate)\n{\n  uint8_t buffer_check_result;\n  float x_buffered_pos;\n  float y_buffered_pos;\n  float z_buffered_pos;\n  float feed_rate_buffered;\n  \n  if (PTR_sys_08001efc[1] != '\\a') {\n    do {\n      execute_protocol_runtime();\n      if (*PTR_sys_08001efc != '\\0') {\n        return;\n      }\n      buffer_check_result = check_buffer_fullness();\n    } while (buffer_check_result != '\\0');\n    buffer_line(x_buffered_pos, y_buffered_pos, z_buffered_pos, feed_rate_buffered, invert_feed_rate);\n    if (PTR_sys_08001efc[1] == '\\0') {\n      PTR_sys_08001efc[1] = 2;\n    }\n    if (PTR_sys_08001efc[0x10] != '\\0') {\n      start_cycle();\n    }\n  }\n  return;\n}",
            "called": [
                "plan_check_full_buffer",
                "plan_buffer_line",
                "st_cycle_start",
                "protocol_execute_runtime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "mc_go_home",
                "mc_arc",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "execute_command_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "set_interrupt_priority_080069e4",
                "IRQn": "interrupt",
                "DAT_08006a14": "interrupt_register_base",
                "interrupt_register": "interrupt_register_address",
                "IRQn & 0x1fU": "interrupt_bit_position"
            },
            "code": "void set_interrupt_priority_080069e4(IRQn_Type interrupt)\n{\n    int* interrupt_register = (int*)(DAT_08006a14 + (((uint)(int)interrupt >> 5) + 0x20) * 4);\n    int interrupt_bit_position = IRQn & 0x1fU;\n    *interrupt_register = 1 << interrupt_bit_position;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "FUN_0800b2d4": "set_sign_bit_to_one_and_shift_right_0800b2d4",
                "__value": "value",
                "in_r1": "mask",
                "<unspecified>": "shifted"
            },
            "code": "int set_sign_bit_to_one_and_shift_right_0800b2d4(double value)\n{\n  uint32_t mask = 0x80000000;\n  uint32_t shifted = (mask | *(uint32_t*)&value) + 0x100000;\n  return shifted >> 0x1f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "hypot"
            ],
            "imported": false,
            "current_name": "set_sign_bit_to_one_and_shift_right_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_hash_08008e3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "multiplier",
                "uVar4": "shifted_input",
                "shifted_input": "shifted_input",
                "shifted_zero": "shifted_zero",
                "carry": "carry",
                "result": "result"
            },
            "code": "uint calculate_hash_08008e3c(uint input)\n{\n  if (input == 0) {\n    return 0;\n  }\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int multiplier = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < 0);\n    uint result = multiplier + shifted_input + shifted_zero + carry;\n    if ((input & 0x80000000) == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_zero = ((int)shifted_input >> 0x1f) - (input >> (0x20 - (leading_zeroes + 0x18U) & 0xff));\n  uint result = multiplier + shifted_zero;\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "FUN_08009654": "calculate_08009654",
                "__x": "x",
                "in_r1": "shift",
                "iVar1": "exponent",
                "in_d0": "result"
            },
            "code": "double calculate_08009654(double x) {\n  int shift;\n  int exponent;\n  double result;\n  shift = ((uint)(x << 1) >> 0x15) - 0x3ff;\n  if (((0x13 < shift) && (0x33 < shift)) && (shift == 0x400)) {\n    result = (double)__aeabi_dadd();\n  }\n  return result;\n}",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "calculate_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "clear_TIMx_registers_08007bc2",
                "TIMx": "timer",
                "_DAT_40000000": "PTR_0x40000000",
                "_DAT_4000000c": "PTR_0x4000000c"
            },
            "code": "void clear_TIMx_registers_08007bc2(void)\n{\n  TIM_TypeDef *timer;\n  timer = (TIM_TypeDef *)_DAT_40000000;\n  timer->CR1 &= 0xfffffffe;\n  timer = (TIM_TypeDef *)_DAT_4000000c;\n  timer->CR1 &= 0xfffffff8;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "st_go_idle"
            ],
            "imported": false,
            "current_name": "clear_TIMx_registers_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "FUN_08009410": "calculate_sine_08009410",
                "__x": "x",
                "in_r0": "unused",
                "in_r1": "abs_x",
                "dVar2": "result",
                "local_28": "remainder",
                "uStack_24": "unused",
                "local_20": "unused",
                "uStack_1c": "unused"
            },
            "code": "double calculate_sine_08009410(double x) {\n  uint abs_x = (uint)(fabs(x));\n  double result;\n  if (DAT_080094b4 < (int)(abs_x & 0x7fffffff)) {\n    if (DAT_080094b8 < (int)(abs_x & 0x7fffffff)) {\n      result = (double)__subdf3();\n    }\n    else {\n      uint remainder = __ieee754_rem_pio2(0, abs_x, &local_28);\n      remainder &= 3;\n      if (remainder == 1) {\n        result = (double)__kernel_sin(local_28, uStack_24, local_20, uStack_1c, 1);\n      }\n      else if (remainder == 2 || remainder == 0) {\n        result = (double)__kernel_calculate_sine_08009410(local_28, uStack_24, local_20, uStack_1c);\n      }\n      else {\n        result = (double)__kernel_sin(local_28, uStack_24, local_20, uStack_1c, 1);\n      }\n    }\n  }\n  else {\n    result = (double)__kernel_calculate_sine_08009410(0, abs_x, 0, 0);\n  }\n  return result;\n}",
            "called": [
                "__kernel_cos",
                "__ieee754_rem_pio2",
                "__subdf3",
                "__kernel_sin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "mc_arc"
            ],
            "imported": false,
            "current_name": "calculate_sine_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "set_xyz_values_080035ec",
                "x": "x_coord",
                "y": "y_coord",
                "z": "z_coord"
            },
            "code": "void set_xyz_values_080035ec(int32_t x_coord, int32_t y_coord, int32_t z_coord) {\n  *(int32_t *)PTR_pl_08003614 = x_coord;\n  *(int32_t *)(PTR_pl_08003614 + 4) = y_coord;\n  *(int32_t *)(PTR_pl_08003614 + 8) = z_coord;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "sys_sync_current_position"
            ],
            "imported": false,
            "current_name": "set_xyz_values_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "FUN_08006c70": "synchronize_data_08006c70",
                "DAT_08006c94": "data_ptr_start",
                "DAT_08006c98": "data_mask",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "void synchronize_data_08006c70(void)\n{\n    DataSynchronizationBarrier(0xf);\n    uint* DAT_ptr = (uint*)(DAT_08006c94 + 0xc);\n    *DAT_ptr = DAT_08006c98 | (*DAT_ptr & 0x700);\n    DataSynchronizationBarrier(0xf);\n    while(true)\n    {\n        // Do nothing block with infinite loop\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "imported": false,
            "current_name": "synchronize_data_08006c70"
        },
        "FUN_080068bc": {
            "renaming": {
                "FUN_080068bc": "initializeClock_080068bc",
                "RCC_ClkInitStruct": "clockConfig",
                "pFLatency": "flashLatency",
                "ClockType": "RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2",
                "SYSCLKSource": "RCC_SYSCLKSOURCE_PLLCLK",
                "AHBCLKDivider": "RCC_SYSCLK_DIV1",
                "APB1CLKDivider": "RCC_HCLK_DIV2",
                "APB2CLKDivider": "RCC_HCLK_DIV1",
                "DAT_08006914": "DAT_08006914",
                "DAT_08006918": "DAT_08006918",
                "*pFLatency": "*flashLatency",
                "0xf": "RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2",
                "*(uint *)(DAT_08006914 + 8) & 3": "*(uint *)(DAT_08006914 + 8) & RCC_SYSCLKSOURCE_PLLCLK",
                "*(uint *)(DAT_08006914 + 8) & 0xf0": "*(uint *)(DAT_08006914 + 8) & RCC_SYSCLK_DIV1",
                "*(uint *)(DAT_08006914 + 8) & 0x1c00": "*(uint *)(DAT_08006914 + 8) & RCC_HCLK_DIV2",
                "*(uint *)(DAT_08006914 + 8) >> 3 & 0x1c00": "*(uint *)(DAT_08006914 + 8) >> 3 & RCC_HCLK_DIV1",
                "*DAT_08006918 & 0xf": "*DAT_08006918 & FLASH_LATENCY_4"
            },
            "code": "void initializeClock_080068bc(RCC_ClkInitTypeDef *clockConfig, uint32_t *flashLatency)\n{\n  clockConfig->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  clockConfig->SYSCLKSource = *(uint *)(DAT_08006914 + 8) & 3;\n  clockConfig->AHBCLKDivider = *(uint *)(DAT_08006914 + 8) & 0xf0;\n  clockConfig->APB1CLKDivider = *(uint *)(DAT_08006914 + 8) & 0x1c00;\n  clockConfig->APB2CLKDivider = *(uint *)(DAT_08006914 + 8) >> 3 & 0x1c00;\n  *flashLatency = *DAT_08006918 & 0xf;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068bc",
            "calling": [],
            "imported": false,
            "current_name": "initializeClock_080068bc"
        },
        "FUN_08006944": {
            "renaming": {
                "FUN_08006944": "do_nothing_08006944"
            },
            "code": "\nvoid do_nothing_08006944(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006944",
            "calling": [
                "HAL_RCC_NMI_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08006944"
        },
        "FUN_08006d98": {
            "renaming": {
                "FUN_08006d98": "decode_irq_priority_08006d98",
                "IRQn": "irq",
                "PriorityGroup": "priority_group",
                "pPreemptPriority": "preempt_priority",
                "pSubPriority": "sub_priority",
                "Priority": "priority"
            },
            "code": "void decode_irq_priority_08006d98(IRQn_Type irq, uint32_t priority_group, uint32_t *preempt_priority, uint32_t *sub_priority)\n{\n  uint32_t priority = NVIC_GetPriority(irq);\n  NVIC_DecodePriority(priority, priority_group, preempt_priority, sub_priority);\n  return;\n}",
            "called": [
                "NVIC_DecodePriority",
                "NVIC_GetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": false,
            "current_name": "decode_irq_priority_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_uwTick_08005a68",
                "PTR_uwTick_08005a80": "uwTick"
            },
            "code": "void increment_uwTick_08005a68(void)\n{\n  int* PTR_uwTick_08005a80 = (int*) PTR_PTR_uwTick_08005a80_08005a80;\n  *PTR_uwTick_08005a80 += 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_uwTick_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "FUN_080079c0": "initialize_debounce_080079c0",
                "PTR_debounce_080079d8": "debounce_array",
                "PTR_debounce_ready_080079dc": "ready_flag"
            },
            "code": "void initialize_debounce_080079c0(void)\n{\n  int PTR_debounce_080079d8_size = 0x18;\n  memset(PTR_debounce_080079d8, 0, PTR_debounce_080079d8_size);\n  int *debounce_ready = (int *)PTR_debounce_ready_080079dc;\n  *debounce_ready = 1;\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_debounce_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "returnZeroOnException_0800b2e0",
                "__exc": "__exception"
            },
            "code": "int returnZeroOnException_0800b2e0(exception *__exc){\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "sqrt",
                "hypot"
            ],
            "imported": false,
            "current_name": "returnZeroOnException_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "FUN_08002908": "calculate_distance_08002908",
                "in_r0": "initial_velocity",
                "in_r1": "final_velocity",
                "in_r2": "acceleration",
                "in_r3": "distance_travelled",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "__addsf3": "add_floats",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "__aeabi_fdiv": "divide_floats"
            },
            "code": "float calculate_distance_08002908(float initial_velocity, float final_velocity, float acceleration, float distance_travelled)\n{\n  float temp1, temp2;\n  temp1 = 2 * acceleration * distance_travelled;\n  temp2 = (final_velocity * final_velocity) - (initial_velocity * initial_velocity);\n  return temp2 / temp1;\n}",
            "called": [
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fsub",
                "__aeabi_fdiv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "imported": false,
            "current_name": "calculate_distance_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "FUN_08007c40": "set_timer_08007c40",
                "ticks": "ticks",
                "TIMx": "timer",
                "_DAT_40000034": "timer_ARR"
            },
            "code": "void set_timer_08007c40(TIM_TypeDef *timer, uint32_t ticks)\n{\n  timer->ARR = ticks;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "st_wake_up"
            ],
            "imported": false,
            "current_name": "set_timer_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "FUN_080094c0": "calculate_080094c0",
                "__x": "input",
                "in_r0": "right_bits",
                "in_r1": "left_bits",
                "uVar1": "exponent_diff",
                "uVar2": "left_bits",
                "uVar3": "result",
                "in_d0": "output",
                "extraout_d0": "sum",
                "extraout_d0_00": "sum_left",
                "extraout_d0_01": "sum_right"
            },
            "code": "double calculate_080094c0(double input)\n{\n  uint left_bits;\n  uint right_bits;\n  uint exponent;\n  uint exponent_diff;\n  double output;\n  double sum;\n  double sum_left;\n  double sum_right;\n  undefined8 result;\n  \n  left_bits = (right_bits << 1) >> 0x15;\n  exponent_diff = left_bits - 0x3ff;\n  if ((int)exponent_diff < 0x14) {\n    if ((int)exponent_diff < 0) {\n      result = __aeabi_dadd(right_bits, left_bits, DAT_080095a8, DAT_080095ac);\n      __aeabi_dcmpgt((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n      output = sum_right;\n    }\n    else if ((right_bits & DAT_080095b0 >> (exponent_diff & 0xff) | left_bits) != 0) {\n      result = __aeabi_dadd(right_bits, left_bits, DAT_080095a8, DAT_080095ac);\n      __aeabi_dcmpgt((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n      output = sum;\n    }\n  }\n  else if ((int)exponent_diff < 0x34) {\n    if ((0xffffffffU >> (left_bits - 0x413 & 0xff) & right_bits) != 0) {\n      result = __aeabi_dadd(right_bits, left_bits, DAT_080095a8, DAT_080095ac);\n      __aeabi_dcmpgt((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n      output = sum_left;\n    }\n  }\n  else if (exponent_diff == 0x400) {\n    output = (double)__aeabi_dadd();\n  }\n  return output;\n}",
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "calculate_trapezoid_for_block",
                "mc_arc",
                "mc_dwell",
                "__kernel_rem_pio2"
            ],
            "imported": false,
            "current_name": "calculate_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "FUNC_08008eec"
            },
            "code": "\nuint FUNC_08008eec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_0800903c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_0800903c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008eec",
            "calling": [
                "homing_cycle",
                "mc_arc",
                "mc_dwell",
                "max_allowable_speed",
                "read_float",
                "printFloat",
                "estimate_acceleration_distance",
                "settings_store_global_setting",
                "intersection_distance",
                "calculate_trapezoid_for_block",
                "mc_go_home",
                "plan_cycle_reinitialize",
                "plan_buffer_line",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "FUNC_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "FUN_08006b54": "get_priority_from_irq_08006b54",
                "IRQn": "irq",
                "bVar1": "priority_byte",
                "WWDG_IRQn": "watchdog_irq",
                "DAT_08006b98": "priority_table_start",
                "DAT_08006b9c": "priority_table_end"
            },
            "code": "uint32_t get_priority_from_irq_08006b54(IRQn_Type irq)\n{\n  byte priority_byte;\n  if (irq < WWDG_IRQn) {\n    priority_byte = *(byte *)(((byte)irq & 0xf) + DAT_08006b98 + 0x14);\n  }\n  else {\n    priority_byte = *(byte *)(irq + DAT_08006b9c + 0x300);\n  }\n  return (uint32_t)(priority_byte >> 4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "imported": false,
            "current_name": "get_priority_from_irq_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "FUN_08007e84": "get_USART_data_08007e84",
                "usart": "PTR_USART",
                "DAT_08007ea0": "DAT_USART_DATA"
            },
            "code": "char get_USART_data_08007e84(void)\n{\n  USART_TypeDef *usart = PTR_USART;\n  return (char)*(undefined4 *)(DAT_08007ea0 + 4);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "serial_read"
            ],
            "imported": false,
            "current_name": "get_USART_data_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_if_needed_080057e4",
                "step_isr_disable": "disable_step_isr",
                "stepper_motor_disable": "disable_stepper_motor"
            },
            "code": "void disable_stepper_motor_if_needed_080057e4(void)\n{\n    disable_step_isr();\n    if ((PTR_settings_0800580c[0x3c] != -1) || ((PTR_sys_08005810[2] & 0x20) != 0)) {\n        disable_stepper_motor();\n    }\n    return;\n}",
            "called": [
                "stepper_motor_disable",
                "step_isr_disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "limits_go_home",
                "step_period_isr",
                "st_init",
                "mc_reset"
            ],
            "imported": false,
            "current_name": "disable_stepper_motor_if_needed_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "FUN_08006d8a": "get_NVIC_priority_grouping_08006d8a",
                "uVar1": "priority_group"
            },
            "code": "uint32_t get_NVIC_priority_grouping_08006d8a(void)\n{\n  uint32_t priority_group;\n  priority_group = NVIC_GetPriorityGrouping();\n  return priority_group;\n}",
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": false,
            "current_name": "get_NVIC_priority_grouping_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "FUN_0800b2e8": "calculate_power_0800b2e8",
                "__x": "base",
                "__n": "exponent",
                "in_r1": "exponent_bits",
                "in_r2": "exponent_adjusted",
                "uVar1": "exponent_upper_bits",
                "dVar4": "result",
                "uVar3": "product_upper_bits",
                "uVar5": "product_lower_bits",
                "in_d0": "base",
                "extraout_d0": "product_lower_bits"
            },
            "code": "double calculate_power_0800b2e8(double base, int exponent){\n    uint exponent_bits;\n    int exponent_adjusted;\n    uint exponent_upper_bits;\n    uint product_upper_bits;\n    double product_lower_bits;\n    double result;\n    \n    exponent_bits = CONCAT44(exponent_bits, exponent);\n    exponent_upper_bits = (exponent_bits << 1) >> 0x15;\n    if(exponent_upper_bits == 0){\n        if((exponent | exponent_bits & 0x7fffffff) == 0){\n            return base;\n        }\n        product_lower_bits = __muldf3(exponent, exponent_bits, 0, DAT_0800b3c8);\n        if(exponent_adjusted < DAT_0800b3cc){\n            goto LAB_0800b34a;\n        }\n        exponent_upper_bits = ((uint)((int)(product_lower_bits >> 0x20) << 1) >> 0x15) - 0x36;\n        result = product_lower_bits;\n    }\n    else if(exponent_upper_bits == 0x7ff){\n        result = (double)__aeabi_dadd(exponent, exponent_bits, exponent);\n        return result;\n    }\n    exponent_adjusted = exponent_upper_bits + base;\n    if(exponent_adjusted < 0x7ff){\n        if(0 < exponent_adjusted){\n            return base;\n        }\n        if(exponent_adjusted + 0x35 < 0 == SCARRY4(exponent_adjusted, 0x35)){\n            product_upper_bits = exponent_upper_bits & 0x800fffff | (exponent_adjusted + 0x36) * 0x100000;\n            product_lower_bits = (double)__muldf3((int)exponent_bits, product_upper_bits, 0, DAT_0800b3d8);\n            return product_lower_bits;\n        }\n        if(exponent_adjusted < 0xc351){\n            exponent_bits = exponent_bits & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\n            goto LAB_0800b34a;\n        }\n    }\n    product_upper_bits = exponent_upper_bits & 0x80000000 | 0x7e37e43c;\n    product_lower_bits = (double)__muldf3(DAT_0800b3d4, product_upper_bits, DAT_0800b3c0, DAT_0800b3c4);\n    return product_lower_bits;\n}",
            "called": [
                "__muldf3",
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "__kernel_rem_pio2"
            ],
            "imported": false,
            "current_name": "calculate_power_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "spindle_run"
            ],
            "imported": false,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "clear_gpio_08007520",
                "bits": "bits",
                "gpio_clr": "gpio_clear"
            },
            "code": "void clear_gpio_08007520(uint32_t bits)\n{\n  if ((bits & 1) != 0) {\n    gpio_clear(0x3e);\n  }\n  return;\n}",
            "called": [
                "gpio_clr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "debounce_isr"
            ],
            "imported": false,
            "current_name": "clear_gpio_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "read_gpio_pins_08007884",
                "iVar1": "pin_1_val",
                "iVar2": "pin_2_val",
                "iVar3": "pin_3_val",
                "iVar4": "pin_4_val",
                "iVar5": "pin_5_val",
                "uVar6": "gpio_val"
            },
            "code": "uint32_t read_gpio_pins_08007884(void)\n{\n  int pin_1_val;\n  int pin_2_val;\n  int pin_3_val;\n  int pin_4_val;\n  int pin_5_val;\n  uint32_t gpio_val;\n  pin_1_val = gpio_rd(0x36);\n  pin_2_val = gpio_rd(0x37);\n  pin_3_val = gpio_rd(0x38);\n  pin_4_val = gpio_rd(0x39);\n  pin_5_val = gpio_rd(0xf);\n  gpio_val = gpio_rd(0);\n  return gpio_val | pin_1_val << 4 | pin_2_val << 3 | pin_3_val << 2 | pin_4_val << 1 | pin_5_val << 7;\n}",
            "called": [
                "gpio_rd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "debounce_isr"
            ],
            "imported": false,
            "current_name": "read_gpio_pins_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "FUN_08004250": "printSettings_08004250",
                "n": "step_x",
                "n_00": "step_y",
                "n_01": "step_z",
                "n_02": "step_pulse_usec",
                "n_03": "default_feed_rate",
                "n_04": "n_04",
                "n_05": "acceleration",
                "n_06": "junction_deviation",
                "n_07": "arc_segment_length",
                "n_08": "homing_feed_rate",
                "n_09": "homing_seek_rate"
            },
            "code": "void printSettings_08004250(void)\n{\n  float step_x;\n  float step_y;\n  float step_z;\n  float step_pulse_usec;\n  float default_feed_rate;\n  float default_seek_rate;\n  float acceleration;\n  float junction_deviation;\n  float arc_segment_length;\n  float homing_feed_rate;\n  float homing_seek_rate;\n  float homing_pull_off;\n  float homing_debounce;\n  float n;\n  float n_00;\n  float n_01;\n  float n_02;\n  float n_03;\n  float n_04;\n  float n_05;\n  float n_06;\n  float n_07;\n  float n_08;\n  float n_09;\n  printPgmString(PTR_DAT_08004470);\n  printFloat(n);\n  printPgmString(PTR_s___x__step_mm___1__08004478);\n  printFloat(step_x);\n  printPgmString(PTR_s___y__step_mm___2__0800447c);\n  printFloat(step_y);\n  printPgmString(PTR_s___z__step_mm___3__08004480);\n  printFloat(step_z);\n  printInteger((uint)(byte)PTR_settings_08004474[0xd]);\n  printPgmString(PTR_s___step_pulse__usec___4__08004484);\n  printFloat(step_pulse_usec);\n  printPgmString(PTR_s___default_feed__mm_min___5__08004488);\n  printFloat(default_feed_rate);\n  printPgmString(PTR_s___default_seek__mm_min___6__0800448c);\n  printFloat(default_seek_rate);\n  printInteger((uint)*(ushort *)(PTR_settings_08004474 + 0x18));\n  printPgmString(PTR_s___step_port_invert_mask__int__08004490);\n  print_uint16_base2(*(uint16_t *)(PTR_settings_08004474 + 0x18));\n  printPgmString(PTR_s____7__08004494);\n  printInteger((uint)(byte)PTR_settings_08004474[0x3c]);\n  printPgmString(PTR_s___step_idle_delay__msec___8__08004498);\n  n_04 = (float)__aeabi_fdiv(*(undefined4 *)(PTR_settings_08004474 + 0x20),DAT_0800449c);\n  printFloat(n_04);\n  printPgmString(PTR_s___acceleration__mm_sec_2___9__080044a0);\n  printFloat(acceleration);\n  printPgmString(PTR_s___junction_deviation__mm___10__080044a4);\n  printFloat(junction_deviation);\n  printPgmString(PTR_s___arc__mm_segment___11__080044a8);\n  printInteger((uint)(byte)PTR_settings_08004474[0x3e]);\n  printPgmString(PTR_s___n_arc_correction__int___12__080044ac);\n  printInteger((uint)(byte)PTR_settings_08004474[0x3d]);\n  printPgmString(PTR_s___n_decimals__int___13__080044b0);\n  printInteger((uint)((PTR_settings_08004474[0x28] & 1) != 0));\n  printPgmString(PTR_s___report_inches__bool___14__080044b4);\n  printInteger((uint)((PTR_settings_08004474[0x28] & 2) != 0));\n  printPgmString(PTR_s___auto_start__bool___15__080044b8);\n  printInteger((uint)((PTR_settings_08004474[0x28] & 4) != 0));\n  printPgmString(PTR_s___invert_step_enable__bool___16__080044bc);\n  printInteger((uint)((PTR_settings_08004474[0x28] & 8) != 0));\n  printPgmString(PTR_s___hard_limits__bool___17__080044c0);\n  printInteger((uint)((PTR_settings_08004474[0x28] & 0x10) != 0));\n  printPgmString(PTR_s___homing_cycle__bool___18__080044c4);\n  printInteger((uint)*(ushort *)(PTR_settings_08004474 + 0x2a));\n  printPgmString(PTR_s___homing_dir_invert_mask__int__080044c8);\n  print_uint16_base2(*(uint16_t *)(PTR_settings_08004474 + 0x2a));\n  printPgmString(PTR_s____19__080044cc);\n  printFloat(homing_feed_rate);\n  printPgmString(PTR_s___homing_feed__mm_min___20__080044d0);\n  printFloat(homing_seek_rate);\n  printPgmString(PTR_s___homing_seek__mm_min___21__080044d4);\n  printInteger((uint)*(ushort *)(PTR_settings_08004474 + 0x34));\n  printPgmString(PTR_s___homing_debounce__msec___22__080044d8);\n  printFloat(homing_debounce);\n  printPgmString(PTR_s___homing_pull_off__mm___23__080044dc);\n  printInteger((uint)*(ushort *)(PTR_settings_08004474 + 0x1a));\n  printPgmString(PTR_s___dir_port_invert_mask__int__080044e0);\n  print_uint16_base2(*(uint16_t *)(PTR_settings_08004474 + 0x1a));\n  printPgmString(PTR_DAT_080044e4);\n  return;\n}",
            "called": [
                "printInteger",
                "printPgmString",
                "__aeabi_fdiv",
                "print_uint16_base2",
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "imported": false,
            "current_name": "printSettings_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "IRQn": "irq"
            },
            "code": "void set_pending_irq_08006dc4(IRQn_Type irq) {\n  NVIC_SetPendingIRQ(irq);\n  return;\n}",
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": false,
            "current_name": "set_pending_irq_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_bit_in_short_array_08007402",
                "n": "bit_number",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_bit_in_short_array_08007402(int bit_number)\n{\n    int array_index = bit_number >> 4;\n    short* array_ptr = (short*)(array_index * 0x400 + 0x40020018);\n    int bit_offset = bit_number & 0xfU;\n    short bit_mask = (short)(1 << bit_offset);\n    *array_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "debounce_on_handler"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_array_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_block_index_08002870",
                "block_index": "block_index",
                "local_9": "incremented_index"
            },
            "code": "uint8_t increment_block_index_08002870(uint8_t block_index)\n{\n  uint8_t incremented_index;\n  incremented_index = block_index + 1;\n  if (incremented_index == 18) {\n    incremented_index = 0;\n  }\n  return incremented_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "plan_discard_current_block",
                "plan_reset_buffer",
                "planner_forward_pass",
                "planner_recalculate_trapezoids",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "increment_block_index_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "FUN_08000210": "turnOffCoolantSystem_08000210",
                "coolant_mist_off": "turnOffCoolantMist",
                "coolant_flood_off": "turnOffCoolantFlood"
            },
            "code": "void turnOffCoolantSystem_08000210(void)\n{\n  turnOffCoolantMist();\n  turnOffCoolantFlood();\n  return;\n}",
            "called": [
                "coolant_mist_off",
                "coolant_flood_off"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "coolant_init",
                "coolant_run",
                "mc_reset"
            ],
            "imported": false,
            "current_name": "turnOffCoolantSystem_08000210"
        },
        "FUN_08008a64": {
            "renaming": {
                "FUN_08008a64": "check_collision_08008a64",
                "param_1": "x1",
                "param_2": "y1",
                "param_3": "x2",
                "param_4": "y2",
                "bVar2": "x_collide",
                "bVar3": "y_collide",
                "uVar1": "x_diff",
                "bVar2_2": "x_overlap",
                "bVar3_2": "y_diff"
            },
            "code": "uint check_collision_08008a64(uint x1, uint y1, uint x2, uint y2)\n{\n  bool x_collide = (x1 | x2 << 1) == 0;\n  bool y_collide = (y1 | y2 << 1) == 0;\n  if (x_collide && y_collide)\n    return 0;\n  if (x2 == x1 && y2 == y1)\n    return 1;\n  uint x_diff = x2 ^ x1;\n  bool x_overlap = x_diff == 0 || (int)x_diff > 0 && y2 <= y1;\n  if (x_overlap)\n    return 1;\n  if ((int)x_diff < 0)\n    y2 = ~y2;\n  uint y_diff = y2 - y1;\n  return (int)y_diff >> 0x1f | 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a64",
            "calling": [],
            "imported": false,
            "current_name": "check_collision_08008a64"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "process_data_08005900",
                "data": "data",
                "rc": "result",
                "PTR_sys_08005978": "sys_flags",
                "mc_reset": "reset_machine"
            },
            "code": "int process_data_08005900(uint8_t data)\n{\n    int result;\n    if (data == '~') {\n        PTR_sys_08005978[2] |= 2;\n        result = 1;\n    }\n    else if (data < 0x7f) {\n        if (data == '?') {\n            PTR_sys_08005978[2] |= 1;\n            result = 1;\n        }\n        else if (data < 0x40) {\n            if (data == '\\x18') {\n                reset_machine();\n                result = 1;\n            }\n            else if (data == '!') {\n                PTR_sys_08005978[2] |= 8;\n                result = 1;\n            }\n        }\n    }\n    else {\n        result = 0;\n    }\n    return result;\n}\n",
            "called": [
                "mc_reset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "serial_read"
            ],
            "imported": false,
            "current_name": "process_data_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "FUN_08002638": "parse_float_from_string_08002638",
                "line": "input_string",
                "char_counter": "char_count",
                "float_ptr": "output_float",
                "bVar1": "current_char_value",
                "bVar2": "negative",
                "bVar3": "decimal_found",
                "puVar4": "next_char_ptr",
                "puVar5": "current_char_ptr",
                "iVar6": "return_value",
                "uVar7": "double_value",
                "fval": "float_value",
                "isdecimal": "decimal_found",
                "ndigit": "num_digits",
                "exp": "exponent",
                "intval": "integer_value",
                "isnegative": "negative",
                "c": "current_char",
                "ptr": "current_char_ptr"
            },
            "code": "int parse_float_from_string_08002638(char *input_string, uint8_t *char_count, float *output_float) {\n  byte current_char;\n  bool negative = false;\n  bool decimal_found = false;\n  uchar *current_char_ptr;\n  uchar *next_char_ptr;\n  int integer_part = 0;\n  int8_t exponent = 0;\n  uint8_t num_digits = 0;\n  uint32_t integer_value = 0;\n  uchar current_char_value;\n  current_char_ptr = (uchar *)(input_string + *char_count);\n  next_char_ptr = current_char_ptr + 1;\n  current_char = *current_char_ptr;\n  if (current_char == '-') {\n    negative = true;\n    current_char = *next_char_ptr;\n    current_char_ptr = next_char_ptr + 1;\n  }\n  else if (current_char == '+') {\n    current_char = *next_char_ptr;\n    current_char_ptr = next_char_ptr + 1;\n  }\n  while (true) {\n    current_char_value = current_char - 0x30;\n    if (current_char_value < 10) {\n      num_digits = num_digits + 1;\n      if (num_digits < 9) {\n        if (decimal_found) {\n          exponent = exponent - 1;\n        }\n        integer_value = (uint)current_char_value + integer_value * 10;\n      }\n      else if (!decimal_found) {\n        exponent = exponent + 1;\n      }\n    }\n    else {\n      if ((current_char_value != 0xfe) || (decimal_found)) {\n        if (num_digits == 0) {\n          return 0;\n        }\n        else {\n          float float_value = (float)__floatunsisf(integer_value);\n          if (__aeabi_fcmpeq(float_value,0)) {\n            for (; exponent < -1; exponent = exponent + 2) {\n              float_value = (float)__aeabi_fmul(float_value, 5.000000e-01);\n            }\n            if (exponent < 0) {\n              float_value = (float)__aeabi_fmul(float_value, 1.000000e-01);\n            }\n            else {\n              for (; exponent > 0; exponent--) {\n                float_value = (float)__aeabi_fmul(float_value, 10.000000);\n              }\n            }\n          }\n          if (negative) {\n            *output_float = (float)((uint)float_value ^ 0x80000000);\n          }\n          else {\n            *output_float = float_value;\n          }\n          *char_count = ((char *)current_char_ptr - input_string) + 0xff;\n          return 1;\n        }\n      }\n      decimal_found = true;\n    }\n    current_char = *current_char_ptr;\n    current_char_ptr++;\n  }\n}",
            "called": [
                "__floatunsisf",
                "__aeabi_fcmpeq",
                "__aeabi_fmul",
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "imported": false,
            "current_name": "parse_float_from_string_08002638"
        },
        "FUN_08005bac": {
            "renaming": {
                "FUN_08005bac": "set_dat_pointer_to_one_08005bac",
                "DAT_08005bc0": "data_pointer"
            },
            "code": "void set_dat_pointer_to_one_08005bac(void)\n{\n  *DAT_08005bc0 = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bac",
            "calling": [],
            "imported": false,
            "current_name": "set_dat_pointer_to_one_08005bac"
        },
        "FUN_080051b4": {
            "renaming": {
                "FUN_080051b4": "readAndReportGrblSettings_080051b4",
                "uVar1": "readCoordDataStatus",
                "coord_data": "coordData",
                "i": "index",
                "read_global_settings": "readGlobalSettings",
                "report_status_message": "reportStatusMessage",
                "settings_reset": "resetSettings",
                "report_grbl_settings": "reportGrblSettings",
                "settings_read_coord_data": "readCoordData"
            },
            "code": "void readAndReportGrblSettings_080051b4(void)\n{\n  uint8_t globalSettings = readGlobalSettings();\n  if (globalSettings == 0) {\n    reportStatusMessage('\\n');\n    resetSettings(true);\n    reportGrblSettings();\n  }\n  for (uint8_t i = 0; i < 8; i++) {\n    uint8_t readCoordDataStatus = readCoordData(i, coordData);\n    if (readCoordDataStatus == 0) {\n      reportStatusMessage('\\n');\n    }\n  }\n  return;\n}",
            "called": [
                "settings_read_coord_data",
                "settings_reset",
                "read_global_settings",
                "report_status_message",
                "report_grbl_settings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "readAndReportGrblSettings_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "FUN_080098d0": "calculate_math_error_080098d0",
                "__x": "input",
                "cVar1": "version",
                "iVar2": "error_code",
                "puVar3": "error_ptr",
                "piVar4": "error_ptr",
                "dVar5": "result",
                "extraout_d0": "result_1",
                "extraout_d0_00": "result_2",
                "extraout_d0_01": "result_3",
                "extraout_d0_02": "result_4",
                "extraout_d0_03": "result_5",
                "local_50": "local_array",
                "local_38": "local_double",
                "local_30": "error_code_2"
            },
            "code": "double calculate_math_error_080098d0(double input)\n{\n    double result = (double)__ieee754_calculate_math_error_080098d0();\n    char version = *PTR___fdlib_version_08009988;\n    int error_code;\n    undefined local_array[24];\n    undefined8 local_double = 0.0;\n\n    if (version == -1 || (error_code = __unorddf2(), result = extraout_d0, error_code != 0) || (__aeabi_dcmplt(), result = extraout_d0_00, error_code == 0)) {\n        return result;\n    }\n\n    local_array._0_4_ = 1;\n    local_array._4_4_ = PTR_DAT_0800998c;\n\n    if (version == '\\0') {\n        error_code = matherr((exception *)local_array);\n        result = extraout_d0_02;\n        if (error_code != 0) {\n            goto joined_r0x0800997a;\n        }\n    }\n    else {\n        local_double = (double)__divdf3(0, 0, 0, 0);\n        if (version != '\\x02') {\n            goto LAB_0800996c;\n        }\n    }\n\n    undefined4 *error_ptr = (undefined4 *)__errno();\n    *error_ptr = 0x21;\n    result = extraout_d0_01;\n\njoined_r0x0800997a:\n    if (error_code != 0) {\n        int *error_ptr = (int *)__errno();\n        *error_ptr = error_code;\n        result = extraout_d0_03;\n    }\n    return result;\n}",
            "called": [
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__errno",
                "matherr",
                "__unorddf2",
                "__divdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "homing_cycle",
                "plan_buffer_line",
                "max_allowable_speed",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "calculate_math_error_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "FUN_08005c30": "calculate_ticks_remaining_08005c30",
                "ticks": "total_ticks",
                "is_less_than_0x1000000": "is_remaining_ticks_less_than_0x1000000",
                "DAT_08005c70": "ptr_dat_08005c70",
                "NVIC_SetPriority": "set_priority_of_system_tick_interrupt",
                "SysTick_IRQn": "system_tick_interrupt_number"
            },
            "code": "uint32_t calculate_ticks_remaining_08005c30(uint32_t ticks)\n{\n  bool is_less_than_0x1000000 = (ticks - 1 < 0x1000000);\n  if (is_less_than_0x1000000)\n  {\n    PTR_DAT_08005c70[1] = ticks - 1;\n    NVIC_SetPriority(SysTick_IRQn, 0xf);\n    PTR_DAT_08005c70[2] = 0;\n    *PTR_DAT_08005c70 = 7;\n  }\n  return (uint32_t)!is_less_than_0x1000000;\n}",
            "called": [
                "NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_ticks_remaining_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "FUN_0800056c": "multiply_and_truncate_0800056c",
                "value": "input_value",
                "in_r0": "undefined_4",
                "uVar1": "undefined_8",
                "PTR_gc_080005b0": "PTR_gc",
                "DAT_080005a8": "multiplier",
                "DAT_080005ac": "addend"
            },
            "code": "float multiply_and_truncate_0800056c(float value) {\\n  if (PTR_gc_080005b0_080005b0[3] != \"\\0\") {\\n    double double_value = (double)value;\\n    double multiplied_value = double_value * DAT_080005a8;\\n    multiplied_value += DAT_080005ac;\\n    value = (float)multiplied_value;\\n    }\\n  return value;\\n}",
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "multiply_and_truncate_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "FUN_08002f24": "reset_plan_buffer_and_clear_data_08002f24",
                "PTR_pl_08002f3c": "plan_data"
            },
            "code": "void reset_plan_buffer_and_clear_data_08002f24(void)\n{\n  reset_plan_buffer();\n  memset(PTR_pl_08002f3c, 0, sizeof(PTR_pl_08002f3c));\n  return;\n}",
            "called": [
                "memset",
                "plan_reset_buffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "reset_plan_buffer_and_clear_data_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "FUN_0800981c": "calculate_0800981c",
                "__x": "x",
                "__y": "y",
                "cVar1": "version",
                "puVar2": "fdlib_version_ptr",
                "iVar3": "is_finite",
                "puVar4": "errno_ptr",
                "dVar5": "result",
                "extraout_d0": "temp_result",
                "extraout_d0_00": "temp_result_2",
                "extraout_d0_01": "temp_result_3",
                "extraout_d0_02": "temp_result_4",
                "in_stack_ffffffb0": "int_param",
                "in_stack_ffffffb4": "char_ptr_param"
            },
            "code": "double calculate_0800981c(double x, double y)\n{\n  char version;\n  undefined *fdlib_version_ptr;\n  int is_finite;\n  undefined4 *errno_ptr;\n  double result;\n  double temp_result;\n  double temp_result_2;\n  double temp_result_3;\n  double temp_result_4;\n  int int_param;\n  char *char_ptr_param;\n  \n  fdlib_version_ptr = PTR___fdlib_version_080098cc;\n  result = (double)__ieee754_calculate_0800981c();\n  is_finite = finite((double)CONCAT44(char_ptr_param,int_param));\n  temp_result = extraout_d0;\n  if (((*fdlib_version_ptr != -1) && (is_finite == 0)) && ((is_finite = finite((double)CONCAT44(char_ptr_param,int_param))), temp_result_2 = extraout_d0_00, is_finite != 0) && ((is_finite = finite((double)CONCAT44(char_ptr_param,int_param))), temp_result_3 = extraout_d0_01, is_finite != 0 && (((version = *fdlib_version_ptr, version != '\\0' && (version == '\\x02')) || (is_finite = matherr((exception *)&stack0xffffffb0), temp_result_4 = extraout_d0_03, is_finite == 0)))))\n  {\n    errno_ptr = (undefined4 *)__errno();\n    *errno_ptr = 0x22;\n    result = extraout_d0_02;\n  }\n  return result;\n}",
            "called": [
                "finite",
                "__ieee754_hypot",
                "__errno",
                "matherr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "mc_arc",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "calculate_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "DAT_080059f4": "data_ptr"
            },
            "code": "HAL_StatusTypeDef initialize_system_080059b4(void)\n{\n  uint32_t *DAT_080059f4 = DAT_080059f4;\n  *DAT_080059f4 |= 0x200;\n  *DAT_080059f4 |= 0x400;\n  *DAT_080059f4 |= 0x100;\n  HAL_SYSTICK_Config(16000);\n  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_SYSTICK_Config",
                "HAL_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_system_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "FUN_08006c04": "calculatePriority_08006c04",
                "Priority": "priorityValue",
                "PriorityGroup": "priorityGroupValue",
                "pPreemptPriority": "preemptPriority",
                "pSubPriority": "subPriority",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits",
                "PriorityGroupTmp": "priorityGroupTemp",
                "uVar1": "priorityGroup",
                "uVar2": "priorityGroupInverse"
            },
            "code": "void calculatePriority_08006c04(uint32_t priorityValue, uint32_t priorityGroupValue, uint32_t *preemptPriority, uint32_t *subPriority) {\n  uint32_t subPriorityBits = 0;\n  uint32_t preemptPriorityBits = 0;\n  uint32_t priorityGroupTemp = 0;\n  uint32_t priorityGroup = priorityGroupValue & 7;\n  uint32_t priorityGroupInverse = 7 - priorityGroup;\n  if (priorityGroupInverse > 3) {\n    priorityGroupInverse = 4;\n  }\n  if (priorityGroup + 4 < 7) {\n    priorityGroup = 0;\n  }\n  else {\n    priorityGroup -= 3;\n  }\n  *preemptPriority = (1 << (priorityGroupInverse & 0xff)) - 1U & priorityValue >> (priorityGroup & 0xff);\n  *subPriority = (1 << (priorityGroup & 0xff)) - 1U & priorityValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "imported": false,
            "current_name": "calculatePriority_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "calculate_trapezoid_for_all_blocks_08002e08",
                "pbVar1": "current_block",
                "next": "next_block",
                "block_index": "block_index",
                "PTR_block_buffer_tail_08002ed0": "PTR_block_buffer_tail",
                "PTR_block_buffer_head_08002ed8": "PTR_block_buffer_head",
                "PTR_block_buffer_08002ed4": "PTR_block_buffer",
                "uVar2": "result",
                "block_t": "block",
                "__aeabi_fdiv": "divide_floats",
                "recalculate_flag": "recalculate_flag",
                "entry_speed": "entry_speed",
                "nominal_speed": "nominal_speed",
                "calculate_trapezoid_for_block": "calculate_trapezoid_for_block",
                "next_block_index": "next_block_index"
            },
            "code": "void calculate_trapezoid_for_all_blocks_08002e08(void)\n{\n  block_t *current_block;\n  block_t *next_block;\n  uint8_t block_index;\n  \n  block_index = *PTR_block_buffer_08002ed4_tail_08002ed0_08002ed0;\n  next_block = NULL;\n  while (block_index != *PTR_block_buffer_08002ed4_head_08002ed8_08002ed8) {\n    current_block = (block_t *)(PTR_block_buffer_08002ed4_08002ed4 + (uint)block_index * 0x40);\n    if ((next_block != NULL) && ((next_block->recalculate_flag != 0 || (current_block->recalculate_flag != 0)))) {\n      float next_block_entry_speed = __aeabi_fdiv(next_block->entry_speed, next_block->nominal_speed);\n      float current_block_entry_speed = __aeabi_fdiv(current_block->entry_speed, current_block->nominal_speed);\n      calculate_trapezoid_for_block(next_block, next_block_entry_speed, next_block_entry_speed);\n      next_block->recalculate_flag = 0;\n    }\n    block_index = next_block_index(block_index);\n    next_block = current_block;\n  }\n  float next_block_entry_speed = __aeabi_fdiv(next_block->entry_speed, next_block->nominal_speed);\n  calculate_trapezoid_for_block(next_block, 0, next_block_entry_speed);\n  next_block->recalculate_flag = 0;\n  return;\n}",
            "called": [
                "calculate_trapezoid_for_block",
                "next_block_index",
                "__aeabi_fdiv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "planner_recalculate"
            ],
            "imported": false,
            "current_name": "calculate_trapezoid_for_all_blocks_08002e08"
        },
        "FUN_08005bc4": {
            "renaming": {
                "FUN_08005bc4": "clear_dat_pointer_08005bc4",
                "DAT_08005bd8": "data_pointer"
            },
            "code": "void clear_dat_pointer_08005bc4(void)\n{\n  *DAT_08005bd8 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc4",
            "calling": [],
            "imported": false,
            "current_name": "clear_dat_pointer_08005bc4"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "get_HCLK_frequency_divider_08006680",
                "uVar1": "HCLK_freq",
                "uVar2": "leading_zeroes",
                "result": "APBAHB_presc_value",
                "result_1": "unused",
                "PTR_APBAHBPrescTable_080066c8": "APBAHB_presc_table",
                "DAT_080066c4": "unknown_data"
            },
            "code": "uint32_t get_HCLK_frequency_divider_08006680(void)\n{\n  uint32_t HCLK_freq = HAL_RCC_GetHCLKFreq();\n  uint leading_zeroes = count_leading_zeroes(0x380000);\n  uint32_t* PTR_APBAHBPrescTable_080066c8 = PTR_APBAHBPrescTable_080066c8;\n  uint APBAHB_presc_index = (*(uint *)(DAT_080066c4 + 8) & 0x1c00) >> (leading_zeroes & 0xff);\n  uint32_t APBAHB_presc_value = PTR_APBAHBPrescTable_080066c8[APBAHB_presc_index];\n  return HCLK_freq >> APBAHB_presc_value;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "set_baud_rate"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divider_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "addr": "address",
                "new_value": "data",
                "PTR_eeprom_ready_0800036c": "eeprom_ready",
                "eeprom_init": "initialize_eeprom",
                "PTR_eeprom_data_08000370": "eeprom_data"
            },
            "code": "void write_to_eeprom_08000340(uint address, uchar data) {\n                      if (*PTR_eeprom_ready_0800036c == 0) {\n                        initialize_eeprom();\n                      }\n                      PTR_eeprom_data_08000370[address & 0x3ff] = data;\n                    }",
            "called": [
                "eeprom_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "memcpy_to_eeprom_with_checksum",
                "write_global_settings"
            ],
            "imported": false,
            "current_name": "write_to_eeprom_08000340"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "write_coord_data_to_eeprom_08004bf4",
                "coord_select": "coord_selection",
                "coord_data": "coord_data_array",
                "addr": "address"
            },
            "code": "void write_coord_data_to_eeprom_08004bf4(uint8_t coord_select, float *coord_data) {\n\tuint16_t address = (coord_select * 13) + 512;\n\tmemcpy_to_eeprom_with_checksum(address, (char *)coord_data, 12);\n\treturn;\n}",
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "settings_read_coord_data",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "write_coord_data_to_eeprom_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "FUN_08004d7c": "read_coordinate_data_08004d7c",
                "coord_select": "selected_coordinate",
                "coord_data": "coordinate_data",
                "iVar1": "read_result",
                "addr": "unused_variable"
            },
            "code": "bool read_coordinate_data_08004d7c(uint8_t selected_coordinate, float *coordinate_data)\n{\n    int read_result = memcpy_from_eeprom_with_checksum((char *)coordinate_data, (uint)(ushort)((ushort)selected_coordinate * 0xd + 0x200), 0xc);\n    if (read_result == 0)\n    {\n        memset(coordinate_data, 0, 0xc);\n        settings_write_coordinate_data(selected_coordinate, coordinate_data);\n    }\n    return read_result != 0;\n}",
            "called": [
                "settings_write_coord_data",
                "memset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "gc_init",
                "report_gcode_parameters",
                "gc_execute_line",
                "settings_init"
            ],
            "imported": false,
            "current_name": "read_coordinate_data_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "FUN_08009278": "convert_to_integer_08009278",
                "param_1": "input",
                "uVar1": "leading_bits",
                "uVar2": "difference",
                "mask": "mask",
                "result": "result"
            },
            "code": "uint convert_to_integer_08009278(uint input){\n  uint threshold = 0x7f000000;\n  uint shift_amount = 0x18;\n  uint mask = 0xff;\n  uint result = 0;\n  uint leading_bits = (input << 1) >> shift_amount;\n  uint difference = 0x9e - leading_bits;\n  if (input << 1 < threshold) {\n    return 0;\n  }\n  if (leading_bits < 0x9f && difference != 0) {\n    result = (input << 8 | 0x80000000) >> (difference & mask);\n    if ((input & 0x80000000) != 0) {\n      result = -result;\n    }\n    return result;\n  }\n  if ((difference == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "protocol_execute_line",
                "printFloat"
            ],
            "imported": false,
            "current_name": "convert_to_integer_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUN_080004fc": "convert_ints_to_floats_and_divide_080004fc",
                "x": "x_float",
                "y": "y_float",
                "z": "z_float",
                "uVar1": "float_input",
                "x_input": "x_int",
                "y_input": "y_int",
                "z_input": "z_int"
            },
            "code": "void convert_ints_to_floats_and_divide_080004fc(int32_t x_input, int32_t y_input, int32_t z_input) {\n  float x = (float)x_input / *(float *)PTR_settings_08000564;\n  float y = (float)y_input / *(float *)(PTR_settings_08000564 + 4);\n  float z = (float)z_input / *(float *)(PTR_settings_08000564 + 8);\n  *(float *)(PTR_gc_08000568 + 0xc) = x;\n  *(float *)(PTR_gc_08000568 + 0x10) = y;\n  *(float *)(PTR_gc_08000568 + 0x14) = z;\n}",
            "called": [
                "__aeabi_fdiv",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "sys_sync_current_position"
            ],
            "imported": false,
            "current_name": "convert_ints_to_floats_and_divide_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "FUN_08000220": "coolant_mode_control_08000220",
                "mode": "coolant_mode",
                "*PTR_current_coolant_mode_08000264": "current_coolant_mode",
                "plan_synchronize": "synchronize_plans",
                "COOLANT_FLOOD_MODE": "1",
                "coolant_flood_on": "turn_on_coolant_flood",
                "COOLANT_MIST_MODE": "2",
                "coolant_mist_on": "turn_on_coolant_mist",
                "coolant_stop": "stop_coolant"
            },
            "code": "void coolant_mode_control_08000220(uint8_t mode)\n{\n  if (mode != *PTR_*PTR_current_coolant_mode_08000264_08000264) {\n    plan_synchronize();\n    if (mode == COOLANT_FLOOD_MODE) {\n      coolant_flood_on();\n    }\n    else if (mode == COOLANT_MIST_MODE) {\n      coolant_mist_on();\n    }\n    else {\n      coolant_stop();\n    }\n    *PTR_*PTR_current_coolant_mode_08000264_08000264 = mode;\n  }\n  return;\n}",
            "called": [
                "plan_synchronize",
                "coolant_stop",
                "coolant_mist_on",
                "coolant_flood_on"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "coolant_mode_control_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "stop_spindle_direction_08005238",
                "PTR_current_direction_0800524c": "current_direction"
            },
            "code": "void stop_spindle_direction_08005238(void)\n{\n  *PTR_current_direction_0800524c = 0;\n  stop_spindle();\n  return;\n}",
            "called": [
                "spindle_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "stop_spindle_direction_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "set_timer_interrupt_flag_08007da8",
                "puVar1": "timer_flag_ptr",
                "TIMx": "timer_instance",
                "DAT_08007dd4": "timer_flag_array"
            },
            "code": "void set_timer_interrupt_flag_08007da8(void)\n{\n    uint *timer_flag_ptr;\n    TIM_TypeDef *timer_instance;\n\n    timer_flag_ptr = DAT_08007dd4;\n    DAT_08007dd4[8] |= 0x10;\n    *timer_flag_ptr |= 1;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "timers_init"
            ],
            "imported": false,
            "current_name": "set_timer_interrupt_flag_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "FUN_08004148": "printAlarm_08004148",
                "alarm_code": "alarmCode",
                "PTR_s_ALARM__08004190": "alarmMsg",
                "PTR_s_Abort_during_cycle_08004198": "abortMsg",
                "PTR_s_Hard_limit_08004194": "hardLimitMsg",
                "PTR_s___MPos__0800419c": "mPosMsg"
            },
            "code": "void printAlarm_08004148(int8_t alarmCode)\n{\n    printPgmString(PTR_s_ALARM__08004190);\n    if (alarmCode == -2) {\n        printPgmString(PTR_s_Abort_during_cycle_08004198);\n    }\n    else if (alarmCode == -1) {\n        printPgmString(PTR_s_Hard_limit_08004194);\n    }\n    printPgmString(PTR_s___MPos__0800419c);\n    delay_ms(500);\n    return;\n}",
            "called": [
                "printPgmString",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "protocol_execute_runtime"
            ],
            "imported": false,
            "current_name": "printAlarm_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUN_08004940": "printCurrentAndWorkPosition_08004940",
                "uVar1": "unsignedInt1",
                "fVar2": "float1",
                "extraout_s0": "float2",
                "extraout_s0_00": "float3",
                "extraout_s0_01": "float4",
                "extraout_s0_02": "float5",
                "uVar3": "unsignedLong1",
                "uVar4": "unsignedLong2",
                "print_position": "printPosition",
                "current_position": "currentPosition",
                "i": "axisIndex",
                "PTR_sys_08004b88": "currentPositionPointer",
                "PTR_settings_08004bac": "axisScalingFactorsPointer",
                "PTR_gc_08004bb8": "axisOffsetPointer",
                "PTR_s__MPos__08004ba8": "messageCurrentPositionPointer",
                "PTR_DAT_08004bb0": "messageSeparatorPointer",
                "PTR_s_WPos__08004bb4": "messageWorkPositionPointer",
                "PTR_DAT_08004bbc": "messageEndPointer",
                "switchD_0800495e::switchdataD_08004964": "switchJumpTable"
            },
            "code": "void printCurrentAndWorkPosition_08004940(void)\n{\n  uint8_t axisIndex;\n  int32_t currentPosition[3];\n  float printPosition[3];\n  uint8_t i;\n  \n  currentPosition[0] = *(int32_t *)(PTR_sys_08004b88 + 4);\n  currentPosition[1] = *(int32_t *)(PTR_sys_08004b88 + 8);\n  currentPosition[2] = *(int32_t *)(PTR_sys_08004b88 + 0xc);\n  if ((byte)PTR_sys_08004b88[1] < 8) {\n    (*(code *)(&switchD_0800495e::switchdataD_08004964)[(byte)PTR_sys_08004b88[1]])();\n    return;\n  }\n  printPgmString(PTR_s__MPos__08004ba8);\n  for (axisIndex = 0; axisIndex < 3; axisIndex++) {\n    float currentAxisPosition = (float)currentPosition[axisIndex];\n    float axisScalingFactor = *(float *)(PTR_settings_08004bac + (uint)axisIndex * 4);\n    float axisPosition = currentAxisPosition / axisScalingFactor;\n    printPosition[axisIndex] = axisPosition;\n    if ((PTR_settings_08004bac[0x28] & 1) != 0) {\n      axisPosition *= *(float *)(&DAT_08004b80 + (uint)axisIndex * 4);\n      printPosition[axisIndex] = axisPosition;\n    }\n    printFloat(axisPosition);\n    printPgmString(PTR_DAT_08004bb0);\n  }\n  printPgmString(PTR_s_WPos__08004bb4);\n  for (axisIndex = 0; axisIndex < 3; axisIndex++) {\n    if ((PTR_settings_08004bac[0x28] & 1) == 0) {\n      float axisPosition = printPosition[axisIndex] - *(float *)(PTR_gc_08004bb8 + (axisIndex + 8) * 4 + 4);\n      printPosition[axisIndex] = axisPosition;\n    }\n    else {\n      float currentAxisPosition = printPosition[axisIndex];\n      float axisPositionOffset = *(float *)(PTR_gc_08004bb8 + (axisIndex + 8) * 4 + 4);\n      float axisPosition = currentAxisPosition - axisPositionOffset;\n      axisPosition *= *(float *)(&DAT_08004b80 + (uint)axisIndex * 4);\n      printPosition[axisIndex] = axisPosition;\n    }\n    printFloat(printPosition[axisIndex]);\n    if (axisIndex < 2) {\n      printPgmString(PTR_DAT_08004bb0);\n    }\n  }\n  printPgmString(PTR_DAT_08004bbc);\n  return;\n}",
            "called": [
                "__addsf3",
                "__aeabi_f2d",
                "__truncdfsf2",
                "__aeabi_fsub",
                "__muldf3",
                "printPgmString",
                "__floatsisf",
                "__aeabi_fdiv",
                "__subdf3",
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "protocol_execute_runtime"
            ],
            "imported": false,
            "current_name": "printCurrentAndWorkPosition_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_zero",
                "bVar3": "is_condition_met"
            },
            "code": "uint check_parameters_08008a74(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n    uint xor_result;\n    bool is_zero;\n    bool is_condition_met;\n\n    if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n        ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n          (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n        return 1;\n    }\n    is_zero = (first_param | second_param << 1) == 0;\n    if (is_zero) {\n        is_zero = (third_param | fourth_param << 1) == 0;\n    }\n    if (!is_zero) {\n        is_zero = second_param == fourth_param;\n    }\n    if (is_zero) {\n        is_zero = first_param == third_param;\n    }\n    if (!is_zero) {\n        xor_result = second_param ^ fourth_param;\n        is_zero = xor_result == 0;\n        if (-1 < (int)xor_result) {\n            is_zero = second_param == fourth_param;\n        }\n        is_condition_met = -1 < (int)xor_result && fourth_param <= second_param;\n        if (is_zero) {\n            is_condition_met = third_param <= first_param;\n        }\n        fourth_param = (int)fourth_param >> 0x1f;\n        if (!is_condition_met) {\n            fourth_param = ~fourth_param;\n        }\n        return fourth_param | 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "check_parameters_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "FUN_08002fd4": "execute_protocol_until_block_complete_08002fd4",
                "pbVar1": "current_block"
            },
            "code": "void execute_protocol_until_block_complete_08002fd4(void)\\n{\\n  block_t *current_block;\\n  while ((current_block = plan_get_current_block(), current_block != (block_t *)0x0 || (PTR_sys_08003000[1] == \"\\x03\"))) {\\n    protocol_execute_runtime();\\n    if (*PTR_sys_08003000 != \"\\0\") {\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "plan_get_current_block",
                "protocol_execute_runtime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "coolant_run",
                "mc_go_home",
                "spindle_run",
                "mc_dwell",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "execute_protocol_until_block_complete_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "FUN_08002408": "synchronize_delay_08002408",
                "seconds": "time_in_seconds",
                "ms": "milliseconds",
                "in_r0": "frequency",
                "uVar1": "time_in_milliseconds",
                "uVar2": "time_in_milliseconds_without_offset",
                "extraout_r1": "unused_variable",
                "extraout_r1_00": "unused_variable",
                "in_stack_ffffffe0": "unused_variable",
                "i": "iterations"
            },
            "code": "void synchronize_delay_08002408(float seconds)\\n{\\n  uint16_t milliseconds;\\n  float frequency = 1000.0f / 50.0f;\\n  float time_in_seconds = seconds;\\n  float time_in_milliseconds = time_in_seconds * 1000.0f;\\n  float time_in_milliseconds_without_offset = time_in_milliseconds - (50 * (float)((int)(time_in_milliseconds / frequency)));\\n  milliseconds = (uint16_t)time_in_milliseconds_without_offset;\\n  delay_ms(milliseconds);\\n  while ((time_in_seconds > 0) && (protocol_execute_runtime(), *PTR_sys_080024c0 == \"\\0\")) {\\n    _delay_ms(50);\\n    time_in_seconds -= 0.05f;\\n  }\\n  return;\\n}",
            "called": [
                "floor",
                "plan_synchronize",
                "__aeabi_fmul",
                "_delay_ms",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "protocol_execute_runtime",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "synchronize_delay_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "FUN_08002a94": "iterate_blocks_08002a94",
                "next": "current_block",
                "previous": "previous_block",
                "block": "blocks",
                "block_index": "block_index",
                "*PTR_block_buffer_head_08002af0": "*block_buffer_head",
                "*PTR_block_buffer_tail_08002af8": "*block_buffer_tail",
                "PTR_block_buffer_08002af4": "block_buffer",
                "FUN_08002a94_kernel": "process_block"
            },
            "code": "void iterate_blocks_08002a94()\n{\n  block_t *current_block;\n  block_t *previous_block;\n  block_t *blocks[2];\n  uint8_t block_index;\n  \n  block_index = *PTR_PTR_block_buffer_08002af4_head_08002af0;\n  blocks[0] = NULL;\n  blocks[1] = NULL;\n  while (block_index != *PTR_PTR_block_buffer_08002af4_tail_08002af8) {\n    block_index = prev_block_index(block_index);\n    blocks[1] = blocks[0];\n    previous_block = (block_t *)(PTR_PTR_block_buffer_08002af4_08002af4 + (uint)block_index * 0x40);\n    iterate_blocks_08002a94_kernel(previous_block, blocks[0], current_block);\n    blocks[0] = previous_block;\n  }\n  return;\n}",
            "called": [
                "planner_reverse_pass_kernel",
                "prev_block_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "planner_recalculate"
            ],
            "imported": false,
            "current_name": "iterate_blocks_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "FUN_08003618": "calculate_block_step_events_remaining_08003618",
                "step_events_remaining": "remaining_events",
                "bVar1": "buffer_byte",
                "puVar2": "block_buffer_ptr",
                "uVar3": "event_time",
                "uVar4": "event_rate",
                "block": "block"
            },
            "code": "void calculate_block_step_events_remaining_08003618(int32_t remaining_events) {\n  byte buffer_byte;\n  undefined *block_buffer_ptr;\n  undefined4 event_time;\n  undefined4 event_rate;\n  block_t *block;\n  \n  block_buffer_ptr = PTR_block_buffer_08003698;\n  buffer_byte = *PTR_block_buffer_tail_08003694;\n  event_rate = *(undefined4 *)(PTR_block_buffer_08003698 + (uint)buffer_byte * 0x40 + 0x20);\n  event_time = __floatsisf(remaining_events);\n  event_time = __aeabi_fmul(event_rate, event_time);\n  event_rate = __floatsisf(*(undefined4 *)(block_buffer_ptr + (uint)buffer_byte * 0x40 + 0x10));\n  event_time = __aeabi_fdiv(event_time, event_rate);\n  *(undefined4 *)(block_buffer_ptr + (uint)buffer_byte * 0x40 + 0x20) = event_time;\n  *(int32_t *)(block_buffer_ptr + (uint)buffer_byte * 0x40 + 0x10) = remaining_events;\n  *(undefined4 *)(block_buffer_ptr + (uint)buffer_byte * 0x40 + 0x18) = 0;\n  *(undefined4 *)(block_buffer_ptr + (uint)buffer_byte * 0x40 + 0x1c) = 0;\n  block_buffer_ptr[(uint)buffer_byte * 0x40 + 0x25] = 0;\n  block_buffer_ptr[(uint)buffer_byte * 0x40 + 0x24] = 1;\n  planner_recalculate();\n  return;\n}",
            "called": [
                "planner_recalculate",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "st_cycle_reinitialize"
            ],
            "imported": false,
            "current_name": "calculate_block_step_events_remaining_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "spindle_run"
            ],
            "imported": false,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "FUNC_0800af78"
            },
            "code": "\ndouble FUNC_0800af78(double __x)\n\n{\n  undefined *puVar1;\n  int in_r0;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint in_r1;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 extraout_r1;\n  uint uVar6;\n  int iVar7;\n  double in_d0;\n  double dVar8;\n  double extraout_d0;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  undefined4 in_stack_ffffffd0;\n  uint uVar11;\n  \n  uVar6 = in_r1 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uVar6) {\n    if ((uVar6 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uVar6) ||\n       ((uVar6 == DAT_0800b29c && (in_r0 != 0)))) {\n      dVar8 = (double)__aeabi_dadd();\n      return dVar8;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uVar6) {\n      fabs((double)CONCAT44(in_r1,in_stack_ffffffd0));\n      if (DAT_0800b2bc < (int)uVar6) {\n        if ((int)uVar6 < DAT_0800b2c0) {\n          uVar9 = __subdf3();\n          uVar10 = __muldf3(in_r0,extraout_r1,0,DAT_0800b2c4);\n          uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n          uVar9 = __divdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                           (int)((ulonglong)uVar10 >> 0x20));\n          uVar11 = (uint)((ulonglong)uVar9 >> 0x20);\n          in_r0 = (int)uVar9;\n          iVar7 = 2;\n        }\n        else {\n          uVar9 = __divdf3(0,DAT_0800b2c8,in_r0,extraout_r1);\n          uVar11 = (uint)((ulonglong)uVar9 >> 0x20);\n          in_r0 = (int)uVar9;\n          iVar7 = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uVar6) {\n        uVar9 = __subdf3();\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,DAT_0800b2b8);\n        uVar9 = __divdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n        uVar11 = (uint)((ulonglong)uVar9 >> 0x20);\n        in_r0 = (int)uVar9;\n        iVar7 = 1;\n      }\n      else {\n        uVar9 = __aeabi_dadd();\n        uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        uVar10 = __aeabi_dadd(in_r0,extraout_r1,0,0x40000000);\n        uVar9 = __divdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n        uVar11 = (uint)((ulonglong)uVar9 >> 0x20);\n        in_r0 = (int)uVar9;\n        iVar7 = 0;\n      }\n    }\n    else {\n      uVar11 = in_r1;\n      if ((int)uVar6 <= DAT_0800b2ac + -0x1bc0000) {\n        uVar9 = __aeabi_dadd(in_r0,in_r1,DAT_0800b290,DAT_0800b294);\n        iVar7 = __aeabi_dcmpgt((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        if (iVar7 != 0) {\n          return extraout_d0;\n        }\n      }\n      iVar7 = -1;\n    }\n    uVar9 = __muldf3(in_r0,uVar11,in_r0);\n    uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar2 = (undefined4)uVar9;\n    uVar9 = __muldf3(uVar2,uVar4,uVar2,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar3 = (undefined4)uVar9;\n    uVar9 = __muldf3(uVar3,uVar5,DAT_0800b238,DAT_0800b23c);\n    uVar9 = __aeabi_dadd((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar5);\n    uVar9 = __aeabi_dadd((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar5);\n    uVar9 = __aeabi_dadd((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar5);\n    uVar9 = __aeabi_dadd((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar5);\n    uVar9 = __aeabi_dadd((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar2,uVar4);\n    uVar2 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar10 = __muldf3(uVar3,uVar5,DAT_0800b268,DAT_0800b26c);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar3,uVar5);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar7 == -1) {\n      uVar9 = __aeabi_dadd((int)uVar9,uVar2,(int)uVar10,uVar3);\n      uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),in_r0,uVar11);\n      dVar8 = (double)__subdf3(in_r0,uVar11,(int)uVar9,(int)((ulonglong)uVar9 >> 0x20));\n      return dVar8;\n    }\n    uVar9 = __aeabi_dadd((int)uVar9,uVar2,(int)uVar10,uVar3);\n    puVar1 = PTR_FUNC_0800af78hi_0800b2b0;\n    uVar9 = __muldf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),in_r0,uVar11);\n    uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),\n                     *(undefined4 *)(PTR_FUNC_0800af78lo_0800b2b4 + iVar7 * 8),\n                     *(undefined4 *)((int)(PTR_FUNC_0800af78lo_0800b2b4 + iVar7 * 8) + 4));\n    uVar9 = __subdf3((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),in_r0,uVar11);\n    in_d0 = (double)__subdf3(*(undefined4 *)(puVar1 + iVar7 * 8),\n                             *(undefined4 *)((int)(puVar1 + iVar7 * 8) + 4),(int)uVar9,\n                             (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)in_r1 < 0) {\n      return in_d0;\n    }\n  }\n  return in_d0;\n}\n\n",
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "__muldf3",
                "fabs",
                "__subdf3",
                "__divdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800af78",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "FUNC_0800af78"
        },
        "FUN_08005b20": {
            "renaming": {
                "FUN_08005b20": "clear_least_significant_bit_of_second_uint_in_dat_08005b38_08005b20",
                "DAT_08005b38": "dat_08005b38",
                "PTR_08005b3c": "ptr_08005b3c"
            },
            "code": "void clear_least_significant_bit_of_second_uint_in_dat_08005b38_08005b20(void)\n{\n  uint* second_uint_ptr = (uint*)(DAT_08005b38 + 4);\n  uint second_uint_value = *second_uint_ptr;\n  uint cleared_second_uint_value = second_uint_value & 0xfffffffe;\n  *second_uint_ptr = cleared_second_uint_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b20",
            "calling": [],
            "imported": false,
            "current_name": "clear_least_significant_bit_of_second_uint_in_dat_08005b38_08005b20"
        },
        "FUN_08007d08": {
            "renaming": {
                "FUN_08007d08": "initialize_timer_08007d08",
                "pTVar1": "timer",
                "TIMx": "timer_to_initialize",
                "DAT_08007d9c": "timer_to_initialize",
                "DAT_08007da4": "timer_prescaler",
                "PTR_SystemCoreClock_08007da0": "system_core_clock_pointer"
            },
            "code": "void initialize_timer_08007d08(void)\n{\n  TIM_TypeDef *timer;\n  timer = DAT_08007d9c;\n  enable_timer_clock(DAT_08007d9c);\n  timer->CR1 = 0x80;\n  timer->CR2 = 0;\n  timer->SMCR = 0;\n  timer->DIER = 0;\n  timer->SR = 0;\n  timer->CCMR1 = 0x6800;\n  timer->CCMR2 = 0;\n  timer->CCER = 0;\n  timer->CNT = 0;\n  timer->PSC = (uint)((ulonglong)DAT_08007da4 * (ulonglong)*(uint *)PTR_SystemCoreClock_08007da0 >> 0x35) - 1;\n  timer->ARR = 199;\n  timer->CCR1 = 0;\n  timer->CCR2 = 100;\n  timer->CCR3 = 0;\n  timer->CCR4 = 0;\n  timer->DCR = 0;\n  timer->DMAR = 0;\n  timer->EGR = 1;\n  return;\n}",
            "called": [
                "enable_tim_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "timers_init"
            ],
            "imported": false,
            "current_name": "initialize_timer_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "first_float",
                "param_2": "second_float"
            },
            "code": "void compare_floats_080091fc(float first_float, float second_float) {\n    __aeabi_cfcmpeq(second_float, first_float);\n    return;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "imported": false,
            "current_name": "compare_floats_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "FUN_080058a0": "initialize_cycle_plan_080058a0",
                "PTR_current_block_080058f0": "current_block",
                "PTR_sys_080058fc": "system",
                "PTR_st_080058f4": "st",
                "DAT_080058f8": "cycle_length"
            },
            "code": "void initialize_cycle_plan_080058a0(){\n    if (*PTR_current_block_080058f0 == 0) {\n        PTR_sys_080058fc[1] = 0;\n    }\n    else {\n        int DAT_080058f8 = *(int *)(*PTR_current_block_080058f0 + 0x10) - *(int *)(PTR_st_080058f4 + 0x10);\n        plan_cycle_reinitialize(DAT_080058f8);\n        *(int *)(PTR_st_080058f4 + 0x1c) = 0;\n        set_PTR_st_080058f4ep_events_per_minute(*(uint32_t *)(PTR_st_080058f4 + 0x1c));\n        *(int *)(PTR_st_080058f4 + 0x18) = DAT_080058f8;\n        *(int *)(PTR_st_080058f4 + 0x10) = 0;\n        PTR_sys_080058fc[1] = 2;\n    }\n    return;\n}",
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "protocol_execute_runtime"
            ],
            "imported": false,
            "current_name": "initialize_cycle_plan_080058a0"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "compare_values_08008a6c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "result",
                "uVar1": "xor_value",
                "bVar2": "values_are_zero",
                "bVar3": "second_value_is_greater"
            },
            "code": "uint compare_values_08008a6c(uint value1, uint value2, uint value3, uint value4) {\n  bool values_are_zero = (value1 | (value2 << 1)) == 0 && (value3 | (value4 << 1)) == 0;\n  if (values_are_zero) {\n    return 0;\n  }\n  bool values_are_equal = value2 == value4 && value1 == value3;\n  if (values_are_equal) {\n    return 1;\n  }\n  uint xor_value = value2 ^ value4;\n  bool xor_value_is_negative = (int)xor_value < 0;\n  bool second_value_is_greater = xor_value_is_negative && value4 <= value2;\n  bool first_value_is_greater = !xor_value_is_negative && value2 <= value4;\n  uint result = xor_value_is_negative ? ~((int)value4 >> 0x1f) : (int)value4 >> 0x1f;\n  return result | (second_value_is_greater || first_value_is_greater ? 0 : 1);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [],
            "imported": false,
            "current_name": "compare_values_08008a6c"
        },
        "FUN_080036c6": {
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "s": "str",
                "local_c": "byte_ptr"
            },
            "code": "void print_string_080036c6(char *str)\n{\n  uint8_t *byte_ptr;\n  byte_ptr = (uint8_t *)str;\n  while (*byte_ptr != '\\0') {\n    serial_write(*byte_ptr);\n    byte_ptr++;\n  }\n  return;\n}",
            "called": [
                "serial_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "report_feedback_message",
                "report_init_message",
                "report_alarm_message",
                "report_grbl_help",
                "report_realtime_status",
                "report_gcode_parameters",
                "report_status_message",
                "report_grbl_settings",
                "report_startup_line",
                "report_gcode_modes"
            ],
            "imported": false,
            "current_name": "print_string_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "FUN_08008190": "initialize_USART_08008190",
                "usart_00": "usart_ptr",
                "usart": "usart",
                "val": "val"
            },
            "code": "void initialize_USART_08008190(void)\n{\n  USART_TypeDef *usart;\n  USART_TypeDef *usart_ptr = DAT_08008240;\n  enable_usart_clock(usart_ptr);\n  usart_ptr->CR1 &= ~USART_CR1_OVER8;\n  usart_ptr->CR1 = (usart_ptr->CR1 & 0xffff400c) | USART_CR1_TE | USART_CR1_RE;\n  usart_ptr->CR2 &= ~USART_CR2_STOP;\n  usart_ptr->CR3 &= ~USART_CR3_CTSE & ~USART_CR3_RTSE;\n  usart_ptr->SR &= ~USART_SR_TC & ~USART_SR_RXNE & ~USART_SR_TXE;\n  set_baud_rate(usart_ptr, 0x1c200);\n  usart_ptr->GTPR = 0;\n  usart_ptr->CR1 |= USART_CR1_UE;\n}",
            "called": [
                "enable_usart_clock",
                "set_baud_rate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_USART_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "FUN_080074c8": "handle_bits_080074c8",
                "bits": "bits",
                "PTR_limits_enabled_08007518": "limits_enabled",
                "PTR_buttons_enabled_0800751c": "buttons_enabled",
                "is_bit_set": "is_bit_set",
                "are_limits_triggered": "are_limits_triggered",
                "is_button_pressed": "is_button_pressed"
            },
            "code": "void handle_bits_080074c8(uint32_t bits)\n{\n  bool is_bit_set = (bits & 1);\n  bool PTR_limits_enabled_08007518 = (*(int *)PTR_PTR_limits_enabled_08007518_08007518 != 0);\n  bool are_limits_triggered = ((bits & 0x1e) != 0);\n  bool PTR_buttons_enabled_0800751c = (*(int *)PTR_PTR_buttons_enabled_0800751c_0800751c != 0);\n  bool is_button_pressed = ((bits & 0x80) != 0);\n\n  if (is_bit_set) {\n    gpio_set(0x3e);\n  }\n  if (PTR_limits_enabled_08007518 && are_limits_triggered) {\n    limits_isr();\n  }\n  if (PTR_buttons_enabled_0800751c && is_button_pressed) {\n    buttons_isr(bits);\n  }\n  return;\n}",
            "called": [
                "buttons_isr",
                "limits_isr",
                "gpio_set"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "debounce_isr"
            ],
            "imported": false,
            "current_name": "handle_bits_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "memset_custom_0800b430",
                "__s": "ptr",
                "__c": "value",
                "__n": "num",
                "uVar1": "uint_1",
                "puVar2": "ptr_uint",
                "puVar3": "ptr_uint_3",
                "puVar4": "ptr_uint_4",
                "uVar5": "uint_5",
                "bVar6": "bool_6"
            },
            "code": "void* memset_custom_0800b430(void* ptr, int value, size_t num) {\n    uint uVar1;\n    uint* ptr_uint = (uint*)ptr;\n    uint* ptr_uint_2;\n    uint* ptr_uint_3;\n    uint* ptr_uint_4;\n    uint uint_5;\n    bool bool_6;\n    \n    if (((uint)ptr & 3) != 0) {\n        uint_5 = num - 1;\n        ptr_uint_3 = (uint*)ptr;\n        if (num == 0) {\n            return ptr;\n        }\n        while(true) {\n            ptr_uint = (uint*)((int)ptr_uint_3 + 1);\n            *(char*)ptr_uint_3 = (char)value;\n            num = uint_5;\n            if (((uint)ptr_uint & 3) == 0) {\n                break;\n            }\n            bool_6 = uint_5 == 0;\n            uint_5 = uint_5 - 1;\n            ptr_uint_3 = ptr_uint;\n            if (bool_6) {\n                return ptr;\n            }\n        }\n    }\n    if (3 < num) {\n        uint_5 = value & 0xffU | (value & 0xffU) << 8;\n        uint_5 = uint_5 | uint_5 << 0x10;\n        if (0xf < num) {\n            ptr_uint_3 = ptr_uint + 4;\n            do {\n                ptr_uint_3[-4] = uint_5;\n                ptr_uint_3[-3] = uint_5;\n                ptr_uint_3[-2] = uint_5;\n                ptr_uint_3[-1] = uint_5;\n                ptr_uint_3 = ptr_uint_3 + 4;\n            } while (ptr_uint_3 != (uint*)((int)ptr_uint + (num - 0x10 & 0xfffffff0) + 0x20));\n            uVar1 = num & 0xc;\n            ptr_uint = ptr_uint + ((num - 0x10 >> 4) + 1) * 4;\n            num = num & 0xf;\n            if (uVar1 == 0) {\n                goto end_of_function;\n            }\n        }\n        ptr_uint_3 = (uint*)((num - 4 & 0xfffffffc) + 4 + (int)ptr_uint);\n        do {\n            ptr_uint_4 = ptr_uint + 1;\n            *ptr_uint = uint_5;\n            ptr_uint = ptr_uint_4;\n        } while (ptr_uint_3 != ptr_uint_4);\n        num = num & 3;\n        ptr_uint = ptr_uint_3;\n    }\n    end_of_function:\n    if (num != 0) {\n        ptr_uint_3 = ptr_uint;\n        do {\n            ptr_uint_4 = (uint*)((int)ptr_uint_3 + 1);\n            *(char*)ptr_uint_3 = (char)value;\n            ptr_uint_3 = ptr_uint_4;\n        } while ((uint*)(num + (int)ptr_uint) != ptr_uint_4);\n    }\n    return ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "settings_read_coord_data",
                "homing_cycle",
                "mc_go_home",
                "gc_init",
                "grbl_main",
                "eeprom_init",
                "debounce_init",
                "plan_init",
                "gc_execute_line",
                "st_reset"
            ],
            "imported": false,
            "current_name": "memset_custom_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "FUN_08004030": "printErrorMessage_08004030",
                "status_code": "statusCode",
                "PTR__etext_08004108": "errorMessage_InvalidArgument",
                "PTR_s_error__0800410c": "errorMessage_Generic",
                "PTR_s_Bad_number_format_08004110": "errorMessage_BadNumberFormat",
                "PTR_s_Expected_command_letter_08004114": "errorMessage_ExpectedCommandLetter",
                "PTR_s_Unsupported_statement_08004118": "errorMessage_UnsupportedStatement",
                "PTR_s_Invalid_radius_0800411c": "errorMessage_InvalidRadius",
                "PTR_s_Modal_group_violation_08004120": "errorMessage_ModalGroupViolation",
                "PTR_s_Invalid_statement_08004124": "errorMessage_InvalidStatement",
                "PTR_s_Setting_disabled_08004128": "errorMessage_SettingDisabled",
                "PTR_s_Value___0_0_0800412c": "errorMessage_Value0_0",
                "PTR_s_Value___3_usec_08004130": "errorMessage_Value3Usec",
                "PTR_s_EEPROM_read_fail__Using_defaults_08004134": "errorMessage_EepromReadFail",
                "PTR_s_Busy_or_queued_08004138": "errorMessage_BusyOrQueued",
                "PTR_s_Alarm_lock_0800413c": "errorMessage_AlarmLock",
                "PTR_s_Line_overflow_08004140": "errorMessage_LineOverflow",
                "PTR_DAT_08004144": "errorMessage_End"
            },
            "code": "void printErrorMessage_08004030(uint8_t statusCode) {\n  if (statusCode == '\\0') {\n    printPgmString(PTR__etext_08004108);\n  }\n  else {\n    printPgmString(PTR_s_error__0800410c);\n    switch(statusCode) {\n      case errorCode_BadNumberFormat:\n        printPgmString(PTR_s_Bad_number_format_08004110);\n        break;\n      case errorCode_ExpectedCommandLetter:\n        printPgmString(PTR_s_Expected_command_letter_08004114);\n        break;\n      case errorCode_UnsupportedStatement:\n        printPgmString(PTR_s_Unsupported_statement_08004118);\n        break;\n      case errorCode_InvalidRadius:\n        printPgmString(PTR_s_Invalid_radius_0800411c);\n        break;\n      case errorCode_ModalGroupViolation:\n        printPgmString(PTR_s_Modal_group_violation_08004120);\n        break;\n      case errorCode_InvalidStatement:\n        printPgmString(PTR_s_Invalid_statement_08004124);\n        break;\n      case errorCode_SettingDisabled:\n        printPgmString(PTR_s_Setting_disabled_08004128);\n        break;\n      case errorCode_Value0_0:\n        printPgmString(PTR_s_Value___0_0_0800412c);\n        break;\n      case errorCode_Value3Usec:\n        printPgmString(PTR_s_Value___3_usec_08004130);\n        break;\n      case errorCode_EepromReadFail:\n        printPgmString(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\n        break;\n      case errorCode_BusyOrQueued:\n        printPgmString(PTR_s_Busy_or_queued_08004138);\n        break;\n      case errorCode_AlarmLock:\n        printPgmString(PTR_s_Alarm_lock_0800413c);\n        break;\n      case errorCode_LineOverflow:\n        printPgmString(PTR_s_Line_overflow_08004140);\n        break;\n    }\n    printPgmString(PTR_DAT_08004144);\n  }\n  return;\n}",
            "called": [
                "printPgmString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "protocol_execute_line",
                "gc_init",
                "report_gcode_parameters",
                "protocol_execute_startup",
                "protocol_process",
                "settings_init"
            ],
            "imported": false,
            "current_name": "printErrorMessage_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "FUN_08005360": "calculate_result_08005360",
                "PTR_st_08005398": "pointer_st",
                "DAT_0800539c": "previous_limit",
                "previous_sum": "previous_sum",
                "current_sum": "current_sum",
                "previous_value": "previous_limit",
                "current_value": "current_value"
            },
            "code": "int calculate_result_08005360(void)\n{\n  int sum = previous_sum + current_sum;\n  uint previous_value = DAT_0800539c;\n  uint current_value = *(uint *)(PTR_st_08005398 + 0x18);\n  if (DAT_0800539c < current_value) {\n    sum -= 420000;\n  }\n  return (uint)(previous_value < current_value);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "step_period_isr"
            ],
            "imported": false,
            "current_name": "calculate_result_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "reset_char_counter_and_comment_flag_08003980",
                "PTR_char_counter_08003998": "char_counter_ptr",
                "PTR_iscomment_0800399c": "is_comment_ptr"
            },
            "code": "void reset_char_counter_and_comment_flag_08003980(void)\n{\n  *PTR_char_counter_08003998 = 0;\n  *PTR_iscomment_0800399c = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "protocol_init",
                "protocol_process"
            ],
            "imported": false,
            "current_name": "reset_char_counter_and_comment_flag_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "get_pending_interrupt_08006de0",
                "IRQn": "interrupt",
                "uVar1": "pending_interrupt"
            },
            "code": "uint32_t get_pending_interrupt_08006de0(IRQn_Type interrupt)\n{\n  uint32_t pending_interrupt;\n  pending_interrupt = NVIC_GetPendingIRQ(interrupt);\n  return pending_interrupt;\n}",
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": false,
            "current_name": "get_pending_interrupt_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "FUN_08007540": "initializeSystem_08007540",
                "gpio_init": "initializeGPIO",
                "timers_init": "initializeTimers",
                "debounce_init": "initializeDebounce",
                "usart_init": "initializeUSART",
                "grbl_FUN_08007540": "initializeGrbl"
            },
            "code": "int initializeSystem_08007540(void)\n{\n  HAL_Init();\n  SystemClock_Config();\n  initializeGPIO();\n  initializeTimers();\n  initializeDebounce();\n  initializeUSART();\n  startForkserver(0);\n  initializeGrbl();\n  return 0;\n}",
            "called": [
                "grbl_main",
                "timers_init",
                "gpio_init",
                "HAL_Init",
                "debounce_init",
                "SystemClock_Config",
                "startForkserver",
                "usart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initializeSystem_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "FUN_080052dc": "set_x_in_register_080052dc",
                "x": "x_value",
                "val": "current_register_value",
                "PTR_DAT_08005308": "register_address",
                "DAT_08005308": "register_address_offset",
                "mask": "mask",
                "*PTR_DAT_08005308": "*register_address",
                "modified_val": "modified_x_value"
            },
            "code": "void set_x_in_register_080052dc(uint32_t x_value)\n{\n  uint32_t *PTR_DAT_08005308 = (uint32_t *)(DAT_08005308 + 0x14);\n  uint32_t current_register_value = *(uint32_t *)(DAT_08005308 + 0x14);\n  uint32_t mask = 0xfffff55f;\n  uint32_t modified_x_value = x_value | (current_register_value & mask);\n  *PTR_DAT_08005308 = modified_x_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "step_period_isr"
            ],
            "imported": false,
            "current_name": "set_x_in_register_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "FUN_080064ec": "calculate_sysclock_frequency_080064ec",
                "pllp": "pll_multiplier_bits",
                "pllm": "pll_divider_bits",
                "sysclockfreq": "sysclockfreq",
                "pllvco": "pllvco",
                "DAT_0800661c": "PTR_DAT_0800661c",
                "DAT_08006620": "DAT_08006620",
                "DAT_08006624": "DAT_08006624"
            },
            "code": "uint32_t calculate_sysclock_frequency_080064ec(void)\n{\n  uint pll_multiplier_bits = *(uint *)(DAT_0800661c + 8) & 0xc;\n  uint pll_divider_bits = *(uint *)(DAT_0800661c + 4) & 0x3f;\n  uint32_t pllvco, sysclockfreq;\n  if (pll_multiplier_bits == 8) {\n    uint pll_enable_bit = count_leading_zeroes(0x200);\n    if ((*(uint *)(DAT_0800661c + 4) & 0x400000) >> (pll_enable_bit & 0xff) == 0) {\n      uint pll_multiplier_shift = count_leading_zeroes(0x3fe0000);\n      pllvco = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (pll_multiplier_shift & 0xff)) * (DAT_08006620 / pll_divider_bits);\n    }\n    else {\n      uint pll_multiplier_shift = count_leading_zeroes(0x3fe0000);\n      pllvco = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (pll_multiplier_shift & 0xff)) * (DAT_08006624 / pll_divider_bits);\n    }\n    uint pll_divider_shift = count_leading_zeroes(0xc000);\n    sysclockfreq = pllvco / (((*(uint *)(DAT_0800661c + 4) & 0x30000) >> (pll_divider_shift & 0xff)) + 1) / 2;\n  }\n  else if (pll_multiplier_bits == 0) {\n    sysclockfreq = DAT_08006620;\n  }\n  else if (pll_multiplier_bits == 4) {\n    sysclockfreq = DAT_08006624;\n  }\n  else {\n    sysclockfreq = DAT_08006620;\n  }\n  return sysclockfreq;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "imported": false,
            "current_name": "calculate_sysclock_frequency_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "FUN_08006ba0": "calculate_priority_08006ba0",
                "PriorityGroup": "priority_group",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "SubPriorityBits": "sub_priority_bits",
                "PreemptPriorityBits": "preempt_priority_bits",
                "PriorityGroupTmp": "priority_group_tmp",
                "uVar1": "priority_group_bits",
                "uVar2": "sub_priority_shift",
                "uVar3": "preempt_priority_shift"
            },
            "code": "uint32_t calculate_priority_08006ba0(uint32_t priority_group, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t sub_priority_bits;\n  uint32_t preempt_priority_bits;\n  uint32_t priority_group_tmp;\n  uint32_t priority_group_bits = priority_group & 7;\n  uint32_t sub_priority_shift = priority_group_bits - 3 > 0 ? priority_group_bits - 3 : 0;\n  uint32_t preempt_priority_shift = 7 - priority_group_bits > 3 ? 4 : 7 - priority_group_bits;\n  sub_priority_bits = (1 << (sub_priority_shift & 0xff)) - 1U;\n  preempt_priority_bits = (1 << (preempt_priority_shift & 0xff)) - 1U;\n  return (sub_priority & sub_priority_bits) | (preempt_priority_bits << sub_priority_shift);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "calculate_priority_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "read_from_eeprom_080003ec",
                "destination": "destination",
                "source": "start_address",
                "size": "size",
                "local_1c": "remaining_size",
                "local_18": "current_address",
                "local_14": "current_destination",
                "data": "data",
                "checksum": "checksum",
                "cVar1": "current_byte",
                "eeprom_ready": "PTR_eeprom_ready_08000470",
                "eeprom_init": "initialize_eeprom",
                "eeprom_get_char": "read_byte_from_eeprom"
            },
            "code": "int read_from_eeprom_080003ec(char *destination, uint start_address, uint size)\n{\n  char current_byte;\n  uint remaining_size;\n  uint current_address;\n  char *current_destination;\n  uchar data;\n  uchar checksum = 0;\n  remaining_size = size;\n  current_address = start_address;\n  current_destination = destination;\n  if (*(int *)PTR_eeprom_ready_08000470 == 0) {\n    initialize_eeprom();\n    current_address = start_address;\n    current_destination = destination;\n  }\n  for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n    current_byte = read_byte_from_eeprom(current_address);\n    checksum = current_byte + (checksum != 0);\n    *current_destination = current_byte;\n    current_address = current_address + 1;\n    current_destination = current_destination + 1;\n  }\n  current_byte = read_byte_from_eeprom(current_address);\n  return (uint)((uint)checksum == (int)current_byte);\n}",
            "called": [
                "eeprom_get_char",
                "eeprom_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "settings_read_coord_data",
                "read_global_settings",
                "settings_read_startup_line"
            ],
            "imported": false,
            "current_name": "read_from_eeprom_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "get_block_index_plus_255_08002896",
                "block_index": "block_index",
                "local_9": "updated_block_index"
            },
            "code": "uint8_t get_block_index_plus_255_08002896(uint8_t block_index) {\\n  uint8_t updated_block_index = block_index;\\n  if (block_index == \"\\0\") {\\n    updated_block_index = \"\\x12\";\\n  }\\n  return updated_block_index + 0xff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "planner_reverse_pass"
            ],
            "imported": false,
            "current_name": "get_block_index_plus_255_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "FUNC_0800a348"
            },
            "code": "\nundefined4 FUNC_0800a348(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  longlong lVar8;\n  undefined4 local_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  \n  uVar4 = param_2 & 0x7fffffff;\n  if (uVar4 < 0x3e400000) {\n    iVar1 = __aeabi_d2iz();\n    if (iVar1 == 0) {\n      return 0;\n    }\n    uVar5 = __muldf3(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = __muldf3(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = __aeabi_dadd((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __aeabi_dadd((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __aeabi_dadd((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n  }\n  else {\n    uVar5 = __muldf3(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = __muldf3(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = __aeabi_dadd((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __aeabi_dadd((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = __aeabi_dadd((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = __muldf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    if (DAT_0800a590 < (int)uVar4) {\n      if (DAT_0800a594 < (int)uVar4) {\n        lVar8 = (ulonglong)DAT_0800a598 << 0x20;\n        iVar1 = DAT_0800a59c;\n      }\n      else {\n        lVar8 = __subdf3(0,DAT_0800a58c,0,uVar4 - 0x200000);\n        iVar1 = uVar4 - 0x200000;\n      }\n      uStack_24 = (undefined4)((ulonglong)lVar8 >> 0x20);\n      local_28 = (undefined4)lVar8;\n      uVar5 = __muldf3(uVar2,uVar3,0,DAT_0800a588);\n      uVar5 = __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,iVar1);\n      uVar6 = __muldf3(uVar2,uVar3,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      uVar7 = __muldf3(param_1,param_2,param_3,param_4);\n      uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                       (int)((ulonglong)uVar7 >> 0x20));\n      uVar5 = __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                       (int)((ulonglong)uVar6 >> 0x20));\n      uVar2 = __subdf3(local_28,uStack_24,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n      return uVar2;\n    }\n  }\n  uStack_2c = (undefined4)((ulonglong)uVar6 >> 0x20);\n  local_30 = (undefined4)uVar6;\n  uVar2 = (undefined4)((ulonglong)uVar5 >> 0x20);\n  uVar6 = __muldf3((int)uVar5,uVar2,0,DAT_0800a588);\n  uVar5 = __muldf3((int)uVar5,uVar2,local_30,uStack_2c);\n  uVar7 = __muldf3(param_1,param_2,param_3,param_4);\n  uVar5 = __subdf3((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar7,\n                   (int)((ulonglong)uVar7 >> 0x20));\n  uVar5 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar5,\n                   (int)((ulonglong)uVar5 >> 0x20));\n  uVar2 = __subdf3(0,DAT_0800a58c,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  return uVar2;\n}\n\n",
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a348",
            "calling": [
                "sin",
                "cos"
            ],
            "imported": false,
            "current_name": "FUNC_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "concatenate_pointers_if_not_null_080001ac",
                "param_1": "pointer1",
                "param_2": "pointer2"
            },
            "code": "uint64_t concatenate_pointers_if_not_null_080001ac(uint64_t *pointer1, uint64_t *pointer2) {\n  if (DAT_080001bc != 0) {\n    pointer1 = PTR__init_080001c4;\n    pointer2 = PTR_object_8916_080001c0;\n  }\n  return CONCAT44(pointer2, pointer1);\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "__libc_init_array",
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "concatenate_pointers_if_not_null_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "print_binary_08003740",
                "n": "num"
            },
            "code": "void print_binary_08003740(uint8_t num)\n{\n  print_base2((uint)num,8);\n  return;\n}",
            "called": [
                "print_base2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": false,
            "current_name": "print_binary_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "FUN_08000478": "set_axis_values_08000478",
                "axis_0": "x_axis",
                "axis_1": "y_axis",
                "axis_2": "z_axis"
            },
            "code": "void set_axis_values_08000478(uint8_t x_axis, uint8_t y_axis, uint8_t z_axis)\n{\n  PTR_gc_080004a8[25] = x_axis;\n  PTR_gc_080004a8[26] = y_axis;\n  PTR_gc_080004a8[27] = z_axis;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "gc_init",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "set_axis_values_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "FUN_08006d2e": "enable_interrupt_08006d2e",
                "IRQn": "irq"
            },
            "code": "void enable_interrupt_08006d2e(IRQn_Type irq)\n{\n  NVIC_EnableIRQ(irq);\n  return;\n}",
            "called": [
                "NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": false,
            "current_name": "enable_interrupt_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "FUN_08007e1c": "wait_for_USART_ready_08007e1c",
                "c": "data"
            },
            "code": "void wait_for_USART_ready_08007e1c(USART_TypeDef *usart, char data) {\n  while((*DAT_08007e48 & 0x80) == 0);\n  DAT_08007e48[1] = (uint)(byte)data;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "__io_putchar",
                "serial_write"
            ],
            "imported": false,
            "current_name": "wait_for_USART_ready_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "FUN_0800adf0": "calculate_power_sum_0800adf0",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "integer_base",
                "uVar2": "low_bits",
                "uVar3": "high_bits",
                "uVar4": "low_bits_2",
                "uVar5": "high_bits_2",
                "uVar6": "low_bits_3",
                "uVar7": "multiplication_result",
                "uVar8": "multiplication_result_2"
            },
            "code": "undefined4 calculate_power_sum_0800adf0(undefined4 base, uint exponent, undefined4 param_3, undefined4 param_4, int param_5) {\n  int integer_base;\n  undefined4 high_bits;\n  undefined4 low_bits;\n  undefined4 high_bits_2;\n  undefined4 low_bits_2;\n  undefined4 high_bits_3;\n  undefined4 low_bits_3;\n  undefined8 multiplication_result;\n  undefined8 multiplication_result_2;\n  \n  if (((exponent & 0x7fffffff) < 0x3e400000) && (integer_base = __aeabi_d2iz(), integer_base == 0)) {\n    return base;\n  }\n  multiplication_result = __muldf3(base, exponent, base);\n  high_bits = (undefined4)((ulonglong)multiplication_result >> 0x20);\n  low_bits = (undefined4)multiplication_result;\n  multiplication_result = __muldf3(base, exponent, low_bits, high_bits);\n  high_bits_2 = (undefined4)((ulonglong)multiplication_result >> 0x20);\n  low_bits_2 = (undefined4)multiplication_result;\n  multiplication_result = __muldf3(low_bits, high_bits, DAT_0800af40, DAT_0800af44);\n  multiplication_result = __subdf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), DAT_0800af48, DAT_0800af4c);\n  multiplication_result = __muldf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), low_bits, high_bits);\n  multiplication_result = __aeabi_dadd((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), DAT_0800af50, DAT_0800af54);\n  multiplication_result = __muldf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), low_bits, high_bits);\n  multiplication_result = __subdf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), DAT_0800af58, DAT_0800af5c);\n  multiplication_result = __muldf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), low_bits, high_bits);\n  multiplication_result = __aeabi_dadd((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), DAT_0800af60, DAT_0800af64);\n  high_bits_3 = (undefined4)((ulonglong)multiplication_result >> 0x20);\n  if (param_5 != 0) {\n    multiplication_result_2 = __muldf3(param_3, param_4, 0, DAT_0800af70);\n    multiplication_result = __muldf3(low_bits_2, high_bits_2, (int)multiplication_result, high_bits_3);\n    multiplication_result = __subdf3((int)multiplication_result_2, (int)((ulonglong)multiplication_result_2 >> 0x20), (int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20));\n    multiplication_result = __muldf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), low_bits, high_bits);\n    multiplication_result = __subdf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), param_3, param_4);\n    multiplication_result_2 = __muldf3(low_bits_2, high_bits_2, DAT_0800af68, DAT_0800af6c);\n    multiplication_result = __aeabi_dadd((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), (int)multiplication_result_2, (int)((ulonglong)multiplication_result_2 >> 0x20));\n    low_bits_3 = __subdf3(base, exponent, (int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20));\n    return low_bits_3;\n  }\n  multiplication_result = __muldf3(low_bits, high_bits, (int)multiplication_result, high_bits_3);\n  multiplication_result = __subdf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), DAT_0800af68, DAT_0800af6c);\n  multiplication_result = __muldf3((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), low_bits_2, high_bits_2);\n  low_bits_3 = __aeabi_dadd((int)multiplication_result, (int)((ulonglong)multiplication_result >> 0x20), base, exponent);\n  return low_bits_3;\n}",
            "called": [
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_d2iz",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "sin",
                "cos"
            ],
            "imported": false,
            "current_name": "calculate_power_sum_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "execute_realtime_command_08003a74",
                "PTR_sys_08003b90": "command_queue",
                "PTR_settings_08003b94": "settings",
                "bVar1": "command_byte",
                "rt_exec": "rt_exec"
            },
            "code": "void execute_realtime_command_08003a74(void)\\n{\\n  byte command_byte;\\n  uint8_t rt_exec;\\n  \\n  if (PTR_sys_08003b90[2] != \"\\0\") {\\n    command_byte = PTR_sys_08003b90[2];\\n    if ((command_byte & 0x60) != 0) {\\n      PTR_sys_08003b90[1] = 6;\\n      if ((command_byte & 0x40) == 0) {\\n        report_alarm_message(-2);\\n      }\\n      else {\\n        report_alarm_message(-1);\\n        report_feedback_message(\"\\x01\");\\n        PTR_sys_08003b90[2] = PTR_sys_08003b90[2] & 0xef;\\n        do {\\n        } while ((PTR_sys_08003b90[2] & 0x10) == 0);\\n      }\\n      PTR_sys_08003b90[2] = PTR_sys_08003b90[2] & 0x9f;\\n    }\\n    if ((command_byte & 0x10) == 0) {\\n      if ((command_byte & 1) != 0) {\\n        report_realtime_status();\\n        PTR_sys_08003b90[2] = PTR_sys_08003b90[2] & 0xfe;\\n      }\\n      if ((command_byte & 8) != 0) {\\n        st_feed_hold();\\n        PTR_sys_08003b90[2] = PTR_sys_08003b90[2] & 0xf7;\\n      }\\n      if ((command_byte & 4) != 0) {\\n        st_cycle_reinitialize();\\n        PTR_sys_08003b90[2] = PTR_sys_08003b90[2] & 0xfb;\\n      }\\n      if ((command_byte & 2) != 0) {\\n        st_cycle_start();\\n        if ((PTR_settings_08003b94[0x28] & 2) != 0) {\\n          PTR_sys_08003b90[0x10] = 1;\\n        }\\n        PTR_sys_08003b90[2] = PTR_sys_08003b90[2] & 0xfd;\\n      }\\n    }\\n    else {\\n      *PTR_sys_08003b90 = 1;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "report_feedback_message",
                "st_feed_hold",
                "report_alarm_message",
                "report_realtime_status",
                "st_cycle_reinitialize",
                "st_cycle_start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "plan_synchronize",
                "mc_go_home",
                "grbl_main",
                "mc_dwell",
                "mc_line",
                "protocol_process"
            ],
            "imported": false,
            "current_name": "execute_realtime_command_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "FUNC_08005cec"
            },
            "code": "\nHAL_StatusTypeDef FUNC_08005cec(RCC_OscInitTypeDef *RCC_OscInitStruct)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint32_t result_2;\n  uint32_t result_3;\n  uint32_t result_4;\n  uint32_t result_5;\n  uint32_t result_6;\n  uint32_t result_7;\n  uint32_t result;\n  uint32_t result_1;\n  uint32_t timeout;\n  \n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (RCC_OscInitStruct->HSEState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 5000 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08005fb0 = (char)RCC_OscInitStruct->HSEState;\n      if (RCC_OscInitStruct->HSEState == 1) {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          uVar2 = HAL_GetTick();\n          if (uVar1 + 5000 <= uVar2) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar1 = HAL_GetTick();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          uVar2 = HAL_GetTick();\n          if (uVar1 + 5000 <= uVar2) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_08005fb4 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08005fac & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08005fac & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n      uVar3 = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac =\n           RCC_OscInitStruct->HSICalibrationValue << (uVar3 & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08005fb8 = 0;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      uVar1 = HAL_GetTick();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    uVar1 = HAL_GetTick();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      uVar2 = HAL_GetTick();\n      if (uVar1 + 100 <= uVar2) {\n        return HAL_TIMEOUT;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    uVar1 = HAL_GetTick();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      uVar2 = HAL_GetTick();\n      if (uVar1 + 5000 <= uVar2) {\n        return HAL_TIMEOUT;\n      }\n    }\n    *DAT_08006184 = (char)RCC_OscInitStruct->LSEState;\n    if (RCC_OscInitStruct->LSEState == 1) {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 5000 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar1 = HAL_GetTick();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 5000 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->PLL).PLLState != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return HAL_ERROR;\n    }\n    if ((RCC_OscInitStruct->PLL).PLLState == 2) {\n      *DAT_08006188 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n      uVar3 = count_leading_zeroes(0x3fe0000);\n      uVar4 = count_leading_zeroes(0xc000);\n      uVar5 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           (RCC_OscInitStruct->PLL).PLLQ << (uVar5 & 0xff) |\n           (RCC_OscInitStruct->PLL).PLLM | (RCC_OscInitStruct->PLL).PLLN << (uVar3 & 0xff) |\n           ((RCC_OscInitStruct->PLL).PLLP >> 1) - 1 << (uVar4 & 0xff) |\n           (RCC_OscInitStruct->PLL).PLLSource | 0x20000000;\n      *DAT_08006188 = 1;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      uVar1 = HAL_GetTick();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = HAL_GetTick();\n        if (uVar1 + 100 <= uVar2) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005cec",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "FUN_08006b00": "setInterruptPriority_08006b00",
                "IRQn": "irq",
                "priority": "priority",
                "WWDG_IRQn": "WWDGInterrupt",
                "DAT_08006b4c": "interruptPriorityBase",
                "DAT_08006b50": "interruptPriorityOffset"
            },
            "code": "void setInterruptPriority_08006b00(IRQn_Type irq, uint32_t priority) {\n  if (irq < WWDG_IRQn) {\n    *(char *)(((byte)irq & 0xf) + DAT_08006b4c + 0x14) = (char)((priority & 0xff) << 4);\n  }\n  else {\n    *(char *)(irq + DAT_08006b50 + 0x300) = (char)((priority & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "HAL_NVIC_SetPriority",
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "setInterruptPriority_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "FUN_0800b4d0": "initialize_exit_function_if_not_already_initialized_0800b4d0",
                "DAT_0800b4dc": "already_initialized_exit_function",
                "DAT_0800b4e0": "exit_function"
            },
            "code": "void initialize_exit_function_if_not_already_initialized_0800b4d0(void)\n{\n    if (DAT_0800b4dc == 0) {\n        atexit(DAT_0800b4e0);\n        return;\n    }\n    return;\n}",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_exit_function_if_not_already_initialized_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "FUN_08007f54": "calculateBaudRate_08007f54",
                "usart": "usartPtr",
                "baud": "baudRate",
                "uVar1": "mantissa",
                "uVar2": "pclkFreq",
                "uVar3": "pclkFreq",
                "uVar4": "pclkFreq",
                "DAT_08008184": "PTR_USART1",
                "DAT_08008188": "PTR_USART2",
                "BRR": "brrValue"
            },
            "code": "void calculateBaudRate_08007f54(USART_TypeDef *usart, int baudRate) {\n    uint32_t pclkFreq;\n    uint32_t brrFraction;\n    uint32_t mantissa;\n    uint32_t brrValue;\n\n    if ((usart->CR1 & USART_CR1_UE) == 0) {\n        if ((usart == DAT_08008184) || (usart == DAT_08008188)) {\n            pclkFreq = HAL_RCC_GetPCLK2Freq();\n        }\n        else {\n            pclkFreq = HAL_RCC_GetPCLK1Freq();\n        }\n        brrFraction = ((pclkFreq * 25) / (baudRate * 4)) & 0xF;\n        mantissa = ((pclkFreq * 25) / (baudRate * 4)) >> 4;\n        usart->BRR = (mantissa << 4) | brrFraction;\n    }\n    else {\n        if ((usart == DAT_08008184) || (usart == DAT_08008188)) {\n            pclkFreq = HAL_RCC_GetPCLK2Freq();\n        }\n        else {\n            pclkFreq = HAL_RCC_GetPCLK1Freq();\n        }\n        brrFraction = ((pclkFreq * 25) / (baudRate * 2)) & 0xF;\n        mantissa = ((pclkFreq * 25) / (baudRate * 2)) >> 4;\n        usart->BRR = (mantissa << 4) | brrFraction;\n    }\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "usart_init"
            ],
            "imported": false,
            "current_name": "calculateBaudRate_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "FUN_08003b98": "execute_gcode_line_08003b98",
                "line": "gcode_line",
                "bVar1": "first_char",
                "uVar2": "return_value",
                "iVar3": "float_read_result",
                "uVar4": "undefined_var",
                "extraout_r1": "undefined_var_2",
                "uVar5": "line_index",
                "value_00": "gcode_value",
                "in_stack_ffffffe0": "undefined_var_3",
                "value": "undefined_var_4",
                "parameter": "gcode_parameter",
                "char_counter": "char_index",
                "helper_var": "helper_index",
                "PTR_sys_08003f2c": "system_variables",
                "PTR_settings_08003f30": "settings_variables",
                "gc_execute_line": "execute_gc",
                "report_grbl_help": "report_help",
                "report_gcode_parameters": "report_parameters",
                "report_grbl_settings": "report_settings",
                "mc_reset": "reset_machine",
                "report_feedback_message": "report_message",
                "report_gcode_modes": "report_modes",
                "mc_go_home": "go_home",
                "protocol_execute_startup": "execute_startup_protocol",
                "settings_read_startup_line": "read_startup_line",
                "report_status_message": "report_message",
                "report_startup_line": "report_line",
                "settings_store_global_setting": "store_global_setting",
                "read_float": "read_gcode_float",
                "settings_store_startup_line": "store_startup_line",
                "__aeabi_f2iz": "float_to_int",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_d2uiz": "double_to_int"
            },
            "code": "uint8_t execute_gcode_line_08003b98(char *gcode_line) {\n    byte first_char;\n    uint8_t return_value;\n    int float_read_result;\n    undefined4 uVar4;\n    undefined4 extraout_r1;\n    uint line_index;\n    float value_00;\n    undefined4 in_stack_ffffffe0;\n    float gcode_parameter;\n    uint8_t char_counter;\n    uint8_t helper_var;\n\n    if (*gcode_line != '$') {\n        return_value = execute_gc(gcode_line);\n        return return_value;\n    }\n    char_counter = 1;\n    helper_var = 0;\n    first_char = gcode_line[1];\n    if (first_char == 0) {\n        report_grbl_help();\n        return 0;\n    }\n    if ((0x58 < first_char) || (first_char < 0x23)) goto switchD_08003bdc_caseD_25;\n    switch(first_char) {\n        case 0x23:\n            char_counter = 2;\n            if (gcode_line[2] != 0) {\n                return 3;\n            }\n            report_gcode_parameters();\n            break;\n        case 0x24:\n            char_counter = 2;\n            if (gcode_line[2] != 0) {\n                return 3;\n            }\n            report_grbl_settings();\n            break;\n        case 0x43:\n            char_counter = 2;\n            if (gcode_line[2] != 0) {\n                return 3;\n            }\n            if (PTR_sys_08003f2c[1] == 7) {\n                reset_machine();\n                report_feedback_message(5);\n            }\n            else {\n                if (PTR_sys_08003f2c[1] != 0) {\n                    return 11;\n                }\n                PTR_sys_08003f2c[1] = 7;\n                report_feedback_message(4);\n            }\n            break;\n        case 0x47:\n            char_counter = 2;\n            if (gcode_line[2] != 0) {\n                return 3;\n            }\n            report_gcode_modes();\n            break;\n        case 0x48:\n            if ((PTR_settings_08003f30[40] & 16) == 0) {\n                return 7;\n            }\n            if ((PTR_sys_08003f2c[1] != 0) && (PTR_sys_08003f2c[1] != 6)) {\n                return 11;\n            }\n            go_home();\n            if (*PTR_sys_08003f2c == 0) {\n                execute_startup_protocol();\n            }\n            break;\n        case 0x4e:\n            char_counter = 2;\n            if (gcode_line[2] == 0) {\n                for (helper_var = 0; helper_var < 2; helper_var++) {\n                    return_value = read_startup_line(helper_var, gcode_line);\n                    if (return_value == 0) {\n                        report_status_message(10);\n                    }\n                    else {\n                        report_startup_line(helper_var, gcode_line);\n                    }\n                }\n                return 0;\n            }\n            helper_var = 1;\n            // fallthrough\n        default:\n            float_read_result = read_float(gcode_line, &char_counter, &gcode_parameter);\n            if (float_read_result == 0) {\n                return 1;\n            }\n            line_index = char_counter + 1;\n            if (gcode_line[char_counter] != '=') {\n                return 3;\n            }\n            char_counter = line_index;\n            if (helper_var == 0) {\n                float_read_result = read_float(gcode_line, &char_counter, &value_00);\n                if (float_read_result == 0) {\n                    return 1;\n                }\n                if (gcode_line[char_counter] == 0) {\n                    float_read_result = (int)__aeabi_f2iz(gcode_parameter);\n                    return_value = store_global_setting(float_read_result, value_00);\n                    return return_value;\n                }\n                return 3;\n            }\n            do {\n                gcode_line[line_index - (uint)char_counter] = gcode_line[char_counter];\n                line_index = char_counter;\n                char_counter++;\n            } while (gcode_line[line_index] != 0);\n            helper_var = line_index;\n            helper_var = execute_gc(gcode_line);\n            if (helper_var != 0) {\n                return helper_var;\n            }\n            uVar4 = __aeabi_f2d(gcode_parameter);\n            trunc((double)CONCAT44(gcode_line,in_stack_ffffffe0));\n            helper_var = __aeabi_d2uiz(uVar4,extraout_r1);\n            store_startup_line(helper_var,gcode_line);\n            break;\n        case 0x58:\n            char_counter = 2;\n            if (gcode_line[2] != 0) {\n                return 3;\n            }\n            if (PTR_sys_08003f2c[1] == 6) {\n                report_feedback_message(3);\n                PTR_sys_08003f2c[1] = 0;\n            }\n    }\n    return 0;\n}",
            "called": [
                "report_feedback_message",
                "settings_store_startup_line",
                "report_status_message",
                "__aeabi_f2iz",
                "protocol_execute_startup",
                "settings_read_startup_line",
                "report_gcode_modes",
                "settings_store_global_setting",
                "read_float",
                "report_grbl_help",
                "mc_go_home",
                "report_gcode_parameters",
                "__aeabi_d2uiz",
                "trunc",
                "__aeabi_f2d",
                "report_grbl_settings",
                "mc_reset",
                "gc_execute_line",
                "report_startup_line"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "protocol_process"
            ],
            "imported": false,
            "current_name": "execute_gcode_line_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "FUN_080024c4": "initialize_printing_080024c4",
                "invert_feed_rate": "inverted_feed_rate",
                "uVar1": "direction_value",
                "uVar2": "feed_rate_value",
                "z": "z_position",
                "feed_rate": "feed_rate",
                "z_dir": "z_direction_value",
                "y_dir": "y_direction_value",
                "x_dir": "x_direction_value",
                "PTR_sys_080025d8": "sys_080025d8",
                "PTR_limits_enabled_080025dc": "limits_enabled_080025dc",
                "limits_go_home": "limits_go_home",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "DAT_080025e0": "position_data_080025e0",
                "sys_sync_current_position": "synchronize_current_position",
                "PTR_settings_080025e4": "settings_080025e4",
                "mc_line": "mc_line",
                "st_cycle_start": "cycle_start",
                "plan_synchronize": "synchronize_plan"
            },
            "code": "void initialize_printing_080024c4(void)\n{\n  uint8_t inverted_feed_rate;\n  undefined4 x_direction;\n  undefined4 y_direction;\n  undefined4 z_direction;\n  undefined4 x_feed_rate;\n  undefined4 y_feed_rate;\n  undefined4 z_feed_rate;\n  float z_position;\n  float feed_rate;\n  int8_t z_direction_value;\n  int8_t y_direction_value;\n  int8_t x_direction_value;\n\n  PTR_sys_080025d8[1] = 5;\n  *(undefined4 *)PTR_limits_enabled_080025dc = 0;\n  limits_go_home();\n  execute_runtime_protocol();\n  if (*PTR_sys_080025d8 == 0) {\n    memset(DAT_080025e0, 0, 0xc);\n    synchronize_current_position();\n    PTR_sys_080025d8[1] = 0;\n    if ((*(ushort *)(PTR_settings_080025e4 + 0x2a) & 0x20) == 0) {\n      x_direction_value = -1;\n    }\n    else {\n      x_direction_value = 1;\n    }\n    if ((*(ushort *)(PTR_settings_080025e4 + 0x2a) & 0x80) == 0) {\n      y_direction_value = -1;\n    }\n    else {\n      y_direction_value = 1;\n    }\n    if ((*(ushort *)(PTR_settings_080025e4 + 0x2a) & 0x200) == 0) {\n      z_direction_value = -1;\n    }\n    else {\n      z_direction_value = 1;\n    }\n    x_direction = (int)x_direction_value;\n    inverted_feed_rate = __aeabi_fmul(x_direction, *(undefined4 *)(PTR_settings_080025e4 + 0x38));\n    y_direction = (int)y_direction_value;\n    y_feed_rate = __aeabi_fmul(y_direction, *(undefined4 *)(PTR_settings_080025e4 + 0x38));\n    z_direction = (int)z_direction_value;\n    z_feed_rate = __aeabi_fmul(z_direction, *(undefined4 *)(PTR_settings_080025e4 + 0x38));\n    mc_line((float)z_feed_rate, (float)((ulonglong)z_feed_rate >> 0x20), z_position, feed_rate, inverted_feed_rate);\n    cycle_start();\n    synchronize_plan();\n    synchronize_current_position();\n    if ((PTR_settings_080025e4[0x28] & 8) != 0) {\n      *(undefined4 *)PTR_limits_enabled_080025dc = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "sys_sync_current_position",
                "plan_synchronize",
                "limits_go_home",
                "memset",
                "__aeabi_fmul",
                "st_cycle_start",
                "__floatsisf",
                "mc_line",
                "protocol_execute_runtime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "protocol_execute_line"
            ],
            "imported": false,
            "current_name": "initialize_printing_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "FUN_08002f40": "check_block_buffer_head_tail_08002f40",
                "uVar1": "next_block_index_value"
            },
            "code": "void check_block_buffer_head_tail_08002f40(void)\n{\n  uint8_t next_block_index_value;\n  if (*PTR_block_buffer_head_08002f6c != *PTR_block_buffer_tail_08002f70) {\n    next_block_index_value = next_block_index(*PTR_block_buffer_tail_08002f70);\n    *PTR_block_buffer_tail_08002f70 = next_block_index_value;\n  }\n  return;\n}",
            "called": [
                "next_block_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "step_period_isr"
            ],
            "imported": false,
            "current_name": "check_block_buffer_head_tail_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "FUNC_08009054"
            },
            "code": "\nuint FUNC_08009054(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_0800904a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_0800906c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_0800906c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009054",
            "calling": [
                "intersection_distance",
                "gc_set_current_position",
                "homing_cycle",
                "report_realtime_status",
                "plan_cycle_reinitialize",
                "planner_recalculate_trapezoids",
                "mc_arc",
                "plan_buffer_line",
                "report_grbl_settings",
                "estimate_acceleration_distance"
            ],
            "imported": false,
            "current_name": "FUNC_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "check_spindle_and_coolant_080025e8",
                "PTR_sys_08002634": "sys_flags",
                "spindle_stop": "stop_spindle",
                "coolant_stop": "stop_coolant",
                "st_go_idle": "go_to_idle"
            },
            "code": "void check_spindle_and_coolant_080025e8(void)\n{\n  if ((PTR_sys_08002634[2] & 0x10) == 0) {\n    PTR_sys_08002634[2] |= 0x10;\n    spindle_stop();\n    coolant_stop();\n    if ((byte)PTR_sys_08002634[1] - 3 < 3) {\n      PTR_sys_08002634[2] |= 0x20;\n      go_to_idle();\n    }\n  }\n  return;\n}",
            "called": [
                "spindle_stop",
                "st_go_idle",
                "coolant_stop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "protocol_execute_line",
                "buttons_isr",
                "serial_rx_hook",
                "limits_isr",
                "gc_execute_line"
            ],
            "imported": false,
            "current_name": "check_spindle_and_coolant_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "coolant_run"
            ],
            "imported": false,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005ac4": {
            "renaming": {
                "FUN_08005ac4": "getMemoryLocation_08005ac4"
            },
            "code": "uint32_t getMemoryLocation_08005ac4(void)\n{\n  uint32_t memoryLocation = 0x1000000;\n  return memoryLocation;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ac4",
            "calling": [],
            "imported": false,
            "current_name": "getMemoryLocation_08005ac4"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "turn_off_spindle_08005250"
            },
            "code": "void turn_off_spindle_08005250(void)\n{\n  spindle_off();\n  return;\n}",
            "called": [
                "spindle_off"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "spindle_init",
                "spindle_run",
                "mc_reset"
            ],
            "imported": false,
            "current_name": "turn_off_spindle_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "loop_forever_08007430"
            },
            "code": "void loop_forever_08007430(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "loop_forever_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "FUNC_08008640"
            },
            "code": "\nulonglong FUNC_08008640(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = binary_operation_0800881c();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008640",
            "calling": [
                "scalbn",
                "homing_cycle",
                "mc_arc",
                "read_float",
                "report_gcode_modes",
                "__ieee754_sqrt",
                "calculate_trapezoid_for_block",
                "__ieee754_hypot",
                "report_realtime_status",
                "report_gcode_parameters",
                "__kernel_cos",
                "__ieee754_rem_pio2",
                "plan_buffer_line",
                "to_millimeters",
                "atan",
                "__kernel_rem_pio2",
                "__kernel_sin"
            ],
            "imported": false,
            "current_name": "FUNC_08008640"
        },
        "FUN_08007310": {
            "renaming": {
                "FUN_08007310": "get_gpio_pin_state_08007310",
                "GPIOx": "gpio",
                "GPIO_Pin": "pin",
                "bitstatus": "state"
            },
            "code": "GPIO_PinState get_gpio_pin_state_08007310(GPIO_TypeDef *gpio, uint16_t pin) {\n\treturn ((uint)pin & gpio->IDR) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007310",
            "calling": [],
            "imported": false,
            "current_name": "get_gpio_pin_state_08007310"
        },
        "FUN_08007436": {
            "renaming": {
                "FUN_08007436": "initialize_clocks_08007436",
                "HVar1": "status",
                "RCC_OscInitStruct": "rcc_osc_init",
                "RCC_ClkInitStruct": "rcc_clk_init",
                "OscillatorType": "RCC_OSCILLATORTYPE_HSE",
                "HSEState": "RCC_HSE_ON",
                "PLLState": "RCC_PLL_ON",
                "PLLSource": "RCC_PLLSOURCE_HSE",
                "PLLM": "8",
                "PLLN": "336",
                "PLLP": "RCC_PLLP_DIV2",
                "PLLQ": "7",
                "ClockType": "RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2",
                "SYSCLKSource": "RCC_SYSCLKSOURCE_PLLCLK",
                "AHBCLKDivider": "RCC_SYSCLK_DIV1",
                "APB1CLKDivider": "RCC_HCLK_DIV4",
                "APB2CLKDivider": "RCC_HCLK_DIV2"
            },
            "code": "void initialize_clocks_08007436(void)\n{\n  HAL_StatusTypeDef status;\n  RCC_OscInitTypeDef rcc_osc_init;\n  RCC_ClkInitTypeDef rcc_clk_init;\n  \n  *(uint *)(DAT_080074c0 + 0x40) |= 0x10000000;\n  *DAT_080074c4 |= 0xc000;\n  rcc_osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  rcc_osc_init.HSEState = RCC_HSE_ON;\n  rcc_osc_init.PLL.PLLState = RCC_PLL_ON;\n  rcc_osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  rcc_osc_init.PLL.PLLM = 8;\n  rcc_osc_init.PLL.PLLN = 336;\n  rcc_osc_init.PLL.PLLP = RCC_PLLP_DIV2;\n  rcc_osc_init.PLL.PLLQ = 7;\n  status = HAL_RCC_OscConfig(&rcc_osc_init);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  rcc_clk_init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                          |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  rcc_clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  rcc_clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  rcc_clk_init.APB1CLKDivider = RCC_HCLK_DIV4;\n  rcc_clk_init.APB2CLKDivider = RCC_HCLK_DIV2;\n  status = HAL_RCC_ClockConfig(&rcc_clk_init, FLASH_LATENCY_5);\n  if (status != HAL_OK) {\n    Error_Handler();\n  }\n  return;\n}",
            "called": [
                "HAL_RCC_OscConfig",
                "Error_Handler",
                "HAL_RCC_ClockConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_clocks_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "initialize_step_events_08005814",
                "PTR_st_08005834": "step_events",
                "PTR_current_block_08005838": "current_block"
            },
            "code": "void initialize_step_events_08005814() {\n  memset(PTR_st_08005834, 0, sizeof(PTR_st_08005834));\n  set_PTR_st_08005834_per_minute(800);\n  *PTR_current_block_08005838 = 0;\n  return;\n}",
            "called": [
                "memset",
                "set_step_events_per_minute"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "initialize_step_events_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "FUN_08005bdc": "set_irq_priority_08005bdc",
                "IRQn": "irq",
                "priority": "priority",
                "WWDG_IRQn": "WWDG_IRQn",
                "DAT_08005c28": "nvic_ipr_base",
                "DAT_08005c2c": "scb_shpr_base"
            },
            "code": "void set_irq_priority_08005bdc(IRQn_Type irq, uint32_t priority) {\n    if (irq < WWDG_IRQn) {\n        uint32_t* nvic_ipr = (uint32_t*) (0xE000E400 + 0x300 + 4 * ((uint32_t) irq >> 2));\n        uint8_t shift_amount = ((uint8_t) irq & 3) * 8 + 4;\n        *nvic_ipr = (*nvic_ipr & ~(0xff << shift_amount)) | (priority << shift_amount);\n    }\n    else {\n        uint8_t* scb_shpr = (uint8_t*) (0xE000ED18 + (uint32_t) irq - 16);\n        *scb_shpr = (priority << 4);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "SysTick_Config"
            ],
            "imported": false,
            "current_name": "set_irq_priority_08005bdc"
        },
        "FUN_080085d4": {
            "renaming": {
                "FUN_080085d4": "convert_to_double_080085d4",
                "param_1": "integer_part",
                "param_2": "fraction_part",
                "iVar7": "exponent",
                "uVar8": "sign_bit",
                "uVar4": "fraction_part",
                "shift_amount": "shift_amount",
                "integer_part_shifted": "integer_part_shifted",
                "least_significant_bit": "least_significant_bit",
                "least_significant_byte": "least_significant_byte",
                "carry": "carry",
                "sign_bit_bool": "sign_bit_bool",
                "integer_part_doubled": "integer_part_doubled",
                "leading_zeroes": "leading_zeroes",
                "shift_amount_sign": "shift_amount_sign",
                "shift_amount_minus_0x20": "shift_amount_minus_0x20",
                "shift_amount_minus_0x20_negative": "shift_amount_minus_0x20_negative",
                "shift_amount_minus_0x20_zero": "shift_amount_minus_0x20_zero",
                "shift_amount_complement": "shift_amount_complement",
                "complement": "complement"
            },
            "code": "ulonglong convert_to_double_080085d4(uint32_t integer_part, uint32_t fraction_part)\n{\n    if ((integer_part | fraction_part) == 0) {\n        return CONCAT44(fraction_part, integer_part);\n    }\n\n    int exponent = 0x432;\n    uint32_t sign_bit = fraction_part >> 0x16;\n    if (sign_bit != 0) {\n        exponent = 3;\n        if (fraction_part >> 0x19 != 0) {\n            exponent = 6;\n        }\n        if (fraction_part >> 0x1c != 0) {\n            exponent += 3;\n        }\n        uint32_t shift_amount = exponent - ((int)fraction_part >> 0x1f);\n        uint32_t integer_part_shifted = integer_part << (0x20 - shift_amount & 0xff);\n        integer_part = integer_part >> (shift_amount & 0xff) | fraction_part << (0x20 - shift_amount & 0xff);\n        fraction_part = fraction_part >> (shift_amount & 0xff);\n        exponent += 0x432;\n    }\n\n    if (0xfffff < fraction_part) {\n        if (0x1fffff < fraction_part) {\n            uint32_t least_significant_bit = fraction_part & 1;\n            fraction_part = fraction_part >> 1;\n            uint8_t least_significant_byte = (uint8_t)integer_part;\n            integer_part = (uint32_t)(least_significant_bit != 0) << 0x1f | integer_part >> 1;\n            sign_bit = (uint32_t)(least_significant_byte & 1) << 0x1f | sign_bit >> 1;\n            exponent += 1;\n            if (0xffbfffff < (uint32_t)(exponent * 0x200000)) {\n                return 0x7ff0000000000000;\n            }\n        }\n        goto LAB_080083e0;\n    }\n\n    bool carry = false;\n    bool sign_bit_bool = (sign_bit & 0x80000000) != 0;\n    sign_bit = sign_bit << 1;\n    uint32_t integer_part_doubled = integer_part * 2;\n    carry = CARRY4(integer_part, integer_part);\n    integer_part = integer_part_doubled + (uint32_t)sign_bit_bool;\n    fraction_part = fraction_part * 2 + (uint32_t)(carry || CARRY4(integer_part_doubled, (uint32_t)sign_bit_bool));\n    bool shift = exponent != 0;\n    exponent -= 1;\n    while (shift && 0xfffff < fraction_part) {\n        goto LAB_080083e0;\n    }\n\n    uint32_t integer_part_return = integer_part;\n    uint32_t fraction_part_return = fraction_part;\n    if (fraction_part == 0) {\n        integer_part_return = 0;\n        fraction_part_return = integer_part;\n    }\n\n    int leading_zeroes = count_leading_zeroes(fraction_part_return);\n    if (fraction_part_return == 0) {\n        leading_zeroes += 0x20;\n    }\n\n    uint32_t shift_amount = leading_zeroes - 0xb;\n    bool shift_amount_sign = SBORROW4(shift_amount, 0x20);\n    uint32_t shift_amount_minus_0x20 = leading_zeroes - 0x2b;\n    bool shift_amount_minus_0x20_negative = (int)shift_amount_minus_0x20 < 0;\n    bool shift_amount_minus_0x20_zero = shift_amount_minus_0x20 == 0;\n    if ((int)shift_amount < 0x20) {\n        shift_amount_sign = SCARRY4(shift_amount_minus_0x20, 0xc);\n        leading_zeroes -= 0x1f;\n        shift_amount_minus_0x20_negative = leading_zeroes < 0;\n        shift_amount_minus_0x20_zero = leading_zeroes == 0;\n        shift_amount = shift_amount_minus_0x20;\n        if (!shift_amount_minus_0x20_zero && shift_amount_minus_0x20_negative == shift_amount_sign) {\n            integer_part_return = fraction_part_return << (shift_amount & 0xff);\n            fraction_part_return = fraction_part_return >> (0xcU - leading_zeroes & 0xff);\n            goto LAB_08008458;\n        }\n    }\n    if (shift_amount_minus_0x20_zero || shift_amount_minus_0x20_negative != shift_amount_sign) {\n        uint32_t shift_amount_complement = 0x20 - shift_amount;\n        fraction_part_return = fraction_part_return << (shift_amount & 0xff);\n        if (shift_amount_minus_0x20_zero || shift_amount_minus_0x20_negative != shift_amount_sign) {\n            fraction_part_return |= integer_part_return >> (shift_amount_complement & 0xff);\n        }\n        if (shift_amount_minus_0x20_zero || shift_amount_minus_0x20_negative != shift_amount_sign) {\n            integer_part_return = integer_part_return << (shift_amount & 0xff);\n        }\n    }\n\nLAB_08008458:\n    if ((int)shift_amount <= exponent) {\n        return CONCAT44(fraction_part_return + (exponent - shift_amount) * 0x100000, integer_part_return);\n    }\n    uint32_t complement = ~(exponent - shift_amount);\n    if ((int)complement < 0x1f) {\n        int shift_amount_minus_0x1f = complement - 0x13;\n        if (shift_amount_minus_0x1f != 0 && shift_amount_minus_0x1f < 0 == SCARRY4(complement - 0x1f, 0xc)) {\n            return (ulonglong)(integer_part_return >> (0x20 - (0xcU - shift_amount_minus_0x1f) & 0xff) | fraction_part_return << (0xcU - shift_amount_minus_0x1f & 0xff));\n        }\n        complement += 1;\n        return CONCAT44(fraction_part_return >> (complement & 0xff), integer_part_return >> (complement & 0xff) | fraction_part_return << (0x20 - complement & 0xff));\n    }\n    return (ulonglong)(fraction_part_return >> (complement - 0x1f & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085d4",
            "calling": [],
            "imported": false,
            "current_name": "convert_to_double_080085d4"
        },
        "FUN_08006e70": {
            "renaming": {
                "FUN_08006e70": "update_systick_callback_08006e70"
            },
            "code": "void update_systick_callback_08006e70(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e70",
            "calling": [],
            "imported": false,
            "current_name": "update_systick_callback_08006e70"
        },
        "FUN_080002f0": {
            "renaming": {
                "FUN_080002f0": "clear_eeprom_data_080002f0",
                "PTR_eeprom_data_08000308": "eeprom_data",
                "PTR_eeprom_ready_0800030c": "eeprom_ready"
            },
            "code": "void clear_eeprom_data_080002f0(void)\n{\n  memset(PTR_eeprom_data_08000308, 0xff, 4);\n  *PTR_eeprom_ready_0800030c = 1;\n  return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "memcpy_from_eeprom_with_checksum",
                "eeprom_get_char"
            ],
            "imported": false,
            "current_name": "clear_eeprom_data_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(uint16_t GPIO_Pin)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "FUN_0800778c": "initialize_gpio_pins_0800778c",
                "GPIO_InitStruct": "gpio_init_struct",
                "gpio": "gpio_info",
                "puVar1": "gpio_info_ptr",
                "i": "index",
                "PTR_gpio_info_0800784c": "gpio_info_ptr_start",
                "DAT_08007850": "dat_08007850"
            },
            "code": "void initialize_gpio_pins_0800778c(void)\n{\n  uint32_t *gpio_info_ptr;\n  GPIO_InitTypeDef gpio_init_struct;\n  GPIO_INFO *gpio_info;\n  int i;\n  for (i = 0; i < 17; i++)\n  {\n    gpio_info_ptr = (uint32_t *)(PTR_gpio_info_0800784c + i * 0x18);\n    uint32_t pin_mask = 1 << (*gpio_info_ptr >> 4 & 0xff);\n    *(uint32_t *)(DAT_08007850 + 0x30) |= pin_mask;\n    gpio_init_struct.Pin = 1 << (*gpio_info_ptr & 0xf);\n    gpio_init_struct.Mode = gpio_info_ptr[1];\n    gpio_init_struct.Pull = gpio_info_ptr[2];\n    gpio_init_struct.Speed = gpio_info_ptr[3];\n    gpio_init_struct.Alternate = gpio_info_ptr[4];\n    GPIO_TypeDef *gpio_type_def = (GPIO_TypeDef *)(((*gpio_info_ptr >> 4) + 0x100080) * 0x400);\n    HAL_GPIO_Init(gpio_type_def, &gpio_init_struct);\n    if (gpio_info_ptr[5] >= 0)\n    {\n      uint32_t pin_state = (uint32_t)gpio_info_ptr[5];\n      HAL_GPIO_WritePin(gpio_type_def, (uint16_t)(1 << (*gpio_info_ptr & 0xf)), (GPIO_PinState)pin_state);\n    }\n  }\n}",
            "called": [
                "HAL_GPIO_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_gpio_pins_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "coolant_stop"
            ],
            "imported": false,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "FUN_08001ddc": "main_loop_08001ddc",
                "PTR_sys_08001e90": "sys_flags",
                "PTR_settings_08001e94": "settings",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol"
            },
            "code": "int main_loop_08001ddc(void)\n{\n    initialize_serial();\n    initialize_PTR_settings_08001e94();\n    initialize_st();\n    memset(PTR_sys_08001e90, 0, 0x14);\n    *PTR_sys_08001e90 = 1;\n    PTR_sys_08001e90[1] = 1;\n    do {\n        if (*PTR_sys_08001e90 != '\\0') {\n            reset_serial_read_buffer();\n            initialize_plan();\n            initialize_gc();\n            initialize_protocol();\n            initialize_spindle();\n            initialize_coolant();\n            initialize_limits();\n            reset_st();\n            synchronize_current_position();\n            *PTR_sys_08001e90 = 0;\n            PTR_sys_08001e90[2] = 0;\n            if ((PTR_settings_08001e94[0x28] & 2) != 0) {\n                PTR_sys_08001e90[0x10] = 1;\n            }\n            if ((PTR_sys_08001e90[1] == '\\x01') && ((PTR_settings_08001e94[0x28] & 0x10) != 0)) {\n                PTR_sys_08001e90[1] = 6;\n            }\n            if (PTR_sys_08001e90[1] == '\\x06') {\n                report_feedback_message('\\x02');\n            }\n            else {\n                PTR_sys_08001e90[1] = 0;\n                execute_startup_protocol();\n            }\n        }\n        execute_runtime_protocol();\n        process_protocol();\n    } while(true);\n}",
            "called": [
                "sys_sync_current_position",
                "report_feedback_message",
                "coolant_init",
                "spindle_init",
                "memset",
                "gc_init",
                "st_init",
                "protocol_execute_startup",
                "serial_init",
                "protocol_execute_runtime",
                "protocol_init",
                "limits_init",
                "serial_reset_read_buffer",
                "plan_init",
                "protocol_process",
                "st_reset",
                "settings_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "main_loop_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "FUN_080069b4": "set_interrupt_priority_bit_080069b4",
                "IRQn": "irq_num",
                "DAT_080069e0": "interrupt_priority_register",
                "PTR_080069e0": "interrupt_priority_register_pointer",
                "uint": "unsigned_integer",
                "int": "integer",
                "bit_position": "bit_position",
                "bit_mask": "bit_mask"
            },
            "code": "void set_interrupt_priority_bit_080069b4(IRQn_Type irq_num)\n{\n    int* DAT_080069e0 = (int*)(DAT_080069e0 + ((uint)(int)irq_num >> 5) * 4);\n    int bit_position = irq_num & 0x1fU;\n    int bit_mask = 1 << bit_position;\n    *DAT_080069e0 = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_bit_080069b4"
        },
        "FUN_0800b4e4": {
            "renaming": {
                "FUN_0800b4e4": "register_exit_handler_0800b4e4",
                "__func": "__func_ptr",
                "iVar1": "exit_handler_id"
            },
            "code": "int register_exit_handler_0800b4e4(__func *__func_ptr) {\n  int exit_handler_id = __register_exitproc(0, __func_ptr, 0);\n  return exit_handler_id;\n}",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4e4",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_handler_0800b4e4"
        },
        "FUN_08007720": {
            "renaming": {
                "FUN_08007720": "wait_forever_08007720"
            },
            "code": "void wait_forever_08007720(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007720",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_08007720"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "isEndOfString_08009228",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_08009228(void)\n{\n  char currentChar;\n  __aeabi_cfcmpeq();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line",
                "gc_execute_line",
                "printFloat",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "isEndOfString_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "process_interrupts_08007c7c",
                "TIMx": "timer",
                "_DAT_40000010": "GPIOA->ODR",
                "_DAT_4000000c": "GPIOC->IDR",
                "step_delay_isr": "process_delay_isr",
                "step_pulse_isr": "process_pulse_isr",
                "step_period_isr": "process_period_isr"
            },
            "code": "void process_interrupts_08007c7c(void)\n{\n  TIM_TypeDef *timer;\n  \n  if (((GPIOA->IDR & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    step_delay_isr();\n  }\n  if (((GPIOA->IDR & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    step_pulse_isr();\n  }\n  if (((GPIOA->IDR & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    step_period_isr();\n  }\n  return;\n}",
            "called": [
                "step_period_isr",
                "step_pulse_isr",
                "step_delay_isr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": false,
            "current_name": "process_interrupts_08007c7c"
        },
        "FUN_08007726": {
            "renaming": {
                "FUN_08007726": "wait_forever_08007726"
            },
            "code": "void wait_forever_08007726(void)\n{\n  while(true) {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007726",
            "calling": [],
            "imported": false,
            "current_name": "wait_forever_08007726"
        },
        "FUN_08007b70": {
            "renaming": {
                "FUN_08007b70": "enable_timer_08007b70",
                "TIMx": "timer",
                "enable": "enable_value"
            },
            "code": "void enable_timer_08007b70(TIM_TypeDef *timer){\n  uint32_t enable_value = 1;\n  if (_DAT_40000034 != 0) {\n    enable_value = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    enable_value |= 4;\n  }\n  _DAT_4000000c |= enable_value;\n  _DAT_40000000 |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "st_wake_up"
            ],
            "imported": false,
            "current_name": "enable_timer_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "FUN_08004d2c": "read_line_from_eeprom_08004d2c",
                "n": "line_num",
                "line": "line_buffer",
                "iVar1": "copy_result",
                "addr": "address_offset"
            },
            "code": "bool read_line_from_eeprom_08004d2c(uint8_t line_num, char *line_buffer) {\n    int copy_result;\n    uint16_t address_offset;\n    address_offset = (uint16_t)(line_num * 0x101 + 0x300);\n    copy_result = memcpy_from_eeprom_with_checksum(line_buffer, address_offset, 0x100);\n    if(copy_result == 0) {\n        *line_buffer = '\\0';\n        settings_store_startup_line(line_num, line_buffer);\n    }\n    return (bool)(copy_result != 0);\n}",
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "imported": false,
            "current_name": "read_line_from_eeprom_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "FUNC_08003004"
            },
            "code": "\nvoid FUNC_08003004(float x,float y,float z,float feed_rate,uint8_t invert_feed_rate)\n\n{\n  undefined *puVar1;\n  uint8_t uVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long lVar5;\n  long lVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined4 uVar10;\n  float fVar11;\n  undefined4 in_r1;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  undefined4 extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 in_r2;\n  uint uVar12;\n  undefined4 in_r3;\n  ushort *puVar13;\n  int iVar14;\n  uint uVar15;\n  float fVar16;\n  undefined8 extraout_d0;\n  undefined8 extraout_d0_00;\n  undefined8 extraout_d0_01;\n  undefined8 extraout_d0_02;\n  undefined8 extraout_d0_03;\n  undefined8 extraout_d0_04;\n  float extraout_s2;\n  float extraout_s2_00;\n  float extraout_s2_01;\n  float extraout_s2_02;\n  float extraout_s2_03;\n  float extraout_s2_04;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  char in_stack_00000000;\n  float unit_vec [3];\n  float delta_mm [3];\n  int32_t target [3];\n  float v_allowable;\n  float sin_theta_d2;\n  float cos_theta;\n  float inverse_millimeters;\n  block_t *block;\n  float vmax_junction;\n  float inverse_minute;\n  \n  puVar13 = (ushort *)\n            (PTR_block_buffer_08003234 + (uint)(byte)*PTR_block_buffer_head_08003230 * 0x40);\n  uVar3 = __aeabi_fmul(x,*(undefined4 *)PTR_settings_08003238,invert_feed_rate);\n  __aeabi_f2d(uVar3);\n  lVar4 = lround((double)CONCAT44(in_r2,in_r3));\n  uVar3 = __aeabi_fmul(*(undefined4 *)(PTR_settings_08003238 + 4),in_r1);\n  __aeabi_f2d(uVar3);\n  lVar5 = lround((double)CONCAT44(in_r2,in_r3));\n  uVar3 = __aeabi_fmul(*(undefined4 *)(PTR_settings_08003238 + 8),in_r2);\n  __aeabi_f2d(uVar3);\n  lVar6 = lround((double)CONCAT44(in_r2,in_r3));\n  *puVar13 = 0;\n  if (lVar4 < *(int *)PTR_pl_0800323c) {\n    *puVar13 = *puVar13 | 0x20;\n  }\n  if (lVar5 < *(int *)(PTR_pl_0800323c + 4)) {\n    *puVar13 = *puVar13 | 0x880;\n  }\n  if (lVar6 < *(int *)(PTR_pl_0800323c + 8)) {\n    *puVar13 = *puVar13 | 0x200;\n  }\n  iVar14 = lVar4 - *(int *)PTR_pl_0800323c;\n  if (iVar14 < 0) {\n    iVar14 = -iVar14;\n  }\n  *(int *)(puVar13 + 2) = iVar14;\n  iVar14 = lVar5 - *(int *)(PTR_pl_0800323c + 4);\n  if (iVar14 < 0) {\n    iVar14 = -iVar14;\n  }\n  *(int *)(puVar13 + 4) = iVar14;\n  iVar14 = lVar6 - *(int *)(PTR_pl_0800323c + 8);\n  if (iVar14 < 0) {\n    iVar14 = -iVar14;\n  }\n  *(int *)(puVar13 + 6) = iVar14;\n  uVar12 = *(uint *)(puVar13 + 6);\n  if (*(uint *)(puVar13 + 6) < *(uint *)(puVar13 + 4)) {\n    uVar12 = *(uint *)(puVar13 + 4);\n  }\n  uVar15 = *(uint *)(puVar13 + 2);\n  if (*(uint *)(puVar13 + 2) < uVar12) {\n    uVar15 = uVar12;\n  }\n  *(uint *)(puVar13 + 8) = uVar15;\n  if (*(int *)(puVar13 + 8) != 0) {\n    uVar3 = __floatsisf(lVar4 - *(int *)PTR_pl_0800323c);\n    uVar3 = __aeabi_fdiv(uVar3,*(undefined4 *)PTR_settings_08003238);\n    uVar7 = __floatsisf(lVar5 - *(int *)(PTR_pl_0800323c + 4));\n    uVar7 = __aeabi_fdiv(uVar7,*(undefined4 *)(PTR_settings_08003238 + 4));\n    uVar8 = __floatsisf(lVar6 - *(int *)(PTR_pl_0800323c + 8));\n    uVar8 = __aeabi_fdiv(uVar8,*(undefined4 *)(PTR_settings_08003238 + 8));\n    uVar9 = __aeabi_fmul(uVar3,uVar3);\n    uVar10 = __aeabi_fmul(uVar7,uVar7);\n    uVar9 = __addsf3(uVar9,uVar10);\n    uVar10 = __aeabi_fmul(uVar8,uVar8);\n    uVar9 = __addsf3(uVar9,uVar10);\n    uVar9 = __aeabi_f2d(uVar9);\n    sqrt((double)CONCAT44(in_r2,in_r3));\n    uVar9 = __truncdfsf2(uVar9,extraout_r1);\n    *(undefined4 *)(puVar13 + 0x10) = uVar9;\n    uVar9 = __aeabi_fdiv(0x3f800000,*(undefined4 *)(puVar13 + 0x10));\n    if (in_stack_00000000 == '\\0') {\n      inverse_minute = (float)__aeabi_fmul(in_r3,uVar9);\n    }\n    else {\n      inverse_minute = (float)__aeabi_fdiv(0x3f800000,in_r3);\n    }\n    uVar10 = __aeabi_fmul(*(undefined4 *)(puVar13 + 0x10),inverse_minute);\n    *(undefined4 *)(puVar13 + 10) = uVar10;\n    uVar10 = __floatsisf(*(undefined4 *)(puVar13 + 8));\n    uVar10 = __aeabi_fmul(uVar10,inverse_minute);\n    uVar10 = __aeabi_f2d(uVar10);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    uVar10 = __aeabi_d2uiz(uVar10,extraout_r1_00);\n    *(undefined4 *)(puVar13 + 0x1e) = uVar10;\n    uVar10 = __floatsisf(*(undefined4 *)(puVar13 + 8));\n    uVar10 = __aeabi_fmul(uVar10,uVar9);\n    uVar10 = __aeabi_fmul(uVar10,*(undefined4 *)(PTR_settings_08003560 + 0x20));\n    uVar10 = __aeabi_fdiv(uVar10,DAT_08003564);\n    uVar10 = __aeabi_f2d(uVar10);\n    ceil((double)CONCAT44(in_r2,in_r3));\n    uVar10 = __aeabi_d2iz(uVar10,extraout_r1_01);\n    *(undefined4 *)(puVar13 + 0x18) = uVar10;\n    uVar3 = __aeabi_fmul(uVar3,uVar9);\n    uVar7 = __aeabi_fmul(uVar7,uVar9);\n    uVar8 = __aeabi_fmul(uVar8,uVar9);\n    vmax_junction = 0.0;\n    uVar17 = extraout_d0;\n    fVar16 = extraout_s2;\n    if ((*PTR_block_buffer_head_08003568 != *PTR_block_buffer_tail_0800356c) &&\n       (iVar14 = __aeabi_fcmpgt(*(undefined4 *)(PTR_pl_08003570 + 0x18),0), uVar17 = extraout_d0_00,\n       fVar16 = extraout_s2_00, iVar14 != 0)) {\n      uVar9 = __aeabi_fmul(*(uint *)(PTR_pl_08003570 + 0xc) ^ 0x80000000,uVar3);\n      uVar10 = __aeabi_fmul(*(undefined4 *)(PTR_pl_08003570 + 0x10),uVar7);\n      uVar9 = __aeabi_fsub(uVar9,uVar10);\n      uVar10 = __aeabi_fmul(*(undefined4 *)(PTR_pl_08003570 + 0x14),uVar8);\n      uVar9 = __aeabi_fsub(uVar9,uVar10);\n      uVar17 = __aeabi_f2d(uVar9);\n      iVar14 = __aeabi_dcmplt((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),DAT_08003550,DAT_08003554\n                             );\n      uVar17 = extraout_d0_01;\n      fVar16 = extraout_s2_01;\n      if (iVar14 != 0) {\n        iVar14 = __aeabi_fcmplt(*(undefined4 *)(PTR_pl_08003570 + 0x18),\n                                *(undefined4 *)(puVar13 + 10));\n        if (iVar14 == 0) {\n          vmax_junction = *(float *)(puVar13 + 10);\n        }\n        else {\n          vmax_junction = *(float *)(PTR_pl_08003570 + 0x18);\n        }\n        uVar17 = __aeabi_f2d(uVar9);\n        iVar14 = __aeabi_dcmpgt((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),DAT_08003558,\n                                DAT_0800355c);\n        uVar17 = extraout_d0_02;\n        fVar16 = extraout_s2_02;\n        if (iVar14 != 0) {\n          uVar17 = __aeabi_f2d(uVar9);\n          uVar17 = __subdf3(0,DAT_08003574,(int)uVar17,(int)((ulonglong)uVar17 >> 0x20));\n          uVar9 = __muldf3((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),0,DAT_08003578);\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          uVar9 = __truncdfsf2(uVar9,extraout_r1_02);\n          uVar17 = __aeabi_f2d(vmax_junction);\n          uVar10 = __aeabi_fmul(*(undefined4 *)(PTR_settings_08003560 + 0x20),\n                                *(undefined4 *)(PTR_settings_08003560 + 0x24));\n          uVar10 = __aeabi_fmul(uVar10,uVar9);\n          uVar18 = __aeabi_f2d(uVar10);\n          uVar19 = __aeabi_f2d(uVar9);\n          uVar19 = __subdf3(0,DAT_08003574,(int)uVar19,(int)((ulonglong)uVar19 >> 0x20));\n          uVar10 = __divdf3((int)uVar18,(int)((ulonglong)uVar18 >> 0x20),(int)uVar19,\n                            (int)((ulonglong)uVar19 >> 0x20));\n          sqrt((double)CONCAT44(in_r2,in_r3));\n          iVar14 = __aeabi_dcmplt((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),uVar10,extraout_r1_03\n                                 );\n          uVar17 = extraout_d0_03;\n          fVar16 = extraout_s2_03;\n          if (iVar14 == 0) {\n            uVar10 = __aeabi_fmul(*(undefined4 *)(PTR_settings_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_settings_08003560 + 0x24));\n            uVar10 = __aeabi_fmul(uVar10,uVar9);\n            uVar17 = __aeabi_f2d(uVar10);\n            uVar18 = __aeabi_f2d(uVar9);\n            uVar18 = __subdf3(0,DAT_08003574,(int)uVar18,(int)((ulonglong)uVar18 >> 0x20));\n            uVar9 = __divdf3((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar18,\n                             (int)((ulonglong)uVar18 >> 0x20));\n            sqrt((double)CONCAT44(in_r2,in_r3));\n            vmax_junction = (float)__truncdfsf2(uVar9,extraout_r1_04);\n            uVar17 = extraout_d0_04;\n            fVar16 = extraout_s2_04;\n          }\n        }\n      }\n    }\n    *(float *)(puVar13 + 0xe) = vmax_junction;\n    fVar11 = (float)(*(uint *)(PTR_settings_08003560 + 0x20) ^ 0x80000000);\n    max_allowable_speed((float)uVar17,(float)((ulonglong)uVar17 >> 0x20),fVar16);\n    iVar14 = __aeabi_fcmplt(vmax_junction,fVar11);\n    fVar16 = fVar11;\n    if (iVar14 != 0) {\n      fVar16 = vmax_junction;\n    }\n    *(float *)(puVar13 + 0xc) = fVar16;\n    iVar14 = __aeabi_fcmpge(fVar11,*(undefined4 *)(puVar13 + 10));\n    if (iVar14 == 0) {\n      *(undefined *)((int)puVar13 + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)puVar13 + 0x25) = 1;\n    }\n    *(undefined *)(puVar13 + 0x12) = 1;\n    puVar1 = PTR_pl_080035e0;\n    *(undefined4 *)(PTR_pl_080035e0 + 0xc) = uVar3;\n    *(undefined4 *)(puVar1 + 0x10) = uVar7;\n    *(undefined4 *)(puVar1 + 0x14) = uVar8;\n    *(undefined4 *)(PTR_pl_080035e0 + 0x18) = *(undefined4 *)(puVar13 + 10);\n    *PTR_block_buffer_head_080035e8 = *PTR_next_buffer_head_080035e4;\n    uVar2 = next_block_index(*PTR_block_buffer_head_080035e8);\n    *PTR_next_buffer_head_080035e4 = uVar2;\n    puVar1 = PTR_pl_080035e0;\n    *(long *)PTR_pl_080035e0 = lVar4;\n    *(long *)(puVar1 + 4) = lVar5;\n    *(long *)(puVar1 + 8) = lVar6;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "called": [
                "planner_recalculate",
                "__aeabi_fcmpge",
                "ceil",
                "lround",
                "__truncdfsf2",
                "__aeabi_fsub",
                "__muldf3",
                "__aeabi_d2iz",
                "__aeabi_fdiv",
                "max_allowable_speed",
                "__subdf3",
                "__aeabi_fcmpgt",
                "__addsf3",
                "sqrt",
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt",
                "__aeabi_fmul",
                "next_block_index",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__aeabi_fcmplt",
                "__floatsisf",
                "__divdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003004",
            "calling": [
                "mc_line"
            ],
            "imported": false,
            "current_name": "FUNC_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "FUN_080066cc": "get_HCLK_frequency_divided_by_APB_AHB_prescalar_080066cc",
                "uVar1": "HCLK_frequency",
                "uVar2": "leading_zero_bits",
                "result": "prescalar_index",
                "result_1": "N/A",
                "PTR_APBAHBPrescTable_08006714": "APBAHBPrescTable",
                "DAT_08006710": "N/A"
            },
            "code": "uint32_t get_HCLK_frequency_divided_by_APB_AHB_prescalar_080066cc(void)\n{\n  uint32_t HCLK_frequency = HAL_RCC_GetHCLKFreq();\n  uint leading_zero_bits = count_leading_zeroes(0x70000);\n  uint32_t prescalar_index = (*(uint *)(PTR_APBAHBPrescTable_08006714 + 8) & 0xe000) >> (leading_zero_bits & 0xff);\n  return HCLK_frequency >> prescalar_index;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "set_baud_rate"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_divided_by_APB_AHB_prescalar_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "FUN_080018fc": "set_bits_in_register_080018fc",
                "x": "value",
                "DAT_08001928": "register_data_address"
            },
            "code": "void set_bits_in_register_080018fc(uint32_t value) {\n  uint32_t* register_ptr = (uint32_t*)(DAT_08001928 + 0x14);\n  uint32_t current_register_value = *register_ptr;\n  uint32_t mask = 0xfffff55f;\n  uint32_t masked_value = current_register_value & mask;\n  uint32_t new_value = value | masked_value;\n  *register_ptr = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "homing_cycle"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "FUN_080039bc": "read_startup_settings_080039bc",
                "uVar1": "status",
                "n": "line_number",
                "PTR_line_08003a14": "settings_line",
                "settings_read_startup_line": "read_settings_line",
                "report_status_message": "print_status_message",
                "gc_execute_line": "execute_line"
            },
            "code": "void read_startup_settings_080039bc(void)\\n{\\n  uint8_t status;\\n  uint8_t line_number;\\n  for (line_number = 0; line_number < 2; line_number++) {\\n    status = read_PTR_line_08003a14(line_number, PTR_line_08003a14);\\n    if (status == \"\\0\") {\\n      print_newline();\\n    }\\n    else if (*PTR_line_08003a14 != \"\\0\") {\\n      printString(PTR_line_08003a14);\\n      status = execute_line(PTR_line_08003a14);\\n      print_status_message(status);\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "printString",
                "report_status_message",
                "settings_read_startup_line",
                "gc_execute_line"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "protocol_execute_line",
                "grbl_main"
            ],
            "imported": false,
            "current_name": "read_startup_settings_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "FUN_0800618c": "configureClocks_0800618c",
                "*RCC_ClkInitStruct": "clockInit",
                "FLatency": "flashLatency",
                "*DAT_08006400": "FLASH_ACR",
                "HAL_StatusTypeDef": "HAL_StatusTypeDef",
                "RCC_ClkInitTypeDef": "RCC_ClkInitTypeDef",
                "uint32_t": "uint32_t",
                "uint": "uint",
                "timeout": "timeout",
                "HAL_ERROR": "HAL_ERROR",
                "RCC_ClkInitStruct": "clockInit",
                "ClockType": "ClockType",
                "SYSCLKSource": "SYSCLKSource",
                "*DAT_08006404": "RCC_CFGR",
                "RCC_SYSCLKSOURCE_PLLCLK": "RCC_SYSCLKSOURCE_PLLCLK",
                "*RCC_CR": "RCC_CR",
                "RCC_CR_PLLRDY": "RCC_CR_PLLRDY",
                "RCC_SYSCLKSOURCE_HSI": "RCC_SYSCLKSOURCE_HSI",
                "RCC_CR_HSERDY": "RCC_CR_HSERDY",
                "RCC_CR_HSIRDY": "RCC_CR_HSIRDY",
                "RCC_CFGR_SW": "RCC_CFGR_SW",
                "HAL_GetTick": "HAL_GetTick",
                "HAL_TIMEOUT": "HAL_TIMEOUT",
                "RCC_CLOCKTYPE_SYSCLK": "RCC_CLOCKTYPE_SYSCLK",
                "RCC_CFGR_SWS": "RCC_CFGR_SWS",
                "RCC_CLOCKTYPE_HCLK": "RCC_CLOCKTYPE_HCLK",
                "RCC_CFGR_HPRE": "RCC_CFGR_HPRE",
                "RCC_CLOCKTYPE_PCLK1": "RCC_CLOCKTYPE_PCLK1",
                "RCC_CFGR_PPRE1": "RCC_CFGR_PPRE1",
                "RCC_CLOCKTYPE_PCLK2": "RCC_CLOCKTYPE_PCLK2",
                "RCC_CFGR_PPRE2": "RCC_CFGR_PPRE2",
                "SysTick_Config": "SysTick_Config",
                "SysTick_LOAD_RELOAD_Msk": "SysTick_LOAD_RELOAD_Msk",
                "HAL_RCC_GetHCLKFreq": "HAL_RCC_GetHCLKFreq",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef configureClocks_0800618c(RCC_ClkInitTypeDef *clockInit, uint32_t flashLatency)\n{\n    uint32_t timeout;\n\n    if ((**DAT_08006400 & 0xf) < flashLatency) {\n        **DAT_08006400 = (**DAT_08006400 & 0xfffffff0) | flashLatency;\n        if (flashLatency != (**DAT_08006400 & 0xf)) {\n            return HAL_ERROR;\n        }\n        if ((clockInit->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n            if (clockInit->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\n                if ((*RCC_CR & RCC_CR_PLLRDY) == 0) {\n                    return HAL_ERROR;\n                }\n            }\n            else if ((clockInit->SYSCLKSource != RCC_SYSCLKSOURCE_HSI) && ((*RCC_CR & RCC_CR_HSERDY) == 0)) {\n                return HAL_ERROR;\n            }\n            *DAT_08006404 &= (uint32_t) (~*DAT_08006404_SW);\n            *DAT_08006404 |= (uint32_t) clockInit->SYSCLKSource;\n            timeout = HAL_GetTick() + 5000;\n            while ((*DAT_08006404 & (uint32_t) *DAT_08006404_SWS) != (uint32_t) (clockInit->SYSCLKSource << *DAT_08006404_SWS_Pos)) {\n                if (HAL_GetTick() >= timeout) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n    }\n    else {\n        if ((clockInit->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n            if (clockInit->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\n                if ((*RCC_CR & RCC_CR_PLLRDY) == 0) {\n                    return HAL_ERROR;\n                }\n            }\n            else if (clockInit->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {\n                if ((*RCC_CR & RCC_CR_HSERDY) == 0) {\n                    return HAL_ERROR;\n                }\n            }\n            else if ((*RCC_CR & RCC_CR_HSIRDY) == 0) {\n                return HAL_ERROR;\n            }\n            *DAT_08006404 &= (uint32_t) (~*DAT_08006404_SW);\n            *DAT_08006404 |= (uint32_t) clockInit->SYSCLKSource;\n            timeout = HAL_GetTick() + 5000;\n            while ((*DAT_08006404 & (uint32_t) *DAT_08006404_SWS) != (uint32_t) (clockInit->SYSCLKSource << *DAT_08006404_SWS_Pos)) {\n                if (HAL_GetTick() >= timeout) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        **DAT_08006400 = (**DAT_08006400 & 0xfffffff0) | flashLatency;\n        if (flashLatency != (**DAT_08006400 & 0xf)) {\n            return HAL_ERROR;\n        }\n    }\n\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_HCLK) != 0) {\n        *DAT_08006404 &= (uint32_t) (~*DAT_08006404_HPRE);\n        *DAT_08006404 |= (uint32_t) clockInit->AHBCLKDivider;\n    }\n\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n        *DAT_08006404 &= (uint32_t) (~*DAT_08006404_PPRE1);\n        *DAT_08006404 |= (uint32_t) clockInit->APB1CLKDivider;\n    }\n\n    if ((clockInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n        *DAT_08006404 &= (uint32_t) (~*DAT_08006404_PPRE2);\n        *DAT_08006404 |= (uint32_t) (clockInit->APB2CLKDivider << *DAT_08006404_PPRE2_Pos);\n    }\n\n    uint32_t hclkFreq = HAL_RCC_GetHCLKFreq();\n    SysTick_Config((uint32_t) ((uint64_t) SysTick_LOAD_RELOAD_Msk * (uint64_t) hclkFreq / (uint64_t) 1000000));\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "SysTick_Config",
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_data_byte_08006998",
                "DAT_080069b0": "PTR_data"
            },
            "code": "uint32_t get_data_byte_08006998(void)\n{\n    uint32_t data = *(uint *)(DAT_080069b0 + 0xc);\n    uint32_t shifted_data = data >> 8;\n    uint32_t masked_data = shifted_data & 7;\n    return masked_data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "imported": false,
            "current_name": "get_data_byte_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "FUN_080004ac": "initialize_gc_data_080004ac",
                "uVar1": "is_coord_data_read_success",
                "PTR_gc_080004f0": "gc_data",
                "PTR_settings_080004f4": "settings",
                "DAT_080004f8": "data"
            },
            "code": "void initialize_gc_data_080004ac(void)\n{\n    uint8_t is_coord_DAT_080004f8_read_success;\n    memset(PTR_gc_080004f0, 0, sizeof(PTR_gc_080004f0));\n    *(undefined4 *)(PTR_gc_080004f0 + 8) = *(undefined4 *)(PTR_settings_080004f4 + 0x10);\n    select_plane(0, 1, 2);\n    PTR_gc_080004f0[4] = 1;\n    is_coord_DAT_080004f8_read_success = read_coord_DAT_080004f8(PTR_gc_080004f0[28], DAT_080004f8);\n    if (is_coord_DAT_080004f8_read_success == 0)\n    {\n        report_status_message('\\n');\n    }\n}",
            "called": [
                "settings_read_coord_data",
                "memset",
                "report_status_message",
                "select_plane"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "grbl_main"
            ],
            "imported": false,
            "current_name": "initialize_gc_data_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "FUN_080078f4": "calculate_state_080078f4",
                "i": "index",
                "state": "state",
                "PTR_debounce_0800792c": "PTR_debounce_0800792c",
                "uint": "uint32_t"
            },
            "code": "uint32_t calculate_state_080078f4(void)\n{\n  int index;\n  uint32_t state = 0;\n  for (index = 0; index < 4; index++) {\n    state = *(uint *)(PTR_debounce_0800792c + index * 4) | state;\n  }\n  return state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "homing_cycle",
                "debounce_isr"
            ],
            "imported": false,
            "current_name": "calculate_state_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "FUN_080041a0": "printMessage_080041a0",
                "message_code": "messageCode",
                "PTR_DAT_0800420c": "messageStart",
                "PTR_s_Reset_to_continue_08004210": "resetMessage",
                "PTR_s___H____X__to_unlock_08004214": "unlockMessage",
                "PTR_s_Caution__Unlocked_08004218": "cautionMessage",
                "PTR_s_Enabled_0800421c": "enabledMessage",
                "PTR_s_Disabled_08004220": "disabledMessage",
                "PTR_DAT_08004224": "messageEnd"
            },
            "code": "void printMessage_080041a0(uint8_t messageCode)\n{\n    printPgmString(PTR_DAT_0800420c);\n    switch(messageCode) {\n        case RESET:\n            printPgmString(PTR_s_Reset_to_continue_08004210);\n            break;\n        case UNLOCK:\n            printPgmString(PTR_s___H____X__to_unlock_08004214);\n            break;\n        case CAUTION:\n            printPgmString(PTR_s_Caution__Unlocked_08004218);\n            break;\n        case ENABLED:\n            printPgmString(PTR_s_Enabled_0800421c);\n            break;\n        case DISABLED:\n            printPgmString(PTR_s_Disabled_08004220);\n            break;\n    }\n    printPgmString(PTR_DAT_08004224);\n    return;\n}",
            "called": [
                "printPgmString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "protocol_execute_line",
                "grbl_main",
                "protocol_execute_runtime"
            ],
            "imported": false,
            "current_name": "printMessage_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "value_to_shift",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shifted_result"
            },
            "code": "uint calculate_shifted_value_08008bf0(uint value_to_shift, uint shift_amount)\n{\n  int shifted_value;\n  uint shifted_result;\n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shifted_result = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shifted_result) {\n      return (shift_amount << 0xb | 0x80000000 | value_to_shift >> 0x15) >> (shifted_result & 0xff);\n    }\n  }\n  else if ((value_to_shift | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "calculate_trapezoid_for_block",
                "protocol_execute_line",
                "homing_cycle",
                "mc_arc",
                "plan_buffer_line",
                "mc_dwell",
                "gc_execute_line",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08008bf0"
        },
        "FUN_0800771a": {
            "renaming": {
                "FUN_0800771a": "infinite_loop_0800771a"
            },
            "code": "void infinite_loop_0800771a(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771a",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_0800771a"
        },
        "FUN_08003a18": {
            "renaming": {
                "FUN_08003a18": "button_handler_08003a18",
                "buttons": "button_states",
                "PTR_sys_08003a70": "PTR_sys"
            },
            "code": "void button_handler_08003a18(uint32_t buttons)\n{\n  bool is_button_1_pressed = (buttons & 0x80) == 0;\n  bool is_button_2_pressed = (buttons & 0x40) == 0;\n  bool is_button_3_pressed = (buttons & 0x20) != 0;\n  if (is_button_1_pressed) {\n    mc_reset();\n  } else {\n    if (is_button_2_pressed) {\n      PTR_sys_08003a70_08003a70[2] |= 8;\n    } else if (is_button_3_pressed) {\n      PTR_sys_08003a70_08003a70[2] |= 2;\n    }\n  }\n  return;\n}",
            "called": [
                "mc_reset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "debounce_on_handler"
            ],
            "imported": false,
            "current_name": "button_handler_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "enable_stepper_motor_if_third_byte_is_three_08005790",
                "PTR_sys_080057d4": "settings",
                "PTR_step_bits_080057dc": "step_bits",
                "PTR_dirn_bits_080057e0": "dirn_bits",
                "PTR_settings_080057d8": "settings",
                "set_step_pulse_delay": "set_step_pulse_delay",
                "set_step_pulse_time": "set_step_pulse_time",
                "step_isr_enable": "enable_step_isr"
            },
            "code": "void enable_stepper_motor_if_third_byte_is_three_08005790(void)\n{\n  enable_stepper_motor();\n  if (PTR_sys_080057d4[1] == '\\x03') {\n    *(unsigned short *)PTR_step_bits_080057dc = *(unsigned short *)(PTR_sys_080057d4 + 0x18);\n    *(unsigned short *)PTR_dirn_bits_080057e0 = *(unsigned short *)(PTR_sys_080057d4 + 0x1a);\n    set_step_pulse_delay(0x69);\n    set_step_pulse_time(((byte)PTR_sys_080057d4[0xd] + 5) * 0x15);\n    enable_step_isr();\n  }\n  return;\n}",
            "called": [
                "set_step_pulse_time",
                "stepper_motor_enable",
                "step_isr_enable",
                "set_step_pulse_delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "imported": false,
            "current_name": "enable_stepper_motor_if_third_byte_is_three_08005790"
        },
        "FUN_08007732": {
            "renaming": {
                "FUN_08007732": "do_nothing_08007732"
            },
            "code": "\nvoid do_nothing_08007732(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007732",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007732"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "FUNC_08001994"
            },
            "code": "\nvoid FUNC_08001994(uint8_t cycle_mask,int8_t pos_dir,_Bool invert_pin,float homing_rate)\n\n{\n  ushort uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint32_t uVar6;\n  undefined4 in_r3;\n  uint32_t uVar7;\n  undefined8 uVar8;\n  undefined in_stack_ffffff9c;\n  char cVar9;\n  uint32_t steps [3];\n  uint16_t step_bits0;\n  uint32_t dt_min;\n  uint32_t delta_rate;\n  float ds;\n  uint32_t step_event_count;\n  uint32_t limit_state;\n  uint16_t step_bits;\n  uint32_t trap_counter;\n  uint32_t step_rate;\n  uint32_t step_delay;\n  int32_t counter_z;\n  int32_t counter_y;\n  int32_t counter_x;\n  uint16_t dirn_bits;\n  uint32_t dt;\n  uint8_t dist;\n  \n  cVar9 = !invert_pin;\n  memset(steps,0,0xc);\n  dist = (cycle_mask & 1) != 0;\n  if ((bool)dist) {\n    __aeabi_f2d(*(undefined4 *)PTR_settings_08001c90);\n    steps[0] = lround((double)CONCAT17(cycle_mask,\n                                       CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,\n                                                                                in_r3)))));\n  }\n  if ((cycle_mask & 2) != 0) {\n    dist = dist + '\\x01';\n    __aeabi_f2d(*(undefined4 *)(PTR_settings_08001c90 + 4));\n    steps[1] = lround((double)CONCAT17(cycle_mask,\n                                       CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,\n                                                                                in_r3)))));\n  }\n  if ((cycle_mask & 4) != 0) {\n    dist = dist + '\\x01';\n    __aeabi_f2d(*(undefined4 *)(PTR_settings_08001c90 + 8));\n    steps[2] = lround((double)CONCAT17(cycle_mask,\n                                       CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,\n                                                                                in_r3)))));\n  }\n  uVar6 = steps[2];\n  if (steps[2] < steps[1]) {\n    uVar6 = steps[1];\n  }\n  uVar7 = steps[0];\n  if (steps[0] < uVar6) {\n    uVar7 = uVar6;\n  }\n  uVar8 = __floatunsidf(uVar7);\n  uVar2 = __floatunsidf(dist);\n  sqrt((double)CONCAT17(cycle_mask,\n                        CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,in_r3)))));\n  uVar8 = __divdf3((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),uVar2,extraout_r1);\n  uVar2 = __truncdfsf2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n  uVar3 = __aeabi_fmul(*(undefined4 *)(PTR_settings_08001c90 + 0x20),uVar2);\n  uVar3 = __aeabi_fdiv(uVar3,DAT_08001c94);\n  uVar3 = __aeabi_f2d(uVar3);\n  ceil((double)CONCAT17(cycle_mask,\n                        CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,in_r3)))));\n  iVar4 = __aeabi_d2uiz(uVar3,extraout_r1_00);\n  uVar3 = __floatunsidf(dist);\n  sqrt((double)CONCAT17(cycle_mask,\n                        CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,in_r3)))));\n  uVar8 = __aeabi_f2d(in_r3);\n  uVar8 = __muldf3(uVar3,extraout_r1_01,(int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n  uVar3 = __truncdfsf2((int)uVar8,(int)((ulonglong)uVar8 >> 0x20));\n  uVar2 = __aeabi_fmul(uVar2,uVar3);\n  uVar2 = __aeabi_fdiv(DAT_08001c98,uVar2);\n  __aeabi_f2d(uVar2);\n  uVar5 = lround((double)CONCAT17(cycle_mask,\n                                  CONCAT16(pos_dir,CONCAT15(cVar9,CONCAT14(in_stack_ffffff9c,uVar3))\n                                          )));\n  dt = DAT_08001c9c;\n  if (uVar5 < DAT_08001c9c) {\n    dt = uVar5;\n  }\n  uVar1 = *(ushort *)(PTR_settings_08001c90 + 0x18);\n  dirn_bits = *(ushort *)(PTR_settings_08001c90 + 0x1a) ^\n              *(ushort *)(PTR_settings_08001c90 + 0x2a) & 0xaa0;\n  if (pos_dir == '\\0') {\n    dirn_bits = dirn_bits ^ 0xaa0;\n  }\n  dirn_wr((uint)dirn_bits);\n  step_wr((uint)uVar1);\n  counter_z = -(uVar7 >> 1);\n  step_delay = dt - (byte)PTR_settings_08001c90[0xd];\n  step_rate = 0;\n  trap_counter = 10000;\n  counter_y = counter_z;\n  counter_x = counter_z;\n  while( true ) {\n    limit_state = debounce_rd();\n    if (cVar9 != '\\0') {\n      limit_state = limit_state ^ 0x1e;\n    }\n    step_bits = uVar1;\n    if (((cycle_mask & 1) != 0) && (counter_x = counter_x + steps[0], 0 < counter_x)) {\n      if ((limit_state & 0x10) == 0) {\n        cycle_mask = cycle_mask & 0xfe;\n      }\n      else {\n        step_bits = uVar1 ^ 0x10;\n      }\n      counter_x = counter_x - uVar7;\n    }\n    if (((cycle_mask & 2) != 0) && (counter_y = counter_y + steps[1], 0 < counter_y)) {\n      if ((limit_state & 8) == 0) {\n        cycle_mask = cycle_mask & 0xfd;\n      }\n      else {\n        step_bits = step_bits ^ 0x440;\n      }\n      counter_y = counter_y - uVar7;\n    }\n    if (((cycle_mask & 4) != 0) && (counter_z = counter_z + steps[2], 0 < counter_z)) {\n      if ((limit_state & 4) == 0) {\n        cycle_mask = cycle_mask & 0xfb;\n      }\n      else {\n        step_bits = step_bits ^ 0x100;\n      }\n      counter_z = counter_z - uVar7;\n    }\n    if ((cycle_mask == 0) || ((PTR_sys_08001d40[2] & 0x10) != 0)) break;\n    step_wr((uint)step_bits);\n    delay_us((uint)(byte)PTR_settings_08001d44[0xd]);\n    step_wr((uint)uVar1);\n    delay_us(step_delay);\n    if ((uVar5 < dt) && (trap_counter = dt + trap_counter, 20000 < trap_counter)) {\n      trap_counter = trap_counter - 20000;\n      step_rate = iVar4 + step_rate;\n      dt = DAT_08001d48 / step_rate;\n      if (DAT_08001d48 / step_rate < uVar5) {\n        dt = uVar5;\n      }\n      step_delay = dt - (byte)PTR_settings_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "__floatunsidf",
                "memset",
                "dirn_wr",
                "ceil",
                "lround",
                "__truncdfsf2",
                "step_wr",
                "__muldf3",
                "__aeabi_fdiv",
                "delay_us",
                "debounce_rd",
                "sqrt",
                "__aeabi_fmul",
                "__aeabi_d2uiz",
                "__aeabi_f2d",
                "__divdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001994",
            "calling": [
                "limits_go_home"
            ],
            "imported": false,
            "current_name": "FUNC_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "FUN_08007854": "get_bit_at_position_08007854",
                "n": "num",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "int get_bit_at_position_08007854(uint32_t num, uint32_t pos) {\n    uint32_t *PTR_ = (uint32_t *)((num >> 4) * 0x400 + 0x40020010);\n    return (*PTR_ >> (pos & 0xfU)) & 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "debounce_input"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "FUN_08004900": "print_line_info_08004900",
                "n": "num",
                "line": "line",
                "PTR_DAT_08004934": "info_start",
                "PTR_DAT_08004938": "info_mid",
                "PTR_DAT_0800493c": "info_end"
            },
            "code": "void print_line_info_08004900(uint8_t num, char *line)\n{\n  printPgmString(PTR_DAT_08004934);\n  printInteger((uint)num);\n  printPgmString(PTR_DAT_08004938);\n  printString(line);\n  printPgmString(PTR_DAT_0800493c);\n  return;\n}",
            "called": [
                "printInteger",
                "printString",
                "printPgmString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "protocol_execute_line"
            ],
            "imported": false,
            "current_name": "print_line_info_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "st_wake_up"
            ],
            "imported": false,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "FUN_08004228": "printGrblHelpMessage_08004228",
                "PTR_s__Grbl_0_8c______for_help__08004238": "helpMessage"
            },
            "code": "void printGrblHelpMessage_08004228(void)\n{\n  printPgmString(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}",
            "called": [
                "printPgmString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "protocol_init"
            ],
            "imported": false,
            "current_name": "printGrblHelpMessage_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "FUNC_08009b24"
            },
            "code": "\nuint FUNC_08009b24(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  int local_3c;\n  \n  uVar1 = DAT_08009d70;\n  param_2 = param_2 & 0x7fffffff;\n  param_4 = param_4 & 0x7fffffff;\n  uVar3 = param_1;\n  uVar7 = param_2;\n  if (param_2 < param_4) {\n    uVar3 = param_3;\n    param_3 = param_1;\n    uVar7 = param_4;\n    param_4 = param_2;\n  }\n  if (0x3c00000 < (int)(uVar7 - param_4)) {\n    uVar3 = __aeabi_dadd(uVar3,uVar7,param_3,param_4);\n    return uVar3;\n  }\n  if (DAT_08009d68 < (int)uVar7) {\n    if (DAT_08009d74 < (int)uVar7) {\n      if ((uVar7 & 0xfffff | uVar3) != 0) {\n        uVar3 = __aeabi_dadd(uVar3,uVar7,param_3,param_4);\n      }\n      if ((param_4 ^ 0x7ff00000 | param_3) != 0) {\n        return uVar3;\n      }\n      return param_3;\n    }\n    uVar7 = uVar7 + 0xda800000;\n    param_4 = param_4 + 0xda800000;\n    local_3c = 600;\n  }\n  else {\n    local_3c = 0;\n  }\n  uVar11 = CONCAT44(uVar7,uVar3);\n  uVar10 = CONCAT44(param_4,param_3);\n  if ((int)param_4 <= DAT_08009d6c) {\n    if ((int)param_4 < 0x100000) {\n      if ((param_4 | param_3) == 0) {\n        return uVar3;\n      }\n      uVar10 = __muldf3(param_3,param_4,0,DAT_08009d70);\n      uVar11 = __muldf3(uVar3,uVar7,0,uVar1);\n      local_3c = local_3c + -0x3fe;\n    }\n    else {\n      uVar7 = uVar7 + 0x25800000;\n      uVar11 = CONCAT44(uVar7,uVar3);\n      param_4 = param_4 + 0x25800000;\n      uVar10 = CONCAT44(param_4,param_3);\n      local_3c = local_3c + -600;\n    }\n  }\n  uVar9 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar8 = (undefined4)uVar11;\n  iVar6 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar5 = (undefined4)uVar10;\n  uVar10 = __subdf3(uVar8,uVar9,uVar5,iVar6);\n  iVar4 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar1 = (undefined4)uVar10;\n  iVar2 = __aeabi_dcmplt(uVar5,iVar6,uVar1,iVar4);\n  if (iVar2 == 0) {\n    uVar10 = __muldf3(0,param_4,0);\n    uVar11 = __muldf3(uVar1,iVar4 + -0x80000000,uVar1,iVar4);\n    uVar12 = __aeabi_dadd(uVar8,uVar9,uVar8,uVar9);\n    uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar5,iVar6);\n    uVar13 = __subdf3(uVar5,iVar6,0,param_4);\n    uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                      (int)((ulonglong)uVar12 >> 0x20));\n    __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n             (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __ieee754_sqrt();\n  }\n  else {\n    uVar10 = __muldf3(0,uVar7,0,uVar7);\n    uVar11 = __muldf3(uVar5,iVar6 + -0x80000000,uVar5,iVar6);\n    uVar12 = __aeabi_dadd(uVar8,uVar9,0,uVar7);\n    uVar13 = __subdf3(uVar8,uVar9,0,uVar7);\n    uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                      (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                      (int)((ulonglong)uVar12 >> 0x20));\n    __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n             (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = __ieee754_sqrt();\n  }\n  uVar3 = (uint)uVar10;\n  if (local_3c != 0) {\n    uVar3 = __muldf3(uVar3,(int)((ulonglong)uVar10 >> 0x20),0,local_3c * 0x100000 + 0x3ff00000);\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "__ieee754_sqrt",
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009b24",
            "calling": [
                "hypot"
            ],
            "imported": false,
            "current_name": "FUNC_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "FUN_080076c8": "toggle_bit_at_index_080076c8",
                "n": "index",
                "PTR_": "data_pointer",
                "DAT_": "current_data",
                "bit_mask": "bit_mask"
            },
            "code": "void toggle_bit_at_index_080076c8(uint32_t index)\n{\n    uint32_t* PTR_ = (uint32_t*)((index >> 4) * 0x400 + 0x40020014);\n    uint32_t DAT_ = *PTR_;\n    uint32_t bit_mask = 1 << (index & 0xfU);\n    *PTR_ = DAT_ ^ bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "toggle_bit_at_index_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "st_go_idle"
            ],
            "imported": false,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "FUN_08006a8c": "set_interrupt_priority_08006a8c",
                "IRQn": "irq_number",
                "DAT_08006abc": "irq_register_base_address",
                "irqn_position": "irq_position",
                "irq_bit_mask": "irq_bit_mask",
                "*irq_register_address": "irq_register_value"
            },
            "code": "void set_interrupt_priority_08006a8c(IRQn_Type irq_number) {\n    int *irq_register_address = (int *)(DAT_08006abc + (((uint)(int)irq_number >> 5) + 0x60) * 4);\n    int irq_position = irq_number & 0x1fU;\n    int irq_bit_mask = 1 << irq_position;\n    *irq_register_address = irq_bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08006a8c"
        },
        "FUN_0800772c": {
            "renaming": {
                "FUN_0800772c": "infinite_loop_0800772c"
            },
            "code": "void infinite_loop_0800772c(void)\n{\n  while( true )\n  {\n    // Do nothing\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800772c",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_0800772c"
        },
        "FUN_0800283a": {
            "renaming": {
                "FUN_0800283a": "set_current_position_0800283a",
                "*(int32_t *)(PTR_sys_08002868 + 4)": "x",
                "*(int32_t *)(PTR_sys_08002868 + 8)": "y",
                "*(int32_t *)(PTR_sys_08002868 + 0xc)": "z",
                "plan_set_current_position": "set_plan_current_position",
                "gc_set_current_position": "set_gc_current_position"
            },
            "code": "void set_current_position_0800283a(int32_t *(int32_t *)(PTR_s*(int32_t *)(PTR_sys_08002868 + 8)s_08002868 + 4), int32_t *(int32_t *)(PTR_sys_08002868 + 8), int32_t *(int32_t *)(PTR_sys_08002868 + 0xc))\n{\n  plan_set_current_position_0800283a(*(int32_t *)(PTR_s*(int32_t *)(PTR_sys_08002868 + 8)s_08002868 + 4), *(int32_t *)(PTR_sys_08002868 + 8), *(int32_t *)(PTR_sys_08002868 + 0xc));\n  gc_set_current_position_0800283a(*(int32_t *)(PTR_s*(int32_t *)(PTR_sys_08002868 + 8)s_08002868 + 4), *(int32_t *)(PTR_sys_08002868 + 8), *(int32_t *)(PTR_sys_08002868 + 0xc));\n  return;\n}",
            "called": [
                "gc_set_current_position",
                "plan_set_current_position"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "mc_go_home",
                "grbl_main"
            ],
            "imported": false,
            "current_name": "set_current_position_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "FUN_0800881c": "binary_operation_0800881c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "mask",
                "bVar4": "condition_1",
                "result_1": "result_1",
                "result_2": "result_2"
            },
            "code": "ulonglong binary_operation_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n{\n    uint temp_1;\n    uint temp_2;\n    uint temp_3;\n    uint temp_4;\n    uint mask = 0x80000000;\n    bool condition_1;\n    bool condition_2;\n    bool condition_3;\n    bool condition_4;\n    uint result_1 = 0;\n    uint result_2 = 0;\n    if (input_2 == 0 && input_1 == 0)\n    {\n        return (ulonglong)((input_4 ^ input_2) & mask) << 0x20;\n    }\n    if (input_4 == 0 && input_3 == 0)\n    {\n        do {\n            temp_1 = input_1 & mask;\n            input_1 = input_1 << 1;\n            result_2 = input_2 * 2 + (uint)(temp_1 != 0);\n        } while ((result_2 & 0x100000) == 0);\n        result_2 = result_2 | (input_2 & mask);\n        if ((input_3 & mask) != 0)\n        {\n            return CONCAT44(result_2,input_1);\n        }\n    }\n    else\n    {\n        condition_1 = (input_1 | input_2 << 1) == 0;\n        if (condition_1)\n        {\n            result_2 = input_4;\n            result_1 = input_3;\n        }\n        condition_2 = (input_3 | input_4 << 1) == 0;\n        temp_2 = input_4;\n        temp_3 = input_3;\n        if (!condition_1)\n        {\n            condition_3 = condition_2;\n            if (!condition_2)\n            {\n                condition_4 = (input_1 | input_2 << 0xc) == 0;\n                condition_3 = condition_4;\n                if (condition_4)\n                {\n                    temp_2 = input_4;\n                    temp_3 = input_3;\n                }\n            }\n            if (condition_3)\n            {\n                return (ulonglong)((input_2 ^ input_4) & mask | 0x7ff00000) << 0x20;\n            }\n        }\n        if (temp_2 != input_4 && (temp_2 & input_4 >> 0x14) != input_4)\n        {\n            do {\n                temp_4 = input_3 & mask;\n                input_3 = input_3 << 1;\n                result_1 = input_1 * 2 + (uint)(temp_4 != 0);\n            } while ((result_1 & 0x100000) == 0);\n            result_2 = input_2;\n            result_1 = result_1 | (input_1 & mask);\n            if ((temp_2 & mask) != 0)\n            {\n                return CONCAT44(result_2,result_1);\n            }\n        }\n    }\n    return CONCAT44(result_2,result_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "binary_operation_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "write_line_to_eeprom_08004bc0",
                "n": "page_number",
                "line": "line",
                "addr": "address",
                "memcpy_to_eeprom_with_checksum": "memcpy_to_eeprom_with_checksum"
            },
            "code": "void write_line_to_eeprom_08004bc0(uint8_t page_number, char *line) {\n  uint16_t address = (uint16_t)(page_number * 0x101 + 0x300);\n  memcpy_to_eeprom_with_checksum(address, line, 0x100);\n  return;\n}",
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "imported": false,
            "current_name": "write_line_to_eeprom_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "is_not_carry_or_zero_08008b4c",
                "in_CY": "carry",
                "in_ZR": "zero"
            },
            "code": "bool is_not_carry_or_zero_08008b4c(void)\n{\n  bool carry = __aeabi_cdrcmple();\n  return !carry || !in_ZR;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "__kernel_rem_pio2"
            ],
            "imported": false,
            "current_name": "is_not_carry_or_zero_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "save_settings_to_eeprom_08004c2a",
                "PTR_settings_08004c44": "settings"
            },
            "code": "void save_settings_to_eeprom_08004c2a(void)\n{\n  eeprom_put_char(0, 5);\n  memcpy_to_eeprom_with_checksum(1, PTR_settings_08004c44, 0x40);\n  return;\n}",
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "settings_reset",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "save_settings_to_eeprom_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "print_character_to_usart_0800826a",
                "ch": "character"
            },
            "code": "int print_character_to_usart_0800826a(int character)\n{\n  usart_putc((char)character);\n  return 0;\n}",
            "called": [
                "usart_putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": false,
            "current_name": "print_character_to_usart_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_end_of_string_08008b60",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08008b60(void)\n{\n  char current_char;\n  __aeabi_cdrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "floor",
                "ceil",
                "plan_buffer_line",
                "atan"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "set_step_period_based_on_steps_per_minute_08005324",
                "steps_per_minute": "input_steps_per_minute",
                "ticks_00": "step_period_ticks",
                "local_14": "min_steps_per_minute",
                "ticks": "step_period_ticks"
            },
            "code": "void set_step_period_based_on_steps_per_minute_08005324(uint32_t steps_per_minute)\n{\n  uint ticks;\n  uint32_t min_steps_per_minute = 800;\n  if (steps_per_minute < min_steps_per_minute) {\n    steps_per_minute = min_steps_per_minute;\n  }\n  ticks = DAT_08005358 / steps_per_minute;\n  *(uint *)(PTR_st_0800535c + 0x14) = ticks;\n  set_step_period(ticks);\n  return;\n}",
            "called": [
                "set_step_period"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "step_period_isr",
                "st_cycle_reinitialize",
                "st_reset"
            ],
            "imported": false,
            "current_name": "set_step_period_based_on_steps_per_minute_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "FUN_08000310": "read_eeprom_data_08000310",
                "addr": "address",
                "PTR_eeprom_ready_08000338": "eeprom_ready",
                "eeprom_init": "initialize_eeprom",
                "PTR_eeprom_data_0800033c": "eeprom_data"
            },
            "code": "char read_eeprom_data_08000310(uint address) {\n  if (*PTR_eeprom_ready_08000338 == 0) {\n    initialize_eeprom();\n  }\n  return PTR_eeprom_data_0800033c[address & 0x3ff];\n}",
            "called": [
                "eeprom_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "read_global_settings",
                "memcpy_from_eeprom_with_checksum"
            ],
            "imported": false,
            "current_name": "read_eeprom_data_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "spindle_run"
            ],
            "imported": false,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "FUN_08007a70": "set_timer_interrupt_priority_08007a70",
                "tim": "timer",
                "pre": "preemption_priority",
                "sub": "sub_priority",
                "irq": "interrupt_number",
                "DAT_40000000": "PTR_40000000",
                "DAT_08007ac8": "PTR_08007ac8",
                "DAT_08007acc": "PTR_08007acc"
            },
            "code": "void set_timer_interrupt_priority_08007a70(TIM_TypeDef *timer, uint32_t preemption_priority, uint32_t sub_priority)\n{\n  uint32_t interrupt_number;\n  if (timer == (TIM_TypeDef *)&DAT_40000000) {\n    interrupt_number = TIM2_IRQn;\n  }\n  else if (timer == DAT_08007ac8) {\n    interrupt_number = TIM3_IRQn;\n  }\n  else {\n    if (timer != DAT_08007acc) {\n      return;\n    }\n    interrupt_number = TIM4_IRQn;\n  }\n  HAL_NVIC_SetPriority((IRQn_Type)interrupt_number, preemption_priority, sub_priority);\n  NVIC_EnableIRQ((IRQn_Type)interrupt_number);\n  return;\n}",
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "step_timer_init"
            ],
            "imported": false,
            "current_name": "set_timer_interrupt_priority_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "get_context_address_0800b5b0",
                "ctx": "context"
            },
            "code": "int get_context_address_0800b5b0(EVP_PKEY_CTX *context){\n  return (int)context;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "__libc_init_array",
                "frame_dummy",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "get_context_address_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "FUN_08002978": "calculate_time_to_reach_target_velocity_08002978",
                "in_r0": "unused_parameter_1",
                "in_r1": "acceleration",
                "in_r2": "distance",
                "in_stack_ffffffe0": "unused_parameter_2",
                "uVar1": "acceleration_squared",
                "uVar2": "distance_doubled",
                "extraout_r1": "unused_variable",
                "fVar3": "time_to_reach_target_velocity"
            },
            "code": "float calculate_time_to_reach_target_velocity_08002978(float acceleration, float target_velocity, float distance)\n{\n    float acceleration_squared = acceleration * acceleration;\n    float distance_doubled = distance * 2.0f;\n    float velocity_squared = target_velocity * target_velocity;\n    float under_root = acceleration_squared * distance_doubled + velocity_squared;\n    float time_to_reach_target_velocity = sqrtf(under_root / acceleration_squared);\n    return time_to_reach_target_velocity;\n}",
            "called": [
                "__addsf3",
                "sqrt",
                "__aeabi_fmul",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "calculate_time_to_reach_target_velocity_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "FUNC_08009d78"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint FUNC_08009d78(undefined4 param_1,uint param_2,undefined8 *param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 extraout_r1;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 in_stack_ffffffa8;\n  undefined4 in_stack_ffffffac;\n  undefined4 local_50;\n  undefined4 uStack_4c;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  \n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= DAT_08009fb0) {\n    *(undefined4 *)param_3 = param_1;\n    *(uint *)((int)param_3 + 4) = param_2;\n    *(undefined4 *)(param_3 + 1) = 0;\n    *(undefined4 *)((int)param_3 + 0xc) = 0;\n    return 0;\n  }\n  if ((int)uVar8 <= DAT_08009fb4) {\n    if ((int)param_2 < 1) {\n      uVar10 = __aeabi_dadd(param_1,param_2,DAT_08009f88,DAT_08009f8c);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar1 = (undefined4)uVar10;\n      if (uVar8 != DAT_0800a1b8) {\n        uVar10 = __aeabi_dadd(uVar1,uVar2,DAT_0800a1b0,DAT_0800a1b4);\n        *param_3 = uVar10;\n        uVar10 = __subdf3(uVar1,uVar2);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        param_3[1] = uVar10;\n        return -1;\n      }\n      uVar10 = __aeabi_dadd(uVar1,uVar2,DAT_0800a190,DAT_0800a194);\n      uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar11 = __aeabi_dadd((int)uVar10,uVar1,DAT_0800a198,DAT_0800a19c);\n      *param_3 = uVar11;\n      uVar10 = __subdf3((int)uVar10,uVar1);\n      uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      param_3[1] = uVar10;\n      return -1;\n    }\n    uVar10 = __subdf3();\n    uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    if (uVar8 != DAT_08009fb8) {\n      uVar10 = __subdf3(uVar1,uVar2,DAT_08009f90,DAT_08009f94);\n      *param_3 = uVar10;\n      uVar10 = __subdf3(uVar1,uVar2);\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009f90,DAT_08009f94);\n      param_3[1] = uVar10;\n      return 1;\n    }\n    uVar10 = __subdf3(uVar1,uVar2,DAT_08009f98,DAT_08009f9c);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = __subdf3((int)uVar10,uVar1,DAT_08009fa0,DAT_08009fa4);\n    *param_3 = uVar11;\n    uVar10 = __subdf3((int)uVar10,uVar1);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    param_3[1] = uVar10;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)uVar8) {\n    if (DAT_08009fc0 < (int)uVar8) {\n      uVar10 = __subdf3(param_1,param_2,param_1,param_2);\n      param_3[1] = uVar10;\n      *param_3 = uVar10;\n      return 0;\n    }\n    iVar9 = ((int)uVar8 >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    local_40 = __aeabi_i2d();\n    uVar10 = __subdf3(param_1,uVar8 + iVar9 * -0x100000,(int)local_40,\n                      (int)((ulonglong)local_40 >> 0x20));\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    __aeabi_d2iz();\n    local_38 = __aeabi_i2d();\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    local_30 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    __aeabi_dcmpeq((int)local_30,(int)((ulonglong)local_30 >> 0x20),0,0);\n    iVar9 = __kernel_rem_pio2(&local_40,param_3,iVar9);\n    if (-1 < (int)param_2) {\n      return iVar9;\n    }\n    *(int *)((int)param_3 + 4) = *(int *)((int)param_3 + 4) + -0x80000000;\n    *(int *)((int)param_3 + 0xc) = *(int *)((int)param_3 + 0xc) + -0x80000000;\n    return -iVar9;\n  }\n  fabs((double)CONCAT44(in_stack_ffffffac,in_stack_ffffffa8));\n  uVar10 = __muldf3();\n  __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fcc);\n  iVar9 = __aeabi_d2iz();\n  uVar10 = __aeabi_i2d();\n  uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar1 = (undefined4)uVar10;\n  uVar10 = __muldf3(uVar1,uVar4,DAT_08009f88,DAT_08009f8c);\n  uVar10 = __subdf3(param_1,extraout_r1,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n  uVar5 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar2 = (undefined4)uVar10;\n  uVar11 = __muldf3(uVar1,uVar4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < iVar9) || (*(uint *)(PTR_npio2_hw_08009fd0 + (iVar9 + -1) * 4) == uVar8)) {\n    uVar12 = __subdf3(uVar2,uVar5,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)((uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    uVar11 = __muldf3(uVar1,uVar4,DAT_0800a190,DAT_0800a194);\n    uVar6 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = __subdf3(uVar2,uVar5,(int)uVar11,uVar6);\n    uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar3 = (undefined4)uVar10;\n    uVar12 = __subdf3(uVar2,uVar5,uVar3,uVar7);\n    uVar11 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar6);\n    uVar12 = __muldf3(uVar1,uVar4,DAT_0800a198,DAT_0800a19c);\n    uVar11 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                      (int)((ulonglong)uVar11 >> 0x20));\n    uVar12 = __subdf3(uVar3,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)(((int)uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    uVar11 = __muldf3(uVar1,uVar4,DAT_0800a1a0,DAT_0800a1a4);\n    uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = __subdf3(uVar3,uVar7,(int)uVar11,uVar2);\n    uVar12 = __subdf3(uVar3,uVar7);\n    uVar11 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar2);\n    uVar12 = __muldf3(uVar1,uVar4,DAT_0800a1a8,DAT_0800a1ac);\n    uVar11 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                      (int)((ulonglong)uVar11 >> 0x20));\n  }\n  uVar12 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                    (int)((ulonglong)uVar11 >> 0x20));\nLAB_0800a0ce:\n  uStack_4c = (undefined4)((ulonglong)uVar10 >> 0x20);\n  local_50 = (undefined4)uVar10;\n  *param_3 = uVar12;\n  uVar10 = __subdf3(local_50,uStack_4c);\n  uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                    (int)((ulonglong)uVar11 >> 0x20));\n  param_3[1] = uVar10;\n  if ((int)param_2 < 0) {\n    *(int *)param_3 = (int)uVar12;\n    *(int *)((int)param_3 + 4) = (int)((ulonglong)uVar12 >> 0x20) + -0x80000000;\n    *(int *)(param_3 + 1) = (int)uVar10;\n    *(int *)((int)param_3 + 0xc) = (int)((ulonglong)uVar10 >> 0x20) + -0x80000000;\n    iVar9 = -iVar9;\n  }\n  return iVar9;\n}\n\n",
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "__aeabi_dcmpeq",
                "__aeabi_d2iz",
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "__kernel_rem_pio2"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009d78",
            "calling": [
                "sin",
                "cos"
            ],
            "imported": false,
            "current_name": "FUNC_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "FUN_08003826": "print_float_08003826",
                "n": "number",
                "in_r0": "sign_bit",
                "iVar1": "is_negative",
                "uVar2": "multiplier",
                "bVar3": "decimal_places",
                "uVar4": "integer_part",
                "local_24": "number_rounded",
                "uStack_1d": "num_digits",
                "buf": "digits",
                "a": "integer_part_copy",
                "i": "loop_counter"
            },
            "code": "void print_float_08003826(float number) {\n  uint sign_bit;\n  int is_negative;\n  undefined4 multiplier;\n  byte decimal_places;\n  uint32_t integer_part;\n  uint8_t digits[10];\n  uint8_t i;\n  uint8_t num_digits;\n  \n  is_negative = __aeabi_fcmplt(number, 0);\n  sign_bit = is_negative;\n  if (is_negative) {\n    serial_write('-');\n    number = -number;\n  }\n  multiplier = 1;\n  decimal_places = PTR_settings_08003970[0x3d];\n  for (i = 0; i < decimal_places; i++) {\n    multiplier *= 10;\n  }\n  number = round(number * multiplier);\n  integer_part = (uint32_t)number / multiplier;\n  num_digits = 0;\n  if (integer_part == 0) {\n    digits[num_digits++] = '0';\n  }\n  while (integer_part > 0) {\n    digits[num_digits++] = (integer_part % 10) + '0';\n    integer_part /= 10;\n  }\n  for (i = num_digits; i < decimal_places; i++) {\n    digits[i] = '0';\n  }\n  if (decimal_places > 0) {\n    digits[decimal_places] = '.';\n  }\n  for (i = decimal_places + 1; i <= num_digits; i++) {\n    digits[i] = digits[i - 1];\n  }\n  digits[0] = '0';\n  if (decimal_places > 0 && num_digits == decimal_places) {\n    digits[++num_digits] = '0';\n  }\n  for (i = num_digits; i > 0; i--) {\n    serial_write(digits[i - 1]);\n  }\n}",
            "called": [
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_f2iz",
                "serial_write",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "report_realtime_status",
                "report_gcode_parameters",
                "report_grbl_settings",
                "report_gcode_modes"
            ],
            "imported": false,
            "current_name": "print_float_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "FUN_0800923c": "check_if_zero_or_nan_0800923c",
                "in_CY": "is_nan",
                "in_ZR": "is_zero"
            },
            "code": "bool check_if_zero_or_nan_0800923c(void)\n{\n  bool is_nan = __aeabi_cfcmpeq();\n  return !is_nan || is_zero;\n}",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "mc_arc",
                "gc_execute_line",
                "settings_store_global_setting"
            ],
            "imported": false,
            "current_name": "check_if_zero_or_nan_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "FUN_08002afc": "calculate_entry_speed_08002afc",
                "previous": "previous_block",
                "current": "current_block",
                "next": "next_block",
                "iVar1": "is_previous_block_speed_greater",
                "fVar3": "current_entry_speed",
                "uVar2": "max_allowable_speed_setting",
                "acceleration": "acceleration_value",
                "target_velocity": "target_velocity_value",
                "distance": "distance_value",
                "acceleration_00": "acceleration_value_00",
                "target_velocity_00": "target_velocity_value_00",
                "distance_00": "distance_value_00",
                "entry_speed": "entry_speed_value"
            },
            "code": "void calculate_entry_speed_08002afc(block_t *previous_block, block_t *current_block, block_t *next_block) {\n  int is_previous_block_valid = previous_block != NULL && !previous_block->nominal_length_flag;\n  if (is_previous_block_valid && previous_block->entry_speed > current_block->entry_speed) {\n    float current_entry_speed = current_block->entry_speed;\n    uint max_allowable_speed_setting = *(uint *)(PTR_settings_08002ba4 + 0x20) ^ 0x80000000;\n    float acceleration;\n    float target_velocity;\n    float distance;\n    max_allowable_speed(acceleration, target_velocity, distance);\n    if (current_entry_speed <= max_allowable_speed_setting) {\n      float max_allowable_speed_value = (float)max_allowable_speed_setting;\n      float acceleration_00;\n      float target_velocity_00;\n      float distance_00;\n      max_allowable_speed(acceleration_00, target_velocity_00, distance_00);\n      current_entry_speed = max_allowable_speed_value;\n    }\n    if (current_block->entry_speed != current_entry_speed) {\n      current_block->entry_speed = current_entry_speed;\n      current_block->recalculate_flag = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt",
                "max_allowable_speed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "planner_forward_pass"
            ],
            "imported": false,
            "current_name": "calculate_entry_speed_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "reset_all": "should_reset_all",
                "PTR_settings_08004d0c": "settings",
                "DAT_08004d10": "default_setting",
                "DAT_08004d14": "default_setting_1",
                "DAT_08004d18": "default_setting_2",
                "DAT_08004d1c": "default_setting_3",
                "DAT_08004d20": "default_setting_4",
                "DAT_08004d24": "default_setting_5",
                "DAT_08004d28": "default_setting_6"
            },
            "code": "void initialize_settings_08004c48(_Bool should_reset_all)\n{\n    if (should_reset_all)\n    {\n        PTR_settings_08004d0c[0] = DAT_08004d10;\n        PTR_settings_08004d0c[1] = DAT_08004d10;\n        PTR_settings_08004d0c[2] = DAT_08004d10;\n        PTR_settings_08004d0c[13] = 10;\n        PTR_settings_08004d0c[16] = DAT_08004d14;\n        PTR_settings_08004d0c[20] = DAT_08004d18;\n        PTR_settings_08004d0c[28] = DAT_08004d1c;\n        PTR_settings_08004d0c[29] = DAT_08004d20;\n        PTR_settings_08004d0c[30] = DAT_08004d14;\n        PTR_settings_08004d0c[33] = 100;\n        PTR_settings_08004d0c[34] = DAT_08004d24;\n        PTR_settings_08004d0c[60] = 25;\n        PTR_settings_08004d0c[61] = 3;\n        PTR_settings_08004d0c[62] = 25;\n    }\n    PTR_settings_08004d0c[40] |= 2;\n    PTR_settings_08004d0c[40] |= 16;\n    PTR_settings_08004d0c[42] = 0;\n    PTR_settings_08004d0c[43] = DAT_08004d28;\n    PTR_settings_08004d0c[44] = DAT_08004d14;\n    PTR_settings_08004d0c[52] = 1065353216;\n    PTR_settings_08004d0c[60] = 25;\n    PTR_settings_08004d0c[61] = 3;\n    PTR_settings_08004d0c[62] = 25;\n    write_global_PTR_settings_08004d0c();\n    return;\n}",
            "called": [
                "write_global_settings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "read_global_settings",
                "settings_init"
            ],
            "imported": false,
            "current_name": "initialize_settings_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "FUN_080002a0": "delay_in_milliseconds_080002a0",
                "_ms": "milliseconds_to_delay"
            },
            "code": "void delay_in_milliseconds_080002a0(uint milliseconds_to_delay)\n{\n  HAL_Delay(milliseconds_to_delay);\n  return;\n}",
            "called": [
                "HAL_Delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "mc_dwell"
            ],
            "imported": false,
            "current_name": "delay_in_milliseconds_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "FUN_08009250": "is_comparison_result_less_than_or_equal_to_zero_08009250",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_comparison_result_less_than_or_equal_to_zero_08009250(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_zero;\n  __aeabi_cfrcmple();\n  return is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "is_comparison_result_less_than_or_equal_to_zero_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "FUN_0800640c": "configure_RCC_MCO_0800640c",
                "RCC_MCOx": "mco_index",
                "RCC_MCOSource": "mco_source",
                "RCC_MCODiv": "mco_divider",
                "GPIO_InitStruct": "gpio_init",
                "DAT_080064b0": "ptr_data_080064b0",
                "GPIO_InitStruct.Pin": "gpio_init.pin",
                "GPIO_InitStruct.Mode": "gpio_init.mode",
                "GPIO_InitStruct.Speed": "gpio_init.speed",
                "GPIO_InitStruct.Pull": "gpio_init.pull",
                "GPIO_InitStruct.Alternate": "gpio_init.alternate",
                "HAL_GPIO_Init": "init_gpio",
                "DAT_080064b4": "ptr_data_080064b4",
                "DAT_080064b8": "ptr_data_080064b8"
            },
            "code": "void configure_RCC_MCO_0800640c(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv) {\n  GPIO_InitTypeDef GPIO_InitStruct;\n  if (RCC_MCOx == 0) {\n    *(uint *)(DAT_080064b0 + 0x30) |= 1;\n    GPIO_InitStruct.Pin = GPIO_PIN_8;\n    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n    GPIO_InitStruct.Pull = GPIO_NOPULL;\n    GPIO_InitStruct.Alternate = 0;\n    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);\n    *(uint32_t *)(DAT_080064b0 + 8) = RCC_MCODiv | RCC_MCOSource | (*(uint *)(DAT_080064b0 + 8) & 0xf89fffff);\n  }\n  else {\n    *(uint *)(DAT_080064b0 + 0x30) |= 4;\n    GPIO_InitStruct.Pin = GPIO_PIN_9;\n    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;\n    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;\n    GPIO_InitStruct.Pull = GPIO_NOPULL;\n    GPIO_InitStruct.Alternate = 0;\n    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);\n    *(uint32_t *)(DAT_080064b0 + 8) = RCC_MCOSource | (RCC_MCODiv << 3) | (*(uint *)(DAT_080064b0 + 8) & 0x7ffffff);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": false,
            "current_name": "configure_RCC_MCO_0800640c"
        },
        "FUN_0800773e": {
            "renaming": {
                "FUN_0800773e": "do_nothing_0800773e"
            },
            "code": "\nvoid do_nothing_0800773e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800773e",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800773e"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "compare_double_values_08008af0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "result1",
                "param_4": "result2"
            },
            "code": "void compare_double_values_08008af0(float value1, float value2, int result1, int result2)\n{\n  __aeabi_cdcmpeq(value1, value2, result1, result2);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_double_values_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_08006e1a",
                "IRQn": "interrupt_number",
                "uVar1": "active_interrupt"
            },
            "code": "uint32_t get_active_interrupt_08006e1a(IRQn_Type interrupt_number)\n{\n  uint32_t active_interrupt = NVIC_GetActive(interrupt_number);\n  return active_interrupt;\n}",
            "called": [
                "NVIC_GetActive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": false,
            "current_name": "get_active_interrupt_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "set_bit_080052ac",
                "x": "value",
                "DAT_080052d8": "data",
                "PTR_080052d8": "data_ptr",
                "val": "mask"
            },
            "code": "void set_bit_080052ac(uint32_t value)\n{\n  uint32_t *PTR_080052d8 = (uint32_t *)(DAT_080052d8 + 0x14);\n  uint32_t mask = 0xfffffaaf;\n  *PTR_080052d8 = value | (*PTR_080052d8 & mask);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "st_init",
                "step_pulse_isr",
                "step_delay_isr"
            ],
            "imported": false,
            "current_name": "set_bit_080052ac"
        },
        "FUN_080064bc": {
            "renaming": {
                "FUN_080064bc": "set_dat_pointer_to_one_080064bc",
                "*DAT_080064d0": "*dat_pointer"
            },
            "code": "void set_dat_pointer_to_one_080064bc(void)\n{\n  *DAT_080064d0 = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064bc",
            "calling": [],
            "imported": false,
            "current_name": "set_dat_pointer_to_one_080064bc"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "receive_data_08008286",
                "iVar1": "has_byte_arrived",
                "data": "received_byte",
                "c": "hook_result"
            },
            "code": "uint8_t receive_data_08008286(void)\n{\n  uint8_t received_byte;\n  int has_byte_arrived;\n  uint8_t hook_result;\n  \n  has_byte_arrived = usart_tstc();\n  if (has_byte_arrived != 0) {\n    received_byte = usart_getc();\n    hook_result = serial_rx_hook(received_byte);\n    if (hook_result == 0) {\n      return received_byte;\n    }\n  }\n  return 0xff;\n}",
            "called": [
                "serial_rx_hook",
                "usart_tstc",
                "usart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "protocol_process"
            ],
            "imported": false,
            "current_name": "receive_data_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "is_valid_input_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_valid_input_08008b74(uint32_t input_1, int input_2, uint32_t input_3, int input_4) {\n  bool is_input_2_valid = ((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0);\n  bool is_input_4_valid = ((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0));\n  if (is_input_2_valid && is_input_4_valid) {\n    return 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "sqrt"
            ],
            "imported": false,
            "current_name": "is_valid_input_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "FUN_0800b524": "add_entry_to_global_array_0800b524",
                "param_1": "entry_type",
                "param_2": "value",
                "param_3": "mutex_ptr",
                "param_4": "impure_ptr",
                "puVar1": "mutex_ptr_value",
                "uVar2": "return_value",
                "uVar3": "bit_mask_shifted",
                "iVar4": "impure_ptr_value",
                "iVar5": "index",
                "uVar6": "bit_mask",
                "PTR___atexit_recursive_mutex_0800b5ac": "mutex_ptr_value",
                "PTR__global_impure_ptr_0800b5a8": "impure_ptr_value",
                "undefined4": "uint",
                "undefined": "void",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "code": "int add_entry_to_global_array_0800b524(int entry_type, int value, int mutex_ptr, int impure_ptr) {\n  uint index;\n  int PTR__global_impure_ptr_0800b5a8;\n  uint bit_mask;\n  uint *global_array_ptr;\n  uint *PTR___atexit_recursive_mutex_0800b5ac;\n  __retarget_lock_acquire_recursive(*(undefined4 *)mutex_ptr);\n  PTR__global_impure_ptr_0800b5a8 = *(int *)impure_ptr;\n  global_array_ptr = (uint *)(PTR__global_impure_ptr_0800b5a8 + 0x148);\n  index = *(uint *)(PTR__global_impure_ptr_0800b5a8 + 0x14c);\n  if (index == 0) {\n    index = PTR__global_impure_ptr_0800b5a8 + 0x14c;\n    *(uint *)(PTR__global_impure_ptr_0800b5a8 + 0x148) = index;\n  }\n  bit_mask = *(uint *)(index + 4);\n  if ((int)bit_mask < 0x20) {\n    if (entry_type != 0) {\n      uint *entry_ptr = (uint *)(index + bit_mask * 4);\n      *(int *)(entry_ptr + 0x22) = value;\n      uint bit_mask_shifted = 1 << (bit_mask & 0xff);\n      *(uint *)(index + 0x188) = *(uint *)(index + 0x188) | bit_mask_shifted;\n      *(int *)(entry_ptr + 0x84) = mutex_ptr;\n      if (entry_type == 2) {\n        *(uint *)(index + 0x18c) = bit_mask_shifted | *(uint *)(index + 0x18c);\n      }\n    }\n    uint *PTR___atexit_recursive_mutex_0800b5ac = (uint *)PTR___atexit_recursive_mutex_0800b5ac;\n    __retarget_lock_release_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_0800b5ac);\n    return 0;\n  }\n  else {\n    uint *PTR___atexit_recursive_mutex_0800b5ac = (uint *)PTR___atexit_recursive_mutex_0800b5ac;\n    __retarget_lock_release_recursive(*(undefined4 *)PTR___atexit_recursive_mutex_0800b5ac);\n    return -1;\n  }\n}",
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "atexit"
            ],
            "imported": false,
            "current_name": "add_entry_to_global_array_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "spindle_stop"
            ],
            "imported": false,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08009818": {
            "renaming": {
                "FUN_08009818": "calculate_trig_function_08009818",
                "param_1": "numerator1",
                "param_2": "numerator2",
                "param_3": "denominator1",
                "param_4": "denominator2",
                "param_5": "input_value",
                "unaff_r4": "result",
                "uVar2": "shifted_values",
                "uVar3": "abs_denominator2",
                "uVar4": "abs_denominator1",
                "uVar5": "result",
                "DAT_08009af0": "MAX_VALUE",
                "DAT_08009af4": "MAX_VALUE",
                "DAT_08009b18": "MAX_VALUE"
            },
            "code": "void calculate_trig_function_08009818(uint32_t numerator1, uint32_t numerator2, uint32_t denominator1, uint32_t denominator2, double input_value)\n{\n    int difference;\n    uint32_t abs_denominator2 = denominator2 & 0x7fffffff;\n    uint32_t abs_denominator1 = denominator1 & 0x7fffffff;\n    \n    if ((DAT_08009af0 < (abs_denominator2 | (-denominator1 | denominator1) >> 0x1f)) || (DAT_08009af0 < (abs_denominator1 | (-numerator1 | numerator1) >> 0x1f))) {\n        __aeabi_dadd(denominator1, denominator2, numerator1, numerator2);\n    }\n    else {\n        if ((denominator2 + 0xc0100000 | denominator1) == 0) {\n            atan(input_value);\n            return;\n        }\n        uint32_t uVar2 = (int)denominator2 >> 0x1e & 2U | numerator2 >> 0x1f;\n        if (((((abs_denominator1 | denominator1) != 0) && ((abs_denominator2 | denominator2) != 0)) && (abs_denominator2 != DAT_08009af0)) && (abs_denominator1 != DAT_08009af0)) {\n            difference = (int)(abs_denominator1 - abs_denominator2) >> 0x14;\n            if (((int)(abs_denominator1 - abs_denominator2) < 0x3d00000) && ((-1 < (int)denominator2 || (difference + 0x3c < 0 == SCARRY4(difference,0x3c))))){\n                __divdf3(numerator1, numerator2, denominator1, denominator2);\n                fabs((double)CONCAT44(unaff_r4, denominator2));\n                atan((double)CONCAT44(unaff_r4, denominator2));\n            }\n            if (uVar2 != 1) {\n                if (uVar2 == 2) {\n                    uint64_t result = __subdf3();\n                    __subdf3(DAT_08009af0, DAT_08009af0, (int)result, (int)(result >> 0x20));\n                }\n                else if (uVar2 != 0) {\n                    uint64_t result = __subdf3();\n                    __subdf3((int)result, (int)(result >> 0x20), DAT_08009af0, DAT_08009af0);\n                }\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "mc_arc"
            ],
            "imported": false,
            "current_name": "calculate_trig_function_08009818"
        },
        "FUN_08007ea4": {
            "renaming": {
                "FUN_08007ea4": "set_usart_control_register_08007ea4",
                "usart": "usart_ptr",
                "DAT_08007f3c": "control_register_ptr",
                "PTR_DAT_08007f38": "usart_1_ptr",
                "PTR_DAT_08007f40": "usart_2_ptr",
                "PTR_DAT_08007f44": "usart_3_ptr",
                "PTR_DAT_08007f48": "usart_4_ptr",
                "PTR_DAT_08007f4c": "usart_5_ptr",
                "PTR_DAT_08007f50": "usart_6_ptr",
                "*control_register": "control_register_val_ptr",
                "*status_register": "status_register_val_ptr"
            },
            "code": "void set_usart_control_register_08007ea4(USART_TypeDef *usart)\n{\n  uint32_t *control_register = (uint32_t *)(DAT_08007f3c + 0x40);\n  uint32_t *status_register = (uint32_t *)(DAT_08007f3c + 0x44);\n\n  if (usart == PTR_DAT_08007f38) {\n    *status_register |= 0x10;\n  }\n  else if (usart == PTR_DAT_08007f40) {\n    *control_register |= 0x20000;\n  }\n  else if (usart == PTR_DAT_08007f44) {\n    *control_register |= 0x40000;\n  }\n  else if (usart == PTR_DAT_08007f48) {\n    *control_register |= 0x80000;\n  }\n  else if (usart == PTR_DAT_08007f4c) {\n    *control_register |= 0x100000;\n  }\n  else if (usart == PTR_DAT_08007f50) {\n    *status_register |= 0x20;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "usart_init"
            ],
            "imported": false,
            "current_name": "set_usart_control_register_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "FUN_08007756": "check_and_debounce_button_press_08007756",
                "uVar1": "current_ticks",
                "ticks": "ticks_since_last_toggle",
                "gpio_toggle": "toggle_led",
                "HAL_IncTick": "increment_system_tick",
                "LED_PIN": "0x3c",
                "debounce_isr": "debounce_interrupt_service_routine"
            },
            "code": "void check_and_debounce_button_press_08007756(void)\n{\n  uint32_t current_ticks;\n  uint32_t ticks_since_last_toggle;\n\n  current_ticks = HAL_GetTick();\n  ticks_since_last_toggle = current_ticks & 0x1ff;\n  if (ticks_since_last_toggle == 0)\n  {\n    gpio_toggle(LED_PIN);\n  }\n  if ((current_ticks & 0xf) == 0)\n  {\n    debounce_isr();\n  }\n  HAL_IncTick();\n  return;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_IncTick",
                "gpio_toggle",
                "debounce_isr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": false,
            "current_name": "check_and_debounce_button_press_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "do_nothing_0800774a"
            },
            "code": "\nvoid do_nothing_0800774a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800774a"
        },
        "FUN_0800423c": {
            "renaming": {
                "FUN_0800423c": "printGrblSettings_0800423c",
                "PTR_s_____view_Grbl_settings______view_0800424c": "settingsString"
            },
            "code": "void printGrblSettings_0800423c() {\n  printPgmString(PTR_s_____view_Grbl_settings______view_0800424c);\n  return;\n}",
            "called": [
                "printPgmString"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "protocol_execute_line"
            ],
            "imported": false,
            "current_name": "printGrblSettings_0800423c"
        },
        "FUN_080064d4": {
            "renaming": {
                "FUN_080064d4": "clear_dat_pointer_080064d4",
                "DAT_080064e8": "data_pointer"
            },
            "code": "void clear_dat_pointer_080064d4(void)\n{\n  *DAT_080064e8 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064d4",
            "calling": [],
            "imported": false,
            "current_name": "clear_dat_pointer_080064d4"
        },
        "FUN_08006e38": {
            "renaming": {
                "FUN_08006e38": "set_clk_source_08006e38",
                "CLKSource": "clk_source",
                "*DAT_08006e6c": "register_address"
            },
            "code": "void set_clk_source_08006e38(uint32_t clk_source)\n{\n    if (clk_source == 4) {\n        *DAT_08006e6c |= 4;\n    }\n    else {\n        *DAT_08006e6c &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e38",
            "calling": [],
            "imported": false,
            "current_name": "set_clk_source_08006e38"
        },
        "FUN_08009264": {
            "renaming": {
                "FUN_08009264": "is_end_of_string_08009264",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08009264(char current_char)\n{\n  __aeabi_cfrcmple();\n  return current_char == '\\0';\n}",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "FUN_08007e08": "initialize_timers_08007e08",
                "step_timer_init": "initialize_step_timer",
                "g540_timer_init": "initialize_g540_timer",
                "g540_timer_start": "start_g540_timer"
            },
            "code": "void initialize_timers_08007e08(void)\n{\n  initialize_step_timer();\n  initialize_g540_timer();\n  start_g540_timer();\n  return;\n}",
            "called": [
                "g540_timer_start",
                "g540_timer_init",
                "step_timer_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_timers_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "FUN_08002fac": "is_tail_equal_to_head_08002fac",
                "PTR_block_buffer_tail_08002fcc": "block_buffer_tail",
                "PTR_next_buffer_head_08002fd0": "next_buffer_head"
            },
            "code": "bool is_tail_equal_to_head_08002fac(void)\n{\n  uint8_t tail = *PTR_block_buffer_tail_08002fcc;\n  uint8_t head = *PTR_next_buffer_head_08002fd0;\n  return tail == head;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "mc_line"
            ],
            "imported": false,
            "current_name": "is_tail_equal_to_head_08002fac"
        },
        "FUN_08005b04": {
            "renaming": {
                "FUN_08005b04": "set_flag_08005b04",
                "uint": "uint32_t",
                "PTR_08005b1c": "ptr",
                "DAT_08005b1c": "data"
            },
            "code": "void set_flag_08005b04(void)\n{\n  uint32_t* PTR_08005b1c = (uint32_t*)(DAT_08005b1c + 4);\n  *PTR_08005b1c = *PTR_08005b1c | 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b04",
            "calling": [],
            "imported": false,
            "current_name": "set_flag_08005b04"
        },
        "FUN_080002b6": {
            "renaming": {
                "FUN_080002b6": "wait_microseconds_080002b6",
                "_us": "microseconds_to_wait",
                "uVar1": "current_microseconds",
                "bVar2": "timeout_reached",
                "uVar3": "start_time",
                "uVar4": "current_time",
                "timeout": "timeout_time"
            },
            "code": "void wait_microseconds_080002b6(uint microseconds_to_wait)\n{\n  uint current_microseconds;\n  bool timeout_reached;\n  uint64_t start_time;\n  uint64_t timeout_time;\n  start_time = get_current_usecs();\n  do {\n    current_microseconds = (uint)(get_current_usecs() >> 0x20);\n    timeout_time._0_4_ = (uint)(start_time + microseconds_to_wait);\n    timeout_time._4_4_ = (uint)(start_time + microseconds_to_wait >> 0x20);\n    timeout_reached = timeout_time._4_4_ <= current_microseconds;\n    if (current_microseconds == timeout_time._4_4_) {\n      timeout_reached = (uint)timeout_time <= (uint)get_current_usecs();\n    }\n  } while (!timeout_reached);\n}",
            "called": [
                "get_current_usecs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": false,
            "current_name": "wait_microseconds_080002b6"
        },
        "FUN_080075c8": {
            "renaming": {
                "FUN_080075c8": "calculateSystemCoreClock_080075c8",
                "uVar1": "pllConfig",
                "pllm": "pllMultiplier",
                "pllsource": "pllSource",
                "pllp": "pllPrescaler",
                "tmp": "not_used",
                "pllvco": "pllvco"
            },
            "code": "void calculateSystemCoreClock_080075c8(void)\n{\n    uint8_t pllConfig = *(uint *)(DAT_080076b4 + 8) & 0xc;\n    uint8_t pllMultiplier = *(uint *)(DAT_080076b4 + 4) & 0x3f;\n    uint8_t pllSource = *(uint *)(DAT_080076b4 + 4) >> 0x16 & 1;\n    uint8_t pllPrescaler = *(uint *)(DAT_080076b4 + 8) >> 4 & 0xf;\n    uint32_t pllvco;\n\n    switch (pllConfig)\n    {\n        case 8:\n            if (pllSource == 0)\n            {\n                pllvco = (pllMultiplier & 0x1ff) * (DAT_080076bc / pllMultiplier);\n            }\n            else\n            {\n                pllvco = (pllMultiplier & 0x1ff) * (DAT_080076c0 / pllMultiplier);\n            }\n            *(uint *)PTR_SystemCoreClock_080076b8 = pllvco / (((*(uint *)(DAT_080076b4 + 4) >> 0x10 & 3) + 1) * 2);\n            break;\n        case 0:\n            *(uint *)PTR_SystemCoreClock_080076b8 = DAT_080076bc;\n            break;\n        case 4:\n            *(uint *)PTR_SystemCoreClock_080076b8 = DAT_080076c0;\n            break;\n        default:\n            *(uint *)PTR_SystemCoreClock_080076b8 = DAT_080076bc;\n            break;\n    }\n\n    *(uint *)PTR_SystemCoreClock_080076b8 = *(uint *)PTR_SystemCoreClock_080076b8 >> PTR_AHBPrescTable_080076c4[pllPrescaler];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075c8",
            "calling": [],
            "imported": false,
            "current_name": "calculateSystemCoreClock_080075c8"
        }
    },
    "used_tokens": 217326,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08005b90",
            "FUN_080071d0",
            "FUN_08008e60",
            "FUN_08005984",
            "FUN_08006718",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_08008b00",
            "FUN_0800585c",
            "FUN_0800597c",
            "FUN_08009314",
            "FUN_08009798",
            "FUN_08007930",
            "FUN_08000188",
            "FUN_08008e70",
            "FUN_08009318",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008b10",
            "FUN_0800736c",
            "FUN_08008c30",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007ad0",
            "FUN_080039a0",
            "FUN_08009204",
            "FUN_080029d8",
            "FUN_08007c5e",
            "FUN_08005760",
            "FUN_08008b24",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_0800369c",
            "FUN_08005a98",
            "FUN_080044e8",
            "FUN_08006c9c",
            "FUN_0800195c",
            "FUN_08009214",
            "FUN_08004dd2",
            "FUN_08005778",
            "FUN_080028bc",
            "FUN_08006628",
            "FUN_08008b38",
            "FUN_0800738e",
            "FUN_080092c4",
            "FUN_08008250",
            "FUN_0800184c",
            "FUN_08005ad4",
            "FUN_08005b3c",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08000374",
            "FUN_080037fc",
            "FUN_08007dd8",
            "FUN_0800a1bc",
            "FUN_0800525c",
            "FUN_080073d4",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_08006e88",
            "FUN_0800b4f0",
            "FUN_080036f0",
            "FUN_08005c74",
            "FUN_0800375c",
            "FUN_08009990",
            "FUN_08005b58",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_08009194",
            "FUN_08003f34",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08001d4c",
            "FUN_08000268",
            "FUN_0800918c",
            "FUN_08003778",
            "FUN_0800b3dc",
            "FUN_080046d0",
            "FUN_08006d72",
            "FUN_0800756c",
            "FUN_0800691c",
            "FUN_080001f8",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_08006a18",
            "FUN_08002c18",
            "FUN_08006ac0",
            "FUN_0800919c",
            "FUN_0800b2cc",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_08005aec",
            "FUN_08005b74",
            "FUN_0800583c",
            "FUN_08001e98",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08009654",
            "FUN_08007bc2",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_080068bc",
            "FUN_08006d98",
            "FUN_08005a68",
            "FUN_080079c0",
            "FUN_0800b2e0",
            "FUN_08002908",
            "FUN_08007c40",
            "FUN_080094c0",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_0800b2e8",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08004250",
            "FUN_08006dc4",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08008a64",
            "FUN_08005900",
            "FUN_08002638",
            "FUN_08005bac",
            "FUN_080051b4",
            "FUN_08005c30",
            "FUN_0800056c",
            "FUN_08002f24",
            "FUN_080059b4",
            "FUN_08006c04",
            "FUN_08002e08",
            "FUN_08005bc4",
            "FUN_08006680",
            "FUN_08000340",
            "FUN_08004bf4",
            "FUN_08004d7c",
            "FUN_08009278",
            "FUN_080004fc",
            "FUN_08000220",
            "FUN_08005238",
            "FUN_08007da8",
            "FUN_08004148",
            "FUN_08004940",
            "FUN_08008a74",
            "FUN_08002fd4",
            "FUN_08002408",
            "FUN_08003618",
            "FUN_08005b20",
            "FUN_08007d08",
            "FUN_080091fc",
            "FUN_080058a0",
            "FUN_08008a6c",
            "FUN_080036c6",
            "FUN_08008190",
            "FUN_080074c8",
            "FUN_0800b430",
            "FUN_08004030",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_08006de0",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_080003ec",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08003740",
            "FUN_08000478",
            "FUN_08006d2e",
            "FUN_08007e1c",
            "FUN_0800adf0",
            "FUN_08003a74",
            "FUN_08006b00",
            "FUN_0800b4d0",
            "FUN_08007f54",
            "FUN_08003b98",
            "FUN_080024c4",
            "FUN_08002f40",
            "FUN_080025e8",
            "FUN_08005ac4",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08007310",
            "FUN_08007436",
            "FUN_08005814",
            "FUN_08005bdc",
            "FUN_080085d4",
            "FUN_08006e70",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08001ddc",
            "FUN_080069b4",
            "FUN_0800b4e4",
            "FUN_08007720",
            "FUN_08009228",
            "FUN_08007c7c",
            "FUN_08007726",
            "FUN_08007b70",
            "FUN_08004d2c",
            "FUN_080066cc",
            "FUN_080018fc",
            "FUN_080039bc",
            "FUN_0800618c",
            "FUN_08006998",
            "FUN_080004ac",
            "FUN_080078f4",
            "FUN_080041a0",
            "FUN_08008bf0",
            "FUN_0800771a",
            "FUN_08003a18",
            "FUN_08005790",
            "FUN_08007854",
            "FUN_08004900",
            "FUN_08004228",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800772c",
            "FUN_0800283a",
            "FUN_0800881c",
            "FUN_08004bc0",
            "FUN_08008b4c",
            "FUN_08004c2a",
            "FUN_0800826a",
            "FUN_08008b60",
            "FUN_08005324",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_0800b5b0",
            "FUN_08002978",
            "FUN_08003826",
            "FUN_0800923c",
            "FUN_08002afc",
            "FUN_08004c48",
            "FUN_080002a0",
            "FUN_08009250",
            "FUN_0800640c",
            "FUN_08008af0",
            "FUN_08006e1a",
            "FUN_080052ac",
            "FUN_080064bc",
            "FUN_08008286",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08009818",
            "FUN_08007ea4",
            "FUN_08007756",
            "FUN_0800423c",
            "FUN_080064d4",
            "FUN_08006e38",
            "FUN_08009264",
            "FUN_08007e08",
            "FUN_08002fac",
            "FUN_08005b04",
            "FUN_080002b6",
            "FUN_080075c8"
        ],
        [
            "FUN_08002edc",
            "FUN_080096e8",
            "FUN_08002ba8",
            "FUN_08009410",
            "FUN_080098d0",
            "FUN_0800981c",
            "FUN_08002a94",
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}