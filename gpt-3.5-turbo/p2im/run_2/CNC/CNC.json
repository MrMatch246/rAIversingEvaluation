{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "check_flag_status_0800192c",
                "PTR_DAT_08001954": "flag_array",
                "PTR_DAT_08001958": "flag_output",
                "undefined4": "flag_status",
                "0x28": "FLAG_INDEX",
                "8": "FLAG_BITMASK",
                "0": "FLAG_OFF",
                "1": "FLAG_ON"
            },
            "code": "void check_flag_status_0800192c(void)\n{\n  if ((PTR_DAT_08001954[0x28] & FLAG_BITMASK) == 0) {\n    *PTR_DAT_08001958 = FLAG_OFF;\n  }\n  else {\n    *PTR_DAT_08001958 = FLAG_ON;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "check_flag_status_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "update_register_08006950",
                "param_1": "value",
                "DAT_08006994": "register_base",
                "PTR_08006998": "register_ptr",
                "current_value": "current_register_value",
                "mask": "clear_mask",
                "masked_value": "cleared_register_value",
                "shifted_value": "shifted_register_value",
                "new_value": "updated_register_value"
            },
            "code": "void update_register_08006950(uint value) {\n    uint* PTR_08006998 = (uint*)(DAT_08006994 + 0xc);\n    uint current_value = *PTR_08006998;\n    uint mask = 0xf8ff;\n    uint masked_value = current_value & mask;\n    uint shifted_value = (value & 7) << 8;\n    uint new_value = masked_value | shifted_value | 0x5fa0000;\n    *PTR_08006998 = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "FUN_08006ce0"
            ],
            "imported": false,
            "current_name": "update_register_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "convert_to_signed_fixed_point_08008ba0",
                "param_1": "input_integer",
                "param_2": "input_fractional",
                "uVar1": "result",
                "iVar2": "scaled_fractional",
                "uVar3": "abs_scaled_fractional"
            },
            "code": "uint convert_to_signed_fixed_point_08008ba0(uint input_integer, uint input_fractional) {\n  uint result = 0;\n  int scaled_fractional = input_fractional * 2 + 0x200000;\n  if (input_fractional * 2 < 0xffe00000) {\n    if (scaled_fractional >= 0) {\n      return 0;\n    }\n    uint abs_scaled_fractional = -scaled_fractional - 0x3e1;\n    if (abs_scaled_fractional != 0 && abs_scaled_fractional < 0xfffffc20) {\n      result = (input_fractional << 0xb | 0x80000000 | input_integer >> 0x15) >> (abs_scaled_fractional & 0xff);\n      if ((input_fractional & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_integer | input_fractional << 0xc) != 0) {\n    return 0;\n  }\n  input_fractional = input_fractional & 0x80000000;\n  if (input_fractional == 0) {\n    input_fractional = 0x7fffffff;\n  }\n  return input_fractional;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "FUN_0800a348",
                "FUN_080005b4",
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080095b8",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "convert_to_signed_fixed_point_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "FUN_080059f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005984": {
            "renaming": {
                "FUN_08005984": "handle_system_interrupt_08005984",
                "param_1": "interrupt_number",
                "uVar1": "return_value",
                "is_interrupt_enabled": "interrupt_enabled"
            },
            "code": "int handle_system_interrupt_08005984(int interrupt_number){\n  int is_interrupt_enabled = *(int *)PTR_DAT_080059b0;\n  if (is_interrupt_enabled == 0) {\n    return trigger_system_interrupt_0800597c(1, interrupt_number, 0);\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_0800597c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "handle_system_interrupt_08005984"
        },
        "FUN_08007a10": {
            "renaming": {
                "FUN_08007a10": "set_flags_08007a10",
                "param_1": "flag",
                "DAT_08007a64": "flag_register"
            },
            "code": "void set_flags_08007a10(int flag) {\n  uint* DAT_08007a64 = (uint*)(DAT_08007a64 + 0x40);\n  if (flag == 0x40000000) {\n    *DAT_08007a64 |= 1;\n  }\n  else if (flag == DAT_08007a68) {\n    *DAT_08007a64 |= 2;\n  }\n  else if (flag == DAT_08007a6c) {\n    *DAT_08007a64 |= 4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "imported": false,
            "current_name": "set_flags_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "FUN_0800856c": "get_concatenated_values_0800856c",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "absolute_value",
                "uVar3": "mask",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_value",
                "uVar6": "mask",
                "in_r12": "in_r12",
                "bVar7": "is_shift_amount_negative",
                "bVar8": "is_shift_amount_zero",
                "bVar9": "is_negative"
            },
            "code": "unsigned long long get_concatenated_values_0800856c(uint input_value) {\n    uint mask = 0x80000000;\n    uint absolute_value = input_value;\n    if ((int)mask < 0) {\n        absolute_value = -input_value;\n    }\n    uint shift_value = 0;\n    int leading_zeroes = count_leading_zeroes(absolute_value);\n    shift_value = leading_zeroes + 0x15;\n    bool is_negative = SBORROW4(shift_value, 0x20);\n    uint shift_amount = leading_zeroes - 0xb;\n    bool is_shift_amount_negative = (int)shift_amount < 0;\n    bool is_shift_amount_zero = shift_amount == 0;\n    if ((int)shift_value < 0x20) {\n        is_negative = SCARRY4(shift_amount, 0xc);\n        leading_zeroes = leading_zeroes + 1;\n        is_shift_amount_negative = leading_zeroes < 0;\n        is_shift_amount_zero = leading_zeroes == 0;\n        shift_amount = shift_value;\n        if (!is_shift_amount_zero && is_shift_amount_negative == is_negative) {\n            uint left_shifted_value = absolute_value << (shift_value & 0xff);\n            absolute_value = absolute_value >> (0xcU - leading_zeroes & 0xff);\n            goto LAB_08008458;\n        }\n    }\n    uint in_r12 = 0;\n    if (is_shift_amount_zero || is_shift_amount_negative != is_negative) {\n        in_r12 = 0x20 - shift_amount;\n    }\n    absolute_value = absolute_value << (shift_amount & 0xff);\n    if (is_shift_amount_zero || is_shift_amount_negative != is_negative) {\n        absolute_value = absolute_value | 0U >> (in_r12 & 0xff);\n    }\n    if (is_shift_amount_zero || is_shift_amount_negative != is_negative) {\n        shift_value = 0 << (shift_amount & 0xff);\n    }\nLAB_08008458:\n    if ((int)shift_value < 0x433) {\n        return CONCAT44(absolute_value + (0x432 - shift_value) * 0x100000 | mask, shift_amount);\n    }\n    uint inverted_shift_value = ~(0x432 - shift_value);\n    if (0x1e < (int)inverted_shift_value) {\n        return CONCAT44(input_value, absolute_value >> (inverted_shift_value - 0x1f & 0xff)) & 0x80000000ffffffff;\n    }\n    int shifted_value = inverted_shift_value - 0x13;\n    if (shifted_value == 0 || shifted_value < 0 != SCARRY4(inverted_shift_value - 0x1f, 0xc)) {\n        inverted_shift_value = inverted_shift_value + 1;\n        return CONCAT44(mask | absolute_value >> (inverted_shift_value & 0xff), shift_amount >> (inverted_shift_value & 0xff) | absolute_value << (0x20 - inverted_shift_value & 0xff));\n    }\n    return CONCAT44(input_value, shift_amount >> (0x20 - (0xcU - shifted_value) & 0xff) | absolute_value << (0xcU - shifted_value & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "get_concatenated_values_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "FUN_08008b00": "check_and_return_value_08008b00",
                "param_1": "value",
                "check_for_duplicate_08008a74": "check_for_duplicate"
            },
            "code": "undefined4 check_and_return_value_08008b00(undefined4 value)\n{\n  check_for_duplicate();\n  return value;\n}",
            "called": [
                "FUN_08008a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "FUN_08008b24",
                "FUN_08008af0",
                "FUN_08008b10"
            ],
            "imported": false,
            "current_name": "check_and_return_value_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "FUN_0800585c": "update_flag_if_condition_met_0800585c",
                "PTR_DAT_08005878": "flag_array",
                "update_data_if_flag_set_08005790": "update_data",
                "'\\x02'": "FLAG_VALUE",
                "3": "NEW_FLAG_VALUE"
            },
            "code": "void update_flag_if_condition_met_0800585c(void)\n{\n  if (PTR_DAT_08005878[1] == FLAG_VALUE)\n  {\n    PTR_DAT_08005878[1] = NEW_FLAG_VALUE;\n    update_data();\n  }\n  return;\n}",
            "called": [
                "FUN_08005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_flag_if_condition_met_0800585c"
        },
        "FUN_0800597c": {
            "renaming": {
                "FUN_0800597c": "trigger_system_interrupt_0800597c"
            },
            "code": "void trigger_system_interrupt_0800597c(void)\n{\n  system_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "FUN_08005984"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_0800597c"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "calculate_double_precision_number_08009798",
                "param_1": "high_bits",
                "param_2": "low_bits",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "exponent",
                "uVar2": "shift_amount",
                "lVar3": "result",
                "DAT_08009814": "DATA_MASK"
            },
            "code": "long long calculate_double_precision_number_08009798(uint32_t high_bits, uint32_t low_bits, undefined4 param_3, undefined4 param_4)\n{\n  uint32_t shift_amount = (low_bits << 1) >> 0x15;\n  uint32_t exponent = shift_amount - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      return ((uint64_t)low_bits & 0x80000000) << 0x20;\n    }\n    long long result = (uint64_t)(low_bits & ~(DAT_08009814 >> (exponent & 0xff))) << 0x20;\n    return result;\n  }\n  else {\n    if ((int)exponent < 0x34) {\n      uint32_t mask = ~(0xffffffffU >> (shift_amount - 0x413 & 0xff));\n      long long result = ((uint64_t)low_bits) | (((uint64_t)high_bits) & mask);\n      return result;\n    }\n    if (exponent != 0x400) {\n      long long result = ((uint64_t)low_bits) | (((uint64_t)high_bits) << 0x20);\n      return result;\n    }\n    long long result = FUNC_080082d4(high_bits, low_bits, high_bits, low_bits, param_4);\n    return result;\n  }\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_number_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "FUNC_08008cd8"
            },
            "code": "\nuint FUNC_08008cd8(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  bool bVar8;\n  \n  uVar2 = param_2 ^ 0x80000000;\n  uVar4 = param_1 << 1;\n  bVar8 = uVar4 == 0;\n  if (!bVar8) {\n    param_4 = param_2 << 1;\n    bVar8 = param_4 == 0;\n  }\n  if (!bVar8) {\n    bVar8 = uVar4 == param_4;\n  }\n  iVar7 = (int)uVar4 >> 0x18;\n  if (!bVar8) {\n    bVar8 = iVar7 == -1;\n  }\n  if (!bVar8) {\n    bVar8 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar8) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar7 == -1 || iVar1 == -1) {\n      uVar4 = uVar2;\n      if (iVar7 == -1) {\n        uVar4 = param_1;\n      }\n      if (iVar7 != -1 || iVar1 != -1) {\n        uVar2 = uVar4;\n      }\n      bVar8 = (uVar4 & 0x7fffff) == 0;\n      if (bVar8) {\n        bVar8 = (uVar2 & 0x7fffff) == 0;\n      }\n      if (bVar8) {\n        bVar8 = uVar4 == uVar2;\n      }\n      if (!bVar8) {\n        uVar4 = uVar4 | 0x400000;\n      }\n      return uVar4;\n    }\n    if (((param_1 ^ uVar2) & 0x7fffffff) != 0) {\n      if (uVar4 == 0) {\n        param_1 = uVar2;\n      }\n      return param_1;\n    }\n    if (param_1 != uVar2) {\n      return 0;\n    }\n    if ((uVar4 & 0xff000000) == 0) {\n      uVar2 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar2 = uVar2 | 0x80000000;\n      }\n      return uVar2;\n    }\n    if (uVar4 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar4 = uVar4 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar6 = param_4 - uVar4;\n  bVar8 = uVar6 != 0;\n  uVar5 = uVar4;\n  if (bVar8 && uVar4 <= param_4) {\n    uVar5 = uVar4 + uVar6;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    param_1 = param_1 ^ uVar2;\n  }\n  if (bVar8 && uVar4 <= param_4) {\n    uVar2 = uVar2 ^ param_1;\n  }\n  if (param_4 < uVar4) {\n    uVar6 = -uVar6;\n  }\n  if (0x19 < uVar6) {\n    return param_1;\n  }\n  uVar4 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar4 = -uVar4;\n  }\n  uVar3 = uVar2 & 0xffffff | 0x800000;\n  if ((uVar2 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  if (uVar5 == uVar6) {\n    uVar3 = uVar3 ^ 0x800000;\n    if (uVar5 == 0) {\n      uVar4 = uVar4 ^ 0x800000;\n      uVar5 = 1;\n    }\n    else {\n      uVar6 = uVar6 - 1;\n    }\n  }\n  uVar4 = uVar4 + ((int)uVar3 >> (uVar6 & 0xff));\n  uVar3 = uVar3 << (0x20 - uVar6 & 0xff);\n  param_1 = uVar4 & 0x80000000;\n  if ((int)uVar4 < 0) {\n    bVar8 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar4 = -uVar4 - (uint)bVar8;\n  }\n  if (uVar4 < 0x800000) {\n    uVar2 = uVar3 & 0x80000000;\n    uVar3 = uVar3 << 1;\n    uVar4 = uVar4 * 2 + (uint)(uVar2 != 0);\n    uVar2 = uVar5 - 2;\n    if (uVar5 - 1 == 0 || uVar4 < 0x800000) {\n      iVar7 = count_leading_zeroes(uVar4);\n      uVar6 = iVar7 - 8;\n      uVar4 = uVar4 << (uVar6 & 0xff);\n      if ((int)uVar2 < (int)uVar6) {\n        uVar4 = uVar4 >> (-(uVar2 - uVar6) & 0xff);\n      }\n      else {\n        uVar4 = uVar4 + (uVar2 - uVar6) * 0x800000;\n      }\n      return uVar4 | param_1;\n    }\n  }\n  else {\n    uVar2 = uVar5 - 1;\n    if (0xffffff < uVar4) {\n      uVar2 = uVar4 & 1;\n      uVar4 = uVar4 >> 1;\n      uVar3 = (uint)(uVar2 != 0) << 0x1f | uVar3 >> 1;\n      uVar2 = uVar5;\n      if (0xfd < uVar5) goto LAB_08008e12;\n    }\n  }\n  uVar4 = uVar4 + uVar2 * 0x800000 + (uint)(0x7fffffff < uVar3);\n  if (uVar3 == 0x80000000) {\n    uVar4 = uVar4 & 0xfffffffe;\n  }\n  return uVar4 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cd8",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "sum_and_set_flags_08007930",
                "puVar1": "data_ptr",
                "uVar2": "new_value",
                "uVar3": "sum",
                "uVar4": "old_sum",
                "iVar5": "current_index"
            },
            "code": "void sum_and_set_flags_08007930(void)\n{\n  uint32_t *data_ptr = PTR_DAT_080079b8;\n  if (*(int *)PTR_DAT_080079bc != 0) {\n    int current_index = *(int *)(data_ptr + 0x14);\n    uint32_t new_value = get_bits_from_indices_08007884();\n    *(uint32_t *)(data_ptr + current_index * 4) = new_value;\n    if (*(int *)(data_ptr + 0x14) == 3) {\n      current_index = 0;\n    }\n    else {\n      current_index = *(int *)(data_ptr + 0x14) + 1;\n    }\n    *(int *)(data_ptr + 0x14) = current_index;\n    uint32_t sum = calculate_sum_of_four_values_080078f4();\n    if (sum != *(uint32_t *)(data_ptr + 0x10)) {\n      uint32_t old_sum = *(uint32_t *)(data_ptr + 0x10);\n      if ((~old_sum & sum) != 0) {\n        set_flags_based_on_param_080074c8(~old_sum & sum);\n      }\n      if ((~sum & old_sum) != 0) {\n        set_bit_if_odd_08007520(~sum & old_sum);\n      }\n      *(uint32_t *)(data_ptr + 0x10) = sum;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007884"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "sum_and_set_flags_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "check_initialized_08000188",
                "*param_1": "*input_ptr",
                "*PTR_DAT_080001a0": "*data_pointer",
                "DAT_080001a4": "data",
                "PTR_FUN_080001a8": "function_pointer"
            },
            "code": "int *check_initialized_08000188(int *input_ptr) {\\n  if (*PTR_DAT_080001a0 == \"\\0\") {\\n    if (DAT_080001a4 != 0) {\\n      input_ptr = PTR_FUN_080001a8;\\n    }\\n    *PTR_DAT_080001a0 = 1;\\n  }\\n  return input_ptr;\\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "FUNC_080082d0"
            },
            "code": "\nulonglong FUNC_080082d0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if (uVar9 - 1 != 0 && 0xfffff < uVar11) goto LAB_080083e0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d0",
            "calling": [
                "FUN_08009410",
                "FUN_08009990",
                "FUN_080096e8",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_0800adf0"
            ],
            "imported": false,
            "current_name": "FUNC_080082d0"
        },
        "FUN_08009318": {
            "renaming": {
                "FUN_08009318": "calculate_value_08009318",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "difference",
                "uVar2": "shifted_value",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "final_result"
            },
            "code": "longlong calculate_value_08009318(uint value1, uint value2, undefined4 param_3, undefined4 param_4)\n{\n  int difference;\n  uint shifted_value;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong final_result;\n  shifted_value = (value2 << 1) >> 0x15;\n  difference = (int)shifted_value - 0x3ff;\n  if (difference < 0x14)\n  {\n    if (difference < 0)\n    {\n      result = FUNC_080082d4(value1, value2, DAT_08009400, DAT_08009404, param_4);\n      if (is_end_of_input_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0)\n      {\n        if ((int)value2 < 0)\n        {\n          final_result = -0x8000000000000000;\n        }\n        else\n        {\n          value1 = value1 | value2;\n          if (value1 != 0)\n          {\n            final_result = (ulonglong)DAT_0800940c << 0x20;\n          }\n          else\n          {\n            final_result = CONCAT44(value1, value1);\n          }\n        }\n      }\n      else\n      {\n        final_result = CONCAT44(value2, value1);\n      }\n    }\n    else\n    {\n      mask = DAT_08009408 >> (difference & 0xff);\n      if ((value2 & mask | value1) != 0)\n      {\n        result = FUNC_080082d4(value1, value2, DAT_08009400, DAT_08009404, param_4);\n        if (is_end_of_input_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0) != 0)\n        {\n          if (0 < (int)value2)\n          {\n            value2 = value2 + (0x100000 >> (difference & 0xff));\n          }\n          else\n          {\n            carry_flag = CARRY4(1 << (0x34 - difference & 0xff), value1);\n            value1 = value1 + (1 << (0x34 - difference & 0xff));\n            if (carry_flag != false)\n            {\n              value2 = value2 + 1;\n            }\n          }\n          final_result = CONCAT44(value2, value1 & ~mask);\n        }\n        else\n        {\n          final_result = CONCAT44(value2, value1);\n        }\n      }\n      else\n      {\n        final_result = CONCAT44(value2, value1);\n      }\n    }\n  }\n  else\n  {\n    if (difference == 0x400)\n    {\n      final_result = FUNC_080082d4();\n    }\n    else\n    {\n      final_result = CONCAT44(value2, value1);\n    }\n  }\n  return final_result;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_value_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "FUN_080018cc": "set_parameter_080018cc",
                "param_1": "new_param",
                "*(uint *)(DAT_080018f8 + 0x14)": "param_ptr",
                "*(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf": "masked_current_value",
                "param_1 | *(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf": "masked_new_param",
                "DAT_080018f8": "parameter_data_address"
            },
            "code": "void set_parameter_080018cc(uint new_param) {\n    uint* *(uint *)(DAT_080018f8 + 0x14) = (uint*)(DAT_080018f8 + 0x14);\n    uint current_value = **(uint *)(DAT_080018f8 + 0x14);\n    uint mask = 0xFFFFFAAF;\n    uint *(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf = current_value & mask;\n    uint param_1 | *(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf = new_param | *(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf;\n    **(uint *)(DAT_080018f8 + 0x14) = param_1 | *(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "set_parameter_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "FUN_080079e0": "set_bit_in_array_080079e0",
                "param_1": "bit_index",
                "DAT_08007a0c": "array_ptr"
            },
            "code": "void set_bit_in_array_080079e0(int bit_index) {\n    int array_index = (uint)(int)(char)bit_index >> 5;\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *(int *)(DAT_08007a0c + array_index * 4) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "bit_position",
                "DAT_08006a88": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08006a58(uint8_t bit_position) {\n    uint32_t* array_ptr = (uint32_t*)(DAT_08006a88 + (((uint32_t)bit_position >> 5) + 0x40) * 4);\n    uint32_t bit_mask = 1 << (bit_position & 0x1f);\n    *array_ptr = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "FUN_08006dc4"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "FUN_08005a84": "get_value_from_pointer_08005a84",
                "PTR_DAT_08005a94": "PTR_DATA_08005a94"
            },
            "code": "int get_value_from_pointer_08005a84() {\n    int* pointer = (int*)PTR_DAT_08005a94;\n    return *pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "FUN_08005a98",
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08000268",
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "FUN_08008b10": "check_input_is_not_null_08008b10",
                "in_ZR": "input_char"
            },
            "code": "bool check_input_is_not_null_08008b10(void)\n{\n  char input_char;\n  check_and_return_value();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "check_input_is_not_null_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "FUNC_08004e30"
            },
            "code": "\nundefined4 FUNC_08004e30(int param_1,uint param_2)\n\n{\n  undefined uVar1;\n  undefined2 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined8 uVar5;\n  \n  switch(param_1) {\n  case 0:\n  case 1:\n  case 2:\n    iVar4 = check_for_zero_0800923c(param_2,0);\n    if (iVar4 != 0) {\n      return 8;\n    }\n    *(uint *)(PTR_DAT_080051a8 + param_1 * 4) = param_2;\n    break;\n  case 3:\n    iVar4 = is_end_of_input_reached_08009228(param_2,DAT_080051ac);\n    if (iVar4 != 0) {\n      return 9;\n    }\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0xd] = uVar1;\n    break;\n  case 4:\n    *(uint *)(PTR_DAT_080051a8 + 0x10) = param_2;\n    break;\n  case 5:\n    *(uint *)(PTR_DAT_080051a8 + 0x14) = param_2;\n    break;\n  case 6:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_precision_number_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x18) = uVar2;\n    break;\n  case 7:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3c] = uVar1;\n    break;\n  case 8:\n    uVar3 = FUNC_08008eec(param_2,DAT_080051b0);\n    uVar3 = FUNC_08008eec(uVar3,DAT_080051b0);\n    *(undefined4 *)(PTR_DAT_080051a8 + 0x20) = uVar3;\n    break;\n  case 9:\n    *(uint *)(PTR_DAT_080051a8 + 0x24) = param_2 & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_DAT_080051a8 + 0x1c) = param_2;\n    break;\n  case 0xb:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3e] = uVar1;\n    break;\n  case 0xc:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar1 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    PTR_DAT_080051a8[0x3d] = uVar1;\n    break;\n  case 0xd:\n    iVar4 = is_string_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    iVar4 = is_string_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    iVar4 = is_string_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    iVar4 = is_string_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xf7;\n    }\n    check_flag_status_0800192c();\n    break;\n  case 0x11:\n    iVar4 = is_string_concatenated_08009214(param_2,0);\n    if (iVar4 == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_precision_number_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x2a) = uVar2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_DAT_080051a8 + 0x2c) = param_2;\n    break;\n  case 0x14:\n    *(uint *)(PTR_DAT_080051a8 + 0x30) = param_2;\n    break;\n  case 0x15:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_08009654((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x34) = uVar2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_DAT_080051a8 + 0x38) = param_2;\n    break;\n  case 0x17:\n    uVar5 = calculate_08008590(param_2);\n    uVar5 = calculate_double_precision_number_08009798((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    uVar2 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x1a) = uVar2;\n    break;\n  default:\n    return 6;\n  }\n  initialize_values_08004c2a();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08008590",
                "FUN_0800192c",
                "FUN_08009214",
                "FUN_08009798",
                "FUN_08008bf0",
                "FUN_08009228",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_08009654",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004e30",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_08004e30"
        },
        "FUN_08008c30": {
            "renaming": {
                "FUN_08008c30": "CalculateFloat_08008c30",
                "param_1": "floatValue",
                "param_2": "floatBits",
                "uVar1": "result",
                "uVar2": "exponent",
                "uVar3": "shiftedFraction",
                "in_r12": "fraction",
                "bVar4": "isNegative",
                "bVar5": "isDenormalized"
            },
            "code": "uint CalculateFloat_08008c30(uint floatValue, uint floatBits)\n{\n  uint exponent;\n  uint fraction;\n  uint sign;\n  uint shiftedFraction;\n  uint result;\n  bool isDenormalized;\n  bool isSpecialValue;\n  bool isNegative;\n\n  exponent = floatBits * 2;\n  isDenormalized = exponent < 0x70000000;\n  shiftedFraction = exponent + 0x90000000;\n  result = shiftedFraction;\n  if (!isDenormalized) {\n    fraction = exponent + 0x8fe00000;\n    result = fraction;\n  }\n  isNegative = result == 0;\n  if (!isDenormalized && shiftedFraction >= 0x200000) {\n    isNegative = fraction == 0x1fc00000;\n  }\n  if (((isDenormalized || shiftedFraction < 0x200000) || 0x1fc00000 < fraction) || isNegative) {\n    if ((floatBits & 0x40000000) != 0) {\n      if (((int)exponent >> 0x15 == -1) && ((floatValue | floatBits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return floatBits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent + 0x92e00000) < 0 != SCARRY4(shiftedFraction,0x2e00000)) {\n      return floatBits & 0x80000000;\n    }\n    exponent = 0x18 - (exponent + 0x92e00000 >> 0x15);\n    fraction = floatValue >> (exponent & 0xff);\n    if (floatValue << (0x20 - exponent & 0xff) != 0) {\n      fraction = fraction | 1;\n    }\n    shiftedFraction = floatBits & 0x1fffff | 0x100000;\n    floatValue = fraction | shiftedFraction << (0x20 - exponent & 0xff);\n    shiftedFraction = (shiftedFraction >> (exponent & 0xff)) << 1;\n  }\n  result = (floatBits & 0x80000000 | floatValue >> 0x1d) + shiftedFraction * 4 + (uint)(0x7fffffff < floatValue * 8);\n  if (floatValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "FUN_08001994",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_080044e8",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "CalculateFloat_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "FUNC_080082d4"
            },
            "code": "\nulonglong FUNC_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if (uVar7 - 1 != 0 && 0xfffff < uVar10) goto LAB_080083e0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080082d4",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78",
                "FUN_0800b2e8",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_08009798",
                "FUN_0800adf0",
                "FUN_08009654"
            ],
            "imported": false,
            "current_name": "FUNC_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "FUN_08007bf0": "set_data_08007bf0",
                "param_1": "new_data",
                "_DAT_4000002c": "data_ptr",
                "_DAT_40000024": "min_data_ptr"
            },
            "code": "void set_data_08007bf0(uint32_t new_data) {\n  uint32_t* _DAT_4000002c = (uint32_t*)0x4000002c;\n  uint32_t* _DAT_40000024 = (uint32_t*)0x40000024;\n  *_DAT_4000002c = new_data;\n  if (new_data <= *_DAT_40000024) {\n    *_DAT_40000024 = new_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "FUN_08005324"
            ],
            "imported": false,
            "current_name": "set_data_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "FUN_08008590": "calculate_08008590",
                "param_1": "input_val",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "iVar6": "count",
                "uVar7": "temp_6",
                "is_zero_1": "is_zero_1",
                "is_zero_2": "is_zero_2",
                "is_zero_3": "is_zero_3"
            },
            "code": "ulonglong calculate_08008590(uint input_val, undefined4 param_2, undefined4 param_3, uint param_4) {\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int count;\n  uint temp_6;\n  uint temp_7;\n  bool is_zero_1;\n  bool is_zero_2;\n  bool is_zero_3;\n  temp_5 = input_val << 1;\n  is_zero_1 = temp_5 == 0;\n  temp_1 = (uint)((input_val & 0x80000000) != 0) << 0x1f;\n  temp_4 = (uint)((int)temp_5 >> 3) >> 1;\n  temp_3 = temp_1 | temp_4;\n  input_val = input_val << 0x1d;\n  if (!is_zero_1) {\n    param_4 = temp_5 & 0xff000000;\n    is_zero_1 = param_4 == 0;\n  }\n  if (!is_zero_1) {\n    is_zero_1 = param_4 == 0xff000000;\n  }\n  if (!is_zero_1) {\n    return CONCAT44(temp_3,input_val) ^ 0x3800000000000000;\n  }\n  if ((temp_5 & 0xffffff) == 0) {\n    return CONCAT44(temp_3,input_val);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(temp_3,input_val) | 0x8000000000000;\n  }\n  temp_2 = input_val;\n  temp_5 = temp_4;\n  if (temp_4 == 0) {\n    temp_2 = 0;\n    temp_5 = input_val;\n  }\n  count = count_leading_zeroes(temp_5);\n  if (temp_4 == 0) {\n    count = count + 0x20;\n  }\n  temp_6 = count - 0xb;\n  is_zero_3 = SBORROW4(temp_6,0x20);\n  temp_4 = count - 0x2b;\n  is_zero_2 = (int)temp_4 < 0;\n  is_zero_1 = temp_4 == 0;\n  if ((int)temp_6 < 0x20) {\n    is_zero_3 = SCARRY4(temp_4,0xc);\n    count = count + -0x1f;\n    is_zero_2 = count < 0;\n    is_zero_1 = count == 0;\n    temp_4 = temp_6;\n    if (!is_zero_1 && is_zero_2 == is_zero_3) {\n      temp_2 = temp_5 << (temp_6 & 0xff);\n      temp_5 = temp_5 >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero_1 || is_zero_2 != is_zero_3) {\n    temp_7 = 0x20 - temp_4;\n  }\n  temp_5 = temp_5 << (temp_4 & 0xff);\n  if (is_zero_1 || is_zero_2 != is_zero_3) {\n    temp_5 = temp_5 | temp_2 >> (temp_7 & 0xff);\n  }\n  if (is_zero_1 || is_zero_2 != is_zero_3) {\n    temp_2 = temp_2 << (temp_4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_6 < 0x381) {\n    return CONCAT44(temp_5 + (0x380 - temp_6) * 0x100000 | temp_1,temp_2);\n  }\n  temp_4 = ~(0x380 - temp_6);\n  if (0x1e < (int)temp_4) {\n    return CONCAT44(temp_3,temp_5 >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = temp_4 - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(temp_4 - 0x1f,0xc)) {\n    temp_4 = temp_4 + 1;\n    return CONCAT44(temp_1 | temp_5 >> (temp_4 & 0xff),temp_2 >> (temp_4 & 0xff) | temp_5 << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_3,temp_2 >> (0x20 - (0xcU - count) & 0xff) | temp_5 << (0xcU - count & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "calculate_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "FUN_08007ad0": "initialize_data_memory_08007ad0",
                "_DAT_40000000": "data_mem_start",
                "_DAT_40000004": "unused_data_1",
                "_DAT_40000008": "unused_data_2",
                "_DAT_4000000c": "unused_data_3",
                "_DAT_40000010": "unused_data_4",
                "_DAT_40000018": "unused_data_5",
                "_DAT_4000001c": "unused_data_6",
                "_DAT_40000020": "unused_data_7",
                "_DAT_40000024": "unused_data_8",
                "_DAT_40000028": "unused_data_9",
                "_DAT_4000002c": "unused_data_10",
                "_DAT_40000034": "unused_data_11",
                "_DAT_40000038": "unused_data_12",
                "_DAT_4000003c": "unused_data_13",
                "_DAT_40000040": "unused_data_14",
                "_DAT_40000048": "unused_data_15",
                "_DAT_4000004c": "data_mem_end",
                "set_flags_08007a10": "set_flags",
                "set_byte_and_bit_08007a70": "set_byte_and_bit"
            },
            "code": "void initialize_data_memory_08007ad0(void)\n{\n    set_flags(0x40000000);\n    uint32_t* _DAT_40000000 = (uint32_t*)0x40000000;\n    uint32_t* _DAT_4000004c = (uint32_t*)0x4000004c;\n    for(uint32_t* ptr = _DAT_40000000; ptr <= _DAT_4000004c; ptr++)\n    {\n        *ptr = 0;\n    }\n    set_byte_and_bit(0x40000000, 0, 0);\n    return;\n}",
            "called": [
                "FUN_08007a70",
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_data_memory_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "FUNC_080005b4"
            },
            "code": "\nuint FUNC_080005b4(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  undefined8 uVar7;\n  undefined4 local_94 [4];\n  undefined4 local_84;\n  undefined4 local_80;\n  undefined4 local_7c;\n  undefined4 uStack_78;\n  undefined4 uStack_74;\n  undefined4 auStack_70 [6];\n  undefined4 local_58;\n  byte local_52;\n  undefined local_51 [20];\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char local_39;\n  undefined4 local_38;\n  undefined4 local_34;\n  sbyte local_2f;\n  char local_2e;\n  char local_2d;\n  undefined4 local_2c;\n  byte local_27;\n  ushort local_26;\n  uint local_24;\n  \n  if (PTR_DAT_08000808[1] == '\\x06') {\n    uVar5 = 0xc;\n  }\n  else {\n    local_51[0] = 0;\n    local_26 = 0;\n    local_27 = 0;\n    local_2c = DAT_0800080c;\n    local_2d = '\\0';\n    local_2e = '\\0';\n    fill_memory_with_value_0800b430(auStack_70 + 3,0,0xc);\n    fill_memory_with_value_0800b430(auStack_70,0,0xc);\n    *PTR_DAT_08000810 = 0;\n    local_2f = 0;\n    while (iVar3 = check_string_and_parse_integer_0800184c(&local_52,auStack_70 + 6,param_1,local_51), iVar3 != 0) {\n      uVar7 = calculate_08008590(local_58);\n      uVar7 = calculate_double_precision_number_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      local_24 = convert_to_signed_fixed_point_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n      if (local_52 == 0x47) {\n        switch(local_24) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_2f = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_2f = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_2f = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_2f = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_2f = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_2f = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_2f = 6;\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_DAT_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_DAT_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[1] = 3;\n          break;\n        case 4:\n          local_2e = '\\x01';\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 10:\n          local_2e = '\\x02';\n          break;\n        case 0x11:\n          set_params_to_array_08000478(0,1,2);\n          break;\n        case 0x12:\n          set_params_to_array_08000478(2,0,1);\n          break;\n        case 0x13:\n          set_params_to_array_08000478(1,2,0);\n          break;\n        case 0x14:\n          PTR_DAT_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_DAT_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = calculate_08008590(uVar4);\n          uVar7 = calculate_double_precision_number_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_to_signed_fixed_point_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          switch(local_24) {\n          case 0x118:\n            local_2e = '\\x03';\n            break;\n          case 0x119:\n            local_2e = '\\x04';\n            break;\n          default:\n            *PTR_DAT_08000ca0 = 3;\n            break;\n          case 300:\n            local_2e = '\\x05';\n            break;\n          case 0x12d:\n            local_2e = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_DAT_08000ca0[0x1c] = (char)local_24 + -0x36;\n          break;\n        case 0x50:\n          PTR_DAT_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_DAT_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_DAT_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          uVar4 = FUNC_08008eec(local_58,DAT_08000ca4);\n          uVar7 = calculate_08008590(uVar4);\n          uVar7 = calculate_double_precision_number_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_to_signed_fixed_point_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if (local_24 == 0x398) {\n            local_2e = '\\a';\n          }\n          else if (local_24 == 0x399) {\n            local_2e = '\\b';\n          }\n          else {\n            *PTR_DAT_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_DAT_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_DAT_08000ca0[2] = 0;\n        }\n      }\n      else if (local_52 == 0x4d) {\n        if (local_24 == 0x1e) {\nLAB_08000b96:\n          local_2f = 5;\n        }\n        else if ((int)local_24 < 0x1f) {\n          if ((int)local_24 < 3) {\n            if (-1 < (int)local_24) goto LAB_08000b96;\n          }\n          else if (local_24 - 3 < 3) {\n            local_2f = 8;\n          }\n        }\n        switch(local_24) {\n        case 0:\n          PTR_DAT_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_DAT_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_DAT_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_DAT_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_DAT_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_DAT_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_DAT_08000ca0[7] = 0;\n        }\n      }\n      if (local_2f != 0) {\n        if (((int)(uint)local_26 >> local_2f & 1U) == 0) {\n          local_26 = local_26 | (ushort)(1 << local_2f);\n        }\n        else {\n          *PTR_DAT_08000ca0 = 5;\n        }\n        local_2f = 0;\n      }\n    }\n    if (*PTR_DAT_08000ff0 == '\\0') {\n      local_34 = 0;\n      local_38 = 0;\n      local_39 = '\\0';\n      local_51[0] = 0;\nswitchD_08000d18_caseD_47:\n      iVar3 = check_string_and_parse_integer_0800184c(&local_52,auStack_70 + 6,param_1,local_51);\n      if (iVar3 != 0) {\n        switch(local_52) {\n        case 0x46:\n          iVar3 = check_for_zero_0800923c(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          if (PTR_DAT_08000ff0[2] == '\\0') {\n            uVar4 = calculate_result_if_possible_0800056c(local_58);\n            *(undefined4 *)(PTR_DAT_08000ff0 + 8) = uVar4;\n          }\n          else {\n            local_2c = calculate_result_if_possible_0800056c(local_58);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          *PTR_DAT_08000ff0 = 3;\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          uVar5 = (uint)local_52;\n          uVar4 = calculate_result_if_possible_0800056c(local_58);\n          auStack_70[uVar5 - 0x49] = uVar4;\n          break;\n        case 0x4c:\n          uVar7 = calculate_08008590(local_58);\n          uVar7 = calculate_double_precision_number_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_39 = calculate_shifted_value_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          break;\n        case 0x50:\n          local_34 = local_58;\n          break;\n        case 0x52:\n          local_38 = calculate_result_if_possible_0800056c(local_58);\n          break;\n        case 0x53:\n          iVar3 = is_end_of_input_reached_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case 0x54:\n          iVar3 = is_end_of_input_reached_08009228(local_58,0);\n          if (iVar3 != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          uVar7 = calculate_08008590(local_58);\n          uVar7 = calculate_double_precision_number_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          uVar2 = calculate_shifted_value_08008bf0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          PTR_DAT_08000ff0[0x18] = uVar2;\n          break;\n        case 0x58:\n          auStack_70[3] = calculate_result_if_possible_0800056c(local_58);\n          local_27 = local_27 | 1;\n          break;\n        case 0x59:\n          auStack_70[4] = calculate_result_if_possible_0800056c(local_58);\n          local_27 = local_27 | 2;\n          break;\n        case 0x5a:\n          auStack_70[5] = calculate_result_if_possible_0800056c(local_58);\n          local_27 = local_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_DAT_08000ff0 == '\\0') {\n        if (PTR_DAT_08000ff4[1] != '\\a') {\n          process_new_char_0800525c((int)(char)PTR_DAT_08000ff0[6]);\n          process_input_08000220(PTR_DAT_08000ff0[7]);\n        }\n        if ((local_26 & 0x200) != 0) {\n          iVar3 = validate_and_calculate_checksum_08004d7c(PTR_DAT_08000ff0[0x1c],&local_7c);\n          puVar1 = PTR_DAT_08000ff0;\n          if (iVar3 == 0) {\n            return 10;\n          }\n          *(undefined4 *)(PTR_DAT_08000ff0 + 0x20) = local_7c;\n          *(undefined4 *)(puVar1 + 0x24) = uStack_78;\n          *(undefined4 *)(puVar1 + 0x28) = uStack_74;\n        }\n        switch(local_2e) {\n        case '\\x01':\n          iVar3 = is_end_of_input_reached_08009228(local_34,0);\n          if (iVar3 == 0) {\n            if (PTR_DAT_08000ff4[1] != '\\a') {\n              process_data_and_validate_flag_set_08002408(local_34);\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          uVar7 = calculate_08008590(local_34);\n          uVar7 = calculate_double_precision_number_08009798((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          local_24 = convert_to_signed_fixed_point_08008ba0((int)uVar7,(int)((ulonglong)uVar7 >> 0x20));\n          if ((((local_39 == '\\x02') || (local_39 == '\\x14')) && (-1 < (int)local_24)) &&\n             ((int)local_24 < 7)) {\n            if ((local_27 == 0) && (local_39 == '\\x02')) {\n              *PTR_DAT_08000ff0 = 6;\n            }\n            else {\n              if ((int)local_24 < 1) {\n                local_24 = (uint)(byte)PTR_DAT_08001304[0x1c];\n              }\n              else {\n                local_24 = local_24 - 1;\n              }\n              iVar3 = validate_and_calculate_checksum_08004d7c(local_24 & 0xff,local_94);\n              if (iVar3 == 0) {\n                return 10;\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)local_27 >> local_3a & 1U) != 0) {\n                  if (local_39 == '\\x14') {\n                    uVar5 = (uint)local_3a;\n                    uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3a + 2) * 4 + 4),\n                                         auStack_70[local_3a + 3]);\n                    local_94[uVar5] = uVar4;\n                  }\n                  else {\n                    local_94[local_3a] = auStack_70[local_3a + 3];\n                  }\n                }\n              }\n              calculate_checksum_for_value_08004bf4(local_24 & 0xff,local_94);\n              puVar1 = PTR_DAT_08001304;\n              if (local_24 == (byte)PTR_DAT_08001304[0x1c]) {\n                *(undefined4 *)(PTR_DAT_08001304 + 0x20) = local_94[0];\n                *(undefined4 *)(puVar1 + 0x24) = local_94[1];\n                *(undefined4 *)(puVar1 + 0x28) = local_94[2];\n              }\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 3;\n          }\n          local_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (local_27 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)local_27 >> local_3b & 1U) == 0) {\n                auStack_70[local_3b + 3] =\n                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4);\n              }\n              else if (PTR_DAT_08001304[4] == '\\0') {\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3b + 3],\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3b + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001304 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3b + 10) * 4 + 4));\n                uVar5 = (uint)local_3b;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n            processDataItemsAndUpdateFlagIfConditionMet_08001e98(auStack_70[3],auStack_70[4],auStack_70[5],\n                         *(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          }\n          if (local_2e == '\\x05') {\n            iVar3 = validate_and_calculate_checksum_08004d7c(7,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          else {\n            iVar3 = validate_and_calculate_checksum_08004d7c(6,local_94 + 3);\n            if (iVar3 == 0) {\n              return 10;\n            }\n          }\n          processDataItemsAndUpdateFlagIfConditionMet_08001e98(local_94[3],local_84,local_80,*(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          puVar1 = PTR_DAT_08001304;\n          *(undefined4 *)(PTR_DAT_08001304 + 0xc) = local_94[3];\n          *(undefined4 *)(puVar1 + 0x10) = local_84;\n          *(undefined4 *)(puVar1 + 0x14) = local_80;\n          local_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_2e == '\\x06') {\n            calculate_checksum_for_value_08004bf4(7,PTR_DAT_0800130c);\n          }\n          else {\n            calculate_checksum_for_value_08004bf4(6,PTR_DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (local_27 == 0) {\n            *PTR_DAT_08001304 = 6;\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)local_27 >> local_3c & 1U) != 0) {\n                uVar4 = FUNC_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (local_3c + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (local_3c + 8) * 4));\n                uVar5 = (uint)local_3c;\n                uVar4 = FUNC_08008cd8(uVar4,auStack_70[local_3c + 3]);\n                *(undefined4 *)(PTR_DAT_08001304 + (uVar5 + 10) * 4 + 4) = uVar4;\n              }\n            }\n          }\n          local_27 = 0;\n          break;\n        case '\\b':\n          fill_memory_with_value_0800b430(PTR_DAT_08001310,0,0xc);\n        }\n        if (((local_26 & 4) != 0) || (local_27 != 0)) {\n          if ((PTR_DAT_08001574[2] != '\\0') &&\n             ((iVar3 = is_end_of_input_reached_08009228(local_2c,0), iVar3 != 0 && (PTR_DAT_08001574[1] != '\\x04')))) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (((local_2d != '\\0') && (PTR_DAT_08001574[1] != '\\0')) &&\n             (PTR_DAT_08001574[1] != '\\x01')) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (*PTR_DAT_08001574 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001574;\n          }\n          for (local_3d = 0; puVar1 = PTR_DAT_08001840, local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)local_27 >> local_3d & 1U) == 0) {\n              auStack_70[local_3d + 3] = *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4);\n            }\n            else if (local_2d == '\\0') {\n              if (PTR_DAT_08001574[4] == '\\0') {\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(auStack_70[local_3d + 3],\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 2) * 4 + 4));\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n              else {\n                uVar6 = auStack_70[local_3d + 3];\n                uVar4 = FUNC_08008cdc(*(undefined4 *)(PTR_DAT_08001574 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001574 + (local_3d + 10) * 4 + 4));\n                uVar5 = (uint)local_3d;\n                uVar4 = FUNC_08008cdc(uVar6,uVar4);\n                auStack_70[uVar5 + 3] = uVar4;\n              }\n            }\n          }\n          if ((byte)PTR_DAT_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            uVar5 = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_DAT_08001574[1]])\n                              ();\n            return uVar5;\n          }\n          if (*PTR_DAT_08001840 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001840;\n          }\n          *(undefined4 *)(PTR_DAT_08001840 + 0xc) = auStack_70[3];\n          *(undefined4 *)(puVar1 + 0x10) = auStack_70[4];\n          *(undefined4 *)(puVar1 + 0x14) = auStack_70[5];\n        }\n        if (PTR_DAT_08001840[5] != '\\0') {\n          process_data_until_flag_set_08002fd4();\n          PTR_DAT_08001848[0x10] = 0;\n          if (PTR_DAT_08001840[5] == '\\x02') {\n            set_flag_and_check_condition_080025e8();\n          }\n          else {\n            PTR_DAT_08001840[5] = 0;\n          }\n        }\n        uVar5 = (uint)(byte)*PTR_DAT_08001840;\n      }\n      else {\n        uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n      }\n    }\n    else {\n      uVar5 = (uint)(byte)*PTR_DAT_08000ff0;\n    }\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08002fd4",
                "FUN_08008590",
                "FUN_08008bf0",
                "FUN_08000220",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08001f00",
                "FUN_080025e8",
                "FUN_08001e98",
                "FUN_08000478",
                "FUN_08009798",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_0800525c",
                "FUN_08004bf4",
                "FUN_080098d0",
                "FUN_08009228",
                "FUN_0800056c",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008ba0",
                "FUN_0800184c",
                "FUN_0800923c",
                "FUN_08008894",
                "FUN_08002408"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005b4",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "FUNC_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "FUN_080039a0": "initialize_program_080039a0",
                "clear_data_08003980": "clear_data",
                "wait_for_help_message_08004228": "wait_for_help_message"
            },
            "code": "void initialize_program_080039a0(void)\n{\n  clear_data();\n  wait_for_help_message();\n  *(undefined4 *)PTR_DAT_080039b8 = 1;\n  return;\n}",
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_program_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "concatenate_parameters_08009204",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "CONCAT44": "concatenate_44_bits",
                "calculate_result_0800919c": "calculate_result"
            },
            "code": "uint64_t concatenate_parameters_08009204(uint32_t param_1, uint32_t param_2)\n{\n    calculate_result();\n    uint64_t result = ((uint64_t)param_2 << 32) | param_1;\n    return result;\n}",
            "called": [
                "FUN_0800919c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_0800923c"
            ],
            "imported": false,
            "current_name": "concatenate_parameters_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "verify_string_concatenation_and_set_flag_080029d8",
                "param_1": "flag",
                "param_2": "string1",
                "param_3": "string2",
                "iVar1": "is_concatenated",
                "uVar2": "result",
                "uVar3": "string1_ptr"
            },
            "code": "void verify_string_concatenation_and_set_flag_080029d8(undefined4 flag, int string1, int string2)\n{\n    int is_concatenated = is_string_concatenated(string1 + 0x18, string1 + 0x1c);\n    if (string1 != 0 && string2 != 0 && is_concatenated == 0)\n    {\n        if (*(char *)(string1 + 0x25) == '\\0' && is_end_of_string(string1 + 0x1c, string2 + 0x18) != 0)\n        {\n            undefined4 result = calculate_result(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000, string2 + 0x18, string1 + 0x20);\n            if (is_end_of_input_reached(string1 + 0x1c, result) == 0)\n            {\n                result = calculate_result(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000, string2 + 0x18, string1 + 0x20);\n            }\n            *(undefined4 *)(string1 + 0x18) = result;\n        }\n        else\n        {\n            *(undefined4 *)(string1 + 0x18) = *(undefined4 *)(string1 + 0x1c);\n        }\n        *(undefined *)(string1 + 0x24) = flag;\n    }\n    return;\n}",
            "called": [
                "FUN_08009214",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "verify_string_concatenation_and_set_flag_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value",
                "_DAT_40000038": "global_variable"
            },
            "code": "void set_global_variable_08007c5e(int value) {\n  _DAT_40000038 = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_variable_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "update_parameter_08005760",
                "PTR_DAT_08005774": "PTR_DATA",
                "update_param_080052ac": "update_param"
            },
            "code": "void update_parameter_08005760(void)\n{\n    int parameter = *(int *)(PTR_DAT_08005774 + 0x18);\n    update_param(parameter);\n    return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_parameter_08005760"
        },
        "FUN_08008b24": {
            "renaming": {
                "FUN_08008b24": "is_end_of_string_08008b24",
                "in_CY": "current_char"
            },
            "code": "bool is_end_of_string_08008b24(void)\n{\n  char current_char;\n  check_and_return_value();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "FUN_080098d0",
                "FUN_08003004",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "FUN_08001d4c",
                "FUN_08004148",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "set_ptr_dat_value_if_condition_met_0800587c",
                "PTR_DAT_0800589c": "PTR_DAT_condition"
            },
            "code": "void set_ptr_dat_value_if_condition_met_0800587c(void)\n{\n  if (PTR_DAT_0800589c[1] == '\\x03') {\n    PTR_DAT_0800589c[1] = 4;\n    PTR_DAT_0800589c[0x10] = 0;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_value_if_condition_met_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "FUN_08008a02": "calculate_result_08008a02",
                "param_1": "a",
                "param_2": "b",
                "param_3": "c",
                "param_4": "d",
                "unaff_r4": "mask",
                "in_r12": "shift",
                "uVar1": "temp4",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "is_zero"
            },
            "code": "unsigned long long calculate_result_08008a02(uint a, uint b, uint c, uint d) {\n    uint mask = 0xFFFFF;\n    uint shift = 0x14;\n    uint temp1 = c & (d >> shift);\n    uint temp2 = b;\n    if (a | (b << 0xC)) {\n        if (c | (d << 0xC)) {\n            if (a == c && temp1 == d) {\n                return ((b ^ d) & 0x80000000 | 0x7ff00000) << 0x20;\n            }\n        } else {\n            a = c;\n            temp2 = d;\n            if (!a && !(temp1 == c)) {\n                return ((b ^ d) & 0x80000000) << 0x20;\n            }\n        }\n    } else if (c | (d << 0xC)) {\n        a = c;\n        temp2 = d;\n        if (!a && !(temp1 == c)) {\n            return ((b ^ d) & 0x80000000) << 0x20;\n        }\n    } else {\n        return (unsigned long long)((temp2 ^ d) & 0x80000000) << 0x20 | (unsigned long long)(b | a << 0x20) | 0x7ff8000000000000;\n    }\n    if (!a && !(temp1 == c)) {\n        return ((temp2 ^ d) & 0x80000000) << 0x20 | (unsigned long long)(b | a << 0x20) | 0x7ff8000000000000;\n    }\n    uint temp3 = b & 0x80000000;\n    do {\n        uint temp4 = a & 0x80000000;\n        a = a << 1;\n        b = b * 2 + (uint)(temp4 != 0);\n    } while ((b & mask) == 0);\n    b = b | temp3;\n    if (temp1) {\n        return (unsigned long long)(b | a << 0x20);\n    }\n    do {\n        temp2 = temp1 & 0x80000000;\n        temp1 = temp1 << 1;\n        d = d * 2 + (uint)(temp2 != 0);\n    } while ((d & mask) == 0);\n    return (unsigned long long)(b | a << 0x20 | d << shift);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "FUN_08008894"
            ],
            "imported": false,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "FUN_0800369c": "wait_until_all_bits_are_set_0800369c",
                "param_1": "string_to_check",
                "local_c": "current_char",
                "wait_until_bit_is_set_08008250": "wait_until_bit_is_set"
            },
            "code": "void wait_until_all_bits_are_set_0800369c(char *string_to_check)\n{\n  char *current_char = string_to_check;\n  while (*current_char != '\\0') {\n    wait_until_bit_is_set(*current_char);\n    current_char++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "wait_until_all_bits_are_set_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "FUN_08005a98": "check_value_08005a98",
                "param_1": "value_to_check",
                "iVar1": "initial_value",
                "uVar2": "current_value"
            },
            "code": "void check_value_08005a98(int value_to_check) {\n  int initial_value = get_value_from_pointer();\n  uint current_value;\n  do {\n    current_value = get_value_from_pointer();\n  } while (current_value < (uint)(value_to_check + initial_value));\n  return;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "FUN_080002a0"
            ],
            "imported": false,
            "current_name": "check_value_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "FUNC_08008cdc"
            },
            "code": "\nuint FUNC_08008cdc(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_08008e12:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if (uVar4 - 1 == 0 || uVar3 < 0x800000) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_08008e12;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008cdc",
            "calling": [
                "FUN_08004940",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "printFloatsIfValid_080044e8",
                "auStack_18": "checksum",
                "local_a": "i",
                "local_9": "count"
            },
            "code": "void printFloatsIfValid_080044e8() {\n  int index;\n  undefined4 checksum[3];\n  byte count = 0;\n  while(true) {\n    if (count > 7) {\n      wait_for_characters_080036c6(characters_waiting_080046c8);\n      for (byte i = 0; i < 3; i++) {\n        if ((PTR_DAT_080046bc[0x28] & 1) == 0) {\n          print_float_08003826(checksum[i]);\n        }\n        else {\n          undefined8 calculation = calculate_08008590(checksum[i]);\n          calculation = FUNC_08008640((int)calculation,(int)((ulonglong)calculation >> 0x20),DAT_08004690,DAT_08004694);\n          undefined4 calculated_float = CalculateFloat_08008c30((int)calculation,(int)((ulonglong)calculation >> 0x20));\n          print_float_08003826(calculated_float);\n        }\n        if (i < 2) {\n          wait_for_characters_080036c6(characters_waiting_080046c0);\n        }\n        else {\n          wait_for_characters_080036c6(characters_waiting_080046c4);\n        }\n      }\n      return;\n    }\n    int validation = validate_and_calculate_checksum_08004d7c(count, checksum);\n    if (validation == 0) break;\n    wait_for_characters_080036c6(characters_waiting_08004698);\n    switch(count) {\n      case 0:\n        wait_for_characters_080036c6(characters_waiting_0800469c);\n        break;\n      case 1:\n        wait_for_characters_080036c6(characters_waiting_080046a0);\n        break;\n      case 2:\n        wait_for_characters_080036c6(characters_waiting_080046a4);\n        break;\n      case 3:\n        wait_for_characters_080036c6(characters_waiting_080046a8);\n        break;\n      case 4:\n        wait_for_characters_080036c6(characters_waiting_080046ac);\n        break;\n      case 5:\n        wait_for_characters_080036c6(characters_waiting_080046b0);\n        break;\n      case 6:\n        wait_for_characters_080036c6(characters_waiting_080046b4);\n        break;\n      case 7:\n        wait_for_characters_080036c6(characters_waiting_080046b8);\n    }\n    for (byte i = 0; i < 3; i++) {\n      if ((PTR_DAT_080046bc[0x28] & 1) == 0) {\n        print_float_08003826(checksum[i]);\n      }\n      else {\n        undefined8 calculation = calculate_08008590(checksum[i]);\n        calculation = FUNC_08008640((int)calculation,(int)((ulonglong)calculation >> 0x20),DAT_08004690,DAT_08004694);\n        undefined4 calculated_float = CalculateFloat_08008c30((int)calculation,(int)((ulonglong)calculation >> 0x20));\n        print_float_08003826(calculated_float);\n      }\n      if (i < 2) {\n        wait_for_characters_080036c6(characters_waiting_080046c0);\n      }\n      else {\n        wait_for_characters_080036c6(characters_waiting_080046c4);\n      }\n    }\n    count++;\n  }\n  printErrorMessage_08004030(10);\n  return;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "printFloatsIfValid_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "FUN_08006c9c": "is_param_valid_08006c9c",
                "param_1": "param_value",
                "bVar1": "is_valid"
            },
            "code": "bool is_param_valid_08006c9c(int param_value) {\n  bool is_valid = param_value < 0x1000000;\n  if (is_valid) {\n    DAT_08006cdc[1] = param_value - 1;\n    set_byte_at_address_08006b00(0xffffffff, 0xf);\n    DAT_08006cdc[2] = 0;\n    *DAT_08006cdc = 7;\n  }\n  return !is_valid;\n}",
            "called": [
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "FUN_08006d72"
            ],
            "imported": false,
            "current_name": "is_param_valid_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  ulonglong uVar29;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  uVar28 = CONCAT44(param_5,param_5);\n  iVar15 = *(int *)(PTR_DAT_0800a894 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (int)((longlong)DAT_0800a898 * (longlong)(param_3 + -3) >> 0x22) -\n                (param_3 + -3 >> 0x1f);\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = get_concatenated_values_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = FUNC_08008640(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                                *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        FUNC_08008640((int)uVar26,uVar6,0,DAT_0800a89c);\n        convert_to_signed_fixed_point_08008ba0();\n        uVar25 = get_concatenated_values_0800856c();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = FUNC_08008640((int)uVar25,uVar8,0,DAT_0800a8a0);\n        FUNC_080082d0((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = convert_to_signed_fixed_point_08008ba0();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = FUNC_080082d4((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = calculate_0800b2e8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    FUNC_08008640((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = calculate_result_080094c0();\n    uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,DAT_0800a8a4);\n    uVar26 = FUNC_080082d0((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = convert_to_signed_fixed_point_08008ba0();\n    uVar25 = get_concatenated_values_0800856c();\n    uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                          (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = should_return_false_if_CY_is_true_or_ZR_is_false_08008b4c(uVar8,uVar6,0,DAT_0800ac3c);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar12 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          uVar12 = local_258[0];\n          if (local_258[0] == 0) {\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                uVar12 = *puVar5;\n                if (uVar12 != 0) {\n                  iVar14 = iVar4 + 1;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            uVar12 = 1;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = FUNC_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          if (uVar12 != 0) {\n            uVar25 = calculate_0800b2e8(0,DAT_0800ac38,local_270);\n            uVar26 = FUNC_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                  (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = check_input_is_not_null_08008b10((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = calculate_0800b2e8((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = should_return_false_if_CY_is_true_or_ZR_is_false_08008b4c(uVar8,uVar6,0,DAT_0800ade4);\n      if (iVar9 == 0) {\n        uVar12 = convert_to_signed_fixed_point_08008ba0(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        FUNC_08008640(uVar8,uVar6,0,DAT_0800ade8);\n        uVar12 = convert_to_signed_fixed_point_08008ba0();\n        uVar26 = get_concatenated_values_0800856c();\n        uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,DAT_0800ade4);\n        FUNC_080082d0(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = convert_to_signed_fixed_point_08008ba0();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = get_concatenated_values_0800856c(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = FUNC_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = FUNC_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = calculate_0800b2e8(0,DAT_0800ac38,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar28 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar28;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar28;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar28 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar28;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar28 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = get_concatenated_values_0800856c(*puVar5);\n      uVar25 = FUNC_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = FUNC_08008640((int)uVar26,uVar8,0,DAT_0800ac40);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    uVar8 = DAT_0800ac30;\n    uVar6 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = uVar8;\n      DAT_0800ac34 = uVar6;\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          uVar25 = FUNC_08008640(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6\n                               );\n          uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n      uVar8 = DAT_0800ac30;\n      uVar6 = DAT_0800ac34;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n            uVar8 = (undefined4)uVar28;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n            uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n            uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar26;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar28;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n              uVar8 = (undefined4)uVar28;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar28 = FUNC_080082d4(uVar8,uVar6,uVar11,uVar20);\n              uVar26 = FUNC_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n              uVar26 = FUNC_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar26;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar28;\n            } while (&local_168 + 1 != puVar16);\n            uVar28 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar28 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar28 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar28 = FUNC_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n  uVar8 = (undefined4)uVar28;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar28;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar29 = FUNC_080082d4((int)uVar29,(int)(uVar29 >> 0x20),*(undefined4 *)(puVar16 + 1),\n                            *(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar29 = FUNC_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar29 = uVar29 & 0xffffffff | (ulonglong)((int)(uVar29 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_260[1] + 8) = uVar29;\n  return uVar2 & 7;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "FUNC_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "FUN_0800195c": "check_and_set_flag_if_condition_met_0800195c",
                "PTR_DAT_08001990": "data_pointer",
                "set_flag_and_check_condition_080025e8": "set_flag_and_check_condition"
            },
            "code": "void check_and_set_flag_if_condition_met_0800195c() {\n  if ((PTR_DAT_08001990[1] != '\\x06') && ((PTR_DAT_08001990[2] & 0x20) == 0)) {\n    set_flag_and_check_condition();\n    PTR_DAT_08001990[2] = PTR_DAT_08001990[2] | 0x40;\n  }\n  return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_if_condition_met_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "is_string_concatenated_08009214",
                "in_ZR": "input_char",
                "concatenate_parameters_08009204": "concatenate_string"
            },
            "code": "bool is_string_concatenated_08009214()\\n{\\n  char input_char;\\n  concatenate_string();\\n  return input_char != \"\\0\";\\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "is_string_concatenated_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "FUN_08004dd2": "validate_input_and_initialize_values_08004dd2",
                "bVar1": "input_value",
                "iVar2": "validation_result",
                "validate_string_080003ec": "validate_string",
                "PTR_DAT_08004e2c": "PTR_DAT_08004e2c",
                "initialize_values_08004c48": "initialize_values"
            },
            "code": "int validate_input_and_initialize_values_08004dd2(void)\n{\n  byte input_value = get_value_from_array(0);\n  if (input_value == 5) {\n    int validation_result = validate_string_080003ec(PTR_DAT_08004e2c, 1, 0x40);\n    if (validation_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (input_value > 4) {\n      return 0;\n    }\n    int validation_result = validate_string_080003ec(PTR_DAT_08004e2c, 1, 0x28);\n    if (validation_result == 0) {\n      return 0;\n    }\n    initialize_values(0);\n  }\n  return 1;\n}",
            "called": [
                "FUN_08000310",
                "FUN_08004c48",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "FUN_080051b4"
            ],
            "imported": false,
            "current_name": "validate_input_and_initialize_values_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "update_parameter_from_pointer_08005778",
                "PTR_DAT_0800578c": "PTR_PARAMETER_POINTER",
                "update_param_080052ac": "update_parameter"
            },
            "code": "void update_parameter_from_pointer_08005778(void)\n{\n  uint16_t *parameter_pointer = (uint16_t *)PTR_DAT_0800578c;\n  update_parameter(*parameter_pointer);\n  return;\n}",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_parameter_from_pointer_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "uVar1": "result1",
                "uVar2": "result2",
                "FUNC_08008eec": "square",
                "FUNC_08008cd8": "add",
                "FUNC_08008cdc": "square",
                "FUNC_08009054": "multiply"
            },
            "code": "int calculate_result_080028bc(int x, int y, int z) {\n  int result1 = square(x);\n  int result2 = square(y);\n  int sum = add(result1,result2);\n  int result3 = square(z);\n  int final_result = multiply(sum,result3);\n  return final_result;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "FUN_08006628": "FUNC_08006628"
            },
            "code": "\nundefined4 FUNC_08006628(void)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  uVar1 = calculate_result_080064ec();\n  uVar2 = count_leading_zeroes(0xf000000);\n  *(uint *)PTR_DAT_0800667c =\n       uVar1 >> PTR_DAT_08006678[(*(uint *)(DAT_08006674 + 8) & 0xf0) >> (uVar2 & 0xff)];\n  return *(undefined4 *)PTR_DAT_0800667c;\n}\n\n",
            "called": [
                "FUN_080064ec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006628",
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "imported": false,
            "current_name": "FUNC_08006628"
        },
        "FUN_0800738e": {
            "renaming": {
                "FUN_0800738e": "update_value_if_flag_set_0800738e",
                "param_1": "value",
                "DAT_080073bc": "data_address",
                "PTR_080073bc_14": "flag_ptr",
                "do_nothing_080073c0": "do_nothing"
            },
            "code": "void update_value_if_flag_set_0800738e(ushort value) {\n  uint* PTR_080073bc_14 = (uint*)(DAT_080073bc + 0x14);\n  if (((uint)value & *PTR_080073bc_14) != 0) {\n    *PTR_080073bc_14 = (uint)value;\n    do_nothing_080073c0(value);\n  }\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": false,
            "current_name": "update_value_if_flag_set_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "FUNC_080053a0"
            },
            "code": "\nvoid FUNC_080053a0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  \n  set_param_080052dc(*(undefined2 *)PTR_DAT_080055f0);\n  *(undefined2 *)PTR_DAT_080055f8 = *(undefined2 *)PTR_DAT_080055f4;\n  if (*(int *)PTR_DAT_080055fc == 0) {\n    uVar1 = get_data_pointer_08002f74();\n    *(undefined4 *)PTR_DAT_080055fc = uVar1;\n    if (*(int *)PTR_DAT_080055fc == 0) {\n      clear_bits_and_check_condition_080057e4();\n      PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n    }\n    else {\n      if (PTR_DAT_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_DAT_08005604 + 0x1c) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x28);\n        calculate_and_set_data_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n        *(undefined4 *)(PTR_DAT_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_DAT_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_DAT_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n      *(int *)PTR_DAT_08005604 = -(*(int *)(*(int *)PTR_DAT_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_DAT_08005604 + 4) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 8) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 0xc) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x10);\n      *(undefined4 *)(PTR_DAT_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_DAT_080055fc != 0) {\n    *(undefined2 *)PTR_DAT_080055f0 = **(undefined2 **)PTR_DAT_080055fc;\n    *(undefined2 *)PTR_DAT_080055f4 = 0;\n    *(int *)PTR_DAT_08005604 = *(int *)(*(int *)PTR_DAT_080055fc + 4) + *(int *)PTR_DAT_08005604;\n    if (0 < *(int *)PTR_DAT_08005604) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x10;\n      *(int *)PTR_DAT_08005604 = *(int *)PTR_DAT_08005604 - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 4) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 8) + *(int *)(PTR_DAT_08005604 + 4);\n    if (0 < *(int *)(PTR_DAT_08005604 + 4)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x440;\n      *(int *)(PTR_DAT_08005604 + 4) =\n           *(int *)(PTR_DAT_08005604 + 4) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 8) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 0xc) + *(int *)(PTR_DAT_08005604 + 8);\n    if (0 < *(int *)(PTR_DAT_08005604 + 8)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x100;\n      *(int *)(PTR_DAT_08005604 + 8) =\n           *(int *)(PTR_DAT_08005604 + 8) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 0x10) = *(int *)(PTR_DAT_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_DAT_08005604 + 0x10) < *(uint *)(*(int *)PTR_DAT_080055fc + 0x10)) {\n      if (PTR_DAT_08005600[1] == '\\x04') {\n        iVar2 = check_if_uVar1_less_than_uVar2_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(*(int *)PTR_DAT_080055fc + 0x30) < *(uint *)(PTR_DAT_08005604 + 0x1c)) {\n            *(int *)(PTR_DAT_08005604 + 0x1c) =\n                 *(int *)(PTR_DAT_08005604 + 0x1c) - *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n            calculate_and_set_data_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n          }\n          else {\n            clear_bits_and_check_condition_080057e4();\n            PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x34)) {\n        iVar2 = check_if_uVar1_less_than_uVar2_08005360();\n        if (iVar2 != 0) {\n          *(int *)(PTR_DAT_08005748 + 0x1c) =\n               *(int *)(PTR_DAT_08005748 + 0x1c) + *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_DAT_0800574c + 0x3c) <= *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          }\n          calculate_and_set_data_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) != *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          calculate_and_set_data_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_DAT_08005748 + 0x10) == *(int *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) == *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_DAT_08005748 + 0x18) = 420000 - *(int *)(PTR_DAT_08005748 + 0x18);\n        }\n      }\n      else {\n        iVar2 = check_if_uVar1_less_than_uVar2_08005360();\n        if (iVar2 != 0) {\n          if (*(uint *)(PTR_DAT_08005748 + 0x20) < *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(int *)(PTR_DAT_08005748 + 0x1c) =\n                 *(int *)(PTR_DAT_08005748 + 0x1c) - *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_DAT_08005748 + 0x1c) = *(uint *)(PTR_DAT_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_DAT_08005748 + 0x1c) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x2c);\n          }\n          calculate_and_set_data_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_DAT_08005754 = 0;\n      *(undefined4 *)PTR_DAT_0800574c = 0;\n      update_if_different_08002f40();\n    }\n  }\n  *(ushort *)PTR_DAT_08005754 = *(ushort *)PTR_DAT_08005754 ^ *(ushort *)(PTR_DAT_08005758 + 0x18);\n  *(ushort *)PTR_DAT_0800575c = *(ushort *)PTR_DAT_0800575c ^ *(ushort *)(PTR_DAT_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "FUN_080052dc",
                "FUN_08005324",
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08005360",
                "FUN_08002f74"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "FUNC_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "FUN_080092c4": "copy_data_and_clear_bss_section_080092c4",
                "iVar1": "index",
                "puVar2": "ptr_to_dst",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_bss_section_080092c4(void)\n{\n  int index;\n  undefined4 *ptr_to_dst;\n  code *jump_table;\n  \n  for (index = 0; PTR_TO_DATA_START + index < PTR_TO_DATA_END; index += 4) {\n    *(undefined4 *)(PTR_TO_DATA_START + index) = *(undefined4 *)(PTR_TO_DATA_COPY_START + index);\n  }\n  for (ptr_to_dst = (undefined4 *)PTR_TO_BSS_START; ptr_to_dst < PTR_TO_BSS_END; ptr_to_dst++) {\n    *ptr_to_dst = 0;\n  }\n  set_cpu_flags();\n  execute_init_functions();\n  jump_table = (code *)0x80092fa;\n  main_entry_point();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08007540",
                "FUN_0800756c",
                "FUN_0800b3e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_bss_section_080092c4"
        },
        "FUN_08008250": {
            "renaming": {
                "FUN_08008250": "wait_until_bit_is_set_08008250",
                "param_1": "param",
                "wait_for_bit_to_be_set_08007e1c": "wait_for_bit_to_be_set"
            },
            "code": "void wait_until_bit_is_set_08008250(void* param) {\n  wait_for_bit_to_be_set(param);\n  return;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6"
            ],
            "imported": false,
            "current_name": "wait_until_bit_is_set_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "FUN_0800184c": "check_string_and_parse_integer_0800184c",
                "param_1": "output_string",
                "param_2": "max_integer_digits",
                "param_3": "string_base",
                "param_4": "input_string",
                "iVar1": "integer_value",
                "uVar2": "result"
            },
            "code": "int check_string_and_parse_integer_0800184c(byte *output_string, int max_integer_digits, int string_base, byte *input_string){\n  int integer_value;\n  int result;\n  \n  if (*(char *)(string_base + (uint)*input_string) == \"\\0\") {\n    result = 0;\n  }\n  else {\n    *output_string = *(byte *)(string_base + (uint)*input_string);\n    if ((*output_string < \"A\") || (\"Z\" < *output_string)) {\n      *PTR_DAT_080018c8 = 2;\n      result = 0;\n    }\n    else {\n      *input_string = *input_string + 1;\n      integer_value = parse_integer_from_string_08002638(string_base, input_string, max_integer_digits);\n      if (integer_value == 0) {\n        *PTR_DAT_080018c8 = 1;\n        result = 0;\n      }\n      else {\n        result = 1;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08002638"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_string_and_parse_integer_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "FUNC_08001f00"
            },
            "code": "\nvoid FUNC_08001f00(int param_1,undefined4 *param_2,int param_3,byte param_4,byte param_5,byte param_6\n                 ,undefined4 param_7,char param_8,undefined4 param_9,char param_10)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int iVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  uint local_6c [4];\n  undefined4 local_5c;\n  undefined4 local_58;\n  undefined4 local_54;\n  undefined4 local_50;\n  undefined4 local_4c;\n  undefined4 local_48;\n  ushort local_42;\n  undefined4 local_40;\n  undefined4 local_3c;\n  undefined4 local_38;\n  uint local_34;\n  undefined4 local_30;\n  undefined4 local_2c;\n  char local_27;\n  ushort local_26;\n  undefined4 local_24;\n  uint local_20;\n  uint local_1c;\n  \n  local_2c = FUNC_08008cdc(*(undefined4 *)((uint)param_4 * 4 + param_1),\n                          *(undefined4 *)((uint)param_4 * 4 + param_3));\n  local_30 = FUNC_08008cdc(*(undefined4 *)((uint)param_5 * 4 + param_1),\n                          *(undefined4 *)((uint)param_5 * 4 + param_3));\n  local_34 = FUNC_08008cd8(param_2[param_6],*(undefined4 *)((uint)param_6 * 4 + param_1));\n  local_1c = *(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000;\n  local_20 = *(uint *)((uint)param_5 * 4 + param_3) ^ 0x80000000;\n  local_38 = FUNC_08008cd8(param_2[param_4],local_2c);\n  local_3c = FUNC_08008cd8(param_2[param_5],local_30);\n  uVar1 = FUNC_08008eec(local_1c,local_3c);\n  uVar2 = FUNC_08008eec(local_20,local_38);\n  uVar1 = FUNC_08008cd8(uVar1,uVar2);\n  uVar5 = calculate_08008590(uVar1);\n  uVar1 = FUNC_08008eec(local_1c,local_38);\n  uVar2 = FUNC_08008eec(local_20,local_3c);\n  uVar1 = FUNC_08008cdc(uVar1,uVar2);\n  uVar6 = calculate_08008590(uVar1);\n  uVar5 = thunk_calculate_result_08009990((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                             (int)((ulonglong)uVar6 >> 0x20));\n  local_24 = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  if (param_10 == '\\0') {\n    iVar3 = check_for_zero_0800923c(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = calculate_08008590(local_24);\n      uVar5 = FUNC_080082d4((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  else {\n    iVar3 = check_params_for_concatenation_08009250(local_24,0);\n    if (iVar3 != 0) {\n      uVar5 = calculate_08008590(local_24);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),DAT_08002240,DAT_08002244);\n      local_24 = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    }\n  }\n  uVar1 = FUNC_08008eec(local_24,param_9);\n  uVar5 = calculate_08008590(uVar1);\n  uVar6 = calculate_08008590(local_34 & 0x7fffffff);\n  uVar5 = calculate_hypotenuse_and_set_value_0800981c((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                       (int)((ulonglong)uVar6 >> 0x20));\n  local_40 = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  iVar3 = is_string_concatenated_08009214(local_40,0);\n  if (iVar3 == 0) {\n    uVar1 = FUNC_08009054(local_40,*(undefined4 *)(PTR_DAT_08002248 + 0x1c));\n    uVar5 = calculate_08008590(uVar1);\n    uVar5 = calculate_result_080094c0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_42 = calculate_shifted_value_08008bf0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    if (param_8 != '\\0') {\n      uVar1 = calculate_hash_08008e44(local_42);\n      param_7 = FUNC_08008eec(param_7,uVar1);\n    }\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_48 = FUNC_08009054(local_24,uVar1);\n    uVar1 = calculate_hash_08008e44(local_42);\n    local_4c = FUNC_08009054(local_34,uVar1);\n    uVar5 = calculate_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,DAT_0800224c);\n    uVar6 = calculate_08008590(local_48);\n    uVar5 = FUNC_08008640((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                         (int)((ulonglong)uVar6 >> 0x20));\n    uVar5 = FUNC_080082d0(0,DAT_08002250,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_50 = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n    local_54 = local_48;\n    local_27 = '\\0';\n    local_6c[param_6] = *(uint *)(param_1 + (uint)param_6 * 4);\n    for (local_26 = 1; local_26 < local_42; local_26 = local_26 + 1) {\n      if ((int)local_27 < (int)(uint)(byte)PTR_DAT_08002248[0x3e]) {\n        uVar1 = FUNC_08008eec(local_1c,local_54);\n        uVar2 = FUNC_08008eec(local_20,local_50);\n        local_6c[3] = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(local_1c,local_50);\n        uVar2 = FUNC_08008eec(local_20,local_54);\n        local_1c = FUNC_08008cd8(uVar1,uVar2);\n        local_20 = local_6c[3];\n        local_27 = local_27 + '\\x01';\n      }\n      else {\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = calculate_08008590(uVar1);\n        uVar5 = calculate_result_08009410_08009410((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_58 = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = calculate_hash_08008e44(local_26);\n        uVar1 = FUNC_08008eec(uVar1,local_48);\n        uVar5 = calculate_08008590(uVar1);\n        uVar5 = calculate_result_080096e8((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        local_5c = CalculateFloat_08008c30((int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_58);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_5c);\n        local_1c = FUNC_08008cdc(uVar1,uVar2);\n        uVar1 = FUNC_08008eec(*(uint *)((uint)param_4 * 4 + param_3) ^ 0x80000000,local_5c);\n        uVar2 = FUNC_08008eec(*(undefined4 *)((uint)param_5 * 4 + param_3),local_58);\n        local_20 = FUNC_08008cd8(uVar1,uVar2);\n        local_27 = '\\0';\n      }\n      uVar4 = FUNC_08008cdc(local_2c,local_1c);\n      local_6c[param_4] = uVar4;\n      uVar4 = FUNC_08008cdc(local_30,local_20);\n      local_6c[param_5] = uVar4;\n      uVar4 = FUNC_08008cdc(local_6c[param_6],local_4c);\n      local_6c[param_6] = uVar4;\n      processDataItemsAndUpdateFlagIfConditionMet_08001e98(local_6c[0],local_6c[1],local_6c[2],param_7,param_8);\n      if (*PTR_DAT_08002404 != '\\0') {\n        return;\n      }\n    }\n    processDataItemsAndUpdateFlagIfConditionMet_08001e98(*param_2,param_2[1],param_2[2],param_7,param_8);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009250",
                "FUN_08009410",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_080096e8",
                "FUN_08008640",
                "FUN_08008bf0",
                "thunk_FUN_08009990",
                "FUN_08008cdc",
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08009214",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_0800923c",
                "FUN_0800981c",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001f00",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "FUNC_08001f00"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "update_register_with_param_08006ce0",
                "param_1": "param"
            },
            "code": "void update_register_with_param_08006ce0(void* param){\n  update_register_08006950(param);\n  return;\n}",
            "called": [
                "FUN_08006950"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "update_register_with_param_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "set_bit_08006d4a",
                "param_1": "bit_index",
                "set_bit_at_index_080069e4": "set_bit_at_index"
            },
            "code": "void set_bit_08006d4a(char bit_index){\n  set_bit_08006d4a_at_index((int)bit_index);\n  return;\n}",
            "called": [
                "FUN_080069e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "FUNC_08008894"
            },
            "code": "\nulonglong FUNC_08008894(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_08008a02();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_080089b2;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_080089b2:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008894",
            "calling": [
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_080098d0",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_080005b4",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "FUNC_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "store_value_with_checksum_08000374",
                "param_1": "index",
                "param_2": "data",
                "param_3": "length",
                "local_1c": "current_length",
                "local_18": "current_data",
                "local_14": "current_index",
                "local_9": "checksum"
            },
            "code": "void store_value_with_checksum_08000374(int index, char *data, int length) {\n  int current_length;\n  char *current_data;\n  int current_index;\n  char checksum = '\\0';\n  if (*(int *)PTR_DAT_080003e8 == 0) {\n    initialize_memory_080002f0();\n    current_data = data;\n    current_index = index;\n  }\n  for (current_length = length; current_length != 0; current_length = current_length - 1) {\n    checksum = (checksum != '\\0') + *current_data;\n    store_value_08000340(current_index,*current_data);\n    current_data = current_data + 1;\n    current_index = current_index + 1;\n  }\n  store_value_08000340(current_index,checksum);\n  return;\n}",
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "FUN_08004bf4",
                "FUN_08004bc0",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "store_value_with_checksum_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "process_input_080037fc",
                "param_1": "input_number",
                "local_c": "absolute_value",
                "wait_until_bit_is_set_08008250": "wait_until_bit_is_set",
                "process_input_numbers_08003778": "process_input_numbers"
            },
            "code": "void process_input_080037fc(int input_number) {\n  int absolute_value;\n  if (input_number < 0) {\n    wait_until_bit_is_set(0x2d);\n    absolute_value = -input_number;\n  } else {\n    absolute_value = input_number;\n  }\n  process_input_080037fc_numbers(absolute_value);\n  return;\n}",
            "called": [
                "FUN_08008250",
                "FUN_08003778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "process_input_080037fc"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13"
            },
            "code": "uint calculate_0800a1bc(uint input1, uint input2)\n{\n  uint result1;\n  uint result2;\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  undefined8 tempVar13;\n  if ((DAT_0800a340 & ~input2) == 0) {\n    tempVar13 = FUNC_08008640(input1, input2, input1, input2);\n    result1 = FUNC_080082d4((int)tempVar13, (int)((ulonglong)tempVar13 >> 0x20), input1, input2);\n    return result1;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      tempVar13 = FUNC_080082d0(input1, input2, input1);\n      tempVar2 = (undefined4)((ulonglong)tempVar13 >> 0x20);\n      result1 = FUNC_08008894((int)tempVar13, tempVar2, (int)tempVar13, tempVar2);\n      return result1;\n    }\n    do {\n      tempVar4 = input1;\n      result1 = tempVar4 >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = tempVar4 << 0x15;\n    } while (result1 == 0);\n    tempVar2 = input2;\n    if (-1 < (int)tempVar4) goto LAB_0800a290;\n    tempVar11 = 0x20;\n    tempVar5 = 0xffffffff;\n    tempVar4 = input1;\n  }\n  else {\n    tempVar2 = (int)input2 >> 0x14;\n    result1 = input2;\n    tempVar4 = input1;\n    if (tempVar2 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    tempVar4 = 0;\n    tempVar11 = result1;\n    do {\n      tempVar5 = tempVar4;\n      result1 = tempVar11 << 1;\n      tempVar1 = tempVar11 << 0xc;\n      tempVar4 = tempVar5 + 1;\n      tempVar11 = result1;\n    } while (-1 < tempVar1);\n    tempVar11 = 0x20 - tempVar4;\n    input2 = tempVar2;\n    tempVar4 = input1 << (tempVar4 & 0xff);\n  }\n  result1 = input1 >> (tempVar11 & 0xff) | result1;\n  tempVar2 = input2 - tempVar5;\nLAB_0800a1da:\n  result1 = result1 & 0xfffff | 0x100000;\n  if (-1 < (int)(tempVar2 << 0x1f)) {\n    result1 = result1 * 2 - ((int)tempVar4 >> 0x1f);\n    tempVar4 = tempVar4 << 1;\n  }\n  tempVar7 = 0;\n  result1 = result1 * 2 - ((int)tempVar4 >> 0x1f);\n  tempVar4 = tempVar4 << 1;\n  tempVar2 = 0;\n  tempVar11 = 0x16;\n  tempVar5 = 0x200000;\n  do {\n    tempVar1 = tempVar2 + tempVar5;\n    if (tempVar1 <= (int)result1) {\n      result1 = result1 - tempVar1;\n      tempVar2 = tempVar1 + tempVar5;\n      tempVar7 = tempVar7 + tempVar5;\n    }\n    tempVar11 = tempVar11 - 1;\n    result1 = result1 * 2 - ((int)tempVar4 >> 0x1f);\n    tempVar5 = tempVar5 >> 1;\n    tempVar4 = tempVar4 << 1;\n  } while (tempVar11 != 0);\n  tempVar1 = 0x20;\n  tempVar8 = 0x80000000;\n  tempVar5 = tempVar11;\n  do {\n    tempVar3 = tempVar8 + tempVar11;\n    tempVar12 = tempVar2;\n    if ((int)tempVar2 < (int)result1) {\n      if ((int)tempVar3 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(tempVar3 + tempVar8)) {\n          tempVar12 = tempVar2 + 1;\n        }\n      }\n      tempVar6 = result1 - tempVar2;\n      tempVar2 = tempVar12;\n      if (tempVar4 < tempVar3) {\n        tempVar6 = tempVar6 - 1;\n      }\nLAB_0800a262:\n      tempVar11 = tempVar3 + tempVar8;\n      tempVar4 = tempVar4 - tempVar3;\n      tempVar5 = tempVar5 + tempVar8;\n      result1 = tempVar6;\n    }\n    else if ((result1 == tempVar2) && (tempVar3 <= tempVar4)) {\n      if ((int)tempVar3 < 0) goto LAB_0800a26a;\n      tempVar6 = 0;\n      tempVar2 = result1;\n      goto LAB_0800a262;\n    }\n    tempVar1 = tempVar1 - 1;\n    tempVar8 = tempVar8 >> 1;\n    result1 = result1 * 2 - ((int)tempVar4 >> 0x1f);\n    tempVar4 = tempVar4 << 1;\n    if (tempVar1 == 0) {\n      if ((result1 | tempVar4) == 0) {\n        tempVar1 = tempVar5 >> 1;\n      }\n      else if (tempVar5 == 0xffffffff) {\n        tempVar7 = tempVar7 + 1;\n      }\n      else {\n        tempVar1 = tempVar5 + 1 >> 1;\n      }\n      if ((tempVar7 & 1) != 0) {\n        tempVar1 = tempVar1 | 0x80000000;\n      }\n      return tempVar1;\n    }\n  } while( true );\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "imported": false,
            "current_name": "calculate_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "FUN_0800525c": "process_new_char_0800525c",
                "param_1": "new_char",
                "*PTR_DAT_080052a8": "*data_ptr",
                "current_char": "current_char",
                "process_data_until_flag_set_08002fd4": "process_data_until_flag_set",
                "do_nothing_and_return_08005250": "do_nothing_and_return",
                "new_char": "new_char",
                "do_nothing_0800522c": "do_nothing_case1",
                "do_nothing_08005220": "do_nothing_case2",
                "do_nothing_08005208": "do_nothing",
                "*data_ptr": "*data_ptr"
            },
            "code": "void process_new_char_0800525c(char new_char) {\n  int current_char = (int)new_char;\n  int* data_ptr = PTR_DAT_080052a8;\n  if (current_char != (uint)(byte)*PTR_DAT_080052a8) {\n    process_data_until_flag_set_08002fd4();\n    if (new_char == '\\0') {\n      do_nothing_and_return_08005250();\n    }\n    else {\n      if (new_char < '\\x01') {\n        do_nothing_0800522c();\n      }\n      else {\n        do_nothing_08005220();\n      }\n      do_nothing_08005208();\n    }\n    *PTR_DAT_080052a8 = current_char;\n  }\n  return;\n}",
            "called": [
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_0800522c",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_new_char_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "FUN_080073d4": "set_bit_in_array_080073d4",
                "param_1": "bit_index",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_bit_in_array_080073d4(uint bit_index){\n    uint array_index = bit_index >> 4;\n    uint array_offset = array_index * 0x400 + 0x4002001a;\n    uint bit_mask = 1 << (bit_index & 0xf);\n    *(short *)array_offset = (short)bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "FUN_08007520"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080073d4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "FUN_08006dfe": "set_bit_in_array_08006dfe",
                "param_1": "character"
            },
            "code": "void set_bit_in_array_08006dfe(char character){\n    set_bit_in_array_08006dfe_helper((int)character);\n    return;\n}",
            "called": [
                "FUN_08006a8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "synchronize_data_08006d66"
            },
            "code": "void synchronize_data_08006d66() {\n  synchronize_data_08006d66_08006c70();\n  return;\n}",
            "called": [
                "FUN_08006c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": false,
            "current_name": "synchronize_data_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "registers",
                "param_2": "mask",
                "uVar1": "bit",
                "uVar2": "masked_bit",
                "iVar3": "index",
                "local_c": "bit_mask"
            },
            "code": "void update_registers_08006e88(uint *registers, uint *mask) {\n  uint bit_mask;\n  for (bit_mask = 0; bit_mask < 0x10; bit_mask++) {\n    uint bit = 1 << (bit_mask & 0xff);\n    uint masked_bit = *mask & bit;\n    if (masked_bit == bit) {\n      if ((mask[1] == 2) || (mask[1] == 0x12)) {\n        uint value = mask[4];\n        registers[(bit_mask >> 3) + 8] &= ~(0xf << ((bit_mask & 7) << 2));\n        registers[(bit_mask >> 3) + 8] |= value << ((bit_mask & 7) << 2);\n      }\n      *registers &= ~(3 << ((bit_mask & 0x7f) << 1));\n      *registers |= (mask[1] & 3) << ((bit_mask & 0x7f) << 1);\n      if ((((mask[1] == 1) || (mask[1] == 2)) || (mask[1] == 0x11)) || (mask[1] == 0x12)) {\n        registers[2] &= ~(3 << ((bit_mask & 0x7f) << 1));\n        registers[2] |= mask[3] << ((bit_mask & 0x7f) << 1);\n        registers[1] &= ~(1 << (bit_mask & 0xff));\n        registers[1] |= (mask[1] >> 4 & 1) << (bit_mask & 0xff);\n      }\n      registers[3] &= ~(3 << ((bit_mask & 0x7f) << 1));\n      registers[3] |= mask[2] << ((bit_mask & 0x7f) << 1);\n      if ((mask[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_0800719c + 0x44) |= 0x4000;\n        *(uint *)(DAT_080071a0 + ((bit_mask >> 2) + 2) * 4) = ~(0xf << ((bit_mask & 3) << 2)) & *(uint *)(DAT_080071a0 + ((bit_mask >> 2) + 2) * 4);\n        int index;\n        if (registers == DAT_080071a4) {\n          index = 0;\n        }\n        else if (registers == DAT_080071a8) {\n          index = 1;\n        }\n        else if (registers == DAT_080071ac) {\n          index = 2;\n        }\n        else if (registers == DAT_080071b0) {\n          index = 3;\n        }\n        else if (registers == DAT_080071b4) {\n          index = 4;\n        }\n        else if (registers == DAT_080071b8) {\n          index = 5;\n        }\n        else if (registers == DAT_080071bc) {\n          index = 6;\n        }\n        else if (registers == DAT_080071c0) {\n          index = 7;\n        }\n        else if (registers == DAT_080071c4) {\n          index = 8;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(DAT_080071a0 + ((bit_mask >> 2) + 2) * 4) = index << ((bit_mask & 3) << 2) | *(uint *)(DAT_080071a0 + ((bit_mask >> 2) + 2) * 4);\n        *DAT_080071cc &= ~masked_bit;\n        DAT_080071cc[1] &= ~masked_bit;\n        if ((mask[1] & 0x10000) != 0) {\n          *DAT_080071cc |= masked_bit;\n        }\n        if ((mask[1] & 0x20000) != 0) {\n          DAT_080071cc[1] |= masked_bit;\n        }\n        DAT_080071cc[2] &= ~masked_bit;\n        DAT_080071cc[3] &= ~masked_bit;\n        if ((mask[1] & 0x100000) != 0) {\n          DAT_080071cc[2] |= masked_bit;\n        }\n        if ((mask[1] & 0x200000) != 0) {\n          DAT_080071cc[3] |= masked_bit;\n        }\n      }\n    }\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "update_registers_08006e88"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "FUN_080036f0": "print_binary_080036f0",
                "param_1": "number_to_print",
                "param_2": "num_bits",
                "local_10": "i",
                "local_c": "mask",
                "uVar1": "char_to_print",
                "wait_until_bit_is_set_08008250": "print_char"
            },
            "code": "void print_binary_080036f0(uint number_to_print, int num_bits) {\n    uint mask = 1 << (num_bits - 1);\n    for (int i = 0; i < num_bits; i++) {\n        if ((mask & number_to_print) == 0) {\n            print_char('0');\n        }\n        else {\n            print_char('1');\n        }\n        mask = mask >> 1;\n    }\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "imported": false,
            "current_name": "print_binary_080036f0"
        },
        "FUN_08002edc": {
            "renaming": {
                "FUN_08002edc": "process_data_items_08002edc",
                "concatenate_strings_and_set_flag_08002a94": "concatenate_strings_and_set_flag",
                "concatenate_inputs_and_check_08002ba8": "concatenate_inputs_and_check",
                "calculate_values_for_data_items_08002e08": "calculate_values_for_data_items"
            },
            "code": "void process_data_items_08002edc(void)\n{\n  concatenate_strings_and_set_flag();\n  concatenate_inputs_and_check();\n  calculate_values_for_data_items();\n  return;\n}",
            "called": [
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08002a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "imported": false,
            "current_name": "process_data_items_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "FUN_0800375c": "print_binary_0800375c",
                "param_1": "input",
                "print_binary_080036f0": "print_binary_helper"
            },
            "code": "void print_binary_0800375c(unsigned short input){\n    print_binary_0800375c_helper(input, 0x10);\n}\n",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "FUN_08004250"
            ],
            "imported": false,
            "current_name": "print_binary_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "FUN_08009990": "calculate_result_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "result",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5"
            },
            "code": "uint calculate_result_08009990(uint input1, uint input2, uint input3, uint input4)\n{\n  int temp1;\n  undefined4 temp2;\n  uint result;\n  uint temp3;\n  uint temp4;\n  undefined8 temp5;\n  \n  temp5 = CONCAT44(DAT_08009b04, DAT_08009b00);\n  temp3 = input4 & 0x7fffffff;\n  if ((DAT_08009b18 < (temp3 | (-input3 | input3) >> 0x1f)) || (temp4 = input2 & 0x7fffffff, DAT_08009b18 < (temp4 | (-input1 | input1) >> 0x1f))) {\n    temp3 = calculate_new_result(input3, input4, input1, input2);\n  }\n  else {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      temp3 = FUNC_0800af78();\n      return temp3;\n    }\n    temp1 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((temp4 | input1) == 0) {\n      temp3 = DAT_08009af0;\n      if ((temp1 != 2) && (temp3 = input1, temp1 == 3)) {\n        temp3 = DAT_08009af8;\n      }\n    }\n    else {\n      if ((temp3 | input3) != 0) {\n        if (temp3 == DAT_08009b18) {\n          temp1 = temp1 - 1;\n          if (temp4 == temp3) {\n            if (2 < temp1) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + temp1 * 8);\n          }\n          if (temp1 < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + temp1 * 8);\n          }\n          return 0;\n        }\n        if (temp4 != DAT_08009b18) {\n          temp1 = (int)(temp4 - temp3) >> 0x14;\n          if ((int)(temp4 - temp3) < 0x3d00000) {\n            if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n              temp5 = 0;\n            }\n            else {\n              calculate_new_result(input1, input2, input3, input4, input4);\n              do_nothing_0800b2cc();\n              temp5 = FUNC_0800af78();\n            }\n          }\n          temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n          temp3 = (uint)temp5;\n          if (temp1 == 1) {\n            return temp3;\n          }\n          if (temp1 == 2) {\n            temp5 = calculate_new_result(temp3, temp2, DAT_08009ae8, DAT_08009aec);\n            temp3 = calculate_new_result(DAT_08009af0, DAT_08009af4, (int)temp5, (int)((ulonglong)temp5 >> 0x20));\n            return temp3;\n          }\n          if (temp1 == 0) {\n            return temp3;\n          }\n          temp5 = calculate_new_result(temp3, temp2, DAT_08009ae8, DAT_08009aec);\n          temp3 = calculate_new_result((int)temp5, (int)((ulonglong)temp5 >> 0x20), DAT_08009af0, DAT_08009af4);\n          return temp3;\n        }\n      }\n      temp3 = DAT_08009b08;\n      if (-1 < (int)input2) {\n        temp3 = DAT_08009b00;\n      }\n    }\n  }\n  return temp3;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "thunk_FUN_08009990"
            ],
            "imported": false,
            "current_name": "calculate_result_08009990"
        },
        "FUN_08007e58": {
            "renaming": {
                "FUN_08007e58": "isBitSet_08007e58",
                "*DAT_08007e80": "byte"
            },
            "code": "bool isBitSet_08007e58(unsigned char **DAT_08007e80) {\n    return (**DAT_08007e80 & 0x20) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "isBitSet_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "initialize_values_080059f8",
                "DAT_08005a4c": "ptr"
            },
            "code": "void initialize_values_080059f8()\n{\n    int* DAT_08005a4c = (int*)(DAT_08005a4c);\n    DAT_08005a4c[8] = -1;\n    DAT_08005a4c[8] = 0;\n    DAT_08005a4c[9] = -1;\n    DAT_08005a4c[9] = 0;\n    DAT_08005a4c[4] = -1;\n    DAT_08005a4c[4] = 0;\n    DAT_08005a4c[5] = -1;\n    DAT_08005a4c[5] = 0;\n    DAT_08005a4c[6] = -1;\n    DAT_08005a4c[6] = 0;\n    do_nothing_08005a5c();\n}",
            "called": [
                "FUN_08005a5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_values_080059f8"
        },
        "FUN_08003f34": {
            "renaming": {
                "FUN_08003f34": "process_input_data_08003f34",
                "bVar1": "previous_byte",
                "bVar2": "current_byte",
                "uVar3": "error_code",
                "get_second_byte_and_check_flags_08008286": "get_current_byte",
                "*PTR_DAT_08004028": "is_parentheses_open",
                "0xff": "END_OF_DATA",
                "10": "NEWLINE",
                "0xd": "CARRIAGE_RETURN",
                "0x20": "SPACE",
                "0x2f": "FORWARD_SLASH",
                "0x28": "LEFT_PARENTHESIS",
                "*PTR_DAT_08004020": "number_of_chars",
                "-1": "INVALID_VALUE",
                "printErrorMessage_08004030": "print_error_message",
                "clear_data_08003980": "clear_data",
                "0x61": "LOWER_CASE_A",
                "0x7a": "LOWER_CASE_Z",
                "PTR_DAT_08004024": "input_data",
                "0x29": "RIGHT_PARENTHESIS",
                "*PTR_DAT_0800401c": "end_of_input",
                "printErrorMessage": "print_error_message",
                "clear_data": "clear_data",
                "process_data_items_08003a74": "process_data_items",
                "process_input_08003b98": "process_input"
            },
            "code": "void process_input_data_08003f34(void)\\n{\\n  byte current_byte;\\n  byte previous_byte;\\n  undefined4 error_code;\\n  while(true) {\\n    while(true) {\\n      current_byte = get_second_byte_and_check_flags_08008286();\\n      if (current_byte == 0xff) {\\n        return;\\n      }\\n      if ((current_byte == 10) || (current_byte == 0xd)) break;\\n      if (*PTR_DAT_08004028 == \"\\0\") {\\n        if ((0x20 < current_byte) && (current_byte != 0x2f)) {\\n          if (current_byte == 0x28) {\\n            *PTR_DAT_08004028 = 1;\\n          }\\n          else if (*PTR_DAT_08004020 == -1) {\\n            printErrorMessage_08004030(0xd);\\n            clear_data_08003980();\\n          }\\n          else if ((current_byte < 0x61) || (0x7a < current_byte)) {\\n            previous_byte = *PTR_DAT_08004020;\\n            *PTR_DAT_08004020 = previous_byte + 1;\\n            PTR_DAT_08004024[previous_byte] = current_byte;\\n          }\\n          else {\\n            previous_byte = *PTR_DAT_08004020;\\n            *PTR_DAT_08004020 = previous_byte + 1;\\n            PTR_DAT_08004024[previous_byte] = current_byte - 0x20;\\n          }\\n        }\\n      }\\n      else if (current_byte == 0x29) {\\n        *PTR_DAT_08004028 = 0;\\n      }\\n    }\\n    process_data_items();\\n    if (*PTR_DAT_0800401c != \"\\0\") break;\\n    if (*PTR_DAT_08004020 == \"\\0\") {\\n      print_error_message(0);\\n    }\\n    else {\\n      PTR_DAT_08004024[(byte)*PTR_DAT_08004020] = 0;\\n      error_code = process_input_08003b98(PTR_DAT_08004024);\\n      print_error_message(error_code);\\n    }\\n    clear_data();\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08008286",
                "FUN_08003980",
                "FUN_08004030",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_input_data_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "FUN_080095b8": "convert_to_fixed_point_080095b8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "bit_mask",
                "uVar2": "shift_amount",
                "uVar3": "normalized_input",
                "uVar4": "sign",
                "uVar5": "shifted_difference",
                "iVar4": "sign",
                "CARRY4": "CARRY4"
            },
            "code": "int convert_to_fixed_point_080095b8(uint input1, uint input2)\n{\n  uint shift_amount;\n  uint normalized_input;\n  int sign;\n  uint result;\n  uint bit_mask;\n  uint carry_check;\n  if ((int)input2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  shift_amount = (input2 << 1) >> 0x15;\n  normalized_input = input2 & 0xfffff | 0x100000;\n  bit_mask = 0x80000 >> (shift_amount & 0xff);\n  if ((int)(shift_amount - 0x3ff) < 0x14) {\n    if ((int)(shift_amount - 0x3ff) < 0) {\n      if (shift_amount - 0x3ff != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = normalized_input + (bit_mask >> (0x14 - shift_amount & 0xff));\n  }\n  else {\n    if (shift_amount - 0x3ff > 0x1e) {\n      sign = convert_to_signed_fixed_point_08008ba0();\n      return sign;\n    }\n    if ((int)(shift_amount - 0x3ff) < 0x34) {\n      carry_check = 0x80000000 >> ((shift_amount - 0x413) & 0xff);\n      if (CARRY4(carry_check,input1) != false) {\n        result = normalized_input + 1;\n      }\n      result = (result << ((shift_amount - 0x413) & 0xff)) | ((input1 + carry_check) >> (0x34 - (shift_amount - 0x3ff) & 0xff));\n    }\n    else {\n      result = (normalized_input << ((shift_amount - 0x413) & 0xff)) | (input1 << ((shift_amount - 0x433) & 0xff));\n    }\n  }\n  return result * sign;\n}",
            "called": [
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "convert_to_fixed_point_080095b8"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "set_byte_at_address_08006cf6",
                "param_1": "address",
                "param_2": "bitmask",
                "param_3": "start_bit",
                "uVar1": "extracted_bits",
                "get_bitmask_08006998": "get_bitmask",
                "extract_bits_08006ba0": "extract_bits",
                "set_byte_at_address_08006b00": "set_byte_at_address_08006b00"
            },
            "code": "void set_byte_at_address_08006cf6(char* address, uint32_t bitmask, uint32_t start_bit, uint32_t end_bit) {\n  uint32_t extracted_bits = extract_bits(bitmask, start_bit, end_bit);\n  set_byte_at_address_08006cf6_08006b00((int)address, extracted_bits);\n  return;\n}",
            "called": [
                "FUN_08006998",
                "FUN_08006ba0",
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_byte_at_address_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "FUN_08002ef0": "copy_and_limit_value_08002ef0",
                "PTR_DAT_08002f1c": "limited_value_ptr",
                "PTR_DAT_08002f18": "original_value_ptr",
                "PTR_DAT_08002f20": "uVar1",
                "increment_and_limit_08002870": "increment_and_limit"
            },
            "code": "void copy_and_limit_value_08002ef0(void)\n{\n  int original_value = *PTR_DAT_08002f18;\n  int limited_value = increment_and_limit(original_value);\n  *PTR_DAT_08002f1c = limited_value;\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "FUN_08002f24"
            ],
            "imported": false,
            "current_name": "copy_and_limit_value_08002ef0"
        },
        "FUN_08001d4c": {
            "renaming": {
                "FUN_08001d4c": "update_data_and_check_flag_08001d4c",
                "local_9": "flag_value",
                "cVar1": "decrementing_char"
            },
            "code": "void update_data_and_check_flag_08001d4c(void)\\n{\\n  char decrementing_char;\\n  char flag_value;\\n  \\n  update_data_if_flag_set_08005790();\\n  call_func_with_args_08001994(4,1,0,*(undefined4 *)(PTR_DAT_08001dd8 + 0x30));\\n  call_func_with_args_08001994(3,1,0,*(undefined4 *)(PTR_DAT_08001dd8 + 0x30));\\n  do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\\n  flag_value = \"\\x02\";\\n  while( true ) {\\n    decrementing_char = flag_value - 1;\\n    if (flag_value == \"\\0\") break;\\n    call_func_with_args_08001994(7,0,1,*(undefined4 *)(PTR_DAT_08001dd8 + 0x2c));\\n    do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\\n    flag_value = decrementing_char;\\n    if (\"\\0\" < decrementing_char) {\\n      call_func_with_args_08001994(7,1,0,*(undefined4 *)(PTR_DAT_08001dd8 + 0x2c));\\n      do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\\n    }\\n  }\\n  clear_bits_and_check_condition_080057e4();\\n  return;\\n}",
            "called": [
                "FUN_08001994",
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "FUN_080024c4"
            ],
            "imported": false,
            "current_name": "update_data_and_check_flag_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "FUN_08000268": "calculate_value_from_pointer_08000268",
                "iVar1": "value",
                "get_value_from_pointer_08005a84": "get_value_from_pointer",
                "DAT_0800029c": "DAT",
                "PTR_08000298": "PTR"
            },
            "code": "int calculate_value_from_pointer_08000268(void)\n{\n  int value = get_value_from_pointer();\n  int result = (value + 1) * 1000 - (uint)((ulonglong)DAT_0800029c_0800029c * (ulonglong)(*(uint *)(PTR_08000298_08000298 + 8) >> 3) >> 0x21);\n  return result;\n}",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "FUN_080002b6"
            ],
            "imported": false,
            "current_name": "calculate_value_from_pointer_08000268"
        },
        "FUN_08003778": {
            "renaming": {
                "FUN_08003778": "process_input_numbers_08003778",
                "param_1": "input_number",
                "local_1c": "quotient",
                "acStack_15": "number_string",
                "local_9": "digit_count",
                "uVar1": "remainder"
            },
            "code": "void process_input_numbers_08003778(uint input_number)\n    {\n        uint remainder;\n        uint quotient = input_number;\n        char number_string[12];\n        byte digit_count = 0;\n        \n        if (input_number == 0) {\n            wait_until_bit_is_set_08008250(0x30);\n        }\n        else {\n            while (quotient != 0) {\n                remainder = quotient % 10;\n                quotient = quotient / 10;\n                number_string[digit_count] = remainder + '0';\n                digit_count++;\n            }\n            while (digit_count != 0) {\n                digit_count--;\n                wait_until_bit_is_set_08008250(number_string[digit_count]);\n            }\n        }\n    }",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "FUN_080037fc"
            ],
            "imported": false,
            "current_name": "process_input_numbers_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_value_from_pointer_to_pointer_0800b3dc",
                "PTR_PTR_DAT_0800b3e4": "ptr_ptr_data"
            },
            "code": "int get_value_from_pointer_to_pointer_0800b3dc(){\n  int* pointer_to_value = (int*)PTR_PTR_DAT_0800b3e4;\n  int value = *pointer_to_value;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_to_pointer_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "FUN_080046d0": "process_input_and_print_results_080046d0",
                "PTR_DAT_08004890": "params",
                "PTR_DAT_080048a8": "characters_1",
                "PTR_DAT_080048ac": "characters_2",
                "PTR_DAT_080048b0": "characters_3",
                "PTR_DAT_080048b4": "characters_4",
                "PTR_DAT_080048b8": "characters_5",
                "PTR_DAT_080048bc": "characters_6",
                "PTR_DAT_080048c0": "characters_7",
                "PTR_DAT_080048c4": "characters_8",
                "PTR_DAT_080048c8": "characters_9",
                "PTR_DAT_080048cc": "characters_10",
                "PTR_DAT_080048d0": "characters_11",
                "PTR_DAT_080048d4": "characters_12",
                "PTR_DAT_080048d8": "characters_13",
                "PTR_DAT_080048dc": "characters_14",
                "PTR_DAT_080048e0": "characters_15",
                "PTR_DAT_080048e4": "characters_16",
                "PTR_DAT_080048e8": "characters_17",
                "PTR_DAT_080048ec": "characters_18",
                "PTR_DAT_080048f0": "characters_19",
                "PTR_DAT_080048f4": "characters_20",
                "PTR_DAT_080048f8": "characters_21",
                "PTR_DAT_080048fc": "characters_22",
                "process_input_080037fc": "process_input",
                "wait_for_characters_080036c6": "wait_for_characters",
                "calculate_08008590": "calculate_result",
                "FUNC_08008640": "format_result",
                "CalculateFloat_08008c30": "calculate_float",
                "DAT_08004888": "format_param_1",
                "DAT_0800488c": "format_param_2"
            },
            "code": "void process_input_and_print_results_080046d0(void)\n{\n    byte num_PTR_DAT_08004890 = PTR_DAT_08004890[1];\n    if (num_PTR_DAT_08004890 > 4) {\n        wait_for_characters_080036c6(PTR_DAT_080048a8);\n        byte param1 = PTR_DAT_08004890[0x1c] + 0x36;\n        process_input_080037fc(param1);\n        if (!PTR_DAT_08004890[0x19]) {\n            if (PTR_DAT_08004890[0x1a] == 1) {\n                wait_for_characters_080036c6(PTR_DAT_080048ac);\n            }\n            else {\n                wait_for_characters_080036c6(PTR_DAT_080048b0);\n            }\n        }\n        else {\n            wait_for_characters_080036c6(PTR_DAT_080048b4);\n        }\n        if (!PTR_DAT_08004890[3]) {\n            wait_for_characters_080036c6(PTR_DAT_080048bc);\n        }\n        else {\n            wait_for_characters_080036c6(PTR_DAT_080048b8);\n        }\n        if (!PTR_DAT_08004890[4]) {\n            wait_for_characters_080036c6(PTR_DAT_080048c4);\n        }\n        else {\n            wait_for_characters_080036c6(PTR_DAT_080048c0);\n        }\n        if (!PTR_DAT_08004890[2]) {\n            wait_for_characters_080036c6(PTR_DAT_080048cc);\n        }\n        else {\n            wait_for_characters_080036c6(PTR_DAT_080048c8);\n        }\n        byte param6 = PTR_DAT_08004890[5];\n        if (param6 == 2) {\n            wait_for_characters_080036c6(PTR_DAT_080048d8);\n        }\n        else if (param6 < 3) {\n            if (param6 == 0) {\n                wait_for_characters_080036c6(PTR_DAT_080048d0);\n            }\n            else if (param6 == 1) {\n                wait_for_characters_080036c6(PTR_DAT_080048d4);\n            }\n        }\n        char param7 = PTR_DAT_08004890[6];\n        if (param7 == 1) {\n            wait_for_characters_080036c6(PTR_DAT_080048dc);\n        }\n        else if (param7 < 2) {\n            if (param7 == -1) {\n                wait_for_characters_080036c6(PTR_DAT_080048e0);\n            }\n            else if (!param7) {\n                wait_for_characters_080036c6(PTR_DAT_080048e4);\n            }\n        }\n        byte param8 = PTR_DAT_08004890[7];\n        if (param8 == 2) {\n            wait_for_characters_080036c6(PTR_DAT_080048f0);\n        }\n        else if (param8 < 3) {\n            if (!param8) {\n                wait_for_characters_080036c6(PTR_DAT_080048e8);\n            }\n            else if (param8 == 1) {\n                wait_for_characters_080036c6(PTR_DAT_080048ec);\n            }\n        }\n        wait_for_characters_080036c6(PTR_DAT_080048f4);\n        byte param9 = PTR_DAT_08004890[0x18];\n        process_input_080037fc(param9);\n        wait_for_characters_080036c6(PTR_DAT_080048f8);\n        if (!PTR_DAT_08004890[3]) {\n            print_float_08003826(*(undefined4 *)(PTR_DAT_08004890 + 8));\n        }\n        else {\n            undefined8 result = calculate_08008590(*(undefined4 *)(PTR_DAT_08004890 + 8));\n            result = FUNC_08008640((int)result,(int)((ulonglong)result >> 0x20),DAT_08004888,DAT_0800488c);\n            undefined4 float_result = CalculateFloat_08008c30((int)result,(int)((ulonglong)result >> 0x20));\n            print_float_08003826(float_result);\n        }\n        wait_for_characters_080036c6(PTR_DAT_080048fc);\n        return;\n    }\n    // Jump table\n    (*(code *)(&switchD_080046de::switchdataD_080046e4)[num_PTR_DAT_08004890])();\n    return;\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_input_and_print_results_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "FUN_08006d72": "is_parameter_valid_08006d72",
                "param_1": "parameter",
                "uVar1": "is_valid"
            },
            "code": "int is_parameter_valid_08006d72(int parameter) {\n  int is_valid = is_param_valid_08006c9c(parameter);\n  return is_valid;\n}",
            "called": [
                "FUN_08006c9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "is_parameter_valid_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "FUN_0800756c": "set_flags_and_values_0800756c",
                "*DAT_080075bc": "flag_ptr",
                "DAT_080075bc": "flag_ptr",
                "DAT_080075c0": "flag_value",
                "DAT_080075c4": "value_ptr"
            },
            "code": "void set_flags_and_values_0800756c(void)\n{\n  unsigned int* *DAT_080075bc = DAT_080075bc;\n  unsigned int DAT_080075c0 = **DAT_080075bc | 1;\n  *DAT_080075bc[2] = 0;\n  DAT_080075c0 &= 0xfef6ffff;\n  *DAT_080075bc[1] = DAT_080075c0;\n  DAT_080075c0 &= 0xfffbffff;\n  *DAT_080075bc[3] = 0;\n  unsigned int* DAT_080075c4 = (unsigned int*)(DAT_080075c4 + 8);\n  *DAT_080075c4 = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_0800756c"
        },
        "FUN_080001f8": {
            "renaming": {
                "FUN_080001f8": "initialize_pointer_080001f8",
                "PTR_DAT_0800020c": "pointer_to_data",
                "do_nothing_twice_08000210_08000210": "do_nothing_twice"
            },
            "code": "void initialize_pointer_080001f8(void)\n{\n  *PTR_DAT_0800020c = 0;\n  do_nothing_twice();\n  return;\n}",
            "called": [
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_pointer_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "FUN_08002f74": "get_data_pointer_08002f74",
                "*PTR_DAT_08002fa0": "data_start",
                "*PTR_DAT_08002fa4": "data_end",
                "puVar1": "data_pointer",
                "PTR_DAT_08002fa8": "data_offset"
            },
            "code": "uint8_t* get_data_pointer_08002f74()\n{\n  uint8_t* data_pointer;\n  if (**PTR_DAT_08002fa0 == **PTR_DAT_08002fa4)\n  {\n    data_pointer = NULL;\n  }\n  else\n  {\n    data_pointer = PTR_DAT_08002fa8 + (**PTR_DAT_08002fa4 * 64);\n  }\n  return data_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "imported": false,
            "current_name": "get_data_pointer_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "index",
                "ppcVar2": "function_ptr",
                "iVar3": "function_count",
                "PTR_DAT_0800b420": "PTR_FUNCTION_ARRAY_END",
                "PTR_DAT_0800b424": "PTR_FUNCTION_ARRAY_START",
                "PTR_DAT_0800b42c": "PTR_SECOND_FUNCTION_ARRAY_START",
                "PTR_DAT_0800b428": "PTR_SECOND_FUNCTION_ARRAY_END"
            },
            "code": "void execute_functions_0800b3e8() {\n  int function_count = (int)PTR_DAT_0800b420 - (int)PTR_DAT_0800b424 >> 2;\n  if (function_count != 0) {\n    int i = 0;\n    code **function_ptr = (code **)PTR_DAT_0800b424;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (function_count != i);\n  }\n  function_ptr = (code **)PTR_DAT_0800b42c;\n  int second_function_count = (int)PTR_DAT_0800b428 - (int)PTR_DAT_0800b42c >> 2;\n  do_nothing();\n  second_function_count = second_function_count >> 2;\n  if (second_function_count != 0) {\n    int i = 0;\n    do {\n      i++;\n      (**function_ptr)();\n      function_ptr++;\n    } while (second_function_count != i);\n  }\n  return;\n}",
            "called": [
                "FUN_080001ac",
                "FUN_0800b5b0",
                "FUN_0800b4d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "execute_functions_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "initial_value",
                "param_2": "param",
                "uVar1": "result",
                "uVar2": "uVar",
                "local_28": "first_calculation_result",
                "uStack_24": "second_calculation_result",
                "local_20": "third_calculation_result",
                "uStack_1c": "fourth_calculation_result",
                "DAT_08009790": "MAXIMUM_LIMIT",
                "DAT_08009794": "MINIMUM_LIMIT"
            },
            "code": "int calculate_result_080096e8(int initial_value, unsigned int param) {\n    int result;\n    unsigned int uVar;\n    int first_calculation_result;\n    int second_calculation_result;\n    int third_calculation_result;\n    int fourth_calculation_result;\n    if (DAT_08009790 < (int)(param & 0x7fffffff)) {\n        result = calculate_result_080096e8_0800adf0(initial_value, param, 0, 0, 0);\n    }\n    else {\n        if (DAT_08009794 < (int)(param & 0x7fffffff)) {\n            result = FUNC_080082d0(initial_value, param, initial_value, param);\n        }\n        else {\n            uVar = FUNC_08009d78(initial_value, param, &first_calculation_result);\n            uVar = uVar & 3;\n            if (uVar == 1) {\n                result = FUNC_0800a348(first_calculation_result, second_calculation_result, third_calculation_result, fourth_calculation_result);\n            }\n            else if (uVar == 2 || uVar == 0) {\n                result = calculate_result_080096e8_0800adf0(first_calculation_result, second_calculation_result, third_calculation_result, fourth_calculation_result, 1);\n            }\n            else {\n                result = FUNC_0800a348(first_calculation_result, second_calculation_result, third_calculation_result, fourth_calculation_result);\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "FUN_08006a18": "is_bit_set_in_array_08006a18",
                "param_1": "input_byte",
                "PTR_DAT_08006a54": "data_ptr",
                "uint": "uint32_t",
                "DAT_08006a54": "DAT_08006a54",
                "char": "uint8_t",
                "index": "index",
                "offset": "offset"
            },
            "code": "bool is_bit_set_in_array_08006a18(uint8_t input_byte)\n{\n    uint8_t index = input_byte >> 5;\n    uint32_t* PTR_DAT_08006a54 = (uint32_t*)(DAT_08006a54 + ((index + 0x40) * 4));\n    uint8_t offset = input_byte & 0x1f;\n    return ((*PTR_DAT_08006a54) & (1 << offset)) != 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "FUN_08006de0"
            ],
            "imported": false,
            "current_name": "is_bit_set_in_array_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_values_08002c18",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "hash1",
                "iVar2": "concatenated_values",
                "uVar3": "hash2",
                "uVar4": "hash3",
                "uVar5": "hash4",
                "uVar6": "temp_result",
                "uVar7": "result",
                "local_1c": "local_1c",
                "local_20": "local_20"
            },
            "code": "void calculate_values_08002c18(int input, int param_2, int param_3)\n{\n    uint32_t hash1, hash2, hash3, hash4;\n    int concatenated_values, value1, value2, value3, result1, result2, result3, final_result;\n    uint32_t local_1c, local_20;\n    \n    hash1 = calculate_hash(input + 0x3c);\n    value1 = calculate_value(hash1, param_2);\n    result1 = calculate_result(value1);\n    hash2 = calculate_hash(input + 0x3c);\n    value2 = calculate_value(hash2, param_3);\n    result2 = calculate_result(value2);\n    concatenated_values = get_concatenated_values(*(int *)(input + 0x30) * 0x32);\n    value3 = calculate_value(concatenated_values, 0, 0, 0x08002e04);\n    result3 = convert_to_fixed_point(value3);\n    hash3 = calculate_hash(input + 0x28);\n    hash4 = calculate_hash(input + 0x3c);\n    final_result = calculate_final_result(hash3, hash4, result3, result1, result2);\n    local_1c = *(uint32_t *)(input + 0x10);\n    local_20 = calculate_local_20(final_result, concatenated_values, local_1c);\n    *(uint32_t *)(input + 0x34) = local_1c;\n    *(uint32_t *)(input + 0x38) = local_1c + local_20;\n}\n",
            "called": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "FUN_08002e08"
            ],
            "imported": false,
            "current_name": "calculate_values_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "check_bit_at_position_08006ac0",
                "param_1": "bit_position",
                "DAT_08006afc": "ptr_to_data",
                "uint": "uint32_t",
                "int": "int32_t",
                "char": "char8_t",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "bool check_bit_at_position_08006ac0(uint8_t bit_position) {\n                     uint32_t *ptr = (uint32_t *)(DAT_08006afc + (((uint32_t)bit_position >> 5) + 0x80) * 4);\n                     uint32_t mask = 1 << (bit_position & 0x1f);\n                     return ((*ptr & mask) != 0);\n                   }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08006e1a"
            ],
            "imported": false,
            "current_name": "check_bit_at_position_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "FUN_08002ba8": "concatenate_inputs_and_check_08002ba8",
                "puVar1": "previous_input_buffer",
                "puVar2": "current_input_buffer",
                "puVar3": "next_input_buffer",
                "local_14": "last_input_buffer",
                "local_10": "first_input_buffer",
                "local_9": "current_input_index"
            },
            "code": "void concatenate_inputs_and_check_08002ba8(void)\n{\n  undefined *previous_input_buffer;\n  undefined *current_input_buffer;\n  undefined *next_input_buffer;\n  undefined *last_input_buffer = (undefined *)0x0;\n  undefined *first_input_buffer = (undefined *)0x0;\n  byte current_input_index = *input_index_pointer;\n  while (current_input_index != *input_index_limit_pointer) {\n    previous_input_buffer = last_input_buffer;\n    current_input_buffer = PTR_input_buffers + (uint)current_input_index * 0x40;\n    check_input_and_concatenate_08002afc(previous_input_buffer, current_input_buffer);\n    current_input_index = increment_and_limit_08002870(current_input_index);\n    next_input_buffer = current_input_buffer;\n    last_input_buffer = current_input_buffer;\n    first_input_buffer = previous_input_buffer;\n  }\n  check_input_and_concatenate_08002afc(last_input_buffer, first_input_buffer, 0, last_input_buffer, next_input_buffer);\n  return;\n}",
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "concatenate_inputs_and_check_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "first_value",
                "param_2": "second_value",
                "bVar1": "is_negative",
                "uVar2": "doubled_first_value",
                "uVar3": "doubled_second_value",
                "uVar4": "combined_values",
                "bVar5": "is_combined_zero"
            },
            "code": "uint calculate_result_0800919c(uint first_value, uint second_value)\n{\n    bool is_negative;\n    uint doubled_first_value = first_value * 2;\n    uint doubled_second_value = second_value * 2;\n    \n    if (((int)doubled_first_value >> 0x18 == -1 || (int)doubled_second_value >> 0x18 == -1) && ((((int)doubled_first_value >> 0x18 == -1 && ((first_value & 0x7fffff) != 0)) || (((int)doubled_second_value >> 0x18 == -1 && ((second_value & 0x7fffff) != 0)))))) {\n        return 1;\n    }\n    \n    uint combined_values = doubled_first_value | second_value & 0x7fffffff;\n    bool is_combined_zero = combined_values == 0;\n    if (!is_combined_zero) {\n        combined_values = first_value ^ second_value;\n        is_combined_zero = combined_values == 0;\n    }\n    is_negative = -1 < (int)combined_values;\n    if (is_negative) {\n        first_value = doubled_first_value + second_value * -2;\n        is_combined_zero = first_value == 0;\n    }\n    if ((is_negative && doubled_second_value <= doubled_first_value) && !is_combined_zero) {\n        first_value = (int)second_value >> 0x1f;\n    }\n    if (!is_negative || doubled_second_value > doubled_first_value) {\n        first_value = ~((int)second_value >> 0x1f);\n    }\n    if (!is_combined_zero) {\n        first_value = first_value | 1;\n    }\n    return first_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "FUN_08009204"
            ],
            "imported": false,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "\nvoid do_nothing_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "FUN_0800854c": "convert_uint64_to_uint32_0800854c",
                "param_1": "input",
                "uVar1": "lower_bits",
                "uVar2": "shift_amount",
                "iVar3": "num_leading_zeroes",
                "uVar4": "bits_to_shift",
                "in_r12": "upper_bits",
                "bVar5": "is_negative_shift_amount",
                "bVar6": "is_zero_shift_amount",
                "bVar7": "is_overflow_shift_amount"
            },
            "code": "ulonglong convert_uint64_to_uint32_0800854c(uint input)\n{\n    if (input == 0)\n    {\n        return 0;\n    }\n    uint shift_amount = count_leading_zeroes(input) - 11;\n    uint upper_bits = 0;\n    uint lower_bits = input << (shift_amount & 0x1F);\n    if (shift_amount >= 32)\n    {\n        shift_amount = shift_amount - 32;\n        upper_bits = input << (shift_amount & 0x1F);\n    }\n    return ((ulonglong)upper_bits << 32) | lower_bits;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "convert_uint64_to_uint32_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "FUN_08008e44": "calculate_hash_08008e44",
                "param_1": "input",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shifted_input",
                "iVar4": "hash_value",
                "uVar5": "overflow_bits"
            },
            "code": "uint calculate_hash_08008e44(uint input)\n{\n  int leading_zeroes_count = count_leading_zeroes(input);\n  uint shifted_input = (input << (leading_zeroes_count - 8));\n  uint hash_value = (shifted_input | 0x4b000000) - 0x7f800000;\n  if (leading_zeroes_count > 7) {\n    uint overflow_bits = 0 << (leading_zeroes_count - 8);\n    hash_value += (input << (leading_zeroes_count - 8)) + (0U >> (0x20 - (leading_zeroes_count - 8))) + (uint)(0x7fffffff < overflow_bits);\n    if (overflow_bits == 0x80000000) {\n      hash_value = hash_value & 0xfffffffe;\n    }\n    return hash_value;\n  }\n  uint shifted_input2 = input << (leading_zeroes_count + 24);\n  hash_value += (input >> (8 - leading_zeroes_count)) - ((int)shifted_input >> 31);\n  if ((shifted_input & 0x7fffffff) == 0) {\n    hash_value = hash_value & ~(shifted_input >> 31);\n  }\n  return hash_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "param_index",
                "param_2": "param_value",
                "param_3": "param_type"
            },
            "code": "void set_param_value_0800733e(int param_index, unsigned short param_value, char param_type) {\n  if (param_type == '\\0') {\n    *(unsigned short *)(param_index + 0x1a) = param_value;\n  }\n  else {\n    *(unsigned short *)(param_index + 0x18) = param_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "set_param_value_0800733e"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "update_parameters_and_data_0800583c",
                "update_param_080052ac": "update_parameters",
                "update_data_if_flag_set_08005790": "update_data_if_flag_set",
                "clear_bits_and_check_condition_080057e4": "clear_bits_and_check_conditions",
                "*(undefined2 *)(PTR_DAT_08005858 + 0x18)": "parameter_value"
            },
            "code": "void update_parameters_and_data_0800583c(void)\n{\n  int *(undefined2 *)(PTR_DAT_08005858 + 0x18) = *(int *)(PTR_DAT_08005858 + 0x18);\n  update_parameters(*(undefined2 *)(PTR_DAT_08005858 + 0x18));\n  update_data_if_flag_set();\n  clear_bits_and_check_conditions();\n  return;\n}",
            "called": [
                "FUN_080052ac",
                "FUN_08005790",
                "FUN_080057e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "update_parameters_and_data_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "FUN_08001e98": "processDataItemsAndUpdateFlagIfConditionMet_08001e98",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "isEqual"
            },
            "code": "void processDataItemsAndUpdateFlagIfConditionMet_08001e98(int param1, int param2, int param3, int param4, char param5) {\\n  int isEqual;\\n  if (PTR_DAT_08001efc[1] != \"\\a\") {\\n    do {\\n      process_data_items_08003a74();\\n      if (*PTR_DAT_08001efc != \"\\0\") {\\n        return;\\n      }\\n      isEqual = check_pointer_equality_08002fac();\\n    } while (isEqual != 0);\\n    FUNC_08003004(param1, param2, param3, param4, param5);\\n    if (PTR_DAT_08001efc[1] == \"\\0\") {\\n      PTR_DAT_08001efc[1] = 2;\\n    }\\n    if (PTR_DAT_08001efc[0x10] != \"\\0\") {\\n      update_flag_if_condition_met_0800585c();\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002fac",
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "processDataItemsAndUpdateFlagIfConditionMet_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "set_bit_at_index_080069e4",
                "param_1": "index",
                "PTR_DAT_08006a14": "ptr",
                "uint": "unsigned_int",
                "char": "character",
                "DAT_08006a14": "data"
            },
            "code": "void set_bit_at_index_080069e4(int index){\n    int* PTR_DAT_08006a14 = (int *)(DAT_08006a14 + (((uint)(int)(char)index >> 5) + 0x20) * 4);\n    int bit_position = index & 0x1f;\n    int bit_mask = 1 << bit_position;\n    *PTR_DAT_08006a14 = bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006d4a"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "FUN_0800b2d4": "set_msb_and_shift_right_0800b2d4",
                "param_1": "value",
                "param_2": "shift_amount"
            },
            "code": "uint set_msb_and_shift_right_0800b2d4(uint value, uint shift_amount) {\n    uint msb_set_value = value | 0x80000000;\n    uint shifted_value = msb_set_value + 0x100000 >> 0x1f;\n    return shifted_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "set_msb_and_shift_right_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_hash_08008e3c",
                "param_1": "input",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "iVar3": "constant",
                "uVar4": "carry",
                "shifted_input": "shifted_input",
                "shifted_zero": "shifted_zero",
                "result": "result"
            },
            "code": "uint calculate_hash_08008e3c(uint input)\n{\n  int leading_zeroes = count_leading_zeroes(input);\n  int shift_amount = leading_zeroes - 8;\n  int constant = shift_amount * -0x800000 + 0x4a800000;\n  if (leading_zeroes > 7) {\n    uint shifted_input = input << (shift_amount & 0xff);\n    uint shifted_zero = 0U >> (0x20 - shift_amount & 0xff);\n    uint carry = (uint)(0x7fffffff < shifted_zero);\n    uint result = constant + shifted_input + shifted_zero + carry;\n    if (shifted_zero == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  uint shifted_input = input << (leading_zeroes + 0x18U & 0xff);\n  uint shifted_constant = (uint)(constant >> 0x1f);\n  uint result = constant + ((input >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_input >> 0x1f)) - shifted_constant;\n  if ((shifted_input & 0x7fffffff) == 0) {\n    result = result & ~(shifted_input >> 0x1f);\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_hash_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "FUN_08009654": "calculate_double_08009654",
                "param_1": "first_half",
                "param_2": "second_half",
                "uVar1": "exponent",
                "uVar2": "shifted_second_half",
                "lVar3": "result",
                "DAT_080096e4": "mantissa_mask",
                "sign_bit": "sign_bit",
                "incremented_second_half": "incremented_second_half",
                "rounding_mask": "rounding_mask",
                "sticky_mask": "sticky_mask",
                "incremented_first_half": "incremented_first_half"
            },
            "code": "long long calculate_double_08009654(uint32_t first_half, uint32_t second_half)\n{\n    long long result = ((long long)second_half << 32) | first_half;\n    uint32_t shifted_second_half = (second_half << 1) >> 21;\n    uint32_t exponent = shifted_second_half - 1023;\n\n    if ((int)exponent < 20)\n    {\n        if ((int)exponent < 0)\n        {\n            uint32_t sign_bit = second_half & 0x80000000;\n            if (exponent == 0xffffffff)\n            {\n                sign_bit |= 0x3ff00000;\n            }\n            result = (long long)sign_bit << 32;\n        }\n        else\n        {\n            uint32_t DAT_080096e4 = 0xffffffff >> (32 - exponent);\n            uint32_t rounding_mask = 0x80000 >> exponent;\n            uint32_t sticky_mask = DAT_080096e4 ^ 0xffffffff;\n\n            if ((second_half & DAT_080096e4) != 0 || first_half != 0)\n            {\n                uint32_t incremented_second_half = second_half + rounding_mask;\n                if (CARRY4(first_half, 1 << (31 - exponent)))\n                {\n                    incremented_second_half++;\n                }\n                result = ((long long)incremented_second_half << 32) | ((first_half + (1 << (31 - exponent))) & ~sticky_mask);\n            }\n        }\n    }\n    else if ((int)exponent < 52)\n    {\n        uint32_t DAT_080096e4 = 0xffffffff >> (exponent - 1020);\n\n        if ((first_half & DAT_080096e4) != 0)\n        {\n            uint32_t sticky_mask = DAT_080096e4 ^ 0xffffffff;\n            uint32_t incremented_first_half = first_half + (1 << (51 - exponent));\n            uint32_t incremented_second_half = second_half;\n            if (CARRY4(first_half, 1 << (51 - exponent)))\n            {\n                incremented_second_half++;\n            }\n            result = ((long long)incremented_second_half << 32) | (incremented_first_half & ~sticky_mask);\n        }\n    }\n    else if (exponent == 1024)\n    {\n        result = FUNC_080082d4();\n    }\n    return result;\n}",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "calculate_double_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2",
                "_DAT_40000000": "PTR_DAT_40000000",
                "_DAT_4000000c": "PTR_DAT_4000000c"
            },
            "code": "void clear_bits_08007bc2(void)\n{\n    _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n    _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "clear_bits_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "FUN_08009410": "calculate_result_08009410_08009410",
                "param_1": "param_1",
                "param_2": "param_2",
                "uVar1": "result",
                "uVar2": "uVar2",
                "local_28": "local_var1",
                "uStack_24": "uStack_24",
                "local_20": "local_var2",
                "uStack_1c": "uStack_1c",
                "DAT_080094b4": "max_value_080094b4",
                "DAT_080094b8": "max_value_080094b8",
                "FUNC_080082d0": "call_func_080082d0",
                "FUNC_08009d78": "call_func_08009d78",
                "calculate_result_0800adf0": "calculate_result_0800adf0",
                "FUNC_0800a348": "call_func_0800a348"
            },
            "code": "undefined4 calculate_result_08009410_08009410(undefined4 param_1, uint param_2)\n{\n  undefined4 result;\n  uint uVar2;\n  undefined4 local_var1;\n  undefined4 uStack_24;\n  undefined4 local_var2;\n  undefined4 uStack_1c;\n  \n  if (DAT_080094b4 < (int)(param_2 & 0x7fffffff)) {\n    if (DAT_080094b8 < (int)(param_2 & 0x7fffffff)) {\n      result = call_func_080082d0(param_1,param_2,param_1,param_2);\n    }\n    else {\n      uVar2 = call_func_08009d78(param_1,param_2,&local_var1);\n      uVar2 = uVar2 & 3;\n      if (uVar2 == 1) {\n        result = calculate_result_0800adf0(local_var1,uStack_24,local_var2,uStack_1c,1);\n      }\n      else if (uVar2 == 2) {\n        result = call_func_0800a348(local_var1,uStack_24,local_var2,uStack_1c);\n      }\n      else if (uVar2 == 0) {\n        result = call_func_0800a348(local_var1,uStack_24,local_var2,uStack_1c);\n      }\n      else {\n        result = calculate_result_0800adf0(local_var1,uStack_24,local_var2,uStack_1c,1);\n      }\n    }\n    return result;\n  }\n  result = call_func_0800a348(param_1,param_2,0,0);\n  return result;\n}",
            "called": [
                "FUN_080082d0",
                "FUN_0800a348",
                "FUN_08009d78",
                "FUN_0800adf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_08009410_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "store_params_to_data_section_080035ec",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "PTR_DAT_08003614": "data_section_ptr"
            },
            "code": "void store_params_to_data_section_080035ec(int param_1, int param_2, int param_3)\n{\n    int* PTR_DAT_08003614 = (int*) PTR_DAT_08003614;\n    *PTR_DAT_08003614 = param_1;\n    *(PTR_DAT_08003614 + 1) = param_2;\n    *(PTR_DAT_08003614 + 2) = param_3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "store_params_to_data_section_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "FUN_08006c70": "synchronize_data_08006c70",
                "uint": "unsigned int",
                "ptr": "pointer",
                "DAT_08006c94": "data_pointer",
                "DAT_08006c98": "data_value"
            },
            "code": "void synchronize_data_08006c70(void)\n{\n    DataSynchronizationBarrier(0xf);\n    uint* ptr = (uint*)(DAT_08006c94 + 0xc);\n    *ptr = DAT_08006c98 | (*ptr & 0x700);\n    DataSynchronizationBarrier(0xf);\n    while(true)\n    {\n        // Do nothing, infinite loop\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "FUN_08006d66"
            ],
            "imported": false,
            "current_name": "synchronize_data_08006c70"
        },
        "FUN_08006d98": {
            "renaming": {
                "FUN_08006d98": "extract_bits_from_pointer_08006d98",
                "param_1": "pointer_address",
                "param_2": "start_bit",
                "param_3": "end_bit",
                "param_4": "destination",
                "uVar1": "data",
                "get_data_from_pointer_08006b54": "get_data_from_pointer",
                "extract_bits_08006c04": "extract_bits"
            },
            "code": "void extract_bits_from_pointer_08006d98(char pointer_address, int start_bit, int end_bit, int destination) {\n  \n  int data = get_data_from_pointer(pointer_address);\n  extract_bits(data, start_bit, end_bit, destination);\n  return;\n}",
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": false,
            "current_name": "extract_bits_from_pointer_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_ptr_dat_08005a68",
                "PTR_DAT_08005a80": "ptr_dat"
            },
            "code": "void increment_ptr_dat_08005a68(void)\n{\n  int* PTR_DAT_08005a80 = (int*)PTR_DAT_08005a80;\n  *PTR_DAT_08005a80 = *PTR_DAT_08005a80 + 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "increment_ptr_dat_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0",
                "PTR_DAT_080079d8": "data_ptr",
                "PTR_DAT_080079dc": "flag_ptr"
            },
            "code": "void initialize_data_080079c0(void)\n{\n  // fill memory with zeros\n  fill_memory_with_value_0800b430(PTR_DAT_080079d8, 0, 0x18);\n  // set the first 4 bytes to 1\n  *(int *)PTR_DAT_080079dc = 1;\n  return;\n}",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_data_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "returnZero_0800b2e0"
            },
            "code": "int returnZero_0800b2e0(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "returnZero_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "uVar1": "intermediate_result1",
                "uVar2": "intermediate_result2",
                "FUNC_08008cdc": "square",
                "FUNC_08008eec": "add",
                "FUNC_08008cd8": "multiply",
                "FUNC_08009054": "divide",
                "0x40800000": "3.0",
                "2.0": "intermediate_result4",
                "3.0": "intermediate_result5"
            },
            "code": "float calculate_result_08002908(float x, float y, float z, float w) {\n  float intermediate_result1 = square(z);\n  intermediate_result1 = add(intermediate_result1, w);\n  float intermediate_result2 = square(x);\n  intermediate_result1 = add(intermediate_result1, intermediate_result2);\n  float intermediate_result3 = square(y);\n  intermediate_result1 = add(intermediate_result1, intermediate_result3);\n  float intermediate_result4 = 2.0;\n  intermediate_result3 = divide(intermediate_result3, intermediate_result4);\n  intermediate_result1 = add(intermediate_result1, intermediate_result3);\n  float intermediate_result5 = 3.0;\n  intermediate_result4 = divide(intermediate_result4, intermediate_result5);\n  intermediate_result2 = add(intermediate_result2, intermediate_result4);\n  float final_result = multiply(intermediate_result1, intermediate_result2);\n  return final_result;\n}",
            "called": [
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "FUN_08007c40": "set_param_to_global_08007c40",
                "param_1": "param",
                "_DAT_40000034": "global_ptr"
            },
            "code": "void set_param_to_global_08007c40(int param) {\n  _DAT_40000034 = param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_param_to_global_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "return_val",
                "DAT_080095a8": "DAT_080095a8",
                "DAT_080095ac": "DAT_080095ac",
                "DAT_080095b0": "DAT_080095b0",
                "DAT_080095b4": "DAT_080095b4",
                "is_end_of_input_08008b60": "is_end_of_input_08008b60",
                "CARRY4": "CARRY4",
                "CONCAT44": "CONCAT44",
                "FUNC_080082d4": "FUNC_080082d4"
            },
            "code": "longlong calculate_result_080094c0(uint input_1, uint input_2, undefined4 param_3, undefined4 param_4)\n{\n  int iVar1;\n  uint shift_amount;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong return_val;\n  \n  shift_amount = (input_2 << 1) >> 0x15;\n  mask = (uint)(0xffffffffffffffff >> (0x413 - shift_amount & 0xff));\n  if ((int)(shift_amount - 0x3ff) < 0x14) {\n    if ((int)(shift_amount - 0x3ff) < 0) {\n      result = FUNC_080082d4(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n      iVar1 = is_end_of_input_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n      return_val = CONCAT44(input_2, input_1);\n      if (iVar1 != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = DAT_080095b4;\n          }\n          return_val = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          return_val = 0;\n        }\n      }\n    }\n    else {\n      mask = DAT_080095b0 >> (shift_amount - 0x3ff & 0xff);\n      return_val = CONCAT44(input_2, input_1);\n      if ((input_2 & mask | input_1) != 0) {\n        result = FUNC_080082d4(input_1, input_2, DAT_080095a8, DAT_080095ac, param_4);\n        iVar1 = is_end_of_input_08008b60((int)result, (int)((ulonglong)result >> 0x20), 0, 0);\n        return_val = CONCAT44(input_2, input_1);\n        if (iVar1 != 0) {\n          if ((int)input_2 < 0) {\n            input_2 += (0x100000 >> (shift_amount - 0x3ff & 0xff));\n          }\n          else {\n            carry_flag = CARRY4((1 << (0x34 - shift_amount & 0xff)), input_1);\n            input_1 += (1 << (0x34 - shift_amount & 0xff));\n            if (carry_flag) {\n              input_2++;\n            }\n          }\n          return_val = (ulonglong)(input_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else {\n    return_val = CONCAT44(input_2, input_1);\n    if ((shift_amount - 0x3ff) == 0x14) {\n      return_val = FUNC_080082d4();\n    }\n  }\n  return return_val;\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_result_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "FUNC_08008eec"
            },
            "code": "\nuint FUNC_08008eec(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  int iVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  \n  uVar3 = param_1 >> 0x17 & 0xff;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar9 = param_4 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar3 == 0xff;\n  }\n  if (!bVar9) {\n    bVar9 = param_4 == 0xff;\n  }\n  if (bVar9) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    if (uVar3 == 0xff || param_4 == 0xff) {\n      bVar9 = param_1 == 0 || param_1 == 0x80000000;\n      uVar2 = param_2;\n      if (param_1 != 0 && param_1 != 0x80000000) {\n        bVar9 = param_2 == 0;\n        uVar2 = param_1;\n      }\n      if (!bVar9) {\n        bVar9 = param_2 == 0x80000000;\n      }\n      uVar8 = uVar2;\n      if (((bVar9) || ((uVar3 == 0xff && ((uVar2 & 0x7fffff) != 0)))) ||\n         ((param_4 == 0xff && (uVar8 = param_2, (param_2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      uVar2 = uVar2 ^ param_2;\n      goto LAB_0800903c;\n    }\n    bVar9 = (param_1 & 0x7fffffff) == 0;\n    if (!bVar9) {\n      bVar9 = (param_2 & 0x7fffffff) == 0;\n    }\n    if (bVar9) {\n      return (param_1 ^ param_2) & 0x80000000;\n    }\n    bVar9 = uVar3 == 0;\n    uVar2 = param_1 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_1 = param_1 << 1;\n        bVar9 = (param_1 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      uVar3 = uVar3 - 1;\n    }\n    param_1 = param_1 | uVar2;\n    bVar9 = param_4 == 0;\n    uVar2 = param_2 & 0x80000000;\n    while( true ) {\n      if (bVar9) {\n        param_2 = param_2 << 1;\n        bVar9 = (param_2 & 0x800000) == 0;\n      }\n      if (!bVar9) break;\n      param_4 = param_4 - 1;\n    }\n    param_2 = param_2 | uVar2;\n  }\n  iVar4 = uVar3 + param_4;\n  uVar8 = param_1 ^ param_2;\n  uVar3 = param_1 << 9;\n  bVar9 = uVar3 == 0;\n  if (!bVar9) {\n    param_2 = param_2 << 9;\n    bVar9 = param_2 == 0;\n  }\n  if (bVar9) {\n    if (uVar3 == 0) {\n      param_2 = param_2 << 9;\n    }\n    uVar2 = uVar8 & 0x80000000 | param_1 & 0x7fffff | param_2 >> 9;\n    bVar10 = SBORROW4(iVar4,0x7f);\n    iVar5 = iVar4 + -0x7f;\n    bVar9 = iVar5 == 0;\n    iVar7 = iVar5;\n    if (!bVar9 && 0x7e < iVar4) {\n      bVar10 = SBORROW4(0xff,iVar5);\n      iVar7 = 0xff - iVar5;\n      bVar9 = iVar5 == 0xff;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      uVar2 = uVar2 | iVar5 * 0x800000;\n    }\n    if (!bVar9 && iVar7 < 0 == bVar10) {\n      return uVar2;\n    }\n    uVar2 = uVar2 | 0x800000;\n    uVar6 = 0;\n    bVar10 = SBORROW4(iVar5,1);\n    uVar8 = iVar4 - 0x80;\n    bVar9 = uVar8 == 0;\n    uVar3 = uVar8;\n  }\n  else {\n    lVar1 = (ulonglong)(uVar3 >> 5 | 0x8000000) * (ulonglong)(param_2 >> 5 | 0x8000000);\n    uVar6 = (uint)lVar1;\n    uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n    bVar9 = uVar2 < 0x800000;\n    if (bVar9) {\n      uVar2 = uVar2 << 1;\n    }\n    if (bVar9) {\n      uVar2 = uVar2 | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    uVar2 = uVar8 & 0x80000000 | uVar2;\n    uVar8 = (iVar4 + -0x7f) - (uint)bVar9;\n    bVar10 = SBORROW4(uVar8,0xfd);\n    bVar9 = uVar8 == 0xfd;\n    uVar3 = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      uVar2 = uVar2 + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        uVar2 = uVar2 & 0xfffffffe;\n      }\n      return uVar2;\n    }\n  }\n  if (bVar9 || (int)uVar3 < 0 != bVar10) {\n    bVar9 = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || bVar9 != SCARRY4(uVar8,0x19)) {\n      uVar2 = uVar2 & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && bVar9 == SCARRY4(uVar8,0x19)) {\n      uVar3 = (uVar2 << 1) >> (-uVar8 & 0xff);\n      uVar8 = uVar2 << (uVar8 + 0x20 & 0xff);\n      uVar3 = ((uint)((uVar2 & 0x80000000) != 0) << 0x1f | uVar3 >> 1) + (uint)((byte)uVar3 & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        uVar3 = uVar3 & ~(uVar8 >> 0x1f);\n      }\n      return uVar3;\n    }\n    return uVar2;\n  }\nLAB_0800903c:\n  return uVar2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008eec",
            "calling": [
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_08003826",
                "FUN_080005b4",
                "FUN_08002908",
                "FUN_080028bc",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "FUNC_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "FUN_08006b54": "get_data_from_pointer_08006b54",
                "param_1": "input_byte",
                "bVar1": "output_byte",
                "DAT_08006b98": "data_pointer_1",
                "DAT_08006b9c": "data_pointer_2"
            },
            "code": "byte get_data_from_pointer_08006b54(byte input_byte)\\n{\\n  byte output_byte;\\n  if ((char)input_byte < \"\\0\") {\\n    output_byte = *(byte *)((input_byte & 0xf) + DAT_08006b98 + 0x14);\\n  }\\n  else {\\n    output_byte = *(byte *)((char)input_byte + DAT_08006b9c + 0x300);\\n  }\\n  return output_byte >> 4;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "FUN_08007e84": "get_second_byte_from_dat_08007ea0_08007e84",
                "DAT_08007ea0": "dat_08007ea0",
                "PTR_DAT_08007ea0": "ptr_dat_08007ea0",
                "PTR_DAT_08007ea4": "ptr_dat_08007ea4"
            },
            "code": "uint get_second_byte_from_dat_08007ea0_08007e84(void)\n{\n  uint* PTR_DAT_08007ea4 = (uint*) (DAT_08007ea0 + 4);\n  uint second_byte = *PTR_DAT_08007ea4 & 0xff;\n  return second_byte;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "get_second_byte_from_dat_08007ea0_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "FUN_080057e4": "clear_bits_and_check_condition_080057e4",
                "clear_bits_08007bc2": "clear_bits",
                "PTR_DAT_0800580c": "PTR_DATA_0800580c",
                "PTR_DAT_08005810": "PTR_DATA_08005810",
                "do_nothing_0800530c": "do_nothing"
            },
            "code": "void clear_bits_and_check_condition_080057e4(void)\n{\n  clear_bits();\n  if ((PTR_DAT_0800580c[0x3c] != -1) || ((PTR_DAT_08005810[2] & 0x20) != 0)) {\n    do_nothing();\n  }\n  return;\n}",
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "FUN_080025e8",
                "FUN_080053a0",
                "FUN_08001d4c",
                "FUN_0800583c"
            ],
            "imported": false,
            "current_name": "clear_bits_and_check_condition_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "FUN_08006d8a": "get_bitmask_08006d8a",
                "uVar1": "bitmask"
            },
            "code": "unsigned int get_bitmask_08006d8a() {\n  unsigned int bitmask = get_bitmask_08006d8a_08006998();\n  return bitmask;\n}",
            "called": [
                "FUN_08006998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": false,
            "current_name": "get_bitmask_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "FUN_0800b2e8": "calculate_0800b2e8",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "count",
                "param_4": "param_4",
                "uVar1": "shifted_num2",
                "iVar2": "sum",
                "uVar3": "temp",
                "uVar4": "combined",
                "DAT_0800b3c8": "DAT_0800b3c8",
                "DAT_0800b3cc": "DAT_0800b3cc",
                "FUNC_08008640": "FUNC_08008640",
                "DAT_0800b3d8": "DAT_0800b3d8",
                "DAT_0800b3d0": "DAT_0800b3d0",
                "DAT_0800b3b8": "DAT_0800b3b8",
                "DAT_0800b3bc": "DAT_0800b3bc",
                "DAT_0800b3d4": "DAT_0800b3d4",
                "DAT_0800b3c0": "DAT_0800b3c0",
                "DAT_0800b3c4": "DAT_0800b3c4",
                "LAB_0800b34a": "LAB_0800b34a",
                "SCARRY4": "SCARRY4"
            },
            "code": "uint calculate_0800b2e8(uint num1, uint num2, int count, undefined4 param_4)\n{\n  uint result;\n  int sum;\n  uint temp;\n  ulonglong combined;\n  combined = CONCAT44(num2, num1);\n  uint shifted_num2 = (num2 << 1) >> 0x15;\n  if (shifted_num2 == 0)\n  {\n    if ((num1 | num2 & 0x7fffffff) == 0)\n    {\n      return num1;\n    }\n    temp = FUNC_08008640(num1, num2, 0, DAT_0800b3c8);\n    if (count < DAT_0800b3cc)\n    {\n      sum = ((uint)((int)(combined >> 0x20) << 1) >> 0x15) - 0x36;\n    }\n  }\n  else if (shifted_num2 == 0x7ff)\n  {\n    result = FUNC_080082d4(num1, num2, num1, num2, param_4);\n    return result;\n  }\n  else\n  {\n    sum = shifted_num2 + count;\n    if (sum < 0x7ff)\n    {\n      if (0 < sum)\n      {\n        return (uint)combined;\n      }\n      if (sum + 0x35 < 0 == SCARRY4(sum, 0x35))\n      {\n        temp = FUNC_08008640((uint)combined, (combined >> 0x20) & 0x800fffff | (sum + 0x36) * 0x100000, 0, DAT_0800b3d8);\n        return temp;\n      }\n      if (count < 0xc351)\n      {\n        combined = combined & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\n        temp = FUNC_08008640((int)combined, (int)(combined >> 0x20), DAT_0800b3b8, DAT_0800b3bc);\n        return temp;\n      }\n    }\n    result = FUNC_08008640(DAT_0800b3d4, (combined >> 0x20) & 0x80000000 | 0x7e37e43c, DAT_0800b3c0, DAT_0800b3c4);\n    return result;\n  }\n}",
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "calculate_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "number",
                "set_bit_in_array_080073d4": "set_bit_in_array"
            },
            "code": "void set_bit_if_odd_08007520(uint number)\n{\n  if ((number & 1) != 0) {\n    set_bit_in_array(0x3e);\n  }\n  return;\n}",
            "called": [
                "FUN_080073d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "set_bit_if_odd_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "get_bits_from_indices_08007884",
                "iVar1": "bit_54",
                "iVar2": "bit_55",
                "iVar3": "bit_56",
                "iVar4": "bit_57",
                "iVar5": "bit_15",
                "uVar6": "bit_0",
                "get_bit_at_index_08007854": "get_bit_at_index"
            },
            "code": "uint get_bits_from_indices_08007884(void)\n{\n  int bit_54 = get_bit_at_index_08007854(0x36);\n  int bit_55 = get_bit_at_index_08007854(0x37);\n  int bit_56 = get_bit_at_index_08007854(0x38);\n  int bit_57 = get_bit_at_index_08007854(0x39);\n  int bit_15 = get_bit_at_index_08007854(0xf);\n  uint bit_0 = get_bit_at_index_08007854(0);\n  return bit_0 | bit_54 << 4 | bit_55 << 3 | bit_56 << 2 | bit_57 << 1 | bit_15 << 7;\n}",
            "called": [
                "FUN_08007854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "get_bits_from_indices_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "FUN_08004250": "print_settings_08004250",
                "PTR_DAT_08004470": "setting_names[0]",
                "PTR_DAT_08004474": "setting_values",
                "PTR_s___x__step_mm___1__08004478": "setting_names[1]",
                "PTR_s___y__step_mm___2__0800447c": "setting_names[2]",
                "PTR_DAT_08004474[0xd]": "setting_values[13]",
                "PTR_s___step_pulse__usec___4__08004484": "setting_names[4]",
                "PTR_s___default_feed__mm_min___5__08004488": "setting_names[5]",
                "PTR_DAT_08004474 + 0x18": "setting_values[6]",
                "PTR_s___step_port_invert_mask__int__08004490": "setting_names[7]",
                "PTR_DAT_08004474[0x3c]": "setting_values[60]",
                "PTR_s___acceleration__mm_sec_2___9__080044a0": "setting_names[9]",
                "PTR_s___junction_deviation__mm___10__080044a4": "setting_names[10]",
                "PTR_DAT_08004474[0x3e]": "setting_values[62]",
                "PTR_s___n_arc_correction__int___12__080044ac": "setting_names[11]",
                "PTR_s___n_decimals__int___13__080044b0": "setting_names[12]",
                "PTR_DAT_08004474[0x28]": "setting_values[61]",
                "PTR_s___report_inches__bool___14__080044b4": "setting_names[13]",
                "PTR_s___auto_start__bool___15__080044b8": "setting_names[14]",
                "PTR_s___invert_step_enable__bool___16__080044bc": "setting_names[15]",
                "PTR_s___hard_limits__bool___17__080044c0": "setting_names[16]",
                "PTR_s___homing_cycle__bool___18__080044c4": "setting_names[17]",
                "PTR_DAT_08004474 + 0x2a": "setting_values[17]",
                "PTR_s___homing_dir_invert_mask__int__080044c8": "setting_names[18]",
                "PTR_s___homing_feed__mm_min___20__080044d0": "setting_names[19]",
                "PTR_s___homing_seek__mm_min___21__080044d4": "setting_names[20]",
                "PTR_DAT_08004474 + 0x34": "setting_values[21]",
                "PTR_s___homing_debounce__msec___22__080044d8": "setting_names[22]",
                "PTR_s___homing_pull_off__mm___23__080044dc": "setting_names[23]",
                "PTR_s___dir_port_invert_mask__int__080044e0": "setting_names[24]",
                "PTR_DAT_080044e4": "setting_names[25]"
            },
            "code": "void print_settings_08004250(void)\n{\n  wait_for_characters_080036c6(PTR_DAT_08004470);\n  print_float_08003826(*(float*)PTR_DAT_08004474[0]);\n  wait_for_characters_080036c6(PTR_s___x__step_mm___1__08004478);\n  print_float_08003826(*(float*)PTR_DAT_08004474[1]);\n  wait_for_characters_080036c6(PTR_s___y__step_mm___2__0800447c);\n  print_float_08003826(*(float*)PTR_DAT_08004474[2]);\n  wait_for_characters_080036c6(setting_names[3]);\n  process_input_080037fc(*PTR_DAT_08004474[0xd]);\n  wait_for_characters_080036c6(PTR_s___step_pulse__usec___4__08004484);\n  print_float_08003826(*(float*)PTR_DAT_08004474[4]);\n  wait_for_characters_080036c6(PTR_s___default_feed__mm_min___5__08004488);\n  print_float_08003826(*(float*)PTR_DAT_08004474[5]);\n  wait_for_characters_080036c6(setting_names[6]);\n  process_input_080037fc(*(uint16_t*)PTR_DAT_08004474 + 0x18);\n  wait_for_characters_080036c6(PTR_s___step_port_invert_mask__int__08004490);\n  print_binary_0800375c(*(uint16_t*)PTR_DAT_08004474 + 0x18);\n  wait_for_characters_080036c6(setting_names[8]);\n  process_input_080037fc(PTR_DAT_08004474[0x3c]);\n  wait_for_characters_080036c6(PTR_s___acceleration__mm_sec_2___9__080044a0);\n  print_float_08003826(*(float*)PTR_DAT_08004474[9]);\n  wait_for_characters_080036c6(PTR_s___junction_deviation__mm___10__080044a4);\n  print_float_08003826(*(float*)PTR_DAT_08004474[10]);\n  wait_for_characters_080036c6(PTR_s___n_arc_correction__int___12__080044ac);\n  process_input_080037fc(PTR_DAT_08004474[0x3e]);\n  wait_for_characters_080036c6(PTR_s___n_decimals__int___13__080044b0);\n  process_input_080037fc(PTR_DAT_08004474[0x28] & 1);\n  wait_for_characters_080036c6(PTR_s___report_inches__bool___14__080044b4);\n  process_input_080037fc((PTR_DAT_08004474[0x28] & 2) != 0);\n  wait_for_characters_080036c6(PTR_s___auto_start__bool___15__080044b8);\n  process_input_080037fc((PTR_DAT_08004474[0x28] & 4) != 0);\n  wait_for_characters_080036c6(PTR_s___invert_step_enable__bool___16__080044bc);\n  process_input_080037fc((PTR_DAT_08004474[0x28] & 8) != 0);\n  wait_for_characters_080036c6(PTR_s___hard_limits__bool___17__080044c0);\n  process_input_080037fc((PTR_DAT_08004474[0x28] & 0x10) != 0);\n  wait_for_characters_080036c6(PTR_s___homing_cycle__bool___18__080044c4);\n  process_input_080037fc(*(uint16_t*)PTR_DAT_08004474 + 0x2a);\n  wait_for_characters_080036c6(PTR_s___homing_dir_invert_mask__int__080044c8);\n  print_binary_0800375c(*(uint16_t*)PTR_DAT_08004474 + 0x2a);\n  wait_for_characters_080036c6(PTR_s___homing_feed__mm_min___20__080044d0);\n  print_float_08003826(*(float*)PTR_DAT_08004474[19]);\n  wait_for_characters_080036c6(PTR_s___homing_seek__mm_min___21__080044d4);\n  print_float_08003826(*(float*)PTR_DAT_08004474[20]);\n  wait_for_characters_080036c6(setting_names[21]);\n  process_input_080037fc(*(uint16_t*)PTR_DAT_08004474 + 0x34);\n  wait_for_characters_080036c6(PTR_s___homing_debounce__msec___22__080044d8);\n  print_float_08003826(*(float*)PTR_DAT_08004474[22]);\n  wait_for_characters_080036c6(PTR_s___homing_pull_off__mm___23__080044dc);\n  process_input_080037fc(*(uint16_t*)PTR_DAT_08004474[23]);\n  wait_for_characters_080036c6(PTR_s___dir_port_invert_mask__int__080044e0);\n  print_binary_0800375c(*(uint16_t*)PTR_DAT_08004474[24]);\n  wait_for_characters_080036c6(PTR_DAT_080044e4);\n  return;\n}\n",
            "called": [
                "FUN_0800375c",
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08009054",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_settings_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "set_bit_in_array_08006dc4",
                "param_1": "character",
                "set_bit_in_array_08006a58": "set_bit_in_array_helper"
            },
            "code": "void set_bit_in_array_08006dc4(char character) {\n    set_bit_in_array_08006dc4_helper((int)character);\n}\n",
            "called": [
                "FUN_08006a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_bit_in_short_array_08007402",
                "param_1": "bit_position",
                "PTR_DAT_08007418": "short_array",
                "DAT_0800741c": "bit_mask",
                "local_8": "array_index",
                "local_c": "array_offset"
            },
            "code": "void set_bit_in_short_array_08007402(uint bit_position)\n{\n    uint array_index = bit_position >> 4;\n    uint array_offset = (array_index * 0x400) + 0x18;\n    short* PTR_DAT_08007418 = (short*)(array_offset + 0x40020000);\n    uint DAT_0800741c = 1 << (bit_position & 0xF);\n    *PTR_DAT_08007418 |= DAT_0800741c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_bit_in_short_array_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_and_limit_08002870",
                "param_1": "value",
                "local_9": "result"
            },
            "code": "char increment_and_limit_08002870(char value) {\n  char result;\n  result = value + 1;\n  if (result == 18) {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "FUN_08002ef0",
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08003004",
                "FUN_08002f40"
            ],
            "imported": false,
            "current_name": "increment_and_limit_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "FUN_08000210": "do_nothing_twice_08000210_08000210",
                "do_nothing_080001ec": "do_nothing_once_080001ec",
                "do_nothing_080001d4": "do_nothing_once_080001d4"
            },
            "code": "void do_nothing_twice_08000210_08000210(void)\n{\n  do_nothing_080001ec();\n  do_nothing_080001d4();\n  return;\n}",
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_twice_08000210_08000210"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "check_and_set_flags_08005900",
                "param_1": "input_char",
                "PTR_DAT_08005978": "flags",
                "set_flag_and_check_condition_080025e8": "set_condition_flag"
            },
            "code": "int check_and_set_flags_08005900(unsigned char input_char) {\n    if (input_char == '~') {\n        PTR_DAT_08005978[2] |= 2;\n        return 1;\n    }\n    if (input_char < 0x7f) {\n        if (input_char == '?') {\n            PTR_DAT_08005978[2] |= 1;\n            return 1;\n        }\n        if (input_char < 0x40) {\n            if (input_char == 0x18) {\n                set_condition_flag();\n                return 1;\n            }\n            if (input_char == '!') {\n                PTR_DAT_08005978[2] |= 8;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "FUN_08002638": "parse_integer_from_string_08002638",
                "param_1": "start",
                "param_2": "string",
                "param_3": "result",
                "bVar1": "current_digit",
                "bVar2": "is_negative",
                "bVar3": "is_decimal",
                "iVar4": "is_concatenated",
                "pcVar5": "current_number",
                "pcVar6": "current_char",
                "uVar7": "return_value",
                "uVar8": "calculated_value",
                "local_1c": "hash",
                "local_16": "decimal_places",
                "local_15": "unused",
                "local_14": "integer_value",
                "local_d": "first_char",
                "local_c": "current_number",
                "DAT_08002800": "float_constant_1",
                "DAT_08002804": "float_constant_2",
                "DAT_08002808": "float_constant_3",
                "DAT_0800280c": "float_constant_4",
                "DAT_08002810": "hash_constant"
            },
            "code": "uint32_t parse_integer_from_string_08002638(int start, char* string, uint32_t* result) {\n    char* current_char = string + start;\n    char first_char = *current_char;\n    bool is_negative = false;\n    char* current_number = current_char + 1;\n    if (first_char == '-') {\n        is_negative = true;\n        first_char = *current_number;\n        current_number = current_char + 2;\n    }\n    else if (first_char == '+') {\n        first_char = *current_number;\n        current_number = current_char + 2;\n    }\n    uint32_t integer_value = 0;\n    char decimal_places = 0;\n    char current_digit = first_char;\n    bool is_decimal = false;\n    while (true) {\n        if (current_digit >= '0' && current_digit <= '9') {\n            decimal_places++;\n            if (decimal_places < 9) {\n                if (is_decimal) {\n                    decimal_places--;\n                }\n                integer_value = (uint32_t)(current_digit - '0') + integer_value * 10;\n            }\n            else if (!is_decimal) {\n                decimal_places++;\n            }\n        }\n        else {\n            if (current_digit != 0xfe || is_decimal) {\n                uint32_t hash = calculate_hash_08008e3c(integer_value);\n                bool is_concatenated = is_string_concatenated_08009214(hash, 0);\n                if (is_concatenated == 0) {\n                    for (; decimal_places < -1; decimal_places += 2) {\n                        uint64_t calculated_value = calculate_08008590(hash);\n                        calculated_value = FUNC_08008640((int)calculated_value, (int)(calculated_value >> 0x20), PTR_DAT_08002800, PTR_DAT_08002804);\n                        hash = CalculateFloat_08008c30((int)calculated_value, (int)(calculated_value >> 0x20));\n                    }\n                    if (decimal_places < 0) {\n                        uint64_t calculated_value = calculate_08008590(hash);\n                        calculated_value = FUNC_08008640((int)calculated_value, (int)(calculated_value >> 0x20), PTR_DAT_08002808, PTR_DAT_0800280c);\n                        hash = CalculateFloat_08008c30((int)calculated_value, (int)(calculated_value >> 0x20));\n                    }\n                    else {\n                        for (; decimal_places > 0; decimal_places--) {\n                            hash = FUNC_08008eec(hash, PTR_DAT_08002810);\n                        }\n                    }\n                }\n                if (is_negative) {\n                    *result = hash ^ 0x80000000;\n                }\n                else {\n                    *result = hash;\n                }\n                *string = (char*)current_number - (char*)start - 1;\n                return 1;\n            }\n            is_decimal = true;\n        }\n        current_digit = *current_number;\n        current_number++;\n    }\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08009214",
                "FUN_08008e3c",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_08002638"
        },
        "FUN_080051b4": {
            "renaming": {
                "FUN_080051b4": "validate_input_and_initialize_values_080051b4",
                "iVar1": "input_validation_result",
                "auStack_18": "buffer",
                "local_9": "index",
                "validate_input_and_initialize_values_08004dd2": "validate_input_and_initialize_values_08004dd2",
                "printErrorMessage_08004030": "printErrorMessage",
                "initialize_values_08004c48": "initialize_values_08004c48",
                "print_settings_08004250": "print_settings_08004250",
                "validate_and_calculate_checksum_08004d7c": "validate_and_calculate_checksum"
            },
            "code": "void validate_input_and_initialize_values_080051b4() {\n  int input_validation_result;\n  undefined buffer[15];\n  byte index;\n  input_validation_result = validate_input_and_initialize_values_080051b4_08004dd2();\n  if (input_validation_result == 0) {\n    printErrorMessage_08004030(10);\n    initialize_values_08004c48(1);\n    print_settings_08004250();\n  }\n  for (index = 0; index < 8; index++) {\n    input_validation_result = validate_and_calculate_checksum(index, buffer);\n    if (input_validation_result == 0) {\n      printErrorMessage_08004030(10);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004250",
                "FUN_08004c48",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_08004dd2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "validate_input_and_initialize_values_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "FUN_080098d0": "check_input_and_return_result_080098d0",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "input_char",
                "uVar2": "result",
                "iVar3": "is_end_of_string",
                "puVar4": "pointer_to_pointer",
                "piVar5": "pointer_to_pointer",
                "local_50": "local_result",
                "local_4c": "local_pointer",
                "local_48": "local_input1",
                "uStack_44": "local_input2",
                "local_40": "local_input1_2",
                "uStack_3c": "local_input2_2",
                "local_38": "local_function_result"
            },
            "code": "undefined4 check_input_and_return_result_080098d0(undefined4 input1, undefined4 input2)\n{\n  char input_char;\n  undefined4 result = calculate_result();\n  int is_valid = is_valid_input(input1, input2, input1, input2);\n  if (is_valid != 0)\n  {\n    return result;\n  }\n  int is_end_of_string = is_end_of_string(input1, input2, 0, 0);\n  if (is_end_of_string == 0)\n  {\n    return result;\n  }\n  undefined4 local_50 = 1;\n  undefined *local_4c = PTR_DAT_0800998c;\n  undefined4 local_48 = input1;\n  undefined4 uStack_44 = input2;\n  undefined4 local_40 = input1;\n  undefined4 uStack_3c = input2;\n  if (input_char == '\\0')\n  {\n    undefined8 local_38 = 0;\n    int return_value = return_zero(&local_50);\n    if (return_value != 0)\n    {\n      goto joined_r0x0800997a;\n    }\n  }\n  else\n  {\n    undefined8 local_38 = get_function_result(0, 0, 0, 0);\n    if (input_char != '\\x02')\n    {\n      goto LAB_0800996c;\n    }\n  }\n  undefined4 *pointer_to_pointer = get_pointer_to_pointer_value();\n  *pointer_to_pointer = 0x21;\njoined_r0x0800997a:\n  if (is_valid != 0)\n  {\n    int *pointer_to_pointer = get_pointer_to_pointer_value();\n    *pointer_to_pointer = is_valid;\n  }\n  return (undefined4)local_38;\n}",
            "called": [
                "FUN_08008b74",
                "FUN_0800a1bc",
                "FUN_08008b24",
                "FUN_0800b2e0",
                "FUN_08008894",
                "FUN_0800b3dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08002978"
            ],
            "imported": false,
            "current_name": "check_input_and_return_result_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "FUN_08005c30": "is_param_less_than_one_million_08005c30",
                "param_1": "param",
                "bVar1": "is_less_than"
            },
            "code": "bool is_param_less_than_one_million_08005c30(int param) {\n  bool is_less_than = param < 1000000;\n  if (is_less_than) {\n    DAT_08005c70[1] = param - 1;\n    set_data_08005bdc(0xffffffff, 0xf);\n    DAT_08005c70[2] = 0;\n    *DAT_08005c70 = 7;\n  }\n  return !is_less_than;\n}",
            "called": [
                "FUN_08005bdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "FUN_0800618c"
            ],
            "imported": false,
            "current_name": "is_param_less_than_one_million_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "FUN_0800056c": "calculate_result_if_possible_0800056c",
                "param_1": "input_value",
                "uVar1": "intermediate_value",
                "calculate_08008590": "calculate_intermediate_value",
                "FUNC_08008640": "process_intermediate_value",
                "DAT_080005a8": "constant_value_1",
                "DAT_080005ac": "constant_value_2",
                "CalculateFloat_08008c30": "process_final_value"
            },
            "code": "float calculate_result_if_possible_0800056c(float input_value) {\\n  if (PTR_DAT_080005b0[3] != \"\\0\") {\\n    float intermediate_value = calculate_08008590(input_value);\\n    float processed_value = FUNC_08008640((int)intermediate_value,(int)((ulonglong)intermediate_value >> 0x20),DAT_080005a8,DAT_080005ac);\\n    input_value = CalculateFloat_08008c30((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\\n  }\\n  return input_value;\\n}",
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_result_if_possible_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "FUN_08002f24": "initialize_values_08002f24",
                "copy_and_limit_value_08002ef0": "copy_and_limit_value",
                "fill_memory_with_value_0800b430": "fill_memory_with_value",
                "PTR_DAT_08002f3c": "ptr"
            },
            "code": "void initialize_values_08002f24();\nvoid fill_memory_with_value(char* PTR_DAT_08002f3c, int value, int size);\n\nvoid initialize_values_08002f24()\n{\n  initialize_values_08002f24();\n  char* PTR_DAT_08002f3c = PTR_DAT_08002f3c;\n  int value = 0;\n  int size = 0x1c;\n  fill_memory_with_value(PTR_DAT_08002f3c, value, size);\n  return;\n}",
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_values_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_and_set_value_0800981c",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "cVar1": "c",
                "puVar2": "pointer",
                "iVar3": "result",
                "puVar4": "p1",
                "piVar5": "p2",
                "local_50": "var1",
                "puStack_4c": "var2",
                "local_48": "var3",
                "uStack_44": "var4",
                "local_40": "var5",
                "uStack_3c": "w",
                "local_38": "var6",
                "uStack_34": "var2"
            },
            "code": "undefined8 calculate_hypotenuse_and_set_value_0800981c(undefined4 x, undefined4 y, undefined4 z, undefined4 w)\n{\n  char c;\n  int result;\n  undefined *pointer;\n  undefined8 returnValue;\n  undefined4 *p1;\n  int *p2;\n  undefined4 var1;\n  undefined *var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  int var6;\n\n  pointer = PTR_DAT_080098cc;\n  returnValue = FUNC_08009b24();\n  if (*pointer == -1) {\n    return returnValue;\n  }\n  var6 = set_msb_and_shift_right_0800b2d4();\n  if (var6 != 0) {\n    return returnValue;\n  }\n  result = set_msb_and_shift_right_0800b2d4(x, y);\n  if (result == 0) {\n    return returnValue;\n  }\n  result = set_msb_and_shift_right_0800b2d4(z, w);\n  if (result == 0) {\n    return returnValue;\n  }\n  c = *pointer;\n  var1 = 3;\n  var2 = PTR_s_hypot_080098c0;\n  var3 = x;\n  var4 = y;\n  var5 = z;\n  if (c == '\\0') {\n    var5 = 0xe0000000;\n    var2 = DAT_080098c8;\n  } else {\n    var5 = 0;\n    var2 = DAT_080098c4;\n    if (c == '\\x02') {\n      goto LAB_080098aa;\n    }\n  }\n  p1 = (undefined4 *)get_value_from_pointer_to_pointer_0800b3dc();\n  *p1 = 0x22;\nLAB_080098aa:\n  result = returnZero_0800b2e0(&var1);\n  if (result != 0) {\n    goto LAB_08009896;\n  }\n  returnValue = CONCAT44(var5, var4);\n  if (var6 != 0) {\n    p2 = (int *)get_value_from_pointer_to_pointer_0800b3dc();\n    returnValue = CONCAT44(var5, var4);\n    *p2 = var6;\n  }\n  return returnValue;\n}",
            "called": [
                "FUN_0800b2d4",
                "FUN_0800b2e0",
                "FUN_0800b3dc",
                "FUN_08009b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "FUN_080005b4",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_hypotenuse_and_set_value_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "FUN_080059b4": "set_flags_and_register_080059b4",
                "is_parameter_valid_08006d72": "check_parameter_validity",
                "update_register_with_param_08006ce0": "update_register_with_value",
                "do_nothing_08005a50": "do_nothing",
                "DAT_080059f4": "data_ptr"
            },
            "code": "void set_flags_and_register_080059b4(void)\n{\n  unsigned int *DAT_080059f4 = DAT_080059f4;\n  *DAT_080059f4 |= 0x200;\n  *DAT_080059f4 |= 0x400;\n  *DAT_080059f4 |= 0x100;\n  check_parameter_validity(16000);\n  update_register_with_value(3);\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005a50",
                "FUN_08006d72",
                "FUN_08006ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_register_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "start_bit",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "num_bits_to_extract",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void extract_bits_08006c04(uint input,uint start_bit,uint *output1,uint *output2)\n{\n  uint num_bits_to_extract;\n  uint num_bits_to_remain;\n  start_bit = start_bit & 7;\n  num_bits_to_extract = 7 - start_bit;\n  if (num_bits_to_extract > 3) {\n    num_bits_to_extract = 4;\n  }\n  if (start_bit + 4 < 7) {\n    num_bits_to_remain = 0;\n  }\n  else {\n    num_bits_to_remain = start_bit - 3;\n  }\n  *output1 = (1 << (num_bits_to_extract & 0xff)) - 1U & input >> (num_bits_to_remain & 0xff);\n  *output2 = (1 << (num_bits_to_remain & 0xff)) - 1U & input;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "extract_bits_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "calculate_values_for_data_items_08002e08",
                "*PTR_DAT_08002ed0": "DATA_ITEM_START_INDEX_PTR",
                "*PTR_DAT_08002ed8": "DATA_ITEM_END_INDEX_PTR",
                "PTR_DAT_08002ed4": "DATA_ITEM_PTR",
                "FUNC_08009054": "calculate_values_08009054",
                "calculate_values_08002c18": "calculate_values_08002c18",
                "local_11": "current_data_item_index",
                "local_18": "previous_data_item",
                "puVar3": "current_data_item",
                "uVar1": "first_parameter",
                "uVar2": "second_parameter"
            },
            "code": "void calculate_values_for_data_items_08002e08(void)\\n{\\n  undefined4 first_parameter;\\n  undefined4 second_parameter;\\n  undefined *current_data_item;\\n  undefined *previous_data_item;\\n  byte current_data_item_index;\\n  byte end_data_item_index;\\n  \\n  current_data_item_index = **PTR_DAT_08002ed0;\\n  previous_data_item = (undefined *)0x0;\\n  end_data_item_index = **PTR_DAT_08002ed8;\\n  while (current_data_item_index != end_data_item_index) {\\n    current_data_item = PTR_DAT_08002ed4 + (uint)current_data_item_index * 0x40;\\n    if ((previous_data_item != (undefined *)0x0) && ((previous_data_item[0x24] != \"\\0\" || (current_data_item[0x24] != \"\\0\")))) {\\n      first_parameter = FUNC_08009054(*(undefined4 *)(previous_data_item + 0x18),*(undefined4 *)(previous_data_item + 0x14));\\n      second_parameter = FUNC_08009054(*(undefined4 *)(current_data_item + 0x18),*(undefined4 *)(previous_data_item + 0x14));\\n      calculate_values_08002c18(previous_data_item,first_parameter,second_parameter);\\n      previous_data_item[0x24] = 0;\\n    }\\n    current_data_item_index = increment_and_limit_08002870(current_data_item_index);\\n    previous_data_item = current_data_item;\\n  }\\n  first_parameter = FUNC_08009054(*(undefined4 *)(previous_data_item + 0x18),*(undefined4 *)(previous_data_item + 0x14));\\n  second_parameter = FUNC_08009054(0,*(undefined4 *)(previous_data_item + 0x14));\\n  calculate_values_08002c18(previous_data_item,first_parameter,second_parameter);\\n  previous_data_item[0x24] = 0;\\n  return;\\n}",
            "called": [
                "FUN_08009054",
                "FUN_08002870",
                "FUN_08002c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "calculate_values_for_data_items_08002e08"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "calculate_shift_amount_08006680",
                "uVar1": "function_result",
                "uVar2": "leading_zeroes_count",
                "FUNC_08006628": "get_function_result",
                "count_leading_zeroes": "count_leading_zeroes",
                "PTR_DAT_080066c8": "PTR_DAT_080066c8",
                "DAT_080066c4": "DAT_080066c4"
            },
            "code": "unsigned int calculate_shift_amount_08006680(void)\n{\n  unsigned int function_result;\n  unsigned int leading_zeroes_count;\n  \n  function_result = get_function_result();\n  leading_zeroes_count = count_leading_zeroes(0x380000);\n  return function_result >> PTR_DAT_080066c8[(*(unsigned int *)(DAT_080066c4 + 8) & 0x1c00) >> (leading_zeroes_count & 0xff)];\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "store_value_08000340",
                "param_1": "index",
                "param_2": "value",
                "PTR_DAT_0800036c": "memory_initialized",
                "initialize_memory_080002f0": "initialize_memory",
                "PTR_DAT_08000370": "memory_array"
            },
            "code": "void store_value_08000340(uint index, undefined value)\n{\n  if (*PTR_DAT_0800036c == 0)\n  {\n    initialize_memory();\n  }\n  PTR_DAT_08000370[index & 0x3ff] = value;\n  return;\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "store_value_08000340"
        },
        "thunk_FUN_08009990": {
            "renaming": {
                "thunk_FUN_08009990": "calculate_result_thunk_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "temp_result2",
                "uVar3": "temp_result",
                "uVar4": "result",
                "uVar5": "input2_abs",
                "uVar6": "input4_abs"
            },
            "code": "uint calculate_result_thunk_08009990(uint input1, uint input2, uint input3, uint input4) {\n  int difference;\n  uint result;\n  uint input4_abs;\n  uint input2_abs;\n  uint input1_abs;\n  uint input3_abs;\n  uint temp_result;\n  uint temp_result2;\n\n  input4_abs = input4 & 0x7fffffff;\n  input2_abs = input2 & 0x7fffffff;\n  input1_abs = input1 & 0x7fffffff;\n  input3_abs = input3 & 0x7fffffff;\n  if (DAT_08009b18 < (input4_abs | (-input3 | input3) >> 0x1f) || DAT_08009b18 < (input2_abs | (-input1 | input1) >> 0x1f)) {\n    result = FUNC_080082d4(input3, input4, input1, input2);\n  }\n  else {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      result = FUNC_0800af78();\n      return result;\n    }\n    difference = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((input2_abs | input1_abs) == 0) {\n      result = DAT_08009af0;\n      if (difference != 2) {\n        result = input1_abs;\n        if (difference == 3) {\n          result = DAT_08009af8;\n        }\n      }\n    }\n    else {\n      if ((input4_abs | input3_abs) != 0) {\n        if (input4_abs == DAT_08009b18) {\n          difference = difference - 1;\n          if (input2_abs == input4_abs) {\n            if (2 < difference) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + difference * 8);\n          }\n          if (difference < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + difference * 8);\n          }\n          return 0;\n        }\n        if (input2_abs != DAT_08009b18) {\n          difference = (int)(input2_abs - input4_abs) >> 0x14;\n          if ((int)(input2_abs - input4_abs) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              temp_result = 0;\n            }\n            else {\n              FUNC_08008894(input1, input2, input3, input4, input4);\n              do_nothing_0800b2cc();\n              temp_result = FUNC_0800af78();\n            }\n          }\n          temp_result2 = (uint)(temp_result >> 0x20);\n          result = (uint)temp_result;\n          if (difference == 1) {\n            return result;\n          }\n          if (difference == 2) {\n            temp_result = FUNC_080082d0(result, temp_result2, DAT_08009ae8, DAT_08009aec);\n            result = FUNC_080082d0(DAT_08009af0, DAT_08009af4, (int)temp_result, (int)(temp_result >> 0x20));\n            return result;\n          }\n          if (difference == 0) {\n            return result;\n          }\n          temp_result = FUNC_080082d0(result, temp_result2, DAT_08009ae8, DAT_08009aec);\n          result = FUNC_080082d0((int)temp_result, (int)(temp_result >> 0x20), DAT_08009af0, DAT_08009af4);\n          return result;\n        }\n      }\n      result = DAT_08009b08;\n      if (-1 < (int)input2) {\n        result = DAT_08009b00;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08009990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08009990"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "calculate_checksum_for_value_08004bf4",
                "param_1": "input_value",
                "param_2": "checksum_value",
                "PTR_08000374": "store_value_with_checksum_08000374",
                "ushort": "modified_value"
            },
            "code": "void calculate_checksum_for_value_08004bf4(byte input_value, undefined4 checksum_value) {\n    ushort modified_value = (ushort)input_value * 0xd + 0x200;\n    PTR_08000374(modified_value, checksum_value, 0xc);\n    return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "imported": false,
            "current_name": "calculate_checksum_for_value_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "FUN_08004d7c": "validate_and_calculate_checksum_08004d7c",
                "param_1": "character",
                "param_2": "string_address",
                "iVar1": "is_valid",
                "validate_string_080003ec": "validate_string",
                "fill_memory_with_value_0800b430": "fill_memory_with_zeroes",
                "calculate_checksum_for_value_08004bf4": "calculate_checksum"
            },
            "code": "bool validate_and_calculate_checksum_08004d7c(byte character, undefined4 string_address)\n{\n  int is_valid = validate_string_080003ec(string_address, (ushort)character * 0xd + 0x200, 0xc);\n  if (is_valid == 0) {\n    fill_memory_with_value_0800b430(string_address, 0xc);\n    calculate_checksum_for_value_08004bf4(character, string_address);\n  }\n  return is_valid != 0;\n}",
            "called": [
                "FUN_08004bf4",
                "FUN_0800b430",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "validate_and_calculate_checksum_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "FUN_08009278": "extract_significant_bits_08009278",
                "param_1": "input_num",
                "uVar1": "msb",
                "uVar2": "diff",
                "uVar3": "shifted_output"
            },
            "code": "uint extract_significant_bits_08009278(uint input_num)\n{\n\tuint shifted_num = input_num << 1;\n\tif (shifted_num < 0x7f000000) {\n\t\treturn 0;\n\t}\n\tuint msb = shifted_num >> 0x18;\n\tuint diff = 0x9e - msb;\n\tif (msb < 0x9f && diff != 0) {\n\t\tuint shifted_output = (input_num << 8 | 0x80000000) >> (diff & 0xff);\n\t\tif ((input_num & 0x80000000) != 0) {\n\t\t\tshifted_output = -shifted_output;\n\t\t}\n\t\treturn shifted_output;\n\t}\n\tif ((diff == 0xffffff9f) && ((input_num & 0x7fffff) != 0)) {\n\t\treturn 0;\n\t}\n\tinput_num = input_num & 0x80000000;\n\tif (input_num == 0) {\n\t\tinput_num = 0x7fffffff;\n\t}\n\treturn input_num;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "extract_significant_bits_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUN_080004fc": "calculate_and_store_hashes_080004fc",
                "param_1": "str1",
                "param_2": "str2",
                "param_3": "str3",
                "uVar1": "hash",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08009054": "apply_hash_function",
                "PTR_DAT_08000564": "hash_function_constants",
                "PTR_DAT_08000568": "hash_storage"
            },
            "code": "void calculate_and_store_hashes_080004fc(const char* str1, const char* str2, const char* str3) {\n    unsigned int hash1 = calculate_hash(str1);\n    unsigned int hash2 = calculate_hash(str2);\n    unsigned int hash3 = calculate_hash(str3);\n    *(unsigned int*)(PTR_DAT_08000568 + 0xc) = FUNC_08009054(hash1, *(unsigned int*)PTR_DAT_08000564);\n    *(unsigned int*)(PTR_DAT_08000568 + 0x10) = FUNC_08009054(hash2, *(unsigned int*)(PTR_DAT_08000564 + 4));\n    *(unsigned int*)(PTR_DAT_08000568 + 0x14) = FUNC_08009054(hash3, *(unsigned int*)(PTR_DAT_08000564 + 8));\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "calculate_and_store_hashes_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "FUN_08000220": "process_input_08000220",
                "param_1": "new_input",
                "*PTR_DAT_08000264": "*current_input",
                "process_data_until_flag_set_08002fd4": "process_data_until_flag_is_set",
                "do_nothing_080001c8": "do_nothing_case_one",
                "do_nothing_080001e0": "do_nothing_case_two",
                "do_nothing_twice_08000210_08000210": "do_nothing_case_default_twice"
            },
            "code": "void process_input_08000220(char new_input) {\n  if (new_input != *PTR_DAT_08000264) {\n    process_data_until_flag_is_set();\n    if (new_input == '\\x01') {\n      do_nothing_080001c8();\n    }\n    else if (new_input == '\\x02') {\n      do_nothing_080001e0();\n    }\n    else {\n      do_nothing_twice_08000210_08000210();\n    }\n    *PTR_DAT_08000264 = new_input;\n  }\n  return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_080001c8",
                "FUN_08000210",
                "FUN_080001e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_input_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "reset_pointer_to_zero_08005238",
                "*PTR_DAT_0800524c": "*pointer_to_data",
                "do_nothing_and_return_08005250": "do_nothing_and_return"
            },
            "code": "void reset_pointer_to_zero_08005238() {\n  *PTR_DAT_0800524c = 0;\n  do_nothing_and_return();\n  return;\n}",
            "called": [
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "reset_pointer_to_zero_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "set_flags_and_enable_08007da8",
                "puVar1": "flags_ptr"
            },
            "code": "void set_flags_and_enable_08007da8(){\n  uint *flags_ptr;\n  flags_ptr = DAT_08007dd4;\n  DAT_08007dd4[8] |= 0x10;\n  *flags_ptr |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "set_flags_and_enable_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "FUN_08004148": "printPositionAndStatus_08004148",
                "param_1": "status",
                "PTR_s_ALARM__08004190": "ALARM_MESSAGE",
                "PTR_s_Abort_during_cycle_08004198": "ABORT_MESSAGE",
                "PTR_s_Hard_limit_08004194": "HARD_LIMIT_MESSAGE",
                "PTR_s___MPos__0800419c": "MPOS_MESSAGE",
                "do_nothing_08002814": "delay"
            },
            "code": "void printPositionAndStatus_08004148(char status) {\n    wait_for_characters_080036c6(PTR_s_ALARM__08004190);\n    if (status == ABORT_CYCLE) {\n        wait_for_characters_080036c6(PTR_s_Abort_during_cycle_08004198);\n    }\n    else if (status == HARD_LIMIT) {\n        wait_for_characters_080036c6(PTR_s_Hard_limit_08004194);\n    }\n    wait_for_characters_080036c6(PTR_s___MPos__0800419c);\n    delay(500);\n    return;\n}",
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "printPositionAndStatus_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUN_08004940": "calculate_and_print_floats_08004940",
                "uVar1": "hash",
                "uVar2": "index",
                "uVar3": "result",
                "uVar4": "hash2",
                "uVar5": "hash3",
                "auStack_2c": "values",
                "local_11": "index2",
                "PTR_DAT_08004b88": "data_ptr",
                "PTR_DAT_08004b88 + 4": "data_ptr + 4",
                "PTR_DAT_08004b88 + 8": "data_ptr + 8",
                "PTR_DAT_08004b88 + 0xc": "data_ptr + 0xc",
                "PTR_DAT_08004bac": "hash_table_ptr",
                "PTR_DAT_08004bac + index * 4": "hash_table_ptr + index * 4",
                "PTR_DAT_08004bac[0x28]": "hash_table_ptr[0x28]",
                "PTR_DAT_08004bb8 + (index + 8) * 4": "hash_table_ptr2 + (index + 8) * 4",
                "PTR_DAT_08004bb8 + (index + 10) * 4 + 4": "hash_table_ptr2 + (index + 10) * 4 + 4",
                "PTR_DAT_08004bb0": "wait_chars",
                "PTR_s_WPos__08004bb4": "wait_chars2",
                "PTR_DAT_08004bbc": "wait_chars3"
            },
            "code": "void calculate_and_print_floats_08004940(void)\n{\n    uint index;\n    uint hash;\n    uint hash_index = 3;\n    float values[3];\n    uint* PTR_DAT_08004bac;\n    byte PTR_DAT_08004bb0[4] = {'M', 'P', 'o', 's'};\n    byte PTR_s_WPos__08004bb4[4] = {'W', 'P', 'o', 's'};\n    byte PTR_DAT_08004bbc[4] = {'W', 'P', 'o', 's', '2'};\n\n    PTR_DAT_08004bac = (uint*)(&PTR_DAT_08004bac + 0x28);\n\n    if ((byte)PTR_DAT_08004b88[1] < 8) {\n        (*(code*)(&switchD_0800495e::switchdataD_08004964)[(byte)PTR_DAT_08004b88[1]])();\n        return;\n    }\n\n    wait_for_characters_080036c6(PTR_s__MPos__08004ba8);\n\n    for (index = 0; index < 3; index++) {\n        hash = calculate_hash_08008e44(PTR_DAT_08004b88[hash_index]);\n        hash = FUNC_08009054(hash, *(uint*)(PTR_DAT_08004bac + index * 4));\n        values[index] = CalculateFloat_08008c30(hash, 0);\n\n        if ((*PTR_DAT_08004bac & 1) != 0) {\n            hash = calculate_08008590(hash);\n            hash = FUNC_08008640((int)hash, (int)((ulonglong)hash >> 0x20), DAT_08004b80, DAT_08004b84);\n            values[index] = CalculateFloat_08008c30((int)hash, (int)((ulonglong)hash >> 0x20));\n        }\n\n        print_float_08003826(values[index]);\n        wait_for_characters_080036c6(PTR_DAT_08004bb0);\n        hash_index++;\n    }\n\n    wait_for_characters_080036c6(PTR_s_WPos__08004bb4);\n\n    for (index = 0; index < 3; index++) {\n        if ((*PTR_DAT_08004bac & 1) == 0) {\n            hash = values[index];\n            hash = FUNC_08008cd8(hash, *(uint*)(PTR_DAT_08004bb8 + (index + 8) * 4), *(uint*)(PTR_DAT_08004bb8 + (index + 10) * 4 + 4));\n            values[index] = CalculateFloat_08008c30(hash, 0);\n        }\n        else {\n            hash = calculate_08008590(values[index]);\n            hash = FUNC_08008cdc(*(uint*)(PTR_DAT_08004bb8 + (index + 8) * 4), *(uint*)(PTR_DAT_08004bb8 + (index + 10) * 4 + 4));\n            uint hash2 = calculate_08008590(hash);\n            hash2 = FUNC_08008640((int)hash2, (int)((ulonglong)hash2 >> 0x20), DAT_08004b80, DAT_08004b84);\n            hash = FUNC_080082d0((int)calculate_08008590(values[index]), (int)((ulonglong)calculate_08008590(values[index]) >> 0x20), (int)hash2, (int)((ulonglong)hash2 >> 0x20));\n            values[index] = CalculateFloat_08008c30(hash, 0);\n        }\n        print_float_08003826(values[index]);\n        if (index < 2) {\n            wait_for_characters_080036c6(PTR_DAT_08004bb0);\n        }\n    }\n\n    wait_for_characters_080036c6(PTR_DAT_08004bbc);\n}\n",
            "called": [
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08003826",
                "FUN_08008640",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "calculate_and_print_floats_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "FUN_08008a74": "check_for_duplicate_08008a74",
                "param_1": "first_half_1",
                "param_2": "second_half_1",
                "param_3": "is_first_half_2_less_than_or_equal_to_first_half_1",
                "param_4": "is_second_half_2_less_than_or_equal_to_second_half_1",
                "uVar1": "xor_of_second_halves",
                "bVar2": "is_first_half_1_zero",
                "bVar3": "is_first_half_2_zero",
                "is_xor_zero": "is_xor_zero",
                "is_xor_negative": "is_xor_negative"
            },
            "code": "uint check_for_duplicate_08008a74(uint first_half_1, uint second_half_1, uint first_half_2, uint second_half_2) {\n  bool is_first_half_1_zero = (first_half_1 | (second_half_1 << 1)) == 0;\n  bool is_first_half_2_zero = (first_half_2 | (second_half_2 << 1)) == 0;\n  if (is_first_half_1_zero && is_first_half_2_zero) {\n    return 1;\n  }\n  if (second_half_1 == second_half_2 && first_half_1 == first_half_2) {\n    return 0;\n  }\n  uint xor_of_second_halves = second_half_1 ^ second_half_2;\n  bool is_xor_zero = xor_of_second_halves == 0;\n  bool is_xor_negative = -1 < (int)xor_of_second_halves;\n  bool is_second_half_2_less_than_or_equal_to_second_half_1 = second_half_2 <= second_half_1;\n  bool is_first_half_2_less_than_or_equal_to_first_half_1 = first_half_2 <= first_half_1;\n  if (is_xor_zero) {\n    return is_first_half_2_less_than_or_equal_to_first_half_1;\n  }\n  if (is_xor_negative) {\n    return is_second_half_2_less_than_or_equal_to_second_half_1;\n  }\n  return ~is_second_half_2_less_than_or_equal_to_second_half_1 + 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "FUN_08008b00"
            ],
            "imported": false,
            "current_name": "check_for_duplicate_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "FUN_08002fd4": "process_data_until_flag_set_08002fd4",
                "iVar1": "data_pointer",
                "get_data_pointer_08002f74": "get_data_pointer",
                "PTR_DAT_08003000": "PTR_DAT_FLAG",
                "process_data_items_08003a74": "process_data_items",
                "*PTR_DAT_08003000": "*PTR_DAT_FLAG"
            },
            "code": "void process_data_until_flag_set_08002fd4() {\\n  int data_pointer;\\n  while ((data_pointer = get_data_pointer_08002f74(), data_pointer != 0 || (PTR_DAT_08003000[1] == \"\\x03\"))) {\\n    process_data_items();\\n    if (*PTR_DAT_08003000 != \"\\0\") {\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_08000220",
                "FUN_080024c4",
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "process_data_until_flag_set_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "FUN_08002408": "process_data_and_validate_flag_set_08002408",
                "param_1": "data",
                "uVar1": "shifted_value",
                "uVar2": "hash1",
                "uVar3": "hashed_value",
                "uVar4": "result1",
                "local_12": "shifted_value",
                "FUNC_08008eec": "calculate_hash",
                "DAT_080024b8": "DATA_1",
                "calculate_08008590": "calculate_result",
                "calculate_result_080094c0": "calculate_result",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "process_data_until_flag_set_08002fd4": "process_data_until_flag_set",
                "DAT_080024bc": "DATA_2",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08008cd8": "calculate_hashed_value",
                "do_nothing_08002814": "do_nothing",
                "process_data_items_08003a74": "process_data_items",
                "PTR_DAT_080024c0": "PTR_DATA_FLAG"
            },
            "code": "void process_data_and_validate_flag_set_08002408(uint32_t data)\n{\n  uint32_t hash1, hash2, result1, result2;\n  uint16_t shifted_value;\n  hash1 = FUNC_08008eec(data, DAT_080024b8);\n  result1 = calculate_08008590(hash1);\n  shifted_value = calculate_shifted_value_08008bf0(result1);\n  process_data_until_flag_set();\n  hash2 = calculate_hash_08008e44(data, DAT_080024bc);\n  hash2 = FUNC_08008cd8(hash2, calculate_hashed_value(shifted_value));\n  result2 = calculate_result(hash2);\n  shifted_value = calculate_shifted_value_08008bf0(result2);\n  do_nothing_08002814(shifted_value);\n  while (shifted_value != 0 && process_data_items()) {\n    validate_value(0x32);\n    shifted_value--;\n  }\n  return;\n}",
            "called": [
                "FUN_080094c0",
                "FUN_080002a0",
                "FUN_08008590",
                "FUN_08002fd4",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08008cd8",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_data_and_validate_flag_set_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "FUN_08002a94": "concatenate_strings_and_set_flag_08002a94",
                "local_9": "current_character",
                "local_18": "previous_string_pointer",
                "local_14": "new_string_pointer",
                "puVar1": "current_string_pointer",
                "puVar2": "next_string_pointer"
            },
            "code": "void concatenate_strings_and_set_flag_08002a94(void)\n{\n  undefined *current_string_pointer;\n  undefined *previous_string_pointer;\n  undefined *new_string_pointer;\n  byte current_character;\n  \n  current_character = *PTR_DAT_08002af0;\n  previous_string_pointer = (undefined *)0x0;\n  new_string_pointer = (undefined *)0x0;\n  while (current_character != *PTR_DAT_08002af8) {\n    current_character = replace_null_with_0x12_and_decrement(current_character);\n    previous_string_pointer = new_string_pointer;\n    current_string_pointer = PTR_DAT_08002af4 + (uint)current_character * 0x40;\n    verify_string_concatenation_and_set_flag(current_string_pointer, new_string_pointer, previous_string_pointer);\n    new_string_pointer = current_string_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "concatenate_strings_and_set_flag_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "FUN_08003618": "update_data_item_08003618",
                "param_1": "data_item",
                "bVar1": "item_index",
                "puVar2": "data_item_ptr",
                "uVar3": "current_hash",
                "uVar4": "hash_of_previous_item"
            },
            "code": "void update_data_item_08003618(undefined4 data_item){\n  byte item_index;\n  undefined *data_item_ptr;\n  undefined4 current_hash;\n  undefined4 hash_of_previous_item;\n  undefined4 new_hash;\n  \n  data_item_ptr = PTR_DAT_08003698;\n  item_index = *PTR_DAT_08003694;\n  hash_of_previous_item = *(undefined4 *)(data_item_ptr + (uint)item_index * 0x40 + 0x20);\n  current_hash = calculate_hash_08008e44(data_item);\n  new_hash = FUNC_08008eec(hash_of_previous_item, current_hash);\n  hash_of_previous_item = calculate_hash_08008e44(*(undefined4 *)(data_item_ptr + (uint)item_index * 0x40 + 0x10));\n  new_hash = FUNC_08009054(new_hash, hash_of_previous_item);\n  *(undefined4 *)(data_item_ptr + (uint)item_index * 0x40 + 0x20) = new_hash;\n  *(undefined4 *)(data_item_ptr + (uint)item_index * 0x40 + 0x10) = data_item;\n  *(undefined4 *)(data_item_ptr + (uint)item_index * 0x40 + 0x18) = 0;\n  *(undefined4 *)(data_item_ptr + (uint)item_index * 0x40 + 0x1c) = 0;\n  data_item_ptr[(uint)item_index * 0x40 + 0x25] = 0;\n  data_item_ptr[(uint)item_index * 0x40 + 0x24] = 1;\n  process_data_items_08002edc();\n}",
            "called": [
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08002edc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "FUN_080058a0"
            ],
            "imported": false,
            "current_name": "update_data_item_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "FUNC_0800af78"
            },
            "code": "\nint FUNC_0800af78(int param_1,uint param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  undefined4 local_2c;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uVar8) {\n    if ((uVar8 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uVar8) ||\n       ((iVar2 = DAT_0800b2a8, uVar8 == DAT_0800b29c && (param_1 != 0)))) {\n      iVar2 = FUNC_080082d4(param_1,param_2,param_1);\n      return iVar2;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uVar8) {\n      uVar9 = do_nothing_0800b2cc();\n      uVar6 = (undefined4)((ulonglong)uVar9 >> 0x20);\n      uVar3 = (undefined4)uVar9;\n      if (DAT_0800b2bc < (int)uVar8) {\n        if ((int)uVar8 < DAT_0800b2c0) {\n          uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_08008640(uVar3,uVar6,0,DAT_0800b2c4);\n          uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n          uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                               (int)((ulonglong)uVar10 >> 0x20));\n          iVar2 = 2;\n        }\n        else {\n          uVar9 = FUNC_08008894(0,DAT_0800b2c8,uVar3,uVar6);\n          iVar2 = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uVar8) {\n        uVar9 = FUNC_080082d0(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,DAT_0800b2b8);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 1;\n      }\n      else {\n        uVar9 = FUNC_080082d4(uVar3,uVar6,uVar3,uVar6);\n        uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),0,DAT_0800b2b8);\n        uVar10 = FUNC_080082d4(uVar3,uVar6,0,0x40000000);\n        uVar9 = FUNC_08008894((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),(int)uVar10,\n                             (int)((ulonglong)uVar10 >> 0x20));\n        iVar2 = 0;\n      }\n    }\n    else {\n      if ((int)uVar8 <= DAT_0800b2ac + -0x1bc0000) {\n        uVar10 = FUNC_080082d4(param_1,param_2,DAT_0800b290,DAT_0800b294);\n        iVar2 = is_end_of_input_08008b60((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_0800b2b8);\n        if (iVar2 != 0) {\n          return param_1;\n        }\n      }\n      iVar2 = -1;\n    }\n    local_2c = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar7 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar7,local_2c,uVar7);\n    uVar4 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar3 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar3,uVar4,uVar3,uVar4);\n    uVar5 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    uVar9 = FUNC_08008640(uVar6,uVar5,DAT_0800b238,DAT_0800b23c);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar6,uVar5);\n    uVar9 = FUNC_080082d4((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar3,uVar4);\n    uVar3 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar10 = FUNC_08008640(uVar6,uVar5,DAT_0800b268,DAT_0800b26c);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar6,uVar5);\n    uVar6 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    if (iVar2 == -1) {\n      uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n      uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n      iVar2 = FUNC_080082d0(uVar7,local_2c,(int)uVar9,(int)((ulonglong)uVar9 >> 0x20));\n      return iVar2;\n    }\n    uVar9 = FUNC_080082d4((int)uVar9,uVar3,(int)uVar10,uVar6);\n    puVar1 = PTR_DAT_0800b2b0;\n    uVar9 = FUNC_08008640((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),\n                         *(undefined4 *)(PTR_DAT_0800b2b4 + iVar2 * 8),\n                         *(undefined4 *)((int)(PTR_DAT_0800b2b4 + iVar2 * 8) + 4));\n    uVar9 = FUNC_080082d0((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),uVar7,local_2c);\n    iVar2 = FUNC_080082d0(*(undefined4 *)(puVar1 + iVar2 * 8),\n                         *(undefined4 *)((int)(puVar1 + iVar2 * 8) + 4),(int)uVar9,\n                         (int)((ulonglong)uVar9 >> 0x20));\n    if ((int)param_2 < 0) {\n      return iVar2;\n    }\n  }\n  return iVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_08008894"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800af78",
            "calling": [
                "FUN_08009990"
            ],
            "imported": false,
            "current_name": "FUNC_0800af78"
        },
        "FUN_08007d08": {
            "renaming": {
                "FUN_08007d08": "initialize_data_08007d08",
                "puVar1": "data_ptr",
                "DAT_08007d9c": "data_array",
                "DAT_08007da4": "data_value",
                "PTR_DAT_08007da0": "data_ptr_2"
            },
            "code": "void initialize_data_08007d08(void)\n{\n  uint32_t *data_ptr;\n  data_ptr = DAT_08007d9c;\n  set_flags(DAT_08007d9c);\n  *data_ptr = 0x80;\n  data_ptr[1] = 0;\n  data_ptr[2] = 0;\n  data_ptr[3] = 0;\n  data_ptr[4] = 0;\n  data_ptr[6] = 0x6800;\n  data_ptr[7] = 0;\n  data_ptr[8] = 0;\n  data_ptr[9] = 0;\n  data_ptr[10] = (uint32_t)((uint64_t)DAT_08007da4 * (uint64_t)*PTR_DAT_08007da0 >> 0x35) - 1;\n  data_ptr[0xb] = 199;\n  data_ptr[0xd] = 0;\n  data_ptr[0xe] = 100;\n  data_ptr[0xf] = 0;\n  data_ptr[0x10] = 0;\n  data_ptr[0x12] = 0;\n  data_ptr[0x13] = 0;\n  data_ptr[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_data_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "FUN_080091fc": "concatenate_params_and_swap_080091fc",
                "param_1": "dest",
                "param_2": "src"
            },
            "code": "void concatenate_params_and_swap_080091fc(void* dest, void* src){\n    concatenate_parameters_08009204(src, dest);\n    return;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "imported": false,
            "current_name": "concatenate_params_and_swap_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "FUN_080058a0": "update_data_item_if_not_zero_080058a0",
                "PTR_DAT_080058f0": "data_ptr",
                "PTR_DAT_080058f4": "data_ptr2",
                "PTR_DAT_080058fc": "PTR_DAT_080058fc",
                "DAT_080058f8": "DAT_080058f8",
                "update_data_item_08003618": "update_data_item",
                "calculate_and_set_data_08005324": "calculate_and_set_data"
            },
            "code": "void update_data_item_if_not_zero_080058a0(void)\n{\n  int* PTR_DAT_080058f0 = (int*)PTR_DAT_080058f0;\n  int* PTR_DAT_080058f4 = (int*)PTR_DAT_080058f4;\n  if (*PTR_DAT_080058f0 == 0) {\n    PTR_DAT_080058fc[1] = 0;\n  }\n  else {\n    int data_item = *(int *)(*PTR_DAT_080058f0 + 0x10) - *(int *)(PTR_DAT_080058f4 + 0x10);\n    update_data_item_08003618(data_item);\n    *(undefined4 *)(PTR_DAT_080058f4 + 0x1c) = 0;\n    calculate_and_set_data_08005324(*(undefined4 *)(PTR_DAT_080058f4 + 0x1c));\n    *(undefined4 *)(PTR_DAT_080058f4 + 0x18) = DAT_080058f8;\n    *(undefined4 *)(PTR_DAT_080058f4 + 0x10) = 0;\n    PTR_DAT_080058fc[1] = 2;\n  }\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_08003618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_data_item_if_not_zero_080058a0"
        },
        "FUN_080036c6": {
            "renaming": {
                "FUN_080036c6": "wait_for_characters_080036c6",
                "param_1": "string",
                "local_c": "current_char"
            },
            "code": "void wait_for_characters_080036c6(char *string) {\n  char *current_char = string;\n  while (*current_char != '\\0') {\n    wait_until_bit_is_set_08008250(*current_char);\n    current_char++;\n  }\n  return;\n}",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004148",
                "FUN_08004940",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_080044e8",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "wait_for_characters_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "FUN_08008190": "set_flags_and_values_on_data_08008190",
                "puVar1": "data_pointer"
            },
            "code": "void set_flags_and_values_on_data_08008190(void)\n{\n  uint *data_pointer;\n  data_pointer = DAT_08008240;\n  set_flags_08007ea4(DAT_08008240);\n  data_pointer[3] &= 0xffffdfff;\n  data_pointer[3] &= 0xffff400c;\n  data_pointer[3] |= 0xc;\n  data_pointer[4] &= 0xffff8090;\n  data_pointer[5] &= 0xfffff000;\n  *data_pointer &= 0xfffffc00;\n  calculate_shift_and_set_value_08007f54(data_pointer,0x1c200);\n  data_pointer[6] = data_pointer[6];\n  data_pointer[3] |= 0x2000;\n  return;\n}",
            "called": [
                "FUN_08007f54",
                "FUN_08007ea4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_on_data_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "FUN_080074c8": "set_flags_based_on_param_080074c8",
                "param_1": "param",
                "set_bit_in_short_array_08007402": "set_bit_in_short_array",
                "check_and_set_flag_if_condition_met_0800195c": "check_and_set_flag_if_condition_met",
                "set_flags_08003a18": "set_flags"
            },
            "code": "void set_flags_based_on_param_080074c8(uint param) {\n  if ((param & 1) != 0) {\n    set_bit_in_short_array(0x3e);\n  }\n  if ((*(int *)PTR_DAT_08007518 != 0) && ((param & 0x1e) != 0)) {\n    check_and_set_flag_if_condition_met();\n  }\n  if ((*(int *)PTR_DAT_0800751c != 0) && ((param & 0x80) != 0)) {\n    set_flags(param);\n  }\n  return;\n}",
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_param_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "fill_memory_with_value_0800b430",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "current_memory",
                "puVar2": "end_memory",
                "uVar3": "last_word_size",
                "uVar4": "word_value",
                "bVar5": "is_last_word"
            },
            "code": "void fill_memory_with_value_0800b430(uint32_t* memory, uint8_t value, uint32_t size) {\n  uint32_t* current_memory = memory;\n  uint32_t* end_memory = memory + (size / sizeof(uint32_t));\n  uint32_t* last_word_memory = memory + ((size / sizeof(uint32_t)) * sizeof(uint32_t));\n  uint8_t* current_byte = (uint8_t*)memory;\n  uint8_t* end_byte = (uint8_t*)memory + size;\n  uint32_t word_value = (value << 24) | (value << 16) | (value << 8) | value;\n  \n  if (((uint)memory & 3) != 0) {\n    size--;\n    *current_byte++ = value;\n  }\n  while (current_memory < end_memory) {\n    *current_memory++ = word_value;\n  }\n  while (current_byte < end_byte) {\n    *current_byte++ = value;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "FUN_080079c0",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080002f0",
                "FUN_080004ac",
                "FUN_08004d7c",
                "FUN_08005814",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "FUN_08004030": "printErrorMessage_08004030",
                "param_1": "errorCode"
            },
            "code": "void printErrorMessage_08004030(char errorCode)\n{\n    if (errorCode == '\\0') {\n        print(PTR_DAT_08004108);\n    }\n    else {\n        switch(errorCode) {\n            case '\\x01':\n                print(PTR_s_Bad_number_format_08004110);\n                break;\n            case '\\x02':\n                print(PTR_s_Expected_command_letter_08004114);\n                break;\n            case '\\x03':\n                print(PTR_s_Unsupported_statement_08004118);\n                break;\n            case '\\x04':\n                print(PTR_s_Invalid_radius_0800411c);\n                break;\n            case '\\x05':\n                print(PTR_s_Modal_group_violation_08004120);\n                break;\n            case '\\x06':\n                print(PTR_s_Invalid_statement_08004124);\n                break;\n            case '\\a':\n                print(PTR_s_Setting_disabled_08004128);\n                break;\n            case '\\b':\n                print(PTR_s_Value___0_0_0800412c);\n                break;\n            case '\\t':\n                print(PTR_s_Value___3_usec_08004130);\n                break;\n            case '\\n':\n                print(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\n                break;\n            case '\\v':\n                print(PTR_s_Busy_or_queued_08004138);\n                break;\n            case '\\f':\n                print(PTR_s_Alarm_lock_0800413c);\n                break;\n            case '\\r':\n                print(PTR_s_Line_overflow_08004140);\n        }\n        print(PTR_DAT_08004144);\n    }\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080044e8",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "printErrorMessage_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "FUN_08005360": "check_if_uVar1_less_than_uVar2_08005360",
                "uVar1": "value_1",
                "uVar2": "value_2",
                "ptr1": "ptr_to_value_3",
                "ptr2": "ptr_to_value_1",
                "ptr3": "ptr_to_value_2"
            },
            "code": "bool check_if_uVar1_less_than_uVar2_08005360(void)\n{\n  int *ptr1 = (int *)(PTR_DAT_08005398 + 0x18);\n  int *ptr2 = (int *)(PTR_DAT_08005398 + 0x14);\n  int *ptr3 = (int *)(PTR_DAT_08005398 + 0x18);\n  *ptr1 = *ptr2 + *ptr3;\n  uint uVar1 = DAT_0800539c;\n  uint uVar2 = *(uint *)(PTR_DAT_08005398 + 0x18);\n  if (uVar1 < uVar2) {\n    *ptr3 = *ptr3 - 420000;\n  }\n  return uVar1 < uVar2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "check_if_uVar1_less_than_uVar2_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "clear_data_08003980",
                "PTR_DAT_08003998": "data_pointer_1",
                "PTR_DAT_0800399c": "data_pointer_2"
            },
            "code": "void clear_data_08003980(void)\n{\n    *PTR_DAT_08003998 = 0;\n    *PTR_DAT_0800399c = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "FUN_080039a0",
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "clear_data_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "check_bit_in_array_08006de0",
                "param_1": "character",
                "uVar1": "is_bit_set",
                "is_bit_set_in_array_08006a18": "is_bit_set_in_array"
            },
            "code": "int check_bit_in_array_08006de0(char character) {\n    int is_bit_set = is_bit_set_in_array((int)character);\n    return is_bit_set;\n}",
            "called": [
                "FUN_08006a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": false,
            "current_name": "check_bit_in_array_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "FUN_08007540": "main_08007540",
                "set_flags_and_register_080059b4": "set_flags_and_register",
                "initialize_app_08007436": "initialize_app",
                "update_registers_and_set_param_values_0800778c": "update_registers_and_set_param_values",
                "initialize_and_enable_data_memory_08007e08": "initialize_and_enable_data_memory",
                "initialize_data_080079c0": "initialize_data",
                "set_flags_and_values_on_data_08008190": "set_flags_and_values_on_data",
                "handle_system_interrupt_08005984": "handle_system_interrupt",
                "run_program_08001ddc": "run_program"
            },
            "code": "int main_08007540() {\n  set_flags_and_register_080059b4();\n  initialize_app_08007436();\n  update_registers_and_set_param_values_0800778c();\n  initialize_and_enable_data_memory_08007e08();\n  initialize_data_080079c0();\n  set_flags_and_values_on_data_08008190();\n  handle_system_interrupt_08005984(0);\n  run_program();\n  return 0;\n}",
            "called": [
                "FUN_08008190",
                "FUN_080079c0",
                "FUN_08007436",
                "FUN_080059b4",
                "FUN_08007e08",
                "FUN_08005984",
                "FUN_0800778c",
                "FUN_08001ddc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "main_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "FUN_080052dc": "set_param_080052dc",
                "param_1": "new_param",
                "*(uint *)(DAT_08005308 + 0x14)": "ptr",
                "DAT_08005308": "data_start",
                "0x14": "offset",
                "0xfffff55f": "mask",
                "old_value": "old_value",
                "new_value": "new_value"
            },
            "code": "void set_param_080052dc(uint new_param) {\n  uint* *(uint *)(DAT_08005308 + 0x14) = (uint *)(DAT_08005308 + 0x14);\n  uint old_value = **(uint *)(DAT_08005308 + 0x14);\n  uint mask = 0xfffff55f;\n  uint new_value = new_param | (old_value & mask);\n  **(uint *)(DAT_08005308 + 0x14) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "set_param_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "FUN_080064ec": "calculate_result_080064ec",
                "uVar1": "flag",
                "uVar2": "divisor",
                "local_c": "result",
                "count_leading_zeroes": "count_leading_zeros"
            },
            "code": "uint calculate_result_080064ec(void)\n{\n  uint result = 0;\n  uint flag = *(uint *)(DAT_0800661c + 8) & 0xc;\n  if (flag == 8) {\n    uint divisor = *(uint *)(DAT_0800661c + 4) & 0x3f;\n    uint shift = count_leading_zeroes(0x200);\n    uint is_bit_set = (*(uint *)(DAT_0800661c + 4) & 0x400000) >> (shift & 0xff);\n    uint multiplier = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (count_leading_zeroes(0x3fe0000) & 0xff));\n    result = is_bit_set == 0 ? multiplier * (DAT_08006620 / divisor) : multiplier * (DAT_08006624 / divisor);\n    result /= (((*(uint *)(DAT_0800661c + 4) & 0x30000) >> (count_leading_zeroes(0xc000) & 0xff)) + 1) * 2;\n  }\n  else if (flag < 9) {\n    if (flag == 0) {\n      result = DAT_08006620;\n    }\n    else if (flag == 4) {\n      result = DAT_08006624;\n    }\n  }\n  else {\n    result = DAT_08006620;\n  }\n  return result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "FUN_08006628"
            ],
            "imported": false,
            "current_name": "calculate_result_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "FUN_08006ba0": "extract_bits_08006ba0",
                "param_1": "bits_to_extract",
                "param_2": "source_bits",
                "param_3": "destination_bits",
                "uVar1": "bits_to_shift"
            },
            "code": "uint extract_bits_08006ba0(uint bits_to_extract, uint source_bits, uint destination_bits)\n{\n    uint bits_to_shift = 7 - (bits_to_extract & 0x7);\n    if (bits_to_shift > 3) {\n        bits_to_shift = 4;\n    }\n    if ((bits_to_extract + 4) < 7) {\n        bits_to_extract = 0;\n    }\n    else {\n        bits_to_extract -= 3;\n    }\n    return destination_bits & ((1 << (bits_to_extract & 0xff)) - 1U) | ((1 << (bits_to_shift & 0xff)) - 1U & source_bits) << (bits_to_extract & 0xff);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "extract_bits_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "validate_string_080003ec",
                "param_1": "input_string",
                "param_2": "string_length",
                "param_3": "array_index",
                "cVar1": "current_char",
                "local_1c": "string_length",
                "local_18": "array_index",
                "local_14": "current_string",
                "local_9": "char_count",
                "PTR_DAT_08000470": "memory_initialization"
            },
            "code": "bool validate_string_080003ec(char *input_string, int string_length, int array_index)\n{\n  char current_char;\n  uint8_t char_count = 0;\n  int current_index = array_index;\n  char *current_string = input_string;\n  if (*(int *)PTR_DAT_08000470 == 0) {\n    initialize_memory_080002f0();\n    current_index = array_index;\n    current_string = input_string;\n  }\n  for (; string_length != 0; string_length--) {\n    current_char = get_value_from_array_08000310(current_index);\n    char_count = current_char + (char_count != 0);\n    *current_string = current_char;\n    current_index++;\n    current_string++;\n  }\n  uint8_t expected_count = get_value_from_array_08000310(current_index);\n  return char_count == expected_count;\n}",
            "called": [
                "FUN_08000310",
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "FUN_08004d2c",
                "FUN_08004d7c",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "validate_string_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "replace_null_with_0x12_and_decrement_08002896",
                "param_1": "input_char",
                "local_9": "output_char"
            },
            "code": "char replace_null_with_0x12_and_decrement_08002896(char input_char) {\n  char output_char;\n  output_char = input_char;\n  if (input_char == '\\0') {\n    output_char = '\\x12';\n  }\n  return output_char - 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "replace_null_with_0x12_and_decrement_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "FUNC_0800a348"
            },
            "code": "\nundefined4 FUNC_0800a348(undefined4 param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  longlong lVar8;\n  undefined4 local_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  \n  uVar4 = param_2 & 0x7fffffff;\n  if (uVar4 < 0x3e400000) {\n    iVar1 = convert_to_signed_fixed_point_08008ba0();\n    if (iVar1 == 0) {\n      return 0;\n    }\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n  }\n  else {\n    uVar5 = FUNC_08008640(param_1,param_2,param_1,param_2);\n    uVar3 = (undefined4)((ulonglong)uVar5 >> 0x20);\n    uVar2 = (undefined4)uVar5;\n    uVar6 = FUNC_08008640(uVar2,uVar3,DAT_0800a558,DAT_0800a55c);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a560,DAT_0800a564);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a570,DAT_0800a574);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    uVar6 = FUNC_080082d4((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),DAT_0800a580,DAT_0800a584);\n    uVar6 = FUNC_08008640((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),uVar2,uVar3);\n    if (DAT_0800a590 < (int)uVar4) {\n      if (DAT_0800a594 < (int)uVar4) {\n        lVar8 = (ulonglong)DAT_0800a598 << 0x20;\n        iVar1 = DAT_0800a59c;\n      }\n      else {\n        lVar8 = FUNC_080082d0(0,DAT_0800a58c,0,uVar4 - 0x200000);\n        iVar1 = uVar4 - 0x200000;\n      }\n      uStack_24 = (undefined4)((ulonglong)lVar8 >> 0x20);\n      local_28 = (undefined4)lVar8;\n      uVar5 = FUNC_08008640(uVar2,uVar3,0,DAT_0800a588);\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),0,iVar1);\n      uVar6 = FUNC_08008640(uVar2,uVar3,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n      uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n      uVar6 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                           (int)((ulonglong)uVar7 >> 0x20));\n      uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar6,\n                           (int)((ulonglong)uVar6 >> 0x20));\n      uVar2 = FUNC_080082d0(local_28,uStack_24,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n      return uVar2;\n    }\n  }\n  uStack_2c = (undefined4)((ulonglong)uVar6 >> 0x20);\n  local_30 = (undefined4)uVar6;\n  uVar2 = (undefined4)((ulonglong)uVar5 >> 0x20);\n  uVar6 = FUNC_08008640((int)uVar5,uVar2,0,DAT_0800a588);\n  uVar5 = FUNC_08008640((int)uVar5,uVar2,local_30,uStack_2c);\n  uVar7 = FUNC_08008640(param_1,param_2,param_3,param_4);\n  uVar5 = FUNC_080082d0((int)uVar5,(int)((ulonglong)uVar5 >> 0x20),(int)uVar7,\n                       (int)((ulonglong)uVar7 >> 0x20));\n  uVar5 = FUNC_080082d0((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar5,\n                       (int)((ulonglong)uVar5 >> 0x20));\n  uVar2 = FUNC_080082d0(0,DAT_0800a58c,(int)uVar5,(int)((ulonglong)uVar5 >> 0x20));\n  return uVar2;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a348",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "concatenate_080001ac",
                "param_1": "x",
                "param_2": "y",
                "DAT_080001bc": "global_variable",
                "PTR_FUN_080001c4": "ptr_function",
                "PTR_DAT_080001c0": "ptr_data"
            },
            "code": "typedef unsigned long long uint64_t;\n\nuint64_t concatenate_080001ac(uint64_t x, uint64_t y) {\n  if (DAT_080001bc != 0) {\n    x = PTR_FUN_080001c4;\n    y = PTR_DAT_080001c0;\n  }\n  return ((uint64_t)y << 32) | x;\n}",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "concatenate_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "print_binary_representation_08003740",
                "param_1": "data",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void print_binary_representation_08003740(unsigned char* data, int num_bits){\n  print_binary(data, num_bits);\n  return;\n}",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": false,
            "current_name": "print_binary_representation_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "FUN_08000478": "set_params_to_array_08000478",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param"
            },
            "code": "void set_params_to_array_08000478(int param_1, int param_2, int param_3)\n{\n  array[25] = param_1;\n  array[26] = param_2;\n  array[27] = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "imported": false,
            "current_name": "set_params_to_array_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "FUN_08006d2e": "set_bit_08006d2e",
                "param_1": "character",
                "set_bit_in_array_080069b4": "set_bit_in_array"
            },
            "code": "void set_bit_08006d2e(char character) {\n    set_bit_08006d2e_in_array(character);\n    return;\n}",
            "called": [
                "FUN_080069b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "FUN_08007e1c": "wait_for_bit_to_be_set_08007e1c",
                "param_1": "signal",
                "DAT_08007e48": "signal_status"
            },
            "code": "void wait_for_bit_to_be_set_08007e1c(byte signal) {\n  while ((*DAT_08007e48 & 0x80) == 0);\n  DAT_08007e48[1] = (uint)signal;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "FUN_08008250",
                "FUN_0800826a"
            ],
            "imported": false,
            "current_name": "wait_for_bit_to_be_set_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input_value",
                "param_2": "input_uint",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "iVar1": "fixed_point_value",
                "uVar2": "upper_half",
                "uVar3": "lower_half",
                "uVar4": "upper_half_2",
                "uVar5": "lower_half_2",
                "uVar6": "upper_half_3",
                "uVar7": "lower_half_3",
                "uVar8": "upper_half_4",
                "uVar9": "lower_half_4"
            },
            "code": "undefined4 calculate_result_0800adf0(undefined4 input_value, uint input_uint, undefined4 param_3, undefined4 param_4, int param_5)\n{\n    int fixed_point_value;\n    undefined4 upper_half;\n    undefined4 lower_half;\n    undefined4 upper_half_2;\n    undefined4 lower_half_2;\n    undefined4 upper_half_3;\n    undefined4 lower_half_3;\n    undefined4 upper_half_4;\n    undefined4 lower_half_4;\n\n    if (((input_uint & 0x7fffffff) < 0x3e400000) && (fixed_point_value = convert_to_signed_fixed_point_08008ba0(), fixed_point_value == 0)) {\n        return input_value;\n    }\n    \n    upper_half = (undefined4)((ulonglong)FUNC_08008640(input_value, input_uint, input_value) >> 0x20);\n    lower_half = (undefined4)FUNC_08008640(input_value, input_uint, upper_half, upper_half);\n    upper_half_2 = (undefined4)((ulonglong)FUNC_08008640(upper_half, upper_half, DAT_0800af40, DAT_0800af44) >> 0x20);\n    lower_half_2 = (undefined4)FUNC_08008640((int)upper_half_2, (int)((ulonglong)upper_half_2 >> 0x20), upper_half, upper_half);\n    upper_half_3 = (undefined4)((ulonglong)FUNC_08008640((int)lower_half_2, (int)((ulonglong)lower_half_2 >> 0x20), DAT_0800af48, DAT_0800af4c) >> 0x20);\n    lower_half_3 = (undefined4)FUNC_08008640((int)upper_half_3, (int)((ulonglong)upper_half_3 >> 0x20), upper_half, upper_half);\n    upper_half_4 = (undefined4)((ulonglong)FUNC_08008640((int)lower_half_3, (int)((ulonglong)lower_half_3 >> 0x20), DAT_0800af50, DAT_0800af54) >> 0x20);\n    lower_half_4 = (undefined4)FUNC_08008640((int)upper_half_4, (int)((ulonglong)upper_half_4 >> 0x20), upper_half, upper_half);\n\n    if (param_5 != 0) {\n        undefined8 value_pair = FUNC_08008640(param_3, param_4, 0, DAT_0800af70);\n        value_pair = FUNC_08008640(lower_half, lower_half_2, (int)value_pair, (int)((ulonglong)value_pair >> 0x20));\n        value_pair = FUNC_080082d0((int)value_pair, (int)((ulonglong)value_pair >> 0x20), param_3, param_4);\n        value_pair = FUNC_08008640((int)value_pair, (int)((ulonglong)value_pair >> 0x20), upper_half, upper_half);\n        value_pair = FUNC_080082d0((int)value_pair, (int)((ulonglong)value_pair >> 0x20), param_3, param_4);\n        value_pair = FUNC_08008640((int)value_pair, (int)((ulonglong)value_pair >> 0x20), DAT_0800af68, DAT_0800af6c);\n        return FUNC_080082d4(param_1, input_uint, (int)value_pair, (int)((ulonglong)value_pair >> 0x20));\n    }\n    else {\n        undefined8 value_pair = FUNC_08008640(upper_half, upper_half, lower_half_4, lower_half_4);\n        value_pair = FUNC_080082d0((int)value_pair, (int)((ulonglong)value_pair >> 0x20), DAT_0800af68, DAT_0800af6c);\n        value_pair = FUNC_08008640((int)value_pair, (int)((ulonglong)value_pair >> 0x20), lower_half, lower_half_2);\n        return FUNC_080082d4((int)value_pair, (int)((ulonglong)value_pair >> 0x20), param_1, input_uint);\n    }\n}",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "calculate_result_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "process_data_items_08003a74",
                "PTR_DAT_08003b90": "data_items",
                "PTR_DAT_08003b94": "status_flags",
                "printPositionAndStatus_08004148": "print_position_and_status",
                "printMessageAndWait_080041a0": "print_message_and_wait",
                "calculate_and_print_floats_08004940": "calculate_and_print_floats",
                "set_ptr_dat_value_if_condition_met_0800587c": "set_data_item_value_if_condition_met",
                "update_data_item_if_not_zero_080058a0": "update_data_item_if_not_zero",
                "update_flag_if_condition_met_0800585c": "update_flag_if_condition_met"
            },
            "code": "void process_data_items_08003a74()\\n{\\n    byte data_item_flags;\\n    if (PTR_DAT_08003b90[2] != \"\\0\") {\\n        data_item_flags = PTR_DAT_08003b90[2];\\n        if ((data_item_flags & 0x60) != 0) {\\n            PTR_DAT_08003b90[1] = 6;\\n            if ((data_item_flags & 0x40) == 0) {\\n                printPositionAndStatus_08004148(-2);\\n            }\\n            else {\\n                printPositionAndStatus_08004148(-1);\\n                printMessageAndWait_080041a0(1);\\n                PTR_DAT_08003b90[2] &= 0xef;\\n                while ((PTR_DAT_08003b90[2] & 0x10) == 0) {}\\n            }\\n            PTR_DAT_08003b90[2] &= 0x9f;\\n        }\\n        if ((data_item_flags & 0x10) == 0) {\\n            if ((data_item_flags & 1) != 0) {\\n                calculate_and_print_floats();\\n                PTR_DAT_08003b90[2] &= 0xfe;\\n            }\\n            if ((data_item_flags & 8) != 0) {\\n                set_ptr_dat_value_if_condition_met_0800587c();\\n                PTR_DAT_08003b90[2] &= 0xf7;\\n            }\\n            if ((data_item_flags & 4) != 0) {\\n                update_data_item_if_not_zero();\\n                PTR_DAT_08003b90[2] &= 0xfb;\\n            }\\n            if ((data_item_flags & 2) != 0) {\\n                update_flag_if_condition_met_0800585c();\\n                if ((PTR_DAT_08003b90[36] & 2) != 0) {\\n                    PTR_DAT_08003b90[16] = 1;\\n                }\\n                PTR_DAT_08003b90[2] &= 0xfd;\\n            }\\n        }\\n        else {\\n            *PTR_DAT_08003b90 = 1;\\n        }\\n    }\\n    return;\\n}",
            "called": [
                "FUN_080058a0",
                "FUN_08004940",
                "FUN_08004148",
                "FUN_0800587c",
                "FUN_0800585c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "FUN_08002fd4",
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08002408",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_data_items_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "FUNC_08005cec"
            },
            "code": "\nundefined4 FUNC_08005cec(uint *param_1)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  \n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (param_1[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      *DAT_08005fb0 = (char)param_1[1];\n      if (param_1[1] == 1) {\n        iVar1 = get_value_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          uVar2 = get_value_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = get_value_from_pointer_08005a84();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          uVar2 = get_value_from_pointer_08005a84();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (param_1[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (param_1[3] == 0) {\n      *DAT_08005fb4 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08005fac & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac = param_1[4] << (uVar2 & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[5] == 0) {\n      *DAT_08005fb8 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    iVar1 = get_value_from_pointer_08005a84();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      uVar2 = get_value_from_pointer_08005a84();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    iVar1 = get_value_from_pointer_08005a84();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      uVar2 = get_value_from_pointer_08005a84();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    *DAT_08006184 = (char)param_1[2];\n    if (param_1[2] == 1) {\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param_1[6] != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return 1;\n    }\n    if (param_1[6] == 2) {\n      *DAT_08006188 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      uVar2 = count_leading_zeroes(0x3fe0000);\n      uVar3 = count_leading_zeroes(0xc000);\n      uVar4 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           param_1[0xb] << (uVar4 & 0xff) |\n           param_1[8] | param_1[9] << (uVar2 & 0xff) | (param_1[10] >> 1) - 1 << (uVar3 & 0xff) |\n           param_1[7] | 0x20000000;\n      *DAT_08006188 = 1;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      iVar1 = get_value_from_pointer_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        uVar2 = get_value_from_pointer_08005a84();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "FUNC_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "FUN_08006b00": "set_byte_at_address_08006b00",
                "param_1": "address",
                "param_2": "value",
                "*(char *)((param_1 & 0xf) + DAT_08006b4c + 0x14)": "ptr",
                "*(char *)((char)param_1 + DAT_08006b50 + 0x300)": "ptr"
            },
            "code": "void set_byte_at_address_08006b00(byte address, uint value) {\n  if (address < 0) {\n    char* *(char *)((param_1 & 0xf) + DAT_08006b4c + 0x14) = (char*)((address & 0xf) + DAT_08006b4c + 0x14);\n    **(char *)((param_1 & 0xf) + DAT_08006b4c + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    char* *(char *)((param_1 & 0xf) + DAT_08006b4c + 0x14) = (char*)(address + DAT_08006b50 + 0x300);\n    **(char *)((param_1 & 0xf) + DAT_08006b4c + 0x14) = (char)((value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006c9c"
            ],
            "imported": false,
            "current_name": "set_byte_at_address_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "FUN_0800b4d0": "insert_data_if_flag_not_set_0800b4d0",
                "DAT_0800b4dc": "flag",
                "PTR_LAB_0800b4f0_1_0800b4e0": "data_ptr",
                "insert_data_0800b524": "insert_data"
            },
            "code": "void insert_data_if_flag_not_set_0800b4d0(void)\n{\n    if (DAT_0800b4dc != 0)\n    {\n        insert_data(0, PTR_LAB_0800b4f0_1_0800b4e0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_0800b524"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "insert_data_if_flag_not_set_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "FUN_08007f54": "calculate_shift_and_set_value_08007f54",
                "param_1": "value",
                "param_2": "shift_amount",
                "lVar1": "multiplied_value",
                "iVar2": "shift_amount_1",
                "iVar3": "shift_amount_2",
                "uVar4": "unused_variable",
                "constant_1": "shift_constant",
                "constant_2": "value_constant",
                "constant_3": "negative_constant"
            },
            "code": "void calculate_shift_and_set_value_08007f54(int value, int shift_amount) {\n  long long multiplied_value;\n  int shift_amount_1;\n  int shift_amount_2;\n  int constant_1 = 0x19;\n  int constant_2 = 0x32;\n  int constant_3 = -100;\n  if ((*(uint *)(value + 0xc) & 0x8000) == 0) {\n    if ((value != PTR_DAT_08008184) && (value != PTR_DAT_08008188)) {\n      shift_amount_1 = calculate_shift_amount_08006680();\n      multiplied_value = (long long)DAT_0800818c * ((long long)(uint)((int)shift_amount_1 * constant_1) / (long long)(uint)(shift_amount << 2));\n      shift_amount_2 = calculate_shift_amount_08006680((int)shift_amount_1,(int)((ulonglong)shift_amount_1 >> 0x20),(int)multiplied_value);\n      shift_amount_1 = calculate_shift_amount_08006680();\n      *(uint *)(value + 8) = (uint)((ulonglong)multiplied_value >> 0x25) << 4 | (uint)((ulonglong)DAT_0800818c * (ulonglong)(((uint)(shift_amount_2 * constant_1) / (uint)(shift_amount << 2) + (uint)((ulonglong)DAT_0800818c * ((ulonglong)(uint)(shift_amount_1 * constant_1) / (ulonglong)(uint)(shift_amount << 2)) >> 0x25) * constant_3) * 0x10 + constant_2) >> 0x25) & 0xf;\n      return;\n    }\n    shift_amount_1 = get_shift_amount_080066cc();\n    multiplied_value = (long long)DAT_0800818c * ((long long)(uint)((int)shift_amount_1 * constant_1) / (long long)(uint)(shift_amount << 2));\n    shift_amount_2 = get_shift_amount_080066cc((int)shift_amount_1,(int)((ulonglong)shift_amount_1 >> 0x20),(int)multiplied_value);\n    shift_amount_1 = get_shift_amount_080066cc();\n    *(uint *)(value + 8) = (uint)((ulonglong)multiplied_value >> 0x25) << 4 | (uint)((ulonglong)DAT_0800818c * (ulonglong)(((uint)(shift_amount_2 * constant_1) / (uint)(shift_amount << 2) + (uint)((ulonglong)DAT_0800818c * ((ulonglong)(uint)(shift_amount_1 * constant_1) / (ulonglong)(uint)(shift_amount << 2)) >> 0x25) * constant_3) * 0x10 + constant_2) >> 0x25) & 0xf;\n  }\n  else {\n    if ((value != PTR_DAT_08008184) && (value != PTR_DAT_08008188)) {\n      shift_amount_1 = calculate_shift_amount_08006680();\n      multiplied_value = (long long)DAT_0800818c * ((long long)(uint)((int)shift_amount_1 * constant_1) / (long long)(uint)(shift_amount << 1));\n      shift_amount_2 = calculate_shift_amount_08006680((int)shift_amount_1,(int)((ulonglong)shift_amount_1 >> 0x20),(int)multiplied_value);\n      shift_amount_1 = calculate_shift_amount_08006680();\n      *(uint *)(value + 8) = (uint)((ulonglong)multiplied_value >> 0x25) << 4 | (uint)((ulonglong)DAT_0800818c * (ulonglong)(((uint)(shift_amount_2 * constant_1) / (uint)(shift_amount << 1) + (uint)((ulonglong)DAT_0800818c * ((ulonglong)(uint)(shift_amount_1 * constant_1) / (ulonglong)(uint)(shift_amount << 1)) >> 0x25) * constant_3) * 0x10 + constant_2) >> 0x25) & 0xf;\n      return;\n    }\n    shift_amount_1 = get_shift_amount_080066cc();\n    multiplied_value = (long long)DAT_0800818c * ((long long)(uint)((int)shift_amount_1 * constant_1) / (long long)(uint)(shift_amount << 1));\n    shift_amount_2 = get_shift_amount_080066cc((int)shift_amount_1,(int)((ulonglong)shift_amount_1 >> 0x20),(int)multiplied_value);\n    shift_amount_1 = get_shift_amount_080066cc();\n    *(uint *)(value + 8) = (uint)((ulonglong)multiplied_value >> 0x25) << 4 | (uint)((ulonglong)DAT_0800818c * (ulonglong)(((uint)(shift_amount_2 * constant_1) / (uint)(shift_amount << 1) + (uint)((ulonglong)DAT_0800818c * ((ulonglong)(uint)(shift_amount_1 * constant_1) / (ulonglong)(uint)(shift_amount << 1)) >> 0x25) * constant_3) * 0x10 + constant_2) >> 0x25) & 0xf;\n  }\n}",
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "calculate_shift_and_set_value_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "FUN_08003b98": "process_input_08003b98",
                "*param_1": "input_string",
                "bVar1": "first_byte",
                "iVar2": "result",
                "uVar3": "significant_bits",
                "uVar4": "return_value",
                "uVar5": "double_precision_number",
                "local_14": "value2",
                "local_10": "value1",
                "local_a": "index",
                "local_9": "string_index",
                "PTR_DAT_08003f2c": "flag",
                "PTR_DAT_08003f30": "data",
                "printFloatsIfValid_080044e8": "print_valid_floats",
                "print_settings_08004250": "print_settings",
                "set_flag_and_check_condition_080025e8": "set_flag_and_check_condition",
                "printMessageAndWait_080041a0": "print_message_and_wait",
                "process_input_and_print_results_080046d0": "process_input_and_print_results",
                "process_data_and_update_flag_if_condition_met_080024c4": "process_data_and_update_flag_if_condition_met",
                "validate_and_print_strings_080039bc": "validate_and_print_strings",
                "validate_and_store_string_08004d2c": "validate_and_store_string",
                "process_input_and_wait_for_bits_to_be_set_08004900": "process_input_and_wait_for_bits_to_be_set",
                "printErrorMessage_08004030": "print_error_message",
                "calculate_08008590": "calculate",
                "calculate_double_precision_number_08009798": "calculate_double_precision_number",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "extract_significant_bits_08009278": "extract_significant_bits"
            },
            "code": "uint process_input_08003b98(char *input_string)\n{\n    byte first_char = input_string[0];\n    int value1, value2, result;\n    uint return_value;\n    byte local_a = 1;\n    byte local_9 = 0;\n    if (first_char != '$') {\n        return FUNC_080005b4(input_string);\n    }\n    byte second_char = input_string[1];\n    switch (second_char) {\n        case 0x23:\n            local_a = 2;\n            if (input_string[2] != '\\0') {\n                return 3;\n            }\n            print_valid_floats();\n            break;\n        case 0x24:\n            local_a = 2;\n            if (input_string[2] != '\\0') {\n                return 3;\n            }\n            print_settings();\n            break;\n        case 0x43:\n            local_a = 2;\n            if (input_string[2] != '\\0') {\n                return 3;\n            }\n            if (PTR_DAT_08003f2c[1] == '\\a') {\n                set_flag_and_check_condition_080025e8();\n                printMessageAndWait_080041a0(5);\n            }\n            else {\n                if (PTR_DAT_08003f2c[1] != '\\0') {\n                    return 0xb;\n                }\n                PTR_DAT_08003f2c[1] = 7;\n                printMessageAndWait_080041a0(4);\n            }\n            break;\n        case 0x47:\n            local_a = 2;\n            if (input_string[2] != '\\0') {\n                return 3;\n            }\n            process_input_08003b98_and_print_results();\n            break;\n        case 0x48:\n            if ((PTR_DAT_08003f30[0x28] & 0x10) == 0) {\n                return 7;\n            }\n            if ((PTR_DAT_08003f2c[1] != '\\0') && (PTR_DAT_08003f2c[1] != '\\x06')) {\n                return 0xb;\n            }\n            process_PTR_DAT_08003f30_and_update_PTR_DAT_08003f2c_if_condition_met();\n            if (*PTR_DAT_08003f2c == '\\0') {\n                validate_and_print_strings();\n            }\n            break;\n        case 0x4e:\n            local_a = 2;\n            if (input_string[2] == '\\0') {\n                for (local_9 = 0; local_9 < 2; local_9++) {\n                    result = validate_and_store_string(local_9, input_string);\n                    if (result == 0) {\n                        printErrorMessage_08004030(10);\n                    }\n                    else {\n                        process_input_08003b98_and_wait_for_bits_to_be_set_08004900(local_9, input_string);\n                    }\n                }\n                return 0;\n            }\n            local_9 = 1;\n            break;\n        case 0x58:\n            local_a = 2;\n            if (input_string[2] != '\\0') {\n                return 3;\n            }\n            if (PTR_DAT_08003f2c[1] == '\\x06') {\n                printMessageAndWait_080041a0(3);\n                PTR_DAT_08003f2c[1] = 0;\n            }\n            break;\n        default:\n            if ((second_char > 0x58) || (second_char < 0x23)) {\n                return 3;\n            }\n            local_a = 1;\n            value1 = parse_integer_from_string(input_string, &local_a, &value2);\n            if (value1 == 0) {\n                return 1;\n            }\n            byte equal_char = input_string[local_a];\n            local_a++;\n            if (local_9 == 0) {\n                value1 = parse_integer_from_string(input_string, &local_a, &result);\n                if (value1 == 0) {\n                    return 1;\n                }\n                if (equal_char != '=') {\n                    return 3;\n                }\n                if (input_string[local_a] == '\\0') {\n                    uint significant_bits = extract_significant_bits_08009278(result);\n                    return_value = FUNC_08004e30(significant_bits, value2);\n                    return return_value;\n                }\n                return 3;\n            }\n            do {\n                input_string[(uint)local_a - (uint)local_9] = input_string[local_a];\n                return_value = local_a;\n                local_a++;\n            } while (input_string[return_value] != '\\0');\n            local_9 = value1;\n            result = FUNC_080005b4(input_string);\n            if (result != 0) {\n                return (uint)result;\n            }\n            long long double_precision_number = calculate_08008590(input_string, value2);\n            long long shifted_value = calculate_double_precision_number_08009798(double_precision_number);\n            byte stored_value = calculate_shifted_value_08008bf0(shifted_value);\n            store_value_with_checksum(stored_value, input_string);\n            break;\n    }\n    return 0;\n}\n",
            "called": [
                "FUN_080046d0",
                "FUN_08008590",
                "FUN_08004bc0",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_08009278",
                "FUN_08002638",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_08004250",
                "FUN_08004d2c",
                "FUN_080005b4",
                "FUN_08009798",
                "FUN_080024c4",
                "FUN_080041a0",
                "FUN_08004900",
                "FUN_080044e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "process_input_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "FUN_080024c4": "process_data_and_update_flag_if_condition_met_080024c4",
                "PTR_DAT_080025d8": "flag_data",
                "PTR_DAT_080025dc": "flag_result",
                "PTR_DAT_080025e0": "memory",
                "PTR_DAT_080025e4": "data_items",
                "calculate_hash_08008e44": "calculate_hash",
                "FUNC_08008eec": "update_hash",
                "processDataItemsAndUpdateFlagIfConditionMet_08001e98": "process_data_items_and_update_flag",
                "update_flag_if_condition_met_0800585c": "update_flag_if_condition_met",
                "process_data_until_flag_set_08002fd4": "process_data_until_flag_set",
                "store_and_calculate_hashes_0800283a": "store_and_calculate_hashes"
            },
            "code": "void process_data_and_update_flag_if_condition_met_080024c4(void)\n{\n  int flag = PTR_DAT_080025d8[0];\n  int* PTR_DAT_080025e4 = (int*) PTR_DAT_080025e4;\n  int data_item_count = PTR_DAT_080025d8[1];\n  int flags = *(ushort*)(PTR_DAT_080025e4 + 10);\n  int local_11 = (flags & 0x20) ? 1 : -1;\n  int local_12 = (flags & 0x80) ? 1 : -1;\n  int local_13 = (flags & 0x200) ? 1 : -1;\n  if (flag == 0) {\n    fill_PTR_DAT_080025e0_with_value_0800b430(PTR_DAT_080025e0,0,0xc);\n    int hash1 = calculate_hash_08008e44(local_11);\n    hash1 = FUNC_08008eec(hash1,*(int*)(PTR_DAT_080025e4 + 14));\n    int hash2 = calculate_hash_08008e44(local_12);\n    hash2 = FUNC_08008eec(hash2,*(int*)(PTR_DAT_080025e4 + 14));\n    int hash3 = calculate_hash_08008e44(local_13);\n    hash3 = FUNC_08008eec(hash3,*(int*)(PTR_DAT_080025e4 + 14));\n    processDataItemsAndUpdateFlagIfConditionMet_08001e98(hash1,hash2,hash3,*(int*)(PTR_DAT_080025e4 + 12),0);\n    update_flag_if_condition_met_0800585c();\n    process_data_until_flag_set_08002fd4();\n    store_and_calculate_hashes_0800283a();\n    if ((PTR_DAT_080025e4[10] & 8) != 0) {\n      *(int*)PTR_DAT_080025dc = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002fd4",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_0800585c",
                "FUN_0800b430",
                "FUN_08008eec",
                "FUN_08003a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_and_update_flag_if_condition_met_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "FUN_08002f40": "update_if_different_08002f40",
                "PTR_DAT_08002f6c": "current_value_ptr",
                "PTR_DAT_08002f70": "previous_value_ptr",
                "increment_and_limit_08002870": "increment_and_limit",
                "uVar1": "incremented_value"
            },
            "code": "void update_if_different_08002f40(void)\n{\n  undefined incremented_value;\n  if (*PTR_DAT_08002f6c != *PTR_DAT_08002f70) {\n    incremented_value = increment_and_limit(*PTR_DAT_08002f70);\n    *PTR_DAT_08002f70 = incremented_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_if_different_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "FUNC_08009054"
            },
            "code": "\nuint FUNC_08009054(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  int iVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  uVar2 = param_1 >> 0x17 & 0xff;\n  bVar7 = uVar2 == 0;\n  if (!bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = param_4 == 0xff;\n  }\n  if (bVar7) {\n    param_4 = param_2 >> 0x17 & 0xff;\n    uVar6 = param_1;\n    if (uVar2 == 0xff) {\n      if (((param_1 & 0x7fffff) != 0) || (uVar6 = param_2, param_4 == 0xff)) {\nLAB_0800904a:\n        return uVar6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param_4 == 0xff) {\n        uVar6 = param_2;\n        if ((param_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (param_1 ^ param_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      bVar7 = (param_1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (param_2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = uVar2 == 0;\n        uVar6 = param_1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_1 = param_1 << 1;\n            bVar7 = (param_1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          uVar2 = uVar2 - 1;\n        }\n        param_1 = param_1 | uVar6;\n        bVar7 = param_4 == 0;\n        uVar6 = param_2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            param_2 = param_2 << 1;\n            bVar7 = (param_2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          param_4 = param_4 - 1;\n        }\n        param_2 = param_2 | uVar6;\n        goto LAB_0800906c;\n      }\n      if ((param_1 & 0x7fffffff) == 0) {\n        if ((param_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    param_1 = param_1 ^ param_2;\n  }\n  else {\nLAB_0800906c:\n    iVar3 = uVar2 - param_4;\n    if (param_2 << 9 == 0) {\n      param_1 = (param_1 ^ param_2) & 0x80000000 | param_1 & 0x7fffff;\n      bVar9 = SCARRY4(iVar3,0x7f);\n      iVar5 = iVar3 + 0x7f;\n      bVar7 = iVar5 < 0;\n      bVar8 = iVar5 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,iVar5);\n        bVar7 = 0xff - iVar5 < 0;\n        bVar8 = iVar5 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        param_1 = param_1 | iVar5 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return param_1;\n      }\n      param_1 = param_1 | 0x800000;\n      uVar2 = 0;\n      bVar8 = SBORROW4(iVar5,1);\n      uVar4 = iVar3 + 0x7e;\n      bVar7 = uVar4 == 0;\n      uVar6 = uVar4;\n    }\n    else {\n      uVar1 = (param_2 << 9) >> 4 | 0x10000000;\n      uVar2 = (param_1 << 9) >> 4 | 0x10000000;\n      param_1 = (param_1 ^ param_2) & 0x80000000;\n      bVar7 = uVar1 <= uVar2;\n      if (!bVar7) {\n        uVar2 = uVar2 << 1;\n      }\n      uVar4 = iVar3 + 0x7d + (uint)bVar7;\n      uVar6 = 0x800000;\n      do {\n        if (uVar1 <= uVar2) {\n          uVar2 = uVar2 - uVar1;\n          param_1 = param_1 | uVar6;\n        }\n        bVar7 = uVar1 >> 1 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 1);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 1;\n        }\n        bVar7 = uVar1 >> 2 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 2);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 2;\n        }\n        bVar7 = uVar1 >> 3 <= uVar2;\n        if (bVar7) {\n          uVar2 = uVar2 - (uVar1 >> 3);\n        }\n        if (bVar7) {\n          param_1 = param_1 | uVar6 >> 3;\n        }\n        uVar2 = uVar2 * 0x10;\n        bVar7 = uVar2 == 0;\n        if (!bVar7) {\n          uVar6 = uVar6 >> 4;\n          bVar7 = uVar6 == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(uVar4,0xfd);\n      bVar7 = uVar4 == 0xfd;\n      uVar6 = uVar4 - 0xfd;\n      if (uVar4 < 0xfe) {\n        param_1 = param_1 + uVar4 * 0x800000 + (uint)(uVar1 <= uVar2);\n        if (uVar2 - uVar1 == 0) {\n          param_1 = param_1 & 0xfffffffe;\n        }\n        return param_1;\n      }\n    }\n    if (bVar7 || (int)uVar6 < 0 != bVar8) {\n      bVar7 = (int)(uVar4 + 0x19) < 0;\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        param_1 = param_1 & 0x80000000;\n      }\n      if (uVar4 == 0xffffffe7 || bVar7 != SCARRY4(uVar4,0x19)) {\n        return param_1;\n      }\n      uVar6 = (param_1 << 1) >> (-uVar4 & 0xff);\n      uVar4 = param_1 << (uVar4 + 0x20 & 0xff);\n      uVar6 = ((uint)((param_1 & 0x80000000) != 0) << 0x1f | uVar6 >> 1) + (uint)((byte)uVar6 & 1);\n      if ((uVar2 | uVar4 << 1) == 0) {\n        uVar6 = uVar6 & ~(uVar4 >> 0x1f);\n      }\n      return uVar6;\n    }\n  }\n  return param_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009054",
            "calling": [
                "FUN_08004250",
                "FUN_08001994",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002908",
                "FUN_08002e08",
                "FUN_080028bc",
                "FUN_08003004",
                "FUN_08003618",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "FUNC_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "set_flag_and_check_condition_080025e8",
                "PTR_DAT_08002634": "data_pointer",
                "do_nothing_and_return_08005250": "do_nothing_and_return",
                "do_nothing_twice_08000210_08000210": "do_nothing_twice",
                "byte": "byte_type",
                "clear_bits_and_check_condition_080057e4": "clear_bits_and_check_condition",
                "flag_set": "is_flag_set",
                "condition_met": "is_condition_met"
            },
            "code": "void set_flag_and_check_condition_080025e8(void)\n{\n  bool flag_set = (PTR_DAT_08002634[2] & 0x10) == 0;\n  if (flag_set) {\n    PTR_DAT_08002634[2] |= 0x10;\n    do_nothing_and_return_08005250();\n    do_nothing_twice_08000210_08000210();\n    bool condition_met = (byte)PTR_DAT_08002634[1] - 3 < 3;\n    if (condition_met) {\n      PTR_DAT_08002634[2] |= 0x20;\n      clear_bits_and_check_condition_080057e4();\n    }\n  }\n  return;\n}\n",
            "called": [
                "FUN_08005250",
                "FUN_080057e4",
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_08003b98",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "imported": false,
            "current_name": "set_flag_and_check_condition_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "do_nothing_and_return_08005250",
                "do_nothing_08005214": "do_nothing"
            },
            "code": "void do_nothing_and_return_08005250(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08005214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_08005238"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "wait_forever_08007430"
            },
            "code": "void wait_forever_08007430(void)\n{\n  while(true){\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "wait_forever_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "FUNC_08008640"
            },
            "code": "\nulonglong FUNC_08008640(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = convert_to_double_0800881c();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008640",
            "calling": [
                "FUN_080046d0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_08009d78",
                "FUN_08003004",
                "FUN_0800056c",
                "FUN_0800b2e8",
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_0800a1bc",
                "FUN_0800a348",
                "FUN_0800a5a0",
                "FUN_0800adf0",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "FUNC_08008640"
        },
        "FUN_08007436": {
            "renaming": {
                "FUN_08007436": "initialize_app_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "var1",
                "local_30": "var2",
                "local_2c": "var3",
                "local_28": "var4",
                "local_24": "var5",
                "local_20": "var6",
                "iVar1": "status",
                "local_1c": "var7",
                "local_18": "var8",
                "local_14": "var9",
                "local_10": "var10",
                "local_c": "var11"
            },
            "code": "void initialize_app_08007436(void)\n{\n  int status;\n  uint32_t flag1 = 1;\n  uint32_t flag2 = 1;\n  uint32_t var1 = 2;\n  uint32_t var2 = 0x400000;\n  uint32_t var3 = 8;\n  uint32_t var4 = 0x150;\n  uint32_t var5 = 2;\n  uint32_t var6 = 7;\n  status = perform_action1(&flag1);\n  if (status != 0) {\n    wait_forever();\n  }\n  uint32_t var7 = 0xf;\n  uint32_t var8 = 2;\n  uint32_t var9 = 0;\n  uint32_t var10 = 0x1400;\n  uint32_t var11 = 0x1000;\n  status = perform_action2(&var7, 5);\n  if (status != 0) {\n    wait_forever();\n  }\n  return;\n}\n",
            "called": [
                "FUN_0800618c",
                "FUN_08005cec",
                "FUN_08007430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_app_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "PTR_DAT_08005834": "memory_block",
                "calculate_and_set_data_08005324": "calculate_and_set_data",
                "*flag": "flag"
            },
            "code": "void initialize_data_08005814(void)\n{\n  memset(PTR_DAT_08005834, 0, 0x24);\n  calculate_and_set_data(800);\n  *flag = 0;\n  return;\n}",
            "called": [
                "FUN_08005324",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_data_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "FUN_08005bdc": "set_data_08005bdc",
                "param_1": "data_index",
                "param_2": "data_value",
                "DAT_08005c28": "data_array_1",
                "DAT_08005c2c": "data_array_2"
            },
            "code": "void set_data_08005bdc(byte data_index, uint data_value) {\n  if (data_index < 0) {\n    char* data_ptr = (char*)((data_index & 0xf) + DAT_08005c28 + 0x14);\n    *data_ptr = (char)((data_value & 0xff) << 4);\n  }\n  else {\n    char* data_ptr = (char*)((char)data_index + DAT_08005c2c + 0x300);\n    *data_ptr = (char)((data_value & 0xff) << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "FUN_08005c30"
            ],
            "imported": false,
            "current_name": "set_data_08005bdc"
        },
        "FUN_080002f0": {
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0",
                "PTR_DAT_08000308": "PTR_MEMORY_ADDRESS",
                "0xff": "MEMORY_FILL_VALUE",
                "4": "MEMORY_FILL_SIZE",
                "*(undefined4 *)PTR_DAT_0800030c": "*(unsigned int *)PTR_FLAG_ADDRESS",
                "PTR_DAT_0800030c": "PTR_FLAG_ADDRESS"
            },
            "code": "void initialize_memory_080002f0(void)\n{\n    // Fill memory with 0xFF\n    fill_memory_with_value(PTR_DAT_08000308, 0xFF, 4);\n\n    // Set value at PTR_DAT_0800030c to 1\n    *(undefined4 *)PTR_DAT_0800030c = 1;\n}\n",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340",
                "FUN_080003ec"
            ],
            "imported": false,
            "current_name": "initialize_memory_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_0800738e"
            ],
            "imported": false,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "FUN_0800778c": "update_registers_and_set_param_values_0800778c",
                "local_24": "bit_shift",
                "local_20": "reg1",
                "local_1c": "reg2",
                "local_18": "reg3",
                "local_14": "reg4",
                "local_10": "ptr",
                "local_c": "loop_counter"
            },
            "code": "void update_registers_and_set_param_values_0800778c(void)\n{\n    int bit_shift;\n    uint mask;\n    uint reg1;\n    uint reg2;\n    uint reg3;\n    uint reg4;\n    uint reg5;\n    uint *ptr;\n    uint loop_counter;\n\n    for (loop_counter = 0; loop_counter < 0x11; loop_counter++) {\n        ptr = (uint *)(PTR_DAT_0800784c + loop_counter * 0x18);\n        mask = 1 << (*ptr >> 4 & 0xff);\n        *(uint *)(DAT_08007850 + 0x30) |= mask;\n        bit_shift = *ptr & 0xf;\n        reg1 = ptr[1];\n        reg2 = ptr[2];\n        reg3 = ptr[3];\n        reg4 = ptr[4];\n        update_registers_08006e88(((*ptr >> 4) + 0x100080) * 0x400, &(1 << bit_shift));\n        if (-1 < (int)ptr[5]) {\n            set_param_value_0800733e(((*ptr >> 4) + 0x100080) * 0x400, 1 << bit_shift & 0xffff, ptr[5] & 0xff);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "update_registers_and_set_param_values_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "FUN_08001ddc": "run_program_08001ddc",
                "PTR_DAT_08001e90": "memory",
                "PTR_DAT_08001e94": "data",
                "do_nothing_08008244": "do_nothing",
                "validate_input_and_initialize_values_080051b4": "validate_input_and_initialize_values",
                "update_parameters_and_data_0800583c": "update_parameters_and_data",
                "fill_memory_with_value_0800b430": "fill_memory_with_value",
                "initialize_values_08002f24": "initialize_values",
                "initialize_and_validate_data_080004ac": "initialize_and_validate_data",
                "initialize_program_080039a0": "initialize_program",
                "reset_pointer_to_zero_08005238": "reset_pointer_to_zero",
                "initialize_pointer_080001f8": "initialize_pointer",
                "check_flag_status_0800192c": "check_flag_status",
                "initialize_data_08005814": "initialize_data",
                "store_and_calculate_hashes_0800283a": "store_and_calculate_hashes",
                "printMessageAndWait_080041a0": "print_message_and_wait",
                "validate_and_print_strings_080039bc": "validate_and_print_strings",
                "process_data_items_08003a74": "process_data_items",
                "process_input_data_08003f34": "process_input_data"
            },
            "code": "void run_program_08001ddc(void) {\n  do_nothing_08008244();\n  validate_input_and_initialize_values_08002f24();\n  update_parameters_and_data_0800583c();\n  fill_memory_with_value_0800b430(PTR_DAT_08001e90, 0, 20);\n  *PTR_DAT_08001e90 = 1;\n  PTR_DAT_08001e90[1] = 1;\n  do {\n    if (*PTR_DAT_08001e90 != '\\0') {\n      do_nothing_08008244();\n      initialize_values_08002f24();\n      initialize_and_validate_PTR_DAT_08001e94();\n      initialize_program_080039a0();\n      reset_pointer_to_zero_08005238();\n      initialize_pointer_080001f8();\n      check_flag_status_0800192c();\n      initialize_data_08005814();\n      store_and_calculate_hashes_0800283a();\n      *PTR_DAT_08001e90 = 0;\n      PTR_DAT_08001e90[2] = 0;\n      if ((PTR_DAT_08001e90[4] & 2) != 0) {\n        PTR_DAT_08001e90[16] = 1;\n      }\n      if ((PTR_DAT_08001e90[1] == '\\x01') && ((PTR_DAT_08001e90[4] & 0x10) != 0)) {\n        PTR_DAT_08001e90[1] = 6;\n      }\n      if (PTR_DAT_08001e90[1] == '\\x06') {\n        printMessageAndWait_080041a0(2);\n      }\n      else {\n        PTR_DAT_08001e90[1] = 0;\n        validate_and_print_strings();\n      }\n    }\n    process_PTR_DAT_08001e94_items();\n    process_input_PTR_DAT_08001e94();\n  } while(true);\n}",
            "called": [
                "FUN_080039a0",
                "FUN_0800283a",
                "FUN_080039bc",
                "FUN_0800583c",
                "FUN_080001f8",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_08005814",
                "FUN_0800b430",
                "FUN_08002f24",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_08005238",
                "FUN_0800192c",
                "FUN_080041a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "run_program_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "FUN_080069b4": "set_bit_in_array_080069b4",
                "param_1": "bit_index",
                "DAT_080069e0": "array_start"
            },
            "code": "void set_bit_in_array_080069b4(int bit_index) {\n    int array_index = (uint)(int)(char)bit_index >> 5;\n    int* array_ptr = (int*)(DAT_080069e0 + array_index * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "FUN_08006d2e"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080069b4"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "is_end_of_input_reached_08009228",
                "in_CY": "current_character",
                "concatenate_parameters_08009204": "concatenate_input_parameters"
            },
            "code": "bool is_end_of_input_reached_08009228(void)\n{\n  char current_character;\n  concatenate_input_parameters();\n  return current_character == '\\0';\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08003826",
                "FUN_080029d8",
                "FUN_08003004",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "is_end_of_input_reached_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "update_parameters_if_flags_set_08007c7c",
                "_DAT_40000010": "ptr_control_register",
                "_DAT_4000000c": "ptr_control_flag",
                "update_parameter_from_pointer_08005778": "update_parameter_from_pointer",
                "update_parameter_08005760": "update_parameter",
                "FUNC_080053a0": "execute_function"
            },
            "code": "void update_parameters_if_flags_set_08007c7c(void)\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_parameter_from_pointer();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_parameter();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    execute_function();\n  }\n  return;\n}",
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": false,
            "current_name": "update_parameters_if_flags_set_08007c7c"
        },
        "FUN_08007b70": {
            "renaming": {
                "FUN_08007b70": "set_data_flags_08007b70",
                "local_c": "data_flags",
                "_DAT_40000034": "ptr_data_flag_1",
                "_DAT_40000038": "ptr_data_flag_2",
                "_DAT_4000000c": "ptr_data_flags",
                "_DAT_40000000": "ptr_data_flag_3"
            },
            "code": "void set_data_flags_08007b70(void)\n{\n  uint32_t data_flags = 1;\n  if (_DAT_40000034 != 0) {\n    data_flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    data_flags |= 4;\n  }\n  _DAT_4000000c |= data_flags;\n  _DAT_40000000 |= 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_data_flags_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "FUN_08004d2c": "validate_and_store_string_08004d2c",
                "param_1": "string_length",
                "param_2": "string_buffer",
                "iVar1": "validation_result",
                "*param_2": "*string_buffer",
                "store_value_with_checksum_08004bc0": "store_value_with_checksum",
                "validate_string_080003ec": "validate_string"
            },
            "code": "bool validate_and_store_string_08004d2c(byte string_length, undefined *string_buffer)\n{\n    int validation_result = validate_string_080003ec(string_buffer, (ushort)string_length * 0x101 + 0x300, 0x100);\n    if (validation_result == 0)\n    {\n        *string_buffer = 0;\n        store_value_with_checksum_08004bc0(string_length, string_buffer);\n    }\n    return validation_result != 0;\n}",
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "validate_and_store_string_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "FUNC_08003004"
            },
            "code": "\nvoid FUNC_08003004(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 char param_5)\n\n{\n  undefined *puVar1;\n  undefined uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined4 uVar10;\n  uint uVar11;\n  ushort *puVar12;\n  int iVar13;\n  uint uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  undefined4 local_20;\n  undefined4 local_1c;\n  \n  puVar12 = (ushort *)(PTR_DAT_08003234 + (uint)(byte)*PTR_DAT_08003230 * 0x40);\n  uVar3 = FUNC_08008eec(*(undefined4 *)PTR_DAT_08003238,param_1);\n  uVar15 = calculate_08008590(uVar3);\n  iVar4 = convert_to_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 4),param_2);\n  uVar15 = calculate_08008590(uVar3);\n  iVar5 = convert_to_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  uVar3 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 8),param_3);\n  uVar15 = calculate_08008590(uVar3);\n  iVar6 = convert_to_fixed_point_080095b8((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n  *puVar12 = 0;\n  if (iVar4 < *(int *)PTR_DAT_0800323c) {\n    *puVar12 = *puVar12 | 0x20;\n  }\n  if (iVar5 < *(int *)(PTR_DAT_0800323c + 4)) {\n    *puVar12 = *puVar12 | 0x880;\n  }\n  if (iVar6 < *(int *)(PTR_DAT_0800323c + 8)) {\n    *puVar12 = *puVar12 | 0x200;\n  }\n  iVar13 = iVar4 - *(int *)PTR_DAT_0800323c;\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 2) = iVar13;\n  iVar13 = iVar5 - *(int *)(PTR_DAT_0800323c + 4);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 4) = iVar13;\n  iVar13 = iVar6 - *(int *)(PTR_DAT_0800323c + 8);\n  if (iVar13 < 0) {\n    iVar13 = -iVar13;\n  }\n  *(int *)(puVar12 + 6) = iVar13;\n  uVar11 = *(uint *)(puVar12 + 6);\n  if (*(uint *)(puVar12 + 6) < *(uint *)(puVar12 + 4)) {\n    uVar11 = *(uint *)(puVar12 + 4);\n  }\n  uVar14 = *(uint *)(puVar12 + 2);\n  if (*(uint *)(puVar12 + 2) < uVar11) {\n    uVar14 = uVar11;\n  }\n  *(uint *)(puVar12 + 8) = uVar14;\n  if (*(int *)(puVar12 + 8) != 0) {\n    uVar3 = calculate_hash_08008e44(iVar4 - *(int *)PTR_DAT_0800323c);\n    uVar3 = FUNC_08009054(uVar3,*(undefined4 *)PTR_DAT_08003238);\n    uVar7 = calculate_hash_08008e44(iVar5 - *(int *)(PTR_DAT_0800323c + 4));\n    uVar7 = FUNC_08009054(uVar7,*(undefined4 *)(PTR_DAT_08003238 + 4));\n    uVar8 = calculate_hash_08008e44(iVar6 - *(int *)(PTR_DAT_0800323c + 8));\n    uVar8 = FUNC_08009054(uVar8,*(undefined4 *)(PTR_DAT_08003238 + 8));\n    uVar9 = FUNC_08008eec(uVar3,uVar3);\n    uVar10 = FUNC_08008eec(uVar7,uVar7);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar10 = FUNC_08008eec(uVar8,uVar8);\n    uVar9 = FUNC_08008cdc(uVar9,uVar10);\n    uVar15 = calculate_08008590(uVar9);\n    uVar15 = check_input_and_return_result_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar9 = CalculateFloat_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x10) = uVar9;\n    uVar9 = FUNC_08009054(0x3f800000,*(undefined4 *)(puVar12 + 0x10));\n    if (param_5 == '\\0') {\n      local_1c = FUNC_08008eec(param_4,uVar9);\n    }\n    else {\n      local_1c = FUNC_08009054(0x3f800000,param_4);\n    }\n    uVar10 = FUNC_08008eec(*(undefined4 *)(puVar12 + 0x10),local_1c);\n    *(undefined4 *)(puVar12 + 10) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,local_1c);\n    uVar15 = calculate_08008590(uVar10);\n    uVar15 = calculate_value_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = calculate_shifted_value_08008bf0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x1e) = uVar10;\n    uVar10 = calculate_hash_08008e44(*(undefined4 *)(puVar12 + 8));\n    uVar10 = FUNC_08008eec(uVar10,uVar9);\n    uVar10 = FUNC_08008eec(uVar10,*(undefined4 *)(PTR_DAT_08003560 + 0x20));\n    uVar10 = FUNC_08009054(uVar10,DAT_08003564);\n    uVar15 = calculate_08008590(uVar10);\n    uVar15 = calculate_value_08009318((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    uVar10 = convert_to_signed_fixed_point_08008ba0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n    *(undefined4 *)(puVar12 + 0x18) = uVar10;\n    uVar3 = FUNC_08008eec(uVar3,uVar9);\n    uVar7 = FUNC_08008eec(uVar7,uVar9);\n    uVar8 = FUNC_08008eec(uVar8,uVar9);\n    local_20 = 0;\n    if ((*PTR_DAT_08003568 != *PTR_DAT_0800356c) &&\n       (iVar13 = is_end_of_string_08009264(*(undefined4 *)(PTR_DAT_08003570 + 0x18),0), iVar13 != 0)) {\n      uVar9 = FUNC_08008eec(*(uint *)(PTR_DAT_08003570 + 0xc) ^ 0x80000000,uVar3);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x10),uVar7);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x14),uVar8);\n      uVar9 = FUNC_08008cd8(uVar9,uVar10);\n      uVar15 = calculate_08008590(uVar9);\n      iVar13 = is_end_of_string_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003550,DAT_08003554);\n      if (iVar13 != 0) {\n        iVar13 = is_end_of_input_reached_08009228(*(undefined4 *)(PTR_DAT_08003570 + 0x18),*(undefined4 *)(puVar12 + 10)\n                             );\n        if (iVar13 == 0) {\n          local_20 = *(undefined4 *)(puVar12 + 10);\n        }\n        else {\n          local_20 = *(undefined4 *)(PTR_DAT_08003570 + 0x18);\n        }\n        uVar15 = calculate_08008590(uVar9);\n        iVar13 = is_end_of_input_08008b60((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08003558,DAT_0800355c\n                             );\n        if (iVar13 != 0) {\n          uVar15 = calculate_08008590(uVar9);\n          uVar15 = FUNC_080082d0(0,DAT_08003574,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = FUNC_08008640((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,DAT_08003578);\n          uVar15 = check_input_and_return_result_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar9 = CalculateFloat_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          uVar15 = calculate_08008590(local_20);\n          uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n          uVar10 = FUNC_08008eec(uVar10,uVar9);\n          uVar16 = calculate_08008590(uVar10);\n          uVar17 = calculate_08008590(uVar9);\n          uVar17 = FUNC_080082d0(0,DAT_08003574,(int)uVar17,(int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = FUNC_08008894((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                (int)((ulonglong)uVar17 >> 0x20));\n          uVar16 = check_input_and_return_result_080098d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n          iVar13 = is_end_of_string_08008b24((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                (int)((ulonglong)uVar16 >> 0x20));\n          if (iVar13 == 0) {\n            uVar10 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n            uVar10 = FUNC_08008eec(uVar10,uVar9);\n            uVar15 = calculate_08008590(uVar10);\n            uVar16 = calculate_08008590(uVar9);\n            uVar16 = FUNC_080082d0(0,DAT_08003574,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = FUNC_08008894((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                  (int)((ulonglong)uVar16 >> 0x20));\n            uVar15 = check_input_and_return_result_080098d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n            local_20 = CalculateFloat_08008c30((int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(puVar12 + 0xe) = local_20;\n    uVar10 = calculate_result_08002978(*(uint *)(PTR_DAT_08003560 + 0x20) ^ 0x80000000,0,\n                          *(undefined4 *)(puVar12 + 0x10));\n    iVar13 = is_end_of_input_reached_08009228(local_20,uVar10);\n    uVar9 = uVar10;\n    if (iVar13 != 0) {\n      uVar9 = local_20;\n    }\n    *(undefined4 *)(puVar12 + 0xc) = uVar9;\n    iVar13 = check_params_for_concatenation_08009250(uVar10,*(undefined4 *)(puVar12 + 10));\n    if (iVar13 == 0) {\n      *(undefined *)((int)puVar12 + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)puVar12 + 0x25) = 1;\n    }\n    *(undefined *)(puVar12 + 0x12) = 1;\n    puVar1 = PTR_DAT_080035e0;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0xc) = uVar3;\n    *(undefined4 *)(puVar1 + 0x10) = uVar7;\n    *(undefined4 *)(puVar1 + 0x14) = uVar8;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0x18) = *(undefined4 *)(puVar12 + 10);\n    *PTR_DAT_080035e8 = *PTR_DAT_080035e4;\n    uVar2 = increment_and_limit_08002870(*PTR_DAT_080035e8);\n    *PTR_DAT_080035e4 = uVar2;\n    puVar1 = PTR_DAT_080035e0;\n    *(int *)PTR_DAT_080035e0 = iVar4;\n    *(int *)(puVar1 + 4) = iVar5;\n    *(int *)(puVar1 + 8) = iVar6;\n    process_data_items_08002edc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08009250",
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_08008b24",
                "FUN_08008bf0",
                "FUN_08009264",
                "FUN_08009228",
                "FUN_08002870",
                "FUN_08002978",
                "FUN_08008cdc",
                "FUN_08002edc",
                "FUN_080082d0",
                "FUN_08008c30",
                "FUN_08008e44",
                "FUN_08008ba0",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003004",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "FUNC_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "FUN_080066cc": "get_shift_amount_080066cc",
                "FUNC_08006628": "get_func_result",
                "PTR_DAT_08006714": "ptr_dat",
                "DAT_08006710": "dat",
                "uVar1": "func_result",
                "uVar2": "leading_zeroes",
                "shift_amount": "shift_amount",
                "count_leading_zeroes": "count_leading_zeroes",
                "mask": "mask",
                "dat_value": "dat_value",
                "masked_dat_value": "masked_dat_value"
            },
            "code": "uint get_shift_amount_080066cc(void)\n{\n  uint shift_amount;\n  uint func_result = get_func_result();\n  uint leading_zeroes = count_leading_zeroes(0x70000);\n  uint* PTR_DAT_08006714 = PTR_DAT_08006714;\n  uint* DAT_08006710 = DAT_08006710;\n  uint DAT_08006710_value = *(uint *)(DAT_08006710 + 8);\n  uint mask = 0xe000;\n  uint masked_DAT_08006710_value = DAT_08006710_value & mask;\n  shift_amount = masked_DAT_08006710_value >> (leading_zeroes & 0xff);\n  return func_result >> PTR_DAT_08006714[shift_amount];\n}",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "get_shift_amount_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "FUN_080018fc": "update_parameter_080018fc",
                "param_1": "new_param",
                "DAT_08001928": "data_section",
                "PTR_": "ptr",
                "current_value": "current_value",
                "mask": "mask"
            },
            "code": "void update_parameter_080018fc(uint new_param) {\n\tuint* PTR_ = (uint*)(DAT_08001928 + 0x14);\n\tuint current_value = *PTR_;\n\tuint mask = 0xfffff55f;\n\t*PTR_ = (new_param | (current_value & mask));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "update_parameter_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "FUN_080039bc": "validate_and_print_strings_080039bc",
                "iVar1": "validation_result",
                "uVar2": "error_code",
                "local_9": "string_index",
                "validate_and_store_string_08004d2c": "validate_and_store_string",
                "PTR_DAT_08003a14": "string_pointer",
                "printErrorMessage_08004030": "print_error_message",
                "wait_until_all_bits_are_set_0800369c": "wait_until_all_bits_are_set",
                "FUNC_080005b4": "get_error_code"
            },
            "code": "void validate_and_print_strings_080039bc(void)\\n{\\n  int validation_result;\\n  undefined4 error_code;\\n  byte string_index;\\n  for (string_index = 0; string_index < 2; string_index++) {\\n    validation_result = validate_and_store_string(PTR_DAT_08003a14, string_index);\\n    if (validation_result == 0) {\\n      printErrorMessage_08004030(10);\\n    }\\n    else if (*PTR_DAT_08003a14 != \"\\0\") {\\n      wait_until_all_bits_are_set_0800369c(PTR_DAT_08003a14);\\n      error_code = FUNC_080005b4(PTR_DAT_08003a14);\\n      printErrorMessage_08004030(error_code);\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08004d2c",
                "FUN_0800369c",
                "FUN_080005b4",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "validate_and_print_strings_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "FUN_0800618c": "verify_and_update_0800618c",
                "param_1": "param_array",
                "param_2": "array_size",
                "lVar1": "product",
                "iVar2": "i",
                "uVar3": "value",
                "uVar4": "threshold",
                "uVar5": "random_value",
                "*DAT_08006400": "*PTR_DAT_08006400",
                "*DAT_08006404": "*PTR_DAT_08006404",
                "get_value_from_pointer_08005a84": "get_random_value",
                "DAT_08006404[2]": "PTR_DAT_08006404[2]",
                "DAT_08006404[2] & 0xfffffffc": "PTR_DAT_08006404[2] & 0xfffffffc",
                "DAT_08006404[2] & 0xffffe3ff": "PTR_DAT_08006404[2] & 0xffffe3ff",
                "DAT_08006404[2] & 0xffff1fff": "PTR_DAT_08006404[2] & 0xffff1fff",
                "DAT_08006404[2] & 0xffffff0f": "PTR_DAT_08006404[2] & 0xffffff0f",
                "DAT_08006404[2] | param_array[1]": "PTR_DAT_08006404[2] | param_array[1]",
                "DAT_08006404[2] | param_array[2]": "PTR_DAT_08006404[2] | param_array[2]",
                "DAT_08006404[2] | (param_array[4] << 3)": "PTR_DAT_08006404[2] | (param_array[4] << 3)",
                "DAT_08006408": "PTR_DAT_08006408",
                "is_param_less_than_one_million_08005c30": "check_if_param_less_than_one_million"
            },
            "code": "int verify_and_update_0800618c(uint *param_array, uint array_size) {\n  long long product;\n  int i;\n  uint value;\n  uint threshold;\n  \n  if ((*DAT_08006400 & 0xf) < array_size) {\n    *(char *)PTR_DAT_08006400 = (char)array_size;\n    if (array_size != (*DAT_08006400 & 0xf)) {\n      return 1;\n    }\n    if ((*param_array & 1) != 0) {\n      if (param_array[1] == 1) {\n        if ((*DAT_08006404 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((param_array[1] != 2) && ((*DAT_08006404 & 2) == 0)) {\n        return 1;\n      }\n      DAT_08006404[2] = param_array[1] | DAT_08006404[2] & 0xfffffffc;\n      threshold = get_value_from_pointer_08005a84() + 5000;\n      if (param_array[1] == 1) {\n        while ((DAT_08006404[2] & 0xc) != 4) {\n          value = get_value_from_pointer_08005a84();\n          if (threshold <= value) {\n            return 3;\n          }\n        }\n      }\n      else if (param_array[1] == 2) {\n        while ((DAT_08006404[2] & 0xc) != 8) {\n          value = get_value_from_pointer_08005a84();\n          if (threshold <= value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((DAT_08006404[2] & 0xc) != 0) {\n          value = get_value_from_pointer_08005a84();\n          if (threshold <= value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*param_array & 1) != 0) {\n      if (param_array[1] == 1) {\n        if ((*DAT_08006404 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (param_array[1] == 2) {\n        if ((*DAT_08006404 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((*DAT_08006404 & 2) == 0) {\n        return 1;\n      }\n      DAT_08006404[2] = param_array[1] | DAT_08006404[2] & 0xfffffffc;\n      threshold = get_value_from_pointer_08005a84() + 5000;\n      if (param_array[1] == 1) {\n        while ((DAT_08006404[2] & 0xc) != 4) {\n          value = get_value_from_pointer_08005a84();\n          if (threshold <= value) {\n            return 3;\n          }\n        }\n      }\n      else if (param_array[1] == 2) {\n        while ((DAT_08006404[2] & 0xc) != 8) {\n          value = get_value_from_pointer_08005a84();\n          if (threshold <= value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((DAT_08006404[2] & 0xc) != 0) {\n          value = get_value_from_pointer_08005a84();\n          if (threshold <= value) {\n            return 3;\n          }\n        }\n      }\n    }\n    *(char *)PTR_DAT_08006400 = (char)array_size;\n    if (array_size != (*DAT_08006400 & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*param_array & 2) != 0) {\n    DAT_08006404[2] = param_array[2] | DAT_08006404[2] & 0xffffff0f;\n  }\n  if ((*param_array & 4) != 0) {\n    DAT_08006404[2] = param_array[3] | DAT_08006404[2] & 0xffffe3ff;\n  }\n  if ((*param_array & 8) != 0) {\n    DAT_08006404[2] = param_array[4] << 3 | DAT_08006404[2] & 0xffff1fff;\n  }\n  product = (long long)DAT_08006408 * (FUNC_08006628() & 0xffffffff);\n  is_param_less_than_one_million_08005c30((uint)(product >> 0x26),(int)(FUNC_08006628() >> 0x20),(int)product);\n  return 0;\n}",
            "called": [
                "FUN_08006628",
                "FUN_08005c30",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "verify_and_update_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_bitmask_08006998",
                "DAT_080069b0": "PTR_data"
            },
            "code": "uint get_bitmask_08006998(void)\n{\n    uint bitmask = *(uint *)(DAT_080069b0 + 0xc);\n    uint shifted_bitmask = bitmask >> 8;\n    uint masked_bitmask = shifted_bitmask & 7;\n    return masked_bitmask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "imported": false,
            "current_name": "get_bitmask_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "FUN_080004ac": "initialize_and_validate_data_080004ac",
                "PTR_DAT_080004f0": "data_buffer",
                "PTR_DAT_080004f4": "data_buffer_2",
                "PTR_DAT_080004f8": "checksum_data",
                "validate_and_calculate_checksum_08004d7c": "validate_and_calculate_checksum",
                "printErrorMessage_08004030": "print_error_message"
            },
            "code": "void initialize_and_validate_data_080004ac(void)\n{\n  int validation_result;\n  fill_memory_with_value(PTR_DAT_080004f0, 0, 0x38);\n  *(undefined4 *)(PTR_DAT_080004f0 + 8) = *(undefined4 *)(PTR_DAT_080004f0 + 0x10);\n  set_data_params(0, 1, 2);\n  PTR_DAT_080004f0[4] = 1;\n  validation_result = validate_and_calculate_checksum(PTR_DAT_080004f0[0x1c],PTR_DAT_080004f0 + 0x20);\n  if (validation_result == 0) {\n    printErrorMessage_08004030(10);\n  }\n  return;\n}",
            "called": [
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_0800b430",
                "FUN_08004030"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_and_validate_data_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "FUN_080078f4": "calculate_sum_of_four_values_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "code": "uint calculate_sum_of_four_values_080078f4(void)\n{\n  int index;\n  uint sum = 0;\n  for (index = 0; index < 4; index++) {\n    sum = *(uint *)(PTR_DAT_0800792c + index * 4) | sum;\n  }\n  return sum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_four_values_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "FUN_080041a0": "printMessageAndWait_080041a0",
                "param_1": "message",
                "PTR_DAT_0800420c": "messageToWaitFor",
                "PTR_s_Reset_to_continue_08004210": "resetMessage",
                "PTR_s___H____X__to_unlock_08004214": "unlockMessage",
                "PTR_s_Caution__Unlocked_08004218": "cautionMessage",
                "PTR_s_Enabled_0800421c": "enabledMessage",
                "PTR_s_Disabled_08004220": "disabledMessage",
                "PTR_DAT_08004224": "finalMessage"
            },
            "code": "void printMessageAndWait_080041a0(char *message){\nwait_for_characters_080036c6(message);\n}\n\nvoid printMessageAndWait_080041a0ForReset(){\nprintMessageAndWait_080041a0(PTR_s_Reset_to_continue_08004210);\n}\n\nvoid printMessageAndWait_080041a0ForUnlock(){\nprintMessageAndWait_080041a0(PTR_s___H____X__to_unlock_08004214);\n}\n\nvoid printMessageAndWait_080041a0ForCaution(){\nprintMessageAndWait_080041a0(PTR_s_Caution__Unlocked_08004218);\n}\n\nvoid printMessageAndWait_080041a0ForEnabled(){\nprintMessageAndWait_080041a0(PTR_s_Enabled_0800421c);\n}\n\nvoid printMessageAndWait_080041a0ForDisabled(){\nprintMessageAndWait_080041a0(PTR_s_Disabled_08004220);\n}\n\nvoid printFinalMessage(){\nprintMessageAndWait_080041a0(PTR_DAT_08004224);\n}\n",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "printMessageAndWait_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "value",
                "param_2": "shift_amount",
                "iVar1": "shifted_value",
                "uVar2": "shift_count"
            },
            "code": "uint32_t calculate_shifted_value_08008bf0(uint32_t value, uint32_t shift_amount) {\n    if ((shift_amount & 0x80000000) != 0) {\n        return 0;\n    }\n    int32_t shifted_value = shift_amount * 2 + 0x200000;\n    if (shift_amount * 2 < 0xffe00000) {\n        if (shifted_value >= 0) {\n            return 0;\n        }\n        uint32_t shift_count = -(shifted_value >> 0x15) - 0x3e1;\n        if (shift_count >= 0) {\n            return (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (shift_count & 0xff);\n        }\n    }\n    else if ((value | shift_amount << 0xc) != 0) {\n        return 0;\n    }\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08003004",
                "FUN_08004e30",
                "FUN_08002408",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08008bf0"
        },
        "FUN_08003a18": {
            "renaming": {
                "FUN_08003a18": "set_flags_08003a18",
                "param_1": "flags",
                "PTR_DAT_08003a70": "data_pointer",
                "set_flag_and_check_condition_080025e8": "check_condition",
                "FLAG_1": "BIT_7",
                "FLAG_2": "BIT_6",
                "FLAG_3": "BIT_5",
                "FLAG_4": "BIT_1",
                "FLAG_5": "BIT_3"
            },
            "code": "void set_flags_08003a18(uint8_t flags)\n{\n    if (!(flags & FLAG_1)) {\n        if (!(flags & FLAG_2)) {\n            if (flags & FLAG_3) {\n                PTR_DAT_08003a70[2] |= FLAG_4;\n            }\n        }\n        else {\n            PTR_DAT_08003a70[2] |= FLAG_5;\n        }\n    }\n    else {\n        set_flag_and_check_condition_080025e8();\n    }\n    return;\n}",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_flags_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "update_data_if_flag_set_08005790",
                "PTR_DAT_080057d4": "data_pointer",
                "PTR_DAT_080057dc": "data_pointer",
                "PTR_DAT_080057d8": "data_pointer",
                "PTR_DAT_080057e0": "data_pointer",
                "set_param_to_global_08007c40": "set_parameter",
                "set_global_variable_08007c5e": "set_global_variable",
                "set_data_flags_08007b70": "set_data_flags"
            },
            "code": "void update_data_if_flag_set_08005790(void)\n{\n  do_nothing();\n  if (PTR_DAT_080057d4[1] == 3) {\n    *(unsigned short *)PTR_DAT_080057d4 = *(unsigned short *)(PTR_DAT_080057d4 + 0x18);\n    *(unsigned short *)(PTR_DAT_080057d4 + 4) = *(unsigned short *)(PTR_DAT_080057d4 + 0x1a);\n    set_parameter(0x69);\n    set_global_variable((PTR_DAT_080057d4[0xd] + 5) * 0x15);\n    set_data_flags();\n  }\n  return;\n}",
            "called": [
                "FUN_08007b70",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "FUN_08001d4c",
                "FUN_0800583c",
                "FUN_0800585c"
            ],
            "imported": false,
            "current_name": "update_data_if_flag_set_08005790"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "FUNC_08001994"
            },
            "code": "\nvoid FUNC_08001994(byte param_1,char param_2,char param_3,undefined4 param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  byte local_61;\n  uint local_5c;\n  uint local_58;\n  uint local_54;\n  ushort local_4e;\n  uint local_4c;\n  int local_48;\n  undefined4 local_44;\n  uint local_40;\n  uint local_3c;\n  ushort local_36;\n  uint local_34;\n  uint local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  int local_20;\n  ushort local_1a;\n  uint local_18;\n  char local_11;\n  \n  local_11 = '\\0';\n  fill_memory_with_value_0800b430(&local_5c,0,0xc);\n  if ((param_1 & 1) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = calculate_08008590(*(undefined4 *)PTR_DAT_08001c90);\n    local_5c = convert_to_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 2) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = calculate_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 4));\n    local_58 = convert_to_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  if ((param_1 & 4) != 0) {\n    local_11 = local_11 + '\\x01';\n    uVar3 = calculate_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 8));\n    local_54 = convert_to_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  }\n  uVar2 = local_54;\n  if (local_54 < local_58) {\n    uVar2 = local_58;\n  }\n  local_40 = local_5c;\n  if (local_5c < uVar2) {\n    local_40 = uVar2;\n  }\n  uVar3 = convert_uint64_to_uint32_0800854c(local_40);\n  uVar4 = convert_uint64_to_uint32_0800854c(local_11);\n  uVar4 = check_input_and_return_result_080098d0((int)uVar4,(int)((ulonglong)uVar4 >> 0x20));\n  uVar3 = FUNC_08008894((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  local_44 = CalculateFloat_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(*(undefined4 *)(PTR_DAT_08001c90 + 0x20),local_44);\n  uVar1 = FUNC_08009054(uVar1,DAT_08001c94);\n  uVar3 = calculate_08008590(uVar1);\n  uVar3 = calculate_value_08009318((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_48 = calculate_shifted_value_08008bf0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar3 = convert_uint64_to_uint32_0800854c(local_11);\n  uVar3 = check_input_and_return_result_080098d0((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar4 = calculate_08008590(param_4);\n  uVar3 = FUNC_08008640((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),(int)uVar4,\n                       (int)((ulonglong)uVar4 >> 0x20));\n  uVar1 = CalculateFloat_08008c30((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  uVar1 = FUNC_08008eec(local_44,uVar1);\n  uVar1 = FUNC_08009054(DAT_08001c98,uVar1);\n  uVar3 = calculate_08008590(uVar1);\n  local_4c = convert_to_fixed_point_080095b8((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n  local_18 = DAT_08001c9c;\n  if (local_4c < DAT_08001c9c) {\n    local_18 = local_4c;\n  }\n  local_4e = *(ushort *)(PTR_DAT_08001c90 + 0x18);\n  local_1a = *(ushort *)(PTR_DAT_08001c90 + 0x1a) ^ *(ushort *)(PTR_DAT_08001c90 + 0x2a) & 0xaa0;\n  if (param_2 == '\\0') {\n    local_1a = local_1a ^ 0xaa0;\n  }\n  update_parameter_080018fc(local_1a);\n  set_parameter_080018cc(local_4e);\n  local_28 = -(local_40 >> 1);\n  local_2c = local_18 - (byte)PTR_DAT_08001c90[0xd];\n  local_30 = 0;\n  local_34 = 10000;\n  local_61 = param_1;\n  local_24 = local_28;\n  local_20 = local_28;\n  while( true ) {\n    local_36 = local_4e;\n    local_3c = calculate_sum_of_four_values_080078f4();\n    if (param_3 == '\\0') {\n      local_3c = local_3c ^ 0x1e;\n    }\n    if (((local_61 & 1) != 0) && (local_20 = local_20 + local_5c, 0 < local_20)) {\n      if ((local_3c & 0x10) == 0) {\n        local_61 = local_61 & 0xfe;\n      }\n      else {\n        local_36 = local_36 ^ 0x10;\n      }\n      local_20 = local_20 - local_40;\n    }\n    if (((local_61 & 2) != 0) && (local_24 = local_24 + local_58, 0 < local_24)) {\n      if ((local_3c & 8) == 0) {\n        local_61 = local_61 & 0xfd;\n      }\n      else {\n        local_36 = local_36 ^ 0x440;\n      }\n      local_24 = local_24 - local_40;\n    }\n    if (((local_61 & 4) != 0) && (local_28 = local_28 + local_54, 0 < local_28)) {\n      if ((local_3c & 4) == 0) {\n        local_61 = local_61 & 0xfb;\n      }\n      else {\n        local_36 = local_36 ^ 0x100;\n      }\n      local_28 = local_28 - local_40;\n    }\n    if ((local_61 == 0) || ((PTR_DAT_08001d40[2] & 0x10) != 0)) break;\n    set_parameter_080018cc(local_36);\n    do_nothing_08002828(PTR_DAT_08001d44[0xd]);\n    set_parameter_080018cc(local_4e);\n    do_nothing_08002828(local_2c);\n    if ((local_4c < local_18) && (local_34 = local_18 + local_34, 20000 < local_34)) {\n      local_34 = local_34 - 20000;\n      local_30 = local_48 + local_30;\n      local_18 = DAT_08001d48 / local_30;\n      if (local_18 < local_4c) {\n        local_18 = local_4c;\n      }\n      local_2c = local_18 - (byte)PTR_DAT_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009318",
                "FUN_08008590",
                "FUN_080098d0",
                "FUN_08008640",
                "FUN_080078f4",
                "FUN_08008bf0",
                "FUN_0800b430",
                "FUN_080018fc",
                "FUN_08008c30",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08009054",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_0800854c",
                "FUN_08008eec"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001994",
            "calling": [
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "FUNC_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "FUN_08007854": "get_bit_at_index_08007854",
                "param_1": "index",
                "PTR_": "base_",
                "DAT_": "shifted_"
            },
            "code": "uint get_bit_at_index_08007854(uint index) {\n    uint PTR_address = ((int)index >> 4) * 0x400 + 0x40020010;\n    uint DAT_value = *(uint *)PTR_address >> (index & 0xf) & 1;\n    return DAT_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "FUN_08007884"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "FUN_08004900": "process_input_and_wait_for_bits_to_be_set_08004900",
                "param_1": "input",
                "param_2": "bits_to_wait_for",
                "wait_for_characters_080036c6": "wait_for_characters",
                "PTR_DAT_08004934": "PTR_INPUT_WAIT_1",
                "process_input_080037fc": "process_input",
                "PTR_DAT_08004938": "PTR_INPUT_WAIT_2",
                "wait_until_all_bits_are_set_0800369c": "wait_until_all_bits_are_set",
                "PTR_DAT_0800493c": "PTR_INPUT_WAIT_3"
            },
            "code": "void process_input_and_wait_for_bits_to_be_set_08004900(undefined input, undefined4 bits_to_wait_for) {\n  wait_for_characters(PTR_DAT_08004934);\n  process_input(input);\n  wait_for_characters(PTR_DAT_08004938);\n  wait_until_all_bits_are_set(bits_to_wait_for);\n  wait_for_characters(PTR_DAT_0800493c);\n  return;\n}",
            "called": [
                "FUN_0800369c",
                "FUN_080037fc",
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_input_and_wait_for_bits_to_be_set_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "FUN_08004228": "wait_for_help_message_08004228",
                "PTR_s__Grbl_0_8c______for_help__08004238": "PTR_help_message",
                "wait_for_characters_080036c6": "wait_for_characters"
            },
            "code": "void wait_for_help_message_08004228(void)\n{\n  wait_for_characters(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "FUN_080039a0"
            ],
            "imported": false,
            "current_name": "wait_for_help_message_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "FUNC_08009b24"
            },
            "code": "\nuint FUNC_08009b24(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  uint uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  int local_3c;\n  \n  uVar1 = DAT_08009d70;\n  param_2 = param_2 & 0x7fffffff;\n  param_4 = param_4 & 0x7fffffff;\n  uVar3 = param_1;\n  uVar7 = param_2;\n  if (param_2 < param_4) {\n    uVar3 = param_3;\n    param_3 = param_1;\n    uVar7 = param_4;\n    param_4 = param_2;\n  }\n  if (0x3c00000 < (int)(uVar7 - param_4)) {\n    uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n    return uVar3;\n  }\n  if (DAT_08009d68 < (int)uVar7) {\n    if (DAT_08009d74 < (int)uVar7) {\n      if ((uVar7 & 0xfffff | uVar3) != 0) {\n        uVar3 = FUNC_080082d4(uVar3,uVar7,param_3,param_4);\n      }\n      if ((param_4 ^ 0x7ff00000 | param_3) != 0) {\n        return uVar3;\n      }\n      return param_3;\n    }\n    uVar7 = uVar7 + 0xda800000;\n    param_4 = param_4 + 0xda800000;\n    local_3c = 600;\n  }\n  else {\n    local_3c = 0;\n  }\n  uVar11 = CONCAT44(uVar7,uVar3);\n  uVar10 = CONCAT44(param_4,param_3);\n  if ((int)param_4 <= DAT_08009d6c) {\n    if ((int)param_4 < 0x100000) {\n      if ((param_4 | param_3) == 0) {\n        return uVar3;\n      }\n      uVar10 = FUNC_08008640(param_3,param_4,0,DAT_08009d70);\n      uVar11 = FUNC_08008640(uVar3,uVar7,0,uVar1);\n      local_3c = local_3c + -0x3fe;\n    }\n    else {\n      uVar7 = uVar7 + 0x25800000;\n      uVar11 = CONCAT44(uVar7,uVar3);\n      param_4 = param_4 + 0x25800000;\n      uVar10 = CONCAT44(param_4,param_3);\n      local_3c = local_3c + -600;\n    }\n  }\n  uVar9 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar8 = (undefined4)uVar11;\n  iVar6 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar5 = (undefined4)uVar10;\n  uVar10 = FUNC_080082d0(uVar8,uVar9,uVar5,iVar6);\n  iVar4 = (int)((ulonglong)uVar10 >> 0x20);\n  uVar1 = (undefined4)uVar10;\n  iVar2 = is_end_of_string_08008b24(uVar5,iVar6,uVar1,iVar4);\n  if (iVar2 == 0) {\n    uVar10 = FUNC_08008640(0,param_4,0);\n    uVar11 = FUNC_08008640(uVar1,iVar4 + -0x80000000,uVar1,iVar4);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,uVar8,uVar9);\n    uVar12 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar5,iVar6);\n    uVar13 = FUNC_080082d0(uVar5,iVar6,0,param_4);\n    uVar13 = FUNC_08008640((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar7 + 0x100000);\n    uVar12 = FUNC_080082d4((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_0800a1bc();\n  }\n  else {\n    uVar10 = FUNC_08008640(0,uVar7,0,uVar7);\n    uVar11 = FUNC_08008640(uVar5,iVar6 + -0x80000000,uVar5,iVar6);\n    uVar12 = FUNC_080082d4(uVar8,uVar9,0,uVar7);\n    uVar13 = FUNC_080082d0(uVar8,uVar9,0,uVar7);\n    uVar12 = FUNC_08008640((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                          (int)((ulonglong)uVar13 >> 0x20));\n    uVar11 = FUNC_080082d0((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                          (int)((ulonglong)uVar12 >> 0x20));\n    FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                 (int)((ulonglong)uVar11 >> 0x20));\n    uVar10 = calculate_0800a1bc();\n  }\n  uVar3 = (uint)uVar10;\n  if (local_3c != 0) {\n    uVar3 = FUNC_08008640(uVar3,(int)((ulonglong)uVar10 >> 0x20),0,local_3c * 0x100000 + 0x3ff00000);\n  }\n  return uVar3;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008b24"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009b24",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "FUNC_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "FUN_080076c8": "set_bit_080076c8",
                "param_1": "bit_index",
                "PTR_": "data_ptr",
                "DAT_": "data_value",
                "uint": "unsigned int"
            },
            "code": "void set_bit_080076c8(uint bit_index) {\n    uint* PTR_ = (uint*)((int)bit_index >> 4) * 0x400 + 0x40020014;\n    uint* DAT_ = (uint*)PTR_;\n    uint bit_mask = 1 << (bit_index & 0xf);\n    *DAT_ = *DAT_ ^ bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "set_bit_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "FUN_08006a8c": "set_bit_in_array_08006a8c",
                "param_1": "bit_position",
                "DAT_08006abc": "array_ptr",
                "uint": "unsigned_integer",
                "int": "integer",
                "char": "character",
                "array_index": "array_index",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_in_array_08006a8c(byte bit_position) {\n    int* DAT_08006abc = DAT_08006abc;\n    uint array_index = (((uint)(int)(char)bit_position >> 5) + 0x60) * 4;\n    int bit_mask = 1 << (bit_position & 0x1f);\n    *(DAT_08006abc + array_index) = bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "FUN_08006dfe"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08006a8c"
        },
        "FUN_0800283a": {
            "renaming": {
                "FUN_0800283a": "store_and_calculate_hashes_0800283a",
                "*(undefined4 *)(PTR_DAT_08002868 + 4)": "first_param",
                "*(undefined4 *)(PTR_DAT_08002868 + 8)": "second_param",
                "*(undefined4 *)(PTR_DAT_08002868 + 0xc)": "third_param",
                "store_params_to_data_section_080035ec": "store_params_to_data_section",
                "calculate_and_store_hashes_080004fc": "calculate_and_store_hashes"
            },
            "code": "void store_and_calculate_hashes_0800283a(void)\n{\n  int *(undefined4 *)(PTR_DAT_08002868 + 4) = *(int *)(PTR_DAT_08002868 + 4);\n  int *(undefined4 *)(PTR_DAT_08002868 + 8) = *(int *)(PTR_DAT_08002868 + 8);\n  int *(undefined4 *)(PTR_DAT_08002868 + 0xc) = *(int *)(PTR_DAT_08002868 + 0xc);\n  store_params_to_data_section_080035ec(*(undefined4 *)(PTR_DAT_08002868 + 4), *(undefined4 *)(PTR_DAT_08002868 + 8), *(undefined4 *)(PTR_DAT_08002868 + 0xc));\n  calculate_and_store_hashes_080004fc(*(undefined4 *)(PTR_DAT_08002868 + 4), *(undefined4 *)(PTR_DAT_08002868 + 8), *(undefined4 *)(PTR_DAT_08002868 + 0xc));\n  return;\n}",
            "called": [
                "FUN_080004fc",
                "FUN_080035ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "FUN_080024c4",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "store_and_calculate_hashes_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "FUN_0800881c": "convert_to_double_0800881c",
                "param_1": "temp1",
                "param_2": "temp2",
                "param_3": "temp3",
                "param_4": "temp4",
                "uVar1": "check1",
                "unaff_r4": "mask",
                "uVar2": "temp5",
                "uVar3": "temp7",
                "in_r12": "mask",
                "bVar4": "is_zero"
            },
            "code": "ulonglong convert_to_double_0800881c(uint param1, uint param2, uint param3, uint param4)\n{\n    uint temp1, temp2, temp3, temp4;\n    uint mask = 0x80000000;\n    uint check1, check2;\n    bool is_zero;\n    \n    temp1 = param1;\n    temp2 = param2;\n    temp3 = param3;\n    temp4 = param4;\n    \n    if (temp2 != temp4 >> 0x14 && temp4 >> 0x14 != (temp4 & 0xff000000)) {\n        check1 = (temp1 | temp2 << 1);\n        is_zero = (check1 == 0);\n        if (!is_zero) {\n            check2 = (temp3 | temp4 << 1);\n            is_zero = (check2 == 0);\n        }\n        if (is_zero) {\n            return (ulonglong)((temp2 ^ temp4) & mask) << 0x20;\n        }\n        if (temp4 >> 0x14 == 0) {\n            uint temp5 = temp2 & mask;\n            do {\n                uint temp6 = temp1 & mask;\n                temp1 = temp1 << 1;\n                temp2 = temp2 * 2 + (uint)(temp6 != 0);\n            } while ((temp2 & 0x100000) == 0);\n            temp2 = temp2 | temp5;\n            if (temp2 != temp4 >> 0x14) {\n                return ((ulonglong)temp2 << 0x20) | temp1;\n            }\n        }\n        do {\n            uint temp7 = temp3 & mask;\n            temp3 = temp3 << 1;\n            temp4 = temp4 * 2 + (uint)(temp7 != 0);\n        } while ((temp4 & 0x100000) == 0);\n        return ((ulonglong)temp2 << 0x20) | temp1;\n    }\n    check1 = (temp1 | temp2 << 1);\n    is_zero = (check1 == 0);\n    if (is_zero) {\n        temp2 = temp4;\n        temp1 = temp3;\n    }\n    if (!is_zero) {\n        check2 = (temp3 | temp4 << 1);\n        is_zero = (check2 == 0);\n    }\n    uint result1 = temp2;\n    if (((!is_zero) && ((temp2 != temp4 >> 0xc || ((temp1 | temp2 << 0xc) == 0)))) && ((temp4 >> 0x14 != (temp4 & 0xff000000) || (temp1 = temp3, result1 = temp4, (temp3 | temp4 << 0xc) == 0)))) {\n        return (ulonglong)((temp2 ^ temp4) & mask | 0x7ff00000) << 0x20;\n    }\n    return ((ulonglong)result1 << 0x20) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "FUN_08008640"
            ],
            "imported": false,
            "current_name": "convert_to_double_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "store_value_with_checksum_08004bc0",
                "param_1": "address",
                "param_2": "value",
                "ushort": "unsigned short",
                "computed_address": "computed_address",
                "0x101": "0x101",
                "0x300": "0x300",
                "store_value_with_checksum_08000374": "store_value_with_checksum_08000374",
                "0x100": "checksum"
            },
            "code": "void store_value_with_checksum_08004bc0(ushort address, undefined4 value, ushort checksum){\n    ushort computed_address = address * 0x101 + 0x300;\n    store_value_with_checksum_08004bc0_08000374(computed_address, value, checksum);\n    return;\n}",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "store_value_with_checksum_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "should_return_false_if_CY_is_true_or_ZR_is_false_08008b4c",
                "in_CY": "is_CY_true",
                "in_ZR": "is_ZR_false"
            },
            "code": "bool should_return_false_if_CY_is_true_or_ZR_is_false_08008b4c(void)\n{\n  bool is_CY_true = check_and_return_value_08008af0();\n  bool is_ZR_false = !((bool)in_ZR);\n  return is_CY_true || is_ZR_false;\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "should_return_false_if_CY_is_true_or_ZR_is_false_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "initialize_values_08004c2a",
                "PTR_DAT_08004c44": "data_pointer",
                "store_value_08000340": "store_value",
                "store_value_with_checksum_08000374": "store_value_with_checksum"
            },
            "code": "void initialize_values_08004c2a(void)\n{\n  store_value(0, 5);\n  store_value_with_checksum(1, PTR_DAT_08004c44, 0x40);\n  return;\n}",
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "initialize_values_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "wait_for_bit_and_return_zero_0800826a",
                "param_1": "bit_to_wait_for",
                "wait_for_bit_to_be_set_08007e1c": "wait_for_bit_to_be_set"
            },
            "code": "int wait_for_bit_and_return_zero_0800826a(int* bit_to_wait_for)\n{\n    wait_for_bit_to_be_set(bit_to_wait_for);\n    return 0;\n}",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_bit_and_return_zero_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_end_of_input_08008b60",
                "in_CY": "input_char",
                "check_and_return_value_08008af0": "check_and_return_value"
            },
            "code": "bool is_end_of_input_08008b60(void)\\n{\\n  char input_char;\\n  check_and_return_value();\\n  return input_char == \"\\0\";\\n}",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_0800af78",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_end_of_input_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "calculate_and_set_data_08005324",
                "param_1": "input_value",
                "local_14": "calculated_value"
            },
            "code": "void calculate_and_set_data_08005324(uint input_value)\n{\n  uint calculated_value;\n  if (input_value < 800) {\n    calculated_value = 800;\n  }\n  else {\n    calculated_value = DAT_08005358 / input_value;\n  }\n  *(uint *)(PTR_DAT_0800535c + 0x14) = calculated_value;\n  set_data_08007bf0(calculated_value);\n  return;\n}",
            "called": [
                "FUN_08007bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "FUN_080058a0",
                "FUN_080053a0",
                "FUN_08005814"
            ],
            "imported": false,
            "current_name": "calculate_and_set_data_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "FUN_08000310": "get_value_from_array_08000310",
                "param_1": "index",
                "PTR_DAT_08000338": "memory_initialized",
                "initialize_memory_080002f0": "initialize_memory",
                "PTR_DAT_0800033c": "array_data"
            },
            "code": "uint16_t get_value_from_array_08000310(uint16_t index) {\n  if (*PTR_DAT_08000338 == 0) {\n    initialize_memory();\n  }\n  return PTR_DAT_0800033c[index & 0x3ff];\n}",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "get_value_from_array_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "FUN_08007a70": "set_byte_and_bit_08007a70",
                "param_1": "address_value",
                "param_2": "byte_value",
                "param_3": "bit_value",
                "local_c": "byte_offset",
                "DAT_08007ac8": "PTR_DAT_08007ac8",
                "DAT_08007acc": "PTR_DAT_08007acc"
            },
            "code": "void set_byte_and_bit_08007a70(int address_value, int byte_value, int bit_value)\n{\n  int byte_offset;\n  if (address_value == 0x40000000) {\n    byte_offset = 0x1c;\n  }\n  else if (address_value == DAT_08007ac8) {\n    byte_offset = 0x1d;\n  }\n  else {\n    if (address_value != DAT_08007acc) {\n      return;\n    }\n    byte_offset = 0x1e;\n  }\n  set_byte_at_address_08006cf6(byte_offset, byte_value, bit_value);\n  set_bit_in_array_080079e0(byte_offset);\n  return;\n}",
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "FUN_08007ad0"
            ],
            "imported": false,
            "current_name": "set_byte_and_bit_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "do_nothing_0800b5b0"
            },
            "code": "\nvoid do_nothing_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "FUN_080001ac",
                "FUN_0800b3e8",
                "FUN_08000188"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "FUN_08002978": "calculate_result_08002978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "long_result",
                "FUNC_08008eec": "function1",
                "FUNC_08008cdc": "function2",
                "FUNC_08008cd8": "function3",
                "calculate_08008590": "function4",
                "check_input_and_return_result_080098d0": "function5",
                "CalculateFloat_08008c30": "function6"
            },
            "code": "float calculate_result_08002978(float input1, float input2, float input3)\n{\n  float result1;\n  float result2;\n  float intermediate_result1;\n  float intermediate_result2;\n  long long unsigned int long_result;\n  \n  intermediate_result1 = FUNC_08008eec(input2, input2);\n  intermediate_result2 = FUNC_08008cdc(input1, input1);\n  intermediate_result2 = FUNC_08008eec(intermediate_result2, input3);\n  result1 = FUNC_08008cd8(intermediate_result1, intermediate_result2);\n  long_result = calculate_08008590(result1);\n  long_result = check_input_and_return_result_080098d0((int)long_result,(int)(long_result >> 0x20));\n  result2 = CalculateFloat_08008c30((int)long_result,(int)(long_result >> 0x20));\n  return result2;\n}",
            "called": [
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_result_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "FUNC_08009d78"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint FUNC_08009d78(undefined4 param_1,uint param_2,undefined8 *param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 local_50;\n  undefined4 uStack_4c;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  \n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= DAT_08009fb0) {\n    *(undefined4 *)param_3 = param_1;\n    *(uint *)((int)param_3 + 4) = param_2;\n    *(undefined4 *)(param_3 + 1) = 0;\n    *(undefined4 *)((int)param_3 + 0xc) = 0;\n    return 0;\n  }\n  if ((int)uVar8 <= DAT_08009fb4) {\n    if ((int)param_2 < 1) {\n      uVar10 = FUNC_080082d4(param_1,param_2,DAT_08009f88,DAT_08009f8c);\n      uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar1 = (undefined4)uVar10;\n      if (uVar8 != DAT_0800a1b8) {\n        uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a1b0,DAT_0800a1b4);\n        *param_3 = uVar10;\n        uVar10 = FUNC_080082d0(uVar1,uVar3);\n        uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        param_3[1] = uVar10;\n        return -1;\n      }\n      uVar10 = FUNC_080082d4(uVar1,uVar3,DAT_0800a190,DAT_0800a194);\n      uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar11 = FUNC_080082d4((int)uVar10,uVar1,DAT_0800a198,DAT_0800a19c);\n      *param_3 = uVar11;\n      uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n      uVar10 = FUNC_080082d4((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      param_3[1] = uVar10;\n      return -1;\n    }\n    uVar10 = FUNC_080082d0();\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar1 = (undefined4)uVar10;\n    if (uVar8 != DAT_08009fb8) {\n      uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f90,DAT_08009f94);\n      *param_3 = uVar10;\n      uVar10 = FUNC_080082d0(uVar1,uVar3);\n      uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009f90,DAT_08009f94);\n      param_3[1] = uVar10;\n      return 1;\n    }\n    uVar10 = FUNC_080082d0(uVar1,uVar3,DAT_08009f98,DAT_08009f9c);\n    uVar1 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = FUNC_080082d0((int)uVar10,uVar1,DAT_08009fa0,DAT_08009fa4);\n    *param_3 = uVar11;\n    uVar10 = FUNC_080082d0((int)uVar10,uVar1);\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    param_3[1] = uVar10;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)uVar8) {\n    if (DAT_08009fc0 < (int)uVar8) {\n      uVar10 = FUNC_080082d0(param_1,param_2,param_1,param_2);\n      param_3[1] = uVar10;\n      *param_3 = uVar10;\n      return 0;\n    }\n    iVar9 = ((int)uVar8 >> 0x14) + -0x416;\n    convert_to_signed_fixed_point_08008ba0();\n    local_40 = get_concatenated_values_0800856c();\n    uVar10 = FUNC_080082d0(param_1,uVar8 + iVar9 * -0x100000,(int)local_40,\n                          (int)((ulonglong)local_40 >> 0x20));\n    uVar10 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    convert_to_signed_fixed_point_08008ba0();\n    local_38 = get_concatenated_values_0800856c();\n    uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    local_30 = FUNC_08008640((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08009fc4);\n    check_input_is_not_null_08008b10((int)local_30,(int)((ulonglong)local_30 >> 0x20),0,0);\n    iVar9 = FUNC_0800a5a0(&local_40,param_3,iVar9);\n    if (-1 < (int)param_2) {\n      return iVar9;\n    }\n    *(int *)((int)param_3 + 4) = *(int *)((int)param_3 + 4) + -0x80000000;\n    *(int *)((int)param_3 + 0xc) = *(int *)((int)param_3 + 0xc) + -0x80000000;\n    return -iVar9;\n  }\n  uVar10 = do_nothing_0800b2cc();\n  uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar11 = FUNC_08008640((int)uVar10,uVar3,DAT_08009fa8,DAT_08009fac);\n  FUNC_080082d4((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08009fcc);\n  iVar9 = convert_to_signed_fixed_point_08008ba0();\n  uVar11 = get_concatenated_values_0800856c();\n  uVar4 = (undefined4)((ulonglong)uVar11 >> 0x20);\n  uVar1 = (undefined4)uVar11;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f88,DAT_08009f8c);\n  uVar10 = FUNC_080082d0((int)uVar10,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n  uVar5 = (undefined4)((ulonglong)uVar10 >> 0x20);\n  uVar3 = (undefined4)uVar10;\n  uVar11 = FUNC_08008640(uVar1,uVar4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < iVar9) || (*(uint *)(PTR_DAT_08009fd0 + (iVar9 + -1) * 4) == uVar8)) {\n    uVar12 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)((uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a190,DAT_0800a194);\n    uVar6 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar3,uVar5,(int)uVar11,uVar6);\n    uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar12 = FUNC_080082d0(uVar3,uVar5,uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar6);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a198,DAT_0800a19c);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n    uVar12 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n    if ((int)(((int)uVar8 >> 0x14) - ((uint)((int)((ulonglong)uVar12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    uVar11 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a0,DAT_0800a1a4);\n    uVar3 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar10 = FUNC_080082d0(uVar2,uVar7,(int)uVar11,uVar3);\n    uVar12 = FUNC_080082d0(uVar2,uVar7);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,uVar3);\n    uVar12 = FUNC_08008640(uVar1,uVar4,DAT_0800a1a8,DAT_0800a1ac);\n    uVar11 = FUNC_080082d0((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n  }\n  uVar12 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\nLAB_0800a0ce:\n  uStack_4c = (undefined4)((ulonglong)uVar10 >> 0x20);\n  local_50 = (undefined4)uVar10;\n  *param_3 = uVar12;\n  uVar10 = FUNC_080082d0(local_50,uStack_4c);\n  uVar10 = FUNC_080082d0((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n  param_3[1] = uVar10;\n  if ((int)param_2 < 0) {\n    *(int *)param_3 = (int)uVar12;\n    *(int *)((int)param_3 + 4) = (int)((ulonglong)uVar12 >> 0x20) + -0x80000000;\n    *(int *)(param_3 + 1) = (int)uVar10;\n    *(int *)((int)param_3 + 0xc) = (int)((ulonglong)uVar10 >> 0x20) + -0x80000000;\n    iVar9 = -iVar9;\n  }\n  return iVar9;\n}\n\n",
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_08008ba0",
                "FUN_0800a5a0",
                "FUN_08008640",
                "FUN_08008b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009d78",
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "imported": false,
            "current_name": "FUNC_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "FUN_08003826": "print_float_08003826",
                "param_1": "input",
                "iVar1": "end_of_input_reached",
                "uVar2": "output",
                "bVar3": "float_char",
                "uVar4": "index",
                "local_24": "temp_input",
                "acStack_1d": "float_str",
                "local_10": "significant_bits",
                "local_a": "float_str_index",
                "local_9": "FLOAT_PRECISION"
            },
            "code": "void print_float_08003826(uint32_t input) {\n  int end_of_input_reached = is_end_of_input_reached(input, 0);\n  uint32_t output = input;\n  if (end_of_input_reached) {\n    wait_until_bit_is_set(0x2d);\n    output = input ^ 0x80000000;\n  }\n  for (int i = 0; i < FLOAT_PRECISION; i++) {\n    output = multiply_by_10(output);\n  }\n  uint32_t significant_bits = extract_significant_bits(output);\n  char float_str[FLOAT_PRECISION + 2];\n  float_str[FLOAT_PRECISION + 1] = '.';\n  for (int i = FLOAT_PRECISION; significant_bits != 0; i--) {\n    float_str[i] = (char)(significant_bits % 10) + '0';\n    significant_bits /= 10;\n  }\n  for (int i = 0; i < FLOAT_PRECISION - get_num_digits(output); i++) {\n    float_str[i + 1] = '0';\n  }\n  if (get_num_digits(output) == FLOAT_PRECISION) {\n    float_str[0] = '0';\n    float_str[2] = '0';\n  }\n  for (int i = FLOAT_PRECISION + 1; i >= 0; i--) {\n    wait_until_bit_is_set(float_str[i]);\n  }\n}\n",
            "called": [
                "FUN_08008250",
                "FUN_08009228",
                "FUN_08009278",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004940",
                "FUN_080044e8"
            ],
            "imported": false,
            "current_name": "print_float_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "FUN_0800923c": "check_for_zero_0800923c",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_nonzero",
                "concatenate_parameters_08009204": "concatenate_parameters"
            },
            "code": "bool check_for_zero_0800923c(void)\n{\n  bool is_CY_zero;\n  bool is_ZR_nonzero;\n  concatenate_parameters();\n  return is_CY_zero || !is_ZR_nonzero;\n}",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_for_zero_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "FUN_08002afc": "check_input_and_concatenate_08002afc",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "is_end_of_input_reached",
                "uVar2": "result_1",
                "uVar3": "result_2"
            },
            "code": "void check_input_and_concatenate_08002afc(int input_1, int input_2)\n{\n  int is_end_of_input_reached;\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  if (((input_1 != 0) && (*(char *)(input_1 + 0x25) == '\\0')) &&\n     (is_end_of_input_reached = is_end_of_input_reached_08009228(*(undefined4 *)(input_1 + 0x18),*(undefined4 *)(input_2 + 0x18)),\n     is_end_of_input_reached != 0)) {\n    result_2 = *(undefined4 *)(input_2 + 0x18);\n    result_1 = calculate_result_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                         *(undefined4 *)(input_1 + 0x18),*(undefined4 *)(input_1 + 0x20));\n    is_end_of_input_reached = is_end_of_input_reached_08009228(result_2,result_1);\n    if (is_end_of_input_reached == 0) {\n      result_1 = calculate_result_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                           *(undefined4 *)(input_1 + 0x18),*(undefined4 *)(input_1 + 0x20));\n    }\n    else {\n      result_1 = *(undefined4 *)(input_2 + 0x18);\n    }\n    is_string_concatenated_08009214(result_1,*(undefined4 *)(input_2 + 0x18));\n    if (is_string_concatenated_08009214(result_1,*(undefined4 *)(input_2 + 0x18)) == 0) {\n      *(undefined4 *)(input_2 + 0x18) = result_1;\n      *(undefined *)(input_2 + 0x24) = 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "FUN_08002ba8"
            ],
            "imported": false,
            "current_name": "check_input_and_concatenate_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "initialize_values_08004c48",
                "param_1": "input_char",
                "PTR_DAT_08004d0c": "ptr_dat_08004d0c",
                "DAT_08004d10": "dat_08004d10",
                "DAT_08004d14": "dat_08004d14",
                "DAT_08004d18": "dat_08004d18",
                "DAT_08004d1c": "dat_08004d1c",
                "DAT_08004d20": "dat_08004d20",
                "DAT_08004d24": "dat_08004d24",
                "DAT_08004d28": "dat_08004d28",
                "initialize_values_08004c2a": "initialize_values_08004c2a"
            },
            "code": "void initialize_values_08004c48(char input_char) {\n  if (input_char != '\\0') {\n    int* PTR_DAT_08004d0c = (int*)DAT_08004d10;\n    PTR_DAT_08004d0c[0] = DAT_08004d10;\n    PTR_DAT_08004d0c[1] = DAT_08004d10;\n    PTR_DAT_08004d0c[2] = DAT_08004d10;\n    PTR_DAT_08004d0c[13] = 10;\n    PTR_DAT_08004d0c[4] = DAT_08004d14;\n    PTR_DAT_08004d0c[5] = DAT_08004d18;\n    PTR_DAT_08004d0c[8] = DAT_08004d1c;\n    PTR_DAT_08004d0c[7] = DAT_08004d20;\n    *(short*)(PTR_DAT_08004d0c + 6) = 0;\n    *(short*)(PTR_DAT_08004d0c + 6) = 0xa80;\n    PTR_DAT_08004d0c[9] = DAT_08004d24;\n  }\n  int* PTR_DAT_08004d0c = (int*)DAT_08004d10;\n  PTR_DAT_08004d0c[10] = 0;\n  PTR_DAT_08004d0c[10] |= 2;\n  PTR_DAT_08004d0c[10] |= 0x10;\n  *(short*)(PTR_DAT_08004d0c + 11) = 0;\n  PTR_DAT_08004d0c[12] = DAT_08004d28;\n  PTR_DAT_08004d0c[15] = DAT_08004d14;\n  *(short*)(PTR_DAT_08004d0c + 17) = 100;\n  PTR_DAT_08004d0c[18] = 0x3f800000;\n  PTR_DAT_08004d0c[19] = 25;\n  PTR_DAT_08004d0c[20] = 3;\n  PTR_DAT_08004d0c[21] = 25;\n  initialize_values_08004c48_08004c2a();\n  return;\n}",
            "called": [
                "FUN_08004c2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_080051b4",
                "FUN_08004dd2"
            ],
            "imported": false,
            "current_name": "initialize_values_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "FUN_080002a0": "validate_value_080002a0",
                "param_1": "value_to_validate",
                "check_value_08005a98": "check_value"
            },
            "code": "void validate_value_080002a0(int value_to_validate)\n{\n  check_value(value_to_validate);\n  return;\n}",
            "called": [
                "FUN_08005a98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "validate_value_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "FUN_08009250": "check_params_for_concatenation_08009250",
                "in_ZR": "is_zero",
                "in_CY": "is_carry",
                "concatenate_params_and_swap_080091fc": "concatenate_and_swap_params"
            },
            "code": "bool check_params_for_concatenation_08009250(void)\n{\n  undefined is_zero;\n  undefined is_carry;\n  concatenate_and_swap_params();\n  return !(bool)is_carry || (bool)is_zero;\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_params_for_concatenation_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "FUN_0800640c": "update_registers_0800640c",
                "param_1": "register_type",
                "param_2": "value_1",
                "param_3": "value_2",
                "local_1c": "mask",
                "local_18": "constant_1",
                "local_10": "constant_2",
                "local_14": "constant_3",
                "local_c": "constant_4"
            },
            "code": "void update_registers_0800640c(uint8_t register_type, uint32_t param_2, uint32_t param_3)\n{\n    uint32_t* register_address = (register_type == 0) ? (uint32_t*)(DAT_080064b0 + 0x30) : (uint32_t*)(DAT_080064b0 + 0x30);\n    uint32_t mask_1 = (register_type == 0) ? 0xf89fffff : 0x7ffffff;\n    uint32_t mask_2 = (register_type == 0) ? (param_3 | param_2) : (param_2 | param_3 << 3);\n    uint32_t local_1c = (register_type == 0) ? 0x100 : 0x200;\n    uint32_t local_18 = 2;\n    uint32_t local_10 = 3;\n    uint32_t local_14 = 0;\n    uint32_t local_c = 0;\n    update_registers_0800640c_08006e88((register_type == 0) ? DAT_080064b4 : DAT_080064b8, &local_1c);\n    *register_address = (*register_address) | ((register_type == 0) ? 1 : 4);\n    *register_address = mask_2 | ((*register_address) & mask_1);\n}\n",
            "called": [
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": false,
            "current_name": "update_registers_0800640c"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "check_and_return_value_08008af0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "data",
                "param_4": "length"
            },
            "code": "void check_and_return_value_08008af0(void* data, int length, int value1, int value2)\n{\n  check_and_return_value_08008af0(data, length, value1, value2);\n  return;\n}",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "imported": false,
            "current_name": "check_and_return_value_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "character",
                "uVar1": "bit_value",
                "check_bit_at_position_08006ac0": "check_bit_at_position"
            },
            "code": "int check_bit_08006e1a(char character) {\n  int bit_position = (int)character;\n  int bit_value = check_bit_08006e1a_at_position(bit_position);\n  return bit_value;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": false,
            "current_name": "check_bit_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "update_param_080052ac",
                "param_1": "new_param",
                "DAT_080052d8": "PTR_DATA",
                "PTR_DATA": "PTR_DATA",
                "uint": "unsigned int",
                "mask": "MASK",
                "old_value": "old_value",
                "new_value": "new_value",
                "ptr": "ptr"
            },
            "code": "void update_param_080052ac(uint new_param) {\n    uint* ptr = (uint*)(DAT_080052d8 + 0x14);\n    uint old_value = *ptr;\n    uint mask = 0xfffffaaf;\n    uint new_value = new_param | (old_value & mask);\n    *ptr = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "FUN_0800583c",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "imported": false,
            "current_name": "update_param_080052ac"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "get_second_byte_and_check_flags_08008286",
                "uVar1": "second_byte",
                "iVar2": "is_bit_set",
                "isBitSet_08007e58": "is_bit_set",
                "get_second_byte_from_dat_08007ea0_08007e84": "get_second_byte_from_data",
                "check_and_set_flags_08005900": "check_and_set_flags"
            },
            "code": "uint8_t get_second_byte_and_check_flags_08008286()\n{\n  uint8_t second_byte;\n  int is_bit_set;\n  is_bit_set = is_bit_set();\n  if (is_bit_set) {\n    second_byte = get_second_byte_from_data();\n    int flags_check = check_and_set_flags(second_byte);\n    if (!flags_check) {\n      return second_byte;\n    }\n  }\n  return 0xff;\n}",
            "called": [
                "FUN_08005900",
                "FUN_08007e84",
                "FUN_08007e58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "get_second_byte_and_check_flags_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "is_valid_input_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "int is_valid_input_08008b74(uint32_t input1, int input2, uint32_t input3, int input4) {\n\tint is_invalid_inputs = ((((input2 << 1) >> 0x15) != -1) || ((input1 | (input2 << 0xc)) == 0)) && (((input4 << 1) >> 0x15) != -1 || ((input3 | (input4 << 0xc)) == 0));\n\treturn !is_invalid_inputs;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "is_valid_input_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "FUN_0800b524": "insert_data_0800b524",
                "param_1": "type",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "extra_data",
                "puVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "mask",
                "iVar4": "list_ptr",
                "iVar5": "list_start",
                "uVar6": "count"
            },
            "code": "int insert_data_0800b524(int type, int data, int flag, int extra_data) {\n    uint count;\n    int list_ptr;\n    int list_start;\n    uint mask;\n\n    list_ptr = PTR_PTR_DAT_0800b5a8;\n    do_nothing_0800b51c(*(int *)PTR_PTR_DAT_0800b5ac);\n    list_start = *(int *)(list_ptr + 0x148);\n    if (list_start == 0) {\n        list_start = list_ptr + 0x14c;\n        *(int *)(list_ptr + 0x148) = list_start;\n    }\n    count = *(uint *)(list_start + 4);\n    if ((int)count < 0x20) {\n        if (type != 0) {\n            int data_ptr = list_start + count * 4;\n            *(int *)(data_ptr + 0x88) = flag;\n            mask = 1 << (count & 0xff);\n            *(uint *)(list_start + 0x188) = *(uint *)(list_start + 0x188) | mask;\n            *(int *)(data_ptr + 0x108) = extra_data;\n            if (type == 2) {\n                *(uint *)(list_start + 0x18c) = mask | *(uint *)(list_start + 0x18c);\n            }\n        }\n        uint ptr = *(uint *)PTR_PTR_DAT_0800b5ac;\n        *(uint *)(list_start + 4) = count + 1;\n        *(int *)(list_start + (count + 2) * 4) = data;\n        do_nothing_0800b520(ptr);\n        return 0;\n    }\n    else {\n        do_nothing_0800b520(*(int *)PTR_PTR_DAT_0800b5ac);\n        return -1;\n    }\n}\n",
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "FUN_0800b4d0"
            ],
            "imported": false,
            "current_name": "insert_data_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "FUN_08005250"
            ],
            "imported": false,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08007ea4": {
            "renaming": {
                "FUN_08007ea4": "set_flags_08007ea4",
                "param_1": "flag_value",
                "DAT_08007f38": "FLAG_A",
                "DAT_08007f40": "FLAG_B",
                "DAT_08007f44": "FLAG_C",
                "DAT_08007f48": "FLAG_D",
                "DAT_08007f4c": "FLAG_E",
                "DAT_08007f50": "FLAG_F",
                "uint": "unsigned_int",
                "flag_44": "flag_pointer_44",
                "flag_40": "flag_pointer_40"
            },
            "code": "void set_flags_08007ea4(int flag_value) {\n    uint* flag_44 = (uint*)(DAT_08007f3c + 0x44);\n    uint* flag_40 = (uint*)(DAT_08007f3c + 0x40);\n    if (flag_value == DAT_08007f38) {\n        *flag_44 |= 0x10;\n    }\n    else if (flag_value == DAT_08007f40) {\n        *flag_40 |= 0x20000;\n    }\n    else if (flag_value == DAT_08007f44) {\n        *flag_40 |= 0x40000;\n    }\n    else if (flag_value == DAT_08007f48) {\n        *flag_40 |= 0x80000;\n    }\n    else if (flag_value == DAT_08007f4c) {\n        *flag_40 |= 0x100000;\n    }\n    else if (flag_value == DAT_08007f50) {\n        *flag_44 |= 0x20;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "set_flags_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "FUN_08007756": "check_and_update_data_08007756",
                "uVar1": "value",
                "get_value_from_pointer_08005a84": "get_value",
                "set_bit_080076c8": "set_flag",
                "sum_and_set_flags_08007930": "calculate_sum_and_set_flags",
                "increment_ptr_dat_08005a68": "increment_data_pointer"
            },
            "code": "void check_and_update_data_08007756(void)\n{\n  uint32_t value = get_value_from_pointer_08005a84();\n  if ((value & 0x1ff) == 0) {\n    set_bit_080076c8(0x3c);\n  }\n  if ((value & 0xf) == 0) {\n    calculate_sum_and_set_bit_080076c8s();\n  }\n  increment_ptr_dat_08005a68();\n  return;\n}",
            "called": [
                "FUN_08007930",
                "FUN_080076c8",
                "FUN_08005a68",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_data_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800423c": {
            "renaming": {
                "FUN_0800423c": "wait_for_grbl_settings_0800423c",
                "PTR_s_____view_Grbl_settings______view_0800424c": "view_grbl_settings",
                "wait_for_characters_080036c6": "wait_for_characters_view_grbl_settings"
            },
            "code": "void wait_for_grbl_settings_0800423c(void)\n{\n  wait_for_characters_PTR_s_____view_Grbl_settings______view_0800424c();\n  return;\n}",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "wait_for_grbl_settings_0800423c"
        },
        "FUN_08009264": {
            "renaming": {
                "FUN_08009264": "is_end_of_string_08009264",
                "in_CY": "current_char",
                "concatenate_params_and_swap_080091fc": "concatenate_and_swap_params"
            },
            "code": "bool is_end_of_string_08009264(void)\n{\n  char current_char;\n  concatenate_and_swap_params();\n  return current_char == '\\0';\n}",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_end_of_string_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "FUN_08007e08": "initialize_and_enable_data_memory_08007e08",
                "initialize_data_memory_08007ad0": "initialize_data_memory",
                "initialize_data_08007d08": "initialize_data",
                "set_flags_and_enable_08007da8": "set_flags_and_enable"
            },
            "code": "void initialize_and_enable_data_memory_08007e08(void)\n{\n  initialize_data_memory();\n  initialize_data();\n  set_flags_and_enable();\n  return;\n}",
            "called": [
                "FUN_08007ad0",
                "FUN_08007d08",
                "FUN_08007da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_and_enable_data_memory_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "FUN_08002fac": "check_pointer_equality_08002fac",
                "*PTR_DAT_08002fcc": "*pointer1",
                "*PTR_DAT_08002fd0": "*pointer2"
            },
            "code": "bool check_pointer_equality_08002fac(void)\n{\n  bool are_equal = (*PTR_DAT_08002fcc == *PTR_DAT_08002fd0);\n  return are_equal;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "check_pointer_equality_08002fac"
        },
        "FUN_080002b6": {
            "renaming": {
                "FUN_080002b6": "check_value_080002b6",
                "param_1": "value_to_check",
                "uVar1": "upper_current_value",
                "uVar2": "upper_calculated_value",
                "bVar3": "is_upper_current_value_greater_than_upper_calculated_value",
                "lVar4": "calculated_value",
                "uVar5": "current_value"
            },
            "code": "void check_value_080002b6(uint value_to_check)\n{\n  longlong calculated_value = calculate_value_from_pointer();\n  uint upper_calculated_value = (uint)(calculated_value + (ulonglong)value_to_check >> 0x20);\n  do {\n    undefined8 current_value = calculate_value_from_pointer();\n    uint upper_current_value = (uint)((ulonglong)current_value >> 0x20);\n    bool is_upper_current_value_greater_than_upper_calculated_value = upper_current_value > upper_calculated_value;\n    if (upper_current_value == upper_calculated_value) {\n      is_upper_current_value_greater_than_upper_calculated_value = (uint)(calculated_value + (ulonglong)value_to_check) > (uint)current_value;\n    }\n  } while (!is_upper_current_value_greater_than_upper_calculated_value);\n  return;\n}",
            "called": [
                "FUN_08000268"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": false,
            "current_name": "check_value_080002b6"
        }
    },
    "used_tokens": 194010,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_0800597c",
            "FUN_08009798",
            "FUN_08000188",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008c30",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007c5e",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_080028bc",
            "FUN_0800738e",
            "FUN_0800a1bc",
            "FUN_080073d4",
            "FUN_08006e88",
            "FUN_08009990",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_0800b3dc",
            "FUN_0800756c",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_08006a18",
            "FUN_08006ac0",
            "FUN_0800919c",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08009654",
            "FUN_08007bc2",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_08005a68",
            "FUN_0800b2e0",
            "FUN_08002908",
            "FUN_08007c40",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_0800b2e8",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08006c04",
            "thunk_FUN_08009990",
            "FUN_08009278",
            "FUN_08007da8",
            "FUN_08008a74",
            "FUN_0800b430",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08000478",
            "FUN_08007e1c",
            "FUN_08006b00",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08005bdc",
            "FUN_080069b4",
            "FUN_08007b70",
            "FUN_080018fc",
            "FUN_08006998",
            "FUN_080078f4",
            "FUN_08008bf0",
            "FUN_08007854",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800881c",
            "FUN_080052ac",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08007ea4",
            "FUN_08002fac"
        ],
        [
            "FUN_08005984",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_08005760",
            "FUN_08005a98",
            "FUN_08006c9c",
            "FUN_08005778",
            "FUN_08006628",
            "FUN_08008250",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08000268",
            "FUN_080001f8",
            "FUN_08006d98",
            "FUN_080079c0",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08006dc4",
            "FUN_08005c30",
            "FUN_0800056c",
            "FUN_0800981c",
            "FUN_080004fc",
            "FUN_08005238",
            "FUN_08007d08",
            "FUN_08006de0",
            "FUN_08006d2e",
            "FUN_0800adf0",
            "FUN_0800b4d0",
            "FUN_08002f40",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08005790",
            "FUN_0800826a",
            "FUN_08005324",
            "FUN_0800640c",
            "FUN_08006e1a"
        ],
        [
            "FUN_0800585c",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_0800369c",
            "FUN_08009214",
            "FUN_080036f0",
            "FUN_08001d4c",
            "FUN_08003778",
            "FUN_08006d72",
            "FUN_080096e8",
            "FUN_0800583c",
            "FUN_08009410",
            "FUN_08002f24",
            "FUN_08006680",
            "FUN_08000340",
            "FUN_080091fc",
            "FUN_080036c6",
            "FUN_080025e8",
            "FUN_08005814",
            "FUN_08009228",
            "FUN_08007c7c",
            "FUN_080066cc",
            "FUN_0800618c",
            "FUN_0800283a",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_0800923c",
            "FUN_080002a0",
            "FUN_08008af0",
            "FUN_080002b6"
        ],
        [
            "FUN_08007ad0",
            "FUN_0800195c",
            "FUN_08000374",
            "FUN_080037fc",
            "FUN_0800375c",
            "FUN_08005900",
            "FUN_08002638",
            "FUN_080098d0",
            "FUN_080059b4",
            "FUN_08004148",
            "FUN_08004030",
            "FUN_080003ec",
            "FUN_08003740",
            "FUN_08007f54",
            "FUN_08007436",
            "FUN_080041a0",
            "FUN_08003a18",
            "FUN_08004228",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08003826",
            "FUN_08009250",
            "FUN_0800423c",
            "FUN_08009264"
        ],
        [
            "FUN_08007930",
            "FUN_08009318",
            "FUN_080046d0",
            "FUN_080094c0",
            "FUN_08004250",
            "FUN_08004d7c",
            "FUN_08004940",
            "FUN_08004d2c",
            "FUN_08002978",
            "FUN_08004c48"
        ],
        [
            "FUN_080029d8",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08002c18",
            "FUN_080039bc",
            "FUN_080004ac",
            "FUN_08002afc",
            "FUN_08007756"
        ],
        [
            "FUN_08002ba8",
            "FUN_080051b4",
            "FUN_08002e08",
            "FUN_08002a94"
        ],
        [
            "FUN_08002edc"
        ],
        [
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_0800525c",
            "FUN_08000220",
            "FUN_08002408",
            "FUN_080024c4"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ],
        [
            "FUN_080092c4"
        ]
    ],
    "locked_functions": []
}