{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_data_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeData_08000188(undefined4 inputParameter)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputParameter;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_data_08000188",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_values_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_values_080001ac(undefined4 first_value,undefined4 second_value)\n\n{\n  return CONCAT44(second_value,first_value);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_values_080001ac",
                "param_1": "first_value",
                "param_2": "second_value"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_080001f8",
            "code": "\nvoid initialize_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  execute_initialization();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_080001f8",
                "execute_initialization_08000210": "execute_initialization"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "execute_initialization_08000210",
            "code": "\nvoid executeInitialization_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "execute_initialization_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "handle_data_08000220",
            "code": "\nvoid handleData_08000220(char data)\n\n{\n  if (data != DAT_20000468) {\n    processData();\n    if (data == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = data;\n    }\n    else if (data == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = data;\n    }\n    else {\n      initialize();\n      DAT_20000468 = data;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "handle_data_08000220",
                "param_1": "data",
                "process_data_08002fd4": "processData",
                "execute_initialization_08000210": "initialize"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_data_08000268",
            "code": "\n\n\nint calculate_data_08000268(void)\n\n{\n  int retrievedData;\n  \n  retrievedData = retrieve_data();\n  return (retrievedData + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_data_08000268",
                "iVar1": "retrievedData",
                "retrieve_data_08005a84": "retrieve_data"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "determine_ending_value_080002a0",
            "code": "\nvoid determine_ending_value_080002a0(undefined4 input)\n\n{\n  determine_ending_value_080002a0_08005a98(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "determine_ending_value_080002a0",
                "param_1": "input"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "find_matching_value_080002b6",
            "code": "\nvoid findMatchingValue_080002b6(uint inputValue)\n\n{\n  uint value1;\n  uint value2;\n  bool isMatch;\n  longlong calculatedValue;\n  undefined8 calculatedData;\n  \n  calculatedValue = calculate_data_08000268();\n  value2 = (uint)(calculatedValue + (ulonglong)inputValue >> 0x20);\n  do {\n    calculatedData = calculate_data_08000268();\n    value1 = (uint)((ulonglong)calculatedData >> 0x20);\n    isMatch = value2 <= value1;\n    if (value1 == value2) {\n      isMatch = (uint)(calculatedValue + (ulonglong)inputValue) <= (uint)calculatedData;\n    }\n  } while (!isMatch);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "find_matching_value_080002b6",
                "param_1": "inputValue",
                "uVar1": "value1",
                "uVar2": "value2",
                "bVar3": "isMatch",
                "lVar4": "calculatedValue",
                "uVar5": "calculatedData"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initialize_data_080002f0(void)\n\n{\n  copy_data_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_data_entry_08000310",
            "code": "\nundefined get_data_entry_08000310(uint entry_index)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_data();\n  }\n  return (&DAT_20000470)[entry_index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_data_entry_08000310",
                "param_1": "entry_index",
                "initialize_data_080002f0": "initialize_data"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeData();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value",
                "initialize_data_080002f0": "initializeData"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid process_data_08000374(int data_offset,char *data_ptr,int data_size)\n\n{\n  int remaining_size;\n  char *current_ptr;\n  int current_offset;\n  char accumulator;\n  \n  accumulator = '\\0';\n  remaining_size = data_size;\n  current_ptr = data_ptr;\n  current_offset = data_offset;\n  if (DAT_2000046c == 0) {\n    initialize_data_080002f0();\n    current_ptr = data_ptr;\n    current_offset = data_offset;\n  }\n  for (; remaining_size != 0; remaining_size = remaining_size + -1) {\n    accumulator = (accumulator != '\\0') + *current_ptr;\n    store_data_08000340(current_offset,*current_ptr);\n    current_ptr = current_ptr + 1;\n    current_offset = current_offset + 1;\n  }\n  store_data_08000340(current_offset,accumulator);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "data_offset",
                "param_2": "data_ptr",
                "param_3": "data_size",
                "local_1c": "remaining_size",
                "local_18": "current_ptr",
                "local_14": "current_offset",
                "local_9": "accumulator"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_data_equality_080003ec",
            "code": "\nbool checkDataEquality_080003ec(char *inputArray,int startIndex,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remainingLength;\n  int currentIndex;\n  char *currentElement;\n  byte count;\n  \n  count = 0;\n  remainingLength = length;\n  currentIndex = startIndex;\n  currentElement = inputArray;\n  if (DAT_2000046c == 0) {\n    initialize_data_080002f0();\n    currentIndex = startIndex;\n    currentElement = inputArray;\n  }\n  for (; remainingLength != 0; remainingLength = remainingLength + -1) {\n    cVar1 = get_data_entry_08000310(currentIndex);\n    count = cVar1 + (count != 0);\n    *currentElement = cVar1;\n    currentIndex = currentIndex + 1;\n    currentElement = currentElement + 1;\n  }\n  uVar2 = get_data_entry_08000310(currentIndex);\n  return count == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_data_equality_080003ec",
                "param_1": "inputArray",
                "param_2": "startIndex",
                "param_3": "length",
                "local_1c": "remainingLength",
                "local_18": "currentIndex",
                "local_14": "currentElement",
                "local_9": "count"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_parameters_08000478",
            "code": "\nvoid initializeParameters_08000478(undefined inputParam1,undefined inputParam2,undefined inputParam3)\n\n{\n  DAT_20000e89 = inputParam1;\n  DAT_20000e8a = inputParam2;\n  DAT_20000e8b = inputParam3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_parameters_08000478",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_data_processing_080004ac",
            "code": "\nvoid initializeDataProcessing_080004ac(void)\n\n{\n  int result;\n  \n  copyData(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initializeParameters(0,1,2);\n  DAT_20000e74 = 1;\n  result = checkAndCopyData(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    displayErrorMessage(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_data_processing_080004ac",
                "iVar1": "result",
                "copy_data_0800b430": "copyData",
                "initialize_parameters_08000478": "initializeParameters",
                "check_and_copy_data_08004d7c": "checkAndCopyData",
                "display_error_message_08004030": "displayErrorMessage"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_and_store_floating_point_values_080004fc",
            "code": "\nvoid calculateAndStoreFloatingPointValues_080004fc(undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  undefined4 modifiedValue;\n  \n  modifiedValue = calculate_modified_param_08008e44(inputValue1);\n  DAT_20000e7c = calculate_floating_point_08009054(modifiedValue,DAT_20000ebc);\n  modifiedValue = calculate_modified_param_08008e44(inputValue2);\n  DAT_20000e80 = calculate_floating_point_08009054(modifiedValue,DAT_20000ec0);\n  modifiedValue = calculate_modified_param_08008e44(inputValue3);\n  DAT_20000e84 = calculate_floating_point_08009054(modifiedValue,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_and_store_floating_point_values_080004fc",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "uVar1": "modifiedValue"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "calculate_0800056c",
            "code": "\nundefined4 calculate_0800056c(undefined4 input_value)\n\n{\n  undefined8 reversed_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    reversed_value = reverse_bits(input_value);\n    reversed_value = calculate_0800056c_improved_result((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0x66666666,0x40396666);\n    input_value = calculate_0800056c_floating_point_value((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "calculate_0800056c",
                "param_1": "input_value",
                "uVar1": "reversed_value",
                "reverse_bits_08008590": "reverse_bits",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "calculate_floating_point_value_08008c30": "calculate_floating_point_value"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_and_validate_input_080005b4",
            "code": "\nchar process_and_validate_input_080005b4(undefined4 input_data)\n\n{\n  int result;\n  undefined4 temp_result;\n  char error_code;\n  uint temp_variable_1;\n  undefined4 temp_variable_2;\n  undefined8 temp_variable_3;\n  undefined8 temp_variable_4;\n  undefined8 temp_variable_5;\n  undefined4 array_1 [4];\n  undefined4 variable_1;\n  undefined4 variable_2;\n  undefined4 variable_3;\n  undefined4 temp_stack_1;\n  undefined4 temp_stack_2;\n  undefined4 array_2 [6];\n  undefined4 temp_variable_6;\n  byte character;\n  undefined flag_1;\n  undefined4 flag_2;\n  undefined4 flag_3;\n  undefined boolean_flag;\n  uint code_value_1;\n  byte local_3d;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  char input_validation_flag;\n  uint input_shift;\n  undefined4 local_var_1;\n  sbyte local_var_2;\n  char local_var_3;\n  char local_var_4;\n  undefined4 local_var_5;\n  byte integer_variable_1;\n  ushort integer_variable_2;\n  uint integer_variable_3;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    error_code = '\\f';\n  }\n  else {\n    flag_1 = 0;\n    integer_variable_2 = 0;\n    integer_variable_1 = 0;\n    local_var_5 = 0xbf800000;\n    local_var_4 = '\\0';\n    local_var_3 = '\\0';\n    copy_data_0800b430(array_2 + 3,0,0xc);\n    copy_data_0800b430(array_2,0,0xc);\n    DAT_20000e70 = '\\0';\n    local_var_2 = 0;\n    while (result = parse_and_validate_character_0800184c(&character,array_2 + 6,input_data,&flag_1), result != 0) {\n      temp_variable_3 = reverse_bits_08008590(temp_variable_6);\n      temp_variable_3 = calculate_shifted_value_08009798((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n      integer_variable_3 = calculate_shifted_value_08008ba0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n      if (character == 0x47) {\n        switch(integer_variable_3) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_var_2 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_var_2 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_var_2 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_var_2 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_var_2 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_var_2 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_var_2 = 6;\n        }\n        switch(integer_variable_3) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          local_var_3 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          local_var_3 = '\\x02';\n          break;\n        case 0x11:\n          initialize_parameters_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_parameters_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_parameters_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_result = calculate_floating_point_value_08008eec(temp_variable_6,0x41200000);\n          temp_variable_3 = reverse_bits_08008590(temp_result);\n          temp_variable_3 = calculate_shifted_value_08009798((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          integer_variable_3 = calculate_shifted_value_08008ba0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          switch(integer_variable_3) {\n          case 0x118:\n            local_var_3 = '\\x03';\n            break;\n          case 0x119:\n            local_var_3 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            local_var_3 = '\\x05';\n            break;\n          case 0x12d:\n            local_var_3 = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_var_4 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)integer_variable_3 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_result = calculate_floating_point_value_08008eec(temp_variable_6,0x41200000);\n          temp_variable_3 = reverse_bits_08008590(temp_result);\n          temp_variable_3 = calculate_shifted_value_08009798((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          integer_variable_3 = calculate_shifted_value_08008ba0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          if (integer_variable_3 == 0x398) {\n            local_var_3 = '\\a';\n          }\n          else if (integer_variable_3 == 0x399) {\n            local_var_3 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (character == 0x4d) {\n        if (integer_variable_3 == 0x1e) {\nLAB_08000b96:\n          local_var_2 = 5;\n        }\n        else if ((int)integer_variable_3 < 0x1f) {\n          if ((int)integer_variable_3 < 3) {\n            if (-1 < (int)integer_variable_3) goto LAB_08000b96;\n          }\n          else if (integer_variable_3 - 3 < 3) {\n            local_var_2 = 8;\n          }\n        }\n        switch(integer_variable_3) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (local_var_2 != 0) {\n        if (((int)(uint)integer_variable_2 >> local_var_2 & 1U) == 0) {\n          integer_variable_2 = integer_variable_2 | (ushort)(1 << local_var_2);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        local_var_2 = 0;\n      }\n    }\n    error_code = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      local_var_1 = 0;\n      input_shift = 0;\n      input_validation_flag = '\\0';\n      flag_1 = 0;\nswitchD_08000d18_caseD_47:\n      result = parse_and_validate_character_0800184c(&character,array_2 + 6,input_data,&flag_1);\n      if (result != 0) {\n        switch(character) {\n        case 0x46:\n          result = check_concatenation_result_0800923c(temp_variable_6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = calculate_0800056c(temp_variable_6);\n          }\n          else {\n            local_var_5 = calculate_0800056c(temp_variable_6);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_variable_1 = (uint)character;\n          temp_result = calculate_0800056c(temp_variable_6);\n          array_2[temp_variable_1 - 0x49] = temp_result;\n          break;\n        case 0x4c:\n          temp_variable_3 = reverse_bits_08008590(temp_variable_6);\n          temp_variable_3 = calculate_shifted_value_08009798((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          input_validation_flag = validate_input_08008bf0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          break;\n        case 0x50:\n          local_var_1 = temp_variable_6;\n          break;\n        case 0x52:\n          input_shift = calculate_0800056c(temp_variable_6);\n          break;\n        case 0x53:\n          result = check_string_termination_08009228(temp_variable_6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = check_string_termination_08009228(temp_variable_6,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_variable_3 = reverse_bits_08008590(temp_variable_6);\n          temp_variable_3 = calculate_shifted_value_08009798((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          DAT_20000e88 = validate_input_08008bf0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          break;\n        case 0x58:\n          array_2[3] = calculate_0800056c(temp_variable_6);\n          integer_variable_1 = integer_variable_1 | 1;\n          break;\n        case 0x59:\n          array_2[4] = calculate_0800056c(temp_variable_6);\n          integer_variable_1 = integer_variable_1 | 2;\n          break;\n        case 0x5a:\n          array_2[5] = calculate_0800056c(temp_variable_6);\n          integer_variable_1 = integer_variable_1 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      error_code = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_and_initialize_data_0800525c((int)DAT_20000e76);\n          handle_data_08000220(DAT_20000e77);\n        }\n        if ((integer_variable_2 & 0x200) != 0) {\n          result = check_and_copy_data_08004d7c(DAT_20000e8c,&variable_3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = variable_3;\n          DAT_20000e94 = temp_stack_1;\n          DAT_20000e98 = temp_stack_2;\n        }\n        switch(local_var_3) {\n        case '\\x01':\n          result = check_string_termination_08009228(local_var_1,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_and_alarm_08002408(local_var_1);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_variable_3 = reverse_bits_08008590(local_var_1);\n          temp_variable_3 = calculate_shifted_value_08009798((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          integer_variable_3 = calculate_shifted_value_08008ba0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n          if ((((input_validation_flag == '\\x02') || (input_validation_flag == '\\x14')) && (-1 < (int)integer_variable_3)) &&\n             ((int)integer_variable_3 < 7)) {\n            if ((integer_variable_1 == 0) && (input_validation_flag == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)integer_variable_3 < 1) {\n                integer_variable_3 = (uint)DAT_20000e8c;\n              }\n              else {\n                integer_variable_3 = integer_variable_3 - 1;\n              }\n              result = check_and_copy_data_08004d7c(integer_variable_3 & 0xff,array_1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (local_3a = 0; local_3a < 3; local_3a = local_3a + 1) {\n                if (((int)(uint)integer_variable_1 >> local_3a & 1U) != 0) {\n                  if (input_validation_flag == '\\x14') {\n                    temp_variable_1 = (uint)local_3a;\n                    temp_result = calculate_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (local_3a + 2) * 4),\n                                         array_2[local_3a + 3]);\n                    array_1[temp_variable_1] = temp_result;\n                  }\n                  else {\n                    array_1[local_3a] = array_2[local_3a + 3];\n                  }\n                }\n              }\n              process_data_08004bf4(integer_variable_3 & 0xff,array_1);\n              if (integer_variable_3 == DAT_20000e8c) {\n                DAT_20000e90 = array_1[0];\n                DAT_20000e94 = array_1[1];\n                DAT_20000e98 = array_1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          integer_variable_1 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (integer_variable_1 != 0) {\n            for (local_3b = 0; local_3b < 3; local_3b = local_3b + 1) {\n              if (((int)(uint)integer_variable_1 >> local_3b & 1U) == 0) {\n                array_2[local_3b + 3] = *(undefined4 *)(&DAT_20000e74 + (local_3b + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_variable_1 = (uint)local_3b;\n                temp_result = calculate_float_08008cdc(array_2[local_3b + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3b + 2) * 4));\n                array_2[temp_variable_1 + 3] = temp_result;\n              }\n              else {\n                temp_variable_2 = array_2[local_3b + 3];\n                temp_result = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (local_3b + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3b + 10) * 4));\n                temp_variable_1 = (uint)local_3b;\n                temp_result = calculate_float_08008cdc(temp_variable_2,temp_result);\n                array_2[temp_variable_1 + 3] = temp_result;\n              }\n            }\n            check_and_process_alarm_08001e98(array_2[3],array_2[4],array_2[5],DAT_20000ed0,0);\n          }\n          if (local_var_3 == '\\x05') {\n            result = check_and_copy_data_08004d7c(7,array_1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = check_and_copy_data_08004d7c(6,array_1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          check_and_process_alarm_08001e98(array_1[3],variable_1,variable_2,DAT_20000ed0,0);\n          DAT_20000e7c = array_1[3];\n          DAT_20000e80 = variable_1;\n          DAT_20000e84 = variable_2;\n          integer_variable_1 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (local_var_3 == '\\x06') {\n            process_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (integer_variable_1 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (local_3c = 0; local_3c < 3; local_3c = local_3c + 1) {\n              if (((int)(uint)integer_variable_1 >> local_3c & 1U) != 0) {\n                temp_result = calculate_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (local_3c + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (local_3c + 8) * 4));\n                temp_variable_1 = (uint)local_3c;\n                temp_result = calculate_float_08008cd8(temp_result,array_2[local_3c + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_variable_1 + 10) * 4) = temp_result;\n              }\n            }\n          }\n          integer_variable_1 = 0;\n          break;\n        case '\\b':\n          copy_data_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((integer_variable_2 & 4) != 0) || (integer_variable_1 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = check_string_termination_08009228(local_var_5,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((local_var_4 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (local_3d = 0; local_3d < 3; local_3d = local_3d + 1) {\n            if (((int)(uint)integer_variable_1 >> local_3d & 1U) == 0) {\n              array_2[local_3d + 3] = *(undefined4 *)(&DAT_20000e74 + (local_3d + 2) * 4);\n            }\n            else if (local_var_4 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_variable_1 = (uint)local_3d;\n                temp_result = calculate_float_08008cdc(array_2[local_3d + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3d + 2) * 4));\n                array_2[temp_variable_1 + 3] = temp_result;\n              }\n              else {\n                temp_variable_2 = array_2[local_3d + 3];\n                temp_result = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (local_3d + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (local_3d + 10) * 4));\n                temp_variable_1 = (uint)local_3d;\n                temp_result = calculate_float_08008cdc(temp_variable_2,temp_result);\n                array_2[temp_variable_1 + 3] = temp_result;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (integer_variable_1 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              check_and_process_alarm_08001e98(array_2[3],array_2[4],array_2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (integer_variable_1 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_result = local_var_5;\n              if (DAT_20000e72 == '\\0') {\n                temp_result = DAT_20000e78;\n              }\n              check_and_process_alarm_08001e98(array_2[3],array_2[4],array_2[5],temp_result,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            integer_variable_1 = integer_variable_1 & ~(byte)(1 << DAT_20000e8b);\n            if ((integer_variable_1 == 0) ||\n               (((result = check_concatenation_result_08009214(input_shift,0), result != 0 &&\n                 (result = check_concatenation_result_08009214(array_2[DAT_20000e89],0), result != 0)) &&\n                (result = check_concatenation_result_08009214(array_2[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_concatenation_result_08009214(input_shift,0);\n              if (result == 0) {\n                flag_3 = calculate_float_08008cd8(array_2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                flag_2 = calculate_float_08008cd8(array_2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                copy_data_0800b430(array_2,0,0xc);\n                temp_result = calculate_floating_point_value_08008eec(input_shift,0x40800000);\n                temp_result = calculate_floating_point_value_08008eec(temp_result,input_shift);\n                temp_variable_2 = calculate_floating_point_value_08008eec(flag_3,flag_3);\n                temp_result = calculate_float_08008cd8(temp_result,temp_variable_2);\n                temp_variable_2 = calculate_floating_point_value_08008eec(flag_2,flag_2);\n                code_value_1 = calculate_float_08008cd8(temp_result,temp_variable_2);\n                result = check_string_termination_08009228(code_value_1,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_variable_3 = reverse_bits_08008590(code_value_1);\n                temp_variable_3 = process_binary_data_080098d0((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n                temp_variable_4 = reverse_bits_08008590(flag_3);\n                temp_variable_5 = reverse_bits_08008590(flag_2);\n                temp_variable_4 = calculate_and_set_hypotenuse_0800981c((int)temp_variable_4,(int)((ulonglong)temp_variable_4 >> 0x20),(int)temp_variable_5,\n                                     (int)((ulonglong)temp_variable_5 >> 0x20));\n                temp_variable_3 = calculate_float_08008894((int)temp_variable_3,(uint)((ulonglong)temp_variable_3 >> 0x20) ^ 0x80000000,\n                                     (int)temp_variable_4,(int)((ulonglong)temp_variable_4 >> 0x20));\n                code_value_1 = calculate_floating_point_value_08008c30((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  code_value_1 = code_value_1 ^ 0x80000000;\n                }\n                result = check_string_termination_08009228(input_shift,0);\n                if (result != 0) {\n                  code_value_1 = code_value_1 ^ 0x80000000;\n                  input_shift = input_shift ^ 0x80000000;\n                }\n                temp_result = calculate_floating_point_value_08008eec(flag_2,code_value_1);\n                temp_result = calculate_float_08008cd8(flag_3,temp_result);\n                temp_variable_1 = (uint)DAT_20000e89;\n                temp_result = calculate_floating_point_value_08008eec(temp_result,0x3f000000);\n                array_2[temp_variable_1] = temp_result;\n                temp_result = calculate_floating_point_value_08008eec(flag_3,code_value_1);\n                temp_result = calculate_float_08008cdc(temp_result,flag_2);\n                temp_variable_1 = (uint)DAT_20000e8a;\n                temp_result = calculate_floating_point_value_08008eec(temp_result,0x3f000000);\n                array_2[temp_variable_1] = temp_result;\n              }\n              else {\n                temp_variable_3 = reverse_bits_08008590(array_2[DAT_20000e89]);\n                temp_variable_4 = reverse_bits_08008590(array_2[DAT_20000e8a]);\n                temp_variable_3 = calculate_and_set_hypotenuse_0800981c((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20),(int)temp_variable_4,\n                                     (int)((ulonglong)temp_variable_4 >> 0x20));\n                input_shift = calculate_floating_point_value_08008c30((int)temp_variable_3,(int)((ulonglong)temp_variable_3 >> 0x20));\n              }\n              boolean_flag = DAT_20000e71 == '\\x02';\n              temp_result = local_var_5;\n              if (DAT_20000e72 == '\\0') {\n                temp_result = DAT_20000e78;\n              }\n              calculate_hypotenuse_08001f00(&DAT_20000e7c,array_2 + 3,array_2,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp_result,DAT_20000e72,input_shift,boolean_flag);\n            }\n            break;\n          case '\\x04':\n            if (integer_variable_1 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array_2[3];\n          DAT_20000e80 = array_2[4];\n          DAT_20000e84 = array_2[5];\n        }\n        error_code = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_data_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_conditions_080025e8();\n            error_code = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            error_code = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return error_code;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_and_validate_input_080005b4",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "temp_result",
                "cVar3": "error_code",
                "uVar4": "temp_variable_1",
                "uVar5": "temp_variable_2",
                "uVar6": "temp_variable_3",
                "uVar7": "temp_variable_4",
                "uVar8": "temp_variable_5",
                "local_94": "array_1",
                "local_84": "variable_1",
                "local_80": "variable_2",
                "local_7c": "variable_3",
                "uStack_78": "temp_stack_1",
                "uStack_74": "temp_stack_2",
                "auStack_70": "array_2",
                "local_58": "temp_variable_6",
                "local_52": "character",
                "local_51": "flag_1",
                "local_50": "flag_2",
                "local_4c": "flag_3",
                "local_45": "boolean_flag",
                "local_44": "code_value_1",
                "local_27": "integer_variable_1",
                "local_26": "integer_variable_2",
                "local_24": "integer_variable_3",
                "local_39": "input_validation_flag",
                "local_38": "input_shift",
                "local_34": "local_var_1",
                "local_2f": "local_var_2",
                "local_2e": "local_var_3",
                "local_2d": "local_var_4",
                "local_2c": "local_var_5"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "parse_and_validate_character_0800184c",
            "code": "\nundefined4 parse_and_validate_character_0800184c(byte *output_byte,undefined4 input_var,int data,byte *counter)\n\n{\n  int result;\n  undefined4 success;\n  \n  if (*(char *)(data + (uint)*counter) == '\\0') {\n    success = 0;\n  }\n  else {\n    *output_byte = *(byte *)(data + (uint)*counter);\n    if ((*output_byte < 0x41) || (0x5a < *output_byte)) {\n      DAT_20000e70 = 2;\n      success = 0;\n    }\n    else {\n      *counter = *counter + 1;\n      result = parse_integer_and_store_08002638(data,counter,input_var);\n      if (result == 0) {\n        DAT_20000e70 = 1;\n        success = 0;\n      }\n      else {\n        success = 1;\n      }\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "parse_and_validate_character_0800184c",
                "param_1": "output_byte",
                "param_2": "input_var",
                "param_3": "data",
                "param_4": "counter",
                "iVar1": "result",
                "uVar2": "success"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_080018cc",
            "code": "\n\n\nvoid updateData_080018cc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_080018cc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_register_value_080018fc",
            "code": "\n\n\nvoid updateRegisterValue_080018fc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_register_value_080018fc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "update_flag_based_on_condition_0800192c",
            "code": "\nvoid updateFlagBasedOnCondition_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "update_flag_based_on_condition_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_conditions_0800195c",
            "code": "\nvoid initialize_and_check_conditions_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_conditions_0800195c_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_conditions_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_result_08001994",
            "code": "\nvoid calculateResult_08001994(byte inputFlag,char isFlagSet,char isParamSet,undefined4 param)\n\n{\n  undefined4 resultVar1;\n  uint resultVar2;\n  undefined8 resultVar3;\n  undefined8 resultVar4;\n  byte tempByte1;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  ushort tempShort1;\n  uint tempVar4;\n  int tempInt1;\n  undefined4 tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  ushort tempShort2;\n  uint tempVar8;\n  uint tempVar9;\n  int tempInt2;\n  int tempInt3;\n  int tempInt4;\n  int tempInt5;\n  ushort tempShort3;\n  uint tempVar10;\n  char tempChar1;\n  \n  tempChar1 = '\\0';\n  copy_data_0800b430(&tempVar1,0,0xc);\n  if ((inputFlag & 1) != 0) {\n    tempChar1 = tempChar1 + '\\x01';\n    resultVar3 = reverse_bits_08008590(DAT_20000ebc);\n    tempVar1 = calculate_shifted_product_080095b8((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  }\n  if ((inputFlag & 2) != 0) {\n    tempChar1 = tempChar1 + '\\x01';\n    resultVar3 = reverse_bits_08008590(DAT_20000ec0);\n    tempVar2 = calculate_shifted_product_080095b8((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  }\n  if ((inputFlag & 4) != 0) {\n    tempChar1 = tempChar1 + '\\x01';\n    resultVar3 = reverse_bits_08008590(DAT_20000ec4);\n    tempVar3 = calculate_shifted_product_080095b8((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  }\n  resultVar2 = tempVar3;\n  if (tempVar3 < tempVar2) {\n    resultVar2 = tempVar2;\n  }\n  tempVar6 = tempVar1;\n  if (tempVar1 < resultVar2) {\n    tempVar6 = resultVar2;\n  }\n  resultVar3 = reverse_bits_0800854c(tempVar6);\n  resultVar4 = reverse_bits_0800854c(tempChar1);\n  resultVar4 = process_binary_data_080098d0((int)resultVar4,(int)((ulonglong)resultVar4 >> 0x20));\n  resultVar3 = calculate_float_08008894((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20),(int)resultVar4,\n                       (int)((ulonglong)resultVar4 >> 0x20));\n  tempVar5 = calculate_floating_point_value_08008c30((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  resultVar1 = calculate_floating_point_value_08008eec(DAT_20000edc,tempVar5);\n  resultVar1 = calculate_floating_point_08009054(resultVar1,0x453b8000);\n  resultVar3 = reverse_bits_08008590(resultVar1);\n  resultVar3 = decode_and_validate_number_08009318((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  tempInt1 = validate_input_08008bf0((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  resultVar3 = reverse_bits_0800854c(tempChar1);\n  resultVar3 = process_binary_data_080098d0((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  resultVar4 = reverse_bits_08008590(param);\n  resultVar3 = calculate_improved_result_08008640((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20),(int)resultVar4,\n                       (int)((ulonglong)resultVar4 >> 0x20));\n  resultVar1 = calculate_floating_point_value_08008c30((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  resultVar1 = calculate_floating_point_value_08008eec(tempVar5,resultVar1);\n  resultVar1 = calculate_floating_point_08009054(0x4c64e1c0,resultVar1);\n  resultVar3 = reverse_bits_08008590(resultVar1);\n  tempVar4 = calculate_shifted_product_080095b8((int)resultVar3,(int)((ulonglong)resultVar3 >> 0x20));\n  tempVar10 = 75000;\n  if (tempVar4 < 75000) {\n    tempVar10 = tempVar4;\n  }\n  tempShort1 = DAT_20000ed4;\n  tempShort3 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (isFlagSet == '\\0') {\n    tempShort3 = tempShort3 ^ 0xaa0;\n  }\n  update_register_value_080018fc(tempShort3);\n  update_data_080018cc(tempShort1);\n  tempInt3 = -(tempVar6 >> 1);\n  tempInt2 = tempVar10 - DAT_20000ec9;\n  tempVar9 = 0;\n  tempVar8 = 10000;\n  tempByte1 = inputFlag;\n  tempInt4 = tempInt3;\n  tempInt5 = tempInt3;\n  while( true ) {\n    tempShort2 = tempShort1;\n    tempVar7 = calculate_sum_080078f4();\n    if (isParamSet == '\\0') {\n      tempVar7 = tempVar7 ^ 0x1e;\n    }\n    if (((tempByte1 & 1) != 0) && (tempInt5 = tempInt5 + tempVar1, 0 < tempInt5)) {\n      if ((tempVar7 & 0x10) == 0) {\n        tempByte1 = tempByte1 & 0xfe;\n      }\n      else {\n        tempShort2 = tempShort2 ^ 0x10;\n      }\n      tempInt5 = tempInt5 - tempVar6;\n    }\n    if (((tempByte1 & 2) != 0) && (tempInt4 = tempInt4 + tempVar2, 0 < tempInt4)) {\n      if ((tempVar7 & 8) == 0) {\n        tempByte1 = tempByte1 & 0xfd;\n      }\n      else {\n        tempShort2 = tempShort2 ^ 0x440;\n      }\n      tempInt4 = tempInt4 - tempVar6;\n    }\n    if (((tempByte1 & 4) != 0) && (tempInt3 = tempInt3 + tempVar3, 0 < tempInt3)) {\n      if ((tempVar7 & 4) == 0) {\n        tempByte1 = tempByte1 & 0xfb;\n      }\n      else {\n        tempShort2 = tempShort2 ^ 0x100;\n      }\n      tempInt3 = tempInt3 - tempVar6;\n    }\n    if ((tempByte1 == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_080018cc(tempShort2);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_080018cc(tempShort1);\n    FUNC_08002828(tempInt2);\n    if ((tempVar4 < tempVar10) && (tempVar8 = tempVar10 + tempVar8, 20000 < tempVar8)) {\n      tempVar8 = tempVar8 - 20000;\n      tempVar9 = tempInt1 + tempVar9;\n      tempVar10 = 60000000 / tempVar9;\n      if (tempVar10 < tempVar4) {\n        tempVar10 = tempVar4;\n      }\n      tempInt2 = tempVar10 - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_result_08001994",
                "param_1": "inputFlag",
                "param_2": "isFlagSet",
                "param_3": "isParamSet",
                "param_4": "param",
                "uVar1": "resultVar1",
                "uVar2": "resultVar2",
                "uVar3": "resultVar3",
                "uVar4": "resultVar4",
                "local_61": "tempByte1",
                "local_5c": "tempVar1",
                "local_58": "tempVar2",
                "local_54": "tempVar3",
                "local_4e": "tempShort1",
                "local_4c": "tempVar4",
                "local_48": "tempInt1",
                "local_44": "tempVar5",
                "local_40": "tempVar6",
                "local_3c": "tempVar7",
                "local_36": "tempShort2",
                "local_34": "tempVar8",
                "local_30": "tempVar9",
                "local_2c": "tempInt2",
                "local_28": "tempInt3",
                "local_24": "tempInt4",
                "local_20": "tempInt5",
                "local_1a": "tempShort3",
                "local_18": "tempVar10",
                "local_11": "tempChar1"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_calculate_results_08001d4c",
            "code": "\nvoid initialize_and_calculate_results_08001d4c(void)\n\n{\n  char updatedChar;\n  char loopCounter;\n  \n  initializeGlobalData();\n  calculateResult(4,1,0,DAT_20000eec);\n  calculateResult(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loopCounter = '\\x02';\n  while( true ) {\n    updatedChar = loopCounter + -1;\n    if (loopCounter == '\\0') break;\n    calculateResult(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loopCounter = updatedChar;\n    if ('\\0' < updatedChar) {\n      calculateResult(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  initializeBitsAndCheckConditions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_calculate_results_08001d4c",
                "cVar1": "updatedChar",
                "local_9": "loopCounter",
                "initialize_data_08005790": "initializeGlobalData",
                "calculate_result_08001994": "calculateResult",
                "initialize_bits_and_check_conditions_080057e4": "initializeBitsAndCheckConditions"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_program_loop_08001ddc",
            "code": "\nvoid initialize_program_loop_08001ddc(void)\n\n{\n  FUNC_08008244();\n  initialize_and_validate_data();\n  initialize_program();\n  copy_data(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_data();\n      initialize_data_processing();\n      initialize_and_display_version();\n      initialize_program_execution();\n      initialize();\n      update_flag_condition();\n      initialize_data_process();\n      initialize_and_calculate_float_values();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        display_status_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        process_data();\n      }\n    }\n    process_alarm_status();\n    process_input();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_program_loop_08001ddc",
                "initialize_and_validate_data_080051b4": "initialize_and_validate_data",
                "initialize_program_0800583c": "initialize_program",
                "copy_data_0800b430": "copy_data",
                "initialize_data_08002f24": "initialize_data",
                "initialize_data_processing_080004ac": "initialize_data_processing",
                "initialize_and_display_grbl_version_080039a0": "initialize_and_display_version",
                "initialize_program_08005238": "initialize_program_execution",
                "initialize_080001f8": "initialize",
                "update_flag_based_on_condition_0800192c": "update_flag_condition",
                "initialize_data_08005814": "initialize_data_process",
                "initialize_and_calculate_floating_point_values_0800283a": "initialize_and_calculate_float_values",
                "display_status_message_080041a0": "display_status_message",
                "process_data_080039bc": "process_data",
                "process_alarm_status_08003a74": "process_alarm_status",
                "process_input_08003f34": "process_input"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "check_and_process_alarm_08001e98",
            "code": "\nvoid checkAndProcessAlarm_08001e98(undefined4 firstParam,undefined4 secondParam,undefined4 thirdParam,undefined4 fourthParam,\n                 undefined fifthParam)\n\n{\n  int equalityCheckResult;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_alarm_status_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      equalityCheckResult = check_equality_08002fac();\n    } while (equalityCheckResult != 0);\n    calculate_result_08003004(firstParam,secondParam,thirdParam,fourthParam,fifthParam);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_if_data_mode_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "check_and_process_alarm_08001e98",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "thirdParam",
                "param_4": "fourthParam",
                "param_5": "fifthParam",
                "iVar1": "equalityCheckResult"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_hypotenuse_08001f00",
            "code": "\nvoid calculateHypotenuse_08001f00(int inputArray1,undefined4 *inputArray2,int inputLength,byte index1,byte index2,byte index3\n                 ,undefined4 floatValue1,char flag1,undefined4 floatValue2,char flag2)\n\n{\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  int result;\n  uint tempValue3;\n  undefined8 tempValue4;\n  undefined8 tempValue5;\n  uint floatArray [4];\n  undefined4 tempFloat1;\n  undefined4 tempFloat2;\n  undefined4 tempFloat3;\n  undefined4 tempFloat4;\n  undefined4 tempFloat5;\n  undefined4 tempFloat6;\n  ushort inputCount;\n  undefined4 hypotenuse;\n  undefined4 tempFloat7;\n  undefined4 tempFloat8;\n  uint tempValue6;\n  undefined4 tempValue7;\n  undefined4 tempFloat9;\n  char flag3;\n  ushort iterationCount;\n  undefined4 finalValue;\n  uint tempValue8;\n  uint tempValue9;\n  \n  tempFloat9 = calculate_float_08008cdc(*(undefined4 *)((uint)index1 * 4 + inputArray1),\n                          *(undefined4 *)((uint)index1 * 4 + inputLength));\n  tempValue7 = calculate_float_08008cdc(*(undefined4 *)((uint)index2 * 4 + inputArray1),\n                          *(undefined4 *)((uint)index2 * 4 + inputLength));\n  tempValue6 = calculate_float_08008cd8(inputArray2[index3],*(undefined4 *)((uint)index3 * 4 + inputArray1));\n  tempValue9 = *(uint *)((uint)index1 * 4 + inputLength) ^ 0x80000000;\n  tempValue8 = *(uint *)((uint)index2 * 4 + inputLength) ^ 0x80000000;\n  tempFloat8 = calculate_float_08008cd8(inputArray2[index1],tempFloat9);\n  tempFloat7 = calculate_float_08008cd8(inputArray2[index2],tempValue7);\n  tempValue1 = calculate_floating_point_value_08008eec(tempValue9,tempFloat7);\n  tempValue2 = calculate_floating_point_value_08008eec(tempValue8,tempFloat8);\n  tempValue1 = calculate_float_08008cd8(tempValue1,tempValue2);\n  tempValue4 = reverse_bits_08008590(tempValue1);\n  tempValue1 = calculate_floating_point_value_08008eec(tempValue9,tempFloat8);\n  tempValue2 = calculate_floating_point_value_08008eec(tempValue8,tempFloat7);\n  tempValue1 = calculate_float_08008cdc(tempValue1,tempValue2);\n  tempValue5 = reverse_bits_08008590(tempValue1);\n  tempValue4 = calculate_float_value_thunk_08009990((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),(int)tempValue5,\n                             (int)((ulonglong)tempValue5 >> 0x20));\n  finalValue = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n  if (flag2 == '\\0') {\n    result = check_concatenation_result_0800923c(finalValue,0);\n    if (result != 0) {\n      tempValue4 = reverse_bits_08008590(finalValue);\n      tempValue4 = optimized_function_080082d4((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),0x54442d18,0x401921fb);\n      finalValue = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n    }\n  }\n  else {\n    result = concatenate_params_and_check_08009250(finalValue,0);\n    if (result != 0) {\n      tempValue4 = reverse_bits_08008590(finalValue);\n      tempValue4 = perform_arithmetic_operation_080082d0((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),0x54442d18,0x401921fb);\n      finalValue = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n    }\n  }\n  tempValue1 = calculate_floating_point_value_08008eec(finalValue,floatValue2);\n  tempValue4 = reverse_bits_08008590(tempValue1);\n  tempValue5 = reverse_bits_08008590(tempValue6 & 0x7fffffff);\n  tempValue4 = calculate_and_set_hypotenuse_0800981c((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),(int)tempValue5,\n                       (int)((ulonglong)tempValue5 >> 0x20));\n  hypotenuse = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n  result = check_concatenation_result_08009214(hypotenuse,0);\n  if (result == 0) {\n    tempValue1 = calculate_floating_point_08009054(hypotenuse,DAT_20000ed8);\n    tempValue4 = reverse_bits_08008590(tempValue1);\n    tempValue4 = calculate_result_080094c0((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n    inputCount = validate_input_08008bf0((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n    if (flag1 != '\\0') {\n      tempValue1 = calculate_modified_param_08008e44(inputCount);\n      floatValue1 = calculate_floating_point_value_08008eec(floatValue1,tempValue1);\n    }\n    tempValue1 = calculate_modified_param_08008e44(inputCount);\n    tempFloat6 = calculate_floating_point_08009054(finalValue,tempValue1);\n    tempValue1 = calculate_modified_param_08008e44(inputCount);\n    tempFloat5 = calculate_floating_point_08009054(tempValue6,tempValue1);\n    tempValue4 = reverse_bits_08008590(tempFloat6);\n    tempValue4 = calculate_improved_result_08008640((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),0,0x3fe00000);\n    tempValue5 = reverse_bits_08008590(tempFloat6);\n    tempValue4 = calculate_improved_result_08008640((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20),(int)tempValue5,\n                         (int)((ulonglong)tempValue5 >> 0x20));\n    tempValue4 = perform_arithmetic_operation_080082d0(0,0x3ff00000,(int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n    tempFloat4 = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n    tempFloat3 = tempFloat6;\n    flag3 = '\\0';\n    floatArray[index3] = *(uint *)(inputArray1 + (uint)index3 * 4);\n    for (iterationCount = 1; iterationCount < inputCount; iterationCount = iterationCount + 1) {\n      if ((int)flag3 < (int)(uint)DAT_20000efa) {\n        tempValue1 = calculate_floating_point_value_08008eec(tempValue9,tempFloat3);\n        tempValue2 = calculate_floating_point_value_08008eec(tempValue8,tempFloat4);\n        floatArray[3] = calculate_float_08008cdc(tempValue1,tempValue2);\n        tempValue1 = calculate_floating_point_value_08008eec(tempValue9,tempFloat4);\n        tempValue2 = calculate_floating_point_value_08008eec(tempValue8,tempFloat3);\n        tempValue9 = calculate_float_08008cd8(tempValue1,tempValue2);\n        tempValue8 = floatArray[3];\n        flag3 = flag3 + '\\x01';\n      }\n      else {\n        tempValue1 = calculate_modified_param_08008e44(iterationCount);\n        tempValue1 = calculate_floating_point_value_08008eec(tempValue1,tempFloat6);\n        tempValue4 = reverse_bits_08008590(tempValue1);\n        tempValue4 = improve_and_calculate_08009410((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n        tempFloat2 = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n        tempValue1 = calculate_modified_param_08008e44(iterationCount);\n        tempValue1 = calculate_floating_point_value_08008eec(tempValue1,tempFloat6);\n        tempValue4 = reverse_bits_08008590(tempValue1);\n        tempValue4 = calculate_improved_value_080096e8((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n        tempFloat1 = calculate_floating_point_value_08008c30((int)tempValue4,(int)((ulonglong)tempValue4 >> 0x20));\n        tempValue1 = calculate_floating_point_value_08008eec(*(uint *)((uint)index1 * 4 + inputLength) ^ 0x80000000,tempFloat2);\n        tempValue2 = calculate_floating_point_value_08008eec(*(undefined4 *)((uint)index2 * 4 + inputLength),tempFloat1);\n        tempValue9 = calculate_float_08008cdc(tempValue1,tempValue2);\n        tempValue1 = calculate_floating_point_value_08008eec(*(uint *)((uint)index1 * 4 + inputLength) ^ 0x80000000,tempFloat1);\n        tempValue2 = calculate_floating_point_value_08008eec(*(undefined4 *)((uint)index2 * 4 + inputLength),tempFloat2);\n        tempValue8 = calculate_float_08008cd8(tempValue1,tempValue2);\n        flag3 = '\\0';\n      }\n      tempValue3 = calculate_float_08008cdc(tempFloat9,tempValue9);\n      floatArray[index1] = tempValue3;\n      tempValue3 = calculate_float_08008cdc(tempValue7,tempValue8);\n      floatArray[index2] = tempValue3;\n      tempValue3 = calculate_float_08008cdc(floatArray[index3],tempFloat5);\n      floatArray[index3] = tempValue3;\n      check_and_process_alarm_08001e98(floatArray[0],floatArray[1],floatArray[2],floatValue1,flag1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    check_and_process_alarm_08001e98(*inputArray2,inputArray2[1],inputArray2[2],floatValue1,flag1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_hypotenuse_08001f00",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "param_3": "inputLength",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "floatValue1",
                "param_8": "flag1",
                "param_9": "floatValue2",
                "param_10": "flag2",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2",
                "iVar3": "result",
                "uVar4": "tempValue3",
                "uVar5": "tempValue4",
                "uVar6": "tempValue5",
                "local_6c": "floatArray",
                "local_5c": "tempFloat1",
                "local_58": "tempFloat2",
                "local_54": "tempFloat3",
                "local_50": "tempFloat4",
                "local_4c": "tempFloat5",
                "local_48": "tempFloat6",
                "local_42": "inputCount",
                "local_40": "hypotenuse",
                "local_3c": "tempFloat7",
                "local_38": "tempFloat8",
                "local_34": "tempValue6",
                "local_30": "tempValue7",
                "local_2c": "tempFloat9",
                "local_27": "flag3",
                "local_26": "iterationCount",
                "local_24": "finalValue",
                "local_20": "tempValue8",
                "local_1c": "tempValue9"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_and_alarm_08002408",
            "code": "\nvoid process_data_and_alarm_08002408(undefined4 input_value)\n\n{\n  undefined2 output_value;\n  undefined4 float_value_1;\n  undefined4 modified_param;\n  undefined8 float_value_2;\n  ushort loop_counter;\n  \n  float_value_1 = calculate_floating_point_value_08008eec(input_value,0x41a00000);\n  float_value_2 = reverse_bits_08008590(float_value_1);\n  float_value_2 = calculate_result_080094c0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  loop_counter = validate_input_08008bf0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  process_data_08002fd4();\n  float_value_1 = calculate_floating_point_value_08008eec(input_value,0x447a0000);\n  modified_param = calculate_modified_param_08008e44((uint)loop_counter * 0x32);\n  float_value_1 = calculate_float_08008cd8(float_value_1,modified_param);\n  float_value_2 = reverse_bits_08008590(float_value_1);\n  float_value_2 = calculate_result_080094c0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  output_value = validate_input_08008bf0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  FUNC_08002814(output_value);\n  while ((loop_counter != 0 && (process_alarm_status_08003a74(), DAT_20000ea8 == '\\0'))) {\n    determine_ending_value_080002a0(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_and_alarm_08002408",
                "param_1": "input_value",
                "uVar1": "output_value",
                "uVar2": "float_value_1",
                "uVar3": "modified_param",
                "uVar4": "float_value_2",
                "local_12": "loop_counter"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_system_080024c4",
            "code": "\nvoid initializeSystem_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isAlarmActive;\n  char isStatusValid;\n  char isFloatingPointValid;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initializeAndCalculateResults();\n  processAlarmStatus();\n  if (DAT_20000ea8 == '\\0') {\n    copyData(&DAT_20000eac,0,0xc);\n    initializeAndCalculateFloatValues();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isFloatingPointValid = -1;\n    }\n    else {\n      isFloatingPointValid = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isStatusValid = -1;\n    }\n    else {\n      isStatusValid = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isAlarmActive = -1;\n    }\n    else {\n      isAlarmActive = '\\x01';\n    }\n    uVar1 = calculateModifiedParam((int)isFloatingPointValid);\n    uVar1 = calculateFloatValue(uVar1,DAT_20000ef4);\n    uVar2 = calculateModifiedParam((int)isStatusValid);\n    uVar2 = calculateFloatValue(uVar2,DAT_20000ef4);\n    uVar3 = calculateModifiedParam((int)isAlarmActive);\n    uVar3 = calculateFloatValue(uVar3,DAT_20000ef4);\n    checkAndProcessAlarm(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeDataMode();\n    processData();\n    initializeAndCalculateFloatValues();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_system_080024c4",
                "local_13": "isAlarmActive",
                "local_12": "isStatusValid",
                "local_11": "isFloatingPointValid",
                "initialize_and_calculate_results_08001d4c": "initializeAndCalculateResults",
                "process_alarm_status_08003a74": "processAlarmStatus",
                "copy_data_0800b430": "copyData",
                "initialize_and_calculate_floating_point_values_0800283a": "initializeAndCalculateFloatValues",
                "calculate_modified_param_08008e44": "calculateModifiedParam",
                "calculate_floating_point_value_08008eec": "calculateFloatValue",
                "check_and_process_alarm_08001e98": "checkAndProcessAlarm",
                "initialize_if_data_mode_0800585c": "initializeDataMode",
                "process_data_08002fd4": "processData"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_and_check_conditions_080025e8",
            "code": "\nvoid initializeAndCheckConditions_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    initializeFunctionA();\n    executeInitialization();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      initializeBitsAndCheckConditions();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_and_check_conditions_080025e8",
                "initialize_function_08005250": "initializeFunctionA",
                "execute_initialization_08000210": "executeInitialization",
                "initialize_bits_and_check_conditions_080057e4": "initializeBitsAndCheckConditions"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_and_store_08002638",
            "code": "\nundefined4 parseIntegerAndStore_08002638(int base,byte *inputString,uint *result)\n\n{\n  byte digit;\n  bool isNegative;\n  bool hasOverflow;\n  int concatenationResult;\n  char *pointer1;\n  char *pointer2;\n  undefined4 returnValue;\n  undefined8 improvedResult;\n  uint value;\n  byte digitCount;\n  char exponent;\n  int integerResult;\n  char currentChar;\n  char *nextChar;\n  \n  pointer2 = (char *)(base + (uint)*inputString);\n  pointer1 = pointer2 + 1;\n  currentChar = *pointer2;\n  isNegative = false;\n  if (currentChar == '-') {\n    isNegative = true;\n    currentChar = *pointer1;\n    nextChar = pointer2 + 2;\n  }\n  else {\n    nextChar = pointer1;\n    if (currentChar == '+') {\n      nextChar = pointer2 + 2;\n      currentChar = *pointer1;\n    }\n  }\n  integerResult = 0;\n  exponent = '\\0';\n  digitCount = 0;\n  hasOverflow = false;\n  do {\n    digit = currentChar - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (hasOverflow) {\n          exponent = exponent + -1;\n        }\n        integerResult = (uint)digit + integerResult * 10;\n      }\n      else if (!hasOverflow) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (hasOverflow)) {\n        if (digitCount == 0) {\n          returnValue = 0;\n        }\n        else {\n          value = calculate_value_08008e3c(integerResult);\n          concatenationResult = check_concatenation_result_08009214(value,0);\n          if (concatenationResult == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              improvedResult = reverse_bits_08008590(value);\n              improvedResult = calculate_improved_result_08008640((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              value = calculate_floating_point_value_08008c30((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n            }\n            if (exponent < '\\0') {\n              improvedResult = reverse_bits_08008590(value);\n              improvedResult = calculate_improved_result_08008640((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              value = calculate_floating_point_value_08008c30((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                value = calculate_floating_point_value_08008eec(value,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *result = value ^ 0x80000000;\n          }\n          else {\n            *result = value;\n          }\n          *inputString = ((char)nextChar - (char)base) - 1;\n          returnValue = 1;\n        }\n        return returnValue;\n      }\n      hasOverflow = true;\n    }\n    currentChar = *nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_and_store_08002638",
                "param_1": "base",
                "param_2": "inputString",
                "param_3": "result",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "hasOverflow",
                "iVar4": "concatenationResult",
                "pcVar5": "pointer1",
                "pcVar6": "pointer2",
                "uVar7": "returnValue",
                "uVar8": "improvedResult",
                "local_1c": "value",
                "local_16": "digitCount",
                "local_15": "exponent",
                "local_14": "integerResult",
                "local_d": "currentChar",
                "local_c": "nextChar"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_floating_point_values_0800283a",
            "code": "\nvoid initializeAndCalculateFloatingPointValues_0800283a(void)\n\n{\n  set_parameters_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_floating_point_values_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_floating_point_values_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_limit_08002870",
            "code": "\nchar incrementAndLimit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_limit_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_08002896",
            "code": "\nchar decrement_and_default_08002896(char input_value)\n\n{\n  char result;\n  \n  result = input_value;\n  if (input_value == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "param_1": "input_value",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_result_080028bc",
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3)\n\n{\n  undefined4 result_value_1;\n  undefined4 result_value_2;\n  \n  result_value_1 = calculate_floating_point_value_08008eec(input_value_2,input_value_2);\n  result_value_2 = calculate_floating_point_value_08008eec(input_value_1,input_value_1);\n  result_value_1 = calculate_float_08008cd8(result_value_1,result_value_2);\n  result_value_2 = calculate_float_08008cdc(input_value_3,input_value_3);\n  result_value_1 = calculate_floating_point_08009054(result_value_1,result_value_2);\n  return result_value_1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "uVar1": "result_value_1",
                "uVar2": "result_value_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_float_08008cdc(input_3,input_3);\n  result_1 = calculate_floating_point_value_08008eec(result_1,input_4);\n  result_2 = calculate_floating_point_value_08008eec(input_1,input_1);\n  result_1 = calculate_float_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_value_08008eec(input_2,input_2);\n  result_1 = calculate_float_08008cdc(result_1,result_2);\n  result_2 = calculate_floating_point_value_08008eec(input_3,0x40800000);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_modified_floating_point_value_08002978",
            "code": "\nundefined4 calculateModifiedFloatingPointValue_08002978(undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined8 reversedValue;\n  \n  value1 = calculate_floating_point_value_08008eec(inputValue2,inputValue2);\n  value2 = calculate_float_08008cdc(inputValue1,inputValue1);\n  value2 = calculate_floating_point_value_08008eec(value2,inputValue3);\n  value1 = calculate_float_08008cd8(value1,value2);\n  reversedValue = reverse_bits_08008590(value1);\n  reversedValue = process_binary_data_080098d0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n  value1 = calculate_floating_point_value_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_modified_floating_point_value_08002978",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "reversedValue"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "check_and_modify_string_080029d8",
            "code": "\nvoid check_and_modify_string_080029d8(undefined4 param_1,int source_string,int destination_string)\n\n{\n  int concatenation_result;\n  undefined4 modified_floating_point_value;\n  undefined4 original_string;\n  \n  if (((source_string != 0) && (destination_string != 0)) &&\n     (concatenation_result = check_concatenation_result_08009214(*(undefined4 *)(source_string + 0x18),*(undefined4 *)(source_string + 0x1c)),\n     concatenation_result == 0)) {\n    if ((*(char *)(source_string + 0x25) == '\\0') &&\n       (concatenation_result = is_null_terminated_string_08009264(*(undefined4 *)(source_string + 0x1c),*(undefined4 *)(destination_string + 0x18)),\n       concatenation_result != 0)) {\n      original_string = *(undefined4 *)(source_string + 0x1c);\n      modified_floating_point_value = calculate_modified_floating_point_value_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(destination_string + 0x18),\n                           *(undefined4 *)(source_string + 0x20));\n      concatenation_result = check_string_termination_08009228(original_string,modified_floating_point_value);\n      if (concatenation_result == 0) {\n        modified_floating_point_value = calculate_modified_floating_point_value_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(destination_string + 0x18),\n                             *(undefined4 *)(source_string + 0x20));\n      }\n      else {\n        modified_floating_point_value = *(undefined4 *)(source_string + 0x1c);\n      }\n      *(undefined4 *)(source_string + 0x18) = modified_floating_point_value;\n    }\n    else {\n      *(undefined4 *)(source_string + 0x18) = *(undefined4 *)(source_string + 0x1c);\n    }\n    *(undefined *)(source_string + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "check_and_modify_string_080029d8",
                "param_2": "source_string",
                "param_3": "destination_string",
                "iVar1": "concatenation_result",
                "uVar2": "modified_floating_point_value",
                "uVar3": "original_string"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_data_08002a94",
            "code": "\nvoid processData_08002a94(void)\n\n{\n  undefined *tempPtr;\n  undefined *currentPtr;\n  undefined *previousPtr;\n  byte byteValue;\n  \n  byteValue = DAT_20000cf0;\n  currentPtr = (undefined *)0x0;\n  previousPtr = (undefined *)0x0;\n  while (tempPtr = previousPtr, byteValue != DAT_20000cf1) {\n    byteValue = decrement_and_default_08002896(byteValue);\n    previousPtr = currentPtr;\n    check_and_modify_string_080029d8(&DAT_20000870 + (uint)byteValue * 0x40,currentPtr,tempPtr);\n    currentPtr = &DAT_20000870 + (uint)byteValue * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_data_08002a94",
                "local_9": "byteValue",
                "local_18": "currentPtr",
                "local_14": "previousPtr",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "validate_and_concatenate_strings_08002afc",
            "code": "\nvoid validate_and_concatenate_strings_08002afc(int source_string,int destination_string)\n\n{\n  int is_valid;\n  undefined4 modified_value;\n  undefined4 original_value;\n  \n  if (((source_string != 0) && (*(char *)(source_string + 0x25) == '\\0')) &&\n     (is_valid = check_string_termination_08009228(*(undefined4 *)(source_string + 0x18),*(undefined4 *)(destination_string + 0x18)),\n     is_valid != 0)) {\n    original_value = *(undefined4 *)(destination_string + 0x18);\n    modified_value = calculate_modified_floating_point_value_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(source_string + 0x18),\n                         *(undefined4 *)(source_string + 0x20));\n    is_valid = check_string_termination_08009228(original_value,modified_value);\n    if (is_valid == 0) {\n      modified_value = calculate_modified_floating_point_value_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(source_string + 0x18),\n                           *(undefined4 *)(source_string + 0x20));\n    }\n    else {\n      modified_value = *(undefined4 *)(destination_string + 0x18);\n    }\n    is_valid = check_concatenation_result_08009214(modified_value,*(undefined4 *)(destination_string + 0x18));\n    if (is_valid == 0) {\n      *(undefined4 *)(destination_string + 0x18) = modified_value;\n      *(undefined *)(destination_string + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "validate_and_concatenate_strings_08002afc",
                "param_1": "source_string",
                "param_2": "destination_string",
                "iVar1": "is_valid",
                "uVar2": "modified_value",
                "uVar3": "original_value"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "validate_and_concatenate_strings_08002ba8",
            "code": "\nvoid validateAndConcatenateStrings_08002ba8(void)\n\n{\n  uint currentCharAsInt;\n  undefined *previousStringPtr;\n  undefined *previousStringPtr2;\n  undefined *previousString;\n  undefined *currentString;\n  byte currentChar;\n  \n  previousString = (undefined *)0x0;\n  currentString = (undefined *)0x0;\n  currentChar = DAT_20000cf1;\n  previousStringPtr2 = (undefined *)0x0;\n  while (previousStringPtr = previousString, currentChar != DAT_20000cf0) {\n    previousString = currentString;\n    currentCharAsInt = (uint)currentChar;\n    validate_and_concatenate_strings_08002afc(previousStringPtr,currentString,&DAT_20000870 + currentCharAsInt * 0x40);\n    currentChar = increment_and_limit_08002870(currentChar);\n    previousStringPtr2 = previousStringPtr;\n    currentString = &DAT_20000870 + currentCharAsInt * 0x40;\n  }\n  validate_and_concatenate_strings_08002afc(previousString,currentString,0,previousString,previousStringPtr2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "validate_and_concatenate_strings_08002ba8",
                "local_14": "previousString",
                "local_10": "currentString",
                "local_9": "currentChar",
                "puVar2": "previousStringPtr",
                "puVar3": "previousStringPtr2",
                "uVar1": "currentCharAsInt"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_result_08002c18",
            "code": "\nvoid calculate_result_08002c18(int input_struct,undefined4 float_param_1,undefined4 float_param_2)\n\n{\n  undefined4 result_1;\n  int shifted_value;\n  undefined4 result_2;\n  undefined4 modified_param;\n  undefined4 modified_param_2;\n  uint shifted_value_2;\n  undefined8 decoded_number;\n  int final_value;\n  uint minimum_value;\n  \n  result_1 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x3c));\n  result_1 = calculate_floating_point_value_08008eec(result_1,float_param_1);\n  decoded_number = reverse_bits_08008590(result_1);\n  decoded_number = decode_and_validate_number_08009318((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  result_1 = validate_input_08008bf0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  *(undefined4 *)(input_struct + 0x28) = result_1;\n  result_1 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x3c));\n  result_1 = calculate_floating_point_value_08008eec(result_1,float_param_2);\n  decoded_number = reverse_bits_08008590(result_1);\n  decoded_number = decode_and_validate_number_08009318((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  result_1 = validate_input_08008bf0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  *(undefined4 *)(input_struct + 0x2c) = result_1;\n  decoded_number = bitwise_shift_and_concat_0800856c(*(int *)(input_struct + 0x30) * 0x32);\n  decoded_number = calculate_improved_result_08008640((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20),0,0x404e0000);\n  shifted_value = calculate_shifted_value_08008ba0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  result_1 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x28));\n  result_2 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x3c));\n  modified_param = calculate_modified_param_08008e44(shifted_value);\n  result_1 = calculate_result_08002c18_080028bc(result_1,result_2,modified_param);\n  decoded_number = reverse_bits_08008590(result_1);\n  decoded_number = decode_and_validate_number_08009318((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  minimum_value = calculate_shifted_value_08008ba0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  result_1 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x3c));\n  result_2 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x2c));\n  modified_param = calculate_modified_param_08008e44(-shifted_value);\n  result_1 = calculate_result_08002c18_080028bc(result_1,result_2,modified_param);\n  decoded_number = reverse_bits_08008590(result_1);\n  decoded_number = calculate_result_08002c18_080094c0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  final_value = calculate_shifted_value_08008ba0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n  final_value = (*(int *)(input_struct + 0x10) - minimum_value) - final_value;\n  if (final_value < 0) {\n    result_1 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x28));\n    result_2 = calculate_value_08008e3c(*(undefined4 *)(input_struct + 0x2c));\n    modified_param = calculate_modified_param_08008e44(shifted_value);\n    modified_param_2 = calculate_modified_param_08008e44(*(undefined4 *)(input_struct + 0x10));\n    result_1 = calculate_result_08002c18_08002908(result_1,result_2,modified_param,modified_param_2);\n    decoded_number = reverse_bits_08008590(result_1);\n    decoded_number = decode_and_validate_number_08009318((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n    shifted_value_2 = calculate_shifted_value_08008ba0((int)decoded_number,(int)((ulonglong)decoded_number >> 0x20));\n    shifted_value_2 = shifted_value_2 & ~((int)shifted_value_2 >> 0x1f);\n    minimum_value = *(uint *)(input_struct + 0x10);\n    if ((int)shifted_value_2 <= (int)*(uint *)(input_struct + 0x10)) {\n      minimum_value = shifted_value_2;\n    }\n    final_value = 0;\n  }\n  *(uint *)(input_struct + 0x34) = minimum_value;\n  *(uint *)(input_struct + 0x38) = final_value + minimum_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_result_08002c18",
                "param_1": "input_struct",
                "param_2": "float_param_1",
                "param_3": "float_param_2",
                "uVar1": "result_1",
                "iVar2": "shifted_value",
                "uVar3": "result_2",
                "uVar4": "modified_param",
                "uVar5": "modified_param_2",
                "uVar6": "shifted_value_2",
                "uVar7": "decoded_number",
                "local_20": "final_value",
                "local_1c": "minimum_value"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_result_from_binary_08002e08",
            "code": "\nvoid calculate_result_from_binary_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *data_pointer;\n  byte loop_counter;\n  \n  data_pointer = (undefined *)0x0;\n  loop_counter = DAT_20000cf1;\n  while (loop_counter != DAT_20000cf0) {\n    index = (uint)loop_counter * 0x40;\n    if ((data_pointer != (undefined *)0x0) &&\n       ((data_pointer[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = calculate_floating_point_08009054(*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x14));\n      result2 = calculate_floating_point_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(data_pointer + 0x14));\n      calculate_result_08002c18(data_pointer,result1,result2);\n      data_pointer[0x24] = 0;\n    }\n    loop_counter = increment_and_limit_08002870(loop_counter);\n    data_pointer = &DAT_20000870 + index;\n  }\n  result1 = calculate_floating_point_08009054(*(undefined4 *)(data_pointer + 0x18),*(undefined4 *)(data_pointer + 0x14));\n  result2 = calculate_floating_point_08009054(0,*(undefined4 *)(data_pointer + 0x14));\n  calculate_result_08002c18(data_pointer,result1,result2);\n  data_pointer[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_result_from_binary_08002e08",
                "local_18": "data_pointer",
                "local_11": "loop_counter",
                "iVar3": "index",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "process_data_and_calculate_result_08002edc",
            "code": "\nvoid process_data_and_calculate_result_08002edc(void)\n\n{\n  process_data();\n  validate_and_concatenate_strings();\n  calculate_result_from_binary();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "process_data_and_calculate_result_08002edc",
                "process_data_08002a94": "process_data",
                "validate_and_concatenate_strings_08002ba8": "validate_and_concatenate_strings",
                "calculate_result_from_binary_08002e08": "calculate_result_from_binary"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_data_08002ef0",
            "code": "\nvoid updateData_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_limit_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_data_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_data_08002f24",
            "code": "\nvoid initializeData_08002f24(void)\n\n{\n  updateData();\n  copyData(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_data_08002f24",
                "update_data_08002ef0": "updateData",
                "copy_data_0800b430": "copyData"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_if_not_equal_08002f40",
            "code": "\nvoid update_if_not_equal_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_limit_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_if_not_equal_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_data_pointer_08002f74",
            "code": "\nundefined * get_data_pointer_08002f74(void)\n\n{\n  undefined *data_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    data_pointer = (undefined *)0x0;\n  }\n  else {\n    data_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return data_pointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_data_pointer_08002f74",
                "puVar1": "data_pointer"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "check_equality_08002fac",
            "code": "\nbool checkEquality_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "check_equality_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_data_08002fd4",
            "code": "\nvoid process_data_08002fd4(void)\n\n{\n  int dataPointer;\n  \n  while ((dataPointer = get_data_pointer(), dataPointer != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_alarm_status();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_data_08002fd4",
                "iVar1": "dataPointer",
                "get_data_pointer_08002f74": "get_data_pointer",
                "process_alarm_status_08003a74": "process_alarm_status"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_result_08003004",
            "code": "\nvoid calculateResult_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 value1;\n  int shiftedProduct1;\n  int shiftedProduct2;\n  int shiftedProduct3;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 floatValue1;\n  undefined4 floatValue2;\n  uint maxValue;\n  int offset;\n  ushort *dataPtr;\n  int absDiff;\n  uint maxDiff;\n  undefined8 temp;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  offset = (uint)DAT_20000cf0 * 0x40;\n  dataPtr = (ushort *)(&DAT_20000870 + offset);\n  value1 = calculate_floating_point_value_08008eec(DAT_20000ebc,input1);\n  temp = reverse_bits_08008590(value1);\n  shiftedProduct1 = calculate_shifted_product_080095b8((int)temp,(int)((ulonglong)temp >> 0x20));\n  value1 = calculate_floating_point_value_08008eec(DAT_20000ec0,input2);\n  temp = reverse_bits_08008590(value1);\n  shiftedProduct2 = calculate_shifted_product_080095b8((int)temp,(int)((ulonglong)temp >> 0x20));\n  value1 = calculate_floating_point_value_08008eec(DAT_20000ec4,input3);\n  temp = reverse_bits_08008590(value1);\n  shiftedProduct3 = calculate_shifted_product_080095b8((int)temp,(int)((ulonglong)temp >> 0x20));\n  *dataPtr = 0;\n  if (shiftedProduct1 < DAT_20000cf4) {\n    *dataPtr = *dataPtr | 0x20;\n  }\n  if (shiftedProduct2 < DAT_20000cf8) {\n    *dataPtr = *dataPtr | 0x880;\n  }\n  if (shiftedProduct3 < DAT_20000cfc) {\n    *dataPtr = *dataPtr | 0x200;\n  }\n  absDiff = shiftedProduct1 - DAT_20000cf4;\n  if (absDiff < 0) {\n    absDiff = -absDiff;\n  }\n  *(int *)(&DAT_20000874 + offset) = absDiff;\n  absDiff = shiftedProduct2 - DAT_20000cf8;\n  if (absDiff < 0) {\n    absDiff = -absDiff;\n  }\n  *(int *)(&DAT_20000878 + offset) = absDiff;\n  absDiff = shiftedProduct3 - DAT_20000cfc;\n  if (absDiff < 0) {\n    absDiff = -absDiff;\n  }\n  *(int *)(&DAT_2000087c + offset) = absDiff;\n  maxValue = *(uint *)(&DAT_2000087c + offset);\n  if (*(uint *)(&DAT_2000087c + offset) < *(uint *)(&DAT_20000878 + offset)) {\n    maxValue = *(uint *)(&DAT_20000878 + offset);\n  }\n  maxDiff = *(uint *)(&DAT_20000874 + offset);\n  if (*(uint *)(&DAT_20000874 + offset) < maxValue) {\n    maxDiff = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + offset) = maxDiff;\n  if (*(int *)(&DAT_20000880 + offset) != 0) {\n    value1 = calculate_modified_param_08008e44(shiftedProduct1 - DAT_20000cf4);\n    value1 = calculate_floating_point_08009054(value1,DAT_20000ebc);\n    value2 = calculate_modified_param_08008e44(shiftedProduct2 - DAT_20000cf8);\n    value2 = calculate_floating_point_08009054(value2,DAT_20000ec0);\n    value3 = calculate_modified_param_08008e44(shiftedProduct3 - DAT_20000cfc);\n    value3 = calculate_floating_point_08009054(value3,DAT_20000ec4);\n    floatValue1 = calculate_floating_point_value_08008eec(value1,value1);\n    floatValue2 = calculate_floating_point_value_08008eec(value2,value2);\n    floatValue1 = calculate_float_08008cdc(floatValue1,floatValue2);\n    floatValue2 = calculate_floating_point_value_08008eec(value3,value3);\n    floatValue1 = calculate_float_08008cdc(floatValue1,floatValue2);\n    temp = reverse_bits_08008590(floatValue1);\n    temp = process_binary_data_080098d0((int)temp,(int)((ulonglong)temp >> 0x20));\n    floatValue1 = calculate_floating_point_value_08008c30((int)temp,(int)((ulonglong)temp >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + offset) = floatValue1;\n    floatValue1 = calculate_floating_point_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + offset));\n    if (flag == '\\0') {\n      result2 = calculate_floating_point_value_08008eec(input4,floatValue1);\n    }\n    else {\n      result2 = calculate_floating_point_08009054(0x3f800000,input4);\n    }\n    floatValue2 = calculate_floating_point_value_08008eec(*(undefined4 *)(&DAT_20000890 + offset),result2);\n    *(undefined4 *)(&DAT_20000884 + offset) = floatValue2;\n    floatValue2 = calculate_modified_param_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    floatValue2 = calculate_floating_point_value_08008eec(floatValue2,result2);\n    temp = reverse_bits_08008590(floatValue2);\n    temp = decode_and_validate_number_08009318((int)temp,(int)((ulonglong)temp >> 0x20));\n    floatValue2 = validate_input_08008bf0((int)temp,(int)((ulonglong)temp >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + offset) = floatValue2;\n    floatValue2 = calculate_modified_param_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    floatValue2 = calculate_floating_point_value_08008eec(floatValue2,floatValue1);\n    floatValue2 = calculate_floating_point_value_08008eec(floatValue2,DAT_20000edc);\n    floatValue2 = calculate_floating_point_08009054(floatValue2,0x453b8000);\n    temp = reverse_bits_08008590(floatValue2);\n    temp = decode_and_validate_number_08009318((int)temp,(int)((ulonglong)temp >> 0x20));\n    floatValue2 = calculate_shifted_value_08008ba0((int)temp,(int)((ulonglong)temp >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + offset) = floatValue2;\n    maxValue = calculate_floating_point_value_08008eec(value1,floatValue1);\n    value1 = calculate_floating_point_value_08008eec(value2,floatValue1);\n    value2 = calculate_floating_point_value_08008eec(value3,floatValue1);\n    result1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (absDiff = is_null_terminated_string_08009264(DAT_20000d0c,0), absDiff != 0)) {\n      value3 = calculate_floating_point_value_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      floatValue1 = calculate_floating_point_value_08008eec(DAT_20000d04,value1);\n      value3 = calculate_float_08008cd8(value3,floatValue1);\n      floatValue1 = calculate_floating_point_value_08008eec(DAT_20000d08,value2);\n      value3 = calculate_float_08008cd8(value3,floatValue1);\n      temp = reverse_bits_08008590(value3);\n      absDiff = is_null_terminated_08008b24((int)temp,(int)((ulonglong)temp >> 0x20),0x66666666,0x3fee6666);\n      if (absDiff != 0) {\n        absDiff = check_string_termination_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + offset));\n        result1 = DAT_20000d0c;\n        if (absDiff == 0) {\n          result1 = *(undefined4 *)(&DAT_20000884 + offset);\n        }\n        temp = reverse_bits_08008590(value3);\n        absDiff = check_if_string_is_empty_08008b60((int)temp,(int)((ulonglong)temp >> 0x20),0x66666666,0xbfee6666);\n        if (absDiff != 0) {\n          temp = reverse_bits_08008590(value3);\n          temp = perform_arithmetic_operation_080082d0(0,0x3ff00000,(int)temp,(int)((ulonglong)temp >> 0x20));\n          temp = calculate_improved_result_08008640((int)temp,(int)((ulonglong)temp >> 0x20),0,0x3fe00000);\n          temp = process_binary_data_080098d0((int)temp,(int)((ulonglong)temp >> 0x20));\n          value3 = calculate_floating_point_value_08008c30((int)temp,(int)((ulonglong)temp >> 0x20));\n          temp = reverse_bits_08008590(result1);\n          floatValue1 = calculate_floating_point_value_08008eec(DAT_20000edc,DAT_20000ee0);\n          floatValue1 = calculate_floating_point_value_08008eec(floatValue1,value3);\n          temp1 = reverse_bits_08008590(floatValue1);\n          temp2 = reverse_bits_08008590(value3);\n          temp2 = perform_arithmetic_operation_080082d0(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n          temp1 = calculate_float_08008894((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                                (int)((ulonglong)temp2 >> 0x20));\n          temp1 = process_binary_data_080098d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          absDiff = is_null_terminated_08008b24((int)temp,(int)((ulonglong)temp >> 0x20),(int)temp1,\n                                (int)((ulonglong)temp1 >> 0x20));\n          if (absDiff == 0) {\n            floatValue1 = calculate_floating_point_value_08008eec(DAT_20000edc,DAT_20000ee0);\n            floatValue1 = calculate_floating_point_value_08008eec(floatValue1,value3);\n            temp = reverse_bits_08008590(floatValue1);\n            temp1 = reverse_bits_08008590(value3);\n            temp1 = perform_arithmetic_operation_080082d0(0,0x3ff00000,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n            temp = calculate_float_08008894((int)temp,(int)((ulonglong)temp >> 0x20),(int)temp1,\n                                  (int)((ulonglong)temp1 >> 0x20));\n            temp = process_binary_data_080098d0((int)temp,(int)((ulonglong)temp >> 0x20));\n            result1 = calculate_floating_point_value_08008c30((int)temp,(int)((ulonglong)temp >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + offset) = result1;\n    floatValue1 = calculate_modified_floating_point_value_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + offset));\n    absDiff = check_string_termination_08009228(result1,floatValue1);\n    value3 = floatValue1;\n    if (absDiff != 0) {\n      value3 = result1;\n    }\n    *(undefined4 *)(&DAT_20000888 + offset) = value3;\n    absDiff = concatenate_params_and_check_08009250(floatValue1,*(undefined4 *)(&DAT_20000884 + offset));\n    if (absDiff == 0) {\n      (&DAT_20000895)[offset] = 0;\n    }\n    else {\n      (&DAT_20000895)[offset] = 1;\n    }\n    (&DAT_20000894)[offset] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + offset);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = value1;\n    DAT_20000d08 = value2;\n    DAT_20000cf2 = increment_and_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = shiftedProduct1;\n    DAT_20000cf8 = shiftedProduct2;\n    DAT_20000cfc = shiftedProduct3;\n    process_data_and_calculate_result_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_result_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "uVar1": "value1",
                "iVar2": "shiftedProduct1",
                "iVar3": "shiftedProduct2",
                "iVar4": "shiftedProduct3",
                "uVar5": "value2",
                "uVar6": "value3",
                "uVar7": "floatValue1",
                "uVar8": "floatValue2",
                "uVar9": "maxValue",
                "iVar10": "offset",
                "puVar11": "dataPtr",
                "iVar12": "absDiff",
                "uVar13": "maxDiff",
                "uVar14": "temp",
                "uVar15": "temp1",
                "uVar16": "temp2",
                "local_20": "result1",
                "local_1c": "result2"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "set_parameters_080035ec",
            "code": "\nvoid setParameters_080035ec(undefined4 firstParameter,undefined4 secondParameter,undefined4 thirdParameter)\n\n{\n  DAT_20000cf4 = firstParameter;\n  DAT_20000cf8 = secondParameter;\n  DAT_20000cfc = thirdParameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "set_parameters_080035ec",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "param_3": "thirdParameter"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "process_data_and_calculate_result_08003618",
            "code": "\nvoid process_data_and_calculate_result_08003618(undefined4 input_param)\n\n{\n  undefined4 modified_input_param;\n  int offset;\n  undefined4 saved_value;\n  \n  offset = (uint)DAT_20000cf1 * 0x40;\n  saved_value = *(undefined4 *)(&DAT_20000890 + offset);\n  modified_input_param = calculate_modified_input_param(input_param);\n  modified_input_param = calculate_floating_point_value(saved_value,modified_input_param);\n  saved_value = calculate_modified_input_param(*(undefined4 *)(&DAT_20000880 + offset));\n  modified_input_param = calculate_floating_point(modified_input_param,saved_value);\n  *(undefined4 *)(&DAT_20000890 + offset) = modified_input_param;\n  *(undefined4 *)(&DAT_20000880 + offset) = input_param;\n  *(undefined4 *)(&DAT_20000888 + offset) = 0;\n  *(undefined4 *)(&DAT_2000088c + offset) = 0;\n  (&DAT_20000895)[offset] = 0;\n  (&DAT_20000894)[offset] = 1;\n  process_data_and_calculate_result_08003618();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "process_data_and_calculate_result_08003618",
                "param_1": "input_param",
                "uVar1": "modified_input_param",
                "iVar2": "offset",
                "uVar3": "saved_value",
                "calculate_modified_param_08008e44": "calculate_modified_input_param",
                "calculate_floating_point_value_08008eec": "calculate_floating_point_value",
                "calculate_floating_point_08009054": "calculate_floating_point",
                "process_data_and_calculate_result_08002edc": "process_data_and_calculate_result"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "process_string_0800369c",
            "code": "\nvoid processString_0800369c(char *inputString)\n\n{\n  char *currentChar;\n  \n  currentChar = inputString;\n  while (*currentChar != '\\0') {\n    wait_for_and_set_flag_08008250(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "process_string_0800369c",
                "param_1": "inputString",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "wait_for_and_set_flag_080036c6",
            "code": "\nvoid waitForAndSetFlag_080036c6(char *inputString)\n\n{\n  char *currentChar;\n  \n  currentChar = inputString;\n  while (*currentChar != '\\0') {\n    wait_for_and_set_flag_08008250(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "wait_for_and_set_flag_080036c6",
                "param_1": "inputString",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "set_bits_based_on_param_080036f0",
            "code": "\nvoid setBitsBasedOnParam_080036f0(uint inputNumber,int bitCount)\n\n{\n  undefined4 bitValue;\n  int bitIndex;\n  uint bitMask;\n  \n  bitMask = 1 << (bitCount - 1U & 0xff);\n  for (bitIndex = 0; bitIndex < bitCount; bitIndex = bitIndex + 1) {\n    if ((bitMask & inputNumber) == 0) {\n      bitValue = 0x30;\n    }\n    else {\n      bitValue = 0x31;\n    }\n    wait_for_and_set_flag_08008250(bitValue);\n    bitMask = bitMask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "set_bits_based_on_param_080036f0",
                "param_1": "inputNumber",
                "param_2": "bitCount",
                "uVar1": "bitValue",
                "local_10": "bitIndex",
                "local_c": "bitMask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "set_bits_based_on_param_08003740",
            "code": "\nvoid set_bits_based_on_param_08003740(undefined param)\n\n{\n  set_bits(param,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "set_bits_based_on_param_08003740",
                "param_1": "param",
                "set_bits_based_on_param_080036f0": "set_bits"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "set_bits_based_on_param_0800375c",
            "code": "\nvoid set_bits_based_on_param_0800375c(undefined2 param)\n\n{\n  set_bits(param,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "set_bits_based_on_param_0800375c",
                "param_1": "param",
                "set_bits_based_on_param_080036f0": "set_bits"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "convert_integer_to_ascii_08003778",
            "code": "\nvoid convertIntegerToAscii_08003778(uint inputNumber)\n\n{\n  uint tempVar1;\n  uint remainingNumber;\n  char asciiDigits [12];\n  byte digitCount;\n  \n  digitCount = 0;\n  remainingNumber = inputNumber;\n  if (inputNumber == 0) {\n    wait_for_and_set_flag_08008250(0x30);\n  }\n  else {\n    for (; remainingNumber != 0; remainingNumber = remainingNumber / 10) {\n      tempVar1 = (uint)digitCount;\n      digitCount = digitCount + 1;\n      asciiDigits[tempVar1 + 1] = (char)(remainingNumber % 10) + '0';\n    }\n    for (; digitCount != 0; digitCount = digitCount - 1) {\n      wait_for_and_set_flag_08008250(asciiDigits[digitCount]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "convert_integer_to_ascii_08003778",
                "param_1": "inputNumber",
                "uVar1": "tempVar1",
                "local_1c": "remainingNumber",
                "acStack_15": "asciiDigits",
                "local_9": "digitCount"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "convert_and_print_integer_080037fc",
            "code": "\nvoid convert_and_print_integer_080037fc(int number)\n\n{\n  int absolute_value;\n  \n  absolute_value = number;\n  if (number < 0) {\n    wait_for_and_set_flag_08008250(0x2d);\n    absolute_value = -number;\n  }\n  convert_integer_to_ascii_08003778(absolute_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "convert_and_print_integer_080037fc",
                "param_1": "number",
                "local_c": "absolute_value"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_integer_to_float_08003826",
            "code": "\nvoid convertIntegerToFloat_08003826(uint inputInteger)\n\n{\n  int terminationCheck;\n  undefined4 floatValue;\n  byte byteValue;\n  uint tempValue;\n  uint inputValue;\n  char outputString [13];\n  uint divisor;\n  byte currentIndex;\n  byte loopIndex;\n  \n  terminationCheck = check_string_termination_08009228(inputInteger,0);\n  inputValue = inputInteger;\n  if (terminationCheck != 0) {\n    wait_for_and_set_flag_08008250(0x2d);\n    inputValue = inputInteger ^ 0x80000000;\n  }\n  for (loopIndex = DAT_20000ef9; 1 < loopIndex; loopIndex = loopIndex - 2) {\n    inputValue = calculate_floating_point_value_08008eec(inputValue,0x42c80000);\n  }\n  if (loopIndex != 0) {\n    inputValue = calculate_floating_point_value_08008eec(inputValue,0x41200000);\n  }\n  floatValue = calculate_float_08008cdc(inputValue,0x3f000000);\n  currentIndex = 0;\n  divisor = clamp_and_shift_08009278(floatValue);\n  outputString[DAT_20000ef9 + 1] = '.';\n  for (; divisor != 0; divisor = divisor / 10) {\n    if (currentIndex == DAT_20000ef9) {\n      currentIndex = currentIndex + 1;\n    }\n    tempValue = (uint)currentIndex;\n    currentIndex = currentIndex + 1;\n    outputString[tempValue + 1] = (char)(divisor % 10) + '0';\n  }\n  while (currentIndex < DAT_20000ef9) {\n    tempValue = (uint)currentIndex;\n    currentIndex = currentIndex + 1;\n    outputString[tempValue + 1] = '0';\n  }\n  if (currentIndex == DAT_20000ef9) {\n    byteValue = currentIndex + 1;\n    currentIndex = currentIndex + 2;\n    outputString[byteValue + 1] = '0';\n  }\n  for (; currentIndex != 0; currentIndex = currentIndex - 1) {\n    wait_for_and_set_flag_08008250(outputString[currentIndex]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_integer_to_float_08003826",
                "param_1": "inputInteger",
                "iVar1": "terminationCheck",
                "uVar2": "floatValue",
                "bVar3": "byteValue",
                "uVar4": "tempValue",
                "local_24": "inputValue",
                "acStack_1d": "outputString",
                "local_10": "divisor",
                "local_a": "currentIndex",
                "local_9": "loopIndex"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_and_display_grbl_version_080039a0",
            "code": "\nvoid initialize_and_display_grbl_version_080039a0(void)\n\n{\n  initialize_data();\n  display_grbl_version();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_and_display_grbl_version_080039a0",
                "initialize_data_08003980": "initialize_data",
                "display_grbl_version_08004228": "display_grbl_version"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_080039bc",
            "code": "\nvoid process_data_080039bc(void)\n\n{\n  int result;\n  undefined4 error_code;\n  byte index;\n  \n  for (index = 0; index < 2; index = index + 1) {\n    result = check_and_process_data_080039bc_08004d2c(index,&DAT_20000d10);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      process_string_0800369c(&DAT_20000d10);\n      error_code = process_and_validate_input_080005b4(&DAT_20000d10);\n      display_error_message_08004030(error_code);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "iVar1": "result",
                "uVar2": "error_code",
                "local_9": "index"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_param_08003a18",
            "code": "\nvoid processParam_08003a18(uint inputParam)\n\n{\n  if ((inputParam & 0x80) == 0) {\n    if ((inputParam & 0x40) == 0) {\n      if ((inputParam & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initializeAndCheckConditions();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_param_08003a18",
                "param_1": "inputParam",
                "initialize_and_check_conditions_080025e8": "initializeAndCheckConditions"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_alarm_status_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid processAlarmStatus_08003a74(void)\n\n{\n  byte currentStatus;\n  \n  currentStatus = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        printAlarmMessage(0xffffffff);\n        displayStatusMessage(1);\n        do {\n        } while( true );\n      }\n      printAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((currentStatus & 0x10) == 0) {\n      if ((currentStatus & 1) != 0) {\n        updateStatusAndPosition();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((currentStatus & 8) != 0) {\n        updateDataState();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((currentStatus & 4) != 0) {\n        initializeProcessing();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((currentStatus & 2) != 0) {\n        initializeDataMode();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_alarm_status_08003a74",
                "bVar1": "currentStatus",
                "print_alarm_message_08004148": "printAlarmMessage",
                "display_status_message_080041a0": "displayStatusMessage",
                "update_status_and_position_08004940": "updateStatusAndPosition",
                "update_data_state_0800587c": "updateDataState",
                "initialize_processing_080058a0": "initializeProcessing",
                "initialize_if_data_mode_0800585c": "initializeDataMode"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_menu_selection_08003b98",
            "code": "\nuint process_menu_selection_08003b98(char *input_string)\n\n{\n  byte byte_value;\n  int result;\n  undefined4 clamped_value;\n  uint return_value;\n  undefined8 shifted_value;\n  undefined4 second_arg;\n  undefined4 first_arg;\n  byte index_a;\n  byte index_b;\n  \n  if (*input_string != '$') {\n    return_value = process_and_validate_input(input_string);\n    return return_value;\n  }\n  index_a = 1;\n  index_b = '\\0';\n  byte_value = input_string[1];\n  if (byte_value == 0) {\n    initialize_menu_options();\n    return 0;\n  }\n  if ((0x58 < byte_value) || (byte_value < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(byte_value) {\n  case 0x23:\n    index_a = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    process_data();\n    break;\n  case 0x24:\n    index_a = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    set_config_parameters();\n    break;\n  case 0x43:\n    index_a = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_and_check_conditions();\n      display_status_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message(4);\n    }\n    break;\n  case 0x47:\n    index_a = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    print_flag_and_convert_values_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_system();\n    if (DAT_20000ea8 == '\\0') {\n      process_data();\n    }\n    break;\n  case 0x4e:\n    index_a = 2;\n    if (input_string[2] == '\\0') {\n      for (index_b = 0; index_b < 2; index_b = index_b + 1) {\n        result = check_and_process_data(index_b,input_string);\n        if (result == 0) {\n          display_error_message(10);\n        }\n        else {\n          initialize_and_process_data(index_b,input_string);\n        }\n      }\n      return 0;\n    }\n    index_b = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parse_and_store_integer(input_string,&index_a,&first_arg);\n    if (result == 0) {\n      return 1;\n    }\n    byte_value = index_a + 1;\n    if (input_string[index_a] != '=') {\n      return 3;\n    }\n    index_a = byte_value;\n    if (index_b == '\\0') {\n      result = parse_and_store_integer(input_string,&index_a,&second_arg);\n      if (result == 0) {\n        return 1;\n      }\n      if (input_string[index_a] == '\\0') {\n        clamped_value = clamp_and_shift(first_arg);\n        return_value = update_and_validate_settings(clamped_value,second_arg);\n        return return_value;\n      }\n      return 3;\n    }\n    do {\n      input_string[(uint)index_a - (uint)byte_value] = input_string[index_a];\n      return_value = (uint)index_a;\n      index_a = index_a + 1;\n    } while (input_string[return_value] != '\\0');\n    index_b = byte_value;\n    index_b = process_and_validate_input(input_string);\n    if (index_b != 0) {\n      return (uint)index_b;\n    }\n    shifted_value = reverse_bits(first_arg);\n    shifted_value = calculate_shifted_value((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    index_b = validate_input((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    process_byte_data(index_b,input_string);\n    break;\n  case 0x58:\n    index_a = 2;\n    if (input_string[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_menu_selection_08003b98",
                "param_1": "input_string",
                "uVar3": "clamped_value",
                "uVar4": "return_value",
                "uVar5": "shifted_value",
                "local_14": "second_arg",
                "local_10": "first_arg",
                "local_a": "index_a",
                "local_9": "index_b",
                "bVar1": "byte_value",
                "iVar2": "result",
                "parse_integer_and_store_08002638": "parse_and_store_integer",
                "process_and_validate_input_080005b4": "process_and_validate_input",
                "initialize_menu_options_0800423c": "initialize_menu_options",
                "process_data_080044e8": "process_data",
                "set_config_parameters_08004250": "set_config_parameters",
                "initialize_and_check_conditions_080025e8": "initialize_and_check_conditions",
                "display_status_message_080041a0": "display_status_message",
                "display_error_message_08004030": "display_error_message",
                "initialize_and_process_data_08004900": "initialize_and_process_data",
                "check_and_process_data_08004d2c": "check_and_process_data",
                "initialize_system_080024c4": "initialize_system",
                "process_data_080039bc": "process_data",
                "clamp_and_shift_08009278": "clamp_and_shift",
                "update_and_validate_settings_08004e30": "update_and_validate_settings",
                "reverse_bits_08008590": "reverse_bits",
                "calculate_shifted_value_08009798": "calculate_shifted_value",
                "validate_input_08008bf0": "validate_input",
                "process_byte_data_08004bc0": "process_byte_data"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_input_08003f34",
            "code": "\nvoid process_input_08003f34(void)\n\n{\n  byte byteValue;\n  undefined4 returnValue;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      byteValue = check_and_return_lowest_byte_08008286();\n      if (byteValue == 0xff) {\n        return;\n      }\n      if ((byteValue == 10) || (byteValue == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < byteValue) && (byteValue != 0x2f)) {\n          if (byteValue == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            display_error_message_08004030(0xd);\n            initialize_data_08003980();\n          }\n          else if ((byteValue < 0x61) || (0x7a < byteValue)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteValue;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteValue - 0x20;\n          }\n        }\n      }\n      else if (byteValue == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_alarm_status_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      display_error_message_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      returnValue = process_menu_selection_08003b98(&DAT_20000d10);\n      display_error_message_08004030(returnValue);\n    }\n    initialize_data_08003980();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "byteValue",
                "uVar2": "returnValue",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "display_error_message_08004030",
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    wait_for_and_set_flag_080036c6(&DAT_0800b5c8);\n  }\n  else {\n    wait_for_and_set_flag_080036c6(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      wait_for_and_set_flag_080036c6(\"Bad number format\");\n      break;\n    case '\\x02':\n      wait_for_and_set_flag_080036c6(\"Expected command letter\");\n      break;\n    case '\\x03':\n      wait_for_and_set_flag_080036c6(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      wait_for_and_set_flag_080036c6(\"Invalid radius\");\n      break;\n    case '\\x05':\n      wait_for_and_set_flag_080036c6(\"Modal group violation\");\n      break;\n    case '\\x06':\n      wait_for_and_set_flag_080036c6(\"Invalid statement\");\n      break;\n    case '\\a':\n      wait_for_and_set_flag_080036c6(\"Setting disabled\");\n      break;\n    case '\\b':\n      wait_for_and_set_flag_080036c6(\"Value < 0.0\");\n      break;\n    case '\\t':\n      wait_for_and_set_flag_080036c6(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      wait_for_and_set_flag_080036c6(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      wait_for_and_set_flag_080036c6(\"Busy or queued\");\n      break;\n    case '\\f':\n      wait_for_and_set_flag_080036c6(\"Alarm lock\");\n      break;\n    case '\\r':\n      wait_for_and_set_flag_080036c6(\"Line overflow\");\n    }\n    wait_for_and_set_flag_080036c6(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "print_alarm_message_08004148",
            "code": "\nvoid print_alarm_message_08004148(char error_code)\n\n{\n  print_message(\"ALARM: \");\n  if (error_code == -2) {\n    print_message(\"Abort during cycle\");\n  }\n  else if (error_code == -1) {\n    print_message(\"Hard limit\");\n  }\n  print_message(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "print_alarm_message_08004148",
                "param_1": "error_code",
                "wait_for_and_set_flag_080036c6": "print_message"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined status)\n\n{\n  waitForAndSetFlag(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    waitForAndSetFlag(\"Reset to continue\");\n    break;\n  case 2:\n    waitForAndSetFlag(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    waitForAndSetFlag(\"Caution: Unlocked\");\n    break;\n  case 4:\n    waitForAndSetFlag(\"Enabled\");\n    break;\n  case 5:\n    waitForAndSetFlag(\"Disabled\");\n  }\n  waitForAndSetFlag(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "status",
                "wait_for_and_set_flag_080036c6": "waitForAndSetFlag"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "display_grbl_version_08004228",
            "code": "\nvoid displayGrblVersion_08004228(void)\n\n{\n  waitForAndSetFlag(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "display_grbl_version_08004228",
                "wait_for_and_set_flag_080036c6": "waitForAndSetFlag"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "initialize_menu_options_0800423c",
            "code": "\nvoid initializeMenuOptions_0800423c(void)\n\n{\n  displayMenu(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "initialize_menu_options_0800423c",
                "wait_for_and_set_flag_080036c6": "displayMenu"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "set_config_parameters_08004250",
            "code": "\nvoid setConfigParameters_08004250(void)\n\n{\n  undefined4 uVar1;\n  \n  wait_for_and_set_flag_080036c6(&DAT_0800b8b8);\n  convert_integer_to_float_08003826(DAT_20000ebc);\n  wait_for_and_set_flag_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  convert_integer_to_float_08003826(DAT_20000ec0);\n  wait_for_and_set_flag_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  convert_integer_to_float_08003826(DAT_20000ec4);\n  wait_for_and_set_flag_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  convert_and_print_integer_080037fc(DAT_20000ec9);\n  wait_for_and_set_flag_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  convert_integer_to_float_08003826(DAT_20000ecc);\n  wait_for_and_set_flag_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_integer_to_float_08003826(DAT_20000ed0);\n  wait_for_and_set_flag_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  convert_and_print_integer_080037fc(DAT_20000ed4);\n  wait_for_and_set_flag_080036c6(\" (step port invert mask, int:\");\n  set_bits_based_on_param_0800375c(DAT_20000ed4);\n  wait_for_and_set_flag_080036c6(\")\\r\\n$7=\");\n  convert_and_print_integer_080037fc(DAT_20000ef8);\n  wait_for_and_set_flag_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  uVar1 = calculate_floating_point_08009054(DAT_20000edc,0x45610000);\n  convert_integer_to_float_08003826(uVar1);\n  wait_for_and_set_flag_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_integer_to_float_08003826(DAT_20000ee0);\n  wait_for_and_set_flag_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_integer_to_float_08003826(DAT_20000ed8);\n  wait_for_and_set_flag_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  convert_and_print_integer_080037fc(DAT_20000efa);\n  wait_for_and_set_flag_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  convert_and_print_integer_080037fc(DAT_20000ef9);\n  wait_for_and_set_flag_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  convert_and_print_integer_080037fc((DAT_20000ee4 & 1) != 0);\n  wait_for_and_set_flag_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  convert_and_print_integer_080037fc((DAT_20000ee4 & 2) != 0);\n  wait_for_and_set_flag_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  convert_and_print_integer_080037fc((DAT_20000ee4 & 4) != 0);\n  wait_for_and_set_flag_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  convert_and_print_integer_080037fc((DAT_20000ee4 & 8) != 0);\n  wait_for_and_set_flag_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  convert_and_print_integer_080037fc((DAT_20000ee4 & 0x10) != 0);\n  wait_for_and_set_flag_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  convert_and_print_integer_080037fc(DAT_20000ee6);\n  wait_for_and_set_flag_080036c6(\" (homing dir invert mask, int:\");\n  set_bits_based_on_param_0800375c(DAT_20000ee6);\n  wait_for_and_set_flag_080036c6(\")\\r\\n$19=\");\n  convert_integer_to_float_08003826(DAT_20000ee8);\n  wait_for_and_set_flag_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_integer_to_float_08003826(DAT_20000eec);\n  wait_for_and_set_flag_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  convert_and_print_integer_080037fc(DAT_20000ef0);\n  wait_for_and_set_flag_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_integer_to_float_08003826(DAT_20000ef4);\n  wait_for_and_set_flag_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  convert_and_print_integer_080037fc(DAT_20000ed6);\n  wait_for_and_set_flag_080036c6(\" (dir port invert mask, int:\");\n  set_bits_based_on_param_0800375c(DAT_20000ed6);\n  wait_for_and_set_flag_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "set_config_parameters_08004250"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "process_data_080044e8",
            "code": "\nvoid processData_080044e8(void)\n\n{\n  int dataCheckResult;\n  undefined4 floatingPointValue;\n  undefined8 calculationResult;\n  undefined4 dataBuffer [3];\n  byte index;\n  byte iteration;\n  \n  iteration = 0;\n  while( true ) {\n    if (7 < iteration) {\n      wait_for_and_set_flag_080036c6(\"bufferFlag\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convertIntToFloat(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          calculationResult = reverseBits(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          calculationResult = calculateImprovedResult((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x57e16865,0x3fa42851);\n          floatingPointValue = calculateFloatingPointValue((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n          convertIntToFloat(floatingPointValue);\n        }\n        if (index < 2) {\n          wait_for_and_set_flag_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          wait_for_and_set_flag_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    dataCheckResult = checkAndCopyData(iteration,dataBuffer);\n    if (dataCheckResult == 0) break;\n    wait_for_and_set_flag_080036c6(&DAT_0800bb98);\n    switch(iteration) {\n    case 0:\n      wait_for_and_set_flag_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      wait_for_and_set_flag_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      wait_for_and_set_flag_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      wait_for_and_set_flag_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      wait_for_and_set_flag_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      wait_for_and_set_flag_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      wait_for_and_set_flag_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      wait_for_and_set_flag_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convertIntToFloat(dataBuffer[index]);\n      }\n      else {\n        calculationResult = reverseBits(dataBuffer[index]);\n        calculationResult = calculateImprovedResult((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x57e16865,0x3fa42851);\n        floatingPointValue = calculateFloatingPointValue((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n        convertIntToFloat(floatingPointValue);\n      }\n      if (index < 2) {\n        wait_for_and_set_flag_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        wait_for_and_set_flag_080036c6(&DAT_0800b764);\n      }\n    }\n    iteration = iteration + 1;\n  }\n  displayErrorMessage(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "process_data_080044e8",
                "local_9": "iteration",
                "auStack_18": "dataBuffer",
                "local_a": "index",
                "iVar1": "dataCheckResult",
                "uVar2": "floatingPointValue",
                "uVar3": "calculationResult",
                "reverse_bits_08008590": "reverseBits",
                "calculate_improved_result_08008640": "calculateImprovedResult",
                "calculate_floating_point_value_08008c30": "calculateFloatingPointValue",
                "convert_integer_to_float_08003826": "convertIntToFloat",
                "check_and_copy_data_08004d7c": "checkAndCopyData",
                "display_error_message_08004030": "displayErrorMessage",
                "[G92:": "bufferFlag"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_flag_and_convert_values_080046d0",
            "code": "\nvoid print_flag_and_convert_values_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    wait_for_and_set_flag_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    wait_for_and_set_flag_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    wait_for_and_set_flag_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    wait_for_and_set_flag_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    wait_for_and_set_flag_080036c6(&DAT_0800bbd8);\n  }\n  wait_for_and_set_flag_080036c6(&DAT_0800bbe0);\n  convert_and_print_integer_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      wait_for_and_set_flag_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      wait_for_and_set_flag_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    wait_for_and_set_flag_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc04);\n  }\n  else {\n    wait_for_and_set_flag_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc14);\n  }\n  else {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc24);\n  }\n  else {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      wait_for_and_set_flag_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      wait_for_and_set_flag_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      wait_for_and_set_flag_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      wait_for_and_set_flag_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    wait_for_and_set_flag_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      wait_for_and_set_flag_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      wait_for_and_set_flag_080036c6(&DAT_0800bc48);\n    }\n  }\n  wait_for_and_set_flag_080036c6(&DAT_0800bc50);\n  convert_and_print_integer_080037fc(DAT_20000e88);\n  wait_for_and_set_flag_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_integer_to_float_08003826(DAT_20000e78);\n  }\n  else {\n    uVar2 = reverse_bits_08008590(DAT_20000e78);\n    uVar2 = calculate_improved_result_08008640((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = calculate_floating_point_value_08008c30((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    convert_integer_to_float_08003826(uVar1);\n  }\n  wait_for_and_set_flag_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_flag_and_convert_values_080046d0"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "initialize_and_process_data_08004900",
            "code": "\nvoid initializeAndProcessData_08004900(undefined inputData,undefined4 integerValue)\n\n{\n  waitForAndSetFlag(&DAT_0800bc58);\n  convertAndPrintInteger(inputData);\n  waitForAndSetFlag(&DAT_0800bc5c);\n  processString(integerValue);\n  waitForAndSetFlag(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "initialize_and_process_data_08004900",
                "param_1": "inputData",
                "param_2": "integerValue",
                "wait_for_and_set_flag_080036c6": "waitForAndSetFlag",
                "convert_and_print_integer_080037fc": "convertAndPrintInteger",
                "process_string_0800369c": "processString"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "update_status_and_position_08004940",
            "code": "\nvoid updateStatusAndPosition_08004940(void)\n\n{\n  undefined4 modifiedParam;\n  uint index;\n  undefined4 floatCalculation1;\n  undefined8 reversedValue;\n  undefined8 floatCalculation2;\n  undefined4 positionStack [6];\n  byte axisIndex;\n  \n  positionStack[3] = DAT_20000eac;\n  positionStack[4] = DAT_20000eb0;\n  positionStack[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    wait_for_and_set_flag_080036c6(\"<Idle\");\n    break;\n  case 2:\n    wait_for_and_set_flag_080036c6(\"<Queue\");\n    break;\n  case 3:\n    wait_for_and_set_flag_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    wait_for_and_set_flag_080036c6(\"<Hold\");\n    break;\n  case 5:\n    wait_for_and_set_flag_080036c6(\"<Home\");\n    break;\n  case 6:\n    wait_for_and_set_flag_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    wait_for_and_set_flag_080036c6(\"<Check\");\n  }\n  wait_for_and_set_flag_080036c6(\",MPos:\");\n  for (axisIndex = 0; axisIndex < 3; axisIndex = axisIndex + 1) {\n    modifiedParam = calculate_modified_param_08008e44(positionStack[axisIndex + 3]);\n    index = (uint)axisIndex;\n    modifiedParam = calculate_floating_point_08009054(modifiedParam,(&DAT_20000ebc)[axisIndex]);\n    positionStack[index] = modifiedParam;\n    if ((DAT_20000ee4 & 1) != 0) {\n      reversedValue = reverse_bits_08008590(positionStack[axisIndex]);\n      reversedValue = calculate_improved_result_08008640((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)axisIndex;\n      modifiedParam = calculate_floating_point_value_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n      positionStack[index] = modifiedParam;\n    }\n    convert_integer_to_float_08003826(positionStack[axisIndex]);\n    wait_for_and_set_flag_080036c6(&DAT_0800bbbc);\n  }\n  wait_for_and_set_flag_080036c6(\"WPos:\");\n  for (axisIndex = 0; axisIndex < 3; axisIndex = axisIndex + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatCalculation1 = positionStack[axisIndex];\n      modifiedParam = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (axisIndex + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (axisIndex + 10) * 4));\n      index = (uint)axisIndex;\n      modifiedParam = calculate_float_08008cd8(floatCalculation1,modifiedParam);\n      positionStack[index] = modifiedParam;\n    }\n    else {\n      reversedValue = reverse_bits_08008590(positionStack[axisIndex]);\n      modifiedParam = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (axisIndex + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (axisIndex + 10) * 4));\n      floatCalculation2 = reverse_bits_08008590(modifiedParam);\n      floatCalculation2 = calculate_improved_result_08008640((int)floatCalculation2,(int)((ulonglong)floatCalculation2 >> 0x20),0x57e16865,0x3fa42851);\n      reversedValue = perform_arithmetic_operation_080082d0((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20),(int)floatCalculation2,\n                           (int)((ulonglong)floatCalculation2 >> 0x20));\n      index = (uint)axisIndex;\n      modifiedParam = calculate_floating_point_value_08008c30((int)reversedValue,(int)((ulonglong)reversedValue >> 0x20));\n      positionStack[index] = modifiedParam;\n    }\n    convert_integer_to_float_08003826(positionStack[axisIndex]);\n    if (axisIndex < 2) {\n      wait_for_and_set_flag_080036c6(&DAT_0800bbbc);\n    }\n  }\n  wait_for_and_set_flag_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "update_status_and_position_08004940",
                "auStack_2c": "positionStack",
                "uVar1": "modifiedParam",
                "uVar2": "index",
                "uVar3": "floatCalculation1",
                "uVar4": "reversedValue",
                "uVar5": "floatCalculation2",
                "local_11": "axisIndex"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_byte_data_08004bc0",
            "code": "\nvoid process_byte_data_08004bc0(byte input_byte,undefined4 input_data)\n\n{\n  process_data((input_address)input_byte * 0x101 + 0x300,input_data,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_byte_data_08004bc0",
                "param_1": "input_byte",
                "param_2": "input_data",
                "process_data_08000374": "process_data",
                "ushort": "input_address"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_data_08004bf4",
            "code": "\nvoid process_data_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  process_data_08004bf4_08000374((ushort)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  storeData(0,5);\n  processData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "store_data_08000340": "storeData",
                "process_data_08000374": "processData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_data_08004c48",
            "code": "\nvoid initialize_data_08004c48(char input_param)\n\n{\n  if (input_param != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c48_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "check_and_process_data_08004d2c",
            "code": "\nbool check_and_process_data_08004d2c(byte byte_data,undefined *byte_buffer)\n\n{\n  int is_equal;\n  \n  is_equal = check_data_equality(byte_buffer,(ushort)byte_data * 0x101 + 0x300,0x100);\n  if (is_equal == 0) {\n    *byte_buffer = 0;\n    process_byte_data(byte_data,byte_buffer);\n  }\n  return is_equal != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "check_and_process_data_08004d2c",
                "param_1": "byte_data",
                "param_2": "byte_buffer",
                "iVar1": "is_equal",
                "check_data_equality_080003ec": "check_data_equality",
                "process_byte_data_08004bc0": "process_byte_data"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_copy_data_08004d7c",
            "code": "\nbool checkAndCopyData_08004d7c(byte byteValue,undefined4 dataPointer)\n\n{\n  int isEqual;\n  \n  isEqual = checkDataEquality(dataPointer,(ushort)byteValue * 0xd + 0x200,0xc);\n  if (isEqual == 0) {\n    copyData(dataPointer,0,0xc);\n    processData(byteValue,dataPointer);\n  }\n  return isEqual != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_copy_data_08004d7c",
                "param_1": "byteValue",
                "param_2": "dataPointer",
                "iVar1": "isEqual",
                "check_data_equality_080003ec": "checkDataEquality",
                "copy_data_0800b430": "copyData",
                "process_data_08004bf4": "processData"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_data_and_initialize_08004dd2",
            "code": "\nundefined4 check_data_and_initialize_08004dd2(void)\n\n{\n  byte data_entry;\n  int equality_check_result;\n  \n  data_entry = get_data_entry_08000310(0);\n  if (data_entry == 5) {\n    equality_check_result = check_data_equality_080003ec(&DAT_20000ebc,1,0x40);\n    if (equality_check_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < data_entry) {\n      return 0;\n    }\n    equality_check_result = check_data_equality_080003ec(&DAT_20000ebc,1,0x28);\n    if (equality_check_result == 0) {\n      return 0;\n    }\n    initialize_data_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_data_and_initialize_08004dd2",
                "bVar1": "data_entry",
                "iVar2": "equality_check_result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_and_validate_settings_08004e30",
            "code": "\nundefined4 update_and_validate_settings_08004e30(int option,uint value)\n\n{\n  undefined4 result;\n  int checkResult;\n  undefined8 convertedValue;\n  \n  switch(option) {\n  case 0:\n  case 1:\n  case 2:\n    checkResult = check_concatenation_result_0800923c(value,0);\n    if (checkResult != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[option] = value;\n    break;\n  case 3:\n    checkResult = check_string_termination_08009228(value,0x40400000);\n    if (checkResult != 0) {\n      return 9;\n    }\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = convert_float_to_double_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ec9 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = value;\n    break;\n  case 5:\n    DAT_20000ed0 = value;\n    break;\n  case 6:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = calculate_shifted_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed4 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 7:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = convert_float_to_double_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef8 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 8:\n    result = calculate_floating_point_value_08008eec(value,0x42700000);\n    DAT_20000edc = calculate_floating_point_value_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = value;\n    break;\n  case 0xb:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = convert_float_to_double_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000efa = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xc:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = convert_float_to_double_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef9 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xd:\n    checkResult = check_concatenation_result_08009214(value,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    checkResult = check_concatenation_result_08009214(value,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    checkResult = check_concatenation_result_08009214(value,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    checkResult = check_concatenation_result_08009214(value,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    update_flag_based_on_condition_0800192c();\n    break;\n  case 0x11:\n    checkResult = check_concatenation_result_08009214(value,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = calculate_shifted_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ee6 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = value;\n    break;\n  case 0x14:\n    DAT_20000eec = value;\n    break;\n  case 0x15:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = convert_float_to_double_08009654((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef0 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = value;\n    break;\n  case 0x17:\n    convertedValue = reverse_bits_08008590(value);\n    convertedValue = calculate_shifted_value_08009798((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed6 = validate_input_08008bf0((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_and_validate_settings_08004e30",
                "param_1": "option",
                "param_2": "value",
                "uVar1": "result",
                "iVar2": "checkResult",
                "uVar3": "convertedValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "initialize_and_validate_data_080051b4",
            "code": "\nvoid initializeAndValidateData_080051b4(void)\n\n{\n  int result;\n  undefined temporaryBuffer [15];\n  byte counter;\n  \n  result = check_data_and_initialize_08004dd2();\n  if (result == 0) {\n    display_error_message_08004030(10);\n    initialize_data_08004c48(1);\n    set_config_parameters_08004250();\n  }\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    result = check_and_copy_data_08004d7c(counter,temporaryBuffer);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "initialize_and_validate_data_080051b4",
                "auStack_18": "temporaryBuffer",
                "local_9": "counter",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_program_08005238",
            "code": "\nvoid initialize_program_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  initialize_function_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_program_08005238"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "initialize_function_08005250",
            "code": "\nvoid initialize_function_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "initialize_function_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "process_and_initialize_data_0800525c",
            "code": "\nvoid processAndInitializeData_0800525c(byte inputByte)\n\n{\n  if ((int)(char)inputByte != (uint)DAT_20000e12) {\n    process_data_08002fd4();\n    if (inputByte == 0) {\n      initialize_function_08005250();\n      DAT_20000e12 = inputByte;\n    }\n    else {\n      if ((char)inputByte < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = inputByte;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "process_and_initialize_data_0800525c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_memory_value_080052ac",
            "code": "\n\n\nvoid updateMemoryValue_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_memory_value_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_register_080052dc",
            "code": "\n\n\nvoid updateRegister_080052dc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_register_080052dc",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_minimum_value_08005324",
            "code": "\nvoid calculateMinimumValue_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_minimum_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_minimum_value_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "accumulate_and_check_08005360",
            "code": "\nbool accumulateAndCheck_08005360(void)\n\n{\n  bool isThresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isThresholdExceeded = 420000 < DAT_20000e2c;\n  if (isThresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isThresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "accumulate_and_check_08005360",
                "bVar1": "isThresholdExceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_and_calculate_minimum_080053a0",
            "code": "\nvoid update_and_calculate_minimum_080053a0(void)\n\n{\n  int result;\n  \n  update_register(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_data_pointer();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      initialize_check_conditions();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_minimum_value(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        result = accumulate_and_check();\n        if (result != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_minimum_value(DAT_20000e30);\n          }\n          else {\n            initialize_check_conditions();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        result = accumulate_and_check();\n        if (result != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_minimum_value(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_minimum_value(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        result = accumulate_and_check();\n        if (result != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_minimum_value(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      update_if_not_equal();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_and_calculate_minimum_080053a0",
                "iVar1": "result",
                "update_register_080052dc": "update_register",
                "get_data_pointer_08002f74": "get_data_pointer",
                "initialize_bits_and_check_conditions_080057e4": "initialize_check_conditions",
                "calculate_minimum_value_08005324": "calculate_minimum_value",
                "accumulate_and_check_08005360": "accumulate_and_check",
                "update_if_not_equal_08002f40": "update_if_not_equal"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_memory_value_08005760",
            "code": "\nvoid updateMemoryValue_08005760(void)\n\n{\n  update_memory_value_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_memory_value_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "update_memory_value_08005778",
            "code": "\nvoid update_memory_value_08005778(void)\n\n{\n  update_memory_value_08005778_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "update_memory_value_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_data_08005790",
            "code": "\nvoid initializeData_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setParameterToGlobalVariable(0x69);\n    setDataToGlobalVariable((DAT_20000ec9 + 5) * 0x15);\n    updateFlagBits();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_data_08005790",
                "set_param_to_global_variable_08007c40": "setParameterToGlobalVariable",
                "set_data_to_global_variable_08007c5e": "setDataToGlobalVariable",
                "update_flag_bits_08007b70": "updateFlagBits"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "initialize_bits_and_check_conditions_080057e4",
            "code": "\nvoid initialize_bits_and_check_conditions_080057e4(void)\n\n{\n  clear_bits();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "initialize_bits_and_check_conditions_080057e4",
                "clear_bits_08007bc2": "clear_bits"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  copy_data_0800b430(&DAT_20000e14,0,0x24);\n  calculate_minimum_value_08005324(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_program_0800583c",
            "code": "\nvoid initialize_program_0800583c(void)\n\n{\n  update_memory_value_080052ac(DAT_20000ed4);\n  initialize_data();\n  initialize_bits_and_conditions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_program_0800583c",
                "initialize_data_08005790": "initialize_data",
                "initialize_bits_and_check_conditions_080057e4": "initialize_bits_and_conditions"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_if_data_mode_0800585c",
            "code": "\nvoid initialize_if_data_mode_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_if_data_mode_0800585c",
                "initialize_data_08005790": "initialize_data"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_data_state_0800587c",
            "code": "\nvoid updateDataState_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_data_state_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_processing_080058a0",
            "code": "\nvoid initializeProcessing_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    processAndCalculateResult(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateMinimumValue(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_processing_080058a0",
                "process_data_and_calculate_result_08003618": "processAndCalculateResult",
                "calculate_minimum_value_08005324": "calculateMinimumValue"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_and_set_flags_08005900",
            "code": "\nundefined4 checkAndSetFlags_08005900(byte input)\n\n{\n  if (input == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (input < 0x7f) {\n    if (input == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (input < 0x40) {\n      if (input == 0x18) {\n        initialize_and_check_conditions_080025e8();\n        return 1;\n      }\n      if (input == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_and_set_flags_08005900",
                "param_1": "input"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_system_call_0800597c",
            "code": "\nvoid executeSystemCall_0800597c(void)\n\n{\n  invokeSoftwareInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_system_call_0800597c",
                "software_interrupt": "invokeSoftwareInterrupt"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_system_call_if_dat_is_zero_08005984",
            "code": "\nundefined4 execute_system_call_if_dat_is_zero_08005984(undefined4 input_parameter)\n\n{\n  undefined4 system_call_result;\n  \n  if (DAT_20000e44 == 0) {\n    system_call_result = execute_system_call_0800597c(1,input_parameter,0);\n  }\n  else {\n    system_call_result = 0;\n  }\n  return system_call_result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_system_call_if_dat_is_zero_08005984",
                "param_1": "input_parameter",
                "uVar1": "system_call_result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_program_080059b4",
            "code": "\n\n\nundefined4 initialize_program_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  initialize_memory_check(16000);\n  initialize_hardware(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_program_080059b4",
                "initialize_memory_check_08006d72": "initialize_memory_check",
                "initialize_hardware_08006ce0": "initialize_hardware"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "retrieve_data_08005a84",
            "code": "\nundefined4 retrieve_data_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "retrieve_data_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "determine_ending_value_08005a98",
            "code": "\nvoid determineEndingValue_08005a98(int endingValue)\n\n{\n  int initialValue;\n  uint currentValue;\n  \n  initialValue = retrieve_data_08005a84();\n  do {\n    currentValue = retrieve_data_08005a84();\n  } while (currentValue < (uint)(endingValue + initialValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "determine_ending_value_08005a98",
                "param_1": "endingValue",
                "iVar1": "initialValue",
                "uVar2": "currentValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_byte_to_memory_08005bdc",
            "code": "\nvoid writeByteToMemory_08005bdc(byte inputByte,uint value)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_byte_to_memory_08005bdc",
                "param_1": "inputByte",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_initialize_memory_08005c30",
            "code": "\n\n\nbool checkAndInitializeMemory_08005c30(int inputValue)\n\n{\n  bool isInputValid;\n  \n  isInputValid = inputValue - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = inputValue + -1;\n    writeByteToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_initialize_memory_08005c30",
                "param_1": "inputValue",
                "bVar1": "isInputValid",
                "write_byte_to_memory_08005bdc": "writeByteToMemory"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_conditions_08005cec",
            "code": "\n\n\nundefined4 checkConditions_08005cec(uint *inputParams)\n\n{\n  int returnValue;\n  uint tempVar;\n  \n  if ((*inputParams & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (inputParams[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      returnValue = getData();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        tempVar = getData();\n        if (returnValue + 5000U <= tempVar) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concat13(DAT_40023800_3,CONCAT12((char)inputParams[1],_DAT_40023800));\n      if (inputParams[1] == 1) {\n        returnValue = getData();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          tempVar = getData();\n          if (returnValue + 5000U <= tempVar) {\n            return 3;\n          }\n        }\n      }\n      else {\n        returnValue = getData();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          tempVar = getData();\n          if (returnValue + 5000U <= tempVar) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*inputParams & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (inputParams[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (inputParams[3] == 0) {\n      _DAT_42470000 = 0;\n      returnValue = getData();\n      while ((_DAT_40023800 & 2) != 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      returnValue = getData();\n      while ((_DAT_40023800 & 2) == 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = inputParams[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*inputParams & 8) != 0) {\n    if (inputParams[5] == 0) {\n      _DAT_42470e80 = 0;\n      returnValue = getData();\n      while ((_DAT_40023874 & 2) != 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      returnValue = getData();\n      while ((_DAT_40023874 & 2) == 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*inputParams & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    returnValue = getData();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      tempVar = getData();\n      if (returnValue + 100U <= tempVar) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    returnValue = getData();\n    while ((_DAT_40023870 & 2) != 0) {\n      tempVar = getData();\n      if (returnValue + 5000U <= tempVar) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = concat31(DAT_40023870_1,(char)inputParams[2]);\n    if (inputParams[2] == 1) {\n      returnValue = getData();\n      while ((_DAT_40023870 & 2) == 0) {\n        tempVar = getData();\n        if (returnValue + 5000U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n    else {\n      returnValue = getData();\n      while ((_DAT_40023870 & 2) != 0) {\n        tempVar = getData();\n        if (returnValue + 5000U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (inputParams[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (inputParams[6] == 2) {\n      _DAT_42470060 = 0;\n      returnValue = getData();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           inputParams[0xb] << 0x18 |\n           inputParams[8] | inputParams[9] << 6 | ((inputParams[10] >> 1) - 1) * 0x10000 | inputParams[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      returnValue = getData();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      returnValue = getData();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        tempVar = getData();\n        if (returnValue + 100U <= tempVar) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_conditions_08005cec",
                "param_1": "inputParams",
                "iVar1": "returnValue",
                "uVar2": "tempVar",
                "CONCAT13": "concat13",
                "param_1[1]": "inputParams[1]",
                "retrieve_data_08005a84": "getData",
                "param_1[2]": "inputParams[2]",
                "param_1[3]": "inputParams[3]",
                "param_1[4]": "inputParams[4]",
                "param_1[5]": "inputParams[5]",
                "CONCAT31": "concat31",
                "param_1[6]": "inputParams[6]",
                "param_1[0xb]": "inputParams[0xb]",
                "param_1[8]": "inputParams[8]",
                "param_1[9]": "inputParams[9]",
                "param_1[10]": "inputParams[10]",
                "param_1[7]": "inputParams[7]"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_and_check_clock_0800618c",
            "code": "\n\n\nundefined4 initialize_and_check_clock_0800618c(uint *parameters,uint size)\n\n{\n  int result;\n  uint data;\n  uint threshold;\n  undefined8 clock_speed;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*parameters & 1) != 0) {\n      if (parameters[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((parameters[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = parameters[1] | _DAT_40023808 & 0xfffffffc;\n      result = fetch_data();\n      threshold = result + 5000;\n      if (parameters[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          data = fetch_data();\n          if (threshold <= data) {\n            return 3;\n          }\n        }\n      }\n      else if (parameters[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          data = fetch_data();\n          if (threshold <= data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          data = fetch_data();\n          if (threshold <= data) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*parameters & 1) != 0) {\n      if (parameters[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (parameters[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = parameters[1] | _DAT_40023808 & 0xfffffffc;\n      result = fetch_data();\n      threshold = result + 5000;\n      if (parameters[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          data = fetch_data();\n          if (threshold <= data) {\n            return 3;\n          }\n        }\n      }\n      else if (parameters[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          data = fetch_data();\n          if (threshold <= data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          data = fetch_data();\n          if (threshold <= data) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    _DAT_40023808 = parameters[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*parameters & 4) != 0) {\n    _DAT_40023808 = parameters[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*parameters & 8) != 0) {\n    _DAT_40023808 = parameters[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clock_speed = calculate_clock_speed();\n  check_and_init_memory((uint)clock_speed / 1000,(int)((ulonglong)clock_speed >> 0x20),(uint)clock_speed * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_and_check_clock_0800618c",
                "param_1": "parameters",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "data",
                "uVar3": "threshold",
                "uVar4": "clock_speed",
                "retrieve_data_08005a84": "fetch_data",
                "calculate_and_set_clock_speed_08006628": "calculate_clock_speed",
                "check_and_initialize_memory_08005c30": "check_and_init_memory"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_registers_0800640c",
            "code": "\n\n\nvoid updateRegisters_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  undefined4 register4;\n  undefined4 register5;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    register1 = 0x100;\n    register2 = 2;\n    register4 = 3;\n    register3 = 0;\n    register5 = 0;\n    update_registers_08006e88(0x40020000,&register1);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    register1 = 0x200;\n    register2 = 2;\n    register4 = 3;\n    register3 = 0;\n    register5 = 0;\n    update_registers_08006e88(0x40020800,&register1);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_registers_0800640c",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "register1",
                "local_18": "register2",
                "local_14": "register3",
                "local_10": "register4",
                "local_c": "register5"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_speed_080064ec",
            "code": "\n\n\nuint calculateClockSpeed_080064ec(void)\n\n{\n  uint clockConfig;\n  uint clockSpeed;\n  \n  clockConfig = _DAT_40023808 & 0xc;\n  if (clockConfig == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockSpeed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockConfig < 9) {\n    if (clockConfig == 0) {\n      return 16000000;\n    }\n    if (clockConfig == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_speed_080064ec",
                "uVar1": "clockConfig",
                "local_c": "clockSpeed"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_and_set_clock_speed_08006628",
            "code": "\n\n\nuint calculateAndSetClockSpeed_08006628(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_clock_speed_080064ec();\n  DAT_20000000 = clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_and_set_clock_speed_08006628",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_speed_08006680",
            "code": "\n\n\nuint calculateClockSpeed_08006680(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_and_set_clock_speed_08006628();\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_speed_08006680",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_adjusted_clock_speed_080066cc",
            "code": "\n\n\nuint calculateAdjustedClockSpeed_080066cc(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_and_set_clock_speed_08006628();\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_adjusted_clock_speed_080066cc",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "configure_hardware_08006950",
            "code": "\n\n\nvoid configureHardware_08006950(uint param)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (param & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "configure_hardware_08006950",
                "param_1": "param"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "extracted_bits_from_register_08006998",
            "code": "\n\n\nuint extractedBitsFromRegister_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "extracted_bits_from_register_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_080069b4",
            "code": "\nvoid setBit_080069b4(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_080069b4",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_080069e4",
            "code": "\nvoid setBit_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_array_08006a58",
            "code": "\nvoid setBitInArray_08006a58(byte byteToSet)\n\n{\n  *(int *)((((uint)(int)(char)byteToSet >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_08006a8c",
            "code": "\nvoid setBit_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_set_08006ac0",
            "code": "\nbool checkBitSet_08006ac0(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_set_08006ac0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "write_value_to_memory_08006b00",
            "code": "\nvoid writeValueToMemory_08006b00(byte byteValue,uint numericValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((numericValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((numericValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "write_value_to_memory_08006b00",
                "param_1": "byteValue",
                "param_2": "numericValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_byte_08006b54",
            "code": "\nbyte extractByte_08006b54(byte input)\n\n{\n  byte result;\n  \n  if ((char)input < '\\0') {\n    result = *(byte *)((input & 0xf) + 0xe000ed14);\n  }\n  else {\n    result = *(byte *)((char)input + -0x1fff1c00);\n  }\n  return result >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_byte_08006b54",
                "param_1": "input",
                "bVar1": "result"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "apply_mask_and_shift_08006ba0",
            "code": "\nuint applyMaskAndShift_08006ba0(uint inputBits,uint mask,uint data)\n\n{\n  uint shiftAmount;\n  \n  inputBits = inputBits & 7;\n  shiftAmount = 7 - inputBits;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (inputBits + 4 < 7) {\n    inputBits = 0;\n  }\n  else {\n    inputBits = inputBits - 3;\n  }\n  return data & (1 << (inputBits & 0xff)) - 1U |\n         ((1 << (shiftAmount & 0xff)) - 1U & mask) << (inputBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "apply_mask_and_shift_08006ba0",
                "param_1": "inputBits",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint inputValue,uint bitPosition,uint *output1,uint *output2)\n\n{\n  uint remainingBits;\n  \n  bitPosition = bitPosition & 7;\n  remainingBits = 7 - bitPosition;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (bitPosition + 4 < 7) {\n    bitPosition = 0;\n  }\n  else {\n    bitPosition = bitPosition - 3;\n  }\n  *output1 = (1 << (remainingBits & 0xff)) - 1U & inputValue >> (bitPosition & 0xff);\n  *output2 = (1 << (bitPosition & 0xff)) - 1U & inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "inputValue",
                "param_2": "bitPosition",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  synchronizeData(0xf);\n  synchronizeData(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "synchronizeData"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_initialize_memory_08006c9c",
            "code": "\n\n\nbool checkAndInitializeMemory_08006c9c(int inputValue)\n\n{\n  bool isValueValid;\n  \n  isValueValid = inputValue - 1U < 0x1000000;\n  if (isValueValid) {\n    _DAT_e000e014 = inputValue + -1;\n    write_value_to_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_initialize_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isValueValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "initialize_hardware_08006ce0",
            "code": "\nvoid initialize_hardware_08006ce0(undefined4 parameter)\n\n{\n  configure_hardware(parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "initialize_hardware_08006ce0",
                "param_1": "parameter",
                "configure_hardware_08006950": "configure_hardware"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "write_extracted_value_to_memory_08006cf6",
            "code": "\nvoid writeExtractedValueToMemory_08006cf6(char character,undefined4 mask,undefined4 shift)\n\n{\n  undefined4 extractedValue;\n  \n  extractedValue = extracted_bits_from_register_08006998();\n  extractedValue = apply_mask_and_shift_08006ba0(extractedValue,mask,shift);\n  write_value_to_memory_08006b00((int)character,extractedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "write_extracted_value_to_memory_08006cf6",
                "param_1": "character",
                "param_2": "mask",
                "param_3": "shift",
                "uVar1": "extractedValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_08006d2e",
            "code": "\nvoid setBit_08006d2e(char value)\n\n{\n  set_bit_080069b4((int)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_08006d2e",
                "param_1": "value"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_in_memory_08006d4a",
            "code": "\nvoid setBitInMemory_08006d4a(char character)\n\n{\n  setBitInMemory_08006d4a((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_in_memory_08006d4a",
                "param_1": "character",
                "set_bit_080069e4": "setBitInMemory"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "start_infinite_loop_08006d66",
            "code": "\nvoid startInfiniteLoop_08006d66(void)\n\n{\n  infiniteLoopFunction();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "start_infinite_loop_08006d66",
                "infinite_loop_08006c70": "infiniteLoopFunction"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "initialize_memory_check_08006d72",
            "code": "\nundefined4 initialize_memory_check_08006d72(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_memory_08006c9c(input_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "initialize_memory_check_08006d72",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "extracted_bits_from_register_08006d8a",
            "code": "\nundefined4 extractedBitsFromRegister_08006d8a(void)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extracted_bits_from_register_08006998();\n  return extractedBits;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "extracted_bits_from_register_08006d8a",
                "uVar1": "extractedBits"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_and_extracted_bits_08006d98",
            "code": "\nvoid extract_and_extracted_bits_08006d98(char character,undefined4 parameter2,undefined4 parameter3,undefined4 parameter4)\n\n{\n  undefined4 extracted_byte;\n  \n  extracted_byte = extract_byte_08006b54((int)character);\n  extract_bits_08006c04(extracted_byte,parameter2,parameter3,parameter4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_and_extracted_bits_08006d98",
                "param_1": "character",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "extracted_byte"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_in_array_08006dc4",
            "code": "\nvoid setBitInArray_08006dc4(char inputChar)\n\n{\n  set_bit_in_array_08006a58((int)inputChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_in_array_08006dc4",
                "param_1": "inputChar"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "bit_check_08006de0",
            "code": "\nundefined4 bitCheck_08006de0(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006a18((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "bit_check_08006de0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_08006dfe",
            "code": "\nvoid setBit_08006dfe(char inputChar)\n\n{\n  set_bit_08006a8c((int)inputChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_08006dfe",
                "param_1": "inputChar"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_set_08006e1a",
            "code": "\nundefined4 checkBitSet_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_set_08006ac0((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_set_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid update_registers_08006e88(uint *register_array,uint *input_array)\n\n{\n  uint bit_mask;\n  uint bit_result;\n  int register_index;\n  uint loop_variable;\n  \n  for (loop_variable = 0; loop_variable < 0x10; loop_variable = loop_variable + 1) {\n    bit_mask = 1 << (loop_variable & 0xff);\n    bit_result = *input_array & bit_mask;\n    if (bit_result == bit_mask) {\n      if ((input_array[1] == 2) || (input_array[1] == 0x12)) {\n        bit_mask = input_array[4];\n        register_array[(loop_variable >> 3) + 8] = register_array[(loop_variable >> 3) + 8] & ~(0xf << ((loop_variable & 7) << 2));\n        register_array[(loop_variable >> 3) + 8] = register_array[(loop_variable >> 3) + 8] | bit_mask << ((loop_variable & 7) << 2);\n      }\n      *register_array = *register_array & ~(3 << ((loop_variable & 0x7f) << 1));\n      *register_array = *register_array | (input_array[1] & 3) << ((loop_variable & 0x7f) << 1);\n      if ((((input_array[1] == 1) || (input_array[1] == 2)) || (input_array[1] == 0x11)) || (input_array[1] == 0x12)\n         ) {\n        register_array[2] = register_array[2] & ~(3 << ((loop_variable & 0x7f) << 1));\n        register_array[2] = register_array[2] | input_array[3] << ((loop_variable & 0x7f) << 1);\n        register_array[1] = register_array[1] & ~(1 << (loop_variable & 0xff));\n        register_array[1] = register_array[1] | (input_array[1] >> 4 & 1) << (loop_variable & 0xff);\n      }\n      register_array[3] = register_array[3] & ~(3 << ((loop_variable & 0x7f) << 1));\n      register_array[3] = register_array[3] | input_array[2] << ((loop_variable & 0x7f) << 1);\n      if ((input_array[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((loop_variable >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((loop_variable & 3) << 2)) & *(uint *)(((loop_variable >> 2) + 2) * 4 + 0x40013800);\n        if (register_array == (uint *)0x40020000) {\n          register_index = 0;\n        }\n        else if (register_array == (uint *)0x40020400) {\n          register_index = 1;\n        }\n        else if (register_array == (uint *)0x40020800) {\n          register_index = 2;\n        }\n        else if (register_array == (uint *)0x40020c00) {\n          register_index = 3;\n        }\n        else if (register_array == (uint *)0x40021000) {\n          register_index = 4;\n        }\n        else if (register_array == (uint *)0x40021400) {\n          register_index = 5;\n        }\n        else if (register_array == (uint *)0x40021800) {\n          register_index = 6;\n        }\n        else if (register_array == (uint *)0x40021c00) {\n          register_index = 7;\n        }\n        else if (register_array == (uint *)0x40022000) {\n          register_index = 8;\n        }\n        else if (register_array == (uint *)0x40022400) {\n          register_index = 9;\n        }\n        else {\n          register_index = 10;\n        }\n        *(uint *)(((loop_variable >> 2) + 2) * 4 + 0x40013800) =\n             register_index << ((loop_variable & 3) << 2) | *(uint *)(((loop_variable >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_result & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_result & _DAT_40013c04;\n        if ((input_array[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_result | _DAT_40013c00;\n        }\n        if ((input_array[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_result | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_result & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_result & _DAT_40013c0c;\n        if ((input_array[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_result | _DAT_40013c08;\n        }\n        if ((input_array[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_result | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "register_array",
                "param_2": "input_array",
                "uVar1": "bit_mask",
                "uVar2": "bit_result",
                "iVar3": "register_index",
                "local_c": "loop_variable"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_param_0800733e",
            "code": "\nvoid updateParam_0800733e(int ptr,undefined2 value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(undefined2 *)(ptr + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(ptr + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_param_0800733e",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_flag_if_set_0800738e",
            "code": "\n\n\nvoid updateFlagIfSet_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    FUNC_080073c0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_flag_if_set_0800738e",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid set_bit_in_memory_080073d4(uint bit_index)\n\n{\n  *(short *)(((int)bit_index >> 4) * 0x400 + 0x4002001a) = (short)(1 << (bit_index & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "bit_index"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "update_memory_value_08007402",
            "code": "\nvoid updateMemoryValue_08007402(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "update_memory_value_08007402",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "run_infinite_loop_08007430",
            "code": "\nvoid run_infinite_loop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "run_infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_and_check_system_08007436",
            "code": "\n\n\nvoid initialize_and_check_system_08007436(void)\n\n{\n  int iVar1;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  undefined4 value_1;\n  undefined4 address_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined4 value_5;\n  undefined4 value_6;\n  undefined4 value_7;\n  undefined4 value_8;\n  undefined4 address_2;\n  undefined4 size;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag_1 = 1;\n  flag_2 = 1;\n  value_1 = 2;\n  address_1 = 0x400000;\n  value_2 = 8;\n  value_3 = 0x150;\n  value_4 = 2;\n  value_5 = 7;\n  iVar1 = check_flags(&flag_1);\n  if (iVar1 != 0) {\n    handle_infinite_loop();\n  }\n  value_6 = 0xf;\n  value_7 = 2;\n  value_8 = 0;\n  address_2 = 0x1400;\n  size = 0x1000;\n  iVar1 = initialize_and_check_clock(&value_6,5);\n  if (iVar1 != 0) {\n    handle_infinite_loop();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_and_check_system_08007436",
                "local_4c": "flag_1",
                "local_48": "flag_2",
                "local_34": "value_1",
                "local_30": "address_1",
                "local_2c": "value_2",
                "local_28": "value_3",
                "local_24": "value_4",
                "local_20": "value_5",
                "local_1c": "value_6",
                "local_18": "value_7",
                "local_14": "value_8",
                "local_10": "address_2",
                "local_c": "size",
                "check_conditions_08005cec": "check_flags",
                "run_infinite_loop_08007430": "handle_infinite_loop",
                "initialize_and_check_clock_0800618c": "initialize_and_check_clock"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_flags_080074c8",
            "code": "\nvoid process_flags_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    update_memory_value(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    initialize_and_check_conditions();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    process_param(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_flags_080074c8",
                "param_1": "flags",
                "update_memory_value_08007402": "update_memory_value",
                "initialize_and_check_conditions_0800195c": "initialize_and_check_conditions",
                "process_param_08003a18": "process_param"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_if_odd_08007520",
            "code": "\nvoid setBitIfOdd_08007520(uint input)\n\n{\n  if ((input & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "input",
                "set_bit_in_memory_080073d4": "setMemoryBit"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_program_08007540",
            "code": "\nundefined4 initialize_program_08007540(void)\n\n{\n  initialize_program_08007540_step1();\n  initialize_program_08007540_step2();\n  initialize_program_08007540_step3();\n  initialize_program_08007540_step4();\n  initialize_program_08007540_step5();\n  initialize_system();\n  execute_system_call(0);\n  initialize_program_08007540_loop();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_program_08007540",
                "initialize_program_080059b4": "initialize_program_step1",
                "initialize_and_check_system_08007436": "initialize_program_step2",
                "update_registers_and_params_0800778c": "initialize_program_step3",
                "initialize_program_08007e08": "initialize_program_step4",
                "copy_data_and_update_flag_080079c0": "initialize_program_step5",
                "initialize_system_08008190": "initialize_system",
                "execute_system_call_if_dat_is_zero_08005984": "execute_system_call",
                "initialize_program_loop_08001ddc": "initialize_program_loop"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n\nvoid initializeMemory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_in_memory_080076c8",
            "code": "\nvoid updateBitInMemory_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_in_memory_080076c8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_data_and_memory_08007756",
            "code": "\nvoid update_data_and_memory_08007756(void)\n\n{\n  uint data;\n  \n  data = retrieve_data();\n  if ((data & 0x1ff) == 0) {\n    update_bit_in_memory(0x3c);\n  }\n  if ((data & 0xf) == 0) {\n    update_data();\n  }\n  increment_counter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_data_and_memory_08007756",
                "uVar1": "data",
                "retrieve_data_08005a84": "retrieve_data",
                "update_bit_in_memory_080076c8": "update_bit_in_memory",
                "update_data_08007930": "update_data",
                "increment_counter_08005a68": "increment_counter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "update_registers_and_params_0800778c",
            "code": "\n\n\nvoid update_registers_and_params_0800778c(void)\n\n{\n  int tempIndex;\n  int bitMask;\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  undefined4 register4;\n  uint *ptr;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    tempIndex = counter * 0x18;\n    ptr = (uint *)(&DAT_0800bcbc + tempIndex);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*ptr >> 4 & 0xff);\n    bitMask = 1 << (*ptr & 0xf);\n    register1 = *(undefined4 *)(&DAT_0800bcc0 + tempIndex);\n    register2 = *(undefined4 *)(&DAT_0800bcc4 + tempIndex);\n    register3 = *(undefined4 *)(&DAT_0800bcc8 + tempIndex);\n    register4 = *(undefined4 *)(&DAT_0800bccc + tempIndex);\n    update_registers_08006e88(((*ptr >> 4) + 0x100080) * 0x400,&bitMask);\n    if (-1 < (int)ptr[5]) {\n      update_param_0800733e(((*ptr >> 4) + 0x100080) * 0x400,1 << (*ptr & 0xf) & 0xffff,\n                   ptr[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "update_registers_and_params_0800778c",
                "iVar1": "tempIndex",
                "local_24": "bitMask",
                "local_20": "register1",
                "local_1c": "register2",
                "local_18": "register3",
                "local_14": "register4",
                "local_10": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_value_08007854",
            "code": "\nuint check_bit_value_08007854(uint input_value)\n\n{\n  return *(uint *)(((int)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "calculate_bit_mask_08007884",
            "code": "\nuint calculateBitMask_08007884(void)\n\n{\n  int bitValue0x36;\n  int bitValue0x37;\n  int bitValue0x38;\n  int bitValue0x39;\n  int bitValue0xf;\n  uint bitValue0;\n  \n  bitValue0x36 = check_bit_value_08007854(0x36);\n  bitValue0x37 = check_bit_value_08007854(0x37);\n  bitValue0x38 = check_bit_value_08007854(0x38);\n  bitValue0x39 = check_bit_value_08007854(0x39);\n  bitValue0xf = check_bit_value_08007854(0xf);\n  bitValue0 = check_bit_value_08007854(0);\n  return bitValue0 | bitValue0x36 << 4 | bitValue0x37 << 3 | bitValue0x38 << 2 | bitValue0x39 << 1 | bitValue0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "calculate_bit_mask_08007884",
                "iVar1": "bitValue0x36",
                "iVar2": "bitValue0x37",
                "iVar3": "bitValue0x38",
                "iVar4": "bitValue0x39",
                "iVar5": "bitValue0xf",
                "uVar6": "bitValue0"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_sum_080078f4",
            "code": "\nuint calculateSum_080078f4(void)\n\n{\n  int index;\n  uint sum;\n  \n  sum = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    sum = *(uint *)(&DAT_20000e54 + index * 4) | sum;\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_sum_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_data_08007930",
            "code": "\nvoid updateData_08007930(void)\n\n{\n  int counter;\n  uint previousValue;\n  undefined4 bitMask;\n  uint sum;\n  uint changedBits;\n  \n  counter = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    bitMask = calculate_bit_mask_08007884();\n    *(undefined4 *)(&DAT_20000e54 + counter * 4) = bitMask;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    sum = calculate_sum_080078f4();\n    previousValue = DAT_20000e64;\n    if (sum != DAT_20000e64) {\n      changedBits = ~sum & DAT_20000e64;\n      if ((~DAT_20000e64 & sum) != 0) {\n        process_flags_080074c8(~DAT_20000e64 & sum);\n      }\n      previousValue = sum;\n      if (changedBits != 0) {\n        set_bit_if_odd_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_data_08007930",
                "iVar1": "counter",
                "uVar2": "previousValue",
                "uVar3": "bitMask",
                "uVar4": "sum",
                "uVar5": "changedBits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "copy_data_and_update_flag_080079c0",
            "code": "\nvoid copyDataAndUpdateFlag_080079c0(void)\n\n{\n  copy_data_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "copy_data_and_update_flag_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_080079e0",
            "code": "\nvoid setBit_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flag_08007a10",
            "code": "\n\n\nvoid updateFlag_08007a10(undefined *data)\n\n{\n  if (data == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (data == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (data == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "data"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "extracted_value_handler_08007a70",
            "code": "\nvoid extracted_value_handler_08007a70(undefined *memory_address,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined extracted_value;\n  \n  if (memory_address == (undefined *)0x40000000) {\n    extracted_value = 0x1c;\n  }\n  else if (memory_address == (undefined *)0x40000400) {\n    extracted_value = 0x1d;\n  }\n  else {\n    if (memory_address != &DAT_40000800) {\n      return;\n    }\n    extracted_value = 0x1e;\n  }\n  write_extracted_value_to_memory_08006cf6(extracted_value,value_1,value_2);\n  set_bit_080079e0(extracted_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "extracted_value_handler_08007a70",
                "param_1": "memory_address",
                "param_2": "value_1",
                "param_3": "value_2",
                "local_c": "extracted_value"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_data_08007ad0",
            "code": "\n\n\nvoid initialize_data_08007ad0(void)\n\n{\n  update_flag_08007a10(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  handle_extracted_value(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_data_08007ad0",
                "extracted_value_handler_08007a70": "handle_extracted_value"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "update_flag_bits_08007b70",
            "code": "\n\n\nvoid updateFlagBits_08007b70(void)\n\n{\n  uint flagBits;\n  \n  flagBits = 1;\n  if (_DAT_40000034 != 0) {\n    flagBits = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flagBits = flagBits | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flagBits;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "update_flag_bits_08007b70",
                "local_c": "flagBits"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_bits_08007bc2",
            "code": "\n\n\nvoid clearBits_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_minimum_value_08007bf0",
            "code": "\n\n\nvoid update_minimum_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_minimum_value_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_param_to_global_variable_08007c40",
            "code": "\n\n\nvoid set_param_to_global_variable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_param_to_global_variable_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_data_to_global_variable_08007c5e",
            "code": "\n\n\nvoid set_data_to_global_variable_08007c5e(undefined4 input_data)\n\n{\n  _DAT_40000038 = input_data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_data_to_global_variable_08007c5e",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "update_memory_values_08007c7c",
            "code": "\n\n\nvoid update_memory_values_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_memory_value_08005778();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_memory_value_08005760();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_and_calculate_minimum_080053a0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "update_memory_values_08007c7c"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_registers_08007d08",
            "code": "\n\n\nvoid initializeRegisters_08007d08(void)\n\n{\n  update_flag_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_registers_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid setFlags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_program_08007e08",
            "code": "\nvoid initialize_program_08007e08(void)\n\n{\n  initialize_data();\n  initialize_registers();\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_program_08007e08",
                "initialize_data_08007ad0": "initialize_data",
                "initialize_registers_08007d08": "initialize_registers",
                "set_flags_08007da8": "set_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_and_set_08007e1c",
            "code": "\n\n\nvoid waitForFlagAndSet_08007e1c(byte valueToSet)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)valueToSet;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_and_set_08007e1c",
                "param_1": "valueToSet"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_bit_set_08007e58",
            "code": "\n\n\nbool isBitSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_bit_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "set_flags_08007ea4",
            "code": "\n\n\nvoid setFlags_08007ea4(undefined *address)\n\n{\n  if (address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "set_flags_08007ea4",
                "param_1": "address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_speed_08007f54",
            "code": "\nvoid calculateClockSpeed_08007f54(int deviceAddress,int clockMultiplier)\n\n{\n  ulonglong clockSpeed;\n  int adjustedClockSpeed1;\n  int adjustedClockSpeed2;\n  undefined8 clockSpeedMultiplier;\n  \n  if ((*(uint *)(deviceAddress + 0xc) & 0x8000) == 0) {\n    if ((deviceAddress != 0x40011000) && (deviceAddress != 0x40011400)) {\n      clockSpeedMultiplier = calculate_clock_speed_08006680();\n      clockSpeed = (ulonglong)(uint)((int)clockSpeedMultiplier * 0x19) / (ulonglong)(uint)(clockMultiplier << 2);\n      adjustedClockSpeed1 = calculate_clock_speed_08006680((int)clockSpeedMultiplier,(int)((ulonglong)clockSpeedMultiplier >> 0x20),(int)(clockSpeed * 0x51eb851f));\n      adjustedClockSpeed2 = calculate_clock_speed_08006680();\n      *(uint *)(deviceAddress + 8) =\n           (int)(clockSpeed / 100) << 4 |\n           (((uint)(adjustedClockSpeed1 * 0x19) / (uint)(clockMultiplier << 2) +\n            (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(clockMultiplier << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockSpeedMultiplier = calculate_adjusted_clock_speed_080066cc();\n    clockSpeed = (ulonglong)(uint)((int)clockSpeedMultiplier * 0x19) / (ulonglong)(uint)(clockMultiplier << 2);\n    adjustedClockSpeed1 = calculate_adjusted_clock_speed_080066cc((int)clockSpeedMultiplier,(int)((ulonglong)clockSpeedMultiplier >> 0x20),(int)(clockSpeed * 0x51eb851f));\n    adjustedClockSpeed2 = calculate_adjusted_clock_speed_080066cc();\n    *(uint *)(deviceAddress + 8) =\n         (int)(clockSpeed / 100) << 4 |\n         (((uint)(adjustedClockSpeed1 * 0x19) / (uint)(clockMultiplier << 2) +\n          (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(clockMultiplier << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((deviceAddress != 0x40011000) && (deviceAddress != 0x40011400)) {\n      clockSpeedMultiplier = calculate_clock_speed_08006680();\n      clockSpeed = (ulonglong)(uint)((int)clockSpeedMultiplier * 0x19) / (ulonglong)(uint)(clockMultiplier << 1);\n      adjustedClockSpeed1 = calculate_clock_speed_08006680((int)clockSpeedMultiplier,(int)((ulonglong)clockSpeedMultiplier >> 0x20),(int)(clockSpeed * 0x51eb851f));\n      adjustedClockSpeed2 = calculate_clock_speed_08006680();\n      *(uint *)(deviceAddress + 8) =\n           (int)(clockSpeed / 100) << 4 |\n           (((uint)(adjustedClockSpeed1 * 0x19) / (uint)(clockMultiplier << 1) +\n            (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(clockMultiplier << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockSpeedMultiplier = calculate_adjusted_clock_speed_080066cc();\n    clockSpeed = (ulonglong)(uint)((int)clockSpeedMultiplier * 0x19) / (ulonglong)(uint)(clockMultiplier << 1);\n    adjustedClockSpeed1 = calculate_adjusted_clock_speed_080066cc((int)clockSpeedMultiplier,(int)((ulonglong)clockSpeedMultiplier >> 0x20),(int)(clockSpeed * 0x51eb851f));\n    adjustedClockSpeed2 = calculate_adjusted_clock_speed_080066cc();\n    *(uint *)(deviceAddress + 8) =\n         (int)(clockSpeed / 100) << 4 |\n         (((uint)(adjustedClockSpeed1 * 0x19) / (uint)(clockMultiplier << 1) +\n          (int)(((ulonglong)(uint)(adjustedClockSpeed2 * 0x19) / (ulonglong)(uint)(clockMultiplier << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_speed_08007f54",
                "param_1": "deviceAddress",
                "param_2": "clockMultiplier",
                "uVar1": "clockSpeed",
                "iVar2": "adjustedClockSpeed1",
                "iVar3": "adjustedClockSpeed2",
                "uVar4": "clockSpeedMultiplier"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_system_08008190",
            "code": "\n\n\nvoid initializeSystem_08008190(void)\n\n{\n  set_flags_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculate_clock_speed_08007f54(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_system_08008190"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_for_and_set_flag_08008250",
            "code": "\nvoid waitForAndSetFlag_08008250(undefined param)\n\n{\n  waitForFlagAndSet(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_for_and_set_flag_08008250",
                "param_1": "param",
                "wait_for_flag_and_set_08007e1c": "waitForFlagAndSet"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_for_flag_and_set_0800826a",
            "code": "\nundefined4 waitForFlagAndSet_0800826a(undefined param)\n\n{\n  waitForFlagAndSet_0800826a08007e1c(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_for_flag_and_set_0800826a",
                "param_1": "param",
                "wait_for_flag_and_set_08007e1c": "waitForFlagAndSet08007e1c"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_and_return_lowest_byte_08008286",
            "code": "\nundefined checkAndReturnLowestByte_08008286(void)\n\n{\n  undefined lowestByte;\n  int bitSet;\n  \n  bitSet = isBitSet();\n  if (bitSet != 0) {\n    lowestByte = getLowestByte();\n    bitSet = checkAndSetFlags(lowestByte);\n    if (bitSet == 0) {\n      return lowestByte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_and_return_lowest_byte_08008286",
                "uVar1": "lowestByte",
                "iVar2": "bitSet",
                "is_bit_set_08007e58": "isBitSet",
                "get_lowest_byte_08007e84": "getLowestByte",
                "check_and_set_flags_08005900": "checkAndSetFlags"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "perform_arithmetic_operation_080082d0",
            "code": "\nulonglong performArithmeticOperation_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftRightAmount1;\n  byte carryFlag1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shiftRightAmount2;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool boolFlag1;\n  bool boolFlag2;\n  bool boolFlag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  temp6 = input2 << 1;\n  input4 = input4 << 1;\n  boolFlag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  boolFlag2 = boolFlag1 && input1 == input3;\n  if (!boolFlag1 || input1 != input3) {\n    boolFlag2 = (temp6 | input1) == 0;\n  }\n  if (!boolFlag2) {\n    boolFlag2 = (input4 | input3) == 0;\n  }\n  shiftRightAmount2 = (int)temp6 >> 0x15;\n  if (!boolFlag2) {\n    boolFlag2 = shiftRightAmount2 == -1;\n  }\n  shiftRightAmount1 = (int)input4 >> 0x15;\n  if (!boolFlag2) {\n    boolFlag2 = shiftRightAmount1 == -1;\n  }\n  if (boolFlag2) {\n    if (shiftRightAmount2 == -1 || shiftRightAmount1 == -1) {\n      temp6 = temp4;\n      temp8 = input3;\n      if (shiftRightAmount2 == -1) {\n        temp6 = input2;\n        temp8 = input1;\n      }\n      if (shiftRightAmount2 != -1 || shiftRightAmount1 != -1) {\n        input3 = temp8;\n        temp4 = temp6;\n      }\n      boolFlag2 = (temp8 | temp6 << 0xc) == 0;\n      if (boolFlag2) {\n        boolFlag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (boolFlag2) {\n        boolFlag2 = temp6 == temp4;\n      }\n      if (!boolFlag2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp8);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp6 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (temp6 >> 0x15 == 0) {\n      boolFlag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)boolFlag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)boolFlag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (temp6 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp6 = temp6 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp8 = input4 - temp6;\n  boolFlag2 = temp8 != 0;\n  if (input4 < temp6) {\n    temp8 = -temp8;\n  }\n  temp7 = input1;\n  temp5 = input2;\n  if (boolFlag2 && temp6 <= input4) {\n    temp6 = temp6 + temp8;\n    temp7 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp8) {\n    return CONCAT44(temp5,temp7);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    boolFlag2 = temp7 != 0;\n    temp7 = -temp7;\n    temp2 = -temp2 - (uint)boolFlag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    boolFlag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)boolFlag2;\n  }\n  if (temp6 == temp8) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp6 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp6 = 1;\n    }\n    else {\n      temp8 = temp8 - 1;\n    }\n  }\n  temp4 = -temp8 + 0x20;\n  if ((int)temp8 < 0x21) {\n    temp9 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp8 & 0xff);\n    temp1 = temp7 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp7,input3) + ((int)temp5 >> (temp8 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp9 = temp5 << (-temp8 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp9 = temp9 | 2;\n    }\n    temp5 = (int)temp5 >> (temp8 - 0x20 & 0xff);\n    temp4 = temp7 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp7,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp8 = temp2;\n  if ((int)temp2 < 0) {\n    boolFlag2 = temp9 == 0;\n    temp9 = -temp9;\n    temp8 = -temp4;\n    temp4 = -(uint)!boolFlag2 - temp4;\n    temp8 = -(uint)(boolFlag2 <= temp8) - temp2;\n  }\n  if (0xfffff < temp8) {\n    temp7 = temp6 - 1;\n    if (0x1fffff < temp8) {\n      temp7 = temp8 & 1;\n      temp8 = temp8 >> 1;\n      carryFlag1 = (byte)temp4;\n      temp4 = (uint)(temp7 != 0) << 0x1f | temp4 >> 1;\n      temp9 = (uint)(carryFlag1 & 1) << 0x1f | temp9 >> 1;\n      temp7 = temp6;\n      if (0xffbfffff < temp6 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    boolFlag2 = 0x7fffffff < temp9;\n    if (temp9 == 0x80000000) {\n      boolFlag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp8 + temp7 * 0x100000 + (uint)CARRY4(temp4,(uint)boolFlag2) | input2,\n                    temp4 + boolFlag2);\n  }\n  boolFlag1 = (temp9 & 0x80000000) != 0;\n  temp9 = temp9 << 1;\n  temp7 = temp4 * 2;\n  boolFlag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)boolFlag1;\n  temp8 = temp8 * 2 + (uint)(boolFlag2 || CARRY4(temp7,(uint)boolFlag1));\n  temp7 = temp6 - 2;\n  if (temp6 - 1 != 0 && 0xfffff < temp8) goto LAB_080083e0;\n  temp5 = temp4;\n  temp6 = temp8;\n  if (temp8 == 0) {\n    temp5 = 0;\n    temp6 = temp4;\n  }\n  shiftRightAmount2 = LZCOUNT(temp6);\n  if (temp8 == 0) {\n    shiftRightAmount2 = shiftRightAmount2 + 0x20;\n  }\n  temp8 = shiftRightAmount2 - 0xb;\n  boolFlag3 = SBORROW4(temp8,0x20);\n  temp4 = shiftRightAmount2 - 0x2b;\n  boolFlag2 = (int)temp4 < 0;\n  boolFlag1 = temp4 == 0;\n  if ((int)temp8 < 0x20) {\n    boolFlag3 = SCARRY4(temp4,0xc);\n    shiftRightAmount2 = shiftRightAmount2 + -0x1f;\n    boolFlag2 = shiftRightAmount2 < 0;\n    boolFlag1 = shiftRightAmount2 == 0;\n    temp4 = temp8;\n    if (!boolFlag1 && boolFlag2 == boolFlag3) {\n      temp5 = temp6 << (temp8 & 0xff);\n      temp6 = temp6 >> (0xcU - shiftRightAmount2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (boolFlag1 || boolFlag2 != boolFlag3) {\n    temp9 = 0x20 - temp4;\n  }\n  temp6 = temp6 << (temp4 & 0xff);\n  if (boolFlag1 || boolFlag2 != boolFlag3) {\n    temp6 = temp6 | temp5 >> (temp9 & 0xff);\n  }\n  if (boolFlag1 || boolFlag2 != boolFlag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp8 <= (int)temp7) {\n    return CONCAT44(temp6 + (temp7 - temp8) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp7 - temp8);\n  if ((int)temp4 < 0x1f) {\n    shiftRightAmount2 = temp4 - 0x13;\n    if (shiftRightAmount2 != 0 && shiftRightAmount2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shiftRightAmount2) & 0xff) | temp6 << (0xcU - shiftRightAmount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | temp6 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | temp6 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,temp6 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "perform_arithmetic_operation_080082d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftRightAmount1",
                "bVar2": "carryFlag1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shiftRightAmount2",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "boolFlag1",
                "bVar14": "boolFlag2",
                "bVar15": "boolFlag3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "optimized_function_080082d4",
            "code": "\nulonglong optimizedFunction_080082d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp7 = input2 << 1;\n  temp9 = input4 << 1;\n  flag1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp7 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (temp9 | input3) == 0;\n  }\n  temp6 = (int)temp7 >> 0x15;\n  if (!flag2) {\n    flag2 = temp6 == -1;\n  }\n  temp1 = (int)temp9 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp6 == -1 || temp1 == -1) {\n      temp9 = input4;\n      temp7 = input3;\n      if (temp6 == -1) {\n        temp9 = input2;\n        temp7 = input1;\n      }\n      if (temp6 != -1 || temp1 != -1) {\n        input3 = temp7;\n        input4 = temp9;\n      }\n      flag2 = (temp7 | temp9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp9 == input4;\n      }\n      if (!flag2) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp7);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp7 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (temp7 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp9 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp9 = temp9 | 0x80000000;\n      }\n      return CONCAT44(temp9,input1 << 1);\n    }\n    if (temp7 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp7 = temp7 >> 0x15;\n  temp9 = temp9 >> 0x15;\n  temp10 = temp9 - temp7;\n  flag2 = temp10 != 0;\n  if (temp9 < temp7) {\n    temp10 = -temp10;\n  }\n  temp8 = input1;\n  temp5 = input2;\n  if (flag2 && temp7 <= temp9) {\n    temp7 = temp7 + temp10;\n    temp8 = input3;\n    temp5 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < temp10) {\n    return CONCAT44(temp5,temp8);\n  }\n  temp9 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = temp8 != 0;\n    temp8 = -temp8;\n    temp9 = -temp9 - (uint)flag2;\n  }\n  temp5 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (temp7 == temp10) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp7 == 0) {\n      temp9 = temp9 ^ 0x100000;\n      temp7 = 1;\n    }\n    else {\n      temp10 = temp10 - 1;\n    }\n  }\n  temp12 = -temp10 + 0x20;\n  if ((int)temp10 < 0x21) {\n    temp11 = input3 << (temp12 & 0xff);\n    input3 = input3 >> (temp10 & 0xff);\n    temp3 = temp8 + input3;\n    temp4 = temp5 << (temp12 & 0xff);\n    temp12 = temp3 + temp4;\n    temp9 = temp9 + CARRY4(temp8,input3) + ((int)temp5 >> (temp10 & 0xff)) +\n            (uint)CARRY4(temp3,temp4);\n  }\n  else {\n    temp11 = temp5 << (-temp10 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp11 = temp11 | 2;\n    }\n    temp5 = (int)temp5 >> (temp10 - 0x20 & 0xff);\n    temp12 = temp8 + temp5;\n    temp9 = temp9 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp8,temp5);\n  }\n  input2 = temp9 & 0x80000000;\n  temp10 = temp9;\n  if ((int)temp9 < 0) {\n    flag2 = temp11 == 0;\n    temp11 = -temp11;\n    temp10 = -temp12;\n    temp12 = -(uint)!flag2 - temp12;\n    temp10 = -(uint)(flag2 <= temp10) - temp9;\n  }\n  if (0xfffff < temp10) {\n    temp8 = temp7 - 1;\n    if (0x1fffff < temp10) {\n      temp9 = temp10 & 1;\n      temp10 = temp10 >> 1;\n      temp2 = (byte)temp12;\n      temp12 = (uint)(temp9 != 0) << 0x1f | temp12 >> 1;\n      temp11 = (uint)(temp2 & 1) << 0x1f | temp11 >> 1;\n      temp8 = temp7;\n      if (0xffbfffff < temp7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < temp11;\n    if (temp11 == 0x80000000) {\n      flag2 = (temp12 & 1) != 0;\n    }\n    return CONCAT44(temp10 + temp8 * 0x100000 + (uint)CARRY4(temp12,(uint)flag2) | input2,\n                    temp12 + flag2);\n  }\n  flag1 = (temp11 & 0x80000000) != 0;\n  temp11 = temp11 << 1;\n  temp8 = temp12 * 2;\n  flag2 = CARRY4(temp12,temp12);\n  temp12 = temp12 * 2 + (uint)flag1;\n  temp10 = temp10 * 2 + (uint)(flag2 || CARRY4(temp8,(uint)flag1));\n  temp8 = temp7 - 2;\n  if (temp7 - 1 != 0 && 0xfffff < temp10) goto LAB_080083e0;\n  temp5 = temp12;\n  temp7 = temp10;\n  if (temp10 == 0) {\n    temp5 = 0;\n    temp7 = temp12;\n  }\n  temp6 = LZCOUNT(temp7);\n  if (temp10 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp12 = temp6 - 0xb;\n  flag3 = SBORROW4(temp12,0x20);\n  temp10 = temp6 - 0x2b;\n  flag2 = (int)temp10 < 0;\n  flag1 = temp10 == 0;\n  if ((int)temp12 < 0x20) {\n    flag3 = SCARRY4(temp10,0xc);\n    temp6 = temp6 + -0x1f;\n    flag2 = temp6 < 0;\n    flag1 = temp6 == 0;\n    temp10 = temp12;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = temp7 << (temp12 & 0xff);\n      temp7 = temp7 >> (0xcU - temp6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp11 = 0x20 - temp10;\n  }\n  temp7 = temp7 << (temp10 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 | temp5 >> (temp11 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp12 <= (int)temp8) {\n    return CONCAT44(temp7 + (temp8 - temp12) * 0x100000 | input2,temp5);\n  }\n  temp10 = ~(temp8 - temp12);\n  if ((int)temp10 < 0x1f) {\n    temp6 = temp10 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp10 - 0x1f,0xc)) {\n      return CONCAT44(temp9,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | temp7 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp10 = temp10 + 1;\n    return CONCAT44(input2 | temp7 >> (temp10 & 0xff),\n                    temp5 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff));\n  }\n  return CONCAT44(temp9,temp7 >> (temp10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "optimized_function_080082d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "reverse_bits_0800854c",
            "code": "\nulonglong reverse_bits_0800854c(uint input)\n\n{\n  uint result_lower;\n  uint shift_amount;\n  int bit_count;\n  uint adjusted_bit_count;\n  uint remainder;\n  bool is_negative;\n  bool is_zero;\n  bool is_borrowed;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result_lower = 0;\n  bit_count = LZCOUNT(input);\n  adjusted_bit_count = bit_count + 0x15;\n  is_borrowed = SBORROW4(adjusted_bit_count,0x20);\n  shift_amount = bit_count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (adjusted_bit_count < 0x20) {\n    is_borrowed = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    shift_amount = adjusted_bit_count;\n    if (!is_zero && is_borrowed == false) {\n      result_lower = input << adjusted_bit_count;\n      input = input >> (0xcU - (bit_count + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_borrowed) {\n    remainder = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_borrowed) {\n    input = input | 0U >> (remainder & 0xff);\n  }\n  if (is_zero || is_negative != is_borrowed) {\n    result_lower = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (adjusted_bit_count < 0x433) {\n    return CONCAT44(input + (0x432 - adjusted_bit_count) * 0x100000,result_lower);\n  }\n  shift_amount = ~(0x432 - adjusted_bit_count);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  bit_count = shift_amount - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    result_lower >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result_lower >> (0x20 - (0xcU - bit_count) & 0xff) | input << (0xcU - bit_count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "reverse_bits_0800854c",
                "param_1": "input",
                "uVar1": "result_lower",
                "uVar2": "shift_amount",
                "iVar3": "bit_count",
                "uVar4": "adjusted_bit_count",
                "in_r12": "remainder",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_borrowed"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_shift_and_concat_0800856c",
            "code": "\nulonglong bitwiseShiftAndConcat_0800856c(uint input_number)\n\n{\n  uint shift_count;\n  uint abs_input_number;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_shift_count;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry;\n  \n  if (input_number == 0) {\n    return 0;\n  }\n  sign_bit = input_number & 0x80000000;\n  abs_input_number = input_number;\n  if ((int)sign_bit < 0) {\n    abs_input_number = -input_number;\n  }\n  shift_count = 0;\n  leading_zeros = LZCOUNT(abs_input_number);\n  total_shift_count = leading_zeros + 0x15;\n  carry = SBORROW4(total_shift_count,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_shift_count < 0x20) {\n    carry = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_shift_count;\n    if (!is_zero && carry == false) {\n      shift_count = abs_input_number << total_shift_count;\n      abs_input_number = abs_input_number >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input_number = abs_input_number << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry) {\n    abs_input_number = abs_input_number | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry) {\n    shift_count = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (total_shift_count < 0x433) {\n    return CONCAT44(abs_input_number + (0x432 - total_shift_count) * 0x100000 | sign_bit,shift_count);\n  }\n  shift_amount = ~(0x432 - total_shift_count);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_number,abs_input_number >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input_number >> (shift_amount & 0xff),\n                    shift_count >> (shift_amount & 0xff) | abs_input_number << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_number,shift_count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input_number << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_shift_and_concat_0800856c",
                "param_1": "input_number",
                "uVar1": "shift_count",
                "uVar2": "abs_input_number",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "total_shift_count",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "reverse_bits_08008590",
            "code": "\nulonglong reverseBits_08008590(uint input,undefined4 unused1,undefined4 unused2,uint unused3)\n\n{\n  uint bit31;\n  uint result1;\n  uint result2;\n  uint shiftAmount;\n  uint temp;\n  int count;\n  uint shiftedBits;\n  uint remainingBits;\n  bool isLessThanZero;\n  bool isZero;\n  bool isOverflow;\n  \n  temp = input << 1;\n  isZero = temp == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)temp >> 3) >> 1;\n  result2 = bit31 | shiftAmount;\n  input = input << 0x1d;\n  if (!isZero) {\n    unused3 = temp & 0xff000000;\n    isZero = unused3 == 0;\n  }\n  if (!isZero) {\n    isZero = unused3 == 0xff000000;\n  }\n  if (!isZero) {\n    return mergeResult(result2,input) ^ 0x3800000000000000;\n  }\n  if ((temp & 0xffffff) == 0) {\n    return mergeResult(result2,input);\n  }\n  if (unused3 == 0xff000000) {\n    return mergeResult(result2,input) | 0x8000000000000;\n  }\n  result1 = input;\n  temp = shiftAmount;\n  if (shiftAmount == 0) {\n    result1 = 0;\n    temp = input;\n  }\n  count = leadingZeroBits(temp);\n  if (shiftAmount == 0) {\n    count = count + 0x20;\n  }\n  shiftedBits = count - 0xb;\n  isOverflow = isSubtractionOverflow(shiftedBits,0x20);\n  shiftAmount = count - 0x2b;\n  isZero = (int)shiftAmount < 0;\n  isLessThanZero = shiftAmount == 0;\n  if ((int)shiftedBits < 0x20) {\n    isOverflow = isAdditionOverflow(shiftAmount,0xc);\n    count = count + -0x1f;\n    isZero = count < 0;\n    isLessThanZero = count == 0;\n    shiftAmount = shiftedBits;\n    if (!isLessThanZero && isZero == isOverflow) {\n      result1 = temp << (shiftedBits & 0xff);\n      temp = temp >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isLessThanZero || isZero != isOverflow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  temp = temp << (shiftAmount & 0xff);\n  if (isLessThanZero || isZero != isOverflow) {\n    temp = temp | result1 >> (remainingBits & 0xff);\n  }\n  if (isLessThanZero || isZero != isOverflow) {\n    result1 = result1 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftedBits < 0x381) {\n    return mergeResult(temp + (0x380 - shiftedBits) * 0x100000 | bit31,result1);\n  }\n  shiftAmount = ~(0x380 - shiftedBits);\n  if (0x1e < (int)shiftAmount) {\n    return mergeResult(result2,temp >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shiftAmount - 0x13;\n  if (count == 0 || count < 0 != isAdditionOverflow(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return mergeResult(bit31 | temp >> (shiftAmount & 0xff),\n                    result1 >> (shiftAmount & 0xff) | temp << (0x20 - shiftAmount & 0xff));\n  }\n  return mergeResult(result2,result1 >> (0x20 - (0xcU - count) & 0xff) | temp << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "param_1": "input",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "uVar1": "bit31",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "shiftAmount",
                "uVar5": "temp",
                "iVar6": "count",
                "uVar7": "shiftedBits",
                "in_r12": "remainingBits",
                "bVar8": "isLessThanZero",
                "bVar9": "isZero",
                "bVar10": "isOverflow",
                "LZCOUNT": "leadingZeroBits",
                "CONCAT44": "mergeResult",
                "SBORROW4": "isSubtractionOverflow",
                "SCARRY4": "isAdditionOverflow"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_improved_result_08008640",
            "code": "\nulonglong calculateImprovedResult_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint result3;\n  uint result4;\n  int result5;\n  uint result6;\n  uint result7;\n  uint result8;\n  uint result9;\n  bool isZero1;\n  bool comparison1;\n  bool comparison2;\n  ulonglong combinedInput;\n  \n  combinedInput = CONCAT44(input2,input1);\n  result8 = 0x7ff;\n  result4 = input2 >> 0x14 & 0x7ff;\n  isZero1 = result4 == 0;\n  if (!isZero1) {\n    result7 = input4 >> 0x14 & 0x7ff;\n    isZero1 = result7 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = result4 == 0x7ff;\n  }\n  if (!isZero1) {\n    isZero1 = result7 == 0x7ff;\n  }\n  if (isZero1) {\n    combinedInput = calculate_bitwise_xor_0800881c();\n  }\n  result3 = (uint)(combinedInput >> 0x20);\n  result5 = result4 + result7;\n  result4 = result3 ^ input4;\n  result3 = result3 & ~(result8 << 0x15);\n  input4 = input4 & ~(result8 << 0x15);\n  isZero1 = ((uint)combinedInput | result3 << 0xc) == 0;\n  if (!isZero1) {\n    isZero1 = (input3 | input4 << 0xc) == 0;\n  }\n  result3 = result3 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (isZero1) {\n    input3 = (uint)combinedInput | input3;\n    input4 = (result4 & 0x80000000 | result3) ^ input4;\n    result4 = result8 >> 1;\n    comparison2 = SBORROW4(result5,result4);\n    result6 = result5 - result4;\n    isZero1 = result6 == 0;\n    result3 = result6;\n    if (!isZero1 && (int)result4 <= result5) {\n      comparison2 = SBORROW4(result8,result6);\n      result3 = result8 - result6;\n      isZero1 = result8 == result6;\n    }\n    if (!isZero1 && (int)result3 < 0 == comparison2) {\n      input4 = input4 | result6 * 0x100000;\n    }\n    if (!isZero1 && (int)result3 < 0 == comparison2) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    result8 = 0;\n    comparison2 = SBORROW4(result6,1);\n    result6 = result6 - 1;\n    isZero1 = result6 == 0;\n    result4 = result6;\n  }\n  else {\n    result1 = (combinedInput & 0xffffffff) * (ulonglong)input3;\n    combinedInput = (combinedInput & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)result3 * (ulonglong)input3 + (result1 >> 0x20);\n    result9 = (uint)combinedInput;\n    result2 = (ulonglong)result3 * (ulonglong)input4 + (combinedInput >> 0x20);\n    result8 = (uint)result2;\n    result3 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      result9 = result9 | 1;\n    }\n    result6 = (result5 + -0x3ff) - (uint)(result3 < 0x200);\n    if (result3 < 0x200) {\n      isZero1 = (result9 & 0x80000000) != 0;\n      result9 = result9 << 1;\n      result2 = CONCAT44(result3 * 2 + (uint)(CARRY4(result8,result8) || CARRY4(result8 * 2,(uint)isZero1)),\n                       result8 * 2 + (uint)isZero1);\n    }\n    input4 = result4 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | result9 >> 0x15;\n    result8 = result9 * 0x800;\n    comparison1 = 0xfc < result6;\n    comparison2 = SBORROW4(result6,0xfd);\n    result3 = result6 - 0xfd;\n    isZero1 = result3 == 0;\n    result4 = result3;\n    if (comparison1 && !isZero1) {\n      comparison1 = 0x6ff < result3;\n      comparison2 = SBORROW4(result3,0x700);\n      result4 = result6 - 0x7fd;\n      isZero1 = result3 == 0x700;\n    }\n    if (!comparison1 || isZero1) {\n      isZero1 = 0x7fffffff < result8;\n      if (result8 == 0x80000000) {\n        isZero1 = (result9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + result6 * 0x100000 + (uint)CARRY4(input3,(uint)isZero1),input3 + isZero1\n                     );\n    }\n  }\n  if (!isZero1 && (int)result4 < 0 == comparison2) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  comparison1 = SCARRY4(result6,0x36);\n  isZero1 = (int)(result6 + 0x36) < 0;\n  comparison2 = result6 == 0xffffffca;\n  if (comparison2 || isZero1 != comparison1) {\n    input3 = 0;\n  }\n  if (comparison2 || isZero1 != comparison1) {\n    input4 = input4 & 0x80000000;\n  }\n  if (comparison2 || isZero1 != comparison1) {\n    return CONCAT44(input4,input3);\n  }\n  result4 = -result6;\n  result3 = result4 - 0x20;\n  if (0x1f < (int)result4) {\n    result6 = input3 >> (result3 & 0xff) | input4 << (0x20 - result3 & 0xff);\n    result4 = (input4 >> (result3 & 0xff) & ~((input4 & 0x80000000) >> (result3 & 0xff))) -\n            ((int)result6 >> 0x1f);\n    if ((result8 | input3 << (0x20 - result3 & 0xff) | result6 << 1) == 0) {\n      result4 = result4 & ~(result6 >> 0x1f);\n    }\n    return CONCAT44(input4,result4) & 0x80000000ffffffff;\n  }\n  result5 = result4 - 0x14;\n  if (result5 == 0 || result5 < 0 != SCARRY4(result3,0xc)) {\n    result9 = input3 << (result6 + 0x20 & 0xff);\n    result3 = input3 >> (result4 & 0xff) | input4 << (result6 + 0x20 & 0xff);\n    result6 = result3 + -((int)result9 >> 0x1f);\n    if ((result8 | result9 << 1) == 0) {\n      result6 = result6 & ~(result9 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (result4 & 0xff)) +\n                    (uint)CARRY4(result3,-((int)result9 >> 0x1f)),result6);\n  }\n  result4 = 0xc - result5;\n  result6 = input3 << (result4 & 0xff);\n  result4 = input3 >> (0x20 - result4 & 0xff) | input4 << (result4 & 0xff);\n  result3 = result4 + -((int)result6 >> 0x1f);\n  if ((result8 | result6 << 1) == 0) {\n    result3 = result3 & ~(result6 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(result4,-((int)result6 >> 0x1f)),result3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_improved_result_08008640",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "result5",
                "uVar6": "result6",
                "unaff_r5": "result7",
                "uVar7": "result8",
                "uVar8": "result9",
                "bVar9": "isZero1",
                "bVar10": "comparison1",
                "bVar11": "comparison2",
                "uVar12": "combinedInput"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_xor_0800881c",
            "code": "\nulonglong calculate_bitwise_xor_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_2;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_2 = bit_5 & input_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_2 != bit_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_2 != bit_5 || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_xor_0800881c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_2",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_float_08008894",
            "code": "\nulonglong calculateFloat_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint bitCheck;\n  uint bitCheck2;\n  uint bitCheck3;\n  uint bitCheck4;\n  uint bitCheck5;\n  uint bitCheck6;\n  uint bitCheck7;\n  int difference;\n  uint carry;\n  uint bitCheck8;\n  uint bitCheck9;\n  uint bitCheck10;\n  uint bitCheck11;\n  uint overflow;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  undefined8 floatValue;\n  \n  floatValue = CONCAT44(input2,input1);\n  overflow = 0x7ff;\n  bitCheck7 = input2 >> 0x14 & 0x7ff;\n  condition1 = bitCheck7 == 0;\n  if (!condition1) {\n    bitCheck8 = input4 >> 0x14 & 0x7ff;\n    condition1 = bitCheck8 == 0;\n  }\n  if (!condition1) {\n    condition1 = bitCheck7 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = bitCheck8 == 0x7ff;\n  }\n  if (condition1) {\n    floatValue = binary_to_float_08008a02();\n  }\n  carry = (uint)((ulonglong)floatValue >> 0x20);\n  bitCheck10 = (uint)floatValue;\n  difference = bitCheck7 - bitCheck8;\n  if ((input3 | input4 << 0xc) == 0) {\n    bitCheck7 = (carry ^ input4) & 0x80000000 | carry & 0xfffff;\n    condition3 = SCARRY4(difference,overflow >> 1);\n    carry = difference + (overflow >> 1);\n    condition1 = (int)carry < 0;\n    condition2 = carry == 0;\n    if (!condition2 && condition1 == condition3) {\n      condition3 = SBORROW4(overflow,carry);\n      condition1 = (int)(overflow - carry) < 0;\n      condition2 = overflow == carry;\n    }\n    if (!condition2 && condition1 == condition3) {\n      bitCheck7 = bitCheck7 | carry * 0x100000;\n    }\n    if (!condition2 && condition1 == condition3) {\n      return CONCAT44(bitCheck7,bitCheck10);\n    }\n    bitCheck7 = bitCheck7 | 0x100000;\n    overflow = 0;\n    condition2 = SBORROW4(carry,1);\n    carry = carry - 1;\n    condition1 = carry == 0;\n    bitCheck3 = carry;\n  }\n  else {\n    bitCheck3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    overflow = input3 << 8;\n    bitCheck9 = (carry << 0xc) >> 4 | 0x10000000 | bitCheck10 >> 0x18;\n    bitCheck10 = bitCheck10 * 0x100;\n    bitCheck7 = (carry ^ input4) & 0x80000000;\n    condition1 = bitCheck3 <= bitCheck9;\n    if (bitCheck9 == bitCheck3) {\n      condition1 = overflow <= bitCheck10;\n    }\n    difference = difference + (uint)condition1;\n    carry = difference + 0x3fd;\n    if (condition1 == false) {\n      bitCheck3 = bitCheck3 >> 1;\n      overflow = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | overflow >> 1;\n    }\n    bitCheck11 = bitCheck10 - overflow;\n    bitCheck9 = (bitCheck9 - bitCheck3) - (uint)(bitCheck10 < overflow);\n    bitCheck4 = bitCheck3 >> 1;\n    bitCheck = (uint)((bitCheck3 & 1) != 0) << 0x1f | overflow >> 1;\n    bitCheck10 = 0x100000;\n    bitCheck3 = 0x80000;\n    while( true ) {\n      condition1 = bitCheck <= bitCheck11;\n      if (bitCheck4 < bitCheck9 || bitCheck9 - bitCheck4 < (uint)condition1) {\n        bitCheck11 = bitCheck11 - bitCheck;\n        bitCheck10 = bitCheck10 | bitCheck3;\n        bitCheck9 = (bitCheck9 - bitCheck4) - (uint)!condition1;\n      }\n      bitCheck5 = bitCheck4 >> 1;\n      bitCheck = (uint)((bitCheck4 & 1) != 0) << 0x1f | bitCheck >> 1;\n      condition2 = bitCheck <= bitCheck11;\n      condition1 = bitCheck9 - bitCheck5 < (uint)condition2;\n      overflow = bitCheck9;\n      if (bitCheck5 < bitCheck9 || condition1) {\n        bitCheck11 = bitCheck11 - bitCheck;\n        overflow = (bitCheck9 - bitCheck5) - (uint)!condition2;\n      }\n      if (bitCheck5 < bitCheck9 || condition1) {\n        bitCheck10 = bitCheck10 | bitCheck3 >> 1;\n      }\n      bitCheck9 = bitCheck4 >> 2;\n      bitCheck2 = (uint)((bitCheck5 & 1) != 0) << 0x1f | bitCheck >> 1;\n      condition2 = bitCheck2 <= bitCheck11;\n      condition1 = overflow - bitCheck9 < (uint)condition2;\n      bitCheck5 = overflow;\n      if (bitCheck9 < overflow || condition1) {\n        bitCheck11 = bitCheck11 - bitCheck2;\n        bitCheck5 = (overflow - bitCheck9) - (uint)!condition2;\n      }\n      if (bitCheck9 < overflow || condition1) {\n        bitCheck10 = bitCheck10 | bitCheck3 >> 2;\n      }\n      bitCheck6 = bitCheck4 >> 3;\n      bitCheck = (uint)((bitCheck9 & 1) != 0) << 0x1f | bitCheck2 >> 1;\n      condition2 = bitCheck <= bitCheck11;\n      condition1 = bitCheck5 - bitCheck6 < (uint)condition2;\n      bitCheck9 = bitCheck5;\n      if (bitCheck6 < bitCheck5 || condition1) {\n        bitCheck11 = bitCheck11 - bitCheck;\n        bitCheck9 = (bitCheck5 - bitCheck6) - (uint)!condition2;\n      }\n      if (bitCheck6 < bitCheck5 || condition1) {\n        bitCheck10 = bitCheck10 | bitCheck3 >> 3;\n      }\n      overflow = bitCheck9 | bitCheck11;\n      if (overflow == 0) break;\n      bitCheck9 = bitCheck9 << 4 | bitCheck11 >> 0x1c;\n      bitCheck11 = bitCheck11 << 4;\n      bitCheck4 = bitCheck4 & 0xfffffff8 | bitCheck >> 0x1d;\n      bitCheck = (bitCheck2 >> 1) << 3;\n      bitCheck3 = bitCheck3 >> 4;\n      if (bitCheck3 == 0) {\n        bitCheck6 = bitCheck4;\n        if ((bitCheck7 & 0x100000) != 0) goto LAB_080089b2;\n        bitCheck7 = bitCheck7 | bitCheck10;\n        bitCheck10 = 0;\n        bitCheck3 = 0x80000000;\n      }\n    }\n    if ((bitCheck7 & 0x100000) == 0) {\n      bitCheck7 = bitCheck7 | bitCheck10;\n      bitCheck10 = 0;\n    }\nLAB_080089b2:\n    condition3 = 0xfc < carry;\n    condition2 = SBORROW4(carry,0xfd);\n    bitCheck4 = difference + 0x300;\n    condition1 = bitCheck4 == 0;\n    bitCheck3 = bitCheck4;\n    if (condition3 && !condition1) {\n      condition3 = 0x6ff < bitCheck4;\n      condition2 = SBORROW4(bitCheck4,0x700);\n      bitCheck3 = difference - 0x400;\n      condition1 = bitCheck4 == 0x700;\n    }\n    if (!condition3 || condition1) {\n      condition1 = bitCheck6 <= bitCheck9;\n      if (bitCheck9 == bitCheck6) {\n        condition1 = bitCheck <= bitCheck11;\n      }\n      if (bitCheck9 == bitCheck6 && bitCheck11 == bitCheck) {\n        condition1 = (bitCheck10 & 1) != 0;\n      }\n      return CONCAT44(bitCheck7 + carry * 0x100000 + (uint)CARRY4(bitCheck10,(uint)condition1),bitCheck10 + condition1);\n    }\n  }\n  if (!condition1 && (int)bitCheck3 < 0 == condition2) {\n    return (ulonglong)(bitCheck7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition3 = SCARRY4(carry,0x36);\n  condition1 = (int)(carry + 0x36) < 0;\n  condition2 = carry == 0xffffffca;\n  if (condition2 || condition1 != condition3) {\n    bitCheck10 = 0;\n  }\n  if (condition2 || condition1 != condition3) {\n    bitCheck7 = bitCheck7 & 0x80000000;\n  }\n  if (condition2 || condition1 != condition3) {\n    return CONCAT44(bitCheck7,bitCheck10);\n  }\n  bitCheck3 = -carry;\n  bitCheck9 = bitCheck3 - 0x20;\n  if (0x1f < (int)bitCheck3) {\n    bitCheck3 = bitCheck10 >> (bitCheck9 & 0xff) | bitCheck7 << (0x20 - bitCheck9 & 0xff);\n    carry = (bitCheck7 >> (bitCheck9 & 0xff) & ~((bitCheck7 & 0x80000000) >> (bitCheck9 & 0xff))) -\n            ((int)bitCheck3 >> 0x1f);\n    if ((overflow | bitCheck10 << (0x20 - bitCheck9 & 0xff) | bitCheck3 << 1) == 0) {\n      carry = carry & ~(bitCheck3 >> 0x1f);\n    }\n    return CONCAT44(bitCheck7,carry) & 0x80000000ffffffff;\n  }\n  difference = bitCheck3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(bitCheck9,0xc)) {\n    carry = 0xc - difference;\n    bitCheck3 = bitCheck10 << (carry & 0xff);\n    bitCheck10 = bitCheck10 >> (0x20 - carry & 0xff) | bitCheck7 << (carry & 0xff);\n    carry = bitCheck10 + -((int)bitCheck3 >> 0x1f);\n    if ((overflow | bitCheck3 << 1) == 0) {\n      carry = carry & ~(bitCheck3 >> 0x1f);\n    }\n    return CONCAT44((bitCheck7 & 0x80000000) + (uint)CARRY4(bitCheck10,-((int)bitCheck3 >> 0x1f)),carry);\n  }\n  bitCheck9 = bitCheck10 << (carry + 0x20 & 0xff);\n  bitCheck10 = bitCheck10 >> (bitCheck3 & 0xff) | bitCheck7 << (carry + 0x20 & 0xff);\n  carry = bitCheck10 + -((int)bitCheck9 >> 0x1f);\n  if ((overflow | bitCheck9 << 1) == 0) {\n    carry = carry & ~(bitCheck9 >> 0x1f);\n  }\n  return CONCAT44((bitCheck7 & 0x80000000) +\n                  ((bitCheck7 & 0x7fffffff) >> (bitCheck3 & 0xff)) +\n                  (uint)CARRY4(bitCheck10,-((int)bitCheck9 >> 0x1f)),carry);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_float_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bitCheck",
                "uVar2": "bitCheck2",
                "uVar3": "bitCheck3",
                "uVar4": "bitCheck4",
                "uVar5": "bitCheck5",
                "uVar6": "bitCheck6",
                "uVar7": "bitCheck7",
                "iVar8": "difference",
                "uVar9": "carry",
                "unaff_r5": "bitCheck8",
                "uVar10": "bitCheck9",
                "uVar11": "bitCheck10",
                "uVar12": "bitCheck11",
                "uVar13": "overflow",
                "bVar14": "condition1",
                "bVar15": "condition2",
                "bVar16": "condition3",
                "uVar17": "floatValue"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "binary_to_float_08008a02",
            "code": "\nulonglong binary_to_float_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "binary_to_float_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_params_and_return_08008a74",
            "code": "\nuint check_params_and_return_08008a74(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint xor_result;\n  bool are_values_zero;\n  bool is_inverted;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  are_values_zero = (value_1 | value_2 << 1) == 0;\n  if (are_values_zero) {\n    are_values_zero = (value_3 | value_4 << 1) == 0;\n  }\n  if (!are_values_zero) {\n    are_values_zero = value_2 == value_4;\n  }\n  if (are_values_zero) {\n    are_values_zero = value_1 == value_3;\n  }\n  if (!are_values_zero) {\n    xor_result = value_2 ^ value_4;\n    are_values_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      are_values_zero = value_2 == value_4;\n    }\n    is_inverted = -1 < (int)xor_result && value_4 <= value_2;\n    if (are_values_zero) {\n      is_inverted = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!is_inverted) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_params_and_return_08008a74",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "xor_result",
                "bVar2": "are_values_zero",
                "bVar3": "is_inverted"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_and_return_08008af0",
            "code": "\nvoid validate_and_return_08008af0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  validate_and_return_08008af0_08008b00(arg3,arg4,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_and_return_08008af0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "validate_and_return_08008b00",
            "code": "\nundefined4 validate_and_return_08008b00(undefined4 input_param)\n\n{\n  validate_input();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "validate_and_return_08008b00",
                "param_1": "input_param",
                "check_params_and_return_08008a74": "validate_input"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "validate_and_return_08008b10",
            "code": "\nbool validate_and_return_08008b10(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08008b10_08008b00();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "validate_and_return_08008b10",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_null_terminated_08008b24",
            "code": "\nbool is_null_terminated_08008b24(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_null_terminated_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_for_zero_flags_08008b4c",
            "code": "\nbool check_for_zero_flags_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_and_return_08008af0();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_for_zero_flags_08008b4c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_if_string_is_empty_08008b60",
            "code": "\nbool check_if_string_is_empty_08008b60(void)\n\n{\n  char input_character;\n  \n  validate_and_return_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_if_string_is_empty_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_conditions_08008b74",
            "code": "\nundefined4 check_conditions_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_conditions_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_shifted_value_08008ba0",
            "code": "\nuint calculate_shifted_value_08008ba0(uint input1,uint input2)\n\n{\n  uint result;\n  int shifted_value;\n  uint shift_amount;\n  \n  shifted_value = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    result = shifted_value >> 0x15;\n    shift_amount = -result - 0x3e1;\n    if (result < 0xfffffc20 && shift_amount != 0) {\n      result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_shifted_value_08008ba0",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "iVar2": "shifted_value",
                "uVar3": "shift_amount"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "validate_input_08008bf0",
            "code": "\nuint validate_input_08008bf0(uint value1,uint value2)\n\n{\n  int temp_result;\n  uint shift_amount;\n  \n  if ((value2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp_result = value2 * 2 + 0x200000;\n  if (value2 * 2 < 0xffe00000) {\n    if (-1 < temp_result) {\n      return 0;\n    }\n    shift_amount = -(temp_result >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (value2 << 0xb | 0x80000000 | value1 >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((value1 | value2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "validate_input_08008bf0",
                "param_1": "value1",
                "param_2": "value2",
                "iVar1": "temp_result",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_floating_point_value_08008c30",
            "code": "\nuint calculateFloatingPointValue_08008c30(uint inputValue,uint paramMultiplier)\n\n{\n  uint result;\n  uint multiplierDouble;\n  uint multiplierAdjusted;\n  uint adjustedValue;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  multiplierDouble = paramMultiplier * 2;\n  isLessThanThreshold = multiplierDouble < 0x70000000;\n  multiplierAdjusted = multiplierDouble + 0x90000000;\n  result = multiplierAdjusted;\n  if (!isLessThanThreshold) {\n    adjustedValue = multiplierDouble + 0x8fe00000;\n    result = adjustedValue;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && multiplierAdjusted >= 0x200000) {\n    isZero = adjustedValue == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || multiplierAdjusted < 0x200000) || 0x1fc00000 < adjustedValue) || isZero) {\n    if ((paramMultiplier & 0x40000000) != 0) {\n      if (((int)multiplierDouble >> 0x15 == -1) && ((inputValue | paramMultiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return paramMultiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multiplierDouble + 0x92e00000) < 0 != SCARRY4(multiplierAdjusted,0x2e00000)) {\n      return paramMultiplier & 0x80000000;\n    }\n    multiplierDouble = 0x18 - (multiplierDouble + 0x92e00000 >> 0x15);\n    result = inputValue >> (multiplierDouble & 0xff);\n    if (inputValue << (0x20 - multiplierDouble & 0xff) != 0) {\n      result = result | 1;\n    }\n    multiplierAdjusted = paramMultiplier & 0x1fffff | 0x100000;\n    inputValue = result | multiplierAdjusted << (0x20 - multiplierDouble & 0xff);\n    multiplierAdjusted = (multiplierAdjusted >> (multiplierDouble & 0xff)) << 1;\n  }\n  result = (paramMultiplier & 0x80000000 | inputValue >> 0x1d) + multiplierAdjusted * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_floating_point_value_08008c30",
                "param_1": "inputValue",
                "param_2": "paramMultiplier",
                "uVar1": "result",
                "uVar2": "multiplierDouble",
                "uVar3": "multiplierAdjusted",
                "in_r12": "adjustedValue",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_08008cd8",
            "code": "\nuint calculate_float_08008cd8(uint input_var1,uint input_var2,undefined4 input_var3,uint input_var4)\n\n{\n  int bit_shift;\n  int bit_shift2;\n  uint temp_var1;\n  uint temp_var2;\n  uint result_var1;\n  uint result_var2;\n  uint result_var3;\n  bool boolean_var;\n  \n  temp_var1 = input_var2 ^ 0x80000000;\n  result_var1 = input_var1 << 1;\n  boolean_var = result_var1 == 0;\n  if (!boolean_var) {\n    input_var4 = input_var2 << 1;\n    boolean_var = input_var4 == 0;\n  }\n  if (!boolean_var) {\n    boolean_var = result_var1 == input_var4;\n  }\n  bit_shift = (int)result_var1 >> 0x18;\n  if (!boolean_var) {\n    boolean_var = bit_shift == -1;\n  }\n  if (!boolean_var) {\n    boolean_var = (int)input_var4 >> 0x18 == -1;\n  }\n  if (boolean_var) {\n    bit_shift2 = (int)(input_var2 << 1) >> 0x18;\n    if (bit_shift == -1 || bit_shift2 == -1) {\n      result_var1 = temp_var1;\n      if (bit_shift == -1) {\n        result_var1 = input_var1;\n      }\n      if (bit_shift != -1 || bit_shift2 != -1) {\n        temp_var1 = result_var1;\n      }\n      boolean_var = (result_var1 & 0x7fffff) == 0;\n      if (boolean_var) {\n        boolean_var = (temp_var1 & 0x7fffff) == 0;\n      }\n      if (boolean_var) {\n        boolean_var = result_var1 == temp_var1;\n      }\n      if (!boolean_var) {\n        result_var1 = result_var1 | 0x400000;\n      }\n      return result_var1;\n    }\n    if (((input_var1 ^ temp_var1) & 0x7fffffff) != 0) {\n      if (result_var1 == 0) {\n        input_var1 = temp_var1;\n      }\n      return input_var1;\n    }\n    if (input_var1 != temp_var1) {\n      return 0;\n    }\n    if ((result_var1 & 0xff000000) == 0) {\n      temp_var1 = input_var1 << 1;\n      if ((input_var1 & 0x80000000) != 0) {\n        temp_var1 = temp_var1 | 0x80000000;\n      }\n      return temp_var1;\n    }\n    if (result_var1 < 0xfe000000) {\n      return input_var1 + 0x800000;\n    }\n    input_var1 = input_var1 & 0x80000000;\nLAB_08008e12:\n    return input_var1 | 0x7f800000;\n  }\n  result_var1 = result_var1 >> 0x18;\n  input_var4 = input_var4 >> 0x18;\n  result_var3 = input_var4 - result_var1;\n  boolean_var = result_var3 != 0;\n  result_var2 = result_var1;\n  if (boolean_var && result_var1 <= input_var4) {\n    result_var2 = result_var1 + result_var3;\n  }\n  if (boolean_var && result_var1 <= input_var4) {\n    temp_var1 = temp_var1 ^ input_var1;\n  }\n  if (boolean_var && result_var1 <= input_var4) {\n    input_var1 = input_var1 ^ temp_var1;\n  }\n  if (boolean_var && result_var1 <= input_var4) {\n    temp_var1 = temp_var1 ^ input_var1;\n  }\n  if (input_var4 < result_var1) {\n    result_var3 = -result_var3;\n  }\n  if (0x19 < result_var3) {\n    return input_var1;\n  }\n  result_var1 = input_var1 & 0xffffff | 0x800000;\n  if ((input_var1 & 0x80000000) != 0) {\n    result_var1 = -result_var1;\n  }\n  temp_var2 = temp_var1 & 0xffffff | 0x800000;\n  if ((temp_var1 & 0x80000000) != 0) {\n    temp_var2 = -temp_var2;\n  }\n  if (result_var2 == result_var3) {\n    temp_var2 = temp_var2 ^ 0x800000;\n    if (result_var2 == 0) {\n      result_var1 = result_var1 ^ 0x800000;\n      result_var2 = 1;\n    }\n    else {\n      result_var3 = result_var3 - 1;\n    }\n  }\n  result_var1 = result_var1 + ((int)temp_var2 >> (result_var3 & 0xff));\n  temp_var2 = temp_var2 << (0x20 - result_var3 & 0xff);\n  input_var1 = result_var1 & 0x80000000;\n  if ((int)result_var1 < 0) {\n    boolean_var = temp_var2 != 0;\n    temp_var2 = -temp_var2;\n    result_var1 = -result_var1 - (uint)boolean_var;\n  }\n  if (result_var1 < 0x800000) {\n    temp_var1 = temp_var2 & 0x80000000;\n    temp_var2 = temp_var2 << 1;\n    result_var1 = result_var1 * 2 + (uint)(temp_var1 != 0);\n    temp_var1 = result_var2 - 2;\n    if (result_var2 - 1 == 0 || result_var1 < 0x800000) {\n      result_var3 = LZCOUNT(result_var1) - 8;\n      result_var1 = result_var1 << (result_var3 & 0xff);\n      if ((int)temp_var1 < (int)result_var3) {\n        result_var1 = result_var1 >> (-(temp_var1 - result_var3) & 0xff);\n      }\n      else {\n        result_var1 = result_var1 + (temp_var1 - result_var3) * 0x800000;\n      }\n      return result_var1 | input_var1;\n    }\n  }\n  else {\n    temp_var1 = result_var2 - 1;\n    if (0xffffff < result_var1) {\n      temp_var1 = result_var1 & 1;\n      result_var1 = result_var1 >> 1;\n      temp_var2 = (uint)(temp_var1 != 0) << 0x1f | temp_var2 >> 1;\n      temp_var1 = result_var2;\n      if (0xfd < result_var2) goto LAB_08008e12;\n    }\n  }\n  result_var1 = result_var1 + temp_var1 * 0x800000 + (uint)(0x7fffffff < temp_var2);\n  if (temp_var2 == 0x80000000) {\n    result_var1 = result_var1 & 0xfffffffe;\n  }\n  return result_var1 | input_var1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_08008cd8",
                "param_1": "input_var1",
                "param_2": "input_var2",
                "param_3": "input_var3",
                "param_4": "input_var4",
                "iVar1": "bit_shift",
                "iVar2": "bit_shift2",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "result_var1",
                "uVar6": "result_var2",
                "uVar7": "result_var3",
                "bVar8": "boolean_var"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_08008cdc",
            "code": "\nuint calculate_float_08008cdc(uint input_value_1,uint input_value_2,undefined4 flag,uint result)\n\n{\n  int shift_1;\n  int shift_2;\n  uint frac_1;\n  uint frac_2;\n  uint count;\n  uint diff;\n  bool is_equal;\n  \n  frac_2 = input_value_1 << 1;\n  is_equal = frac_2 == 0;\n  if (!is_equal) {\n    result = input_value_2 << 1;\n    is_equal = result == 0;\n  }\n  if (!is_equal) {\n    is_equal = frac_2 == result;\n  }\n  shift_1 = (int)frac_2 >> 0x18;\n  if (!is_equal) {\n    is_equal = shift_1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)result >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shift_2 = (int)(input_value_2 << 1) >> 0x18;\n    if (shift_1 == -1 || shift_2 == -1) {\n      frac_2 = input_value_2;\n      if (shift_1 == -1) {\n        frac_2 = input_value_1;\n      }\n      if (shift_1 != -1 || shift_2 != -1) {\n        input_value_2 = frac_2;\n      }\n      is_equal = (frac_2 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input_value_2 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = frac_2 == input_value_2;\n      }\n      if (!is_equal) {\n        frac_2 = frac_2 | 0x400000;\n      }\n      return frac_2;\n    }\n    if (((input_value_1 ^ input_value_2) & 0x7fffffff) != 0) {\n      if (frac_2 == 0) {\n        input_value_1 = input_value_2;\n      }\n      return input_value_1;\n    }\n    if (input_value_1 != input_value_2) {\n      return 0;\n    }\n    if ((frac_2 & 0xff000000) == 0) {\n      frac_2 = input_value_1 << 1;\n      if ((input_value_1 & 0x80000000) != 0) {\n        frac_2 = frac_2 | 0x80000000;\n      }\n      return frac_2;\n    }\n    if (frac_2 < 0xfe000000) {\n      return input_value_1 + 0x800000;\n    }\n    input_value_1 = input_value_1 & 0x80000000;\nLAB_08008e12:\n    return input_value_1 | 0x7f800000;\n  }\n  frac_2 = frac_2 >> 0x18;\n  result = result >> 0x18;\n  diff = result - frac_2;\n  is_equal = diff != 0;\n  count = frac_2;\n  if (is_equal && frac_2 <= result) {\n    count = frac_2 + diff;\n  }\n  if (is_equal && frac_2 <= result) {\n    input_value_2 = input_value_2 ^ input_value_1;\n  }\n  if (is_equal && frac_2 <= result) {\n    input_value_1 = input_value_1 ^ input_value_2;\n  }\n  if (is_equal && frac_2 <= result) {\n    input_value_2 = input_value_2 ^ input_value_1;\n  }\n  if (result < frac_2) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return input_value_1;\n  }\n  frac_2 = input_value_1 & 0xffffff | 0x800000;\n  if ((input_value_1 & 0x80000000) != 0) {\n    frac_2 = -frac_2;\n  }\n  frac_1 = input_value_2 & 0xffffff | 0x800000;\n  if ((input_value_2 & 0x80000000) != 0) {\n    frac_1 = -frac_1;\n  }\n  if (count == diff) {\n    frac_1 = frac_1 ^ 0x800000;\n    if (count == 0) {\n      frac_2 = frac_2 ^ 0x800000;\n      count = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  frac_2 = frac_2 + ((int)frac_1 >> (diff & 0xff));\n  frac_1 = frac_1 << (0x20 - diff & 0xff);\n  input_value_1 = frac_2 & 0x80000000;\n  if ((int)frac_2 < 0) {\n    is_equal = frac_1 != 0;\n    frac_1 = -frac_1;\n    frac_2 = -frac_2 - (uint)is_equal;\n  }\n  if (frac_2 < 0x800000) {\n    diff = frac_1 & 0x80000000;\n    frac_1 = frac_1 << 1;\n    frac_2 = frac_2 * 2 + (uint)(diff != 0);\n    diff = count - 2;\n    if (count - 1 == 0 || frac_2 < 0x800000) {\n      count = LZCOUNT(frac_2) - 8;\n      frac_2 = frac_2 << (count & 0xff);\n      if ((int)diff < (int)count) {\n        frac_2 = frac_2 >> (-(diff - count) & 0xff);\n      }\n      else {\n        frac_2 = frac_2 + (diff - count) * 0x800000;\n      }\n      return frac_2 | input_value_1;\n    }\n  }\n  else {\n    diff = count - 1;\n    if (0xffffff < frac_2) {\n      diff = frac_2 & 1;\n      frac_2 = frac_2 >> 1;\n      frac_1 = (uint)(diff != 0) << 0x1f | frac_1 >> 1;\n      diff = count;\n      if (0xfd < count) goto LAB_08008e12;\n    }\n  }\n  frac_2 = frac_2 + diff * 0x800000 + (uint)(0x7fffffff < frac_1);\n  if (frac_1 == 0x80000000) {\n    frac_2 = frac_2 & 0xfffffffe;\n  }\n  return frac_2 | input_value_1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "flag",
                "param_4": "result",
                "iVar1": "shift_1",
                "iVar2": "shift_2",
                "uVar3": "frac_1",
                "uVar4": "frac_2",
                "uVar5": "count",
                "uVar6": "diff",
                "bVar7": "is_equal"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_value_08008e3c",
            "code": "\nuint calculateValue_08008e3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constant;\n  uint checkValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    checkValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < checkValue);\n    if (checkValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constant + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_value_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "checkValue"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_modified_param_08008e44",
            "code": "\nuint calculate_modified_param_08008e44(uint input_value)\n\n{\n  uint leading_zero_count;\n  uint shift_amount;\n  uint is_negative;\n  int result;\n  \n  is_negative = input_value & 0x80000000;\n  if ((int)is_negative < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zero_count = LZCOUNT(input_value);\n  shift_amount = leading_zero_count - 8;\n  result = ((is_negative | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zero_count) {\n    leading_zero_count = 0 << (shift_amount & 0xff);\n    is_negative = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zero_count);\n    if (leading_zero_count == 0x80000000) {\n      is_negative = is_negative & 0xfffffffe;\n    }\n    return is_negative;\n  }\n  shift_amount = input_value << leading_zero_count + 0x18;\n  is_negative = result + ((input_value >> (0x20 - (leading_zero_count + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    is_negative = is_negative & ~(shift_amount >> 0x1f);\n  }\n  return is_negative;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_modified_param_08008e44",
                "param_1": "input_value",
                "uVar1": "leading_zero_count",
                "uVar2": "shift_amount",
                "uVar3": "is_negative",
                "iVar4": "result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_value_08008eec",
            "code": "\nuint calculateFloatingPointValue_08008eec(uint exponent1,uint exponent2,undefined4 param3,uint fraction1)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1Temp;\n  int exponentSum;\n  int diff;\n  uint fractionTemp;\n  int temp;\n  uint exponent2Temp;\n  bool condition1;\n  bool condition2;\n  \n  exponent1Temp = exponent1 >> 0x17 & 0xff;\n  condition1 = exponent1Temp == 0;\n  if (!condition1) {\n    fraction1 = exponent2 >> 0x17 & 0xff;\n    condition1 = fraction1 == 0;\n  }\n  if (!condition1) {\n    condition1 = exponent1Temp == 0xff;\n  }\n  if (!condition1) {\n    condition1 = fraction1 == 0xff;\n  }\n  if (condition1) {\n    fraction1 = exponent2 >> 0x17 & 0xff;\n    if (exponent1Temp == 0xff || fraction1 == 0xff) {\n      condition1 = exponent1 == 0 || exponent1 == 0x80000000;\n      result = exponent2;\n      if (exponent1 != 0 && exponent1 != 0x80000000) {\n        condition1 = exponent2 == 0;\n        result = exponent1;\n      }\n      if (!condition1) {\n        condition1 = exponent2 == 0x80000000;\n      }\n      exponent2Temp = result;\n      if (((condition1) || ((exponent1Temp == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((fraction1 == 0xff && (exponent2Temp = exponent2, (exponent2 & 0x7fffff) != 0)))) {\n        return exponent2Temp | 0x7fc00000;\n      }\n      result = result ^ exponent2;\n      goto LAB_0800903c;\n    }\n    condition1 = (exponent1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (exponent2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (exponent1 ^ exponent2) & 0x80000000;\n    }\n    condition1 = exponent1Temp == 0;\n    result = exponent1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        exponent1 = exponent1 << 1;\n        condition1 = (exponent1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      exponent1Temp = exponent1Temp - 1;\n    }\n    exponent1 = exponent1 | result;\n    condition1 = fraction1 == 0;\n    result = exponent2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        exponent2 = exponent2 << 1;\n        condition1 = (exponent2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      fraction1 = fraction1 - 1;\n    }\n    exponent2 = exponent2 | result;\n  }\n  exponentSum = exponent1Temp + fraction1;\n  exponent2Temp = exponent1 ^ exponent2;\n  exponent1Temp = exponent1 << 9;\n  condition1 = exponent1Temp == 0;\n  if (!condition1) {\n    exponent2 = exponent2 << 9;\n    condition1 = exponent2 == 0;\n  }\n  if (condition1) {\n    if (exponent1Temp == 0) {\n      exponent2 = exponent2 << 9;\n    }\n    result = exponent2Temp & 0x80000000 | exponent1 & 0x7fffff | exponent2 >> 9;\n    condition2 = SBORROW4(exponentSum,0x7f);\n    diff = exponentSum + -0x7f;\n    condition1 = diff == 0;\n    temp = diff;\n    if (!condition1 && 0x7e < exponentSum) {\n      condition2 = SBORROW4(0xff,diff);\n      temp = 0xff - diff;\n      condition1 = diff == 0xff;\n    }\n    if (!condition1 && temp < 0 == condition2) {\n      result = result | diff * 0x800000;\n    }\n    if (!condition1 && temp < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    fractionTemp = 0;\n    condition2 = SBORROW4(diff,1);\n    exponent2Temp = exponentSum - 0x80;\n    condition1 = exponent2Temp == 0;\n    exponent1Temp = exponent2Temp;\n  }\n  else {\n    product = (ulonglong)(exponent1Temp >> 5 | 0x8000000) * (ulonglong)(exponent2 >> 5 | 0x8000000);\n    fractionTemp = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    condition1 = result < 0x800000;\n    if (condition1) {\n      result = result << 1;\n    }\n    if (condition1) {\n      result = result | fractionTemp >> 0x1f;\n      fractionTemp = fractionTemp << 1;\n    }\n    result = exponent2Temp & 0x80000000 | result;\n    exponent2Temp = (exponentSum + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(exponent2Temp,0xfd);\n    condition1 = exponent2Temp == 0xfd;\n    exponent1Temp = exponent2Temp - 0xfd;\n    if (exponent2Temp < 0xfe) {\n      result = result + exponent2Temp * 0x800000 + (uint)(0x7fffffff < fractionTemp);\n      if (fractionTemp == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition1 || (int)exponent1Temp < 0 != condition2) {\n    condition1 = (int)(exponent2Temp + 0x19) < 0;\n    if (exponent2Temp == 0xffffffe7 || condition1 != SCARRY4(exponent2Temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (exponent2Temp != 0xffffffe7 && condition1 == SCARRY4(exponent2Temp,0x19)) {\n      exponent1Temp = (result << 1) >> (-exponent2Temp & 0xff);\n      exponent2Temp = result << (exponent2Temp + 0x20 & 0xff);\n      exponent1Temp = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1Temp >> 1) + (uint)((byte)exponent1Temp & 1);\n      if ((fractionTemp | exponent2Temp << 1) == 0) {\n        exponent1Temp = exponent1Temp & ~(exponent2Temp >> 0x1f);\n      }\n      return exponent1Temp;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_value_08008eec",
                "param_1": "exponent1",
                "param_2": "exponent2",
                "param_3": "param3",
                "param_4": "fraction1",
                "uVar2": "result",
                "uVar3": "exponent1Temp",
                "uVar6": "fractionTemp",
                "uVar8": "exponent2Temp",
                "iVar4": "exponentSum",
                "iVar5": "diff",
                "iVar7": "temp",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "lVar1": "product"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool isZero;\n  bool isNegative;\n  bool overflow;\n  \n  temp2 = value1 >> 0x17 & 0xff;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    param4 = value2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = value2 >> 0x17 & 0xff;\n    temp6 = value1;\n    if (temp2 == 0xff) {\n      if (((value1 & 0x7fffff) != 0) || (temp6 = value2, param4 == 0xff)) {\nLAB_0800904a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        temp6 = value2;\n        if ((value2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (value1 ^ value2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (value1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (value2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = temp2 == 0;\n        temp6 = value1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            value1 = value1 << 1;\n            isZero = (value1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          temp2 = temp2 - 1;\n        }\n        value1 = value1 | temp6;\n        isZero = param4 == 0;\n        temp6 = value2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            value2 = value2 << 1;\n            isZero = (value2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        value2 = value2 | temp6;\n        goto LAB_0800906c;\n      }\n      if ((value1 & 0x7fffffff) == 0) {\n        if ((value2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    value1 = value1 ^ value2;\n  }\n  else {\nLAB_0800906c:\n    temp3 = temp2 - param4;\n    if (value2 << 9 == 0) {\n      value1 = (value1 ^ value2) & 0x80000000 | value1 & 0x7fffff;\n      overflow = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      isZero = temp5 < 0;\n      isNegative = temp5 == 0;\n      if (!isNegative && isZero == overflow) {\n        overflow = SBORROW4(0xff,temp5);\n        isZero = 0xff - temp5 < 0;\n        isNegative = temp5 == 0xff;\n      }\n      if (!isNegative && isZero == overflow) {\n        value1 = value1 | temp5 * 0x800000;\n      }\n      if (!isNegative && isZero == overflow) {\n        return value1;\n      }\n      value1 = value1 | 0x800000;\n      temp2 = 0;\n      isNegative = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      isZero = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (value2 << 9) >> 4 | 0x10000000;\n      temp2 = (value1 << 9) >> 4 | 0x10000000;\n      value1 = (value1 ^ value2) & 0x80000000;\n      isZero = temp1 <= temp2;\n      if (!isZero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)isZero;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          value1 = value1 | temp6;\n        }\n        isZero = temp1 >> 1 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (isZero) {\n          value1 = value1 | temp6 >> 1;\n        }\n        isZero = temp1 >> 2 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (isZero) {\n          value1 = value1 | temp6 >> 2;\n        }\n        isZero = temp1 >> 3 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (isZero) {\n          value1 = value1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        isZero = temp2 == 0;\n        if (!isZero) {\n          temp6 = temp6 >> 4;\n          isZero = temp6 == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(temp4,0xfd);\n      isZero = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        value1 = value1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          value1 = value1 & 0xfffffffe;\n        }\n        return value1;\n      }\n    }\n    if (isZero || (int)temp6 < 0 != isNegative) {\n      isZero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        value1 = value1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        return value1;\n      }\n      temp6 = (value1 << 1) >> (-temp4 & 0xff);\n      temp4 = value1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((value1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return value1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "overflow"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint number_1,uint number_2)\n\n{\n  bool is_negative;\n  uint number_1_shifted;\n  uint number_2_shifted;\n  uint combined_numbers;\n  bool is_zero;\n  \n  number_1_shifted = number_1 * 2;\n  number_2_shifted = number_2 * 2;\n  if (((int)number_1_shifted >> 0x18 == -1 || (int)number_2_shifted >> 0x18 == -1) &&\n     ((((int)number_1_shifted >> 0x18 == -1 && ((number_1 & 0x7fffff) != 0)) ||\n      (((int)number_2_shifted >> 0x18 == -1 && ((number_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_numbers = number_1_shifted | number_2 & 0x7fffffff;\n  is_zero = combined_numbers == 0;\n  if (!is_zero) {\n    combined_numbers = number_1 ^ number_2;\n    is_zero = combined_numbers == 0;\n  }\n  is_negative = -1 < (int)combined_numbers;\n  if (is_negative) {\n    number_1 = number_1_shifted + number_2 * -2;\n    is_zero = number_1 == 0;\n  }\n  if ((is_negative && number_2_shifted <= number_1_shifted) && !is_zero) {\n    number_1 = (int)number_2 >> 0x1f;\n  }\n  if (!is_negative || number_2_shifted > number_1_shifted) {\n    number_1 = ~((int)number_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    number_1 = number_1 | 1;\n  }\n  return number_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "number_1",
                "param_2": "number_2",
                "uVar2": "number_1_shifted",
                "uVar3": "number_2_shifted",
                "uVar4": "combined_numbers",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_params_080091fc",
            "code": "\nvoid concatenateParams_080091fc(undefined4 outParam,undefined4 inParam)\n\n{\n  concatenate_params_08009204(inParam,outParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_params_080091fc",
                "param_1": "outParam",
                "param_2": "inParam"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_params_08009204",
            "code": "\nundefined8 concatenate_params_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  calculate_result_0800919c();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_concatenation_result_08009214",
            "code": "\nbool check_concatenation_result_08009214(void)\n\n{\n  char result;\n  \n  concatenate_params_08009204();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_concatenation_result_08009214",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_string_termination_08009228",
            "code": "\nbool check_string_termination_08009228(void)\n\n{\n  char input_char;\n  \n  concatenate_params_08009204();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_string_termination_08009228",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_concatenation_result_0800923c",
            "code": "\nbool check_concatenation_result_0800923c(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  concatenate_params_08009204();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "concatenate_params_and_check_08009250",
            "code": "\nbool concatenate_params_and_check_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_flag;\n  \n  concatenate_params_080091fc();\n  return !(bool)is_carry_flag || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08009250": "concatenate_params_and_check_08009250",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_null_terminated_string_08009264",
            "code": "\nbool is_null_terminated_string_08009264(void)\n\n{\n  char input_char;\n  \n  concatenate_params_080091fc();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_null_terminated_string_08009264",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "clamp_and_shift_08009278",
            "code": "\nuint clamp_and_shift_08009278(uint clamped_input)\n\n{\n  uint shifted_value;\n  uint shift_difference;\n  \n  if (clamped_input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (clamped_input << 1) >> 0x18;\n  shift_difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && shift_difference != 0) {\n    shifted_value = (clamped_input << 8 | 0x80000000) >> (shift_difference & 0xff);\n    if ((clamped_input & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((shift_difference == 0xffffff9f) && ((clamped_input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  clamped_input = clamped_input & 0x80000000;\n  if (clamped_input == 0) {\n    clamped_input = 0x7fffffff;\n  }\n  return clamped_input;\n}\n\n",
            "renaming": {
                "FUN_08009278": "clamp_and_shift_08009278",
                "param_1": "clamped_input",
                "uVar1": "shifted_value",
                "uVar2": "shift_difference"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_0800756c();\n  execute_multiple_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_program_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "decode_and_validate_number_08009318",
            "code": "\nlonglong decode_and_validate_number_08009318(uint input_number,uint shift_amount,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shift_difference;\n  uint mask;\n  bool carry;\n  undefined8 function_result;\n  longlong final_result;\n  \n  mask = (shift_amount << 1) >> 0x15;\n  shift_difference = mask - 0x3ff;\n  if ((int)shift_difference < 0x14) {\n    if ((int)shift_difference < 0) {\n      function_result = optimized_function_080082d4(input_number,shift_amount,0x8800759c,0x7e37e43c,param_4);\n      result = check_if_string_is_empty_08008b60((int)function_result,(int)((ulonglong)function_result >> 0x20),0,0);\n      final_result = CONCAT44(shift_amount,input_number);\n      if (result != 0) {\n        if ((int)shift_amount < 0) {\n          final_result = -0x8000000000000000;\n        }\n        else if ((input_number | shift_amount) == 0) {\n          final_result = 0;\n        }\n        else {\n          final_result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_difference & 0xff);\n      final_result = CONCAT44(shift_amount,input_number);\n      if ((shift_amount & mask | input_number) != 0) {\n        function_result = optimized_function_080082d4(input_number,shift_amount,0x8800759c,0x7e37e43c,param_4);\n        result = check_if_string_is_empty_08008b60((int)function_result,(int)((ulonglong)function_result >> 0x20),0,0);\n        final_result = CONCAT44(shift_amount,input_number);\n        if (result != 0) {\n          if (0 < (int)shift_amount) {\n            shift_amount = shift_amount + (0x100000 >> (shift_difference & 0xff));\n          }\n          final_result = (ulonglong)(shift_amount & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_difference < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(shift_amount,input_number);\n    if ((mask & input_number) != 0) {\n      function_result = optimized_function_080082d4(input_number,shift_amount,0x8800759c,0x7e37e43c,param_4);\n      result = check_if_string_is_empty_08008b60((int)function_result,(int)((ulonglong)function_result >> 0x20),0,0);\n      final_result = CONCAT44(shift_amount,input_number);\n      if (result != 0) {\n        if (0 < (int)shift_amount) {\n          if (shift_difference == 0x14) {\n            shift_amount = shift_amount + 1;\n          }\n          else {\n            shift_difference = 1 << (0x34 - shift_difference & 0xff);\n            carry = CARRY4(shift_difference,input_number);\n            input_number = shift_difference + input_number;\n            if (carry != false) {\n              shift_amount = shift_amount + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(shift_amount,input_number & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(shift_amount,input_number);\n    if (shift_difference == 0x400) {\n      final_result = optimized_function_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "decode_and_validate_number_08009318",
                "param_1": "input_number",
                "param_2": "shift_amount",
                "iVar1": "result",
                "uVar2": "shift_difference",
                "uVar3": "mask",
                "bVar4": "carry",
                "uVar5": "function_result",
                "lVar6": "final_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "improve_and_calculate_08009410",
            "code": "\nundefined4 improveAndCalculate_08009410(undefined4 inputVal,uint paramVal)\n\n{\n  undefined4 result;\n  uint validatedVal;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  if (0x3fe921fb < (paramVal & 0x7fffffff)) {\n    if ((paramVal & 0x7fffffff) < 0x7ff00000) {\n      validatedVal = improve_and_validate_result_08009d78(inputVal,paramVal,&localVar1);\n      validatedVal = validatedVal & 3;\n      if (validatedVal == 1) {\n        result = calculate_improved_value_0800adf0(localVar1,localVar2,localVar3,localVar4,1);\n      }\n      else if (validatedVal == 2) {\n        result = calculate_improved_value_0800a348(localVar1,localVar2,localVar3,localVar4);\n      }\n      else if (validatedVal == 0) {\n        result = calculate_improved_value_0800a348(localVar1,localVar2,localVar3,localVar4);\n      }\n      else {\n        result = calculate_improved_value_0800adf0(localVar1,localVar2,localVar3,localVar4,1);\n      }\n    }\n    else {\n      result = perform_arithmetic_operation_080082d0(inputVal,paramVal,inputVal,paramVal);\n    }\n    return result;\n  }\n  result = calculate_improved_value_0800a348(inputVal,paramVal,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "improve_and_calculate_08009410",
                "param_1": "inputVal",
                "param_2": "paramVal",
                "uVar1": "result",
                "uVar2": "validatedVal",
                "local_28": "localVar1",
                "uStack_24": "localVar2",
                "local_20": "localVar3",
                "uStack_1c": "localVar4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculateResult_080094c0(uint input1,uint input2,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  int result1;\n  uint shiftValue;\n  uint mask;\n  bool carryFlag;\n  undefined8 optimizedResult;\n  longlong finalResult;\n  \n  mask = (input2 << 1) >> 0x15;\n  shiftValue = mask - 0x3ff;\n  if ((int)shiftValue < 0x14) {\n    if ((int)shiftValue < 0) {\n      optimizedResult = optimized_function_080082d4(input1,input2,0x8800759c,0x7e37e43c,unusedParam2);\n      result1 = check_if_string_is_empty_08008b60((int)optimizedResult,(int)((ulonglong)optimizedResult >> 0x20),0,0);\n      finalResult = CONCAT44(input2,input1);\n      if (result1 != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          finalResult = (ulonglong)input2 << 0x20;\n        }\n        else {\n          finalResult = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shiftValue & 0xff);\n      finalResult = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        optimizedResult = optimized_function_080082d4(input1,input2,0x8800759c,0x7e37e43c,unusedParam2);\n        result1 = check_if_string_is_empty_08008b60((int)optimizedResult,(int)((ulonglong)optimizedResult >> 0x20),0,0);\n        finalResult = CONCAT44(input2,input1);\n        if (result1 != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shiftValue & 0xff));\n          }\n          finalResult = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftValue < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    finalResult = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      optimizedResult = optimized_function_080082d4(input1,input2,0x8800759c,0x7e37e43c,unusedParam2);\n      result1 = check_if_string_is_empty_08008b60((int)optimizedResult,(int)((ulonglong)optimizedResult >> 0x20),0,0);\n      finalResult = CONCAT44(input2,input1);\n      if (result1 != 0) {\n        if ((int)input2 < 0) {\n          if (shiftValue == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shiftValue = 1 << (0x34 - shiftValue & 0xff);\n            carryFlag = CARRY4(shiftValue,input1);\n            input1 = shiftValue + input1;\n            if (carryFlag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        finalResult = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    finalResult = CONCAT44(input2,input1);\n    if (shiftValue == 0x400) {\n      finalResult = optimized_function_080082d4();\n    }\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "iVar1": "result1",
                "uVar2": "shiftValue",
                "uVar3": "mask",
                "bVar4": "carryFlag",
                "uVar5": "optimizedResult",
                "lVar6": "finalResult"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_shifted_product_080095b8",
            "code": "\nint calculate_shifted_product_080095b8(uint input_1,uint input_2)\n\n{\n  uint mask;\n  uint shift;\n  uint result;\n  int sign;\n  uint exponent;\n  \n  shift = (input_2 << 1) >> 0x15;\n  exponent = shift - 0x3ff;\n  if ((int)input_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_2 & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = calculate_shifted_value_08008ba0();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      mask = 0x80000000 >> (shift - 0x413 & 0xff);\n      if (CARRY4(mask,input_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shift - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | mask + input_1 >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shift - 0x413 & 0xff) | input_1 << (shift - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_shifted_product_080095b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "mask",
                "uVar2": "shift",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "exponent"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_float_to_double_08009654",
            "code": "\nlonglong convertFloatToDouble_08009654(uint floatPart,uint intPart)\n\n{\n  uint exponentDiff;\n  uint shift;\n  longlong result;\n  \n  result = CONCAT44(intPart,floatPart);\n  shift = (intPart << 1) >> 0x15;\n  exponentDiff = shift - 0x3ff;\n  if ((int)exponentDiff < 0x14) {\n    if ((int)exponentDiff < 0) {\n      intPart = intPart & 0x80000000;\n      if (exponentDiff == 0xffffffff) {\n        intPart = intPart | 0x3ff00000;\n      }\n      result = (ulonglong)intPart << 0x20;\n    }\n    else {\n      shift = 0xfffff >> (exponentDiff & 0xff);\n      result = CONCAT44(intPart,floatPart);\n      if ((intPart & shift | floatPart) != 0) {\n        result = (ulonglong)(intPart + (0x80000 >> (exponentDiff & 0xff)) & ~shift) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentDiff < 0x34) {\n    shift = 0xffffffff >> (shift - 0x413 & 0xff);\n    if ((floatPart & shift) != 0) {\n      exponentDiff = 1 << (0x33 - exponentDiff & 0xff);\n      if (CARRY4(floatPart,exponentDiff) != false) {\n        intPart = intPart + 1;\n      }\n      result = CONCAT44(intPart,floatPart + exponentDiff & ~shift);\n    }\n  }\n  else {\n    result = CONCAT44(intPart,floatPart);\n    if (exponentDiff == 0x400) {\n      result = optimized_function_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_float_to_double_08009654",
                "param_1": "floatPart",
                "param_2": "intPart",
                "uVar1": "exponentDiff",
                "uVar2": "shift",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_improved_value_080096e8",
            "code": "\nundefined4 calculate_improved_value_080096e8(undefined4 input_value,uint input_flag)\n\n{\n  undefined4 improved_value;\n  uint validation_result;\n  undefined4 temporary_value_1;\n  undefined4 temporary_value_2;\n  undefined4 temporary_value_3;\n  undefined4 temporary_value_4;\n  \n  if (0x3fe921fb < (input_flag & 0x7fffffff)) {\n    if ((input_flag & 0x7fffffff) < 0x7ff00000) {\n      validation_result = improve_and_validate_result_08009d78(input_value,input_flag,&temporary_value_1);\n      validation_result = validation_result & 3;\n      if (validation_result == 1) {\n        improved_value = calculate_improved_value_080096e8_0800a348(temporary_value_1,temporary_value_2,temporary_value_3,temporary_value_4);\n      }\n      else if (validation_result == 2) {\n        improved_value = calculate_improved_value_080096e8_0800adf0(temporary_value_1,temporary_value_2,temporary_value_3,temporary_value_4,1);\n      }\n      else if (validation_result == 0) {\n        improved_value = calculate_improved_value_080096e8_0800adf0(temporary_value_1,temporary_value_2,temporary_value_3,temporary_value_4,1);\n      }\n      else {\n        improved_value = calculate_improved_value_080096e8_0800a348(temporary_value_1,temporary_value_2,temporary_value_3,temporary_value_4);\n      }\n    }\n    else {\n      improved_value = perform_arithmetic_operation_080082d0(input_value,input_flag,input_value,input_flag);\n    }\n    return improved_value;\n  }\n  improved_value = calculate_improved_value_080096e8_0800adf0(input_value,input_flag,0,0,0);\n  return improved_value;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_improved_value_080096e8",
                "param_1": "input_value",
                "param_2": "input_flag",
                "uVar1": "improved_value",
                "uVar2": "validation_result",
                "local_28": "temporary_value_1",
                "uStack_24": "temporary_value_2",
                "local_20": "temporary_value_3",
                "uStack_1c": "temporary_value_4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_shifted_value_08009798",
            "code": "\nlonglong calculate_shifted_value_08009798(uint input_value1,uint input_value2,undefined4 constant1,undefined4 constant2)\n\n{\n  uint shift_amount;\n  uint shifted_value;\n  longlong result;\n  \n  shifted_value = (input_value2 << 1) >> 0x15;\n  shift_amount = shifted_value - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      return ((ulonglong)input_value2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_value2 & ~(0xfffff >> (shift_amount & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shift_amount < 0x34) {\n      return CONCAT44(input_value2,input_value1 & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shift_amount != 0x400) {\n      return CONCAT44(input_value2,input_value1);\n    }\n    result = optimized_function_080082d4(input_value1,input_value2,input_value1,input_value2,constant2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_shifted_value_08009798",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar1": "shift_amount",
                "uVar2": "shifted_value",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_float_value_thunk_08009990",
            "code": "\nuint calculate_float_value_thunk_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 result;\n  uint condition_1;\n  uint valid_param_4;\n  uint valid_param_2;\n  undefined8 improved_value;\n  \n  valid_param_4 = input_4 & 0x7fffffff;\n  if (((valid_param_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (valid_param_2 = input_2 & 0x7fffffff, (valid_param_2 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      valid_param_4 = improve_and_check_value_0800af78();\n      return valid_param_4;\n    }\n    condition_1 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((valid_param_2 | input_1) == 0) {\n      if (condition_1 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (condition_1 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((valid_param_4 | input_3) != 0) {\n        if (valid_param_4 == 0x7ff00000) {\n          condition_1 = condition_1 - 1;\n          if (valid_param_2 == 0x7ff00000) {\n            if (condition_1 < 3) {\n              return *(uint *)(&DAT_0800be68 + condition_1 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (condition_1 < 3) {\n            return *(uint *)(&DAT_0800be80 + condition_1 * 8);\n          }\n          return 0;\n        }\n        if (valid_param_2 != 0x7ff00000) {\n          difference = (int)(valid_param_2 - valid_param_4) >> 0x14;\n          if ((int)(valid_param_2 - valid_param_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              improved_value = 0;\n            }\n            else {\n              calculate_float_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              improved_value = improve_and_check_value_0800af78();\n            }\n          }\n          else {\n            improved_value = 0x3ff921fb54442d18;\n          }\n          result = (undefined4)((ulonglong)improved_value >> 0x20);\n          valid_param_4 = (uint)improved_value;\n          if (condition_1 == 1) {\n            return valid_param_4;\n          }\n          if (condition_1 == 2) {\n            improved_value = perform_arithmetic_operation_080082d0(valid_param_4,result,0x33145c07,0x3ca1a626);\n            valid_param_4 = perform_arithmetic_operation_080082d0(0x54442d18,0x400921fb,(int)improved_value,(int)((ulonglong)improved_value >> 0x20));\n            return valid_param_4;\n          }\n          if (condition_1 == 0) {\n            return valid_param_4;\n          }\n          improved_value = perform_arithmetic_operation_080082d0(valid_param_4,result,0x33145c07,0x3ca1a626);\n          valid_param_4 = perform_arithmetic_operation_080082d0((int)improved_value,(int)((ulonglong)improved_value >> 0x20),0x54442d18,0x400921fb);\n          return valid_param_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = optimized_function_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_float_value_thunk_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "condition_1",
                "uVar4": "valid_param_4",
                "uVar5": "valid_param_2",
                "uVar6": "improved_value"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_and_set_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_and_set_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int result;\n  undefined4 *global_data;\n  int *global_data_ptr;\n  undefined8 final_result;\n  undefined4 calculation_mode;\n  char *calculation_name;\n  undefined4 local_48;\n  undefined4 uStack_44;\n  undefined4 local_40;\n  undefined4 uStack_3c;\n  undefined4 min_value;\n  undefined4 max_value;\n  int value_exists;\n  \n  final_result = calculate_final_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return final_result;\n  }\n  value_exists = truncate_and_shift_0800b2d4();\n  if (value_exists != 0) {\n    return final_result;\n  }\n  result = truncate_and_shift_0800b2d4(side_a,side_b);\n  if (result == 0) {\n    return final_result;\n  }\n  result = truncate_and_shift_0800b2d4(side_c,side_d);\n  if (result == 0) {\n    return final_result;\n  }\n  calculation_mode = 3;\n  calculation_name = \"hypot\";\n  local_48 = side_a;\n  uStack_44 = side_b;\n  local_40 = side_c;\n  uStack_3c = side_d;\n  if (DAT_20000014 == '\\0') {\n    min_value = 0xe0000000;\n    max_value = 0x47efffff;\nLAB_080098aa:\n    result = initialize_0800b2e0(&calculation_mode);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    min_value = 0;\n    max_value = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  global_data = (undefined4 *)get_global_data_0800b3dc();\n  *global_data = 0x22;\nLAB_08009896:\n  final_result = CONCAT44(max_value,min_value);\n  if (value_exists != 0) {\n    global_data_ptr = (int *)get_global_data_0800b3dc();\n    final_result = CONCAT44(max_value,min_value);\n    *global_data_ptr = value_exists;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_and_set_hypotenuse_0800981c",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "iVar1": "result",
                "puVar2": "global_data",
                "piVar3": "global_data_ptr",
                "uVar4": "final_result",
                "local_50": "calculation_mode",
                "pcStack_4c": "calculation_name",
                "local_38": "min_value",
                "uStack_34": "max_value",
                "local_30": "value_exists"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_binary_data_080098d0",
            "code": "\nundefined4 processBinaryData_080098d0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  char characterVar;\n  undefined4 result;\n  int resultCode;\n  undefined4 *globalDataPtr;\n  int *globalDataIntPtr;\n  undefined4 flag;\n  undefined *dataPointer;\n  undefined4 inputParam1_2;\n  undefined4 inputParam2_2;\n  undefined4 inputParam1_3;\n  undefined4 inputParam2_3;\n  undefined8 floatResult;\n  int conditionResult;\n  \n  result = calculate_result_0800a1bc();\n  characterVar = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (conditionResult = check_conditions_08008b74(inputParam1,inputParam2,inputParam1,inputParam2), conditionResult != 0)) ||\n     (resultCode = is_null_terminated_08008b24(inputParam1,inputParam2,0,0), resultCode == 0)) {\n    return result;\n  }\n  flag = 1;\n  dataPointer = &DAT_0800be5c;\n  inputParam1_2 = inputParam1;\n  inputParam2_2 = inputParam2;\n  inputParam1_3 = inputParam1;\n  inputParam2_3 = inputParam2;\n  if (characterVar == '\\0') {\n    floatResult = 0;\nLAB_0800996c:\n    resultCode = initialize_0800b2e0(&flag);\n    if (resultCode != 0) goto joined_r0x0800997a;\n  }\n  else {\n    floatResult = calculate_float_08008894(0,0,0,0);\n    if (characterVar != '\\x02') goto LAB_0800996c;\n  }\n  globalDataPtr = (undefined4 *)get_global_data_0800b3dc();\n  *globalDataPtr = 0x21;\njoined_r0x0800997a:\n  if (conditionResult != 0) {\n    globalDataIntPtr = (int *)get_global_data_0800b3dc();\n    *globalDataIntPtr = conditionResult;\n  }\n  return (undefined4)floatResult;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_binary_data_080098d0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "cVar1": "characterVar",
                "uVar2": "result",
                "iVar3": "resultCode",
                "puVar4": "globalDataPtr",
                "piVar5": "globalDataIntPtr",
                "local_50": "flag",
                "local_4c": "dataPointer",
                "local_48": "inputParam1_2",
                "uStack_44": "inputParam2_2",
                "local_40": "inputParam1_3",
                "uStack_3c": "inputParam2_3",
                "local_38": "floatResult",
                "local_30": "conditionResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "improved_calculate_float_08009990",
            "code": "\nuint improved_calculate_float_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = input4 & 0x7fffffff;\n  if (((tempVar4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = input2 & 0x7fffffff, (tempVar5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      tempVar4 = improve_and_check_value_0800af78();\n      return tempVar4;\n    }\n    tempVar3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((tempVar5 | input1) == 0) {\n      if (tempVar3 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((tempVar4 | input3) != 0) {\n        if (tempVar4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (tempVar5 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (tempVar5 != 0x7ff00000) {\n          tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n          if ((int)(tempVar5 - tempVar4) < 0x3d00000) {\n            if (((int)input4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar6 = 0;\n            }\n            else {\n              calculate_float_08008894(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              tempVar6 = improve_and_check_value_0800af78();\n            }\n          }\n          else {\n            tempVar6 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n          tempVar4 = (uint)tempVar6;\n          if (tempVar3 == 1) {\n            return tempVar4;\n          }\n          if (tempVar3 == 2) {\n            tempVar6 = perform_arithmetic_operation_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n            tempVar4 = perform_arithmetic_operation_080082d0(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n            return tempVar4;\n          }\n          if (tempVar3 == 0) {\n            return tempVar4;\n          }\n          tempVar6 = perform_arithmetic_operation_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n          tempVar4 = perform_arithmetic_operation_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n          return tempVar4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = optimized_function_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "improved_calculate_float_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_final_result_08009b24",
            "code": "\nuint calculate_final_result_08009b24(uint value1,uint value2,uint value3,uint value4)\n\n{\n  undefined4 result1;\n  int isTerminated;\n  uint finalResult;\n  int result2;\n  undefined4 result3;\n  int value3;\n  uint maxValue;\n  undefined4 result4;\n  undefined4 result5;\n  undefined8 intermediateResult1;\n  undefined8 intermediateResult2;\n  undefined8 intermediateResult3;\n  undefined8 intermediateResult4;\n  int localVariable;\n  \n  value2 = value2 & 0x7fffffff;\n  value4 = value4 & 0x7fffffff;\n  finalResult = value1;\n  maxValue = value2;\n  if (value2 < value4) {\n    finalResult = value3;\n    value3 = value1;\n    maxValue = value4;\n    value4 = value2;\n  }\n  if (0x3c00000 < (int)(maxValue - value4)) {\n    finalResult = optimized_function_080082d4(finalResult,maxValue,value3,value4);\n    return finalResult;\n  }\n  if (maxValue < 0x5f300001) {\n    localVariable = 0;\n  }\n  else {\n    if (0x7fefffff < maxValue) {\n      if ((maxValue & 0xfffff | finalResult) != 0) {\n        finalResult = optimized_function_080082d4(finalResult,maxValue,value3,value4);\n      }\n      if ((value4 ^ 0x7ff00000 | value3) != 0) {\n        return finalResult;\n      }\n      return value3;\n    }\n    maxValue = maxValue + 0xda800000;\n    value4 = value4 + 0xda800000;\n    localVariable = 600;\n  }\n  intermediateResult2 = CONCAT44(maxValue,finalResult);\n  intermediateResult1 = CONCAT44(value4,value3);\n  if ((int)value4 < 0x20b00000) {\n    if ((int)value4 < 0x100000) {\n      if ((value4 | value3) == 0) {\n        return finalResult;\n      }\n      intermediateResult1 = calculate_improved_result_08008640(value3,value4,0,0x7fd00000);\n      intermediateResult2 = calculate_improved_result_08008640(finalResult,maxValue,0,0x7fd00000);\n      localVariable = localVariable + -0x3fe;\n    }\n    else {\n      maxValue = maxValue + 0x25800000;\n      intermediateResult2 = CONCAT44(maxValue,finalResult);\n      value4 = value4 + 0x25800000;\n      intermediateResult1 = CONCAT44(value4,value3);\n      localVariable = localVariable + -600;\n    }\n  }\n  result5 = (undefined4)((ulonglong)intermediateResult2 >> 0x20);\n  result4 = (undefined4)intermediateResult2;\n  value3 = (int)((ulonglong)intermediateResult1 >> 0x20);\n  result3 = (undefined4)intermediateResult1;\n  intermediateResult1 = perform_arithmetic_operation_080082d0(result4,result5,result3,value3);\n  result2 = (int)((ulonglong)intermediateResult1 >> 0x20);\n  result1 = (undefined4)intermediateResult1;\n  isTerminated = is_null_terminated_08008b24(result3,value3,result1,result2);\n  if (isTerminated == 0) {\n    intermediateResult1 = calculate_improved_result_08008640(0,value4,0);\n    intermediateResult2 = calculate_improved_result_08008640(result1,result2 + -0x80000000,result1,result2);\n    intermediateResult3 = optimized_function_080082d4(result4,result5,result4,result5);\n    intermediateResult3 = perform_arithmetic_operation_080082d0((int)intermediateResult3,(int)((ulonglong)intermediateResult3 >> 0x20),0,maxValue + 0x100000);\n    intermediateResult3 = calculate_improved_result_08008640((int)intermediateResult3,(int)((ulonglong)intermediateResult3 >> 0x20),result3,value3);\n    intermediateResult4 = perform_arithmetic_operation_080082d0(result3,value3,0,value4);\n    intermediateResult4 = calculate_improved_result_08008640((int)intermediateResult4,(int)((ulonglong)intermediateResult4 >> 0x20),0,maxValue + 0x100000);\n    intermediateResult3 = optimized_function_080082d4((int)intermediateResult3,(int)((ulonglong)intermediateResult3 >> 0x20),(int)intermediateResult4,\n                          (int)((ulonglong)intermediateResult4 >> 0x20));\n    intermediateResult2 = perform_arithmetic_operation_080082d0((int)intermediateResult2,(int)((ulonglong)intermediateResult2 >> 0x20),(int)intermediateResult3,\n                          (int)((ulonglong)intermediateResult3 >> 0x20));\n    perform_arithmetic_operation_080082d0((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),(int)intermediateResult2,\n                 (int)((ulonglong)intermediateResult2 >> 0x20));\n    intermediateResult1 = calculate_result_0800a1bc();\n  }\n  else {\n    intermediateResult1 = calculate_improved_result_08008640(0,maxValue,0,maxValue);\n    intermediateResult2 = calculate_improved_result_08008640(result3,value3 + -0x80000000,result3,value3);\n    intermediateResult3 = optimized_function_080082d4(result4,result5,0,maxValue);\n    intermediateResult4 = perform_arithmetic_operation_080082d0(result4,result5,0,maxValue);\n    intermediateResult3 = calculate_improved_result_08008640((int)intermediateResult3,(int)((ulonglong)intermediateResult3 >> 0x20),(int)intermediateResult4,\n                          (int)((ulonglong)intermediateResult4 >> 0x20));\n    intermediateResult2 = perform_arithmetic_operation_080082d0((int)intermediateResult2,(int)((ulonglong)intermediateResult2 >> 0x20),(int)intermediateResult3,\n                          (int)((ulonglong)intermediateResult3 >> 0x20));\n    perform_arithmetic_operation_080082d0((int)intermediateResult1,(int)((ulonglong)intermediateResult1 >> 0x20),(int)intermediateResult2,\n                 (int)((ulonglong)intermediateResult2 >> 0x20));\n    intermediateResult1 = calculate_result_0800a1bc();\n  }\n  finalResult = (uint)intermediateResult1;\n  if (localVariable != 0) {\n    finalResult = calculate_improved_result_08008640(finalResult,(int)((ulonglong)intermediateResult1 >> 0x20),0,localVariable * 0x100000 + 0x3ff00000);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_final_result_08009b24",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "iVar2": "isTerminated",
                "uVar3": "finalResult",
                "iVar4": "result2",
                "uVar5": "result3",
                "iVar6": "value3",
                "uVar7": "maxValue",
                "uVar8": "result4",
                "uVar9": "result5",
                "uVar10": "intermediateResult1",
                "uVar11": "intermediateResult2",
                "uVar12": "intermediateResult3",
                "uVar13": "intermediateResult4",
                "local_3c": "localVariable"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "improve_and_validate_result_08009d78",
            "code": "\nint improve_and_validate_result_08009d78(undefined4 input_value,uint input_flag,undefined8 *result_array)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  uint modified_flag;\n  int shift_value;\n  undefined8 calculation1;\n  undefined8 calculation2;\n  undefined8 calculation3;\n  undefined4 temp_value1;\n  undefined4 temp_value2;\n  undefined8 temp_value3;\n  undefined8 temp_value4;\n  undefined8 temp_value5;\n  \n  modified_flag = input_flag & 0x7fffffff;\n  if (modified_flag < 0x3fe921fc) {\n    *(undefined4 *)result_array = input_value;\n    *(uint *)((int)result_array + 4) = input_flag;\n    *(undefined4 *)(result_array + 1) = 0;\n    *(undefined4 *)((int)result_array + 0xc) = 0;\n    return 0;\n  }\n  if (modified_flag < 0x4002d97c) {\n    if ((int)input_flag < 1) {\n      calculation1 = optimized_function_080082d4(input_value,input_flag,0x54400000,0x3ff921fb);\n      value3 = (undefined4)((ulonglong)calculation1 >> 0x20);\n      value1 = (undefined4)calculation1;\n      if (modified_flag != 0x3ff921fb) {\n        calculation1 = optimized_function_080082d4(value1,value3,0x1a626331,0x3dd0b461);\n        *result_array = calculation1;\n        calculation1 = perform_arithmetic_operation_080082d0(value1,value3);\n        calculation1 = optimized_function_080082d4((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),0x1a626331,0x3dd0b461);\n        result_array[1] = calculation1;\n        return -1;\n      }\n      calculation1 = optimized_function_080082d4(value1,value3,0x1a600000,0x3dd0b461);\n      value1 = (undefined4)((ulonglong)calculation1 >> 0x20);\n      calculation2 = optimized_function_080082d4((int)calculation1,value1,0x2e037073,0x3ba3198a);\n      *result_array = calculation2;\n      calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,value1);\n      calculation1 = optimized_function_080082d4((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),0x2e037073,0x3ba3198a);\n      result_array[1] = calculation1;\n      return -1;\n    }\n    calculation1 = perform_arithmetic_operation_080082d0();\n    value3 = (undefined4)((ulonglong)calculation1 >> 0x20);\n    value1 = (undefined4)calculation1;\n    if (modified_flag != 0x3ff921fb) {\n      calculation1 = perform_arithmetic_operation_080082d0(value1,value3,0x1a626331,0x3dd0b461);\n      *result_array = calculation1;\n      calculation1 = perform_arithmetic_operation_080082d0(value1,value3);\n      calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),0x1a626331,0x3dd0b461);\n      result_array[1] = calculation1;\n      return 1;\n    }\n    calculation1 = perform_arithmetic_operation_080082d0(value1,value3,0x1a600000,0x3dd0b461);\n    value1 = (undefined4)((ulonglong)calculation1 >> 0x20);\n    calculation2 = perform_arithmetic_operation_080082d0((int)calculation1,value1,0x2e037073,0x3ba3198a);\n    *result_array = calculation2;\n    calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,value1);\n    calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),0x2e037073,0x3ba3198a);\n    result_array[1] = calculation1;\n    return 1;\n  }\n  if (0x413921fb < modified_flag) {\n    if (0x7fefffff < modified_flag) {\n      calculation1 = perform_arithmetic_operation_080082d0(input_value,input_flag,input_value,input_flag);\n      result_array[1] = calculation1;\n      *result_array = calculation1;\n      return 0;\n    }\n    shift_value = ((int)modified_flag >> 0x14) + -0x416;\n    calculate_shifted_value_08008ba0();\n    temp_value3 = bitwise_shift_and_concat_0800856c();\n    calculation1 = perform_arithmetic_operation_080082d0(input_value,modified_flag + shift_value * -0x100000,(int)temp_value3,\n                          (int)((ulonglong)temp_value3 >> 0x20));\n    calculation1 = calculate_improved_result_08008640((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),0,0x41700000);\n    calculate_shifted_value_08008ba0();\n    temp_value4 = bitwise_shift_and_concat_0800856c();\n    calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,(int)((ulonglong)calculation1 >> 0x20));\n    temp_value5 = calculate_improved_result_08008640((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),0,0x41700000);\n    validate_and_return_08008b10((int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20),0,0);\n    shift_value = calculate_result_0800a5a0(&temp_value3,result_array,shift_value);\n    if (-1 < (int)input_flag) {\n      return shift_value;\n    }\n    *(int *)((int)result_array + 4) = *(int *)((int)result_array + 4) + -0x80000000;\n    *(int *)((int)result_array + 0xc) = *(int *)((int)result_array + 0xc) + -0x80000000;\n    return -shift_value;\n  }\n  calculation1 = FUNC_0800b2cc();\n  value3 = (undefined4)((ulonglong)calculation1 >> 0x20);\n  calculation2 = calculate_improved_result_08008640((int)calculation1,value3,0x6dc9c883,0x3fe45f30);\n  optimized_function_080082d4((int)calculation2,(int)((ulonglong)calculation2 >> 0x20),0,0x3fe00000);\n  shift_value = calculate_shifted_value_08008ba0();\n  calculation2 = bitwise_shift_and_concat_0800856c();\n  value4 = (undefined4)((ulonglong)calculation2 >> 0x20);\n  value1 = (undefined4)calculation2;\n  calculation2 = calculate_improved_result_08008640(value1,value4,0x54400000,0x3ff921fb);\n  calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,value3,(int)calculation2,(int)((ulonglong)calculation2 >> 0x20));\n  value5 = (undefined4)((ulonglong)calculation1 >> 0x20);\n  value3 = (undefined4)calculation1;\n  calculation2 = calculate_improved_result_08008640(value1,value4,0x1a626331,0x3dd0b461);\n  if ((0x1f < shift_value) || (*(uint *)(&DAT_0800be98 + (shift_value + -1) * 4) == modified_flag)) {\n    calculation3 = perform_arithmetic_operation_080082d0(value3,value5,(int)calculation2,(int)((ulonglong)calculation2 >> 0x20));\n    if ((int)((modified_flag >> 0x14) - ((uint)((int)((ulonglong)calculation3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    calculation2 = calculate_improved_result_08008640(value1,value4,0x1a600000,0x3dd0b461);\n    value6 = (undefined4)((ulonglong)calculation2 >> 0x20);\n    calculation1 = perform_arithmetic_operation_080082d0(value3,value5,(int)calculation2,value6);\n    value7 = (undefined4)((ulonglong)calculation1 >> 0x20);\n    value2 = (undefined4)calculation1;\n    calculation3 = perform_arithmetic_operation_080082d0(value3,value5,value2,value7);\n    calculation2 = perform_arithmetic_operation_080082d0((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),(int)calculation2,value6);\n    calculation3 = calculate_improved_result_08008640(value1,value4,0x2e037073,0x3ba3198a);\n    calculation2 = perform_arithmetic_operation_080082d0((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),(int)calculation2,\n                          (int)((ulonglong)calculation2 >> 0x20));\n    calculation3 = perform_arithmetic_operation_080082d0(value2,value7,(int)calculation2,(int)((ulonglong)calculation2 >> 0x20));\n    if ((int)(((int)modified_flag >> 0x14) - ((uint)((int)((ulonglong)calculation3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    calculation2 = calculate_improved_result_08008640(value1,value4,0x2e000000,0x3ba3198a);\n    value3 = (undefined4)((ulonglong)calculation2 >> 0x20);\n    calculation1 = perform_arithmetic_operation_080082d0(value2,value7,(int)calculation2,value3);\n    calculation3 = perform_arithmetic_operation_080082d0(value2,value7);\n    calculation2 = perform_arithmetic_operation_080082d0((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),(int)calculation2,value3);\n    calculation3 = calculate_improved_result_08008640(value1,value4,0x252049c1,0x397b839a);\n    calculation2 = perform_arithmetic_operation_080082d0((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),(int)calculation2,\n                          (int)((ulonglong)calculation2 >> 0x20));\n  }\n  calculation3 = perform_arithmetic_operation_080082d0((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),(int)calculation2,\n                        (int)((ulonglong)calculation2 >> 0x20));\nLAB_0800a0ce:\n  temp_value2 = (undefined4)((ulonglong)calculation1 >> 0x20);\n  temp_value1 = (undefined4)calculation1;\n  *result_array = calculation3;\n  calculation1 = perform_arithmetic_operation_080082d0(temp_value1,temp_value2);\n  calculation1 = perform_arithmetic_operation_080082d0((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),(int)calculation2,\n                        (int)((ulonglong)calculation2 >> 0x20));\n  result_array[1] = calculation1;\n  if ((int)input_flag < 0) {\n    *(int *)result_array = (int)calculation3;\n    *(int *)((int)result_array + 4) = (int)((ulonglong)calculation3 >> 0x20) + -0x80000000;\n    *(int *)(result_array + 1) = (int)calculation1;\n    *(int *)((int)result_array + 0xc) = (int)((ulonglong)calculation1 >> 0x20) + -0x80000000;\n    shift_value = -shift_value;\n  }\n  return shift_value;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "improve_and_validate_result_08009d78",
                "param_1": "input_value",
                "param_2": "input_flag",
                "param_3": "result_array",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "value3",
                "uVar4": "value4",
                "uVar5": "value5",
                "uVar6": "value6",
                "uVar7": "value7",
                "uVar8": "modified_flag",
                "iVar9": "shift_value",
                "uVar10": "calculation1",
                "uVar11": "calculation2",
                "uVar12": "calculation3",
                "local_50": "temp_value1",
                "uStack_4c": "temp_value2",
                "local_40": "temp_value3",
                "local_38": "temp_value4",
                "local_30": "temp_value5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_result_0800a1bc",
            "code": "\nuint calculate_result_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint quotient;\n  int counter;\n  uint temp;\n  undefined4 result_1;\n  uint shift_counter;\n  uint mask;\n  uint remainder;\n  uint subtraction_result;\n  uint input_shift;\n  int loop_counter;\n  uint new_input;\n  uint num_shifts;\n  undefined8 improved_result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    improved_result = calculate_improved_result_08008640(input_1,input_2,input_1,input_2);\n    remainder = optimized_function_080082d4((int)improved_result,(int)((ulonglong)improved_result >> 0x20),input_1,input_2);\n    return remainder;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      improved_result = perform_arithmetic_operation_080082d0(input_1,input_2,input_1);\n      result_1 = (undefined4)((ulonglong)improved_result >> 0x20);\n      remainder = calculate_float_08008894((int)improved_result,result_1,(int)improved_result,result_1);\n      return remainder;\n    }\n    do {\n      input_shift = input_1;\n      remainder = input_shift >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = input_shift << 0x15;\n    } while (remainder == 0);\n    quotient = input_2;\n    if (-1 < (int)input_shift) goto LAB_0800a290;\n    num_shifts = 0x20;\n    shift_counter = 0xffffffff;\n    input_shift = input_1;\n  }\n  else {\n    quotient = (int)input_2 >> 0x14;\n    remainder = input_2;\n    input_shift = input_1;\n    if (quotient != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    input_shift = 0;\n    num_shifts = remainder;\n    do {\n      shift_counter = input_shift;\n      remainder = num_shifts << 1;\n      loop_counter = num_shifts << 0xc;\n      input_shift = shift_counter + 1;\n      num_shifts = remainder;\n    } while (-1 < loop_counter);\n    num_shifts = 0x20 - input_shift;\n    input_2 = quotient;\n    input_shift = input_1 << (input_shift & 0xff);\n  }\n  remainder = input_1 >> (num_shifts & 0xff) | remainder;\n  quotient = input_2 - shift_counter;\nLAB_0800a1da:\n  remainder = remainder & 0xfffff | 0x100000;\n  if (-1 < (int)(quotient << 0x1f)) {\n    remainder = remainder * 2 - ((int)input_shift >> 0x1f);\n    input_shift = input_shift << 1;\n  }\n  num_shifts = 0;\n  remainder = remainder * 2 - ((int)input_shift >> 0x1f);\n  input_shift = input_shift << 1;\n  quotient = 0;\n  loop_counter = 0x16;\n  shift_counter = 0x200000;\n  do {\n    counter = quotient + shift_counter;\n    if (counter <= (int)remainder) {\n      remainder = remainder - counter;\n      quotient = counter + shift_counter;\n      num_shifts = num_shifts + shift_counter;\n    }\n    loop_counter = loop_counter + -1;\n    remainder = remainder * 2 - ((int)input_shift >> 0x1f);\n    shift_counter = shift_counter >> 1;\n    input_shift = input_shift << 1;\n  } while (loop_counter != 0);\n  counter = 0x20;\n  mask = 0x80000000;\n  loop_counter = 0;\n  shift_counter = 0;\n  do {\n    temp = mask + loop_counter;\n    new_input = quotient;\n    if ((int)quotient < (int)remainder) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + mask)) {\n          new_input = quotient + 1;\n        }\n      }\n      subtraction_result = remainder - quotient;\n      quotient = new_input;\n      if (input_shift < temp) {\n        subtraction_result = subtraction_result - 1;\n      }\nLAB_0800a262:\n      loop_counter = temp + mask;\n      input_shift = input_shift - temp;\n      shift_counter = shift_counter + mask;\n      remainder = subtraction_result;\n    }\n    else if ((remainder == quotient) && (temp <= input_shift)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      subtraction_result = 0;\n      quotient = remainder;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    mask = mask >> 1;\n    remainder = remainder * 2 - ((int)input_shift >> 0x1f);\n    input_shift = input_shift << 1;\n    if (counter == 0) {\n      if ((remainder | input_shift) == 0) {\n        shift_counter = shift_counter >> 1;\n      }\n      else if (shift_counter == 0xffffffff) {\n        num_shifts = num_shifts + 1;\n        shift_counter = 0;\n      }\n      else {\n        shift_counter = shift_counter + 1 >> 1;\n      }\n      if ((num_shifts & 1) != 0) {\n        shift_counter = shift_counter | 0x80000000;\n      }\n      return shift_counter;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_result_0800a1bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "quotient",
                "iVar2": "counter",
                "uVar3": "temp",
                "uVar4": "result_1",
                "uVar5": "shift_counter",
                "uVar6": "mask",
                "uVar7": "remainder",
                "uVar8": "subtraction_result",
                "uVar9": "input_shift",
                "iVar10": "loop_counter",
                "uVar11": "new_input",
                "uVar12": "num_shifts",
                "uVar13": "improved_result"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_improved_value_0800a348",
            "code": "\nundefined4 calculate_improved_value_0800a348(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int shifted_value;\n  undefined4 result_lower;\n  undefined4 result_upper;\n  uint normalized_input_2;\n  undefined8 improved_result_1;\n  undefined8 improved_result_2;\n  undefined8 improved_result_3;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  \n  normalized_input_2 = input_2 & 0x7fffffff;\n  if (normalized_input_2 < 0x3e400000) {\n    shifted_value = calculate_shifted_value_08008ba0();\n    if (shifted_value == 0) {\n      return 0;\n    }\n    improved_result_1 = calculate_improved_result_08008640(input_1,input_2,input_1,input_2);\n    result_upper = (undefined4)((ulonglong)improved_result_1 >> 0x20);\n    result_lower = (undefined4)improved_result_1;\n    improved_result_2 = calculate_improved_result_08008640(result_lower,result_upper,0xbe8838d4,0xbda8fae9);\n    improved_result_2 = optimized_function_080082d4((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = perform_arithmetic_operation_080082d0((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x809c52ad,0x3e927e4f);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = optimized_function_080082d4((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x19cb1590,0x3efa01a0);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = perform_arithmetic_operation_080082d0((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x16c15177,0x3f56c16c);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = optimized_function_080082d4((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x5555554c,0x3fa55555);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n  }\n  else {\n    improved_result_1 = calculate_improved_result_08008640(input_1,input_2,input_1,input_2);\n    result_upper = (undefined4)((ulonglong)improved_result_1 >> 0x20);\n    result_lower = (undefined4)improved_result_1;\n    improved_result_2 = calculate_improved_result_08008640(result_lower,result_upper,0xbe8838d4,0xbda8fae9);\n    improved_result_2 = optimized_function_080082d4((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = perform_arithmetic_operation_080082d0((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x809c52ad,0x3e927e4f);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = optimized_function_080082d4((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x19cb1590,0x3efa01a0);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = perform_arithmetic_operation_080082d0((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x16c15177,0x3f56c16c);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    improved_result_2 = optimized_function_080082d4((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),0x5555554c,0x3fa55555);\n    improved_result_2 = calculate_improved_result_08008640((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),result_lower,result_upper);\n    if (0x3fd33332 < normalized_input_2) {\n      if (normalized_input_2 < 0x3fe90001) {\n        shifted_value = normalized_input_2 - 0x200000;\n        improved_result_1 = perform_arithmetic_operation_080082d0(0,0x3ff00000,0,shifted_value);\n      }\n      else {\n        shifted_value = 0x3fd20000;\n        improved_result_1 = 0x3fe7000000000000;\n      }\n      temp_4 = (undefined4)((ulonglong)improved_result_1 >> 0x20);\n      temp_3 = (undefined4)improved_result_1;\n      improved_result_1 = calculate_improved_result_08008640(result_lower,result_upper,0,0x3fe00000);\n      improved_result_1 = perform_arithmetic_operation_080082d0((int)improved_result_1,(int)((ulonglong)improved_result_1 >> 0x20),0,shifted_value);\n      improved_result_2 = calculate_improved_result_08008640(result_lower,result_upper,(int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20));\n      improved_result_3 = calculate_improved_result_08008640(input_1,input_2,input_3,input_4);\n      improved_result_2 = perform_arithmetic_operation_080082d0((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),(int)improved_result_3,\n                           (int)((ulonglong)improved_result_3 >> 0x20));\n      improved_result_1 = perform_arithmetic_operation_080082d0((int)improved_result_1,(int)((ulonglong)improved_result_1 >> 0x20),(int)improved_result_2,\n                           (int)((ulonglong)improved_result_2 >> 0x20));\n      result_lower = perform_arithmetic_operation_080082d0(temp_3,temp_4,(int)improved_result_1,(int)((ulonglong)improved_result_1 >> 0x20));\n      return result_lower;\n    }\n  }\n  temp_2 = (undefined4)((ulonglong)improved_result_2 >> 0x20);\n  temp_1 = (undefined4)improved_result_2;\n  result_lower = (undefined4)((ulonglong)improved_result_1 >> 0x20);\n  improved_result_2 = calculate_improved_result_08008640((int)improved_result_1,result_lower,0,0x3fe00000);\n  improved_result_1 = calculate_improved_result_08008640((int)improved_result_1,result_lower,temp_1,temp_2);\n  improved_result_3 = calculate_improved_result_08008640(input_1,input_2,input_3,input_4);\n  improved_result_1 = perform_arithmetic_operation_080082d0((int)improved_result_1,(int)((ulonglong)improved_result_1 >> 0x20),(int)improved_result_3,\n                       (int)((ulonglong)improved_result_3 >> 0x20));\n  improved_result_1 = perform_arithmetic_operation_080082d0((int)improved_result_2,(int)((ulonglong)improved_result_2 >> 0x20),(int)improved_result_1,\n                       (int)((ulonglong)improved_result_1 >> 0x20));\n  result_lower = perform_arithmetic_operation_080082d0(0,0x3ff00000,(int)improved_result_1,(int)((ulonglong)improved_result_1 >> 0x20));\n  return result_lower;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_improved_value_0800a348",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_value",
                "uVar2": "result_lower",
                "uVar3": "result_upper",
                "uVar4": "normalized_input_2",
                "uVar5": "improved_result_1",
                "uVar6": "improved_result_2",
                "uVar7": "improved_result_3",
                "local_30": "temp_1",
                "uStack_2c": "temp_2",
                "local_28": "temp_3",
                "uStack_24": "temp_4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_result_0800a5a0(int input_1,undefined8 *output,int input_2,int input_3,int input_4,int input_5)\n\n{\n  undefined4 *ptr1;\n  uint result;\n  uint temp;\n  int count;\n  uint *ptr2;\n  undefined4 shifted_result;\n  uint **ptr3;\n  undefined4 temp2;\n  int i;\n  undefined4 *ptr4;\n  undefined4 temp3;\n  uint temp4;\n  uint *ptr5;\n  int temp_i;\n  int temp_j;\n  undefined8 *ptr6;\n  int j;\n  undefined4 *ptr7;\n  undefined8 *ptr19;\n  undefined4 temp5;\n  int temp6;\n  undefined8 *ptr8;\n  undefined4 *ptr9;\n  bool bool_var1;\n  undefined8 temp7;\n  undefined8 result2;\n  undefined8 temp8;\n  undefined8 *local_ptr1;\n  int local_count;\n  int local_shift;\n  int local_temp1;\n  uint *local_arr [2];\n  uint local_arr2 [20];\n  undefined8 temp_stack_var1;\n  undefined8 local_var1;\n  int local_arr3 [38];\n  undefined8 temp_stack_var2;\n  \n  temp_j = *(int *)(&DAT_0800c060 + input_4 * 4);\n  i = input_3 + -1;\n  local_arr[1] = (uint *)output;\n  if (input_2 + 0x14 < 0 == SCARRY4(input_2,0x14)) {\n    local_temp1 = (input_2 + -3) / 0x18;\n    local_shift = (local_temp1 + 1) * -0x18;\n  }\n  else {\n    local_shift = -0x18;\n    local_temp1 = 0;\n  }\n  local_shift = input_2 + local_shift;\n  j = local_temp1 - i;\n  if (-1 < temp_j + i) {\n    temp6 = temp_j + i + 1 + j;\n    ptr6 = &temp_stack_var1;\n    do {\n      while (j < 0) {\n        j = j + 1;\n        *(undefined4 *)ptr6 = 0;\n        *(undefined4 *)((int)ptr6 + 4) = 0;\n        ptr6 = ptr6 + 1;\n        if (j == temp6) goto LAB_0800a626;\n      }\n      result2 = bitwise_shift_and_concat_0800856c(*(undefined4 *)(input_5 + j * 4));\n      j = j + 1;\n      *ptr6 = result2;\n      ptr6 = ptr6 + 1;\n    } while (j != temp6);\n  }\nLAB_0800a626:\n  ptr4 = (undefined4 *)(input_1 + -8);\n  if (-1 < temp_j) {\n    ptr8 = &temp_stack_var1 + input_3;\n    j = i;\n    ptr6 = &temp_stack_var2;\n    do {\n      if (i < 0) {\n        result2 = 0;\n      }\n      else {\n        result2 = 0;\n        ptr9 = ptr4;\n        ptr19 = ptr8;\n        do {\n          ptr7 = ptr9 + 2;\n          temp7 = calculate_improved_result_08008640(*ptr7,ptr9[3],*(undefined4 *)(ptr19 + -1),\n                                *(undefined4 *)((int)ptr19 + -4));\n          result2 = optimized_function_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          ptr9 = ptr7;\n          ptr19 = ptr19 + -1;\n        } while (ptr7 != ptr4 + input_3 * 2);\n      }\n      j = j + 1;\n      *ptr6 = result2;\n      ptr8 = ptr8 + 1;\n      ptr6 = ptr6 + 1;\n    } while (j != temp_j + input_3);\n  }\n  local_arr[0] = local_arr2 + temp_j + -1;\n  j = temp_j;\n  do {\n    result2 = CONCAT44(*(undefined4 *)((int)&temp_stack_var2 + j * 8 + 4),\n                      *(undefined4 *)(&temp_stack_var2 + j));\n    if (0 < j) {\n      ptr6 = &temp_stack_var2 + j;\n      ptr2 = local_arr2;\n      do {\n        shifted_result = (undefined4)((ulonglong)result2 >> 0x20);\n        calculate_improved_result_08008640((int)result2,shifted_result,0,0x3e700000);\n        calculate_shifted_value_08008ba0();\n        temp7 = bitwise_shift_and_concat_0800856c();\n        temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n        temp8 = calculate_improved_result_08008640((int)temp7,temp2,0,0x41700000);\n        perform_arithmetic_operation_080082d0((int)result2,shifted_result,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n        result = calculate_shifted_value_08008ba0();\n        ptr8 = ptr6 + -1;\n        shifted_result = *(undefined4 *)ptr8;\n        temp3 = *(undefined4 *)((int)ptr6 + -4);\n        *ptr2 = result;\n        result2 = optimized_function_080082d4((int)temp7,temp2,shifted_result,temp3);\n        ptr6 = ptr8;\n        ptr2 = ptr2 + 1;\n      } while (ptr8 != &temp_stack_var2);\n    }\n    result2 = calculate_result_0800a5a0_with_conditions_0800b2e8((int)result2,(int)((ulonglong)result2 >> 0x20),local_shift);\n    temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n    calculate_improved_result_08008640((int)result2,temp2,0,0x3fc00000);\n    temp7 = calculate_result_0800a5a0_080094c0();\n    temp7 = calculate_improved_result_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x40200000);\n    result2 = perform_arithmetic_operation_080082d0((int)result2,temp2,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    result = calculate_shifted_value_08008ba0();\n    temp7 = bitwise_shift_and_concat_0800856c();\n    result2 = perform_arithmetic_operation_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp7,\n                          (int)((ulonglong)temp7 >> 0x20));\n    shifted_result = (undefined4)((ulonglong)result2 >> 0x20);\n    temp2 = (undefined4)result2;\n    if (local_shift < 1) {\n      if (local_shift == 0) {\n        temp6 = (int)local_arr2[j + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp6 = check_for_zero_flags_08008b4c(temp2,shifted_result,0,0x3fe00000);\n      if (temp6 != 0) {\n        result = result + 1;\n        if (j < 1) {\n          result2 = perform_arithmetic_operation_080082d0(0,0x3ff00000,temp2,shifted_result);\n          temp6 = 2;\n          goto LAB_0800a7a4;\n        }\n        temp6 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      count = (int)local_arr2[j + -1] >> (0x18U - local_shift & 0xff);\n      temp4 = local_arr2[j + -1] - (count << (0x18U - local_shift & 0xff));\n      temp6 = (int)temp4 >> (0x17U - local_shift & 0xff);\n      local_arr2[j + -1] = temp4;\n      result = result + count;\njoined_r0x0800a8b8:\n      if (0 < temp6) {\n        result = result + 1;\n        if (j < 1) {\n          bool_var1 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_arr2[0] == 0) {\n            bool_var1 = false;\n            if (j != 1) {\n              ptr2 = local_arr2;\n              count = 1;\n              do {\n                ptr2 = ptr2 + 1;\n                if (*ptr2 != 0) {\n                  temp_i = count + 1;\n                  temp4 = *ptr2;\n                  goto LAB_0800a8e2;\n                }\n                count = count + 1;\n              } while (count != j);\n              bool_var1 = false;\n            }\n          }\n          else {\n            temp_i = 1;\n            count = 0;\n            temp4 = local_arr2[0];\nLAB_0800a8e2:\n            local_arr2[count] = 0x1000000 - temp4;\n            if (temp_i < j) {\n              temp4 = local_arr2[temp_i];\n              ptr2 = local_arr2 + temp_i;\n              while( true ) {\n                ptr5 = ptr2 + 1;\n                *ptr2 = 0xffffff - temp4;\n                if (ptr5 == local_arr2 + j) break;\n                temp4 = *ptr5;\n                ptr2 = ptr5;\n              }\n            }\n            bool_var1 = true;\n          }\n        }\n        if (0 < local_shift) {\n          if (local_shift == 1) {\n            local_arr2[j + -1] = local_arr2[j + -1] & 0x7fffff;\n          }\n          else if (local_shift == 2) {\n            local_arr2[j + -1] = local_arr2[j + -1] & 0x3fffff;\n          }\n        }\n        if (temp6 == 2) {\n          result2 = perform_arithmetic_operation_080082d0(0,0x3ff00000,temp2,shifted_result);\n          if (bool_var1) {\n            temp7 = calculate_result_0800a5a0_with_conditions_0800b2e8(0,0x3ff00000,local_shift);\n            result2 = perform_arithmetic_operation_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp7,\n                                  (int)((ulonglong)temp7 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n    count = validate_and_return_08008b10((int)result2,temp2,0,0);\n    if (count == 0) {\n      result2 = calculate_result_0800a5a0_with_conditions_0800b2e8((int)result2,temp2,-local_shift);\n      shifted_result = (undefined4)((ulonglong)result2 >> 0x20);\n      temp2 = (undefined4)result2;\n      i = check_for_zero_flags_08008b4c(temp2,shifted_result,0,0x41700000);\n      if (i == 0) {\n        temp4 = calculate_shifted_value_08008ba0(temp2,shifted_result);\n        local_arr2[j] = temp4;\n        count = j;\n      }\n      else {\n        calculate_improved_result_08008640(temp2,shifted_result,0,0x3e700000);\n        temp4 = calculate_shifted_value_08008ba0();\n        result2 = bitwise_shift_and_concat_0800856c();\n        result2 = calculate_improved_result_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x41700000);\n        perform_arithmetic_operation_080082d0(temp2,shifted_result,(int)result2,(int)((ulonglong)result2 >> 0x20));\n        temp = calculate_shifted_value_08008ba0();\n        local_shift = local_shift + 0x18;\n        local_arr2[j] = temp;\n        local_arr2[j + 1] = temp4;\n        count = j + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    count = j + -1;\n    if (temp_j <= count) {\n      temp4 = 0;\n      ptr2 = local_arr2 + j + 0x3fffffff;\n      do {\n        ptr5 = ptr2 + -1;\n        temp4 = temp4 | *ptr2;\n        ptr2 = ptr5;\n      } while (ptr5 != local_arr[0]);\n      if (temp4 != 0) break;\n    }\n    if (local_arr2[temp_j + -1] == 0) {\n      local_count = 1;\n      ptr3 = local_arr + temp_j;\n      do {\n        ptr2 = *ptr3;\n        local_count = local_count + 1;\n        ptr3 = ptr3 + -1;\n      } while (ptr2 == (uint *)0x0);\n      local_count = j + local_count;\n    }\n    else {\n      local_count = j + 1;\n    }\n    temp6 = j + 1;\n    ptr9 = (undefined4 *)(input_5 + (temp6 + local_temp1 + 0x3fffffff) * 4);\n    ptr6 = &temp_stack_var1 + j + input_3;\n    local_ptr1 = &temp_stack_var2 + temp6;\n    do {\n      ptr9 = ptr9 + 1;\n      result2 = bitwise_shift_and_concat_0800856c(*ptr9);\n      *ptr6 = result2;\n      ptr8 = ptr6 + 1;\n      if (i < 0) {\n        temp7 = 0;\n      }\n      else {\n        temp7 = 0;\n        ptr7 = ptr4;\n        while( true ) {\n          ptr6 = ptr6 + -1;\n          ptr1 = ptr7 + 2;\n          result2 = calculate_improved_result_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),*ptr1,ptr7[3]);\n          temp7 = optimized_function_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)result2,\n                                (int)((ulonglong)result2 >> 0x20));\n          if (ptr1 == ptr4 + input_3 * 2) break;\n          result2 = *ptr6;\n          ptr7 = ptr1;\n        }\n      }\n      *local_ptr1 = temp7;\n      temp6 = temp6 + 1;\n      j = local_count;\n      ptr6 = ptr8;\n      local_ptr1 = local_ptr1 + 1;\n    } while (temp6 <= local_count);\n  } while( true );\n  local_shift = local_shift + -0x18;\n  if (local_arr2[count] == 0) {\n    ptr2 = local_arr2 + j + 0x3ffffffe;\n    do {\n      temp4 = *ptr2;\n      count = count + -1;\n      local_shift = local_shift + -0x18;\n      ptr2 = ptr2 + -1;\n    } while (temp4 == 0);\n  }\nLAB_0800a9f6:\n  result2 = calculate_result_0800a5a0_with_conditions_0800b2e8(0,0x3ff00000,local_shift);\n  if (count < 0) {\n    if (2 < input_4) {\n      if (input_4 == 3) {\n        result2 = 0;\nLAB_0800abe4:\n        if (temp6 == 0) {\n          *local_arr[1] = (undefined4)local_var1;\n          *(int *)((int)local_arr[1] + 4) = local_var1._4_4_;\n          *(undefined8 *)((int)local_arr[1] + 0x10) = result2;\n          *(int *)((int)local_arr[1] + 8) = local_arr3[0];\n          *(int *)((int)local_arr[1] + 0xc) = local_arr3[1];\n          return result & 7;\n        }\n        *(int *)((int)local_arr[1] + 0x10) = (int)result2;\n        *(int *)((int)local_arr[1] + 8) = local_arr3[0];\n        *(int *)((int)local_arr[1] + 0x14) = (int)((ulonglong)result2 >> 0x20) + -0x80000000;\n        *(int *)((int)local_arr[1] + 4) = local_var1._4_4_ + -0x80000000;\n        *(int *)((int)local_arr[1] + 0xc) = local_arr3[1] + -0x80000000;\n        *local_arr[1] = (undefined4)local_var1;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input_4 < 1) {\n      if (input_4 != 0) goto LAB_0800ab0e;\n      result2 = 0;\nLAB_0800aafc:\n      i = (int)((ulonglong)result2 >> 0x20);\n      if (temp6 != 0) {\n        i = i + -0x80000000;\n      }\n      *local_arr[1] = (int)result2;\n      *(int *)((int)local_arr[1] + 4) = i;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    result2 = 0;\n  }\n  else {\n    ptr8 = &temp_stack_var2 + count;\n    ptr2 = local_arr2 + count + 1;\n    ptr6 = &temp_stack_var2 + count + 1;\n    do {\n      temp2 = (undefined4)((ulonglong)result2 >> 0x20);\n      ptr2 = ptr2 + -1;\n      temp7 = bitwise_shift_and_concat_0800856c(*ptr2);\n      temp7 = calculate_improved_result_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)result2,temp2);\n      ptr6 = ptr6 + -1;\n      *ptr6 = temp7;\n      result2 = calculate_improved_result_08008640((int)result2,temp2,0,0x3e700000);\n    } while (ptr2 != local_arr2);\n    i = 0;\n    do {\n      if (temp_j < 0) {\n        result2 = 0;\n      }\n      else {\n        temp2 = 0x40000000;\n        shifted_result = 0x3ff921fb;\n        result2 = 0;\n        j = 0;\n        ptr6 = ptr8;\n        ptr4 = &DAT_0800c028;\n        while( true ) {\n          temp7 = calculate_improved_result_08008640(*(undefined4 *)ptr6,*(undefined4 *)((int)ptr6 + 4),temp2,shifted_result\n                               );\n          result2 = optimized_function_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          j = j + 1;\n          if ((temp_j < j) || (i < j)) break;\n          temp2 = *ptr4;\n          shifted_result = ptr4[1];\n          ptr6 = ptr6 + 1;\n          ptr4 = ptr4 + 2;\n        }\n      }\n      bool_var1 = i != count;\n      *(int *)(&local_var1 + i) = (int)result2;\n      *(int *)((int)&local_var1 + (i * 2 + 1) * 4) = (int)((ulonglong)result2 >> 0x20);\n      ptr8 = ptr8 + -1;\n      i = i + 1;\n    } while (bool_var1);\n    if (2 < input_4) {\n      if (input_4 == 3) {\n        if (count != 0) {\n          ptr6 = &local_var1 + count;\n          result2 = CONCAT44(*(undefined4 *)((int)&local_var1 + (count * 2 + 1) * 4),\n                            *(undefined4 *)ptr6);\n          do {\n            shifted_result = (undefined4)((ulonglong)result2 >> 0x20);\n            temp2 = (undefined4)result2;\n            temp3 = *(undefined4 *)(ptr6 + -1);\n            temp5 = *(undefined4 *)((int)ptr6 + -4);\n            result2 = optimized_function_080082d4(temp2,shifted_result,temp3,temp5);\n            temp7 = perform_arithmetic_operation_080082d0(temp3,temp5,(int)result2,(int)((ulonglong)result2 >> 0x20));\n            temp7 = optimized_function_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp2,shifted_result);\n            *ptr6 = temp7;\n            ptr6 = ptr6 + -1;\n            *ptr6 = result2;\n          } while (&local_var1 != ptr6);\n          if (1 < count) {\n            ptr6 = &local_var1 + count;\n            result2 = CONCAT44(*(undefined4 *)((int)&local_var1 + (count * 2 + 1) * 4),\n                              *(undefined4 *)ptr6);\n            do {\n              shifted_result = (undefined4)((ulonglong)result2 >> 0x20);\n              temp2 = (undefined4)result2;\n              temp3 = *(undefined4 *)(ptr6 + -1);\n              temp5 = *(undefined4 *)((int)ptr6 + -4);\n              result2 = optimized_function_080082d4(temp2,shifted_result,temp3,temp5);\n              temp7 = perform_arithmetic_operation_080082d0(temp3,temp5,(int)result2,(int)((ulonglong)result2 >> 0x20));\n              temp7 = optimized_function_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp2,shifted_result);\n              *ptr6 = temp7;\n              ptr6 = ptr6 + -1;\n              *ptr6 = result2;\n            } while (&local_var1 + 1 != ptr6);\n            result2 = 0;\n            ptr6 = &local_var1 + count + 1;\n            do {\n              ptr8 = ptr6 + -1;\n              result2 = optimized_function_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),\n                                    *(undefined4 *)ptr8,*(undefined4 *)((int)ptr6 + -4));\n              ptr6 = ptr8;\n            } while (&local_var1 + 2 != ptr8);\n            goto LAB_0800abe4;\n          }\n        }\n        result2 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input_4 < 1) {\n      if (input_4 != 0) goto LAB_0800ab0e;\n      result2 = 0;\n      ptr6 = &local_var1 + count + 1;\n      do {\n        ptr8 = ptr6 + -1;\n        result2 = optimized_function_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),*(undefined4 *)ptr8,\n                              *(undefined4 *)((int)ptr6 + -4));\n        ptr6 = ptr8;\n      } while (&local_var1 != ptr8);\n      goto LAB_0800aafc;\n    }\n    result2 = 0;\n    ptr6 = &local_var1 + count + 1;\n    do {\n      ptr8 = ptr6 + -1;\n      result2 = optimized_function_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),*(undefined4 *)ptr8,\n                            *(undefined4 *)((int)ptr6 + -4));\n      ptr6 = ptr8;\n    } while (&local_var1 != ptr8);\n  }\n  i = (int)((ulonglong)result2 >> 0x20);\n  temp2 = (undefined4)result2;\n  if (temp6 == 0) {\n    *(undefined8 *)local_arr[1] = result2;\n    result2 = perform_arithmetic_operation_080082d0((undefined4)local_var1,local_var1._4_4_,temp2,i);\n    if (count < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    i = 1;\n    ptr6 = &local_var1;\n    do {\n      result2 = optimized_function_080082d4((int)result2,(int)((ulonglong)result2 >> 0x20),\n                            *(undefined4 *)(ptr6 + 1),*(undefined4 *)((int)ptr6 + 0xc));\n      i = i + 1;\n      ptr6 = ptr6 + 1;\n    } while (i <= count);\n    if (temp6 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_arr[1] = temp2;\n    *(int *)((int)local_arr[1] + 4) = i + -0x80000000;\n    result2 = perform_arithmetic_operation_080082d0((undefined4)local_var1,local_var1._4_4_,temp2,i);\n    if (0 < count) goto LAB_0800ad04;\n  }\n  result2 = CONCAT44((int)((ulonglong)result2 >> 0x20) + -0x80000000,(int)result2);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_arr[1] + 8) = result2;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "param_1": "input_1",
                "param_2": "output",
                "param_3": "input_2",
                "param_4": "input_3",
                "param_5": "input_4",
                "param_6": "input_5",
                "puVar1": "ptr1",
                "uVar2": "result",
                "uVar3": "temp",
                "iVar4": "count",
                "puVar5": "ptr2",
                "uVar6": "shifted_result",
                "ppuVar7": "ptr3",
                "uVar8": "temp2",
                "iVar9": "i",
                "puVar10": "ptr4",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "puVar13": "ptr5",
                "iVar14": "temp_i",
                "iVar15": "temp_j",
                "puVar16": "ptr6",
                "iVar17": "j",
                "puVar18": "ptr7",
                "uVar20": "temp5",
                "iVar21": "temp6",
                "puVar22": "ptr8",
                "puVar23": "ptr9",
                "bVar24": "bool_var1",
                "uVar25": "temp7",
                "uVar26": "result2",
                "uVar27": "temp8",
                "local_284": "local_ptr1",
                "local_280": "local_count",
                "local_270": "local_shift",
                "local_26c": "local_temp1",
                "local_260": "local_arr",
                "local_258": "local_arr2",
                "uStack_208": "temp_stack_var1",
                "local_168": "local_var1",
                "local_160": "local_arr3",
                "uStack_c8": "temp_stack_var2"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_improved_value_0800adf0",
            "code": "\nundefined4\ncalculate_improved_value_0800adf0(undefined4 input_value,uint shift_value,undefined4 calculation_param_1,undefined4 calculation_param_2,int is_arithmetic)\n\n{\n  int shifted_value;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 temp_low2;\n  undefined8 function_result;\n  undefined8 temp_result;\n  \n  if (((shift_value & 0x7fffffff) < 0x3e400000) && (shifted_value = calculate_shifted_value(), shifted_value == 0)) {\n    return input_value;\n  }\n  function_result = calculate_improved_result(input_value,shift_value,input_value);\n  temp_low = (undefined4)((ulonglong)function_result >> 0x20);\n  result_high = (undefined4)function_result;\n  function_result = calculate_improved_result(input_value,shift_value,result_high,temp_low);\n  temp_high = (undefined4)((ulonglong)function_result >> 0x20);\n  result_low = (undefined4)function_result;\n  function_result = calculate_improved_result(result_high,temp_low,0x5acfd57c,0x3de5d93a);\n  function_result = perform_arithmetic_operation((int)function_result,(int)((ulonglong)function_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  function_result = calculate_improved_result((int)function_result,(int)((ulonglong)function_result >> 0x20),result_high,temp_low);\n  function_result = optimized_function((int)function_result,(int)((ulonglong)function_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  function_result = calculate_improved_result((int)function_result,(int)((ulonglong)function_result >> 0x20),result_high,temp_low);\n  function_result = perform_arithmetic_operation((int)function_result,(int)((ulonglong)function_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  function_result = calculate_improved_result((int)function_result,(int)((ulonglong)function_result >> 0x20),result_high,temp_low);\n  function_result = optimized_function((int)function_result,(int)((ulonglong)function_result >> 0x20),0x1110f8a6,0x3f811111);\n  temp_low2 = (undefined4)((ulonglong)function_result >> 0x20);\n  if (is_arithmetic != 0) {\n    temp_result = calculate_improved_result(calculation_param_1,calculation_param_2,0,0x3fe00000);\n    function_result = calculate_improved_result(result_low,temp_high,(int)function_result,temp_low2);\n    function_result = perform_arithmetic_operation((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)function_result,\n                         (int)((ulonglong)function_result >> 0x20));\n    function_result = calculate_improved_result((int)function_result,(int)((ulonglong)function_result >> 0x20),result_high,temp_low);\n    function_result = perform_arithmetic_operation((int)function_result,(int)((ulonglong)function_result >> 0x20),calculation_param_1,calculation_param_2);\n    temp_result = calculate_improved_result(result_low,temp_high,0x55555549,0x3fc55555);\n    function_result = optimized_function((int)function_result,(int)((ulonglong)function_result >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    result_high = perform_arithmetic_operation(input_value,shift_value,(int)function_result,(int)((ulonglong)function_result >> 0x20));\n    return result_high;\n  }\n  function_result = calculate_improved_result(result_high,temp_low,(int)function_result,temp_low2);\n  function_result = perform_arithmetic_operation((int)function_result,(int)((ulonglong)function_result >> 0x20),0x55555549,0x3fc55555);\n  function_result = calculate_improved_result((int)function_result,(int)((ulonglong)function_result >> 0x20),result_low,temp_high);\n  result_high = optimized_function((int)function_result,(int)((ulonglong)function_result >> 0x20),input_value,shift_value);\n  return result_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_improved_value_0800adf0",
                "param_1": "input_value",
                "param_2": "shift_value",
                "param_3": "calculation_param_1",
                "param_4": "calculation_param_2",
                "param_5": "is_arithmetic",
                "iVar1": "shifted_value",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "temp_low",
                "uVar5": "temp_high",
                "uVar6": "temp_low2",
                "uVar7": "function_result",
                "uVar8": "temp_result",
                "calculate_shifted_value_08008ba0": "calculate_shifted_value",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "perform_arithmetic_operation_080082d0": "perform_arithmetic_operation",
                "optimized_function_080082d4": "optimized_function"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "improve_and_check_value_0800af78",
            "code": "\nint improve_and_check_value_0800af78(int value,uint input)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int returnValue;\n  undefined4 result5;\n  uint positiveInput;\n  undefined8 combinedResults;\n  undefined8 floatResult;\n  undefined4 localResult;\n  \n  combinedResults = CONCAT44(input,value);\n  positiveInput = input & 0x7fffffff;\n  if (positiveInput < 0x44100000) {\n    if (positiveInput < 0x3fdc0000) {\n      if (positiveInput < 0x3e200000) {\n        floatResult = optimized_function_080082d4(value,input,0x8800759c,0x7e37e43c);\n        returnValue = check_if_string_is_empty_08008b60((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0,0x3ff00000);\n        if (returnValue != 0) {\n          return value;\n        }\n      }\n      returnValue = -1;\n    }\n    else {\n      combinedResults = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)combinedResults >> 0x20);\n      result1 = (undefined4)combinedResults;\n      if (positiveInput < 0x3ff30000) {\n        if (positiveInput < 0x3fe60000) {\n          combinedResults = optimized_function_080082d4(result1,result4,result1,result4);\n          combinedResults = perform_arithmetic_operation_080082d0((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),0,0x3ff00000);\n          floatResult = optimized_function_080082d4(result1,result4,0,0x40000000);\n          combinedResults = calculate_float_08008894((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),(int)floatResult,\n                               (int)((ulonglong)floatResult >> 0x20));\n          returnValue = 0;\n        }\n        else {\n          combinedResults = perform_arithmetic_operation_080082d0(result1,result4,0,0x3ff00000);\n          floatResult = optimized_function_080082d4(result1,result4,0,0x3ff00000);\n          combinedResults = calculate_float_08008894((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),(int)floatResult,\n                               (int)((ulonglong)floatResult >> 0x20));\n          returnValue = 1;\n        }\n      }\n      else if (positiveInput < 0x40038000) {\n        combinedResults = perform_arithmetic_operation_080082d0(result1,result4,0,0x3ff80000);\n        floatResult = calculate_improved_result_08008640(result1,result4,0,0x3ff80000);\n        floatResult = optimized_function_080082d4((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0,0x3ff00000);\n        combinedResults = calculate_float_08008894((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),(int)floatResult,\n                             (int)((ulonglong)floatResult >> 0x20));\n        returnValue = 2;\n      }\n      else {\n        combinedResults = calculate_float_08008894(0,0xbff00000,result1,result4);\n        returnValue = 3;\n      }\n    }\n    localResult = (undefined4)((ulonglong)combinedResults >> 0x20);\n    result5 = (undefined4)combinedResults;\n    combinedResults = calculate_improved_result_08008640(result5,localResult,result5);\n    result2 = (undefined4)((ulonglong)combinedResults >> 0x20);\n    result1 = (undefined4)combinedResults;\n    combinedResults = calculate_improved_result_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)combinedResults >> 0x20);\n    result4 = (undefined4)combinedResults;\n    combinedResults = calculate_improved_result_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    combinedResults = optimized_function_080082d4((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),0x24760deb,0x3fa97b4b);\n    combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result4,result3);\n    combinedResults = optimized_function_080082d4((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),0xa0d03d51,0x3fb10d66);\n    combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result4,result3);\n    combinedResults = optimized_function_080082d4((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),0xc54c206e,0x3fb745cd);\n    combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result4,result3);\n    combinedResults = optimized_function_080082d4((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),0x920083ff,0x3fc24924);\n    combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result4,result3);\n    combinedResults = optimized_function_080082d4((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),0x5555550d,0x3fd55555);\n    combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)combinedResults >> 0x20);\n    floatResult = calculate_improved_result_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    floatResult = perform_arithmetic_operation_080082d0((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0x52defd9a,0x3fadde2d);\n    floatResult = calculate_improved_result_08008640((int)floatResult,(int)((ulonglong)floatResult >> 0x20),result4,result3);\n    floatResult = perform_arithmetic_operation_080082d0((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    floatResult = calculate_improved_result_08008640((int)floatResult,(int)((ulonglong)floatResult >> 0x20),result4,result3);\n    floatResult = perform_arithmetic_operation_080082d0((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0xfe231671,0x3fbc71c6);\n    floatResult = calculate_improved_result_08008640((int)floatResult,(int)((ulonglong)floatResult >> 0x20),result4,result3);\n    floatResult = perform_arithmetic_operation_080082d0((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0x9998ebc4,0x3fc99999);\n    floatResult = calculate_improved_result_08008640((int)floatResult,(int)((ulonglong)floatResult >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)floatResult >> 0x20);\n    if (returnValue == -1) {\n      combinedResults = optimized_function_080082d4((int)combinedResults,result1,(int)floatResult,result4);\n      combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result5,localResult);\n      returnValue = perform_arithmetic_operation_080082d0(result5,localResult,(int)combinedResults,(int)((ulonglong)combinedResults >> 0x20));\n      return returnValue;\n    }\n    combinedResults = optimized_function_080082d4((int)combinedResults,result1,(int)floatResult,result4);\n    combinedResults = calculate_improved_result_08008640((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result5,localResult);\n    combinedResults = perform_arithmetic_operation_080082d0((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + returnValue * 8),\n                         *(undefined4 *)(&UNK_0800c094 + returnValue * 8));\n    combinedResults = perform_arithmetic_operation_080082d0((int)combinedResults,(int)((ulonglong)combinedResults >> 0x20),result5,localResult);\n    returnValue = perform_arithmetic_operation_080082d0(*(undefined4 *)(&UNK_0800c070 + returnValue * 8),\n                         *(undefined4 *)(&UNK_0800c074 + returnValue * 8),(int)combinedResults,\n                         (int)((ulonglong)combinedResults >> 0x20));\n    if ((int)input < 0) {\n      return returnValue;\n    }\n  }\n  else {\n    if ((0x7ff00000 < positiveInput) || ((positiveInput == 0x7ff00000 && (value != 0)))) {\n      returnValue = optimized_function_080082d4(value,input,value);\n      return returnValue;\n    }\n    returnValue = 0x54442d18;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "improve_and_check_value_0800af78",
                "param_1": "value",
                "param_2": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "returnValue",
                "uVar6": "result5",
                "uVar7": "positiveInput",
                "uVar8": "combinedResults",
                "uVar9": "floatResult",
                "local_2c": "localResult"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "truncate_and_shift_0800b2d4",
            "code": "\nuint truncateAndShift_0800b2d4(undefined4 result,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "truncate_and_shift_0800b2d4",
                "param_1": "result",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_with_conditions_0800b2e8",
            "code": "\nuint calculate_result_with_conditions_0800b2e8(uint input_param1,uint input_param2,int input_param3,undefined4 input_param4)\n\n{\n  uint shifted_param2;\n  int sum_condition;\n  uint high_bits_result;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(input_param2,input_param1);\n  shifted_param2 = (input_param2 << 1) >> 0x15;\n  if (shifted_param2 == 0) {\n    if ((input_param1 | input_param2 & 0x7fffffff) == 0) {\n      return input_param1;\n    }\n    combined_params = calculate_improved_result(input_param1,input_param2,0,0x43500000);\n    if (input_param3 < -50000) goto LAB_0800b34a;\n    shifted_param2 = ((uint)((int)((ulonglong)combined_params >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_param2 == 0x7ff) {\n    shifted_param2 = optimized_function(input_param1,input_param2,input_param1,input_param2,input_param4);\n    return shifted_param2;\n  }\n  high_bits_result = (uint)((ulonglong)combined_params >> 0x20);\n  sum_condition = shifted_param2 + input_param3;\n  if (sum_condition < 0x7ff) {\n    if (0 < sum_condition) {\n      return (uint)combined_params;\n    }\n    if (sum_condition + 0x35 < 0 == is_subtraction_carry(sum_condition,0x35)) {\n      shifted_param2 = calculate_improved_result((uint)combined_params,high_bits_result & 0x800fffff | (sum_condition + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_param2;\n    }\n    if (input_param3 < 0xc351) {\n      combined_params = CONCAT44(high_bits_result & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_param2 = calculate_improved_result((int)combined_params,(int)((ulonglong)combined_params >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_param2;\n    }\n  }\n  shifted_param2 = calculate_improved_result(0x8800759c,high_bits_result & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_param2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_with_conditions_0800b2e8",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "shifted_param2",
                "iVar2": "sum_condition",
                "uVar3": "high_bits_result",
                "uVar4": "combined_params",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "optimized_function_080082d4": "optimized_function",
                "SCARRY4": "is_subtraction_carry",
                "(uint)uVar4": "(uint)combined_params"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_multiple_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeMultipleFunctions_0800b3e8(void)\n\n{\n  int counter;\n  code **functionPointerList;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  functionPointerList = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**functionPointerList)();\n    functionPointerList = functionPointerList + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_multiple_functions_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "functionPointerList"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "copy_data_0800b430",
            "code": "\nvoid copyData_0800b430(undefined4 *destination,undefined data,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  undefined4 dataValue;\n  bool isSizeZero;\n  \n  if (((uint)destination & 3) != 0) {\n    remainingSize = size - 1;\n    destPtr = destination;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = data;\n      size = remainingSize;\n      if (((uint)destination & 3) == 0) break;\n      isSizeZero = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      destPtr = destination;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    dataValue = CONCAT22(CONCAT11(data,data),CONCAT11(data,data));\n    if (0xf < size) {\n      destPtr = destination + 4;\n      do {\n        destPtr[-4] = dataValue;\n        destPtr[-3] = dataValue;\n        destPtr[-2] = dataValue;\n        destPtr[-1] = dataValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x20));\n      remainingSize = size & 0xc;\n      destination = destination + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remainingSize == 0) goto joined_r0x0800b4a8;\n    }\n    destPtr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      srcPtr = destination + 1;\n      *destination = dataValue;\n      destination = srcPtr;\n    } while (destPtr != srcPtr);\n    size = size & 3;\n    destination = destPtr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      srcPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = data;\n      destPtr = srcPtr;\n    } while ((undefined4 *)(size + (int)destination) != srcPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "copy_data_0800b430",
                "param_1": "destination",
                "param_2": "data",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "uVar3": "remainingSize",
                "uVar4": "dataValue",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int dataType,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint counter;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  counter = *(uint *)(DAT_20000168 + 4);\n  if ((int)counter < 0x20) {\n    if (dataType != 0) {\n      *(undefined4 *)(DAT_20000168 + counter * 4 + 0x88) = data1;\n      bitMask = 1 << (counter & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + counter * 4 + 0x108) = data2;\n      if (dataType == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(dataPtr + 4) = counter + 1;\n    *(undefined4 *)(dataPtr + (counter + 2) * 4) = value;\n    FUNC_0800b520(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "dataType",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "counter"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 210698,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}