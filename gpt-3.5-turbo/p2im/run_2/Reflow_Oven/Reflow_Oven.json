{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "update_value_08002470",
                "param_1": "value_to_update",
                "DAT_08002490": "ptr_to_dat",
                "PTR_0800249c": "updated_value"
            },
            "code": "void update_value_08002470(uint value_to_update) {\n    uint* DAT_08002490 = (uint*)(DAT_08002490 + 0xc);\n    uint current_value = *DAT_08002490;\n    uint PTR_0800249c = (value_to_update & 7) << 8 | (current_value & 0xf8ff) | 0x5fa0000;\n    *DAT_08002490 = PTR_0800249c;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "update_value_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "set_memory_permissions_08007004",
                "param_1": "out_error_code",
                "param_2": "address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "ptr_to_error_code",
                "iVar2": "result"
            },
            "code": "void set_memory_permissions_08007004(int *out_error_code, unsigned int address, unsigned int size, unsigned int permissions, unsigned int reserved) {\n    unsigned int *ptr_to_error_code = PTR_DAT_08007024;\n    *ptr_to_error_code = 0;\n    int result = set_memory_permissions_08007004_0800571a(address, size, size, permissions, reserved);\n    if (result == -1 && *ptr_to_error_code != 0) {\n        *out_error_code = *ptr_to_error_code;\n    }\n    return;\n}",
            "called": [
                "FUN_0800571a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "FUN_08006dc8"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_params_08006cb4();\n  }\n  if (param_2 == PTR_DAT_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_080069e4(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080063d6:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_08006370(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_character_in_string_08006e90(PTR_s___0__080065a4,*pbVar5);\n    puVar1 = PTR_DAT_080065b0;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_080064b0;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_080064b0:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_character_in_string_08006e90(PTR_DAT_080065b0,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_character_in_string_08006e90(PTR_s_efgEFG_080065b4,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_080066b0(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "FUN_080066b0",
                "FUN_080069e4",
                "FUN_08006e90",
                "FUN_08006cb4",
                "FUN_08006370"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "FUN_08006174",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_value_in_pointer_08005740",
                "PTR_DAT_0800574c": "pointer_to_set",
                "0x16": "value_to_set"
            },
            "code": "void set_value_in_pointer_08005740() {\n    int value_to_set = 22;\n    int* PTR_DAT_0800574c = PTR_DAT_0800574c;\n    *PTR_DAT_0800574c = value_to_set;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "set_value_in_pointer_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "convert_uint_to_longlong_if_dat_is_zero_08006158",
                "param_1": "input_param",
                "param_2": "dat_param",
                "DAT_08006170": "dat",
                "CONCAT44": "bitwise_or_and_shift_left"
            },
            "code": "unsigned long long convert_uint_to_longlong_if_dat_is_zero_08006158(uint32_t input_param, uint32_t DAT_08006170_param) {\n  if (DAT_08006170 != 0) {\n    return ((unsigned long long)input_param) | 0x200000000;\n  }\n  return ((unsigned long long)DAT_08006170_param) << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "FUN_08006112"
            ],
            "imported": false,
            "current_name": "convert_uint_to_longlong_if_dat_is_zero_08006158"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08003688(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08003948;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          iVar4 = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_value_from_pointer_08001cc4();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          iVar4 = get_value_from_pointer_08001cc4();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_0800394c = 0;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003948 & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08003950 = 0;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[9] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      calculate_delay_0800365c(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_value_from_pointer_08001cc4();\n      while ((DAT_08003948[8] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_08003a64 = 0;\n    iVar3 = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08003a60[1] = DAT_08003a60[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_08003a64 = 1;\n        iVar3 = get_value_from_pointer_08001cc4();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_value_from_pointer_08001cc4();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_value_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    iVar3 = get_value_from_pointer_08001cc4();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_value_from_pointer_08001cc4();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "execute_command_if_valid_08004ec4",
                "param_1": "command_param",
                "iVar1": "command_status",
                "decrement_value_08004e70": "get_command_status",
                "PTR_08002c10": "set_command_bit_and_flags",
                "PTR_08004e70": "COMMAND_FUNCTION_OFFSET",
                "DAT_08004e6c": "COMMAND_VALID_FLAG_OFFSET",
                "DAT_08004e4c": "COMMAND_PARAM_OFFSET",
                "DAT_08004e68": "COMMAND_PARAM_BUFFER_OFFSET"
            },
            "code": "void execute_command_if_valid_08004ec4(int command_param)\n{\n  int command_status;\n  command_status = get_command_status();\n  if (((*(code **)(command_status + PTR_08004e70) != (code *)0x0) && (*(char *)(command_status + DAT_08004e6c) == '\\x01')) && (*(char *)(command_status + DAT_08004e4c) != ' ')) {\n    (**(code **)(command_status + PTR_08004e70))(command_status + DAT_08004e68);\n  }\n  PTR_08002c10(command_param);\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "FUN_080032b4",
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "execute_command_if_valid_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "reverse_string_08000178",
                "param_1": "str",
                "cVar1": "current_char",
                "pcVar2": "current_ptr",
                "pcVar3": "str_ptr"
            },
            "code": "char* reverse_string_08000178(char* str) {\n  char current_char;\n  char* current_ptr = str;\n\n  while (*current_ptr != '\\0') {\n    current_ptr++;\n  }\n\n  return current_ptr + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08005ce8",
                "FUN_08005c96"
            ],
            "imported": false,
            "current_name": "reverse_string_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_block_08006c88",
                "param_1": "memory_address",
                "param_2": "block_count",
                "puVar1": "memory_block",
                "iVar2": "block_size"
            },
            "code": "undefined4* allocate_and_initialize_memory_block_08006c88(undefined4 memory_address, int block_count)\n{\n    undefined4* memory_block;\n    int block_size = (block_count - 1) * 0x68;\n    memory_block = (undefined4*) allocate_memory_08006288(memory_address, block_size + 0x74);\n    if (memory_block != (undefined4*) 0x0) {\n        *memory_block = 0;\n        memory_block[1] = block_count;\n        memory_block[2] = memory_block + 3;\n        fill_memory_range_with_value_080061e0(memory_block + 3, 0, block_size + 0x68);\n    }\n    return memory_block;\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "FUN_08006d14"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "execute_if_bit_set_080060e4",
                "iVar1": "bit_count",
                "count_bits_set_08005f8c": "count_set_bits",
                "PTR_DAT_08006100": "ptr",
                "execute_or_count_bits_080060d4": "execute_or_count_bits"
            },
            "code": "void execute_if_bit_set_080060e4(void)\n{\n  int bit_count = count_set_bits();\n  int* PTR_DAT_08006100 = PTR_DAT_08006100 + bit_count * 0x14 + 0xc;\n  if (*PTR_DAT_08006100 != 0) {\n    execute_or_count_bits_080060d4();\n  }\n  return;\n}",
            "called": [
                "FUN_080060d4",
                "FUN_08005f8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "FUN_0800282c"
            ],
            "imported": false,
            "current_name": "execute_if_bit_set_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "get_value_from_param_0800258c",
                "param_1": "param",
                "uVar1": "value",
                "puVar2": "ptr"
            },
            "code": "uint get_value_from_param_0800258c(uint **param) {\n    uint value;\n    if (*(char *)((int)param + 0x21) != '\\x02') {\n        param[14] = (uint *)0x4;\n        return 1;\n    }\n    **param = **param & 0xfffffff1;\n    **param = **param & 0xfffffffe;\n    uint *ptr = *param;\n    if (ptr == PTR_DAT_0800261c) {\n        value = 1;\n    }\n    else if (ptr == PTR_DAT_0800261c + 5) {\n        value = 0x10;\n    }\n    else if (ptr == PTR_DAT_0800261c + 10) {\n        value = 0x100;\n    }\n    else if (ptr == PTR_DAT_0800261c + 0xf) {\n        value = 0x1000;\n    }\n    else if (ptr == PTR_DAT_0800261c + 0x14) {\n        value = 0x10000;\n    }\n    else if (ptr == PTR_DAT_0800261c + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(uint *)(PTR_DAT_08002620 + 4) = value;\n    *(char *)((int)param + 0x21) = 1;\n    *(uint *)(param + 8) = 0;\n    if (param[13] != (uint *)0x0) {\n        (*(code *)param[13])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "FUN_080046b8",
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "get_value_from_param_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "check_flags_and_process_08004e20",
                "PTR_DAT_08004e30": "ptr_dat_08004e30",
                "process_flags_08003f18": "process_flags_08003f18"
            },
            "code": "void check_flags_and_process_08004e20() {\n  int *PTR_DAT_08004e30 = (int *)PTR_DAT_08004e30;\n  if (*PTR_DAT_08004e30 != 0) {\n    process_flags_08003f18();\n  }\n  return;\n}",
            "called": [
                "FUN_08003f18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_and_process_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_forever_0800573c"
            },
            "code": "void wait_forever_0800573c(void)\n{\n  while(true) {\n    // Do nothing and wait forever\n  }\n}",
            "called": [
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "FUN_0800573c",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "wait_forever_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "execute_command_080032b4",
                "param_1": "command",
                "cVar1": "current_char",
                "puVar2": "ptr_command",
                "puVar3": "ptr_command_9"
            },
            "code": "uint32_t execute_command_080032b4(uint32_t **command)\n{\n  char current_char = *(char *)((int)command + 0x3d);\n  (*command)[1] &= 0xfffff8ff;\n  **command |= 1;\n  **command &= 0xfffffbff;\n  uint32_t *ptr_command = *command;\n  if ((ptr_command[1] & 0x800) != 0) {\n    if ((current_char == '\"') || (current_char == '*')) {\n      *(uint16_t *)((int)command + 0x2a) = (uint16_t)*(uint32_t *)(*command[0xe] + 4);\n    }\n    else {\n      *(uint16_t *)((int)command + 0x2a) = (uint16_t)*(uint32_t *)(*command[0xd] + 4);\n    }\n  }\n  if (*(uint16_t *)((int)command + 0x2a) != 0) {\n    if ((ptr_command[5] & 4) != 0) {\n      uint8_t *ptr_command_9 = (uint8_t *)command[9];\n      command[9] = (uint32_t *)((int)ptr_command_9 + 1);\n      *(char *)ptr_command_9 = (char)ptr_command[4];\n      *(uint16_t *)((int)command + 0x2a) -= 1;\n    }\n    if (((*command)[5] & 0x40) != 0) {\n      uint8_t *ptr_command_9 = (uint8_t *)command[9];\n      command[9] = (uint32_t *)((int)ptr_command_9 + 1);\n      *(char *)ptr_command_9 = (char)(*command)[4];\n      *(uint16_t *)((int)command + 0x2a) -= 1;\n    }\n    command[0x10] = (uint32_t *)((uint32_t)command[0x10] | 4);\n  }\n  if (command[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      command[0xb] = PTR_DAT_080033b4;\n      command[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)command + 0x3d) = 0x20;\n      *(undefined *)((int)command + 0x3e) = 0;\n      execute_command_080032b4_if_valid_08004ec4();\n    }\n    else if ((command[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      command[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)command + 0x3d) = 0x20;\n      *(undefined *)((int)command + 0x3e) = 0;\n      do_nothing_08002ca4();\n    }\n  }\n  else {\n    execute_command_080032b4_0800316c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4",
                "FUN_08004ec4",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "execute_command_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "compare_and_return_08004d06",
                "param_1": "a",
                "param_2": "b"
            },
            "code": "int compare_and_return_08004d06(int a, int b) {\n  if (a != b) {\n    if (a == 0) {\n      return b;\n    }\n    if (b == 0) {\n      return a;\n    }\n    a = 0;\n  }\n  return a;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "compare_and_return_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "calculateOffset_080056d8",
                "param_1": "input",
                "iVar1": "currentOffset",
                "puVar2": "stackPointer",
                "PTR_DAT_08005708": "globalPointer",
                "PTR_DAT_0800570c": "initialPointer",
                "&stack0x00000000": "&stackBottom",
                "PTR_DAT_08005710": "errorPointer"
            },
            "code": "int calculateOffset_080056d8(int input)\n{\n  int currentOffset;\n  undefined *stackPointer;\n  \n  if (*(int *)PTR_DAT_08005708 == 0) {\n    *(undefined **)PTR_DAT_08005708 = PTR_DAT_0800570c;\n  }\n  currentOffset = *(int *)PTR_DAT_08005708;\n  stackPointer = (undefined *)(input + currentOffset);\n  if (stackPointer <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08005708 = stackPointer;\n    return currentOffset;\n  }\n  *(undefined4 *)PTR_DAT_08005710 = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "FUN_08006920"
            ],
            "imported": false,
            "current_name": "calculateOffset_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "validate_input_080019f6",
                "param_1": "input_address",
                "iVar1": "is_input_empty",
                "uVar2": "input_data3",
                "uVar3": "input_data",
                "uVar4": "input_data2",
                "uVar5": "input_data6",
                "is_input_empty_08000a18": "is_input_empty_check",
                "is_input_null_080009dc_080009dc": "is_input_null_check"
            },
            "code": "void validate_input_080019f6(int input_address) {\n  int is_input_empty;\n  int is_input_null;\n  int* input_data = *(int **)(input_address + 0x3c);\n  int* input_data2 = *(int **)(input_address + 0x38);\n  int* input_data3 = *(int **)(input_address + 0x60);\n  int* input_data4 = *(int **)(input_address + 0x64);\n  int* input_data5 = *(int **)(input_address + 0x68);\n  int* input_data6 = *(int **)(input_address + 0x6c);\n  int* output_data1 = (int *)(input_address + 0x48);\n  int* output_data2 = (int *)(input_address + 0x4c);\n  int* output_data3 = (int *)(input_address + 0x50);\n  int* output_data4 = (int *)(input_address + 0x54);\n  *output_data3 = *input_data;\n  *output_data1 = *input_data3;\n  *output_data2 = *input_data4;\n  *output_data4 = *input_data2;\n  is_input_empty = is_input_empty_08000a18(*input_data, *(input_data + 1), *input_data5, *input_data6);\n  if (is_input_empty == 0) {\n    is_input_null = is_input_null_080009dc_080009dc(*input_data, *(input_data + 1), *input_data3, *input_data4);\n    if (is_input_null != 0) {\n      *output_data1 = *input_data3;\n      *output_data2 = *input_data4;\n    }\n    return;\n  }\n  *output_data1 = *input_data5;\n  *output_data2 = *input_data6;\n  return;\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "FUN_08001a44"
            ],
            "imported": false,
            "current_name": "validate_input_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "process_input_08002f9c",
                "param_1": "input_data",
                "puVar1": "char_pointer"
            },
            "code": "uint32_t process_input_08002f9c(uint32_t **input_data)\n{\n    uint32_t *char_pointer;\n    if (*((char *)(input_data) + 0x3d) == '\"') {\n        uint16_t length = *(uint16_t *)((int)input_data + 0x2a);\n        if (length < 4) {\n            if (length - 2 < 2) {\n                if (input_data[0xb] == (uint32_t *)0x2) {\n                    **input_data = **input_data | 0x400;\n                }\n                else {\n                    **input_data = **input_data & 0xfffffbff;\n                    **input_data = **input_data | 0x800;\n                }\n                (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n            }\n            else {\n                if (input_data[0xb] == (uint32_t *)0x2) {\n                    **input_data = **input_data | 0x400;\n                }\n                else {\n                    **input_data = **input_data & 0xfffffbff;\n                }\n                (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n                char_pointer = input_data[9];\n                input_data[9] = (uint32_t *)((int)char_pointer + 1);\n                *(char *)char_pointer = (char)(*input_data)[4];\n                *(uint16_t *)((int)input_data + 0x2a) = *(uint16_t *)((int)input_data + 0x2a) + -1;\n                *((char *)(input_data) + 0x3d) = 0x20;\n                input_data[0xc] = (uint32_t *)0x0;\n                if (*((char *)(input_data) + 0x3e) == '@') {\n                    *((char *)(input_data) + 0x3e) = 0;\n                    do_nothing_08002f9a();\n                }\n                else {\n                    *((char *)(input_data) + 0x3e) = 0;\n                    do_nothing_08002c50();\n                }\n            }\n        }\n        else {\n            char_pointer = input_data[9];\n            input_data[9] = (uint32_t *)((int)char_pointer + 1);\n            *(char *)char_pointer = (char)(*input_data)[4];\n            *(uint16_t *)((int)input_data + 0x2a) = *(uint16_t *)((int)input_data + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "validate_input_and_store_08005510",
                "param_1": "input_address",
                "param_2": "value",
                "param_3": "data_address",
                "param_4": "bit_index",
                "iVar1": "is_valid_combination",
                "uVar2": "combination_index",
                "PTR_DAT_0800555c": "combination_values",
                "PTR_DAT_08005560": "combination_data_addresses",
                "set_bits_in_memory_08002494": "set_bits_in_memory",
                "set_bit_in_array_080024f8": "set_bit_in_array",
                "validate_input_080045a2": "validate_input"
            },
            "code": "void validate_input_and_store_08005510(int input_address, int value, int data_address, int bit_index){\n                        int is_valid_combination = is_combination_valid();\n                        if (is_valid_combination == 0) {\n                            uint8_t combination_index = *(uint8_t *)(input_address + 0x44);\n                            *(int *)(PTR_DAT_08005560 + combination_index * 4) = data_address;\n                            *(int *)(PTR_DAT_0800555c + combination_index * 4) = value;\n                            set_bits_in_memory(*(char *)(input_address + 0x5a), 0, 1, combination_index, bit_index);\n                            set_bit_in_array(*(char *)(input_address + 0x5a));\n                            validate_input(*(int *)(PTR_DAT_08005560 + combination_index * 4), input_address + 0x45, 1);\n                        }\n                    }",
            "called": [
                "FUN_08002494",
                "FUN_080024f8",
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "validate_input_and_store_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "return_one_08005750",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int return_one_08005750() {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "thunk_FUN_08005750"
            ],
            "imported": false,
            "current_name": "return_one_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "process_params_and_return_zero_08002cf2",
                "param_1": "param_array",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "value_at_param_array_plus_3_or_6",
                "uVar2": "uint_value",
                "bool_value": "bool_value"
            },
            "code": "int process_params_and_return_zero_08002cf2(int *param_array, int param2, int param3, int param4){\n    int uint_value = *(uint *)(*param_array + 0x18);\n    int uVar1;\n\n    if ((uint_value & 0x80) == 0) {\n        uVar1 = *(int *)(param_array + 3);\n    }\n    else {\n        uVar1 = *(int *)(param_array + 6);\n    }\n\n    int bool_value = (*(uint *)(*param_array + 0x18) & 4) == 0;\n    process_params_08004e74(param_array, bool_value, uVar1, uint_value, param4);\n\n    return 0;\n}",
            "called": [
                "FUN_08004e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_params_and_return_zero_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "out",
                "param_2": "size",
                "puVar1": "ptr",
                "uVar2": "result",
                "puVar3": "prev",
                "iVar4": "diff",
                "puVar5": "curr",
                "uVar6": "diff",
                "puVar7": "prev_match",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_08006288(uint *out, uint size)\n{\n  uint *prev = 0;\n  uint *curr = *(uint **)PTR_DAT_0800633c;\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out = 0xc;\n  }\n  else {\n    do_nothing_08006eac();\n    while (curr) {\n      uint diff = *curr - aligned_size;\n      if (diff >= 0 && diff < 0xc) {\n        if (prev == curr) {\n          *out = curr[1];\n          *(uint **)PTR_DAT_0800633c = *out;\n        }\n        else {\n          *out = curr[1];\n          prev[1] = curr[1];\n        }\n        goto end;\n      }\n      prev = curr;\n      curr = (uint *)curr[1];\n    }\n    if (*(int *)PTR_DAT_08006340 == 0) {\n      uint result = calculateOffsetAndUpdate_08006920(out);\n      *(uint *)PTR_DAT_08006340 = result;\n    }\n    curr = (uint *)calculateOffsetAndUpdate_08006920(out, aligned_size);\n    if (curr != (uint *)0xffffffff) {\n      uint *next = (uint *)((int)curr + 3U & 0xfffffffc);\n      if (curr == next || calculateOffsetAndUpdate_08006920(out,(int)next - (int)curr) != -1) {\n        *next = aligned_size;\n        do_nothing_08006eae(out);\n        uint padding = (int)next + 0xbU & 0xfffffff8;\n        int diff = padding - (int)(next + 1);\n        if (diff != 0) {\n          *(int *)((int)next + diff) = -diff;\n          return padding;\n        }\n        return padding;\n      }\n    }\n    *out = 0xc;\n    do_nothing_08006eae(out);\n  }\nend:\n  return 0;\n}",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae",
                "FUN_08006920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006288"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "set_value_if_not_set_08001f84_or_update_state_08002004",
                "param_1": "state",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_080020e8": "DAT_ptr_080020e8",
                "DAT_080020ec": "DAT_ptr_080020ec"
            },
            "code": "int set_value_if_not_set_08001f84_or_update_state_08002004(undefined4 *state) {\n  int result;\n  bool state_is_set = *(char *)(state + 9) == '\\x01';\n  if (!state_is_set) {\n    *(undefined *)(state + 9) = 1;\n    result = set_value_if_not_set_08001f84();\n    if (result == 0) {\n      state[10] &= 0xfffffcfe;\n      state[10] |= 0x100;\n      undefined4 *ptr = (undefined4 *)*state;\n      bool is_dat_ptr = ptr == DAT_080020e8;\n      bool dat_ptr_condition = (DAT_080020e8[-0xff] & 0xf0000) != 0;\n      if (is_dat_ptr && dat_ptr_condition) {\n        state[10] |= 0x100000;\n        bool dat_ptr_condition_2 = (*(uint *)(DAT_080020ec + 4) & 0x400) != 0;\n        if (dat_ptr_condition_2) {\n          state[10] &= 0xffffcfff;\n          state[10] |= 0x1000;\n        }\n      }\n      else {\n        state[10] &= 0xffefffff;\n        bool ptr_condition = (ptr[1] & 0x400) != 0;\n        if (ptr_condition) {\n          state[10] &= 0xffffcfff;\n          state[10] |= 0x1000;\n        }\n      }\n      bool state_condition = (state[10] & 0x1000) == 0;\n      if (state_condition) {\n        state[0xb] = 0;\n      }\n      else {\n        state[0xb] &= 0xfffffff9;\n      }\n      *(undefined *)(state + 9) = 0;\n      *ptr = 0xfffffffd;\n      ptr = (undefined4 *)*state;\n      bool ptr_condition_2 = ((ptr[2] & 0xe0000) == 0xe0000);\n      bool dat_ptr_condition_3 = (ptr != DAT_080020e8) || ((DAT_080020e8[-0xff] & 0xf0000) == 0);\n      if (ptr_condition_2 && dat_ptr_condition_3) {\n        state[2] |= 0x500000;\n      }\n      else {\n        state[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(state + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08001f84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "set_value_if_not_set_08001f84_or_update_state_08002004"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "get_shifted_value_08005754",
                "param_1": "shift_amount",
                "bVar1": "is_valid_shift",
                "cVar2": "shifted_value",
                "uVar3": "result",
                "uVar4": "shift_distance"
            },
            "code": "uint get_shifted_value_08005754(uint shift_amount)\n{\n  bool is_valid_shift = false;\n  char shifted_value = -1;\n  uint result = 0;\n  uint shift_distance = *(uint *)PTR_DAT_080057b0;\n  \n  if (shift_amount < 0xe) {\n    if (shift_amount + 0x2e < 0x3c) {\n      is_valid_shift = true;\n    }\n  }\n  else {\n    is_valid_shift = shift_amount < 0x3c;\n  }\n\n  if (is_valid_shift) {\n    if (shift_amount < 0xe) {\n      shift_amount += 0x2e;\n    }\n    shifted_value = PTR_DAT_080057ac[shift_amount];\n  }\n\n  if (shifted_value != -1) {\n    result = get_shifted_value_08005754_08004a4c();\n    if (shift_distance != 0xc) {\n      if (shift_distance < 0xc) {\n        result >>= (0xc - shift_distance & 0xff);\n      }\n      else {\n        result <<= (shift_distance - 0xc & 0xff);\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08004a4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_data_if_param2_is_0xffff_08005fc8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_if_param2_is_0xffff_08005fc8(int param1, int param2, undefined4 param3, undefined4 param4)\n{\n    undefined *data_ptr = PTR_DAT_08006068;\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        *data_ptr = 6;\n        *(undefined4 *)(data_ptr + 0xc) = 0;\n        data_ptr[0x14] = 7;\n        *(undefined4 *)(data_ptr + 0x20) = 0;\n        data_ptr[0x28] = 8;\n        *(undefined4 *)(data_ptr + 0x34) = 0;\n        data_ptr[0x3c] = 9;\n        *(undefined4 *)(data_ptr + 0x48) = 0;\n        data_ptr[0x50] = 10;\n        *(undefined4 *)(data_ptr + 0x5c) = 0;\n        data_ptr[100] = 0x17;\n        *(undefined4 *)(data_ptr + 0x70) = 0;\n        data_ptr[0x78] = 0x17;\n        *(undefined4 *)(data_ptr + 0x84) = 0;\n        data_ptr[0x8c] = 0x17;\n        *(undefined4 *)(data_ptr + 0x98) = 0;\n        data_ptr[0xa0] = 0x17;\n        *(undefined4 *)(data_ptr + 0xac) = 0;\n        data_ptr[0xb4] = 0x17;\n        *(undefined4 *)(data_ptr + 0xc0) = 0;\n        data_ptr[200] = 0x28;\n        *(undefined4 *)(data_ptr + 0xd4) = 0;\n        data_ptr[0xdc] = 0x28;\n        *(undefined4 *)(data_ptr + 0xe8) = 0;\n        data_ptr[0xf0] = 0x28;\n        *(undefined4 *)(data_ptr + 0xfc) = 0;\n        data_ptr[0x104] = 0x28;\n        *(undefined4 *)(data_ptr + 0x110) = 0;\n        data_ptr[0x118] = 0x28;\n        *(undefined4 *)(data_ptr + 0x124) = 0;\n        data_ptr[300] = 0x28;\n        *(undefined4 *)(data_ptr + 0x138) = 0;\n        convert_uint_to_longlong_if_dat_is_zero_08006112(0, PTR_LAB_08005FA0_1_08006070, PTR_DAT_0800606C, data_ptr, param4);\n    }\n    return;\n}",
            "called": [
                "FUN_08006112"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_param2_is_0xffff_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "increment_byte_at_pointer_08002ab8",
                "param_1": "ptr_array",
                "pbVar1": "byte_ptr"
            },
            "code": "int increment_byte_at_pointer_08002ab8(int *ptr_array) {\n  if (*(short *)(ptr_array + 0x2a) != 0) {\n    byte *byte_ptr = (byte *)ptr_array[9];\n    ptr_array[9] = (int)(byte_ptr + 1);\n    *(uint *)(*ptr_array + 0x10) = (uint)*byte_ptr;\n    *(short *)(ptr_array + 0x2a) = *(short *)(ptr_array + 0x2a) + -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_byte_at_pointer_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "process_data_080068f0",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_var",
                "uVar2": "param_1",
                "uStack_c": "param_2",
                "uStack_8": "param_3",
                "uStack_4": "param_4",
                "PTR_PTR_DAT_0800691c": "PTR_PTR_DAT_0800691c",
                "FUNC_08006cb4": "cleanup",
                "FUNC_08006394": "execute"
            },
            "code": "void process_data_080068f0(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int ptr_var = *(int *)PTR_PTR_DAT_0800691c;\n  undefined4 param_1 = data_1;\n  undefined4 param_2 = data_2;\n  undefined4 param_3 = data_3;\n  undefined4 param_4 = data_4;\n  \n  if ((ptr_var != 0) && (*(int *)(ptr_var + 0x18) == 0)) {\n    cleanup(ptr_var);\n  }\n  execute(ptr_var, *(undefined4 *)(ptr_var + 8), data_1, &param_2, param_1, &param_2);\n  return;\n}",
            "called": [
                "FUN_08006394",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "process_data_080068f0",
            "code_backup": "\nvoid FUN_080068f0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_0800691c;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar1);\n  }\n  FUNC_08006394(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_08006700;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_08006774;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar5 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_character_in_string_08006e90(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_08006856:\n    *puVar3 = uVar6;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = process_data_080065c0(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "FUN_08002c54",
                "FUN_08002d1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "set_flag_and_decode_data_0800138e",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "current_flag"
            },
            "code": "void set_flag_and_decode_data_0800138e(int data, int flag, int param_3, int param_4) {\n  byte current_flag = *(byte *)(data + 0x14);\n  *(byte *)(data + 0x14) = current_flag | flag;\n  decode_data_08001310(data, current_flag | 0xc, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_flag_and_decode_data_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "check_combination_and_update_0800598a",
                "param_1": "combination",
                "iVar1": "valid_combination",
                "uVar2": "index",
                "local_9": "new_value"
            },
            "code": "void check_combination_and_update_0800598a(int combination)\n{\n  int valid_combination;\n  ushort index;\n  undefined new_value;\n  valid_combination = check_valid_combination(combination,&new_value);\n  if ((valid_combination == 0) && (index = *(ushort *)(combination + 0x60) + 1U & 0x3f, index != *(ushort *)(combination + 0x62))) {\n    *(undefined *)(*(int *)(combination + 0x5c) + (uint)*(ushort *)(combination + 0x60)) = new_value;\n    *(ushort *)(combination + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_080054d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "check_combination_and_update_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "enable_feature_08001c88",
                "DAT_08001ca8": "data",
                "update_value_08002470": "update_value",
                "check_and_set_param_08001c3c": "check_and_set_param",
                "do_nothing_08001c3a": "do_nothing"
            },
            "code": "int enable_feature_08001c88(void)\n{\n    int *DAT_08001ca8 = (int*)DAT_08001ca8;\n    *DAT_08001ca8 |= 0x10;\n    update_value(3);\n    check_and_set_param(0xf);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_08001c3a",
                "FUN_08001c3c",
                "FUN_08002470"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "enable_feature_08001c88"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "validate_input_08001a44",
                "param_1": "input_address",
                "param_2": "input_value",
                "uVar1": "is_input_valid"
            },
            "code": "void validate_input_08001a44(int input_address, int input_value) {\\n    bool is_input_valid = false;\\n    if (input_value == 1) {\\n        is_input_valid = true;\\n        if (*(char *)(input_address + 0x70) == \"\\0\") {\\n            validate_input_08001a44_080019f6();\\n        }\\n    }\\n    *(undefined *)(input_address + 0x70) = is_input_valid;\\n    return;\\n}",
            "called": [
                "FUN_080019f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_input_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "closing_parenthesis",
                "pbVar2": "current_byte"
            },
            "code": "int process_data_08002c54(int *data) {\n  char closing_parenthesis = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte *current_byte = (byte *)data[9];\n    data[9] = (int)(current_byte + 1);\n    *(uint *)(*data + 0x10) = (uint)*current_byte;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_data_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "check_values_080043b4",
                "param_1": "values_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "value3",
                "iVar1": "temp",
                "**param_1": "**values_array",
                "inverted_value": "inverted_mask",
                "masked_value": "bitwise_mask",
                "flag_check": "flag_comparison"
            },
            "code": "int check_values_080043b4(uint **values_array, uint value1, uint value2, int flag, uint value3) {\n        int temp;\n        do {\n            uint value = **values_array;\n            uint inverted_value = ~value;\n            uint masked_value = value1 & inverted_value;\n            bool flag_check = (masked_value == 0) != flag;\n            if (flag_check) {\n                return 0;\n            }\n        } while ((value3 == 0xffffffff) || ((value3 != 0) && ((temp = get_value_from_pointer_08001cc4(), (uint)(temp - value2) <= value3))));\n        (*values_array)[3] &= 0xfffffe5f;\n        (*values_array)[5] &= 0xfffffffe;\n        *(undefined *)((int)values_array + 0x39) = 0x20;\n        *(undefined *)((int)values_array + 0x3a) = 0x20;\n        *(undefined *)(values_array + 0xe) = 0;\n        return 3;\n    }",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "FUN_08004478"
            ],
            "imported": false,
            "current_name": "check_values_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "validate_input_0800441a",
                "param_1": "input_ptr",
                "*(char *)((int)param_1 + 0x39)": "input_ptr[0x39]",
                "*(undefined *)(param_1 + 0xe)": "input_ptr[0xe]",
                "do_nothing_08004418": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "input_ptr[0x39]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_ptr + 0xc)",
                "calculate_result_08004204": "calculate_result",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*input_ptr + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_ptr + 0x14)",
                "param_1[0xf]": "input_ptr[0xf]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_ptr[0x3a]"
            },
            "code": "int validate_input_0800441a(int *input_ptr) {\n    if (input_ptr != NULL) {\n        if (input_ptr[0x39] == '\\0') {\n            input_ptr[0xe] = 0;\n            do_nothing();\n        }\n        input_ptr[0x39] = 0x24;\n        *(uint *)(*input_ptr + 0xc) &= 0xffffdfff;\n        calculate_result(input_ptr);\n        *(uint *)(*input_ptr + 0x10) &= 0xffffb7ff;\n        *(uint *)(*input_ptr + 0x14) &= 0xffffffd5;\n        *(uint *)(*input_ptr + 0xc) |= 0x2000;\n        input_ptr[0xf] = 0;\n        input_ptr[0x39] = 0x20;\n        input_ptr[0x3a] = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "validate_input_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_code_if_not_null_08004d18",
                "PTR_DAT_08004d28": "function_pointer_address",
                "PTR_DAT_08004d2c": "argument_address",
                "code": "function_pointer",
                "undefined4": "uint32_t"
            },
            "code": "void execute_code_if_not_null_08004d18(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_08004d28;\n  if (function_pointer != NULL) {\n    function_pointer(*(uint32_t*)PTR_DAT_08004d2c);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "FUN_08003ea0"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_080006d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp5",
                "uVar3": "temp3",
                "in_r12": "temp4",
                "bVar4": "check1"
            },
            "code": "ulonglong calculate_080006d4(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5 = input4 >> 0x14;\n  bool check1;\n  \n  temp2 = input3 | (input4 << 1);\n  temp1 = input1 | (input2 << 1);\n  \n  if (input2 != input3 && temp5 != input3) {\n    check1 = (temp1 == 0);\n    if (!check1) {\n      check1 = (temp2 == 0);\n    }\n    if (check1) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (input3 == 0) {\n      temp3 = input2 & 0x80000000;\n      do {\n        temp4 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(temp4 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp3;\n      if (temp5 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp5 = temp2 & 0x80000000;\n      temp2 = temp2 << 1;\n      input4 = input4 * 2 + (uint)(temp5 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  check1 = (temp1 == 0);\n  if (check1) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!check1) {\n    check1 = (temp2 == 0);\n  }\n  temp3 = input2;\n  if (((!check1) && ((input2 != input3 || ((temp1 | (input2 << 0xc)) == 0)))) && ((temp5 != input3 || (input1 = input3, temp3 = input4, (temp2 | (input4 << 0xc)) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "FUN_080004f8"
            ],
            "imported": false,
            "current_name": "calculate_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "FUN_08001a66",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "execute_function_with_args_08006174",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "arg3",
                "uStack_4": "arg5",
                "PTR_PTR_DAT_08006194": "function_pointer",
                "FUNC_08006394": "execute_function"
            },
            "code": "void execute_function_with_args_08006174(void *PTR_PTR_DAT_08006194, int arg1, int arg2, void *arg3, int arg4, void *arg5) {\n  void *arg_list[3] = { arg3, &arg3, &arg5 };\n  PTR_PTR_DAT_08006194(arg1, arg2, arg_list, arg4, arg_list);\n  return;\n}",
            "called": [
                "FUN_08006394"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_function_with_args_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "process_input_08007028",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_input_08007028(int *output, undefined4 input) {\n  undefined *ptr = PTR_DAT_08007044;\n  *(undefined4 *)PTR_DAT_08007044 = 0;\n  int result = always_returns_true_08005724(input);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "process_input_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_bits_in_memory_08002494",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance",
                "DAT_080024f0": "constant_data_1",
                "DAT_080024f4": "constant_data_2"
            },
            "code": "void set_bits_in_memory_08002494(uint32_t address, uint32_t mask, uint32_t value) {\\n\"\n                     \"    uint32_t shift_amount = (*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\\n\"\n                     \"    uint32_t shift_distance = 7 - shift_amount;\\n\"\n                     \"    if (shift_distance > 3) {\\n\"\n                     \"        shift_distance = 4;\\n\"\n                     \"    }\\n\"\n                     \"    if (shift_amount + 4 < 7) {\\n\"\n                     \"        shift_amount = 0;\\n\"\n                     \"    }\\n\"\n                     \"    else {\\n\"\n                     \"        shift_amount = shift_amount - 3;\\n\"\n                     \"    }\\n\"\n                     \"    uint32_t shifted_mask = (mask & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff);\\n\"\n                     \"    uint32_t masked_value = (1 << (shift_amount & 0xff)) - 1U & value;\\n\"\n                     \"    uint32_t result = shifted_mask | masked_value;\\n\"\n                     \"    if ((int)address < 0) {\\n\"\n                     \"        *(char *)(DAT_080024f4 + (address & 0xf)) = (char)(result << 4);\\n\"\n                     \"    }\\n\"\n                     \"    else {\\n\"\n                     \"        *(char *)(address + 0xe000e400) = (char)(result << 4);\\n\"\n                     \"    }\\n\"\n                     \"}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bits_in_memory_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_08004c78((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n    iVar3 = find_value_08004c78((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080068f0(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_08004d06(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08005214;\n      iVar3 = DAT_08005210;\n      iVar2 = DAT_0800520c;\n      if (iVar4 == 0) {\n        process_data_080068f0(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (iVar4 == DAT_0800520c) {\n          *(uint *)(DAT_0800520c + 0xd80c) = *(uint *)(DAT_0800520c + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_08005210) {\n          *(uint *)(DAT_08005210 + 0x1cc10) = *(uint *)(DAT_08005210 + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08005214) {\n          *(uint *)(DAT_08005214 + 0x1c810) = *(uint *)(DAT_08005214 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08004884((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = get_value_08004cce((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08005208);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        decode_bits_08002624(uVar5,&local_20);\n        uVar5 = set_flag_08004884((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = get_value_08004cce((int)*(char *)(param_1 + 0x16),PTR_DAT_08005204);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        decode_bits_08002624(uVar5,&local_20);\n        *(int **)(PTR_DAT_08005228 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        validate_input_0800441a(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08004884",
                "FUN_08002624",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_080068f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "FUN_08005384",
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_index_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "code": "uint find_index_080055bc(int value){\n\tuint index;\n\tif (value == 0) {\n\t\tindex = 5;\n\t}\n\telse {\n\t\tindex = 0;\n\t\twhile(index < 5) {\n\t\t\tif (value == *(int *)(PTR_DAT_080055dc + index * 4)) break;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "imported": false,
            "current_name": "find_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "updateUserInfo_08001960",
                "param_1": "userAddress",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "param_5": "unused4",
                "param_6": "unused5",
                "iVar1": "validationResult",
                "puVar2": "inputPointer",
                "uVar3": "inputPointerValue1",
                "uVar4": "unused4",
                "uVar5": "inputPointerValue2",
                "uVar6": "unused5",
                "is_input_null_080009dc_080009dc": "isInputNull",
                "is_input_empty_08000a18": "isInputEmpty"
            },
            "code": "void updateUserInfo_08001960(int userAddress, int unused1, int unused2, int unused3, int unused4, int unused5) {\\n  int validationResult = validateInput(userAddress, unused2, unused3, unused4, unused2);\\n  if (validationResult != 0) {\\n    return;\\n  }\\n  *(int *)(userAddress + 0x60) = unused2;\\n  *(int *)(userAddress + 100) = unused3;\\n  *(int *)(userAddress + 0x68) = unused4;\\n  *(int *)(userAddress + 0x6c) = unused5;\\n  if (*(char *)(userAddress + 0x70) != \"\\0\") {\\n    int *inputPointer = *(int **)(userAddress + 0x3c);\\n    int inputPointerValue1 = *inputPointer;\\n    int inputPointerValue2 = inputPointer[1];\\n    int isInputNull = isInputNull(inputPointerValue1, inputPointerValue2, unused2, unused3);\\n    if (isInputNull != 0) {\\n      *inputPointer = unused2;\\n      inputPointer[1] = unused3;\\n    }\\n    else {\\n      int isInputEmpty = isInputEmpty(unused2, unused3, inputPointerValue1, inputPointerValue2);\\n      if (isInputEmpty != 0) {\\n        *inputPointer = unused2;\\n        inputPointer[1] = unused3;\\n      }\\n      else {\\n        *inputPointer = unused4;\\n        inputPointer[1] = unused5;\\n      }\\n      int inputPointerValue3 = *(int *)(userAddress + 0x48);\\n      int inputPointerValue4 = *(int *)(userAddress + 0x4c);\\n      int isInputEmpty2 = isInputEmpty(inputPointerValue3, inputPointerValue4, unused4, unused5);\\n      if (isInputEmpty2 != 0) {\\n        *(int *)(userAddress + 0x48) = unused4;\\n        *(int *)(userAddress + 0x4c) = unused5;\\n        return;\\n      }\\n      int isInputNull2 = isInputNull(inputPointerValue3, inputPointerValue4, unused2, unused3);\\n      if (isInputNull2 != 0) {\\n        *(int *)(userAddress + 0x48) = unused2;\\n        *(int *)(userAddress + 0x4c) = unused3;\\n      }\\n    }\\n  }\\n}",
            "called": [
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_08000a04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "updateUserInfo_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "find_first_nonzero_08004ca2",
                "param_1": "num",
                "uVar1": "first_nonzero_index",
                "find_first_occurrence_08004c8a": "find_first_occurrence"
            },
            "code": "int find_first_nonzero_08004ca2(int num)\n{\n    int first_nonzero_index = -1;\n    if (num != 0) {\n        first_nonzero_index = find_first_occurrence();\n    }\n    return first_nonzero_index;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "find_first_nonzero_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "is_bit_set_in_uint_08002810",
                "param_1": "bit_mask",
                "param_2": "value"
            },
            "code": "int is_bit_set_in_uint_08002810(uint bit_mask, uint value)\n{\n    uint mask = *(uint *)(bit_mask + 8);\n    if ((value & mask) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "is_bit_set_in_uint_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "reset_flags_0800224c",
                "param_1": "param_array",
                "iVar1": "result"
            },
            "code": "int reset_flags_0800224c(int *param_array)\n{\n    int result;\n\n    if (param_array == NULL) {\n        result = 1;\n    }\n    else {\n        param_array[10] |= 2;\n        result = check_and_update_flags();\n        if (result == 0) {\n            *(int *)(*param_array) = -32;\n            *(unsigned int *)(*param_array + 4) &= DAT_08002340;\n            *(unsigned int *)(*param_array + 8) &= DAT_08002344;\n            *(unsigned int *)(*param_array + 12) &= 0xFF000000;\n            *(unsigned int *)(*param_array + 16) &= 0xC0000000;\n            *(unsigned int *)(*param_array + 20) &= 0xFFFFF000;\n            *(unsigned int *)(*param_array + 24) &= 0xFFFFF000;\n            *(unsigned int *)(*param_array + 28) &= 0xFFFFF000;\n            *(unsigned int *)(*param_array + 32) &= 0xFFFFF000;\n            *(unsigned int *)(*param_array + 36) &= 0xFFFFF000;\n            *(unsigned int *)(*param_array + 40) &= 0xFFFFF000;\n            *(unsigned int *)(*param_array + 44) &= 0xFF000000;\n            *(unsigned int *)(*param_array + 44) &= 0xFF000000;\n            *(unsigned int *)(*param_array + 48) &= 0xC0000000;\n            *(unsigned int *)(*param_array + 52) &= 0xC0000000;\n            *(unsigned int *)(*param_array + 56) &= 0xFFC00000;\n            *(unsigned int *)(*param_array + 56) &= 0xFFC00000;\n            check_params(param_array);\n            param_array[11] = 0;\n            param_array[10] = 0;\n        }\n        *(char *)(param_array + 9) = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "reset_flags_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_flag_set_at_position_080054b0",
                "param_1": "position",
                "uVar1": "combined_value",
                "combineTwoBytes_080047e8": "combine_two_bytes"
            },
            "code": "bool is_flag_set_at_position_080054b0(int position)\n{\n  uint16_t combined_value = combine_two_bytes(PTR_DAT_080054d0 + (uint16_t)*(byte *)(position + 0x44) * 4);\n  return (combined_value & 0x0021) == 0x0021;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [],
            "imported": false,
            "current_name": "is_flag_set_at_position_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "execute_function_08006f00",
                "param_1": "function_index",
                "puVar1": "ptr_to_undefined",
                "uVar2": "param_2",
                "piVar3": "ptr_to_int",
                "iVar4": "status",
                "pcVar5": "function_ptr",
                "unaff_r4": "unused_variable_1",
                "unaff_r5": "unused_variable_2",
                "in_lr": "unused_variable_3",
                "puVar6": "unused_variable_4",
                "PTR_PTR_DAT_08006f0c": "ptr_to_ptr_to_int",
                "PTR_DAT_08006f30": "ptr_to_undefined",
                "thunk_return_one_08005750": "thunk_function",
                "set_value_in_pointer_08005740": "set_value_in_pointer_function",
                "max_function_index": "maximum_function_index",
                "ptr_to_function_table": "ptr_to_function_table",
                "ptr_to_return_value": "ptr_to_return_value"
            },
            "code": "int execute_function_08006f00(uint function_index) {\n    int *ptr_to_int;\n    int status;\n    code *function_ptr;\n    uint max_function_index = 0x1f;\n    ptr_to_int = *(int **)PTR_PTR_DAT_08006f0c;\n    if (function_index > max_function_index) {\n        *ptr_to_int = 0x16;\n        return -1;\n    }\n    int *ptr_to_function_table = ptr_to_int[0x11];\n    if (ptr_to_function_table != 0 && (function_ptr = *(code **)(ptr_to_function_table + function_index * 4), function_ptr != (code *)0x0)) {\n        if (function_ptr != (code *)0x1) {\n            if (function_ptr == (code *)0xffffffff) {\n                *ptr_to_int = 0x16;\n                return 1;\n            }\n            *(undefined4 *)(ptr_to_function_table + function_index * 4) = 0;\n            (*function_ptr)(function_index);\n        }\n        return 0;\n    }\n    int *ptr_to_return_value = PTR_PTR_DAT_08006f0c;\n    uint param_1 = thunk_return_one_08005750(ptr_to_int);\n    undefined *PTR_DAT_08006f30 = PTR_DAT_08006f30;\n    *(undefined4 *)PTR_DAT_08006f30 = 0;\n    status = set_value_in_pointer_08005740(param_1,function_index,function_index,0,ptr_to_int,unaff_r4,unaff_r5,in_lr);\n    if (status == -1 && (*(int *)PTR_DAT_08006f30 != 0)) {\n        *ptr_to_int = *(int *)PTR_DAT_08006f30;\n    }\n    return status;\n}",
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "execute_function_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "check_input_and_update_080016b4",
                "param_1": "input_data",
                "cVar1": "result",
                "iVar2": "value",
                "iVar3": "is_input_empty",
                "uVar4": "var1_high",
                "uVar5": "ptr1_val",
                "uVar6": "ptr5_val",
                "uVar7": "ptr9_val",
                "uVar8": "ptr1_val_2",
                "uVar9": "ptr5_val_2",
                "uVar10": "ptr9_val_2",
                "uVar11": "input_null",
                "uVar12": "ptr7_val",
                "uVar13": "ptr8_val",
                "uVar14": "var3_high",
                "uVar15": "var3",
                "uVar16": "var2",
                "uVar17": "var5",
                "uVar18": "var4",
                "local_38": "var1",
                "uStack_34": "var1_high_2",
                "ptr1": "ptr1",
                "ptr2": "ptr2",
                "ptr3": "ptr3",
                "ptr4": "ptr4",
                "ptr5": "ptr5",
                "ptr6": "ptr6",
                "ptr7": "ptr7",
                "ptr8": "ptr8",
                "ptr9": "ptr9",
                "ptr10": "ptr10",
                "ptr11": "ptr11",
                "ptr12": "ptr12",
                "ptr13": "ptr13",
                "ptr14": "ptr14",
                "ptr15": "ptr15",
                "ptr16": "ptr16"
            },
            "code": "char check_input_and_update_080016b4(int input_data){\n    char result = *(char *)(input_data + 0x70);\n    if (result != '\\0'){\n        int value = get_value_and_return_080058e0();\n        int value_diff = value - *(int *)(input_data + 0x44);\n        if ((uint)value_diff >= *(uint *)(input_data + 0x58)){\n            undefined4 *ptr1 = *(undefined4 **)(input_data + 0x38);\n            undefined4 *ptr2 = ptr1 + 1;\n            undefined4 *ptr3 = *(undefined4 **)(input_data + 0x40);\n            undefined4 *ptr4 = ptr3 + 1;\n            undefined8 var1 = FUNC_08000190(*ptr3, *ptr4);\n            undefined8 var2 = FUNC_08000190(*ptr1, *ptr2, *(undefined4 *)(input_data + 0x50), *(undefined4 *)(input_data + 0x54));\n            undefined8 var3 = FUNC_080004f8((int)var1, (int)((ulonglong)var1 >> 0x20), *(undefined4 *)(input_data + 0x20), *(undefined4 *)(input_data + 0x24));\n            var3 = FUNC_08000194((int)var3, (int)((ulonglong)var3 >> 0x20), *(undefined4 *)(input_data + 0x48), *(undefined4 *)(input_data + 0x4c));\n            *(undefined8 *)(input_data + 0x48) = var3;\n            char input_null = *(char *)(input_data + 0x71);\n            if (input_null == '\\0'){\n                undefined8 var4 = FUNC_080004f8((int)var2, (int)((ulonglong)var2 >> 0x20), *(undefined4 *)(input_data + 0x18), *(undefined4 *)(input_data + 0x1c));\n                var3 = FUNC_08000190((int)var3, (int)((ulonglong)var3 >> 0x20), (int)var4, (int)((ulonglong)var4 >> 0x20));\n                *(undefined8 *)(input_data + 0x48) = var3;\n            }\n            undefined4 *ptr5 = *(undefined4 **)(input_data + 0x48);\n            undefined4 *ptr6 = ptr5 + 1;\n            undefined4 *ptr7 = *(undefined4 **)(input_data + 0x68);\n            undefined4 *ptr8 = ptr7 + 1;\n            undefined8 var5 = *(undefined8 *)(input_data + 0x68);\n            int is_input_empty = is_input_empty_08000a18(*ptr5, *ptr6, *ptr7, *ptr8);\n            if (is_input_empty == 0){\n                undefined4 *ptr9 = *(undefined4 **)(input_data + 0x60);\n                undefined4 *ptr10 = ptr9 + 1;\n                int is_input_null = is_input_null_080009dc_080009dc(*ptr5, *ptr6);\n                if (is_input_null != 0){\n                    *(undefined4 *)(input_data + 0x48) = *ptr9;\n                    *(undefined4 *)(input_data + 0x4c) = *ptr10;\n                }\n            }\n            else{\n                *(undefined4 *)(input_data + 0x48) = *ptr7;\n                *(undefined4 *)(input_data + 0x4c) = *ptr8;\n            }\n            if (input_null == '\\0'){\n                undefined8 var6 = 0;\n            }\n            else{\n                undefined8 var6 = FUNC_080004f8((int)var1, (int)((ulonglong)var1 >> 0x20), *(undefined4 *)(input_data + 0x18), *(undefined4 *)(input_data + 0x1c));\n            }\n            undefined4 *ptr11 = *(undefined4 **)(input_data + 0x48);\n            undefined4 *ptr12 = ptr11 + 1;\n            undefined4 *ptr13 = *(undefined4 **)(input_data + 0x28);\n            undefined4 *ptr14 = ptr13 + 1;\n            undefined8 var7 = FUNC_080004f8((int)var2, (int)((ulonglong)var2 >> 0x20), *ptr13, *ptr14);\n            var7 = FUNC_08000190(*ptr11, *ptr12, (int)var7, (int)((ulonglong)var7 >> 0x20));\n            var7 = FUNC_08000194((int)var6, (int)((ulonglong)var6 >> 0x20), (int)var7, (int)((ulonglong)var7 >> 0x20));\n            undefined4 *ptr15 = *(undefined4 **)(input_data + 0x60);\n            undefined4 *ptr16 = ptr15 + 1;\n            int is_input_null_2 = is_input_null_080009dc_080009dc((int)var7, (int)((ulonglong)var7 >> 0x20), *ptr15, *(undefined4 *)(input_data + 100));\n            if (is_input_null_2 == 0){\n                var5 = var7;\n            }\n            **(undefined8 **)(input_data + 0x3c) = var5;\n            *(undefined4 *)(input_data + 0x50) = *ptr1;\n            *(undefined4 *)(input_data + 0x54) = *ptr2;\n            *(int *)(input_data + 0x44) = value;\n        }\n        else{\n            result = '\\0';\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08000190",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_080058e0",
                "FUN_080009dc",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_input_and_update_080016b4"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "FUN_080018f8": "process_input_and_return_080018f8",
                "process_input_data_08001814": "process_input_data"
            },
            "code": "void process_input_and_return_080018f8(void)\n{\n  process_input_data();\n  return;\n}",
            "called": [
                "FUN_08001814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "process_input_and_return_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "check_bit_in_data_at_index_08005890",
                "param_1": "index",
                "uVar4": "data",
                "cVar1": "bit_value",
                "iVar2": "bit_index",
                "uVar3": "data_index"
            },
            "code": "bool check_bit_in_data_at_index_08005890(uint index){\n  bool bit_value = false;\n  uint data = 0;\n  if (index < 0x3c) {\n    data = (uint)(char)PTR_DAT_080058d8[index];\n  }\n  if (data != 0xffffffff) {\n    uint bit_index = get_bit_from_uint_at_index_080047f4(data,PTR_DAT_080058dc);\n    if (bit_index != 0) {\n      uint data_index = (data << 0x18) >> 0x1c;\n      uint bit_mask = 1 << (data & 0xf) & 0xffff;\n      bit_value = check_bit_in_uint_08004c48(get_data_by_index_08004848(data_index), bit_mask);\n    }\n  }\n  return bit_value;\n}",
            "called": [
                "FUN_08004848",
                "FUN_08004c48",
                "FUN_080047f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "FUN_080015b2",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "check_bit_in_data_at_index_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "FUN_08005da0": "convert_number_to_base_wrapper_08005da0",
                "convert_number_to_base_08005d8a": "convert_number_to_base"
            },
            "code": "void convert_number_to_base_wrapper_08005da0() \n{\n  //code for converting number to base\n}\n\nvoid convert_number_to_base_wrapper_08005da0_wrapper() \n{\n  convert_number_to_base_wrapper_08005da0();\n  return;\n}",
            "called": [
                "FUN_08005d8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [],
            "imported": false,
            "current_name": "convert_number_to_base_wrapper_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_value_by_key_08004cb2",
                "param_1": "key",
                "param_2": "data",
                "*param_2": "*data",
                "UINT32_MAX": "0xffffffff",
                "*(undefined4 *)(param_2 + 8)": "*(uint32_t *)(data + 8)"
            },
            "code": "uint32_t find_value_by_key_08004cb2(int key, char *data)\n{\n    while(true)\n    {\n        if (*data == -1)\n        {\n            return UINT32_MAX;\n        }\n        if (*data == key)\n        {\n            break;\n        }\n        data += 0xc;\n    }\n    return *(uint32_t *)(data + 8);\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "FUN_08004cce",
                "FUN_08004cb2"
            ],
            "imported": false,
            "current_name": "find_value_by_key_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "check_and_set_flag_08004ef4",
                "param_1": "flag",
                "iVar1": "value",
                "decrement_value_08004e70": "get_decremented_value",
                "set_bit_and_flags_08002c10": "set_bit_and_flags"
            },
            "code": "void check_and_set_flag_08004ef4(int flag) {\n  int value = get_decremented_value();\n  if (*(char *)(value + 0x5d) == '\\0') {\n    set_bit_and_flags(flag);\n  }\n  return;\n}",
            "called": [
                "FUN_08002c10",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "obj_address",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5"
            },
            "code": "void set_parameters_08001294(int obj_address, undefined param_2, undefined param_3, undefined param_4, undefined param_5) {\n  *(undefined *)(obj_address + 0x18) = param_2;\n  *(undefined *)(obj_address + 0x19) = param_3;\n  *(undefined *)(obj_address + 0x1a) = param_4;\n  *(undefined *)(obj_address + 0x1b) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "set_parameters_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "update_flags_and_check_08002384",
                "param_1": "data",
                "iVar1": "flag_check_result",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "time_diff",
                "local_14": "start_time"
            },
            "code": "int update_flags_and_check_08002384(int *data)\n{\n  int flag_check_result;\n  uint divisor;\n  int start_time;\n  int current_time;\n  uint time_diff;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  flag_check_result = check_and_update_flags();\n  if (flag_check_result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    divisor = *(uint *)PTR_DAT_0800246c;\n    divisor = calculate_value(divisor, 2);\n    for (start_time = divisor << 1; start_time != 0; start_time = start_time + -1) {\n    }\n    set_value_if_not_set(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start_time = get_value_from_pointer();\n    while (current_time = *data, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = get_value_from_pointer();\n      time_diff = current_time - start_time;\n      if (time_diff > 10) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = get_value_from_pointer();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_time = get_value_from_pointer();\n      time_diff = current_time - start_time;\n      if (time_diff > 10) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return flag_check_result;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "update_flags_and_check_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "do_nothing_08005650"
            },
            "code": "\nvoid do_nothing_08005650(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005650"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "increment_and_store_char_08002ad8",
                "param_1": "data_array",
                "puVar1": "char_ptr",
                "PTR_0805a640": "short_ptr"
            },
            "code": "int increment_and_store_char_08002ad8(int *data_array)\n{\n  char *char_ptr;\n  short *PTR_0805a640;\n\n  PTR_0805a640 = (short *)(data_array + 0x2a);\n  if (*PTR_0805a640 != 0) {\n    char_ptr = (char *)(data_array[9]);\n    data_array[9] = (int)(char_ptr + 1);\n    *char_ptr = (char)(*(int *)(data_array + 0x10));\n    *PTR_0805a640 += -1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "increment_and_store_char_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "calculate_result_08004204",
                "*param_1": "*params",
                "uVar1": "factor1",
                "uVar2": "factor2",
                "iVar3": "var1",
                "iVar4": "var2",
                "iVar5": "var3",
                "iVar6": "var4",
                "iVar7": "var5",
                "iVar8": "var6",
                "iVar9": "var2",
                "iVar10": "var3",
                "iVar11": "var4",
                "iVar12": "*params"
            },
            "code": "void calculate_result_08004204(int *params)\n{\n    uint factor1 = params[3];\n    uint factor2 = params[2] | params[4] | params[5];\n    uint factor3 = params[6];\n    uint result = 0;\n    uint var1, var2, var3, var4, var5, var6;\n    if (*params != PTR_DAT_080043ac)\n    {\n        var1 = get_data_from_pointer_and_shift_08003c50();\n        var2 = get_data_from_pointer_and_shift_08003c50();\n        var3 = get_data_from_pointer_and_shift_08003c50();\n        var4 = get_data_from_pointer_and_shift_08003c50();\n        var5 = get_data_from_pointer_and_shift_08003c50();\n        var6 = get_data_from_pointer_and_shift_08003c50();\n    }\n    else\n    {\n        var1 = get_data_from_pointer_and_shift_right_08003c70();\n        var2 = get_data_from_pointer_and_shift_right_08003c70();\n        var3 = get_data_from_pointer_and_shift_right_08003c70();\n        var4 = get_data_from_pointer_and_shift_right_08003c70();\n        var5 = get_data_from_pointer_and_shift_right_08003c70();\n        var6 = get_data_from_pointer_and_shift_right_08003c70();\n    }\n    result = factor1 * ((var1 * 0x19) / (params[1] << 2));\n    result += factor2;\n    result += factor3 << 8;\n    result += ((factor1 * ((var4 * 0x19) / (params[1] << 2))) + (factor1 * ((var5 * 0x19) / (params[1] << 2))) * -100 + 0x32) >> 0x25 & 0xf0;\n    result += ((factor1 * ((var6 * 0x19) / (params[1] << 2))) + (factor1 * ((var2 * 0x19) / (params[1] << 2))) * -100 + 0x32) >> 0x20 << 0x17 >> 0x1c;\n    *(uint *)(*params + 8) = result;\n}",
            "called": [
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "FUN_0800441a"
            ],
            "imported": false,
            "current_name": "calculate_result_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "is_valid_input_08000a2c": "is_valid_input",
                "is_valid_input_080009f0": "is_valid_input",
                "is_input_empty_08000a18": "is_input_empty",
                "is_input_null_080009dc_080009dc": "is_input_null",
                "reverse_and_call_08005c96": "reverse_and_call",
                "call_function_pointer_08005cb6": "call_function_pointer",
                "FUNC_0800074c": "calculate",
                "FUNC_08000194": "convert_input",
                "calculate_shift_amount_08000aa8": "calculate_shift_amount",
                "calculate_shifted_value_0800040c": "calculate_shifted_value",
                "convert_number_to_base_08005d8a": "convert_number_to_base",
                "FUNC_080004f8": "calculate",
                "convert_to_integer_08000a58": "convert_to_integer",
                "convert_number_base_and_return_08005d82": "convert_number_base_and_return",
                "FUN_08005da8": "validate_and_convert_input_08005da8"
            },
            "code": "int validate_and_convert_input_08005da8(undefined4 input_1, undefined4 input_2, undefined4 input_3, uint input_4, byte input_5) {\n  int is_valid_input = is_valid_input(input_3, input_4, input_3, input_4);\n  if (is_valid_input != 0) {\n    return reverse_and_call(input_1, PTR_DAT_08005f1c);\n  }\n  is_valid_input = is_valid_input(input_3, input_4 & 0x7fffffff, 0xffffffff, DAT_08005f08);\n  if (is_valid_input != 0) {\n    is_valid_input = is_input_empty(input_3, input_4, 0xe0000000, DAT_08005f0c);\n    if (is_valid_input != 0) {\n      return reverse_and_call(input_1, PTR_DAT_08005f24);\n    }\n    is_valid_input = is_input_null_080009dc_080009dc(input_3, input_4, 0xe0000000, DAT_08005f10);\n    if (is_valid_input != 0) {\n      return reverse_and_call(input_1, PTR_DAT_08005f24);\n    }\n    is_valid_input = is_input_null_080009dc_080009dc(input_3, input_4, 0, 0);\n    if (is_valid_input != 0) {\n      return 0;\n    }\n    int call_result = call_function_pointer(input_1, 0x2d);\n    input_4 = input_4 + 0x80000000;\n    longlong value = (ulonglong)DAT_08005f14 << 0x20;\n    for (byte i = 0; i < input_5; i = i + 1) {\n      value = FUNC_0800074c((int)value, (undefined4)((ulonglong)value >> 0x20), 0, DAT_08005f18);\n    }\n    undefined8 converted_input = FUNC_08000194(input_3, input_4, (int)value, (undefined4)((ulonglong)value >> 0x20));\n    undefined4 shift_amount = calculate_shift_amount();\n    undefined8 shifted_value = calculate_shifted_value();\n    undefined8 shifted_result = FUNC_08000190((int)converted_input, (int)((ulonglong)converted_input >> 0x20), (int)shifted_value, (int)((ulonglong)shifted_value >> 0x20));\n    int conversion_result = convert_number_to_base(input_1, shift_amount, 10);\n    int result = conversion_result + call_result;\n    if (input_5 != 0) {\n      int reverse_result = reverse_and_call(input_1, PTR_DAT_08005f28);\n      result = result + reverse_result;\n    }\n    while (input_5 != 0) {\n      shifted_result = FUNC_080004f8((int)shifted_result, (int)((ulonglong)shifted_result >> 0x20), 0, DAT_08005f18);\n      undefined4 integer_conversion = convert_to_integer();\n      int conversion_and_return_result = convert_number_base_and_return(input_1, integer_conversion, 10);\n      result = result + conversion_and_return_result;\n      undefined8 calculation_result = calculate(input_1, integer_conversion);\n      shifted_result = FUNC_08000190((int)shifted_result, (int)((ulonglong)shifted_result >> 0x20), (int)calculation_result, (int)((ulonglong)calculation_result >> 0x20));\n      input_5 = input_5 - 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_08005d8a",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08005cb6",
                "FUN_08000a18",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_08005d82",
                "FUN_08000190",
                "FUN_0800042c",
                "FUN_08000a58",
                "FUN_08000aa8",
                "FUN_08005c96",
                "FUN_08000194",
                "FUN_08000a2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "FUN_08005f2c"
            ],
            "imported": false,
            "current_name": "validate_and_convert_input_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "clear_bit_and_set_space_080045fe",
                "param_1": "ptr_input",
                "*param_1": "*ptr_input",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int clear_bit_and_set_space_080045fe(int *PTR_input)\n{\n    uint *PTR_input_c = (uint *)(*PTR_input + 0xc);\n    *PTR_input_c = *PTR_input_c & 0xffffffbf;\n    char *PTR_char = (char *)(PTR_input + 0x39);\n    *PTR_char = ' ';\n    find_and_check_input();\n    return 0;\n}",
            "called": [
                "FUN_08005604"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "clear_bit_and_set_space_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "validate_and_convert_input_08005f2c",
                "validate_and_convert_input_08005da8": "validate_and_convert_input"
            },
            "code": "void validate_and_convert_input_08005f2c() {\n  validate_and_convert_input_08005f2c_08005da8();\n  return;\n}",
            "called": [
                "FUN_08005da8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_convert_input_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "execute_command_080055e0",
                "uVar1": "command_index",
                "find_index_080055bc": "get_command_index",
                "PTR_DAT_080055fc": "COMMAND_FUNC_PTRS",
                "PTR_DAT_08005600": "COMMAND_ARGS",
                "code": "command_func_ptr",
                "undefined4": "uint32_t"
            },
            "code": "void execute_command_080055e0(void)\n{\n  uint32_t command_index;\n  command_index = get_command_index();\n  if (command_index < 5) {\n    (**(command_func_ptr **)(PTR_DAT_080055fc + command_index * 4))(*(uint32_t *)(PTR_DAT_08005600 + command_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "FUN_08004618"
            ],
            "imported": false,
            "current_name": "execute_command_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "sum_of_input_and_validation_08005f40",
                "param_1": "user_input",
                "iVar1": "converted_input",
                "iVar2": "result_of_function_call",
                "validate_and_convert_input_08005f2c": "validate_and_convert_input",
                "call_function_with_args_08005cc0": "call_function_with_args"
            },
            "code": "int sum_of_input_and_validation_08005f40(int user_input){\n  int converted_input = validate_and_convert_input(user_input);\n  int result_of_function_call = call_function_with_args(user_input);\n  return result_of_function_call + converted_input;\n}",
            "called": [
                "FUN_08005f2c",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "sum_of_input_and_validation_08005f40"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "checkAndUpdateFlags_0800213c",
                "param_1": "flags",
                "iVar1": "result",
                "uVar2": "uVar2",
                "uVar3": "uVar3",
                "DAT_08002244": "DAT_08002244",
                "DAT_08002248": "DAT_08002248"
            },
            "code": "int checkAndUpdateFlags_0800213c(int* flags) {\n  int result;\n  uint flag10 = flags[10] & 0x10;\n  if (!flags) {\n    return 1;\n  }\n  if (!flags[10]) {\n    flags[0xb] = 0;\n    *(undefined *)(flags + 9) = 0;\n    decodeAndSetFlag();\n  }\n  result = checkAndUpdateFlags_0800213cHelper(flags);\n  if (!flag10 && !result) {\n    flags[10] = (flags[10] & 0xffffeefd) | 2;\n    uint uVar2 = flags[1] | flags[7] | (flags[3] << 1);\n    uint uVar3;\n    if (flags[2] == 0x100 || flags[2] == 1) {\n      uVar3 = (flags[4] - 1) * 0x100000;\n    }\n    else {\n      uVar3 = 0;\n    }\n    if (flags[5] == 1) {\n      if (!flags[3]) {\n        uVar3 |= (flags[6] - 1) * 0x2000 | 0x800;\n      }\n      else {\n        flags[10] |= 0x20;\n        flags[0xb] |= 1;\n      }\n    }\n    *(uint *)(*flags + 4) = uVar3 | (*(uint *)(*flags + 4) & 0xffff16ff);\n    *(uint *)(*flags + 8) = (*(uint *)(*flags + 8) & DAT_08002244) | uVar2;\n    if (uVar2 != (DAT_08002248 & *(uint *)(*flags + 8))) {\n      flags[10] = (flags[10] & 0xffffffed) | 0x10;\n      flags[0xb] |= 1;\n      return 1;\n    }\n    flags[0xb] = 0;\n    flags[10] = (flags[10] & 0xfffffffc) | 1;\n    return 0;\n  }\n  flags[10] |= 0x10;\n  return 1;\n}",
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "checkAndUpdateFlags_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_input_0800455a",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)input_array + 0x39)",
                "*(char *)(param_1 + 0xe)": "*(char *)(input_array + 0xe)",
                "param_1[8]": "input_array[8]",
                "*(short *)(param_1 + 9)": "*(short *)(input_array + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)input_array + 0x26)",
                "param_1[0xf]": "input_array[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)input_array + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(input_array + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 0xc)"
            },
            "code": "int check_input_0800455a(int *input_array, int array_length, int value) {\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (array_length == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = array_length;\n    *(short *)(input_array + 9) = (short)value;\n    *(short *)((int)input_array + 0x26) = (short)value;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "FUN_08005604",
                "FUN_08005568"
            ],
            "imported": false,
            "current_name": "check_input_0800455a"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "update_data_08001a66",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "uVar1": "updated_ptr1/2/3",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void update_data_08001a66(int data_ptr, int new_data, undefined4 param_3, undefined4 param_4)\\n{\\n  if ((*(char *)(data_ptr + 0x70) != \"\\0\") && (*(int *)(data_ptr + 0x30) != new_data)) {\\n    undefined8 updated_ptr1 = FUNC_08000190(0,0,*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x1c),param_4);\\n    *(undefined8 *)(data_ptr + 0x18) = updated_ptr1;\\n    undefined8 updated_ptr2 = FUNC_08000190(0,0,*(undefined4 *)(data_ptr + 0x20),*(undefined4 *)(data_ptr + 0x24));\\n    *(undefined8 *)(data_ptr + 0x20) = updated_ptr2;\\n    undefined8 updated_ptr3 = FUNC_08000190(0,0,*(undefined4 *)(data_ptr + 0x28),*(undefined4 *)(data_ptr + 0x2c));\\n    *(undefined8 *)(data_ptr + 0x28) = updated_ptr3;\\n  }\\n  *(int *)(data_ptr + 0x30) = new_data;\\n  return;\\n}",
            "called": [
                "FUN_08000190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "update_data_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "get_data_from_pointer_08003c44",
                "PTR_DAT_08003c4c": "data_pointer"
            },
            "code": "int get_data_from_pointer_08003c44() {\n    int* PTR_DAT_08003c4c = (int*)PTR_DAT_08003c4c;\n    int data = *PTR_DAT_08003c4c;\n    return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "FUN_08001b48",
                "FUN_08003c70",
                "FUN_08003c50"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08003c44"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "set_param_value_080028d2",
                "param_1": "param_array"
            },
            "code": "void set_param_value_080028d2(int* param_array) {\n    uint32_t* ptr = (uint32_t*)(param_array[0] + 0x10);\n    uint8_t value = param_array[0x11] & 0xff;\n    *ptr = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_param_value_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "is_input_empty_08000a18",
                "in_CY": "input_char",
                "validate_params_and_return_result_080009a8": "validate_and_return_result"
            },
            "code": "bool is_input_empty_08000a18(void)\n{\n  char input_char;\n  validate_and_return_result();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_input_empty_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "update_data_08005384",
                "cVar1": "current_char",
                "puVar2": "data_ptr",
                "uVar3": "first_nonzero_value",
                "iVar4": "value_index",
                "uVar5": "value"
            },
            "code": "void update_data_08005384(void)\n{\n  char current_char;\n  int value_index;\n  undefined4 value;\n  undefined4 first_nonzero_value;\n  undefined *data_ptr = PTR_DAT_080053d0;\n\n  current_char = PTR_DAT_080053c4[1];\n  value_index = find_value_index(current_char, PTR_DAT_080053c8);\n  if (value_index != 0) {\n    value = find_value(value_index, PTR_DAT_080053c8);\n    first_nonzero_value = find_first_nonzero(value, PTR_DAT_080053cc);\n    data_ptr[0x59] = first_nonzero_value;\n    data_ptr[0x58] = current_char;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    FUNC_08004f4c(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08004c78",
                "FUN_08004f4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "update_data_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "set_value_at_offset_08005b3c",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "byte_value"
            },
            "code": "void set_value_at_offset_08005b3c(int offset, uint value) {\n  undefined byte_value;\n  if (value < 0x3c) {\n    byte_value = PTR_DAT_08005b50[value];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(undefined *)(offset + 300) = byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08005b3c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "process_flags_080046b8",
                "param_1": "input",
                "iVar1": "val",
                "puVar3": "data",
                "uVar2": "flag2",
                "uVar4": "flag5",
                "uVar5": "flag1",
                "process_input_08004618": "process_input",
                "parse_data_08004198": "parse_data",
                "clear_bit_and_set_space_080045fe": "clear_flag_and_set_space",
                "do_nothing_08005650": "do_nothing",
                "clear_flags_on_address_0800417c": "clear_flags_on_address",
                "get_value_from_param_0800258c": "get_value_from_param"
            },
            "code": "void process_flags_080046b8(uint **input)\n{\n    uint *data = *input;\n    uint flag1 = *data;\n    uint flag2 = data[3];\n    \n    if ((flag1 & 0xf) == 0 && (flag1 & 0x20) && (flag2 & 0x20)) {\n        process_input(input);\n        return;\n    }\n    \n    if ((flag1 & 0xf) == 0 || ((data[5] & 1) == 0 && (flag2 & 0x120) == 0)) {\n        if ((flag1 & 0x80) && (flag2 & 0x80)) {\n            parse_data(input);\n            return;\n        }\n        \n        if ((flag1 & 0x40) && (flag2 & 0x40)) {\n            clear_flag_and_set_space(input);\n        }\n    } else {\n        if ((flag1 & 1) && (flag2 & 0x100)) {\n            input[0xf] = (uint *)((uint)input[0xf] | 1);\n        }\n        \n        if ((flag1 & 4) && (data[5] & 1)) {\n            input[0xf] = (uint *)((uint)input[0xf] | 2);\n        }\n        \n        if ((flag1 & 2) && (data[5] & 1)) {\n            input[0xf] = (uint *)((uint)input[0xf] | 4);\n        }\n        \n        if ((flag1 & 8) && (data[5] & 1)) {\n            input[0xf] = (uint *)((uint)input[0xf] | 8);\n        }\n        \n        if (input[0xf] != (uint *)0x0) {\n            if ((flag1 & 0x20) && (flag2 & 0x20)) {\n                process_input(input);\n            }\n            \n            if (((uint)input[0xf] & 8) == 0 && ((**input)[5] & 0x40) == 0) {\n                do_nothing(input);\n                input[0xf] = (uint *)0x0;\n                return;\n            }\n            \n            clear_flags_on_address(input);\n            data = *input;\n            \n            if ((data[5] & 0x40) == 0) {\n                do_nothing(input);\n                return;\n            }\n            \n            data[5] &= 0xffffffbf;\n            \n            if (input[0xd] == (uint *)0x0) {\n                do_nothing(input);\n                return;\n            }\n            \n            input[0xd][0xd] = (uint)PTR_LAB_080047d8_1_080047d4;\n            int val = get_value_from_param(input[0xd]);\n            \n            if (val != 0) {\n                (*(code *)input[0xd][0xd])();\n                return;\n            }\n        }\n    }\n}",
            "called": [
                "FUN_080045fe",
                "FUN_08005650",
                "FUN_08004198",
                "FUN_0800258c",
                "FUN_08004618",
                "FUN_0800417c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [],
            "imported": false,
            "current_name": "process_flags_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "find_first_occurrence_08004c8a",
                "param_1": "target",
                "param_2": "data",
                "*param_2": "current_char",
                "PTR_": "PTR_ (no change)",
                "DAT_": "DAT_ (no change)"
            },
            "code": "int find_first_occurrence_08004c8a(int target, char *data)\n{\n    while(true) {\n        if (*(int *)(data + 4) == 0) {\n            return -1;\n        }\n        if (*(int *)(data + 4) == target) {\n            break;\n        }\n        data = data + 0xc;\n    }\n    return (int)*data;\n}",
            "called": [
                "FUN_08004c8a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "imported": false,
            "current_name": "find_first_occurrence_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "calculate_value_08001cd0",
                "param_1": "values",
                "param_2": "count",
                "iVar1": "starting_value",
                "uVar2": "uVar2",
                "iVar3": "iVar3",
                "uVar4": "result",
                "puVar5": "current_value",
                "uVar6": "uVar6",
                "local_1c": "local_1c",
                "ptr": "ptr"
            },
            "code": "uint32_t calculate_value_08001cd0(uint32_t **values, uint32_t count) {\n    uint32_t starting_value = get_starting_value();\n    uint32_t *current_value = *values;\n    uint32_t result = 0;\n    uint32_t local_count = 0;\n    uint32_t uVar2 = 0;\n    uint32_t *ptr = NULL;\n    uint32_t local_1c = 0;\n    if ((current_value[2] & 0x100) == 0) {\n        if (((current_value[1] & 0x100) == 0) && ((current_value[0xb] & 0xf00000) == 0)) {\n            while (((**values & 2) == 0) && ((count == 0xffffffff) || ((count != 0 && ((get_starting_value() - starting_value) <= count)))) {\n                local_count++;\n            }\n            if (count != 0xffffffff && count < (get_starting_value() - starting_value)) {\n                (*values)[10] |= 4;\n                (*values)[9] = 0;\n                result = 3;\n            }\n        }\n        else {\n            uint32_t uVar6 = **(uint32_t **)PTR_DAT_08001e2c;\n            uint32_t uVar3 = calculate_value_08001cd0_08003da4(2);\n            uint32_t *current_value = *values;\n            if (((current_value[4] & DAT_08001e30) == 0) && ((current_value[3] & DAT_08001e30 + 0xdc000000) == 0)) {\n                if ((current_value[4] & DAT_08001e34) == 0) {\n                    if ((current_value[3] & DAT_08001e38) == 0) {\n                        ptr = (uint32_t *)0x14;\n                    }\n                    else {\n                        ptr = (uint32_t *)0x29;\n                    }\n                }\n                else {\n                    ptr = (uint32_t *)0x29;\n                }\n            }\n            else if (((current_value[4] & DAT_08001e34) == 0) && ((current_value[3] & DAT_08001e34 + 0xee000000) == 0)) {\n                ptr = (uint32_t *)0x54;\n            }\n            else if ((DAT_08001e3c & current_value[4]) == 0) {\n                if ((DAT_08001e3c & current_value[3]) == 0) {\n                    ptr = (uint32_t *)0x54;\n                }\n                else {\n                    ptr = (uint32_t *)0xfc;\n                }\n            }\n            else {\n                ptr = (uint32_t *)0xfc;\n            }\n            uVar2 = (uVar6 / uVar3) * (uint32_t)ptr;\n            while (local_1c <= uVar2 && uVar2 - local_1c != 0) {\n                if ((count != 0xffffffff) && (count < (get_starting_value() - starting_value))) {\n                    (*values)[10] |= 4;\n                    (*values)[9] = 0;\n                    result = 3;\n                    break;\n                }\n                local_1c++;\n            }\n            if ((**values & 2) != 0) {\n                (*values)[10] |= 0x200;\n                (*values)[9] = 0;\n                if (((*values)[2] & 0xe0000) == 0xe0000) {\n                    if ((*values)[3] == NULL) {\n                        (*values)[10] &= 0xfffffeff;\n                        if (((*values)[10] & 0x1000) == 0) {\n                            (*values)[10] |= 1;\n                            result = 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else {\n        (*values)[10] |= 0x20;\n        (*values)[9] = 0;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08001cc4",
                "FUN_08003da4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "calculate_value_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "get_shifted_value_08004a4c",
                "param_1": "input_value",
                "local_46": "shifted_value",
                "local_44": "parameter_2",
                "local_40": "parameter_3",
                "local_3c": "parameter_4",
                "local_38": "parameter_1",
                "local_34": "parameter_5",
                "local_30": "parameter_6",
                "local_2c": "parameter_7",
                "local_28": "parameter_8",
                "local_24": "parameter_9",
                "local_20": "unused_parameter",
                "local_1c": "unused_parameter",
                "local_10": "unused_parameter",
                "fill_memory_range_with_value_080061e0": "fill_memory_range_with_value",
                "find_value_08004c78": "find_matching_value",
                "PTR_DAT_08004b2c": "MATCHING_VALUES",
                "*PTR_DAT_08004b30": "set_first_matching_value",
                "checkAndUpdateFlags_0800213c": "check_and_update_flags",
                "get_shifted_value_0800492c": "get_shifted_value",
                "set_parameter_08001e48": "set_parameter",
                "update_flags_and_check_08002384": "update_flags_and_check",
                "set_value_if_not_set_08001f84_or_update_state_08002004": "set_value_if_not_set_or_update_state",
                "calculate_value_08001cd0": "calculate_value",
                "get_value_at_offset_08001f80": "get_value_at_offset",
                "get_value_from_offset_08001e40": "get_value_from_offset",
                "checkAndUpdateFlags_08002348": "check_and_update_flags",
                "reset_flags_0800224c": "reset_flags"
            },
            "code": "int get_shifted_value_08004a4c(uint input_value) {\n  int shifted_value = 0;\n  int parameter_1 = find_matching_value(input_value, PTR_DAT_08004b2c);\n  if (parameter_1 != 0) {\n    int parameter_2 = 0;\n    int parameter_3 = 0;\n    int parameter_4 = 0;\n    int parameter_5 = 0;\n    int parameter_6 = 0xE0000;\n    int parameter_7 = 0;\n    int parameter_8 = 1;\n    int parameter_9 = 0;\n    *PTR_DAT_08004b30(input_value);\n    if (check_and_update_flags(&parameter_1) == 0) {\n      shifted_value = get_shifted_value_08004a4c(input_value);\n      if (shifted_value < 0x12) {\n        parameter_2 = 1;\n        parameter_3 = 2;\n        if (set_parameter(&parameter_1, &shifted_value) == 0) {\n          if (update_flags_and_check(&parameter_1) == 0) {\n            if (set_value_if_not_set_or_update_state(&parameter_1) == 0) {\n              if (calculate_value(&parameter_1, 10) == 0) {\n                uint value_at_offset = get_value_at_offset(&parameter_1);\n                if ((value_at_offset & 0x200) != 0) {\n                  shifted_value = get_value_from_offset(&parameter_1);\n                }\n                if (check_and_update_flags(&parameter_1) != 0 || reset_flags(&parameter_1) != 0) {\n                  shifted_value = 0;\n                }\n              }\n              else {\n                shifted_value = 0;\n              }\n            }\n            else {\n              shifted_value = 0;\n            }\n          }\n          else {\n            shifted_value = 0;\n          }\n        }\n        else {\n          shifted_value = 0;\n        }\n      }\n      else {\n        shifted_value = 0;\n      }\n    }\n    else {\n      shifted_value = 0;\n    }\n  }\n  return shifted_value;\n}",
            "called": [
                "FUN_08002348",
                "FUN_080061e0",
                "FUN_0800213c",
                "FUN_08001cd0",
                "FUN_08001e40",
                "FUN_08002004",
                "FUN_0800224c",
                "FUN_08001e48",
                "FUN_08004c78",
                "FUN_08001f80",
                "FUN_0800492c",
                "FUN_08002384"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "FUN_08005754"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "convert_uint_to_longlong_if_dat_is_zero_08006112",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2"
            },
            "code": "void convert_uint_to_longlong_if_dat_is_zero_08006112(uint32_t* ptr_param1, uint32_t* ptr_param2)\n{\n  convert_uint_to_longlong_if_dat_is_zero_08006112_08006158(ptr_param2, ptr_param1);\n  return;\n}",
            "called": [
                "FUN_08006158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "FUN_08005fc8"
            ],
            "imported": false,
            "current_name": "convert_uint_to_longlong_if_dat_is_zero_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "decode_and_set_flag_08004974",
                "param_1": "flag_value",
                "param_2": "flag_mask",
                "puVar1": "PTR_BIT_MASK",
                "iVar2": "FLAG_ADDRESS",
                "uVar3": "decoded_bits",
                "uVar4": "flag_masked_and",
                "uVar5": "current_flag",
                "local_18": "bit_mask",
                "local_14": "UNUSED_VALUE_1",
                "local_10": "UNUSED_VALUE_2"
            },
            "code": "void decode_and_set_flag_08004974(uint *flag_value, uint flag_mask)\n{\n  uint current_flag, new_flag;\n  uint bit_mask;\n  uint decoded_bits;\n  uint flag_masked;\n  uint flag_masked_and;\n  \n  current_flag = *flag_value;\n  if (current_flag == FLAG_VALUE_A) {\n    new_flag = *(uint *)(FLAG_ADDRESS + 0x18) | FLAG_BIT_A;\n    *(uint *)(FLAG_ADDRESS + 0x18) = new_flag;\n    flag_masked = *(uint *)(FLAG_ADDRESS + 0x18) & FLAG_BIT_A;\n  }\n  else {\n    if (current_flag == FLAG_VALUE_B) {\n      new_flag = *(uint *)(FLAG_ADDRESS + 0x18) | FLAG_BIT_B;\n      *(uint *)(FLAG_ADDRESS + 0x18) = new_flag;\n      flag_masked = *(uint *)(FLAG_ADDRESS + 0x18) & FLAG_BIT_B;\n    }\n  }\n  decoded_bits = decode_bits(PTR_DECODED_BITS, flag_masked);\n  bit_mask = 1 << ((byte)*PTR_BIT_MASK & 0xf) & 0xffff;\n  flag_masked_and = flag_mask & 0xffff;\n  decode_bits_08002624(decoded_bits, &bit_mask, &flag_masked_and);\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "FUN_0800213c"
            ],
            "imported": false,
            "current_name": "decode_and_set_flag_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "execute_command_08003520",
                "param_1": "command_data",
                "cVar1": "command_char",
                "puVar2": "command_ptr",
                "uVar3": "command_status",
                "uVar4": "command_mask",
                "DAT_080035f8": "COMMAND_MASK_1",
                "0x100": "COMMAND_MASK_2",
                "0x10200": "COMMAND_MASK_4",
                "0x10400": "COMMAND_MASK_6",
                "0x10800": "COMMAND_MASK_9",
                "0xc": "command_data_12"
            },
            "code": "void execute_command_08003520(uint **command_data)\n{\n  char command_char;\n  uint *command_ptr;\n  uint command_status;\n  \n  command_ptr = *command_data;\n  command_status = command_ptr[5];\n  if (((command_status & DAT_080035f8) != 0) && ((command_ptr[1] & 0x100) != 0)) {\n    command_data[16] = (uint *)((uint)command_data[16] | COMMAND_MASK_2);\n    command_ptr[5] = 0xfffffeff;\n    **command_data = **command_data | COMMAND_MASK_3;\n  }\n  if (((command_status & COMMAND_MASK_4) != 0) && ((command_ptr[1] & 0x100) != 0)) {\n    command_data[16] = (uint *)((uint)command_data[16] | COMMAND_MASK_5);\n    (*command_data)[5] = 0xfffffdff;\n  }\n  if (((command_status & COMMAND_MASK_6) != 0) && ((command_ptr[1] & 0x100) != 0)) {\n    command_char = *(char *)((int)command_data + 0x3d);\n    if (((*(char *)((int)command_data + 0x3e) == ' ') && (*(short *)((int)command_data + 0x2a) == 0)) &&\n       (((command_char == '!' || (command_char == ')')) || ((command_char == '(' && (command_data[12] == (uint *)0x21)))))) {\n      execute_command_08003520_08002d1c(command_data);\n    }\n    else {\n      command_data[16] = (uint *)((uint)command_data[16] | COMMAND_MASK_7);\n      if (*(char *)((int)command_data + 0x3e) == '\\x10') {\n        **command_data = **command_data | COMMAND_MASK_8;\n      }\n      (*command_data)[5] = 0xfffffbff;\n    }\n  }\n  if (((command_status & COMMAND_MASK_9) != 0) && ((command_ptr[1] & 0x100) != 0)) {\n    command_data[16] = (uint *)((uint)command_data[16] | DAT_080035f80);\n    (*command_data)[5] = 0xfffff7ff;\n  }\n  if (command_data[16] != (uint *)0x0) {\n    execute_command_08003520_0800316c(command_data);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08002d1c",
                "FUN_0800316c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [],
            "imported": false,
            "current_name": "execute_command_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "process_input_08002ca6",
                "param_1": "input_array",
                "cVar1": "current_char",
                "puVar2": "current_position"
            },
            "code": "int process_input_08002ca6(int *input_array) {\n  char current_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    undefined *current_position = (undefined *)input_array[9];\n    input_array[9] = (int)(current_position + 1);\n    *current_position = (char)*(undefined4 *)(*input_array + 0x10);\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x22;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002ca4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "FUN_08002ca6",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "FUN_08006198",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54": "initialize_data_structure_08005b54",
                "param_1": "data_structure",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "first_nonzero_value"
            },
            "code": "undefined4* initialize_data_structure_08005b54(undefined4 *data_structure, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined first_nonzero_value;\n    data_structure[1] = 0;\n    data_structure[2] = 1000;\n    *data_structure = PTR_PTR_LAB_080059c8_1_08005ba0;\n    if (data_structure == (undefined4 *)PTR_DAT_08005ba4) {\n        set_value_at_offset_08005b24(data_structure, 0, param_3, PTR_DAT_08005ba4, param_4);\n        set_value_at_offset_08005b3c(data_structure, 1);\n    }\n    else {\n        first_nonzero_value = find_first_nonzero_08004ca2(param_2, PTR_DAT_08005ba8);\n        *(undefined *)((int)data_structure + 0x12d) = first_nonzero_value;\n        first_nonzero_value = find_first_nonzero_08004ca2(param_2, PTR_DAT_08005bac);\n        *(undefined *)(data_structure + 0x4b) = first_nonzero_value;\n    }\n    initialize_data_structure_08005b54s_08005a44(data_structure);\n    return data_structure;\n}",
            "called": [
                "FUN_08004ca2",
                "FUN_08005a44",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "FUN_08005bb0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "process_input_08004618",
                "param_1": "input_array",
                "pbVar1": "byte_pointer",
                "sVar2": "remaining_chars",
                "puVar3": "undefined_pointer",
                "first_char": "first_character",
                "array_length": "input_array_length",
                "data_type": "input_data_type",
                "data_value": "input_data_value"
            },
            "code": "int process_input_08004618(int *input_array)\n{\n    char first_char = *(char *)((int)input_array + 0x3a);\n    if (first_char != '\"') {\n        return 2;\n    }\n    int array_length = input_array[2];\n    int data_type = input_array[4];\n    int data_value = *(int *)(*input_array + 4);\n    if (array_length == 0x1000) {\n        if (data_type == 0) {\n            *(ushort *)input_array[10] = (ushort)((uint)(data_value << 0x17) >> 0x17);\n            input_array[10] += 2;\n        }\n        else {\n            *(ushort *)input_array[10] = (ushort)data_value & 0xff;\n            input_array[10]++;\n        }\n    }\n    else if (data_type == 0) {\n        *(char *)input_array[10] = (char)data_value;\n        input_array[10]++;\n    }\n    else {\n        *(byte *)input_array[10] = (byte)data_value & 0x7f;\n        input_array[10]++;\n    }\n    short remaining_chars = *(short *)((int)input_array + 0x2e) - 1;\n    *(short *)((int)input_array + 0x2e) = remaining_chars;\n    if (remaining_chars != 0) {\n        return 0;\n    }\n    *(uint *)(*input_array + 0xc) &= 0xffffffdf;\n    *(uint *)(*input_array + 0xc) &= 0xfffffeff;\n    *(uint *)(*input_array + 0x14) &= 0xfffffffe;\n    *(char *)((int)input_array + 0x3a) = 0x20;\n    execute_command();\n    return 0;\n}",
            "called": [
                "FUN_080055e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "process_input_08004618"
        },
        "FUN_08006c40": {
            "renaming": {
                "FUN_08006c40": "initialize_params_08006c40",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "uVar1"
            },
            "code": "void initialize_params_08006c40(undefined4 *params, undefined2 param_2, undefined2 param_3)\n{\n    *params = 0;\n    params[1] = 0;\n    params[2] = 0;\n    *(undefined2 *)(params + 3) = param_2;\n    params[0x19] = 0;\n    *(undefined2 *)((int)params + 0xe) = param_3;\n    params[4] = 0;\n    params[5] = 0;\n    params[6] = 0;\n    fill_memory_range_with_value_080061e0(params + 0x17, 0, 8);\n    params[8] = params;\n    params[9] = DAT_08006c78;\n    params[10] = PTR_process_input_data_08006f5a_1_08006c7c;\n    params[0xb] = PTR_process_data_and_update_status_08006f92_1_08006c80;\n    params[0xc] = PTR_LAB_08006fb6_1_08006c84;\n    return;\n}",
            "called": [
                "FUN_080061e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_params_08006c40"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c": "decode_and_update_0800157c",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "first_char",
                "param_4": "second_char",
                "*param_1": "*data"
            },
            "code": "char* decode_and_update_0800157c(char* data, int data_size, char first_char, char second_char)\n{\n    *data = first_char;\n    data[1] = second_char;\n    data[2] = data_size;\n    decode_and_update_0800157c_data_080057b4(first_char, 0);\n    decode_and_update_0800157c_data_080057b4(data[1], 1);\n    decode_and_update_0800157c_data_080057b4(data[2], 1);\n    decode_data_08005848(data[1], 1);\n    decode_data_08005848(data[2], 0);\n    return data;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "decode_and_update_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "array_length",
                "param_3": "input_value"
            },
            "code": "int validate_input_080045a2(int *input_array, int array_length, int input_value){\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (array_length == 0) {\n    return 1;\n  }\n  if (input_value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = array_length;\n    *(short *)(input_array + 0xb) = (short)input_value;\n    *(short *)((int)input_array + 0x2e) = (short)input_value;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "validate_input_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "enable_and_initialize_device_settings_08001c32",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void enable_and_initialize_device_settings_08001c32(void)\n{\n  enable_and_initialize_device_settings_08001c32_08004c52();\n  return;\n}",
            "called": [
                "FUN_08004c52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "FUN_08005f5e"
            ],
            "imported": false,
            "current_name": "enable_and_initialize_device_settings_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "combineTwoBytes_080047e8",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combineTwoBytes_080047e8(int address) {\n  byte byte1 = *(byte *)(address + 0x3a);\n  byte byte2 = *(byte *)(address + 0x39);\n  return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "FUN_080054b0",
                "FUN_0800548c"
            ],
            "imported": false,
            "current_name": "combineTwoBytes_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "decode_and_update_data_080057b4",
                "param_1": "data_index",
                "param_2": "decode_type",
                "param_3": "update_type",
                "param_4": "bit_array",
                "iVar1": "value",
                "puVar2": "data_array",
                "iVar3": "value_index",
                "PTR_DAT_08005838": "data_array",
                "PTR_DAT_0800583c": "bit_mask_array",
                "PTR_DAT_08005840": "value_array",
                "decode_bits_08004bb0": "decode_bits",
                "set_bit_at_index_0800480a": "set_bit_at_index",
                "get_bit_from_uint_at_index_080047f4": "get_bit_from_uint_at_index",
                "update_bit_08004828": "update_bit",
                "process_data_08004b3c": "process_data"
            },
            "code": "void decode_and_update_data_080057b4(uint data_index, uint decode_type, uint update_type, uint* bit_array) {\n  int value_index;\n  uint* PTR_DAT_08005838;\n  int value;\n\n  if (data_index < 0x3c) {\n    value_index = (int)(char)PTR_DAT_08005838[data_index];\n    PTR_DAT_08005838 = PTR_DAT_08005838;\n  }\n  else {\n    value_index = -1;\n    PTR_DAT_08005838 = bit_array;\n  }\n  if (value_index != -1) {\n    value = get_bit_from_uint_at_index_080047f4(value_index,PTR_DAT_0800583c,update_type,PTR_DAT_08005838,bit_array);\n    if (value != 0) {\n      value = find_value_08004ce2(value_index,PTR_DAT_08005840);\n      if (value != 0) {\n        process_data_08004b3c(value_index);\n      }\n      update_bit_08004828(value_index,PTR_DAT_0800583c);\n    }\n    switch(decode_type) {\n    case 0:\n      decode_bits_08004bb0(value_index,0);\n      break;\n    case 1:\n      decode_bits_08004bb0(value_index,1,0);\n      break;\n    case 2:\n      decode_bits_08004bb0(value_index,0,1);\n      break;\n    case 3:\n      decode_bits_08004bb0(value_index,0,2);\n    }\n    set_bit_at_index_0800480a(value_index,PTR_DAT_08005844);\n  }\n  return;\n}",
            "called": [
                "FUN_08004828",
                "FUN_0800480a",
                "FUN_08004bb0",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004b3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_and_update_data_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "update_user_info_and_return_param_08001b18_08001b18",
                "param_1": "user_param"
            },
            "code": "undefined4 update_user_info_and_return_param_08001b18_08001b18(undefined4 user_param)\n{\n  update_user_info_08001ab0();\n  return user_param;\n}",
            "called": [
                "FUN_08001ab0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "update_user_info_and_return_param_08001b18_08001b18"
        },
        "thunk_FUN_08005750": {
            "renaming": {
                "thunk_FUN_08005750": "get_one_thunk_08005750"
            },
            "code": "int get_one_thunk_08005750() {\n  return 1;\n}",
            "called": [
                "FUN_08005750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "FUN_08006f00"
            ],
            "imported": false,
            "current_name": "get_one_thunk_08005750"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "check_params_0800092c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "xor_result",
                "bVar2": "is_valid",
                "bVar3": "is_greater_than",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_params_0800092c(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint output;\n  bool is_valid;\n  bool is_equal;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_valid = (input_1 | input_2 << 1) == 0;\n  if (is_valid) {\n    is_valid = (input_3 | input_4 << 1) == 0;\n  }\n  if (!is_valid) {\n    is_equal = input_2 == input_4;\n    if (is_equal) {\n      is_equal = input_1 == input_3;\n    }\n    if (!is_equal) {\n      uint xor_result = input_2 ^ input_4;\n      is_equal = xor_result == 0;\n      if (-1 < (int)xor_result) {\n        is_equal = input_2 == input_4;\n      }\n      bool is_greater_than = -1 < (int)xor_result && input_4 <= input_2;\n      if (is_equal) {\n        is_greater_than = input_3 <= input_1;\n      }\n      output = (int)input_4 >> 0x1f;\n      if (!is_greater_than) {\n        output = ~output;\n      }\n      return output | 1;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "FUN_080009b8"
            ],
            "imported": false,
            "current_name": "check_params_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "convert_number_to_base_08005d8a",
                "param_1": "output",
                "param_2": "base",
                "param_3": "number",
                "param_4": "callback",
                "convert_number_to_base_08005ce8": "convert_number_to_base_helper",
                "code": "callback_function_t"
            },
            "code": "void convert_number_to_base_08005d8a(uint32_t *output, uint32_t base, uint32_t number, uint32_t callback) {\n  if (number != 0) {\n    convert_number_to_base_08005d8a_helper(output, base, number & 0xff);\n    return;\n  }\n  (**(callback_function_t **)output)(output, base & 0xff, 0, *(callback_function_t **)output, callback);\n  return;\n}",
            "called": [
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "FUN_08005da8",
                "FUN_08005da0"
            ],
            "imported": false,
            "current_name": "convert_number_to_base_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "set_flag_08002560",
                "param_1": "flag_value",
                "DAT_0800257c": "data_pointer"
            },
            "code": "void set_flag_08002560(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_flag_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_character_in_string_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_character_in_string_08006e90(char* string, char character, int length){\n    char* current_char = string;\n    while(current_char != string + length){\n        if(*current_char == character){\n            return current_char;\n        }\n        current_char++;\n    }\n    return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "calculateOffsetAndUpdate_08006920",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "code": "void calculateOffsetAndUpdate_08006920(int *output, undefined4 input)\n{\n    undefined *ptr = PTR_DAT_0800693c;\n    *(undefined4 *)PTR_DAT_0800693c = 0;\n    int offset = calculateOffset(input);\n    if (offset == -1 && *(int *)ptr != 0) {\n        *output = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_080056d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "calculateOffsetAndUpdate_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_5",
                "in_r12": "temp_4",
                "bVar4": "condition_1"
            },
            "code": "ulonglong calculate_result_080008ba(uint input_1, uint input_2, uint input_3, uint input_4)\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool condition_1;\n  \n  temp_4 = input_4 >> 0x14;\n  temp_5 = input_2;\n  if (input_3 != input_1 || temp_4 != input_1) {\n    if (input_3 == input_1) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, temp_5 = input_4, temp_4 != input_1)) {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp_4 == input_1) {\n      input_1 = input_3;\n      temp_5 = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      condition_1 = (input_1 | input_2 << 1) == 0;\n      if (!condition_1) {\n        condition_1 = (input_3 | input_4 << 1) == 0;\n      }\n      if (!condition_1) {\n        if (input_3 == 0) {\n          temp_5 = input_2 & 0x80000000;\n          do {\n            temp_1 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | temp_5;\n          if (temp_4 != 0) {\n            return CONCAT44(input_2,input_1);\n          }\n        }\n        do {\n          temp_5 = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(temp_5 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto LAB_0800072c;\n      if ((input_3 | input_4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp_5,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "FUN_0800074c"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "execute_command_08002d1c",
                "param_1": "param_array",
                "PTR_DAT_08002dac": "command_type",
                "DAT_08002dac": "N/A",
                "*(char *)((int)param_1 + 0x3d)": "command_char",
                "execute_command_if_valid_08004ec4": "execute_valid_command",
                "do_nothing_08002c52": "do_nothing"
            },
            "code": "int execute_command_08002d1c(uint **param_array) {\n\tuint *PTR_DAT_08002dac = param_array[11];\n\tchar command_char = *(char *)((int)param_array + 0x3d);\n\tif ((PTR_DAT_08002dac == (uint *)0x4 || PTR_DAT_08002dac == (uint *)0x8) && command_char == '(') {\n\t\tPTR_DAT_08002dac = PTR_DAT_08002dac;\n\t\t(*param_array)[1] &= 0xfffff8ff;\n\t\t(*param_array)[5] = 0xfffffbff;\n\t\t**param_array &= 0xfffffbff;\n\t\tparam_array[12] = (uint *)0x0;\n\t\t*(undefined *)((int)param_array + 0x3d) = 0x20;\n\t\t*(undefined *)((int)param_array + 0x3e) = 0;\n\t\texecute_command_08002d1c_if_valid_08004ec4();\n\t}\n\telse if (command_char == '!') {\n\t\tPTR_DAT_08002dac = PTR_DAT_08002dac;\n\t\tparam_array[12] = (uint *)0x21;\n\t\t*(undefined *)((int)param_array + 0x3d) = 0x20;\n\t\t*(undefined *)((int)param_array + 0x3e) = 0;\n\t\t(*param_array)[1] &= 0xfffff8ff;\n\t\t(*param_array)[5] = 0xfffffbff;\n\t\t**param_array &= 0xfffffbff;\n\t\tdo_nothing_08002c52();\n\t}\n\telse {\n\t\t(*param_array)[5] = 0xfffffbff;\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "FUN_08003520"
            ],
            "imported": false,
            "current_name": "execute_command_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_code_08005714",
                "undefined4": "int32_t"
            },
            "code": "int32_t return_error_code_08005714(void)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable_1",
                "abStack_20": "array_variable_1",
                "uStack_1c": "variable_1",
                "uStack_18": "variable_2",
                "uStack_14": "variable_3"
            },
            "code": "uint calculate_value_08003da4(int input)\n{\n  uint result = 0;\n  undefined2 local_variable_1;\n  byte array_variable_1[4];\n  undefined4 variable_1;\n  undefined4 variable_2;\n  undefined4 variable_3;\n  variable_3 = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  variable_2 = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  variable_1 = *(undefined4 *)PTR_DAT_08003e8c;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08003e8c + 0x10);\n  if (input == 2) {\n    result = get_data_from_pointer_and_shift_right_08003c70();\n    result = result / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08003e9c;\n      if ((DAT_08003e90[1] & 0x10000) != 0) {\n        result = DAT_08003e94 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08003e90[1] << 0xe) >> 0x1f));\n      }\n      result = result * array_variable_1[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08003e98 * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08003e90[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08003e90[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "calculate_value_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initialize_data_structures_08005a44",
                "param_1": "data_structure_address",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "start_of_data_structure": "pointer_to_start_of_data_structure",
                "first_data_structure_field": "pointer_to_first_data_structure_field",
                "second_data_structure_field": "pointer_to_second_data_structure_field",
                "end_of_data_structure": "pointer_to_end_of_data_structure",
                "third_data_structure_field": "pointer_to_third_data_structure_field",
                "fourth_data_structure_field": "pointer_to_fourth_data_structure_field"
            },
            "code": "void initialize_data_structures_08005a44(int data_structure_address) {\n    int* start_of_data_structure = (int*)(data_structure_address + 0x130);\n    *start_of_data_structure = data_structure_address + 0x11;\n    \n    short* first_data_structure_field = (short*)(data_structure_address + 0x134);\n    *first_data_structure_field = 0;\n    \n    short* second_data_structure_field = (short*)(data_structure_address + 0x136);\n    *second_data_structure_field = 0;\n    \n    int* end_of_data_structure = (int*)(data_structure_address + 0x138);\n    *end_of_data_structure = data_structure_address + 0x51;\n    \n    short* third_data_structure_field = (short*)(data_structure_address + 0x13c);\n    *third_data_structure_field = 0;\n    \n    short* fourth_data_structure_field = (short*)(data_structure_address + 0x13e);\n    *fourth_data_structure_field = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_input_null_080009dc_080009dc",
                "in_CY": "input_char"
            },
            "code": "bool is_input_null_080009dc_080009dc(void)\n{\n  char input_char;\n  validate_params_and_return_result_080009b8();\n  return input_char == '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_input_null_080009dc_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "clear_flags_on_address_0800417c",
                "*param_1": "address",
                "*(uint *)(*param_1 + 0xc)": "flags1",
                "*(uint *)(*param_1 + 0x14)": "flags2",
                "*(undefined *)((int)param_1 + 0x3a)": "char_value"
            },
            "code": "void clear_flags_on_address_0800417c(int *address)\n{\n    uint32_t *flags1 = (uint32_t *)(*address + 0xc);\n    uint32_t *flags2 = (uint32_t *)(*address + 0x14);\n    *flags1 &= 0xfffffedf;\n    *flags2 &= 0xfffffffe;\n    *(char *)((int)address + 0x3a) = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "clear_flags_on_address_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_value_from_pointer_and_return_08004b94"
            },
            "code": "void get_value_from_pointer_and_return_08004b94(void)\n{\n  get_value_from_pointer_08001cc4();\n  return;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "FUN_080058e0"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_and_return_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_value_and_return_080058e0"
            },
            "code": "void get_value_and_return_080058e0(){\n    get_value_from_pointer_and_return_08004b94();\n    return;\n}",
            "called": [
                "FUN_08004b94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "FUN_080016b4",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "get_value_and_return_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "calculate_and_update_08001918",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "calculated_value_4",
                "uVar2": "calculated_value_1",
                "uVar3": "calculated_value_2"
            },
            "code": "void calculate_and_update_08001918(int input_1, int input_2, undefined4 arg_3, undefined4 arg_4) {\n  \n  if (input_2 > 0) {\n    undefined8 calculated_value_1 = calculate_0800042c(input_2);\n    undefined8 calculated_value_2 = calculate_shifted_value_0800040c(*(undefined4 *)(input_1 + 0x58));\n    undefined8 calculated_value_3 = FUNC_0800074c((int)calculated_value_1, (int)((ulonglong)calculated_value_1 >> 0x20), (int)calculated_value_2, (int)((ulonglong)calculated_value_2 >> 0x20), arg_4);\n    undefined4 calculated_value_4 = (undefined4)((ulonglong)calculated_value_3 >> 0x20);\n    undefined8 calculated_value_5 = FUNC_080004f8((int)calculated_value_3, calculated_value_4, *(undefined4 *)(input_1 + 0x20), *(undefined4 *)(input_1 + 0x24));\n    *(undefined8 *)(input_1 + 0x20) = calculated_value_5;\n    undefined8 calculated_value_6 = FUNC_0800074c(*(undefined4 *)(input_1 + 0x28), *(undefined4 *)(input_1 + 0x2c), (int)calculated_value_3, calculated_value_4);\n    *(undefined8 *)(input_1 + 0x28) = calculated_value_6;\n    *(int *)(input_1 + 0x58) = input_2;\n  }\n  return;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_0800042c",
                "FUN_0800040c",
                "FUN_080004f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_and_update_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "execute_assertion_with_args_0800611c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "message",
                "param_4": "arg4",
                "uVar1": "function_address",
                "puVar2": "assertion_failed_message",
                "uVar3": "result",
                "uVar4": "arg4_copy"
            },
            "code": "void execute_assertion_with_args_0800611c(undefined4 arg1, undefined4 arg2, undefined *message, undefined4 arg4) {\n    undefined4 function_address = *(undefined4 *)(*(int *)PTR_PTR_DAT_08006148 + 0xc);\n    undefined *assertion_failed_message = PTR_s___function__0800614c;\n    undefined4 arg4_copy = arg4;\n    if (message == (undefined *)0x0) {\n        goto LAB_08006140;\n    }\n    do {\n        execute_function_with_args_08006174(function_address, PTR_s_assertion___s__failed__file___s__08006150, arg4_copy, arg1, arg2, assertion_failed_message, message, arg4_copy);\n        undefined8 result = execute_and_wait_08006ac0();\n        arg2 = (undefined4)((ulonglong)result >> 0x20);\n        function_address = (undefined4)result;\nLAB_08006140:\n        message = PTR_s__08006154;\n        assertion_failed_message = PTR_s__08006154;\n    } while (true);\n}",
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "FUN_08005a68"
            ],
            "imported": false,
            "current_name": "execute_assertion_with_args_0800611c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "get_bit_from_uint_at_index_080047f4",
                "param_1": "num",
                "param_2": "index",
                "*PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "uint get_bit_from_uint_at_index_080047f4(uint num, int index) {\n    uint **PTR_num = (uint *)(index + ((num << 0x18) >> 0x1c) * 4);\n    uint masked_num = num & 0xf;\n    uint result = (**PTR_num >> masked_num) & 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08005890",
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "get_bit_from_uint_at_index_080047f4"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_valid_input_080009f0",
                "in_CY": "is_CY_nonzero",
                "in_ZR": "is_ZR_nonzero",
                "validate_params_and_return_result_080009b8": "validate_params_and_return_result",
                "bool": "bool"
            },
            "code": "bool is_valid_input_080009f0(void)\n{\n  bool is_CY_nonzero = validate_params_and_return_result();\n  bool is_ZR_nonzero = !is_CY_nonzero || validate_ZR_and_return_result();\n  return is_CY_nonzero || is_ZR_nonzero;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_valid_input_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "decode_and_return_success_0800134e",
                "param_1": "data",
                "param_2": "data_length",
                "param_3": "unknown_value",
                "param_4": "value_4"
            },
            "code": "int decode_and_return_success_0800134e(int* data, int data_length, int unknown_value, int value_4){\n  decode_data_08001310(data, data_length, unknown_value, value_4, value_4);\n  return 1;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_and_return_success_0800134e"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "set_bit_and_flags_08002c10",
                "param_1": "memory",
                "puVar1": "data"
            },
            "code": "int set_bit_and_flags_08002c10(uint **memory) {\n  uint *data = *memory;\n  if (*(char *)((int)memory + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)memory + 0x3d) = 0x28;\n  if ((*data & 1) == 0) {\n    *data |= 1;\n  }\n  **memory |= 0x400;\n  (*memory)[1] |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_08002c10"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "current_step",
                "piVar3": "current_linked_list",
                "uVar4": "current_size",
                "uVar5": "current_flags",
                "iVar6": "temp_value",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "pcVar7": "current_function",
                "iVar8": "loop_counter",
                "uVar9": "original_data",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "is_flagged"
            },
            "code": "uint32_t process_data_08006be0(uint32_t *data, int *params) {\n    uint32_t result;\n    int *current_param;\n    uint32_t current_data;\n    uint16_t current_flags;\n    uint16_t current_size;\n    int current_step;\n    uint32_t (*current_function)(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);\n    bool is_flagged;\n\n    if (params[4] != 0) {\n        if (data != NULL && data[6] == 0) {\n            initialize_data();\n        }\n        if (params == (int *)PTR_DAT_08006c28) {\n            current_param = (int *)data[1];\n        } else if (params == (int *)PTR_DAT_08006c2c) {\n            current_param = (int *)data[2];\n        } else if (params == (int *)PTR_DAT_08006c30) {\n            current_param = (int *)data[3];\n        }\n        if (*(uint16_t *)(current_param + 3) != 0) {\n            current_flags = *(uint16_t *)(current_param + 3);\n            current_size = (uint32_t)current_flags;\n            if ((int)(current_size << 28) < 0) {\n                current_step = params[4];\n                if (current_step != 0) {\n                    is_flagged = current_size << 30 != 0;\n                    if (is_flagged) {\n                        current_size = 0;\n                    }\n                    current_function = (uint32_t (*)(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))current_param[10];\n                    if (!is_flagged) {\n                        current_size = current_param[5];\n                    }\n                    current_param[0] = current_step;\n                    current_param[2] = current_size;\n                    for (current_data = data[0] - current_step; current_data > 0; current_data -= current_size) {\n                        result = current_function(data, current_param[8], current_step, current_data, unaff_r4, unaff_r5);\n                        if (result < 1) {\n                            current_flags = *(uint16_t *)(current_param + 3);\n                            goto LAB_08006bc6;\n                        }\n                        current_step += result;\n                    }\n                }\n            } else if (((0 < current_param[1]) || (0 < current_param[0x10])) && ((current_function = (uint32_t (*)(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t))current_param[0xb]) != NULL)) {\n                current_data = *data;\n                *data = 0;\n                if ((current_size & 0x1000) == 0) {\n                    current_step = current_function(data, current_param[8], current_size & 0x1000, 1);\n                    if ((current_step == -1) && ((current_size = *data) != 0)) {\n                        if ((current_size != 0x1d) && (current_size != 0x16)) {\n                            current_flags = *(uint16_t *)(current_param + 3) | 0x40;\n                            goto LAB_08006bd0;\n                        }\n                        *data = current_data;\n                        goto LAB_08006aea;\n                    }\n                } else {\n                    current_step = current_param[0x15];\n                }\n                if (((int)((uint)current_flags << 29) < 0) && ((current_step = current_step - current_param[1]), current_param[0xd] != 0)) {\n                    current_step = current_step - current_param[0x10];\n                }\n                current_step = current_function(data, current_param[8], current_step, 0);\n                current_flags = *(uint16_t *)(current_param + 3);\n                if ((current_step == -1) && ((current_data = *data) > 0x1d || (-1 < (int)((DAT_08006bdc >> (current_data & 0xff)) << 0x1f))))) {\n                    goto LAB_08006bc6;\n                }\n                current_param[1] = 0;\n                current_param[0] = params[4];\n                if (((int)((uint)current_flags << 19) < 0) && ((current_step != -1) || (*data == 0))) {\n                    current_param[0x15] = current_step;\n                }\n                if ((current_param[0xd] != 0) && (current_param[0xd] != current_param + 0x11)) {\n                    add_to_linked_list(data);\n                }\n                current_param[0xd] = 0;\n            }\n        }\n    }\n    return 0;\n\nLAB_08006aea:\n    result = (*UNRECOVERED_JUMPTABLE_00)(0);\n    return result;\n\nLAB_08006bc6:\n    current_flags = current_flags | 0x40;\nLAB_08006bd0:\n    result = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n    return result;\n}",
            "called": [
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "FUN_08006344"
            ],
            "imported": false,
            "current_name": "process_data_08006be0",
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == (int *)PTR_DAT_08006c28) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c2c) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08006c30) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08006bdc >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            add_to_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_080012e8": {
            "renaming": {
                "FUN_080012e8": "decode_and_process_data_080012e8",
                "param_1": "data_ptr",
                "param_2": "bitmask",
                "uVar1": "bit_index",
                "decode_data_08005848": "decode_data",
                "decode_data_080012a2": "decode_data"
            },
            "code": "void decode_and_process_data_080012e8(int data_ptr, int bitmask) {\n  uint bit_index;\n  for (bit_index = 0; bit_index < 8; bit_index++) {\n    decode_data(data_ptr + bit_index + 0xb, bitmask >> (bit_index & 0xff) & 1);\n  }\n  decode_data(data_ptr);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "FUN_08001310"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "param_1": "param1",
                "param_2": "input",
                "param_3": "buffer",
                "param_4": "buffer_len",
                "puVar2": "buffer_end",
                "iVar1": "result",
                "iVar3": "current_pos"
            },
            "code": "int process_input_08006370(int param1, int input, undefined *buffer, int buffer_len) {\n  int result = 0;\n  undefined *buffer_end = buffer + buffer_len;\n  int current_pos = buffer_len;\n  do {\n    if (buffer == buffer_end) {\n      return 0;\n    }\n    result = process_input_08006370_08006344(param1, input, buffer, buffer_len, current_pos);\n    current_pos = result + 1;\n    buffer++;\n  } while (current_pos != 0);\n  return result;\n}",
            "called": [
                "FUN_08006344"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_input_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "bit_position",
                "DAT_08002510": "array_ptr"
            },
            "code": "void set_bit_in_array_080024f8(uint bit_position)\n{\n  if (bit_position >= 0) {\n    uint array_index = bit_position >> 5;\n    uint bit_offset = bit_position & 0x1f;\n    uint* DAT_08002510 = (uint*)DAT_08002510;\n    uint bit_mask = 1 << bit_offset;\n    DAT_08002510[array_index] = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "FUN_08005568",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080024f8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "update_user_info_08001ab0",
                "param_1": "user_info",
                "param_2": "user_id",
                "param_3": "user_name",
                "param_4": "user_email",
                "param_5": "user_age",
                "param_6": "user_gender",
                "param_7": "user_address",
                "param_8": "user_phone",
                "param_9": "user_password",
                "param_10": "user_credit_card",
                "param_11": "user_subscription",
                "param_12": "user_status",
                "iVar1": "user_credit",
                "extraout_r1": "user_subscription",
                "updateUserInfo_08001960": "updateUserInfo",
                "update_data_08001a66": "update_user_credit",
                "process_input_data_08001814": "process_input_data",
                "get_value_and_return_080058e0": "get_user_credit"
            },
            "code": "int update_user_info_08001ab0(int user_info, int user_id, int user_name, int user_email, int user_age, int user_gender, int user_address, int user_phone, int user_password, int user_credit_card, int user_subscription, int user_status) {\n  int user_credit_limit;\n  *(int *)(user_info + 60) = user_name;\n  *(int *)(user_info + 56) = user_id;\n  *(int *)(user_info + 64) = user_email;\n  *(char *)(user_info + 112) = 0;\n  updateUserInfo(user_info, user_id, 0, 0, user_subscription, user_status);\n  user_credit_limit = 100;\n  update_user_credit(user_info, user_credit_card);\n  process_input_data(user_info, user_password, user_age, user_gender, user_address, user_phone, user_credit_limit, user_subscription, user_status);\n  int user_credit = get_user_credit();\n  *(int *)(user_info + 68) = user_credit - user_credit_limit;\n  return user_info;\n}",
            "called": [
                "FUN_08001a66",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_080058e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "FUN_08001b18"
            ],
            "imported": false,
            "current_name": "update_user_info_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "execute_and_wait_08006ac0",
                "puVar1": "result_ptr",
                "iVar2": "result_status",
                "piVar3": "context_ptr",
                "piVar4": "function_context_ptr",
                "uVar5": "context_value",
                "uVar6": "context_flags",
                "iVar7": "context_size",
                "pcVar8": "function_ptr",
                "iVar9": "function_result",
                "uVar10": "function_arg",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "condition_flag",
                "uVar12": "wait_result"
            },
            "code": "void execute_and_wait_08006ac0(void)\n{\n  uint *result_ptr;\n  int result_status;\n  int *context_ptr;\n  int *function_context_ptr;\n  uint context_value;\n  ushort context_flags;\n  int context_size;\n  code *function_ptr;\n  int function_result;\n  uint function_arg;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool condition_flag;\n  undefined8 wait_result;\n\n  execute_function_08006f00(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8006acf;\n  wait_result = wait_forever_0800573c(1);\n  context_ptr = (int *)((ulonglong)wait_result >> 0x20);\n  result_ptr = (uint *)wait_result;\n  context_flags = *(ushort *)(context_ptr + 3);\n  context_value = (uint)context_flags;\n  if ((int)(context_value << 0x1c) < 0) {\n    function_context_ptr = context_ptr;\n    if (context_ptr[4] != 0) {\n      condition_flag = (context_value << 0x1e) != 0;\n      if (condition_flag) {\n        context_size = 0;\n      }\n      else {\n        context_size = context_ptr[5];\n      }\n      function_ptr = (code *)*context_ptr;\n      if (!condition_flag) {\n        function_context_ptr = context_ptr + 5;\n      }\n      *context_ptr = context_ptr[4];\n      context_ptr[2] = context_size;\n      for (function_result = function_context_ptr[0] - context_ptr[4]; function_result > 0; function_result -= context_size) {\n        context_size = (*(code *)function_context_ptr[10])(result_ptr,function_context_ptr[8],context_ptr[4],function_result);\n        if (context_size < 1) {\n          context_flags = *(ushort *)(context_ptr + 3);\n          goto LAB_08006bc6;\n        }\n        context_ptr[4] += context_size;\n      }\n    }\n  }\n  else if (((0 < context_ptr[1]) || (0 < context_ptr[0x10])) &&\n          (function_ptr = (code *)context_ptr[0xb], function_ptr != (code *)0x0)) {\n    function_arg = *result_ptr;\n    *result_ptr = 0;\n    if ((context_value & 0x1000) == 0) {\n      function_result = (*function_ptr)(result_ptr,context_ptr[8],context_value & 0x1000,1);\n      if ((function_result == -1) && (*result_ptr != 0)) {\n        if ((*result_ptr != 0x1d) && (*result_ptr != 0x16)) {\n          *(ushort *)(context_ptr + 3) = *(ushort *)(context_ptr + 3) | 0x40;\n                    (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *result_ptr = function_arg;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      function_result = context_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(context_ptr + 3) << 0x1d) < 0) &&\n       (function_result = function_result - context_ptr[1], context_ptr[0xd] != 0)) {\n      function_result = function_result - context_ptr[0x10];\n    }\n    function_result = (*(code *)context_ptr[0xb])(result_ptr,context_ptr[8],function_result,0);\n    context_flags = *(ushort *)(context_ptr + 3);\n    if ((function_result == -1) &&\n       ((0x1d < *result_ptr || (-1 < (int)((DAT_08006bdc >> (*result_ptr & 0xff)) << 0x1f))))) {\n      *(ushort *)(context_ptr + 3) = context_flags | 0x40;\n                    (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    context_ptr[1] = 0;\n    *context_ptr = context_ptr[4];\n    if (((int)((uint)context_flags << 0x13) < 0) && ((function_result != -1 || (*result_ptr == 0)))) {\n      context_ptr[0x15] = function_result;\n    }\n    function_context_ptr = (int *)context_ptr[0xd];\n    *result_ptr = function_arg;\n    if (function_context_ptr != (int *)0x0) {\n      if (function_context_ptr != context_ptr + 0x11) {\n        add_to_linked_list_080061f0(result_ptr);\n      }\n      context_ptr[0xd] = 0;\n                    (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "imported": false,
            "current_name": "execute_and_wait_08006ac0"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "parse_data_08004198",
                "param_1": "data_ptr",
                "pbVar2": "src_ptr",
                "sVar1": "counter",
                "first_char": "first_char",
                "data_type": "data_type",
                "dest_ptr": "dest_ptr"
            },
            "code": "int parse_data_08004198(int *data_ptr)\n{\n    char first_char = *(char *)((int)data_ptr + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    int data_type = data_ptr[2];\n    int *dest_ptr = (int *)(*data_ptr + 4);\n    if (data_type == 0x1000) {\n        *dest_ptr = *(unsigned short *)data_ptr[8] & 0x1FF;\n        if (data_ptr[4] == 0) {\n            data_ptr[8] = data_ptr[8] + 2;\n        }\n        else {\n            data_ptr[8] = data_ptr[8] + 1;\n        }\n    }\n    else {\n        unsigned char *src_ptr = (unsigned char *)data_ptr[8];\n        data_ptr[8] = (int)(src_ptr + 1);\n        *dest_ptr = (unsigned int)*src_ptr;\n    }\n    short counter = *(short *)((int)data_ptr + 0x26) + -1;\n    *(short *)((int)data_ptr + 0x26) = counter;\n    if (counter == 0) {\n        *dest_ptr = (*dest_ptr) & 0xFFFFFF7F;\n        *dest_ptr = (*dest_ptr) | 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "FUN_080046b8"
            ],
            "imported": false,
            "current_name": "parse_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "check_and_set_param_08001c3c",
                "param_1": "param",
                "iVar1": "check_result",
                "PTR_DAT_08001c80": "divisor_ptr",
                "byte": "divisor_byte",
                "PTR_DAT_08001c7c": "divisor_byte_ptr",
                "0xf": "MAX_PARAM_VALUE"
            },
            "code": "int check_and_set_param_08001c3c(uint param) {\n  uint divisor = *(uint *)PTR_DAT_08001c80 / (1000 / (byte)*PTR_DAT_08001c7c);\n  int check_result = check_param_08002514(divisor);\n  if (check_result != 0) {\n    return 1;\n  }\n  if (param > 0xf) {\n    return 1;\n  }\n  set_bits_in_memory_08002494(0xffffffff, param, 0);\n  *(uint *)PTR_DAT_08001c84 = param;\n  return 0;\n}",
            "called": [
                "FUN_08002494",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "FUN_08001c88",
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "check_and_set_param_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "FUN_08001c88"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t input_1, int input_2, uint32_t input_3, int input_4) {\n                        if ((((input_2 << 1) >> 0x15) != -1 || ((input_1 | input_2 << 0xc) == 0)) &&\n                        (((input_4 << 1) >> 0x15) != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n                            return 0;\n                        }\n                        return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "decode_data_and_send_08001366",
                "param_1": "data_address",
                "param_2": "data_byte",
                "param_3": "data_length",
                "param_4": "param_4",
                "cVar1": "current_char"
            },
            "code": "void decode_data_and_send_08001366(int data_address,char data_byte,uint data_length,undefined4 param_4)\n{\n  char current_char;\n  \n  if (data_length > 3) {\n    data_length = 3;\n  }\n  if ((int)(uint)*(byte *)(data_address + 0x17) <= (int)data_length) {\n    data_length = *(byte *)(data_address + 0x17) - 1 & 0xff;\n  }\n  current_char = *(char *)(data_length + data_address + 0x18);\n  decode_data_08001310(data_address,data_byte + current_char | 0x80,0,current_char,param_4);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_data_and_send_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "decode_data_08005848",
                "param_1": "data_index",
                "param_2": "bit_position",
                "param_3": "address",
                "param_4": "data_ptr",
                "iVar1": "bit_value",
                "uVar2": "data_value",
                "puVar3": "data_array_ptr",
                "uVar4": "mask",
                "PTR_DAT_08005888": "original_data_array",
                "PTR_DAT_0800588c": "bit_array",
                "get_bit_from_uint_at_index_080047f4": "get_bit_from_uint_at_index",
                "get_data_by_index_08004848": "get_data_by_index",
                "set_address_value_if_param_not_zero_08004c30": "set_address_value_if_bit_set"
            },
            "code": "void decode_data_08005848(uint data_index, undefined4 bit_position, undefined4 address, undefined *data_ptr) {\n  int bit_value;\n  uint mask;\n  undefined *data_array_ptr;\n  uint data_value;\n\n  if (data_index < 0x3c) {\n    mask = (uint)(char)PTR_DAT_08005888[data_index];\n    data_array_ptr = PTR_DAT_08005888;\n  }\n  else {\n    mask = 0xffffffff;\n    data_array_ptr = data_ptr;\n  }\n  if ((mask != 0xffffffff) &&\n     (bit_value = get_bit_from_uint_at_index(data_array_ptr, PTR_DAT_0800588c, bit_position, data_ptr, data_ptr), bit_value != 0)) {\n    data_value = get_data_by_index((mask << 0x18) >> 0x1c);\n    set_address_value_if_bit_set(data_value, 1 << (mask & 0xf) & 0xffff, address);\n  }\n  return;\n}",
            "called": [
                "FUN_08004848",
                "FUN_080047f4",
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "FUN_080015b2",
                "FUN_08001310",
                "FUN_080012a2",
                "FUN_0800157c",
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080012c0",
                "FUN_080012e8",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_data_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "send_interrupt_signal_08000ae8",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void send_interrupt_signal_08000ae8(void)\n{\n  software_interrupt(SYSTEM_CALL_INTERRUPT);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "FUN_08000aec"
            ],
            "imported": false,
            "current_name": "send_interrupt_signal_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "check_and_set_flags_08003ed8",
                "param_1": "param_array",
                "puVar1": "param",
                "*puVar1": "*param",
                "set_flags_and_return_08004b34": "set_flags_and_return"
            },
            "code": "void check_and_set_flags_08003ed8(uint **param_array)\n{\n  uint *param = *param_array;\n  *(undefined *)((int)param_array + 0x3d) = 2;\n  if ((param[8] & 0x1111) == 0) {\n    if ((param[8] & 0x444) == 0) {\n      *param = *param & 0xfffffffe;\n    }\n  }\n  set_flags_and_return(param_array);\n  *(undefined *)((int)param_array + 0x3d) = 0;\n  *(undefined *)(param_array + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08004b34"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_range_with_value_080061e0",
                "param_1": "memory_range_start",
                "param_2": "value_to_fill",
                "param_3": "memory_range_size",
                "puVar1": "memory_range_end"
            },
            "code": "void fill_memory_range_with_value_080061e0(unsigned char *memory_range_start, unsigned char value_to_fill, int memory_range_size) {\n  unsigned char *memory_range_end = memory_range_start + memory_range_size;\n  for (; memory_range_start != memory_range_end; memory_range_start++) {\n    *memory_range_start = value_to_fill;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "FUN_08004a4c",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08006c88"
            ],
            "imported": false,
            "current_name": "fill_memory_range_with_value_080061e0"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "find_and_check_input_08005604",
                "uVar1": "index",
                "iVar2": "data",
                "iVar3": "data_ptr"
            },
            "code": "void find_and_check_input_08005604(void)\n{\n  uint index = find_index();\n  int data = *(int *)(PTR_DAT_08005644 + index * 4);\n  if ((index < 5) && (data = (**(code **)(PTR_DAT_08005648 + index * 4))(data), data != -1)) {\n    check_input_0800455a(*(undefined4 *)(PTR_DAT_0800564c + (uint)*(byte *)(data + 0x44) * 4),\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "FUN_080045fe"
            ],
            "imported": false,
            "current_name": "find_and_check_input_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "always_returns_true_08005724"
            },
            "code": "int always_returns_true_08005724(void) {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "FUN_08007028"
            ],
            "imported": false,
            "current_name": "always_returns_true_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "return_zero_08005728"
            },
            "code": "int return_zero_08005728(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "FUN_08007048"
            ],
            "imported": false,
            "current_name": "return_zero_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "decode_data_and_return_0800135a",
                "param_1": "data",
                "param_2": "zero",
                "param_3": "one",
                "param_4": "return_address",
                "decode_data_08001310": "decode_data"
            },
            "code": "void decode_data_and_return_0800135a(undefined4 data, undefined4 zero, undefined4 one, undefined4 return_address) {\n  decode_data(data, 1, 0, return_address, return_address);\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "FUN_08000bcc",
                "FUN_08000cd0",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_data_and_return_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "FUN_08005c96": "reverse_and_call_08005c96",
                "param_1": "pointer_to_int",
                "param_2": "length_of_string",
                "uVar1": "reversed_string"
            },
            "code": "int reverse_and_call_08005c96(int *pointer_to_int, int length_of_string, undefined4 param_3, undefined4 param_4) {\n  undefined4 reversed_string;\n  if (length_of_string != 0) {\n    reversed_string = reverse_string_08000178(length_of_string);\n    reversed_string = (**(code **)(*pointer_to_int + 4))(pointer_to_int,length_of_string,reversed_string,*(code **)(*pointer_to_int + 4),param_4);\n    return reversed_string;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000bcc",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "reverse_and_call_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_memory_permissions_0800571a",
                "param_1": "memory_address",
                "param_2": "permissions",
                "*(undefined4 *)(param_2 + 4)": "*memory_address"
            },
            "code": "void set_memory_permissions_0800571a(int* memory_address, int permissions) {\n\t*memory_address = permissions;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "FUN_08007004"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "process_input_08002efc",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "DAT_0800043d": "current_char",
                "PTR_DAT_0800042a": "counter_ptr",
                "PTR_DAT_08000420": "status_ptr",
                "do_nothing_08002db0": "do_nothing_1",
                "do_nothing_08002c4e": "do_nothing_2"
            },
            "code": "uint32_t process_input_08002efc(uint32_t **input)\n{\n    uint32_t *flag_ptr;\n    uint32_t *PTR_DAT_0800042a;\n    uint32_t *PTR_DAT_08000420;\n    uint8_t DAT_0800043d;\n\n    flag_ptr = input[11];\n    DAT_0800043d = *(uint8_t *)((int)input + 0x3d);\n    if (DAT_0800043d == '!') {\n        PTR_DAT_0800042a = input[10];\n        if (*(uint16_t *)((int)input + 0x2a) == 0) {\n            if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n                (*input)[1] &= 0xfffff8ff;\n                **input |= 0x200;\n                input[12] = (uint32_t *)0x0;\n                *(uint8_t *)((int)input + 0x3d) = 0x20;\n                if (*(uint8_t *)((int)input + 0x3e) == '@') {\n                    *(uint8_t *)((int)input + 0x3e) = 0;\n                    do_nothing_08002db0();\n                }\n                else {\n                    *(uint8_t *)((int)input + 0x3e) = 0;\n                    do_nothing_08002c4e();\n                }\n            }\n            else {\n                (*input)[1] &= 0xfffff8ff;\n                input[12] = (uint32_t *)0x11;\n                *(uint8_t *)((int)input + 0x3e) = 0;\n                *(uint8_t *)((int)input + 0x3d) = 0x20;\n                do_nothing_08002c4e();\n            }\n        }\n        else {\n            PTR_DAT_08000420 = input[9];\n            input[9] = (uint32_t *)((int)PTR_DAT_08000420 + 1);\n            (*input)[4] = (uint32_t)*(uint8_t *)PTR_DAT_08000420;\n            *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) - 1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "calculate_delay_0800365c",
                "param_1": "input",
                "local_4": "delay",
                "DAT_08003684": "global_constant",
                "PTR_DAT_08003680": "global_variable",
                "bVar1": "is_delay_not_zero"
            },
            "code": "void calculate_delay_0800365c(int input){\n  int delay = input * ((unsigned long long)DAT_08003684 * (unsigned long long)*PTR_DAT_08003680 >> 0x29);\n  do {\n    delay--;\n  } while (delay != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "FUN_08003688"
            ],
            "imported": false,
            "current_name": "calculate_delay_0800365c"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "process_input_080033b8",
                "param_1": "input",
                "iVar1": "input_ptr",
                "uVar2": "input_flags_2",
                "uVar3": "input_flags_3",
                "uVar4": "input_flags_1",
                "(int)param_1 + 0x3e": "input_char"
            },
            "code": "void process_input_080033b8(int *input)\n{\n  int input_ptr = *input;\n  uint input_flags_1 = *(uint *)(input_ptr + 0x18);\n  uint input_flags_2 = *(uint *)(input_ptr + 0x14);\n  uint input_flags_3 = *(uint *)(input_ptr + 4);\n  char input_char = *(char *)((int)input + 0x3e);\n\n  if (input_char == '\\x10' || input_char == '@') {\n    if ((input_flags_2 & 0x10001) == 0 || (input_flags_3 & 0x200) == 0) {\n      if ((DAT_08003518 & input_flags_2) == 0 || (input_flags_3 & 0x200) == 0) {\n        if ((DAT_08003504 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n          set_flags(input);\n        }\n      }\n      else {\n        set_param_value(input);\n      }\n    }\n    else {\n      set_output_value(input);\n    }\n    if ((DAT_0800350c & input_flags_1) == 0) {\n      if ((DAT_0800351c & input_flags_2) != 0 && (input_flags_3 & 0x400) != 0 && (DAT_08003514 & input_flags_2) == 0) {\n        process_input_080033b8(input);\n        return;\n      }\n      if ((DAT_08003514 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n        update_parameters(input);\n        return;\n      }\n    }\n    else {\n      if ((DAT_08003510 & input_flags_2) != 0 && (input_flags_3 & 0x400) != 0 && (DAT_08003514 & input_flags_2) == 0) {\n        process_input_080033b8(input);\n        return;\n      }\n      if ((DAT_08003514 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n        process_input_080033b8(input);\n        return;\n      }\n    }\n  }\n  else {\n    if ((DAT_08003504 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n      process_params_and_return_zero();\n      return;\n    }\n    if ((DAT_08003508 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n      execute_command(input);\n      return;\n    }\n    if ((DAT_0800350c & input_flags_1) == 0) {\n      if ((DAT_0800351c & input_flags_2) != 0 && (input_flags_3 & 0x400) != 0 && (DAT_08003514 & input_flags_2) == 0) {\n        process_input_080033b8(input);\n        return;\n      }\n      if ((DAT_08003514 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n        increment_and_store_char(input);\n      }\n    }\n    else {\n      if ((DAT_08003510 & input_flags_2) != 0 && (input_flags_3 & 0x400) != 0 && (DAT_08003514 & input_flags_2) == 0) {\n        process_data(input);\n        return;\n      }\n      if ((DAT_08003514 & input_flags_2) != 0 && (input_flags_3 & 0x200) != 0) {\n        increment_byte_at_pointer(input);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ad8",
                "FUN_08002ab8",
                "FUN_08002db2",
                "FUN_08002c54",
                "FUN_08002f9c",
                "FUN_0800306c",
                "FUN_08002cf2",
                "FUN_08002ca6",
                "FUN_08002efc",
                "FUN_080028d2",
                "FUN_080032b4",
                "FUN_080028de",
                "FUN_08002848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "data_structure",
                "PTR_PTR_DAT_08006ab0": "data_structure_pointer",
                "PTR_DAT_08006ab4": "input_type_a",
                "PTR_DAT_08006ab8": "input_type_b",
                "PTR_DAT_08006abc": "input_type_c",
                "FUNC_08006cb4": "cleanup_data_structure",
                "add_to_linked_list_080061f0": "add_to_linked_list",
                "allocate_and_process_memory_08006e10": "allocate_and_process_memory",
                "LAB_08006a14": "end_of_function"
            },
            "code": "uint process_data_080069e4(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int data_structure;\n  data_structure = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((data_structure != 0) && (*(int *)(data_structure + 0x18) == 0)) {\n    cleanup_data_structure(data_structure);\n  }\n  if (input == (undefined4 *)PTR_DAT_08006ab4) {\n    input = *(undefined4 **)(data_structure + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006ab8) {\n    input = *(undefined4 **)(data_structure + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08006abc) {\n    input = *(undefined4 **)(data_structure + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08006a14;\n    }\n    if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)input[0xd] != input + 0x11) {\n        add_to_linked_list(output);\n      }\n      input[0xd] = 0;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n    input[1] = 0;\n    *input = input[4];\n  }\n  *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_process_memory(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080061f0",
                "FUN_08006e10",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "imported": false,
            "current_name": "process_data_080069e4",
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006ab0;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08006cb4(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08006ab4) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006ab8) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08006abc) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          add_to_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_process_memory_08006e10(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_08002582"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "increase_pointer_and_do_nothing_08004b9e",
                "increase_pointer_value_08001cac": "increase_pointer_value",
                "do_nothing_and_return_08002582": "do_nothing_and_return",
                "do_nothing_08004b9c": "do_nothing"
            },
            "code": "void increase_pointer_and_do_nothing_08004b9e(void)\n{\n  increase_pointer_value();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004b9c",
                "FUN_08002582",
                "FUN_08001cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "increase_pointer_and_do_nothing_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "process_data_and_find_results_08005730",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "find_and_process_data_080053d4": "find_and_process_data"
            },
            "code": "void process_data_and_find_results_08005730(int num1, int num2, int num3, int num4)\n{\n  find_and_process_data(num2, num3, num3, num4, num4);\n  return;\n}",
            "called": [
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "FUN_08006f5a"
            ],
            "imported": false,
            "current_name": "process_data_and_find_results_08005730"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "do_nothing_and_return_08002582"
            },
            "code": "void do_nothing_and_return_08002582(void)\n{\n  do_nothing_08002580();\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08002582"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "set_flag_08004884",
                "param_1": "flag",
                "uVar1": "return_value",
                "DAT_08004914": "ptr_data",
                "DAT_08004918": "return_value_0",
                "DAT_0800491c": "return_value_1",
                "DAT_08004920": "return_value_2",
                "DAT_08004924": "return_value_3",
                "DAT_08004928": "return_value_4"
            },
            "code": "uint32_t set_flag_08004884(uint32_t flag) {\n    uint32_t* flag_ptr = (uint32_t*)(DAT_08004914 + 0x18);\n    switch(flag) {\n        case 0:\n            *flag_ptr |= 0x4;\n            return DAT_08004918;\n        case 1:\n            *flag_ptr |= 0x8;\n            return DAT_0800491c;\n        case 2:\n            *flag_ptr |= 0x10;\n            return DAT_08004920;\n        case 3:\n            *flag_ptr |= 0x20;\n            return DAT_08004924;\n        case 4:\n            *flag_ptr |= 0x40;\n            return DAT_08004928;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "set_flag_08004884"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "copy_values_and_clear_memory_08001be8",
                "iVar1": "index",
                "puVar2": "ptr1",
                "PTR_DAT_08001c28": "ptr1",
                "PTR_DAT_08001c20": "ptr2",
                "DAT_08001c24": "end_ptr2",
                "DAT_08001c1c": "source_array",
                "PTR_DAT_08001c2c": "end_ptr1",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void copy_values_and_clear_memory_08001be8(void)\n{\n  int index = 0;\n  undefined4 *PTR_DAT_08001c28 = (undefined4 *)PTR_DAT_08001c28;\n  undefined4 *PTR_DAT_08001c20 = (undefined4 *)PTR_DAT_08001c20;\n  while (PTR_DAT_08001c20 < DAT_08001c24)\n  {\n    *PTR_DAT_08001c20 = *(undefined4 *)(DAT_08001c1c + index);\n    PTR_DAT_08001c20++;\n    index += 4;\n  }\n  while (PTR_DAT_08001c28 < PTR_DAT_08001c2c)\n  {\n    *PTR_DAT_08001c28 = 0;\n    PTR_DAT_08001c28++;\n  }\n  set_flags_and_values_08004d44();\n  execute_functions_08006198();\n  code *jumptable = (code *)0x8001c1a;\n  execute_decoded_instructions_08005f6c();\n  (*jumptable)();\n  return;\n}",
            "called": [
                "FUN_08006198",
                "FUN_08004d44",
                "FUN_08005f6c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "copy_values_and_clear_memory_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "add_to_linked_list_080061f0",
                "param_1": "head",
                "param_2": "value",
                "param_3": "unused",
                "param_4": "unused",
                "puVar1": "pointer_to_head",
                "extraout_r1": "unused",
                "ppiVar2": "previous_node",
                "ppiVar3": "next_node",
                "piVar4": "node_size",
                "ppiVar5": "current_node",
                "ppiVar6": "previous_node",
                "ppiVar7": "new_node"
            },
            "code": "void add_to_linked_list_080061f0(int **head, int value) {\n  if (value == 0) {\n    return;\n  }\n  int **current = head;\n  while (*current != NULL && *current < (int*)current + value) {\n    current = (int**)(*current + 1);\n  }\n  int **new_node = (int**)((int)current + value);\n  if (*current == new_node) {\n    return;\n  }\n  if (*current != NULL && new_node + 1 == (int**)(*current + 1)) {\n    *current = (int*)(new_node + **(int**)(*current));\n  }\n  else {\n    new_node[1] = *current;\n    *current = new_node;\n  }\n}\n",
            "called": [
                "FUN_08006eac",
                "FUN_08006eae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "imported": false,
            "current_name": "add_to_linked_list_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "checkAndUpdateFlags_08002348",
                "param_1": "inputParam",
                "iVar1": "result",
                "flagChar": "flagChar",
                "flagUint": "flagUint"
            },
            "code": "int checkAndUpdateFlags_08002348(int inputParam)\n{\n  int result;\n  char* flagChar = (char*)(inputParam + 0x24);\n  uint* flagUint = (uint*)(inputParam + 0x28);\n  if (*flagChar == '\\x01') {\n    return 2;\n  }\n  *flagChar = 1;\n  result = checkAndUpdateFlags_08002348_080020f0();\n  if (result == 0) {\n    *flagUint = (*flagUint & 0xffffeefe) | 1;\n  }\n  *flagChar = 0;\n  return result;\n}",
            "called": [
                "FUN_080020f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "checkAndUpdateFlags_08002348"
        },
        "FUN_080060d4": {
            "renaming": {
                "FUN_080060d4": "execute_or_count_bits_080060d4",
                "param_1": "param",
                "iVar1": "bits_set_count"
            },
            "code": "void execute_or_count_bits_080060d4(int param){\n  int bits_set_count = count_bits_set(param + 8);\n  if (*(int *)(PTR_DAT_08006100 + bits_set_count * 0x14 + 0xc) != 0) {\n    execute_or_count_bits_080060d4(param);\n  }\n  else {\n    execute_jumptable_08007090();\n  }\n}\n",
            "called": [
                "FUN_08007090"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "execute_or_count_bits_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "validate_input_and_execute_08005a68",
                "param_1": "input_index",
                "param_2": "input_value",
                "param_3": "input_type",
                "bVar1": "type_flags",
                "iVar2": "count",
                "pbVar3": "input_ptr",
                "UNRECOVERED_JUMPTABLE": "assertion_function",
                "extraout_r1": "index",
                "unaff_r4": "char1",
                "unaff_r6": "int1"
            },
            "code": "void validate_input_and_execute_08005a68(int input_index, int input_value, byte input_type){\n  uint index;\n  byte *input_ptr;\n  int count = 0;\n  int flags = 0;\n  int assertion = 0;\n  int assertion_arg = 0;\n  uint8_t result = 0xff;\n  \n  *(int *)(input_index + 0x11c) = input_value;\n  *(byte *)(input_index + 0x140) = input_type;\n  \n  // Set count and flags based on input_type\n  switch(input_type & 7){\n    case 4:\n      count = 7;\n      break;\n    case 6:\n      count = 8;\n      break;\n    case 2:\n      count = 6;\n      break;\n    default:\n      count = 0;\n      break;\n  }\n  if((input_type & 0x30) == 0x30){\n    *(int *)(input_index + 0x128) = 0x600;\n    count++;\n  }\n  else if((input_type & 0x20) == 0){\n    *(int *)(input_index + 0x128) = 0;\n  }\n  else{\n    *(int *)(input_index + 0x128) = 0x400;\n    count++;\n  }\n  if((input_type & 8) == 0){\n    *(int *)(input_index + 0x124) = 0;\n  }\n  else{\n    *(int *)(input_index + 0x124) = 0x2000;\n  }\n  if(count == 8){\n    *(int *)(input_index + 0x120) = 0;\n  }\n  else if(count == 9){\n    *(int *)(input_index + 0x120) = 0x1000;\n  }\n  else{\n    count = 0;\n  }\n  \n  // Call validation function\n  if(count != 0){\n    validate_input(input_index + 0xd4);\n    store_input(input_index + 0xd4, &result);\n    return;\n  }\n  \n  // Call assertion function\n  assertion = iRam08005b1c;\n  assertion_arg = uRam08005b1c;\n  index = extraout_r1;\n  input_ptr = *(byte **)(extraout_r1 + unaff_r6);\n  *(char *)(assertion + 0x1e) = unaff_r4;\n  *(char *)(*input_ptr + 0x1e) = 0;\n  if(index < 0x3c){\n    result = PTR_DAT_08005b38[index];\n  }\n  else{\n    result = 0xff;\n  }\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "validate_input_and_execute_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "process_input_data_08001814",
                "param_1": "output_buffer",
                "param_2": "input_param1",
                "param_3": "input_param2",
                "param_4": "input_param3",
                "param_5": "input_param4",
                "param_6": "input_param5",
                "param_7": "input_param6",
                "param_8": "input_param7",
                "param_9": "input_param8",
                "iVar1": "is_null",
                "uVar2": "shifted_value_upper",
                "uVar3": "shift_value",
                "bVar4": "is_param9_not_one",
                "uVar5": "func_output_upper",
                "uVar6": "func_output_lower",
                "uVar7": "output1"
            },
            "code": "void process_input_data_08001814(uint32_t *output_buffer, uint32_t input_param1, uint32_t input_param2, uint32_t input_param3, uint32_t input_param4, uint32_t input_param5, uint32_t input_param6, uint32_t input_param7, uint32_t input_param8, int input_param9) {\n  int is_null = is_input_null(input_param3, input_param4, 0, 0);\n  if (is_null == 0 && is_input_null(input_param5, input_param6, 0, 0) == 0 && is_input_null(input_param7, input_param8, 0, 0) == 0) {\n    output_buffer[13] = input_param9;\n    bool is_param9_not_one = input_param9 != 1;\n    uint8_t shift_value = is_param9_not_one ? 0 : 1;\n    output_buffer[18] = shift_value;\n    output_buffer[0] = input_param3;\n    output_buffer[1] = input_param4;\n    output_buffer[2] = input_param5;\n    output_buffer[3] = input_param6;\n    output_buffer[4] = input_param7;\n    output_buffer[5] = input_param8;\n    uint64_t shifted_value = calculate_shifted_value(output_buffer[22]);\n    shifted_value = perform_operation((uint32_t)shifted_value, (uint32_t)(shifted_value >> 32), 0, 0x080018f4);\n    output_buffer[6] = input_param3;\n    output_buffer[7] = input_param4;\n    uint64_t func_output = perform_operation(input_param5, input_param6, (uint32_t)shifted_value, (uint32_t)(shifted_value >> 32));\n    output_buffer[8] = (uint32_t)func_output;\n    output_buffer[9] = (uint32_t)(func_output >> 32);\n    func_output = perform_operation(input_param7, input_param8, (uint32_t)shifted_value, (uint32_t)(shifted_value >> 32));\n    output_buffer[10] = (uint32_t)func_output;\n    output_buffer[11] = (uint32_t)(func_output >> 32);\n    if (output_buffer[12] == 1) {\n      uint64_t output1 = perform_operation(0, 0, input_param3, input_param4);\n      output_buffer[6] = (uint32_t)output1;\n      func_output = perform_operation(0, 0, (uint32_t)func_output, (uint32_t)(func_output >> 32));\n      output_buffer[8] = (uint32_t)func_output;\n      output_buffer[9] = (uint32_t)(func_output >> 32);\n      func_output = perform_operation(0, 0, (uint32_t)func_output, (uint32_t)(func_output >> 32));\n      output_buffer[10] = (uint32_t)func_output;\n      output_buffer[11] = (uint32_t)(func_output >> 32);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800074c",
                "FUN_08000190",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_080009dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "FUN_080018f8",
                "FUN_08001ab0"
            ],
            "imported": false,
            "current_name": "process_input_data_08001814"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "send_interrupt_if_not_sent_08000aec",
                "param_1": "signal",
                "param_2": "param1",
                "param_3": "unused1",
                "param_4": "param4",
                "uVar1": "result"
            },
            "code": "int send_interrupt_if_not_sent_08000aec(int signal, int param1, int unused1, int unused2, int param4) {\n  int interrupt_sent = *(int *)PTR_DAT_08000b04;\n  if (interrupt_sent != 0) {\n    return 0;\n  }\n  int result = send_interrupt_signal_08000ae8(signal, param1, unused1, unused2, param4);\n  return result;\n}",
            "called": [
                "FUN_08000ae8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "send_interrupt_if_not_sent_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "return_zero_0800572c"
            },
            "code": "int return_zero_0800572c() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "FUN_0800706c"
            ],
            "imported": false,
            "current_name": "return_zero_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "execute_subtract_four_and_call_function_pointer_08004e12",
                "iVar1": "subtract_result",
                "subtract_four_08004df4": "subtract_four",
                "code": "function_pointer"
            },
            "code": "void execute_subtract_four_and_call_function_pointer_08004e12(void)\n{\n  int subtract_result = subtract_four();\n  if (*(code **)(subtract_result + 0x48) != (code *)0x0) {\n    (**(code **)(subtract_result + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_subtract_four_and_call_function_pointer_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_integer_08000a58",
                "param_1": "msb",
                "param_2": "lsb",
                "uVar1": "sign",
                "iVar2": "biased_exponent",
                "uVar3": "exponent",
                "uVar4": "fraction",
                "uVar5": "result"
            },
            "code": "uint convert_to_integer_08000a58(uint msb, uint lsb)\n{\n  uint sign, exponent, fraction;\n  int biased_exponent;\n  uint result;\n\n  biased_exponent = (lsb * 2) + 0x200000;\n  if ((lsb * 2) < 0xffe00000) {\n    if (biased_exponent < 0) {\n      return 0;\n    }\n    exponent = biased_exponent >> 0x15;\n    fraction = (1 << 23) | (msb >> 9);\n    if ((exponent >= 0x3e1) && (exponent <= 0x41c)) {\n      fraction |= (msb & 0x1ff) << 14;\n      sign = lsb & 0x80000000;\n      result = ((fraction >> (0x41d - exponent)) ^ sign) - sign;\n      return result;\n    }\n  }\n  else if ((msb | (lsb << 12)) != 0) {\n    return 0;\n  }\n  sign = lsb & 0x80000000;\n  if (sign == 0) {\n    sign = 0x7fffffff;\n  }\n  return sign;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "convert_to_integer_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_device_settings_08001b48",
                "local_54": "flags",
                "local_4c": "flag_value",
                "local_44": "data",
                "local_40": "data_size",
                "local_3c": "data_offset",
                "local_38": "data_limit",
                "local_34": "data_position",
                "local_30": "settings",
                "local_20": "setting1",
                "local_1c": "setting2",
                "local_14": "setting3",
                "local_10": "setting4",
                "local_c": "setting5",
                "iVar1": "error_code",
                "uVar2": "data_value"
            },
            "code": "void initialize_device_settings_08001b48()\n{\n  int error_code;\n  uint data_value;\n  uint32_t settings[2] = {2, 1};\n  uint32_t data[4] = {0xf, 2, 0, 0x400};\n  uint32_t flags[2] = {2, 0x8000};\n\n  error_code = initialize_device(settings);\n  if (error_code != 0) {\n    wait_forever(\"Initialization failed\", 0x88);\n  }\n\n  error_code = process_data(data);\n  if (error_code != 0) {\n    wait_forever(\"Data processing failed\", 0x95);\n  }\n\n  error_code = update_device_settings(flags);\n  if (error_code != 0) {\n    wait_forever(\"Device settings update failed\", 0x9c);\n  }\n\n  data_value = get_data_value();\n  check_parameter((uint)((ulonglong)DATA_MULTIPLIER * (ulonglong)data_value >> 0x26));\n  set_flag(4);\n  set_bits_in_memory(0xffffffff, 0);\n}\n",
            "called": [
                "FUN_08002560",
                "FUN_08003c90",
                "FUN_08003688",
                "FUN_08002494",
                "FUN_08004d40",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08002514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08004c52"
            ],
            "imported": false,
            "current_name": "initialize_device_settings_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_bit_in_int_08004092",
                "param_1": "int_ptr",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void update_bit_in_int_08004092(uint32_t *int_ptr, uint8_t bit_position, uint8_t bit_value) {\n    uint32_t mask = ~(1 << (bit_position & 0xff));\n    *int_ptr = (*int_ptr & mask) | (bit_value << (bit_position & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "FUN_080040b0"
            ],
            "imported": false,
            "current_name": "update_bit_in_int_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculate_sum_of_reversed_and_passed_values_08005cd4",
                "param_1": "passed_value",
                "iVar1": "reversed_value",
                "iVar2": "passed_value_result",
                "reverse_and_call_08005c96": "reverse_and_call",
                "call_function_with_args_08005cc0": "call_function_with_args"
            },
            "code": "int calculate_sum_of_reversed_and_passed_values_08005cd4(undefined4 passed_value)\n{\n  int reversed_value = reverse_and_call();\n  int passed_value_result = call_function_with_args(passed_value);\n  return passed_value_result + reversed_value;\n}",
            "called": [
                "FUN_08005c96",
                "FUN_08005cc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_reversed_and_passed_values_08005cd4"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initialize_data_08005bb0",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2"
            },
            "code": "void initialize_data_08005bb0(int flag, int value, int param1, int param2) {\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_data_08005bb0_structure(PTR_DAT_08005bd0, DAT_08005bcc, param1, 0xffff, param2);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08005b54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "FUN_080014ba": "decode_and_update_080014ba",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "is_encoded",
                "param_4": "is_flagged",
                "param_5": "unused_1",
                "param_6": "unused_2",
                "param_7": "unused_3",
                "param_8": "unused_4",
                "param_9": "unused_5",
                "param_10": "unused_6",
                "param_11": "unused_7",
                "param_12": "unused_8",
                "param_13": "unused_9",
                "PTR_": "data_ptr",
                "DAT_": "unused_data_"
            },
            "code": "void decode_and_update_080014ba(int data_address, int data_size, int is_encoded, int is_flagged, int character) {\n    int* PTR_ = (int*) data_address;\n    PTR_[2] = is_encoded;\n    *(char*)(data_address + 9) = (char) character;\n    *(undefined*)(data_address + 10) = is_flagged;\n    for (int i = 0; i < 10; i++) {\n        *(undefined*)(data_address + 11 + i) = 0;\n    }\n    if (data_size == 0) {\n        *(undefined *)(data_address + 0x13) = 0x10;\n    }\n    else {\n        *(undefined *)(data_address + 0x13) = 0;\n    }\n    decode_and_update_080014ba_080013a4(data_address, 0x10, 1, 0, character);\n    return;\n}\n",
            "called": [
                "FUN_080013a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "FUN_08001510"
            ],
            "imported": false,
            "current_name": "decode_and_update_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "update_settings_08003c90",
                "param_1": "settings",
                "puVar1": "ptr",
                "iVar2": "data_ptr",
                "iVar3": "current_time",
                "uVar4": "value",
                "bVar5": "is_bit_set",
                "PTR_DAT_08003d98": "data_ptr",
                "PTR_DAT_08003d9c": "ptr",
                "PTR_DAT_08003da0": "ptr"
            },
            "code": "int update_settings_08003c90(uint *settings)\n{\n  bool is_flag_set = (*settings & 1) != 0;\n  if (is_flag_set) {\n    bool is_bit_set = (*(uint *)(PTR_DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (is_bit_set) {\n      *(uint *)(PTR_DAT_08003d98 + 0x1c) |= 0x10000000;\n    }\n    if ((*PTR_DAT_08003d9c & 0x100) == 0) {\n      *PTR_DAT_08003d9c |= 0x100;\n      int init_time = get_value_from_pointer_08001cc4();\n      while ((*PTR_DAT_08003d9c & 0x100) == 0) {\n        int current_time = get_value_from_pointer_08001cc4();\n        if (100 < (uint)(current_time - init_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *PTR_DAT_08003d9c = PTR_DAT_08003da0;\n    int PTR_DAT_08003d98 = PTR_DAT_08003d98;\n    uint value = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0x300;\n    if ((value != 0) && (value != (settings[1] & 0x300))) {\n      value = *(uint *)(PTR_DAT_08003d98 + 0x20);\n      *PTR_DAT_08003d9c = 1;\n      *PTR_DAT_08003d9c = 0;\n      *(uint *)(PTR_DAT_08003d98 + 0x20) = value & 0xfffffcff;\n      if ((value & 1) != 0) {\n        int init_time = get_value_from_pointer_08001cc4();\n        while ((*(uint *)(PTR_DAT_08003d98 + 0x20) & 2) == 0) {\n          int current_time = get_value_from_pointer_08001cc4();\n          if (5000 < (uint)(current_time - init_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int PTR_DAT_08003d98 = PTR_DAT_08003d98;\n    *(uint *)(PTR_DAT_08003d98 + 0x20) = *(uint *)(PTR_DAT_08003d98 + 0x20) & 0xfffffcff | settings[1];\n    if (is_bit_set) {\n      *(uint *)(PTR_DAT_08003d98 + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    *(uint *)(PTR_DAT_08003d98 + 4) &= 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    *(uint *)(PTR_DAT_08003d98 + 4) &= 0xffbfffff | settings[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_settings_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "check_param_08002514",
                "param_1": "param",
                "puVar1": "param_ptr",
                "DAT_08002538": "param_ptr",
                "DAT_0800253c": "data_ptr"
            },
            "code": "int check_param_08002514(unsigned int param) {\n  unsigned int *DAT_08002538;\n  DAT_08002538 = DAT_08002538;\n  if (param - 1U < 0x1000000) {\n    DAT_08002538[1] = param - 1U;\n    *(unsigned char *)(DAT_0800253c + 0x23) = 0xf0;\n    DAT_08002538[2] = 0;\n    *DAT_08002538 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "imported": false,
            "current_name": "check_param_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c": "initialize_data_structure_08005c1c",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void initialize_data_structure_08005c1c(void *data_structure, unsigned char value1, unsigned char value2, unsigned char value3, unsigned char value4)\n{\n    *data_structure = GLOBAL_POINTER_1;\n    *((unsigned char *)data_structure + 1) = value1;\n    *((unsigned char *)data_structure + 5) = value2;\n    *((unsigned char *)data_structure + 6) = value3;\n    *((unsigned char *)data_structure + 7) = value4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "FUN_08005c38"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_memory_permissions_08006dc8",
                "param_1": "address",
                "param_2": "size",
                "param_3": "permission",
                "param_4": "result",
                "iVar1": "set_memory_result",
                "uVar2": "flags",
                "auStack_4c": "permission",
                "local_48": "flags"
            },
            "code": "int check_memory_permissions_08006dc8(void *address, int size, int *permission, uint *result) {\n    int set_memory_result;\n    uint flags;\n    if (*(short *)(size + 0xe) < 0 || (set_memory_result = set_memory_permissions_08007004(address, (int)*(short *)(size + 0xe), permission), set_memory_result < 0)) {\n        *result = 0;\n        if ((int)((uint)*(ushort *)(size + 0xc) << 0x18) < 0) {\n            flags = 0x40;\n            goto LAB_08006e08;\n        }\n    }\n    else {\n        flags = (uint)((flags & 0xf000) == 0x2000);\n        *result = flags;\n    }\n    flags = 0x400;\nLAB_08006e08:\n    *permission = flags;\n    return 0;\n}",
            "called": [
                "FUN_08007004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "FUN_08006e10"
            ],
            "imported": false,
            "current_name": "check_memory_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "clear_bitfield_0800412c",
                "param_1": "bitfield",
                "param_2": "bit_index",
                "puVar1": "bf"
            },
            "code": "int clear_bitfield_0800412c(uint **bitfield, uint bit_index)\n{\n  uint *bf = *bitfield;\n  update_bitfield(bf, bit_index, 0);\n  if (((bf[8] & 0x1111) == 0) && ((bf[8] & 0x444) == 0)) {\n    bf[17] = bf[17] & 0xffff7fff;\n  }\n  if (((bf[8] & 0x1111) == 0) && ((bf[8] & 0x444) == 0)) {\n    *bf = *bf & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "clear_bitfield_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "FUN_08007090": "execute_jumptable_08007090",
                "PTR_DAT_0800712c": "ptr_dat_1",
                "PTR_DAT_08007130": "ptr_dat_2",
                "PTR_DAT_08007134": "ptr_dat_3",
                "PTR_DAT_08007138": "ptr_dat_4",
                "PTR_DAT_0800713c": "ptr_dat_5",
                "PTR_DAT_08007140": "ptr_dat_6",
                "PTR_DAT_08007144": "ptr_dat_7",
                "PTR_DAT_08007148": "ptr_dat_8",
                "PTR_DAT_0800714c": "ptr_dat_9",
                "PTR_DAT_08007150": "ptr_dat_10",
                "PTR_DAT_08007154": "ptr_dat_11",
                "PTR_DAT_08007158": "ptr_dat_12"
            },
            "code": "void execute_jumptable_08007090(void)\n{\n  void (*jumptable_func_ptr)(void);\n  jumptable_func_ptr = execute_jumptable_08007090;\n  execute_and_wait();\n  int* PTR_DAT_0800712c = (int*) PTR_DAT_0800712c;\n  int* PTR_DAT_08007130 = (int*) PTR_DAT_08007130;\n  int* PTR_DAT_08007134 = (int*) PTR_DAT_08007134;\n  int* PTR_DAT_08007138 = (int*) PTR_DAT_08007138;\n  int* PTR_DAT_0800713c = (int*) PTR_DAT_0800713c;\n  int* PTR_DAT_08007140 = (int*) PTR_DAT_08007140;\n  int* PTR_DAT_08007144 = (int*) PTR_DAT_08007144;\n  int* PTR_DAT_08007148 = (int*) PTR_DAT_08007148;\n  int* PTR_DAT_0800714c = (int*) PTR_DAT_0800714c;\n  int* PTR_DAT_08007150 = (int*) PTR_DAT_08007150;\n  int* PTR_DAT_08007154 = (int*) PTR_DAT_08007154;\n  int* PTR_DAT_08007158 = (int*) PTR_DAT_08007158;\n  if (-1 < *PTR_DAT_0800712c << 0x1f) {\n    *PTR_DAT_0800712c = 1;\n  }\n  if (-1 < *PTR_DAT_08007130 << 0x1f) {\n    *PTR_DAT_08007130 = 1;\n  }\n  if (-1 < *PTR_DAT_08007134 << 0x1f) {\n    *PTR_DAT_08007134 = 1;\n  }\n  if (-1 < *PTR_DAT_08007138 << 0x1f) {\n    *PTR_DAT_08007138 = 1;\n  }\n  if (-1 < *PTR_DAT_0800713c << 0x1f) {\n    *PTR_DAT_0800713c = 1;\n  }\n  if (-1 < *PTR_DAT_08007140 << 0x1f) {\n    *PTR_DAT_08007140 = 1;\n  }\n  if (-1 < *PTR_DAT_08007144 << 0x1f) {\n    *PTR_DAT_08007144 = 1;\n  }\n  if (-1 < *PTR_DAT_08007148 << 0x1f) {\n    *PTR_DAT_08007148 = 1;\n  }\n  if (-1 < *PTR_DAT_0800714c << 0x1f) {\n    *PTR_DAT_0800714c = 1;\n  }\n  if (-1 < *PTR_DAT_08007150 << 0x1f) {\n    *PTR_DAT_08007150 = 1;\n  }\n  if (-1 < *PTR_DAT_08007154 << 0x1f) {\n    *PTR_DAT_08007154 = 1;\n  }\n  if (-1 < *PTR_DAT_08007158 << 0x1f) {\n    *PTR_DAT_08007158 = 1;\n  }\n  jumptable_func_ptr();\n  return;\n}",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "FUN_080060d4"
            ],
            "imported": false,
            "current_name": "execute_jumptable_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_shifted_value_0800492c",
                "param_1": "value",
                "param_3": "param_1",
                "param_4": "param_2",
                "iVar1": "shifted_value",
                "uVar2": "masked_value"
            },
            "code": "uint get_shifted_value_0800492c(uint value, uint shift_amount) {\n  uint shifted_value = value << shift_amount;\n  uint masked_value = shifted_value >> 0x1b;\n  if (masked_value > 0x10) {\n    masked_value = 0;\n  }\n  return masked_value;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_shifted_value_0800492c"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_bit_at_index_0800480a",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shifted_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_elem",
                "1 << (param_1 & 0xf)": "bit_mask"
            },
            "code": "void set_bit_at_index_0800480a(uint index, int* array){\n  uint shifted_index = (index << 0x18) >> 0x1c;\n  uint* array_elem = (uint*)(array + shifted_index * 4);\n  *array_elem = *array_elem | 1 << (index & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "FUN_080015f8": "decode_and_calculate_080015f8",
                "param_1": "input_param",
                "param_2": "calculation_param",
                "param_3": "unused_param",
                "param_4": "final_param",
                "uVar1": "decode_bits",
                "uVar2": "shifted_value",
                "uVar3": "result",
                "DAT_0800169c": "upper_result",
                "DAT_08001698": "lower_result",
                "DAT_080016a0": "constant_param_1",
                "DAT_080016a4": "constant_param_2",
                "DAT_080016a8": "constant_param_3",
                "DAT_080016ac": "constant_param_4",
                "DAT_080016b0": "constant_param_5"
            },
            "code": "uint32_t decode_bits = decode_and_calculate_080015f8();\nuint64_t result = CONCAT44(DAT_0800169c, DAT_08001698);\nif ((decode_bits & 0x10000) == 0) {\n    uint32_t shifted_bits = decode_bits >> 0x12;\n    uint64_t shifted_value = calculate_shifted_value(shifted_bits & 0x1fff);\n    if ((shifted_bits & 0x2000) != 0) {\n        uint32_t inverted_bits = ~shifted_bits & 0x1fff;\n        uint64_t inverted_value = calculate_shifted_value(inverted_bits);\n        uint64_t inverted_result = FUNC_08000194((int)inverted_value, (int)(inverted_value >> 0x20), 0, DAT_080016a0, param_4);\n        uint32_t lower_inverted_result = inverted_result & 0xffffffff;\n        uint32_t upper_inverted_result = (int)(inverted_result >> 0x20) + 0x80000000;\n        result = lower_inverted_result | ((uint64_t)upper_inverted_result << 0x20);\n    }\n    uint64_t shifted_result = FUNC_080004f8((int)shifted_value, (int)(shifted_value >> 0x20), 0, DAT_080016a4);\n    if (param_2 == 1) {\n        uint64_t shifted_result_2 = FUNC_080004f8((int)shifted_result, (int)(shifted_result >> 0x20), 0, DAT_080016a8);\n        uint64_t shifted_result_3 = FUNC_0800074c((int)shifted_result_2, (int)(shifted_result_2 >> 0x20), 0, DAT_080016ac);\n        uint64_t final_result = FUNC_08000194((int)shifted_result_3, (int)(shifted_result_3 >> 0x20), 0, DAT_080016b0);\n        return final_result;\n    }\n}\nelse {\n    uint32_t masked_bits = decode_bits & 7;\n    if (masked_bits == 2) {\n        return CONCAT44(DAT_0800168c, DAT_08001688);\n    }\n    if (masked_bits == 4) {\n        return CONCAT44(DAT_08001694, DAT_08001690);\n    }\n    if (masked_bits != 1) {\n        return 0;\n    }\n}\nreturn result;",
            "called": [
                "FUN_0800074c",
                "FUN_080015b2",
                "FUN_0800040c",
                "FUN_080004f8",
                "FUN_08000194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "decode_and_calculate_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initialize_data_structure_if_condition_met_08005c38",
                "param_1": "condition_1",
                "param_2": "condition_2",
                "PTR_DAT_08005c60": "PTR_data_structure"
            },
            "code": "void initialize_data_structure_if_condition_met_08005c38(int condition_1, int condition_2)\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_data_structure(PTR_DAT_08005c60, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08005c1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structure_if_condition_met_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "count_bits_set_08005f8c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08005f8c(uint number) {\n  char bit_count = 0;\n  while (number != 1) {\n    bit_count++;\n    number = number >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "FUN_080060e4"
            ],
            "imported": false,
            "current_name": "count_bits_set_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "process_input_data_08006f5a",
                "param_1": "output_data",
                "param_2": "input_data_address",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "sVar1": "input_data_value",
                "puVar2": "input_data_flag",
                "iVar3": "result"
            },
            "code": "void process_input_data_08006f5a(int *output_data, int input_data_address, undefined4 unused_param_1, undefined4 unused_param_2) {\n  short input_data_value = *(short *)(input_data_address + 0xe);\n  ushort *input_data_flag = (ushort *)(input_data_address + 0xc);\n  int result = process_data_and_find_results(input_data_value, unused_param_1, unused_param_2, unused_param_2, unused_param_2, 0, 0, 0);\n  if ((int)((uint)(*input_data_flag) << 0x17) < 0) {\n    process_data_08007048(output_data, input_data_value, 0, 2);\n  }\n  if ((result == -1) && (*PTR_DAT_08006fe0 != 0)) {\n    *output_data = *PTR_DAT_08006fe0;\n  }\n  return;\n}",
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_data_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "update_user_info_and_decode_parameters_08000b08",
                "param_1": "user_info_ptr",
                "param_2": "param_2",
                "PTR_DAT_08000b9c": "user_info_ptr_1",
                "PTR_DAT_08000b98": "user_info_ptr_2",
                "PTR_DAT_08000b94": "user_info_ptr_3",
                "PTR_DAT_08000b90": "user_info_ptr_4",
                "PTR_DAT_08000b8c": "user_info_ptr_array_1",
                "PTR_DAT_08000b88": "user_info_ptr_array_2",
                "PTR_DAT_08000b84": "user_info_ptr_array_3",
                "PTR_DAT_08000b80": "user_info_ptr_array_4",
                "PTR_DAT_08000bb8": "parameters_ptr",
                "PTR_DAT_08000ba0": "param_1_ptr",
                "PTR_DAT_08000ba4": "param_2_ptr",
                "PTR_DAT_08000ba8": "param_3_ptr",
                "PTR_DAT_08000bac": "param_4_ptr",
                "PTR_DAT_08000bb0": "param_5_ptr",
                "PTR_DAT_08000bb4": "param_6_ptr",
                "PTR_DAT_08000bc8": "decode_ptr",
                "PTR_DAT_08000bc4": "decode_param_1_ptr",
                "PTR_DAT_08000bc0": "decode_param_2_ptr",
                "PTR_DAT_08000bbc": "decode_param_3_ptr"
            },
            "code": "void update_user_info_and_decode_parameters_08000b08(int user_info_ptr, int param_2)\n{\n    int is_valid_input = (user_info_ptr == 1) && (param_2 == 0xffff);\n    if (is_valid_input) {\n        update_user_info(user_info_ptr);\n        decode_parameters();\n        decode_and_update();\n    }\n}",
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [],
            "imported": false,
            "current_name": "update_user_info_and_decode_parameters_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_params_08006cb4",
                "param_1": "param1",
                "uVar1": "memory_block_1",
                "iVar2": "ptr_var_1",
                "bVar3": "is_ptr_var_2_equal_to_param1",
                "PTR_PTR_DAT_08006d0c": "PTR_PTR_DAT_08006d0c",
                "PTR_LAB_08006c34_1_08006d10": "PTR_LAB_08006c34_1_08006d10"
            },
            "code": "void initialize_params_08006cb4(int param1){\n    undefined4 memory_block_1;\n    undefined4 memory_block_2;\n    undefined4 memory_block_3;\n    int ptr_var_1 = *(int *)(param1 + 0x18);\n    if (ptr_var_1 == 0) {\n        *(undefined4 *)(param1 + 0x48) = 0;\n        *(undefined4 *)(param1 + 0x4c) = 0;\n        *(undefined4 *)(param1 + 0x50) = 0;\n        int ptr_var_2 = *(int *)PTR_PTR_DAT_08006d0c;\n        *(undefined **)(param1 + 0x28) = PTR_LAB_08006c34_1_08006d10;\n        bool is_ptr_var_2_equal_to_param1 = param1 == ptr_var_2;\n        if (is_ptr_var_2_equal_to_param1) {\n            ptr_var_2 = 1;\n        }\n        if (is_ptr_var_2_equal_to_param1) {\n            *(int *)(param1 + 0x18) = ptr_var_2;\n        }\n        memory_block_1 = initialize_and_allocate_memory_block_08006d14();\n        *(undefined4 *)(param1 + 4) = memory_block_1;\n        memory_block_2 = initialize_and_allocate_memory_block_08006d14(param1);\n        *(undefined4 *)(param1 + 8) = memory_block_2;\n        memory_block_3 = initialize_and_allocate_memory_block_08006d14(param1);\n        *(undefined4 *)(param1 + 0xc) = memory_block_3;\n        initialize_params_08006cb4_08006c40(*(undefined4 *)(param1 + 4),4,0);\n        initialize_params_08006cb4_08006c40(*(undefined4 *)(param1 + 8),9,1);\n        initialize_params_08006cb4_08006c40(*(undefined4 *)(param1 + 0xc),0x12,2);\n        *(int *)(param1 + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "FUN_08006344",
                "FUN_08006d14",
                "FUN_08006394",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_080068f0"
            ],
            "imported": false,
            "current_name": "initialize_params_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "undefined4": "int",
                "return 0": "return",
                "*(undefined4 *)(param_2 + 4)": "*(int*)(array + 4)"
            },
            "code": "int find_value_in_array_08004c5e(int value, char* array) {\n  while (*array != -1) {\n    if (*array == value) {\n      break;\n    }\n    array += 0xc;\n  }\n  return *(int*)(array + 4);\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "FUN_08004c5e",
                "FUN_08004c78"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08004c5e"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "process_data_08004b3c",
                "param_1": "data_value",
                "iVar1": "result",
                "local_50": "values",
                "PTR_DAT_08004b90": "PTR_DATA",
                "find_value_08004c78": "find_value",
                "get_result_from_value_08004948": "get_result_from_value",
                "get_value_08004cce": "get_value",
                "unset_flag_in_data_080040b0": "unset_flag",
                "clear_bitfield_0800412c": "clear_flags",
                "check_and_set_flags_08003ed8": "check_and_set_flags"
            },
            "code": "void process_data_08004b3c(uint32_t data_value)\n{\n    int index;\n    int values[17];\n\n    values[0] = find_value(data_value, PTR_DAT_08004b90);\n    if (values[0] != 0) {\n        int result = get_result_from_value(data_value);\n        if (result == 0 || result == 4 || result == 8 || result == 12 || result == 24) {\n            uint32_t flags = get_value(data_value, PTR_DAT_08004b90);\n            if ((flags & 0x100000) == 0) {\n                unset_flag(values, result);\n            }\n            else {\n                clear_flags(values, result);\n            }\n            check_and_set_flags(values);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08003ed8",
                "FUN_08004cce",
                "FUN_080040b0",
                "FUN_08004948",
                "FUN_08004c78",
                "FUN_0800412c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "process_data_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "decode_and_execute_data_08001550",
                "*param_1": "*data",
                "param_2": "length",
                "param_3": "offset",
                "iVar1": "i"
            },
            "code": "void decode_and_execute_data_08001550(uint8_t *data, uint length, int offset) {\n  int i;\n  decode_data(data, (length & 7) << 3 | 0x40, 0);\n  for (i = 0; i < 8; i++) {\n    (**(code **) *data)(data, *(uint8_t *)(offset + i));\n  }\n  return;\n}",
            "called": [
                "FUN_08001310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "decode_and_execute_data_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  undefined *puVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  int iVar7;\n  undefined4 extraout_r1;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  undefined4 uVar8;\n  undefined8 uVar9;\n  \n  uVar5 = get_value_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f50 < uVar5) {\n    *(uint *)PTR_DAT_08000f50 = *(uint *)PTR_DAT_08000f50 + 1000;\n    uVar9 = decode_and_calculate_080015f8(PTR_DAT_08000f74,0);\n    uVar8 = (undefined4)((ulonglong)uVar9 >> 0x20);\n    uVar6 = (undefined4)uVar9;\n    *(undefined8 *)PTR_DAT_08000f6c = uVar9;\n    iVar7 = is_valid_input_080009c8(uVar6,uVar8,DAT_08000f18,DAT_08000f1c);\n    if (((iVar7 != 0) || (iVar7 = is_valid_input_080009c8(uVar6,uVar8,DAT_08000f20,DAT_08000f24), iVar7 != 0))\n       || (iVar7 = is_valid_input_080009c8(uVar6,uVar8,DAT_08000f28,DAT_08000f2c), iVar7 != 0)) {\n      *PTR_DAT_08000f64 = 7;\n      *PTR_DAT_08000f58 = 0;\n    }\n  }\n  uVar5 = get_value_and_return_080058e0();\n  if (*(uint *)PTR_DAT_08000f54 < uVar5) {\n    *(uint *)PTR_DAT_08000f54 = *(uint *)PTR_DAT_08000f54 + 1000;\n    if (*PTR_DAT_08000f58 == '\\x01') {\n      uVar8 = *(undefined4 *)PTR_DAT_08000f5c;\n      uVar6 = check_bit_in_data_at_index_08005890(uVar8);\n      uVar5 = count_leading_zeroes(uVar6);\n      decode_data_08005848(uVar8,uVar5 >> 5);\n      iVar7 = *(int *)PTR_DAT_08000f78;\n      *(int *)PTR_DAT_08000f78 = iVar7 + 1;\n      puVar2 = PTR_DAT_08000f7c;\n      convert_number_base_and_return_08005d82(PTR_DAT_08000f7c,iVar7 + 1,10);\n      puVar3 = PTR_DAT_08000f80;\n      reverse_and_call_08005c96(puVar2,PTR_DAT_08000f80);\n      validate_and_convert_input_08005f2c(puVar2,extraout_r1,*(undefined4 *)PTR_DAT_08000f84,\n                   *(undefined4 *)(PTR_DAT_08000f84 + 4),2);\n      reverse_and_call_08005c96(puVar2,puVar3);\n      validate_and_convert_input_08005f2c(puVar2,extraout_r1_00,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      reverse_and_call_08005c96(puVar2,puVar3);\n      sum_of_input_and_validation_08005f40(puVar2,extraout_r1_01,*(undefined4 *)PTR_DAT_08000f88,\n                   *(undefined4 *)(PTR_DAT_08000f88 + 4),2);\n    }\n    else {\n      decode_data_08005848(*(undefined4 *)PTR_DAT_08000f5c,1);\n    }\n    puVar2 = PTR_DAT_08000f60;\n    decode_data_and_return_0800135a(PTR_DAT_08000f60);\n    puVar4 = PTR_DAT_08000f64;\n    reverse_and_call_08005c96(puVar2,*(undefined4 *)\n                         (PTR_PTR_s_Ready_08000f68 + (uint)(byte)*PTR_DAT_08000f64 * 4));\n    decode_data_and_send_08001366(puVar2,0,1);\n    puVar3 = PTR_DAT_08000f60;\n    if (*puVar4 == '\\a') {\n      reverse_and_call_08005c96(puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      validate_and_convert_input_08005f2c(PTR_DAT_08000f60,2,*(undefined4 *)PTR_DAT_08000f6c,\n                   *(undefined4 *)(PTR_DAT_08000f6c + 4),2);\n      decode_and_return_success_0800134e(puVar3,0);\n      reverse_and_call_08005c96(puVar3,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_DAT_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_DAT_08000f64]))();\n    return;\n  }\n  if ((*PTR_DAT_08001274 == '\\x01') && (*PTR_DAT_0800126c == '\\x01')) {\n    *PTR_DAT_0800126c = 0;\n    *PTR_DAT_08001258 = 0;\n  }\n  cVar1 = *PTR_DAT_08001278;\n  if (cVar1 == '\\x01') {\n    iVar7 = get_shifted_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      iVar7 = get_value_and_return_080058e0();\n      if (0x32 < (uint)(iVar7 - *(int *)PTR_DAT_08001284)) {\n        *PTR_DAT_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_DAT_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_DAT_08001274 = 0;\n    iVar7 = get_shifted_value_08005754(*(undefined4 *)PTR_DAT_08001280);\n    if (iVar7 == 0) {\n      uVar6 = get_value_and_return_080058e0();\n      *(undefined4 *)PTR_DAT_08001284 = uVar6;\n      *PTR_DAT_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') && (iVar7 = get_shifted_value_08005754(*(undefined4 *)PTR_DAT_08001280), iVar7 != 0))\n  {\n    *PTR_DAT_08001274 = 1;\n    *PTR_DAT_08001278 = 0;\n  }\n  if (*PTR_DAT_0800126c == '\\x01') {\n    iVar7 = get_value_and_return_080058e0();\n    check_input_and_update_080016b4(PTR_DAT_08001250);\n    if (*(uint *)PTR_DAT_0800128c < (uint)(iVar7 - *(int *)PTR_DAT_08001288)) {\n      *(uint *)PTR_DAT_08001288 = *(int *)PTR_DAT_08001288 + *(uint *)PTR_DAT_0800128c;\n    }\n    uVar9 = calculate_shifted_value_0800040c(iVar7 - *(int *)PTR_DAT_08001288);\n    iVar7 = is_input_null_080009dc_080009dc((int)uVar9,(int)((ulonglong)uVar9 >> 0x20),*(undefined4 *)PTR_DAT_08001290,\n                         *(undefined4 *)(PTR_DAT_08001290 + 4));\n    if (iVar7 == 0) {\n      decode_data_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n    }\n    else {\n      decode_data_08005848(*(undefined4 *)PTR_DAT_0800127c,1);\n    }\n  }\n  else {\n    decode_data_08005848(*(undefined4 *)PTR_DAT_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800040c",
                "FUN_08005cd4",
                "FUN_080018f8",
                "FUN_080058e0",
                "FUN_08005f2c",
                "FUN_08001a44",
                "FUN_080009c8",
                "FUN_08005d82",
                "FUN_080015f8",
                "FUN_08005848",
                "FUN_0800042c",
                "FUN_08001366",
                "FUN_08005f40",
                "FUN_08000a18",
                "FUN_0800134e",
                "FUN_0800135a",
                "FUN_08005754",
                "FUN_08000a04",
                "FUN_080009dc",
                "FUN_08001918",
                "FUN_080009f0",
                "FUN_08005890",
                "FUN_080016b4",
                "FUN_08001960",
                "FUN_08005c96",
                "FUN_08000194"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "decode_data_08001310",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "decode_data_08005848": "decode_data",
                "decode_four_bytes_080012c0": "decode_four_bytes",
                "decode_and_process_data_080012e8": "decode_and_process_data"
            },
            "code": "void decode_data_08001310(uint8_t data, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)\n{\n  decode_data_08001310_08005848(data, param1, param2, param3, param4);\n  if (*(char *)(param1 + 9) != -1) {\n    decode_data_08001310_08005848(*(char *)(param1 + 9),0, 0, 0, 0);\n  }\n  if ((*(byte *)(param1 + 0x13) & 0x10) == 0) {\n    decode_four_bytes(param1,param2 >> 4);\n    decode_four_bytes(param1,param2);\n    return;\n  }\n  decode_and_process_data(param1,param2);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "FUN_08001550",
                "FUN_0800134e",
                "FUN_08001366",
                "FUN_0800135a",
                "FUN_080013a4",
                "FUN_0800138e"
            ],
            "imported": false,
            "current_name": "decode_data_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "validate_params_and_return_result_080009a8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "void validate_params_and_return_result_080009a8(void* param1, void* param2, void* param3, void* param4)\n{\n  validate_params_and_return_result_080009a8(param3, param4, param1, param2);\n  return;\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "FUN_08000a18",
                "FUN_08000a04"
            ],
            "imported": false,
            "current_name": "validate_params_and_return_result_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_flags_08004d90",
                "param_1": "flag_value",
                "DAT_08004de4": "FLAG_A",
                "DAT_08004df0": "FLAG_REGISTERS_BASE",
                "DAT_08004df0 + 0x18": "FLAG_A_OFFSET",
                "DAT_08004df0 + 0x1c": "FLAG_B_OFFSET",
                "DAT_08004de8": "FLAG_C",
                "DAT_08004dec": "FLAG_D"
            },
            "code": "void set_flags_08004d90(int *flag_value)\n{\n  if (*flag_value == DAT_08004de4)\n  {\n    uint32_t *flag_register = (uint32_t *)(DAT_08004df0 + DAT_08004df0 + 0x18);\n    *flag_register &= ~DAT_08004de4_MASK;\n  }\n  if (*flag_value == FLAG_B)\n  {\n    uint32_t *flag_register = (uint32_t *)(DAT_08004df0 + DAT_08004df0 + 0x1c);\n    *flag_register &= ~FLAG_B_MASK;\n  }\n  if (*flag_value == DAT_08004de8)\n  {\n    uint32_t *flag_register = (uint32_t *)(DAT_08004df0 + DAT_08004de8_OFFSET);\n    *flag_register &= ~DAT_08004de8_MASK;\n  }\n  if (*flag_value == DAT_08004dec)\n  {\n    uint32_t *flag_register = (uint32_t *)(DAT_08004df0 + DAT_08004dec_OFFSET);\n    *flag_register &= ~DAT_08004dec_MASK;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "FUN_08004b34"
            ],
            "imported": false,
            "current_name": "set_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "FUN_08005ce8": "convert_number_to_base_08005ce8",
                "param_1": "param_array",
                "param_2": "number",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "digit_ptr",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_number_to_base_08005ce8(int *param_array, uint number, uint base)\\n\\\n    {\\n\\\n        char digit;\\n\\\n        undefined4 result;\\n\\\n        uint quotient;\\n\\\n        uint remainder;\\n\\\n        char *digit_ptr;\\n\\\n        char reversed_digits[9];\\n\\\n        reversed_digits[1] = 0;\\n\\\n        if ((int)base < 2) {\\n\\\n            base = 10;\\n\\\n        }\\n\\\n        digit_ptr = reversed_digits + 1;\\n\\\n        do {\\n\\\n            quotient = number / base;\\n\\\n            remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\\n\\\n            digit_ptr = digit_ptr - 1;\\n\\\n            digit = (char)remainder;\\n\\\n            if (remainder < 10) {\\n\\\n                digit = digit + \"0\";\\n\\\n            }\\n\\\n            else {\\n\\\n                digit = digit + \"7\";\\n\\\n            }\\n\\\n            *digit_ptr = digit;\\n\\\n            number = quotient;\\n\\\n        } while (quotient != 0);\\n\\\n        if (digit_ptr == (char *)0x0) {\\n\\\n            result = 0;\\n\\\n        }\\n\\\n        else {\\n\\\n            result = reverse_string(param_array, digit_ptr);\\n\\\n            result = (**(code **)(*param_array + 4))(param_array, digit_ptr, result);\\n\\\n        }\\n\\\n        return result;\\n\\\n    }",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "convert_number_to_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "execute_command_0800316c",
                "param_1": "params",
                "iVar1": "flag_value",
                "puVar2": "current_param",
                "puVar3": "previous_param",
                "do_nothing_0800316a": "do_nothing",
                "check_and_set_flag_08004ef4": "check_and_set_flag",
                "PTR_LAB_080035fc_1_080032ac": "PTR_LAB_080035fc_1_080032ac",
                "get_value_from_param_0800258c": "get_value_from_param",
                "DAT_080032b0": "DAT_080032b0"
            },
            "code": "void execute_command_0800316c(uint **params)\n{\n    int flag_value;\n    uint *current_param;\n    uint *previous_param;\n    uint *next_param;\n    char current_char;\n\n    current_char = *(char *)((int)params + 0x3d);\n\n    if (current_char - 0x29 < 2)\n    {\n        params[0xc] = NULL;\n        *(undefined *)((int)params + 0x3d) = 0x28;\n    }\n    else\n    {\n        if ((current_char != '`') && (((*params)[1] & 0x800) == 0))\n        {\n            *(undefined *)((int)params + 0x3d) = 0x20;\n        }\n        params[0xc] = NULL;\n        *(undefined *)((int)params + 0x3e) = 0;\n    }\n\n    **params &= 0xfffff7ff;\n    previous_param = *params;\n\n    if ((previous_param[1] & 0x800) == 0)\n    {\n        if (current_char == '`')\n        {\n            *(undefined *)((int)params + 0x3d) = 0x20;\n            params[0x10] = NULL;\n\n            if ((previous_param[5] & 0x40) != 0)\n            {\n                current_param = params[9];\n                params[9] = (uint *)((int)current_param + 1);\n                *(char *)current_param = (char)previous_param[4];\n            }\n\n            **params &= 0xfffffffe;\n            do_nothing(params);\n        }\n        else\n        {\n            if ((previous_param[5] & 0x40) != 0)\n            {\n                current_param = params[9];\n                params[9] = (uint *)((int)current_param + 1);\n                *(char *)current_param = (char)previous_param[4];\n            }\n\n            check_and_set_flag(params);\n        }\n    }\n    else\n    {\n        previous_param[1] &= 0xfffff7ff;\n\n        if (*(char *)((int)params[0xd] + 0x21) == '\\x01')\n        {\n            params[0xe][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n            flag_value = get_value_from_param(params[0xe]);\n\n            if (flag_value != 0)\n            {\n                if (((*params)[5] & 0x40) != 0)\n                {\n                    current_param = params[9];\n                    params[9] = (uint *)((int)current_param + 1);\n                    *(char *)current_param = (char)(*params)[4];\n                }\n\n                **params &= 0xfffffffe;\n                *(undefined *)((int)params + 0x3d) = 0x20;\n                (*(code *)params[0xe][0xd])();\n            }\n        }\n        else\n        {\n            params[0xd][0xd] = (uint)PTR_LAB_080035fc_1_080032ac;\n            flag_value = get_value_from_param(params[0xd]);\n\n            if (flag_value != 0)\n            {\n                **params &= 0xfffffffe;\n                *(undefined *)((int)params + 0x3d) = 0x20;\n                (*(code *)params[0xd][0xd])();\n            }\n        }\n    }\n\n    if ((current_char == '(') && (((uint)params[0x10] & 4) != 0))\n    {\n        params[0xb] = DAT_080032b0;\n        params[0xc] = NULL;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        *(undefined *)((int)params + 0x3e) = 0;\n        execute_command_0800316c_if_valid(params);\n    }\n}\n",
            "called": [
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a",
                "FUN_08004ec4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "imported": false,
            "current_name": "execute_command_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "update_bit_08004828",
                "param_1": "bit_index",
                "param_2": "array_of_integers",
                "uVar1": "index",
                "target_integer": "target_integer",
                "mask": "mask"
            },
            "code": "void update_bit_08004828(uint bit_index, int* array_of_integers)\n{\n  uint index = (bit_index << 0x18) >> 0x1c;\n  uint* target_integer = (uint*)(array_of_integers + index);\n  uint mask = 1 << (bit_index & 0xf);\n  *target_integer &= ~mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "update_bit_08004828"
        },
        "FUN_08003afa": {
            "renaming": {
                "FUN_08003afa": "check_and_set_08003afa",
                "param_1": "flags",
                "param_2": "param",
                "puVar1": "ptr",
                "iVar2": "time_start",
                "iVar3": "time_now",
                "uVar4": "mode"
            },
            "code": "int check_and_set_08003afa(uint *flags, uint param) {\n  uint *data = DAT_08003c38;\n  uint *ptr = DAT_08003c34;\n  uint value;\n  uint time_start = get_value_from_pointer_08001cc4();\n  if ((*flags & 2) != 0) {\n    data[1] = (data[1] & 0xffffff0f) | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    uint mode = flags[1];\n    if (mode == 1) {\n      if ((*data & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (mode != 2 && ((*data & 2) == 0)) {\n      return 1;\n    }\n    data[1] = (data[1] & 0xfffffffc) | mode;\n    if (mode == 1) {\n      while ((data[1] & 0xc) != 4) {\n        uint time_now = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(time_now - time_start)) {\n          return 3;\n        }\n      }\n    }\n    else if (mode == 2) {\n      while ((data[1] & 0xc) != 8) {\n        uint time_now = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(time_now - time_start)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((data[1] & 0xc) != 0) {\n        uint time_now = get_value_from_pointer_08001cc4();\n        if (5000 < (uint)(time_now - time_start)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((param < (*ptr & 7)) && (*ptr = (*ptr & 0xfffffff8) | param, param != (*ptr & 7))) {\n    return 1;\n  }\n  if ((*flags & 4) != 0) {\n    data[1] = (data[1] & 0xfffff8ff) | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    data[1] = (data[1] & 0xffffc7ff) | (flags[4] << 3);\n  }\n  value = calculate_result_08003a68();\n  *(uint *)PTR_DAT_08003c40 = value >> PTR_DAT_08003c3c[(data[1] << 0x18) >> 0x1c];\n  check_and_set_08003afa_param_08001c3c(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08001c3c",
                "FUN_08001cc4",
                "FUN_08003a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003afa",
            "calling": [
                "FUN_08003ad4"
            ],
            "imported": false,
            "current_name": "check_and_set_08003afa"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_result_from_value_08004948",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "code": "uint32_t get_result_from_value_08004948(uint32_t value_1, uint32_t value_2, uint32_t value_3, uint32_t value_4)\n{\n  int32_t result = get_value(value_1, PTR_DATA, value_3, value_4, value_4);\n  uint32_t shifted_value = (uint32_t)(result << 12) >> 27;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_08004cce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "get_result_from_value_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "FUN_0800316c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_value_at_offset_08005b24",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "lookup_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_offset_08005b24(int offset, uint8_t value)\n{\n  uint8_t lookup_value;\n  code *jump_table;\n  if (value < 0x3c) {\n    lookup_value = PTR_DAT_08005b38[value];\n  }\n  else {\n    lookup_value = 0xff;\n  }\n  *(uint8_t *)(offset + 0x12d) = lookup_value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "FUN_08005b54"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "check_params_080049f0",
                "param_1": "param_val",
                "DAT_08004a48": "DATA_PTR_1",
                "DAT_08004a40": "DATA_VAL_1",
                "DAT_08004a44": "DATA_VAL_2",
                "iVar1": "data_ptr",
                "uint": "unsigned int",
                "0xc": "FLAG_1",
                "0x18": "FLAG_2",
                "0xfffffbff": "~FLAG_2",
                "0xfffffdff": "~FLAG_3"
            },
            "code": "void check_params_080049f0(int *param_val)\n{\n  int data_ptr = DAT_08004a48;\n  if (*param_val != DAT_08004a40) {\n    if (*param_val == DAT_08004a44) {\n      *(uint *)(DAT_08004a48 + 0xc) = *(uint *)(DAT_08004a48 + 0xc) | FLAG_1;\n      *(uint *)(data_ptr + 0xc) = *(uint *)(data_ptr + 0xc) & ~FLAG_2;\n      *(uint *)(data_ptr + 0x18) = *(uint *)(data_ptr + 0x18) & ~FLAG_2;\n      *(uint *)(data_ptr + 0x18) = *(uint *)(data_ptr + 0x18) & ~FLAG_2;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) = *(uint *)(DAT_08004a48 + 0xc) | FLAG_2;\n  *(uint *)(data_ptr + 0xc) = *(uint *)(data_ptr + 0xc) & ~FLAG_3;\n  *(uint *)(data_ptr + 0x18) = *(uint *)(data_ptr + 0x18) & ~FLAG_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "FUN_0800224c"
            ],
            "imported": false,
            "current_name": "check_params_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_value_from_offset_08001e40",
                "param_1": "offset_ptr",
                "*param_1": "*offset_ptr",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_from_offset_08001e40(int *offset_ptr)\n{\n    int offset_value = *offset_ptr + 0x4c;\n    int *address_of_value = (int *)offset_value;\n    return *address_of_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_result_08003a68",
                "uVar1": "result",
                "uVar2": "flags",
                "local_1c": "local_var_1",
                "abStack_18": "stack_array",
                "uStack_14": "stack_14",
                "uStack_10": "stack_10",
                "uStack_c": "stack_c"
            },
            "code": "uint calculate_result_08003a68(void)\n{\n  uint result;\n  uint flags;\n  undefined2 local_var_1;\n  byte stack_array[4];\n  undefined4 stack_14;\n  undefined4 stack_10;\n  undefined4 stack_c;\n  \n  stack_c = *(undefined4 *)(PTR_DAT_08003ac4 + 8);\n  stack_10 = *(undefined4 *)(PTR_DAT_08003ac4 + 4);\n  stack_14 = *(undefined4 *)PTR_DAT_08003ac4;\n  local_var_1 = *(undefined2 *)(PTR_DAT_08003ac4 + 0x10);\n  flags = *(uint *)(DAT_08003ac8 + 4);\n  result = DAT_08003ad0;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)stack_array[(flags << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_08003ad0 * stack_array[(flags << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_var_1 - ((*(int *)(DAT_08003ac8 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "FUN_08003afa"
            ],
            "imported": false,
            "current_name": "calculate_result_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "decode_data_080012a2",
                "param_1": "data",
                "*(undefined *)(param_1 + 10)": "data_value",
                "decode_data_08005848": "decode"
            },
            "code": "void decode_data_080012a2(int* data, int index)\n{\n  int data_value = *(data + index);\n  decode(data_value, 0);\n  decode(data_value, 1);\n  decode(data_value, 0);\n  return;\n}",
            "called": [
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "imported": false,
            "current_name": "decode_data_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_value_08004c78",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_08004c5e": "find_value_in_array"
            },
            "code": "int find_value_08004c78(int value_to_find) {\n    int found_value = 0;\n    if (value_to_find != -1) {\n        found_value = find_value_08004c78_in_array();\n    }\n    return found_value;\n}",
            "called": [
                "FUN_08004c5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "FUN_08004a4c",
                "FUN_08005384",
                "FUN_080053d4",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "find_value_08004c78"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "set_parameter_08001e48",
                "param_1": "param_array",
                "param_2": "value_array",
                "uVar1": "result",
                "uVar2": "value",
                "iVar3": "parameter_array",
                "local_c": "delay"
            },
            "code": "int set_parameter_08001e48(int *param_array, uint *value_array) {\n  int result;\n  uint value;\n  int parameter_array;\n  int delay;\n  if (*(char *)(param_array + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(param_array + 9) = 1;\n    value = value_array[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*param_array + 52) = *value_array << (value & 0xff) | *(uint *)(*param_array + 52) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*param_array + 48) = *value_array << (value & 0xff) | *(uint *)(*param_array + 48) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*param_array + 44) = *value_array << (value & 0xff) | *(uint *)(*param_array + 44) & ~(0x1f << (value & 0xff));\n    }\n    value = *value_array;\n    if (value < 10) {\n      *(uint *)(*param_array + 16) = value_array[2] << (value * 3 & 0xff) | *(uint *)(*param_array + 16) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*param_array + 12) = value_array[2] << (value & 0xff) | *(uint *)(*param_array + 12) & ~(7 << (value & 0xff));\n    }\n    if (*value_array - 0x10 < 2) {\n      parameter_array = *param_array;\n      if (parameter_array == DAT_08001f74) {\n        if ((*(uint *)(parameter_array + 8) & 0x800000) == 0) {\n          *(uint *)(parameter_array + 8) = *(uint *)(parameter_array + 8) | 0x800000;\n          if (*value_array == 0x10) {\n            for (delay = (uint)((ulonglong)DAT_08001f7c * (ulonglong)*(uint *)PTR_DAT_08001f78 >> 0x32) * 10; delay != 0; delay = delay + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        param_array[10] = param_array[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(param_array + 9) = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "set_parameter_08001e48"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "validate_params_and_return_result_080009b8",
                "param_1": "input_param",
                "check_params_0800092c": "check_params"
            },
            "code": "undefined4 validate_params_and_return_result_080009b8(undefined4 input_param)\n{\n  check_params();\n  return input_param;\n}",
            "called": [
                "FUN_0800092c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "FUN_080009a8",
                "FUN_080009dc",
                "FUN_080009f0",
                "FUN_080009c8"
            ],
            "imported": false,
            "current_name": "validate_params_and_return_result_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shift_amount_08000aa8",
                "param_1": "numerator",
                "param_2": "denominator",
                "iVar1": "intermediate_value",
                "uVar2": "shift_amount"
            },
            "code": "uint calculate_shift_amount_08000aa8(uint numerator, uint denominator)\n{\n    int intermediate_value;\n    uint shift_amount;\n\n    if ((denominator & 0x80000000) != 0)\n    {\n        return 0;\n    }\n\n    intermediate_value = denominator * 2 + 0x200000;\n\n    if (denominator * 2 < 0xffe00000)\n    {\n        if (intermediate_value < 0)\n        {\n            return 0;\n        }\n\n        shift_amount = -(intermediate_value >> 0x15) - 0x3e1;\n\n        if ((int)shift_amount >= 0)\n        {\n            return (denominator << 0xb | 0x80000000 | numerator >> 0x15) >> (shift_amount & 0xff);\n        }\n    }\n    else if ((numerator | denominator << 0xc) != 0)\n    {\n        return 0;\n    }\n\n    return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "FUN_08005da8"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "validate_and_return_result_08000a04",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "validate_params_and_return_result_080009a8": "validate_parameters"
            },
            "code": "bool validate_and_return_result_08000a04(void)\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  validate_parameters();\n  return !(bool)carry_flag || (bool)zero_flag;\n}",
            "called": [
                "FUN_080009a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "validate_and_return_result_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "initialize_if_not_initialized_yet_0800010c",
                "param_1": "param",
                "*PTR_DAT_08000124": "initialized_flag",
                "DAT_08000128": "some_value",
                "PTR_FUN_0800012c": "initialization_function_pointer"
            },
            "code": "undefined * initialize_if_not_initialized_yet_0800010c(undefined *param) {\\n  if (**PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      param = PTR_FUN_0800012c;\\n    }\\n    **PTR_DAT_08000124 = 1;\\n  }\\n  return param;\\n}",
            "called": [
                "FUN_08007328"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_not_initialized_yet_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "increase_pointer_value_08001cac",
                "PTR_DAT_08001cc0": "byte_pointer",
                "PTR_DAT_08001cbc": "int_pointer"
            },
            "code": "void increase_pointer_value_08001cac(void)\n{\n  uint8_t* PTR_DAT_08001cc0 = (uint8_t*)PTR_DAT_08001cc0;\n  uint32_t* PTR_DAT_08001cbc = (uint32_t*)PTR_DAT_08001cbc;\n  uint32_t current_value = *PTR_DAT_08001cbc;\n  uint32_t byte_value = (uint32_t)*PTR_DAT_08001cc0;\n  *PTR_DAT_08001cbc = current_value + byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "FUN_08004b9e"
            ],
            "imported": false,
            "current_name": "increase_pointer_value_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "calculate_value_if_not_zero_08005a18",
                "DAT_08005a3c": "value_at_offset",
                "PTR_DAT_08005a40": "offset_value"
            },
            "code": "void calculate_value_if_not_zero_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    calculate_DAT_08005a3c(PTR_DAT_08005a40);\n  }\n  return;\n}",
            "called": [
                "FUN_0800591e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "process_flags_08003f18",
                "param_1": "flags",
                "iVar1": "flag_ptr"
            },
            "code": "void process_flags_08003f18(int *flags)\n{\n  int flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 2) != 0) && ((*(uint *)(flag_ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set_08004df8();\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 4) != 0) && ((*(uint *)(flag_ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set_08004df8(flags);\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 8) != 0) && ((*(uint *)(flag_ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set_08004df8(flags);\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 0x10) != 0) && ((*(uint *)(flag_ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set_08004df8(flags);\n      do_nothing_08003f14(flags);\n    }\n    else {\n      do_nothing_08003f12(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 1) != 0) && ((*(uint *)(flag_ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xfffffffe;\n    execute_subtract_four_and_call_function_pointer_08004e12(flags);\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 0x80) != 0) && ((*(uint *)(flag_ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xffffff7f;\n    do_nothing_0800417a(flags);\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 0x40) != 0) && ((*(uint *)(flag_ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xffffffbf;\n    do_nothing_08003f16(flags);\n  }\n  flag_ptr = *flags;\n  if (((*(uint *)(flag_ptr + 0x10) & 0x20) != 0) && ((*(uint *)(flag_ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(flag_ptr + 0x10) = 0xffffffdf;\n    do_nothing_08004178(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_08003f12",
                "FUN_0800417a",
                "FUN_08004df8",
                "FUN_08003f14",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08003f16"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "FUN_08004e20"
            ],
            "imported": false,
            "current_name": "process_flags_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculate_value_at_offset_0800591e",
                "param_1": "offset",
                "*(short *)(param_1 + 0x134)": "value_at_offset",
                "*(short *)(param_1 + 0x136)": "value_at_offset2",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_0800591e(int offset) {\n  ushort value_at_offset = *(ushort *)(offset + 0x134);\n  ushort value_at_offset2 = *(ushort *)(offset + 0x136);\n  ushort result = (value_at_offset + 0x40) - value_at_offset2;\n  return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "FUN_08005a18"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_0800591e"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "index"
            },
            "code": "void set_bit_in_array_08002540(uint index)\n{\n    if (index >= 0) {\n        int array_index = (index >> 5) + 0x60;\n        int bit_index = index & 0x1f;\n        int* array_ptr = (int*)(DAT_0800255c + array_index * 4);\n        *array_ptr = 1 << bit_index;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08002540"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_offset",
                "pbVar2": "buffer_pointer_1",
                "pbVar3": "buffer_pointer_2",
                "uVar4": "input_byte_as_uint"
            },
            "code": "uint process_input_08006344(int input_length, byte input_byte, byte **input_buffer)\n{\n  int buffer_offset;\n  byte *buffer_pointer_1;\n  byte *buffer_pointer_2;\n  uint input_byte_as_uint;\n\n  buffer_pointer_1 = *(input_buffer + 2) + -1;\n  *(input_buffer + 2) = buffer_pointer_1;\n  if ((-1 < (int)buffer_pointer_1) || (((int)*(input_buffer + 6) <= (int)buffer_pointer_1 && (buffer_pointer_1 = (byte *)(uint)input_byte, buffer_pointer_1 != (byte *)0xa))))\n  {\n    buffer_pointer_1 = *input_buffer;\n    *input_buffer = buffer_pointer_1 + 1;\n    *buffer_pointer_1 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_params();\n  }\n  if (input_buffer == (byte **)PTR_DAT_080069d8) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080069dc) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_080069e0) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  *(input_buffer + 2) = *(input_buffer + 6);\n  buffer_pointer_2 = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_offset = (int)buffer_pointer_2 << 0x1c;\n  if (((buffer_offset < 0) && (buffer_pointer_2 = *(input_buffer + 4), buffer_pointer_2 != (byte *)0x0)) || (buffer_offset = process_data(input_length, input_buffer, buffer_offset, buffer_pointer_2, buffer_pointer_1), buffer_offset == 0)) {\n    input_byte_as_uint = (uint)input_byte;\n    buffer_offset = (int)*input_buffer - (int)*(input_buffer + 4);\n    if ((buffer_offset < (int)*(input_buffer + 5)) || (buffer_offset = process_data(input_length, input_buffer), buffer_offset == 0)) {\n      *(input_buffer + 2) = *(input_buffer + 2) + -1;\n      buffer_pointer_1 = *input_buffer;\n      *input_buffer = buffer_pointer_1 + 1;\n      *buffer_pointer_1 = input_byte;\n      if ((byte *)(buffer_offset + 1) != *(input_buffer + 5)) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return input_byte_as_uint;\n        }\n        if (input_byte_as_uint != 10) {\n          return input_byte_as_uint;\n        }\n      }\n      buffer_offset = process_data(input_length, input_buffer);\n      if (buffer_offset == 0) {\n        return input_byte_as_uint;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n",
            "called": [
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "FUN_08006370"
            ],
            "imported": false,
            "current_name": "process_input_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_valid_input_080009c8",
                "in_ZR": "input_char",
                "validate_params_and_return_result_080009b8": "validate_input"
            },
            "code": "bool is_valid_input_080009c8(void)\n{\n  char input_char;\n  validate_input();\n  return input_char != '\\0';\n}",
            "called": [
                "FUN_080009b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "is_valid_input_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr_to_b"
            },
            "code": "uint32_t process_input_08002db2(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  uint32_t *ptr_to_b = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((ptr_to_b == (uint32_t *)0x4) || ((ptr_to_b == (uint32_t *)0x8 || (ptr_to_b == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        do_nothing_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      do_nothing_08002c4e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          uint8_t *ptr_to_9 = (uint8_t *)input[9];\n          input[9] = (uint32_t *)((int)ptr_to_9 + 1);\n          (*input)[4] = (uint32_t)*(uint8_t *)ptr_to_9;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      uint8_t *ptr_to_9 = (uint8_t *)input[9];\n      input[9] = (uint32_t *)((int)ptr_to_9 + 1);\n      (*input)[4] = (uint32_t)*(uint8_t *)ptr_to_9;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c4e",
                "FUN_08002db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "process_input_08002db2"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_value_from_pointer_08001cc4",
                "PTR_DAT_08001ccc": "pointer"
            },
            "code": "uint32_t get_value_from_pointer_08001cc4() {\n    uint32_t *PTR_DAT_08001ccc = (uint32_t *)PTR_DAT_08001ccc;\n    return *PTR_DAT_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "FUN_08003c90",
                "FUN_080053d4",
                "FUN_08004b94",
                "FUN_08003688",
                "FUN_08001cd0",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_080043b4",
                "FUN_080020f0",
                "FUN_08001f84",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "FUN_08002efc",
                "FUN_08002db2"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "execute_if_flags_set_08003ea0",
                "param_1": "flags",
                "**param_1": "flag1",
                "(*param_1)[1]": "flag2"
            },
            "code": "void execute_if_flags_set_08003ea0(uint **flags)\n{\n    uint flag1 = **flags;\n    uint flag2 = (*flags)[1];\n\n    if ((flag1 & 2) && (flag2 & 2)) {\n        execute_code_if_not_null_08004d18();\n        (*flags)[1] = 0xfffffffd;\n    }\n\n    *(uint *)(DAT_08003ed4 + 0x14) = 0x20000;\n    *(uchar *)((int)flags + 0x11) = 1;\n}",
            "called": [
                "FUN_08004d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_flags_set_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "update_parameters_0800306c",
                "param_1": "params",
                "puVar1": "param_11",
                "param_1[0xb]": "params[0xB]",
                "*(short *)((int)param_1 + 0x2a)": "*(uint16_t *)((int)params + 0x2A)",
                "puVar1 = param_1[9];": "param_9 = params[9];",
                "param_1[9]": "params[9]",
                "*(char *)puVar1": "*(uint8_t *)param_9",
                "*(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;": "(*param_42)--;",
                "*(undefined *)((int)param_1 + 0x3d)": "*(uint8_t *)((int)params + 0x3D)",
                "param_1[0xc]": "params[0xC]",
                "*(char *)((int)param_1 + 0x3e)": "*(uint8_t *)((int)params + 0x3E)",
                "do_nothing_08002f9a": "do_nothing1",
                "do_nothing_08002c50": "do_nothing2",
                "uint": "uint32_t"
            },
            "code": "uint32_t update_parameters_0800306c(uint32_t **params)\n{\n  uint32_t *param_9 = params[9];\n  uint32_t *param_11 = params[0xB];\n  uint16_t *param_42 = (uint16_t *)((int)params + 0x2A);\n  uint8_t *param_62 = (uint8_t *)((int)params + 0x3E);\n  if (*param_42 == 3)\n  {\n    if (((param_11 == (uint32_t *)0x4) || (param_11 == (uint32_t *)0x8)) || (param_11 == (uint32_t *)0xFFFF0000))\n    {\n      **params &= 0xFFFFFBFF;\n    }\n    *param_9++ = (uint32_t)(*params)[4];\n    (*param_42)--;\n  }\n  else if (*param_42 == 2)\n  {\n    if (((param_11 == (uint32_t *)0x4) || (param_11 == (uint32_t *)0x8)) || (param_11 == (uint32_t *)0xFFFF0000))\n    {\n      (*params)[1] &= 0xFFFFFCFF;\n      **params |= 0x200;\n    }\n    else\n    {\n      if (param_11 == (uint32_t *)0x2)\n      {\n        **params |= 0x400;\n      }\n      else\n      {\n        **params &= 0xFFFFFBFF;\n      }\n      (*params)[1] &= 0xFFFFFCFF;\n    }\n    *param_9++ = (uint32_t)(*params)[4];\n    (*param_42)--;\n    *param_9++ = (uint32_t)(*params)[4];\n    (*param_42)--;\n    *(uint8_t *)((int)params + 0x3D) = 0x20;\n    params[0xC] = (uint32_t *)0x0;\n    if (*param_62 == '@')\n    {\n      *param_62 = 0;\n      do_nothing_08002f9a();\n    }\n    else\n    {\n      *param_62 = 0;\n      do_nothing_08002c50();\n    }\n  }\n  else\n  {\n    *param_9++ = (uint32_t)(*params)[4];\n    (*param_42)--;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08002c50",
                "FUN_08002f9a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "update_parameters_0800306c"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_combination_valid_0800548c",
                "param_1": "combination_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080054ac": "combination_data_pointer",
                "byte": "combination_byte",
                "DAT_080047e8": "combineTwoBytes"
            },
            "code": "bool is_combination_valid_0800548c(int combination_index) {\n  uint16_t combined_bytes = DAT_080047e8(get_combination_data(combination_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_080047e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "FUN_080054d4",
                "FUN_08005510"
            ],
            "imported": false,
            "current_name": "is_combination_valid_0800548c"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_data_by_index_08004848",
                "param_1": "index",
                "DAT_08004870": "data_0",
                "DAT_08004880": "data_1",
                "DAT_08004874": "data_2",
                "DAT_08004878": "data_3",
                "DAT_0800487c": "data_4"
            },
            "code": "int get_data_by_index_08004848(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08004870;\n    case 1:\n      return DAT_08004880;\n    case 2:\n      return DAT_08004874;\n    case 3:\n      return DAT_08004878;\n    case 4:\n      return DAT_0800487c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "get_data_by_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "convert_number_base_and_return_08005d82",
                "convert_number_base_08005d42": "convert_number_base"
            },
            "code": "void convert_number_base_and_return_08005d82(void)\n{\n  convert_number_base();\n  return;\n}",
            "called": [
                "FUN_08005d42"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "imported": false,
            "current_name": "convert_number_base_and_return_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "process_data_and_update_status_08006f92",
                "param_1": "data",
                "param_2": "status_ptr",
                "iVar1": "process_result",
                "uVar2": "status_flags",
                "bVar3": "is_error"
            },
            "code": "void process_data_and_update_status_08006f92(undefined4 data, int status_ptr) {\n  int process_result = process_data(data, *(short *)(status_ptr + 0xe));\n  bool is_error = process_result == -1;\n  ushort status_flags = *(ushort *)(status_ptr + 0xc);\n  if (is_error) {\n    status_flags &= 0xefff;\n  }\n  else {\n    *(int *)(status_ptr + 0x54) = process_result;\n    status_flags |= 0x1000;\n  }\n  *(ushort *)(status_ptr + 0xc) = status_flags;\n}\n",
            "called": [
                "FUN_08007048"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "process_data_and_update_status_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "decode_four_bytes_080012c0",
                "param_1": "data_address",
                "param_2": "decoded_data",
                "uVar1": "bit_mask"
            },
            "code": "void decode_four_bytes_080012c0(int data_address, int decoded_data)\n{\n  uint32_t bit_mask;\n  \n  for (bit_mask = 0; bit_mask < 4; bit_mask++) {\n    decode_data_08005848(*(undefined *)(data_address + bit_mask + 0xb), decoded_data >> (bit_mask & 0xff) & 1);\n  }\n  decode_data_080012a2(data_address);\n  return;\n}",
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "imported": false,
            "current_name": "decode_four_bytes_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_value_at_offset_08001f80",
                "param_1": "address"
            },
            "code": "int get_value_at_offset_08001f80(int address)\n{\n  int value = *(int *)(address + 0x28);\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "FUN_08004a4c"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "set_value_if_not_set_08001f84",
                "param_1": "value_ptr",
                "param_2": "value",
                "iVar1": "current_value",
                "iVar3": "value_at_ptr",
                "local_14": "i",
                "PTR_DAT_08001ffc": "global_pointer",
                "DAT_08002000": "global_constant"
            },
            "code": "int set_value_if_not_set_08001f84(int *value_ptr, uint value) {\n  int value_at_ptr = *value_ptr;\n  if ((*(uint *)(value_at_ptr + 8) & 1) == 0) {\n    *(uint *)(value_at_ptr + 8) = *(uint *)(value_at_ptr + 8) | 1;\n    for (uint i = (uint)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc >> 0x32); i != 0; i--) {}\n    int value_from_pointer = get_value_from_pointer(value_ptr, value, (int)((ulonglong)DAT_08002000 * (ulonglong)*(uint *)PTR_DAT_08001ffc));\n    do {\n      if ((*(uint *)(*value_ptr + 8) & 1) != 0) {\n        return 0;\n      }\n      int current_value = get_value_from_pointer();\n    } while ((uint)(current_value - value_from_pointer) < 3);\n    value_ptr[10] = value_ptr[10] | 0x10;\n    value_ptr[0xb] = value_ptr[0xb] | 1;\n    *(undefined *)(value_ptr + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "set_value_if_not_set_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "decode_and_execute_08000bcc",
                "PTR_DAT_08000c90": "PTR_DATA_1",
                "decode_data_08005848": "decode_and_update_data",
                "PTR_DAT_08000c94": "PTR_DATA_2",
                "PTR_DAT_08000c98": "PTR_DATA_3",
                "PTR_DAT_08000c9c": "PTR_DATA_4",
                "decode_and_update_080013a4": "decode_and_execute_data",
                "decode_and_execute_data_08001550": "decode_and_execute_data",
                "PTR_DAT_08000ca0": "PTR_DATA_5",
                "reverse_and_call_08005c96": "reverse_and_call",
                "PTR_s_Reflow_08000ca4": "PTR_FUNCTION_1",
                "decode_data_and_send_08001366": "decode_data_and_send",
                "PTR_s_Oven_1_2_08000ca8": "PTR_FUNCTION_2",
                "decode_data_and_return_0800135a": "decode_data_and_return",
                "do_nothing_080058e8": "do_nothing",
                "validate_input_and_execute_08005a68": "validate_input_and_execute",
                "PTR_DAT_08000cac": "PTR_DATA_6",
                "get_value_and_return_080058e0": "get_value_and_return",
                "PTR_DAT_08000cb0": "PTR_DATA_7",
                "PTR_DAT_08000cb4": "PTR_DATA_8",
                "PTR_DAT_08000cb8": "PTR_DATA_9",
                "send_interrupt_if_not_sent_08000aec": "send_interrupt_if_not_sent"
            },
            "code": "void decode_and_execute_08000bcc(void)\n{\n  // Decode and update data\n  decode_and_update_data(PTR_DAT_08000c90, 1);\n  decode_and_update_data(PTR_DAT_08000c94, 1);\n  decode_and_update_data(PTR_DAT_08000c98, 1);\n  decode_and_update_data(PTR_DAT_08000c94, 0);\n  // Decode and execute data\n  decode_and_execute_08000bcc_data(PTR_DAT_08000c9c, 0, PTR_DAT_08000ca0);\n  // Reverse and call functions\n  reverse_and_call(PTR_DAT_08000c9c, PTR_s_Reflow_08000ca4);\n  reverse_and_call(PTR_DAT_08000c9c, PTR_s_Oven_1_2_08000ca8);\n  // Do nothing\n  do_nothing(0x9c4);\n  // Validate input and execute\n  validate_input_and_execute(PTR_DAT_08000cac, 0xe100, 6);\n  // Get values and send interrupt\n  *(unsigned int *)PTR_DAT_08000cb0 = 2000;\n  unsigned int value1 = get_value_and_return();\n  *(unsigned int *)PTR_DAT_08000cb4 = value1;\n  unsigned int value2 = get_value_and_return();\n  *(unsigned int *)PTR_DAT_08000cb8 = value2;\n  send_interrupt_if_not_sent(0);\n}",
            "called": [
                "FUN_08005848",
                "FUN_08001550",
                "FUN_080058e8",
                "FUN_08001366",
                "FUN_08005a68",
                "FUN_0800135a",
                "FUN_080058e0",
                "FUN_080057b4",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_08000aec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "decode_and_execute_08000bcc"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_value_at_address_0800281e",
                "param_1": "memory_address",
                "param_2": "value",
                "param_3": "shift_value",
                "*(int *)(param_1 + 0x10)": "*(int *)(memory_address + 0x10)"
            },
            "code": "void set_value_at_address_0800281e(int memory_address, int value, int shift_value)\n{\n  if (shift_value == 0) {\n    *(int *)(memory_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(memory_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "set_value_at_address_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "execute_functions_08006198"
            },
            "code": "void execute_functions_08006198(void)\n{\n  undefined *function_list_start = PTR_DAT_080061d0;\n  int function_list_size = (int) PTR_DAT_080061d4 - (int) PTR_DAT_080061d0;\n  for (int i = 0; i < function_list_size / 4; i++) {\n    (**(code **)(function_list_start + i * 4))();\n  }\n  do_nothing_08007328();\n  function_list_start = PTR_DAT_080061d8;\n  function_list_size = (int) PTR_DAT_080061dc - (int) PTR_DAT_080061d8;\n  for (int i = 0; i < function_list_size / 4; i++) {\n    (**(code **)(function_list_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_functions_08006198"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "process_data_08007048",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_ptr",
                "iVar2": "return_value"
            },
            "code": "void process_data_08007048(int *output, undefined4 input1, undefined4 input2, undefined4 input3) {\n  undefined *data_ptr;\n  int return_value;\n  data_ptr = PTR_DAT_08007068;\n  *(undefined4 *)PTR_DAT_08007068 = 0;\n  return_value = return_zero_08005728(input1, input2, input3, input3, input3);\n  if ((return_value == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08005728"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "FUN_08006f5a",
                "FUN_08006f92"
            ],
            "imported": false,
            "current_name": "process_data_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_data_from_pointer_and_shift_08003c50",
                "uVar1": "data",
                "PTR_DAT_08003c6c": "shift_amount_array",
                "DAT_08003c68": "pointer_to_data",
                "result": "shifted_data",
                "index": "shift_amount_index"
            },
            "code": "uint get_data_from_pointer_and_shift_08003c50(void)\n{\n  uint data = get_data_from_pointer();\n  uint shift_amount = *(int *)(DAT_08003c68 + 4) << 0x15;\n  uint index = shift_amount >> 0x1d;\n  uint result = data >> PTR_DAT_08003c6c[index];\n  return result;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "FUN_08004204"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_and_shift_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "data",
                "param_2": "start",
                "param_3": "end",
                "param_4": "arg",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "max_size",
                "uVar3": "current_size",
                "bVar4": "size_flag",
                "char_flag": "char_flag",
                "char_index": "char_index"
            },
            "code": "undefined4 process_data_080065c0(undefined4 data, uint *start, uint *end, undefined4 arg, code *callback)\n{\n  int i;\n  uint max_size = start[4] < start[2] ? start[2] : start[4];\n  *end = max_size;\n  if (*(char *)((int)start + 0x43) != '\\0') {\n    *end = max_size + 1;\n  }\n  if ((int)(*start << 0x1a) < 0) {\n    *end = *end + 2;\n  }\n  uint current_size = *start & 6;\n  if (current_size == 0) {\n    for (; (int)current_size < (int)(start[3] - *end); current_size++) {\n      i = (*callback)(data, arg, (int)start + 0x19, 1);\n      if (i == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint char_flag = (uint)*(byte *)((int)start + 0x43);\n  if (char_flag != 0) {\n    char_flag = 1;\n  }\n  uint char_index = char_flag;\n  if ((int)(*start << 0x1a) < 0) {\n    *(undefined *)((int)start + char_flag + 0x43) = 0x30;\n    char_index = char_flag + 2;\n    *(undefined *)((int)start + char_flag + 0x44) = *(undefined *)((int)start + 0x45);\n  }\n  i = (*callback)(data, arg, (int)start + 0x43, char_index);\n  if (i != -1) {\n    uint end_size = start[3];\n    bool size_flag = (*start & 6) != 4;\n    if (size_flag) {\n      end_size = 0;\n    }\n    uint size_diff = 0;\n    if (!size_flag) {\n      size_diff = end_size - *end;\n    }\n    if (!size_flag) {\n      size_diff = size_diff & ~((int)size_diff >> 0x1f);\n    }\n    if (start[4] < start[2]) {\n      size_diff = size_diff + (start[2] - start[4]);\n    }\n    while( true ) {\n      if (size_diff == current_size) {\n        return 0;\n      }\n      i = (*callback)(data, arg, (int)start + 0x1a, 1);\n      if (i == -1) break;\n      current_size++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "FUN_080066b0"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "check_valid_combination_080054d4",
                "param_1": "combination_length",
                "param_2": "combination",
                "param_3": "input_value",
                "param_4": "input_flag",
                "iVar1": "is_valid"
            },
            "code": "int check_valid_combination_080054d4(int combination_length, char *combination, int input_value, int input_flag) {\n    if (combination_length == 0) {\n        return -1;\n    }\n    int is_valid = is_combination_valid();\n    if (is_valid == 0) {\n        *combination = *(char *)(combination_length + 0x45);\n        validate_input(*(int *)(PTR_DAT_0800550c + (uint)*(char *)(combination_length + 0x44) * 4), combination_length + 0x45, 1, PTR_DAT_0800550c, input_flag);\n        return 0;\n    }\n    return -1;\n}",
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "FUN_0800598a"
            ],
            "imported": false,
            "current_name": "check_valid_combination_080054d4"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "wait_forever_08004d40"
            },
            "code": "void wait_forever_08004d40(void)\n{\n  while( true )\n  {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_08004d40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "wait_forever_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_flags_and_values_08004d44",
                "puVar1": "flags_and_values"
            },
            "code": "void set_flags_and_values_08004d44(void)\n{\n  uint *flags_and_values = DAT_08004d84;\n  *DAT_08004d84 |= 1;\n  flags_and_values[1] = DAT_08004d88 & flags_and_values[1];\n  *flags_and_values &= 0xfef6ffff;\n  *flags_and_values &= 0xfffbffff;\n  flags_and_values[1] &= 0xff80ffff;\n  flags_and_values[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "update_and_execute_if_bit_set_0800282c",
                "param_1": "bit",
                "DAT_08002844": "data_ptr"
            },
            "code": "void update_and_execute_if_bit_set_0800282c(uint bit){\n  uint* DAT_08002844 = (uint *)(DAT_08002844 + 0x14);\n  if ((*DAT_08002844 & bit) != 0) {\n    *DAT_08002844 = bit;\n    execute_if_bit_set_080060e4();\n  }\n  return;\n}",
            "called": [
                "FUN_080060e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [],
            "imported": false,
            "current_name": "update_and_execute_if_bit_set_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "FUN_080015b2": "decode_and_check_bits_080015b2",
                "param_1": "data",
                "uVar2": "i",
                "uVar3": "result",
                "iVar1": "bit_value",
                "*param_1": "data",
                "decode_data_08005848": "decode_data",
                "check_bit_in_data_at_index_08005890": "check_bit_at_index"
            },
            "code": "uint decode_and_check_bits_080015b2(void *data)\n{\n  int bit_value;\n  uint decoded_data;\n  uint result = 0;\n\n  decode_data(data + 4, 0);\n  for (int i = 31; i >= 0; i--)\n  {\n    decode_data(data + 8, 1);\n    bit_value = check_bit_at_index(data);\n    if (bit_value != 0)\n    {\n      result |= 1 << (i & 0xff);\n    }\n    decode_data(data + 8, 0);\n  }\n  decode_data(data + 4, 1);\n  return result;\n}",
            "called": [
                "FUN_08005890",
                "FUN_08005848"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "FUN_080015f8"
            ],
            "imported": false,
            "current_name": "decode_and_check_bits_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "calculate_shifted_value_0800040c",
                "param_1": "input_value",
                "uVar1": "shifted_value_upper",
                "uVar2": "shifted_value_lower",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "in_r12": "unused",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "count_leading_zeroes": "count_leading_zero_bits"
            },
            "code": "ulonglong calculate_shifted_value_0800040c(uint input_value)\n{\n  uint leading_zeroes_count = count_leading_zeroes(input_value);\n  uint shift_amount = leading_zeroes_count + 0x15;\n  bool shift_by_constant = shift_amount < 0x20;\n  uint shifted_value = 0;\n  uint remaining_shift_amount = 0;\n\n  if (input_value == 0) {\n    return 0;\n  }\n\n  if (shift_by_constant) {\n    remaining_shift_amount = 0xc - leading_zeroes_count + 1;\n    shifted_value = input_value << (shift_amount & 0xff);\n    input_value = input_value >> (remaining_shift_amount & 0xff);\n  }\n\n  if (!shift_by_constant || (remaining_shift_amount == 0 && shift_amount >= 0x20)) {\n    remaining_shift_amount = 0x20 - (shift_amount & 0xff);\n    shifted_value = input_value << (shift_amount & 0xff);\n    shifted_value |= 0U >> (remaining_shift_amount & 0xff);\n    shifted_value &= ~(0U >> (remaining_shift_amount & 0xff));\n  }\n\n  if (shift_by_constant) {\n    shifted_value |= 0 << (shift_amount & 0xff);\n  }\n\n  if (shift_amount < 0x433) {\n    return CONCAT44(shifted_value + (0x432 - shift_amount) * 0x100000, 0);\n  }\n\n  uint remaining_bits = ~(0x432 - shift_amount);\n  if (remaining_bits > 0x1e) {\n    return (ulonglong)(input_value >> (remaining_bits - 0x1f & 0xff));\n  }\n\n  int difference = remaining_bits - 0x13;\n  if (difference == 0 || (difference < 0) != SCARRY4(remaining_bits - 0x1f, 0xc)) {\n    remaining_bits++;\n    return CONCAT44(input_value >> (remaining_bits & 0xff), shifted_value >> (remaining_bits & 0xff) | input_value << (0x20 - remaining_bits & 0xff));\n  }\n\n  return (ulonglong)(shifted_value >> (0x20 - (0xcU - difference) & 0xff) | input_value << (0xcU - difference & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "FUN_080015f8",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_0800040c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "num"
            },
            "code": "int subtract_four_08004df4(int num)\n{\n  return num - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "FUN_08004df8",
                "FUN_08004e12"
            ],
            "imported": false,
            "current_name": "subtract_four_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "decode_bits_08004bb0",
                "param_1": "bit_pattern",
                "param_2": "bit_array",
                "param_3": "array_size",
                "uVar1": "flag_value",
                "local_20": "bit_mask",
                "local_14": "bitmask_1",
                "DAT_08004c28": "data_1",
                "DAT_08004c2c": "data_2"
            },
            "code": "void decode_bits_08004bb0(uint bit_pattern, uint* bit_array, uint array_size, uint* flag) {\n    uint flag_value = set_flag(bit_pattern);\n    uint bit_mask = 1 << (bit_pattern & 0xf) & 0xffff;\n    uint bitmask_1 = 3;\n    *(uint *)(DAT_08004c28 + 0x18) = *(uint *)(DAT_08004c28 + 0x18) | 1;\n    if ((bit_pattern - 0xd & 0xff) < 2) {\n        *(uint *)(DAT_08004c2c + 4) = *(uint *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x4000000;\n    }\n    if (((bit_pattern == 0xf) || (bit_pattern == 0x13)) || (bit_pattern == 0x14)) {\n        *(uint *)(DAT_08004c2c + 4) = *(uint *)(DAT_08004c2c + 4) & 0xf8ffffff | 0x2000000;\n    }\n    *bit_array = array_size;\n    *(bit_array + 1) = *flag;\n    *(bit_array + 2) = flag_value;\n    decode_bits_08004bb0_helper(flag_value, bit_array);\n}\n\nvoid decode_bits_08004bb0_helper(uint flag_value, uint* bit_array) {\n    // implementation\n}\n",
            "called": [
                "FUN_08004884",
                "FUN_08002624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "decode_bits_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "execute_callback_if_flag_set_08004df8",
                "param_1": "flag",
                "iVar1": "callback_ptr",
                "subtract_four_08004df4": "subtract_four",
                "callback_func": "callback_func",
                "flag_value": "flag_value"
            },
            "code": "void execute_callback_if_flag_set_08004df8(int flag) {\n  int callback_ptr = subtract_four();\n  code* callback_func = *(code**)(callback_ptr + 0x4c);\n  char flag_value = *(char*)(flag + 0x1c);\n  if (callback_func != nullptr && flag_value == '\\x01') {\n    (*callback_func)(callback_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08004df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "FUN_08003f18"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "decode_and_update_parameters_08001510",
                "param_1": "parameters",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "param_7": "param_7"
            },
            "code": "undefined4 *decode_and_update_parameters_08001510(undefined4 *parameters, undefined4 param_2, undefined4 param_3, undefined4 param_4, undefined param_5, undefined param_6, undefined param_7) {\n  parameters[1] = 0;\n  *parameters = PTR_PTR_decode_and_return_success_0800134e_1_0800154c;\n  decode_and_update_080014ba(parameters, 1, param_2, 0xff, param_3, param_4, param_5, param_6, param_7, 0, 0, 0, 0);\n  return parameters;\n}",
            "called": [
                "FUN_080014ba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "FUN_08000b08"
            ],
            "imported": false,
            "current_name": "decode_and_update_parameters_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "check_params_08002af8",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2",
                "param_3": "param3",
                "param_4": "ptr_param4",
                "uVar1": "result",
                "puVar2": "ptr_var1"
            },
            "code": "int check_params_08002af8(uint **ptr_param1, uint *ptr_param2, int param3, uint *ptr_param4){\n    int result = 0;\n    if ((*ptr_param1)[61] == '(') {\n        if (ptr_param2 == NULL || param3 == 0 || (*ptr_param1)[15] == 1) {\n            result = 1;\n        }\n        else {\n            (*ptr_param1)[15] = 1;\n            uint *ptr_var1 = *ptr_param1;\n            if ((*ptr_var1 & 1) == 0) {\n                *ptr_var1 |= 1;\n            }\n            **ptr_param1 &= 0xFFFFF7FF;\n            (*ptr_param1)[16] = NULL;\n            (*ptr_param1)[9] = ptr_param2;\n            (*ptr_param1)[10] = (uint)param3;\n            (*ptr_param1)[11] = ptr_param4;\n            (*ptr_param1)[10] = (*ptr_param1)[10] & 0xFFFF;\n            (*ptr_param1)[15] = 0;\n            (*ptr_param1)[1] |= 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "check_params_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "set_flags_080028de",
                "param_1": "params",
                "puVar1": "flag_ptr",
                "DAT_08004b80": "0x3d",
                "DAT_08004b84": "0x3e",
                "PTR_DAT_08004b88": "0x14",
                "PTR_DAT_08004b8c": "0xc",
                "DAT_08004b90": "0x2a",
                "PTR_DAT_08004b94": "0xb",
                "DAT_08004b98": "0xffff0000",
                "DAT_08004b9c": "0x4",
                "DAT_08004ba0": "0x8",
                "DAT_08004ba4": "0x12"
            },
            "code": "uint32_t set_flags_080028de(uint32_t **params)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = params[11];\n  if ((*(char *)((int)params + DAT_08004b80) == '\"') && ((params[20] != (uint32_t *)0x0 || (*(char *)((int)params + DAT_08004b84) != '@')))) {\n    if ((params[20] == (uint32_t *)0x0) && (params[4] == (uint32_t *)PTR_DAT_08004b8c000)) {\n      **params = **params | 0x100;\n      params[20] = (uint32_t *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + DAT_08004b90) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + DAT_08004b90) == 1) {\n        if (flag_ptr == (uint32_t *)DAT_08004b98) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & DAT_08004ba000) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)DAT_08004b9c) || (flag_ptr == (uint32_t *)DAT_08004ba0)) || (params[12] == (uint32_t *)DAT_08004ba4)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint32_t *)0x2) {\n          **params = **params | DAT_08004b9c00;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + DAT_08004b90) == 2) {\n        if (params[11] == (uint32_t *)0x2) {\n          **params = **params | DAT_08004b9c00;\n        }\n        else {\n          **params = **params | DAT_08004ba000;\n          **params = **params & 0xfffffbff;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & DAT_08004ba000) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | DAT_08004b9c00;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & DAT_08004ba000) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_flags_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "set_output_value_08002848",
                "param_1": "output_value",
                "*(char *)((int)param_1 + 0x3e)": "output_char",
                "param_1[0x14]": "input_flag",
                "*(uint *)(*param_1 + 0x10)": "output_address",
                "param_1[0x11]": "input_value",
                "*(char *)((int)param_1 + 0x3d)": "output_char2",
                "uint": "unsigned int",
                "output_value_masked": "output_value_masked"
            },
            "code": "int set_output_value_08002848(int *output_value)\n{\n    char output_char = *(char *)((int)output_value + 0x3e);\n    int input_value = output_value[0x11];\n    int output_address = *output_value + 0x10;\n    int output_value_masked;\n\n    if (output_char == '@') {\n        if (output_value[0x14] == 0) {\n            output_value_masked = input_value & 0xfe;\n        }\n        else {\n            output_value_masked = input_value & 0xffU | 1;\n        }\n    }\n    else if (output_value[4] == 0x4000) {\n        char output_char2 = *(char *)((int)output_value + 0x3d);\n        if (output_char2 == '!') {\n            output_value_masked = input_value & 0xfe;\n        }\n        else {\n            output_value_masked = input_value & 0xffU | 1;\n        }\n    }\n    else if (output_value[0x14] == 0) {\n        output_value_masked = (uint)(input_value << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (output_value[0x14] == 1) {\n        output_value_masked = (uint)(input_value << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    *(uint *)output_address = output_value_masked;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "FUN_080033b8"
            ],
            "imported": false,
            "current_name": "set_output_value_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "decrement_value_08004e70",
                "param_1": "value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int decrement_value_08004e70(int value) {\n    int decremented_value = value - 4;\n    return decremented_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "FUN_08004ef4",
                "FUN_08004e74",
                "FUN_08004ec4"
            ],
            "imported": false,
            "current_name": "decrement_value_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_and_update_flags_080020f0",
                "param_1": "ptr_param",
                "iVar1": "ptr_var1",
                "iVar2": "ptr_var2"
            },
            "code": "int check_and_update_flags_080020f0(int *ptr_param)\n{\n    int ptr_var1;\n    int ptr_var2;\n    \n    ptr_var2 = *ptr_param;\n    if ((*(uint *)(ptr_var2 + 8) & 1) == 0) {\n        return 0;\n    }\n    *(uint *)(ptr_var2 + 8) = *(uint *)(ptr_var2 + 8) & 0xfffffffe;\n    ptr_var2 = get_value_from_pointer_08001cc4();\n    do {\n        if ((*(uint *)(*ptr_param + 8) & 1) == 0) {\n            return 0;\n        }\n        ptr_var1 = get_value_from_pointer_08001cc4();\n    } while ((uint)(ptr_var1 - ptr_var2) < 3);\n    ptr_param[10] = ptr_param[10] | 0x10;\n    ptr_param[0xb] = ptr_param[0xb] | 1;\n    return 1;\n}",
            "called": [
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "FUN_08002348",
                "FUN_0800213c",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "allocate_and_process_memory_08006e10",
                "param_1": "process_id",
                "param_2": "memory_info",
                "uVar1": "memory_permissions",
                "iVar2": "allocation_size",
                "local_18": "allocation_size",
                "local_14": "local_memory_info",
                "PTR_LAB_08006c34_1_08006e8c": "ptr_lab_1_08006e8c",
                "process_input_08007028": "process_input",
                "DAT_08006dc8": "check_memory_permissions",
                "allocate_memory_08006288": "allocate_memory"
            },
            "code": "void allocate_and_process_memory_08006e10(int process_id, int *memory_info)\n{\n  ushort memory_permissions;\n  int allocation_size;\n  int allocated_memory_address;\n  int *local_memory_info;\n  \n  if ((int)((uint)*(ushort *)(memory_info + 3) << 0x1e) >= 0) {\n    local_memory_info = memory_info;\n    memory_permissions = DAT_08006dc8(process_id, memory_info, &allocation_size, &local_memory_info);\n    allocated_memory_address = allocate_memory(process_id, allocation_size);\n    if (allocated_memory_address != 0) {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08006c34_1_08006e8c;\n      *memory_info = allocated_memory_address;\n      *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 0x80;\n      memory_info[4] = allocated_memory_address;\n      memory_info[5] = allocation_size;\n      if ((local_memory_info != (int *)0x0) &&\n         (allocated_memory_address = process_input(process_id, (int)*(short *)((int)memory_info + 0xe)), allocated_memory_address != 0)) {\n        *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_info + 3) = memory_permissions | *(ushort *)(memory_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) & 0xfffc | 2;\n  }\n  *memory_info = (int)memory_info + 0x47;\n  memory_info[4] = (int)memory_info + 0x47;\n  memory_info[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08006dc8",
                "FUN_08007028",
                "FUN_08006288"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "FUN_080069e4"
            ],
            "imported": false,
            "current_name": "allocate_and_process_memory_08006e10"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "process_params_08004e74",
                "param_1": "param_count",
                "param_2": "current_param",
                "param_3": "expected_param",
                "param_4": "callback_func",
                "iVar1": "function_return_value"
            },
            "code": "void process_params_08004e74(int param_count, int current_param, int expected_param, undefined4 callback_func) {\n  int function_return_value;\n  function_return_value = decrement_value();\n  if (expected_param == *(int *)(param_count + 0xc)) {\n    if (current_param == 0) {\n      *(undefined *)(function_return_value + 0x88) = 0;\n      *(undefined *)(function_return_value + 0x5c) = 0;\n      if (*(code **)(function_return_value + 100) != (code *)0x0) {\n        (**(code **)(function_return_value + 100))();\n      }\n      check_params(param_count, function_return_value + 0x68, *(undefined *)(function_return_value + 0x88), 8);\n      return;\n    }\n    *(undefined *)(function_return_value + 0x5c) = 1;\n    process_input(param_count, function_return_value + 0x68, 0x20, 8, callback_func);\n  }\n  return;\n}",
            "called": [
                "FUN_08002af8",
                "FUN_08002b84",
                "FUN_08004e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "FUN_08002cf2"
            ],
            "imported": false,
            "current_name": "process_params_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_address_value_if_param_not_zero_08004c30",
                "param_1": "address",
                "param_2": "value",
                "param_3": "param",
                "param_4": "arg1",
                "<unknown>": "arg2",
                "set_value_at_address_0800281e": "set_value_at_address"
            },
            "code": "void set_address_value_if_param_not_zero_08004c30(void* address, short value, int param, void* arg1, void* arg2)\n{\n    if (param != 0)\n    {\n        set_value_at_address_0800281e(address, value, 1, arg1, arg2);\n    }\n    else\n    {\n        set_value_at_address_0800281e(address, value, 0, arg1, arg2);\n    }\n}",
            "called": [
                "FUN_0800281e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_08005848"
            ],
            "imported": false,
            "current_name": "set_address_value_if_param_not_zero_08004c30"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "process_input_and_update_08006f38",
                "param_1": "input_buffer",
                "param_2": "state_buffer",
                "iVar1": "input_length",
                "uVar2": "updated_state_value",
                "bVar3": "input_processed_successfully"
            },
            "code": "void process_input_and_update_08006f38(uint8_t* input_buffer, uint8_t* state_buffer)\n{\n  int input_length = (int)*(short *)(state_buffer + 0xe);\n  int processed_input_length = process_input(input_buffer, input_length);\n  bool input_processed_successfully = processed_input_length >= 0;\n  uint updated_state_value;\n  if (input_processed_successfully) {\n    updated_state_value = *(int *)(state_buffer + 0x54) + processed_input_length;\n  }\n  else {\n    updated_state_value = *(ushort *)(state_buffer + 0xc) & 0xffffefff;\n  }\n  if (input_processed_successfully) {\n    *(uint *)(state_buffer + 0x54) = updated_state_value;\n  }\n  if (!input_processed_successfully) {\n    *(short *)(state_buffer + 0xc) = (short)updated_state_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800706c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_update_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "get_value_08004cce",
                "param_1": "key",
                "uVar1": "value",
                "find_value_by_key_08004cb2": "find_value_by_key"
            },
            "code": "int get_value_08004cce(int key) {\n  if (key == -1) {\n    return -1;\n  }\n  int value = find_value_by_key();\n  return value;\n}",
            "called": [
                "FUN_08004cb2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "FUN_08004948",
                "FUN_0800492c",
                "FUN_08004b3c",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "get_value_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "FUN_080061f0",
                "FUN_08006288"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "FUN_08005f6c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "process_data_08003ad4",
                "param_1": "data",
                "param_2": "length",
                "puVar1": "control",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result"
            },
            "code": "uint32_t process_data_08003ad4(uint32_t *data, uint32_t length)\n{\n  uint32_t *control = control_data;\n  if (((*control & 7) < length) && (*control = *control & 0xfffffff8 | length, length != (*control & 7))) {\n    return 1;\n  }\n  if ((*data & 2) != 0) {\n    control_data[1] = control_data[1] & 0xffffff0f | data[2];\n  }\n  if ((*data & 1) != 0) {\n    uint32_t type = data[1];\n    if (type == 1) {\n      if ((*control_data & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((type != 2) && ((*control_data & 2) == 0)) {\n      return 1;\n    }\n    control_data[1] = type | control_data[1] & 0xfffffffc;\n    int32_t start_time = get_start_time();\n    if (type == 1) {\n      while ((control_data[1] & 0xc) != 4) {\n        int32_t current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (type == 2) {\n      while ((control_data[1] & 0xc) != 8) {\n        int32_t current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((control_data[1] & 0xc) != 0) {\n        int32_t current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  control = control_data;\n  if ((length < (*control_data & 7)) && (*control_data = *control_data & 0xfffffff8 | length, length != (*control & 7))) {\n    return 1;\n  }\n  if ((*data & 4) != 0) {\n    control_data[1] = control_data[1] & 0xfffff8ff | data[3];\n  }\n  if ((*data & 8) != 0) {\n    control_data[1] = control_data[1] & 0xffffc7ff | data[4] << 3;\n  }\n  uint32_t result = calculate_result();\n  *(uint32_t *)control_data_ptr = result >> control_data_shift[(control_data[1] << 0x18) >> 0x1c];\n  check_and_set_param(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_data_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "update_bitfield_08004110",
                "param_1": "bitfield",
                "param_2": "bit_index",
                "param_3": "new_value",
                "*(uint *)(param_1 + 0x20)": "(*bitfield)",
                "uint": "uint32_t",
                "0x20": "32",
                "&": "bitwise AND",
                "|": "bitwise OR",
                "~": "bitwise NOT"
            },
            "code": "void update_bitfield_08004110(uint32_t* bitfield, uint8_t bit_index, uint32_t new_value) {\n    uint32_t mask = ~(4 << (bit_index & 0xff));\n    *bitfield = (*bitfield & mask) | (new_value << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "FUN_0800412c"
            ],
            "imported": false,
            "current_name": "update_bitfield_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "find_value_08004ce2",
                "param_1": "value_to_find",
                "param_2": "data_array",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int find_value_08004ce2(int value_to_find, char *data_array)\n{\n    if (value_to_find == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*data_array == -1) {\n            return 0;\n        }\n        if (value_to_find == *data_array) break;\n        data_array = data_array + 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "FUN_080057b4"
            ],
            "imported": false,
            "current_name": "find_value_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "update_data_08005568",
                "param_1": "data_addr",
                "param_2": "new_data",
                "bVar1": "data_index",
                "PTR_DAT_080055b0": "global_data_array",
                "PTR_DAT_080055b4": "global_data_index_array",
                "set_bits_in_memory_08002494": "set_bits_in_memory",
                "set_bit_in_array_080024f8": "set_bit_in_array",
                "check_input_0800455a": "check_input",
                "PTR_DAT_080055b8": "global_data_check_array"
            },
            "code": "void update_data_08005568(int data_addr, int new_data){\n  if (data_addr != 0) {\n    byte data_index = *(byte *)(data_addr + 0x44);\n    *(undefined4 *)(PTR_DAT_080055b0 + (uint)data_index * 4) = new_data;\n    *(int *)(PTR_DAT_080055b4 + (uint)data_index * 4) = data_addr;\n    set_bits_in_memory((int)*(char *)(data_addr + 0x5a),0,2);\n    set_bit_in_array((int)*(char *)(data_addr + 0x5a));\n    check_input(*(undefined4 *)(PTR_DAT_080055b8 + (uint)data_index * 4), *(int *)(data_addr + 100) + (uint)*(ushort *)(data_addr + 0x6a),1);\n  }\n}",
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data_ptr",
                "param_2": "values_ptr",
                "param_3": "num_values",
                "param_4": "value",
                "uVar1": "result",
                "iVar2": "status"
            },
            "code": "int process_data_08004478(int *data_ptr, ushort *values_ptr, int num_values, undefined4 value)\n{\n  undefined4 result;\n  int status;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (values_ptr == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (num_values == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      result = get_value_from_pointer_08001cc4();\n      *(short *)(data_ptr + 9) = (short)num_values;\n      *(short *)((int)data_ptr + 0x26) = (short)num_values;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          status = check_values(data_ptr,0x80,0,result,value);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *values_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            values_ptr = values_ptr + 1;\n          }\n          else {\n            values_ptr = (ushort *)((int)values_ptr + 1);\n          }\n        }\n        else {\n          status = check_values(data_ptr,0x80,0,result,value);\n          if (status != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)values_ptr;\n          values_ptr = (ushort *)((int)values_ptr + 1);\n        }\n      }\n      status = check_values(data_ptr,0x40,0,result,value);\n      if (status == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}",
            "called": [
                "FUN_080043b4",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_device_and_update_value_08005f5e",
                "update_value_08002470": "update_value",
                "enable_and_initialize_device_settings_08001c32": "initialize_device_settings"
            },
            "code": "void initialize_device_and_update_value_08005f5e(void)\n{\n  update_value(3);\n  initialize_device_settings();\n  return;\n}",
            "called": [
                "FUN_08002470",
                "FUN_08001c32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "FUN_08006198"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_value_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "FUN_08005cb6": "call_function_pointer_08005cb6",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_08005cb6(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_data_from_pointer_and_shift_right_08003c70",
                "uVar1": "data",
                "get_data_from_pointer_08003c44": "get_data_from_pointer",
                "PTR_DAT_08003c8c": "data_pointer",
                "DAT_08003c88": "pointer_data"
            },
            "code": "uint get_data_from_pointer_and_shift_right_08003c70(void)\n{\n  uint data = get_data_from_pointer();\n  uint shift = (uint)(*(int *)(PTR_DAT_08003c8c + 4) << 0x12) >> 0x1d;\n  uint shifted_data = data >> shift;\n  return shifted_data;\n}",
            "called": [
                "FUN_08003c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_and_shift_right_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "find_and_process_data_080053d4",
                "param_1": "data_address",
                "param_2": "data_value",
                "cVar1": "data_char",
                "iVar2": "initial_value",
                "iVar3": "data_index",
                "uVar4": "i",
                "PTR_DAT_0800547c": "data_array",
                "PTR_DAT_08005480": "data_array",
                "PTR_DAT_08005484": "data_array",
                "PTR_DAT_08005488": "data_array"
            },
            "code": "uint find_and_process_data_080053d4(undefined4 data_address, uint data_value)\n{\n  int initial_value = get_initial_value();\n  char data_char = PTR_DAT_0800547c[1];\n  int data_index = find_data_index((int)data_char, PTR_DAT_0800547c);\n  if (data_index == 0) {\n    return 0;\n  }\n  uint i = 0;\n  while ((i < 5 && ((*(int *)(PTR_DAT_0800547c + i * 4) == 0 || (data_index = find_data_index((int)data_char, PTR_DAT_0800547c), **(int **)(PTR_DAT_0800547c + i * 4) != data_index))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_DAT_0800547c[0x44]) && (update_data(), 4 < (byte)PTR_DAT_0800547c[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_DAT_0800547c[0x44];\n  }\n  do {\n    data_index = process_data(*(undefined4 *)(PTR_DAT_0800547c + i * 4), data_address, data_value & 0xffff, 1000);\n    if (data_index == 0) {\n      return data_value;\n    }\n    data_index = get_initial_value();\n  } while ((uint)(data_index - initial_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08004c78",
                "FUN_08001cc4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_08005730"
            ],
            "imported": false,
            "current_name": "find_and_process_data_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "process_input_08002b84",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int process_input_08002b84(uint **input_ptr, uint *input_data, int input_length, uint *output_ptr) {\n  int result;\n  uint *ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL || input_length == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 1;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr |= 1;\n      }\n      **input_ptr &= 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = '*';\n      *(undefined *)((int)input_ptr + 0x3e) = ' ';\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_length;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "FUN_08004e74"
            ],
            "imported": false,
            "current_name": "process_input_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "check_bit_in_uint_08004c48",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "mask",
                "param_4": "result",
                "is_bit_set_in_uint_08002810": "is_bit_set_in_uint"
            },
            "code": "void check_bit_in_uint_08004c48(unsigned int* data, unsigned short bit_position, unsigned int mask, unsigned int* result) {\n  is_bit_set_in_uint(data, bit_position, mask, result, result);\n  return;\n}",
            "called": [
                "FUN_08002810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08005890"
            ],
            "imported": false,
            "current_name": "check_bit_in_uint_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "calculate_0800042c",
                "param_1": "num",
                "uVar1": "mask",
                "uVar2": "abs_num",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "trailing_zeroes",
                "uVar6": "sign_mask",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflowed",
                "in_r12": "unused"
            },
            "code": "ulonglong calculate_0800042c(uint num) {\n  uint mask = 0x80000000;\n  int count = 0;\n  while ((num & mask) == 0 && mask != 0) {\n    count++;\n    mask >>= 1;\n  }\n  return count;\n}\n\nulonglong calculate_0800042c(uint num) {\n  uint sign_mask = 0x80000000;\n  uint abs_num = num;\n  if ((int)num < 0) {\n    abs_num = -num;\n  }\n  if (abs_num == 0) {\n    return 0;\n  }\n  int leading_zeroes = calculate_0800042c(abs_num);\n  uint shift_amount = leading_zeroes + 0x15;\n  uint trailing_zeroes = 0x20 - shift_amount;\n  uint result = 0;\n  if (shift_amount < 0x20) {\n    if (leading_zeroes < 0xb) {\n      shift_amount = 0xb;\n    }\n    result = abs_num << (shift_amount & 0xff);\n    abs_num >>= (0xcU - leading_zeroes & 0xff);\n  }\n  if (shift_amount >= 0x20) {\n    result = abs_num << (leading_zeroes & 0xff);\n    if (shift_amount > 0x20) {\n      result |= 0U >> (trailing_zeroes & 0xff);\n    }\n    if (leading_zeroes >= 0x20) {\n      result = 0;\n    }\n  }\n  if (shift_amount < 0x433) {\n    return ((ulonglong)(result | sign_mask) << 32) | 0;\n  }\n  uint shift_amount_inv = ~(0x432 - shift_amount);\n  if (shift_amount_inv > 0x1e) {\n    return (((ulonglong)num << (shift_amount_inv - 0x1f & 0xff)) | (ulonglong)result) & 0x80000000ffffffff;\n  }\n  int shift_amount_inv_diff = shift_amount_inv - 0x13;\n  if (shift_amount_inv_diff == 0 || (shift_amount_inv_diff < 0) != ((shift_amount_inv - 0x1f) < 0xc)) {\n    shift_amount_inv++;\n    return (((ulonglong)sign_mask | (abs_num >> (shift_amount_inv & 0xff))) << 32) | (result >> (0x20 - shift_amount_inv & 0xff) | (abs_num << (0xcU - shift_amount_inv_diff & 0xff)));\n  }\n  return (((ulonglong)num << (0x20 - (0xcU - shift_amount_inv_diff) & 0xff)) | (ulonglong)(result >> (0xcU - shift_amount_inv_diff & 0xff))) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "calculate_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "execute_decoded_instructions_08005f6c",
                "decode_and_execute_08000bcc": "decode_and_execute",
                "FUNC_08000cd0": "execute_instruction",
                "calculate_value_if_not_zero_08005a18": "calculate_value_if_not_zero",
                "DAT_08005f88": "instruction_pointer_not_zero"
            },
            "code": "void execute_decoded_instructions_08005f6c(void)\n{\n  do_nothing();\n  decode_and_execute();\n  while(true)\n  {\n    while(DAT_08005f88())\n    {\n      execute_instruction();\n    }\n    calculate_value_if_not_zero();\n  }\n}",
            "called": [
                "FUN_08005a18",
                "FUN_08005f5c",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "FUN_08001be8"
            ],
            "imported": false,
            "current_name": "execute_decoded_instructions_08005f6c"
        },
        "FUN_08005cc0": {
            "renaming": {
                "FUN_08005cc0": "call_function_with_args_08005cc0",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg4",
                "PTR_DAT_08005cd0": "arg3"
            },
            "code": "void call_function_with_args_08005cc0(int *function_pointer, int arg1, int arg2, void *PTR_DAT_08005cd0, int arg4) {\n  (**(void (*)(int *, void *, int, void *, int))(*function_pointer + 4))(function_pointer, PTR_DAT_08005cd0, arg1, arg2, arg4);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "FUN_08005f40",
                "FUN_08005cd4"
            ],
            "imported": false,
            "current_name": "call_function_with_args_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "process_input_0800706c",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "data_ptr",
                "iVar2": "result"
            },
            "code": "void process_input_0800706c(int *output, undefined4 input_1, undefined4 input_2, undefined4 input_3)\n{\n    undefined *data_ptr;\n    int result;\n    data_ptr = PTR_DAT_0800708c;\n    *(undefined4 *)PTR_DAT_0800708c = 0;\n    result = return_zero_0800572c(input_1, input_2, input_3, input_3, input_3);\n    if ((result == -1) && (*(int *)data_ptr != 0)) {\n        *output = *(int *)data_ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_0800572c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "FUN_08006f38"
            ],
            "imported": false,
            "current_name": "process_input_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "decode_bits_08002624",
                "param_1": "bits_output",
                "param_2": "bits_input",
                "puVar1": "output_ptr",
                "uVar2": "bit_mask",
                "uVar3": "input_word",
                "uVar4": "output_word",
                "uVar5": "output_value",
                "uVar6": "bit_index",
                "uVar7": "input_bit",
                "iVar8": "output_bit",
                "uVar9": "output_word",
                "iVar10": "output_index",
                "DAT_080027f8": "output_word_1",
                "DAT_0800280c": "output_word_2",
                "DAT_080027fc": "output_word_3",
                "DAT_08002800": "output_word_4"
            },
            "code": "void decode_bits_08002624(uint *bits_output, uint *bits_input)\n{\n  uint *output_ptr;\n  uint bit_mask;\n  uint input_word;\n  uint output_word;\n  uint output_value;\n  uint bit_index;\n  uint input_bit;\n  uint output_bit;\n  int output_index;\n  int i;\n  output_index = 0;\n  for (i = 0; i <= 15; i++) {\n    if (i > 15) {\n      return;\n    }\n    bit_mask = 1 << i;\n    input_bit = *bits_input & bit_mask;\n    if (bit_mask == input_bit) {\n      input_word = bits_input[1];\n      if (input_word == 0x12) {\n        output_value = bits_input[3] + 0xc;\n      }\n      else if (input_word < 0x13) {\n        if (input_word == 2) {\n          output_value = bits_input[3] + 8;\n        }\n        else if (input_word < 3) {\n          if (input_word == 0) goto LAB_08002776;\n          if (input_word == 1) {\n            output_value = bits_input[3];\n          }\n        }\n        else if (input_word == 3) {\n          output_value = 0;\n        }\n        else if (input_word == 0x11) {\n          output_value = bits_input[3] + 4;\n        }\n      }\n      else {\n        if (input_word != input_word_1) {\n          if (input_word_1 < input_word) {\n            if (input_word == input_word_2) goto LAB_08002776;\n            output_word = input_word_2 + 0x10000;\n            output_index = input_word_2;\n          }\n          else {\n            output_word = input_word_1 - 0x100000;\n            output_index = input_word_1;\n          }\n          if ((input_word != output_word) && (input_word != output_index - 0xf0000)) goto LAB_0800263a;\n        }\nLAB_08002776:\n        if (bits_input[2] == 0) {\n          output_value = 4;\n        }\n        else if (bits_input[2] == 1) {\n          bits_output[4] = bit_mask;\n          output_value = 8;\n        }\n        else {\n          bits_output[5] = bit_mask;\n          output_value = 8;\n        }\n      }\nLAB_0800263a:\n      bit_index = i;\n      output_ptr = bits_output;\n      if (0xff < input_bit) {\n        bit_index = i - 8;\n        output_ptr = bits_output + 1;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_index << 2 & 0xff)) | output_value << (bit_index << 2 & 0xff);\n      if ((bits_input[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_080027f8 + 0x18) = *(uint *)(DAT_080027f8 + 0x18) | 1;\n        output_bit = (i & 3) << 2;\n        if (bits_output == DAT_0800280c) {\n          output_index = 0;\n        }\n        else if (bits_output == DAT_0800280c + 0x100) {\n          output_index = 1;\n        }\n        else if (bits_output == DAT_0800280c + 0x200) {\n          output_index = 2;\n        }\n        else if (bits_output == DAT_0800280c + 0x300) {\n          output_index = 3;\n        }\n        else {\n          output_index = 4;\n        }\n        *(uint *)(DAT_080027fc + ((i >> 2) + 2) * 4) =\n             *(uint *)(DAT_080027fc + ((i >> 2) + 2) * 4) & ~(0xf << output_bit) | output_index << output_bit;\n        if ((bits_input[1] & 0x10000) == 0) {\n          *DAT_08002800 = *DAT_08002800 & ~input_bit;\n        }\n        else {\n          *DAT_08002800 = *DAT_08002800 | input_bit;\n        }\n        if ((bits_input[1] & 0x20000) == 0) {\n          DAT_08002800[1] = DAT_08002800[1] & ~input_bit;\n        }\n        else {\n          DAT_08002800[1] = DAT_08002800[1] | input_bit;\n        }\n        if ((bits_input[1] & 0x100000) == 0) {\n          DAT_08002800[2] = DAT_08002800[2] & ~input_bit;\n        }\n        else {\n          DAT_08002800[2] = DAT_08002800[2] | input_bit;\n        }\n        if ((bits_input[1] & 0x200000) == 0) {\n          DAT_08002800[3] = DAT_08002800[3] & ~input_bit;\n        }\n        else {\n          DAT_08002800[3] = input_bit | DAT_08002800[3];\n        }\n      }\n    }\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "FUN_08004bb0",
                "FUN_08004974",
                "FUN_08004f4c"
            ],
            "imported": false,
            "current_name": "decode_bits_08002624"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "unset_flag_in_data_080040b0",
                "param_1": "data",
                "param_2": "flag_bit",
                "puVar1": "data_ptr",
                "DAT_0800410c": "ptr_data_end"
            },
            "code": "uint32_t unset_flag_in_data_080040b0(uint32_t **data, uint32_t flag_bit)\\n\\\n{\\n\\\n  uint32_t *data_ptr = *data;\\n\\\n  update_bit_in_int(data_ptr, flag_bit, 0);\\n\\\n  if (((data_ptr == DAT_0800410c) && ((data_ptr[8] & 0x1111) == 0)) && ((data_ptr[8] & 0x444) == 0)) {\\n\\\n    data_ptr[0x11] &= 0xffff7fff;\\n\\\n  }\\n\\\n  if (((data_ptr[8] & 0x1111) == 0) && ((data_ptr[8] & 0x444) == 0)) {\\n\\\n    *data_ptr &= 0xfffffffe;\\n\\\n  }\\n\\\n  *(uint8_t *)((int)data + 0x3d) = 1;\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_08004092"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "FUN_08004b3c"
            ],
            "imported": false,
            "current_name": "unset_flag_in_data_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "FUN_08005d42": "convert_number_base_08005d42",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result1",
                "iVar2": "result2",
                "convert_number_to_base_08005ce8": "convert_number_to_base",
                "call_function_pointer_08005cb6": "call_function_pointer"
            },
            "code": "int convert_number_base_08005d42(uint32_t *array, uint32_t number, uint32_t base) {\n  int result1, result2;\n  if (base == 0) {\n    result1 = (**(code **)*array)(array,number & 0xff);\n    return result1;\n  }\n  if (base != 10) {\n    result1 = convert_number_to_base(array,number,base & 0xff);\n    return result1;\n  }\n  if ((int32_t)number >= 0) {\n    result1 = convert_number_to_base(array,number,10);\n    return result1;\n  }\n  result1 = call_function_pointer(array,0x2d);\n  result2 = convert_number_to_base(array,-number,10);\n  return result2 + result1;\n}",
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "FUN_08005d82"
            ],
            "imported": false,
            "current_name": "convert_number_base_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "set_flags_and_return_08004b34"
            },
            "code": "void set_flags_and_return_08004b34(void)\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08004d90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "FUN_08003ed8"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "enable_and_initialize_device_settings_08004c52",
                "enable_feature_08001c88": "enable_feature",
                "initialize_device_settings_08001b48": "initialize_device_settings"
            },
            "code": "void enable_and_initialize_device_settings_08004c52(void)\n{\n  enable_feature();\n  initialize_device_settings();\n  return;\n}",
            "called": [
                "FUN_08001c88",
                "FUN_08001b48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "FUN_08001c32"
            ],
            "imported": false,
            "current_name": "enable_and_initialize_device_settings_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "decode_and_update_080013a4",
                "param_1": "buffer_address",
                "param_2": "offset",
                "param_3": "size",
                "param_4": "data1",
                "iVar1": "flag",
                "iVar2": "i"
            },
            "code": "void decode_and_update_080013a4(int buffer_address, int offset, int size, int data1, int data2) {\n  int flag = *(byte *)(buffer_address + 0x13);\n  if (offset > 3) {\n    *(byte *)(buffer_address + 0x13) = flag | 8;\n  }\n  *(char *)(buffer_address + 0x17) = (char)size;\n  set_parameters(buffer_address, 0, 0x40, data1, data1 + 0x40);\n  if (data2 != 0 && size == 1) {\n    *(byte *)(buffer_address + 0x13) = flag | 4;\n  }\n  decode_and_update_080013a4_data_080057b4(*(undefined *)(buffer_address + 8),1);\n  if (*(char *)(buffer_address + 9) != -1) {\n    decode_and_update_080013a4_data_080057b4(*(char *)(buffer_address + 9),1);\n  }\n  decode_and_update_080013a4_data_080057b4(*(undefined *)(buffer_address + 10),1);\n  int i = 0;\n  while (i < 8 && (flag & 0x10) == 0 || i < 12 && (flag & 0x10) != 0) {\n    decode_and_update_080013a4_data_080057b4(*(undefined *)(buffer_address + i + 0xb),1);\n    i++;\n  }\n  decode_data_08005848(*(undefined *)(buffer_address + 8),0);\n  decode_data_08005848(*(undefined *)(buffer_address + 10),0);\n  if (*(char *)(buffer_address + 9) != -1) {\n    decode_data_08005848(*(char *)(buffer_address + 9),0);\n  }\n  if ((flag & 0x10) == 0) {\n    decode_four_bytes_080012c0(buffer_address,3);\n    decode_four_bytes_080012c0(buffer_address,3);\n    decode_four_bytes_080012c0(buffer_address,3);\n    decode_four_bytes_080012c0(buffer_address,2);\n  }\n  else {\n    decode_data_08001310(buffer_address, flag | 0x20, 0);\n    decode_data_08001310(buffer_address, flag | 0x20, 0);\n    decode_data_08001310(buffer_address, flag | 0x20, 0);\n  }\n  decode_data_08001310(buffer_address, flag | 0x20, 0);\n  *(undefined *)(buffer_address + 0x14) = 4;\n  set_flag_and_decode_data_0800138e(buffer_address);\n  decode_data_and_return_0800135a(buffer_address);\n  *(undefined *)(buffer_address + 0x15) = 2;\n  decode_data_08001310(buffer_address, 6, 0);\n}\n",
            "called": [
                "FUN_08005848",
                "FUN_08001310",
                "FUN_080012c0",
                "FUN_08001294",
                "FUN_0800135a",
                "FUN_080057b4",
                "FUN_0800138e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "FUN_080014ba",
                "FUN_08000bcc"
            ],
            "imported": false,
            "current_name": "decode_and_update_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "initialize_and_allocate_memory_block_08006d14",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "piVar1": "block_index",
                "piVar2": "memory_block_start",
                "iVar3": "block_start_address",
                "ppiVar4": "current_block",
                "PTR_PTR_DAT_08006d88": "block_start_pointer",
                "FUNC_08006cb4": "initialize_memory_block",
                "fill_memory_range_with_value_080061e0": "fill_memory_range_with_value"
            },
            "code": "int * initialize_and_allocate_memory_block_08006d14(undefined4 *error_code, undefined4 size, undefined4 value1, undefined4 value2)\n{\n  int *memory_block_start;\n  int *current_block;\n  int block_start_address;\n  int i;\n  \n  block_start_address = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(block_start_address + 0x18) == 0) {\n    initialize_memory_block(block_start_address);\n  }\n  current_block = (int *)(block_start_address + 0x48);\n  do {\n    memory_block_start = current_block[2];\n    current_block = current_block[1];\n    for (i = size; i >= 0; i--) {\n      if (*(short *)(memory_block_start + 3) == 0) {\n        *(undefined2 *)((int)memory_block_start + 0xe) = 0xffff;\n        memory_block_start[0x19] = 0;\n        *(undefined2 *)(memory_block_start + 3) = 1;\n        *memory_block_start = 0;\n        memory_block_start[2] = 0;\n        memory_block_start[1] = 0;\n        memory_block_start[4] = 0;\n        memory_block_start[5] = 0;\n        memory_block_start[6] = 0;\n        fill_memory_range_with_value_080061e0(memory_block_start + 0x17,0,8,1,value2);\n        memory_block_start[0xd] = 0;\n        memory_block_start[0xe] = 0;\n        memory_block_start[0x12] = 0;\n        memory_block_start[0x13] = 0;\n        return memory_block_start;\n      }\n      memory_block_start = memory_block_start + 0x1a;\n    }\n    if (*current_block == (int *)0x0) {\n      memory_block_start = (int *)allocate_and_initialize_memory_block_08006c88(error_code,4);\n      *current_block = memory_block_start;\n      if (memory_block_start == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    current_block = (int **)*current_block;\n  } while( true );\n}",
            "called": [
                "FUN_080061e0",
                "FUN_08006c88",
                "FUN_08006cb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "FUN_08006cb4"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_block_08006d14",
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08006d88;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08006cb4(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_range_with_value_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08006c88(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "FUN_080015f8",
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 225414,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08000178",
            "FUN_0800258c",
            "FUN_0800573c",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_08002f9c",
            "FUN_08005750",
            "FUN_08002ab8",
            "FUN_08002c54",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08006174",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08002810",
            "FUN_08004cb2",
            "FUN_08001294",
            "FUN_08002ad8",
            "FUN_0800455a",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_080028d2",
            "FUN_08005b3c",
            "FUN_08004c8a",
            "FUN_08002ca6",
            "FUN_080045a2",
            "FUN_080047e8",
            "thunk_FUN_08005750",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_080008ba",
            "FUN_08005714",
            "FUN_08005a44",
            "FUN_0800417c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080024f8",
            "FUN_08004198",
            "FUN_08000a2c",
            "FUN_08000ae8",
            "FUN_080061e0",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08002582",
            "FUN_08004884",
            "FUN_080061f0",
            "FUN_0800572c",
            "FUN_08000a58",
            "FUN_08004092",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_0800480a",
            "FUN_08005f8c",
            "FUN_08004c5e",
            "FUN_08004d90",
            "FUN_08004828",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_08001e48",
            "FUN_08000aa8",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_0800591e",
            "FUN_08002540",
            "FUN_08002db2",
            "FUN_08001cc4",
            "FUN_0800306c",
            "FUN_08004848",
            "FUN_08001f80",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_080065c0",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800040c",
            "FUN_08004df4",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005cb6",
            "FUN_08002b84",
            "FUN_0800042c",
            "FUN_08005cc0",
            "FUN_08002624"
        ],
        [
            "FUN_08007004",
            "FUN_08004ec4",
            "FUN_080043b4",
            "FUN_08007028",
            "FUN_08004ca2",
            "FUN_080054b0",
            "FUN_08006f00",
            "FUN_08004ef4",
            "FUN_080055e0",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08006c40",
            "FUN_08006920",
            "FUN_08004b94",
            "FUN_08001918",
            "FUN_08001c3c",
            "FUN_08005604",
            "FUN_08005c96",
            "FUN_08004b9e",
            "FUN_08000aec",
            "FUN_08004e12",
            "FUN_08003c90",
            "FUN_0800412c",
            "FUN_08005c38",
            "FUN_08005ce8",
            "FUN_08004c78",
            "FUN_080009b8",
            "FUN_08005a18",
            "FUN_08003ea0",
            "FUN_0800548c",
            "FUN_08001f84",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_080020f0",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08004cce",
            "FUN_08005568",
            "FUN_08003c70",
            "FUN_08004c48",
            "FUN_0800706c",
            "FUN_080040b0",
            "FUN_08004b34"
        ],
        [
            "FUN_08005510",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08005fc8",
            "FUN_08001c88",
            "FUN_0800224c",
            "FUN_08005890",
            "FUN_08004204",
            "FUN_080045fe",
            "FUN_0800213c",
            "FUN_08005384",
            "FUN_08005b54",
            "FUN_08004618",
            "FUN_08005d8a",
            "FUN_08002d1c",
            "FUN_08003da4",
            "FUN_080009dc",
            "FUN_080058e0",
            "FUN_080009f0",
            "FUN_08006ac0",
            "FUN_08005848",
            "FUN_08003ed8",
            "FUN_08002348",
            "FUN_08005cd4",
            "FUN_08006dc8",
            "FUN_0800492c",
            "FUN_080009a8",
            "FUN_0800316c",
            "FUN_08003afa",
            "FUN_08004948",
            "FUN_08003f18",
            "FUN_080009c8",
            "FUN_08006f92",
            "FUN_080054d4",
            "FUN_08006f38",
            "FUN_08003ad4",
            "FUN_08004478",
            "FUN_08005d42"
        ],
        [
            "FUN_08006c88",
            "FUN_08004e20",
            "FUN_080032b4",
            "FUN_0800598a",
            "FUN_0800441a",
            "FUN_08005da0",
            "FUN_08002384",
            "FUN_08000a18",
            "FUN_080046b8",
            "FUN_08001cd0",
            "FUN_08003520",
            "FUN_0800611c",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08005bb0",
            "FUN_08004b3c",
            "FUN_080012a2",
            "FUN_08000a04",
            "FUN_08005d82",
            "FUN_080015b2",
            "FUN_08006e10",
            "FUN_080053d4"
        ],
        [
            "FUN_080019f6",
            "FUN_08001960",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08005da8",
            "FUN_08004a4c",
            "FUN_080057b4",
            "FUN_080012e8",
            "FUN_080033b8",
            "FUN_08005730",
            "FUN_08005a68",
            "FUN_080015f8",
            "FUN_080012c0",
            "FUN_08004c52"
        ],
        [
            "FUN_08005754",
            "FUN_08001a44",
            "FUN_08005f2c",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001ab0",
            "FUN_08006f5a",
            "FUN_08001310"
        ],
        [
            "FUN_0800138e",
            "FUN_08005f40",
            "FUN_08001b18",
            "FUN_0800134e",
            "FUN_08001366",
            "FUN_0800135a",
            "FUN_08001550",
            "FUN_08005f5e"
        ],
        [
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba",
            "FUN_08000bcc"
        ],
        [
            "FUN_08001510",
            "FUN_08005f6c"
        ],
        [
            "FUN_08001be8",
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080068f0",
            "FUN_08006be0",
            "FUN_080069e4",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ]
    ],
    "locked_functions": []
}