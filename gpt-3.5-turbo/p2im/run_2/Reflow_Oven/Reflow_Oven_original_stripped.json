{
    "functions": {
        "FUN_08002470": {
            "renaming": {
                "FUN_08002470": "set_priority_group_08002470",
                "PriorityGroup": "priority_group",
                "DAT_08002490": "priority_register_address",
                "PTR_": "pointer_",
                "uint32_t": "uint32_t",
                "uint": "unsigned_int",
                "current_priority_bits": "current_priority_bits",
                "new_priority_bits": "new_priority_bits",
                "priority_group_bits": "priority_group_bits",
                "priority_register": "priority_register"
            },
            "code": "void set_priority_group_08002470(uint32_t priority_group)\n{\n    uint32_t* priority_register = (uint32_t*)(DAT_08002490 + 0xc);\n    uint32_t priority_group_bits = (priority_group & 7) << 8;\n    uint32_t current_priority_bits = *(uint32_t*)(DAT_08002490 + 0xc) & 0xf8ff;\n    uint32_t new_priority_bits = priority_group_bits | current_priority_bits | 0x5fa0000;\n    *priority_register = new_priority_bits;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002470",
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "imported": false,
            "current_name": "set_priority_group_08002470"
        },
        "FUN_08007004": {
            "renaming": {
                "FUN_08007004": "get_file_status_08007004",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "file_status",
                "puVar1": "errno_ptr",
                "iVar2": "fstat_result"
            },
            "code": "void get_file_status_08007004(int *error_code, int file_descriptor, struct stat *file_status)\n{\n  int fstat_result;\n  int *errno_ptr = PTR_errno_08007024;\n  *(int *)PTR_errno_08007024 = 0;\n  fstat_result = _fstat(file_descriptor, file_status);\n  if ((fstat_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007004",
            "calling": [
                "__swhatbuf_r"
            ],
            "imported": false,
            "current_name": "get_file_status_08007004"
        },
        "FUN_08006394": {
            "renaming": {
                "FUN_08006394": "FUNC_08006394"
            },
            "code": "\nint FUNC_08006394(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int iVar3;\n  void *pvVar4;\n  int *piVar5;\n  byte *pbVar6;\n  byte *pbVar7;\n  int unaff_r9;\n  int iVar8;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (param_2 == PTR___sf_fake_stdin_080065a0) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR___sf_fake_stdout_080065a8) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR___sf_fake_stderr_080065ac) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar8 = __swsetup_r(param_1,param_2), iVar8 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar6 = param_3;\nLAB_080063d6:\n  pbVar7 = pbVar6;\n  if (*pbVar7 != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  pbVar6 = pbVar7 + 1;\n  if (*pbVar7 != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  iVar8 = (int)pbVar7 - (int)param_3;\n  if (iVar8 != 0) {\n    iVar3 = __sfputs_r(param_1,param_2,param_3,iVar8);\n    if (iVar3 == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar8;\n  }\n  if (*pbVar7 == 0) goto LAB_08006580;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar6 = pbVar7 + 1;\n  while( true ) {\n    pvVar4 = memchr(PTR_s___0__080065a4,(uint)*pbVar6,5);\n    puVar2 = PTR_DAT_080065b0;\n    param_3 = pbVar6 + 1;\n    if (pvVar4 == (void *)0x0) break;\n    local_88 = 1 << ((int)pvVar4 - (int)PTR_s___0__080065a4 & 0xffU) | local_88;\n    pbVar6 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar6 == 0x2a) {\n    piVar5 = local_8c + 1;\n    iVar8 = *local_8c;\n    local_8c = piVar5;\n    if (-1 < iVar8) goto LAB_080064b0;\n    local_7c = -iVar8;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar1 = false;\n    iVar8 = local_7c;\n    param_3 = pbVar6;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n      bVar1 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar1) {\nLAB_080064b0:\n      local_7c = iVar8;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar5 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar5;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      iVar8 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar8 = iVar8 * 10 + (*param_3 - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        local_84 = iVar8;\n      }\n    }\n  }\n  pvVar4 = memchr(PTR_DAT_080065b0,(uint)*param_3,3);\n  if (pvVar4 != (void *)0x0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << ((int)pvVar4 - (int)puVar2 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  pvVar4 = memchr(PTR_s_efgEFG_080065b4,(uint)local_70,6);\n  if (pvVar4 == (void *)0x0) {\n    iVar8 = _printf_i(param_1,&local_88,param_2,DAT_080065bc,&local_8c);\n  }\n  else {\n    iVar8 = param_1;\n    if (DAT_080065b8 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar8 = unaff_r9;\n      goto LAB_08006532;\n    }\n  }\n  if (iVar8 == -1) goto LAB_08006580;\nLAB_08006532:\n  local_74 = local_74 + iVar8;\n  pbVar6 = param_3;\n  unaff_r9 = iVar8;\n  goto LAB_080063d6;\n}\n\n",
            "called": [
                "__sfputs_r",
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006394",
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_08006394"
        },
        "FUN_080035fc": {
            "renaming": {
                "FUN_080035fc": "reset_I2C_080035fc",
                "hdma": "i2c_handle",
                "hi2c": "i2c",
                "Instance": "instance",
                "XferCount": "transfer_count",
                "hdmatx": "dma_tx_handle",
                "XferAbortCallback": "transfer_abort_callback",
                "hdmarx": "dma_rx_handle",
                "State": "state",
                "HAL_I2C_STATE_ABORT": "HAL_I2C_STATE_ABORT",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_READY",
                "Mode": "mode",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NONE",
                "ErrorCode": "error_code",
                "HAL_I2C_ErrorCallback": "i2c_error_callback",
                "HAL_I2C_AbortCpltCallback": "i2c_abort_complete_callback",
                "CR1": "control_register_1"
            },
            "code": "void reset_I2C_080035fc(I2C_HandleTypeDef *i2c_handle)\n{\n  I2C_HandleTypeDef *i2c;\n  i2c = (I2C_HandleTypeDef *)i2c_handle->Parent;\n  i2c->Instance->CR1 &= ~(1 << 10);\n  i2c->XferCount = 0;\n  i2c->hdmatx->XferAbortCallback = NULL;\n  i2c->hdmarx->XferAbortCallback = NULL;\n  if (i2c->State != HAL_I2C_STATE_ABORT) {\n    i2c->State = HAL_I2C_STATE_READY;\n    i2c->Mode = HAL_I2C_MODE_NONE;\n    i2c->Instance->CR1 &= ~(1 << 0);\n    HAL_I2C_ErrorCallback(i2c);\n    return;\n  }\n  i2c->State = HAL_I2C_STATE_READY;\n  i2c->Mode = HAL_I2C_MODE_NONE;\n  i2c->ErrorCode = 0;\n  i2c->Instance->CR1 &= ~(1 << 0);\n  HAL_I2C_AbortCpltCallback(i2c);\n  return;\n}",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035fc",
            "calling": [],
            "imported": false,
            "current_name": "reset_I2C_080035fc"
        },
        "FUN_08005740": {
            "renaming": {
                "FUN_08005740": "set_errno_to_22_08005740",
                "pid_UNUSED": "pid_unused",
                "sig_UNUSED": "sig_unused",
                "PTR_errno_0800574c": "PTR_errno_0800574c"
            },
            "code": "int set_errno_to_22_08005740(int pid_unused, int sig_unused)\n{\n    *(undefined4 *)PTR_errno_0800574c = 22;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005740",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "set_errno_to_22_08005740"
        },
        "FUN_08006158": {
            "renaming": {
                "FUN_08006158": "calculate_result_08006158",
                "param_1": "flag",
                "param_2": "input_num",
                "DAT_08006170": "some_data"
            },
            "code": "longlong calculate_result_08006158(undefined4 flag, uint input_num)\n{\n  if (DAT_08006170 != 0) {\n    return CONCAT44(flag,2);\n  }\n  return (ulonglong)input_num << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006158",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "calculate_result_08006158"
        },
        "FUN_08006d8c": {
            "renaming": {
                "FUN_08006d8c": "process_data_08006d8c",
                "param_1": "data",
                "param_2": "callback",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "callback_result",
                "iVar2": "callback_param",
                "piVar3": "current_data",
                "iVar4": "current_ptr",
                "uVar5": "result",
                "iVar6": "inner_loop_count"
            },
            "code": "uint process_data_08006d8c(int data, code *callback, undefined4 arg1, undefined4 arg2)\n{\n  uint result = 0;\n  int *current_data = (int *)(data + 0x48);\n  int inner_loop_count;\n  int current_ptr;\n  while (current_data != (int *)0x0) {\n    current_ptr = current_data[2];\n    inner_loop_count = current_data[1];\n    while (inner_loop_count = inner_loop_count - 1, -1 < inner_loop_count) {\n      if ((1 < *(ushort *)(current_ptr + 0xc)) && ((iVar2 = *(short *)(current_ptr + 0xe) + 1, iVar2 != 0))) {\n        uint callback_result = (*callback)(data, current_ptr, arg1, iVar2, arg2);\n        result = result | callback_result;\n      }\n      current_ptr = current_ptr + 0x68;\n    }\n    current_data = (int *)*current_data;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8c",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_08006d8c"
        },
        "FUN_08004f2c": {
            "renaming": {
                "FUN_08004f2c": "handle_i2c_event_interrupt_08004f2c",
                "PTR_i2c_handles_08004f38": "i2c_handles_ptr",
                "DAT_08004f3c": "not_renamed",
                "*(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4)": "i2c_handle_ptr"
            },
            "code": "void handle_i2c_event_interrupt_08004f2c(I2C_HandleTypeDef* *(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4))\n{\n  HAL_I2C_EV_IRQHandler(*(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f38 + 4));\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f2c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_event_interrupt_08004f2c"
        },
        "FUN_08003688": {
            "renaming": {
                "FUN_08003688": "FUNC_08003688"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nHAL_StatusTypeDef_conflict FUNC_08003688(RCC_OscInitTypeDef_conflict *RCC_OscInitStruct)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  HAL_StatusTypeDef_conflict HVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  bool bVar6;\n  uint32_t tmpreg;\n  \n  puVar1 = DAT_08003948;\n  if ((RCC_OscInitStruct->OscillatorType & 1) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 4) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) != 0)))) {\n      if (((*DAT_08003948 & 0x20000) != 0) && (RCC_OscInitStruct->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      uVar5 = RCC_OscInitStruct->HSEState;\n      if (uVar5 == 0x10000) {\n        *DAT_08003948 = *DAT_08003948 | 0x10000;\n      }\n      else if (uVar5 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar5 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08003948 = *DAT_08003948 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (RCC_OscInitStruct->HSEState == 0) {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) != 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        uVar5 = HAL_GetTick();\n        while ((*DAT_08003948 & 0x20000) == 0) {\n          uVar4 = HAL_GetTick();\n          if (100 < uVar4 - uVar5) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 2) != 0) {\n    if (((DAT_08003948[1] & 0xc) == 0) ||\n       (((DAT_08003948[1] & 0xc) == 8 && ((DAT_08003948[1] & 0x10000) == 0)))) {\n      if (((*DAT_08003948 & 2) != 0) && (RCC_OscInitStruct->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n    else if (RCC_OscInitStruct->HSIState == 0) {\n      *DAT_0800394c = 0;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_0800394c = 1;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003948 & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      *DAT_08003948 = *DAT_08003948 & 0xffffff07 | RCC_OscInitStruct->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 8) != 0) {\n    if (RCC_OscInitStruct->LSIState == 0) {\n      *DAT_08003950 = 0;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      *DAT_08003950 = 1;\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[9] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (2 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_OscInitStruct->OscillatorType & 4) != 0) {\n    bVar6 = (DAT_08003948[7] & 0x10000000) == 0;\n    if (bVar6) {\n      DAT_08003948[7] = DAT_08003948[7] | 0x10000000;\n    }\n    if ((*DAT_08003954 & 0x100) == 0) {\n      *DAT_08003954 = *DAT_08003954 | 0x100;\n      uVar5 = HAL_GetTick();\n      while ((*DAT_08003954 & 0x100) == 0) {\n        uVar4 = HAL_GetTick();\n        if (100 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    puVar2 = DAT_08003a60;\n    puVar1 = DAT_08003948;\n    uVar5 = RCC_OscInitStruct->LSEState;\n    if (uVar5 == 1) {\n      DAT_08003948[8] = DAT_08003948[8] | 1;\n    }\n    else if (uVar5 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar5 == 5) {\n      DAT_08003a60[8] = DAT_08003a60[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08003948[8] = DAT_08003948[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (RCC_OscInitStruct->LSEState == 0) {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003a60[8] & 2) != 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      uVar5 = HAL_GetTick();\n      while ((DAT_08003948[8] & 2) == 0) {\n        uVar4 = HAL_GetTick();\n        if (5000 < uVar4 - uVar5) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (bVar6) {\n      DAT_08003a60[7] = DAT_08003a60[7] & 0xefffffff;\n    }\n  }\n  uVar5 = (RCC_OscInitStruct->PLL).PLLState;\n  if (uVar5 == 0) {\n    HVar3 = HAL_OK;\n  }\n  else if ((DAT_08003a60[1] & 0xc) == 8) {\n    HVar3 = HAL_ERROR;\n  }\n  else if (uVar5 == 2) {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        if ((RCC_OscInitStruct->PLL).PLLSource == 0x10000) {\n          DAT_08003a60[1] = DAT_08003a60[1] & 0xfffdffff | RCC_OscInitStruct->HSEPredivValue;\n        }\n        DAT_08003a60[1] =\n             DAT_08003a60[1] & 0xffc2ffff |\n             (RCC_OscInitStruct->PLL).PLLSource | (RCC_OscInitStruct->PLL).PLLMUL;\n        *DAT_08003a64 = 1;\n        uVar5 = HAL_GetTick();\n        do {\n          if ((*DAT_08003a60 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          uVar4 = HAL_GetTick();\n        } while (uVar4 - uVar5 < 3);\n        return HAL_TIMEOUT;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  else {\n    *DAT_08003a64 = 0;\n    uVar5 = HAL_GetTick();\n    do {\n      if ((*DAT_08003a60 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      uVar4 = HAL_GetTick();\n    } while (uVar4 - uVar5 < 3);\n    HVar3 = HAL_TIMEOUT;\n  }\n  return HVar3;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003688",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "FUNC_08003688"
        },
        "FUN_08004ec4": {
            "renaming": {
                "FUN_08004ec4": "handle_i2c_slave_receive_08004ec4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "uVar2": "num_bytes_received"
            },
            "code": "void handle_i2c_slave_receive_08004ec4(I2C_HandleTypeDef *i2c_handle) {\n  i2c_t *i2c_obj = get_i2c_obj(i2c_handle);\n  if (i2c_obj->i2c_onSlaveReceive != NULL && i2c_obj->slaveMode == 1) {\n    uint8_t num_bytes_received = 0x20 - *(uint8_t *)&i2c_obj->handle.XferSize & 0xff;\n    if (num_bytes_received != 0) {\n      (*i2c_obj->i2c_onSlaveReceive)(i2c_obj->i2cTxRxBuffer, num_bytes_received);\n    }\n  }\n  HAL_I2C_EnableListen_IT(i2c_handle);\n  return;\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ec4",
            "calling": [
                "I2C_Slave_AF",
                "I2C_Slave_STOPF",
                "I2C_ITError"
            ],
            "imported": false,
            "current_name": "handle_i2c_slave_receive_08004ec4"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "string_length_08000178",
                "__s": "str",
                "pcVar3": "current_ptr",
                "pcVar2": "next_ptr",
                "cVar1": "current_char"
            },
            "code": "size_t string_length_08000178(char* str) {\n  char current_char;\n  char* current_ptr = str;\n  while (current_char = *current_ptr++) {\n  }\n  return (size_t)(current_ptr - 1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "printNumber",
                "print"
            ],
            "imported": false,
            "current_name": "string_length_08000178"
        },
        "FUN_08004418": {
            "renaming": {
                "FUN_08004418": "do_nothing_08004418"
            },
            "code": "\nvoid do_nothing_08004418(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004418",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004418"
        },
        "FUN_08006c88": {
            "renaming": {
                "FUN_08006c88": "allocate_memory_for_struct_08006c88",
                "param_1": "size_of_struct",
                "param_2": "num_structs",
                "puVar1": "struct_ptr",
                "iVar2": "total_size"
            },
            "code": "undefined4 * allocate_memory_for_struct_08006c88(int size_of_struct, int num_structs) {\n  undefined4 *struct_ptr;\n  int total_size = (num_structs - 1) * 0x68;\n  struct_ptr = (undefined4 *)_malloc_r(size_of_struct, total_size + 0x74);\n  if (struct_ptr != (undefined4 *)0x0) {\n    *struct_ptr = 0;\n    struct_ptr[1] = num_structs;\n    struct_ptr[2] = struct_ptr + 3;\n    memset(struct_ptr + 3, 0, total_size + 0x68);\n  }\n  return struct_ptr;\n}",
            "called": [
                "memset",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c88",
            "calling": [
                "__sfp"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08006c88"
        },
        "FUN_080060e4": {
            "renaming": {
                "FUN_080060e4": "handle_gpio_interrupt_080060e4",
                "GPIO_Pin": "pin_id",
                "bVar1": "pin_index",
                "PTR_gpio_irq_conf_08006100": "gpio_irq_conf_ptr",
                "function_void___": "std::function<void()>"
            },
            "code": "void handle_gpio_interrupt_080060e4(uint16_t pin_id)\n{\n    uint16_t PTR_gpio_irq_conf_08006100 = PTR_gpio_irq_conf_08006100 + pin_id * 0x14;\n    if (*(int *)(PTR_gpio_irq_conf_08006100 + 0xc) != 0) {\n        std::function<void()> callback = (std::function<void()> *)(PTR_gpio_irq_conf_08006100 + 4);\n        callback();\n    }\n    return;\n}",
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060e4",
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_gpio_interrupt_080060e4"
        },
        "FUN_0800258c": {
            "renaming": {
                "FUN_0800258c": "check_dma_state_0800258c",
                "*hdma": "*dma_handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "pDVar2": "dma_channel",
                "uVar1": "dma_channel_type"
            },
            "code": "HAL_StatusTypeDef check_dma_state_0800258c(DMA_HandleTypeDef *dma_handle)\n{\n  uint32_t dma_channel_type;\n  DMA_Channel_TypeDef *dma_channel;\n  if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n    dma_handle->ErrorCode = 4;\n    return HAL_ERROR;\n  }\n  dma_handle->Instance->CCR &= ~DMA_CCR_EN;\n  dma_handle->Instance->CCR &= ~DMA_CCR_DIR;\n  dma_channel = dma_handle->Instance;\n  if (dma_channel == PTR_DAT_0800261c) {\n    dma_channel_type = 1;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&PTR_DAT_0800261c[1].CNDTR) {\n    dma_channel_type = 0x10;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&PTR_DAT_0800261c[2].CPAR) {\n    dma_channel_type = 0x100;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&PTR_DAT_0800261c[3].CMAR) {\n    dma_channel_type = 0x1000;\n  }\n  else if (dma_channel == PTR_DAT_0800261c + 5) {\n    dma_channel_type = 0x10000;\n  }\n  else if (dma_channel == (DMA_Channel_TypeDef *)&PTR_DAT_0800261c[6].CNDTR) {\n    dma_channel_type = 0x100000;\n  }\n  else {\n    dma_channel_type = 0x1000000;\n  }\n  *(uint32_t *)(PTR_DAT_08002620 + 4) = dma_channel_type;\n  dma_handle->State = HAL_DMA_STATE_READY;\n  dma_handle->Lock = HAL_UNLOCKED;\n  if (dma_handle->XferAbortCallback != (void (*)(DMA_HandleTypeDef *))0x0) {\n    (*dma_handle->XferAbortCallback)(dma_handle);\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800258c",
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_dma_state_0800258c"
        },
        "FUN_08004e20": {
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20",
                "PTR_timer_handles_08004e30": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "HAL_TIM_IRQHandler": "HandleTimerInterrupt"
            },
            "code": "void handle_timer_interrupt_08004e20(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)PTR_timer_handles_08004e30_08004e30;\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e20",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e20"
        },
        "FUN_0800573c": {
            "renaming": {
                "FUN_0800573c": "wait_for_status_change_0800573c",
                "status_UNUSED": "unused_status"
            },
            "code": "void wait_for_status_change_0800573c(int unused_status) {\n  while(true) {\n    // do nothing, just wait for status change\n  }\n}",
            "called": [
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800573c",
            "calling": [
                "_exit",
                "abort"
            ],
            "imported": false,
            "current_name": "wait_for_status_change_0800573c"
        },
        "FUN_080032b4": {
            "renaming": {
                "FUN_080032b4": "I2C_handleTransfer_080032b4",
                "*hi2c": "*handle",
                "HVar1": "state",
                "pIVar2": "instance",
                "puVar3": "bufferPointer"
            },
            "code": "HAL_StatusTypeDef_conflict I2C_handleTransfer_080032b4(I2C_HandleTypeDef *handle)\n{\n  HAL_I2C_StateTypeDef state = handle->State;\n  I2C_TypeDef *instance = handle->Instance;\n  uint8_t *bufferPointer;\n  uint32_t tmpreg;\n  \n  instance->CR2 &= 0xfffff8ff;\n  instance->CR1 |= 1;\n  instance->CR1 &= 0xfffffbff;\n  \n  if ((instance->CR2 & 0x800) != 0) {\n    if ((state == HAL_I2C_STATE_BUSY_RX) || (state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      handle->XferCount = (uint16_t)handle->hdmarx->Instance->CNDTR;\n    }\n    else {\n      handle->XferCount = (uint16_t)handle->hdmatx->Instance->CNDTR;\n    }\n  }\n  \n  if (handle->XferCount != 0) {\n    if ((instance->SR1 & 4) != 0) {\n      bufferPointer = handle->pBuffPtr;\n      handle->pBuffPtr = bufferPointer + 1;\n      *bufferPointer = (uint8_t)instance->DR;\n      handle->XferCount--;\n    }\n    \n    if ((instance->SR1 & 0x40) != 0) {\n      bufferPointer = handle->pBuffPtr;\n      handle->pBuffPtr = bufferPointer + 1;\n      *bufferPointer = (uint8_t)instance->DR;\n      handle->XferCount--;\n    }\n    \n    handle->ErrorCode |= 4;\n  }\n  \n  if (handle->ErrorCode == 0) {\n    if (((state == HAL_I2C_STATE_LISTEN) || (state == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      handle->XferOptions = DAT_080033b4;\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(handle);\n    }\n    else if ((handle->PreviousState == 0x22) || (state == HAL_I2C_STATE_BUSY_RX)) {\n      handle->PreviousState = 0;\n      handle->State = HAL_I2C_STATE_READY;\n      handle->Mode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(handle);\n    }\n  }\n  else {\n    I2C_ITError(handle);\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032b4",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "I2C_handleTransfer_080032b4"
        },
        "FUN_08004d06": {
            "renaming": {
                "FUN_08004d06": "find_non_null_pointer_08004d06",
                "a": "ptr1",
                "b": "ptr2"
            },
            "code": "void *find_non_null_pointer_08004d06(void *ptr1, void *ptr2){\n    if (ptr1 != ptr2) {\n        if (ptr1 == NULL) {\n            return ptr2;\n        }\n        if (ptr2 == NULL) {\n            return ptr1;\n        }\n        ptr1 = NULL;\n    }\n    return ptr1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d06",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_non_null_pointer_08004d06"
        },
        "FUN_080056d8": {
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "incr": "size",
                "pcVar1": "current_heap_end",
                "pcVar2": "new_heap_end"
            },
            "code": "caddr_t allocate_memory_080056d8(int size){\n    caddr_t current_heap_end = *(caddr_t *)PTR_heap_end_08005708;\n    caddr_t new_heap_end = current_heap_end + size;\n    if (new_heap_end <= &stack0x00000000) {\n        *(caddr_t *)PTR_heap_end_08005708 = new_heap_end;\n        return current_heap_end;\n    }\n    *(undefined4 *)PTR_errno_08005710 = 0xc;\n    return (caddr_t)0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056d8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080056d8"
        },
        "FUN_080019f6": {
            "renaming": {
                "FUN_080019f6": "update_output_080019f6",
                "this": "pid_instance",
                "iVar1": "is_current_output_greater_than_previous_output",
                "uVar2": "output_max",
                "uVar3": "current_output",
                "uVar4": "previous_output",
                "uVar5": "output_min"
            },
            "code": "void __thiscall update_output_080019f6(PID *pid_instance) {\n  float current_output = *(float *)pid_instance->myOutput;\n  float previous_output = *(float *)((int)pid_instance->myOutput + 4);\n  pid_instance->outputSum = current_output;\n  *((float *)&pid_instance->outputSum + 1) = previous_output;\n  float current_input = *(float *)((int)pid_instance->myInput + 4);\n  pid_instance->lastInput = *(float *)pid_instance->myInput;\n  *((float *)&pid_instance->lastInput + 1) = current_input;\n  float output_max = *(float *)&pid_instance->outMax;\n  float output_min = *(float *)&pid_instance->outMin;\n  int is_current_output_greater_than_previous_output = __aeabi_fcmpgt(current_output, previous_output);\n  if (is_current_output_greater_than_previous_output == 0) {\n    int is_current_output_less_than_output_min = __aeabi_fcmplt(current_output, output_min);\n    if (is_current_output_less_than_output_min != 0) {\n      pid_instance->outputSum = output_min;\n      *((float *)&pid_instance->outputSum + 1) = *(float *)((int)&pid_instance->outMin + 4);\n    }\n    return;\n  }\n  pid_instance->outputSum = output_max;\n  *((float *)&pid_instance->outputSum + 1) = *(float *)((int)&pid_instance->outMax + 4);\n}\n",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080019f6",
            "calling": [
                "SetMode"
            ],
            "imported": false,
            "current_name": "update_output_080019f6"
        },
        "FUN_08002f9c": {
            "renaming": {
                "FUN_08002f9c": "receive_data_08002f9c",
                "*hi2c": "*i2c_handler",
                "puVar1": "buffer_pointer",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "pBuffPtr": "buffer_pointer",
                "XferCount": "transfer_count",
                "XferOptions": "transfer_options",
                "Instance": "i2c_instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "DR": "data_register",
                "State": "i2c_state",
                "HAL_I2C_STATE_BUSY_RX": "HAL_I2C_STATE_RECEIVING",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEMORY",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NOT_SET",
                "PreviousState": "previous_i2c_state"
            },
            "code": "HAL_StatusTypeDef_conflict receive_data_08002f9c(I2C_HandleTypeDef *hi2c)\n{\n  uint8_t *buffer_pointer;\n  \n  if (hi2c->State == HAL_I2C_STATE_BUSY_RX) {\n    if (hi2c->XferCount < 4) {\n      if (hi2c->XferCount - 2 < 2) {\n        if (hi2c->XferOptions == 2) {\n          hi2c->Instance->CR1 |= 0x400;\n        }\n        else {\n          hi2c->Instance->CR1 &= 0xfffffbff;\n          hi2c->Instance->CR1 |= 0x800;\n        }\n        hi2c->Instance->CR2 &= 0xfffffbff;\n      }\n      else {\n        if (hi2c->XferOptions == 2) {\n          hi2c->Instance->CR1 |= 0x400;\n        }\n        else {\n          hi2c->Instance->CR1 &= 0xfffffbff;\n        }\n        hi2c->Instance->CR2 &= 0xfffff8ff;\n        buffer_pointer = hi2c->pBuffPtr;\n        hi2c->pBuffPtr = buffer_pointer + 1;\n        *buffer_pointer = (uint8_t)hi2c->Instance->DR;\n        hi2c->XferCount = hi2c->XferCount - 1;\n        hi2c->State = HAL_I2C_STATE_READY;\n        hi2c->PreviousState = 0;\n        if (hi2c->Mode == HAL_I2C_MODE_MEM) {\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemRxCpltCallback(hi2c);\n        }\n        else {\n          hi2c->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterRxCpltCallback(hi2c);\n        }\n      }\n    }\n    else {\n      buffer_pointer = hi2c->pBuffPtr;\n      hi2c->pBuffPtr = buffer_pointer + 1;\n      *buffer_pointer = (uint8_t)hi2c->Instance->DR;\n      hi2c->XferCount = hi2c->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08002f9c"
        },
        "FUN_08005510": {
            "renaming": {
                "FUN_08005510": "setupSerialReceive_08005510",
                "obj": "serialObj",
                "callback": "serialCallback",
                "uVar2": "rxActive",
                "bVar1": "index",
                "PTR_rx_callback_0800555c": "rxCallbackPtr",
                "PTR_rx_callback_obj_08005560": "rxObjPtr",
                "PTR_uart_handlers_08005564": "uartHandlerPtr"
            },
            "code": "void setupSerialReceive_08005510(serial_t *serialObj, _func_void_serial_t_ptr *serialCallback) {\n  if (serialObj != NULL) {\n    uint8_t rxActive = serial_rx_active(serialObj);\n    if (rxActive == 0) {\n      byte index = serialObj->index;\n      _func_void_serial_t_ptr **PTR_rx_callback_0800555c = (_func_void_serial_t_ptr **) (PTR_rx_callback_0800555c + (uint) index * 4);\n      *PTR_rx_callback_0800555c = serialCallback;\n      serial_t **PTR_rx_callback_obj_08005560 = (serial_t **) (PTR_rx_callback_obj_08005560 + (uint) index * 4);\n      *PTR_rx_callback_obj_08005560 = serialObj;\n      HAL_NVIC_SetPriority(serialObj->irq, 0, 1);\n      HAL_NVIC_EnableIRQ(serialObj->irq);\n      UART_HandleTypeDef **PTR_uart_handlers_08005564 = (UART_HandleTypeDef **) (PTR_uart_handlers_08005564 + (uint) serialObj->index * 4);\n      HAL_UART_Receive_IT(*PTR_uart_handlers_08005564, &serialObj->recv, 1);\n    }\n  }\n}",
            "called": [
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005510",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setupSerialReceive_08005510"
        },
        "FUN_08002f9a": {
            "renaming": {
                "FUN_08002f9a": "do_nothing_08002f9a"
            },
            "code": "\nvoid do_nothing_08002f9a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f9a",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002f9a"
        },
        "FUN_08005750": {
            "renaming": {
                "FUN_08005750": "get_process_id_08005750"
            },
            "code": "\\_\\_pid\\_t get_process_id_08005750(void)\\n{\\n  return 1;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005750",
            "calling": [
                "_getpid_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08005750"
        },
        "FUN_08002cf2": {
            "renaming": {
                "FUN_08002cf2": "I2C_handleAddrMatch_08002cf2",
                "hi2c": "i2c_handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "AddrMatchCode": "addr_match_code",
                "OwnAddress1": "own_address_1",
                "OwnAddress2": "own_address_2"
            },
            "code": "HAL_StatusTypeDef I2C_handleAddrMatch_08002cf2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint16_t addr_match_code;\n  if ((i2c_handle->Instance->SR2 & 0x80) == 0) {\n    addr_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress1;\n  }\n  else {\n    addr_match_code = *(uint16_t *)&(i2c_handle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2c_handle, (i2c_handle->Instance->SR2 & 4) == 0, addr_match_code);\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cf2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "I2C_handleAddrMatch_08002cf2"
        },
        "FUN_08006288": {
            "renaming": {
                "FUN_08006288": "allocate_memory_block_08006288",
                "param_1": "allocation_result",
                "param_2": "requested_size",
                "puVar1": "current_block",
                "uVar2": "new_block",
                "puVar3": "free_list",
                "iVar4": "remaining_space",
                "puVar5": "block",
                "uVar6": "remaining_size",
                "puVar7": "previous_block",
                "uVar8": "aligned_requested_size"
            },
            "code": "uint allocate_memory_block_08006288(undefined4 *allocation_result, uint requested_size)\n{\n    uint aligned_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n    if (aligned_requested_size < 0xc) {\n        aligned_requested_size = 0xc;\n    }\n    if (((int)aligned_requested_size < 0) || (aligned_requested_size < requested_size)) {\n        *allocation_result = 0xc;\n    }\n    else {\n        __malloc_lock();\n        undefined *current_block = PTR___malloc_sbrk_start_08006340;\n        uint *free_list = *(uint **)PTR___malloc_free_list_0800633c;\n        uint *previous_block = *(uint **)PTR___malloc_free_list_0800633c;\n        while (uint *block = free_list, block != (uint *)0x0) {\n            uint remaining_size = *block - aligned_requested_size;\n            if (-1 < (int)remaining_size) {\n                if (remaining_size < 0xc) {\n                    if (previous_block == block) {\n                        aligned_requested_size = previous_block[1];\n                        *(uint *)PTR___malloc_free_list_0800633c = aligned_requested_size;\n                    }\n                    else {\n                        aligned_requested_size = block[1];\n                    }\n                    if (previous_block != block) {\n                        previous_block[1] = aligned_requested_size;\n                        previous_block = block;\n                    }\n                }\n                else {\n                    *block = remaining_size;\n                    *(uint *)((int)block + remaining_size) = aligned_requested_size;\n                    previous_block = (uint *)((int)block + remaining_size);\n                }\n                goto allocation_complete;\n            }\n            previous_block = block;\n            free_list = (uint *)block[1];\n        }\n        if (*(int *)PTR___malloc_sbrk_start_08006340 == 0) {\n            uint new_block = _sbrk_r(allocation_result);\n            *(undefined4 *)current_block = new_block;\n        }\n        uint *allocated_block = (uint *)_sbrk_r(allocation_result,aligned_requested_size);\n        if ((allocated_block != (uint *)0xffffffff) &&\n           ((previous_block = (uint *)((int)allocated_block + 3U & 0xfffffffc), allocated_block == previous_block ||\n            (_sbrk_r(allocation_result,(int)previous_block - (int)allocated_block) != -1)))) {\n            *previous_block = aligned_requested_size;\n            allocation_complete:\n            __malloc_unlock(allocation_result);\n            uint aligned_block_size = (int)previous_block + 0xbU & 0xfffffff8;\n            int remaining_space = aligned_block_size - (int)(previous_block + 1);\n            if (remaining_space != 0) {\n                *(int *)((int)previous_block + remaining_space) = -remaining_space;\n                return aligned_block_size;\n            }\n            return aligned_block_size;\n        }\n        *allocation_result = 0xc;\n        __malloc_unlock(allocation_result);\n    }\n    return 0;\n}",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006288",
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08006288"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "FUNC_08000188"
            },
            "code": "\nulonglong FUNC_08000188(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar4 = param_2 ^ 0x80000000;\n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((uVar4 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = uVar4;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((uVar4 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        uVar4 = param_4;\n      }\n      return CONCAT44(uVar4,param_1);\n    }\n    if (uVar4 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(uVar4,uVar4) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(uVar4 + 0x100000,param_1);\n    }\n    uVar4 = uVar4 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(uVar4 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar12 = uVar4;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar12 = param_4;\n    param_3 = param_1;\n    param_4 = uVar4;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar12,uVar8);\n  }\n  uVar9 = uVar12 & 0xfffff | 0x100000;\n  if ((uVar12 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar4 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar4 = uVar4 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar5 = uVar4 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar5;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar4 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar11 = uVar4 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar4 = (int)uVar4 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar4;\n    uVar9 = uVar9 + ((int)uVar4 >> 0x1f) + (uint)CARRY4(uVar8,uVar4);\n  }\n  uVar4 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | uVar4,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar3 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar3 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar3 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar3 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar3 = uVar3 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | uVar4,uVar3);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar3 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(uVar4 | uVar7 >> (uVar10 & 0xff),\n                    uVar3 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08000188"
        },
        "FUN_08002004": {
            "renaming": {
                "FUN_08002004": "enable_adc_08002004",
                "*hadc": "*adc",
                "HVar1": "status",
                "pAVar2": "instance"
            },
            "code": "HAL_StatusTypeDef_conflict enable_adc_08002004(ADC_HandleTypeDef *adc)\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *instance;\n  \n  if (adc->Lock != HAL_LOCKED) {\n    adc->Lock = HAL_LOCKED;\n    status = ADC_Enable(adc);\n    if (status == HAL_OK) {\n      adc->State = (adc->State & 0xfffffcfe) | 0x100;\n      instance = adc->Instance;\n      if ((instance == PTR_080020e8) && ((PTR_080020e8[-0xd].JOFR1 & 0xf0000) != 0)) {\n        adc->State |= 0x100000;\n        if ((*(uint *)(PTR_080020ec + 4) & 0x400) != 0) {\n          adc->State = (adc->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        adc->State &= 0xffefffff;\n        if ((instance->CR1 & 0x400) != 0) {\n          adc->State = (adc->State & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((adc->State & 0x1000) == 0) {\n        adc->ErrorCode = 0;\n      }\n      else {\n        adc->ErrorCode &= 0xfffffff9;\n      }\n      adc->Lock = HAL_UNLOCKED;\n      instance->SR = 0xfffffffd;\n      instance = adc->Instance;\n      if (((instance->CR2 & 0xe0000) == 0xe0000) &&\n         ((instance != PTR_080020e8 || ((PTR_080020e8[-0xd].JOFR1 & 0xf0000) == 0)))) {\n        instance->CR2 |= 0x500000;\n      }\n      else {\n        instance->CR2 |= 0x100000;\n      }\n    }\n    else {\n      adc->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}",
            "called": [
                "ADC_Enable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002004",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "enable_adc_08002004"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "handle_i2c_error_interrupt_08004f3c",
                "PTR_i2c_handles_08004f48": "PTR_i2c_handles",
                "i2c_handle": "i2c_handle"
            },
            "code": "void handle_i2c_error_interrupt_08004f3c(void)\n{\n  I2C_HandleTypeDef *i2c_handle = *(I2C_HandleTypeDef **)(PTR_i2c_handles_08004f48_08004f48 + 4);\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_error_interrupt_08004f3c"
        },
        "FUN_08005754": {
            "renaming": {
                "FUN_08005754": "get_adc_value_from_pin_08005754",
                "ulPin": "pin_number",
                "bVar1": "is_valid_pin",
                "pin": "pin_name",
                "uVar2": "adc_value",
                "uVar3": "adc_value",
                "uVar4": "resolution_bits"
            },
            "code": "uint32_t get_adc_value_from_pin_08005754(uint32_t pin_number) {\n  bool is_valid_pin = false;\n  PinName_conflict pin_name;\n  uint16_t adc_value;\n  uint resolution_bits;\n\n  if (pin_number < 14) {\n    is_valid_pin = (pin_number + 46) < 60;\n  }\n  else {\n    is_valid_pin = pin_number < 60;\n  }\n\n  if (is_valid_pin) {\n    if (pin_number < 14) {\n      pin_number += 46;\n    }\n    pin_name = PTR_digitalPin_080057ac[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n\n  if (pin_name == NC) {\n    adc_value = 0;\n  }\n  else {\n    adc_value = adc_read_value(pin_name);\n    resolution_bits = *(uint *)PTR__readResolution_080057b0;\n    if (resolution_bits != 12) {\n      if (resolution_bits < 12) {\n        return (uint)(adc_value >> (12 - resolution_bits & 0xff));\n      }\n      return adc_value << (resolution_bits - 12 & 0xff);\n    }\n  }\n  return adc_value;\n}",
            "called": [
                "adc_read_value"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005754",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "get_adc_value_from_pin_08005754"
        },
        "FUN_08005fc8": {
            "renaming": {
                "FUN_08005fc8": "initialize_gpio_irq_configuration_08005fc8",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "PTR_gpio_irq_conf_08006068": "gpio_irq_conf_ptr"
            },
            "code": "void initialize_gpio_irq_configuration_08005fc8(int should_initialize, int priority){\n  undefined *PTR_gpio_irq_conf_08006068;\n  \n  PTR_gpio_irq_conf_08006068 = PTR_gpio_irq_conf_08006068;\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    *PTR_gpio_irq_conf_08006068 = 6;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0xc) = 0;\n    PTR_gpio_irq_conf_08006068[0x14] = 7;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x20) = 0;\n    PTR_gpio_irq_conf_08006068[0x28] = 8;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x34) = 0;\n    PTR_gpio_irq_conf_08006068[0x3c] = 9;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x48) = 0;\n    PTR_gpio_irq_conf_08006068[0x50] = 10;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x5c) = 0;\n    PTR_gpio_irq_conf_08006068[100] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x70) = 0;\n    PTR_gpio_irq_conf_08006068[0x78] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x84) = 0;\n    PTR_gpio_irq_conf_08006068[0x8c] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x98) = 0;\n    PTR_gpio_irq_conf_08006068[0xa0] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0xac) = 0;\n    PTR_gpio_irq_conf_08006068[0xb4] = 0x17;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0xc0) = 0;\n    PTR_gpio_irq_conf_08006068[200] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0xd4) = 0;\n    PTR_gpio_irq_conf_08006068[0xdc] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0xe8) = 0;\n    PTR_gpio_irq_conf_08006068[0xf0] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0xfc) = 0;\n    PTR_gpio_irq_conf_08006068[0x104] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x110) = 0;\n    PTR_gpio_irq_conf_08006068[0x118] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x124) = 0;\n    PTR_gpio_irq_conf_08006068[300] = 0x28;\n    *(undefined4 *)(PTR_gpio_irq_conf_08006068 + 0x138) = 0;\n    __aeabi_atexit(0,DAT_08006070,PTR___dso_handle_0800606c);\n  }\n  return;\n}",
            "called": [
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fc8",
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "imported": false,
            "current_name": "initialize_gpio_irq_configuration_08005fc8"
        },
        "FUN_08002ab8": {
            "renaming": {
                "FUN_08002ab8": "write_byte_08002ab8",
                "*hi2c": "*i2c_handler",
                "pbVar1": "data_ptr",
                "hi2c->pBuffPtr": "i2c_handler->pBuffPtr",
                "hi2c->Instance->DR": "i2c_handler->Instance->DR",
                "hi2c->XferCount": "i2c_handler->XferCount"
            },
            "code": "HAL_StatusTypeDef write_byte_08002ab8(I2C_HandleTypeDef *i2c_handler)\n{\n  uint8_t *data_ptr;\n  if (i2c_handler->XferCount != 0) {\n    data_ptr = i2c_handler->pBuffPtr;\n    i2c_handler->pBuffPtr = data_ptr + 1;\n    i2c_handler->Instance->DR = (uint8_t)*data_ptr;\n    i2c_handler->XferCount = i2c_handler->XferCount - 1;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ab8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "write_byte_08002ab8"
        },
        "FUN_080068f0": {
            "renaming": {
                "FUN_080068f0": "print_formatted_string_080068f0",
                "__format": "format",
                "in_r1": "arg1",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "iVar1": "impure_ptr",
                "pcVar2": "arg_list",
                "uStack_c": "stack_var1",
                "uStack_8": "unused_var1",
                "uStack_4": "unused_var2"
            },
            "code": "int print_formatted_string_080068f0(char *format, ...)\n{\n  int impure_ptr = *(int *)PTR__impure_ptr_0800691c;\n  char *arg_list = format;\n  undefined4 arg1 = in_r1;\n  undefined4 arg2 = in_r2;\n  undefined4 arg3 = in_r3;\n  undefined4 stack_var1 = arg1;\n  if ((impure_ptr != 0) && (*(int *)(impure_ptr + 0x18) == 0)) {\n    __sinit(impure_ptr);\n  }\n  int result = _vfprint_formatted_string_080068f0_r(impure_ptr, *(undefined4 *)(impure_ptr + 8), format, &stack_var1, arg_list, &stack_var1);\n  return result;\n}",
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068f0",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "print_formatted_string_080068f0"
        },
        "FUN_080066b0": {
            "renaming": {
                "FUN_080066b0": "FUNC_080066b0"
            },
            "code": "\nuint FUNC_080066b0(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  void *pvVar4;\n  int iVar5;\n  undefined *puVar6;\n  uint uVar7;\n  uint **ppuVar8;\n  uint uVar9;\n  uint uVar10;\n  undefined *puVar11;\n  undefined *__s;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  __s = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_0800686a;\n          if (bVar1 != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\nLAB_080067fa:\n          uVar7 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar7 & 0x80) == 0) && ((int)(uVar7 << 0x19) < 0)) {\n            uVar9 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar9 = *puVar3;\n          }\n          if ((int)(uVar7 << 0x1f) < 0) {\n            *param_2 = uVar7 | 0x20;\n          }\n          if (uVar9 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar7 = 0x10;\nLAB_08006790:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080066e0;\n          uVar9 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar9 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar9 & 0x40) == 0) goto LAB_08006700;\n            uVar9 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_08006700:\n            uVar9 = *puVar3;\n          }\n          if ((int)uVar9 < 0) {\n            uVar9 = -uVar9;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar7 = 10;\n          puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n        }\n        uVar10 = param_2[1];\n        param_2[2] = uVar10;\n        puVar11 = __s;\n        if ((int)uVar10 < 0) {\n          if (uVar9 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(undefined *)((int)param_2 + 0x42) = *puVar6;\n          puVar11 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar9 == 0) {\n            if (uVar10 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              uVar10 = uVar9 / uVar7;\n              puVar11 = puVar11 + -1;\n              *puVar11 = puVar6[uVar9 - uVar7 * uVar10];\n              uVar9 = uVar10;\n            } while (uVar10 != 0);\n          }\n        }\n        if (((uVar7 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar11[-1] = 0x30;\n          puVar11 = puVar11 + -1;\n        }\n        param_2[4] = (int)__s - (int)puVar11;\n        __s = puVar11;\n        goto LAB_080067d6;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08006740:\n      __s = (undefined *)((int)param_2 + 0x42);\n      uVar9 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_08006766:\n            uVar9 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar9 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar9 & 0x40) == 0) goto LAB_08006774;\n              uVar9 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_08006774:\n              uVar9 = *puVar3;\n            }\n            puVar6 = PTR_s_0123456789ABCDEF_080068ec;\n            if (bVar1 == 0x6f) {\n              uVar7 = 8;\n            }\n            else {\n              uVar7 = 10;\n            }\n            goto LAB_08006790;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_08006726:\n            puVar6 = PTR_s_0123456789abcdef_080068e8;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_08006766;\n          if (bVar1 == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08006740;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      __s = (undefined *)*puVar3;\n      pvVar4 = memchr(__s,0,param_2[1]);\n      if (pvVar4 != (void *)0x0) {\n        param_2[1] = (int)pvVar4 - (int)__s;\n      }\n      uVar9 = param_2[1];\n    }\n    param_2[4] = uVar9;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  uVar9 = *param_2;\n  ppuVar8 = (uint **)*param_5;\n  uVar7 = param_2[5];\n  if ((uVar9 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\n    if ((uVar9 & 0x40) == 0) goto LAB_08006856;\n    *(short *)puVar3 = (short)uVar7;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar8 + 1);\n    puVar3 = *ppuVar8;\nLAB_08006856:\n    *puVar3 = uVar7;\n  }\nLAB_0800686a:\n  param_2[4] = 0;\nLAB_080067d6:\n  iVar2 = _printf_common(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,__s,param_2[4]), iVar2 == -1)) {\nLAB_080067ea:\n    uVar9 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar5 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar5 == -1) goto LAB_080067ea;\n      }\n    }\n    uVar9 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar9 = local_24[0];\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080066b0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "FUNC_080066b0"
        },
        "FUN_08002c52": {
            "renaming": {
                "FUN_08002c52": "do_nothing_08002c52"
            },
            "code": "\nvoid do_nothing_08002c52(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c52",
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c52"
        },
        "FUN_0800138e": {
            "renaming": {
                "FUN_0800138e": "setControlBit_0800138e",
                "this": "lcd",
                "bVar1": "prevControlBit",
                "_FUN_0800138econtrol": "_controlBit"
            },
            "code": "void __thiscall LiquidCrystal::setControlBit_0800138e(LiquidCrystal *lcd)\n{\n  byte prevControlBit;\n  prevControlBit = lcd->_controlBit;\n  lcd->_controlBit = prevControlBit | 0b00000100;\n  send(lcd, prevControlBit | 0b00001100, '\\0');\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800138e",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "setControlBit_0800138e"
        },
        "FUN_08002c50": {
            "renaming": {
                "FUN_08002c50": "do_nothing_08002c50"
            },
            "code": "\nvoid do_nothing_08002c50(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c50",
            "calling": [
                "I2C_MasterReceive_BTF",
                "I2C_MasterReceive_RXNE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c50"
        },
        "FUN_0800598a": {
            "renaming": {
                "FUN_0800598a": "receive_serial_data_0800598a",
                "obj": "serial_conflict",
                "iVar1": "uart_status",
                "uVar2": "next_rx_head",
                "c": "received_byte"
            },
            "code": "void receive_serial_data_0800598a(serial_t_conflict *serial_conflict){\n  int uart_status;\n  ushort next_rx_head;\n  uchar received_byte;\n  \n  uart_status = uart_getc((serial_t *)serial_conflict,&received_byte);\n  if ((uart_status == 0) && (next_rx_head = serial_conflict->rx_head + 1 & 0x3f, next_rx_head != serial_conflict->rx_tail)) {\n    serial_conflict->rx_buff[serial_conflict->rx_head] = received_byte;\n    serial_conflict->rx_head = next_rx_head;\n  }\n  return;\n}",
            "called": [
                "uart_getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800598a",
            "calling": [],
            "imported": false,
            "current_name": "receive_serial_data_0800598a"
        },
        "FUN_08001c88": {
            "renaming": {
                "FUN_08001c88": "initializeSystem_08001c88",
                "DAT_08001ca8": "systemStatus",
                "HAL_NVIC_SetPriorityGrouping": "PRIORITY_GROUP_3",
                "FUN_08001c88Tick": "initializeSystemTick"
            },
            "code": "HAL_StatusTypeDef_conflict initializeSystem_08001c88(void)\n{\n  *DAT_08001ca8 = *DAT_08001ca8 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(PRIORITY_GROUP_3);\n  initializeSystem_08001c88Tick(0xf);\n  HAL_MspInit();\n  return HAL_OK;\n}",
            "called": [
                "HAL_MspInit",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c88",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initializeSystem_08001c88"
        },
        "FUN_08004e34": {
            "renaming": {
                "FUN_08004e34": "handle_timer_interrupt_08004e34",
                "PTR_timer_handles_08004e44": "PTR_timer_handles",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08004e34(void)\n{\n  TIM_HandleTypeDef *timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08004e44_08004e44 + 4);\n  if (timer_handle != NULL) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e34",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e34"
        },
        "FUN_08001a44": {
            "renaming": {
                "FUN_08001a44": "setAutoMode_08001a44",
                "this": "pid",
                "Mode": "mode",
                "bVar1": "isAuto",
                "inAuto": "inAuto"
            },
            "code": "void __thiscall PID::setAutoMode_08001a44(PID *pid, int mode)\n{\n  bool isAuto = false;\n  if (mode == 1) {\n    isAuto = true;\n    if (pid->inAuto == false) {\n      pid->initialize();\n    }\n  }\n  pid->inAuto = isAuto;\n  return;\n}",
            "called": [
                "Initialize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a44",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "setAutoMode_08001a44"
        },
        "FUN_08002c54": {
            "renaming": {
                "FUN_08002c54": "transmit_byte_08002c54",
                "hi2c": "i2c_handle",
                "HVar1": "i2c_state",
                "pbVar2": "data_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict transmit_byte_08002c54(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef i2c_state;\n  uint8_t *data_ptr;\n  i2c_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    i2c_handle->Instance->DR = (uint8_t)*data_ptr;\n    i2c_handle->XferCount = i2c_handle->XferCount - 1;\n    if ((i2c_handle->XferCount == 0) && (i2c_state == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2c_handle->Instance->CR2 = i2c_handle->Instance->CR2 & 0xfffffbff;\n      i2c_handle->PreviousState = 0x21;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c54",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "transmit_byte_08002c54"
        },
        "FUN_080043b4": {
            "renaming": {
                "FUN_080043b4": "UART_check_flag_080043b4",
                "*huart": "*uart_handle",
                "Flag": "flag",
                "Status": "status",
                "Tickstart": "start_time",
                "Timeout": "timeout",
                "uVar1": "current_time"
            },
            "code": "HAL_StatusTypeDef UART_check_flag_080043b4(UART_HandleTypeDef *uart_handle, uint32_t flag, FlagStatus status, uint32_t start_time, uint32_t timeout) {\n  uint32_t current_time;\n  do {\n    bool flag_status = ((flag & ~uart_handle->Instance->SR) == 0);\n    if (flag_status != (bool)status) {\n      return HAL_OK;\n    }\n    current_time = HAL_GetTick();\n  } while ((timeout == 0xffffffff) || ((timeout != 0) && (current_time - start_time <= timeout)));\n  uart_handle->Instance->CR1 &= 0xfffffe5f;\n  uart_handle->Instance->CR3 &= 0xfffffffe;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043b4",
            "calling": [
                "HAL_UART_Transmit"
            ],
            "imported": false,
            "current_name": "UART_check_flag_080043b4"
        },
        "FUN_0800441a": {
            "renaming": {
                "FUN_0800441a": "initialize_UART_0800441a",
                "*huart": "*uart_handle",
                "HAL_UART_StateTypeDef": "HAL_StatusTypeDef",
                "gState": "global_state",
                "Lock": "lock",
                "HAL_UART_MspInit": "initialize_UART_Msp",
                "Instance": "uart_instance",
                "CR1": "control_register_1",
                "CR2": "control_register_2",
                "CR3": "control_register_3",
                "ErrorCode": "error_code",
                "RxState": "receive_state"
            },
            "code": "HAL_StatusTypeDef initialize_UART_0800441a(UART_HandleTypeDef *huart)\n{\n  if (huart != NULL) {\n    if (huart->gState == HAL_UART_STATE_RESET) {\n      huart->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(huart);\n    }\n    huart->gState = HAL_UART_STATE_BUSY;\n    huart->Instance->CR1 &= ~(1 << 13);\n    UART_SetConfig(huart);\n    huart->Instance->CR2 &= ~(1 << 11);\n    huart->Instance->CR3 &= ~(1 << 2);\n    huart->Instance->CR1 |= (1 << 13);\n    huart->ErrorCode = 0;\n    huart->gState = HAL_UART_STATE_READY;\n    huart->RxState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800441a",
            "calling": [
                "uart_init"
            ],
            "imported": false,
            "current_name": "initialize_UART_0800441a"
        },
        "FUN_08004d18": {
            "renaming": {
                "FUN_08004d18": "execute_RTC_user_callback_08004d18",
                "hrtc": "rtc_handler",
                "PTR_RTCUserCallback_08004d28": "callback_ptr",
                "PTR_callbackUserData_08004d2c": "callback_user_data"
            },
            "code": "void execute_RTC_user_callback_08004d18(RTC_HandleTypeDef* rtc_handler) {\n    code** PTR_RTCUserCallback_08004d28 = *(code***)PTR_RTCUserCallback_08004d28;\n    if (*PTR_RTCUserCallback_08004d28 != NULL) {\n        (*PTR_RTCUserCallback_08004d28)(*(undefined4*)PTR_callbackUserData_08004d2c);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d18",
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "imported": false,
            "current_name": "execute_RTC_user_callback_08004d18"
        },
        "FUN_080006d4": {
            "renaming": {
                "FUN_080006d4": "calculate_result_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "condition_1",
                "bVar4": "condition_2"
            },
            "code": "ulonglong calculate_result_080006d4(uint input_1, uint input_2, uint input_3, uint input_4) {\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  bool condition_1;\n  bool condition_2;\n  bool condition_3;\n  temp_1 = input_4 >> 0x14;\n  if (input_2 != input_4 && temp_1 != input_4) {\n    condition_1 = (input_1 | input_2 << 1) == 0;\n    if (!condition_1) {\n      condition_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (condition_1) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (input_2 == 0) {\n      temp_3 = input_2 & 0x80000000;\n      do {\n        temp_2 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_2 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_3;\n      if (temp_1 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_1 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_1 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  condition_1 = (input_1 | input_2 << 1) == 0;\n  if (condition_1) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!condition_1) {\n    condition_2 = (input_3 | input_4 << 1) == 0;\n  }\n  temp_3 = input_2;\n  if (((!condition_2) && ((input_2 != input_4 || ((input_1 | input_2 << 0xc) == 0)))) && ((temp_1 != input_4 || (input_1 = input_3, temp_3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_3,input_1) | 0x7ff8000000000000;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006d4",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006d4"
        },
        "FUN_08000190": {
            "renaming": {
                "FUN_08000190": "FUNC_08000190"
            },
            "code": "\nulonglong FUNC_08000190(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar6 = param_4 ^ 0x80000000;\n  uVar9 = param_2 << 1;\n  param_4 = param_4 << 1;\n  bVar13 = ((param_2 ^ uVar6) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar9 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (param_4 | param_3) == 0;\n  }\n  iVar8 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar8 == -1;\n  }\n  iVar1 = (int)param_4 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar8 == -1 || iVar1 == -1) {\n      uVar9 = uVar6;\n      uVar11 = param_3;\n      if (iVar8 == -1) {\n        uVar9 = param_2;\n        uVar11 = param_1;\n      }\n      if (iVar8 != -1 || iVar1 != -1) {\n        param_3 = uVar11;\n        uVar6 = uVar9;\n      }\n      bVar14 = (uVar11 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | uVar6 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == uVar6;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((param_2 ^ uVar6) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar9 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = uVar6;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != uVar6) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar6 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar6 = uVar6 | 0x80000000;\n      }\n      return CONCAT44(uVar6,param_1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  param_4 = param_4 >> 0x15;\n  uVar11 = param_4 - uVar9;\n  bVar14 = uVar11 != 0;\n  if (param_4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = param_1;\n  uVar7 = param_2;\n  if (bVar14 && uVar9 <= param_4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = param_3;\n    uVar7 = uVar6;\n    param_3 = param_1;\n    uVar6 = param_2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(uVar7,uVar10);\n  }\n  uVar4 = uVar7 & 0xfffff | 0x100000;\n  if ((uVar7 & 0x80000000) != 0) {\n    bVar14 = uVar10 != 0;\n    uVar10 = -uVar10;\n    uVar4 = -uVar4 - (uint)bVar14;\n  }\n  uVar7 = uVar6 & 0xfffff | 0x100000;\n  if ((uVar6 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar7 = -uVar7 - (uint)bVar14;\n  }\n  if (uVar9 == uVar11) {\n    uVar7 = uVar7 ^ 0x100000;\n    if (uVar9 == 0) {\n      uVar4 = uVar4 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  uVar6 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = param_3 << (uVar6 & 0xff);\n    param_3 = param_3 >> (uVar11 & 0xff);\n    uVar3 = uVar10 + param_3;\n    uVar5 = uVar7 << (uVar6 & 0xff);\n    uVar6 = uVar3 + uVar5;\n    uVar4 = uVar4 + CARRY4(uVar10,param_3) + ((int)uVar7 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar5);\n  }\n  else {\n    uVar12 = uVar7 << (-uVar11 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    uVar7 = (int)uVar7 >> (uVar11 - 0x20 & 0xff);\n    uVar6 = uVar10 + uVar7;\n    uVar4 = uVar4 + ((int)uVar7 >> 0x1f) + (uint)CARRY4(uVar10,uVar7);\n  }\n  param_2 = uVar4 & 0x80000000;\n  uVar11 = uVar4;\n  if ((int)uVar4 < 0) {\n    bVar14 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -uVar6;\n    uVar6 = -(uint)!bVar14 - uVar6;\n    uVar11 = -(uint)(bVar14 <= uVar11) - uVar4;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      bVar2 = (byte)uVar6;\n      uVar6 = (uint)(uVar10 != 0) << 0x1f | uVar6 >> 1;\n      uVar12 = (uint)(bVar2 & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      bVar14 = (uVar6 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(uVar6,(uint)bVar14) | param_2,\n                    uVar6 + bVar14);\n  }\n  bVar13 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = uVar6 * 2;\n  bVar14 = CARRY4(uVar6,uVar6);\n  uVar6 = uVar6 * 2 + (uint)bVar13;\n  uVar11 = uVar11 * 2 + (uint)(bVar14 || CARRY4(uVar10,(uint)bVar13));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_080002a0;\n  uVar7 = uVar6;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    uVar7 = 0;\n    uVar9 = uVar6;\n  }\n  iVar8 = count_leading_zeroes(uVar9);\n  if (uVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  uVar11 = iVar8 - 0xb;\n  bVar15 = SBORROW4(uVar11,0x20);\n  uVar6 = iVar8 - 0x2b;\n  bVar14 = (int)uVar6 < 0;\n  bVar13 = uVar6 == 0;\n  if ((int)uVar11 < 0x20) {\n    bVar15 = SCARRY4(uVar6,0xc);\n    iVar8 = iVar8 + -0x1f;\n    bVar14 = iVar8 < 0;\n    bVar13 = iVar8 == 0;\n    uVar6 = uVar11;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar7 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - iVar8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar12 = 0x20 - uVar6;\n  }\n  uVar9 = uVar9 << (uVar6 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar9 = uVar9 | uVar7 >> (uVar12 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | param_2,uVar7);\n  }\n  uVar6 = ~(uVar10 - uVar11);\n  if ((int)uVar6 < 0x1f) {\n    iVar8 = uVar6 - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar6 - 0x1f,0xc)) {\n      return CONCAT44(uVar4,uVar7 >> (0x20 - (0xcU - iVar8) & 0xff) | uVar9 << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar6 = uVar6 + 1;\n    return CONCAT44(param_2 | uVar9 >> (uVar6 & 0xff),\n                    uVar7 >> (uVar6 & 0xff) | uVar9 << (0x20 - uVar6 & 0xff));\n  }\n  return CONCAT44(uVar4,uVar9 >> (uVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000190",
            "calling": [
                "SetControllerDirection",
                "Compute",
                "printFloat",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_08000190"
        },
        "FUN_08006174": {
            "renaming": {
                "FUN_08006174": "print_formatted_string_08006174",
                "__stream": "file_stream",
                "__format": "format_string",
                "iVar1": "return_value",
                "in_r2": "arg_2",
                "in_r3": "arg_3",
                "uStack_8": "args_list",
                "uStack_4": "stack_pointer",
                "*PTR__impure_ptr_08006194": "impure_ptr"
            },
            "code": "int print_formatted_string_08006174(FILE* file_stream, char* format_string, ...) {\n    int return_value;\n    va_list args_list;\n    va_start(args_list, format_string);\n    return_value = vfprintf(file_stream, format_string, args_list);\n    va_end(args_list);\n    return return_value;\n}",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006174",
            "calling": [
                "__assert_func"
            ],
            "imported": false,
            "current_name": "print_formatted_string_08006174"
        },
        "FUN_08007028": {
            "renaming": {
                "FUN_08007028": "check_if_terminal_08007028",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "error_ptr",
                "iVar2": "is_terminal"
            },
            "code": "void check_if_terminal_08007028(int *error_code, int file_descriptor)\n{\n  undefined *error_ptr;\n  int is_terminal;\n  error_ptr = PTR_errno_08007044;\n  *(undefined4 *)PTR_errno_08007044 = 0;\n  is_terminal = _isatty(file_descriptor);\n  if ((is_terminal == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007028",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_if_terminal_08007028"
        },
        "FUN_08000194": {
            "renaming": {
                "FUN_08000194": "FUNC_08000194"
            },
            "code": "\nulonglong FUNC_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  byte bVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  bool bVar14;\n  bool bVar15;\n  \n  uVar7 = param_2 << 1;\n  uVar9 = param_4 << 1;\n  bVar13 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  bVar14 = bVar13 && param_1 == param_3;\n  if (!bVar13 || param_1 != param_3) {\n    bVar14 = (uVar7 | param_1) == 0;\n  }\n  if (!bVar14) {\n    bVar14 = (uVar9 | param_3) == 0;\n  }\n  iVar6 = (int)uVar7 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar6 == -1;\n  }\n  iVar1 = (int)uVar9 >> 0x15;\n  if (!bVar14) {\n    bVar14 = iVar1 == -1;\n  }\n  if (bVar14) {\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar9 = param_4;\n      uVar7 = param_3;\n      if (iVar6 == -1) {\n        uVar9 = param_2;\n        uVar7 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_3 = uVar7;\n        param_4 = uVar9;\n      }\n      bVar14 = (uVar7 | uVar9 << 0xc) == 0;\n      if (bVar14) {\n        bVar14 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (bVar14) {\n        bVar14 = uVar9 == param_4;\n      }\n      if (!bVar14) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar7);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((uVar7 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (uVar7 >> 0x15 == 0) {\n      bVar14 = (param_1 & 0x80000000) != 0;\n      uVar9 = param_2 * 2 + (uint)bVar14;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)bVar14)) {\n        uVar9 = uVar9 | 0x80000000;\n      }\n      return CONCAT44(uVar9,param_1 << 1);\n    }\n    if (uVar7 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  uVar7 = uVar7 >> 0x15;\n  uVar9 = uVar9 >> 0x15;\n  uVar10 = uVar9 - uVar7;\n  bVar14 = uVar10 != 0;\n  if (uVar9 < uVar7) {\n    uVar10 = -uVar10;\n  }\n  uVar8 = param_1;\n  uVar5 = param_2;\n  if (bVar14 && uVar7 <= uVar9) {\n    uVar7 = uVar7 + uVar10;\n    uVar8 = param_3;\n    uVar5 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < uVar10) {\n    return CONCAT44(uVar5,uVar8);\n  }\n  uVar9 = uVar5 & 0xfffff | 0x100000;\n  if ((uVar5 & 0x80000000) != 0) {\n    bVar14 = uVar8 != 0;\n    uVar8 = -uVar8;\n    uVar9 = -uVar9 - (uint)bVar14;\n  }\n  uVar5 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    bVar14 = param_3 != 0;\n    param_3 = -param_3;\n    uVar5 = -uVar5 - (uint)bVar14;\n  }\n  if (uVar7 == uVar10) {\n    uVar5 = uVar5 ^ 0x100000;\n    if (uVar7 == 0) {\n      uVar9 = uVar9 ^ 0x100000;\n      uVar7 = 1;\n    }\n    else {\n      uVar10 = uVar10 - 1;\n    }\n  }\n  uVar12 = -uVar10 + 0x20;\n  if ((int)uVar10 < 0x21) {\n    uVar11 = param_3 << (uVar12 & 0xff);\n    param_3 = param_3 >> (uVar10 & 0xff);\n    uVar3 = uVar8 + param_3;\n    uVar4 = uVar5 << (uVar12 & 0xff);\n    uVar12 = uVar3 + uVar4;\n    uVar9 = uVar9 + CARRY4(uVar8,param_3) + ((int)uVar5 >> (uVar10 & 0xff)) +\n            (uint)CARRY4(uVar3,uVar4);\n  }\n  else {\n    uVar11 = uVar5 << (-uVar10 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      uVar11 = uVar11 | 2;\n    }\n    uVar5 = (int)uVar5 >> (uVar10 - 0x20 & 0xff);\n    uVar12 = uVar8 + uVar5;\n    uVar9 = uVar9 + ((int)uVar5 >> 0x1f) + (uint)CARRY4(uVar8,uVar5);\n  }\n  param_2 = uVar9 & 0x80000000;\n  uVar10 = uVar9;\n  if ((int)uVar9 < 0) {\n    bVar14 = uVar11 == 0;\n    uVar11 = -uVar11;\n    uVar10 = -uVar12;\n    uVar12 = -(uint)!bVar14 - uVar12;\n    uVar10 = -(uint)(bVar14 <= uVar10) - uVar9;\n  }\n  if (0xfffff < uVar10) {\n    uVar8 = uVar7 - 1;\n    if (0x1fffff < uVar10) {\n      uVar9 = uVar10 & 1;\n      uVar10 = uVar10 >> 1;\n      bVar2 = (byte)uVar12;\n      uVar12 = (uint)(uVar9 != 0) << 0x1f | uVar12 >> 1;\n      uVar11 = (uint)(bVar2 & 1) << 0x1f | uVar11 >> 1;\n      uVar8 = uVar7;\n      if (0xffbfffff < uVar7 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bVar14 = 0x7fffffff < uVar11;\n    if (uVar11 == 0x80000000) {\n      bVar14 = (uVar12 & 1) != 0;\n    }\n    return CONCAT44(uVar10 + uVar8 * 0x100000 + (uint)CARRY4(uVar12,(uint)bVar14) | param_2,\n                    uVar12 + bVar14);\n  }\n  bVar13 = (uVar11 & 0x80000000) != 0;\n  uVar11 = uVar11 << 1;\n  uVar8 = uVar12 * 2;\n  bVar14 = CARRY4(uVar12,uVar12);\n  uVar12 = uVar12 * 2 + (uint)bVar13;\n  uVar10 = uVar10 * 2 + (uint)(bVar14 || CARRY4(uVar8,(uint)bVar13));\n  uVar8 = uVar7 - 2;\n  if ((uVar10 & 0x100000) != 0) goto LAB_080002a0;\n  uVar5 = uVar12;\n  uVar7 = uVar10;\n  if (uVar10 == 0) {\n    uVar5 = 0;\n    uVar7 = uVar12;\n  }\n  iVar6 = count_leading_zeroes(uVar7);\n  if (uVar10 == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  uVar12 = iVar6 - 0xb;\n  bVar15 = SBORROW4(uVar12,0x20);\n  uVar10 = iVar6 - 0x2b;\n  bVar14 = (int)uVar10 < 0;\n  bVar13 = uVar10 == 0;\n  if ((int)uVar12 < 0x20) {\n    bVar15 = SCARRY4(uVar10,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bVar14 = iVar6 < 0;\n    bVar13 = iVar6 == 0;\n    uVar10 = uVar12;\n    if (!bVar13 && bVar14 == bVar15) {\n      uVar5 = uVar7 << (uVar12 & 0xff);\n      uVar7 = uVar7 >> (0xcU - iVar6 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar11 = 0x20 - uVar10;\n  }\n  uVar7 = uVar7 << (uVar10 & 0xff);\n  if (bVar13 || bVar14 != bVar15) {\n    uVar7 = uVar7 | uVar5 >> (uVar11 & 0xff);\n  }\n  if (bVar13 || bVar14 != bVar15) {\n    uVar5 = uVar5 << (uVar10 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar12 <= (int)uVar8) {\n    return CONCAT44(uVar7 + (uVar8 - uVar12) * 0x100000 | param_2,uVar5);\n  }\n  uVar10 = ~(uVar8 - uVar12);\n  if ((int)uVar10 < 0x1f) {\n    iVar6 = uVar10 - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(uVar10 - 0x1f,0xc)) {\n      return CONCAT44(uVar9,uVar5 >> (0x20 - (0xcU - iVar6) & 0xff) | uVar7 << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uVar10 = uVar10 + 1;\n    return CONCAT44(param_2 | uVar7 >> (uVar10 & 0xff),\n                    uVar5 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff));\n  }\n  return CONCAT44(uVar9,uVar7 >> (uVar10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000194",
            "calling": [
                "__aeabi_drsub",
                "Compute",
                "printFloat",
                "readThermocouple",
                "loop"
            ],
            "imported": false,
            "current_name": "FUNC_08000194"
        },
        "FUN_08002494": {
            "renaming": {
                "FUN_08002494": "set_interrupt_priority_08002494",
                "IRQn": "irq",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "irq_num",
                "uVar2": "group_priority_bits",
                "uVar3": "subgroup_priority_bits"
            },
            "code": "void set_interrupt_priority_08002494(IRQn_Type_conflict irq, uint32_t preempt_priority, uint32_t sub_priority) {\n  uint32_t irq_num = (uint32_t)irq;\n  uint32_t group_priority_bits = (uint32_t)(*(int *)(DAT_080024f0 + 0xc) << 0x15) >> 0x1d;\n  uint32_t subgroup_priority_bits = 7 - group_priority_bits;\n  if (subgroup_priority_bits > 3) {\n    subgroup_priority_bits = 4;\n  }\n  if (group_priority_bits + 4 < 7) {\n    group_priority_bits = 0;\n  }\n  else {\n    group_priority_bits = group_priority_bits - 3;\n  }\n  uint32_t priority_bits = (preempt_priority & ((1 << (subgroup_priority_bits & 0xff)) - 1U)) << (group_priority_bits & 0xff) | ((1 << (group_priority_bits & 0xff)) - 1U & sub_priority);\n  if ((int)irq_num < 0) {\n    *(char *)(DAT_080024f4 + (irq_num & 0xf)) = (char)(priority_bits << 4);\n  }\n  else {\n    *(char *)(irq_num + 0xe000e400) = (char)(priority_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002494",
            "calling": [
                "SystemClock_Config",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08002494"
        },
        "FUN_08002c4e": {
            "renaming": {
                "FUN_08002c4e": "do_nothing_08002c4e"
            },
            "code": "\nvoid do_nothing_08002c4e(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c4e",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002c4e"
        },
        "FUN_08004f4c": {
            "renaming": {
                "FUN_08004f4c": "FUNC_08004f4c"
            },
            "code": "\nvoid FUNC_08004f4c(serial_t *obj)\n\n{\n  USART_TypeDef *pUVar1;\n  USART_TypeDef *pUVar2;\n  USART_TypeDef *pUVar3;\n  void *a;\n  void *b;\n  USART_TypeDef *pUVar4;\n  GPIO_TypeDef *pGVar5;\n  uint32_t uVar6;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_InitStruct;\n  \n  if (obj != (serial_t *)0x0) {\n    a = pinmap_peripheral(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n    b = pinmap_peripheral(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(PTR_s_ERROR__at_least_one_UART_pin_has_0800521c);\n    }\n    else {\n      pUVar4 = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      obj->uart = pUVar4;\n      pUVar3 = DAT_08005214;\n      pUVar2 = DAT_08005210;\n      pUVar1 = DAT_0800520c;\n      if (pUVar4 == (USART_TypeDef *)0x0) {\n        iprintf(PTR_s_ERROR__U_S_ART_pins_mismatch_08005220);\n      }\n      else {\n        if (pUVar4 == DAT_0800520c) {\n          DAT_0800520c[0x7b7].BRR = DAT_0800520c[0x7b7].BRR | 0x4000;\n          pUVar1[0x7b7].BRR = pUVar1[0x7b7].BRR & 0xffffbfff;\n          pUVar1[0x7b7].CR3 = pUVar1[0x7b7].CR3 | 0x4000;\n          obj->index = '\\0';\n          obj->irq = USART1_IRQn;\n        }\n        else if (pUVar4 == DAT_08005210) {\n          DAT_08005210[0x106e].BRR = DAT_08005210[0x106e].BRR | 0x20000;\n          pUVar2[0x106e].BRR = pUVar2[0x106e].BRR & 0xfffdffff;\n          pUVar2[0x106e].CR3 = pUVar2[0x106e].CR3 | 0x20000;\n          obj->index = '\\x01';\n          obj->irq = USART2_IRQn;\n        }\n        else if (pUVar4 == DAT_08005214) {\n          DAT_08005214[0x1049].CR3 = DAT_08005214[0x1049].CR3 | 0x40000;\n          pUVar3[0x1049].CR3 = pUVar3[0x1049].CR3 & 0xfffbffff;\n          pUVar3[0x104a].DR = pUVar3[0x104a].DR | 0x40000;\n          obj->index = '\\x02';\n          obj->irq = USART3_IRQn;\n        }\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_rx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_rx,(PinMap_conflict *)PTR_PinMap_UART_RX_08005208);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_rx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08005218 + 0x18) = *(uint *)(DAT_08005218 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08005224 + 4) = *(uint *)(DAT_08005224 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_08005380 + 4) = *(uint *)(DAT_08005380 + 4) & 0xf8ffffff | 0x4000000;\n        }\n        GPIO_InitStruct.Speed = 3;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        pGVar5 = set_GPIO_Port_Clock((uint)((int)obj->pin_tx << 0x18) >> 0x1c);\n        uVar6 = pinmap_function(obj->pin_tx,(PinMap_conflict *)PTR_PinMap_UART_TX_08005204);\n        GPIO_InitStruct.Pin = 1 << (obj->pin_tx & 0xfU) & 0xffff;\n        GPIO_InitStruct.Mode = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        GPIO_InitStruct.Pull = (uVar6 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(pGVar5,&GPIO_InitStruct);\n        *(UART_HandleTypeDef **)(PTR_uart_handlers_08005228 + (uint)obj->index * 4) = &obj->handle;\n        (obj->handle).Instance = obj->uart;\n        (obj->handle).Init.BaudRate = obj->baudrate;\n        (obj->handle).Init.WordLength = obj->databits;\n        (obj->handle).Init.StopBits = obj->stopbits;\n        (obj->handle).Init.Parity = obj->parity;\n        (obj->handle).Init.Mode = 0xc;\n        (obj->handle).Init.HwFlowCtl = 0;\n        (obj->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&obj->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_peripheral",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "HAL_UART_Init"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08004f4c",
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "FUNC_08004f4c"
        },
        "FUN_080055bc": {
            "renaming": {
                "FUN_080055bc": "find_uart_handler_index_080055bc",
                "huart": "uart_handler",
                "uVar1": "index"
            },
            "code": "uint8_t find_uart_handler_index_080055bc(UART_HandleTypeDef *uart_handler)\n{\n  uint8_t index;\n  if (uart_handler == NULL) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (index > 4) {\n        return index;\n      }\n      if (uart_handler == *(UART_HandleTypeDef **)(PTR_uart_handlers_080055dc + index * 4)) break;\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055bc",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "find_uart_handler_index_080055bc"
        },
        "FUN_08001960": {
            "renaming": {
                "FUN_08001960": "updateOutputLimits_08001960",
                "this": "pid",
                "Min": "lowerLimit",
                "Max": "upperLimit",
                "iVar1": "isLowerLimitGreaterOrEqualToUpperLimit",
                "in_r2": "outputLimit1",
                "in_r3": "outputLimit2",
                "pdVar2": "output",
                "uVar3": "outputSum1",
                "uVar4": "outputSum2",
                "uVar5": "outMax1",
                "uVar6": "outMax2"
            },
            "code": "void PID::updateOutputLimits_08001960(PID *pid, double lowerLimit, double upperLimit)\n{\n    int isLowerLimitGreaterOrEqualToUpperLimit;\n    double *output;\n    isLowerLimitGreaterOrEqualToUpperLimit = __aeabi_dcmpge(lowerLimit, upperLimit);\n    if (isLowerLimitGreaterOrEqualToUpperLimit == 0) {\n        pid->outMin = lowerLimit;\n        pid->outMax = upperLimit;\n        if (pid->inAuto != false) {\n            output = pid->myOutput;\n            if (__aeabi_dcmplt(lowerLimit, upperLimit, output[0], output[1]) == 0) {\n                if (__aeabi_dcmpgt(lowerLimit, upperLimit, output[0], output[1]) != 0) {\n                    output[0] = lowerLimit;\n                    output[1] = lowerLimit;\n                }\n            }\n            else {\n                output[0] = lowerLimit;\n                output[1] = lowerLimit;\n            }\n            if (__aeabi_dcmpgt(pid->outputSum, pid->outMax, pid->outputSum, pid->outMax + 4) != 0) {\n                pid->outputSum = pid->outMax;\n                pid->outputSum = pid->outMax + 4;\n                return;\n            }\n            if (__aeabi_dcmplt(pid->outputSum, pid->outMin, pid->outputSum, pid->outMin + 4) != 0) {\n                pid->outputSum = pid->outMin;\n                pid->outputSum = pid->outMin + 4;\n            }\n        }\n    }\n}",
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001960",
            "calling": [
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "updateOutputLimits_08001960"
        },
        "FUN_08004ca2": {
            "renaming": {
                "FUN_08004ca2": "find_pin_for_peripheral_08004ca2",
                "peripheral": "peripheral_ptr",
                "map": "pin_map_ptr",
                "PVar1": "pin_found"
            },
            "code": "PinName_conflict find_pin_for_peripheral_08004ca2(void *peripheral,PinMap_conflict *map)\n{\n  PinName_conflict pin_found;\n  if (peripheral != NULL) {\n    pin_found = pinmap_find_pin(peripheral,map);\n    return pin_found;\n  }\n  return NC;\n}\n",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ca2",
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "imported": false,
            "current_name": "find_pin_for_peripheral_08004ca2"
        },
        "FUN_08002810": {
            "renaming": {
                "FUN_08002810": "check_GPIO_Pin_08002810",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin",
                "GPIO_PIN_RESET": "PIN_reset",
                "GPIO_PIN_SET": "PIN_set",
                "IDR": "input_data_register"
            },
            "code": "GPIO_PinState check_GPIO_Pin_08002810(GPIO_TypeDef *GPIOx, uint16_t pin)\n{\n    if ((GPIOx->IDR & (uint)pin) == 0)\n    {\n        return GPIO_PIN_RESET;\n    }\n    else\n    {\n        return GPIO_PIN_SET;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002810",
            "calling": [
                "digital_io_read"
            ],
            "imported": false,
            "current_name": "check_GPIO_Pin_08002810"
        },
        "FUN_0800224c": {
            "renaming": {
                "FUN_0800224c": "stop_ADC_conversion_and_disable_0800224c",
                "*hadc": "*adc_handle",
                "HVar1": "status"
            },
            "code": "HAL_StatusTypeDef_conflict stop_ADC_conversion_and_disable_0800224c(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (hadc == NULL) {\n    status = HAL_ERROR;\n  }\n  else {\n    hadc->State |= 2;\n    status = ADC_ConversionStop_Disable(hadc);\n    if (status == HAL_OK) {\n      hadc->Instance->SR = 0xffffffe0;\n      hadc->Instance->CR1 &= DAT_08002340;\n      hadc->Instance->CR2 &= DAT_08002344;\n      hadc->Instance->SMPR1 &= 0xff000000;\n      hadc->Instance->SMPR2 &= 0xc0000000;\n      hadc->Instance->JOFR1 &= 0xfffff000;\n      hadc->Instance->JOFR2 &= 0xfffff000;\n      hadc->Instance->JOFR3 &= 0xfffff000;\n      hadc->Instance->JOFR4 &= 0xfffff000;\n      hadc->Instance->HTR &= 0xfffff000;\n      hadc->Instance->LTR &= 0xfffff000;\n      hadc->Instance->SQR1 &= 0xff000000;\n      hadc->Instance->SQR2 &= 0xc0000000;\n      hadc->Instance->SQR3 &= 0xc0000000;\n      hadc->Instance->JSQR &= 0xffc00000;\n      HAL_ADC_MspDeInit(hadc);\n      hadc->ErrorCode = 0;\n      hadc->State = 0;\n    }\n    hadc->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800224c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_ADC_conversion_and_disable_0800224c"
        },
        "FUN_080054b0": {
            "renaming": {
                "FUN_080054b0": "is_uart_transmit_complete_080054b0",
                "obj": "serial",
                "HVar1": "uart_state",
                "(PTR_uart_handlers_080054d0 + (uint)obj->index * 4)": "uart_handler",
                "(uint)": "",
                "return": "",
                "(HVar1 & 0x21U) == 0x21": "is_complete",
                "uint8_t": "bool"
            },
            "code": "bool is_uart_transmit_complete_080054b0(serial_t *serial) {\n\tUART_HandleTypeDef *(PTR_uart_handlers_080054d0 + (uint)obj->index * 4) = *(UART_HandleTypeDef **)(PTR_(PTR_uart_handlers_080054d0 + (uint)obj->index * 4)s_080054d0 + (uint)serial->index * 4);\n\tHAL_UART_StateTypeDef uart_state = HAL_UART_GetState((PTR_uart_handlers_080054d0 + (uint)obj->index * 4));\n\tbool is_complete = (uart_state & 0x21U) == 0x21;\n\treturn is_complete;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054b0",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "is_uart_transmit_complete_080054b0"
        },
        "FUN_08006f00": {
            "renaming": {
                "FUN_08006f00": "execute_signal_handler_08006f00",
                "__sig": "signal_number",
                "iVar1": "return_value"
            },
            "code": "int execute_signal_handler_08006f00(int signal_number)\n{\n  int return_value;\n\n  return_value = _execute_signal_handler_08006f00_r(*(undefined4 *)PTR__impure_ptr_08006f0c,signal_number);\n  return return_value;\n}",
            "called": [
                "_raise_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f00",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "execute_signal_handler_08006f00"
        },
        "FUN_080016b4": {
            "renaming": {
                "FUN_080016b4": "calculate_080016b4",
                "this": "pid",
                "inAuto": "in_auto",
                "lastTime": "last_time",
                "SampleTime": "sample_time",
                "myInput": "input_ptr",
                "mySetpoint": "setpoint_ptr",
                "lastInput": "last_input",
                "outputSum": "output_sum",
                "kp": "kp",
                "ki": "ki",
                "kd": "kd",
                "outMin": "out_min",
                "outMax": "out_max",
                "myOutput": "output_ptr"
            },
            "code": "bool __thiscall PID::calculate_080016b4(PID *pid)\n{\n  bool in_auto = pid->inAuto;\n  if (in_auto) {\n    uint32_t current_time = millis();\n    if (current_time - pid->lastTime >= pid->SampleTime) {\n      double input = *(double *)pid->myInput;\n      double setpoint = *(double *)pid->mySetpoint;\n      double error = setpoint - input;\n      double d_input = input - pid->lastInput;\n      double output = 0;\n      output += pid->kp * error;\n      output += pid->ki * pid->outputSum;\n      output -= pid->kd * d_input;\n      if (output > pid->outMax) {\n        output = pid->outMax;\n      } else if (output < pid->outMin) {\n        output = pid->outMin;\n      }\n      *(double *)pid->myOutput = output;\n      pid->lastInput = input;\n      pid->outputSum += error;\n      pid->lastTime = current_time;\n    }\n    else {\n      in_auto = false;\n    }\n  }\n  return in_auto;\n}",
            "called": [
                "__aeabi_dadd",
                "millis",
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dcmpgt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016b4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_080016b4"
        },
        "FUN_08004e48": {
            "renaming": {
                "FUN_08004e48": "handle_timer_interrupt_08004e48",
                "PTR_timer_handles_08004e58": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandleTypeDef",
                "HAL_TIM_IRQHandler": "HAL_TIM_IRQHandler",
                "timer_handle": "timer_handle"
            },
            "code": "void handle_timer_interrupt_08004e48(void)\n{\n    TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef**)(PTR_timer_handles_08004e58_08004e58 + 8);\n    if (timer_handle != NULL) {\n        HAL_TIM_IRQHandler(timer_handle);\n    }\n    return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e48",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e48"
        },
        "FUN_0800074c": {
            "renaming": {
                "FUN_0800074c": "FUNC_0800074c"
            },
            "code": "\nulonglong FUNC_0800074c(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  int iVar8;\n  uint uVar9;\n  uint unaff_r5;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  uint uVar13;\n  bool bVar14;\n  bool bVar15;\n  bool bVar16;\n  ulonglong uVar17;\n  \n  uVar17 = CONCAT44(param_2,param_1);\n  uVar13 = 0x7ff;\n  uVar7 = param_2 >> 0x14 & 0x7ff;\n  bVar14 = uVar7 == 0;\n  if (!bVar14) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar14 = unaff_r5 == 0;\n  }\n  if (!bVar14) {\n    bVar14 = uVar7 == 0x7ff;\n  }\n  if (!bVar14) {\n    bVar14 = unaff_r5 == 0x7ff;\n  }\n  if (bVar14) {\n    uVar17 = calculate_result_080008ba();\n  }\n  uVar9 = (uint)(uVar17 >> 0x20);\n  uVar11 = (uint)uVar17;\n  iVar8 = uVar7 - unaff_r5;\n  if ((param_3 | param_4 << 0xc) == 0) {\n    uVar7 = (uVar9 ^ param_4) & 0x80000000 | uVar9 & 0xfffff;\n    bVar16 = SCARRY4(iVar8,uVar13 >> 1);\n    uVar9 = iVar8 + (uVar13 >> 1);\n    bVar14 = (int)uVar9 < 0;\n    bVar15 = uVar9 == 0;\n    if (!bVar15 && bVar14 == bVar16) {\n      bVar16 = SBORROW4(uVar13,uVar9);\n      bVar14 = (int)(uVar13 - uVar9) < 0;\n      bVar15 = uVar13 == uVar9;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      uVar7 = uVar7 | uVar9 * 0x100000;\n    }\n    if (!bVar15 && bVar14 == bVar16) {\n      return uVar17 & 0xffffffff | (ulonglong)uVar7 << 0x20;\n    }\n    uVar7 = uVar7 | 0x100000;\n    uVar13 = 0;\n    bVar15 = SBORROW4(uVar9,1);\n    uVar9 = uVar9 - 1;\n    bVar14 = uVar9 == 0;\n    uVar3 = uVar9;\n  }\n  else {\n    uVar3 = (param_4 << 0xc) >> 4 | 0x10000000 | param_3 >> 0x18;\n    uVar13 = param_3 << 8;\n    uVar10 = (uVar9 << 0xc) >> 4 | 0x10000000 | uVar11 >> 0x18;\n    uVar11 = uVar11 * 0x100;\n    uVar7 = (uVar9 ^ param_4) & 0x80000000;\n    bVar14 = uVar3 <= uVar10;\n    if (uVar10 == uVar3) {\n      bVar14 = uVar13 <= uVar11;\n    }\n    iVar8 = iVar8 + (uint)bVar14;\n    uVar9 = iVar8 + 0x3fd;\n    if (bVar14 == false) {\n      uVar3 = uVar3 >> 1;\n      uVar13 = (uint)((param_3 >> 0x18 & 1) != 0) << 0x1f | uVar13 >> 1;\n    }\n    uVar12 = uVar11 - uVar13;\n    uVar10 = (uVar10 - uVar3) - (uint)(uVar11 < uVar13);\n    uVar4 = uVar3 >> 1;\n    uVar1 = (uint)((uVar3 & 1) != 0) << 0x1f | uVar13 >> 1;\n    uVar11 = 0x100000;\n    uVar3 = 0x80000;\n    while( true ) {\n      bVar14 = uVar1 <= uVar12;\n      if (uVar4 < uVar10 || uVar10 - uVar4 < (uint)bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar11 = uVar11 | uVar3;\n        uVar10 = (uVar10 - uVar4) - (uint)!bVar14;\n      }\n      uVar5 = uVar4 >> 1;\n      uVar1 = (uint)((uVar4 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar10 - uVar5 < (uint)bVar15;\n      uVar13 = uVar10;\n      if (uVar5 < uVar10 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar13 = (uVar10 - uVar5) - (uint)!bVar15;\n      }\n      if (uVar5 < uVar10 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 1;\n      }\n      uVar10 = uVar4 >> 2;\n      uVar2 = (uint)((uVar5 & 1) != 0) << 0x1f | uVar1 >> 1;\n      bVar15 = uVar2 <= uVar12;\n      bVar14 = uVar13 - uVar10 < (uint)bVar15;\n      uVar5 = uVar13;\n      if (uVar10 < uVar13 || bVar14) {\n        uVar12 = uVar12 - uVar2;\n        uVar5 = (uVar13 - uVar10) - (uint)!bVar15;\n      }\n      if (uVar10 < uVar13 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 2;\n      }\n      uVar6 = uVar4 >> 3;\n      uVar1 = (uint)((uVar10 & 1) != 0) << 0x1f | uVar2 >> 1;\n      bVar15 = uVar1 <= uVar12;\n      bVar14 = uVar5 - uVar6 < (uint)bVar15;\n      uVar10 = uVar5;\n      if (uVar6 < uVar5 || bVar14) {\n        uVar12 = uVar12 - uVar1;\n        uVar10 = (uVar5 - uVar6) - (uint)!bVar15;\n      }\n      if (uVar6 < uVar5 || bVar14) {\n        uVar11 = uVar11 | uVar3 >> 3;\n      }\n      uVar13 = uVar10 | uVar12;\n      if (uVar13 == 0) break;\n      uVar10 = uVar10 << 4 | uVar12 >> 0x1c;\n      uVar12 = uVar12 << 4;\n      uVar4 = uVar4 & 0xfffffff8 | uVar1 >> 0x1d;\n      uVar1 = (uVar2 >> 1) << 3;\n      uVar3 = uVar3 >> 4;\n      if (uVar3 == 0) {\n        uVar6 = uVar4;\n        if ((uVar7 & 0x100000) != 0) goto LAB_0800086a;\n        uVar7 = uVar7 | uVar11;\n        uVar11 = 0;\n        uVar3 = 0x80000000;\n      }\n    }\n    if ((uVar7 & 0x100000) == 0) {\n      uVar7 = uVar7 | uVar11;\n      uVar11 = 0;\n    }\nLAB_0800086a:\n    bVar16 = 0xfc < uVar9;\n    bVar15 = SBORROW4(uVar9,0xfd);\n    uVar4 = iVar8 + 0x300;\n    bVar14 = uVar4 == 0;\n    uVar3 = uVar4;\n    if (bVar16 && !bVar14) {\n      bVar16 = 0x6ff < uVar4;\n      bVar15 = SBORROW4(uVar4,0x700);\n      uVar3 = iVar8 - 0x400;\n      bVar14 = uVar4 == 0x700;\n    }\n    if (!bVar16 || bVar14) {\n      bVar14 = uVar6 <= uVar10;\n      if (uVar10 == uVar6) {\n        bVar14 = uVar1 <= uVar12;\n      }\n      if (uVar10 == uVar6 && uVar12 == uVar1) {\n        bVar14 = (uVar11 & 1) != 0;\n      }\n      return CONCAT44(uVar7 + uVar9 * 0x100000 + (uint)CARRY4(uVar11,(uint)bVar14),uVar11 + bVar14);\n    }\n  }\n  if (!bVar14 && (int)uVar3 < 0 == bVar15) {\n    return (ulonglong)(uVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar16 = SCARRY4(uVar9,0x36);\n  bVar14 = (int)(uVar9 + 0x36) < 0;\n  bVar15 = uVar9 == 0xffffffca;\n  if (bVar15 || bVar14 != bVar16) {\n    uVar11 = 0;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    uVar7 = uVar7 & 0x80000000;\n  }\n  if (bVar15 || bVar14 != bVar16) {\n    return CONCAT44(uVar7,uVar11);\n  }\n  uVar3 = -uVar9;\n  uVar10 = uVar3 - 0x20;\n  if (0x1f < (int)uVar3) {\n    uVar3 = uVar11 >> (uVar10 & 0xff) | uVar7 << (0x20 - uVar10 & 0xff);\n    uVar9 = (uVar7 >> (uVar10 & 0xff) & ~((uVar7 & 0x80000000) >> (uVar10 & 0xff))) -\n            ((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar11 << (0x20 - uVar10 & 0xff) | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44(uVar7,uVar9) & 0x80000000ffffffff;\n  }\n  iVar8 = uVar3 - 0x14;\n  if (iVar8 != 0 && iVar8 < 0 == SCARRY4(uVar10,0xc)) {\n    uVar9 = 0xc - iVar8;\n    uVar3 = uVar11 << (uVar9 & 0xff);\n    uVar11 = uVar11 >> (0x20 - uVar9 & 0xff) | uVar7 << (uVar9 & 0xff);\n    uVar9 = uVar11 + -((int)uVar3 >> 0x1f);\n    if ((uVar13 | uVar3 << 1) == 0) {\n      uVar9 = uVar9 & ~(uVar3 >> 0x1f);\n    }\n    return CONCAT44((uVar7 & 0x80000000) + (uint)CARRY4(uVar11,-((int)uVar3 >> 0x1f)),uVar9);\n  }\n  uVar10 = uVar11 << (uVar9 + 0x20 & 0xff);\n  uVar11 = uVar11 >> (uVar3 & 0xff) | uVar7 << (uVar9 + 0x20 & 0xff);\n  uVar9 = uVar11 + -((int)uVar10 >> 0x1f);\n  if ((uVar13 | uVar10 << 1) == 0) {\n    uVar9 = uVar9 & ~(uVar10 >> 0x1f);\n  }\n  return CONCAT44((uVar7 & 0x80000000) +\n                  ((uVar7 & 0x7fffffff) >> (uVar3 & 0xff)) +\n                  (uint)CARRY4(uVar11,-((int)uVar10 >> 0x1f)),uVar9);\n}\n\n",
            "called": [
                "FUN_080008ba"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800074c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_0800074c"
        },
        "FUN_080018f8": {
            "renaming": {
                "PID::FUN_080018f8": "calculatePID",
                "this": "pid",
                "Kp": "proportionalGain",
                "Ki": "integralGain",
                "Kd": "derivativeGain",
                "in_stack_ffffffec": "modifiedIntegralGain",
                "this->pOn": "pOn",
                "FUN_080018f8": "calculatePID_080018f8"
            },
            "code": "void calculatePID_080018f8(PID *pid, double proportionalGain, double integralGain, double derivativeGain) {\n  double pOn = pid->pOn;\n  double modifiedIntegralGain = integralGain * (double)CONCAT44(0xffffffec, pOn);\n  calculatePID_080018f8(pid, proportionalGain, integralGain, modifiedIntegralGain, pOn);\n  return;\n}",
            "called": [
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculatePID_080018f8"
        },
        "FUN_08005890": {
            "renaming": {
                "FUN_08005890": "read_digital_pin_08005890",
                "ulPin": "pin",
                "_Var1": "is_pin_configured",
                "port": "gpio_port",
                "uVar2": "read_value",
                "uVar3": "configured_pin"
            },
            "code": "int read_digital_pin_08005890(uint32_t pin){\n  bool is_pin_configured;\n  GPIO_TypeDef *gpio_port;\n  uint32_t configured_pin;\n  uint read_value;\n  \n  if (pin < 0x3c) {\n    configured_pin = (uint)(char)PTR_digitalPin_080058d8[pin];\n  }\n  else {\n    configured_pin = 0xffffffff;\n  }\n  if (configured_pin == 0xffffffff) {\n    configured_pin = 0;\n  }\n  else {\n    is_pin_configured = is_pin_configured((PinName_conflict)configured_pin,(uint32_t *)PTR_g_digPinConfigured_080058dc);\n    if (is_pin_configured) {\n      gpio_port = get_GPIO_Port((configured_pin << 0x18) >> 0x1c);\n      read_value = digital_io_read(gpio_port,1 << (configured_pin & 0xf) & 0xffff);\n      configured_pin = read_value & 0xff;\n    }\n    else {\n      configured_pin = 0;\n    }\n  }\n  if (configured_pin != 0) {\n    configured_pin = 1;\n  }\n  return configured_pin;\n}",
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005890",
            "calling": [
                "readData",
                "loop"
            ],
            "imported": false,
            "current_name": "read_digital_pin_08005890"
        },
        "FUN_08005da0": {
            "renaming": {
                "__thiscall Print::FUN_08005da0": "printCharacter",
                "this": "this",
                "b": "character",
                "base": "base",
                "sVar1": "printedSize",
                "FUN_08005da0": "printCharacter_08005da0"
            },
            "code": "size_t Print::printCharacter_08005da0(uint8_t character, int base) {\n  size_t printedSize;\n  printedSize = printCharacter_08005da0((uint)character, base);\n  return printedSize;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da0",
            "calling": [
                "printTo"
            ],
            "imported": false,
            "current_name": "printCharacter_08005da0"
        },
        "FUN_08004cb2": {
            "renaming": {
                "FUN_08004cb2": "find_pin_function_08004cb2",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "uint32_t find_pin_function_08004cb2(PinName_conflict target_pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return 0xffffffff;\n    }\n    if (pin_map->pin == target_pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->function;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cb2",
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cb2"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "enable_i2c_listen_mode_08004ef4",
                "hi2c": "i2c_handle",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "isMaster": "is_master"
            },
            "code": "void enable_i2c_listen_mode_08004ef4(I2C_HandleTypeDef *i2c_handle)\\n{\\n  i2c_t *i2c_obj;\\n  i2c_obj = get_i2c_object(i2c_handle);\\n  if (i2c_obj->is_master == \"\\0\") {\\n    HAL_I2C_EnableListen_IT(i2c_handle);\\n  }\\n  return;\\n}",
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "enable_i2c_listen_mode_08004ef4"
        },
        "FUN_08001294": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_08001294": "void set_row_offsets(LiquidCrystal *lcd, int offset_row0, int offset_row1, int offset_row2, int offset_row3)",
                "this": "lcd",
                "row0": "offset_row0",
                "row1": "offset_row1",
                "row2": "offset_row2",
                "row3": "offset_row3",
                "_row_offsets": "row_offsets",
                "uint8_t": "unsigned char",
                "FUN_08001294": "set_row_offsets_08001294"
            },
            "code": "void set_row_offsets_08001294(LiquidCrystal *lcd, int offset_row0, int offset_row1, int offset_row2, int offset_row3) {\n  lcd->row_offsets[0] = (uint8_t)offset_row0;\n  lcd->row_offsets[1] = (uint8_t)offset_row1;\n  lcd->row_offsets[2] = (uint8_t)offset_row2;\n  lcd->row_offsets[3] = (uint8_t)offset_row3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001294",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "set_row_offsets_08001294"
        },
        "FUN_08002384": {
            "renaming": {
                "FUN_08002384": "adc_start_conversion_08002384",
                "*hadc": "hadc",
                "HVar1": "status",
                "uVar2": "clock_freq",
                "uVar3": "elapsed_time",
                "pAVar4": "adc_instance",
                "uVar5": "hclk_freq",
                "wait_loop_index": "wait_cycles"
            },
            "code": "HAL_StatusTypeDef_conflict adc_start_conversion_08002384(ADC_HandleTypeDef *hadc)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t clock_freq, wait_cycles;\n  ADC_TypeDef *adc_instance;\n  uint32_t start_time;\n  \n  if (hadc->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  hadc->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(hadc);\n  if (status == HAL_OK) {\n    hadc->State = (hadc->State & 0xffffeefd) | 0x02;\n    clock_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    wait_cycles = HAL_RCC_GetHCLKFreq() / clock_freq * 2;\n    while (wait_cycles--);\n    ADC_Enable(hadc);\n    hadc->Instance->CR2 |= 8;\n    start_time = HAL_GetTick();\n    while ((hadc->Instance->CR2 & 8) != 0) {\n      if (HAL_GetTick() - start_time > 10) {\n        hadc->State = (hadc->State & 0xffffffed) | 0x10;\n        hadc->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adc_instance = hadc->Instance;\n    adc_instance->CR2 |= 4;\n    start_time = HAL_GetTick();\n    while ((hadc->Instance->CR2 & 4) != 0) {\n      if (HAL_GetTick() - start_time > 10) {\n        hadc->State = (hadc->State & 0xffffffed) | 0x10;\n        hadc->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    hadc->State = (hadc->State & 0xfffffffc) | 0x01;\n  }\n  hadc->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002384",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "adc_start_conversion_08002384"
        },
        "FUN_08005650": {
            "renaming": {
                "FUN_08005650": "receive_uart_data_08005650",
                "huart": "*uart_handle",
                "tmpval": "tmp_value"
            },
            "code": "void receive_uart_data_08005650(UART_HandleTypeDef *huart)\n{\n  uint32_t tmp_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005650",
            "calling": [
                "HAL_UART_IRQHandler",
                "UART_DMAAbortOnError"
            ],
            "imported": false,
            "current_name": "receive_uart_data_08005650"
        },
        "FUN_08006fb6": {
            "renaming": {
                "FUN_08006fb6": "close_file_descriptor_08006fb6",
                "param_1": "stream",
                "param_2": "descriptor_offset"
            },
            "code": "void close_file_descriptor_08006fb6(void* stream, int descriptor_offset)\n{\n  _close_r(stream, (int)*(short *)(descriptor_offset + 0xe));\n  return;\n}",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fb6",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_08006fb6"
        },
        "FUN_08002ad8": {
            "renaming": {
                "FUN_08002ad8": "HAL_StatusTypeDef_transferData_08002ad8",
                "hi2c": "i2c_handle",
                "puVar1": "data_ptr",
                "XferCount": "transfer_count",
                "pBuffPtr": "data_buffer_ptr",
                "Instance": "instance",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef_transferData_08002ad8(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t *data_ptr;\n  \n  if (i2c_handle->transfer_count != 0) {\n    data_ptr = i2c_handle->data_buffer_ptr;\n    i2c_handle->data_buffer_ptr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->instance->DR;\n    i2c_handle->transfer_count--;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad8",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "HAL_StatusTypeDef_transferData_08002ad8"
        },
        "FUN_08004204": {
            "renaming": {
                "FUN_08004204": "configure_uart_08004204",
                "huart": "uart",
                "uVar1": "baud_rate",
                "uVar2": "oversampling",
                "uVar3": "pclk_freq",
                "uVar4": "pclk_freq",
                "uVar5": "pclk_freq",
                "uVar6": "pclk_freq",
                "uVar7": "pclk_freq",
                "uVar8": "baud_rate",
                "uVar9": "baud_rate",
                "uVar10": "baud_rate",
                "uVar11": "baud_rate",
                "pUVar12": "uart_instance"
            },
            "code": "void configure_uart_08004204(UART_HandleTypeDef *uart)\n{\n  ulonglong baud_rate;\n  uint32_t pclk_freq;\n  uint32_t oversampling = 16;\n  uint32_t brr_value;\n  USART_TypeDef *uart_instance = uart->Instance;\n  \n  uart_instance->CR2 &= 0xFFFFCFFF;\n  uart_instance->CR2 |= (uart->Init).StopBits;\n  \n  uart_instance->CR1 &= 0xFFFFE9F3;\n  uart_instance->CR1 |= ((uart->Init).WordLength | (uart->Init).Parity | (uart->Init).Mode);\n  \n  uart_instance->CR3 &= 0xFFFFFCFF;\n  uart_instance->CR3 |= (uart->Init).HwFlowCtl;\n  \n  if (uart_instance != USART1) {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  } else {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  \n  baud_rate = (ulonglong)(uart->Init).BaudRate;\n  brr_value = ((pclk_freq * oversampling) / (baud_rate)) + (((pclk_freq * oversampling) % (baud_rate)) >= (baud_rate / 2) ? 1 : 0);\n  \n  uart_instance->BRR = (brr_value & 0xFFFF0000) | ((brr_value & 0xF) << 1) | ((brr_value & 0xF0) << 3);\n}\n",
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004204",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_08004204"
        },
        "FUN_08005da8": {
            "renaming": {
                "FUN_08005da8": "print_double_08005da8",
                "this": "printer",
                "number": "number",
                "digits": "digits",
                "iVar1": "is_nan",
                "n": "integer_part",
                "sVar2": "printed_chars",
                "sVar3": "printed_chars",
                "bVar4": "digit",
                "lVar5": "fractional_part",
                "uVar6": "uVar6",
                "uVar7": "uVar7"
            },
            "code": "size_t print_double_08005da8(Print* printer, double number, uint8_t digits) {\n  int is_nan = isnan(number);\n  if (is_nan) {\n    return print(printer, \"nan\");\n  }\n  int is_inf = isinf(number);\n  if (is_inf) {\n    return print(printer, \"inf\");\n  }\n  if (number == 0.0) {\n    return print(printer, '0');\n  }\n  int is_negative = number < 0;\n  if (is_negative) {\n    number = -number;\n    print(printer, '-');\n  }\n  int integer_part = (int)number;\n  double fractional_part = number - integer_part;\n  size_t printed_chars = print(printer, integer_part);\n  if (digits > 0) {\n    printed_chars += print(printer, '.');\n    for (int i = 0; i < digits; i++) {\n      fractional_part *= 10;\n      int digit = (int)fractional_part;\n      printed_chars += print(printer, digit);\n      fractional_part -= digit;\n    }\n  }\n  return printed_chars;\n}",
            "called": [
                "__unorddf2",
                "__aeabi_dadd",
                "print",
                "__floatsidf",
                "print",
                "__divdf3",
                "print",
                "__subdf3",
                "__aeabi_dcmplt",
                "__fixunsdfsi",
                "__fixdfsi",
                "__muldf3",
                "__floatunsidf",
                "__aeabi_dcmpgt",
                "print",
                "__aeabi_dcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005da8",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_double_08005da8"
        },
        "FUN_080045fe": {
            "renaming": {
                "FUN_080045fe": "set_uart_to_ready_state_080045fe",
                "*huart": "*uart_handle",
                "CR1": "control_register_1",
                "gState": "general_state",
                "HAL_UART_TxCpltCallback": "UART_Tx_complete_callback",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef set_uart_to_ready_state_080045fe(UART_HandleTypeDef *uart_handle)\n{\n  // disable UART\n  uart_handle->Instance->CR1 &= ~(1 << 6);\n  // set UART state to ready\n  uart_handle->gState = HAL_UART_STATE_READY;\n  // call Tx complete callback\n  HAL_UART_TxCpltCallback(uart_handle);\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045fe",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_uart_to_ready_state_080045fe"
        },
        "FUN_08005f2c": {
            "renaming": {
                "FUN_08005f2c": "print_double_08005f2c",
                "this": "print_obj",
                "n": "number",
                "digits": "num_digits",
                "sVar1": "size",
                "in_stack_fffffff4": "combined_num"
            },
            "code": "size_t print_double_08005f2c(Print *print_obj, double number, int num_digits) {\n  size_t size;\n  uint64_t combined_num = (uint64_t)number;\n  combined_num <<= 32;\n  combined_num |= *((uint32_t*)&number);\n  size = print_float(print_obj, combined_num, num_digits);\n  return size;\n}",
            "called": [
                "printFloat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f2c",
            "calling": [
                "loop",
                "println"
            ],
            "imported": false,
            "current_name": "print_double_08005f2c"
        },
        "FUN_080055e0": {
            "renaming": {
                "FUN_080055e0": "handle_uart_data_080055e0",
                "*huart": "*uart_handle",
                "bVar1": "uart_index_value",
                "uVar2": "index_as_uint",
                "uart_index": "get_uart_index",
                "PTR_rx_callback_080055fc": "rx_callback_ptr_080055fc",
                "PTR_rx_callback_obj_08005600": "rx_callback_obj_ptr_08005600"
            },
            "code": "void handle_uart_data_080055e0(UART_HandleTypeDef *uart_handle) {\n  byte uart_index_value;\n  uint index_as_uint;\n  \n  uart_index_value = get_uart_index(uart_handle);\n  index_as_uint = (uint)uart_index_value;\n  if (index_as_uint < 5) {\n    (**(code **)(PTR_rx_callback_080055fc + index_as_uint * 4))\n              (*(undefined4 *)(PTR_rx_callback_obj_08005600 + index_as_uint * 4));\n  }\n  return;\n}",
            "called": [
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080055e0",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "handle_uart_data_080055e0"
        },
        "FUN_08005f40": {
            "renaming": {
                "FUN_08005f40": "08005f40_08005f40",
                "this": "print_instance",
                "num": "number",
                "digits": "num_digits",
                "sVar1": "print_size_1",
                "sVar2": "print_size_2",
                "in_stack_ffffffec": "num_high_bits"
            },
            "code": "size_t Print::08005f40_08005f40(Print *print_instance,double number,int num_digits)\n{\n  size_t print_size_1;\n  size_t print_size_2;\n  uint64_t num_high_bits;\n  \n  num_high_bits = (uint64_t)number & 0xffffffff00000000;\n  num_high_bits = num_high_bits | (uint64_t)num_digits;\n  print_size_1 = print(print_instance,number,num_high_bits);\n  print_size_2 = print_instance->08005f40_08005f40();\n  return print_size_2 + print_size_1;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f40",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "08005f40_08005f40"
        },
        "FUN_08006f10": {
            "renaming": {
                "FUN_08006f10": "kill_process_if_running_08006f10",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal_number",
                "puVar1": "error_ptr",
                "iVar2": "kill_result",
                "PTR_errno_08006f30": "errno_ptr"
            },
            "code": "void kill_process_if_running_08006f10(int *error_code, int process_id, int signal_number)\n{\n  undefined *error_ptr;\n  int kill_result;\n  error_ptr = PTR_errno_08006f30;\n  *(undefined4 *)PTR_errno_08006f30 = 0;\n  kill_result = _kill(process_id, signal_number);\n  if ((kill_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f10",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "kill_process_if_running_08006f10"
        },
        "FUN_0800213c": {
            "renaming": {
                "FUN_0800213c": "configure_ADC_0800213c",
                "*hadc": "hadc",
                "HVar1": "status",
                "uVar2": "conversion_mode",
                "uVar3": "cr2",
                "uVar4": "state",
                "uVar5": "continuous_conv_mode",
                "DAT_08002244": "cr2_mask",
                "DAT_08002248": "cr2_mask2"
            },
            "code": "HAL_StatusTypeDef_conflict configure_ADC_0800213c(ADC_HandleTypeDef *hadc)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t state;\n    uint32_t cr1;\n    uint32_t cr2;\n    uint32_t sqr1;\n    uint32_t conversion_mode;\n    uint32_t disc_conversion_mode;\n    uint32_t continuous_conv_mode;\n    uint32_t nbr_of_conversion;\n    uint32_t nbr_of_disc_conversion;\n\n    if(hadc == NULL) {\n        return HAL_ERROR;\n    }\n\n    if(hadc->State == 0) {\n        hadc->ErrorCode = 0;\n        hadc->Lock = HAL_UNLOCKED;\n        HAL_ADC_MspInit(hadc);\n    }\n\n    status = ADC_ConversionStop_Disable(hadc);\n\n    state = hadc->State & 0x10;\n\n    if(state == 0 && status == HAL_OK) {\n        hadc->State = hadc->State & 0xffffeefd | 2;\n        continuous_conv_mode = hadc->Init.ContinuousConvMode;\n        disc_conversion_mode = hadc->Init.DiscontinuousConvMode;\n        conversion_mode = hadc->Init.ScanConvMode;\n        nbr_of_conversion = hadc->Init.NbrOfConversion;\n        nbr_of_disc_conversion = hadc->Init.NbrOfDiscConversion;\n        cr1 = hadc->Instance->CR1 & 0xffff16ff;\n        cr2 = hadc->Instance->CR2;\n        sqr1 = hadc->Instance->SQR1 & 0xff0fffff;\n\n        if(conversion_mode == 0x100 || conversion_mode == 1) {\n            nbr_of_conversion = (hadc->Init.NbrOfConversion - 1) * 0x100000;\n        } else {\n            nbr_of_conversion = 0;\n        }\n\n        if(disc_conversion_mode == 1) {\n            if(continuous_conv_mode == 0) {\n                nbr_of_conversion |= (nbr_of_disc_conversion - 1) * 0x2000 | 0x800;\n            } else {\n                hadc->State |= 0x20;\n                hadc->ErrorCode |= 1;\n            }\n        }\n\n        cr1 |= nbr_of_conversion;\n        cr2 |= hadc->Init.DataAlign | hadc->Init.ExternalTrigConv | continuous_conv_mode << 1;\n\n        if(cr2 != (hadc->Instance->CR2 & DAT_08002248)) {\n            hadc->State = hadc->State & 0xffffffed | 0x10;\n            hadc->ErrorCode |= 1;\n            return HAL_ERROR;\n        }\n\n        hadc->ErrorCode = 0;\n        hadc->State = hadc->State & 0xfffffffc | 1;\n        return HAL_OK;\n    }\n\n    hadc->State |= 0x10;\n    return HAL_ERROR;\n}",
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800213c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_0800213c"
        },
        "FUN_0800455a": {
            "renaming": {
                "FUN_0800455a": "check_uart_state_0800455a",
                "*huart": "*uart_handle",
                "*pData": "*data_ptr",
                "Size": "data_size",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "huart->gState": "uart_handle->gState",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "pData == (uint8_t *)0x0": "data_ptr == NULL",
                "Size == 0": "data_size == 0",
                "huart->Lock != HAL_LOCKED": "uart_handle->Lock == HAL_LOCKED",
                "huart->pTxBuffPtr": "uart_handle->pTxBuffPtr",
                "huart->TxXferSize": "uart_handle->TxXferSize",
                "huart->TxXferCount": "uart_handle->TxXferCount",
                "huart->ErrorCode": "uart_handle->ErrorCode",
                "HAL_UART_STATE_BUSY_TX": "HAL_UART_STATE_BUSY_TX",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "Instance->CR1": "Instance->CR1",
                "0x80": "0x80",
                "HAL_OK": "HAL_OK",
                "HAL_BUSY": "HAL_BUSY",
                "HAL_ERROR": "HAL_ERROR"
            },
            "code": "HAL_StatusTypeDef check_uart_state_0800455a(UART_HandleTypeDef *uart_handle, uint8_t *data_ptr, uint16_t data_size) {\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data_ptr == NULL) {\n        return HAL_ERROR;\n    }\n    if (data_size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock == HAL_LOCKED) {\n        return HAL_BUSY;\n    }\n    uart_handle->pTxBuffPtr = data_ptr;\n    uart_handle->TxXferSize = data_size;\n    uart_handle->TxXferCount = data_size;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    uart_handle->Lock = HAL_UNLOCKED;\n    uart_handle->Instance->CR1 |= 0x80;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800455a",
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "imported": false,
            "current_name": "check_uart_state_0800455a"
        },
        "FUN_08004d30": {
            "renaming": {
                "FUN_08004d30": "handle_RTC_alarm_interrupt_08004d30",
                "PTR_RtcHandle_08004d3c": "rtc_handle"
            },
            "code": "void handle_RTC_alarm_interrupt_08004d30(void)\n{\n  RTC_HandleTypeDef* PTR_RtcHandle_08004d3c = (RTC_HandleTypeDef*)PTR_RtcHandle_08004d3c;\n  HAL_RTC_AlarmIRQHandler(PTR_RtcHandle_08004d3c);\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d30",
            "calling": [],
            "imported": false,
            "current_name": "handle_RTC_alarm_interrupt_08004d30"
        },
        "FUN_08001a66": {
            "renaming": {
                "FUN_08001a66": "updateControllerDirection_08001a66",
                "this": "pidInstance",
                "Direction": "newDirection",
                "dVar1": "negativeValue",
                "inAuto": "isAuto",
                "controllerDirection": "currentDirection",
                "kp": "proportionalGain",
                "ki": "integralGain",
                "kd": "derivativeGain"
            },
            "code": "void __thiscall PID::updateControllerDirection_08001a66(PID *this, int newDirection)\n{\n  double negKp, negKi, negKd;\n  if ((this->inAuto != false) && (this->controllerDirection != newDirection)) {\n    negKp = -1 * this->kp;\n    this->kp = negKp;\n    negKi = -1 * this->ki;\n    this->ki = negKi;\n    negKd = -1 * this->kd;\n    this->kd = negKd;\n  }\n  this->controllerDirection = newDirection;\n  return;\n}",
            "called": [
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001a66",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "updateControllerDirection_08001a66"
        },
        "FUN_08003c44": {
            "renaming": {
                "FUN_08003c44": "getSystemCoreClock_08003c44",
                "PTR_SystemCoreClock_08003c4c": "systemCoreClockPtr"
            },
            "code": "uint32_t getSystemCoreClock_08003c44(void)\n{\n    return *(uint32_t *)PTR_SystemCoreClock_08003c4c;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c44",
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "imported": false,
            "current_name": "getSystemCoreClock_08003c44"
        },
        "FUN_08006074": {
            "renaming": {
                "FUN_08006074": "handle_gpio_interrupt_08006074"
            },
            "code": "void handle_gpio_interrupt_08006074(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(1);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006074",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_interrupt_08006074"
        },
        "FUN_080028d2": {
            "renaming": {
                "FUN_080028d2": "send_i2c_address_080028d2",
                "hi2c": "i2c_handle",
                "Devaddress": "address",
                "Instance": "i2c_instance",
                "DR": "data_register",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef send_i2c_address_080028d2(I2C_HandleTypeDef *i2c_handle)\n{\n  uint8_t address = i2c_handle->Devaddress & 0xff;\n  i2c_handle->Instance->DR = address;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028d2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_i2c_address_080028d2"
        },
        "FUN_08000a18": {
            "renaming": {
                "FUN_08000a18": "isEndOfString_08000a18",
                "in_CY": "currentChar"
            },
            "code": "bool isEndOfString_08000a18(void) {\n  char currentChar;\n  __aeabi_cdrcmple();\n  return currentChar == '\\0';\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a18",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "loop"
            ],
            "imported": false,
            "current_name": "isEndOfString_08000a18"
        },
        "FUN_08005384": {
            "renaming": {
                "FUN_08005384": "configure_UART_pin_08005384",
                "PinName_conflict": "PinName",
                "PTR_digitalPin_080053c4": "digitalPin_1",
                "void *pvVar2": "tx_pin_ptr",
                "PinMap_conflict": "PinMap",
                "PTR_PinMap_UART_TX_080053c8": "PinMap_UART_TX",
                "PinName_conflict PVar1": "rx_pin_name",
                "PTR_PinMap_UART_RX_080053cc": "PinMap_UART_RX",
                "undefined *obj": "serial_debug_ptr",
                "PTR_serial_debug_080053d0": "serial_debug",
                "*(undefined4 *)(obj + 0x48)": "serial_debug[0x48]",
                "*(undefined4 *)(obj + 0x54)": "serial_debug[0x54]",
                "*(undefined4 *)(obj + 0x4c)": "serial_debug[0x4c]",
                "*(undefined4 *)(obj + 0x50)": "serial_debug[0x50]"
            },
            "code": "void configure_UART_pin_08005384(void)\n{\n  PinName_conflict pin_name;\n  undefined *PTR_serial_debug_080053d0_ptr;\n  PinName_conflict tx_pin_name;\n  void *tx_pin_ptr;\n  PinName_conflict rx_pin_name;\n  \n  pin_name = PTR_digitalPin_080053c4;\n  tx_pin_ptr = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n  if (tx_pin_ptr != (void *)0x0) {\n    tx_pin_ptr = pinmap_peripheral(pin_name, (PinMap_conflict *)PTR_PinMap_UART_TX_080053c8);\n    rx_pin_name = pinmap_pin(tx_pin_ptr, (PinMap_conflict *)PTR_PinMap_UART_RX_080053cc);\n    PTR_serial_debug_080053d0_ptr = PTR_serial_debug_080053d0;\n    PTR_serial_debug_080053d0[0x59] = rx_pin_name;\n    PTR_serial_debug_080053d0[0x58] = pin_name;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x54) = 0;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x4c) = 0;\n    *(undefined4 *)(PTR_serial_debug_080053d0 + 0x50) = 0;\n    uart_init((serial_t *)PTR_serial_debug_080053d0_ptr);\n  }\n  return;\n}",
            "called": [
                "pinmap_pin",
                "pinmap_peripheral",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005384",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "configure_UART_pin_08005384"
        },
        "FUN_08005b3c": {
            "renaming": {
                "FUN_08005b3c": "setPinTx_08005b3c",
                "_tx": "txPinNumber",
                "PVar1": "txPin",
                "PTR_digitalPin_08005b50": "digitalPinArray"
            },
            "code": "void __thiscall HardwareSerial::setPinTx_08005b3c(HardwareSerial *this,uint32_t txPinNumber)\n{\n  PinName txPin;\n\n  if (txPinNumber < 0x3c) {\n    txPin = PTR_digitalPin_08005b50[txPinNumber];\n  }\n  else {\n    txPin = NC;\n  }\n  (this->_serial).pin_tx = txPin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b3c",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "setPinTx_08005b3c"
        },
        "FUN_0800091c": {
            "renaming": {
                "FUN_0800091c": "check_params_0800091c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "xor_result",
                "bVar2": "is_zero",
                "bVar3": "is_fourth_param_less_than_or_equal_to_second",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "uint check_params_0800091c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_first_param_zero = (first_param | second_param << 1) == 0;\n  bool is_third_param_zero = (third_param | fourth_param << 1) == 0;\n  bool are_params_equal = (second_param == fourth_param) && (first_param == third_param);\n  bool is_xor_zero = (second_param ^ fourth_param) == 0;\n  bool is_fourth_param_less_than_or_equal_to_second = (int)fourth_param <= (int)second_param;\n  bool is_result_negative = (int)(fourth_param << 1) >> 0x15 == -1;\n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) && (((int)(second_param << 1) >> 0x15 == -1 && !is_first_param_zero) || ((int)(fourth_param << 1) >> 0x15 == -1 && !is_third_param_zero)))) {\n    result = 0xffffffff;\n  }\n  else {\n    if (!are_params_equal) {\n      if (is_xor_zero) {\n        if (second_param == fourth_param) {\n          is_fourth_param_less_than_or_equal_to_second = true;\n        }\n        if (is_fourth_param_less_than_or_equal_to_second) {\n          if (first_param >= third_param) {\n            result = 1;\n          }\n          else {\n            result = 0xfffffffe;\n          }\n        }\n        else {\n          if (first_param <= third_param) {\n            result = 1;\n          }\n          else {\n            result = 0xfffffffe;\n          }\n        }\n      }\n      else {\n        result = fourth_param >> 0x1f;\n        if (!is_fourth_param_less_than_or_equal_to_second) {\n          result = ~result;\n        }\n        result |= 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800091c",
            "calling": [],
            "imported": false,
            "current_name": "check_params_0800091c"
        },
        "FUN_080046b8": {
            "renaming": {
                "FUN_080046b8": "uart_interrupt_handler_080046b8",
                "*huart": "*uart_handle",
                "HVar1": "status",
                "uVar2": "cr1_reg",
                "pUVar3": "uart_instance",
                "uVar4": "cr3_enabled",
                "uVar5": "sr_reg",
                "UART_Receive_IT": "UART_Receive_IT",
                "UART_Transmit_IT": "UART_Transmit_IT",
                "UART_EndTransmit_IT": "UART_EndTransmit_IT",
                "HAL_UART_ErrorCallback": "HAL_UART_ErrorCallback",
                "USART_ERROR_PE": "USART_ERROR_PE",
                "USART_ERROR_FE": "USART_ERROR_FE",
                "USART_ERROR_NE": "USART_ERROR_NE",
                "USART_ERROR_ORE": "USART_ERROR_ORE",
                "UART_EndRxTransfer": "UART_EndRxTransfer",
                "DMA_HandleTypeDef": "DMA_HandleTypeDef",
                "huart->Instance": "uart_handle->Instance",
                "huart->hdmarx": "uart_handle->hdmarx",
                "DAT_080047d4": "uart_dma_rx_abort_callback",
                "HAL_DMA_Abort_IT": "HAL_DMA_Abort_IT",
                "HAL_OK": "HAL_OK",
                "XferAbortCallback": "XferAbortCallback"
            },
            "code": "void uart_interrupt_handler_080046b8(UART_HandleTypeDef *uart_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t sr_reg;\n  USART_TypeDef *uart_instance;\n  uint32_t cr1_reg;\n  uint32_t cr3_reg;\n  uint32_t error_code = 0;\n  DMA_HandleTypeDef *dma_handle;\n  \n  uart_instance = uart_handle->Instance;\n  sr_reg = uart_instance->SR;\n  cr1_reg = uart_instance->CR1;\n  cr3_reg = uart_instance->CR3;\n  \n  if (((sr_reg & USART_SR_RXNE) == 0) && ((sr_reg & USART_SR_IDLE) != 0) && ((cr1_reg & USART_CR1_IDLEIE) != 0)) {\n    UART_Receive_IT(uart_handle);\n    return;\n  }\n  \n  if (((sr_reg & USART_SR_RXNE) == 0) || ((cr3_reg & USART_CR3_DMAR) == 0 && ((cr1_reg & (USART_CR1_RXNEIE | USART_CR1_PEIE)) == 0))) {\n    if (((sr_reg & USART_SR_TXE) != 0) && ((cr1_reg & USART_CR1_TXEIE) != 0)) {\n      UART_Transmit_IT(uart_handle);\n      return;\n    }\n    if (((sr_reg & USART_SR_TC) != 0) && ((cr1_reg & USART_CR1_TCIE) != 0)) {\n      UART_EndTransmit_IT(uart_handle);\n    }\n  }\n  else {\n    if (((sr_reg & USART_SR_PE) != 0) && ((cr1_reg & USART_CR1_PEIE) != 0)) {\n      error_code |= USART_ERROR_PE;\n    }\n    if (((sr_reg & USART_SR_FE) != 0) && ((cr1_reg & USART_CR1_ERRIE) != 0)) {\n      error_code |= USART_ERROR_FE;\n    }\n    if (((sr_reg & USART_SR_NE) != 0) && ((cr1_reg & USART_CR1_ERRIE) != 0)) {\n      error_code |= USART_ERROR_NE;\n    }\n    if (((sr_reg & USART_SR_ORE) != 0) && ((cr1_reg & USART_CR1_ERRIE) != 0)) {\n      error_code |= USART_ERROR_ORE;\n    }\n    if (error_code != 0) {\n      if (((sr_reg & USART_SR_IDLE) != 0) && ((cr1_reg & USART_CR1_IDLEIE) != 0)) {\n        UART_Receive_IT(uart_handle);\n      }\n      if (((error_code & USART_ERROR_ORE) == 0) && ((cr3_reg & USART_CR3_OVRDIS) == 0)) {\n        HAL_UART_ErrorCallback(uart_handle);\n        error_code = 0;\n        return;\n      }\n      UART_EndRxTransfer(uart_handle);\n      dma_handle = uart_handle->hdmarx;\n      if ((cr3_reg & USART_CR3_DMAR) == 0) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      cr3_reg &= ~(USART_CR3_DMAR);\n      uart_instance->CR3 = cr3_reg;\n      if (dma_handle == NULL) {\n        HAL_UART_ErrorCallback(uart_handle);\n        return;\n      }\n      dma_handle->XferAbortCallback = DAT_080047d4;\n      status = HAL_DMA_Abort_IT(dma_handle);\n      if (status != HAL_OK) {\n        (*dma_handle->XferAbortCallback)(dma_handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT",
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046b8",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "uart_interrupt_handler_080046b8"
        },
        "FUN_08004c8a": {
            "renaming": {
                "FUN_08004c8a": "get_pin_name_from_map_08004c8a",
                "PinName_conflict": "PinName",
                "map": "PinMap",
                "peripheral": "void_pointer",
                "NC": "NotConnected"
            },
            "code": "PinName get_pin_name_from_map_08004c8a(void *peripheral, PinMap *map) {\n  while(true) {\n    if(map->peripheral == NULL) {\n      return NC;\n    }\n    if(map->peripheral == peripheral) {\n      break;\n    }\n    map++;\n  }\n  return map->pin;\n}",
            "called": [
                "pinmap_find_pin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8a",
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "imported": false,
            "current_name": "get_pin_name_from_map_08004c8a"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "wait_for_conversion_08001cd0",
                "*hadc": "hadc",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_time",
                "pAVar5": "adc_instance",
                "Conversion_Timeout_CPU_cycles": "conversion_timeout_cpu_cycles",
                "DAT_08001e30": "ADC_SampleTime_2Cycles_5",
                "uVar6": "cpu_cycles",
                "uVar3": "time_elapsed",
                "iVar4": "sample_time"
            },
            "code": "HAL_StatusTypeDef_conflict wait_for_conversion_08001cd0(ADC_HandleTypeDef *hadc, uint32_t timeout)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t start_time = HAL_GetTick();\n    ADC_TypeDef *adc_instance = hadc->Instance;\n    uint32_t conversion_timeout_cpu_cycles = 0;\n\n    if ((adc_instance->CR2 & ADC_CR2_ADON) == 0)\n    {\n        if (((adc_instance->CR1 & ADC_CR1_EOCIE) == 0) && ((adc_instance->SQR1 & ADC_SQR1_L) == 0))\n        {\n            while ((adc_instance->SR & ADC_SR_EOC) == 0)\n            {\n                if ((timeout != HAL_MAX_DELAY) && ((timeout != 0) && ((HAL_GetTick() - start_time) > timeout)))\n                {\n                    hadc->State |= HAL_ADC_STATE_TIMEOUT;\n                    hadc->Lock = HAL_UNLOCKED;\n                    status = HAL_TIMEOUT;\n                    return status;\n                }\n            }\n            hadc->Instance->SR = 0xffffffed;\n            hadc->State |= HAL_ADC_STATE_REG_EOC;\n            if ((hadc->Instance->CR2 & ADC_CR2_EOCS) == ADC_CR2_EOCS)\n            {\n                hadc->State |= HAL_ADC_STATE_EOC;\n            }\n            status = HAL_OK;\n        }\n        else\n        {\n            uint32_t cpu_cycles = (SystemCoreClock / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC)) * DAT_08001e30;\n            while ((conversion_timeout_cpu_cycles <= cpu_cycles) && (cpu_cycles - conversion_timeout_cpu_cycles != 0))\n            {\n                if ((timeout != HAL_MAX_DELAY) && ((timeout != 0) && ((HAL_GetTick() - start_time) > timeout)))\n                {\n                    hadc->State |= HAL_ADC_STATE_TIMEOUT;\n                    hadc->Lock = HAL_UNLOCKED;\n                    status = HAL_TIMEOUT;\n                    return status;\n                }\n                conversion_timeout_cpu_cycles++;\n            }\n            hadc->Instance->SR = 0xffffffed;\n            hadc->State |= HAL_ADC_STATE_INJ_EOC;\n            if ((hadc->Instance->CR2 & ADC_CR2_EOCS) == ADC_CR2_EOCS)\n            {\n                hadc->State |= HAL_ADC_STATE_EOC;\n            }\n            status = HAL_OK;\n        }\n    }\n    else\n    {\n        hadc->State |= HAL_ADC_STATE_ERROR_CONFIG;\n        hadc->Lock = HAL_UNLOCKED;\n        status = HAL_ERROR;\n    }\n    return status;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cd0",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "wait_for_conversion_08001cd0"
        },
        "FUN_08004178": {
            "renaming": {
                "FUN_08004178": "do_nothing_08004178"
            },
            "code": "\nvoid do_nothing_08004178(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004178",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004178"
        },
        "FUN_08000130": {
            "renaming": {
                "FUN_08000130": "execute_function_if_initialized_08000130",
                "DAT_08000164": "is_initialized",
                "PTR__edata_08000170": "data_end_pointer",
                "DAT_08000174": "function_pointer",
                "PTR_object_8672_0800016c": "object_pointer"
            },
            "code": "void execute_function_if_initialized_08000130(void)\n{\n    if (DAT_08000164 == 0) {\n        if ((*(int *)PTR__edata_08000170 != 0) && (DAT_08000174 != (code *)0x0)) {\n            (*DAT_08000174)();\n            return;\n        }\n        return;\n    }\n    if ((*(int *)PTR__edata_08000170 != 0) && (DAT_08000174 != (code *)0x0)) {\n        (*DAT_08000174)(PTR__edata_08000170, PTR_object_8672_0800016c);\n        return;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000130",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_initialized_08000130"
        },
        "FUN_08004a4c": {
            "renaming": {
                "FUN_08004a4c": "readAnalogPin_08004a4c",
                "pin": "pin",
                "HVar1": "halStatus",
                "uVar2": "adcValue",
                "uhADCxConvertedValue": "convertedValue",
                "AdcChannelConf": "adcChannelConf",
                "AdcHandle": "adcHandle",
                "PTR_PinMap_ADC_08004b2c": "PTR_PinMap_ADC_08004b2c",
                "ADC_TypeDef": "ADC_TypeDef",
                "memset": "memset",
                "get_adc_channel": "getAdcChannel",
                "HAL_ADC_Init": "HAL_ADC_Init",
                "HAL_ADC_ConfigChannel": "HAL_ADC_ConfigChannel",
                "HAL_ADCEx_Calibration_Start": "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start": "HAL_ADC_Start",
                "HAL_ADC_PollForConversion": "HAL_ADC_PollForConversion",
                "HAL_ADC_GetState": "HAL_ADC_GetState",
                "ADC_FLAG_EOC": "ADC_FLAG_EOC",
                "HAL_ADC_GetValue": "HAL_ADC_GetValue",
                "HAL_ADC_Stop": "HAL_ADC_Stop",
                "HAL_ADC_DeInit": "HAL_ADC_DeInit",
                "g_current_pin_08004b30": "g_currentPin"
            },
            "code": "uint16_t readAnalogPin_08004a4c(PinName_conflict pin)\n{\n  HAL_StatusTypeDef_conflict halStatus;\n  uint32_t adcValue;\n  uint16_t convertedValue;\n  ADC_ChannelConfTypeDef adcChannelConf;\n  ADC_HandleTypeDef adcHandle;\n  memset(&adcHandle, 0, sizeof(ADC_HandleTypeDef));\n  adcChannelConf.Channel = 0;\n  adcChannelConf.Rank = 0;\n  adcChannelConf.SamplingTime = 0;\n  convertedValue = 0;\n  adcHandle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, (PinMap_conflict *)PTR_PinMap_ADC_08004b2c);\n  if (adcHandle.Instance == (ADC_TypeDef *)0x0) {\n    convertedValue = 0;\n  }\n  else {\n    adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;\n    adcHandle.Init.ScanConvMode = DISABLE;\n    adcHandle.Init.ContinuousConvMode = DISABLE;\n    adcHandle.Init.DiscontinuousConvMode = DISABLE;\n    adcHandle.Init.ExternalTrigConv = ADC_SOFTWARE_START;\n    adcHandle.State = 0;\n    adcHandle.Init.NbrOfConversion = 1;\n    adcHandle.Init.NbrOfDiscConversion = 0;\n    *g_currentPin = pin;\n    halStatus = HAL_ADC_Init(&adcHandle);\n    if (halStatus == HAL_OK) {\n      adcChannelConf.Channel = getAdcChannel(pin);\n      if (adcChannelConf.Channel < 0x12) {\n        adcChannelConf.Rank = 1;\n        adcChannelConf.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;\n        halStatus = HAL_ADC_ConfigChannel(&adcHandle, &adcChannelConf);\n        if (halStatus == HAL_OK) {\n          halStatus = HAL_ADCEx_Calibration_Start(&adcHandle);\n          if (halStatus == HAL_OK) {\n            halStatus = HAL_ADC_Start(&adcHandle);\n            if (halStatus == HAL_OK) {\n              halStatus = HAL_ADC_PollForConversion(&adcHandle, 10);\n              if (halStatus == HAL_OK) {\n                uint32_t state = HAL_ADC_GetState(&adcHandle);\n                if ((state & ADC_FLAG_EOC) != 0) {\n                  adcValue = HAL_ADC_GetValue(&adcHandle);\n                  convertedValue = (uint16_t)adcValue;\n                }\n                halStatus = HAL_ADC_Stop(&adcHandle);\n                if (halStatus != HAL_OK) {\n                  convertedValue = 0;\n                }\n              }\n              else {\n                convertedValue = 0;\n              }\n            }\n            else {\n              convertedValue = 0;\n            }\n          }\n          else {\n            convertedValue = 0;\n          }\n        }\n        else {\n          convertedValue = 0;\n        }\n      }\n      else {\n        convertedValue = 0;\n      }\n      halStatus = HAL_ADC_DeInit(&adcHandle);\n    }\n    else {\n      convertedValue = 0;\n    }\n  }\n  return convertedValue;\n}",
            "called": [
                "get_adc_channel",
                "HAL_ADC_GetValue",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_GetState",
                "pinmap_peripheral",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_Stop",
                "HAL_ADC_PollForConversion"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a4c",
            "calling": [
                "analogRead"
            ],
            "imported": false,
            "current_name": "readAnalogPin_08004a4c"
        },
        "FUN_08006112": {
            "renaming": {
                "FUN_08006112": "register_exit_function_08006112",
                "param_1": "exit_function",
                "param_2": "arg"
            },
            "code": "void register_exit_function_08006112(void (*exit_function)(void), void *arg) {\n    __cxa_atexit(exit_function, arg);\n    return;\n}",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006112",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "register_exit_function_08006112"
        },
        "FUN_08004974": {
            "renaming": {
                "FUN_08004974": "configure_ADC_pin_08004974",
                "hadc": "adc_handle",
                "puVar1": "pin_value_ptr",
                "GPIOx": "gpio_port",
                "tmpreg": "temporary_register",
                "tmpreg_1": "temporary_register_1",
                "GPIO_InitStruct": "gpio_init_struct",
                "DAT_080049e0": "ADC1",
                "DAT_080049e4": "ADC2"
            },
            "code": "void configure_ADC_pin_08004974(ADC_HandleTypeDef *adc_handle) {\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  GPIO_InitTypeDef gpio_init_struct;\n  uint32_t pin_number;\n  GPIO_TypeDef *gpio_port;\n  if (adc_handle->Instance == DAT_080049e0) {\n    *(uint *)(g_current_pin + 0x18) = *(uint *)(g_current_pin + 0x18) | 0x200;\n  }\n  else if (adc_handle->Instance == DAT_080049e4) {\n    *(uint *)(g_current_pin + 0x18) = *(uint *)(g_current_pin + 0x18) | 0x400;\n  }\n  pin_number = *g_current_pin & 0xf;\n  gpio_port = set_GPIO_Port_Clock((uint)((int)(char)*g_current_pin << 0x18) >> 0x1c);\n  gpio_init_struct.Pin = 1 << pin_number & 0xffff;\n  gpio_init_struct.Mode = GPIO_MODE_ANALOG;\n  gpio_init_struct.Pull = GPIO_NOPULL;\n  HAL_GPIO_Init(gpio_port, &gpio_init_struct);\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004974",
            "calling": [
                "HAL_ADC_Init"
            ],
            "imported": false,
            "current_name": "configure_ADC_pin_08004974"
        },
        "FUN_08003520": {
            "renaming": {
                "FUN_08003520": "handle_I2C_errors_08003520",
                "*hi2c": "*i2c_handle",
                "HVar1": "i2c_state",
                "pIVar2": "i2c_instance",
                "uVar3": "sr1_reg",
                "uVar4": "cr2_reg",
                "DAT_080035f8": "I2C_SR1_ERROR_MASK",
                "0x100": "I2C_CR2_ACK",
                "1": "I2C_ERROR_ACK_FAILURE",
                "0xfffffeff": "I2C_SR1_ERROR_MASK ^ I2C_SR1_ACK_FAILURE",
                "0x8000": "I2C_CR1_POS",
                "2": "I2C_ERROR_ADDR_FAILURE",
                "0x10200": "I2C_SR1_ADDR_MASK",
                "0xfffffdff": "I2C_SR1_ERROR_MASK ^ I2C_SR1_ADDR_FAILURE",
                "0x10400": "I2C_SR1_STOPF",
                "4": "I2C_ERROR_STOP_FAILURE",
                "0xfffffbff": "I2C_SR1_ERROR_MASK ^ I2C_SR1_STOP_FAILURE",
                "0x10800": "I2C_SR1_BERR",
                "8": "I2C_ERROR_BUS_FAILURE",
                "0xfffff7ff": "I2C_SR1_ERROR_MASK ^ I2C_SR1_BUS_FAILURE"
            },
            "code": "void handle_I2C_errors_08003520(I2C_HandleTypeDef *i2c_handle) {\n  HAL_I2C_StateTypeDef i2c_state;\n  I2C_TypeDef *i2c_instance;\n  uint16_t sr1_reg;\n  uint16_t cr2_reg;\n  i2c_instance = i2c_handle->Instance;\n  sr1_reg = i2c_instance->SR1;\n  cr2_reg = i2c_instance->CR2;\n  if (((sr1_reg & DAT_080035f8) != 0) && ((cr2_reg & I2C_CR2_ACK) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_ACK_FAILURE;\n    i2c_instance->SR1 = DAT_080035f8 ^ I2C_SR1_ACK_FAILURE;\n    i2c_instance->CR1 |= I2C_CR1_POS;\n  }\n  if (((sr1_reg & I2C_SR1_ADDR_MASK) != 0) && ((cr2_reg & I2C_CR2_ACK) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_ADDR_FAILURE;\n    i2c_instance->SR1 = DAT_080035f8 ^ I2C_SR1_ADDR_FAILURE;\n  }\n  if (((sr1_reg & I2C_SR1_STOPF) != 0) && ((cr2_reg & I2C_CR2_ACK) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_STOP_FAILURE;\n    i2c_instance->SR1 = DAT_080035f8 ^ I2C_SR1_STOP_FAILURE;\n  }\n  if (((sr1_reg & I2C_SR1_BERR) != 0) && ((cr2_reg & I2C_CR2_ACK) != 0)) {\n    i2c_handle->ErrorCode |= I2C_ERROR_BUS_FAILURE;\n    i2c_instance->SR1 = DAT_080035f8 ^ I2C_SR1_BUS_FAILURE;\n  }\n  if (i2c_handle->ErrorCode != 0) {\n    I2C_ITError(i2c_handle);\n  }\n  return;\n}\n",
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003520",
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_errors_08003520"
        },
        "FUN_08002ca6": {
            "renaming": {
                "FUN_08002ca6": "handle_I2C_transfer_08002ca6",
                "*hi2c": "*i2c_handle",
                "HVar1": "current_state",
                "*puVar2": "*data_ptr"
            },
            "code": "HAL_StatusTypeDef_conflict handle_I2C_transfer_08002ca6(I2C_HandleTypeDef *i2c_handle)\n{\n  HAL_I2C_StateTypeDef current_state = i2c_handle->State;\n  if (i2c_handle->XferCount != 0) {\n    uint8_t *data_ptr = i2c_handle->pBuffPtr;\n    i2c_handle->pBuffPtr = data_ptr + 1;\n    *data_ptr = (uint8_t)i2c_handle->Instance->DR;\n    i2c_handle->XferCount--;\n    if ((i2c_handle->XferCount == 0) && (current_state == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2c_handle->Instance->CR2 &= 0xfffffbff;\n      i2c_handle->PreviousState = 0x22;\n      i2c_handle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2c_handle);\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca6",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_I2C_transfer_08002ca6"
        },
        "FUN_08002ca4": {
            "renaming": {
                "FUN_08002ca4": "do_nothing_08002ca4"
            },
            "code": "\nvoid do_nothing_08002ca4(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ca4",
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "do_nothing_08002ca4"
        },
        "FUN_08007328": {
            "renaming": {
                "FUN_08007328": "do_nothing_08007328"
            },
            "code": "\nvoid do_nothing_08007328(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007328",
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "do_nothing_08007328"
        },
        "FUN_08005b54": {
            "renaming": {
                "FUN_08005b54::FUN_08005b54": "initializeSerial",
                "this": "serialObject",
                "peripheral": "peripheral",
                "PVar1": "rxPin",
                "extraout_r1": "ctx",
                "ctx": "ctx",
                "extraout_r1_00": "ctx",
                "(this->super_Stream).super_Print.write_error": "serialObject->super_Stream.super_Print.write_error",
                "(this->super_Stream)._timeout": "serialObject->super_Stream._timeout",
                "(this->super_Stream).super_Print._vptr_Print": "serialObject->super_Stream.super_Print._vptr_Print",
                "PTR_Serial2_08005ba4": "serial2Pointer",
                "setRx": "setRx",
                "setTx": "setTx",
                "PinMap_conflict": "PinMap_conflict",
                "PTR_PinMap_UART_RX_08005ba8": "rxPinMapPointer",
                "(this->_serial).pin_rx": "serialObject->_serial.pin_rx",
                "PTR_PinMap_UART_TX_08005bac": "txPinMapPointer",
                "(this->_serial).pin_tx": "serialObject->_serial.pin_tx",
                "init": "init",
                "FUN_08005b54": "initializeSerial_08005b54"
            },
            "code": "initializeSerial_08005b54* __thiscall initializeSerial_08005b54(initializeSerial_08005b54* serialObject, void* peripheral) {\n    PinName rxPin;\n    EVP_PKEY_CTX* ctx;\n    serialObject->super_Stream.super_Print.write_error = 0;\n    serialObject->super_Stream._timeout = 1000;\n    serialObject->super_Stream.super_Print._vptr_Print = (_func_int_varargs**)writePointer;\n    if (serialObject == (initializeSerial_08005b54*)PTR_Serial2_08005ba4) {\n        setRx(serialObject, 0);\n        setTx(serialObject, 1);\n        ctx = contextPointer1;\n    }\n    else {\n        rxPin = pinmap_pin(peripheral, (PinMap_conflict*)PTR_PinMap_UART_RX_08005ba8);\n        serialObject->_serial.pin_rx = rxPin;\n        PinName txPin = pinmap_pin(peripheral, (PinMap_conflict*)PTR_PinMap_UART_TX_08005bac);\n        serialObject->_serial.pin_tx = txPin;\n        ctx = contextPointer2;\n    }\n    init(serialObject, ctx);\n    return serialObject;\n}",
            "called": [
                "pinmap_pin",
                "setTx",
                "setRx",
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b54",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initializeSerial_08005b54"
        },
        "FUN_08004618": {
            "renaming": {
                "FUN_08004618": "receive_data_08004618",
                "huart": "uart",
                "pbVar1": "rx_buffer_ptr",
                "uVar2": "word_length",
                "puVar3": "rx_buffer_ptr",
                "DAT_08005064": "received_data",
                "HAL_UART_STATE_BUSY_RX": "HAL_BUSY",
                "HAL_UART_STATE_READY": "HAL_OK",
                "pRxBuffPtr": "rx_buffer_ptr",
                "Instance": "uart->Instance",
                "Init": "uart->Init",
                "RxState": "uart->RxState",
                "RxXferCount": "uart->RxXferCount",
                "CR1": "uart->Instance->CR1",
                "CR3": "uart->Instance->CR3"
            },
            "code": "HAL_StatusTypeDef receive_data_08004618(UART_HandleTypeDef *uart)\n{\n  uint16_t word_length = uart->Init.WordLength;\n  uint8_t parity = uart->Init.Parity;\n  uint8_t *rx_buffer_ptr = uart->pRxBuffPtr;\n  uint8_t DAT_08005064 = (uint8_t)uart->Instance->DR;\n\n  if (uart->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n\n  if (word_length == 0x1000) {\n    if (parity == 0) {\n      *(uint16_t *)rx_buffer_ptr = (uint16_t)((uart->Instance->DR << 0x17) >> 0x17);\n      rx_buffer_ptr += 2;\n    }\n    else {\n      *(uint16_t *)rx_buffer_ptr = (uint16_t)DAT_08005064 & 0xff;\n      rx_buffer_ptr++;\n    }\n  }\n  else if (parity == 0) {\n    *rx_buffer_ptr = DAT_08005064;\n    rx_buffer_ptr++;\n  }\n  else {\n    *rx_buffer_ptr = DAT_08005064 & 0x7f;\n    rx_buffer_ptr++;\n  }\n\n  uart->RxXferCount--;\n\n  if (uart->RxXferCount != 0) {\n    return HAL_OK;\n  }\n\n  uart->Instance->CR1 &= 0xffffffdf;\n  uart->Instance->CR1 &= 0xfffffeff;\n  uart->Instance->CR3 &= 0xfffffffe;\n\n  uart->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uart);\n\n  return HAL_OK;\n}",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004618",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "receive_data_08004618"
        },
        "FUN_080060a6": {
            "renaming": {
                "FUN_080060a6": "handle_gpio_exti_irq_080060a6",
                "uVar1": "gpio_pins"
            },
            "code": "void handle_gpio_exti_irq_080060a6(void)\n{\n  uint16_t gpio_pins = 0x20;\n  while (gpio_pins < 0x201) {\n    HAL_GPIO_EXTI_IRQHandler(gpio_pins);\n    gpio_pins = gpio_pins << 1;\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060a6",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_exti_irq_080060a6"
        },
        "FUN_08001c30": {
            "renaming": {
                "FUN_08001c30": "loop_forever_08001c30"
            },
            "code": "void loop_forever_08001c30(void)\n{\n  while(true) {\n    // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c30",
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "imported": false,
            "current_name": "loop_forever_08001c30"
        },
        "FUN_08005c72": {
            "renaming": {
                "__thiscall Print::FUN_08005c72": "print_buffer",
                "this": "printer",
                "buffer": "buffer",
                "size": "size",
                "pPVar1": "pPrinter",
                "sVar2": "count",
                "FUN_08005c72": "print_buffer_08005c72"
            },
            "code": "size_t __thiscall print_buffer_08005c72(Print *printer, uint8_t *buffer, size_t size) {\n    Print *pPrinter;\n    size_t count = 0;\n\n    pPrinter = printer;\n    while (size > 0) {\n        pPrinter = (Print *)(**printer->_vptr_Print)(pPrinter, (uint)*buffer);\n        if (pPrinter == (Print *)0x0) {\n            break;\n        }\n        count++;\n        buffer++;\n        size--;\n    }\n    return count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c72",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_08005c72"
        },
        "FUN_08006c40": {
            "renaming": {
                "std_isra_0": "initialize_data_structure",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "temporary_variable",
                "DAT_08006c78": "constant_value1",
                "DAT_08006c7c": "constant_value2",
                "DAT_08006c80": "constant_value3",
                "DAT_08006c84": "constant_value4",
                "FUN_08006c40": "initialize_data_structure_08006c40"
            },
            "code": "void initialize_data_structure_08006c40(undefined4 *data_structure, undefined2 value1, undefined2 value2)\n{\n    // Initialize all elements of data_structure to 0\n    data_structure[0] = 0;\n    data_structure[1] = 0;\n    data_structure[2] = 0;\n    *(undefined2 *)(data_structure + 3) = value1;\n    data_structure[0x19] = 0;\n    *(undefined2 *)((int)data_structure + 0xe) = value2;\n    data_structure[4] = 0;\n    data_structure[5] = 0;\n    data_structure[6] = 0;\n    memset(data_structure + 0x17, 0, 8);\n    // Initialize remaining elements of data_structure\n    data_structure[8] = data_structure;\n    data_structure[9] = DAT_08006c78;\n    data_structure[10] = DAT_08006c7c;\n    data_structure[0xb] = DAT_08006c80;\n    data_structure[0xc] = DAT_08006c84;\n    return;\n}",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c40",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08006c40"
        },
        "FUN_0800048c": {
            "renaming": {
                "FUN_0800048c": "calculate_0800048c",
                "param_1": "numerator",
                "param_2": "denominator",
                "iVar5": "shift_count",
                "uVar6": "quotient",
                "iVar7": "shift_count",
                "uVar8": "numerator_high",
                "bVar9": "carry",
                "bVar10": "quotient_high_bit",
                "bVar11": "quotient_high_bit_prev",
                "bVar1": "bit",
                "uVar2": "numerator",
                "uVar3": "shift_count",
                "uVar4": "denominator",
                "uVar5": "numerator_shifted",
                "uVar7": "quotient_high"
            },
            "code": "ulonglong calculate_0800048c(uint numerator, uint denominator)\n{\n    byte bit;\n    uint numerator_shifted;\n    uint quotient;\n    int shift_count;\n    uint quotient_high;\n    uint numerator_high;\n    bool carry;\n    bool quotient_high_bit;\n    bool quotient_high_bit_prev;\n    \n    if ((numerator | denominator) == 0) {\n        return CONCAT44(denominator, numerator);\n    }\n    \n    shift_count = 0x432;\n    numerator_high = denominator >> 0x16;\n    if (numerator_high != 0) {\n        shift_count = 3;\n        if (denominator >> 0x19 != 0) {\n            shift_count = 6;\n        }\n        if (denominator >> 0x1c != 0) {\n            shift_count += 3;\n        }\n        quotient = shift_count - ((int)denominator >> 0x1f);\n        numerator_shifted = numerator << (0x20 - quotient & 0xff);\n        numerator = numerator >> (quotient & 0xff) | denominator << (0x20 - quotient & 0xff);\n        denominator = denominator >> (quotient & 0xff);\n        shift_count = quotient + 0x432;\n    }\n    if (0xfffff < denominator) {\n        if (0x1fffff < denominator) {\n            bit = (byte)numerator;\n            numerator = numerator >> 1 | (uint)(denominator & 1) << 0x1f;\n            quotient_high = (uint)(bit & 1) << 0x1f | numerator_high >> 1;\n            shift_count++;\n            if (0xffbfffff < (uint)(shift_count * 0x200000)) {\n                return 0x7ff0000000000000;\n            }\n        }\n        quotient_high_bit = 0x7fffffff < numerator_high;\n        if (numerator_high == 0x80000000) {\n            quotient_high_bit = (numerator & 1) != 0;\n        }\n        return CONCAT44(denominator + shift_count * 0x100000 + (uint)CARRY4(numerator,(uint)quotient_high_bit), numerator + quotient_high_bit);\n    }\n    carry = (numerator_high & 0x80000000) != 0;\n    numerator_high = numerator_high << 1;\n    quotient = numerator * 2;\n    quotient_high_bit_prev = CARRY4(numerator,numerator);\n    numerator = quotient + (uint)carry;\n    denominator = denominator * 2 + (uint)(quotient_high_bit_prev || CARRY4(quotient,(uint)carry));\n    shift_count--;\n    if ((denominator & 0x100000) != 0) {\n        bit = (byte)numerator;\n        numerator = numerator >> 1 | (uint)(denominator & 1) << 0x1f;\n        quotient_high = (uint)(bit & 1) << 0x1f | numerator_high >> 1;\n        shift_count++;\n    }\n    else {\n        quotient_high = numerator_high;\n    }\n    if (denominator == 0) {\n        numerator_shifted = numerator;\n    }\n    else {\n        numerator_shifted = denominator;\n    }\n    shift_count = count_leading_zeroes(numerator_shifted);\n    if (denominator == 0) {\n        shift_count += 0x20;\n    }\n    quotient = shift_count - 0xb;\n    quotient_high_bit_prev = SBORROW4(quotient,0x20);\n    quotient_high_bit = (int)(shift_count - 0x2b) < 0;\n    if (shift_count - 0x2b == 0) {\n        quotient_high_bit = true;\n    }\n    if ((int)quotient < 0x20) {\n        quotient_high_bit_prev = SCARRY4(shift_count - 0x1f,0xc);\n        shift_count -= 0x1f;\n        quotient_high_bit = shift_count < 0 || shift_count == 0 && quotient_high_bit_prev;\n        quotient = quotient;\n        if (!quotient_high_bit && quotient_high_bit_prev == quotient_high_bit) {\n            numerator_shifted = numerator_shifted << (quotient & 0xff);\n            denominator = denominator >> (0xcU - shift_count & 0xff);\n            goto LAB_08000318;\n        }\n    }\n    if (quotient_high_bit || quotient_high_bit_prev != quotient_high_bit) {\n        quotient_high_bit_prev = 0x20 - quotient;\n    }\n    numerator_shifted = numerator_shifted << (quotient & 0xff);\n    if (quotient_high_bit || quotient_high_bit_prev != quotient_high_bit) {\n        numerator_shifted |= numerator >> (quotient_high_bit_prev & 0xff);\n    }\n    if (quotient_high_bit || quotient_high_bit_prev != quotient_high_bit) {\n        numerator = numerator << (quotient & 0xff);\n    }\n    LAB_08000318:\n    if ((int)quotient <= shift_count) {\n        return CONCAT44(denominator + (shift_count - quotient) * 0x100000, numerator);\n    }\n    quotient_high_bit_prev = ~(shift_count - quotient);\n    if (0x1e < (int)quotient_high_bit_prev) {\n        return (ulonglong)(numerator >> (quotient_high_bit_prev - 0x1f & 0xff));\n    }\n    shift_count = quotient_high_bit_prev - 0x13;\n    if (shift_count == 0 || shift_count < 0 != SCARRY4(quotient_high_bit_prev - 0x1f,0xc)) {\n        quotient_high_bit_prev++;\n        return CONCAT44(numerator >> (quotient_high_bit_prev & 0xff), numerator << (0x20 - quotient_high_bit_prev & 0xff) | numerator_shifted >> (quotient_high_bit_prev & 0xff));\n    }\n    return (ulonglong)(numerator >> (0x20 - (0xcU - shift_count) & 0xff) | numerator_shifted << (0xcU - shift_count & 0xff));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800048c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_0800048c"
        },
        "FUN_0800157c": {
            "renaming": {
                "FUN_0800157c::FUN_0800157c": "initialize_pins",
                "SO": "signal_out",
                "CS": "chip_select",
                "SCK": "clock",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "FUN_0800157c": "initialize_pins_0800157c"
            },
            "code": "initialize_pins_0800157c * __thiscall initialize_pins_0800157c(initialize_pins_0800157c *this, uchar signal_out, uchar chip_select, uchar clock)\n    {\n        this->signal_out = signal_out;\n        this->chip_select = chip_select;\n        this->clock = clock;\n        pinMode((uint)signal_out, OUTPUT);\n        pinMode((uint)this->chip_select, INPUT);\n        pinMode((uint)this->clock, INPUT);\n        digitalWrite((uint)this->chip_select, HIGH);\n        digitalWrite((uint)this->clock, LOW);\n        return this;\n    }",
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800157c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initialize_pins_0800157c"
        },
        "FUN_080045a2": {
            "renaming": {
                "FUN_080045a2": "receive_data_080045a2",
                "*huart": "*uart_handle",
                "*pData": "*data_ptr",
                "Size": "data_size",
                "HAL_UART_STATE_READY": "HAL_UART_STATE_READY",
                "HAL_BUSY": "HAL_BUSY",
                "(uint8_t *)0x0": "NULL",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_LOCKED": "HAL_LOCKED",
                "pData": "data_ptr",
                "huart": "uart_handle",
                "pRxBuffPtr": "p_rx_buff_ptr",
                "RxXferSize": "rx_xfer_size",
                "RxXferCount": "rx_xfer_count",
                "ErrorCode": "error_code",
                "RxState": "rx_state",
                "Lock": "lock",
                "Instance": "instance",
                "CR1": "CR1",
                "CR3": "CR3",
                "USART_CR1_RXNEIE": "USART_CR1_RXNEIE",
                "USART_CR3_EIE": "USART_CR3_EIE",
                "USART_CR1_UE": "USART_CR1_UE"
            },
            "code": "HAL_StatusTypeDef receive_data_080045a2(UART_HandleTypeDef *uart_handle, uint8_t *data_ptr, uint16_t data_size) {\n    if (uart_handle->RxState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data_ptr == NULL || data_size == 0) {\n        return HAL_ERROR;\n    }\n    if (uart_handle->Lock == HAL_LOCKED) {\n        return HAL_BUSY;\n    }\n    uart_handle->pRxBuffPtr = data_ptr;\n    uart_handle->RxXferSize = data_size;\n    uart_handle->RxXferCount = data_size;\n    uart_handle->ErrorCode = 0;\n    uart_handle->RxState = HAL_UART_STATE_BUSY_RX;\n    uart_handle->Lock = HAL_UNLOCKED;\n    uart_handle->Instance->CR1 |= USART_CR1_RXNEIE;\n    uart_handle->Instance->CR3 |= USART_CR3_EIE;\n    uart_handle->Instance->CR1 |= USART_CR1_UE;\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045a2",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "receive_data_080045a2"
        },
        "FUN_08001c32": {
            "renaming": {
                "FUN_08001c32": "initialize_evp_pkey_ctx_08001c32",
                "ctx": "evp_pkey_ctx",
                "hw_config_FUN_08001c32": "initialize_hw_config"
            },
            "code": "int initialize_evp_pkey_ctx_08001c32(EVP_PKEY_CTX *evp_pkey_ctx) {\n  initialize_hw_config();\n  return (int)evp_pkey_ctx;\n}",
            "called": [
                "hw_config_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c32",
            "calling": [
                "premain"
            ],
            "imported": false,
            "current_name": "initialize_evp_pkey_ctx_08001c32"
        },
        "FUN_080047e8": {
            "renaming": {
                "FUN_080047e8": "get_uart_rx_and_global_state_080047e8",
                "*huart": "*uart_handler",
                "huart": "uart_handler",
                "RxState": "rx_state",
                "gState": "global_state"
            },
            "code": "HAL_UART_StateTypeDef get_uart_rx_and_global_state_080047e8(UART_HandleTypeDef *huart) {\n  HAL_UART_StateTypeDef rx_state = huart->RxState;\n  HAL_UART_StateTypeDef global_state = huart->gState;\n  return rx_state | global_state;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047e8",
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "imported": false,
            "current_name": "get_uart_rx_and_global_state_080047e8"
        },
        "FUN_080057b4": {
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "ulPin": "pin_number",
                "ulMode": "mode",
                "_Var1": "is_pin_configured",
                "pin": "pin_name",
                "PTR_digitalPin_08005838": "digital_pin_array",
                "NC": "NC",
                "is_pin_configured": "is_pin_configured_pin",
                "PTR_g_anOutputPinConfigured_0800583c": "output_pin_config_array",
                "is_pin_in_pinmap": "is_pin_in_pinmap_array",
                "PinMap_PWM_08005840": "pwm_pin_map_array",
                "pwm_stop": "stop_pwm",
                "reset_pin_configured": "reset_pin_configured",
                "digital_io_init": "digital_io_init",
                "set_pin_configured": "set_pin_configured",
                "PTR_g_digPinConfigured_08005844": "digital_pin_configured_array"
            },
            "code": "void configure_pin_080057b4(uint32_t pin_number, uint32_t mode) {\n  bool is_pin_configured;\n  PinName_conflict pin_name;\n  if (pin_number < 0x3c) {\n    pin_name = PTR_digitalPin_08005838[pin_number];\n  }\n  else {\n    pin_name = NC;\n  }\n  if (pin_name != NC) {\n    is_pin_configured = is_pin_configured_pin(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    if (is_pin_configured) {\n      bool is_pin_in_pinmap = is_pin_in_pinmap_array(pin_name, (PinMap_conflict *)pwm_pin_map_array);\n      if (is_pin_in_pinmap) {\n        stop_pwm(pin_name);\n      }\n      reset_pin_configured(pin_name, (uint32_t *)PTR_g_anOutputPinConfigured_0800583c);\n    }\n    switch (mode) {\n      case 0:\n        digital_io_init(pin_name, 0, 0);\n        break;\n      case 1:\n        digital_io_init(pin_name, 1, 0);\n        break;\n      case 2:\n        digital_io_init(pin_name, 0, 1);\n        break;\n      case 3:\n        digital_io_init(pin_name, 0, 2);\n        break;\n    }\n    set_pin_configured(pin_name, (uint32_t *)PTR_g_digPinConfigured_08005844);\n  }\n}",
            "called": [
                "digital_io_init",
                "pwm_stop",
                "is_pin_configured",
                "reset_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057b4",
            "calling": [
                "setup",
                "MAX31855",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_080057b4"
        },
        "FUN_08007334": {
            "renaming": {
                "FUN_08007334": "do_nothing_08007334"
            },
            "code": "\nvoid do_nothing_08007334(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007334",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08007334"
        },
        "FUN_08001b18": {
            "renaming": {
                "FUN_08001b18": "create_08001b18",
                "this": "obj",
                "Input": "input",
                "Output": "output",
                "Setpoint": "setpoint",
                "Kp": "Kp",
                "Ki": "Ki",
                "Kd": "Kd",
                "ControllerDirection": "controller_direction"
            },
            "code": "double* input_ptr;\ndouble* output_ptr;\ndouble* setpoint_ptr;\ndouble kp;\ndouble ki;\ndouble kd;\nint controller_direction;\n\ncreate_08001b18* create_08001b18::create_08001b18(create_08001b18* obj, double* input, double* output, double* setpoint, double Kp, double Ki, double Kd, int controller_direction)\n{\n  input_ptr = input;\n  output_ptr = output;\n  setpoint_ptr = setpoint;\n  kp = Kp;\n  ki = Ki;\n  kd = Kd;\n  controller_direction = controller_direction;\n  create_08001b18(obj, input_ptr, output_ptr, setpoint_ptr, kp, ki, kd, 1, controller_direction);\n  return obj;\n}",
            "called": [
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b18",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "create_08001b18"
        },
        "FUN_0800092c": {
            "renaming": {
                "FUN_0800092c": "CheckParameters_0800092c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "result",
                "bVar2": "is_first_param_zero",
                "bVar3": "is_third_param_zero"
            },
            "code": "uint CheckParameters_0800092c(uint first_param, uint second_param, uint third_param, uint fourth_param)\n{\n  uint result;\n  bool is_first_param_zero = (first_param | (second_param << 1)) == 0;\n  bool is_third_param_zero = (third_param | (fourth_param << 1)) == 0;\n  bool are_second_and_fourth_same = second_param == fourth_param;\n  bool are_first_and_third_same = first_param == third_param;\n  bool is_second_xor_fourth_zero = (second_param ^ fourth_param) == 0;\n  bool is_second_less_or_equal_to_fourth = second_param <= fourth_param;\n  bool is_third_less_or_equal_to_first = third_param <= first_param;\n  bool is_second_shifted_left_1_bit_negative = ((int)(second_param << 1) >> 0x15) == -1;\n  bool is_fourth_shifted_left_1_bit_negative = ((int)(fourth_param << 1) >> 0x15) == -1;\n  if ((is_second_shifted_left_1_bit_negative || is_fourth_shifted_left_1_bit_negative) && ((is_second_shifted_left_1_bit_negative && !is_first_param_zero) || (is_fourth_shifted_left_1_bit_negative && !is_third_param_zero))) {\n    result = 1;\n  }\n  else if (!is_first_param_zero && !is_third_param_zero && !are_second_and_fourth_same && !are_first_and_third_same) {\n    if (is_second_xor_fourth_zero) {\n      if (is_third_less_or_equal_to_first) {\n        result = ~((int)fourth_param >> 0x1f) | 1;\n      }\n      else {\n        result = ((int)fourth_param >> 0x1f) | 1;\n      }\n    }\n    else {\n      if (is_second_less_or_equal_to_fourth) {\n        result = ((int)fourth_param >> 0x1f) | 1;\n      }\n      else {\n        result = ~((int)fourth_param >> 0x1f) | 1;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800092c",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "CheckParameters_0800092c"
        },
        "FUN_08005d8a": {
            "renaming": {
                "FUN_08005d8a": "print_number_08005d8a",
                "this": "print_obj",
                "n": "number",
                "base": "base",
                "sVar1": "result",
                "FUN_08005d8aNumber": "print_number_base",
                "_vptr_Print": "_vptr_Print"
            },
            "code": "size_t __thiscall print_number_08005d8a(Print *print_obj, ulong number, int base) {\n  size_t result;\n  if (base != 0) {\n    result = print_number_08005d8a_base(print_obj, number, (uint8_t)base);\n  } else {\n    result = (**print_obj->_vptr_Print)(print_obj, number & 0xff);\n  }\n  return result;\n}",
            "called": [
                "printNumber"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d8a",
            "calling": [
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_number_08005d8a"
        },
        "FUN_08002560": {
            "renaming": {
                "FUN_08002560": "update_clock_source_08002560",
                "CLKSource": "source",
                "*DAT_0800257c": "clock_source_ptr"
            },
            "code": "void update_clock_source_08002560(uint32_t source) {\n  if (source != 4) {\n    *DAT_0800257c = *DAT_0800257c & 0xfffffffb;\n    return;\n  }\n  *DAT_0800257c = *DAT_0800257c | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002560",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "update_clock_source_08002560"
        },
        "FUN_08006e90": {
            "renaming": {
                "FUN_08006e90": "find_byte_in_memory_08006e90",
                "__s": "memory",
                "__c": "byte_to_find",
                "__n": "memory_size",
                "pbVar1": "current_byte",
                "pbVar2": "current_byte_checked"
            },
            "code": "void* find_byte_in_memory_08006e90(void* memory, int byte_to_find, size_t memory_size){\n  unsigned char* current_byte = (unsigned char*) memory;\n  while(current_byte < (unsigned char*)memory + memory_size){\n    if(*current_byte == (unsigned char)byte_to_find){\n      return (void*)current_byte;\n    }\n    current_byte++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e90",
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_08006e90"
        },
        "FUN_0800417a": {
            "renaming": {
                "FUN_0800417a": "do_nothing_0800417a"
            },
            "code": "\nvoid do_nothing_0800417a(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417a",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800417a"
        },
        "FUN_08006920": {
            "renaming": {
                "FUN_08006920": "allocate_memory_08006920",
                "param_1": "error_code",
                "param_2": "size",
                "puVar1": "errno_ptr",
                "pcVar2": "memory_ptr"
            },
            "code": "void allocate_memory_08006920(int *error_code, int size) {\n  undefined *errno_ptr = PTR_errno_0800693c;\n  *(undefined4 *)PTR_errno_0800693c = 0;\n  caddr_t memory_ptr = _sbrk(size);\n  if ((memory_ptr == (caddr_t)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006920",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08006920"
        },
        "FUN_080008ba": {
            "renaming": {
                "FUN_080008ba": "calculate_result_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "flag1"
            },
            "code": "ulonglong calculate_result_080008ba(uint input1, uint input2, uint input3, uint input4)\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  bool flag1;\n  \n  temp2 = input4 >> 0x14;\n  temp5 = input2;\n  if (input3 != input4 || temp2 != input4) {\n    if (input3 == input4) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp5 = input4, temp2 != input4)) {\n        goto LAB_0800072c;\n      }\n    }\n    else if (temp2 == input4) {\n      input1 = input3;\n      temp5 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\n        goto LAB_080006f0;\n      }\n    }\n    else {\n      flag1 = (input1 | input2 << 1) == 0;\n      if (!flag1) {\n        flag1 = (input3 | input4 << 1) == 0;\n      }\n      if (!flag1) {\n        if (input3 == 0) {\n          temp5 = input2 & 0x80000000;\n          do {\n            temp1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp5;\n          if (temp2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp5 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp5 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp5,input1) | 0x7ff8000000000000;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008ba",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080008ba"
        },
        "FUN_08002d1c": {
            "renaming": {
                "FUN_08002d1c": "handle_i2c_events_08002d1c",
                "hi2c": "i2c_handle",
                "XferOptions": "I2C_TRANSFER_OPTIONS",
                "State": "I2C_STATE",
                "DAT_08002dac": "I2C_LAST_FRAME",
                "Instance": "I2C_INSTANCE",
                "CR2": "I2C_CR2",
                "SR1": "I2C_SR1",
                "CR1": "I2C_CR1",
                "PreviousState": "I2C_PREVIOUS_STATE",
                "HAL_I2C_STATE_LISTEN": "I2C_STATE_LISTEN",
                "HAL_I2C_STATE_BUSY_TX": "I2C_STATE_BUSY_TX",
                "HAL_I2C_STATE_READY": "I2C_STATE_READY",
                "HAL_I2C_MODE_NONE": "I2C_MODE_NONE",
                "HAL_I2C_ListenCpltCallback": "I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback": "I2C_SlaveTxCpltCallback"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_events_08002d1c(I2C_HandleTypeDef *i2c_handle)\n{\n    if (((i2c_handle->XferOptions == I2C_FIRST_FRAME) || (i2c_handle->XferOptions == I2C_NEXT_FRAME)) && (i2c_handle->State == HAL_I2C_STATE_LISTEN)) {\n        i2c_handle->XferOptions = DAT_08002dac;\n        i2c_handle->Instance->CR2 &= 0xfffff8ff;\n        i2c_handle->Instance->SR1 = 0xfffffbff;\n        i2c_handle->Instance->CR1 &= 0xfffffbff;\n        i2c_handle->PreviousState = I2C_STATE_NONE;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->Mode = I2C_MODE_NONE;\n        HAL_I2C_ListenCpltCallback(i2c_handle);\n    } else if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n        i2c_handle->XferOptions = DAT_08002dac;\n        i2c_handle->PreviousState = I2C_STATE_BUSY_TX;\n        i2c_handle->State = HAL_I2C_STATE_READY;\n        i2c_handle->Mode = I2C_MODE_NONE;\n        i2c_handle->Instance->CR2 &= 0xfffff8ff;\n        i2c_handle->Instance->SR1 = 0xfffffbff;\n        i2c_handle->Instance->CR1 &= 0xfffffbff;\n        HAL_I2C_SlaveTxCpltCallback(i2c_handle);\n    } else {\n        i2c_handle->Instance->SR1 = 0xfffffbff;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d1c",
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_events_08002d1c"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "return_error_08005714",
                "file_UNUSED": "file_unused"
            },
            "code": "int return_error_08005714(int file_unused)\n{\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_error_08005714"
        },
        "FUN_08003da4": {
            "renaming": {
                "FUN_08003da4": "calculatePeripheralClock_08003da4",
                "PeriphClk": "peripheralClock",
                "uVar1": "result",
                "uVar2": "temp",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMulFactorTable",
                "PTR_DAT_08003e8c": "PLLMUL_FACTOR_TABLE_PTR",
                "DAT_08003e90": "PLLMUL_FACTOR_TABLE",
                "DAT_08003e94": "DAT_08003e94",
                "DAT_08003e98": "DAT_08003e98",
                "PTR_DAT_08003e8c + 8": "PLLMUL_FACTOR_TABLE_PTR + 8",
                "PTR_DAT_08003e8c + 4": "PLLMUL_FACTOR_TABLE_PTR + 4",
                "PTR_DAT_08003e8c + 0x10": "PREDIV_FACTOR_TABLE_PTR + 0x10",
                "aPredivFactorTable [2]": "predivFactorTable[2]",
                "aPLLMULFactorTable [16]": "pllMulFactorTable[16]",
                "*(undefined4 *)(PTR_DAT_08003e8c + 8)": "*(uint32_t *)(PLLMUL_FACTOR_TABLE_PTR + 8)",
                "*(undefined4 *)(PTR_DAT_08003e8c + 4)": "*(uint32_t *)(PLLMUL_FACTOR_TABLE_PTR + 4)",
                "*(undefined4 *)PTR_DAT_08003e8c": "*(uint32_t *)PLLMUL_FACTOR_TABLE_PTR",
                "*(uint8_t (*) [2])(PTR_DAT_08003e8c + 0x10)": "*(uint8_t (*) [2])(PREDIV_FACTOR_TABLE_PTR + 0x10)",
                "PeriphClk == 2": "peripheralClock == 2",
                "PeriphClk == 0x10": "peripheralClock == 0x10",
                "PeriphClk == 1": "peripheralClock == 1",
                "uVar1 = HAL_RCC_GetPCLK2Freq();": "uint32_t pclk2Freq = HAL_RCC_GetPCLK2Freq();",
                "uVar1 = uVar1 / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);": "result = pclk2Freq / prediv;",
                "uVar1 = 0;": "result = 0;",
                "uVar2 = DAT_08003e9c;": "temp = DAT_08003e9c;",
                "uVar2 = DAT_08003e94 / aPredivFactorTable[-((int)(DAT_08003e90[1] << 0xe) >> 0x1f)];": "uint prediv = predivFactorTable[-((int)(PLLMUL_FACTOR_TABLE[1] << 0xe) >> 0x1f)];\n      uint mulResult = mul * DAT_08003e94 / prediv;",
                "uVar1 = uVar2 * aPLLMULFactorTable[(DAT_08003e90[1] << 10) >> 0x1c];": "uint mul = pllMulFactorTable[(PLLMUL_FACTOR_TABLE[1] << 10) >> 0x1c];\n      uint mulResult = mul * DAT_08003e94 / prediv;",
                "uVar1 = (uint32_t)((ulonglong)DAT_08003e98 * (ulonglong)(uVar1 * 2) >> 0x21);": "result = (uint32_t)((ulonglong)DAT_08003e98 * (ulonglong)(mulResult * 2) >> 0x21);",
                "uVar1 = uVar2 * aPLLMULFactorTable[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        uVar1 = (uint32_t)((ulonglong)DAT_08003e98 * (ulonglong)(uVar1 * 2) >> 0x21);\n      }\n    }\n  }\n  else if (PeriphClk == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      uVar1 = 0x8000;\n    }": "uint mul = pllMulFactorTable[(PLLMUL_FACTOR_TABLE[1] << 10) >> 0x1c];\n      uint prediv = predivFactorTable[-((int)(PLLMUL_FACTOR_TABLE[1] << 0xe) >> 0x1f)];\n      uint mulResult = mul * DAT_08003e94 / prediv;\n      if ((PLLMUL_FACTOR_TABLE[1] & 0x400000) == 0) {\n        result = (uint32_t)((ulonglong)DAT_08003e98 * (ulonglong)(mulResult * 2) >> 0x21);\n      }\n      else {\n        result = mulResult;\n      }\n    }\n  }\n  else if (peripheralClock == 1) {\n    uint8_t reg8 = *(uint8_t *)(DAT_08003e90 + 8);\n    uint8_t reg9 = *(uint8_t *)(DAT_08003e90 + 9);\n    if ((reg8 & 0x302) == 0x102) {\n      result = 0x8000;\n    }",
                "uVar1 = 0xf424;": "result = 0xf424;",
                "uVar2 = DAT_08003e90[8] & 0x300;": "uint8_t reg8 = *(uint8_t *)(DAT_08003e90 + 8);\n      uint8_t reg9 = *(uint8_t *)(DAT_08003e90 + 9);\n      uint uVar2 = reg8 & 0x300;",
                "uVar1 = 32000;": "result = 32000;",
                "uVar1 = 0x8000;": "result = 0x8000;",
                "uVar1 = uVar2 * aPLLMULFactorTable[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        uVar1 = (uint32_t)((ulonglong)DAT_08003e98 * (ulonglong)(uVar1 * 2) >> 0x21);\n      }\n    }\n  }\n  else if (PeriphClk == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      uVar1 = 0x8000;\n    }\n    else {\n      uint8_t reg8 = *(uint8_t *)(DAT_08003e90 + 8);\n      uint8_t reg9 = *(uint8_t *)(DAT_08003e90 + 9);\n      uint uVar2 = reg8 & 0x300;\n      if (uVar2 == 0x200 && (reg9 & 2) != 0) {\n        result = 32000;\n      }\n      else if (uVar2 == 0x300) {\n        if ((*PLLMUL_FACTOR_TABLE & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }": "    }\n    else {\n      if (uVar2 == 0x200 && (reg9 & 2) != 0) {\n        result = 32000;\n      }\n      else if (uVar2 == 0x300) {\n        if ((*PLLMUL_FACTOR_TABLE & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  return result;\n",
                "DAT_08003e90[8]": "*(uint8_t *)(DAT_08003e90 + 8)",
                "DAT_08003e90[9]": "*(uint8_t *)(DAT_08003e90 + 9)"
            },
            "code": "uint32_t calculatePeripheralClock_08003da4(uint32_t peripheralClock)\n{\n  uint32_t result = 0;\n  uint predivFactorTable[2];\n  uint pllMulFactorTable[16];\n  pllMulFactorTable[0] = *(uint32_t *)(PTR_DAT_08003e8c + 0);\n  pllMulFactorTable[1] = *(undefined4 *)(PTR_DAT_08003e8c + 4);\n  pllMulFactorTable[2] = *(undefined4 *)(PTR_DAT_08003e8c + 8);\n  predivFactorTable[0] = *(uint8_t *)(PREDIV_FACTOR_TABLE_PTR + 0);\n  predivFactorTable[1] = *(uint8_t *)(PREDIV_FACTOR_TABLE_PTR + 1);\n  if (peripheralClock == 2) {\n    uint32_t pclk2Freq = HAL_RCC_GetPCLK2Freq();\n    uint prediv = (((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2;\n    uVar1 = uVar1 / ((((DAT_08003e90[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (peripheralClock == 0x10) {\n    if ((*DAT_08003e90 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      uVar1 = uVar2 * aPLLMULFactorTable[(DAT_08003e90[1] << 10) >> 0x1c];\n      if ((DAT_08003e90[1] & 0x400000) == 0) {\n        uVar1 = (uint32_t)((ulonglong)DAT_08003e98 * (ulonglong)(uVar1 * 2) >> 0x21);\n      }\n    }\n  }\n  else if (PeriphClk == 1) {\n    if ((DAT_08003e90[8] & 0x302) == 0x102) {\n      uVar1 = 0x8000;\n    }\n    else {\n      uint uVar2 = reg8 & 0x300;\n      if (uVar2 == 0x200 && (reg9 & 2) != 0) {\n        result = 32000;\n      }\n      else if (uVar2 == 0x300) {\n        if ((*DAT_08003e90 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  return result;\n}",
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003da4",
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "imported": false,
            "current_name": "calculatePeripheralClock_08003da4"
        },
        "FUN_08005a44": {
            "renaming": {
                "FUN_08005a44": "initializeSerialBuffers_08005a44",
                "this": "serialObject",
                "_serial": "serial",
                "rx_buff": "rx_buffer",
                "_rx_buffer": "_rx_buffer",
                "rx_head": "rx_head",
                "rx_tail": "rx_tail",
                "tx_buff": "tx_buffer",
                "_tx_buffer": "_tx_buffer",
                "tx_head": "tx_head",
                "tx_tail": "tx_tail",
                "ctx": "ctx"
            },
            "code": "int __thiscall initializeSerialBuffers_08005a44(HardwareSerial *serialObject,EVP_PKEY_CTX *ctx)\n{\n  serialObject->rx_buffer = serialObject->_rx_buffer;\n  serialObject->rx_head = 0;\n  serialObject->rx_tail = 0;\n  serialObject->tx_buffer = serialObject->_tx_buffer;\n  serialObject->tx_head = 0;\n  serialObject->tx_tail = 0;\n  return (int)serialObject;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a44",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "initializeSerialBuffers_08005a44"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "is_end_of_string_080009dc",
                "in_CY": "input_character"
            },
            "code": "bool is_end_of_string_080009dc(void)\n{\n  char input_character;\n  __aeabi_cdcmpeq();\n  return input_character == '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [
                "SetOutputLimits",
                "Compute",
                "printFloat",
                "Initialize",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "is_end_of_string_080009dc"
        },
        "FUN_0800417c": {
            "renaming": {
                "FUN_0800417c": "reset_uart_0800417c",
                "*huart": "*uart_handler",
                "CR1": "USART_CR1_M",
                "CR3": "USART_CR3_HDSEL",
                "RxState": "HAL_UART_STATE_READY"
            },
            "code": "void reset_uart_0800417c(UART_HandleTypeDef *uart_handler)\n{\n  uart_handler->Instance->CR1 &= ~USART_CR1_M; \n  uart_handler->Instance->CR3 &= ~USART_CR3_HDSEL; \n  uart_handler->RxState = HAL_UART_STATE_READY;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800417c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "reset_uart_0800417c"
        },
        "FUN_08004b94": {
            "renaming": {
                "FUN_08004b94": "get_current_tick_08004b94",
                "uVar1": "current_tick"
            },
            "code": "uint32_t get_current_tick_08004b94(void)\n{\n  uint32_t current_tick = HAL_GetTick();\n  return current_tick;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b94",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_current_tick_08004b94"
        },
        "FUN_080058e0": {
            "renaming": {
                "FUN_080058e0": "get_current_milli_seconds_080058e0",
                "uVar1": "current_milli_seconds"
            },
            "code": "uint32_t get_current_milli_seconds_080058e0(void)\n{\n  uint32_t current_milli_seconds = GetCurrentMilli();\n  return current_milli_seconds;\n}",
            "called": [
                "GetCurrentMilli"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e0",
            "calling": [
                "setup",
                "Compute",
                "PID",
                "loop"
            ],
            "imported": false,
            "current_name": "get_current_milli_seconds_080058e0"
        },
        "FUN_08001918": {
            "renaming": {
                "FUN_08001918": "update_PID_parameters_08001918",
                "this": "pid",
                "NewSampleTime": "new_sample_time",
                "uVar1": "ki_uint",
                "uVar2": "new_sample_time_double",
                "uVar3": "old_sample_time_double",
                "dVar4": "temp_double",
                "SampleTime": "sample_time",
                "ki": "ki_double",
                "kd": "kd_double"
            },
            "code": "void __thiscall update_PID_parameters_08001918(PID *pid, int new_sample_time) {\n  if (new_sample_time > 0) {\n    double new_sample_time_double = (double)new_sample_time;\n    double old_sample_time_double = (double)pid->sample_time;\n    double sample_time_ratio = new_sample_time_double / old_sample_time_double;\n    double ki_double = pid->ki * sample_time_ratio;\n    double kd_double = pid->kd / sample_time_ratio;\n    pid->ki = ki_double;\n    pid->kd = kd_double;\n    pid->sample_time = new_sample_time;\n  }\n  return;\n}",
            "called": [
                "__floatsidf",
                "__divdf3",
                "__muldf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001918",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "update_PID_parameters_08001918"
        },
        "FUN_0800611c": {
            "renaming": {
                "FUN_0800611c": "print_assertion_failed_0800611c",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "message",
                "param_4": "expression",
                "puVar1": "default_message",
                "puVar2": "message_to_print"
            },
            "code": "void print_assertion_failed_0800611c(FILE* file, const char* file_name, int line_number, const char* expression, const char* message)\n{\n  const char* default_message = \"Assertion failed: %s, file %s, line %d\\n\";\n  const char* message_to_print = message ? message : default_message;\n  fprintf(file, message_to_print, expression, file_name, line_number);\n  abort();\n}",
            "called": [
                "fiprintf",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800611c",
            "calling": [
                "begin"
            ],
            "imported": false,
            "current_name": "print_assertion_failed_0800611c"
        },
        "FUN_0800049c": {
            "renaming": {
                "FUN_0800049c": "calculate_0800049c",
                "param_1": "num1",
                "param_2": "num2",
                "bVar1": "byte1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "count",
                "uVar6": "shift",
                "iVar7": "shift_count",
                "uVar8": "sign_bit",
                "uVar9": "temp4",
                "bVar10": "is_negative",
                "bVar11": "is_carry",
                "bVar12": "is_overflow"
            },
            "code": "ulonglong calculate_0800049c(uint num1, uint num2)\n{\n  byte bVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  int shift_count;\n  uint uVar6;\n  int bit_count;\n  uint uVar8;\n  uint uVar9;\n  bool is_num1_negative;\n  bool is_num2_negative;\n  bool is_carry;\n  \n  if ((num1 | num2) == 0) {\n    return CONCAT44(num2,num1);\n  }\n  uVar8 = num2 & 0x80000000;\n  uVar3 = num2;\n  if ((int)uVar8 < 0) {\n    is_num1_negative = num1 != 0;\n    num1 = -num1;\n    uVar3 = -num2 - (uint)is_num1_negative;\n  }\n  shift_count = 0x432;\n  uVar9 = uVar3 >> 0x16;\n  if (uVar9 != 0) {\n    shift_count = 3;\n    if (uVar3 >> 0x19 != 0) {\n      shift_count = 6;\n    }\n    if (uVar3 >> 0x1c != 0) {\n      shift_count = shift_count + 3;\n    }\n    uVar4 = shift_count - ((int)uVar3 >> 0x1f);\n    uVar9 = num1 << (0x20 - uVar4 & 0xff);\n    num1 = num1 >> (uVar4 & 0xff) | uVar3 << (0x20 - uVar4 & 0xff);\n    uVar3 = uVar3 >> (uVar4 & 0xff);\n    shift_count = uVar4 + 0x432;\n  }\n  if (0xfffff < uVar3) {\n    if (0x1fffff < uVar3) {\n      uVar4 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      bVar1 = (byte)num1;\n      num1 = (uint)(uVar4 != 0) << 0x1f | num1 >> 1;\n      uVar9 = (uint)(bVar1 & 1) << 0x1f | uVar9 >> 1;\n      shift_count = shift_count + 1;\n      if (0xffbfffff < (uint)(shift_count * 0x200000)) {\n        return (ulonglong)(uVar8 | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_080002a0:\n    is_carry = 0x7fffffff < uVar9;\n    if (uVar9 == 0x80000000) {\n      is_carry = (num1 & 1) != 0;\n    }\n    return CONCAT44(uVar3 + shift_count * 0x100000 + (uint)CARRY4(num1,(uint)is_carry) | uVar8,\n                    num1 + is_carry);\n  }\n  is_num2_negative = (uVar9 & 0x80000000) != 0;\n  uVar9 = uVar9 << 1;\n  uVar4 = num1 * 2;\n  is_carry = CARRY4(num1,num1);\n  num1 = num1 * 2 + (uint)is_num2_negative;\n  uVar3 = uVar3 * 2 + (uint)(is_carry || CARRY4(uVar4,(uint)is_num2_negative));\n  shift_count = shift_count + -1;\n  if ((uVar3 & 0x100000) != 0) goto LAB_080002a0;\n  uVar2 = num1;\n  uVar4 = uVar3;\n  if (uVar3 == 0) {\n    uVar2 = 0;\n    uVar4 = num1;\n  }\n  bit_count = count_leading_zeroes(uVar4);\n  if (uVar3 == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  uVar6 = bit_count - 0xb;\n  is_carry = SBORROW4(uVar6,0x20);\n  bit_count = bit_count + -0x1f;\n  is_num1_negative = bit_count < 0;\n  is_num2_negative = bit_count == 0;\n  if ((int)uVar6 < 0x20) {\n    is_carry = SCARRY4(bit_count,0xc);\n    uVar6 = bit_count;\n    if (!is_num2_negative && is_num1_negative == is_carry) {\n      uVar9 = uVar4 << (uVar6 & 0xff);\n      uVar4 = uVar4 >> (0xcU - bit_count & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_num2_negative || is_num1_negative != is_carry) {\n    uVar9 = 0x20 - uVar6;\n  }\n  uVar4 = uVar4 << (uVar6 & 0xff);\n  if (is_num2_negative || is_num1_negative != is_carry) {\n    uVar4 = uVar4 | num1 >> (uVar9 & 0xff);\n  }\n  if (is_num2_negative || is_num1_negative != is_carry) {\n    num1 = num1 << (uVar6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)uVar6 <= shift_count) {\n    return CONCAT44(uVar4 + (shift_count - uVar6) * 0x100000 | uVar8,uVar2);\n  }\n  bit_count = ~(shift_count - uVar6);\n  if (0x1e < bit_count) {\n    return CONCAT44(num2,uVar4 >> (bit_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shift_count = bit_count - 0x13;\n  if (shift_count == 0 || shift_count < 0 != SCARRY4(bit_count - 0x1f,0xc)) {\n    bit_count = bit_count + 1;\n    return CONCAT44(uVar8 | uVar4 >> (bit_count & 0xff),\n                    uVar2 >> (bit_count & 0xff) | uVar4 << (0x20 - bit_count & 0xff));\n  }\n  return CONCAT44(num2,uVar2 >> (0x20 - (0xcU - shift_count) & 0xff) | uVar4 << (0xcU - shift_count & 0xff))\n         & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800049c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_0800049c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "is_pin_set_high_080047f4",
                "pin": "pin_name",
                "map": "pin_map",
                "byte": "data_byte",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "_Bool is_pin_set_high_080047f4(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint32_t) pin << 24 >> 28;\n    uint32_t pin_mask = (uint32_t) pin & 0xF;\n    uint32_t pin_value = pin_map[pin_index] >> pin_mask & 1;\n    return (_Bool) pin_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_pin_set_high_080047f4"
        },
        "FUN_08002c10": {
            "renaming": {
                "FUN_08002c10": "i2c_listen_08002c10",
                "*hi2c": "*handle",
                "pIVar1": "instance"
            },
            "code": "HAL_StatusTypeDef i2c_listen_08002c10(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *instance;\n  if (handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  handle->State = HAL_I2C_STATE_LISTEN;\n  instance = handle->Instance;\n  if ((instance->CR1 & 1) == 0) {\n    instance->CR1 |= 1;\n  }\n  instance->CR1 |= 0x400;\n  instance->CR2 |= 0x300;\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c10",
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "i2c_listen_08002c10"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_not_equal_080009f0",
                "in_CY": "is_CY_zero",
                "in_ZR": "is_ZR_zero"
            },
            "code": "bool is_not_equal_080009f0(void)\n{\n  bool is_CY_zero = __aeabi_cdcmpeq();\n  bool is_ZR_zero = (bool)in_ZR;\n  return !is_CY_zero || is_ZR_zero;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_equal_080009f0"
        },
        "FUN_0800134e": {
            "renaming": {
                "FUN_0800134e": "sendData_0800134e",
                "value": "data"
            },
            "code": "size_t __thiscall LiquidCrystal::sendData_0800134e(LiquidCrystal *lcd,uint8_t data)\n{\n  send(lcd,data,'\\x01');\n  return 1;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800134e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "sendData_0800134e"
        },
        "FUN_08006be0": {
            "renaming": {
                "FUN_08006be0": "flush_if_buffered_08006be0",
                "param_1": "file_descriptor",
                "param_2": "stream",
                "param_3": "flags",
                "param_4": "mode",
                "uVar1": "result"
            },
            "code": "int flush_if_buffered_08006be0(int file_descriptor, char* stream, int flags, int mode) {\n    int result;\n    if (*(int *)(stream + 0x10) != 0) {\n        if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x18) == 0)) {\n            __sinit();\n        }\n        if (stream == PTR___sf_fake_stdin_08006c28) {\n            stream = *(char **)(file_descriptor + 4);\n        }\n        else if (stream == PTR___sf_fake_stdout_08006c2c) {\n            stream = *(char **)(file_descriptor + 8);\n        }\n        else if (stream == PTR___sf_fake_stderr_08006c30) {\n            stream = *(char **)(file_descriptor + 0xc);\n        }\n        if (*(short *)(stream + 0xc) != 0) {\n            result = __sflush_r(file_descriptor, stream, flags, mode);\n            return result;\n        }\n    }\n    return 0;\n}",
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006be0",
            "calling": [
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "flush_if_buffered_08006be0"
        },
        "FUN_080012e8": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080012e8": "writeDataToPins",
                "this": "lcd",
                "value": "data",
                "uVar1": "pinIndex",
                "_data_pins": "data_pins",
                "digitalWrite": "writeToPin",
                "pulseEnable": "pulseEnable",
                "FUN_080012e8": "writeDataToPins_080012e8"
            },
            "code": "void __thiscall LiquidCrystal::writeDataToPins_080012e8(LiquidCrystal *lcd,uint8_t value) {\n  uint8_t pinIndex;\n  for (pinIndex = 0; pinIndex < 8; pinIndex++) {\n    uint8_t pinValue = (value >> pinIndex) & 1;\n    digitalWrite((uint)lcd->_data_pins[pinIndex], (int)pinValue);\n  }\n  pulseEnable(lcd);\n  return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012e8",
            "calling": [
                "send"
            ],
            "imported": false,
            "current_name": "writeDataToPins_080012e8"
        },
        "FUN_080058e8": {
            "renaming": {
                "FUN_080058e8": "do_nothing_080058e8"
            },
            "code": "\nvoid do_nothing_080058e8(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058e8",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "do_nothing_080058e8"
        },
        "FUN_08006370": {
            "renaming": {
                "FUN_08006370": "write_to_stream_with_offset_08006370",
                "param_1": "stream",
                "param_2": "offset",
                "param_3": "data",
                "param_4": "size",
                "puVar2": "byte_ptr",
                "iVar1": "write_result",
                "iVar3": "bytes_written"
            },
            "code": "int write_to_stream_with_offset_08006370(int stream, int offset, void *data, int size) {\n  int bytes_written = 0;\n  unsigned char *byte_ptr = (unsigned char *)data + size;\n  while (size != 0) {\n    if (byte_ptr == data) {\n      return bytes_written;\n    }\n    int write_result = __sfputc_r(stream, *(--byte_ptr), offset, size, bytes_written);\n    bytes_written = write_result + 1;\n    size--;\n  }\n  return bytes_written;\n}",
            "called": [
                "__sfputc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006370",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_with_offset_08006370"
        },
        "FUN_080024f8": {
            "renaming": {
                "FUN_080024f8": "set_irq_enable_bit_080024f8",
                "IRQn": "irq_number",
                "uVar1": "irq_index",
                "DAT_08002510": "irq_enable_base_address",
                "PTR_08002514": "irq_enable_reg_ptr",
                "PTR_08002518": "irq_enable_bit_ptr"
            },
            "code": "void set_irq_enable_bit_080024f8(IRQn_Type_conflict irq_number)\n{\n    uint32_t irq_index = (uint32_t)irq_number;\n    if (irq_index != (uint32_t)-1) {\n        uint32_t* irq_enable_reg = (uint32_t*)(DAT_08002510 + (irq_index >> 5) * 4);\n        uint32_t irq_enable_bit = 1 << (irq_index & 0x1f);\n        *irq_enable_reg = irq_enable_bit;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024f8",
            "calling": [
                "uart_attach_tx_callback",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "set_irq_enable_bit_080024f8"
        },
        "FUN_0800594e": {
            "renaming": {
                "FUN_0800594e": "receive_byte_0800594e",
                "this": "serial_obj",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "bVar1": "received_byte",
                "uVar2": "current_tail_index"
            },
            "code": "ssize_t __thiscall HardwareSerial::receive_byte_0800594e(HardwareSerial *serial_obj, int file_descriptor, void *buffer, size_t num_bytes) {\n  byte received_byte;\n  ushort current_tail_index;\n  current_tail_index = (serial_obj->_serial).rx_tail;\n  if ((uint)(serial_obj->_serial).rx_head != (uint)current_tail_index) {\n    received_byte = (serial_obj->_serial).rx_buff[current_tail_index];\n    (serial_obj->_serial).rx_tail = current_tail_index + 1 & 0x3f;\n    return (uint)received_byte;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800594e",
            "calling": [],
            "imported": false,
            "current_name": "receive_byte_0800594e"
        },
        "FUN_080056a8": {
            "renaming": {
                "FUN_080056a8": "handle_USART2_interrupt_080056a8",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_USART2_interrupt",
                "USART2_IRQn": "USART2_interrupt",
                "HAL_UART_IRQHandler": "handle_USART_interrupt",
                "PTR_uart_handlers_080056bc": "UART_handlers_pointer",
                "UART_HandleTypeDef": "UART_handle_type",
                "get_UART_handle": "get_UART_handle"
            },
            "code": "void handle_USART2_interrupt_080056a8(void)\n{\n  clear_pending_USART2_interrupt();\n  handle_USART_interrupt(get_UART_handle());\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056a8",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART2_interrupt_080056a8"
        },
        "FUN_08001ab0": {
            "renaming": {
                "FUN_08001ab0": "PIDController_08001ab0",
                "this": "self",
                "Input": "input",
                "Output": "output",
                "Setpoint": "setpoint",
                "Kp": "kp",
                "Ki": "ki",
                "Kd": "kd",
                "POn": "pon",
                "ControllerDirection": "controller_direction",
                "SetOutputLimits": "set_output_limits",
                "SampleTime": "sample_time",
                "SetControllerDirection": "set_controller_direction",
                "SetTunings": "set_tunings",
                "uVar1": "current_time",
                "lastTime": "last_time"
            },
            "code": "__thiscall PIDController_08001ab0::PIDController_08001ab0::PIDController_08001ab0::PIDController_08001ab0(PIDController_08001ab0::PIDController_08001ab0* self, double* input, double* output, double* setpoint, double kp, double ki, double kd, int pon, int controller_direction) {\\n\"\n                      \"    self->myOutput = output;\\n\"\n                      \"    self->myInput = input;\\n\"\n                      \"    self->mySetpoint = setpoint;\\n\"\n                      \"    self->inAuto = false;\\n\"\n                      \"    set_output_limits(self, (double)CONCAT44(PTR_DAT_08001b14, PTR_DAT_08001b10), (double)CONCAT44(pon, controller_direction));\\n\"\n                      \"    self->SampleTime = 100;\\n\"\n                      \"    set_controller_direction(self, controller_direction);\\n\"\n                      \"    set_tunings(self, ki, kd, (double)CONCAT44(pon, PTR_DAT_08001af8), PTR_DAT_08001afc);\\n\"\n                      \"    uint32_t current_time = millis();\\n\"\n                      \"    self->lastTime = current_time - self->SampleTime;\\n\"\n                      \"    return self;\\n\"\n                      \"}",
            "called": [
                "SetControllerDirection",
                "millis",
                "SetOutputLimits",
                "SetTunings"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ab0",
            "calling": [
                "PID"
            ],
            "imported": false,
            "current_name": "PIDController_08001ab0"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "terminate_program_08006ac0",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void terminate_program_08006ac0(void)\n{\n  raise(SIGABRT);\n  exit(EXIT_FAILURE);\n}",
            "called": [
                "raise",
                "_exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "imported": false,
            "current_name": "terminate_program_08006ac0"
        },
        "FUN_08007220": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_08007220": "set_wchar_t_ctype_flags",
                "PTR_id_08007284": "ptr_id_1",
                "PTR_id_08007288": "ptr_id_2",
                "PTR_id_0800728c": "ptr_id_3",
                "PTR_id_08007290": "ptr_id_4",
                "PTR_id_08007294": "ptr_id_5",
                "PTR_id_08007298": "ptr_id_6",
                "PTR_id_0800729c": "ptr_id_7",
                "PTR_id_080072a0": "ptr_id_8",
                "FUN_08007220": "set_wchar_t_ctype_flags_08007220"
            },
            "code": "void set_wchar_t_ctype_flags_08007220() {\n  if (*(int *)PTR_id_08007284 < 0) {\n    *(undefined4 *)PTR_id_08007284 = 1;\n  }\n  if (*(int *)PTR_id_08007288 < 0) {\n    *(undefined4 *)PTR_id_08007288 = 1;\n  }\n  if (*(int *)PTR_id_0800728c < 0) {\n    *(undefined4 *)PTR_id_0800728c = 1;\n  }\n  if (*(int *)PTR_id_08007290 < 0) {\n    *(undefined4 *)PTR_id_08007290 = 1;\n  }\n  if (*(int *)PTR_id_08007294 < 0) {\n    *(undefined4 *)PTR_id_08007294 = 1;\n  }\n  if (*(int *)PTR_id_08007298 < 0) {\n    *(undefined4 *)PTR_id_08007298 = 1;\n  }\n  if (*(int *)PTR_id_0800729c < 0) {\n    *(undefined4 *)PTR_id_0800729c = 1;\n  }\n  if (*(int *)PTR_id_080072a0 < 0) {\n    *(undefined4 *)PTR_id_080072a0 = 1;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007220",
            "calling": [],
            "imported": false,
            "current_name": "set_wchar_t_ctype_flags_08007220"
        },
        "FUN_08004198": {
            "renaming": {
                "FUN_08004198": "send_data_08004198",
                "*huart": "*uart",
                "uVar1": "tx_count",
                "pbVar2": "tx_buffer",
                "HAL_UART_STATE_BUSY_TX": "HAL_BUSY",
                "(huart->Init).WordLength": "UART_WORDLENGTH_9B",
                "huart->pTxBuffPtr": "uart->pTxBuffPtr",
                "huart->Instance->DR": "uart->Instance->DR",
                "(huart->Init).Parity": "uart->Init.Parity",
                "huart->TxXferCount": "uart->TxXferCount",
                "HAL_OK": "HAL_OK",
                "huart->Instance->CR1": "uart->Instance->CR1",
                "USART_CR1_TXEIE": "USART_CR1_TXEIE",
                "USART_CR1_TCIE": "USART_CR1_TCIE"
            },
            "code": "HAL_StatusTypeDef send_data_08004198(UART_HandleTypeDef *uart)\n{\n  uint16_t tx_count;\n  uint8_t *tx_buffer;\n\n  if (uart->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uart->Init).WordLength == UART_WORDLENGTH_9B) {\n    tx_buffer = (uint8_t*)uart->pTxBuffPtr;\n    uart->Instance->DR = (*tx_buffer & 0x1ff);\n    uart->pTxBuffPtr = (void*)(tx_buffer + 2);\n  }\n  else {\n    tx_buffer = (uint8_t*)uart->pTxBuffPtr;\n    uart->Instance->DR = *tx_buffer;\n    uart->pTxBuffPtr = (void*)(tx_buffer + 1);\n  }\n  tx_count = uart->TxXferCount - 1;\n  uart->TxXferCount = tx_count;\n  if (tx_count == 0) {\n    uart->Instance->CR1 &= ~USART_CR1_TXEIE;\n    uart->Instance->CR1 |= USART_CR1_TCIE;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004198",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "send_data_08004198"
        },
        "FUN_08001c3c": {
            "renaming": {
                "FUN_08001c3c": "setTickPriority_08001c3c",
                "TickPriority": "tickPriority",
                "uVar1": "systickConfig",
                "PTR_SystemCoreClock_08001c80": "sysClock",
                "PTR_uwTickFreq_08001c7c": "tickFreq",
                "HAL_SYSTICK_Config": "HAL_SYSTICK_Config",
                "HAL_ERROR": "HAL_ERROR",
                "HAL_NVIC_SetPriority": "HAL_NVIC_SetPriority",
                "SysTick_IRQn": "SysTick_IRQn",
                "PTR_uwTickPrio_08001c84": "PTR_uwTickPrio_08001c84",
                "HAL_OK": "HAL_OK"
            },
            "code": "HAL_StatusTypeDef setTickPriority_08001c3c(uint32_t tickPriority)\n{\n  uint32_t PTR_SystemCoreClock_08001c80 = *(uint *)PTR_SystemCoreClock_08001c80;\n  uint32_t PTR_uwTickFreq_08001c7c = (1000 / (ulonglong)(byte)*PTR_uwTickFreq_08001c7c);\n  uint32_t systickConfig = HAL_SYSTICK_Config(PTR_SystemCoreClock_08001c80 / PTR_uwTickFreq_08001c7c);\n  if (systickConfig != 0) {\n    return HAL_ERROR;\n  }\n  if (tickPriority > 0xf) {\n    return HAL_ERROR;\n  }\n  HAL_NVIC_SetPriority(SysTick_IRQn, tickPriority, 0);\n  *(uint32_t *)PTR_uwTickPrio_08001c84 = tickPriority;\n  return HAL_OK;\n}",
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3c",
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "setTickPriority_08001c3c"
        },
        "FUN_08001c3a": {
            "renaming": {
                "FUN_08001c3a": "do_nothing_08001c3a"
            },
            "code": "\nvoid do_nothing_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c3a",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08001c3a"
        },
        "FUN_08000a2c": {
            "renaming": {
                "FUN_08000a2c": "is_valid_input_08000a2c",
                "param_1": "user_input_1",
                "param_2": "user_input_2",
                "param_3": "user_input_3",
                "param_4": "user_input_4"
            },
            "code": "int is_valid_input_08000a2c(uint32_t user_input_1, int user_input_2, uint32_t user_input_3, int user_input_4) {\n  int is_valid = 1;\n  int mask = 0xFFFF;\n  if ((user_input_2 << 1) & mask != -1 || (user_input_1 | user_input_2 << 12) == 0 || (user_input_4 << 1) & mask != -1 || (user_input_3 | user_input_4 << 12) == 0) {\n    is_valid = 0;\n  }\n  return is_valid;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a2c",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "is_valid_input_08000a2c"
        },
        "FUN_08001366": {
            "renaming": {
                "FUN_08001366": "printAt_08001366",
                "this": "lcd",
                "col": "column",
                "row": "row",
                "uVar1": "max_row",
                "adjusted_row": "adjusted_row",
                "adjusted_column": "adjusted_column"
            },
            "code": "void __thiscall LiquidCrystal::printAt_08001366(LiquidCrystal *this, uint8_t column, uint8_t row) {\\n  uint8_t max_row = min(row, 3);\\n  uint8_t adjusted_row = this->_numlines <= max_row ? this->_numlines - 1 & 0xff : max_row;\\n  uint8_t adjusted_column = column + this->_row_offsets[adjusted_row] | 0x80;\\n  send(this, adjusted_column, \"\\0\");\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001366",
            "calling": [
                "setup",
                "loop"
            ],
            "imported": false,
            "current_name": "printAt_08001366"
        },
        "FUN_08005848": {
            "renaming": {
                "FUN_08005848": "configure_digital_pin_08005848",
                "ulPin": "pin_number",
                "ulVal": "value",
                "_Var1": "is_pin_configured",
                "port": "gpio_port",
                "uVar2": "digital_pin_number"
            },
            "code": "void configure_digital_pin_08005848(uint32_t pin_number, uint32_t value) {\n  bool is_pin_configured;\n  GPIO_TypeDef *gpio_port;\n  uint32_t digital_pin_number;\n  \n  if (pin_number < 0x3c) {\n    digital_pin_number = (uint32_t)(char)PTR_digitalPin_08005888[pin_number];\n  }\n  else {\n    digital_pin_number = 0xffffffff;\n  }\n  \n  if ((digital_pin_number != 0xffffffff) && (is_pin_configured = is_pin_configured((PinName_conflict)digital_pin_number, (uint32_t *)PTR_g_digPinConfigured_0800588c))) {\n    gpio_port = get_GPIO_Port((digital_pin_number << 0x18) >> 0x1c);\n    digital_io_write(gpio_port, 1 << (digital_pin_number & 0xf) & 0xffff, value);\n  }\n  return;\n}",
            "called": [
                "is_pin_configured",
                "digital_io_write",
                "get_GPIO_Port"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005848",
            "calling": [
                "readData",
                "write4bits",
                "send",
                "setup",
                "MAX31855",
                "begin",
                "write8bits",
                "pulseEnable",
                "loop"
            ],
            "imported": false,
            "current_name": "configure_digital_pin_08005848"
        },
        "FUN_08000ae8": {
            "renaming": {
                "FUN_08000ae8": "system_call_08000ae8",
                "a0": "syscall_number",
                "a1": "syscall_argument",
                "a2": "error_code",
                "software_interrupt": "invoke_interrupt"
            },
            "code": "uint32_t system_call_08000ae8(uint32_t syscall_number, uint32_t syscall_argument, int32_t error_code) {\n  invoke_interrupt(0x3f);\n  return syscall_number;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ae8",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "system_call_08000ae8"
        },
        "FUN_08003ed8": {
            "renaming": {
                "FUN_08003ed8": "resetTimer_08003ed8",
                "htim": "timer",
                "pTVar1": "timerInstance",
                "HAL_TIM_STATE_BUSY": "TIMER_BUSY",
                "HAL_TIM_STATE_RESET": "TIMER_RESET",
                "HAL_UNLOCKED": "TIMER_UNLOCKED",
                "HAL_TIM_PWM_MspDeInit": "deInitTimerPWM",
                "HAL_OK": "TIMER_OK"
            },
            "code": "HAL_StatusTypeDef_conflict resetTimer_08003ed8(TIM_HandleTypeDef *timer)\n{\n  TIM_TypeDef *timerInstance;\n  timer->State = HAL_TIM_STATE_BUSY;\n  timerInstance = timer->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  HAL_TIM_PWM_MspDeInit(timer);\n  timer->State = HAL_TIM_STATE_RESET;\n  timer->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}",
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ed8",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "resetTimer_08003ed8"
        },
        "FUN_080061e0": {
            "renaming": {
                "FUN_080061e0": "fill_memory_with_constant_080061e0",
                "__s": "destination",
                "__c": "constant_value",
                "__n": "num_bytes",
                "puVar1": "dest_ptr"
            },
            "code": "void* fill_memory_with_constant_080061e0(void* destination, int constant_value, size_t num_bytes) {\n  unsigned char* dest_ptr = (unsigned char*)destination;\n  unsigned char constant_byte = (unsigned char)constant_value;\n  for (size_t i = 0; i < num_bytes; i++) {\n    *dest_ptr++ = constant_byte;\n  }\n  return destination;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061e0",
            "calling": [
                "__sfp",
                "adc_read_value",
                "std.isra.0",
                "__sfmoreglue"
            ],
            "imported": false,
            "current_name": "fill_memory_with_constant_080061e0"
        },
        "FUN_08004f0c": {
            "renaming": {
                "FUN_08004f0c": "handle_i2c_events_08004f0c",
                "PTR_i2c_handles_08004f18": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_events_08004f0c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef **)PTR_i2c_handles_08004f18;\n  HAL_I2C_EV_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f0c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_events_08004f0c"
        },
        "FUN_08005604": {
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "huart": "uart_handle",
                "bVar1": "uart_index_value",
                "iVar3": "callback_result",
                "iVar4": "callback_obj_index",
                "uVar2": "index"
            },
            "code": "void transmit_data_08005604(UART_HandleTypeDef *uart_handle)\n{\n  byte uart_index_value;\n  int callback_obj_index;\n  int callback_result;\n  uint index;\n  \n  uart_index_value = get_uart_index(uart_handle);\n  index = (uint)uart_index_value;\n  callback_obj_index = *(int *)(PTR_tx_callback_obj_08005644 + index * 4);\n  if ((index < 5) &&\n     (callback_result = (**(code **)(PTR_tx_callback_08005648 + index * 4))(callback_obj_index), callback_result != -1)) {\n    HAL_UART_Transmit_IT\n              (*(UART_HandleTypeDef **)\n                (PTR_uart_handlers_0800564c + (uint)*(byte *)(callback_obj_index + 0x44) * 4),\n               (uint8_t *)(*(int *)(callback_obj_index + 100) + (uint)*(ushort *)(callback_obj_index + 0x6a)),1);\n  }\n  return;\n}",
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005604",
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "imported": false,
            "current_name": "transmit_data_08005604"
        },
        "FUN_08005724": {
            "renaming": {
                "FUN_08005724": "alwaysReturnsOne_08005724",
                "file_UNUSED": "fileDescriptor"
            },
            "code": "int alwaysReturnsOne_08005724(int fileDescriptor) {\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005724",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "alwaysReturnsOne_08005724"
        },
        "FUN_08005728": {
            "renaming": {
                "FUN_08005728": "file_unused_param_08005728",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "int file_unused_param_08005728(int file_unused, int ptr_unused, int dir_unused) { return 0; }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005728",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "file_unused_param_08005728"
        },
        "FUN_0800135a": {
            "renaming": {
                "FUN_0800135a": "send_command_to_lcd_0800135a",
                "this": "lcd_instance",
                "command": "lcd_command",
                "data": "lcd_data"
            },
            "code": "void __thiscall LiquidCrystal::send_command_to_lcd_0800135a(LiquidCrystal *this, char command, char data) {\n  send(this, command, data);\n  return;\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800135a",
            "calling": [
                "setup",
                "begin",
                "loop"
            ],
            "imported": false,
            "current_name": "send_command_to_lcd_0800135a"
        },
        "FUN_08005c96": {
            "renaming": {
                "__thiscall Print::FUN_08005c96": "size_t Print::printString",
                "this": "this",
                "str": "string",
                "sVar1": "stringLength",
                "sVar2": "printResult",
                "NULL": "NULL",
                "strlen": "strlen",
                "_vptr_Print": "_vptr_Print",
                "FUN_08005c96": "printString_08005c96"
            },
            "code": "size_t Print::printString_08005c96(Print *this, char *string) {\n  size_t stringLength;\n  size_t printResult;\n  \n  if (string != NULL) {\n    stringLength = strlen(string);\n    printResult = (*this->_vptr_Print[1])(stringLength, string, stringLength);\n    return printResult;\n  }\n  return 0;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c96",
            "calling": [
                "setup",
                "printFloat",
                "println",
                "loop"
            ],
            "imported": false,
            "current_name": "printString_08005c96"
        },
        "FUN_0800571a": {
            "renaming": {
                "FUN_0800571a": "set_file_mode_to_directory_0800571a",
                "file_UNUSED": "",
                "st": "file_stats",
                "st->st_mode": "S_IFDIR"
            },
            "code": "int set_file_mode_to_directory_0800571a(stat *file_stats)\n{\n  file_stats->st_mode = S_IFDIR;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800571a",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_to_directory_0800571a"
        },
        "FUN_08002efc": {
            "renaming": {
                "FUN_08002efc": "i2c_transfer_08002efc",
                "*hi2c": "*i2c_handler",
                "uVar1": "transfer_options",
                "pbVar2": "buffer_pointer"
            },
            "code": "HAL_StatusTypeDef i2c_transfer_08002efc(I2C_HandleTypeDef *i2c_handler)\n{\n  uint32_t transfer_options;\n  byte *buffer_pointer;\n  \n  transfer_options = i2c_handler->XferOptions;\n  if (i2c_handler->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2c_handler->XferCount == 0) {\n      if (((transfer_options == 4) || (transfer_options == 8)) || (transfer_options == 0xffff0000)) {\n        i2c_handler->Instance->CR2 = i2c_handler->Instance->CR2 & 0xfffff8ff;\n        i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 | 0x200;\n        i2c_handler->PreviousState = 0;\n        i2c_handler->State = HAL_I2C_STATE_READY;\n        if (i2c_handler->Mode == HAL_I2C_MODE_MEM) {\n          i2c_handler->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2c_handler);\n        }\n        else {\n          i2c_handler->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2c_handler);\n        }\n      }\n      else {\n        i2c_handler->Instance->CR2 = i2c_handler->Instance->CR2 & 0xfffff8ff;\n        i2c_handler->PreviousState = 0x11;\n        i2c_handler->Mode = HAL_I2C_MODE_NONE;\n        i2c_handler->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2c_handler);\n      }\n    }\n    else {\n      buffer_pointer = i2c_handler->pBuffPtr;\n      i2c_handler->pBuffPtr = buffer_pointer + 1;\n      i2c_handler->Instance->DR = (uint)*buffer_pointer;\n      i2c_handler->XferCount = i2c_handler->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efc",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_transfer_08002efc"
        },
        "FUN_0800365c": {
            "renaming": {
                "FUN_0800365c": "delay_0800365c",
                "mdelay": "milliseconds",
                "Delay": "cycles_to_wait",
                "bVar1": "delay_complete",
                "DAT_08003684": "data_constant",
                "PTR_SystemCoreClock_08003680": "system_core_clock_ptr"
            },
            "code": "void delay_0800365c(uint32_t milliseconds) {\n  uint32_t cycles_per_ms = *(uint *)PTR_SystemCoreClock_08003680 / 1000;\n  uint32_t cycles_to_wait = mdelay_0800365c * (uint)((ulonglong)DAT_08003684 * (ulonglong)cycles_per_ms >> 0x29);\n  while (cycles_to_wait--);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800365c",
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "imported": false,
            "current_name": "delay_0800365c"
        },
        "FUN_08006ad0": {
            "renaming": {
                "FUN_08006ad0": "process_data_08006ad0",
                "param_1": "data",
                "param_2": "params",
                "iVar1": "unused_variable",
                "piVar2": "pointer_variable",
                "uVar3": "flag_value",
                "uVar4": "flag",
                "iVar5": "loop_variable",
                "pcVar6": "function_pointer",
                "iVar7": "loop_variable2",
                "uVar8": "temp_value",
                "bVar9": "boolean_value",
                "is_zero": "zero_flag"
            },
            "code": "uint32_t process_data_08006ad0(uint32_t *data, int *params) {\\\n                        uint32_t uVar1;\\\n                        int iVar2;\\\n                        int *piVar3;\\\n                        uint32_t uVar4;\\\n                        uint32_t uVar5;\\\n                        int iVar6;\\\n                        code *function_pointer;\\\n                        int iVar7;\\\n                        uint32_t uVar8;\\\n                        bool is_zero;\\\n                        uint16_t flag;\\\n                        flag = *(uint16_t *)(params + 3);\\\n                        uVar4 = (uint32_t)flag;\\\n                        if ((int32_t)(uVar4 << 0x1c) < 0) {\\\n                            iVar2 = params[4];\\\n                            if (iVar2 != 0) {\\\n                                iVar6 = uVar4 << 0x1e;\\\n                                is_zero = iVar6 == 0;\\\n                                if (is_zero) {\\\n                                    iVar6 = 0;\\\n                                }\\\n                                iVar7 = *params;\\\n                                if (!is_zero) {\\\n                                    iVar6 = params[5];\\\n                                }\\\n                                *params = iVar2;\\\n                                params[2] = iVar6;\\\n                                for (iVar7 = iVar7 - iVar2; 0 < iVar7; iVar7 = iVar7 - iVar6) {\\\n                                    iVar6 = (*(code *)params[10])(data, params[8], iVar2, iVar7);\\\n                                    if (iVar6 < 1) {\\\n                                        flag = *(uint16_t *)(params + 3);\\\n                                        goto LAB_08006bc6;\\\n                                    }\\\n                                    iVar2 = iVar2 + iVar6;\\\n                                }\\\n                            }\\\n                        }\\\n                        else if (((0 < params[1]) || (0 < params[0x10])) &&\\\n                                (function_pointer = (code *)params[0xb], function_pointer != (code *)0x0)) {\\\n                            uVar8 = *data;\\\n                            *data = 0;\\\n                            if ((flag & 0x1000) == 0) {\\\n                                iVar2 = (*function_pointer)(data, params[8], uVar4 & 0x1000, 1);\\\n                                if ((iVar2 == -1) && (uVar4 = *data, uVar4 != 0)) {\\\n                                    if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\\\n                                        *(uint16_t *)(params + 3) = *(uint16_t *)(params + 3) | 0x40;\\\n                                        return 0xffffffff;\\\n                                    }\\\n                                    *data = uVar8;\\\n                                    return 0;\\\n                                }\\\n                            }\\\n                            else {\\\n                                iVar2 = params[0x15];\\\n                            }\\\n                            if (((int32_t)((uint32_t)*(uint16_t *)(params + 3) << 0x1d) < 0) &&\\\n                                (iVar2 = iVar2 - params[1], params[0xd] != 0)) {\\\n                                iVar2 = iVar2 - params[0x10];\\\n                            }\\\n                            iVar2 = (*(code *)params[0xb])(data, params[8], iVar2, 0);\\\n                            flag = *(uint16_t *)(params + 3);\\\n                            if ((iVar2 == -1) &&\\\n                                ((0x1d < *data || (-1 < (int32_t)((DAT_08006bdc >> (*data & 0xff)) << 0x1f))))) {\\\n                                *(uint16_t *)(params + 3) = flag | 0x40;\\\n                                return 0xffffffff;\\\n                            }\\\n                            params[1] = 0;\\\n                            *params = params[4];\\\n                            if (((int32_t)((uint32_t)flag << 0x13) < 0) && ((iVar2 != -1 || (*data == 0)))) {\\\n                                params[0x15] = iVar2;\\\n                            }\\\n                            piVar3 = (int *)params[0xd];\\\n                            *data = uVar8;\\\n                            if (piVar3 != (int *)0x0) {\\\n                                if (piVar3 != params + 0x11) {\\\n                                    _free_r(data);\\\n                                }\\\n                                params[0xd] = 0;\\\n                                return 0;\\\n                            }\\\n                        }\\\n                        return 0;\\\n                    }",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ad0",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "process_data_08006ad0"
        },
        "FUN_080033b8": {
            "renaming": {
                "FUN_080033b8": "i2c_handle_event_080033b8",
                "hi2c": "handle",
                "pIVar1": "instance",
                "uVar2": "sr1",
                "uVar3": "cr2",
                "uVar4": "sr2"
            },
            "code": "void i2c_handle_event_080033b8(I2C_HandleTypeDef *handle)\n{\n  I2C_TypeDef *instance = handle->Instance;\n  uint32_t sr2 = instance->SR2;\n  uint32_t sr1 = instance->SR1;\n  uint32_t cr2 = instance->CR2;\n  \n  if ((handle->Mode == HAL_I2C_MODE_MASTER) || (handle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((sr1 & 0x10001) == 0) || ((cr2 & 0x200) == 0)) {\n      if (((sr1 & 0x8) == 0) || ((cr2 & 0x200) == 0)) {\n        if (((sr1 & 0x2) != 0) && ((cr2 & 0x200) != 0)) {\n          I2C_Master_ADDR(handle);\n        }\n      }\n      else {\n        I2C_Master_ADD10(handle);\n      }\n    }\n    else {\n      I2C_Master_SB(handle);\n    }\n    if ((sr2 & 0x2) == 0) {\n      if ((((sr1 & 0x40) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & 0x4) == 0)) {\n        I2C_MasterReceive_RXNE(handle);\n        return;\n      }\n      if (((sr1 & 0x4) != 0) && ((cr2 & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(handle);\n        return;\n      }\n    }\n    else {\n      if ((((sr1 & 0x40) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & 0x4) == 0)) {\n        I2C_MasterTransmit_TXE(handle);\n        return;\n      }\n      if (((sr1 & 0x4) != 0) && ((cr2 & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(handle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((sr1 & 0x2) != 0) && ((cr2 & 0x200) != 0)) {\n      I2C_Slave_ADDR(handle);\n      return;\n    }\n    if (((sr1 & 0x10) != 0) && ((cr2 & 0x200) != 0)) {\n      I2C_Slave_STOPF(handle);\n      return;\n    }\n    if ((sr2 & 0x2) == 0) {\n      if ((((sr1 & 0x40) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & 0x4) == 0)) {\n        I2C_SlaveReceive_RXNE(handle);\n        return;\n      }\n      if (((sr1 & 0x4) != 0) && ((cr2 & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(handle);\n      }\n    }\n    else {\n      if ((((sr1 & 0x40) != 0) && ((cr2 & 0x400) != 0)) && ((sr1 & 0x4) == 0)) {\n        I2C_SlaveTransmit_TXE(handle);\n        return;\n      }\n      if (((sr1 & 0x4) != 0) && ((cr2 & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(handle);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_ADDR",
                "I2C_Slave_STOPF",
                "I2C_Master_ADD10",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_SB",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_ADDR",
                "I2C_MasterReceive_RXNE"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033b8",
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_event_080033b8"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "stream_status_080069e4",
                "param_1": "status",
                "param_2": "stream",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "impure_ptr"
            },
            "code": "uint stream_status_080069e4(undefined4 *status, undefined4 *stream) {\n  uint result;\n  ushort flags;\n  int impure_ptr = *(int *)PTR__impure_ptr_08006ab0;\n  if (impure_ptr != 0 && *(int *)(impure_ptr + 0x18) == 0) {\n    __sinit(impure_ptr);\n  }\n  if (stream == (undefined4 *)PTR___sf_fake_stdin_08006ab4) {\n    stream = *(undefined4 **)(impure_ptr + 4);\n  }\n  else if (stream == (undefined4 *)PTR___sf_fake_stdout_08006ab8) {\n    stream = *(undefined4 **)(impure_ptr + 8);\n  }\n  else if (stream == (undefined4 *)PTR___sf_fake_stderr_08006abc) {\n    stream = *(undefined4 **)(impure_ptr + 0xc);\n  }\n  flags = *(ushort *)(stream + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *status = STREAM_STATUS_OK;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)stream[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)stream[0xd] != stream + 0x11) {\n          _free_r(status);\n        }\n        stream[0xd] = 0;\n      }\n      *(ushort *)(stream + 3) = flags & 0xffdb;\n      stream[1] = 0;\n      *stream = stream[4];\n    }\n    *(ushort *)(stream + 3) = flags | 8;\n  }\n  if (stream[4] == 0 && ((flags & 0x280) != 0x200)) {\n    __smakebuf_r(status, stream);\n  }\n  flags = *(ushort *)(stream + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = stream[5];\n    }\n    stream[2] = result;\n  }\n  else {\n    stream[2] = 0;\n    stream[6] = -stream[5];\n  }\n  if (stream[4] == 0) {\n    flags = *(ushort *)(stream + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(stream + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "stream_status_080069e4"
        },
        "FUN_080060bc": {
            "renaming": {
                "FUN_080060bc": "loop_through_gpio_pins_080060bc",
                "uVar1": "pin_number"
            },
            "code": "void loop_through_gpio_pins_080060bc(void)\n{\n  uint16_t pin_number;\n  for (pin_number = 0x400; pin_number < 0x8001; pin_number <<= 1) {\n    HAL_GPIO_EXTI_IRQHandler(pin_number);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060bc",
            "calling": [],
            "imported": false,
            "current_name": "loop_through_gpio_pins_080060bc"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "do_nothing_08002580"
            },
            "code": "\nvoid do_nothing_08002580(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002580"
        },
        "FUN_08004b9e": {
            "renaming": {
                "FUN_08004b9e": "incrementSystemTick_08004b9e",
                "HAL_IncTick": "incrementHardwareTick",
                "HAL_SYSTICK_IRQHandler": "handleSystickInterrupt",
                "noOsSystickHandler": "handleNoOsSystickInterrupt"
            },
            "code": "void incrementSystemTick_08004b9e(void)\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  handleNoOsSystickInterrupt();\n  return;\n}",
            "called": [
                "HAL_IncTick",
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9e",
            "calling": [],
            "imported": false,
            "current_name": "incrementSystemTick_08004b9e"
        },
        "FUN_08004b9c": {
            "renaming": {
                "FUN_08004b9c": "do_nothing_08004b9c"
            },
            "code": "\nvoid do_nothing_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b9c",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b9c"
        },
        "FUN_08006940": {
            "renaming": {
                "FUN_08006940": "write_to_stream_08006940",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "param_4",
                "iVar1": "byte_count",
                "uVar2": "ushort_value",
                "puVar3": "buffer_pointer"
            },
            "code": "uint write_to_stream_08006940(int stream, uint character, int *buffer, undefined4 param_4) {\n  int byte_count;\n  uint uVar2;\n  undefined *buffer_pointer;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (int *)PTR___sf_fake_stdin_080069d8) {\n    buffer = *(int **)(stream + 4);\n  }\n  else if (buffer == (int *)PTR___sf_fake_stdout_080069dc) {\n    buffer = *(int **)(stream + 8);\n  }\n  else if (buffer == (int *)PTR___sf_fake_stderr_080069e0) {\n    buffer = *(int **)(stream + 0xc);\n  }\n  buffer[2] = buffer[6];\n  uVar2 = (uint)*(ushort *)(buffer + 3);\n  byte_count = uVar2 << 0x1c;\n  if (((byte_count < 0) && (uVar2 = buffer[4], uVar2 != 0)) || (byte_count = __swsetup_r(stream, buffer, byte_count, uVar2, param_4), byte_count == 0)) {\n    character = character & 0xff;\n    byte_count = *buffer - buffer[4];\n    if ((byte_count < buffer[5]) || (byte_count = _fflush_r(stream, buffer), byte_count == 0)) {\n      buffer[2] = buffer[2] + -1;\n      buffer_pointer = (undefined *)*buffer;\n      *buffer = (int)(buffer_pointer + 1);\n      *buffer_pointer = (char)character;\n      if (byte_count + 1 != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      byte_count = _fflush_r(stream, buffer);\n      if (byte_count == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006940",
            "calling": [
                "__sfputc_r"
            ],
            "imported": false,
            "current_name": "write_to_stream_08006940"
        },
        "FUN_08005730": {
            "renaming": {
                "FUN_08005730": "send_uart_debug_message_08005730",
                "file_UNUSED": "file_unused",
                "ptr": "message",
                "len": "message_length",
                "sVar1": "bytes_sent"
            },
            "code": "int send_uart_debug_message_08005730(int file_unused, char *message, int message_length)\n{\n  size_t bytes_sent;\n  bytes_sent = send_uart_debug_message_08005730((uint8_t *)message, message_length);\n  return bytes_sent;\n}",
            "called": [
                "uart_debug_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005730",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "send_uart_debug_message_08005730"
        },
        "FUN_080058ea": {
            "renaming": {
                "FUN_080058ea": "calculateNextTailPosition_080058ea",
                "obj": "serial_object",
                "uVar1": "tail_plus_one",
                "uVar2": "tail",
                "iVar3": "tail_plus_one"
            },
            "code": "int calculateNextTailPosition_080058ea(serial_t_conflict *serial_object)\n{\n  const ushort tail_plus_one = serial_object->tx_tail + 1;\n  const ushort tail = tail_plus_one & 0x7f;\n  if (tail_plus_one == 0) {\n    tail = -(-tail_plus_one & 0x7f);\n  }\n  serial_object->tx_tail = tail;\n  if (serial_object->tx_head != serial_object->tx_tail) {\n    return 0;\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ea",
            "calling": [],
            "imported": false,
            "current_name": "calculateNextTailPosition_080058ea"
        },
        "FUN_08002582": {
            "renaming": {
                "FUN_08002582": "handle_systick_interrupt_08002582"
            },
            "code": "void handle_systick_interrupt_08002582(void)\n{\n  HAL_SYSTICK_Callback();\n  return;\n}",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002582",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "handle_systick_interrupt_08002582"
        },
        "FUN_08005976": {
            "renaming": {
                "FUN_08005976": "waitForTransmissionCompletion_08005976",
                "this": "serial",
                "_written": "data_written",
                "_serial": "serial_data",
                "tx_head": "transmission_head",
                "tx_tail": "transmission_tail"
            },
            "code": "void __thiscall HardwareSerial::waitForTransmissionCompletion_08005976(HardwareSerial *serial) {\n  if (serial->isDataWritten()) {\n    while (serial->tx_head != serial->tx_tail) {\n    }\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005976",
            "calling": [],
            "imported": false,
            "current_name": "waitForTransmissionCompletion_08005976"
        },
        "FUN_08004884": {
            "renaming": {
                "FUN_08004884": "get_GPIO_08004884",
                "port_idx": "port_index",
                "pGVar1": "gpio_type",
                "tmpreg": "reg_1",
                "tmpreg_1": "reg_2",
                "tmpreg_2": "reg_3",
                "tmpreg_3": "reg_4",
                "tmpreg_4": "reg_5"
            },
            "code": "GPIO_TypeDef * get_GPIO_08004884(uint32_t port_index) {\n  GPIO_TypeDef *gpio_type;\n  uint32_t reg_1;\n  uint32_t reg_2;\n  uint32_t reg_3;\n  uint32_t reg_4;\n  uint32_t reg_5;\n  switch(port_index) {\n    case 0:\n      *(uint *)(PTR_DAT_08004914 + 0x18) |= 4;\n      gpio_type = PTR_DAT_08004918;\n      break;\n    case 1:\n      *(uint *)(PTR_DAT_08004914 + 0x18) |= 8;\n      gpio_type = PTR_DAT_0800491c;\n      break;\n    case 2:\n      *(uint *)(PTR_DAT_08004914 + 0x18) |= 0x10;\n      gpio_type = PTR_DAT_08004920;\n      break;\n    case 3:\n      *(uint *)(PTR_DAT_08004914 + 0x18) |= 0x20;\n      gpio_type = PTR_DAT_08004924;\n      break;\n    case 4:\n      *(uint *)(PTR_DAT_08004914 + 0x18) |= 0x40;\n      gpio_type = PTR_DAT_08004928;\n      break;\n    default:\n      gpio_type = (GPIO_TypeDef *)0x0;\n  }\n  return gpio_type;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004884",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "get_GPIO_08004884"
        },
        "FUN_08005fa0": {
            "renaming": {
                "FUN_08005fa0": "free_gpio_irq_configuration_08005fa0",
                "param_1": "list_start",
                "puVar1": "current_node",
                "puVar2": "previous_node"
            },
            "code": "void free_gpio_irq_configuration_08005fa0(void *list_start)\n{\n    undefined *current_node = PTR___malloc_free_list_08005fc0;\n    while (current_node != PTR_gpio_irq_conf_08005fc4) {\n        undefined *previous_node = current_node - 0x14;\n        if (*(code **)(current_node - 8) != (code *)0x0) {\n            (**(code **)(current_node - 8))(current_node - 0x10, current_node - 0x10, 3);\n        }\n        current_node = previous_node;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fa0",
            "calling": [],
            "imported": false,
            "current_name": "free_gpio_irq_configuration_08005fa0"
        },
        "FUN_08001be8": {
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "i",
                "puVar2": "completed_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void initialize_system_08001be8(void)\n{\n  int i = 0;\n  undefined4 *completed_ptr = (undefined4 *)PTR_completed_8667_08001c28;\n  while(PTR___dso_handle_08001c20 + i < PTR__edata_08001c24)\n  {\n    *(undefined4 *)(PTR___dso_handle_08001c20 + i) = *(undefined4 *)(PTR__sidata_08001c1c + i);\n    i = i + 4;\n  }\n  while(completed_ptr < PTR__ebss_08001c2c)\n  {\n    *completed_ptr = 0;\n    completed_ptr = completed_ptr + 1;\n  }\n  SystemInit();\n  __libc_init_array();\n  code *jump_table = (code *)0x8001c1a;\n  main();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001be8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08001be8"
        },
        "FUN_080061f0": {
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "error_code",
                "param_2": "size",
                "param_3": "dummy1",
                "param_4": "dummy2",
                "puVar1": "free_list",
                "extraout_r1": "next_block",
                "ppiVar2": "next_block",
                "ppiVar3": "temp_block",
                "piVar4": "data_block",
                "ppiVar5": "prev_block",
                "ppiVar6": "next_block",
                "ppiVar7": "current_block"
            },
            "code": "void allocate_memory_080061f0(int* error_code, int size, int dummy1, int dummy2)\n{\n  if (size == 0) {\n    return;\n  }\n  int** current_block = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    current_block = (int **)((int)current_block + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  int* free_list = PTR___malloc_free_list_08006284;\n  int** prev_block = *(int ***)PTR___malloc_free_list_08006284;\n  if (prev_block == (int **)0x0) {\n    current_block[1] = (int *)0x0;\n    *(int ***)free_list = current_block;\n    int** next_block = extraout_r1;\n    int** temp_block = (int **)free_list;\n  }\n  else if (current_block < prev_block) {\n    int** next_block = (int **)*current_block;\n    int** temp_block = (int **)((int)current_block + (int)next_block);\n    if (prev_block == temp_block) {\n      int* data_block = *prev_block;\n      prev_block = (int **)prev_block[1];\n      temp_block = (int **)((int)data_block + (int)next_block);\n      *current_block = (int *)temp_block;\n    }\n    current_block[1] = (int *)prev_block;\n    *(int ***)free_list = current_block;\n  }\n  else {\n    do {\n      int** next_block = prev_block;\n      temp_block = (int **)next_block[1];\n      if (temp_block == (int **)0x0) break;\n      prev_block = temp_block;\n    } while (temp_block <= current_block);\n    int** next_block = (int **)*prev_block;\n    if ((int **)((int)prev_block + (int)next_block) == current_block) {\n      next_block = (int **)((int)next_block + (int)*current_block);\n      *prev_block = (int *)next_block;\n      if (temp_block == (int **)((int)prev_block + (int)next_block)) {\n        int* data_block = *temp_block;\n        temp_block = (int **)temp_block[1];\n        next_block = (int **)((int)next_block + (int)data_block);\n        *prev_block = (int *)next_block;\n        prev_block[1] = (int *)temp_block;\n      }\n    }\n    else if (current_block < (int **)((int)prev_block + (int)next_block)) {\n      *error_code = 0xc;\n    }\n    else {\n      next_block = (int **)((int)current_block + (int)*current_block);\n      if (temp_block == next_block) {\n        int* data_block = *temp_block;\n        temp_block = (int **)temp_block[1];\n        next_block = (int **)((int)data_block + (int)*current_block);\n        *current_block = (int *)next_block;\n      }\n      current_block[1] = (int *)temp_block;\n      prev_block[1] = (int *)current_block;\n    }\n  }\n  __malloc_unlock(error_code, next_block, temp_block, dummy2);\n  return;\n}",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080061f0",
            "calling": [
                "__sflush_r",
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080061f0"
        },
        "FUN_08002348": {
            "renaming": {
                "FUN_08002348": "stop_adc_conversion_08002348",
                "hadc": "adc_handle",
                "HVar1": "status",
                "HAL_LOCKED": "HAL_LOCKED",
                "HAL_UNLOCKED": "HAL_UNLOCKED",
                "ADC_ConversionStop_Disable": "ADC_ConversionStop_Disable",
                "HAL_OK": "HAL_OK",
                "State": "State",
                "Lock": "Lock"
            },
            "code": "HAL_StatusTypeDef_conflict stop_adc_conversion_08002348(ADC_HandleTypeDef *adc_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  if (adc_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adc_handle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adc_handle);\n  if (status == HAL_OK) {\n    adc_handle->State = (adc_handle->State & 0xffffeefe) | 1;\n  }\n  adc_handle->Lock = HAL_UNLOCKED;\n  return status;\n}",
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002348",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "stop_adc_conversion_08002348"
        },
        "FUN_08004f1c": {
            "renaming": {
                "FUN_08004f1c": "handle_i2c_errors_08004f1c",
                "PTR_i2c_handles_08004f28": "i2c_handles_ptr"
            },
            "code": "void handle_i2c_errors_08004f1c(void)\n{\n  I2C_HandleTypeDef* i2c_handle = *(I2C_HandleTypeDef**)PTR_i2c_handles_08004f28;\n  HAL_I2C_ER_IRQHandler(i2c_handle);\n  return;\n}",
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f1c",
            "calling": [],
            "imported": false,
            "current_name": "handle_i2c_errors_08004f1c"
        },
        "FUN_080060d4": {
            "renaming": {
                "__thiscall std::function<void>::operator__": "invoke_function",
                "this": "function_ptr",
                "this->super__Function_base._M_manager": "function_ptr->manager",
                "this->_M_invoker": "function_ptr->invoker",
                "_Any_data": "any_data",
                "__throw_bad_function_call": "throw_bad_function_call",
                "FUN_080060d4": "invoke_function_080060d4"
            },
            "code": "void invoke_function_080060d4(function_void___ *function_ptr) {\n  if ((function_ptr->super__Function_base)._M_manager != (_Manager_type)0x0) {\n    (*function_ptr->_M_invoker)((_Any_data *)function_ptr);\n    return;\n  }\n  __throw_bad_function_call();\n}",
            "called": [
                "__throw_bad_function_call"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060d4",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "invoke_function_080060d4"
        },
        "FUN_08005a68": {
            "renaming": {
                "HardwareSerial::FUN_08005a68": "setSerialConfig",
                "this": "serial",
                "baud": "baudrate",
                "config": "config",
                "bVar1": "parityBit",
                "iVar2": "dataBits",
                "FUN_08005a68": "setSerialConfig_08005a68"
            },
            "code": "void __thiscall setSerialConfig_08005a68(HardwareSerial *serial, ulong baudrate, byte config) {\n    byte parityBit;\n    int dataBits;\n    \n    (serial->_serial).baudrate = baudrate;\n    serial->_config = config;\n    parityBit = config & 7;\n    if (parityBit == 4) {\n        dataBits = 7;\n    }\n    else if (parityBit == 6) {\n        dataBits = 8;\n    }\n    else if (parityBit == 2) {\n        dataBits = 6;\n    }\n    else {\n        dataBits = 0;\n    }\n    if ((config & 0x30) == 0x30) {\n        (serial->_serial).parity = 0x600;\n        dataBits++;\n    }\n    else if ((config & 0x20) == 0) {\n        (serial->_serial).parity = 0;\n    }\n    else {\n        (serial->_serial).parity = 0x400;\n        dataBits++;\n    }\n    if ((config & 8) == 0) {\n        (serial->_serial).stopbits = 0;\n    }\n    else {\n        (serial->_serial).stopbits = 0x2000;\n    }\n    if (dataBits == 8) {\n        (serial->_serial).databits = 0;\n    }\n    else if (dataBits == 9) {\n        (serial->_serial).databits = 0x1000;\n    }\n    else {\n        dataBits = 0;\n    }\n    if (dataBits != 0) {\n        uart_init((serial_t *)&serial->_serial);\n        uart_attach_rx_callback((serial_t *)&serial->_serial, DAT_08005b14);\n        return;\n    }\n    __assert_func(PTR_s__home_bo__arduino15_packages_STM_08005b20, 299, PTR___PRETTY_FUNCTION___08005b1c, PTR_s_databits__0_08005b18);\n}",
            "called": [
                "__assert_func",
                "uart_attach_rx_callback",
                "uart_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "setSerialConfig_08005a68"
        },
        "FUN_08001814": {
            "renaming": {
                "FUN_08001814": "initialize_08001814",
                "this": "pid",
                "Kp": "proportional_gain",
                "Ki": "integral_gain",
                "Kd": "derivative_gain",
                "POn": "controller_direction",
                "iVar1": "is_less_than_zero",
                "uVar2": "upper_bits_of_division",
                "in_r2": "unused",
                "in_r3": "unused",
                "uVar3": "unsigned_division_result",
                "bVar4": "is_not_reversed",
                "uVar5": "unsigned_dividend",
                "dVar6": "proportional_gain_delta",
                "dVar7": "integral_gain_delta",
                "dVar8": "derivative_gain_delta"
            },
            "code": "void PID::initialize_08001814(PID *pid, double proportional_gain, double integral_gain, double derivative_gain, int controller_direction) {\n  bool is_not_reversed;\n  if (proportional_gain >= 0 && integral_gain >= 0) {\n    pid->is_proportional_on = derivative_gain != 1;\n    is_not_reversed = derivative_gain == 1;\n    if (pid->is_proportional_on) {\n      derivative_gain = 0;\n    }\n    pid->is_error_on_proportional = is_not_reversed;\n    pid->proportional_gain = proportional_gain;\n    pid->integral_gain = integral_gain;\n    pid->derivative_gain = derivative_gain;\n    double sample_time = pid->sample_time;\n    double time_constant = 0.1;\n    double proportional_gain_delta = proportional_gain * sample_time;\n    double integral_gain_delta = integral_gain / sample_time;\n    double derivative_gain_delta = derivative_gain / (sample_time * time_constant);\n    if (controller_direction == 1) {\n      pid->proportional_gain = -proportional_gain;\n      proportional_gain_delta = -proportional_gain_delta;\n      integral_gain_delta = -integral_gain_delta;\n      derivative_gain_delta = -derivative_gain_delta;\n    }\n    pid->proportional_gain_delta = proportional_gain_delta;\n    pid->integral_gain_delta = integral_gain_delta;\n    pid->derivative_gain_delta = derivative_gain_delta;\n  }\n}\n",
            "called": [
                "__subdf3",
                "__aeabi_dcmplt",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001814",
            "calling": [
                "SetTunings",
                "PID"
            ],
            "imported": false,
            "current_name": "initialize_08001814"
        },
        "FUN_080056c0": {
            "renaming": {
                "FUN_080056c0": "handle_USART3_interrupt_080056c0",
                "USART3_IRQn": "USART3_interrupt_number",
                "PTR_uart_handlers_080056d4": "uart_handlers_pointer",
                "UART_HandleTypeDef": "UART_handler_type",
                "uart_handler": "current_UART_handler"
            },
            "code": "void handle_USART3_interrupt_080056c0(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);\n  UART_HandleTypeDef* uart_handler = *(UART_HandleTypeDef **)(PTR_uart_handlers_080056d4 + 8);\n  if (uart_handler != NULL) {\n    HAL_UART_IRQHandler(uart_handler);\n  }\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080056c0",
            "calling": [],
            "imported": false,
            "current_name": "handle_USART3_interrupt_080056c0"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "get_afl_call_result_08000aec",
                "ticks": "num_ticks",
                "uVar1": "result",
                "PTR_noHyperCall_08000b04": "no_hypercall_ptr"
            },
            "code": "int get_afl_call_result_08000aec(int ticks) {\n  uint32_t result = 0;\n  if (*(int *)PTR_noHyperCall_08000b04 != 0) {\n    return result;\n  }\n  result = aflCall(1, ticks, 0);\n  return result;\n}",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "get_afl_call_result_08000aec"
        },
        "FUN_0800572c": {
            "renaming": {
                "FUN_0800572c": "calculate_file_size_0800572c",
                "file_UNUSED": "file_descriptor",
                "ptr_UNUSED": "buffer",
                "len_UNUSED": "buffer_size"
            },
            "code": "int calculate_file_size_0800572c(int file_descriptor, char *buffer, int buffer_size) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800572c",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "calculate_file_size_0800572c"
        },
        "FUN_08004e12": {
            "renaming": {
                "FUN_08004e12": "handle_timer_interrupt_08004e12",
                "htim": "timer_handler",
                "psVar1": "timer_obj",
                "get_timer_obj": "get_timer_object",
                "irqHandle": "irq_handler"
            },
            "code": "void handle_timer_interrupt_08004e12(TIM_HandleTypeDef *timer_handler)\n{\n  stimer_t *timer_obj;\n  timer_obj = get_timer_object(timer_handler);\n  if (timer_obj->irqHandle != NULL) {\n    (*timer_obj->irqHandle)(timer_obj);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e12"
        },
        "FUN_08000a58": {
            "renaming": {
                "FUN_08000a58": "convert_to_integer_08000a58",
                "param_1": "sign",
                "param_2": "fraction",
                "uVar1": "shifted_value",
                "iVar2": "shifted_fraction",
                "uVar3": "shift_amount"
            },
            "code": "uint convert_to_integer_08000a58(uint sign, uint fraction)\n{\n  uint result;\n  int shifted_fraction;\n  uint shift_amount;\n  uint shifted_value;\n  \n  shifted_fraction = fraction * 2 + 0x200000;\n  if (fraction * 2 < 0xffe00000) {\n    if (-1 < shifted_fraction) {\n      return 0;\n    }\n    shift_amount = -shifted_fraction - 0x3e1;\n    if (shifted_fraction >> 0x15 < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (fraction << 0xb | 0x80000000 | sign >> 0x15) >> (shift_amount & 0xff);\n      if ((fraction & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((sign | fraction << 0xc) != 0) {\n    return 0;\n  }\n  fraction = fraction & 0x80000000;\n  if (fraction == 0) {\n    fraction = 0x7fffffff;\n  }\n  return fraction;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a58",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "convert_to_integer_08000a58"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_system_clock_08001b48",
                "HVar1": "status",
                "uVar2": "hclk_freq",
                "PeriphClkInit": "periph_clk_init",
                "RCC_ClkInitStruct": "clk_init_struct",
                "RCC_OscInitStruct": "osc_init_struct"
            },
            "code": "void initialize_system_clock_08001b48(void)\n{\n  HAL_StatusTypeDef status;\n  uint32_t hclk_freq;\n  RCC_PeriphCLKInitTypeDef periph_clk_init;\n  RCC_ClkInitTypeDef clk_init_struct;\n  RCC_OscInitTypeDef osc_init_struct;\n\n  osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  osc_init_struct.HSIState = RCC_HSI_ON;\n  osc_init_struct.HSICalibrationValue = 0x10;\n  osc_init_struct.PLL.PLLState = RCC_PLL_ON;\n  osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL16;\n  status = HAL_RCC_OscConfig(&osc_init_struct);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x88);\n  }\n\n  clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_SYSCLK;\n  clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  clk_init_struct.APB1CLKDivider = RCC_HCLK_DIV2;\n  clk_init_struct.APB2CLKDivider = RCC_HCLK_DIV1;\n  status = HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x95);\n  }\n\n  periph_clk_init.PeriphClockSelection = RCC_PERIPHCLK_ADC;\n  periph_clk_init.AdcClockSelection = RCC_ADCPCLK2_DIV8;\n  status = HAL_RCCEx_PeriphCLKConfig(&periph_clk_init);\n  if (status != HAL_OK) {\n    _Error_Handler(PTR_s__home_bo__arduino15_packages_STM_08001be4,0x9c);\n  }\n\n  hclk_freq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config((uint32_t)((uint64_t)SYSTICK_RELOAD_VALUE * (uint64_t)hclk_freq / (uint64_t)8));\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8);\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config",
                "HAL_RCC_OscConfig",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_CLKSourceConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "hw_config_init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_08001b48"
        },
        "FUN_08004092": {
            "renaming": {
                "FUN_08004092": "update_TIM_channel_state_08004092",
                "TIMx": "tim",
                "Channel": "channel",
                "ChannelState": "channel_state",
                "CCER": "ccer",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void update_TIM_channel_state_08004092(TIM_TypeDef *tim, uint32_t channel, uint32_t channel_state) {\n  uint32_t mask = ~(1 << (channel & 0xff));\n  tim->CCER = (tim->CCER & mask) | (channel_state << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004092",
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "imported": false,
            "current_name": "update_TIM_channel_state_08004092"
        },
        "FUN_08005cd4": {
            "renaming": {
                "FUN_08005cd4": "calculateTotalPrintLength_08005cd4",
                "this": "printObj",
                "c": "stringToPrint",
                "sVar1": "printLength1",
                "sVar2": "printLength2"
            },
            "code": "size_t __thiscall Print::calculateTotalPrintLength_08005cd4(Print *printObj, char *stringToPrint)\n{\n  size_t printLength1;\n  size_t printLength2;\n  printLength1 = print(printObj, stringToPrint);\n  printLength2 = calculateTotalPrintLength_08005cd4(printObj);\n  return printLength2 + printLength1;\n}",
            "called": [
                "print",
                "println"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cd4",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculateTotalPrintLength_08005cd4"
        },
        "FUN_08000450": {
            "renaming": {
                "FUN_08000450": "calculate_hash_08000450",
                "param_1": "input_value",
                "uVar1": "temp_value1",
                "uVar2": "temp_value2",
                "uVar3": "temp_value3",
                "uVar4": "temp_value4",
                "uVar5": "temp_value5",
                "iVar6": "leading_zeroes_count",
                "uVar7": "temp_value6",
                "in_r12": "in_register12",
                "bVar8": "condition2",
                "bVar9": "condition1",
                "bVar10": "condition3",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "ulonglong calculate_hash_08000450(uint input_value, undefined4 param_2, undefined4 param_3, uint param_4)\n{\n  uint temp_value1;\n  uint temp_value2;\n  uint temp_value3;\n  uint temp_value4;\n  uint temp_value5;\n  int leading_zeroes_count;\n  uint temp_value6;\n  uint temp_value7;\n  uint in_r12;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp_value5 = input_value << 1;\n  condition1 = temp_value5 == 0;\n  temp_value1 = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  temp_value4 = (uint)((int)temp_value5 >> 3) >> 1;\n  temp_value3 = temp_value1 | temp_value4;\n  input_value = input_value << 0x1d;\n  if (!condition1) {\n    param_4 = temp_value5 & 0xff000000;\n    condition1 = param_4 == 0;\n  }\n  if (!condition1) {\n    condition1 = param_4 == 0xff000000;\n  }\n  if (!condition1) {\n    return CONCAT44(temp_value3,input_value) ^ 0x3800000000000000;\n  }\n  if (temp_value5 == 0 || param_4 == 0xff000000) {\n    return CONCAT44(temp_value3,input_value);\n  }\n  temp_value2 = input_value;\n  temp_value5 = temp_value4;\n  if (temp_value4 == 0) {\n    temp_value2 = 0;\n    temp_value5 = input_value;\n  }\n  leading_zeroes_count = count_leading_zeroes(temp_value5);\n  if (temp_value4 == 0) {\n    leading_zeroes_count = leading_zeroes_count + 0x20;\n  }\n  temp_value6 = leading_zeroes_count - 0xb;\n  condition3 = SBORROW4(temp_value6,0x20);\n  temp_value4 = leading_zeroes_count - 0x2b;\n  condition2 = (int)temp_value4 < 0;\n  bool condition4 = temp_value4 == 0;\n  if ((int)temp_value6 < 0x20) {\n    condition3 = SCARRY4(temp_value4,0xc);\n    leading_zeroes_count = leading_zeroes_count + -0x1f;\n    condition2 = leading_zeroes_count < 0;\n    condition4 = leading_zeroes_count == 0;\n    temp_value4 = temp_value6;\n    if (!condition4 && condition2 == condition3) {\n      temp_value2 = temp_value5 << (temp_value6 & 0xff);\n      temp_value5 = temp_value5 >> (0xcU - leading_zeroes_count & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition4 || condition2 != condition3) {\n    in_r12 = 0x20 - temp_value4;\n  }\n  temp_value5 = temp_value5 << (temp_value4 & 0xff);\n  if (condition4 || condition2 != condition3) {\n    temp_value5 = temp_value5 | temp_value2 >> (in_r12 & 0xff);\n  }\n  if (condition4 || condition2 != condition3) {\n    temp_value2 = temp_value2 << (temp_value4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp_value6 < 0x381) {\n    return CONCAT44(temp_value5 + (0x380 - temp_value6) * 0x100000 | temp_value1,temp_value2);\n  }\n  temp_value4 = ~(0x380 - temp_value6);\n  if ((int)temp_value4 < 0x1f) {\n    leading_zeroes_count = temp_value4 - 0x13;\n    if (leading_zeroes_count != 0 && leading_zeroes_count < 0 == SCARRY4(temp_value4 - 0x1f,0xc)) {\n      return CONCAT44(temp_value3,temp_value2 >> (0x20 - (0xcU - leading_zeroes_count) & 0xff) | temp_value5 << (0xcU - leading_zeroes_count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_value4 = temp_value4 + 1;\n    return CONCAT44(temp_value1 | temp_value5 >> (temp_value4 & 0xff),\n                    temp_value2 >> (temp_value4 & 0xff) | temp_value5 << (0x20 - temp_value4 & 0xff));\n  }\n  return CONCAT44(temp_value3,temp_value5 >> (temp_value4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000450",
            "calling": [],
            "imported": false,
            "current_name": "calculate_hash_08000450"
        },
        "FUN_08005bb0": {
            "renaming": {
                "FUN_08005bb0": "initializeSerial_08005bb0",
                "__initialize_p": "should_initialize",
                "__priority": "priority",
                "PTR_Serial2_08005bd0": "serial2",
                "DAT_08005bcc": "baudrate"
            },
            "code": "void initializeSerial_08005bb0(int should_initialize, int priority) {\n  if (should_initialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    HardwareSerial::HardwareSerial(&PTR_Serial2_08005bd0, DAT_08005bcc);\n  }\n  return;\n}",
            "called": [
                "HardwareSerial"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb0",
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "imported": false,
            "current_name": "initializeSerial_08005bb0"
        },
        "FUN_080014ba": {
            "renaming": {
                "__thiscall LiquidCrystal::FUN_080014ba": "void setupLCD",
                "this": "lcd",
                "fourbitmode": "is_four_bit_mode",
                "rs": "rs_pin",
                "rw": "rw_pin",
                "enable": "enable_pin",
                "d0": "data_pins[0]",
                "d1": "data_pins[1]",
                "d2": "data_pins[2]",
                "d3": "data_pins[3]",
                "d4": "data_pins[4]",
                "d5": "data_pins[5]",
                "d6": "data_pins[6]",
                "d7": "data_pins[7]",
                "_rs_pin": "rs_pin",
                "_rw_pin": "rw_pin",
                "_enable_pin": "enable_pin",
                "_data_pins": "data_pins",
                "fourbitmode == '\\0'": "is_four_bit_mode == 0",
                "_displayfunction": "_display_function",
                "'\\x10'": "0x10",
                "'\\x01'": "0x01",
                "'\\0'": "0x00",
                "begin(this, '\\x10', '\\x01', '\\0')": "begin(lcd, 0x10, 0x01, 0x00)",
                "FUN_080014ba": "setupLCD_080014ba"
            },
            "code": "void setupLCD_080014ba(LiquidCrystal *lcd, uint8_t is_four_bit_mode, uint8_t rs_pin, uint8_t rw_pin, uint8_t enable_pin, uint8_t data_pins[8]) {\n    lcd->_rs_pin = rs_pin;\n    lcd->_rw_pin = rw_pin;\n    lcd->_enable_pin = enable_pin;\n    for (int i = 0; i < 8; i++) {\n        lcd->_data_pins[i] = data_pins[i];\n    }\n    if (is_four_bit_mode == 0) {\n        lcd->_displayfunction = 0x10;\n    }\n    else {\n        lcd->_displayfunction = 0x00;\n    }\n    begin(lcd, 0x10, 0x01, 0x00);\n}",
            "called": [
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014ba",
            "calling": [
                "LiquidCrystal"
            ],
            "imported": false,
            "current_name": "setupLCD_080014ba"
        },
        "FUN_08003c90": {
            "renaming": {
                "FUN_08003c90": "configurePeriphClocks_08003c90",
                "PeriphClkInitTypeDef_conflict": "RCC_PeriphCLKInitTypeDef",
                "*PeriphClkInit": "*PeriphClkInit",
                "iVar1": "i",
                "*puVar2": "*ptr",
                "uVar3": "reg",
                "uVar4": "tmpreg",
                "uVar5": "selection",
                "bVar6": "flag",
                "tmpreg": "tmpreg",
                "DAT_08003d98": "RTC_BASE",
                "DAT_08003d9c": "RTC_CR",
                "DAT_08003da0": "RTC_BKP_REGS",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "code": "HAL_StatusTypeDef configurePeriphClocks_08003c90(RCC_PeriphCLKInitTypeDef *PeriphClkInit)\n{\n  int i;\n  uint32_t *ptr;\n  uint32_t reg;\n  uint selection;\n  bool flag;\n  uint32_t tmpreg;\n  \n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) != 0) {\n    flag = (*(uint *)(DAT_08003d98 + 0x1c) & 0x10000000) == 0;\n    if (flag) {\n      *(uint *)(DAT_08003d98 + 0x1c) = *(uint *)(DAT_08003d98 + 0x1c) | 0x10000000;\n    }\n    if ((*DAT_08003d9c & 0x100) == 0) {\n      *DAT_08003d9c = *DAT_08003d9c | 0x100;\n      reg = HAL_GetTick();\n      while ((*DAT_08003d9c & 0x100) == 0) {\n        tmpreg = HAL_GetTick();\n        if (100 < tmpreg - reg) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    ptr = DAT_08003da0;\n    i = DAT_08003d98;\n    selection = *(uint *)(DAT_08003d98 + 0x20) & 0x300;\n    if ((selection != 0) && (selection != (PeriphClkInit->RTCClockSelection & 0x300))) {\n      selection = *(uint *)(DAT_08003d98 + 0x20);\n      *DAT_08003da0 = 1;\n      *ptr = 0;\n      *(uint *)(i + 0x20) = selection & 0xfffffcff;\n      if ((selection & 1) != 0) {\n        reg = HAL_GetTick();\n        while ((*(uint *)(DAT_08003d98 + 0x20) & 2) == 0) {\n          tmpreg = HAL_GetTick();\n          if (5000 < tmpreg - reg) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n    i = DAT_08003d98;\n    *(uint *)(DAT_08003d98 + 0x20) = *(uint *)(DAT_08003d98 + 0x20) & 0xfffffcff | PeriphClkInit->RTCClockSelection;\n    if (flag) {\n      *(uint *)(i + 0x1c) = *(uint *)(i + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) != 0) {\n    *(uint *)(DAT_08003d98 + 4) = *(uint *)(DAT_08003d98 + 4) & 0xffff3fff | PeriphClkInit->AdcClockSelection;\n  }\n  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USB) != 0) {\n    *(uint *)(DAT_08003d98 + 4) = *(uint *)(DAT_08003d98 + 4) & 0xffbfffff | PeriphClkInit->UsbClockSelection;\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c90",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configurePeriphClocks_08003c90"
        },
        "FUN_08002514": {
            "renaming": {
                "FUN_08002514": "calculate_ticks_08002514",
                "TicksNumb": "ticks_number",
                "puVar1": "ticks_data",
                "DAT_08002538": "ticks_data",
                "DAT_0800253c": "data_pointer"
            },
            "code": "uint32_t calculate_ticks_08002514(uint32_t ticks_number)\n{\n  uint32_t *DAT_08002538 = DAT_08002538;\n  if (ticks_number - 1 < 0x1000000) {\n    DAT_08002538[1] = ticks_number - 1;\n    *(undefined *)(DAT_0800253c + 0x23) = 0xf0;\n    DAT_08002538[2] = 0;\n    *DAT_08002538 = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002514",
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "imported": false,
            "current_name": "calculate_ticks_08002514"
        },
        "FUN_08005c1c": {
            "renaming": {
                "FUN_08005c1c::FUN_08005c1c": "initializeAddress",
                "first_octet": "octet1",
                "second_octet": "octet2",
                "third_octet": "octet3",
                "fourth_octet": "octet4",
                "PTR_DAT_08005c34": "PTR_DAT_08005c34",
                "this->super_Printable": "this->printable",
                "this->_address": "this->address",
                "FUN_08005c1c": "initializeAddress_08005c1c"
            },
            "code": "initializeAddress_08005c1c * __thiscall initializeAddress_08005c1c(initializeAddress_08005c1c *this, uint8_t octet1, uint8_t octet2, uint8_t octet3, uint8_t octet4)\n{\n  (this->super_Printable)._vptr_Printable = (_func_int_varargs **)PTR_DAT_08005c34;\n  (this->_address).bytes[0] = octet1;\n  (this->_address).bytes[1] = octet2;\n  (this->_address).bytes[2] = octet3;\n  (this->_address).bytes[3] = octet4;\n  return this;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c1c",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "initializeAddress_08005c1c"
        },
        "FUN_08006dc8": {
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "permission_result",
                "param_4": "file_type_result",
                "iVar1": "file_status",
                "uVar2": "permission_value",
                "auStack_4c": "temp_buffer",
                "local_48": "file_type_mask"
            },
            "code": "int check_file_permissions_08006dc8(int file_descriptor, int file_info_offset, int* permission_result, uint* file_type_result)\n{\n    int file_status;\n    uint file_type;\n\n    if (*(short *)(file_info_offset + 0xe) < 0 || _fstat_r(file_descriptor, (int)*(short *)(file_info_offset + 0xe), &file_status) < 0)\n    {\n        *file_type_result = 0;\n        if ((int)((uint)*(ushort *)(file_info_offset + 0xc) << 0x18) < 0)\n        {\n            *permission_result = 0x40;\n            goto LAB_08006e08;\n        }\n    }\n    else\n    {\n        file_type = (uint)((file_status & 0xf000) == 0x2000);\n        *file_type_result = file_type;\n    }\n\n    *permission_result = 0x400;\n\nLAB_08006e08:\n    return 0;\n}",
            "called": [
                "_fstat_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc8",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_permissions_08006dc8"
        },
        "FUN_0800412c": {
            "renaming": {
                "FUN_0800412c": "disable_channel_0800412c",
                "htim": "timer_handle",
                "Channel": "channel",
                "pTVar1": "tim_instance",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "TIM_CCxNChannelCmd": "TIM_CCxNChannelCmd",
                "Instance": "tim_instance",
                "CCER": "ccer",
                "BDTR": "bdtr",
                "CR1": "cr1"
            },
            "code": "HAL_StatusTypeDef_conflict disable_channel_0800412c(TIM_HandleTypeDef *htim, uint32_t channel)\n{\n  TIM_TypeDef *tim_instance = htim->Instance;\n  TIM_CCxNChannelCmd(tim_instance, channel, 0);\n  if (((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\n    tim_instance->BDTR &= 0xffff7fff;\n  }\n  if (((tim_instance->CCER & 0x1111) == 0) && ((tim_instance->CCER & 0x444) == 0)) {\n    tim_instance->CR1 &= 0xfffffffe;\n  }\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800412c",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disable_channel_0800412c"
        },
        "FUN_08007090": {
            "renaming": {
                "std::FUN_08007090": "abort_program",
                "FUN_08007090": "abort_program_08007090"
            },
            "code": "void abort_program_08007090() \n{\n    abort();\n}",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007090",
            "calling": [
                "operator()"
            ],
            "imported": false,
            "current_name": "abort_program_08007090"
        },
        "FUN_0800492c": {
            "renaming": {
                "FUN_0800492c": "get_ADC_channel_0800492c",
                "pin": "adc_pin",
                "uVar1": "adc_function",
                "PTR_PinMap_ADC_08004944": "PTR_PinMap_ADC_08004944",
                "shifted_adc_function": "shifted_adc_function"
            },
            "code": "uint32_t get_ADC_channel_0800492c(PinName_conflict adc_pin)\n{\n  uint32_t adc_function;\n  adc_function = pinmap_function(adc_pin, (PinMap_conflict *)PTR_PinMap_ADC_08004944);\n  uint32_t shifted_adc_function = (adc_function << 12) >> 27;\n  if (shifted_adc_function > 15) {\n    shifted_adc_function = 0;\n  }\n  return shifted_adc_function;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800492c",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_channel_0800492c"
        },
        "FUN_08000cbc": {
            "renaming": {
                "FUN_08000cbc": "initialize_static_variables_08000cbc"
            },
            "code": "void initialize_static_variables_08000cbc(void) {\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08000cbc"
        },
        "FUN_0800480a": {
            "renaming": {
                "FUN_0800480a": "set_pin_value_0800480a",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index"
            },
            "code": "void set_pin_value_0800480a(PinName_conflict pin, uint32_t *pin_map) {\n    uint32_t pin_index = (uint32_t)pin >> 28;\n    pin_map[pin_index] |= 1 << ((uint32_t)pin & 0xF);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800480a",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_value_0800480a"
        },
        "FUN_080015f8": {
            "renaming": {
                "MAX31855::FUN_080015f8": "getTemperature",
                "this": "sensor",
                "unit": "unit",
                "uVar1": "rawData",
                "uVar2": "temperatureData",
                "uVar4": "absTemperature",
                "uVar5": "tempConversion",
                "extraout_d0": "NAN",
                "extraout_d0_00": "NAN",
                "dVar3": "temperature",
                "DAT_080016a0": "4096.0",
                "DAT_080016a4": "0.25",
                "DAT_080016a8": "1.8",
                "DAT_080016ac": "32.0",
                "FAHRENHEIT": "unit",
                "FUN_080015f8": "getTemperature_080015f8"
            },
            "code": "double __thiscall getTemperature_080015f8(MAX31855 *sensor, unit_t unit) {\n  ulong rawData = readData(sensor);\n  if ((rawData & 0x10000) != 0) {\n    uint error = rawData & 7;\n    if (error == 2 || error == 4) {\n      return 0.0;\n    }\n    return NAN;\n  }\n  uint temperatureData = rawData >> 0x12;\n  double temperature = static_cast<double>(temperatureData & 0x1fff);\n  if ((temperatureData & 0x2000) != 0) {\n    temperature = -1.0 * temperature;\n    temperature += DAT_080016a0;\n  }\n  temperature *= DAT_080016a4;\n  if (unit == FAHRENHEIT) {\n    temperature = temperature * DAT_080016a8 + DAT_080016ac;\n  }\n  return temperature;\n}",
            "called": [
                "readData",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015f8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "getTemperature_080015f8"
        },
        "FUN_08005c38": {
            "renaming": {
                "FUN_08005c38": "initializeIPAddress_08005c38",
                "__initialize_p": "shouldInitialize",
                "__priority": "priorityLevel"
            },
            "code": "void initializeIPAddress_08005c38(int shouldInitialize, int priorityLevel) {\n  if (shouldInitialize && priorityLevel == 0xffff) {\n    IPAddress::IPAddress((IPAddress *)PTR_INADDR_NONE_08005c60, \"\\0\", \"\\0\", \"\\0\", \"\\0\");\n    return;\n  }\n  return;\n}",
            "called": [
                "IPAddress"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c38",
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "imported": false,
            "current_name": "initializeIPAddress_08005c38"
        },
        "FUN_08005f8c": {
            "renaming": {
                "FUN_08005f8c": "get_bit_position_of_pin_08005f8c",
                "pin": "pin",
                "uVar1": "current_pin",
                "uVar2": "bit_position"
            },
            "code": "uint8_t get_bit_position_of_pin_08005f8c(uint16_t pin) {\n  uint16_t current_pin = pin;\n  uint8_t bit_position = 0;\n  while (current_pin != 1) {\n    current_pin = current_pin >> 1;\n    bit_position++;\n  }\n  return bit_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f8c",
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "imported": false,
            "current_name": "get_bit_position_of_pin_08005f8c"
        },
        "FUN_08006f5a": {
            "renaming": {
                "FUN_08006f5a": "write_to_file_08006f5a",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "buffer",
                "param_4": "size"
            },
            "code": "void write_to_file_08006f5a(int file_descriptor, int buffer_address, void* buffer, size_t size) {\n  int offset = *(short*)(buffer_address + 0xe);\n  unsigned short flag = *(unsigned short*)(buffer_address + 0xc);\n  if((flag << 0x17) < 0) {\n    _lseek_r(file_descriptor, offset, 0, 2);\n  }\n  *(unsigned short*)(buffer_address + 0xc) = flag & 0xefff;\n  _write_r(file_descriptor, offset, buffer, size);\n  return;\n}",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f5a",
            "calling": [],
            "imported": false,
            "current_name": "write_to_file_08006f5a"
        },
        "FUN_08000b08": {
            "renaming": {
                "FUN_08000b08": "initialize_peripherals_08000b08",
                "__initialize_p": "should_initialize",
                "__priority": "priority_level",
                "PID": "oven_pid",
                "PTR_reflowOvenPID_08000b9c": "oven_pid_ptr",
                "PTR_input_08000b98": "input_ptr",
                "PTR_output_08000b94": "output_ptr",
                "PTR_setpoint_08000b90": "setpoint_ptr",
                "PTR_kp_08000b8c": "kp_ptr",
                "PTR_ki_08000b88": "ki_ptr",
                "PTR_kd_08000b84": "kd_ptr",
                "LiquidCrystal": "lcd",
                "PTR_lcd_08000bb8": "lcd_ptr",
                "*PTR_lcdRsPin_08000ba0": "lcd_rs_pin",
                "*PTR_lcdEPin_08000ba4": "lcd_e_pin",
                "*PTR_lcdD4Pin_08000ba8": "lcd_d4_pin",
                "*PTR_lcdD5Pin_08000bac": "lcd_d5_pin",
                "*PTR_lcdD6Pin_08000bb0": "lcd_d6_pin",
                "*PTR_lcdD7Pin_08000bb4": "lcd_d7_pin",
                "MAX31855": "thermocouple",
                "PTR_thermocouple_08000bc8": "thermocouple_ptr",
                "*PTR_thermocoupleSOPin_08000bc4": "thermocouple_so_pin",
                "*PTR_thermocoupleCSPin_08000bc0": "thermocouple_cs_pin",
                "*PTR_thermocoupleCLKPin_08000bbc": "thermocouple_clk_pin"
            },
            "code": "void initialize_peripherals_08000b08(int should_initialize, int priority_level) {\n  if (should_initialize == 1 && priority_level == 0xffff) {\n    PID oven_pid(PTR_reflowOvenPID_08000b9c, PTR_input_08000b98, PTR_output_08000b94, PTR_setpoint_08000b90, *PTR_kp_08000b8c, *PTR_ki_08000b88, *PTR_kd_08000b84, 0);\n    LiquidCrystal lcd(PTR_lcd_08000bb8, *PTR_lcdRsPin_08000ba0, *PTR_lcdEPin_08000ba4, *PTR_lcdD4Pin_08000ba8, *PTR_lcdD5Pin_08000bac, *PTR_lcdD6Pin_08000bb0, *PTR_lcdD7Pin_08000bb4);\n    MAX31855 thermocouple(PTR_thermocouple_08000bc8, *PTR_thermocoupleSOPin_08000bc4, *PTR_thermocoupleCSPin_08000bc0, *PTR_thermocoupleCLKPin_08000bbc);\n  }\n}\n",
            "called": [
                "MAX31855",
                "LiquidCrystal",
                "PID"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000b08",
            "calling": [
                "_GLOBAL__sub_I_lcdMessagesReflowStatus"
            ],
            "imported": false,
            "current_name": "initialize_peripherals_08000b08"
        },
        "FUN_08006cb4": {
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data_ptr",
                "uVar1": "return_value",
                "iVar2": "global_ptr",
                "bVar3": "is_global_ptr",
                "PTR__global_impure_ptr_08006d0c": "PTR__global_impure_ptr",
                "DAT_08006d10": "DAT_constant"
            },
            "code": "void initialize_data_08006cb4(int data_ptr)\n{\n    if (*(int *)(data_ptr + 0x18) == 0) {\n        *(int *)(data_ptr + 0x48) = 0;\n        *(int *)(data_ptr + 0x4c) = 0;\n        *(int *)(data_ptr + 0x50) = 0;\n        int global_ptr = *(int *)PTR__global_impure_ptr_08006d0c_08006d0c;\n        *(int *)(data_ptr + 0x28) = DAT_08006d10;\n        bool is_global_ptr = data_ptr == global_ptr;\n        if (is_global_ptr) {\n            global_ptr = 1;\n        }\n        if (is_global_ptr) {\n            *(int *)(data_ptr + 0x18) = global_ptr;\n        }\n        int first_param = __sfp();\n        *(int *)(data_ptr + 4) = first_param;\n        int second_param = __sfp(data_ptr);\n        *(int *)(data_ptr + 8) = second_param;\n        int third_param = __sfp(data_ptr);\n        *(int *)(data_ptr + 0xc) = third_param;\n        std_isra_0(first_param, 4, 0);\n        std_isra_0(second_param, 9, 1);\n        std_isra_0(third_param, 0x12, 2);\n        *(int *)(data_ptr + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "__sfp",
                "std.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cb4",
            "calling": [
                "__sfp",
                "__swbuf_r",
                "_fflush_r",
                "__swsetup_r",
                "_vfiprintf_r",
                "iprintf"
            ],
            "imported": false,
            "current_name": "initialize_data_08006cb4"
        },
        "FUN_08004c5e": {
            "renaming": {
                "FUN_08004c5e": "find_peripheral_from_pin_08004c5e",
                "pin": "target_pin",
                "map": "pin_map"
            },
            "code": "void * find_peripheral_from_pin_08004c5e(PinName_conflict pin, PinMap_conflict *pin_map) {\n  while (true) {\n    if (pin_map->pin == NC) {\n      return (void *)0x0;\n    }\n    if (pin_map->pin == pin) {\n      break;\n    }\n    pin_map++;\n  }\n  return pin_map->peripheral;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c5e",
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "imported": false,
            "current_name": "find_peripheral_from_pin_08004c5e"
        },
        "FUN_08007098": {
            "renaming": {
                "std::ctype_byname<char>::FUN_08007098": "set_all_pointers_to_one",
                "FUN_08007098": "set_all_pointers_to_one_08007098"
            },
            "code": "void set_all_pointers_to_one_08007098(void)\n{\n    if (*(int *)PTR_id_0800712c < 0) {\n        *(undefined4 *)PTR_id_0800712c = 1;\n    }\n    if (*(int *)PTR_id_08007130 < 0) {\n        *(undefined4 *)PTR_id_08007130 = 1;\n    }\n    if (*(int *)PTR_id_08007134 < 0) {\n        *(undefined4 *)PTR_id_08007134 = 1;\n    }\n    if (*(int *)PTR_id_08007138 < 0) {\n        *(undefined4 *)PTR_id_08007138 = 1;\n    }\n    if (*(int *)PTR_id_0800713c < 0) {\n        *(undefined4 *)PTR_id_0800713c = 1;\n    }\n    if (*(int *)PTR_id_08007140 < 0) {\n        *(undefined4 *)PTR_id_08007140 = 1;\n    }\n    if (*(int *)PTR_id_08007144 < 0) {\n        *(undefined4 *)PTR_id_08007144 = 1;\n    }\n    if (*(int *)PTR_id_08007148 < 0) {\n        *(undefined4 *)PTR_id_08007148 = 1;\n    }\n    if (*(int *)PTR_id_0800714c < 0) {\n        *(undefined4 *)PTR_id_0800714c = 1;\n    }\n    if (*(int *)PTR_id_08007150 < 0) {\n        *(undefined4 *)PTR_id_08007150 = 1;\n    }\n    if (*(int *)PTR_id_08007154 < 0) {\n        *(undefined4 *)PTR_id_08007154 = 1;\n    }\n    if (*(int *)PTR_id_08007158 < 0) {\n        *(undefined4 *)PTR_id_08007158 = 1;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007098",
            "calling": [],
            "imported": false,
            "current_name": "set_all_pointers_to_one_08007098"
        },
        "FUN_08004b3c": {
            "renaming": {
                "FUN_08004b3c": "stop_pwm_signal_08004b3c",
                "pin": "pin_name",
                "Channel": "channel",
                "uVar1": "function_code",
                "timHandle": "timer_handle"
            },
            "code": "void stop_pwm_signal_08004b3c(PinName_conflict pin)\n{\n  uint32_t channel;\n  uint32_t function_code;\n  TIM_HandleTypeDef timer_handle;\n  timer_handle.Instance = (TIM_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n  if ((timer_handle.Instance != (TIM_TypeDef *)0x0) && (((channel = get_pwm_channel(pin), channel == 0 || (channel == 4)) || (channel == 8)) || ((channel == 0xc || (channel == 0x18)))))\n  {\n    function_code = pinmap_function(pin,(PinMap_conflict *)PTR_PinMap_PWM_08004b90);\n    if ((function_code & 0x100000) == 0)\n    {\n      HAL_TIM_PWM_Stop(&timer_handle,channel);\n    }\n    else\n    {\n      HAL_TIMEx_PWMN_Stop(&timer_handle,channel);\n    }\n    HAL_TIM_PWM_DeInit(&timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b3c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "stop_pwm_signal_08004b3c"
        },
        "FUN_08001550": {
            "renaming": {
                "FUN_08001550": "displayCharacterMap_08001550",
                "this": "lcd",
                "location": "location",
                "charmap": "charmap",
                "iVar1": "i",
                "send": "send",
                "(byte)((location & 7) << 3) | 0x40": "command",
                "**(this->super_Print)._vptr_Print": "(**(lcd->super_Print)._vptr_Print)",
                "(uint)charmap[iVar1]": "(uint)charmap[i]"
            },
            "code": "void __thiscall LiquidCrystal::displayCharacterMap_08001550(LiquidCrystal *lcd,uint8_t location,uint8_t *charmap)\\n{\\n  int i;\\n  uint8_t command = ((location & 7) << 3) | 0x40;\\n  send(lcd, command, \"\\0\");\\n  for (i = 0; i < 8; i++) {\\n    (**(lcd->super_Print)._vptr_Print)(lcd, (uint)charmap[i]);\\n  }\\n  return;\\n}",
            "called": [
                "send"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001550",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "displayCharacterMap_08001550"
        },
        "FUN_08000cd0": {
            "renaming": {
                "FUN_08000cd0": "FUNC_08000cd0"
            },
            "code": "\nvoid FUNC_08000cd0(void)\n\n{\n  char cVar1;\n  undefined *puVar2;\n  undefined *puVar3;\n  uint32_t uVar4;\n  undefined *puVar5;\n  int iVar6;\n  undefined4 extraout_r1;\n  uint uVar7;\n  int digits;\n  int digits_00;\n  int digits_01;\n  undefined8 uVar8;\n  undefined4 in_stack_ffffffe4;\n  \n  uVar4 = millis();\n  if (*(uint *)PTR_nextRead_08000f50 < uVar4) {\n    *(uint *)PTR_nextRead_08000f50 = *(uint *)PTR_nextRead_08000f50 + 1000;\n    puVar5 = PTR_thermocouple_08000f74;\n    MAX31855::readThermocouple((MAX31855 *)PTR_thermocouple_08000f74,CELSIUS);\n    puVar2 = PTR_input_08000f6c;\n    *(undefined **)PTR_input_08000f6c = puVar5;\n    *(undefined4 *)(puVar2 + 4) = extraout_r1;\n    iVar6 = __aeabi_dcmpeq();\n    if (((iVar6 != 0) ||\n        (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f20,DAT_08000f24), iVar6 != 0)) ||\n       (iVar6 = __aeabi_dcmpeq(puVar5,extraout_r1,DAT_08000f28,DAT_08000f2c), iVar6 != 0)) {\n      *PTR_reflowState_08000f64 = 7;\n      *PTR_reflowStatus_08000f58 = 0;\n    }\n  }\n  uVar4 = millis();\n  if (*(uint *)PTR_nextCheck_08000f54 < uVar4) {\n    *(uint *)PTR_nextCheck_08000f54 = *(uint *)PTR_nextCheck_08000f54 + 1000;\n    if (*PTR_reflowStatus_08000f58 == '\\x01') {\n      uVar4 = *(uint32_t *)PTR_ledRedPin_08000f5c;\n      iVar6 = digitalRead(uVar4);\n      uVar7 = count_leading_zeroes(iVar6);\n      digitalWrite(uVar4,uVar7 >> 5);\n      iVar6 = *(int *)PTR_timerSeconds_08000f78;\n      *(int *)PTR_timerSeconds_08000f78 = iVar6 + 1;\n      puVar2 = PTR_Serial2_08000f7c;\n      Print::print((Print *)PTR_Serial2_08000f7c,iVar6 + 1,10);\n      puVar5 = PTR_DAT_08000f80;\n      Print::print((Print *)puVar2,PTR_DAT_08000f80);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits);\n      Print::print((Print *)puVar2,puVar5);\n      Print::print((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_00);\n      Print::print((Print *)puVar2,puVar5);\n      Print::println((Print *)puVar2,(double)CONCAT44(in_stack_ffffffe4,2),digits_01);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ledRedPin_08000f5c,1);\n    }\n    puVar2 = PTR_lcd_08000f60;\n    LiquidCrystal::clear((LiquidCrystal *)PTR_lcd_08000f60);\n    puVar3 = PTR_reflowState_08000f64;\n    Print::print((Print *)puVar2,\n                 *(char **)(PTR_lcdMessagesReflowStatus_08000f68 +\n                           (uint)(byte)*PTR_reflowState_08000f64 * 4));\n    LiquidCrystal::setCursor((LiquidCrystal *)puVar2,'\\0','\\x01');\n    puVar5 = PTR_lcd_08000f60;\n    if (*puVar3 == '\\a') {\n      Print::print((Print *)puVar2,PTR_s_TC_Error__08000f8c);\n    }\n    else {\n      Print::print((Print *)PTR_lcd_08000f60,(double)CONCAT44(in_stack_ffffffe4,2),2);\n      LiquidCrystal::write((LiquidCrystal *)puVar5,'\\0');\n      Print::print((Print *)puVar5,PTR_DAT_08000f70);\n    }\n  }\n  if ((byte)*PTR_reflowState_08000f64 < 8) {\n                    /* WARNING: Could not recover jumptable at 0x08000d5c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_08000d5c::switchdataD_08000d60 +\n              (&switchD_08000d5c::switchdataD_08000d60)[(byte)*PTR_reflowState_08000f64]))();\n    return;\n  }\n  if ((*PTR_switchStatus_08001274 == '\\x01') && (*PTR_reflowStatus_0800126c == '\\x01')) {\n    *PTR_reflowStatus_0800126c = 0;\n    *PTR_reflowState_08001258 = 0;\n  }\n  cVar1 = *PTR_debounceState_08001278;\n  if (cVar1 == '\\x01') {\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      if (0x32 < uVar4 - *(int *)PTR_lastDebounceTime_08001284) {\n        *PTR_debounceState_08001278 = 2;\n      }\n    }\n    else {\n      *PTR_debounceState_08001278 = 0;\n    }\n  }\n  else if (cVar1 == '\\0') {\n    *PTR_switchStatus_08001274 = 0;\n    uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280);\n    if (uVar4 == 0) {\n      uVar4 = millis();\n      *(uint32_t *)PTR_lastDebounceTime_08001284 = uVar4;\n      *PTR_debounceState_08001278 = 1;\n    }\n  }\n  else if ((cVar1 == '\\x02') &&\n          (uVar4 = analogRead(*(uint32_t *)PTR_switchPin_08001280), uVar4 != 0)) {\n    *PTR_switchStatus_08001274 = 1;\n    *PTR_debounceState_08001278 = 0;\n  }\n  if (*PTR_reflowStatus_0800126c == '\\x01') {\n    uVar4 = millis();\n    PID::Compute((PID *)PTR_reflowOvenPID_08001250);\n    if (*(uint *)PTR_windowSize_0800128c < uVar4 - *(int *)PTR_windowStartTime_08001288) {\n      *(uint *)PTR_windowStartTime_08001288 =\n           *(int *)PTR_windowStartTime_08001288 + *(uint *)PTR_windowSize_0800128c;\n    }\n    uVar8 = __floatunsidf(uVar4 - *(int *)PTR_windowStartTime_08001288);\n    iVar6 = __aeabi_dcmplt((int)uVar8,(int)((ulonglong)uVar8 >> 0x20),\n                           *(undefined4 *)PTR_output_08001290,\n                           *(undefined4 *)(PTR_output_08001290 + 4));\n    if (iVar6 == 0) {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n    }\n    else {\n      digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,1);\n    }\n  }\n  else {\n    digitalWrite(*(uint32_t *)PTR_ssrPin_0800127c,0);\n  }\n  return;\n}\n\n",
            "called": [
                "print",
                "__aeabi_dadd",
                "millis",
                "print",
                "SetMode",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "__aeabi_dcmplt",
                "setCursor",
                "analogRead",
                "digitalRead",
                "println",
                "SetTunings",
                "__aeabi_dcmpgt",
                "__aeabi_dcmple",
                "println",
                "write",
                "SetSampleTime",
                "__floatsidf",
                "digitalWrite",
                "SetOutputLimits",
                "Compute",
                "clear",
                "print",
                "readThermocouple",
                "__floatunsidf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000cd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_08000cd0"
        },
        "FUN_08001310": {
            "renaming": {
                "FUN_08001310": "write_08001310",
                "value": "data",
                "mode": "rs",
                "_rs_pin": "rs_pin",
                "_rw_pin": "rw_pin",
                "_displayfunction": "displayfunction",
                "write4bits": "lcd_write4bits",
                "write8bits": "lcd_write8bits"
            },
            "code": "void __thiscall LiquidCrystal::write_08001310(LiquidCrystal *lcd,uint8_t value,uint8_t mode)\n{\n  digitalWrite((uint)lcd->_rs_pin,(uint)mode);\n  if (lcd->_rw_pin != 0xff) {\n    digitalWrite((uint)lcd->_rw_pin,LOW);\n  }\n  if ((lcd->_displayfunction & LCD_8BITMODE) == 0) {\n    lcd_write_080013104bits(lcd,value >> 4);\n    lcd_write_080013104bits(lcd,value);\n    return;\n  }\n  lcd_write_080013108bits(lcd,value);\n  return;\n}",
            "called": [
                "write4bits",
                "digitalWrite",
                "write8bits"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001310",
            "calling": [
                "clear",
                "createChar",
                "write",
                "display",
                "begin",
                "setCursor"
            ],
            "imported": false,
            "current_name": "write_08001310"
        },
        "FUN_080009a8": {
            "renaming": {
                "FUN_080009a8": "compare_double_values_080009a8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "__aeabi_cdcmpeq": "are_equal"
            },
            "code": "void compare_double_values_080009a8(double value1, double value2, double value3, double value4)\n{\n  bool are_equal = (value3 == value4);\n  return;\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a8",
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "imported": false,
            "current_name": "compare_double_values_080009a8"
        },
        "FUN_08004d90": {
            "renaming": {
                "FUN_08004d90": "set_timer_flags_08004d90",
                "htim": "timer_handle",
                "DAT_08004de4": "TIMER1",
                "DAT_08004de8": "TIMER2",
                "DAT_08004dec": "TIMER3",
                "DAT_08004df0": "timer_flags",
                "(TIM_TypeDef *)0x40000000": "TIMER_MAIN",
                "*(uint *)": "",
                "& 0xfffff7ff": "~(1 << 11)",
                "& 0xfffffffe": "~(1 << 0)",
                "& 0xfffffffd": "~(1 << 1)",
                "& 0xfffffffb": "~(1 << 2)"
            },
            "code": "void set_timer_flags_08004d90(TIM_HandleTypeDef *timer_handle)\n{\n    uint32_t *DAT_08004df0 = (uint32_t *) DAT_08004df0;\n    if (timer_handle->Instance == DAT_08004de4) {\n        *DAT_08004df0 &= ~(1 << 11);\n    }\n    if (timer_handle->Instance == (TIM_TypeDef *)0x40000000) {\n        *DAT_08004df0 &= ~(1 << 0);\n    }\n    if (timer_handle->Instance == DAT_08004de8) {\n        *DAT_08004df0 &= ~(1 << 1);\n    }\n    if (timer_handle->Instance == DAT_08004dec) {\n        *DAT_08004df0 &= ~(1 << 2);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d90",
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "imported": false,
            "current_name": "set_timer_flags_08004d90"
        },
        "FUN_08005ce8": {
            "renaming": {
                "__thiscall Print::FUN_08005ce8": "print_number_in_base",
                "this": "print_object",
                "n": "number",
                "base": "base",
                "cVar1": "current_digit",
                "sVar2": "printed_digits",
                "sVar3": "printed_digits",
                "uVar4": "remainder",
                "uVar5": "base_value",
                "uVar6": "quotient",
                "__s": "current_position",
                "buf": "buffer",
                "FUN_08005ce8": "print_number_in_base_08005ce8"
            },
            "code": "size_t __thiscall print_number_in_base_08005ce8(Print *print_object, ulong number, uint8_t base)\n{\n  char current_digit;\n  size_t printed_digits = 0;\n  uint base_value = (uint)base;\n  char buffer[33];\n  buffer[32] = '\\0';\n  if (base_value < 2) {\n    base_value = 10;\n  }\n  char *current_position = buffer + 0x20;\n  do {\n    uint quotient = number / base_value;\n    uint remainder = (number & 0xff) - (quotient * base_value & 0xff) & 0xff;\n    current_position--;\n    if (remainder < 10) {\n      current_digit = remainder + '0';\n    }\n    else {\n      current_digit = remainder + '7';\n    }\n    *current_position = current_digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (current_position == (char *)0x0) {\n    printed_digits = 0;\n  }\n  else {\n    size_t string_length = strlen(current_position);\n    printed_digits = (*print_object->_vptr_Print[1])(string_length, current_position, string_length);\n  }\n  return printed_digits;\n}",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005ce8",
            "calling": [
                "print",
                "print"
            ],
            "imported": false,
            "current_name": "print_number_in_base_08005ce8"
        },
        "FUN_0800316c": {
            "renaming": {
                "FUN_0800316c": "i2c_handle_events_0800316c",
                "*hi2c": "*i2c_handler",
                "HVar1": "status",
                "*puVar2": "*buffer_ptr",
                "*pIVar3": "*i2c_instance"
            },
            "code": "void i2c_handle_events_0800316c(I2C_HandleTypeDef *i2c_handler) {\n  HAL_StatusTypeDef status;\n  uint8_t *buffer_ptr;\n  I2C_TypeDef *i2c_instance;\n  \n  if ((byte)i2c_handler->State - 0x29 < 2) {\n    i2c_handler->PreviousState = 0;\n    i2c_handler->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((i2c_handler->State != HAL_I2C_STATE_ABORT) && ((i2c_handler->Instance->CR2 & 0x800) == 0)) {\n      i2c_handler->State = HAL_I2C_STATE_READY;\n    }\n    i2c_handler->PreviousState = 0;\n    i2c_handler->Mode = HAL_I2C_MODE_NONE;\n  }\n  i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 & 0xfffff7ff;\n  i2c_instance = i2c_handler->Instance;\n  if ((i2c_instance->CR2 & 0x800) == 0) {\n    if (i2c_handler->State == HAL_I2C_STATE_ABORT) {\n      i2c_handler->State = HAL_I2C_STATE_READY;\n      i2c_handler->ErrorCode = 0;\n      if ((i2c_instance->SR1 & 0x40) != 0) {\n        buffer_ptr = i2c_handler->pBuffPtr;\n        i2c_handler->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)i2c_instance->DR;\n      }\n      i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(i2c_handler);\n    }\n    else {\n      if ((i2c_instance->SR1 & 0x40) != 0) {\n        buffer_ptr = i2c_handler->pBuffPtr;\n        i2c_handler->pBuffPtr = buffer_ptr + 1;\n        *buffer_ptr = (uint8_t)i2c_instance->DR;\n      }\n      HAL_I2C_ErrorCallback(i2c_handler);\n    }\n  }\n  else {\n    i2c_instance->CR2 = i2c_instance->CR2 & 0xfffff7ff;\n    if (i2c_handler->hdmatx->State == HAL_DMA_STATE_READY) {\n      i2c_handler->hdmarx->XferAbortCallback = dma_transfer_abort_callback;\n      status = HAL_DMA_Abort_IT(i2c_handler->hdmarx);\n      if (status != HAL_OK) {\n        if ((i2c_instance->SR1 & 0x40) != 0) {\n          buffer_ptr = i2c_handler->pBuffPtr;\n          i2c_handler->pBuffPtr = buffer_ptr + 1;\n          *buffer_ptr = (uint8_t)i2c_instance->DR;\n        }\n        i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 & 0xfffffffe;\n        i2c_handler->State = HAL_I2C_STATE_READY;\n        (*i2c_handler->hdmarx->XferAbortCallback)(i2c_handler->hdmarx);\n      }\n    }\n    else {\n      i2c_handler->hdmatx->XferAbortCallback = dma_transfer_abort_callback;\n      status = HAL_DMA_Abort_IT(i2c_handler->hdmatx);\n      if (status != HAL_OK) {\n        i2c_handler->Instance->CR1 = i2c_handler->Instance->CR1 & 0xfffffffe;\n        i2c_handler->State = HAL_I2C_STATE_READY;\n        (*i2c_handler->hdmatx->XferAbortCallback)(i2c_handler->hdmatx);\n      }\n    }\n  }\n  if ((i2c_handler->State == HAL_I2C_STATE_LISTEN) && ((i2c_handler->ErrorCode & 4) != 0)) {\n    i2c_handler->XferOptions = i2c_handler->XferOptions;\n    i2c_handler->PreviousState = 0;\n    i2c_handler->State = HAL_I2C_STATE_READY;\n    i2c_handler->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2c_handler);\n  }\n  return;\n}\n",
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ListenCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316c",
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "imported": false,
            "current_name": "i2c_handle_events_0800316c"
        },
        "FUN_08004828": {
            "renaming": {
                "FUN_08004828": "set_pin_mode_08004828",
                "pin": "pin_name",
                "map": "pin_map",
                "uVar1": "pin_index",
                "mask": "mask"
            },
            "code": "void set_pin_mode_08004828(PinName_conflict pin, uint32_t *pin_map)\n{\n    uint32_t pin_index = (uint32_t)pin >> 4;\n    uint32_t bit_index = (uint32_t)pin & 0xF;\n    uint32_t mask = ~(1 << bit_index);\n    pin_map[pin_index] &= mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004828",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_pin_mode_08004828"
        },
        "FUN_08004948": {
            "renaming": {
                "FUN_08004948": "get_PWM_pin_function_08004948",
                "pin": "pin_name",
                "uVar1": "pin_function",
                "uVar2": "function_index"
            },
            "code": "uint32_t get_PWM_pin_function_08004948(PinName_conflict pin)\n{\n  uint32_t pin_function = pinmap_function(pin, (PinMap_conflict *)PTR_PinMap_PWM_08004970);\n  uint32_t function_index = (pin_function << 12) >> 27;\n  if (function_index == 3)\n  {\n    return 8;\n  }\n  if (function_index == 4)\n  {\n    return 0xC;\n  }\n  if (function_index == 2)\n  {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "pinmap_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004948",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "get_PWM_pin_function_08004948"
        },
        "FUN_0800316a": {
            "renaming": {
                "FUN_0800316a": "do_nothing_0800316a"
            },
            "code": "\nvoid do_nothing_0800316a(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800316a",
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "imported": false,
            "current_name": "do_nothing_0800316a"
        },
        "FUN_08005b24": {
            "renaming": {
                "FUN_08005b24": "set_rx_pin_08005b24",
                "_rx": "rx_pin_num",
                "PVar1": "rx_pin",
                "PTR_digitalPin_08005b38": "digitalPin"
            },
            "code": "void __thiscall HardwareSerial::set_rx_pin_08005b24(HardwareSerial *serial, uint32_t rx_pin_num)\n{\n  PinName rx_pin;\n  if (rx_pin_num < 0x3c) {\n    rx_pin = PTR_digitalPin_08005b38[rx_pin_num];\n  }\n  else {\n    rx_pin = NC;\n  }\n  (serial->_serial).pin_rx = rx_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005b24",
            "calling": [
                "HardwareSerial"
            ],
            "imported": false,
            "current_name": "set_rx_pin_08005b24"
        },
        "FUN_080049f0": {
            "renaming": {
                "FUN_080049f0": "update_ADC_status_080049f0",
                "*hadc": "ADC_HandleTypeDef *hadc",
                "iVar1": "int adc_data",
                "DAT_08004a48": "PTR_DAT_08004a48",
                "DAT_08004a40": "PTR_DAT_08004a40",
                "DAT_08004a44": "PTR_DAT_08004a44"
            },
            "code": "void update_ADC_status_080049f0(ADC_HandleTypeDef *hadc)\n{\n  int adc_data = DAT_08004a48;\n  if (hadc->Instance != DAT_08004a40) {\n    if (hadc->Instance == DAT_08004a44) {\n      *(uint *)(DAT_08004a48 + 0xc) |= 0x400;\n      *(uint *)(adc_data + 0xc) &= 0xfffffbff;\n      *(uint *)(adc_data + 0x18) &= 0xfffffbff;\n      *(uint *)(adc_data + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08004a48 + 0xc) |= 0x200;\n  *(uint *)(adc_data + 0xc) &= 0xfffffdff;\n  *(uint *)(adc_data + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049f0",
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "imported": false,
            "current_name": "update_ADC_status_080049f0"
        },
        "FUN_08001e40": {
            "renaming": {
                "FUN_08001e40": "get_ADC_data_08001e40",
                "hadc": "ADC_handle",
                "Instance": "ADC_instance",
                "DR": "ADC_data"
            },
            "code": "uint32_t get_ADC_data_08001e40(ADC_HandleTypeDef *ADC_handle)\n{\n  return ADC_handle->Instance->DR;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e40",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_data_08001e40"
        },
        "FUN_08003a68": {
            "renaming": {
                "FUN_08003a68": "calculate_value_08003a68",
                "uVar1": "result",
                "uVar2": "flag",
                "local_1c": "uVar4",
                "abStack_18": "buffer",
                "uStack_14": "uVar1",
                "uStack_10": "unused1",
                "uStack_c": "unused2",
                "PTR__etext_08003ac4": "p",
                "DAT_08003ac8": "flag",
                "DAT_08003ad0": "constant1",
                "DAT_08003acc": "constant2"
            },
            "code": "uint calculate_value_08003a68(void)\n{\n  uint result = 0;\n  uint DAT_08003ac8 = *(uint *)(DAT_08003ac8 + 4);\n  uint DAT_08003ad0 = DAT_08003ad0;\n  uint DAT_08003acc = DAT_08003acc;\n  byte buffer[4];\n  uint* PTR__etext_08003ac4 = (uint*)PTR__etext_08003ac4;\n  uint uVar1 = PTR__etext_08003ac4[0];\n  uint uVar2 = PTR__etext_08003ac4[1];\n  uint uVar3 = PTR__etext_08003ac4[2];\n  uint uVar4 = *(undefined2 *)(PTR__etext_08003ac4 + 4);\n  \n  uint temPTR__etext_08003ac4 = (DAT_08003ac8 << 10) >> 0x1c;\n  if ((DAT_08003ac8 & 0xc) == 8) {\n    if ((DAT_08003ac8 & 0x10000) == 0) {\n      result = DAT_08003acc * (uint)buffer[temPTR__etext_08003ac4];\n    }\n    else {\n      result = (DAT_08003ad0 * buffer[temPTR__etext_08003ac4]) / (uint)*(byte *)((int)&uVar4 - ((DAT_08003ac8 << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a68",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_value_08003a68"
        },
        "FUN_080012a2": {
            "renaming": {
                "FUN_080012a2": "pulseEnablePin_080012a2",
                "_enable_pin": "enablePin"
            },
            "code": "void __thiscall LiquidCrystal::pulseEnablePin_080012a2(LiquidCrystal *this)\n{\n  digitalWrite((uint)this->_enable_pin, LOW);\n  digitalWrite((uint)this->_enable_pin, HIGH);\n  digitalWrite((uint)this->_enable_pin, LOW);\n  return;\n}",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012a2",
            "calling": [
                "write4bits",
                "write8bits"
            ],
            "imported": false,
            "current_name": "pulseEnablePin_080012a2"
        },
        "FUN_08004c78": {
            "renaming": {
                "FUN_08004c78": "find_peripheral_by_pin_08004c78",
                "PinName_conflict": "pin",
                "PinMap_conflict": "map",
                "pvVar1": "peripheral"
            },
            "code": "void* find_peripheral_by_pin_08004c78(PinName_conflict pin, PinMap_conflict* map) {\n    void* peripheral;\n    if (pin != NC) {\n        peripheral = pinmap_find_peripheral(pin, map);\n        return peripheral;\n    }\n    return (void*)0x0;\n}",
            "called": [
                "pinmap_find_peripheral"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c78",
            "calling": [
                "pwm_stop",
                "adc_read_value",
                "uart_debug_write",
                "uart_debug_init",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_peripheral_by_pin_08004c78"
        },
        "FUN_08005bd4": {
            "renaming": {
                "FUN_08005bd4": "initialize_static_variables_08005bd4"
            },
            "code": "void initialize_static_variables_08005bd4(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bd4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08005bd4"
        },
        "FUN_08001e48": {
            "renaming": {
                "FUN_08001e48": "configure_ADC_channel_08001e48",
                "*hadc": "*adc_handle",
                "*sConfig": "*channel_config",
                "HVar1": "status",
                "uVar2": "rank",
                "pAVar3": "adc_instance",
                "wait_loop_index": "wait_loop_index",
                "SYS_CLOCK_FREQ": "PTR_SystemCoreClock",
                "DAT_08001f74": "DAT_08001f74",
                "DAT_08001f7c": "DAT_08001f7c"
            },
            "code": "HAL_StatusTypeDef configure_ADC_channel_08001e48(ADC_HandleTypeDef *adc_handle, ADC_ChannelConfTypeDef *channel_config)\n{\n  HAL_StatusTypeDef status;\n  uint32_t rank = channel_config->Rank;\n  uint32_t channel = channel_config->Channel;\n  uint32_t sampling_time = channel_config->SamplingTime;\n  ADC_TypeDef *adc_instance = adc_handle->Instance;\n  uint32_t wait_loop_index;\n\n  if (adc_handle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adc_handle->Lock = HAL_LOCKED;\n    if (rank < 7) {\n      rank = rank * 5 - 5;\n      adc_instance->SQR3 = channel << (rank & 0xff) | adc_instance->SQR3 & ~(0x1f << (rank & 0xff));\n    }\n    else if (rank < 0xd) {\n      rank = rank * 5 - 0x23;\n      adc_instance->SQR2 = channel << (rank & 0xff) | adc_instance->SQR2 & ~(0x1f << (rank & 0xff));\n    }\n    else {\n      rank = rank * 5 - 0x41;\n      adc_instance->SQR1 = channel << (rank & 0xff) | adc_instance->SQR1 & ~(0x1f << (rank & 0xff));\n    }\n    if (channel < 10) {\n      adc_instance->SMPR2 = sampling_time << (channel * 3 & 0xff) | adc_instance->SMPR2 & ~(7 << (channel * 3 & 0xff));\n    }\n    else {\n      channel = channel * 3 - 0x1e;\n      adc_instance->SMPR1 = sampling_time << (channel & 0xff) | adc_instance->SMPR1 & ~(7 << (channel & 0xff));\n    }\n    if (channel - 0x10 < 2) {\n      if (adc_instance == hadc) {\n        if ((adc_instance->CR2 & 0x800000) == 0) {\n          adc_instance->CR2 = adc_instance->CR2 | 0x800000;\n          if (channel == 0x10) {\n            for (wait_loop_index = (uint32_t)((uint64_t)SYS_CLOCK_FREQ * (uint64_t)*PTR_SystemCoreClock / 0x3e8) * 10; wait_loop_index != 0; wait_loop_index--);\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adc_handle->State = adc_handle->State | 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adc_handle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e48",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "configure_ADC_channel_08001e48"
        },
        "FUN_080059c8": {
            "renaming": {
                "__thiscall HardwareSerial::FUN_080059c8": "writeByte",
                "this": "serialObj",
                "c": "byteToWrite",
                "_written": "isWritten",
                "_serial": "serialObj->_serial",
                "tx_head": "txHead",
                "uVar2": "txActive",
                "byte": "uint8_t",
                "bVar1": "nextTxHead",
                "bVar3": "newTxHead",
                "iVar4": "nextTxHead",
                "uVar5": "txHead",
                "ushort": "uint16_t",
                "serial_tx_active": "serial_tx_active",
                "uart_attach_tx_callback": "uart_attach_tx_callback",
                "DAT_08005a14": "tx_callback",
                "FUN_080059c8": "writeByte_080059c8"
            },
            "code": "size_t __thiscall HardwareSerial::writeByte_080059c8(HardwareSerial *serialObj, uint8_t byteToWrite)\\n{\\n  bool isWritten = true;\\n  uint txHead = (uint)(serialObj->_serial).tx_head;\\n  int nextTxHead = txHead + 1;\\n  byte newTxHead = (byte)nextTxHead & 0x7f;\\n  if (nextTxHead == 0) {\\n    newTxHead = -(-newTxHead & 0x7f);\\n  }\\n  do {\\n  } while ((serialObj->_serial).tx_tail == (ushort)newTxHead);\\n  (serialObj->_serial).tx_buff[txHead] = byteToWrite;\\n  (serialObj->_serial).tx_head = (ushort)newTxHead;\\n  uint8_t txActive = serial_tx_active((serial_t *)&serialObj->_serial);\\n  if (txActive == \"\\0\") {\\n    uart_attach_DAT_08005a14((serial_t *)&serialObj->_serial, DAT_08005a14);\\n  }\\n  return 1;\\n}",
            "called": [
                "uart_attach_tx_callback",
                "serial_tx_active"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059c8",
            "calling": [],
            "imported": false,
            "current_name": "writeByte_080059c8"
        },
        "FUN_080009b8": {
            "renaming": {
                "FUN_080009b8": "calculate_080009b8",
                "param_1": "input"
            },
            "code": "undefined4 calculate_080009b8(undefined4 input)\n{\n  __eqdf2();\n  return input;\n}",
            "called": [
                "__eqdf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b8",
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "imported": false,
            "current_name": "calculate_080009b8"
        },
        "FUN_08000aa8": {
            "renaming": {
                "FUN_08000aa8": "calculate_shifted_value_08000aa8",
                "param_1": "value",
                "param_2": "shift_amount",
                "iVar1": "intermediate_value",
                "uVar2": "shifted_value"
            },
            "code": "uint calculate_shifted_value_08000aa8(uint value, uint shift_amount)\n{\n  int intermediate_value;\n  uint shifted_value;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediate_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < intermediate_value) {\n      return 0;\n    }\n    shifted_value = -(intermediate_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shifted_value) {\n      return (shift_amount << 0xb | 0x80000000 | value >> 0x15) >> (shifted_value & 0xff);\n    }\n  }\n  else if ((value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aa8",
            "calling": [
                "printFloat"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08000aa8"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "is_cdr_greater_than_or_equal_to_zero_08000a04",
                "in_CY": "is_carry_set",
                "in_ZR": "in_zero_flag"
            },
            "code": "bool is_cdr_greater_than_or_equal_to_zero_08000a04(void)\n{\n  bool is_carry_set = __aeabi_cdrcmple();\n  return !is_carry_set || (bool)in_zero_flag;\n}",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "imported": false,
            "current_name": "is_cdr_greater_than_or_equal_to_zero_08000a04"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "isInitializationCompleted_0800010c",
                "param_1": "initPtr",
                "PTR_completed_8667_08000124": "isCompleted",
                "DAT_08000128": "initValue"
            },
            "code": "bool isInitializationCompleted_0800010c(bool* PTR_completed_8667_08000124, int* DAT_08000128, char* initPtr){\n  if (*PTR_completed_8667_08000124 == false) {\n    if (*DAT_08000128 != 0) {\n      initPtr = initPtr;\n    }\n    *PTR_completed_8667_08000124 = true;\n  }\n  return initPtr;\n}",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "isInitializationCompleted_0800010c"
        },
        "FUN_08003f14": {
            "renaming": {
                "FUN_08003f14": "do_nothing_08003f14"
            },
            "code": "\nvoid do_nothing_08003f14(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f14",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f14"
        },
        "FUN_08001cac": {
            "renaming": {
                "FUN_08001cac": "updateTick_08001cac",
                "PTR_uwTick_08001cbc": "tickPtrPtr",
                "PTR_uwTickFreq_08001cc0": "tickFreqPtr"
            },
            "code": "void updateTick_08001cac(void)\n{\n  uint8_t tickFreq = *PTR_uwTickFreq_08001cc0;\n  uint32_t *tickPtr = PTR_uwTick_08001cbc;\n  *tickPtr = tickFreq + *tickPtr;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cac",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "updateTick_08001cac"
        },
        "FUN_08003f12": {
            "renaming": {
                "FUN_08003f12": "do_nothing_08003f12"
            },
            "code": "\nvoid do_nothing_08003f12(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f12",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f12"
        },
        "FUN_08005a18": {
            "renaming": {
                "FUN_08005a18": "checkSerial2Availability_08005a18",
                "DAT_08005a3c": "serial2AvailableFlag",
                "PTR_Serial2_08005a40": "serial2Pointer"
            },
            "code": "void checkSerial2Availability_08005a18(void)\n{\n  if (DAT_08005a3c != 0) {\n    HardwareSerial::available(PTR_Serial2_08005a40);\n  }\n  return;\n}",
            "called": [
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a18",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "checkSerial2Availability_08005a18"
        },
        "FUN_08003f18": {
            "renaming": {
                "FUN_08003f18": "handle_TIM_interrupts_08003f18",
                "htim": "timer",
                "pTVar1": "timer_instance",
                "SR": "TIM_FLAG",
                "DIER": "TIM_IT",
                "Channel": "active_channel"
            },
            "code": "void handle_TIM_interrupts_08003f18(TIM_HandleTypeDef *timer)\n{\n    TIM_TypeDef *timer_instance = timer->Instance;\n    if (((timer_instance->SR & TIM_FLAG_CC1) != 0) && ((timer_instance->DIER & TIM_IT_CC1) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_CC1);\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n        if ((timer_instance->CCMR1 & TIM_CCMR1_CC1S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer);\n            HAL_TIM_PWM_PulseFinishedCallback(timer);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer);\n        }\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_instance->SR & TIM_FLAG_CC2) != 0) && ((timer_instance->DIER & TIM_IT_CC2) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_CC2);\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n        if ((timer_instance->CCMR1 & TIM_CCMR1_CC2S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer);\n            HAL_TIM_PWM_PulseFinishedCallback(timer);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer);\n        }\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_instance->SR & TIM_FLAG_CC3) != 0) && ((timer_instance->DIER & TIM_IT_CC3) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_CC3);\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n        if ((timer_instance->CCMR2 & TIM_CCMR2_CC3S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer);\n            HAL_TIM_PWM_PulseFinishedCallback(timer);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer);\n        }\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_instance->SR & TIM_FLAG_CC4) != 0) && ((timer_instance->DIER & TIM_IT_CC4) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_CC4);\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n        if ((timer_instance->CCMR2 & TIM_CCMR2_CC4S) == 0) {\n            HAL_TIM_OC_DelayElapsedCallback(timer);\n            HAL_TIM_PWM_PulseFinishedCallback(timer);\n        }\n        else {\n            HAL_TIM_IC_CaptureCallback(timer);\n        }\n        timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n    }\n    if (((timer_instance->SR & TIM_FLAG_UPDATE) != 0) && ((timer_instance->DIER & TIM_IT_UPDATE) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_UPDATE);\n        HAL_TIM_PeriodElapsedCallback(timer);\n    }\n    if (((timer_instance->SR & TIM_FLAG_BREAK) != 0) && ((timer_instance->DIER & TIM_IT_BREAK) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_BREAK);\n        HAL_TIMEx_BreakCallback(timer);\n    }\n    if (((timer_instance->SR & TIM_FLAG_TRIGGER) != 0) && ((timer_instance->DIER & TIM_IT_TRIGGER) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_TRIGGER);\n        HAL_TIM_TriggerCallback(timer);\n    }\n    if (((timer_instance->SR & TIM_FLAG_COM) != 0) && ((timer_instance->DIER & TIM_IT_COM) != 0)) {\n        timer_instance->SR = ~(TIM_FLAG_COM);\n        HAL_TIMEx_CommutationCallback(timer);\n    }\n}\n",
            "called": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f18",
            "calling": [
                "TIM2_IRQHandler",
                "TIM4_IRQHandler",
                "TIM1_UP_IRQHandler",
                "TIM3_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_TIM_interrupts_08003f18"
        },
        "FUN_08003f16": {
            "renaming": {
                "FUN_08003f16": "do_nothing_08003f16"
            },
            "code": "\nvoid do_nothing_08003f16(TIM_HandleTypeDef *htim)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f16",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08003f16"
        },
        "FUN_0800591e": {
            "renaming": {
                "FUN_0800591e": "calculateAvailableRxBufferSpace_0800591e",
                "this": "serialObject",
                "_serial": "serialData",
                "rx_head": "headPosition",
                "rx_tail": "tailPosition",
                "bufferSize": "bufferSize"
            },
            "code": "int __thiscall calculateAvailableRxBufferSpace_0800591e(HardwareSerial *serialObject) {\n    int headPosition = (serialObject->_serial).rx_head;\n    int tailPosition = (serialObject->_serial).rx_tail;\n    int bufferSize = (headPosition + 0x40) - tailPosition;\n    return bufferSize & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800591e",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "calculateAvailableRxBufferSpace_0800591e"
        },
        "FUN_08006104": {
            "renaming": {
                "FUN_08006104": "initialize_static_variables_08006104"
            },
            "code": "void initialize_static_variables_08006104(void)\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006104",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08006104"
        },
        "FUN_08002540": {
            "renaming": {
                "FUN_08002540": "set_interrupt_handler_08002540",
                "IRQn_Type_conflict": "irq",
                "uVar1": "irq_num",
                "DAT_0800255c": "interrupt_enable_base_address",
                "interrupt_enable_reg": "interrupt_enable_register"
            },
            "code": "void set_interrupt_handler_08002540(IRQn_Type_conflict irq) {\n  uint irq_num = (uint)irq;\n  if (irq_num >= 0) {\n    int* interrupt_enable_reg = (int*)(DAT_0800255c + ((irq_num >> 5) + 0x60) * 4);\n    *interrupt_enable_reg = 1 << (irq_num & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002540",
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "imported": false,
            "current_name": "set_interrupt_handler_08002540"
        },
        "FUN_08005be2": {
            "renaming": {
                "__thiscall IPAddress::FUN_08005be2": "printIPAddressOctets",
                "this": "ipAddress",
                "p": "printer",
                "iVar3": "octetIndex",
                "sVar1": "octetPrinted",
                "sVar2": "dotPrinted",
                "iVar4": "totalPrinted",
                "FUN_08005be2": "printIPAddressOctets_08005be2"
            },
            "code": "size_t printIPAddressOctets_08005be2(IPAddress *ipAddress, Print *printer) {\n  size_t totalPrinted = 0;\n  for (int octetIndex = 0; octetIndex < 3; octetIndex++) {\n    size_t octetPrinted = Print::print(printer, (ipAddress->_address).bytes[octetIndex], 10);\n    size_t dotPrinted = Print::print(printer, '.');\n    totalPrinted += octetPrinted + dotPrinted;\n  }\n  totalPrinted += Print::print(printer, (ipAddress->_address).bytes[3], 10);\n  return totalPrinted;\n}",
            "called": [
                "print",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005be2",
            "calling": [],
            "imported": false,
            "current_name": "printIPAddressOctets_08005be2"
        },
        "FUN_08006344": {
            "renaming": {
                "FUN_08006344": "write_to_buffer_08006344",
                "param_1": "buffer_address",
                "param_2": "character",
                "param_3": "buffer_ptr",
                "pbVar2": "buffer_end",
                "uVar1": "result"
            },
            "code": "unsigned int write_to_buffer_08006344(undefined4 buffer_address, char character, char **buffer_ptr){\n  unsigned int result;\n  char *buffer_end = (*buffer_ptr + -1);\n  *buffer_ptr = buffer_end;\n  if (((int)buffer_end < 0) && (((int)buffer_end < (int)buffer_ptr[6] || (character == '\n')))) {\n    result = __swbuf_r();\n    return result;\n  }\n  char *current_buffer = *buffer_ptr;\n  *buffer_ptr = current_buffer + 1;\n  *current_buffer = character;\n  return (unsigned int)character;\n}",
            "called": [
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006344",
            "calling": [
                "__sfputs_r"
            ],
            "imported": false,
            "current_name": "write_to_buffer_08006344"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "is_not_zero_080009c8",
                "in_ZR": "input_char"
            },
            "code": "bool is_not_zero_080009c8(char input_char) {\n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "is_not_zero_080009c8"
        },
        "FUN_08002db2": {
            "renaming": {
                "FUN_08002db2": "handleI2CTransfer_08002db2",
                "*hi2c": "*handle",
                "HVar1": "currentState",
                "pbVar2": "bufferPtr",
                "uVar3": "transferOptions"
            },
            "code": "HAL_StatusTypeDef_conflict handleI2CTransfer_08002db2(I2C_HandleTypeDef *hi2c) {\n  HAL_I2C_StateTypeDef currentState = hi2c->State;\n  uint32_t transferOptions = hi2c->XferOptions;\n  \n  if ((hi2c->XferSize == 0) && (currentState == HAL_I2C_STATE_BUSY_TX)) {\n    if ((transferOptions == 4) || ((transferOptions == 8 || (transferOptions == 0xffff0000)))) {\n      hi2c->Instance->CR2 = hi2c->Instance->CR2 & 0xfffff8ff;\n      hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n      hi2c->PreviousState = 0;\n      hi2c->State = HAL_I2C_STATE_READY;\n      if (hi2c->Mode == HAL_I2C_MODE_MEM) {\n        hi2c->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(hi2c);\n      }\n      else {\n        hi2c->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(hi2c);\n      }\n    }\n    else {\n      hi2c->Instance->CR2 = hi2c->Instance->CR2 & 0xfffff8ff;\n      hi2c->PreviousState = 0x11;\n      hi2c->Mode = HAL_I2C_MODE_NONE;\n      hi2c->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(hi2c);\n    }\n  }\n  else if ((currentState == HAL_I2C_STATE_BUSY_TX) || ((hi2c->Mode == HAL_I2C_MODE_MEM && (currentState == HAL_I2C_STATE_BUSY_RX)))) {\n    if (hi2c->XferCount == 0) {\n      hi2c->Instance->CR2 = hi2c->Instance->CR2 & 0xfffffbff;\n    }\n    else if (hi2c->Mode == HAL_I2C_MODE_MEM) {\n      if (hi2c->EventCount == 0) {\n        if (hi2c->MemaddSize == 1) {\n          hi2c->Instance->DR = hi2c->Memaddress & 0xff;\n          hi2c->EventCount = hi2c->EventCount + 2;\n        }\n        else {\n          hi2c->Instance->DR = (hi2c->Memaddress << 0x10) >> 0x18;\n          hi2c->EventCount = hi2c->EventCount + 1;\n        }\n      }\n      else if (hi2c->EventCount == 1) {\n        hi2c->Instance->DR = hi2c->Memaddress & 0xff;\n        hi2c->EventCount = hi2c->EventCount + 1;\n      }\n      else if (hi2c->EventCount == 2) {\n        if (currentState == HAL_I2C_STATE_BUSY_RX) {\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x100;\n        }\n        else if (currentState == HAL_I2C_STATE_BUSY_TX) {\n          uint8_t *bufferPtr = hi2c->pBuffPtr;\n          hi2c->pBuffPtr = bufferPtr + 1;\n          hi2c->Instance->DR = (uint)*bufferPtr;\n          hi2c->XferCount = hi2c->XferCount - 1;\n        }\n      }\n    }\n    else {\n      uint8_t *bufferPtr = hi2c->pBuffPtr;\n      hi2c->pBuffPtr = bufferPtr + 1;\n      hi2c->Instance->DR = (uint)*bufferPtr;\n      hi2c->XferCount = hi2c->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db2",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CTransfer_08002db2"
        },
        "FUN_08005932": {
            "renaming": {
                "FUN_08005932": "get_next_byte_to_read_08005932",
                "this": "serial_obj",
                "_serial": "serial_data",
                "rx_tail": "tail_position",
                "rx_head": "head_position",
                "rx_buff": "buffer"
            },
            "code": "int __thiscall HardwareSerial::get_next_byte_to_read_08005932(HardwareSerial *serial_obj)\n{\n  uint32_t tail_position = (uint32_t)(serial_obj->_serial).rx_tail;\n  if ((serial_obj->_serial).rx_head != tail_position) {\n    return (uint32_t)(serial_obj->_serial).rx_buff[tail_position];\n  }\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005932",
            "calling": [],
            "imported": false,
            "current_name": "get_next_byte_to_read_08005932"
        },
        "FUN_08001cc4": {
            "renaming": {
                "FUN_08001cc4": "get_uwTick_value_08001cc4",
                "PTR_uwTick_08001ccc": "uwTick_ptr"
            },
            "code": "uint32_t get_uwTick_value_08001cc4(void)\n{\n  uint32_t *PTR_uwTick_08001ccc = (uint32_t *)PTR_uwTick_08001ccc;\n  return *PTR_uwTick_08001ccc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001cc4",
            "calling": [
                "ADC_ConversionStop_Disable",
                "ADC_Enable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_ADCEx_Calibration_Start",
                "HAL_RCC_OscConfig",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_ADC_PollForConversion",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "get_uwTick_value_08001cc4"
        },
        "FUN_08002db0": {
            "renaming": {
                "FUN_08002db0": "do_nothing_08002db0"
            },
            "code": "\nvoid do_nothing_08002db0(I2C_HandleTypeDef *hi2c)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002db0",
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "imported": false,
            "current_name": "do_nothing_08002db0"
        },
        "FUN_08003ea0": {
            "renaming": {
                "FUN_08003ea0": "handle_RTC_alarm_08003ea0",
                "hrtc": "rtc_handle",
                "hrtc->Instance->CRH": "rtc_handle->Instance->CRH",
                "hrtc->Instance->CRL": "rtc_handle->Instance->CRL",
                "HAL_RTC_AlarmAEventCallback": "handle_RTC_alarm_event",
                "DAT_08003ed4": "data_08003ed4",
                "*(undefined4 *)(DAT_08003ed4 + 0x14)": "*(unsigned int *)(data_08003ed4 + 0x14)",
                "HAL_RTC_STATE_READY": "RTC_handle_ready"
            },
            "code": "void handle_RTC_alarm_08003ea0(RTC_HandleTypeDef *rtc_handle) {\n  if (((rtc_handle->Instance->CRH & 2) != 0) && ((rtc_handle->Instance->CRL & 2) != 0)) {\n    HAL_RTC_AlarmAEventCallback(rtc_handle);\n    rtc_handle->Instance->CRL = 0xfffffffd;\n  }\n  *(unsigned int *)(DAT_08003ed4 + 0x14) = 0x20000;\n  rtc_handle->State = HAL_RTC_STATE_READY;\n  return;\n}",
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ea0",
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_RTC_alarm_08003ea0"
        },
        "FUN_0800306c": {
            "renaming": {
                "FUN_0800306c": "handleI2CDataTransfer_0800306c",
                "*hi2c": "*i2cHandle",
                "uVar1": "transferOptions",
                "puVar2": "bufferPtr"
            },
            "code": "HAL_StatusTypeDef handleI2CDataTransfer_0800306c(I2C_HandleTypeDef *i2cHandle)\n{\n    uint32_t transferOptions = i2cHandle->XferOptions;\n\n    if (i2cHandle->XferCount == 3)\n    {\n        if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000))\n        {\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n        uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n        i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    else if (i2cHandle->XferCount == 2)\n    {\n        if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000))\n        {\n            i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffcff;\n            i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        }\n        else\n        {\n            if (transferOptions == 2)\n            {\n                i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n            }\n            else\n            {\n                i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n            }\n            i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffcff;\n        }\n        uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n        i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n        i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->PreviousState = 0;\n        if (i2cHandle->Mode == HAL_I2C_MODE_MEM)\n        {\n            i2cHandle->Mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_MemRxCpltCallback(i2cHandle);\n        }\n        else\n        {\n            i2cHandle->Mode = HAL_I2C_MODE_NONE;\n            HAL_I2C_MasterRxCpltCallback(i2cHandle);\n        }\n    }\n    else\n    {\n        uint8_t *bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n        i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n    return HAL_OK;\n}",
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800306c",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handleI2CDataTransfer_0800306c"
        },
        "FUN_08005c64": {
            "renaming": {
                "FUN_08005c64": "initialize_static_variables_08005c64"
            },
            "code": "void initialize_static_variables_08005c64(void)\n{\n  __static_initialization_and_destruction_0(1, 0xffff);\n  return;\n}",
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c64",
            "calling": [],
            "imported": false,
            "current_name": "initialize_static_variables_08005c64"
        },
        "FUN_0800548c": {
            "renaming": {
                "FUN_0800548c": "is_serial_transmit_complete_0800548c",
                "obj": "serial",
                "HVar1": "uart_state",
                "PTR_uart_handlers_080054ac": "uart_handlers",
                "uint": "unsigned int",
                "return": "return",
                "HAL_UART_StateTypeDef": "HAL_UART_StateTypeDef",
                "HAL_UART_GetState": "HAL_UART_GetState",
                "UART_HandleTypeDef": "UART_HandleTypeDef"
            },
            "code": "bool is_serial_transmit_complete_0800548c(serial_t *serial) {\n    UART_HandleTypeDef *uart_handler = *(UART_HandleTypeDef **)(PTR_PTR_uart_handlers_080054ac_080054ac + (uint)serial->index * 4);\n    HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(uart_handler);\n    return (uart_state & 0x22U) == 0x22;\n}",
            "called": [
                "HAL_UART_GetState"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800548c",
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "imported": false,
            "current_name": "is_serial_transmit_complete_0800548c"
        },
        "FUN_08000924": {
            "renaming": {
                "FUN_08000924": "check_parameters_08000924",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "is_different",
                "bVar2": "is_zero1",
                "bVar3": "is_less_than"
            },
            "code": "uint check_parameters_08000924(uint parameter1, uint parameter2, uint parameter3, uint parameter4) {\n  uint result;\n  bool is_zero1;\n  bool is_zero2;\n  bool is_equal1;\n  bool is_equal2;\n  bool is_different;\n  bool is_less_than;\n  bool is_negative;\n  \n  is_negative = ((int)(parameter2 << 1) >> 0x15 == -1 || (int)(parameter4 << 1) >> 0x15 == -1);\n  is_zero1 = (parameter1 | parameter2 << 1) == 0;\n  is_zero2 = (parameter3 | parameter4 << 1) == 0;\n  is_equal1 = parameter2 == parameter4;\n  is_equal2 = parameter1 == parameter3;\n  is_different = parameter2 ^ parameter4;\n  is_less_than = -1 < (int)is_different && parameter4 <= parameter2;\n  if (is_negative && ((is_negative && !is_zero1) || (is_negative && !is_zero2))) {\n    result = 1;\n  } else if (!is_zero1 && !is_zero2 && !is_equal1 && !is_equal2) {\n    if (is_different) {\n      if (is_less_than) {\n        result = ~((int)parameter4 >> 0x1f) | 1;\n      } else {\n        result = (int)parameter4 >> 0x1f | 1;\n      }\n    } else if (is_equal1 && parameter3 <= parameter1) {\n      result = 1;\n    } else {\n      result = 0;\n    }\n  } else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000924",
            "calling": [],
            "imported": false,
            "current_name": "check_parameters_08000924"
        },
        "FUN_08006c34": {
            "renaming": {
                "FUN_08006c34": "walk_reentrancy_stack_and_call_each_function_08006c34",
                "param_1": "reentrancy_structure_pointer",
                "DAT_08006c3c": "reentrancy_function_pointer"
            },
            "code": "void walk_reentrancy_stack_and_call_each_function_08006c34(void* reentrancy_structure_pointer) {\n  _fwalk_reent(reentrancy_structure_pointer, DAT_08006c3c);\n  return;\n}",
            "called": [
                "_fwalk_reent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c34",
            "calling": [],
            "imported": false,
            "current_name": "walk_reentrancy_stack_and_call_each_function_08006c34"
        },
        "FUN_080072a4": {
            "renaming": {
                "std::ctype_byname<char>::FUN_080072a4": "set_default_values",
                "PTR_id_08007308": "ptr_08007308",
                "PTR_id_0800730c": "ptr_0800730c",
                "PTR_id_08007310": "ptr_08007310",
                "PTR_id_08007314": "ptr_08007314",
                "PTR_id_08007318": "ptr_08007318",
                "PTR_id_0800731c": "ptr_0800731c",
                "PTR_id_08007320": "ptr_08007320",
                "PTR_id_08007324": "ptr_08007324",
                "FUN_080072a4": "set_default_values_080072a4"
            },
            "code": "void set_default_values_080072a4(void)\n{\n    if (is_valid(PTR_id_08007308)) {\n        *(undefined4 *)PTR_id_08007308 = 1;\n    }\n    if (is_valid(PTR_id_0800730c)) {\n        *(undefined4 *)PTR_id_0800730c = 1;\n    }\n    if (is_valid(PTR_id_08007310)) {\n        *(undefined4 *)PTR_id_08007310 = 1;\n    }\n    if (is_valid(PTR_id_08007314)) {\n        *(undefined4 *)PTR_id_08007314 = 1;\n    }\n    if (is_valid(PTR_id_08007318)) {\n        *(undefined4 *)PTR_id_08007318 = 1;\n    }\n    if (is_valid(PTR_id_0800731c)) {\n        *(undefined4 *)PTR_id_0800731c = 1;\n    }\n    if (is_valid(PTR_id_08007320)) {\n        *(undefined4 *)PTR_id_08007320 = 1;\n    }\n    if (is_valid(PTR_id_08007324)) {\n        *(undefined4 *)PTR_id_08007324 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072a4",
            "calling": [],
            "imported": false,
            "current_name": "set_default_values_080072a4"
        },
        "FUN_08004848": {
            "renaming": {
                "FUN_08004848": "get_gpio_from_port_index_08004848",
                "port_idx": "port_index",
                "DAT_08004870": "port_a",
                "DAT_08004880": "port_b",
                "DAT_08004874": "port_c",
                "DAT_08004878": "port_d",
                "DAT_0800487c": "port_e"
            },
            "code": "GPIO_TypeDef* get_gpio_from_port_index_08004848(uint32_t port_index) {\n    switch(port_index) {\n        case 0:\n            return DAT_08004870;\n        case 1:\n            return DAT_08004880;\n        case 2:\n            return DAT_08004874;\n        case 3:\n            return DAT_08004878;\n        case 4:\n            return DAT_0800487c;\n        default:\n            return (GPIO_TypeDef*)0x0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004848",
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "imported": false,
            "current_name": "get_gpio_from_port_index_08004848"
        },
        "FUN_08005d82": {
            "renaming": {
                "FUN_08005d82": "print_number_08005d82",
                "this": "print_object",
                "n": "number",
                "base": "base",
                "sVar1": "result"
            },
            "code": "size_t __thiscall Print::print_number_08005d82(Print *print_object, int number, int base) {\n  size_t result;\n  result = print_number_08005d82(print_object, number, base);\n  return result;\n}",
            "called": [
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d82",
            "calling": [
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "print_number_08005d82"
        },
        "FUN_08006f92": {
            "renaming": {
                "FUN_08006f92": "seek_to_offset_08006f92",
                "param_1": "file_descriptor",
                "param_2": "metadata_offset",
                "iVar1": "seek_result",
                "uVar2": "flags",
                "bVar3": "seek_failed"
            },
            "code": "void seek_to_offset_08006f92(int file_descriptor, int metadata_offset)\n{\n  int seek_result;\n  ushort flags;\n  bool seek_failed;\n  seek_result = _lseek_r(file_descriptor, (int)*(short *)(metadata_offset + 0xe));\n  seek_failed = seek_result == -1;\n  if (seek_failed) {\n    flags = *(ushort *)(metadata_offset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(metadata_offset + 0x54) = seek_result;\n    flags = *(ushort *)(metadata_offset + 0xc) | 0x1000;\n  }\n  if (seek_failed) {\n    *(ushort *)(metadata_offset + 0xc) = flags;\n  }\n  if (!seek_failed) {\n    *(ushort *)(metadata_offset + 0xc) = flags;\n  }\n  return;\n}",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f92",
            "calling": [],
            "imported": false,
            "current_name": "seek_to_offset_08006f92"
        },
        "FUN_080012c0": {
            "renaming": {
                "FUN_080012c0": "writeToDataPins_080012c0",
                "this": "lcd",
                "value": "data",
                "uVar1": "pinIndex",
                "_data_pins": "data_pins",
                "digitalWrite": "writeDigital",
                "pulseEnable": "sendPulse"
            },
            "code": "void __thiscall LiquidCrystal::writeToDataPins_080012c0(LiquidCrystal *this, uint8_t value)\n{\n  uint8_t pinIndex;\n  for (pinIndex = 0; pinIndex < 4; pinIndex++) {\n    uint8_t pinValue = (uint8_t)(value >> (pinIndex & 0xff)) & 1;\n    digitalWrite((uint8_t)this->_data_pins[pinIndex], (int)pinValue);\n  }\n  pulseEnable(this);\n  return;\n}",
            "called": [
                "digitalWrite",
                "pulseEnable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080012c0",
            "calling": [
                "send",
                "begin"
            ],
            "imported": false,
            "current_name": "writeToDataPins_080012c0"
        },
        "FUN_08001f80": {
            "renaming": {
                "FUN_08001f80": "get_ADC_state_08001f80",
                "hadc": "hadc",
                "State": "ADC_state"
            },
            "code": "uint32_t get_ADC_state_08001f80(ADC_HandleTypeDef* hadc)\n{\n  return hadc->State;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f80",
            "calling": [
                "adc_read_value"
            ],
            "imported": false,
            "current_name": "get_ADC_state_08001f80"
        },
        "FUN_08001f84": {
            "renaming": {
                "FUN_08001f84": "check_ADC_status_08001f84",
                "*hadc": "*ADC_handle",
                "HVar1": "status",
                "uVar2": "start_time",
                "uVar3": "current_time",
                "pAVar4": "ADC_instance",
                "wait_loop_index": "loop_index"
            },
            "code": "HAL_StatusTypeDef_conflict check_ADC_status_08001f84(ADC_HandleTypeDef *ADC_handle)\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t loop_index;\n  ADC_TypeDef *ADC_instance;\n  \n  ADC_instance = ADC_handle->Instance;\n  if ((ADC_instance->CR2 & 1) == 0) {\n    ADC_instance->CR2 = ADC_instance->CR2 | 1;\n    for (loop_index = (uint32_t)((uint64_t)conversion_time * (uint64_t)*(uint *)system_clock_frequency >> 0x32); loop_index != 0; loop_index = loop_index - 1) {\n    }\n    uint32_t start_time = HAL_GetTick();\n    do {\n      if ((ADC_handle->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      uint32_t current_time = HAL_GetTick();\n    } while (current_time - start_time < 3);\n    ADC_handle->State = ADC_handle->State | 0x10;\n    ADC_handle->ErrorCode = ADC_handle->ErrorCode | 1;\n    ADC_handle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f84",
            "calling": [
                "HAL_ADC_Start",
                "HAL_ADCEx_Calibration_Start"
            ],
            "imported": false,
            "current_name": "check_ADC_status_08001f84"
        },
        "FUN_08000bcc": {
            "renaming": {
                "FUN_08000bcc": "initializeReflowOven_08000bcc",
                "puVar1": "ssr_pin_ptr",
                "puVar2": "red_led_pin_ptr",
                "this": "lcd_ptr",
                "uVar3": "millis_val",
                "PTR_ssrPin_08000c90": "ssr_pin_address",
                "PTR_buzzerPin_08000c94": "buzzer_pin_address",
                "PTR_ledRedPin_08000c98": "red_led_pin_address",
                "PTR_lcd_08000c9c": "lcd_address",
                "PTR_degree_08000ca0": "degree_symbol_address",
                "PTR_s_Reflow_08000ca4": "reflow_text_address",
                "PTR_s_Oven_1_2_08000ca8": "oven_text_address",
                "PTR_Serial2_08000cac": "serial_ptr",
                "PTR_windowSize_08000cb0": "window_size_ptr",
                "PTR_nextCheck_08000cb4": "next_check_ptr",
                "PTR_nextRead_08000cb8": "next_read_ptr"
            },
            "code": "void initializeReflowOven_08000bcc()\n{\n    uint32_t ssr_pin = *ssr_pin_ptr;\n    digitalWrite(ssr_pin, LOW);\n    pinMode(ssr_pin, OUTPUT);\n\n    uint32_t buzzer_pin = *buzzer_pin_ptr;\n    digitalWrite(buzzer_pin, LOW);\n    pinMode(buzzer_pin, OUTPUT);\n\n    uint32_t red_led_pin = *red_led_pin_ptr;\n    digitalWrite(red_led_pin, LOW);\n    pinMode(red_led_pin, OUTPUT);\n\n    digitalWrite(buzzer_pin, HIGH);\n\n    LiquidCrystal_I2C lcd = *lcd_ptr;\n    lcd.begin(16, 2);\n    lcd.createChar(0, degree_symbol);\n    lcd.clear();\n    lcd.print(\"Reflow\");\n    lcd.setCursor(0, 1);\n    lcd.print(\"Oven 1.2\");\n\n    digitalWrite(buzzer_pin, LOW);\n    delay(2500);\n    lcd.clear();\n\n    Serial2.begin(57600);\n    digitalWrite(red_led_pin, HIGH);\n\n    window_size = 2000;\n    next_check = millis();\n    next_read = millis();\n\n    startForkserver(0);\n}\n",
            "called": [
                "clear",
                "createChar",
                "millis",
                "begin",
                "digitalWrite",
                "setCursor",
                "print",
                "begin",
                "pinMode",
                "startForkserver",
                "delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000bcc",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initializeReflowOven_08000bcc"
        },
        "FUN_080047d8": {
            "renaming": {
                "FUN_080047d8": "reset_uart_transfer_counts_080047d8",
                "hdma": "dma_handle",
                "huart": "uart_handle",
                "RxXferCount": "rx_transfer_count",
                "TxXferCount": "tx_transfer_count",
                "HAL_UART_ErrorCallback": "handle_uart_error"
            },
            "code": "void reset_uart_transfer_counts_080047d8(DMA_HandleTypeDef *dma_handle)\n{\n  UART_HandleTypeDef *uart_handle;\n  uart_handle = (UART_HandleTypeDef *)dma_handle->Parent;\n  uart_handle->RxXferCount = 0;\n  uart_handle->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uart_handle);\n  return;\n}",
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047d8",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_transfer_counts_080047d8"
        },
        "FUN_0800281e": {
            "renaming": {
                "FUN_0800281e": "set_GPIO_PinState_0800281e",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "GPIO_pin",
                "PinState": "pin_state",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_GPIO_PinState_0800281e(GPIO_TypeDef *GPIO_port, uint16_t GPIO_pin, GPIO_PinState pin_state)\n{\n  if (pin_state == GPIO_PIN_RESET) {\n    GPIO_port->BSRR = (uint)GPIO_pin << 0x10;\n    return;\n  }\n  GPIO_port->BSRR = (uint)GPIO_pin;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800281e",
            "calling": [
                "digital_io_write"
            ],
            "imported": false,
            "current_name": "set_GPIO_PinState_0800281e"
        },
        "FUN_08006198": {
            "renaming": {
                "FUN_08006198": "run_preinit_and_global_dtors_08006198",
                "puVar1": "preinit_array_end",
                "iVar2": "preinit_array_size",
                "iVar3": "i",
                "dtors_array_end": "dtors_array_end",
                "dtors_array_size": "dtors_array_size"
            },
            "code": "void run_preinit_and_global_dtors_08006198()\n{\n    void** preinit_array_end = PTR___preinit_array_end_080061d0;\n    int preinit_array_size = (int)PTR___preinit_array_end_080061d4 - (int)PTR___preinit_array_end_080061d0;\n    for (int i = 0; i < preinit_array_size / sizeof(void*); i++) {\n        (*(void(*)())(preinit_array_end[i]))();\n    }\n    _init();\n    void** dtors_array_end = PTR___preinit_array_end_080061d8;\n    int dtors_array_size = (int)PTR___do_global_dtors_aux_fini_array_entry_080061dc - (int)PTR___preinit_array_end_080061d8;\n    for (int i = 0; i < dtors_array_size / sizeof(void*); i++) {\n        (*(void(*)())(dtors_array_end[i]))();\n    }\n    return;\n}",
            "called": [
                "premain",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006198",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "run_preinit_and_global_dtors_08006198"
        },
        "FUN_08006fc0": {
            "renaming": {
                "FUN_08006fc0": "write_to_file_08006fc0",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "write_result"
            },
            "code": "void write_to_file_08006fc0(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n  undefined *error_ptr;\n  int write_result;\n  error_ptr = PTR_errno_08006fe0;\n  *(undefined4 *)PTR_errno_08006fe0 = 0;\n  write_result = _write(file_descriptor, buffer, buffer_size);\n  if ((write_result == -1) && (*(int *)error_ptr != 0)) {\n    *error_code = *(int *)error_ptr;\n  }\n  return;\n}",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fc0",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_to_file_08006fc0"
        },
        "FUN_08007048": {
            "renaming": {
                "FUN_08007048": "seek_file_08007048",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "error_ptr",
                "iVar2": "seek_result"
            },
            "code": "void seek_file_08007048(int *error_code, int file_descriptor, int offset, int whence) {\\n\\\n                        int seek_result = lseek(file_descriptor, offset, whence);\\n\\\n                        if (seek_result == -1 && *error_code != 0) {\\n\\\n                            *error_code = *PTR_errno_08007068;\\n\\\n                        }\\n\\\n                    }",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007048",
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "imported": false,
            "current_name": "seek_file_08007048"
        },
        "FUN_08003c50": {
            "renaming": {
                "FUN_08003c50": "get_HCLK_frequency_08003c50",
                "uVar1": "HCLK_freq",
                "index": "index",
                "DAT_08003c68": "DAT_08003c68",
                "PTR_APBPrescTable_08003c6c": "PTR_APBPrescTable_08003c6c",
                "prescaler": "prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_08003c50(void)\n{\n  uint32_t HCLK_freq = HAL_RCC_GetHCLKFreq();\n  uint32_t index = (*(int *)(DAT_08003c68 + 4) << 0x15) >> 0x1d;\n  uint32_t prescaler = PTR_APBPrescTable_08003c6c[index];\n  return HCLK_freq >> prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c50",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_08003c50"
        },
        "FUN_080065c0": {
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "data",
                "param_2": "count_1",
                "param_3": "count_2",
                "param_4": "value",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "max_count",
                "uVar3": "count_3",
                "bVar4": "is_count_3_not_4",
                "count_4": "count_4",
                "count_5": "count_5",
                "count_6": "count_6",
                "count_7": "count_7"
            },
            "code": "undefined4 process_data_080065c0(undefined4 data, uint *count_1, uint *count_2, undefined4 value, code *callback)\\n{\\n    int i;\\n    uint max_count = count_1[4];\\n    if ((int)count_1[4] < (int)count_1[2]) {\\n        max_count = count_1[2];\\n    }\\n    *count_2 = max_count;\\n    if (*(char *)((int)count_1 + 0x43) != \"\\0\") {\\n        *count_2 = max_count + 1;\\n    }\\n    if ((int)(*count_1 << 0x1a) < 0) {\\n        *count_2 = *count_2 + 2;\\n    }\\n    uint count_3 = *count_1 & 6;\\n    if (count_3 == 0) {\\n        for (; (int)count_3 < (int)(count_1[3] - *count_2); count_3 = count_3 + 1) {\\n            i = (*callback)(data, value, (int)count_1 + 0x19, 1);\\n            if (i == -1) {\\n                return 0xffffffff;\\n            }\\n        }\\n    }\\n    uint count_4 = (uint)*(byte *)((int)count_1 + 0x43);\\n    if (count_4 != 0) {\\n        count_4 = 1;\\n    }\\n    uint count_5 = count_4;\\n    if ((int)(*count_1 << 0x1a) < 0) {\\n        *(undefined *)((int)count_1 + count_4 + 0x43) = 0x30;\\n        count_5 = count_4 + 2;\\n        *(undefined *)((int)count_1 + count_4 + 0x44) = *(undefined *)((int)count_1 + 0x45);\\n    }\\n    i = (*callback)(data, value, (int)count_1 + 0x43, count_5);\\n    if (i != -1) {\\n        uint count_6 = count_1[3];\\n        bool is_count_3_not_4 = (*count_1 & 6) != 4;\\n        if (is_count_3_not_4) {\\n            count_6 = 0;\\n        }\\n        uint count_7 = 0;\\n        if (!is_count_3_not_4) {\\n            count_6 = count_6 - *count_2;\\n        }\\n        if (!is_count_3_not_4) {\\n            count_6 = count_6 & ~((int)count_6 >> 0x1f);\\n        }\\n        if ((int)count_1[4] < (int)count_1[2]) {\\n            count_6 = count_6 + (count_1[2] - count_1[4]);\\n        }\\n        while (true) {\\n            if (count_6 == count_7) {\\n                return 0;\\n            }\\n            i = (*callback)(data, value, (int)count_1 + 0x1a, 1);\\n            if (i == -1) {\\n                break;\\n            }\\n            count_7 = count_7 + 1;\\n        }\\n    }\\n    return 0xffffffff;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080065c0",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080065c0"
        },
        "FUN_080054d4": {
            "renaming": {
                "FUN_080054d4": "receive_data_080054d4",
                "obj": "serial",
                "c": "data",
                "uVar1": "is_rx_active"
            },
            "code": "int receive_data_080054d4(serial_t *serial, uchar *data){\n  uint8_t is_rx_active;\n  if (serial == NULL) {\n    return -1;\n  }\n  is_rx_active = serial_rx_active(serial);\n  if (is_rx_active == 0) {\n    *data = serial->recv;\n    HAL_UART_Receive_IT(*(UART_HandleTypeDef **)(PTR_uart_handlers_0800550c + (uint)serial->index * 4),&serial->recv,1);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "serial_rx_active",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080054d4",
            "calling": [
                "_rx_complete_irq"
            ],
            "imported": false,
            "current_name": "receive_data_080054d4"
        },
        "FUN_0800715c": {
            "renaming": {
                "std::ctype_byname<wchar_t>::FUN_0800715c": "set_flags",
                "PTR_id_080071f0": "id_1",
                "PTR_id_080071f4": "id_2",
                "PTR_id_080071f8": "id_3",
                "PTR_id_080071fc": "id_4",
                "PTR_id_08007200": "id_5",
                "PTR_id_08007204": "id_6",
                "PTR_id_08007208": "id_7",
                "PTR_id_0800720c": "id_8",
                "PTR_id_08007210": "id_9",
                "PTR_id_08007214": "id_10",
                "PTR_id_08007218": "id_11",
                "PTR_id_0800721c": "id_12",
                "FUN_0800715c": "set_flags_0800715c"
            },
            "code": "void set_flags_0800715c() {\n    if (PTR_id_080071f0 < 0x80000000) {\n        PTR_id_080071f0 = 1;\n    }\n    if (PTR_id_080071f4 < 0x80000000) {\n        PTR_id_080071f4 = 1;\n    }\n    if (PTR_id_080071f8 < 0x80000000) {\n        PTR_id_080071f8 = 1;\n    }\n    if (PTR_id_080071fc < 0x80000000) {\n        PTR_id_080071fc = 1;\n    }\n    if (PTR_id_08007200 < 0x80000000) {\n        PTR_id_08007200 = 1;\n    }\n    if (PTR_id_08007204 < 0x80000000) {\n        PTR_id_08007204 = 1;\n    }\n    if (PTR_id_08007208 < 0x80000000) {\n        PTR_id_08007208 = 1;\n    }\n    if (PTR_id_0800720c < 0x80000000) {\n        PTR_id_0800720c = 1;\n    }\n    if (PTR_id_08007210 < 0x80000000) {\n        PTR_id_08007210 = 1;\n    }\n    if (PTR_id_08007214 < 0x80000000) {\n        PTR_id_08007214 = 1;\n    }\n    if (PTR_id_08007218 < 0x80000000) {\n        PTR_id_08007218 = 1;\n    }\n    if (PTR_id_0800721c < 0x80000000) {\n        PTR_id_0800721c = 1;\n    }\n    if (PTR_id_080071f03 < 0x80000000) {\n        PTR_id_080071f03 = 1;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800715c",
            "calling": [],
            "imported": false,
            "current_name": "set_flags_0800715c"
        },
        "FUN_08004d40": {
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40",
                "msg": "message",
                "val": "value"
            },
            "code": "void infinite_loop_08004d40(char *message, int value)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d40",
            "calling": [
                "SystemClock_Config",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004d40"
        },
        "FUN_08004d44": {
            "renaming": {
                "FUN_08004d44": "set_flags_and_values_08004d44",
                "puVar1": "flags_ptr"
            },
            "code": "void set_flags_and_values_08004d44(void)\n{\n  uint *flags_ptr;\n  flags_ptr = DAT_08004d84;\n  *DAT_08004d84 |= 0x01;\n  flags_ptr[1] &= DAT_08004d88;\n  *flags_ptr &= 0xfef6ffff;\n  *flags_ptr &= 0xfffbffff;\n  flags_ptr[1] &= 0xff80ffff;\n  flags_ptr[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004d8c + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d44",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_08004d44"
        },
        "FUN_0800282c": {
            "renaming": {
                "FUN_0800282c": "check_gpio_pin_0800282c",
                "GPIO_Pin": "pin",
                "*(uint *)(DAT_08002844 + 0x14)": "gpio_pin_ptr",
                "(uint)GPIO_Pin": "pin",
                "*(uint *)(DAT_08002844 + 0x14) & (uint)GPIO_Pin": "gpio_pin_val & (uint)pin",
                "*(uint *)(DAT_08002844 + 0x14) = (uint)GPIO_Pin": "*gpio_pin_ptr = (uint)pin"
            },
            "code": "void check_gpio_pin_0800282c(uint16_t pin) {\n  uint* *(uint *)(DAT_08002844 + 0x14) = (uint*)(DAT_08002844 + 0x14);\n  uint gpio_pin_val = **(uint *)(DAT_08002844 + 0x14);\n  if ((*(uint *)(DAT_08002844 + 0x14) & (uint)GPIO_Pin) != 0) {\n    *(uint *)(DAT_08002844 + 0x14) = (uint)GPIO_Pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800282c",
            "calling": [
                "EXTI1_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI0_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI15_10_IRQHandler",
                "EXTI9_5_IRQHandler"
            ],
            "imported": false,
            "current_name": "check_gpio_pin_0800282c"
        },
        "FUN_080015b2": {
            "renaming": {
                "MAX31855::FUN_080015b2": "readTemperature",
                "this": "sensor",
                "iVar1": "readValue",
                "uVar2": "i",
                "uVar3": "bitValue",
                "cs": "chipSelectPin",
                "sck": "clockPin",
                "so": "dataPin",
                "FUN_080015b2": "readTemperature_080015b2"
            },
            "code": "unsigned long readTemperature_080015b2(MAX31855 *sensor) {\n  int readValue;\n  uint32_t bitValue;\n\n  digitalWrite(sensor->chipSelectPin, LOW);\n  bitValue = 0;\n  for (uint8_t i = 0; i < 32; i++) {\n    digitalWrite(sensor->clockPin, HIGH);\n    readValue = digitalRead(sensor->dataPin);\n    if (readValue != 0) {\n      bitValue |= (uint32_t)1 << (31 - i);\n    }\n    digitalWrite(sensor->clockPin, LOW);\n  }\n  digitalWrite(sensor->chipSelectPin, HIGH);\n  return (unsigned long)bitValue;\n}",
            "called": [
                "digitalWrite",
                "digitalRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015b2",
            "calling": [
                "readThermocouple"
            ],
            "imported": false,
            "current_name": "readTemperature_080015b2"
        },
        "FUN_0800040c": {
            "renaming": {
                "FUN_0800040c": "convert_uint64_to_uint32_0800040c",
                "param_1": "input",
                "uVar1": "low_bits",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes_count",
                "uVar4": "temp",
                "in_r12": "high_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "code": "ulonglong convert_uint64_to_uint32_0800040c(uint input)\n{\n  uint leading_zeroes_count;\n  uint shift_amount;\n  uint high_bits = 0;\n  uint low_bits = 0;\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input);\n  shift_amount = leading_zeroes_count + 21;\n  if (shift_amount < 32) {\n    shift_amount = shift_amount + 1;\n    low_bits = input << (shift_amount & 0xff);\n    input = input >> ((12 - leading_zeroes_count) & 0xff);\n  }\n  else {\n    shift_amount = shift_amount - 32;\n    low_bits = input << (shift_amount & 0xff);\n    high_bits = 0;\n    if (shift_amount > 0) {\n      high_bits = 0U >> ((32 - shift_amount) & 0xff);\n    }\n  }\n  if (shift_amount < 32) {\n    high_bits = 0;\n  }\n  if (shift_amount < 12) {\n    high_bits = high_bits << (shift_amount & 0xff);\n  }\n  else {\n    uint high_shift_amount = shift_amount - 12;\n    if ((high_shift_amount == 0) || ((int)high_shift_amount < 0 != SCARRY4(shift_amount - 32, 12))) {\n      shift_amount = shift_amount + 1;\n      high_bits = high_bits >> (shift_amount & 0xff) | low_bits << ((32 - shift_amount) & 0xff);\n      low_bits = low_bits >> (shift_amount & 0xff);\n    }\n    else {\n      high_bits = high_bits >> ((32 - (12 - high_shift_amount)) & 0xff) | low_bits << (12 - high_shift_amount & 0xff);\n    }\n  }\n  if (shift_amount < 1075) {\n    return ((ulonglong)low_bits + (0x432 - shift_amount) * 0x100000) << 32 | high_bits;\n  }\n  uint inverse_shift_amount = ~(0x432 - shift_amount);\n  if (inverse_shift_amount > 30) {\n    return (ulonglong)input >> ((inverse_shift_amount - 31) & 0xff);\n  }\n  uint high_shift_amount = inverse_shift_amount - 19;\n  if ((high_shift_amount == 0) || ((int)high_shift_amount < 0 != SCARRY4(inverse_shift_amount - 31, 12))) {\n    inverse_shift_amount = inverse_shift_amount + 1;\n    return ((ulonglong)input >> (inverse_shift_amount & 0xff)) | ((ulonglong)high_bits << ((32 - inverse_shift_amount) & 0xff));\n  }\n  return (ulonglong)high_bits >> (32 - (12 - high_shift_amount) & 0xff) | ((ulonglong)input << (12 - high_shift_amount & 0xff));\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800040c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "readThermocouple",
                "SetTunings",
                "loop"
            ],
            "imported": false,
            "current_name": "convert_uint64_to_uint32_0800040c"
        },
        "FUN_08006088": {
            "renaming": {
                "FUN_08006088": "handleExternalInterrupt_08006088",
                "PTR_": "",
                "DAT_": "",
                "4": "GPIO_PIN_4"
            },
            "code": "void handleExternalInterrupt_08006088(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006088",
            "calling": [],
            "imported": false,
            "current_name": "handleExternalInterrupt_08006088"
        },
        "FUN_08006eb0": {
            "renaming": {
                "FUN_08006eb0": "process_request_08006eb0",
                "param_1": "request_status",
                "param_2": "request_id",
                "param_3": "signal_id",
                "param_4": "signal_data",
                "_Var1": "current_process_id",
                "uVar2": "kill_result",
                "iVar3": "request_handler",
                "pcVar4": "signal_handler"
            },
            "code": "int process_request_08006eb0(int* request_status, uint request_id, int signal_id, int signal_data) {\n    pid_t current_process_id = getpid();\n    if (request_id > 31) {\n        *request_status = 22;\n        return -1;\n    }\n    int* request_handler = request_status[17];\n    if (request_handler != NULL) {\n        void (*signal_handler)(uint);\n        signal_handler = *(void (**)(uint))(request_handler + request_id * 4);\n        if (signal_handler != NULL) {\n            if (signal_handler != (void*)1) {\n                if (signal_handler == (void*)-1) {\n                    *request_status = 22;\n                    return 1;\n                }\n                *(int*)(request_handler + request_id * 4) = 0;\n                (*signal_handler)(signal_data);\n            }\n            return 0;\n        }\n    }\n    int kill_result = kill(current_process_id, signal_id);\n    return kill_result;\n}",
            "called": [
                "_getpid_r",
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eb0",
            "calling": [
                "raise"
            ],
            "imported": false,
            "current_name": "process_request_08006eb0"
        },
        "FUN_08004e5c": {
            "renaming": {
                "FUN_08004e5c": "handle_timer_interrupt_08004e5c",
                "PTR_timer_handles_08004e6c": "PTR_timer_handles",
                "TIM_HandleTypeDef": "TimerHandle",
                "timer_handle": "timer_handle",
                "HAL_TIM_IRQHandler": "handle_timer_interrupt_request"
            },
            "code": "void handle_timer_interrupt_08004e5c(void)\n{\n  TIM_HandleTypeDef* timer_handle = *(TIM_HandleTypeDef **)(PTR_timer_handles_08004e6c_08004e6c + 0xc);\n  if (timer_handle != (TIM_HandleTypeDef *)0x0) {\n    HAL_TIM_IRQHandler(timer_handle);\n  }\n  return;\n}",
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e5c",
            "calling": [],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004e5c"
        },
        "FUN_08004df4": {
            "renaming": {
                "FUN_08004df4": "get_stimer_from_timer_handle_08004df4",
                "htim": "timer_handle",
                "&htim[-1].Lock": "&timer_handle[index_of_stimer].Lock"
            },
            "code": "stimer_t * get_stimer_from_timer_handle_08004df4(TIM_HandleTypeDef *timer_handle)\n{\n    int index_of_stimer = -1;\n    return (stimer_t *)&timer_handle[index_of_stimer].Lock;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df4",
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "imported": false,
            "current_name": "get_stimer_from_timer_handle_08004df4"
        },
        "FUN_08004bb0": {
            "renaming": {
                "FUN_08004bb0": "configure_gpio_pin_08004bb0",
                "pin": "pin_name",
                "mode": "pin_mode",
                "pull": "pull_config",
                "uVar1": "pin_number",
                "GPIOx": "gpio_port",
                "tmpreg": "unused_temp_register",
                "GPIO_InitStructure": "gpio_init_struct"
            },
            "code": "void configure_gpio_pin_08004bb0(PinName_conflict pin, uint32_t mode, uint32_t pull) {\n  uint32_t pin_number = (uint32_t)pin;\n  GPIO_TypeDef *gpio_port = set_GPIO_Port_Clock((pin_number << 24) >> 28);\n  GPIO_InitTypeDef gpio_init_struct;\n  gpio_init_struct.Pin = 1 << (pin_number & 0xf) & 0xffff;\n  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;\n  *(uint32_t *)(DAT_08004c28 + 0x18) |= 1;\n  if ((pin_number - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(uint32_t *)(DAT_08004c2c + 4) |= 0x4000000;\n  }\n  if ((pin_number == 0xf) || (pin_number == 0x13) || (pin_number == 0x14)) {\n    *(uint32_t *)(DAT_08004c2c + 4) &= 0xf8ffffff;\n    *(uint32_t *)(DAT_08004c2c + 4) |= 0x2000000;\n  }\n  gpio_init_struct.Mode = mode;\n  gpio_init_struct.Pull = pull;\n  HAL_GPIO_Init(gpio_port, &gpio_init_struct);\n}",
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bb0",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "configure_gpio_pin_08004bb0"
        },
        "FUN_08004df8": {
            "renaming": {
                "FUN_08004df8": "handle_timer_interrupt_08004df8",
                "htim": "timer_handle",
                "psVar1": "timer_object",
                "get_timer_obj": "get_timer_object",
                "irqHandleOC": "irq_handle_output_compare"
            },
            "code": "void handle_timer_interrupt_08004df8(TIM_HandleTypeDef *timer_handle)\n{\n  stimer_t *timer_object;\n  timer_object = get_timer_object(timer_handle);\n  if ((timer_object->irq_handle_output_compare != (_func_void_stimer_t_ptr_uint32_t *)0x0) &&\n     (timer_handle->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_object->irq_handle_output_compare)(timer_object,0);\n  }\n  return;\n}",
            "called": [
                "get_timer_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004df8",
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_timer_interrupt_08004df8"
        },
        "FUN_08001510": {
            "renaming": {
                "FUN_08001510": "_08001510_08001510",
                "rs": "register_select",
                "enable": "enable_pin",
                "d0": "data_pin_0",
                "d1": "data_pin_1",
                "d2": "data_pin_2",
                "d3": "data_pin_3",
                "init": "init_FUN_08001510",
                "this": "obj",
                "first_arg": "first_argument",
                "second_arg": "second_argument",
                "third_arg": "third_argument",
                "fourth_arg": "fourth_argument",
                "fifth_arg": "fifth_argument",
                "sixth_arg": "sixth_argument",
                "_vptr_Print": "virtual_pointer_Print",
                "write_error": "write_error_flag",
                "PTR_PTR_write_1_0800154c": "PTR_PTR_write_1_0800154c"
            },
            "code": "typedef struct _08001510_08001510 {\n    int write_error;\n    _func_int_varargs **_vptr_Print;\n} _08001510_08001510;\n\nvoid _08001510_08001510(_08001510_08001510 *obj, uint8_t first_arg, uint8_t rs, uint8_t second_arg, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t third_arg, uint8_t fourth_arg, uint8_t fifth_arg, uint8_t sixth_arg) {\n    obj->write_error = 0;\n    obj->_vptr_Print = (_func_int_varargs **)PTR_PTR_write_1_0800154c;\n    init(obj, first_arg, rs, second_arg, enable, d0, d1, d2, d3, third_arg, fourth_arg, fifth_arg, sixth_arg);\n}\n\n_08001510_08001510* create_08001510_08001510(_08001510_08001510 *this, uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) {\n    _08001510_08001510(this, 0x01, rs, 0xff, enable, d0, d1, d2, d3, 0x00, 0x00, 0x00, 0x00);\n    return this;\n}",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001510",
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "imported": false,
            "current_name": "_08001510_08001510"
        },
        "FUN_08002af8": {
            "renaming": {
                "FUN_08002af8": "check_i2c_state_08002af8",
                "hi2c": "handle",
                "pData": "data",
                "Size": "size",
                "XferOptions": "options",
                "HVar1": "status",
                "pIVar2": "i2c_instance"
            },
            "code": "HAL_StatusTypeDef_conflict check_i2c_state_08002af8(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *i2c_instance;\n  uint32_t tmpreg;\n\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      i2c_instance = handle->Instance;\n      if ((i2c_instance->CR1 & 1) == 0) {\n        i2c_instance->CR1 = i2c_instance->CR1 | 1;\n      }\n      handle->Instance->CR1 = handle->Instance->CR1 & 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      handle->Instance->CR2 = handle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002af8",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "check_i2c_state_08002af8"
        },
        "FUN_080028de": {
            "renaming": {
                "FUN_080028de": "handle_i2c_events_080028de",
                "*hi2c": "*i2c_handle",
                "uVar1": "xfer_options",
                "pIVar2": "i2c_instance",
                "tmpreg": "tmpreg"
            },
            "code": "HAL_StatusTypeDef_conflict handle_i2c_events_080028de(I2C_HandleTypeDef *i2c_handle)\n{\n  uint32_t xfer_options = i2c_handle->XferOptions;\n  I2C_TypeDef *i2c_instance = i2c_handle->Instance;\n  uint32_t tmpreg;\n\n  if ((i2c_handle->State == HAL_I2C_STATE_BUSY_RX) && ((i2c_handle->EventCount != 0) || (i2c_handle->Mode != HAL_I2C_MODE_MEM))) {\n    if ((i2c_handle->EventCount == 0) && ((i2c_handle->Init).AddressingMode == 0xc000)) {\n      i2c_instance->CR1 |= 0x100;\n      i2c_handle->EventCount++;\n    }\n    else {\n      if (i2c_handle->XferCount == 0) {\n        i2c_instance->CR1 |= 0x200;\n      }\n      else if (i2c_handle->XferCount == 1) {\n        if (xfer_options == 0xffff0000) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          if ((i2c_instance->CR2 & 0x800) == 0) {\n            i2c_instance->CR1 |= 0x200;\n          }\n          else {\n            i2c_instance->CR1 &= 0xfffffbff;\n          }\n        }\n        else if (((xfer_options == 4) || (xfer_options == 8)) || (i2c_handle->PreviousState == 0x12)) {\n          i2c_instance->CR1 &= 0xfffffbff;\n          i2c_instance->CR1 |= 0x200;\n        }\n        else if (i2c_handle->XferOptions == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n      }\n      else if (i2c_handle->XferCount == 2) {\n        if (i2c_handle->XferOptions == 2) {\n          i2c_instance->CR1 |= 0x400;\n        }\n        else {\n          i2c_instance->CR1 |= 0x800;\n          i2c_instance->CR1 &= 0xfffffbff;\n        }\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      else {\n        i2c_instance->CR1 |= 0x400;\n        if ((i2c_instance->CR2 & 0x800) != 0) {\n          i2c_instance->CR2 |= 0x1000;\n        }\n      }\n      i2c_handle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028de",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "handle_i2c_events_080028de"
        },
        "FUN_08002848": {
            "renaming": {
                "FUN_08002848": "i2c_handle_mem_mode_08002848",
                "*hi2c": "*i2c_handle",
                "HAL_I2C_MODE_MEM": "I2C_MEM_MODE",
                "EventCount": "event_count",
                "Instance": "i2c_instance",
                "Devaddress": "device_address",
                "HAL_I2C_STATE_BUSY_TX": "I2C_STATE_BUSY_TX",
                "Init": "i2c_init",
                "AddressingMode": "addressing_mode"
            },
            "code": "HAL_StatusTypeDef i2c_handle_mem_mode_08002848(I2C_HandleTypeDef *i2c_handle) {\n    if (i2c_handle->Mode == HAL_I2C_MODE_MEM) {\n        if (i2c_handle->EventCount == 0) {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n        }\n        else {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n        }\n    }\n    else if ((i2c_handle->Init).AddressingMode == 0x4000) {\n        if (i2c_handle->State == HAL_I2C_STATE_BUSY_TX) {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xfe;\n        }\n        else {\n            i2c_handle->Instance->DR = i2c_handle->Devaddress & 0xff | 1;\n        }\n    }\n    else if (i2c_handle->EventCount == 0) {\n        i2c_handle->Instance->DR = (i2c_handle->Devaddress << 16) >> 23 & 6 | 0xf0;\n    }\n    else if (i2c_handle->EventCount == 1) {\n        i2c_handle->Instance->DR = (i2c_handle->Devaddress << 16) >> 23 & 6 | 0xf1;\n    }\n    return HAL_OK;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002848",
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "imported": false,
            "current_name": "i2c_handle_mem_mode_08002848"
        },
        "FUN_08004e70": {
            "renaming": {
                "FUN_08004e70": "get_i2c_t_from_i2c_handle_08004e70",
                "hi2c": "i2c_handle",
                "i2c_t": "i2c_t_struct",
                "EventCount": "event_count"
            },
            "code": "i2c_t * get_i2c_t_from_i2c_handle_08004e70(I2C_HandleTypeDef *i2c_handle) {\n    return (i2c_t *)&i2c_handle[-1].EventCount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e70",
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "imported": false,
            "current_name": "get_i2c_t_from_i2c_handle_08004e70"
        },
        "FUN_080020f0": {
            "renaming": {
                "FUN_080020f0": "check_adc_ready_080020f0",
                "*hadc": "*adc_handle",
                "uVar1": "start_time",
                "uVar2": "curr_time",
                "pAVar3": "adc_instance",
                "HAL_GetTick": "HAL_GetTick",
                "CR2": "CR2",
                "Instance": "Instance",
                "HAL_OK": "HAL_OK",
                "HAL_ADC_STATE_ERROR_INTERNAL": "HAL_ADC_STATE_ERROR_INTERNAL",
                "HAL_ADC_ERROR_INTERNAL": "HAL_ADC_ERROR_INTERNAL"
            },
            "code": "HAL_StatusTypeDef check_adc_ready_080020f0(ADC_HandleTypeDef *adc_handle)\n{\n  uint32_t curr_time, start_time;\n  ADC_TypeDef *adc_instance;\n  adc_instance = adc_handle->Instance;\n  if ((adc_instance->CR2 & ADC_CR2_ADON) == 0) {\n    return HAL_OK;\n  }\n  adc_instance->CR2 &= ~ADC_CR2_ADON;\n  start_time = HAL_GetTick();\n  do {\n    if ((adc_handle->Instance->CR2 & ADC_CR2_ADON) == 0) {\n      return HAL_OK;\n    }\n    curr_time = HAL_GetTick();\n  } while (curr_time - start_time < 3);\n  adc_handle->State |= HAL_ADC_STATE_ERROR_INTERNAL;\n  adc_handle->ErrorCode |= HAL_ADC_ERROR_INTERNAL;\n  return HAL_ERROR;\n}",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080020f0",
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "imported": false,
            "current_name": "check_adc_ready_080020f0"
        },
        "FUN_08006e10": {
            "renaming": {
                "FUN_08006e10": "read_and_allocate_memory_08006e10",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "uVar1": "flags",
                "iVar2": "size",
                "local_18": "offset",
                "local_14": "temp_buffer"
            },
            "code": "void read_and_allocate_memory_08006e10(int buffer_size, int *buffer) {\n  ushort flags;\n  int size;\n  int offset;\n  int *temp_buffer;\n\n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1e)) {\n    temp_buffer = buffer;\n    flags = __swhatbuf_r(buffer_size, buffer, &size, &temp_buffer);\n    offset = _malloc_r(buffer_size, size);\n    if (offset != 0) {\n      *(undefined4 *)(buffer_size + 0x28) = DAT_08006e8c;\n      *buffer = offset;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[4] = offset;\n      buffer[5] = size;\n      if ((temp_buffer != (int *)0x0) && (_isatty_r(buffer_size, (int)*(short *)((int)buffer + 0xe)))) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = flags | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}",
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e10",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "read_and_allocate_memory_08006e10"
        },
        "FUN_0800607e": {
            "renaming": {
                "FUN_0800607e": "handle_GPIO_ext_interrupt_0800607e"
            },
            "code": "void handle_GPIO_ext_interrupt_0800607e(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(2);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800607e",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_ext_interrupt_0800607e"
        },
        "FUN_08004e74": {
            "renaming": {
                "FUN_08004e74": "i2c_slave_transfer_08004e74",
                "hi2c": "i2c_handle",
                "TransferDirection": "transfer_direction",
                "AddrMatchCode": "address_match_code",
                "piVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "i2cTxRxBufferSize": "tx_rx_buffer_size",
                "slaveMode": "slave_mode",
                "i2c_onSlaveTransmit": "on_slave_transmit",
                "i2cTxRxBuffer": "tx_rx_buffer"
            },
            "code": "void i2c_slave_transfer_08004e74(I2C_HandleTypeDef *i2c_handle, uint8_t transfer_direction, uint16_t address_match_code) {\n  i2c_t *i2c_obj;\n  i2c_obj = get_i2c_object(i2c_handle);\n  if ((uint)address_match_code == (i2c_handle->Init).OwnAddress1) {\n    if (transfer_direction == 0) {\n      i2c_obj->tx_rx_buffer_size = 0;\n      i2c_obj->slave_mode = 0;\n      if (i2c_obj->on_slave_transmit != (_func_void *)0x0) {\n        (*i2c_obj->on_slave_transmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT(i2c_handle, i2c_obj->tx_rx_buffer, (ushort)i2c_obj->tx_rx_buffer_size, 8);\n      return;\n    }\n    i2c_obj->slave_mode = 1;\n    HAL_I2C_Slave_Sequential_Receive_IT(i2c_handle, i2c_obj->tx_rx_buffer, 0x20, 8);\n  }\n  return;\n}",
            "called": [
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "get_i2c_obj"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e74",
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "imported": false,
            "current_name": "i2c_slave_transfer_08004e74"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "set_GPIO_pin_state_08004c30",
                "port": "GPIO_port",
                "pin": "GPIO_pin",
                "val": "GPIO_state"
            },
            "code": "void set_GPIO_pin_state_08004c30(GPIO_TypeDef *port, uint32_t pin, uint32_t state) {\n  if (state == 0) {\n    HAL_GPIO_WritePin(port, (uint16_t)pin, GPIO_PIN_RESET);\n    return;\n  }\n  HAL_GPIO_WritePin(port, (uint16_t)pin, GPIO_PIN_SET);\n  return;\n}",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "set_GPIO_pin_state_08004c30"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "handle_GPIO_Interrupt_08006092"
            },
            "code": "void handle_GPIO_Interrupt_08006092(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [],
            "imported": false,
            "current_name": "handle_GPIO_Interrupt_08006092"
        },
        "FUN_08006f38": {
            "renaming": {
                "FUN_08006f38": "read_and_update_08006f38",
                "param_1": "buffer",
                "param_2": "buffer_size",
                "iVar1": "read_result",
                "uVar2": "updated_value",
                "bVar3": "read_success"
            },
            "code": "void read_and_update_08006f38(uint8_t* buffer, int buffer_size)\n{\n  int read_result = _read_r(buffer, (int)*(short *)(buffer_size + 0xe));\n  bool read_success = read_result >= 0;\n  uint updated_value;\n  if (read_success) {\n    updated_value = *(int *)(buffer_size + 0x54) + read_result;\n  }\n  else {\n    updated_value = *(ushort *)(buffer_size + 0xc) & 0xffffefff;\n  }\n  if (read_success) {\n    *(uint *)(buffer_size + 0x54) = updated_value;\n  }\n  if (!read_success) {\n    *(short *)(buffer_size + 0xc) = (short)updated_value;\n  }\n}",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f38",
            "calling": [],
            "imported": false,
            "current_name": "read_and_update_08006f38"
        },
        "FUN_08004cce": {
            "renaming": {
                "FUN_08004cce": "find_pin_function_08004cce",
                "PinName_conflict": "PinName",
                "PinMap_conflict": "PinMap",
                "uVar1": "function_index"
            },
            "code": "uint32_t find_pin_function_08004cce(PinName_conflict pin, PinMap_conflict *map) {\n    uint32_t function_index;\n    if (pin == NC) {\n        return 0xffffffff;\n    }\n    function_index = pinmap_find_function(pin, map);\n    return function_index;\n}",
            "called": [
                "pinmap_find_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cce",
            "calling": [
                "pwm_stop",
                "get_adc_channel",
                "get_pwm_channel",
                "uart_init"
            ],
            "imported": false,
            "current_name": "find_pin_function_08004cce"
        },
        "FUN_08006eac": {
            "renaming": {
                "FUN_08006eac": "do_nothing_08006eac"
            },
            "code": "\nvoid do_nothing_08006eac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eac",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eac"
        },
        "FUN_08006f34": {
            "renaming": {
                "FUN_08006f34": "get_process_id_08006f34"
            },
            "code": "__pid_t get_process_id_08006f34(void)\n{\n  return 1;\n}",
            "called": [
                "_getpid"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006f34",
            "calling": [
                "_raise_r"
            ],
            "imported": false,
            "current_name": "get_process_id_08006f34"
        },
        "FUN_08006eae": {
            "renaming": {
                "FUN_08006eae": "do_nothing_08006eae"
            },
            "code": "\nvoid do_nothing_08006eae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006eae",
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "imported": false,
            "current_name": "do_nothing_08006eae"
        },
        "FUN_08005f5c": {
            "renaming": {
                "FUN_08005f5c": "do_nothing_08005f5c"
            },
            "code": "\nvoid do_nothing_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_08005f5c"
        },
        "FUN_08006fe4": {
            "renaming": {
                "FUN_08006fe4": "close_file_and_handle_errors_08006fe4",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "void close_file_and_handle_errors_08006fe4(int *error_code, int file_descriptor) {\n  undefined *errno_ptr;\n  int close_result;\n  errno_ptr = PTR_errno_08007000;\n  *(undefined4 *)PTR_errno_08007000 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006fe4",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_file_and_handle_errors_08006fe4"
        },
        "FUN_08003ad4": {
            "renaming": {
                "FUN_08003ad4": "configureClocks_08003ad4",
                "RCC_ClkInitStruct_conflict": "clkInit",
                "FLatency": "flashLatency",
                "puVar1": "flashLatencyPtr",
                "uVar2": "tickStart",
                "uVar3": "elapsedTime",
                "uVar4": "sysClockSource"
            },
            "code": "HAL_StatusTypeDef configureClocks_08003ad4(RCC_ClkInitTypeDef *clkInit, uint32_t flashLatency) {\n    uint32_t *flashLatencyPtr = (uint32_t *)0x08003c34;\n    if (((*flashLatencyPtr & 7) < flashLatency) && (*flashLatencyPtr = *flashLatencyPtr & 0xfffffff8 | flashLatency, flashLatency != (*flashLatencyPtr & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_AHB) != 0) {\n        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, clkInit->AHBCLKDivider);\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_SYSCLK) != 0) {\n        uint32_t sysClockSource = clkInit->SYSCLKSource;\n        if (sysClockSource == RCC_SYSCLKSOURCE_PLLCLK) {\n            if ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {\n                return HAL_ERROR;\n            }\n        }\n        else if ((sysClockSource != RCC_SYSCLKSOURCE_HSI) && ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE)) {\n            return HAL_ERROR;\n        }\n        MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, sysClockSource);\n        uint32_t tickStart = HAL_GetTick();\n        if (clkInit->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {\n            while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {\n                if ((HAL_GetTick() - tickStart) > 5000U) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        else if (clkInit->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {\n            while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE) {\n                if ((HAL_GetTick() - tickStart) > 5000U) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n        else {\n            while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI) {\n                if ((HAL_GetTick() - tickStart) > 5000U) {\n                    return HAL_TIMEOUT;\n                }\n            }\n        }\n    }\n    flashLatencyPtr = (uint32_t *)0x08003c34;\n    if ((flashLatency < (*flashLatencyPtr & 7)) && (*flashLatencyPtr = *flashLatencyPtr & 0xfffffff8 | flashLatency, flashLatency != (*flashLatencyPtr & 7))) {\n        return HAL_ERROR;\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_PCLK1) != 0) {\n        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clkInit->APB1CLKDivider);\n    }\n    if ((clkInit->ClockType & RCC_CLOCKTYPE_PCLK2) != 0) {\n        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, clkInit->APB2CLKDivider << 3);\n    }\n    SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];\n    HAL_InitTick(0x0000000FU);\n    return HAL_OK;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ad4",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configureClocks_08003ad4"
        },
        "FUN_08004110": {
            "renaming": {
                "FUN_08004110": "updateChannelState_08004110",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelNState": "channelState",
                "CCER": "channelConfig"
            },
            "code": "void updateChannelState_08004110(TIM_TypeDef *timer, uint32_t channel, uint32_t channelState) {\n  uint32_t channelMask = 4 << (channel & 0xff);\n  timer->CCER = (timer->CCER & ~channelMask) | (channelState << (channel & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004110",
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "imported": false,
            "current_name": "updateChannelState_08004110"
        },
        "FUN_08004ce2": {
            "renaming": {
                "FUN_08004ce2": "is_valid_pin_08004ce2",
                "pin": "pin_name",
                "map": "pin_map"
            },
            "code": "_Bool is_valid_pin_08004ce2(PinName_conflict pin, PinMap_conflict *map) {\n  if (pin == NC) {\n    return false;\n  }\n  while( true ) {\n    if (map->pin == NC) {\n      return false;\n    }\n    if (pin == map->pin) break;\n    map++;\n  }\n  return true;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ce2",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "is_valid_pin_08004ce2"
        },
        "FUN_08005568": {
            "renaming": {
                "FUN_08005568": "setup_serial_communication_08005568",
                "obj": "serial_object",
                "callback": "callback_function",
                "bVar1": "object_index",
                "PTR_tx_callback_080055b0": "tx_callback",
                "PTR_tx_callback_obj_080055b4": "tx_callback_object",
                "PTR_uart_handlers_080055b8": "uart_handler",
                "HAL_NVIC_SetPriority": "set_irq_priority",
                "HAL_NVIC_EnableIRQ": "enable_irq",
                "HAL_UART_Transmit_IT": "transmit_data"
            },
            "code": "void setup_serial_communication_08005568(serial_t *serial_object, _func_int_serial_t_ptr *callback_function)\n{\n  if (serial_object != NULL)\n  {\n    uint8_t object_index = serial_object->index;\n    _func_int_serial_t_ptr **PTR_tx_callback_080055b0 = (PTR_PTR_tx_callback_080055b0_080055b0 + (uint)object_index * 4);\n    *PTR_tx_callback_080055b0 = callback_function;\n    \n    serial_t **PTR_PTR_tx_callback_080055b0_obj_080055b4 = (PTR_PTR_tx_callback_080055b0_obj_080055b4 + (uint)object_index * 4);\n    *PTR_PTR_tx_callback_080055b0_obj_080055b4 = serial_object;\n    \n    HAL_NVIC_SetPriority(serial_object->irq, 0, 2);\n    HAL_NVIC_EnableIRQ(serial_object->irq);\n    \n    UART_HandleTypeDef **PTR_uart_handlers_080055b8 = (PTR_PTR_uart_handlers_080055b8s_080055b8 + (uint)serial_object->index * 4);\n    uint8_t *tx_buffer = serial_object->tx_buff + serial_object->tx_tail;\n    HAL_UART_Transmit_IT(*PTR_uart_handlers_080055b8, tx_buffer, 1);\n  }\n}",
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005568",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "setup_serial_communication_08005568"
        },
        "FUN_08004478": {
            "renaming": {
                "FUN_08004478": "uart_transmit_08004478",
                "huart": "uart_handle",
                "pData": "data",
                "Size": "size",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "tick_start"
            },
            "code": "HAL_StatusTypeDef_conflict uart_transmit_08004478(UART_HandleTypeDef *uart_handle, uint8_t *data, uint16_t size, uint32_t timeout)\n{\n    HAL_StatusTypeDef_conflict status;\n    uint32_t tick_start;\n    if (uart_handle->gState != HAL_UART_STATE_READY) {\n        return HAL_BUSY;\n    }\n    if (data == NULL || size == 0 || uart_handle->Lock == HAL_LOCKED) {\n        return HAL_ERROR;\n    }\n    uart_handle->Lock = HAL_LOCKED;\n    uart_handle->ErrorCode = 0;\n    uart_handle->gState = HAL_UART_STATE_BUSY_TX;\n    tick_start = HAL_GetTick();\n    uart_handle->TxXferSize = size;\n    uart_handle->TxXferCount = size;\n    while (uart_handle->TxXferCount != 0) {\n        uart_handle->TxXferCount--;\n        if (uart_handle->Init.WordLength == UART_WORDLENGTH_9B) {\n            status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, tick_start, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n            uart_handle->Instance->DR = *(uint16_t *)data & 0x1FF;\n            if (uart_handle->Init.Parity == UART_PARITY_NONE) {\n                data += 2;\n            }\n            else {\n                data++;\n            }\n        }\n        else {\n            status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TXE, RESET, tick_start, timeout);\n            if (status != HAL_OK) {\n                return HAL_TIMEOUT;\n            }\n            uart_handle->Instance->DR = (uint32_t)*data;\n            data++;\n        }\n    }\n    status = UART_WaitOnFlagUntilTimeout(uart_handle, UART_FLAG_TC, RESET, tick_start, timeout);\n    if (status == HAL_OK) {\n        uart_handle->gState = HAL_UART_STATE_READY;\n        uart_handle->Lock = HAL_UNLOCKED;\n    }\n    else {\n        status = HAL_TIMEOUT;\n    }\n    return status;\n}",
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004478",
            "calling": [
                "uart_debug_write"
            ],
            "imported": false,
            "current_name": "uart_transmit_08004478"
        },
        "FUN_08005f5e": {
            "renaming": {
                "FUN_08005f5e": "initialize_EVP_PKEY_context_08005f5e",
                "ctx": "pkey_ctx"
            },
            "code": "void initialize_EVP_PKEY_context_08005f5e(EVP_PKEY_CTX *pkey_ctx)\n{\n  pkey_ctx = (EVP_PKEY_CTX *)0x3;\n  HAL_NVIC_SetPriorityGrouping(3);\n  init(pkey_ctx);\n  return;\n}",
            "called": [
                "init",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f5e",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "initialize_EVP_PKEY_context_08005f5e"
        },
        "FUN_08005cb6": {
            "renaming": {
                "__thiscall Print::FUN_08005cb6": "print_character",
                "this": "print_obj",
                "c": "character",
                "sVar1": "size_of_printed_char",
                "FUN_08005cb6": "print_character_08005cb6"
            },
            "code": "size_t print_character_08005cb6(Print *print_obj, char character) {\n  size_t size_of_printed_char = (**print_obj->_vptr_Print)(print_obj, (int)character);\n  return size_of_printed_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb6",
            "calling": [
                "printTo",
                "print",
                "printFloat"
            ],
            "imported": false,
            "current_name": "print_character_08005cb6"
        },
        "FUN_08003c70": {
            "renaming": {
                "FUN_08003c70": "get_HCLK_frequency_08003c70",
                "uVar1": "freq",
                "PTR_APBPrescTable_08003c8c": "prescaler_table",
                "DAT_08003c88": "data",
                "index": "prescaler_index",
                "prescaler": "actual_prescaler"
            },
            "code": "uint32_t get_HCLK_frequency_08003c70(void)\n{\n  uint32_t freq = HAL_RCC_GetHCLKFreq();\n  uint32_t index = (uint)(*(int *)(DAT_08003c88 + 4) << 0x12) >> 0x1d;\n  uint32_t prescaler = PTR_APBPrescTable_08003c8c[index];\n  return freq >> prescaler;\n}",
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003c70",
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "imported": false,
            "current_name": "get_HCLK_frequency_08003c70"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "uart_transmit_data_080053d4",
                "data": "data_ptr",
                "size": "data_size",
                "pin": "pinName",
                "HVar1": "halStatus",
                "uVar2": "startTime",
                "pvVar3": "peripheralPtr",
                "uVar4": "currentTime",
                "uVar5": "i"
            },
            "code": "size_t uart_transmit_data_080053d4(uint8_t *data, uint32_t size)\n{\n  PinName_conflict pinName;\n  HAL_StatusTypeDef_conflict halStatus;\n  uint32_t startTime;\n  void *peripheralPtr;\n  uint32_t i;\n  startTime = HAL_GetTick();\n  pinName = PTR_digitalPin_0800547c[1];\n  peripheralPtr = pinmap_peripheral(pinName,(PinMap_conflict *)PTR_PinMap_UART_TX_08005480);\n  if (peripheralPtr == (void *)0x0) {\n    return 0;\n  }\n  i = 0;\n  while ((i < 5 && ((*(int *)(PTR_uart_handlers_08005484 + i * 4) == 0 || (peripheralPtr = pinmap_peripheral(pinName,(PinMap_conflict *)PTR_PinMap_UART_TX_08005480), **(void ***)(PTR_uart_handlers_08005484 + i * 4) != peripheralPtr))))) {\n    i = i + 1 & 0xff;\n  }\n  if (4 < i) {\n    if ((4 < (byte)PTR_serial_debug_08005488[0x44]) && (uart_debug_init(), 4 < (byte)PTR_serial_debug_08005488[0x44])) {\n      return 0;\n    }\n    i = (uint)(byte)PTR_serial_debug_08005488[0x44];\n  }\n  do {\n    halStatus = HAL_UART_Transmit(*(UART_HandleTypeDef **)(PTR_uart_handlers_08005484 + i * 4),data,(uint16_t)size,1000);\n    if (halStatus == HAL_OK) {\n      return size;\n    }\n    uVar4 = HAL_GetTick();\n  } while (uVar4 - startTime < 1000);\n  return 0;\n}",
            "called": [
                "HAL_GetTick",
                "HAL_UART_Transmit",
                "pinmap_peripheral",
                "uart_debug_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "_write"
            ],
            "imported": false,
            "current_name": "uart_transmit_data_080053d4"
        },
        "FUN_08002b84": {
            "renaming": {
                "FUN_08002b84": "listen_state_handler_08002b84",
                "*hi2c": "*handle",
                "*pData": "*data",
                "Size": "size",
                "XferOptions": "transfer_options",
                "HVar1": "status",
                "*pIVar2": "*instance",
                "tmpreg": "control_register"
            },
            "code": "HAL_StatusTypeDef_conflict listen_state_handler_08002b84(I2C_HandleTypeDef *handle, uint8_t *data, uint16_t size, uint32_t transfer_options)\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef *instance;\n  uint32_t control_register;\n\n  if (handle->State == HAL_I2C_STATE_LISTEN) {\n    if (data == NULL || size == 0 || handle->Lock == HAL_LOCKED) {\n      status = HAL_ERROR;\n    }\n    else {\n      handle->Lock = HAL_LOCKED;\n      instance = handle->Instance;\n      if ((instance->CR1 & 1) == 0) {\n        instance->CR1 |= 1;\n      }\n      instance->CR1 &= 0xfffff7ff;\n      handle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      handle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      handle->ErrorCode = 0;\n      handle->pBuffPtr = data;\n      handle->XferCount = size;\n      handle->XferOptions = transfer_options;\n      handle->XferSize = handle->XferCount;\n      handle->Lock = HAL_UNLOCKED;\n      instance->CR2 |= 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b84",
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "imported": false,
            "current_name": "listen_state_handler_08002b84"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "read_GPIO_Pin_State_08004c48",
                "port": "gpio_port",
                "pin": "gpio_pin",
                "GVar1": "pin_state"
            },
            "code": "uint32_t read_GPIO_Pin_State_08004c48(GPIO_TypeDef *gpio_port, uint32_t gpio_pin)\n{\n  GPIO_PinState pin_state;\n  pin_state = HAL_GPIO_ReadPin(gpio_port, (uint16_t)gpio_pin);\n  return (uint32_t)pin_state;\n}",
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "digitalRead"
            ],
            "imported": false,
            "current_name": "read_GPIO_Pin_State_08004c48"
        },
        "FUN_0800042c": {
            "renaming": {
                "FUN_0800042c": "reverse_bits_0800042c",
                "param_1": "input",
                "uVar1": "temp1",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "shift_amount_2",
                "uVar6": "sign_bit",
                "in_r12": "trailing_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "FUN_08000300": "count_leading_zeroes",
                "LAB_08000318": "end_of_function"
            },
            "code": "ulonglong reverse_bits_0800042c(uint input)\n{\n  uint abs_input = input & 0x7FFFFFFF;\n  if (abs_input == 0)\n  {\n    return 0;\n  }\n  uint leading_zeroes = count_leading_zeroes(abs_input);\n  uint shift_amount = 0x15 - leading_zeroes;\n  uint result = 0;\n  if (shift_amount < 0x20)\n  {\n    result = abs_input << (shift_amount & 0xFF);\n    abs_input = abs_input >> ((0xC - leading_zeroes + 1) & 0xFF);\n  }\n  else\n  {\n    uint trailing_zeroes = 0x20 - shift_amount;\n    result = abs_input << (leading_zeroes & 0xFF);\n    result |= 0U >> (trailing_zeroes & 0xFF);\n    result |= 0 << (leading_zeroes & 0xFF);\n  }\n  if (shift_amount < 0x433)\n  {\n    return CONCAT44((input & 0x80000000) | (result + (0x432 - shift_amount) * 0x100000), 0);\n  }\n  uint trailing_bits = ~(0x432 - shift_amount);\n  if (trailing_bits > 0x1E)\n  {\n    return CONCAT44(input, result >> (trailing_bits - 0x1F & 0xFF)) & 0x80000000FFFFFFFF;\n  }\n  int shift_amount_2 = trailing_bits - 0x13;\n  if (shift_amount_2 == 0 || (shift_amount_2 < 0) != (shift_amount - 0x1F < 0xC))\n  {\n    trailing_bits++;\n    return CONCAT44((input & 0x80000000) | (result >> (trailing_bits & 0xFF)), result << (0x20 - trailing_bits & 0xFF));\n  }\n  return CONCAT44(input, result >> (0x20 - (0xC - shift_amount_2) & 0xFF) | result << (0xC - shift_amount_2 & 0xFF)) & 0x80000000FFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800042c",
            "calling": [
                "SetSampleTime",
                "printFloat",
                "loop"
            ],
            "imported": false,
            "current_name": "reverse_bits_0800042c"
        },
        "FUN_08005f6c": {
            "renaming": {
                "FUN_08005f6c": "runProgram_08005f6c",
                "initVariant": "initializeVariant",
                "setup": "setupProgram",
                "loop": "runLoop",
                "DAT_08005f88": "dataVariable",
                "serialEventRun": "runSerialEvent"
            },
            "code": "int runProgram_08005f6c(void)\n{\n  initializeVariant();\n  setupProgram();\n  do {\n    do {\n      runLoop();\n    } while (DAT_08005f88 == 0);\n    runSerialEvent();\n  } while( true );\n}",
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005f6c",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "runProgram_08005f6c"
        },
        "FUN_08005690": {
            "renaming": {
                "FUN_08005690": "handle_UART_interrupt_08005690",
                "PTR_uart_handlers_080056a4": "uart_handlers"
            },
            "code": "void handle_UART_interrupt_08005690(void)\n{\n  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);\n  HAL_UART_IRQHandler(*PTR_uart_handlers_080056a4);\n  return;\n}",
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005690",
            "calling": [],
            "imported": false,
            "current_name": "handle_UART_interrupt_08005690"
        },
        "FUN_08005cc0": {
            "renaming": {
                "__thiscall Print::FUN_08005cc0": "size_t Print::printData",
                "this": "this",
                "sVar1": "dataSize",
                "PTR_DAT_08005cd0": "PTR_DAT_08005cd0",
                "_vptr_Print": "virtualTable",
                "FUN_08005cc0": "printData_08005cc0"
            },
            "code": "size_t Print::printData_08005cc0(Print *this)\n{\n  size_t dataSize;\n  dataSize = (*this->virtualTable[1])(this, PTR_DAT_08005cd0, 2);\n  return dataSize;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cc0",
            "calling": [
                "println",
                "println"
            ],
            "imported": false,
            "current_name": "printData_08005cc0"
        },
        "FUN_0800706c": {
            "renaming": {
                "FUN_0800706c": "read_file_0800706c",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "error_ptr",
                "iVar2": "read_result"
            },
            "code": "void read_file_0800706c(int *error_code, int file_descriptor, char *buffer, int buffer_size) {\n    undefined *error_ptr;\n    int read_result;\n    error_ptr = PTR_errno_0800708c;\n    *(undefined4 *)PTR_errno_0800708c = 0;\n    read_result = _read(file_descriptor, buffer, buffer_size);\n    if ((read_result == -1) && (*(int *)error_ptr != 0)) {\n        *error_code = *(int *)error_ptr;\n    }\n    return;\n}",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800706c",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_file_0800706c"
        },
        "FUN_08002624": {
            "renaming": {
                "FUN_08002624": "configure_GPIO_08002624",
                "GPIOx": "GPIO",
                "GPIO_Init": "config",
                "uVar2": "mask",
                "uVar3": "speed",
                "uVar4": "mode",
                "uVar5": "i",
                "uVar6": "speed",
                "uVar7": "offset",
                "iVar8": "index",
                "uVar9": "value",
                "iVar10": "shift",
                "tmpreg": "pin",
                "DAT_080027f8": "",
                "DAT_0800280c": "GPIOA",
                "DAT_080027fc": "",
                "DAT_08002800": ""
            },
            "code": "void configure_GPIO_08002624(GPIO_TypeDef *GPIO, GPIO_InitTypeDef *config) {\n    uint32_t pin = 0;\n    for (int i = 0; i < 16; i++) {\n        if (i > 15) {\n            return;\n        }\n        uint32_t mask = 1 << i;\n        if ((config->Pin & mask) == mask) {\n            uint32_t speed = 0;\n            uint32_t mode = config->Mode;\n            if (mode == GPIO_MODE_AF_PP) {\n                speed = config->Speed + GPIO_SPEED_FREQ_HIGH;\n            }\n            else if (mode < GPIO_MODE_ANALOG) {\n                if (mode == GPIO_MODE_OUTPUT_PP) {\n                    speed = config->Speed + GPIO_SPEED_FREQ_LOW;\n                }\n                else if (mode == GPIO_MODE_INPUT_PULLUP) {\n                    speed = GPIO_PULLUP;\n                    GPIO->BSRR = mask;\n                }\n                else if (mode == GPIO_MODE_INPUT_PULLDOWN) {\n                    speed = GPIO_PULLDOWN;\n                    GPIO->BRR = mask;\n                }\n            }\n            GPIO_TypeDef *port = GPIO;\n            if (i > 7) {\n                port = (GPIO_TypeDef *)&GPIO->CRH;\n                i -= 8;\n            }\n            uint32_t offset = i * 4;\n            port->CRL = (port->CRL & ~(0xF << offset)) | (speed << offset);\n            if ((config->Mode & GPIO_MODE_IT) != 0) {\n                uint32_t index = (i >> 2) + 2;\n                uint32_t shift = (i & 3) * 4;\n                uint32_t value = 0;\n                if (GPIO == DAT_0800280c) {\n                    value = 0;\n                }\n                else if (GPIO == GPIOB) {\n                    value = 1;\n                }\n                else if (GPIO == GPIOC) {\n                    value = 2;\n                }\n                else if (GPIO == GPIOD) {\n                    value = 3;\n                }\n                else {\n                    value = 4;\n                }\n                ((uint32_t *)0x40010C00)[index] = (((uint32_t *)0x40010C00)[index] & ~(0xF << shift)) | (value << shift);\n                if ((config->Mode & GPIO_MODE_EVT) == 0) {\n                    uint32_t bit = ~mask;\n                    ((uint32_t *)0x40010800)[0] &= bit;\n                    ((uint32_t *)0x40010800)[1] &= bit;\n                    ((uint32_t *)0x40010800)[2] &= bit;\n                    ((uint32_t *)0x40010800)[3] &= mask;\n                }\n                else {\n                    ((uint32_t *)0x40010800)[0] |= mask;\n                    ((uint32_t *)0x40010800)[1] |= mask;\n                    ((uint32_t *)0x40010800)[2] |= mask;\n                    ((uint32_t *)0x40010800)[3] |= mask;\n                }\n            }\n        }\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002624",
            "calling": [
                "digital_io_init",
                "HAL_ADC_MspInit",
                "uart_init"
            ],
            "imported": false,
            "current_name": "configure_GPIO_08002624"
        },
        "FUN_0800609c": {
            "renaming": {
                "FUN_0800609c": "handle_gpio_interrupt_0800609c",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "0x10": "GPIO_PIN_4"
            },
            "code": "void handle_gpio_interrupt_0800609c(void)\n{\n  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);\n  return;\n}",
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800609c",
            "calling": [],
            "imported": false,
            "current_name": "handle_gpio_interrupt_0800609c"
        },
        "FUN_080040b0": {
            "renaming": {
                "FUN_080040b0": "disableTimerChannel_080040b0",
                "*htim": "*timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "DAT_0800410c": "timerInstancePtr"
            },
            "code": "HAL_StatusTypeDef_conflict disableTimerChannel_080040b0(TIM_HandleTypeDef *htim, uint32_t channel)\n{\n  TIM_TypeDef *timerInstance;\n  TIM_CCxChannelCmd(htim->Instance, channel, 0);\n  timerInstance = htim->Instance;\n  if (((timerInstance == DAT_0800410c) && ((timerInstance->CCER & 0x1111) == 0)) && ((timerInstance->CCER & 0x444) == 0))\n  {\n    timerInstance->BDTR &= 0xffff7fff;\n  }\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0))\n  {\n    timerInstance->CR1 &= 0xfffffffe;\n  }\n  htim->State = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b0",
            "calling": [
                "pwm_stop"
            ],
            "imported": false,
            "current_name": "disableTimerChannel_080040b0"
        },
        "FUN_08005d42": {
            "renaming": {
                "__thiscall Print::FUN_08005d42": "print_number",
                "this": "printer",
                "n": "number",
                "base": "base",
                "sVar1": "chars_printed",
                "sVar2": "chars_printed",
                "FUN_08005d42Number": "print_number",
                "uint8_t": "unsigned char",
                "FUN_08005d42": "print_number_08005d42"
            },
            "code": "size_t print_number_08005d42(Print *printer, long number, int base) {\n    size_t chars_printed;\n\n    if (base == 0) {\n        chars_printed = (**printer->_vptr_Print)(printer, number & 0xff);\n        return chars_printed;\n    }\n\n    if (base != 10) {\n        chars_printed = print_number_08005d42(printer, number, (uint8_t)base);\n        return chars_printed;\n    }\n\n    if (number >= 0) {\n        chars_printed = print_number_08005d42(printer, number, '\\n');\n        return chars_printed;\n    }\n\n    chars_printed = print_character(printer, '-');\n    chars_printed += print_number_08005d42(printer, -number, '\\n');\n    return chars_printed;\n}\n",
            "called": [
                "printNumber",
                "print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d42",
            "calling": [
                "print"
            ],
            "imported": false,
            "current_name": "print_number_08005d42"
        },
        "FUN_08004b34": {
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "htim": "timer_handle"
            },
            "code": "void disable_timer_clock_08004b34(TIM_HandleTypeDef *timer_handle)\n{\n  timer_disable_clock(timer_handle);\n  return;\n}",
            "called": [
                "timer_disable_clock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b34",
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "imported": false,
            "current_name": "disable_timer_clock_08004b34"
        },
        "FUN_08004c52": {
            "renaming": {
                "FUN_08004c52": "initialize_HAL_and_SystemClock_08004c52"
            },
            "code": "void initialize_HAL_and_SystemClock_08004c52(void)\n{\n    HAL_Init();\n    SystemClock_Config();\n    return;\n}",
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c52",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_HAL_and_SystemClock_08004c52"
        },
        "FUN_080013a4": {
            "renaming": {
                "FUN_080013a4": "initializeLCD_080013a4",
                "this": "lcd",
                "cols": "numColumns",
                "lines": "numLines",
                "dotsize": "dotSize",
                "_displayfunction": "_displayFunction",
                "_numlines": "_numLines",
                "setRowOffsets": "setRowOffsets",
                "_rs_pin": "_rsPin",
                "_rw_pin": "_rwPin",
                "_enable_pin": "_enablePin",
                "_data_pins": "_dataPins",
                "write4bits": "write4bits",
                "send": "send",
                "_displaycontrol": "_displayControl",
                "display": "display",
                "clear": "clear",
                "_displaymode": "_displayMode"
            },
            "code": "void __thiscall initializeLCD_080013a4(LiquidCrystal *lcd, uint8_t numColumns, uint8_t numLines, uint8_t dotSize)\n{\n  int i;\n  if (numLines > 1) {\n    lcd->_displayFunction |= 0x08;\n  }\n  lcd->_numLines = numLines;\n  setRowOffsets(lcd, 0, 0x40, (uint)numColumns, numColumns + 0x40);\n  if ((dotSize != 0) && (numLines == 1)) {\n    lcd->_displayFunction |= 0x04;\n  }\n  pinMode((uint)lcd->_rsPin, OUTPUT);\n  if (lcd->_rwPin != 0xff) {\n    pinMode((uint)lcd->_rwPin, OUTPUT);\n  }\n  pinMode((uint)lcd->_enablePin, OUTPUT);\n  i = 0;\n  while (i < 4) {\n    if ((lcd->_displayFunction & 0x10) == 0) {\n      pinMode((uint)lcd->_dataPins[i], OUTPUT);\n    }\n    else {\n      pinMode((uint)lcd->_dataPins[i + 4], OUTPUT);\n    }\n    i++;\n  }\n  digitalWrite((uint)lcd->_rsPin, LOW);\n  digitalWrite((uint)lcd->_enablePin, LOW);\n  if (lcd->_rwPin != 0xff) {\n    digitalWrite((uint)lcd->_rwPin, LOW);\n  }\n  if ((lcd->_displayFunction & 0x10) == 0) {\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x03);\n    write4bits(lcd, 0x02);\n  }\n  else {\n    send(lcd, lcd->_displayFunction | 0x20, 0);\n    send(lcd, lcd->_displayFunction | 0x20, 0);\n    send(lcd, lcd->_displayFunction | 0x20, 0);\n  }\n  send(lcd, lcd->_displayFunction | 0x20, 0);\n  lcd->_displayControl = 0x04;\n  display(lcd);\n  clear(lcd);\n  lcd->_displayMode = 0x02;\n  send(lcd, 0x06, 0);\n}\n",
            "called": [
                "clear",
                "write4bits",
                "send",
                "setRowOffsets",
                "display",
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080013a4",
            "calling": [
                "setup",
                "init"
            ],
            "imported": false,
            "current_name": "initializeLCD_080013a4"
        },
        "FUN_08006d14": {
            "renaming": {
                "FUN_08006d14": "find_first_empty_slot_08006d14",
                "param_1": "file_stream",
                "piVar1": "current_slot",
                "piVar2": "current_block",
                "iVar3": "impure_ptr",
                "ppiVar4": "block_list"
            },
            "code": "int * find_first_empty_slot_08006d14(undefined4 *file_stream) {\n  int *current_slot;\n  int *current_block;\n  int impure_ptr = *(int *)PTR__global_impure_ptr_08006d88;\n  if (*(int *)(impure_ptr + 0x18) == 0) {\n    __sinit(impure_ptr);\n  }\n  int **block_list = (int **)(impure_ptr + 0x48);\n  do {\n    current_block = block_list[2];\n    current_slot = block_list[1];\n    while (current_slot = (int *)((int)current_slot + -1), -1 < (int)current_slot) {\n      if (*(short *)(current_block + 3) == 0) {\n        *(undefined2 *)((int)current_block + 0xe) = 0xffff;\n        current_block[0x19] = 0;\n        *(undefined2 *)(current_block + 3) = 1;\n        *current_block = 0;\n        current_block[2] = 0;\n        current_block[1] = 0;\n        current_block[4] = 0;\n        current_block[5] = 0;\n        current_block[6] = 0;\n        memset(current_block + 0x17,0,8);\n        current_block[0xd] = 0;\n        current_block[0xe] = 0;\n        current_block[0x12] = 0;\n        current_block[0x13] = 0;\n        return current_block;\n      }\n      current_block = current_block + 0x1a;\n    }\n    if (*block_list == (int *)0x0) {\n      current_slot = (int *)__sfmoreglue(file_stream,4);\n      *block_list = current_slot;\n      if (current_slot == (int *)0x0) {\n        *file_stream = 0xc;\n        return (int *)0x0;\n      }\n    }\n    block_list = (int **)*block_list;\n  } while( true );\n}",
            "called": [
                "memset",
                "__sinit",
                "__sfmoreglue"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d14",
            "calling": [
                "__sinit"
            ],
            "imported": false,
            "current_name": "find_first_empty_slot_08006d14"
        },
        "FUN_080004f8": {
            "renaming": {
                "FUN_080004f8": "FUNC_080004f8"
            },
            "code": "\nulonglong FUNC_080004f8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong uVar1;\n  longlong lVar2;\n  uint uVar3;\n  uint uVar4;\n  int iVar5;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool bVar9;\n  bool bVar10;\n  bool bVar11;\n  ulonglong uVar12;\n  \n  uVar12 = CONCAT44(param_2,param_1);\n  uVar7 = 0x7ff;\n  uVar4 = param_2 >> 0x14 & 0x7ff;\n  bVar9 = uVar4 == 0;\n  if (!bVar9) {\n    unaff_r5 = param_4 >> 0x14 & 0x7ff;\n    bVar9 = unaff_r5 == 0;\n  }\n  if (!bVar9) {\n    bVar9 = uVar4 == 0x7ff;\n  }\n  if (!bVar9) {\n    bVar9 = unaff_r5 == 0x7ff;\n  }\n  if (bVar9) {\n    uVar12 = calculate_result_080006d4();\n  }\n  uVar3 = (uint)(uVar12 >> 0x20);\n  iVar5 = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ param_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  param_4 = param_4 & ~(uVar7 << 0x15);\n  bVar9 = ((uint)uVar12 | uVar3 << 0xc) == 0;\n  if (!bVar9) {\n    bVar9 = (param_3 | param_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (bVar9) {\n    param_3 = (uint)uVar12 | param_3;\n    param_4 = (uVar4 & 0x80000000 | uVar3) ^ param_4;\n    uVar4 = uVar7 >> 1;\n    bVar11 = SBORROW4(iVar5,uVar4);\n    uVar6 = iVar5 - uVar4;\n    bVar9 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!bVar9 && (int)uVar4 <= iVar5) {\n      bVar11 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      bVar9 = uVar7 == uVar6;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      param_4 = param_4 | uVar6 * 0x100000;\n    }\n    if (!bVar9 && (int)uVar3 < 0 == bVar11) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    uVar7 = 0;\n    bVar11 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    bVar9 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    uVar1 = (uVar12 & 0xffffffff) * (ulonglong)param_3;\n    uVar12 = (uVar12 & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)uVar3 * (ulonglong)param_3 + (uVar1 >> 0x20);\n    uVar8 = (uint)uVar12;\n    lVar2 = (ulonglong)uVar3 * (ulonglong)param_4 + (uVar12 >> 0x20);\n    uVar7 = (uint)lVar2;\n    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);\n    if ((int)uVar1 != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (iVar5 + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      bVar9 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      lVar2 = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)bVar9)),\n                       uVar7 * 2 + (uint)bVar9);\n    }\n    param_4 = uVar4 & 0x80000000 | (int)((ulonglong)lVar2 >> 0x20) << 0xb | (uint)lVar2 >> 0x15;\n    param_3 = (uint)lVar2 << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    bVar10 = 0xfc < uVar6;\n    bVar11 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    bVar9 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (bVar10 && !bVar9) {\n      bVar10 = 0x6ff < uVar3;\n      bVar11 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      bVar9 = uVar3 == 0x700;\n    }\n    if (!bVar10 || bVar9) {\n      bVar9 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        bVar9 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + uVar6 * 0x100000 + (uint)CARRY4(param_3,(uint)bVar9),param_3 + bVar9\n                     );\n    }\n  }\n  if (!bVar9 && (int)uVar4 < 0 == bVar11) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bVar10 = SCARRY4(uVar6,0x36);\n  bVar9 = (int)(uVar6 + 0x36) < 0;\n  bVar11 = uVar6 == 0xffffffca;\n  if (bVar11 || bVar9 != bVar10) {\n    param_3 = 0;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (bVar11 || bVar9 != bVar10) {\n    return CONCAT44(param_4,param_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = param_3 >> (uVar3 & 0xff) | param_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (param_4 >> (uVar3 & 0xff) & ~((param_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | param_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(param_4,uVar4) & 0x80000000ffffffff;\n  }\n  iVar5 = uVar4 - 0x14;\n  if (iVar5 == 0 || iVar5 < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = param_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = param_3 >> (uVar4 & 0xff) | param_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - iVar5;\n  uVar6 = param_3 << (uVar4 & 0xff);\n  uVar4 = param_3 >> (0x20 - uVar4 & 0xff) | param_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "called": [
                "FUN_080006d4"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080004f8",
            "calling": [
                "SetSampleTime",
                "Compute",
                "printFloat",
                "readThermocouple",
                "SetTunings"
            ],
            "imported": false,
            "current_name": "FUNC_080004f8"
        }
    },
    "used_tokens": 255205,
    "layers": [
        [
            "FUN_08002470",
            "FUN_08007004",
            "FUN_080035fc",
            "FUN_08005740",
            "FUN_08006158",
            "FUN_08006d8c",
            "FUN_08004f2c",
            "FUN_08004ec4",
            "FUN_08000178",
            "FUN_08006c88",
            "FUN_080060e4",
            "FUN_0800258c",
            "FUN_08004e20",
            "FUN_0800573c",
            "FUN_080032b4",
            "FUN_08004d06",
            "FUN_080056d8",
            "FUN_080019f6",
            "FUN_08002f9c",
            "FUN_08005510",
            "FUN_08005750",
            "FUN_08002cf2",
            "FUN_08006288",
            "FUN_08002004",
            "FUN_08004f3c",
            "FUN_08005754",
            "FUN_08005fc8",
            "FUN_08002ab8",
            "FUN_0800598a",
            "FUN_08004e34",
            "FUN_08001a44",
            "FUN_08002c54",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004d18",
            "FUN_080006d4",
            "FUN_08007028",
            "FUN_08002494",
            "FUN_080055bc",
            "FUN_08001960",
            "FUN_08004ca2",
            "FUN_08002810",
            "FUN_0800224c",
            "FUN_080054b0",
            "FUN_080016b4",
            "FUN_08004e48",
            "FUN_08005890",
            "FUN_08004cb2",
            "FUN_08004ef4",
            "FUN_08001294",
            "FUN_08002384",
            "FUN_08005650",
            "FUN_08006fb6",
            "FUN_08002ad8",
            "FUN_08004204",
            "FUN_08005da8",
            "FUN_080045fe",
            "FUN_080055e0",
            "FUN_08006f10",
            "FUN_0800213c",
            "FUN_0800455a",
            "FUN_08004d30",
            "FUN_08001a66",
            "FUN_08003c44",
            "FUN_08006074",
            "FUN_080028d2",
            "FUN_08000a18",
            "FUN_08005384",
            "FUN_08005b3c",
            "FUN_0800091c",
            "FUN_080046b8",
            "FUN_08004c8a",
            "FUN_08001cd0",
            "FUN_08000130",
            "FUN_08004a4c",
            "FUN_08006112",
            "FUN_08004974",
            "FUN_08003520",
            "FUN_08002ca6",
            "FUN_08004618",
            "FUN_080060a6",
            "FUN_08001c30",
            "FUN_08005c72",
            "FUN_0800048c",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080057b4",
            "FUN_0800092c",
            "FUN_08002560",
            "FUN_08006e90",
            "FUN_08006920",
            "FUN_080008ba",
            "FUN_08002d1c",
            "FUN_08005714",
            "FUN_08003da4",
            "FUN_08005a44",
            "FUN_080009dc",
            "FUN_0800417c",
            "FUN_08004b94",
            "FUN_080058e0",
            "FUN_08001918",
            "FUN_0800611c",
            "FUN_0800049c",
            "FUN_080047f4",
            "FUN_08002c10",
            "FUN_080009f0",
            "FUN_0800134e",
            "FUN_08006be0",
            "FUN_080012e8",
            "FUN_08006370",
            "FUN_080024f8",
            "FUN_0800594e",
            "FUN_080056a8",
            "FUN_08006ac0",
            "FUN_08007220",
            "FUN_08004198",
            "FUN_08001c3c",
            "FUN_08000a2c",
            "FUN_08001366",
            "FUN_08005848",
            "FUN_08000ae8",
            "FUN_08003ed8",
            "FUN_080061e0",
            "FUN_08004f0c",
            "FUN_08005604",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800135a",
            "FUN_08005c96",
            "FUN_0800571a",
            "FUN_08002efc",
            "FUN_0800365c",
            "FUN_08006ad0",
            "FUN_080033b8",
            "FUN_080069e4",
            "FUN_080060bc",
            "FUN_08004b9e",
            "FUN_08006940",
            "FUN_080058ea",
            "FUN_08002582",
            "FUN_08005976",
            "FUN_08004884",
            "FUN_08005fa0",
            "FUN_08001be8",
            "FUN_080061f0",
            "FUN_08002348",
            "FUN_08004f1c",
            "FUN_08005a68",
            "FUN_08001814",
            "FUN_080056c0",
            "FUN_08000aec",
            "FUN_0800572c",
            "FUN_08004e12",
            "FUN_08000a58",
            "FUN_08001b48",
            "FUN_08004092",
            "FUN_08000450",
            "FUN_08005bb0",
            "FUN_080014ba",
            "FUN_08003c90",
            "FUN_08002514",
            "FUN_08005c1c",
            "FUN_08006dc8",
            "FUN_0800412c",
            "FUN_0800492c",
            "FUN_08000cbc",
            "FUN_0800480a",
            "FUN_080015f8",
            "FUN_08005c38",
            "FUN_08005f8c",
            "FUN_08006f5a",
            "FUN_08000b08",
            "FUN_08006cb4",
            "FUN_08004c5e",
            "FUN_08007098",
            "FUN_08004b3c",
            "FUN_08001550",
            "FUN_08001310",
            "FUN_080009a8",
            "FUN_08004d90",
            "FUN_08005ce8",
            "FUN_0800316c",
            "FUN_08004828",
            "FUN_08004948",
            "FUN_08005b24",
            "FUN_080049f0",
            "FUN_08001e40",
            "FUN_08003a68",
            "FUN_080012a2",
            "FUN_08004c78",
            "FUN_08005bd4",
            "FUN_08001e48",
            "FUN_080059c8",
            "FUN_080009b8",
            "FUN_08000aa8",
            "FUN_08000a04",
            "FUN_0800010c",
            "FUN_08001cac",
            "FUN_08005a18",
            "FUN_08003f18",
            "FUN_0800591e",
            "FUN_08006104",
            "FUN_08002540",
            "FUN_08005be2",
            "FUN_08006344",
            "FUN_080009c8",
            "FUN_08002db2",
            "FUN_08005932",
            "FUN_08001cc4",
            "FUN_08003ea0",
            "FUN_0800306c",
            "FUN_08005c64",
            "FUN_0800548c",
            "FUN_08000924",
            "FUN_08006c34",
            "FUN_080072a4",
            "FUN_08004848",
            "FUN_08006f92",
            "FUN_080012c0",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08000bcc",
            "FUN_080047d8",
            "FUN_0800281e",
            "FUN_08006198",
            "FUN_08006fc0",
            "FUN_08007048",
            "FUN_08003c50",
            "FUN_080065c0",
            "FUN_080054d4",
            "FUN_0800715c",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_0800282c",
            "FUN_080015b2",
            "FUN_0800040c",
            "FUN_08006088",
            "FUN_08006eb0",
            "FUN_08004e5c",
            "FUN_08004df4",
            "FUN_08004bb0",
            "FUN_08004df8",
            "FUN_08002af8",
            "FUN_080028de",
            "FUN_08002848",
            "FUN_08004e70",
            "FUN_080020f0",
            "FUN_08006e10",
            "FUN_0800607e",
            "FUN_08004e74",
            "FUN_08004c30",
            "FUN_08006092",
            "FUN_08006f38",
            "FUN_08004cce",
            "FUN_08006f34",
            "FUN_08006fe4",
            "FUN_08003ad4",
            "FUN_08004110",
            "FUN_08004ce2",
            "FUN_08005568",
            "FUN_08004478",
            "FUN_08005f5e",
            "FUN_08005cb6",
            "FUN_08003c70",
            "FUN_080053d4",
            "FUN_08002b84",
            "FUN_08004c48",
            "FUN_0800042c",
            "FUN_08005f6c",
            "FUN_08005690",
            "FUN_08005cc0",
            "FUN_0800706c",
            "FUN_08002624",
            "FUN_0800609c",
            "FUN_080040b0",
            "FUN_08004b34",
            "FUN_08004c52",
            "FUN_080013a4",
            "FUN_08006d14"
        ],
        [
            "FUN_080068f0",
            "FUN_0800138e",
            "FUN_08001c88",
            "FUN_08006174",
            "FUN_08006f00",
            "FUN_080018f8",
            "FUN_08005da0",
            "FUN_08005f2c",
            "FUN_08005f40",
            "FUN_08005b54",
            "FUN_08006c40",
            "FUN_0800157c",
            "FUN_08001c32",
            "FUN_08001b18",
            "FUN_08005d8a",
            "FUN_08001ab0",
            "FUN_08005730",
            "FUN_080060d4",
            "FUN_08005cd4",
            "FUN_08007090",
            "FUN_08005d82",
            "FUN_08001510",
            "FUN_08005d42"
        ]
    ],
    "locked_functions": []
}