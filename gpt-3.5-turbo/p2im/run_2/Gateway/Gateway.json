{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputParam)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = input_string;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_system_interrupt_08000188",
            "code": "\nvoid executeSystemInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_system_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_system_interrupt_0800018c",
            "code": "\nundefined4 execute_system_interrupt_0800018c(undefined4 input_param,undefined4 unused_param,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = execute_system_interrupt_0800018c_08000188(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_system_interrupt_0800018c",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_data_08000214",
            "code": "\nvoid processData_08000214(uint index,undefined4 value,undefined4 param3,undefined4 param4)\n\n{\n  bool isCharacterValid;\n  int result;\n  \n  if (0x3b < (int)index) {\n    return;\n  }\n  result = getByteAtOffset(&DAT_200003d4,index,param3,param4,param4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = findCharacterIndex();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = findCharacterIndex((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = findValuePosition((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      updateParameter(index,value);\n    }\n    writeToMemory(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        isCharacterValid = false;\n      }\n      else {\n        result = findCharacterIndex();\n        if (result == 0) {\n          isCharacterValid = false;\n        }\n        else {\n          result = findCharacterIndex((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            isCharacterValid = false;\n          }\n          else {\n            isCharacterValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isCharacterValid = false;\n    }\n    if (isCharacterValid) {\n      updateIntArrayAtIndex(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    writeToMemory(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_data_08000214",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "isCharacterValid",
                "iVar2": "result",
                "get_byte_at_offset_08002fa0": "getByteAtOffset",
                "find_character_index_080036ac": "findCharacterIndex",
                "find_value_position_0800738a": "findValuePosition",
                "update_parameter_080088e0": "updateParameter",
                "write_to_memory_08002fc2": "writeToMemory",
                "update_int_array_at_index_080026b0": "updateIntArrayAtIndex"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "update_and_write_memory_0800021a",
            "code": "\nvoid update_and_write_memory_0800021a(uint offset,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool is_valid;\n  int result;\n  \n  result = get_byte_at_offset(&DAT_200003d4,offset,param_3,param_4,param_4);\n  if (result == 3) {\n    if (offset < 0x3c) {\n      if ((&DAT_0800a908)[offset] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_index((int)(char)(&DAT_0800a908)[offset]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = find_value_position((int)(char)(&DAT_0800a908)[offset],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      update_parameter(offset,value);\n    }\n    write_to_memory(&DAT_200003d4,offset,value);\n  }\n  else if (result == 4) {\n    if (offset < 0x3c) {\n      if ((&DAT_0800a908)[offset] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = find_character_index();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = find_character_index((int)(char)(&DAT_0800a908)[offset]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_int_array_at_index_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[offset] * 3,value);\n    }\n    write_to_memory(&DAT_200003d4,offset,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "update_and_write_memory_0800021a",
                "param_1": "offset",
                "param_2": "value",
                "bVar1": "is_valid",
                "iVar2": "result",
                "get_byte_at_offset_08002fa0": "get_byte_at_offset",
                "find_character_index_080036ac": "find_character_index",
                "find_value_position_0800738a": "find_value_position",
                "update_parameter_080088e0": "update_parameter",
                "write_to_memory_08002fc2": "write_to_memory"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint inputIndex,int flag)\n\n{\n  undefined4 configuration;\n  \n  if ((int)inputIndex < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (inputIndex & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (inputIndex & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      configuration = decodeConfiguration();\n      processData(&DAT_200003d4,inputIndex,configuration);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "inputIndex",
                "param_2": "flag",
                "uVar1": "configuration",
                "decode_configuration_08008880": "decodeConfiguration",
                "process_data_08002ef2": "processData"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_080004d4",
            "code": "\nvoid initialize_data_080004d4(int value,int flag)\n\n{\n  int iteration;\n  undefined *dataPointer;\n  \n  if (value != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    dataPointer = &DAT_2000022c;\n    for (iteration = 0xb; -1 < iteration; iteration = iteration + -1) {\n      update_data_08002580(dataPointer);\n      dataPointer = dataPointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_080004d4",
                "param_1": "value",
                "param_2": "flag",
                "iVar1": "iteration",
                "puVar2": "dataPointer"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "process_servo_data_08000500",
            "code": "\nvoid processServoData_08000500(int servoIndex,int memOpType,int opValue,undefined4 unused)\n\n{\n  if (0xb < DAT_200001ed) {\n    handleErrorMessage(&DAT_200003d4,\"Max servos attached\",opValue,unused,unused);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < memOpType) && (0 < opValue)) {\n    executeMemoryOp(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex,memOpType,opValue);\n    return;\n  }\n  executeMemoryOpWithoutValue(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "process_servo_data_08000500",
                "param_1": "servoIndex",
                "param_2": "memOpType",
                "param_3": "opValue",
                "param_4": "unused",
                "decode_and_process_data_08002f14": "handleErrorMessage",
                "execute_memory_operation_080025ac": "executeMemoryOp",
                "execute_memory_operation_08002634": "executeMemoryOpWithoutValue"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "initialize_and_update_memory_08000588",
            "code": "\nvoid initializeAndUpdateMemory_08000588(int index)\n\n{\n  initialize_memory_if_condition_false_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "initialize_and_update_memory_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "improve_and_update_data_080005f8",
            "code": "\nvoid improve_and_update_data_080005f8(uint offset,int mode)\n\n{\n  int byte_value;\n  char character;\n  bool is_valid;\n  uint shifted_offset;\n  \n  byte_value = get_byte_at_offset_08002fa0(&DAT_200003d4,offset);\n  if (byte_value != 0x7f) {\n    byte_value = get_byte_at_offset_08002fa0(&DAT_200003d4,offset);\n    if (byte_value == 6) {\n      if (DAT_20000170 == '\\0') {\n        character = '\\0';\n      }\n      else {\n        character = DAT_20000170;\n        if (mode == 6) {\n          character = '\\0';\n        }\n      }\n    }\n    else {\n      character = '\\0';\n    }\n    if (character != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (offset < 0x3c) {\n      if ((&DAT_0800a908)[offset] == -1) {\n        is_valid = false;\n      }\n      else {\n        byte_value = find_character_index_080036ac();\n        if (byte_value == 0) {\n          is_valid = false;\n        }\n        else {\n          byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n          if (byte_value == 1) {\n            is_valid = false;\n          }\n          else if (mode == 4) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      if ((byte)(&DAT_200001f0)[offset] < 0xc) {\n        byte_value = bitwise_shift_and_extract_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[offset] * 3);\n      }\n      else {\n        byte_value = 0;\n      }\n      if (byte_value != 0) {\n        initialize_and_update_memory_08000588(offset);\n      }\n    }\n    shifted_offset = offset - 0x2e & 0xff;\n    if (shifted_offset < 0xe) {\n      if (offset < 0x3c) {\n        byte_value = (int)(char)(&DAT_0800a908)[offset];\n      }\n      else {\n        byte_value = -1;\n      }\n      byte_value = find_character_index_080036ac(byte_value);\n      if (byte_value == 0) {\n        is_valid = false;\n      }\n      else {\n        if (offset < 0x3c) {\n          byte_value = (int)(char)(&DAT_0800a908)[offset];\n        }\n        else {\n          byte_value = -1;\n        }\n        byte_value = find_character_index_080036ac(byte_value);\n        if (byte_value == 1) {\n          is_valid = false;\n        }\n        else {\n          is_valid = true;\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_data_08000488(shifted_offset,mode == 2);\n    }\n    if (offset < 0x3c) {\n      if ((&DAT_0800a908)[offset] == -1) {\n        is_valid = false;\n      }\n      else {\n        byte_value = find_character_index_080036ac();\n        if (byte_value == 0) {\n          is_valid = false;\n        }\n        else {\n          byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n          if (byte_value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[offset >> 3] = (&DAT_20000174)[offset >> 3] | (byte)(1 << (offset & 7));\n      }\n      else {\n        (&DAT_20000174)[offset >> 3] = (&DAT_20000174)[offset >> 3] & ~(byte)(1 << (offset & 7));\n      }\n    }\n    write_to_memory_08002fc2(&DAT_200003d4,offset,0);\n    switch(mode) {\n    case 0:\n      if (offset < 0x3c) {\n        if ((&DAT_0800a908)[offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          byte_value = find_character_index_080036ac();\n          if (byte_value == 0) {\n            is_valid = false;\n          }\n          else {\n            byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n            if (byte_value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        perform_memory_operation_08008990(offset,0);\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,0);\n        return;\n      }\n      break;\n    case 1:\n      if (offset < 0x3c) {\n        if ((&DAT_0800a908)[offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          byte_value = find_character_index_080036ac();\n          if (byte_value == 0) {\n            is_valid = false;\n          }\n          else {\n            byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n            if (byte_value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        byte_value = get_byte_at_offset_08002fa0(&DAT_200003d4,offset);\n        if (byte_value == 3) {\n          update_parameter_value_08008a24(offset,0);\n        }\n        perform_memory_operation_08008990(offset,1);\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,1);\n        return;\n      }\n      break;\n    case 2:\n      if (shifted_offset < 0xe) {\n        if (offset < 0x3c) {\n          byte_value = (int)(char)(&DAT_0800a908)[offset];\n        }\n        else {\n          byte_value = -1;\n        }\n        byte_value = find_character_index_080036ac(byte_value);\n        if (byte_value == 0) {\n          is_valid = false;\n        }\n        else {\n          if (offset < 0x3c) {\n            byte_value = (int)(char)(&DAT_0800a908)[offset];\n          }\n          else {\n            byte_value = -1;\n          }\n          byte_value = find_character_index_080036ac(byte_value);\n          if (byte_value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        if (offset < 0x3c) {\n          if ((&DAT_0800a908)[offset] == -1) {\n            is_valid = false;\n          }\n          else {\n            byte_value = find_character_index_080036ac();\n            if (byte_value == 0) {\n              is_valid = false;\n            }\n            else {\n              byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n              if (byte_value == 1) {\n                is_valid = false;\n              }\n            }\n          }\n        }\n        else {\n          is_valid = false;\n        }\n        if (is_valid) {\n          perform_memory_operation_08008990(offset,0);\n        }\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,2);\n        return;\n      }\n      break;\n    case 3:\n      if (offset < 0x3c) {\n        if ((&DAT_0800a908)[offset] == -1) {\n          byte_value = 0;\n        }\n        else {\n          byte_value = find_character_index_080036ac();\n          if (byte_value == 0) {\n            byte_value = 0;\n          }\n          else {\n            byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n            if (byte_value == 1) {\n              byte_value = 0;\n            }\n            else {\n              byte_value = find_value_position_0800738a((int)(char)(&DAT_0800a908)[offset],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        byte_value = 0;\n      }\n      if (byte_value != 0) {\n        perform_memory_operation_08008990(offset,1);\n        update_parameter_080088e0(offset,0);\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,3);\n        return;\n      }\n      break;\n    case 4:\n      if (offset < 0x3c) {\n        if ((&DAT_0800a908)[offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          byte_value = find_character_index_080036ac();\n          if (byte_value == 0) {\n            is_valid = false;\n          }\n          else {\n            byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n            if (byte_value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,4);\n        if (((byte)(&DAT_200001f0)[offset] != 0xff) &&\n           (byte_value = bitwise_shift_and_extract_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[offset] * 3),\n           byte_value != 0)) {\n          is_valid = false;\n        }\n        if (is_valid) {\n          process_servo_data_08000500(offset,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      decode_and_process_data_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (offset < 0x3c) {\n        if ((&DAT_0800a908)[offset] == -1) {\n          byte_value = 0;\n        }\n        else {\n          byte_value = find_character_index_080036ac();\n          if (byte_value == 0) {\n            byte_value = 0;\n          }\n          else {\n            byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n            if (byte_value == 1) {\n              byte_value = 0;\n            }\n            else {\n              byte_value = find_value_position_0800738a((int)(char)(&DAT_0800a908)[offset],&DAT_0800a69c);\n              if (byte_value == 0) {\n                byte_value = find_value_position_0800738a((int)(char)(&DAT_0800a908)[offset],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        byte_value = 0;\n      }\n      if (byte_value != 0) {\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (offset < 0x3c) {\n        if ((&DAT_0800a908)[offset] == -1) {\n          is_valid = false;\n        }\n        else {\n          byte_value = find_character_index_080036ac();\n          if (byte_value == 0) {\n            is_valid = false;\n          }\n          else {\n            byte_value = find_character_index_080036ac((int)(char)(&DAT_0800a908)[offset]);\n            if (byte_value == 1) {\n              is_valid = false;\n            }\n            else {\n              is_valid = true;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if (is_valid) {\n        perform_memory_operation_08008990(offset,2);\n        update_value_if_not_seven_f_08002fa8(&DAT_200003d4,offset,0xb);\n        write_to_memory_08002fc2(&DAT_200003d4,offset,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "improve_and_update_data_080005f8",
                "param_1": "offset",
                "param_2": "mode",
                "iVar1": "byte_value",
                "cVar2": "character",
                "bVar3": "is_valid",
                "uVar4": "shifted_offset"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_and_update_data_08000a64",
            "code": "\nvoid initialize_and_update_data_08000a64(void)\n\n{\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x3c; counter = counter + 1 & 0xff) {\n    if (counter < 0x3c) {\n      if ((&DAT_0800a908)[counter] == -1) {\n        index = 0;\n      }\n      else {\n        index = find_character_index_080036ac();\n        if (index == 0) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[counter]);\n          if (index == 1) {\n            index = 0;\n          }\n          else {\n            index = find_value_position_0800738a((int)(char)(&DAT_0800a908)[counter],&DAT_0800a69c);\n            if (index == 0) {\n              index = find_value_position_0800738a((int)(char)(&DAT_0800a908)[counter],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      index = 0;\n    }\n    if (index != 0) {\n      improve_and_update_data_080005f8(counter,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2c_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_and_update_data_08000a64",
                "iVar1": "index",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_data_08000aec",
            "code": "\nvoid initialize_data_08000aec(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint uVar3;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initializeData();\n  }\n  for (uVar3 = 0; uVar3 < 5; uVar3 = uVar3 + 1 & 0xff) {\n    (&DAT_200001e8)[uVar3] = 0;\n    (&DAT_20000174)[uVar3] = 0;\n    (&DAT_20000180)[uVar3] = 0;\n  }\n  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1 & 0xff) {\n    if ((uVar3 - 0x2e & 0xff) < 0xe) {\n      if (uVar3 < 0x3c) {\n        iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = findCharacterIndex(iVar2);\n      if (iVar2 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar3 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = findCharacterIndex(iVar2);\n        if (iVar2 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      improveAndUpdateData(uVar3,2);\n    }\n    else {\n      if ((((uVar3 < 0x3c) && ((&DAT_0800a908)[uVar3] != -1)) &&\n          (iVar2 = findCharacterIndex(), iVar2 != 0)) &&\n         (iVar2 = findCharacterIndex((int)(char)(&DAT_0800a908)[uVar3]), iVar2 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        improveAndUpdateData(uVar3,1);\n      }\n    }\n    (&DAT_200001f0)[uVar3] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_data_08000aec",
                "initialize_data_080005e0": "initializeData",
                "find_character_index_080036ac": "findCharacterIndex",
                "improve_and_update_data_080005f8": "improveAndUpdateData"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "process_and_send_data_08000be8",
            "code": "\nvoid processAndSendData_08000be8(int inputParam,uint maskParam,int conditionParam,undefined4 undefinedParam)\n\n{\n  undefined1 *dataPtr1;\n  undefined1 *dataPtr2;\n  \n  dataPtr1 = &DAT_20000174;\n  dataPtr2 = (undefined1 *)((byte)(&DAT_20000174)[inputParam] & maskParam);\n  if ((conditionParam != 0) ||\n     (dataPtr1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[inputParam], dataPtr2 != dataPtr1)) {\n    process_and_send_data_08002efe(&DAT_200003d4,inputParam,dataPtr2,dataPtr1,undefinedParam);\n    (&DAT_20000180)[inputParam] = (char)dataPtr2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "process_and_send_data_08000be8",
                "param_1": "inputParam",
                "param_2": "maskParam",
                "param_3": "conditionParam",
                "param_4": "undefinedParam",
                "puVar1": "dataPtr1",
                "puVar2": "dataPtr2"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_and_send_flags_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid process_and_send_flags_08000ef8(void)\n\n{\n  byte flag_byte;\n  int character_index;\n  bool is_flag_set;\n  byte result_flag;\n  \n  flag_byte = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    character_index = get_character_index();\n    if (character_index == 0) {\n      result_flag = 0;\n    }\n    else {\n      character_index = get_character_index(3);\n      if (character_index == 1) {\n        result_flag = 0;\n      }\n      else if ((flag_byte & 1) == 0) {\n        result_flag = 0;\n      }\n      else {\n        character_index = is_flag_valid(0);\n        if (character_index == 0) {\n          result_flag = 0;\n        }\n        else {\n          result_flag = 1;\n        }\n      }\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(2);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 2) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(1);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 2;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(10);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 4) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(2);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 4;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x13);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 8) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(3);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 8;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x15);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x10) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(4);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x10;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x14);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x20) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(5);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x20;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x1a);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x40) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(6);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x40;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(8);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x80) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(7);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x80;\n    }\n    send_data(0,result_flag);\n  }\n  flag_byte = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    character_index = get_character_index();\n    if (character_index == 0) {\n      result_flag = 0;\n    }\n    else {\n      character_index = get_character_index(9);\n      if (character_index == 1) {\n        result_flag = 0;\n      }\n      else if ((flag_byte & 1) == 0) {\n        result_flag = 0;\n      }\n      else {\n        character_index = is_flag_valid(8);\n        if (character_index == 0) {\n          result_flag = 0;\n        }\n        else {\n          result_flag = 1;\n        }\n      }\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x27);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 2) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(9);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 2;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x16);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 4) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(10);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 4;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(7);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 8) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0xb);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 8;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(6);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x10) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0xc);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x10;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(5);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x20) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0xd);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x20;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x19);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x40) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0xe);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x40;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x18);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x80) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0xf);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x80;\n    }\n    send_data(1,result_flag,0);\n  }\n  flag_byte = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    character_index = get_character_index();\n    if (character_index == 0) {\n      result_flag = 0;\n    }\n    else {\n      character_index = get_character_index(0x2a);\n      if (character_index == 1) {\n        result_flag = 0;\n      }\n      else if ((flag_byte & 1) == 0) {\n        result_flag = 0;\n      }\n      else {\n        character_index = is_flag_valid(0x10);\n        if (character_index == 0) {\n          result_flag = 0;\n        }\n        else {\n          result_flag = 1;\n        }\n      }\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x2c);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 2) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x11);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 2;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0xd);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 8) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x13);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 8;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0xe);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x10) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x14);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x10;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0xf);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x20) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x15);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x20;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x17);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x40) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x16);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x40;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x2d);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x80) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x17);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x80;\n    }\n    send_data(2,result_flag,0);\n  }\n  flag_byte = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    character_index = get_character_index();\n    if (character_index == 0) {\n      result_flag = 0;\n    }\n    else {\n      character_index = get_character_index(0x2e);\n      if (character_index == 1) {\n        result_flag = 0;\n      }\n      else if ((flag_byte & 1) == 0) {\n        result_flag = 0;\n      }\n      else {\n        character_index = is_flag_valid(0x18);\n        if (character_index == 0) {\n          result_flag = 0;\n        }\n        else {\n          result_flag = 1;\n        }\n      }\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x2f);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 2) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x19);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 2;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x30);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 4) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x1a);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 4;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x31);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 8) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x1b);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 8;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x22);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x10) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x1c);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x10;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x23);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x20) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x1d);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x20;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x2b);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x40) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x1e);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x40;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x32);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x80) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x1f);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x80;\n    }\n    send_data(3,result_flag,0);\n  }\n  flag_byte = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    character_index = get_character_index();\n    if (character_index == 0) {\n      result_flag = 0;\n    }\n    else {\n      character_index = get_character_index(0x29);\n      if (character_index == 1) {\n        result_flag = 0;\n      }\n      else if ((flag_byte & 1) == 0) {\n        result_flag = 0;\n      }\n      else {\n        character_index = is_flag_valid(0x20);\n        if (character_index == 0) {\n          result_flag = 0;\n        }\n        else {\n          result_flag = 1;\n        }\n      }\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x28);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 2) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x21);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 2;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x26);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 4) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x22);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 4;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x25);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 8) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x23);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 8;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0xc);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x10) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x24);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x10;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0xb);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x20) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x25);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x20;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x1c);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x40) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x26);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x40;\n    }\n    character_index = get_character_index();\n    if (character_index == 0) {\n      is_flag_set = false;\n    }\n    else {\n      character_index = get_character_index(0x1b);\n      if (character_index == 1) {\n        is_flag_set = false;\n      }\n      else if ((flag_byte & 0x80) == 0) {\n        is_flag_set = false;\n      }\n      else {\n        character_index = is_flag_valid(0x27);\n        if (character_index == 0) {\n          is_flag_set = false;\n        }\n        else {\n          is_flag_set = true;\n        }\n      }\n    }\n    if (is_flag_set) {\n      result_flag = result_flag | 0x80;\n    }\n    send_data(4,result_flag,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_and_send_flags_08000ef8",
                "bVar1": "flag_byte",
                "iVar2": "character_index",
                "bVar3": "is_flag_set",
                "bVar4": "result_flag",
                "process_and_send_data_08000be8": "send_data",
                "check_data_flag_08008a6c": "is_flag_valid",
                "find_character_index_080036ac": "get_character_index"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  process_file_path_08002e44(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  update_data_08002f2c(&DAT_200003d4,0xe0,0x8000215);\n  update_data_08002f2c(&DAT_200003d4,0x90,label1);\n  update_data_08002f2c(&DAT_200003d4,0xc0,0x8000489);\n  update_data_08002f2c(&DAT_200003d4,0xd0,label2);\n  update_data_08002f2c(&DAT_200003d4,0xf4,0x80005f9);\n  update_data_08002f2c(&DAT_200003d4,0xf5,label3);\n  setData(&DAT_200003d4,0xf0,0x8001cd1);\n  updateData(&DAT_200003d4,0xff,0x8000aed);\n  processData(&DAT_200003d4,0xe100);\n  initializeData();\n  executeInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "&LAB_080002ec_1": "label1",
                "&LAB_08000c18_1": "label2",
                "&LAB_080001a8_1": "label3",
                "set_dat_200005d0_08002f94": "setData",
                "update_data_08002f84": "updateData",
                "initialize_and_process_data_08003048": "processData",
                "initialize_data_08000aec": "initializeData",
                "execute_system_interrupt_0800018c": "executeInterrupt"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_to_linked_list_08001bf8",
            "code": "\nvoid copyToLinkedList_08001bf8(undefined4 sourceData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  copyToLinkedList_08001bf8Helper(&DAT_20000314,sourceData,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_to_linked_list_08001bf8",
                "param_1": "sourceData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "copy_to_linked_list_0800288c": "copyToLinkedListHelper"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "get_next_byte_from_data_08001c08",
            "code": "\nundefined get_next_byte_from_data_08001c08(void)\n\n{\n  undefined next_byte;\n  \n  next_byte = get_next_byte_08002720(&DAT_20000314);\n  return next_byte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "get_next_byte_from_data_08001c08",
                "uVar1": "next_byte"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 sourceAddress,uint numBytes,int expectedNumBytes,undefined4 status)\n\n{\n  undefined nextByte;\n  int difference;\n  int currentDifference;\n  bool isDataAvailable;\n  \n  if (numBytes == 0xffffffff) {\n    numBytes = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,sourceAddress);\n    copy_to_linked_list_08001bf8(numBytes & 0xff);\n    check_data_and_return_status_08002a58(&DAT_20000314,status);\n  }\n  initialize_data_processing_08002c14(&DAT_20000314,sourceAddress,expectedNumBytes);\n  difference = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedNumBytes < difference) {\n    decode_and_process_data_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_difference_0800270c(&DAT_20000314);\n    if (difference < expectedNumBytes) {\n      decode_and_process_data_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)sourceAddress;\n  DAT_20000131 = (undefined)numBytes;\n  difference = 0;\n  while( true ) {\n    if (difference < expectedNumBytes) {\n      currentDifference = calculate_difference_0800270c(&DAT_20000314);\n      if (currentDifference == 0) {\n        isDataAvailable = false;\n      }\n      else {\n        isDataAvailable = true;\n      }\n    }\n    else {\n      isDataAvailable = false;\n    }\n    if (!isDataAvailable) break;\n    nextByte = get_next_byte_from_data_08001c08();\n    (&DAT_20000132)[difference] = nextByte;\n    difference = difference + 1;\n  }\n  decode_and_process_data_08002f0a(&DAT_200003d4,0x77,expectedNumBytes + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "sourceAddress",
                "param_2": "numBytes",
                "param_3": "expectedNumBytes",
                "param_4": "status",
                "uVar1": "nextByte",
                "iVar2": "difference",
                "iVar3": "currentDifference",
                "bVar4": "isDataAvailable"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "improve_and_process_data_08001cd0",
            "code": "\nvoid improveAndProcessData_08001cd0(undefined4 command,int paramLength,byte *data,undefined4 param_4)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 var4;\n  byte byte5;\n  char char6;\n  int index;\n  int var8;\n  uint var9;\n  uint var10;\n  int var11;\n  bool boolFlag;\n  \n  switch(command) {\n  case 0x69:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6a);\n    for (var9 = 0; var9 < 0x3c; var9 = var9 + 1 & 0xff) {\n      var10 = var9 - 0x2e & 0xff;\n      if (var10 < 0xe) {\n        if (var9 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[var9];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          var10 = 0x7f;\n        }\n        else {\n          if (var9 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[var9];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            var10 = 0x7f;\n          }\n        }\n      }\n      else {\n        var10 = 0x7f;\n      }\n      execute_function_08002f1e(&DAT_200003d4,var10);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6c);\n    for (var9 = 0; var9 < 0x3c; var9 = var9 + 1 & 0xff) {\n      if (var9 < 0x3c) {\n        if ((&DAT_0800a908)[var9] == -1) {\n          boolFlag = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            boolFlag = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[var9]);\n            if (index == 1) {\n              boolFlag = false;\n            }\n            else {\n              boolFlag = true;\n            }\n          }\n        }\n      }\n      else {\n        boolFlag = false;\n      }\n      if (boolFlag) {\n        execute_function_08002f1e(&DAT_200003d4,0);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,0xb);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((var9 - 0x2e & 0xff) < 0xe) {\n        if (var9 < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[var9];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          boolFlag = false;\n        }\n        else {\n          if (var9 < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[var9];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            boolFlag = false;\n          }\n          else {\n            boolFlag = true;\n          }\n        }\n      }\n      else {\n        boolFlag = false;\n      }\n      if (boolFlag) {\n        execute_function_08002f1e(&DAT_200003d4,2);\n        execute_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (var9 < 0x3c) {\n        if ((&DAT_0800a908)[var9] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[var9]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = find_value_position_0800738a((int)(char)(&DAT_0800a908)[var9],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_function_08002f1e(&DAT_200003d4,3);\n        execute_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (var9 < 0x3c) {\n        if ((&DAT_0800a908)[var9] == -1) {\n          boolFlag = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            boolFlag = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[var9]);\n            if (index == 1) {\n              boolFlag = false;\n            }\n            else {\n              boolFlag = true;\n            }\n          }\n        }\n      }\n      else {\n        boolFlag = false;\n      }\n      if (boolFlag) {\n        execute_function_08002f1e(&DAT_200003d4,4);\n        execute_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (var9 < 0x3c) {\n        if ((&DAT_0800a908)[var9] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[var9]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = find_value_position_0800738a((int)(char)(&DAT_0800a908)[var9],&DAT_0800a69c);\n              if (index == 0) {\n                index = find_value_position_0800738a((int)(char)(&DAT_0800a908)[var9],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_function_08002f1e(&DAT_200003d4,6);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (paramLength != 0) {\n      byte1 = *data;\n      execute_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_function_08002f1e(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        var4 = get_byte_at_offset_08002fa0(&DAT_200003d4,byte1);\n        execute_function_08002f1e(&DAT_200003d4,var4);\n        var9 = get_value_by_index_08002fba(&DAT_200003d4,byte1);\n        execute_function_08002f1e(&DAT_200003d4,var9 & 0x7f);\n        var9 = get_value_by_index_08002fba(&DAT_200003d4,byte1);\n        if ((var9 & 0xff80) != 0) {\n          index = get_value_by_index_08002fba(&DAT_200003d4,byte1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(index << 0x12) >> 0x19);\n        }\n        var9 = get_value_by_index_08002fba(&DAT_200003d4,byte1);\n        if ((var9 & 0xc000) != 0) {\n          index = get_value_by_index_08002fba(&DAT_200003d4,byte1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(index << 0xb) >> 0x19);\n        }\n      }\n      execute_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < paramLength) {\n      var9 = (uint)data[1];\n      if (2 < paramLength) {\n        var9 = var9 | (uint)data[2] << 7;\n      }\n      if (3 < paramLength) {\n        var9 = var9 | (uint)data[3] << 0xe;\n      }\n      process_data_08000214(*data,var9);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < paramLength) {\n      var9 = (uint)*data;\n      byte1 = data[1];\n      byte5 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (var9 < 0x3c) {\n        if ((&DAT_0800a908)[var9] == -1) {\n          boolFlag = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            boolFlag = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[var9]);\n            if (index == 1) {\n              boolFlag = false;\n            }\n            else {\n              boolFlag = true;\n            }\n          }\n        }\n      }\n      else {\n        boolFlag = false;\n      }\n      if (boolFlag) {\n        if ((byte)(&DAT_200001f0)[var9] < 0xc) {\n          index = bitwise_shift_and_extract_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[var9] * 3);\n        }\n        else {\n          index = 0;\n        }\n        if (index != 0) {\n          initialize_and_update_memory_08000588(var9);\n        }\n        process_servo_data_08000500(var9,(uint)byte1 + (uint)byte5 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        improve_and_update_data_080005f8(var9,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte5 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      decode_and_process_data_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byte5,byte1,param_4);\n      return;\n    }\n    byte2 = *data;\n    boolFlag = (byte1 & 0x40) == 0;\n    if (byte5 < 0x19) {\n      switch(byte5) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,byte2);\n        for (var9 = 2; (int)var9 < paramLength; var9 = var9 + 2 & 0xff) {\n          copy_to_linked_list_08001bf8(data[var9 + 1] * -0x80 + data[var9]);\n        }\n        validate_and_return_status_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (paramLength == 6) {\n          index = (uint)data[2] + (uint)data[3] * 0x80;\n          char6 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char6 = data[2] + data[3] * -0x80;\n          index = -1;\n        }\n        process_received_data_08001c18(byte2,index,char6);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (paramLength == 6) {\n            index = (uint)data[2] + (uint)data[3] * 0x80;\n            char6 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char6 = data[2] + data[3] * -0x80;\n            index = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          var8 = (int)DAT_20000004;\n          var11 = var8 * 0xc;\n          (&DAT_20000188)[var11] = byte2;\n          (&DAT_2000018c)[var8 * 3] = index;\n          (&DAT_20000190)[var11] = char6;\n          (&DAT_20000191)[var11] = boolFlag;\n          return;\n        }\n        decode_and_process_data_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolFlag,param_4);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (var9 = 0; index = DAT_20000004 + 1, (int)var9 < index; var9 = var9 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[var9 * 0xc]) goto LAB_08001e66;\n      }\n      var9 = 0;\nLAB_08001e66:\n      for (; (int)var9 < index; var9 = var9 + 1 & 0xff) {\n        if (var9 < 8) {\n          var8 = (var9 + 1) * 0xc;\n          var11 = var9 * 0xc;\n          (&DAT_20000188)[var11] = (&DAT_20000188)[var8];\n          (&DAT_2000018c)[var9 * 3] = (&DAT_2000018c)[(var9 + 1) * 3];\n          (&DAT_20000190)[var11] = (&DAT_20000190)[var8];\n          (&DAT_20000191)[var11] = (&DAT_20000191)[var8];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    index = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < paramLength) && (index != 0)) {\n      DAT_2000012c = index;\n    }\n    if (DAT_20000170 == '\\0') {\n      initialize_and_update_data_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < paramLength) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "improve_and_process_data_08001cd0",
                "param_1": "command",
                "param_2": "paramLength",
                "param_3": "data",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "var4",
                "bVar5": "byte5",
                "cVar6": "char6",
                "iVar7": "index",
                "iVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "iVar11": "var11",
                "bVar12": "boolFlag"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_data_080022f8",
            "code": "\nvoid processData_080022f8(void)\n\n{\n  bool bVar1;\n  int returnValue;\n  undefined4 decodedConfig;\n  uint index;\n  uint shiftedIndex;\n  \n  process_and_send_flags_08000ef8();\n  while (returnValue = executeFunction(&DAT_200003d4), returnValue != 0) {\n    processInput(&DAT_200003d4);\n  }\n  DAT_20000118 = initializeGlobalValue();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      shiftedIndex = index - 0x2e & 0xff;\n      if (shiftedIndex < 0xe) {\n        if (index < 0x3c) {\n          returnValue = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          returnValue = -1;\n        }\n        returnValue = findCharIndex(returnValue);\n        if (returnValue == 0) {\n          bVar1 = false;\n        }\n        else {\n          if (index < 0x3c) {\n            returnValue = (int)(char)(&DAT_0800a908)[index];\n          }\n          else {\n            returnValue = -1;\n          }\n          returnValue = findCharIndex(returnValue);\n          if (returnValue == 1) {\n            bVar1 = false;\n          }\n          else {\n            returnValue = getByteAtOffset(&DAT_200003d4,index);\n            if (returnValue == 2) {\n              bVar1 = true;\n            }\n            else {\n              bVar1 = false;\n            }\n          }\n        }\n      }\n      else {\n        bVar1 = false;\n      }\n      if ((bVar1) && ((DAT_20000114 >> shiftedIndex & 1U) != 0)) {\n        decodedConfig = decodeConfig(shiftedIndex);\n        processData_080022f8(&DAT_200003d4,shiftedIndex,decodedConfig);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (index = 0; (int)index < DAT_20000004 + 1; index = index + 1 & 0xff) {\n        returnValue = index * 0xc;\n        processReceivedData((&DAT_20000188)[returnValue],(&DAT_2000018c)[index * 3],(&DAT_20000190)[returnValue],\n                     (&DAT_20000191)[returnValue]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "iVar2": "returnValue",
                "uVar3": "decodedConfig",
                "uVar4": "index",
                "uVar5": "shiftedIndex",
                "decode_configuration_08008880": "decodeConfig",
                "process_data_08002ef2": "processData",
                "process_received_data_08001c18": "processReceivedData",
                "initialize_global_value_08008abc": "initializeGlobalValue",
                "execute_function_08002ec4": "executeFunction",
                "process_input_08002ed2": "processInput",
                "find_character_index_080036ac": "findCharIndex",
                "get_byte_at_offset_08002fa0": "getByteAtOffset"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_condition_08002400",
            "code": "\nundefined4 check_condition_08002400(int index)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(index * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_condition_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_widget_0800242c",
            "code": "\nvoid initialize_widget_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_widget_0800242c_helper(param1,60000,0x5dc,&widget_label,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_widget_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "LAB_08002444_1": "widget_label",
                "initialize_widget_08007648": "initialize_widget_helper"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_memory_08002578",
            "code": "\nvoid initialize_memory_08002578(void)\n\n{\n  initialize_memory_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_memory_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "update_data_08002580",
            "code": "\nvoid updateData_08002580(byte *output)\n\n{\n  char nextValue;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *output = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *output = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "update_data_08002580",
                "param_1": "output",
                "cVar1": "nextValue",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "execute_memory_operation_080025ac",
            "code": "\nbyte executeMemoryOperation_080025ac(byte *param_1,uint value,int offset1,int offset2)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  uint divisionResult;\n  int calculationResult;\n  \n  if (*param_1 < 0xc) {\n    perform_memory_operation_08008990(value,1,offset1,*param_1,offset2);\n    modifiedValue2 = (uint)*param_1;\n    modifiedValue1 = (byte)(&DAT_20000258)[modifiedValue2 * 8] & 0xffffffc0 | value & 0x3f;\n    (&DAT_20000258)[modifiedValue2 * 8] = (char)modifiedValue1;\n    calculationResult = -offset1 + 0x220;\n    if (calculationResult < 0) {\n      calculationResult = -offset1 + 0x223;\n    }\n    param_1[1] = (byte)((uint)(calculationResult << 0x16) >> 0x18);\n    calculationResult = -offset2 + 0x960;\n    if (calculationResult < 0) {\n      calculationResult = -offset2 + 0x963;\n    }\n    param_1[2] = (byte)((uint)(calculationResult << 0x16) >> 0x18);\n    divisionResult = *param_1 / 0xc;\n    calculationResult = check_condition_08002400(divisionResult,modifiedValue1,modifiedValue2,(uint)*param_1 * -0x55555555);\n    if (calculationResult == 0) {\n      DAT_200002fc = (undefined)divisionResult;\n      initializeWidget();\n    }\n    (&DAT_20000258)[(uint)*param_1 * 8] = (&DAT_20000258)[(uint)*param_1 * 8] | 0x40;\n  }\n  return *param_1;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "execute_memory_operation_080025ac",
                "param_2": "value",
                "param_3": "offset1",
                "param_4": "offset2",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "uVar3": "divisionResult",
                "iVar4": "calculationResult",
                "initialize_widget_0800242c": "initializeWidget"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "execute_memory_operation_08002634",
            "code": "\nvoid execute_memory_operation_08002634(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  execute_memory_operation_08002634_080025ac(arg1,arg2,0x220,0x960,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "execute_memory_operation_08002634",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "initialize_memory_if_condition_false_08002644",
            "code": "\nvoid initialize_memory_if_condition_false_08002644(byte *byte_array,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byte_value;\n  uint array_element;\n  int condition_result;\n  \n  array_element = (uint)*byte_array;\n  byte_value = (&DAT_20000258)[array_element * 8];\n  (&DAT_20000258)[array_element * 8] = byte_value & 0xbf;\n  condition_result = check_condition_08002400(array_element / 0xc,value1,byte_value & 0xbf,array_element * -0x55555555,value3);\n  if (condition_result == 0) {\n    initialize_memory_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "initialize_memory_if_condition_false_08002644",
                "param_1": "byte_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "byte_value",
                "uVar2": "array_element",
                "iVar3": "condition_result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_int_array_at_index_0800267c",
            "code": "\nvoid updateIntArrayAtIndex_0800267c(byte *array,int index)\n\n{\n  int newValue;\n  \n  if (*array < 0xc) {\n    newValue = (0x88 - (char)array[1]) * 4;\n    if ((newValue - index == 0 || newValue < index) &&\n       (newValue = (600 - (char)array[2]) * 4,\n       index == newValue || index + (600 - (char)array[2]) * -4 < 0 != SBORROW4(index,newValue)))\n    {\n      newValue = index;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_int_array_at_index_0800267c",
                "param_1": "array",
                "param_2": "index",
                "iVar1": "newValue"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_int_array_at_index_080026b0",
            "code": "\nvoid updateIntArrayAtIndex_080026b0(int arrayIndex,int value)\n\n{\n  if (value < 0x220) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (0xb4 < value) {\n      value = 0xb4;\n    }\n    value = calculateValue(value,0,0xb4,(0x88 - *(char *)(arrayIndex + 1)) * 4,\n                           (600 - *(char *)(arrayIndex + 2)) * 4);\n  }\n  updateIntArrayAtIndex_080026b0(arrayIndex,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "update_int_array_at_index_080026b0",
                "param_1": "arrayIndex",
                "param_2": "value",
                "calculate_value_08008ef4": "calculateValue",
                "update_int_array_at_index_0800267c": "updateIntArrayAtIndex"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "bitwise_shift_and_extract_080026f8",
            "code": "\nuint bitwiseShiftAndExtract_080026f8(byte *inputBytePtr)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*inputBytePtr * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "bitwise_shift_and_extract_080026f8",
                "param_1": "inputBytePtr"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "get_next_byte_08002720",
            "code": "\nunsigned_integer get_next_byte_08002720(void)\n\n{\n  unsigned_integer index;\n  \n  index = (unsigned_integer)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (unsigned_integer)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "uVar1": "index",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "copy_data_and_update_080027f0",
            "code": "\nuint copyDataAndUpdate_080027f0(int offset,undefined4 data,uint length)\n\n{\n  int copyResult;\n  uint newLength;\n  \n  if (DAT_200003b4 == '\\0') {\n    copyResult = copyData(offset + 0x14,data,length & 0xffff);\n    if (copyResult == 0) {\n      return length;\n    }\n    return 0;\n  }\n  newLength = DAT_200003b8 + length;\n  if (DAT_200003c5 < newLength) {\n    if (newLength < 0x20) {\n      newLength = 0x20;\n    }\n    DAT_200003cc = allocateAndUpdateLinkedList(DAT_200003cc,newLength);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)newLength;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(offset + 4) = 1;\n    return 0;\n  }\n  copyArrayToBuffer((uint)DAT_200003b6 + DAT_200003cc,data,length);\n  DAT_200003b6 = DAT_200003b6 + (char)length;\n  DAT_200003b8 = DAT_200003b6;\n  return length;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "copy_data_and_update_080027f0",
                "param_1": "offset",
                "param_2": "data",
                "param_3": "length",
                "iVar1": "copyResult",
                "uVar2": "newLength",
                "copy_data_08007ede": "copyData",
                "allocate_and_update_linked_list_08009908": "allocateAndUpdateLinkedList",
                "copy_array_to_buffer_080091b0": "copyArrayToBuffer"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_to_linked_list_0800288c",
            "code": "\nundefined4 copyToLinkedList_0800288c(int inputIndex,undefined inputValue)\n\n{\n  undefined4 successFlag;\n  int copyResult;\n  uint newLinkedListSize;\n  undefined inputByte;\n  \n  inputByte = inputValue;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_08007ede(inputIndex + 0x14,&inputByte,1);\n    if (copyResult == 0) {\n      successFlag = 1;\n    }\n    else {\n      successFlag = 0;\n    }\n  }\n  else {\n    newLinkedListSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newLinkedListSize) {\n      if (newLinkedListSize < 0x20) {\n        newLinkedListSize = 0x20;\n      }\n      DAT_200003cc = allocate_and_update_linked_list_08009908(DAT_200003cc,newLinkedListSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newLinkedListSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(inputIndex + 4) = 1;\n      successFlag = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = inputByte;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      successFlag = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return successFlag;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_to_linked_list_0800288c",
                "param_1": "inputIndex",
                "param_2": "inputValue",
                "uVar1": "successFlag",
                "iVar2": "copyResult",
                "uVar3": "newLinkedListSize",
                "local_11": "inputByte"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_param_0800291c",
            "code": "\nvoid initializeParam_0800291c(undefined4 *paramArray)\n\n{\n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  *paramArray = &PTR_copy_to_linked_list_0800288c_1_0800a5a0;\n  *(undefined *)(paramArray + 0x1b) = 0x19;\n  *(undefined *)((int)paramArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_param_0800291c",
                "param_1": "paramArray"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_param_equals_one_08002948",
            "code": "\nvoid initialize_if_param_equals_one_08002948(int param_check,int param_value)\n\n{\n  if (param_check != 1) {\n    return;\n  }\n  if (param_value == 0xffff) {\n    initialize_data(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_param_equals_one_08002948",
                "param_1": "param_check",
                "param_2": "param_value",
                "initialize_param_0800291c": "initialize_data"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_08002968",
            "code": "\nvoid initializeI2C_08002968(int baseAddress,uint configValue)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  iVar1 = (configValue & 0x7f) << 1;\n  *(char *)(baseAddress + 0x10) = (char)iVar1;\n  if (configValue == 0x33) {\n    *(undefined *)(baseAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(baseAddress + 0x11) = 0;\n  }\n  iVar2 = baseAddress + 0x14;\n  initializeI2C_08002968Peripheral(iVar2,100000,0x4000,iVar1,*(undefined *)(baseAddress + 0x11));\n  if (*(char *)(baseAddress + 0x11) == '\\0') {\n    updateData1(iVar2,&dataLabel1);\n    updateData2(iVar2,&dataLabel2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_08002968",
                "param_1": "baseAddress",
                "param_2": "configValue",
                "initialize_i2_c_peripheral_080077b0": "initializeI2CPeripheral",
                "update_data_08007f8e": "updateData1",
                "update_data_08007f7c": "updateData2",
                "LAB_08002774_1": "dataLabel1",
                "LAB_08002b00_1": "dataLabel2"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2c_08002a1c",
            "code": "\nvoid initialize_i2c_08002a1c(undefined4 param1,undefined param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_i2_c_08002968(param1,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2c_08002a1c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2c_08002a26",
            "code": "\nvoid initialize_i2c_08002a26(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  initialize_i2c_08002a26_08002a1c(arg1,0x33,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2c_08002a26",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 undefinedValue,int inputValue)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(inputValue << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "undefinedValue",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "check_data_and_return_status_08002a58",
            "code": "\nundefined4 check_data_and_return_status_08002a58(int data_address)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (*(char *)(data_address + 0x11) == '\\0') {\n    status = 4;\n  }\n  else {\n    result = process_and_check_data_08007e74(data_address + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      status = 0;\n    }\n    else if (result == 1) {\n      status = 1;\n    }\n    else {\n      status = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "check_data_and_return_status_08002a58",
                "param_1": "data_address",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "validate_and_return_status_08002ac0",
            "code": "\nvoid validate_and_return_status_08002ac0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_data_and_return_status_08002a58(input_1,1,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "validate_and_return_status_08002ac0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "update_linked_list_08002acc",
            "code": "\nvoid updateLinkedList_08002acc(uint size,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < size) {\n    if (size < 0x20) {\n      size = 0x20;\n    }\n    DAT_200003c8 = allocateAndUpdateLinkedList(DAT_200003c8,size,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)size;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "update_linked_list_08002acc",
                "param_1": "size",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "allocate_and_update_linked_list_08009908": "allocateAndUpdateLinkedList"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocessData_08002b68(undefined4 *data,uint size,undefined4 param,uint count,byte flag)\n\n{\n  int returnValue;\n  uint flagByte;\n  uint param4;\n  \n  flagByte = (uint)flag;\n  if (*(char *)((int)data + 0x11) == '\\0') {\n    return 0;\n  }\n  param4 = count;\n  updateLinkedList(param);\n  if (DAT_200003c8 != 0) {\n    if (flagByte != 0) {\n      initializeData(data,size);\n      if (3 < flagByte) {\n        flagByte = 3;\n      }\n      while( true ) {\n        if (flagByte == 0) break;\n        (**(code **)*data)(data,count >> ((flagByte - 1 & 0x1f) << 3) & 0xff);\n        flagByte = flagByte - 1 & 0xff;\n      }\n      checkDataAndReturnStatus(data,0);\n    }\n    returnValue = validateAndProcessInput(data + 5,(size & 0x7f) << 1,DAT_200003c8,param,param4);\n    if (returnValue != 0) {\n      param = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)param;\n    return param;\n  }\n  data[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "data",
                "param_2": "size",
                "param_3": "param",
                "param_4": "count",
                "param_5": "flag",
                "iVar1": "returnValue",
                "uVar2": "flagByte",
                "uVar3": "param4",
                "update_linked_list_08002acc": "updateLinkedList",
                "initialize_data_08002a30": "initializeData",
                "check_data_and_return_status_08002a58": "checkDataAndReturnStatus",
                "validate_and_process_input_08007f0e": "validateAndProcessInput"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "initialize_data_processing_08002c00",
            "code": "\nvoid initialize_data_processing_08002c00(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "initialize_data_processing_08002c00",
                "process_data_08002b68": "process_data"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "initialize_data_processing_08002c14",
            "code": "\nvoid initializeDataProcessing_08002c14(void)\n\n{\n  initialize_data_processing_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "initialize_data_processing_08002c14"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_parameters_08002c1e",
            "code": "\nvoid initialize_parameters_08002c1e(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_if_param_equals_one_08002948(1,0xffff,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_parameters_08002c1e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_update_parameters_08002ce0",
            "code": "\nint initialize_and_update_parameters_08002ce0(int input_param)\n\n{\n  int param_offset;\n  \n  initialize_param_to_zero(input_param + 0x40);\n  param_offset = input_param + 0x44;\n  initialize_params(param_offset,input_param,0x40);\n  *(undefined *)(input_param + 0xc4) = 0;\n  *(undefined4 *)(input_param + 200) = 0;\n  *(undefined *)(input_param + 0x1f8) = 0;\n  set_registers(param_offset,0xe0,callback_function + 1,0);\n  set_registers(param_offset,0x90,&label_1,0);\n  set_registers(param_offset,0xc0,&label_2,0);\n  set_registers(param_offset,0xd0,&label_3,0);\n  set_registers(param_offset,0xf4,&label_4,0);\n  set_registers(param_offset,0xf5,&label_5,0);\n  update_parameters(param_offset,0x71,&label_6,0);\n  set_parameters(param_offset,0xf0,&label_7,0);\n  update_params(param_offset,0x79,&label_8,input_param);\n  update_param(param_offset,0xf9,&label_9,input_param);\n  update_param(param_offset,0xff,&label_10,0);\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_update_parameters_08002ce0",
                "param_1": "input_param",
                "iVar1": "param_offset",
                "initialize_parameter_to_zero_0800314e": "initialize_param_to_zero",
                "initialize_parameters_080032bc": "initialize_params",
                "set_registers_08003306": "set_registers",
                "update_parameters_08003366": "update_parameters",
                "set_parameters_08003370": "set_parameters",
                "update_parameters_08003346": "update_params",
                "update_param_08003350": "update_param",
                "execute_callback_08002c2c": "callback_function",
                "LAB_08002c40_1": "label_1",
                "LAB_08002c7c_1": "label_2",
                "LAB_08002c90_1": "label_3",
                "LAB_08002c54_1": "label_4",
                "LAB_08002c68_1": "label_5",
                "LAB_08002ca4_1": "label_6",
                "LAB_08002cb8_1": "label_7",
                "LAB_08002e1a_1": "label_8",
                "LAB_08002dea_1": "label_9",
                "LAB_08002cd0_1": "label_10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_if_valid_parameter_08002dbc",
            "code": "\nvoid initialize_if_valid_parameter_08002dbc(int isValid,int parameter)\n\n{\n  if (isValid != 1) {\n    return;\n  }\n  if (parameter == 0xffff) {\n    initialize_and_update_parameters_08002ce0(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_if_valid_parameter_08002dbc",
                "param_1": "isValid",
                "param_2": "parameter"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_and_increment_08002ddc",
            "code": "\nvoid execute_and_increment_08002ddc(int input_value,undefined4 param_two,undefined4 param_three,undefined4 param_four)\n\n{\n  execute_function_0800322c(input_value + 0x40,2,5,param_four,param_four);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_and_increment_08002ddc",
                "param_1": "input_value",
                "param_2": "param_two",
                "param_3": "param_three",
                "param_4": "param_four"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "process_data_08002df6",
            "code": "\nvoid process_data_08002df6(int input_data)\n\n{\n  undefined *data_ptr;\n  \n  if (*(byte *)(input_data + 0xc4) == 0) {\n    return;\n  }\n  data_ptr = *(undefined **)(input_data + 200);\n  process_data_08002df6_080031ce(input_data + 0x40,*data_ptr,data_ptr[1],*(byte *)(input_data + 0xc4) - 2,data_ptr + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "process_data_08002df6",
                "param_1": "input_data",
                "puVar1": "data_ptr"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_data_and_process_08002e26",
            "code": "\nvoid updateDataAndProcess_08002e26(int dataPtr,undefined4 newValue)\n\n{\n  *(undefined4 *)(dataPtr + 0xc0) = newValue;\n  copyValueToPtr(dataPtr + 0x40);\n  executeAndIncrement(dataPtr);\n  processData(dataPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_data_and_process_08002e26",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "copy_value_to_ptr_08003154": "copyValueToPtr",
                "execute_and_increment_08002ddc": "executeAndIncrement",
                "process_data_08002df6": "processData"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "process_file_path_08002e44",
            "code": "\nvoid processFilePath_08002e44(int fileInfo,int filePath,undefined undefinedVal1,undefined undefinedVal2)\n\n{\n  byte byteVal;\n  char charVal;\n  int substringIndex;\n  int lastCharIndex;\n  undefined *memoryPtr;\n  \n  substringIndex = find_substring_080099a4(filePath,\".cpp\");\n  lastCharIndex = find_last_character_index_0800997e(filePath,0x2f);\n  if (lastCharIndex == 0) {\n    lastCharIndex = find_last_character_index_0800997e(filePath,0x5c);\n  }\n  if (lastCharIndex != 0) {\n    filePath = lastCharIndex + 1;\n  }\n  if (substringIndex == 0) {\n    charVal = find_end_of_string_08000178(filePath);\n    *(char *)(fileInfo + 0xc4) = charVal + '\\x02';\n  }\n  else {\n    *(char *)(fileInfo + 0xc4) = ((char)substringIndex - (char)filePath) + '\\x02';\n  }\n  update_linked_list_080091a0(*(undefined4 *)(fileInfo + 200));\n  byteVal = *(byte *)(fileInfo + 0xc4);\n  memoryPtr = (undefined *)allocate_memory_08009190(byteVal + 1);\n  *(undefined **)(fileInfo + 200) = memoryPtr;\n  memoryPtr[byteVal] = 0;\n  *memoryPtr = undefinedVal1;\n  memoryPtr[1] = undefinedVal2;\n  copy_string_with_null_terminator_08009954(memoryPtr + 2,filePath,*(byte *)(fileInfo + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "process_file_path_08002e44",
                "param_1": "fileInfo",
                "param_2": "filePath",
                "param_3": "undefinedVal1",
                "param_4": "undefinedVal2",
                "bVar1": "byteVal",
                "cVar2": "charVal",
                "iVar3": "substringIndex",
                "iVar4": "lastCharIndex",
                "puVar5": "memoryPtr"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid executeFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_input_08002ed2",
            "code": "\nvoid process_input_08002ed2(int input_param)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(input_param + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_input_08002ed2_data(input_param + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "param_1": "input_param",
                "uVar1": "result",
                "process_input_08003474": "process_input_data"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "process_data_08002ef2",
            "code": "\nvoid process_data_08002ef2(int base_address,undefined4 config_value,undefined2 data_array,undefined4 param_value)\n\n{\n  process_data_08002ef2_08003158(base_address + 0x40,config_value,data_array,param_value,param_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "process_data_08002ef2",
                "param_1": "base_address",
                "param_2": "config_value",
                "param_3": "data_array",
                "param_4": "param_value"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "process_and_send_data_08002efe",
            "code": "\nvoid process_and_send_data_08002efe(int data_address,undefined4 param_value,undefined2 param_length,undefined4 param_address)\n\n{\n  process_data(data_address + 0x40,param_value,param_length,param_address,param_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "process_and_send_data_08002efe",
                "param_1": "data_address",
                "param_2": "param_value",
                "param_3": "param_length",
                "param_4": "param_address",
                "process_data_0800319e": "process_data"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "decode_and_process_data_08002f0a",
            "code": "\nvoid decode_and_process_data_08002f0a(int input_data)\n\n{\n  decode_and_process_data_08002f0a_0800325a(input_data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "decode_and_process_data_08002f0a",
                "param_1": "input_data",
                "process_data_and_decode_0800325a": "decode_and_process_data_0800325a"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "decode_and_process_data_08002f14",
            "code": "\nvoid decodeAndProcessData_08002f14(int input)\n\n{\n  decode_and_process_data_080032a2(input + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "decode_and_process_data_08002f14",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_function_08002f1e",
            "code": "\nvoid executeFunction_08002f1e(int functionPointer)\n\n{\n  (**(code **)**(undefined4 **)(functionPointer + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_function_08002f1e",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 arg1,uint arg2,undefined4 arg3)\n\n{\n  undefined4 tempVar;\n  \n  if (arg2 == 0xd0) {\n    DAT_200005f0 = arg3;\n    return;\n  }\n  if (0xd0 < arg2) {\n    if (arg2 == 0xf4) {\n      DAT_200005e0 = arg3;\n      return;\n    }\n    tempVar = arg3;\n    if ((arg2 != 0xf5) && (tempVar = DAT_200005e4, arg2 == 0xe0)) {\n      DAT_200005d4 = arg3;\n      return;\n    }\n    DAT_200005e4 = tempVar;\n    return;\n  }\n  if (arg2 == 0x90) {\n    DAT_200005dc = arg3;\n    return;\n  }\n  if (arg2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = arg3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uVar1": "tempVar"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_data_08002f84",
            "code": "\nvoid update_data_08002f84(undefined4 status,int value,undefined4 data)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_data_08002f84",
                "param_1": "status",
                "param_2": "value",
                "param_3": "data"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_dat_200005d0_08002f94",
            "code": "\nvoid set_dat_200005d0_08002f94(undefined4 ptr_param_1,undefined4 ptr_param_2,undefined4 ptr_param_3)\n\n{\n  DAT_200005d0 = ptr_param_3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_dat_200005d0_08002f94",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "param_3": "ptr_param_3"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_byte_at_offset_08002fa0",
            "code": "\nundefined getByteAtOffset_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_byte_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_value_if_not_seven_f_08002fa8",
            "code": "\nvoid updateValueIfNotSevenF_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_value_if_not_seven_f_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_value_by_index_08002fba",
            "code": "\nundefined4 getValueByIndex_08002fba(int baseAddress,int index)\n\n{\n  return *(undefined4 *)(baseAddress + (index + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_value_by_index_08002fba",
                "param_1": "baseAddress",
                "param_2": "index"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "write_to_memory_08002fc2",
            "code": "\nvoid writeToMemory_08002fc2(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (offset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "write_to_memory_08002fc2",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "execute_function_loop_08002fca",
            "code": "\nvoid executeFunctionLoop_08002fca(undefined4 ptrArg1,undefined4 ptrArg2,int loopCount,undefined4 ptrArg4,\n                 undefined4 ptrArg5)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < loopCount; index = index + 1 & 0xff) {\n    FUNC_08008ac4(ptrArg5);\n    update_parameter_value_08008a24(ptrArg2,1);\n    FUNC_08008ac4(ptrArg4);\n    update_parameter_value_08008a24(ptrArg2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "execute_function_loop_08002fca",
                "param_1": "ptrArg1",
                "param_2": "ptrArg2",
                "param_3": "loopCount",
                "param_4": "ptrArg4",
                "param_5": "ptrArg5",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "perform_memory_operations_08003002",
            "code": "\nvoid performMemoryOperations_08003002(int inputParam)\n\n{\n  if (*(char *)(inputParam + 0x1f8) != '\\0') {\n    return;\n  }\n  performMemoryOperation(0xd,1);\n  executeFunctionLoop(inputParam,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  executeFunctionLoop(inputParam,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "perform_memory_operations_08003002",
                "param_1": "inputParam",
                "perform_memory_operation_08008990": "performMemoryOperation",
                "execute_function_loop_08002fca": "executeFunctionLoop"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_and_process_data_08003048",
            "code": "\nvoid initialize_and_process_data_08003048(undefined4 data,undefined4 port,undefined4 size,undefined4 config)\n\n{\n  initialize_serial_port_08008c44(&DAT_20000700,port,6,config,config);\n  perform_memory_operations_08003002(data);\n  update_data_and_process_08002e26(data,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_and_process_data_08003048",
                "param_1": "data",
                "param_2": "port",
                "param_3": "size",
                "param_4": "config"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_process_data_0800307a",
            "code": "\nvoid decodeAndProcessData_0800307a(undefined4 *functionPointer,uint dataLength,byte *data,uint maxIterations)\n\n{\n  uint currentByte;\n  uint bitOffset;\n  uint iterationCount;\n  uint byteIndex;\n  \n  currentByte = (uint)*data;\n  if (maxIterations == 0) {\n    maxIterations = 0xffffffff;\n  }\n  byteIndex = 0;\n  bitOffset = 0;\n  iterationCount = 0;\n  while ((byteIndex < dataLength && (iterationCount < maxIterations))) {\n    (***(code ***)(undefined4 *)*functionPointer)\n              ((undefined4 *)*functionPointer,((uint)data[byteIndex] << (bitOffset & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)data[byteIndex] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((iterationCount = iterationCount + 1, 6 < bitOffset && (iterationCount < maxIterations))) {\n      (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    byteIndex = byteIndex + 1;\n  }\n  if ((bitOffset != 0) && (iterationCount < maxIterations)) {\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,(1 << (bitOffset & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_process_data_0800307a",
                "param_1": "functionPointer",
                "param_2": "dataLength",
                "param_3": "data",
                "param_4": "maxIterations",
                "uVar1": "currentByte",
                "uVar2": "bitOffset",
                "uVar3": "iterationCount",
                "uVar4": "byteIndex"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "process_data_08003106",
            "code": "\nvoid process_data_08003106(undefined4 *data_pointer,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  undefined4 *func_ptr;\n  \n  func_ptr = (undefined4 *)*data_pointer;\n  if (func_ptr != (undefined4 *)0x0) {\n    (**(code **)*func_ptr)(func_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0x6f);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,value_2);\n    decode_and_process_data_08003106(data_pointer,value_3,value_4,value_3);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "process_data_08003106",
                "param_1": "data_pointer",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "puVar1": "func_ptr",
                "decode_and_process_data_0800307a": "decode_and_process_data"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_parameter_to_zero_0800314e",
            "code": "\nvoid initializeParameterToZero_0800314e(undefined4 *resultPointer)\n\n{\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_parameter_to_zero_0800314e",
                "param_1": "resultPointer"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_to_ptr_08003154",
            "code": "\nvoid copyValueToPtr_08003154(undefined4 *resultPtr,undefined4 value)\n\n{\n  *resultPtr = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_to_ptr_08003154",
                "param_1": "resultPtr",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_data_08003158",
            "code": "\nvoid process_data_08003158(undefined4 *data_pointer,uint size,ushort flag)\n\n{\n  undefined4 *function_ptr;\n  ushort temp_variable;\n  \n  function_ptr = (undefined4 *)*data_pointer;\n  if (function_ptr != (undefined4 *)0x0) {\n    temp_variable = flag;\n    if (((int)size < 0x10) && (flag < 0x4000)) {\n      (**(code **)*function_ptr)(function_ptr,size | 0xe0);\n      decode_and_process_data_08003158_0800307a(data_pointer,2,&temp_variable);\n    }\n    else {\n      process_data_08003158_08003106(data_pointer,size,2,&temp_variable);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "data_pointer",
                "param_2": "size",
                "param_3": "flag",
                "puVar1": "function_ptr",
                "local_a": "temp_variable"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "process_data_0800319e",
            "code": "\nvoid process_data_0800319e(undefined4 *data_ptr,uint data_length,undefined2 data_value)\n\n{\n  undefined4 *function_ptr;\n  undefined2 processed_data;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    processed_data = data_value;\n    (**(code **)*function_ptr)(function_ptr,data_length & 0xf | 0x90);\n    decode_and_process_data_0800319e_0800307a(data_ptr,2,&processed_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "process_data_0800319e",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_value",
                "puVar1": "function_ptr",
                "local_a": "processed_data"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "process_data_080031ce",
            "code": "\nvoid processData_080031ce(undefined4 *dataPtr,undefined4 param1,undefined4 param2,uint size,int offset\n                 )\n\n{\n  undefined4 *funcPtr;\n  uint i;\n  \n  funcPtr = (undefined4 *)*dataPtr;\n  if (funcPtr != (undefined4 *)0x0) {\n    (**(code **)*funcPtr)(funcPtr,0xf0,param2,*(code **)*funcPtr,size);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0x79);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,param1);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,param2);\n    for (i = 0; i < size; i = i + 1) {\n      decode_and_process_data_0800307a(dataPtr,1,offset + i,0);\n    }\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "process_data_080031ce",
                "param_1": "dataPtr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "size",
                "param_5": "offset",
                "puVar1": "funcPtr",
                "uVar2": "i"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  undefined4 *nextFunctionPointer;\n  \n  nextFunctionPointer = (undefined4 *)*functionPointer;\n  if (nextFunctionPointer != (undefined4 *)0x0) {\n    (**(code **)*nextFunctionPointer)(nextFunctionPointer,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,inputParam1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,inputParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "puVar1": "nextFunctionPointer"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "process_data_and_decode_0800325a",
            "code": "\nvoid processDataAndDecode_0800325a(undefined4 *dataPtr,undefined4 dataValue,uint numIterations,int offset)\n\n{\n  undefined4 *functionPtr;\n  uint iterationCount;\n  \n  functionPtr = (undefined4 *)*dataPtr;\n  if (functionPtr != (undefined4 *)0x0) {\n    (**(code **)*functionPtr)(functionPtr,0xf0);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,dataValue);\n    for (iterationCount = 0; iterationCount < numIterations; iterationCount = iterationCount + 1) {\n      decode_and_process_data_0800307a(dataPtr,1,offset + iterationCount,0);\n    }\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "process_data_and_decode_0800325a",
                "param_1": "dataPtr",
                "param_2": "dataValue",
                "param_3": "numIterations",
                "param_4": "offset",
                "puVar1": "functionPtr",
                "uVar2": "iterationCount"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "decode_and_process_data_080032a2",
            "code": "\nvoid decode_and_process_data_080032a2(undefined4 input_param,undefined4 string_param,undefined4 unused_param,undefined4 output_param)\n\n{\n  undefined4 end_of_string;\n  \n  end_of_string = find_end_of_string(string_param);\n  process_data_and_decode(input_param,0x71,end_of_string,string_param,output_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "decode_and_process_data_080032a2",
                "param_1": "input_param",
                "param_2": "string_param",
                "param_3": "unused_param",
                "param_4": "output_param",
                "uVar1": "end_of_string",
                "find_end_of_string_08000178": "find_end_of_string",
                "process_data_and_decode_0800325a": "process_data_and_decode"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_parameters_080032bc",
            "code": "\nvoid initializeParameters_080032bc(int paramPointer,int value,undefined4 data)\n\n{\n  *(int *)(paramPointer + 4) = value;\n  *(undefined4 *)(paramPointer + 8) = data;\n  *(undefined *)(paramPointer + 0xc) = 0;\n  *(undefined *)(paramPointer + 0xd) = 0;\n  *(undefined4 *)(paramPointer + 0x10) = 0;\n  *(undefined *)(paramPointer + 0x14) = 0;\n  *(undefined4 *)(paramPointer + 0x18) = 0;\n  *(undefined4 *)(paramPointer + 0x1c) = 0;\n  *(undefined4 *)(paramPointer + 0x20) = 0;\n  *(undefined4 *)(paramPointer + 0x24) = 0;\n  *(undefined4 *)(paramPointer + 0x28) = 0;\n  *(undefined4 *)(paramPointer + 0x2c) = 0;\n  *(undefined4 *)(paramPointer + 0x30) = 0;\n  *(undefined4 *)(paramPointer + 0x34) = 0;\n  *(undefined4 *)(paramPointer + 0x38) = 0;\n  *(undefined4 *)(paramPointer + 0x3c) = 0;\n  *(undefined4 *)(paramPointer + 0x40) = 0;\n  *(undefined4 *)(paramPointer + 0x44) = 0;\n  *(undefined4 *)(paramPointer + 0x48) = 0;\n  *(undefined4 *)(paramPointer + 0x4c) = 0;\n  *(undefined4 *)(paramPointer + 0x50) = 0;\n  *(undefined4 *)(paramPointer + 0x54) = 0;\n  *(undefined4 *)(paramPointer + 0x58) = 0;\n  *(undefined4 *)(paramPointer + 0x5c) = 0;\n  *(undefined4 *)(paramPointer + 0x60) = 0;\n  *(undefined4 *)(paramPointer + 100) = 0;\n  *(undefined4 *)(paramPointer + 0x68) = 0;\n  *(undefined4 *)(paramPointer + 0x6c) = 0;\n  *(undefined4 *)(paramPointer + 0x70) = 0;\n  *(undefined4 *)(paramPointer + 0x74) = 0;\n  *(undefined4 *)(paramPointer + 0x78) = 0;\n  *(bool *)paramPointer = value == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_parameters_080032bc",
                "param_1": "paramPointer",
                "param_2": "value",
                "param_3": "data"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "set_registers_08003306",
            "code": "\nvoid setRegisters_08003306(int registerPointer,uint registerValue,undefined4 value1,undefined4 value2)\n\n{\n  if (registerValue == 0xd0) {\n    *(undefined4 *)(registerPointer + 0x58) = value1;\n    *(undefined4 *)(registerPointer + 0x28) = value2;\n    return;\n  }\n  if (0xd0 < registerValue) {\n    if (registerValue == 0xf4) {\n      *(undefined4 *)(registerPointer + 0x5c) = value1;\n      *(undefined4 *)(registerPointer + 0x2c) = value2;\n      return;\n    }\n    if (registerValue == 0xf5) {\n      *(undefined4 *)(registerPointer + 0x60) = value1;\n      *(undefined4 *)(registerPointer + 0x30) = value2;\n    }\n    else if (registerValue == 0xe0) {\n      *(undefined4 *)(registerPointer + 0x4c) = value1;\n      *(undefined4 *)(registerPointer + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (registerValue == 0x90) {\n    *(undefined4 *)(registerPointer + 0x50) = value1;\n    *(undefined4 *)(registerPointer + 0x20) = value2;\n    return;\n  }\n  if (registerValue == 0xc0) {\n    *(undefined4 *)(registerPointer + 0x54) = value1;\n    *(undefined4 *)(registerPointer + 0x24) = value2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "set_registers_08003306",
                "param_1": "registerPointer",
                "param_2": "registerValue",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_parameters_08003346",
            "code": "\nvoid updateParameters_08003346(int baseAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(baseAddress + 0x70) = newValue1;\n    *(undefined4 *)(baseAddress + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_parameters_08003346",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_param_08003350",
            "code": "\nvoid updateParam_08003350(int baseAddress,int inputCode,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (inputCode == 0xf9) {\n    *(undefined4 *)(baseAddress + 0x74) = newValue1;\n    *(undefined4 *)(baseAddress + 0x38) = newValue2;\n    return;\n  }\n  if (inputCode != 0xff) {\n    return;\n  }\n  *(undefined4 *)(baseAddress + 0x78) = newValue1;\n  *(undefined4 *)(baseAddress + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_param_08003350",
                "param_1": "baseAddress",
                "param_2": "inputCode",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_parameters_08003366",
            "code": "\nvoid updateParameters_08003366(int baseAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newValue1;\n    *(undefined4 *)(baseAddress + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_parameters_08003366",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_parameters_08003370",
            "code": "\nvoid setParameters_08003370(int object,undefined4 param2,undefined4 value1,undefined4 value2)\n\n{\n  *(undefined4 *)(object + 0x6c) = value1;\n  *(undefined4 *)(object + 0x44) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "object",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_value_08003376",
            "code": "\nvoid updateValue_08003376(undefined *obj,undefined newValue,uint index)\n\n{\n  bool isOutOfRange;\n  \n  if (index < *(uint *)(obj + 8)) {\n    isOutOfRange = false;\n  }\n  else {\n    isOutOfRange = true;\n    if (*(code **)(obj + 100) != (code *)0x0) {\n      *obj = 1;\n      (**(code **)(obj + 100))(*(undefined4 *)(obj + 0x3c));\n      if (index < *(uint *)(obj + 8)) {\n        isOutOfRange = false;\n      }\n      else {\n        isOutOfRange = true;\n      }\n    }\n  }\n  if (!isOutOfRange) {\n    *(undefined *)(*(int *)(obj + 4) + index) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_value_08003376",
                "param_1": "obj",
                "param_2": "newValue",
                "param_3": "index",
                "bVar1": "isOutOfRange"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_080033a8",
            "code": "\nvoid copyAndShift_080033a8(undefined4 inputSize,uint byteCount,int dataArray)\n\n{\n  byte currentByte;\n  int outputIndex;\n  uint index;\n  \n  outputIndex = 0;\n  for (index = 0; index < byteCount; index = index + 2) {\n    currentByte = *(byte *)(dataArray + index);\n    *(byte *)(dataArray + outputIndex) = currentByte;\n    *(byte *)(dataArray + outputIndex) = *(char *)(dataArray + index + 1) << 7 | currentByte;\n    outputIndex = outputIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_080033a8",
                "param_1": "inputSize",
                "param_2": "byteCount",
                "param_3": "dataArray",
                "bVar1": "currentByte",
                "iVar2": "outputIndex",
                "uVar3": "index"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_080033cc",
            "code": "\nvoid process_input_080033cc(int input_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char first_char;\n  int result;\n  char *first_char_pointer;\n  \n  first_char_pointer = *(char **)(input_data + 4);\n  first_char = *first_char_pointer;\n  if (first_char == 'q') {\n    if (*(int *)(input_data + 0x68) != 0) {\n      result = copy_and_shift_080033a8(input_data,*(int *)(input_data + 0x18) + -1,first_char_pointer + 1,first_char_pointer,param4);\n      update_value_08003376(input_data,0,result + 1);\n      (**(code **)(input_data + 0x68))(*(undefined4 *)(input_data + 0x40),*(int *)(input_data + 4) + 1);\n      return;\n    }\n  }\n  else if (first_char == 'y') {\n    if (*(code **)(input_data + 0x70) != (code *)0x0) {\n      if (*(uint *)(input_data + 0x18) < 3) {\n        (**(code **)(input_data + 0x70))(*(undefined4 *)(input_data + 0x34),0,0);\n        return;\n      }\n      result = copy_and_shift_080033a8(input_data,*(uint *)(input_data + 0x18) - 3,first_char_pointer + 3,first_char_pointer,param4);\n      update_value_08003376(input_data,0,result + 3);\n      result = *(int *)(input_data + 4);\n      (**(code **)(input_data + 0x70))\n                (*(undefined4 *)(input_data + 0x34),*(undefined *)(result + 1),*(undefined *)(result + 2)\n                 ,result + 3);\n      return;\n    }\n  }\n  else if (*(code **)(input_data + 0x6c) != (code *)0x0) {\n    (**(code **)(input_data + 0x6c))\n              (*(undefined4 *)(input_data + 0x44),first_char,*(int *)(input_data + 0x18) + -1,first_char_pointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "first_char",
                "iVar2": "result",
                "pcVar3": "first_char_pointer"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_data_0800344a",
            "code": "\nvoid initializeData_0800344a(int dataPointer)\n\n{\n  uint count;\n  \n  *(undefined4 *)(dataPointer + 0x10) = 0;\n  *(undefined *)(dataPointer + 0xc) = 0;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  for (count = 0; count < *(uint *)(dataPointer + 8); count = count + 1) {\n    *(undefined *)(*(int *)(dataPointer + 4) + count) = 0;\n  }\n  *(undefined *)(dataPointer + 0x14) = 0;\n  *(undefined4 *)(dataPointer + 0x18) = 0;\n  if (*(code **)(dataPointer + 0x78) != (code *)0x0) {\n    (**(code **)(dataPointer + 0x78))(*(undefined4 *)(dataPointer + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "dataPointer",
                "uVar1": "count"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_input_08003474",
            "code": "\nvoid process_input_08003474(int input_ptr,uint input_value)\n\n{\n  byte byte_var;\n  \n  if (*(char *)(input_ptr + 0x14) != '\\0') {\n    if (input_value != 0xf7) {\n      update_value(input_ptr,input_value,*(undefined4 *)(input_ptr + 0x18));\n      *(int *)(input_ptr + 0x18) = *(int *)(input_ptr + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(input_ptr + 0x14) = 0;\n    process_input_08003474();\n    return;\n  }\n  if ((*(int *)(input_ptr + 0x10) == 0) || (0x7f < (int)input_value)) {\n    if ((int)input_value < 0xf0) {\n      *(byte *)(input_ptr + 0xd) = (byte)input_value & 0xf;\n      input_value = input_value & 0xf0;\n    }\n    if (input_value == 0xf0) {\n      *(undefined *)(input_ptr + 0x14) = 1;\n      *(undefined4 *)(input_ptr + 0x18) = 0;\n      return;\n    }\n    if (input_value < 0xf1) {\n      if (input_value != 0xc0) {\n        if (input_value < 0xc1) {\n          if (input_value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (input_value == 0xd0) goto LAB_0800359c;\n          if (input_value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(input_ptr + 0x10) = 2;\n        *(char *)(input_ptr + 0xc) = (char)input_value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(input_ptr + 0x10) = 1;\n      *(char *)(input_ptr + 0xc) = (char)input_value;\n      return;\n    }\n    if (input_value != 0xf9) {\n      if (0xf9 < input_value) {\n        if (input_value == 0xff) {\n          initialize_data(input_ptr);\n          return;\n        }\n        return;\n      }\n      if (1 < input_value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(input_ptr + 0x74) != (code *)0x0) {\n      (**(code **)(input_ptr + 0x74))(*(undefined4 *)(input_ptr + 0x38));\n    }\n  }\n  else {\n    *(int *)(input_ptr + 0x10) = *(int *)(input_ptr + 0x10) + -1;\n    update_value();\n    if ((*(int *)(input_ptr + 0x10) == 0) && (byte_var = *(byte *)(input_ptr + 0xc), byte_var != 0)) {\n      if (byte_var == 0xd0) {\n        if (*(code **)(input_ptr + 0x58) != (code *)0x0) {\n          (**(code **)(input_ptr + 0x58))\n                    (*(undefined4 *)(input_ptr + 0x28),*(undefined *)(input_ptr + 0xd),\n                     **(undefined **)(input_ptr + 4));\n        }\n      }\n      else if (byte_var < 0xd1) {\n        if (byte_var == 0x90) {\n          if (*(code **)(input_ptr + 0x50) != (code *)0x0) {\n            (**(code **)(input_ptr + 0x50))\n                      (*(undefined4 *)(input_ptr + 0x20),*(undefined *)(input_ptr + 0xd),\n                       (uint)(*(byte **)(input_ptr + 4))[1] + (uint)**(byte **)(input_ptr + 4) * 0x80);\n          }\n        }\n        else if ((byte_var == 0xc0) && (*(code **)(input_ptr + 0x54) != (code *)0x0)) {\n          (**(code **)(input_ptr + 0x54))\n                    (*(undefined4 *)(input_ptr + 0x24),*(undefined *)(input_ptr + 0xd),\n                     **(undefined **)(input_ptr + 4));\n        }\n      }\n      else if (byte_var == 0xf4) {\n        if (*(code **)(input_ptr + 0x5c) != (code *)0x0) {\n          (**(code **)(input_ptr + 0x5c))\n                    (*(undefined4 *)(input_ptr + 0x2c),(*(undefined **)(input_ptr + 4))[1],\n                     **(undefined **)(input_ptr + 4));\n        }\n      }\n      else if (byte_var == 0xf5) {\n        if (*(code **)(input_ptr + 0x60) != (code *)0x0) {\n          (**(code **)(input_ptr + 0x60))\n                    (*(undefined4 *)(input_ptr + 0x30),(*(undefined **)(input_ptr + 4))[1],\n                     **(undefined **)(input_ptr + 4));\n        }\n      }\n      else if ((byte_var == 0xe0) && (*(code **)(input_ptr + 0x4c) != (code *)0x0)) {\n        (**(code **)(input_ptr + 0x4c))\n                  (*(undefined4 *)(input_ptr + 0x1c),*(undefined *)(input_ptr + 0xd),\n                   (uint)(*(byte **)(input_ptr + 4))[1] + (uint)**(byte **)(input_ptr + 4) * 0x80);\n      }\n      *(undefined *)(input_ptr + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_ptr",
                "param_2": "input_value",
                "bVar1": "byte_var",
                "update_value_08003376": "update_value",
                "process_input_080033cc": "process_input",
                "initialize_data_0800344a": "initialize_data"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_and_update_device_080035b8",
            "code": "\nvoid initialize_and_update_device_080035b8(void)\n\n{\n  int condition_result;\n  uint data_value_divided;\n  undefined4 register_values [2];\n  undefined4 data_value;\n  undefined4 device_options;\n  undefined4 device_status;\n  undefined4 memory_offset;\n  undefined4 memory_size;\n  undefined4 status_flag;\n  undefined4 device_info [4];\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  \n  device_info[0] = 2;\n  param_1 = 1;\n  param_2 = 0x10;\n  param_3 = 2;\n  param_4 = 0;\n  param_5 = 0x380000;\n  condition_result = check_conditions_08005460(device_info);\n  if (condition_result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  device_options = 0xf;\n  device_status = 2;\n  memory_offset = 0;\n  memory_size = 0x400;\n  status_flag = 0;\n  condition_result = initialize_device_080058ac(&device_options);\n  if (condition_result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  register_values[0] = 2;\n  data_value = 0x8000;\n  condition_result = update_register_values_08005aa4(register_values);\n  if (condition_result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  data_value_divided = get_data_value_08005a1c();\n  check_param_08003fd8(data_value_divided / 1000);\n  update_status_flag_08004024(4);\n  update_memory_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_and_update_device_080035b8",
                "local_54": "register_values",
                "local_4c": "data_value",
                "local_44": "device_options",
                "local_40": "device_status",
                "local_3c": "memory_offset",
                "local_38": "memory_size",
                "local_34": "status_flag",
                "local_30": "device_info",
                "local_20": "param_1",
                "local_1c": "param_2",
                "local_14": "param_3",
                "local_10": "param_4",
                "local_c": "param_5",
                "iVar1": "condition_result",
                "uVar2": "data_value_divided"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  process_continuous_data_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_device_080036a2",
            "code": "\nvoid initialize_device_080036a2(void)\n\n{\n  initialize_device_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_device_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_character_index_080036ac",
            "code": "\nuint findCharacterIndex_080036ac(int inputValue)\n\n{\n  uint index;\n  \n  if ((uint)(inputValue << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (inputValue != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "inputValue",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "check_and_update_memory_080036d8",
            "code": "\nundefined4 checkAndUpdateMemory_080036d8(uint input)\n\n{\n  int result;\n  \n  result = check_param_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < input) {\n    return 1;\n  }\n  update_memory_08003f30(0xffffffff,input,0);\n  DAT_20000010 = input;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "check_and_update_memory_080036d8",
                "param_1": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_data_08003724",
            "code": "\n\n\nundefined4 initialize_data_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_data(3);\n  check_and_update_memory(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_data_08003724",
                "update_data_08003f0c": "update_data",
                "check_and_update_memory_080036d8": "check_and_update_memory"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_global_value_08003748",
            "code": "\nvoid updateGlobalValue_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_global_value_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_global_value_08003760",
            "code": "\nundefined4 get_global_value_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_global_value_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "check_and_update_flags_0800376c",
            "code": "\nundefined4 check_and_update_flags_0800376c(uint **input_data,uint param_value)\n\n{\n  int global_value_1;\n  uint calculated_value;\n  int value_threshold;\n  undefined4 result;\n  uint *data_ptr;\n  uint mul_result;\n  uint counter;\n  \n  counter = 0;\n  global_value_1 = get_global_value_08003760();\n  mul_result = DAT_20000018;\n  data_ptr = *input_data;\n  if ((data_ptr[2] & 0x100) == 0) {\n    if (((data_ptr[1] & 0x100) == 0) && ((data_ptr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**input_data & 2) != 0) goto LAB_0800387e;\n      } while ((param_value == 0xffffffff) ||\n              ((param_value != 0 && (value_threshold = get_global_value_08003760(), (uint)(value_threshold - global_value_1) <= param_value))));\n      input_data[10] = (uint *)((uint)input_data[10] | 4);\n      *(undefined *)(input_data + 9) = 0;\n      result = 3;\n    }\n    else {\n      calculated_value = calculate_value_08005bb8(2);\n      data_ptr = *input_data;\n      if (((data_ptr[4] & 0x24924924) == 0) && ((data_ptr[3] & 0x924924) == 0)) {\n        if ((data_ptr[4] & 0x12492492) == 0) {\n          if ((data_ptr[3] & 0x492492) == 0) {\n            value_threshold = 0x14;\n          }\n          else {\n            value_threshold = 0x29;\n          }\n        }\n        else {\n          value_threshold = 0x29;\n        }\n      }\n      else if (((data_ptr[4] & 0x12492492) == 0) && ((data_ptr[3] & 0x492492) == 0)) {\n        value_threshold = 0x54;\n      }\n      else if ((data_ptr[4] & 0x249249) == 0) {\n        if ((data_ptr[3] & 0x249249) == 0) {\n          value_threshold = 0x54;\n        }\n        else {\n          value_threshold = 0xfc;\n        }\n      }\n      else {\n        value_threshold = 0xfc;\n      }\n      mul_result = (mul_result / calculated_value) * value_threshold;\n      for (; counter <= mul_result && mul_result - counter != 0; counter = counter + 1) {\n        if ((param_value != 0xffffffff) &&\n           ((param_value == 0 || (value_threshold = get_global_value_08003760(), param_value < (uint)(value_threshold - global_value_1))))) {\n          input_data[10] = (uint *)((uint)input_data[10] | 4);\n          *(undefined *)(input_data + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **input_data = 0xffffffed;\n      input_data[10] = (uint *)((uint)input_data[10] | 0x200);\n      if (((*input_data)[2] & 0xe0000) == 0xe0000) {\n        if (input_data[3] == (uint *)0x0) {\n          input_data[10] = (uint *)((uint)input_data[10] & 0xfffffeff);\n          if (((uint)input_data[10] & 0x1000) == 0) {\n            input_data[10] = (uint *)((uint)input_data[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    input_data[10] = (uint *)((uint)input_data[10] | 0x20);\n    *(undefined *)(input_data + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "check_and_update_flags_0800376c",
                "param_1": "input_data",
                "param_2": "param_value",
                "iVar1": "global_value_1",
                "uVar2": "calculated_value",
                "iVar3": "value_threshold",
                "uVar4": "result",
                "puVar5": "data_ptr",
                "uVar6": "mul_result",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 getOffsetValue_080038dc(int *offsetPointer)\n\n{\n  return *(undefined4 *)(*offsetPointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "offsetPointer"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_settings_080038e4",
            "code": "\nundefined4 updateSettings_080038e4(int *settings,uint *values)\n\n{\n  undefined4 status;\n  uint index;\n  int counter;\n  \n  if (*(char *)(settings + 9) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(undefined *)(settings + 9) = 1;\n    index = values[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*settings + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*settings + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*settings + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*settings + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*settings + 0x10) =\n           values[2] << (index * 3 & 0xff) |\n           *(uint *)(*settings + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*settings + 0xc) =\n           values[2] << (index & 0xff) | *(uint *)(*settings + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*settings == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            status = 0;\n          }\n          else {\n            status = 0;\n          }\n        }\n        else {\n          status = 0;\n        }\n      }\n      else {\n        settings[10] = settings[10] | 0x20;\n        status = 1;\n      }\n    }\n    else {\n      status = 0;\n    }\n    *(undefined *)(settings + 9) = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_settings_080038e4",
                "param_1": "settings",
                "param_2": "values",
                "uVar1": "status",
                "uVar2": "index",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_offset_value_08003a1c",
            "code": "\nundefined4 getOffsetValue_08003a1c(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "verify_and_set_flags_08003a20",
            "code": "\nundefined4 verifyAndSetFlags_08003a20(int *pointer,undefined4 value)\n\n{\n  int result;\n  undefined4 returnValue;\n  int ptrValue;\n  uint loopCounter;\n  \n  ptrValue = *pointer;\n  if ((*(uint *)(ptrValue + 8) & 1) == 0) {\n    *(uint *)(ptrValue + 8) = *(uint *)(ptrValue + 8) | 1;\n    for (loopCounter = DAT_20000018 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    ptrValue = get_global_value_08003760(pointer,value,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*pointer + 8) & 1) != 0) {\n        return 0;\n      }\n      result = get_global_value_08003760();\n    } while ((uint)(result - ptrValue) < 3);\n    pointer[10] = pointer[10] | 0x10;\n    pointer[0xb] = pointer[0xb] | 1;\n    *(undefined *)(pointer + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "verify_and_set_flags_08003a20",
                "param_1": "pointer",
                "param_2": "value",
                "iVar1": "result",
                "iVar3": "ptrValue",
                "uVar2": "returnValue",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "verify_and_update_flags_08003aa0",
            "code": "\n\n\nint verify_and_update_flags_08003aa0(int *inputs)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(inputs + 9) != '\\x01') {\n    *(undefined *)(inputs + 9) = 1;\n    result = verify_and_set_flags();\n    if (result == 0) {\n      flag_value_10 = flag_value_10 & mask | 0x100;\n      ptr = (undefined4 *)*inputs;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        flag_value_10 = flag_value_10 | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          flag_value_10 = flag_value_10 & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        flag_value_10 = flag_value_10 & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          flag_value_10 = flag_value_10 & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((flag_value_10 & 0x1000U) == 0) {\n        value_2 = 0;\n      }\n      else {\n        value_2 = value_2 & 0xfffffff9;\n      }\n      *(undefined *)(inputs + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *inputs;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(inputs + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "verify_and_update_flags_08003aa0",
                "param_1": "inputs",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value",
                "verify_and_set_flags_08003a20": "verify_and_set_flags",
                "param_1[10]": "flag_value_10",
                "0xfffffcfeU": "mask",
                "param_1[0xb]": "value_2"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_and_modify_value_08003b8c",
            "code": "\nundefined4 checkAndModifyValue_08003b8c(int *data)\n\n{\n  int currentValue;\n  int initialValue;\n  \n  initialValue = *data;\n  if ((*(uint *)(initialValue + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(initialValue + 8) = *(uint *)(initialValue + 8) & 0xfffffffe;\n  initialValue = get_global_value_08003760();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    currentValue = get_global_value_08003760();\n  } while ((uint)(currentValue - initialValue) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_and_modify_value_08003b8c",
                "param_1": "data",
                "iVar1": "currentValue",
                "iVar2": "initialValue"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_configuration_08003bd8",
            "code": "\nundefined4 updateConfiguration_08003bd8(int *config)\n\n{\n  int result;\n  uint valueMask;\n  uint flag;\n  \n  if (config == (int *)0x0) {\n    return 1;\n  }\n  if (config[10] == 0) {\n    config[0xb] = 0;\n    *(undefined *)(config + 9) = 0;\n    updateBitsWrapper();\n  }\n  result = checkAndModifyValue(config);\n  if (((config[10] & 0x10U) == 0) && (result == 0)) {\n    config[10] = config[10] & 0xffffeefdU | 2;\n    valueMask = config[1] | config[7] | config[3] << 1;\n    if (config[2] == 0x100) {\n      flag = 0x100;\n    }\n    else {\n      flag = 0;\n      if (config[2] == 1) {\n        flag = 0x100;\n      }\n    }\n    if (config[5] == 1) {\n      if (config[3] == 0) {\n        flag = flag | (config[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        config[10] = config[10] | 0x20;\n        config[0xb] = config[0xb] | 1;\n      }\n    }\n    *(uint *)(*config + 4) = flag | *(uint *)(*config + 4) & 0xffff16ff;\n    *(uint *)(*config + 8) = *(uint *)(*config + 8) & 0xffe1f7fd | valueMask;\n    if ((config[2] == 0x100) || (config[2] == 1)) {\n      flag = (config[4] + -1) * 0x100000;\n    }\n    else {\n      flag = 0;\n    }\n    *(uint *)(*config + 0x2c) = flag | *(uint *)(*config + 0x2c) & 0xff0fffff;\n    if (valueMask != (*(uint *)(*config + 8) & 0xff1f0efe)) {\n      config[10] = config[10] & 0xffffffedU | 0x10;\n      config[0xb] = config[0xb] | 1;\n      return 1;\n    }\n    config[0xb] = 0;\n    config[10] = config[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  config[10] = config[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_configuration_08003bd8",
                "param_1": "config",
                "iVar1": "result",
                "uVar2": "valueMask",
                "uVar3": "flag",
                "update_bits_wrapper_08006ca8": "updateBitsWrapper",
                "check_and_modify_value_08003b8c": "checkAndModifyValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "modify_value_and_set_permissions_08003ce8",
            "code": "\nint modifyValueAndSetPermissions_08003ce8(int *param)\n\n{\n  int result;\n  \n  if (param == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    param[10] = param[10] | 2;\n    result = checkAndModifyValue();\n    if (result == 0) {\n      *(undefined4 *)*param = 0xffffffe0;\n      *(uint *)(*param + 4) = *(uint *)(*param + 4) & 0xff3f0000;\n      *(uint *)(*param + 8) = *(uint *)(*param + 8) & 0xff0106f0;\n      *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xff000000;\n      *(uint *)(*param + 0x10) = *(uint *)(*param + 0x10) & 0xc0000000;\n      *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xfffff000;\n      *(uint *)(*param + 0x18) = *(uint *)(*param + 0x18) & 0xfffff000;\n      *(uint *)(*param + 0x1c) = *(uint *)(*param + 0x1c) & 0xfffff000;\n      *(uint *)(*param + 0x20) = *(uint *)(*param + 0x20) & 0xfffff000;\n      *(uint *)(*param + 0x24) = *(uint *)(*param + 0x24) & 0xfffff000;\n      *(uint *)(*param + 0x28) = *(uint *)(*param + 0x28) & 0xfffff000;\n      *(uint *)(*param + 0x2c) = *(uint *)(*param + 0x2c) & 0xff000000;\n      *(uint *)(*param + 0x2c) = *(uint *)(*param + 0x2c) & 0xff000000;\n      *(uint *)(*param + 0x30) = *(uint *)(*param + 0x30) & 0xc0000000;\n      *(uint *)(*param + 0x34) = *(uint *)(*param + 0x34) & 0xc0000000;\n      *(uint *)(*param + 0x38) = *(uint *)(*param + 0x38) & 0xffc00000;\n      *(uint *)(*param + 0x38) = *(uint *)(*param + 0x38) & 0xffc00000;\n      setAccessPermissions(param);\n      param[0xb] = 0;\n      param[10] = 0;\n    }\n    *(undefined *)(param + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "modify_value_and_set_permissions_08003ce8",
                "param_1": "param",
                "iVar1": "result",
                "check_and_modify_value_08003b8c": "checkAndModifyValue",
                "set_access_permissions_08006d24": "setAccessPermissions"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_value_and_check_status_08003de4",
            "code": "\nint updateValueAndCheckStatus_08003de4(int value)\n\n{\n  int status;\n  \n  if (*(char *)(value + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(value + 0x24) = 1;\n  status = checkAndUpdateValue();\n  if (status == 0) {\n    *(uint *)(value + 0x28) = *(uint *)(value + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(value + 0x24) = 0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_value_and_check_status_08003de4",
                "param_1": "value",
                "iVar1": "status",
                "check_and_modify_value_08003b8c": "checkAndUpdateValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "process_param_08003e20",
            "code": "\nint processParam_08003e20(int *param)\n\n{\n  uint globalValue1;\n  int returnValue;\n  uint globalValue2;\n  int globalValue3;\n  int tempValue;\n  int count;\n  \n  if (*(char *)(param + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(param + 9) = 1;\n  returnValue = modifyValue();\n  if (returnValue == 0) {\n    param[10] = param[10] & 0xffffeefdU | 2;\n    globalValue1 = DAT_20000018;\n    globalValue2 = calculateValue(2);\n    for (count = globalValue1 / globalValue2 << 1; count != 0; count = count + -1) {\n    }\n    verifyAndSetFlags(param);\n    *(uint *)(*param + 8) = *(uint *)(*param + 8) | 8;\n    globalValue3 = getGlobalValue();\n    while (tempValue = *param, (*(uint *)(tempValue + 8) & 8) != 0) {\n      tempValue = getGlobalValue();\n      if (10 < (uint)(tempValue - globalValue3)) {\n        param[10] = param[10] & 0xffffffedU | 0x10;\n        *(undefined *)(param + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(tempValue + 8) = *(uint *)(tempValue + 8) | 4;\n    globalValue3 = getGlobalValue();\n    while ((*(uint *)(*param + 8) & 4) != 0) {\n      tempValue = getGlobalValue();\n      if (10 < (uint)(tempValue - globalValue3)) {\n        param[10] = param[10] & 0xffffffedU | 0x10;\n        *(undefined *)(param + 9) = 0;\n        return 1;\n      }\n    }\n    param[10] = param[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(param + 9) = 0;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "process_param_08003e20",
                "param_1": "param",
                "uVar1": "globalValue1",
                "iVar2": "returnValue",
                "uVar3": "globalValue2",
                "iVar4": "globalValue3",
                "iVar5": "tempValue",
                "local_14": "count",
                "check_and_modify_value_08003b8c": "modifyValue",
                "calculate_value_08005bb8": "calculateValue",
                "verify_and_set_flags_08003a20": "verifyAndSetFlags",
                "get_global_value_08003760": "getGlobalValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_data_08003f0c",
            "code": "\n\n\nvoid updateData_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_memory_08003f30",
            "code": "\n\n\nvoid updateMemory_08003f30(uint address,uint data1,uint data2)\n\n{\n  uint shiftAmount;\n  uint shiftCount;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftCount = 7 - shiftAmount;\n  if (3 < shiftCount) {\n    shiftCount = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (data1 & (1 << (shiftCount & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & data2;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_memory_08003f30",
                "param_1": "address",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "shiftAmount",
                "uVar2": "shiftCount"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_in_memory_08003f94",
            "code": "\nvoid setBitInMemory_08003f94(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_in_memory_08003f94",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n    synchronizeData(0xf);\n    synchronizeInstructions(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitIndex",
                "DataSynchronizationBarrier": "synchronizeData",
                "InstructionSynchronizationBarrier": "synchronizeInstructions"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "check_param_08003fd8",
            "code": "\n\n\nundefined4 check_param_08003fd8(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "check_param_08003fd8",
                "param_1": "value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_08004004",
            "code": "\nvoid setBit_08004004(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "param_1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_status_flag_08004024",
            "code": "\n\n\nvoid updateStatusFlag_08004024(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_status_flag_08004024",
                "param_1": "status"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "execute_initial_setup_08004046",
            "code": "\nvoid execute_initial_setup_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "execute_initial_setup_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_data_08004050",
            "code": "\n\n\nundefined4 initializeData_08004050(uint **data)\n\n{\n  uint *ptr;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    errorCode = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  ptr = *data;\n  if (ptr == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (ptr == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (ptr == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (ptr == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (ptr == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (ptr == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback != (uint *)0x0) {\n    (*(code *)callback)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_data_08004050",
                "param_1": "data",
                "puVar1": "ptr",
                "param_1[0xe]": "errorCode",
                "param_1[0xd]": "callback"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_bits_080040e8",
            "code": "\n\n\nvoid updateBits_080040e8(uint *bitsToUpdate,uint *bitValues)\n\n{\n  uint *newBitsToUpdate;\n  uint bitMask;\n  uint bitValue;\n  uint bitIndex;\n  uint value;\n  uint updatedBits;\n  int bitOffset;\n  int portIndex;\n  \n  updatedBits = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    bitValue = *bitValues & bitMask;\n    if (bitMask == bitValue) {\n      value = bitValues[1];\n      if (value == 0x12) {\n        updatedBits = bitValues[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          updatedBits = bitValues[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_0800423a;\n          if (value == 1) {\n            updatedBits = bitValues[3];\n          }\n        }\n        else if (value == 3) {\n          updatedBits = 0;\n        }\n        else if (value == 0x11) {\n          updatedBits = bitValues[3] + 4;\n        }\n      }\n      else if (value == 0x10210000) {\nLAB_0800423a:\n        if (bitValues[2] == 0) {\n          updatedBits = 4;\n        }\n        else if (bitValues[2] == 1) {\n          bitsToUpdate[4] = bitMask;\n          updatedBits = 8;\n        }\n        else {\n          bitsToUpdate[5] = bitMask;\n          updatedBits = 8;\n        }\n      }\n      else if (value < 0x10210001) {\n        if ((value == 0x10110000) || (value == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((value == 0x10310000) || ((value == 0x10320000 || (value == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = bitIndex;\n      newBitsToUpdate = bitsToUpdate;\n      if (0xff < bitValue) {\n        bitMask = bitIndex - 8;\n        newBitsToUpdate = bitsToUpdate + 1;\n      }\n      *newBitsToUpdate = *newBitsToUpdate & ~(0xf << (bitMask << 2 & 0xff)) | updatedBits << (bitMask << 2 & 0xff);\n      if ((bitValues[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitOffset = (bitIndex & 3) << 2;\n        if (bitsToUpdate == (uint *)0x40010800) {\n          portIndex = 0;\n        }\n        else if (bitsToUpdate == (uint *)0x40010c00) {\n          portIndex = 1;\n        }\n        else if (bitsToUpdate == (uint *)0x40011000) {\n          portIndex = 2;\n        }\n        else if (bitsToUpdate == (uint *)0x40011400) {\n          portIndex = 3;\n        }\n        else {\n          portIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bitOffset) | portIndex << bitOffset;\n        if ((bitValues[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if ((bitValues[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if ((bitValues[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if ((bitValues[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_bits_080040e8",
                "param_1": "bitsToUpdate",
                "param_2": "bitValues",
                "puVar1": "newBitsToUpdate",
                "uVar2": "bitMask",
                "uVar3": "bitValue",
                "uVar4": "bitIndex",
                "uVar5": "value",
                "uVar6": "updatedBits",
                "iVar7": "bitOffset",
                "iVar8": "portIndex"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_flag_080042d4",
            "code": "\nundefined4 checkBitFlag_080042d4(int inputValue,uint bitFlag)\n\n{\n  if ((bitFlag & *(uint *)(inputValue + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_flag_080042d4",
                "param_1": "inputValue",
                "param_2": "bitFlag"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "update_param_080042e2",
            "code": "\nvoid updateParam_080042e2(int ptr,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(ptr + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(ptr + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "update_param_080042e2",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_data_if_condition_met_080042f0",
            "code": "\n\n\nvoid update_data_if_condition_met_080042f0(uint input_value)\n\n{\n  if ((_DAT_40010414 & input_value) != 0) {\n    _DAT_40010414 = input_value;\n    process_updated_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_data_if_condition_met_080042f0",
                "param_1": "input_value",
                "check_and_process_data_08009094": "process_updated_data"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_param_value_0800430c",
            "code": "\nundefined4 updateParamValue_0800430c(int *paramArray)\n\n{\n  if (*(char *)((int)paramArray + 0x3e) == '@') {\n    if (paramArray[0x14] == 0) {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xffU | 1;\n    }\n  }\n  else if (paramArray[4] == 0x4000) {\n    if (*(char *)((int)paramArray + 0x3d) == '!') {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xffU | 1;\n    }\n  }\n  else if (paramArray[0x14] == 0) {\n    *(uint *)(*paramArray + 0x10) = (uint)(paramArray[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (paramArray[0x14] == 1) {\n    *(uint *)(*paramArray + 0x10) = (uint)(paramArray[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_param_value_0800430c",
                "param_1": "paramArray"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_byte_value_08004396",
            "code": "\nundefined4 set_byte_value_08004396(int *array_ptr)\n\n{\n  *(uint *)(*array_ptr + 0x10) = source_value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_byte_value_08004396",
                "param_1": "array_ptr",
                "param_1[0x11]": "source_value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "set_flags_080043a2",
            "code": "\nundefined4 setFlags_080043a2(uint **parameters)\n\n{\n  uint *ptr;\n  \n  ptr = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((ptr_1 != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((ptr_1 == (uint *)0x0) && (ptr_2 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      ptr_1 = (uint *)((int)ptr_1 + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (ptr == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          ptr = *parameters;\n          if ((ptr[1] & 0x800) == 0) {\n            *ptr = *ptr | 0x200;\n          }\n          else {\n            *ptr = *ptr & 0xfffffbff;\n          }\n        }\n        else if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        ptr = *parameters;\n        if ((ptr[1] & 0x800) != 0) {\n          ptr[1] = ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        ptr = *parameters;\n        if ((ptr[1] & 0x800) != 0) {\n          ptr[1] = ptr[1] | 0x1000;\n        }\n      }\n      ptr_1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "set_flags_080043a2",
                "param_1": "parameters",
                "puVar1": "ptr",
                "param_1[0x14]": "ptr_1",
                "param_1[4]": "ptr_2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_pointers_0800457c",
            "code": "\nundefined4 updatePointers_0800457c(int *pointers)\n\n{\n  byte *byteBuffer;\n  \n  if (*(short *)((int)pointers + 0x2a) != 0) {\n    byteBuffer = (byte *)pointers[9];\n    pointers[9] = (int)(byteBuffer + 1);\n    *(uint *)(*pointers + 0x10) = (uint)*byteBuffer;\n    *(short *)((int)pointers + 0x2a) = *(short *)((int)pointers + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_pointers_0800457c",
                "param_1": "pointers",
                "pbVar1": "byteBuffer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_pointer_0800459c",
            "code": "\nundefined4 updatePointer_0800459c(int *ptr)\n\n{\n  undefined *ptr1;\n  \n  if (*(short *)((int)ptr + 0x2a) != 0) {\n    ptr1 = (undefined *)ptr[9];\n    ptr[9] = (int)(ptr1 + 1);\n    *ptr1 = (char)*(undefined4 *)(*ptr + 0x10);\n    *(short *)((int)ptr + 0x2a) = *(short *)((int)ptr + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_pointer_0800459c",
                "param_1": "ptr",
                "puVar1": "ptr1",
                "param_1[9]": "ptr[9]"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_parameters_080045c0",
            "code": "\nundefined4 calculateParameters_080045c0(uint **parameters)\n\n{\n  bool isConditionMet;\n  uint shiftedDataValue;\n  uint *tempValue;\n  uint dividedValue;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  shiftedDataValue = get_shifted_data_value_08005a28();\n  if (parameters[1] < (uint *)0x186a1) {\n    if (shiftedDataValue < 2000000) {\n      isConditionMet = true;\n    }\n    else {\n      isConditionMet = false;\n    }\n  }\n  else {\n    isConditionMet = shiftedDataValue < 4000000;\n  }\n  if (isConditionMet) {\n    return 1;\n  }\n  dividedValue = shiftedDataValue / 1000000;\n  (*parameters)[1] = dividedValue;\n  if ((uint *)0x186a0 < parameters[1]) {\n    dividedValue = (dividedValue * 300) / 1000;\n  }\n  (*parameters)[8] = dividedValue + 1;\n  tempValue = parameters[1];\n  if (tempValue < (uint *)0x186a1) {\n    shiftedDataValue = (shiftedDataValue - 1) / (uint)((int)tempValue << 1) + 1 & 0xfff;\n    if (shiftedDataValue < 4) {\n      shiftedDataValue = 4;\n    }\n  }\n  else {\n    if (parameters[2] == (uint *)0x0) {\n      dividedValue = (shiftedDataValue - 1) / (uint)((int)tempValue * 3);\n    }\n    else {\n      dividedValue = (shiftedDataValue - 1) / (uint)((int)tempValue * 0x19);\n    }\n    if ((dividedValue + 1 & 0xfff) == 0) {\n      shiftedDataValue = 1;\n    }\n    else if (parameters[2] == (uint *)0x0) {\n      shiftedDataValue = (shiftedDataValue - 1) / (uint)((int)tempValue * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shiftedDataValue = (shiftedDataValue - 1) / (uint)((int)tempValue * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*parameters)[7] = shiftedDataValue;\n  **parameters = (uint)parameters[7] | (uint)parameters[8];\n  (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\n  (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\n  **parameters = **parameters | 1;\n  parameters[0x10] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_parameters_080045c0",
                "param_1": "parameters",
                "bVar1": "isConditionMet",
                "uVar2": "shiftedDataValue",
                "puVar3": "tempValue",
                "uVar4": "dividedValue"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_data_08004728",
            "code": "\nundefined4 processData_08004728(uint **data,uint *param2,uint *param3,undefined2 param4)\n\n{\n  undefined4 result;\n  uint *ptrData;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptrData = *data;\n      counter = counter + -1;\n    } while ((ptrData[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptrData & 1) == 0) {\n        *ptrData = *ptrData | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = param3;\n      *(undefined2 *)((int)data + 0x2a) = param4;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = param2;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "puVar2": "ptrData",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "validate_input_and_set_flags_080047f4",
            "code": "\nundefined4 validateInputAndSetFlags_080047f4(uint **dataStructure,uint *input1,uint *input2,undefined2 param4)\n\n{\n  undefined4 returnValue;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)dataStructure + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        dataStructure[0xc] = (uint *)0x0;\n        *(undefined *)((int)dataStructure + 0x3d) = 0x20;\n        *(undefined *)(dataStructure + 0xf) = 0;\n        return 3;\n      }\n      ptr = *dataStructure;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(dataStructure + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataStructure + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **dataStructure = **dataStructure & 0xfffff7ff;\n      *(undefined *)((int)dataStructure + 0x3d) = 0x22;\n      *(undefined *)((int)dataStructure + 0x3e) = 0x10;\n      returnValue = 0;\n      dataStructure[0x10] = (uint *)0x0;\n      dataStructure[9] = input2;\n      *(undefined2 *)((int)dataStructure + 0x2a) = param4;\n      dataStructure[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(dataStructure + 10) = *(undefined2 *)((int)dataStructure + 0x2a);\n      dataStructure[0x11] = input1;\n      **dataStructure = **dataStructure | 0x400;\n      **dataStructure = **dataStructure | 0x100;\n      *(undefined *)(dataStructure + 0xf) = 0;\n      (*dataStructure)[1] = (*dataStructure)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "validate_input_and_set_flags_080047f4",
                "param_1": "dataStructure",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "param4",
                "uVar1": "returnValue",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "validate_input_080048c8",
            "code": "\nundefined4 validate_input_080048c8(uint **input_data,uint *value_1,int value_2,uint *result)\n\n{\n  undefined4 status;\n  uint *ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (value_1 == (uint *)0x0) {\n      status = 1;\n    }\n    else if (value_2 == 0) {\n      status = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      ptr = *input_data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x29;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      status = 0;\n      param_1_value = (uint *)0x0;\n      param_2_value = value_1;\n      *(short *)((int)input_data + 0x2a) = (short)value_2;\n      param_4_value = result;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "param_1": "input_data",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "result",
                "uVar1": "status",
                "puVar2": "ptr",
                "param_1[0x10]": "param_1_value",
                "param_1[9]": "param_2_value",
                "param_1[0xb]": "param_4_value"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_input_08004954",
            "code": "\nundefined4 validate_input_08004954(uint **input_params,uint *data_ptr,int data_len,uint *result_ptr)\n\n{\n  undefined4 return_value;\n  uint *ptr;\n  \n  if (*(char *)((int)input_params + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      return_value = 1;\n    }\n    else if (data_len == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(input_params + 0xf) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(input_params + 0xf) = 1;\n      ptr = *input_params;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_params = **input_params & 0xfffff7ff;\n      *(undefined *)((int)input_params + 0x3d) = 0x2a;\n      *(undefined *)((int)input_params + 0x3e) = 0x20;\n      return_value = 0;\n      param_1_0x10 = (uint *)0x0;\n      param_1_9 = data_ptr;\n      *(short *)((int)input_params + 0x2a) = (short)data_len;\n      param_1_0xb = result_ptr;\n      *(undefined2 *)(input_params + 10) = *(undefined2 *)((int)input_params + 0x2a);\n      *(undefined *)(input_params + 0xf) = 0;\n      (*input_params)[1] = (*input_params)[1] | 0x700;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_params",
                "param_2": "data_ptr",
                "param_3": "data_len",
                "param_4": "result_ptr",
                "uVar1": "return_value",
                "puVar2": "ptr",
                "param_1[0x10]": "param_1_0x10",
                "param_1[9]": "param_1_9",
                "param_1[0xb]": "param_1_0xb"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_data_080049e0",
            "code": "\nundefined4 initializeData_080049e0(uint **dataPointer)\n\n{\n  uint *pointerToData;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  pointerToData = *dataPointer;\n  if ((*pointerToData & 1) == 0) {\n    *pointerToData = *pointerToData | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_data_080049e0",
                "param_1": "dataPointer",
                "puVar1": "pointerToData"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 processData_08004a24(int *inputArray)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePointer = (byte *)byteArray;\n    byteArray = (int)(bytePointer + 1);\n    *(uint *)(*inputArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      newValue = 0x21;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "inputArray",
                "cVar1": "charValue",
                "pbVar2": "bytePointer",
                "param_1[9]": "byteArray",
                "param_1[0xc]": "newValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_data_08004a76",
            "code": "\nundefined4 updateData_08004a76(int *data)\n\n{\n  char charValue;\n  undefined *ptrToData;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptrToData = (undefined *)data[9];\n    data[9] = (int)(ptrToData + 1);\n    *ptrToData = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_data_08004a76",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptrToData"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_input_08004ac2",
            "code": "\nundefined4 processInput_08004ac2(int *input,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined2 result;\n  uint flag;\n  \n  flag = *(uint *)(*input + 0x18);\n  if ((flag & 0x80) == 0) {\n    result = *(undefined2 *)(input + 3);\n  }\n  else {\n    result = *(undefined2 *)(input + 6);\n  }\n  validate_and_process_input_08007fa0(input,(*(uint *)(*input + 0x18) & 4) == 0,result,flag,value3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_input_08004ac2",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "result",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "initialize_and_execute_08004aec",
            "code": "\nundefined4 initialize_and_execute_08004aec(uint **parameters)\n\n{\n  if (((value_1 == (uint *)0x4) || (value_1 == (uint *)0x8)) &&\n     (*(char *)((int)parameters + 0x3d) == '(')) {\n    value_1 = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    value_2 = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initialize_and_execute_08004aec_08007ff0();\n  }\n  else if (*(char *)((int)parameters + 0x3d) == '!') {\n    value_1 = (uint *)0xffff0000;\n    value_2 = (uint *)0x21;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "initialize_and_execute_08004aec",
                "param_1": "parameters",
                "param_1[0xb]": "value_1",
                "param_1[0xc]": "value_2"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "decode_and_execute_08004b82",
            "code": "\nundefined4 decode_and_execute_08004b82(uint **input_ptr)\n\n{\n  char char1;\n  uint *ptr_var2;\n  \n  char1 = *(char *)((int)input_ptr + 0x3d);\n  ptr_var2 = input_ptr[0xb];\n  if ((*(short *)(input_ptr + 10) == 0) && (char1 == '!')) {\n    if ((ptr_var2 == (uint *)0x4) || ((ptr_var2 == (uint *)0x8 || (ptr_var2 == (uint *)0xffff0000)))) {\n      (*input_ptr)[1] = (*input_ptr)[1] & 0xfffff8ff;\n      **input_ptr = **input_ptr | 0x200;\n      input_ptr[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n      if (*(char *)((int)input_ptr + 0x3e) == '@') {\n        *(undefined *)((int)input_ptr + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)input_ptr + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*input_ptr)[1] = (*input_ptr)[1] & 0xfffff8ff;\n      input_ptr[0xc] = (uint *)0x11;\n      *(undefined *)((int)input_ptr + 0x3e) = 0;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((char1 == '!') || ((*(char *)((int)input_ptr + 0x3e) == '@' && (char1 == '\\\"')))) {\n    if (*(short *)((int)input_ptr + 0x2a) == 0) {\n      (*input_ptr)[1] = (*input_ptr)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_ptr + 0x3e) == '@') {\n      if (input_ptr[0x14] == (uint *)0x0) {\n        if (input_ptr[0x13] == (uint *)0x1) {\n          (*input_ptr)[4] = (uint)input_ptr[0x12] & 0xff;\n          input_ptr[0x14] = (uint *)((int)input_ptr[0x14] + 2);\n        }\n        else {\n          (*input_ptr)[4] = (uint)((int)input_ptr[0x12] << 0x10) >> 0x18;\n          input_ptr[0x14] = (uint *)((int)input_ptr[0x14] + 1);\n        }\n      }\n      else if (input_ptr[0x14] == (uint *)0x1) {\n        (*input_ptr)[4] = (uint)input_ptr[0x12] & 0xff;\n        input_ptr[0x14] = (uint *)((int)input_ptr[0x14] + 1);\n      }\n      else if (input_ptr[0x14] == (uint *)0x2) {\n        if (*(char *)((int)input_ptr + 0x3d) == '\\\"') {\n          **input_ptr = **input_ptr | 0x100;\n        }\n        else if (*(char *)((int)input_ptr + 0x3d) == '!') {\n          ptr_var2 = input_ptr[9];\n          input_ptr[9] = (uint *)((int)ptr_var2 + 1);\n          (*input_ptr)[4] = (uint)*(byte *)ptr_var2;\n          *(short *)((int)input_ptr + 0x2a) = *(short *)((int)input_ptr + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr_var2 = input_ptr[9];\n      input_ptr[9] = (uint *)((int)ptr_var2 + 1);\n      (*input_ptr)[4] = (uint)*(byte *)ptr_var2;\n      *(short *)((int)input_ptr + 0x2a) = *(short *)((int)input_ptr + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "decode_and_execute_08004b82",
                "param_1": "input_ptr",
                "cVar1": "char1",
                "puVar2": "ptr_var2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_param_08004ccc",
            "code": "\nundefined4 processParam_08004ccc(uint **paramList)\n\n{\n  uint *ptr;\n  \n  ptr = paramList[0xb];\n  if (*(char *)(intPtr + 0x3d) == '!') {\n    if (*(short *)(intPtr + 0x2a) == 0) {\n      if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) || (ptr == (uint *)0xffff0000)) {\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        **paramList = **paramList | 0x200;\n        paramPtr = (uint *)0x0;\n        *(undefined *)(intPtr + 0x3d) = 0x20;\n        if (*(char *)(intPtr + 0x3e) == '@') {\n          *(undefined *)(intPtr + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)(intPtr + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        paramPtr = (uint *)0x11;\n        *(undefined *)(intPtr + 0x3e) = 0;\n        *(undefined *)(intPtr + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      ptr = ptrList;\n      ptrList = (uint *)((int)ptr + 1);\n      (*paramList)[4] = (uint)*(byte *)ptr;\n      *(short *)(intPtr + 0x2a) = *(short *)(intPtr + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_param_08004ccc",
                "param_1": "paramList",
                "puVar1": "ptr",
                "param_1[0xc]": "paramPtr",
                "(int)param_1": "intPtr",
                "param_1[9]": "ptrList"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "update_permissions_08004d6c",
            "code": "\nundefined4 updatePermissions_08004d6c(uint **permissions)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)permissions + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)permissions + 0x2a) < 4) {\n      if (*(ushort *)((int)permissions + 0x2a) - 2 < 2) {\n        if (permissions[0xb] == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions & 0xfffffbff;\n          **permissions = **permissions | 0x800;\n        }\n        (*permissions)[1] = (*permissions)[1] & 0xfffffbff;\n      }\n      else {\n        if (permissions[0xb] == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions & 0xfffffbff;\n        }\n        (*permissions)[1] = (*permissions)[1] & 0xfffff8ff;\n        tempPtr = permissions[9];\n        permissions[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*permissions)[4];\n        *(short *)((int)permissions + 0x2a) = *(short *)((int)permissions + 0x2a) + -1;\n        *(undefined *)((int)permissions + 0x3d) = 0x20;\n        permissions[0xc] = (uint *)0x0;\n        if (*(char *)((int)permissions + 0x3e) == '@') {\n          *(undefined *)((int)permissions + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)permissions + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempPtr = permissions[9];\n      permissions[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*permissions)[4];\n      *(short *)((int)permissions + 0x2a) = *(short *)((int)permissions + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "update_permissions_08004d6c",
                "param_1": "permissions",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_input_08004e3c",
            "code": "\nundefined4 process_input_08004e3c(uint **input_data)\n\n{\n  uint *ptr_value;\n  \n  ptr_value = ptr_array_value_1;\n  if (*(short *)((int)input_data + 0x2a) == 3) {\n    if (((ptr_value == (uint *)0x4) || (ptr_value == (uint *)0x8)) || (ptr_value == (uint *)0xffff0000)) {\n      **input_data = **input_data & 0xfffffbff;\n    }\n    ptr_value = ptr_array_value_2;\n    ptr_array_value_2 = (uint *)((int)ptr_value + 1);\n    *(char *)ptr_value = (char)(*input_data)[4];\n    *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)input_data + 0x2a) == 2) {\n    if (((ptr_value == (uint *)0x4) || (ptr_value == (uint *)0x8)) || (ptr_value == (uint *)0xffff0000)) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffcff;\n      **input_data = **input_data | 0x200;\n    }\n    else {\n      if (ptr_value == (uint *)0x2) {\n        **input_data = **input_data | 0x400;\n      }\n      else {\n        **input_data = **input_data & 0xfffffbff;\n      }\n      (*input_data)[1] = (*input_data)[1] & 0xfffffcff;\n    }\n    ptr_value = ptr_array_value_2;\n    ptr_array_value_2 = (uint *)((int)ptr_value + 1);\n    *(char *)ptr_value = (char)(*input_data)[4];\n    *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    ptr_value = ptr_array_value_2;\n    ptr_array_value_2 = (uint *)((int)ptr_value + 1);\n    *(char *)ptr_value = (char)(*input_data)[4];\n    *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    *(undefined *)((int)input_data + 0x3d) = 0x20;\n    ptr_array_value_3 = (uint *)0x0;\n    if (*(char *)((int)input_data + 0x3e) == '@') {\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    ptr_value = ptr_array_value_2;\n    ptr_array_value_2 = (uint *)((int)ptr_value + 1);\n    *(char *)ptr_value = (char)(*input_data)[4];\n    *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_input_08004e3c",
                "param_1": "input_data",
                "puVar1": "ptr_value",
                "param_1[0xb]": "ptr_array_value_1",
                "param_1[9]": "ptr_array_value_2",
                "param_1[0xc]": "ptr_array_value_3"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_and_execute_08004f3c",
            "code": "\nvoid initializeAndExecute_08004f3c(uint **data)\n\n{\n  int returnValue;\n  uint *ptrVariable2;\n  uint *ptrVariable3;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptrVariable3 = *data;\n  if ((ptrVariable3[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptrVariable3[5] & 0x40) != 0) {\n        ptrVariable2 = data[9];\n        data[9] = (uint *)((int)ptrVariable2 + 1);\n        *(char *)ptrVariable2 = (char)ptrVariable3[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08004f3a(data);\n    }\n    else {\n      if ((ptrVariable3[5] & 0x40) != 0) {\n        ptrVariable2 = data[9];\n        data[9] = (uint *)((int)ptrVariable2 + 1);\n        *(char *)ptrVariable2 = (char)ptrVariable3[4];\n      }\n      check_and_initialize_data_08008020(data);\n    }\n  }\n  else {\n    ptrVariable3[1] = ptrVariable3[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&LAB_080053cc_1;\n      returnValue = initialize_data_08004050(data[0xe]);\n      if (returnValue != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptrVariable3 = data[9];\n          data[9] = (uint *)((int)ptrVariable3 + 1);\n          *(char *)ptrVariable3 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&LAB_080053cc_1;\n      returnValue = initialize_data_08004050(data[0xd]);\n      if (returnValue != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    initialize_and_execute_08007ff0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_and_execute_08004f3c",
                "param_1": "data",
                "iVar1": "returnValue",
                "puVar2": "ptrVariable2",
                "puVar3": "ptrVariable3"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_parameter_08005084",
            "code": "\nundefined4 processParameter_08005084(uint **param)\n\n{\n  char charValue;\n  uint *ptrVar2;\n  uint *ptrVar3;\n  \n  charValue = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptrVar2 = *param;\n  if ((ptrVar2[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptrVar2[5] & 4) != 0) {\n      ptrVar3 = param[9];\n      param[9] = (uint *)((int)ptrVar3 + 1);\n      *(char *)ptrVar3 = (char)ptrVar2[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptrVar2 = param[9];\n      param[9] = (uint *)((int)ptrVar2 + 1);\n      *(char *)ptrVar2 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      initialize_and_execute_08007ff0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    initialize_and_execute_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_parameter_08005084",
                "param_1": "param",
                "cVar1": "charValue",
                "puVar2": "ptrVar2",
                "puVar3": "ptrVar3"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_parameter_permissions_08005188",
            "code": "\nvoid processParameterPermissions_08005188(int *param)\n\n{\n  int ptrValue;\n  uint paramFlags;\n  uint permissionFlags;\n  uint dataFlags;\n  \n  ptrValue = *param;\n  dataFlags = *(uint *)(ptrValue + 0x18);\n  paramFlags = *(uint *)(ptrValue + 0x14);\n  permissionFlags = *(uint *)(ptrValue + 4);\n  if ((*(char *)((int)param + 0x3e) == '\\x10') || (*(char *)((int)param + 0x3e) == '@')) {\n    if (((paramFlags & 0x10001) == 0) || ((permissionFlags & 0x200) == 0)) {\n      if (((paramFlags & 0x10008) == 0) || ((permissionFlags & 0x200) == 0)) {\n        if (((paramFlags & 0x10002) != 0) && ((permissionFlags & 0x200) != 0)) {\n          setFlags(param);\n        }\n      }\n      else {\n        setByteValue(param);\n      }\n    }\n    else {\n      updateParamValue(param);\n    }\n    if ((dataFlags & 0x100004) == 0) {\n      if ((((paramFlags & 0x10040) != 0) && ((permissionFlags & 0x400) != 0)) && ((paramFlags & 0x10004) == 0)) {\n        updatePermissions(param);\n        return;\n      }\n      if (((paramFlags & 0x10004) != 0) && ((permissionFlags & 0x200) != 0)) {\n        processInput(param);\n        return;\n      }\n    }\n    else {\n      if ((((paramFlags & 0x10080) != 0) && ((permissionFlags & 0x400) != 0)) && ((paramFlags & 0x10004) == 0)) {\n        decodeAndExecute(param);\n        return;\n      }\n      if (((paramFlags & 0x10004) != 0) && ((permissionFlags & 0x200) != 0)) {\n        processParam(param);\n        return;\n      }\n    }\n  }\n  else {\n    if (((paramFlags & 0x10002) != 0) && ((permissionFlags & 0x200) != 0)) {\n      processInput();\n      return;\n    }\n    if (((paramFlags & 0x10010) != 0) && ((permissionFlags & 0x200) != 0)) {\n      processParameter(param);\n      return;\n    }\n    if ((dataFlags & 0x100004) == 0) {\n      if ((((paramFlags & 0x10040) != 0) && ((permissionFlags & 0x400) != 0)) && ((paramFlags & 0x10004) == 0)) {\n        updateData(param);\n        return;\n      }\n      if (((paramFlags & 0x10004) != 0) && ((permissionFlags & 0x200) != 0)) {\n        updatePointer(param);\n      }\n    }\n    else {\n      if ((((paramFlags & 0x10080) != 0) && ((permissionFlags & 0x400) != 0)) && ((paramFlags & 0x10004) == 0)) {\n        processData(param);\n        return;\n      }\n      if (((paramFlags & 0x10004) != 0) && ((permissionFlags & 0x200) != 0)) {\n        updatePointers(param);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_parameter_permissions_08005188",
                "param_1": "param",
                "iVar1": "ptrValue",
                "uVar2": "paramFlags",
                "uVar3": "permissionFlags",
                "uVar4": "dataFlags",
                "set_flags_080043a2": "setFlags",
                "set_byte_value_08004396": "setByteValue",
                "update_param_value_0800430c": "updateParamValue",
                "update_permissions_08004d6c": "updatePermissions",
                "process_input_08004e3c": "processInput",
                "decode_and_execute_08004b82": "decodeAndExecute",
                "process_param_08004ccc": "processParam",
                "process_input_08004ac2": "processInput",
                "process_parameter_08005084": "processParameter",
                "update_data_08004a76": "updateData",
                "update_pointer_0800459c": "updatePointer",
                "process_data_08004a24": "processData",
                "update_pointers_0800457c": "updatePointers"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_flags_080052f0",
            "code": "\nvoid updateFlags_080052f0(uint **pointerArray)\n\n{\n  char characterVar1;\n  uint *pointerVar2;\n  uint var3;\n  uint var4;\n  \n  pointerVar2 = *pointerArray;\n  var3 = pointerVar2[5];\n  var4 = pointerVar2[1];\n  if (((var3 & 0x10100) != 0) && ((var4 & 0x100) != 0)) {\n    pointerArray[0x10] = (uint *)((uint)pointerArray[0x10] | 1);\n    pointerVar2[5] = 0xfffffeff;\n    **pointerArray = **pointerArray | 0x8000;\n  }\n  if (((var3 & 0x10200) != 0) && ((var4 & 0x100) != 0)) {\n    pointerArray[0x10] = (uint *)((uint)pointerArray[0x10] | 2);\n    (*pointerArray)[5] = 0xfffffdff;\n  }\n  if (((var3 & 0x10400) != 0) && ((var4 & 0x100) != 0)) {\n    characterVar1 = *(char *)((int)pointerArray + 0x3d);\n    if (((*(char *)((int)pointerArray + 0x3e) == ' ') && (*(short *)((int)pointerArray + 0x2a) == 0)) &&\n       (((characterVar1 == '!' || (characterVar1 == ')')) || ((characterVar1 == '(' && (pointerArray[0xc] == (uint *)0x21)))))) {\n      initialize_and_execute_08004aec(pointerArray);\n    }\n    else {\n      pointerArray[0x10] = (uint *)((uint)pointerArray[0x10] | 4);\n      if (*(char *)((int)pointerArray + 0x3e) == '\\x10') {\n        **pointerArray = **pointerArray | 0x200;\n      }\n      (*pointerArray)[5] = 0xfffffbff;\n    }\n  }\n  if (((var3 & 0x10800) != 0) && ((var4 & 0x100) != 0)) {\n    pointerArray[0x10] = (uint *)((uint)pointerArray[0x10] | 8);\n    (*pointerArray)[5] = 0xfffff7ff;\n  }\n  if (pointerArray[0x10] != (uint *)0x0) {\n    initialize_and_execute_08004f3c(pointerArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_flags_080052f0",
                "param_1": "pointerArray",
                "cVar1": "characterVar1",
                "puVar2": "pointerVar2",
                "uVar3": "var3",
                "uVar4": "var4"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_from_offset_0800542a",
            "code": "\nundefined getByteFromOffset_0800542a(int offset)\n\n{\n  return *(undefined *)(offset + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_from_offset_0800542a",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_pointer_at_offset_08005430",
            "code": "\nundefined4 getPointerAtOffset_08005430(int inputPointer)\n\n{\n  return *(undefined4 *)(inputPointer + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_pointer_at_offset_08005430",
                "param_1": "inputPointer"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "calculate_iterations_08005434",
            "code": "\nvoid calculateIterations_08005434(int input)\n\n{\n  bool isResultNonZero;\n  int result;\n  \n  result = input * (DAT_20000018 / 8000);\n  do {\n    isResultNonZero = result != 0;\n    result = result + -1;\n  } while (isResultNonZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "calculate_iterations_08005434",
                "param_1": "input",
                "local_4": "result",
                "bVar1": "isResultNonZero"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "check_conditions_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkConditions_08005460(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool isSet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        startTime = get_global_value_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_global_value_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_global_value_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_global_value_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      calculate_iterations_08005434(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_value_08003760();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_global_value_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_global_value_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = get_global_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        startTime = get_global_value_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_global_value_08003760();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = get_global_value_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = get_global_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_global_value_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "check_conditions_08005460",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isSet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_delay_08005840",
            "code": "\n\n\nuint calculateDelay_08005840(void)\n\n{\n  uint uVar1;\n  undefined2 temp;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  temp = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&temp - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "local_1c": "temp",
                "uStack_18": "value1",
                "uStack_14": "value2",
                "uStack_10": "value3",
                "uStack_c": "value4"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_device_080058ac",
            "code": "\n\n\nundefined4 initializeDevice_080058ac(uint *deviceSettings,uint requestedBufferSize)\n\n{\n  int iVar1;\n  int iVar2;\n  uint deviceType;\n  \n  if ((_DAT_40022000 & 7) < requestedBufferSize) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | requestedBufferSize;\n    if (requestedBufferSize != (requestedBufferSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*deviceSettings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | deviceSettings[2];\n  }\n  if ((*deviceSettings & 1) != 0) {\n    deviceType = deviceSettings[1];\n    if (deviceType == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((deviceType != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = deviceType | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getCurrentTime();\n    if (deviceSettings[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getCurrentTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (deviceSettings[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getCurrentTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getCurrentTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (requestedBufferSize < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | requestedBufferSize;\n    if (requestedBufferSize != (requestedBufferSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*deviceSettings & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | deviceSettings[3];\n  }\n  if ((*deviceSettings & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | deviceSettings[4] << 3;\n  }\n  deviceType = calculateDelay();\n  DAT_20000018 = deviceType >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  checkAndUpdateMemory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_device_080058ac",
                "param_1": "deviceSettings",
                "param_2": "requestedBufferSize",
                "get_global_value_08003760": "getCurrentTime",
                "uVar3": "deviceType",
                "calculate_delay_08005840": "calculateDelay",
                "check_and_update_memory_080036d8": "checkAndUpdateMemory"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "update_memory_080058d2",
            "code": "\n\n\nundefined4 updateMemory_080058d2(uint *flags,uint value)\n\n{\n  int startTime;\n  int currentTime;\n  uint delay;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    delay = flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    startTime = getCurrentTime();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculateDelay();\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  checkAndUpdateMemory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "update_memory_080058d2",
                "param_1": "flags",
                "param_2": "value",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "delay",
                "get_global_value_08003760": "getCurrentTime",
                "calculate_delay_08005840": "calculateDelay",
                "check_and_update_memory_080036d8": "checkAndUpdateMemory"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_value_08005a1c",
            "code": "\nundefined4 get_data_value_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_value_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_data_value_08005a28",
            "code": "\n\n\nuint get_shifted_data_value_08005a28(void)\n\n{\n  uint dataValue;\n  \n  dataValue = retrieveDataValue();\n  return dataValue >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_data_value_08005a28",
                "uVar1": "dataValue",
                "get_data_value_08005a1c": "retrieveDataValue"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "extracted_data_shifted_value_08005a48",
            "code": "\n\n\nuint extracted_data_shifted_value_08005a48(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "extracted_data_shifted_value_08005a48",
                "uVar1": "data_value",
                "get_data_value_08005a1c": "get_data_value"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_parameters_08005a68",
            "code": "\n\n\nvoid initialize_parameters_08005a68(undefined4 *output_array,uint *input_data)\n\n{\n  *output_array = 0xf;\n  output_array[1] = _DAT_40021004 & 3;\n  output_array[2] = _DAT_40021004 & 0xf0;\n  output_array[3] = _DAT_40021004 & 0x700;\n  output_array[4] = _DAT_40021004 >> 3 & 0x700;\n  *input_data = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_parameters_08005a68",
                "param_1": "output_array",
                "param_2": "input_data"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_register_values_08005aa4",
            "code": "\n\n\nundefined4 updateRegisterValues_08005aa4(uint *registerValues)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int initialValue;\n  int currentValue;\n  bool shouldUpdate;\n  \n  if ((*registerValues & 1) != 0) {\n    shouldUpdate = (_DAT_4002101c & 0x10000000) == 0;\n    if (shouldUpdate) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_global_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_global_value_08003760();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (registerValues[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        initialValue = get_global_value_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_global_value_08003760();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | registerValues[1];\n    if (shouldUpdate) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*registerValues & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | registerValues[2];\n  }\n  if ((*registerValues & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | registerValues[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_register_values_08005aa4",
                "param_1": "registerValues",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "shouldUpdate"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_value_08005bb8",
            "code": "\n\n\nuint calculateValue_08005bb8(int input)\n\n{\n  uint result;\n  undefined2 constant;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant3 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  constant = 0x201;\n  if (input == 2) {\n    result = extracted_data_shifted_value_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&constant - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "constant",
                "uStack_20": "constant1",
                "uStack_1c": "constant2",
                "uStack_18": "constant3",
                "uStack_14": "constant4"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid check_and_execute_callback_08005cb4(uint **input_ptr)\n\n{\n  if (((**input_ptr & 2) != 0) && (((*input_ptr)[1] & 2) != 0)) {\n    execute_callback_function_080073c0();\n    (*input_ptr)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)input_ptr + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "param_1": "input_ptr"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_data_08005cec",
            "code": "\nvoid updateData_08005cec(int baseAddress,uint *data)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  updatedValue3 = *data;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xfffffffd | data[2];\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | data[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | data[5] | data[6];\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(baseAddress + 0x34) = data[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "baseAddress",
                "param_2": "data",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_params_08005d48",
            "code": "\nvoid updateParams_08005d48(int baseAddress,uint *paramsArray)\n\n{\n  uint modifiedParam1;\n  uint modifiedParam2;\n  uint modifiedParam3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  modifiedParam2 = *(uint *)(baseAddress + 4);\n  modifiedParam3 = *paramsArray;\n  modifiedParam1 = *(uint *)(baseAddress + 0x20) & 0xfffffdff | paramsArray[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    modifiedParam1 = (modifiedParam1 & 0xfffff7ff | paramsArray[3] << 8) & 0xfffffbff;\n    modifiedParam2 = modifiedParam2 & 0xffffcfff | paramsArray[5] << 4 | paramsArray[6] << 4;\n  }\n  *(uint *)(baseAddress + 4) = modifiedParam2;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | modifiedParam3;\n  *(uint *)(baseAddress + 0x3c) = paramsArray[1];\n  *(uint *)(baseAddress + 0x20) = modifiedParam1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_params_08005d48",
                "param_1": "baseAddress",
                "param_2": "paramsArray",
                "uVar1": "modifiedParam1",
                "uVar2": "modifiedParam2",
                "uVar3": "modifiedParam3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_params_08005dac",
            "code": "\nvoid updateParams_08005dac(int baseAddress,int *paramsArray)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  value1 = *(uint *)(baseAddress + 4);\n  value2 = *paramsArray;\n  value3 = paramsArray[2];\n  if (baseAddress == 0x40012c00) {\n    value1 = value1 & 0xffffbfff | paramsArray[5] << 6;\n  }\n  *(uint *)(baseAddress + 4) = value1;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(baseAddress + 0x40) = paramsArray[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_params_08005dac",
                "param_1": "baseAddress",
                "param_2": "paramsArray",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "update_memory_flags_08005df4",
            "code": "\nvoid updateMemoryFlags_08005df4(uint **inputPointer)\n\n{\n  uint *currentPointer;\n  \n  *(undefined *)((int)inputPointer + 0x3d) = 2;\n  currentPointer = *inputPointer;\n  if ((currentPointer[8] & 0x1111) == 0) {\n    if ((currentPointer[8] & 0x444) == 0) {\n      *currentPointer = *currentPointer & 0xfffffffe;\n    }\n  }\n  update_memory_flags_08007710(inputPointer);\n  *(undefined *)((int)inputPointer + 0x3d) = 0;\n  *(undefined *)(inputPointer + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "update_memory_flags_08005df4",
                "param_1": "inputPointer",
                "puVar1": "currentPointer"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "initialize_memory_and_flags_08005e2e",
            "code": "\nvoid initialize_memory_and_flags_08005e2e(uint **memory_and_flags)\n\n{\n  uint *pointer;\n  \n  *(undefined *)((int)memory_and_flags + 0x3d) = 2;\n  pointer = *memory_and_flags;\n  if ((pointer[8] & 0x1111) == 0) {\n    if ((pointer[8] & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  initialize_memory_flags_08007110(memory_and_flags);\n  *(undefined *)((int)memory_and_flags + 0x3d) = 0;\n  *(undefined *)(memory_and_flags + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "initialize_memory_and_flags_08005e2e",
                "param_1": "memory_and_flags",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "execute_actions_08005e6e",
            "code": "\nvoid executeActions_08005e6e(int *inputParams)\n\n{\n  int var1;\n  \n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 2) != 0) && ((*(uint *)(var1 + 0xc) & 2) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffffd;\n    *(undefined *)(inputParams + 7) = 1;\n    if ((*(uint *)(*inputParams + 0x18) & 3) == 0) {\n      execute_function_if_needed_0800771c();\n      FUNC_08005e6a(inputParams);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 4) != 0) && ((*(uint *)(var1 + 0xc) & 4) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffffb;\n    *(undefined *)(inputParams + 7) = 2;\n    if ((*(uint *)(*inputParams + 0x18) & 0x300) == 0) {\n      execute_function_if_needed_0800771c(inputParams);\n      FUNC_08005e6a(inputParams);\n    }\n    else {\n      FUNC_08005e68(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 8) != 0) && ((*(uint *)(var1 + 0xc) & 8) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffff7;\n    *(undefined *)(inputParams + 7) = 4;\n    if ((*(uint *)(*inputParams + 0x1c) & 3) == 0) {\n      execute_function_if_needed_0800771c(inputParams);\n      FUNC_08005e6a(inputParams);\n    }\n    else {\n      FUNC_08005e68(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 0x10) != 0) && ((*(uint *)(var1 + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffffef;\n    *(undefined *)(inputParams + 7) = 8;\n    if ((*(uint *)(*inputParams + 0x1c) & 0x300) == 0) {\n      execute_function_if_needed_0800771c(inputParams);\n      FUNC_08005e6a(inputParams);\n    }\n    else {\n      FUNC_08005e68(inputParams);\n    }\n    *(undefined *)(inputParams + 7) = 0;\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 1) != 0) && ((*(uint *)(var1 + 0xc) & 1) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xfffffffe;\n    execute_callback_function_08007736(inputParams);\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 0x80) != 0) && ((*(uint *)(var1 + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffff7f;\n    FUNC_080064ae(inputParams);\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 0x40) != 0) && ((*(uint *)(var1 + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(inputParams);\n  }\n  var1 = *inputParams;\n  if (((*(uint *)(var1 + 0x10) & 0x20) != 0) && ((*(uint *)(var1 + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(var1 + 0x10) = 0xffffffdf;\n    FUNC_080064ac(inputParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "execute_actions_08005e6e",
                "param_1": "inputParams",
                "iVar1": "var1"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryPtr,uint *dataPtr)\n\n{\n  uint value;\n  \n  value = *memoryPtr;\n  if ((((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n      (memoryPtr == (uint *)0x40000400)) || (memoryPtr == (uint *)0x40000800)) {\n    value = value & 0xffffff8f | dataPtr[1];\n  }\n  if (((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n     ((memoryPtr == (uint *)0x40000400 || (memoryPtr == (uint *)0x40000800)))) {\n    value = value & 0xfffffcff | dataPtr[3];\n  }\n  *memoryPtr = value & 0xffffff7f | dataPtr[5];\n  memoryPtr[0xb] = dataPtr[2];\n  memoryPtr[10] = *dataPtr;\n  if (memoryPtr == (uint *)0x40012c00) {\n    reservedValue = dataPtr[4];\n  }\n  memoryPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryPtr",
                "param_2": "dataPtr",
                "uVar1": "value",
                "uRam40012c30": "reservedValue"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_memory_flags_08006060",
            "code": "\nundefined4 initializeMemoryFlags_08006060(undefined4 *parameter)\n\n{\n  if (parameter != (undefined4 *)0x0) {\n    if (*(char *)((int)parameter + 0x3d) == '\\0') {\n      *(undefined *)(parameter + 0xf) = 0;\n      initialize_memory_flags_08007708();\n    }\n    *(undefined *)((int)parameter + 0x3d) = 2;\n    update_memory_08005fe8(*parameter,parameter + 1);\n    *(undefined *)((int)parameter + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_memory_flags_08006060",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_hardware_08006092",
            "code": "\nundefined4 initialize_hardware_08006092(undefined4 *param)\n\n{\n  if (param != (undefined4 *)0x0) {\n    if (*(char *)((int)param + 0x3d) == '\\0') {\n      *(undefined *)(param + 0xf) = 0;\n      initialize_hardware_08006092_function();\n    }\n    *(undefined *)((int)param + 0x3d) = 2;\n    update_memory_function(*param,param + 1);\n    *(undefined *)((int)param + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_hardware_08006092",
                "param_1": "param",
                "initialize_hardware_08006e68": "initialize_hardware_function",
                "update_memory_08005fe8": "update_memory_function"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_param_info_080060c4",
            "code": "\nvoid updateParamInfo_080060c4(int paramAddress,int *paramValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int paramValue;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(paramAddress + 4);\n  paramValue = *paramValues;\n  updatedValue1 = *(uint *)(paramAddress + 0x20) & 0xffffffdf | paramValues[2] << 4;\n  if (paramAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | paramValues[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | paramValues[5] << 2 | paramValues[6] << 2;\n  }\n  *(uint *)(paramAddress + 4) = updatedValue2;\n  *(uint *)(paramAddress + 0x18) = *(uint *)(paramAddress + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(paramAddress + 0x38) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_param_info_080060c4",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "paramValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "update_data_08006128",
            "code": "\nundefined4 update_data_08006128(undefined4 *data_ptr,undefined4 value_1,undefined4 value_2)\n\n{\n  if (*(char *)(data_ptr + 0xf) != '\\x01') {\n    *(undefined *)(data_ptr + 0xf) = 1;\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    switch(value_2) {\n    case 0:\n      update_data_08006128_08005cec(*data_ptr);\n      break;\n    case 4:\n      update_param_info_080060c4(*data_ptr);\n      break;\n    case 8:\n      update_params_08005d48(*data_ptr);\n      break;\n    case 0xc:\n      update_params_08005dac(*data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "update_data_08006128",
                "param_1": "data_ptr",
                "param_2": "value_1",
                "param_3": "value_2"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_and_modify_params_08006186",
            "code": "\nundefined4 updateAndModifyParams_08006186(int *ptr_param,int param_buffer,undefined4 param_type)\n\n{\n  if (*(char *)(ptr_param + 0xf) != '\\x01') {\n    *(undefined *)(ptr_param + 0xf) = 1;\n    *(undefined *)((int)ptr_param + 0x3d) = 2;\n    switch(param_type) {\n    case 0:\n      updateData(*ptr_param);\n      *(uint *)(*ptr_param + 0x18) = *(uint *)(*ptr_param + 0x18) | 8;\n      *(uint *)(*ptr_param + 0x18) = *(uint *)(*ptr_param + 0x18) & 0xfffffffb;\n      *(uint *)(*ptr_param + 0x18) = *(uint *)(*ptr_param + 0x18) | *(uint *)(param_buffer + 0x10);\n      break;\n    case 4:\n      updateParamInfo(*ptr_param);\n      *(uint *)(*ptr_param + 0x18) = *(uint *)(*ptr_param + 0x18) | 0x800;\n      *(uint *)(*ptr_param + 0x18) = *(uint *)(*ptr_param + 0x18) & 0xfffffbff;\n      *(uint *)(*ptr_param + 0x18) = *(uint *)(*ptr_param + 0x18) | *(int *)(param_buffer + 0x10) << 8;\n      break;\n    case 8:\n      updateParams(*ptr_param);\n      *(uint *)(*ptr_param + 0x1c) = *(uint *)(*ptr_param + 0x1c) | 8;\n      *(uint *)(*ptr_param + 0x1c) = *(uint *)(*ptr_param + 0x1c) & 0xfffffffb;\n      *(uint *)(*ptr_param + 0x1c) = *(uint *)(*ptr_param + 0x1c) | *(uint *)(param_buffer + 0x10);\n      break;\n    case 0xc:\n      updateParamsInfo(*ptr_param);\n      *(uint *)(*ptr_param + 0x1c) = *(uint *)(*ptr_param + 0x1c) | 0x800;\n      *(uint *)(*ptr_param + 0x1c) = *(uint *)(*ptr_param + 0x1c) & 0xfffffbff;\n      *(uint *)(*ptr_param + 0x1c) = *(uint *)(*ptr_param + 0x1c) | *(int *)(param_buffer + 0x10) << 8;\n    }\n    *(undefined *)((int)ptr_param + 0x3d) = 1;\n    *(undefined *)(ptr_param + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_and_modify_params_08006186",
                "param_1": "ptr_param",
                "param_2": "param_buffer",
                "param_3": "param_type",
                "update_data_08005cec": "updateData",
                "update_param_info_080060c4": "updateParamInfo",
                "update_params_08005d48": "updateParams",
                "update_params_08005dac": "updateParamsInfo"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bitwise_value_08006262",
            "code": "\nvoid updateBitwiseValue_08006262(int dataPointer,uint bitPosition,int newValue)\n\n{\n  *(uint *)(dataPointer + 0x20) = *(uint *)(dataPointer + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(dataPointer + 0x20) = *(uint *)(dataPointer + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bitwise_value_08006262",
                "param_1": "dataPointer",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_bitwise_values_08006280",
            "code": "\nundefined4 updateBitwiseValues_08006280(uint **pointerToUnsignedInteger,undefined4 valueToUpdate)\n\n{\n  switch(valueToUpdate) {\n  case 0:\n    (*pointerToUnsignedInteger)[3] = (*pointerToUnsignedInteger)[3] | 2;\n    break;\n  case 4:\n    (*pointerToUnsignedInteger)[3] = (*pointerToUnsignedInteger)[3] | 4;\n    break;\n  case 8:\n    (*pointerToUnsignedInteger)[3] = (*pointerToUnsignedInteger)[3] | 8;\n    break;\n  case 0xc:\n    (*pointerToUnsignedInteger)[3] = (*pointerToUnsignedInteger)[3] | 0x10;\n  }\n  update_bitwise_value_08006262(*pointerToUnsignedInteger,valueToUpdate,1);\n  if (*pointerToUnsignedInteger == (uint *)0x40012c00) {\n    dataAt40012c44 = dataAt40012c44 | 0x8000;\n  }\n  **pointerToUnsignedInteger = **pointerToUnsignedInteger | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_bitwise_values_08006280",
                "param_1": "pointerToUnsignedInteger",
                "param_2": "valueToUpdate",
                "uRam40012c44": "dataAt40012c44"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_flag_and_value_080062f4",
            "code": "\nundefined4 updateFlagAndValue_080062f4(uint **paramArray,undefined4 flag)\n\n{\n  uint *tempPtr;\n  \n  switch(flag) {\n  case 0:\n    (*paramArray)[3] = (*paramArray)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*paramArray)[3] = (*paramArray)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*paramArray)[3] = (*paramArray)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*paramArray)[3] = (*paramArray)[3] & 0xffffffef;\n  }\n  update_bitwise_value_08006262(*paramArray,flag,0);\n  if (((*paramArray == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  tempPtr = *paramArray;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    *tempPtr = *tempPtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_flag_and_value_080062f4",
                "param_1": "paramArray",
                "param_2": "flag",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "update_and_set_bits_08006390",
            "code": "\nundefined4 updateAndSetBits_08006390(uint **bits,undefined4 value)\n\n{\n  update_bitwise_value_08006262(*bits,value,1);\n  if (*bits == (uint *)0x40012c00) {\n    registerFlag = registerFlag | 0x8000;\n  }\n  **bits = **bits | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "update_and_set_bits_08006390",
                "param_1": "bits",
                "param_2": "value",
                "uRam40012c44": "registerFlag"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_and_clear_flags_080063c0",
            "code": "\nundefined4 update_and_clear_flags_080063c0(uint **pointer_to_param,undefined4 param_2_value)\n\n{\n  uint *pointer_to_param_1;\n  \n  update_bitwise_value(*pointer_to_param,param_2_value,0);\n  if (((*pointer_to_param == (uint *)0x40012c00) && ((RAM_address_2 & 0x1111) == 0)) &&\n     ((RAM_address_2 & 0x444) == 0)) {\n    RAM_address_3 = RAM_address_3 & 0xffff7fff;\n  }\n  pointer_to_param_1 = *pointer_to_param;\n  if (((pointer_to_param_1[8] & 0x1111) == 0) && ((pointer_to_param_1[8] & 0x444) == 0)) {\n    *pointer_to_param_1 = *pointer_to_param_1 & 0xfffffffe;\n  }\n  *(undefined *)((int)pointer_to_param + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_and_clear_flags_080063c0",
                "param_1": "pointer_to_param",
                "param_2": "param_2_value",
                "puVar1": "pointer_to_param_1",
                "update_bitwise_value_08006262": "update_bitwise_value",
                "uRam40012c20": "RAM_address_2",
                "uRam40012c44": "RAM_address_3"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_bitwise_operation_08006420",
            "code": "\nvoid updateBitwiseOperation_08006420(int baseAddress,uint bitOffset,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_bitwise_operation_08006420",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_flags_and_bitwise_operations_0800643c",
            "code": "\nundefined4 setFlagsAndBitwiseOperations_0800643c(uint **ptrArrayOfPointers,undefined4 value)\n\n{\n  performBitwiseOperation(*ptrArrayOfPointers,value,4);\n  (*ptrArrayOfPointers)[0x11] = (*ptrArrayOfPointers)[0x11] | 0x8000;\n  **ptrArrayOfPointers = **ptrArrayOfPointers | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_flags_and_bitwise_operations_0800643c",
                "param_1": "ptrArrayOfPointers",
                "param_2": "value",
                "update_bitwise_operation_08006420": "performBitwiseOperation"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_bit_fields_08006460",
            "code": "\nundefined4 updateBitFields_08006460(uint **bitFields,undefined4 param)\n\n{\n  uint *ptr;\n  \n  updateBitwiseOperation(*bitFields,param,0);\n  ptr = *bitFields;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    ptr[0x11] = ptr[0x11] & 0xffff7fff;\n  }\n  ptr = *bitFields;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_bit_fields_08006460",
                "param_1": "bitFields",
                "param_2": "param",
                "puVar1": "ptr",
                "update_bitwise_operation_08006420": "updateBitwiseOperation"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "FUNC_080064b0",
            "code": "\nvoid FUNC_080064b0(int *param_1)\n\n{\n  *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) & 0xfffffedf;\n  *(uint *)(*param_1 + 0x14) = *(uint *)(*param_1 + 0x14) & 0xfffffffe;\n  *(undefined *)((int)param_1 + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "FUNC_080064b0"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *data)\n\n{\n  short remainingSteps;\n  byte *bytePtr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)data[8];\n    data[8] = (int)(bytePtr + 1);\n    *(uint *)(*data + 4) = (uint)*bytePtr;\n  }\n  remainingSteps = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remainingSteps;\n  if (remainingSteps == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "remainingSteps",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_shifted_values_08006538",
            "code": "\nvoid calculateShiftedValues_08006538(int *inputData)\n\n{\n  int shiftedDataValue1;\n  int shiftedDataValue2;\n  int shiftedDataValue3;\n  int shiftedDataValue4;\n  int shiftedDataValue5;\n  int shiftedDataValue6;\n  int shiftedDataValue7;\n  int shiftedDataValue8;\n  int shiftedDataValue9;\n  int dataValue;\n  \n  *(uint *)(*inputData + 0x10) = *(uint *)(*inputData + 0x10) & 0xffffcfff | inputData[3];\n  *(uint *)(*inputData + 0xc) =\n       inputData[2] | inputData[4] | inputData[5] | *(uint *)(*inputData + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffcff | inputData[6];\n  dataValue = *inputData;\n  if (dataValue != 0x40013800) {\n    shiftedDataValue1 = get_shifted_data_value_08005a28();\n    shiftedDataValue6 = inputData[1];\n    shiftedDataValue2 = get_shifted_data_value_08005a28();\n    shiftedDataValue7 = inputData[1];\n    shiftedDataValue3 = get_shifted_data_value_08005a28();\n    shiftedDataValue8 = inputData[1];\n    shiftedDataValue4 = get_shifted_data_value_08005a28();\n    shiftedDataValue9 = inputData[1];\n    shiftedDataValue5 = get_shifted_data_value_08005a28();\n    *(uint *)(dataValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedDataValue4 * 0x19) / (uint)(shiftedDataValue9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedDataValue5 * 0x19) / (ulonglong)(uint)(inputData[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedDataValue2 * 0x19) / (uint)(shiftedDataValue7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedDataValue3 * 0x19) / (ulonglong)(uint)(shiftedDataValue8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedDataValue1 * 0x19) / (ulonglong)(uint)(shiftedDataValue6 << 2)) / 100) * 0x10;\n    return;\n  }\n  dataValue = extracted_data_shifted_value_08005a48();\n  shiftedDataValue5 = inputData[1];\n  shiftedDataValue1 = extracted_data_shifted_value_08005a48();\n  shiftedDataValue6 = inputData[1];\n  shiftedDataValue2 = extracted_data_shifted_value_08005a48();\n  shiftedDataValue7 = inputData[1];\n  shiftedDataValue3 = extracted_data_shifted_value_08005a48();\n  shiftedDataValue8 = inputData[1];\n  shiftedDataValue4 = extracted_data_shifted_value_08005a48();\n  modifiedDataValue = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedDataValue3 * 0x19) / (uint)(shiftedDataValue8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedDataValue4 * 0x19) /\n                                      (ulonglong)(uint)(inputData[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedDataValue1 * 0x19) / (uint)(shiftedDataValue6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedDataValue2 * 0x19) / (ulonglong)(uint)(shiftedDataValue7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(dataValue * 0x19) / (ulonglong)(uint)(shiftedDataValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_shifted_values_08006538",
                "param_1": "inputData",
                "iVar1": "shiftedDataValue1",
                "iVar2": "shiftedDataValue2",
                "iVar3": "shiftedDataValue3",
                "iVar4": "shiftedDataValue4",
                "iVar5": "shiftedDataValue5",
                "iVar6": "shiftedDataValue6",
                "iVar7": "shiftedDataValue7",
                "iVar8": "shiftedDataValue8",
                "iVar9": "shiftedDataValue9",
                "iVar10": "dataValue",
                "iRam40013808": "modifiedDataValue"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "validate_params_080066e8",
            "code": "\nundefined4 validate_params_080066e8(uint **ptr_array,uint param_flag,uint desired_flag,int start_value,uint max_difference)\n\n{\n  int global_difference;\n  \n  do {\n    if (((param_flag & ~**ptr_array) == 0) != desired_flag) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (global_difference = get_global_value_08003760(), (uint)(global_difference - start_value) <= max_difference))));\n  (*ptr_array)[3] = (*ptr_array)[3] & 0xfffffe5f;\n  (*ptr_array)[5] = (*ptr_array)[5] & 0xfffffffe;\n  *(undefined *)((int)ptr_array + 0x39) = 0x20;\n  *(undefined *)((int)ptr_array + 0x3a) = 0x20;\n  *(undefined *)(ptr_array + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "validate_params_080066e8",
                "param_1": "ptr_array",
                "param_2": "param_flag",
                "param_3": "desired_flag",
                "param_4": "start_value",
                "param_5": "max_difference",
                "iVar1": "global_difference"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_parameters_0800674e",
            "code": "\nundefined4 initializeParameters_0800674e(int *parameters)\n\n{\n  if (parameters != (int *)0x0) {\n    if (*(char *)((int)parameters + 0x39) == '\\0') {\n      *(undefined *)(parameters + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)parameters + 0x39) = 0x24;\n    *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) & 0xffffdfff;\n    calculateShiftedValues(parameters);\n    *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xffffb7ff;\n    *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xffffffd5;\n    *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) | 0x2000;\n    flagF = 0;\n    *(undefined *)((int)parameters + 0x39) = 0x20;\n    *(undefined *)((int)parameters + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_parameters_0800674e",
                "param_1": "parameters",
                "calculate_shifted_values_08006538": "calculateShiftedValues",
                "param_1[0xf]": "flagF"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_input_080067ac",
            "code": "\nundefined4 processInput_080067ac(int *inputArray,ushort *inputDataArray,int inputLength,undefined4 inputValue)\n\n{\n  int validationResult;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)inputArray + 0x39) == ' ') {\n    if (inputDataArray == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(inputArray + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xe) = 1;\n      inputArray[0xf] = 0;\n      *(undefined *)((int)inputArray + 0x39) = 0x21;\n      returnValue = get_global_value_08003760();\n      *(short *)(inputArray + 9) = (short)inputLength;\n      *(short *)((int)inputArray + 0x26) = (short)inputLength;\n      while (*(short *)((int)inputArray + 0x26) != 0) {\n        *(short *)((int)inputArray + 0x26) = *(short *)((int)inputArray + 0x26) + -1;\n        if (inputArray[2] == 0x1000) {\n          validationResult = validate_params_080066e8(inputArray,0x80,0,returnValue,inputValue);\n          if (validationResult != 0) {\n            return 3;\n          }\n          *(uint *)(*inputArray + 4) = *inputDataArray & 0x1ff;\n          if (inputArray[4] == 0) {\n            inputDataArray = inputDataArray + 1;\n          }\n          else {\n            inputDataArray = (ushort *)((int)inputDataArray + 1);\n          }\n        }\n        else {\n          validationResult = validate_params_080066e8(inputArray,0x80,0,returnValue,inputValue);\n          if (validationResult != 0) {\n            return 3;\n          }\n          *(uint *)(*inputArray + 4) = (uint)*(byte *)inputDataArray;\n          inputDataArray = (ushort *)((int)inputDataArray + 1);\n        }\n      }\n      validationResult = validate_params_080066e8(inputArray,0x40,0,returnValue,inputValue);\n      if (validationResult == 0) {\n        *(undefined *)((int)inputArray + 0x39) = 0x20;\n        *(undefined *)(inputArray + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_input_080067ac",
                "param_1": "inputArray",
                "param_2": "inputDataArray",
                "param_3": "inputLength",
                "param_4": "inputValue",
                "iVar1": "validationResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "check_and_update_data_0800688e",
            "code": "\nundefined4 check_and_update_data_0800688e(int *data_ptr,int value_1,int value_2)\n\n{\n  if (*(char *)((int)data_ptr + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    data_ptr_8 = value_1;\n    *(short *)(data_ptr + 9) = (short)value_2;\n    *(short *)((int)data_ptr + 0x26) = (short)value_2;\n    data_ptr_0f = 0;\n    *(undefined *)((int)data_ptr + 0x39) = 0x21;\n    *(undefined *)(data_ptr + 0xe) = 0;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "check_and_update_data_0800688e",
                "param_1": "data_ptr",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "data_ptr_8",
                "param_1[0xf]": "data_ptr_0f"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "check_valid_input_080068d6",
            "code": "\nundefined4 check_valid_input_080068d6(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_value1 = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    initialized_value = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "check_valid_input_080068d6",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_value1",
                "param_1[0xf]": "initialized_value"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "set_flag_and_handle_value_08006932",
            "code": "\nundefined4 setFlagAndHandleValue_08006932(int *pParam)\n\n{\n  *(uint *)(*pParam + 0xc) = *(uint *)(*pParam + 0xc) & 0xffffffbf;\n  *(undefined *)((int)pParam + 0x39) = 0x20;\n  handleValue();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "set_flag_and_handle_value_08006932",
                "param_1": "pParam",
                "handle_value_08008730": "handleValue"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 process_data_0800694c(int *data_ptr)\n\n{\n  byte *byte_ptr;\n  short count;\n  undefined *undefined_ptr;\n  \n  if (*(char *)((int)data_ptr + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data_ptr[2] == 0x1000) {\n    if (data_ptr[4] == 0) {\n      *(ushort *)data_ptr[10] = (ushort)((uint)(*(int *)(*data_ptr + 4) << 0x17) >> 0x17);\n      data_ptr[10] = data_ptr[10] + 2;\n    }\n    else {\n      *(ushort *)data_ptr[10] = (ushort)*(undefined4 *)(*data_ptr + 4) & 0xff;\n      data_ptr[10] = data_ptr[10] + 1;\n    }\n  }\n  else if (data_ptr[4] == 0) {\n    undefined_ptr = (undefined *)data_ptr[10];\n    data_ptr[10] = (int)(undefined_ptr + 1);\n    *undefined_ptr = (char)*(undefined4 *)(*data_ptr + 4);\n  }\n  else {\n    byte_ptr = (byte *)data_ptr[10];\n    data_ptr[10] = (int)(byte_ptr + 1);\n    *byte_ptr = (byte)*(undefined4 *)(*data_ptr + 4) & 0x7f;\n  }\n  count = *(short *)((int)data_ptr + 0x2e) + -1;\n  *(short *)((int)data_ptr + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffffdf;\n  *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xfffffeff;\n  *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data_ptr + 0x3a) = 0x20;\n  execute_selected_function_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data_ptr",
                "pbVar1": "byte_ptr",
                "sVar2": "count",
                "puVar3": "undefined_ptr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_check_080069ec",
            "code": "\nvoid process_data_check_080069ec(uint **data_ptr)\n\n{\n  int init_result;\n  uint data_value;\n  uint *data_ptr;\n  uint flag_value;\n  uint data_value;\n  \n  data_ptr = *data_ptr;\n  data_value = *data_ptr;\n  data_value = data_ptr[3];\n  if ((((data_value & 0xf) == 0) && ((data_value & 0x20) != 0)) && ((data_value & 0x20) != 0)) {\n    process_data_0800694c(data_ptr);\n    return;\n  }\n  if (((data_value & 0xf) == 0) || ((flag_value = data_ptr[5] & 1, flag_value == 0 && ((data_value & 0x120) == 0)))) {\n    if (((data_value & 0x80) != 0) && ((data_value & 0x80) != 0)) {\n      process_data_080064cc(data_ptr);\n      return;\n    }\n    if (((data_value & 0x40) != 0) && ((data_value & 0x40) != 0)) {\n      set_flag_and_handle_value_08006932(data_ptr);\n    }\n  }\n  else {\n    if (((data_value & 1) != 0) && ((data_value & 0x100) != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 1);\n    }\n    if (((data_value & 4) != 0) && (flag_value != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 2);\n    }\n    if (((data_value & 2) != 0) && (flag_value != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 4);\n    }\n    if (((data_value & 8) != 0) && (flag_value != 0)) {\n      data_ptr[0xf] = (uint *)((uint)data_ptr[0xf] | 8);\n    }\n    if (data_ptr[0xf] != (uint *)0x0) {\n      if (((data_value & 0x20) != 0) && ((data_value & 0x20) != 0)) {\n        process_data_0800694c(data_ptr);\n      }\n      if ((((uint)data_ptr[0xf] & 8) == 0) && (((*data_ptr)[5] & 0x40) == 0)) {\n        FUNC_0800877c(data_ptr);\n        data_ptr[0xf] = (uint *)0x0;\n        return;\n      }\n      FUNC_080064b0(data_ptr);\n      data_ptr = *data_ptr;\n      if ((data_ptr[5] & 0x40) == 0) {\n        FUNC_0800877c(data_ptr);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (data_ptr[0xd] == (uint *)0x0) {\n        FUNC_0800877c(data_ptr);\n        return;\n      }\n      data_ptr[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      init_result = initialize_data_08004050(data_ptr[0xd]);\n      if (init_result != 0) {\n        (*(code *)data_ptr[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_check_080069ec",
                "param_1": "data_ptr",
                "iVar1": "init_result",
                "uVar2": "data_value",
                "puVar3": "data_ptr",
                "uVar4": "flag_value",
                "uVar5": "data_value"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "extracted_data_bit_08006b28",
            "code": "\nuint extractedDataBit_08006b28(uint inputNumber,int dataPtr)\n\n{\n  return *(uint *)(dataPtr + ((inputNumber << 0x18) >> 0x1c) * 4) >> (inputNumber & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "extracted_data_bit_08006b28",
                "param_1": "inputNumber",
                "param_2": "dataPtr"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_bit_in_array_08006b3e",
            "code": "\nvoid setBitInArray_08006b3e(uint value,int array)\n\n{\n  uint shiftAmount;\n  \n  shiftAmount = (value << 0x18) >> 0x1c;\n  *(uint *)(array + shiftAmount * 4) = *(uint *)(array + shiftAmount * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_array_value_08006b5c",
            "code": "\nvoid updateArrayValue_08006b5c(uint index,int arrayAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (index << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedIndex * 4) = *(uint *)(arrayAddress + shiftedIndex * 4) & ~(1 << (index & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_array_value_08006b5c",
                "param_1": "index",
                "param_2": "arrayAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "map_param_to_address_08006b7c",
            "code": "\nundefined4 mapParamToAddress_08006b7c(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "map_param_to_address_08006b7c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_address_08006bb8",
            "code": "\n\n\nundefined4 setMemoryAddress_08006bb8(undefined4 flag)\n\n{\n  undefined4 result;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    result = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    result = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    result = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    result = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    result = 0x40011800;\n    break;\n  default:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_address_08006bb8",
                "param_1": "flag",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_shifted_value_08006c60",
            "code": "\nuint getShiftedValue_08006c60(undefined4 input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = get_value_from_array_08007376(input,&DAT_0800a5b8,param3,param4,param4);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_shifted_value_08006c60",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_shifted_value_08006c7c",
            "code": "\nundefined4 getShiftedValue_08006c7c(undefined4 arrayIndex,undefined4 ignoredParam,undefined4 sizeOfArray,undefined4 param4)\n\n{\n  int value;\n  uint shiftedValue;\n  \n  value = get_value_from_array_08007376(arrayIndex,&DAT_0800a6cc,sizeOfArray,param4,param4);\n  shiftedValue = (uint)(value << 0xc) >> 0x1b;\n  if (shiftedValue == 3) {\n    return 8;\n  }\n  if (shiftedValue != 4) {\n    if (shiftedValue != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_shifted_value_08006c7c",
                "param_1": "arrayIndex",
                "param_2": "ignoredParam",
                "param_3": "sizeOfArray",
                "param_4": "param4",
                "iVar1": "value",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_bits_wrapper_08006ca8",
            "code": "\n\n\nvoid updateBitsWrapper_08006ca8(int *dataPointer,undefined4 newValue)\n\n{\n  undefined4 result;\n  uint updatedValue;\n  int originalValue;\n  uint bitMask;\n  undefined4 bitShift;\n  undefined4 reservedValue;\n  \n  originalValue = *dataPointer;\n  if (originalValue == 0x40012400) {\n    updatedValue = _DAT_40021018 | 0x200;\n    originalValue = 0x200;\n    _DAT_40021018 = updatedValue;\n  }\n  else {\n    updatedValue = 0x40012800;\n    if (originalValue == 0x40012800) {\n      updatedValue = _DAT_40021018 | 0x400;\n      originalValue = 0x400;\n      _DAT_40021018 = updatedValue;\n    }\n  }\n  result = set_memory_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,newValue,updatedValue,originalValue);\n  bitMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  bitShift = 3;\n  reservedValue = 0;\n  update_bits_080040e8(result,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_bits_wrapper_08006ca8",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "uVar1": "result",
                "uVar2": "updatedValue",
                "iVar3": "originalValue",
                "local_18": "bitMask",
                "local_14": "bitShift",
                "local_10": "reservedValue"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "set_access_permissions_08006d24",
            "code": "\n\n\nvoid setAccessPermissions_08006d24(int *accessPermission)\n\n{\n  if (*accessPermission != 0x40012400) {\n    if (*accessPermission == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "set_access_permissions_08006d24",
                "param_1": "accessPermission"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "process_configuration_08006d80",
            "code": "\nundefined2 processConfiguration_08006d80(undefined4 inputValue)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 validValue;\n  uint shiftedValue;\n  undefined4 flag1;\n  undefined4 flag2;\n  int valueIndex;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  \n  fill_memory_080091c6(&valueIndex,0,0x30);\n  shiftedValue = 0;\n  flag1 = 0;\n  flag2 = 0;\n  validValue = 0;\n  valueIndex = find_valid_value_index_08007320(inputValue,&DAT_0800a5b8);\n  if (valueIndex == 0) {\n    validValue = 0;\n  }\n  else {\n    var1 = 0;\n    var2 = 0;\n    var3 = 0;\n    var5 = 0;\n    var7 = 0xe0000;\n    var8 = 0;\n    var4 = 1;\n    var6 = 0;\n    DAT_20000014 = (undefined)inputValue;\n    iVar1 = update_configuration_08003bd8(&valueIndex);\n    if (iVar1 == 0) {\n      shiftedValue = get_shifted_value_08006c60(inputValue);\n      if (shiftedValue < 0x12) {\n        flag1 = 1;\n        flag2 = 2;\n        iVar1 = update_settings_080038e4(&valueIndex,&shiftedValue);\n        if (iVar1 == 0) {\n          iVar1 = process_param_08003e20(&valueIndex);\n          if (iVar1 == 0) {\n            iVar1 = verify_and_update_flags_08003aa0(&valueIndex);\n            if (iVar1 == 0) {\n              iVar1 = check_and_update_flags_0800376c(&valueIndex,10);\n              if (iVar1 == 0) {\n                uVar2 = get_offset_value_08003a1c(&valueIndex);\n                if ((uVar2 & 0x200) != 0) {\n                  validValue = get_offset_value_080038dc(&valueIndex);\n                }\n                iVar1 = update_value_and_check_status_08003de4(&valueIndex);\n                if (iVar1 == 0) {\n                  iVar1 = modify_value_and_set_permissions_08003ce8(&valueIndex);\n                  if (iVar1 != 0) {\n                    validValue = 0;\n                  }\n                }\n                else {\n                  validValue = 0;\n                }\n              }\n              else {\n                validValue = 0;\n              }\n            }\n            else {\n              validValue = 0;\n            }\n          }\n          else {\n            validValue = 0;\n          }\n        }\n        else {\n          validValue = 0;\n        }\n      }\n      else {\n        validValue = 0;\n      }\n    }\n    else {\n      validValue = 0;\n    }\n  }\n  return validValue;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "process_configuration_08006d80",
                "param_1": "inputValue",
                "local_46": "validValue",
                "local_44": "shiftedValue",
                "local_40": "flag1",
                "local_3c": "flag2",
                "local_38": "valueIndex",
                "local_34": "var1",
                "local_30": "var2",
                "local_2c": "var3",
                "local_28": "var4",
                "local_24": "var5",
                "local_20": "var6",
                "local_1c": "var7",
                "local_10": "var8"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_hardware_08006e68",
            "code": "\n\n\nvoid initializeHardware_08006e68(undefined4 flag)\n\n{\n  int index;\n  undefined4 address;\n  uint bitmask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  index = get_value_from_array_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  update_memory_flags_08007438(flag);\n  address = set_memory_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  value1 = 2;\n  value2 = 0;\n  value3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(index << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  bitmask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_bits_080040e8(address,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_hardware_08006e68",
                "param_1": "flag",
                "iVar1": "index",
                "uVar2": "address",
                "local_20": "bitmask",
                "local_1c": "value1",
                "local_18": "value2",
                "local_14": "value3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "initialize_memory_flags_08007110",
            "code": "\nvoid initialize_memory_flags_08007110(void)\n\n{\n  update_memory_flags_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "initialize_memory_flags_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_and_update_params_08007118",
            "code": "\nvoid initialize_and_update_params_08007118(undefined4 input_param,uint divisor,int size,undefined4 output_param,char flag)\n\n{\n  uint shifted_value;\n  int hardware_status;\n  int update_status;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  int valid_value_index;\n  int shifted_value_result;\n  undefined4 var8;\n  int size_result;\n  undefined4 var9;\n  undefined4 var10;\n  undefined var11;\n  \n  fill_memory_080091c6(&valid_value_index,0,0x40);\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  var7 = 0;\n  valid_value_index = find_valid_value_index_08007320(input_param,&DAT_0800a6cc);\n  if (valid_value_index != 0) {\n    shifted_value = calculate_shifted_value_080075dc();\n    shifted_value_result = shifted_value / divisor - 1;\n    size_result = size + -1;\n    var9 = 0;\n    var8 = 0;\n    var10 = 0;\n    var11 = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)input_param;\n      hardware_status = initialize_hardware_08006092(&valid_value_index);\n      if (hardware_status != 0) {\n        return;\n      }\n    }\n    hardware_status = get_shifted_value_08006c7c(input_param);\n    if ((((hardware_status == 0) || (hardware_status == 4)) || (hardware_status == 8)) || ((hardware_status == 0xc || (hardware_status == 0x18)))) {\n      var1 = 0x60;\n      var3 = 0;\n      var5 = 0;\n      var4 = 0;\n      var7 = 0;\n      var6 = 0;\n      var2 = output_param;\n      update_status = update_and_modify_params_08006186(&valid_value_index,&var1,hardware_status);\n      if (update_status == 0) {\n        shifted_value = get_value_from_array_08007376(input_param,&DAT_0800a6cc);\n        if ((shifted_value & 0x100000) == 0) {\n          update_and_set_bits_08006390(&valid_value_index,hardware_status);\n        }\n        else {\n          set_flags_and_bitwise_operations_0800643c(&valid_value_index,hardware_status);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_and_update_params_08007118",
                "param_1": "input_param",
                "param_2": "divisor",
                "param_3": "size",
                "param_4": "output_param",
                "param_5": "flag",
                "uVar1": "shifted_value",
                "iVar2": "hardware_status",
                "iVar3": "update_status",
                "local_74": "var1",
                "local_70": "var2",
                "local_6c": "var3",
                "local_68": "var4",
                "local_64": "var5",
                "local_60": "var6",
                "local_5c": "var7",
                "local_58": "valid_value_index",
                "local_54": "shifted_value_result",
                "local_50": "var8",
                "local_4c": "size_result",
                "local_48": "var9",
                "local_44": "var10",
                "local_1b": "var11"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "update_flags_based_on_value_080071e4",
            "code": "\nvoid update_flags_based_on_value_080071e4(undefined4 input_value)\n\n{\n  int shifted_value;\n  uint array_value;\n  int valid_indices [17];\n  \n  valid_indices[0] = find_valid_value_index_08007320(input_value,&DAT_0800a6cc);\n  if ((valid_indices[0] != 0) &&\n     ((((shifted_value = get_shifted_value_08006c7c(input_value), shifted_value == 0 || (shifted_value == 4)) || (shifted_value == 8)) ||\n      ((shifted_value == 0xc || (shifted_value == 0x18)))))) {\n    array_value = get_value_from_array_08007376(input_value,&DAT_0800a6cc);\n    if ((array_value & 0x100000) == 0) {\n      update_and_clear_flags_080063c0(valid_indices,shifted_value);\n    }\n    else {\n      update_bit_fields_08006460(valid_indices,shifted_value);\n    }\n    initialize_memory_and_flags_08005e2e(valid_indices);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "update_flags_based_on_value_080071e4",
                "param_1": "input_value",
                "iVar1": "shifted_value",
                "uVar2": "array_value",
                "local_50": "valid_indices"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_global_value_0800723c",
            "code": "\nvoid initialize_global_value_0800723c(void)\n\n{\n  get_previous_value();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_global_value_0800723c",
                "get_global_value_08003760": "get_previous_value"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_system_08007246",
            "code": "\nvoid initialize_system_08007246(void)\n\n{\n  update_global_value();\n  execute_initial_setup();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_system_08007246",
                "update_global_value_08003748": "update_global_value",
                "execute_initial_setup_08004046": "execute_initial_setup"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_memory_08007258",
            "code": "\n\n\nvoid initializeMemory_08007258(uint memoryAddress,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 memoryPointer;\n  uint bitMask;\n  undefined4 localValue1;\n  undefined4 localValue2;\n  undefined4 localValue3;\n  \n  memoryPointer = set_memory_address_08006bb8((memoryAddress << 0x18) >> 0x1c);\n  bitMask = 1 << (memoryAddress & 0xf) & 0xffff;\n  localValue3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((memoryAddress - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((memoryAddress == 0xf) || (memoryAddress == 0x13)) || (memoryAddress == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localValue1 = value1;\n  localValue2 = value2;\n  update_bits_080040e8(memoryPointer,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_memory_08007258",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "memoryPointer",
                "local_20": "bitMask",
                "local_1c": "localValue1",
                "local_18": "localValue2",
                "local_14": "localValue3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "update_param_value_080072d8",
            "code": "\nvoid update_param_value_080072d8(undefined4 ptr,undefined2 data,int condition,undefined4 ptr_value)\n\n{\n  if (condition == 0) {\n    update_param_080042e2(ptr,data,0,ptr_value,ptr_value);\n    return;\n  }\n  update_param_080042e2(ptr,data,1,ptr_value,ptr_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "update_param_value_080072d8",
                "param_1": "ptr",
                "param_2": "data",
                "param_3": "condition",
                "param_4": "ptr_value"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "check_bit_flag_080072f0",
            "code": "\nvoid check_bit_flag_080072f0(undefined4 flag,undefined2 bit,undefined4 param_a,undefined4 param_b)\n\n{\n  check_bit_flag_080072f0_080042d4(flag,bit,param_a,param_b,param_b);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "check_bit_flag_080072f0",
                "param_1": "flag",
                "param_2": "bit",
                "param_3": "param_a",
                "param_4": "param_b"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_device_080072fa",
            "code": "\nvoid initialize_device_080072fa(void)\n\n{\n  initialize_data();\n  initialize_and_update_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_device_080072fa",
                "initialize_data_08003724": "initialize_data",
                "initialize_and_update_device_080035b8": "initialize_and_update_device"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_index_08007306",
            "code": "\nundefined4 find_value_index_08007306(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_index_08007306",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_valid_value_index_08007320",
            "code": "\nundefined4 find_valid_value_index_08007320(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value != -1) {\n    value_index = find_value_index_08007306();\n    return value_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_valid_value_index_08007320",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_first_instance_08007332",
            "code": "\nint find_first_instance_08007332(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_first_instance_08007332",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_first_nonzero_0800734a",
            "code": "\nundefined4 find_first_nonzero_0800734a(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value != 0) {\n    result = find_first_instance_08007332();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_first_nonzero_0800734a",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_in_array_0800735a",
            "code": "\nundefined4 find_value_in_array_0800735a(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_in_array_0800735a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "get_value_from_array_08007376",
            "code": "\nundefined4 get_value_from_array_08007376(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  found_value = find_value_in_array_0800735a();\n  return found_value;\n}\n\n",
            "renaming": {
                "FUN_08007376": "get_value_from_array_08007376",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "find_value_position_0800738a",
            "code": "\nundefined4 find_value_position_0800738a(int value_to_find,char *array)\n\n{\n  if (value_to_find == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value_to_find == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "find_value_position_0800738a",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_080073ae",
            "code": "\nint compareAndReturn_080073ae(int param_1,int param_2)\n\n{\n  if (param_1 != param_2) {\n    if (param_1 == 0) {\n      return param_2;\n    }\n    if (param_2 == 0) {\n      return param_1;\n    }\n    param_1 = 0;\n  }\n  return param_1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_function_080073c0",
            "code": "\nvoid executeCallbackFunction_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_function_080073c0"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_peripheral_080073ec",
            "code": "\n\n\nvoid initializePeripheral_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_peripheral_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_memory_flags_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateMemoryFlags_08007438(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = memoryAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_memory_flags_08007438",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_flags_080074e0",
            "code": "\n\n\nvoid updateMemoryFlags_080074e0(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_flags_080074e0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_irq_status_08007544",
            "code": "\nundefined4 getTimerIRQStatus_08007544(uint irqStatus)\n\n{\n  if (irqStatus == 0xffffffff) {\n    return 0;\n  }\n  if (irqStatus == 0x40000400) {\n    return 0x1d;\n  }\n  if (irqStatus < 0x40000401) {\n    if (irqStatus == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (irqStatus == 0x40000800) {\n      return 0x1e;\n    }\n    if (irqStatus == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  handleErrorMessage(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_irq_status_08007544",
                "param_1": "irqStatus",
                "initialize_and_parse_input_080098d8": "handleErrorMessage"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initializeAndParseInput(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "initialize_and_parse_input_080098d8": "initializeAndParseInput"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_shifted_value_080075dc",
            "code": "\nint calculateShiftedValue_080075dc(undefined4 inputValue)\n\n{\n  uint shiftedValue;\n  int result;\n  uint timerInstance;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  uint localVar1;\n  uint localVar2;\n  \n  parameter2 = 0;\n  parameter3 = 0;\n  parameter4 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  parameter1 = 0;\n  initialize_parameters_08005a68(&parameter2,&parameter1);\n  result = check_timer_instance_08007594(inputValue);\n  shiftedValue = localVar2;\n  timerInstance = localVar1;\n  if (result == 1) {\n    result = get_shifted_data_value_08005a28();\n  }\n  else if (result == 2) {\n    result = extracted_data_shifted_value_08005a48();\n    timerInstance = shiftedValue;\n  }\n  else {\n    initialize_and_parse_input_080098d8(\"TIM: Unknown clock source\");\n    result = 0;\n    timerInstance = 0;\n  }\n  if (timerInstance != 0x500) {\n    if (timerInstance < 0x501) {\n      if (timerInstance != 0x400) {\n        return result;\n      }\n    }\n    else if ((timerInstance != 0x600) && (timerInstance != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_shifted_value_080075dc",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "iVar2": "result",
                "uVar3": "timerInstance",
                "local_20": "parameter1",
                "local_1c": "parameter2",
                "local_18": "parameter3",
                "local_14": "parameter4",
                "local_10": "localVar1",
                "local_c": "localVar2"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_widget_08007648",
            "code": "\nvoid initializeWidget_08007648(undefined4 *widget,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char timerStatus;\n  uint shiftedValue;\n  int result;\n  undefined4 *param1Pointer;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  undefined4 localVariable7;\n  \n  localVariable1 = 0;\n  localVariable2 = 0;\n  localVariable3 = 0;\n  localVariable4 = 0;\n  localVariable5 = 0;\n  localVariable6 = 0;\n  localVariable7 = 0;\n  param1Pointer = widget + 1;\n  *widget = 0x40000000;\n  widget[1] = 0x40000000;\n  widget[4] = param2;\n  shiftedValue = calculate_shifted_value_080075dc();\n  widget[2] = shiftedValue / 1000000 - 1;\n  widget[5] = 0;\n  widget[3] = 0;\n  widget[6] = 0;\n  widget[0x13] = param4;\n  localVariable1 = 0;\n  localVariable3 = 0;\n  localVariable5 = 0;\n  localVariable4 = 0;\n  localVariable6 = 0;\n  localVariable7 = 0;\n  localVariable2 = param3;\n  timerStatus = get_timer_irq_status_08007544(*widget);\n  update_memory_08003f30((int)timerStatus,0xe,0);\n  timerStatus = get_timer_irq_status_08007544(*widget);\n  set_bit_in_memory_08003f94((int)timerStatus);\n  result = initialize_memory_flags_08006060(param1Pointer);\n  if ((result == 0) && (result = update_data_08006128(param1Pointer,&localVariable1,0), result == 0)) {\n    update_bitwise_values_08006280(param1Pointer,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_widget_08007648",
                "param_1": "widget",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "timerStatus",
                "uVar2": "shiftedValue",
                "iVar3": "result",
                "puVar4": "param1Pointer",
                "local_34": "localVariable1",
                "local_30": "localVariable2",
                "local_2c": "localVariable3",
                "local_28": "localVariable4",
                "local_24": "localVariable5",
                "local_20": "localVariable6",
                "local_1c": "localVariable7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_memory_080076e0",
            "code": "\nvoid initializeMemory_080076e0(undefined4 *memory)\n\n{\n  char timerStatus;\n  int memoryUpdateResult;\n  \n  memory[0x13] = 0;\n  timerStatus = get_timer_irq_status_08007544(*memory);\n  set_bit_in_memory_08003fb0((int)timerStatus);\n  memoryUpdateResult = update_memory_flags_08005df4(memory + 1);\n  if (memoryUpdateResult == 0) {\n    update_flag_and_value_080062f4(memory + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_memory_080076e0",
                "param_1": "memory",
                "cVar1": "timerStatus",
                "iVar2": "memoryUpdateResult"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_memory_flags_08007708",
            "code": "\nvoid initialize_memory_flags_08007708(void)\n\n{\n  update_memory_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_memory_flags_08007708",
                "update_memory_flags_08007438": "update_memory_flags"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "update_memory_flags_08007710",
            "code": "\nvoid update_memory_flags_08007710(void)\n\n{\n  update_memory_flags_08007710_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "update_memory_flags_08007710"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "FUNC_08007718",
            "code": "\nint FUNC_08007718(int param_1)\n\n{\n  return param_1 + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "FUNC_08007718"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_function_if_needed_0800771c",
            "code": "\nvoid executeFunctionIfNeeded_0800771c(int inputParameter)\n\n{\n  int functionAddress;\n  \n  functionAddress = FUNC_08007718();\n  if ((*(functionPointer **)(functionAddress + 0x4c) != (functionPointer *)0x0) && (*(char *)(inputParameter + 0x1c) == '\\x01')) {\n    (**(functionPointer **)(functionAddress + 0x4c))(functionAddress,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_function_if_needed_0800771c",
                "param_1": "inputParameter",
                "iVar1": "functionAddress",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_callback_function_08007736",
            "code": "\nvoid executeCallbackFunction_08007736(void)\n\n{\n  int returnValue;\n  \n  returnValue = FUNC_08007718();\n  if (*(code **)(returnValue + 0x48) != (code *)0x0) {\n    (**(code **)(returnValue + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_callback_function_08007736",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_memory_address_08007744",
            "code": "\nundefined4 getMemoryAddress_08007744(int inputOffset)\n\n{\n  return *(undefined4 *)(*(int *)(inputOffset + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_memory_address_08007744",
                "param_1": "inputOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "update_value_in_struct_0800774a",
            "code": "\nvoid updateValueInStruct_0800774a(int structAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(structAddress + 4) + 0x24) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "update_value_in_struct_0800774a",
                "param_1": "structAddress",
                "param_2": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "update_array_element_08007750",
            "code": "\nvoid updateArrayElement_08007750(int arrayPointer,int index,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(arrayPointer + 4) + 0x34 + index * 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "update_array_element_08007750",
                "param_1": "arrayPointer",
                "param_2": "index",
                "param_3": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_peripheral_080077b0",
            "code": "\n\n\nvoid initializeI2CPeripheral_080077b0(int *peripheral,int pin1,int pin2,int pin3,undefined unused)\n\n{\n  int valueIndex1;\n  int valueIndex2;\n  undefined4 memoryAddress;\n  uint value1;\n  uint value2;\n  int *inputParameters;\n  uint bitMask1;\n  uint bitMask2;\n  uint bitMask3;\n  undefined4 constant3;\n  \n  if (peripheral != (int *)0x0) {\n    inputParameters = peripheral + 1;\n    valueIndex1 = find_valid_value_index_08007320((int)*(char *)(peripheral + 0x16),&DAT_0800a69c);\n    valueIndex2 = find_valid_value_index_08007320((int)*(char *)((int)peripheral + 0x59),&DAT_0800a66c);\n    if ((valueIndex1 == 0) || (valueIndex2 == 0)) {\n      initialize_and_parse_input_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      valueIndex1 = compare_and_return_080073ae(valueIndex1,valueIndex2);\n      *peripheral = valueIndex1;\n      if (valueIndex1 == 0) {\n        initialize_and_parse_input_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (valueIndex1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)peripheral + 0x5a) = 0x1f;\n          *(undefined *)((int)peripheral + 0x5b) = 0x20;\n          DAT_20000668 = inputParameters;\n        }\n        if (*peripheral == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)peripheral + 0x5a) = 0x21;\n          *(undefined *)((int)peripheral + 0x5b) = 0x22;\n          DAT_2000066c = inputParameters;\n        }\n        memoryAddress = set_memory_address_08006bb8((uint)((int)*(char *)((int)peripheral + 0x59) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)((int)peripheral + 0x59) & 0xfU) & 0xffff;\n        value1 = get_value_from_array_08007376((int)*(char *)((int)peripheral + 0x59),&DAT_0800a66c);\n        value2 = get_value_from_array_08007376((int)*(char *)((int)peripheral + 0x59),&DAT_0800a66c);\n        bitMask2 = (value1 >> 3 & 1) << 4 | value2 & 7;\n        constant3 = 3;\n        valueIndex1 = get_value_from_array_08007376((int)*(char *)((int)peripheral + 0x59),&DAT_0800a66c);\n        bitMask3 = (uint)(valueIndex1 << 0x1a) >> 0x1e;\n        valueIndex1 = get_value_from_array_08007376((int)*(char *)((int)peripheral + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value2 = 1;\n        value1 = _DAT_40021018;\n        switch((uint)(valueIndex1 << 0x11) >> 0x19) {\n        case 1:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value2;\n          break;\n        case 2:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 3:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value2;\n          break;\n        case 4:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 5:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value2;\n          break;\n        case 6:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 7:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value2;\n          break;\n        case 8:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 9:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value2;\n          break;\n        case 10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value2;\n          break;\n        case 0xb:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xc:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value2;\n          break;\n        case 0xd:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value2;\n          break;\n        case 0xe:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xf:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value2;\n          break;\n        case 0x10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value2;\n          break;\n        case 0x11:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value2;\n          break;\n        case 0x12:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x13:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value2;\n          break;\n        case 0x14:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value2;\n          break;\n        case 0x15:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x16:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x17:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1b:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1c:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x21:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value2;\n          break;\n        case 0x22:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x23:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x24:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value2;\n        }\n        update_bits_080040e8(memoryAddress,&bitMask1,value1,value2);\n        memoryAddress = set_memory_address_08006bb8((uint)((int)*(char *)(peripheral + 0x16) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)(peripheral + 0x16) & 0xfU) & 0xffff;\n        value1 = get_value_from_array_08007376((int)*(char *)(peripheral + 0x16),&DAT_0800a69c);\n        value2 = get_value_from_array_08007376((int)*(char *)(peripheral + 0x16),&DAT_0800a69c);\n        bitMask2 = (value1 >> 3 & 1) << 4 | value2 & 7;\n        constant3 = 3;\n        valueIndex1 = get_value_from_array_08007376((int)*(char *)(peripheral + 0x16),&DAT_0800a69c);\n        bitMask3 = (uint)(valueIndex1 << 0x1a) >> 0x1e;\n        valueIndex1 = get_value_from_array_08007376((int)*(char *)(peripheral + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value2 = 1;\n        value1 = _DAT_40021018;\n        switch((uint)(valueIndex1 << 0x11) >> 0x19) {\n        case 1:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value2;\n          break;\n        case 2:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 3:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value2;\n          break;\n        case 4:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 5:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value2;\n          break;\n        case 6:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 7:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value2;\n          break;\n        case 8:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 9:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value2;\n          break;\n        case 10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value2;\n          break;\n        case 0xb:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xc:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value2;\n          break;\n        case 0xd:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value2;\n          break;\n        case 0xe:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xf:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value2;\n          break;\n        case 0x10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value2;\n          break;\n        case 0x11:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value2;\n          break;\n        case 0x12:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x13:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value2;\n          break;\n        case 0x14:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value2;\n          break;\n        case 0x15:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x16:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x17:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1b:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1c:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x21:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value2;\n          break;\n        case 0x22:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x23:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x24:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value2;\n        }\n        update_bits_080040e8(memoryAddress,&bitMask1,value1,value2);\n        peripheral[1] = *peripheral;\n        peripheral[2] = pin1;\n        peripheral[3] = 0;\n        peripheral[4] = pin3;\n        peripheral[7] = 0xff;\n        peripheral[5] = pin2;\n        peripheral[6] = 0;\n        peripheral[8] = 0;\n        peripheral[9] = 0;\n        *(undefined *)((int)peripheral + 0x41) = 0;\n        update_memory_08003f30((int)*(char *)((int)peripheral + 0x5a),0,1);\n        set_bit_in_memory_08003f94((int)*(char *)((int)peripheral + 0x5a));\n        update_memory_08003f30((int)*(char *)((int)peripheral + 0x5b),0,1);\n        set_bit_in_memory_08003f94((int)*(char *)((int)peripheral + 0x5b));\n        calculate_parameters_080045c0(inputParameters);\n        *(undefined *)((int)peripheral + 0x5d) = unused;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_peripheral_080077b0",
                "param_1": "peripheral",
                "param_2": "pin1",
                "param_3": "pin2",
                "param_4": "pin3",
                "param_5": "unused",
                "iVar1": "valueIndex1",
                "iVar2": "valueIndex2",
                "uVar3": "memoryAddress",
                "uVar4": "value1",
                "uVar5": "value2",
                "piVar6": "inputParameters",
                "local_38": "bitMask1",
                "local_34": "bitMask2",
                "local_30": "bitMask3",
                "local_2c": "constant3"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "process_and_check_data_08007e74",
            "code": "\nint process_and_check_data_08007e74(int data_offset,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int global_value;\n  int result;\n  uint difference;\n  int status;\n  int new_offset;\n  undefined4 temp_param;\n  \n  temp_param = param_4;\n  global_value = get_global_value();\n  difference = 0;\n  status = 2;\n  do {\n    new_offset = data_offset + 4;\n    result = process_data(new_offset,param_2,param_3,param_4,temp_param);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_byte_from_offset(new_offset), result != 0x20 && (status == 0))) {\n        result = get_global_value();\n        difference = result - global_value;\n        if (difference < 0x65) {\n          result = get_pointer_at_offset(new_offset);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_pointer_at_offset(new_offset);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "process_and_check_data_08007e74",
                "param_1": "data_offset",
                "iVar1": "global_value",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "new_offset",
                "uVar6": "temp_param",
                "get_global_value_08003760": "get_global_value",
                "process_data_08004728": "process_data",
                "get_byte_from_offset_0800542a": "get_byte_from_offset",
                "get_pointer_at_offset_08005430": "get_pointer_at_offset"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copyData_08007ede(int destAddr,int srcAddr,uint length)\n\n{\n  uint i;\n  \n  if (0x20 < length) {\n    return 2;\n  }\n  for (i = 0; i < length; i = i + 1 & 0xff) {\n    *(undefined *)(destAddr + i + 0x68) = *(undefined *)(srcAddr + i);\n    *(char *)(destAddr + 0x88) = *(char *)(destAddr + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "destAddr",
                "param_2": "srcAddr",
                "param_3": "length",
                "uVar1": "i"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "validate_and_process_input_08007f0e",
            "code": "\nint validate_and_process_input_08007f0e(int input_data,undefined4 flag_1,undefined4 flag_2,undefined4 flag_3)\n\n{\n  int global_value;\n  int validation_result;\n  uint global_diff;\n  int loop_status;\n  int current_offset;\n  undefined4 param_4_copy;\n  \n  param_4_copy = flag_3;\n  global_value = get_global_value_08003760();\n  global_diff = 0;\n  loop_status = 2;\n  do {\n    current_offset = input_data + 4;\n    validation_result = validate_input_and_set_flags_080047f4(current_offset,flag_1,flag_2,flag_3,param_4_copy);\n    if (validation_result == 0) {\n      loop_status = 0;\n      while ((validation_result = get_byte_from_offset_0800542a(current_offset), validation_result != 0x20 && (loop_status == 0))) {\n        validation_result = get_global_value_08003760();\n        global_diff = validation_result - global_value;\n        if (global_diff < 0x65) {\n          validation_result = get_pointer_at_offset_08005430(current_offset);\n          if (validation_result != 0) {\n            loop_status = 2;\n          }\n        }\n        else {\n          loop_status = 1;\n        }\n      }\n    }\n    validation_result = get_pointer_at_offset_08005430(current_offset);\n  } while ((validation_result == 4) && (global_diff < 100));\n  return loop_status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "validate_and_process_input_08007f0e",
                "param_1": "input_data",
                "param_2": "flag_1",
                "param_3": "flag_2",
                "param_4": "flag_3",
                "iVar1": "global_value",
                "iVar2": "validation_result",
                "uVar3": "global_diff",
                "iVar4": "loop_status",
                "iVar5": "current_offset",
                "uVar6": "param_4_copy"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtract_four_08007f78(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_data_08007f7c",
            "code": "\nvoid updateData_08007f7c(int dataPointer,int newValue)\n\n{\n  if (dataPointer != 0) {\n    if (newValue != 0) {\n      *(int *)(dataPointer + 0x60) = newValue;\n      initializeData(dataPointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_data_08007f7c",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "initialize_data_080049e0": "initializeData"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_data_08007f8e",
            "code": "\nvoid updateData_08007f8e(int dataAddress,int newValue)\n\n{\n  if (dataAddress != 0) {\n    if (newValue != 0) {\n      *(int *)(dataAddress + 100) = newValue;\n      initialize_data_080049e0(dataAddress + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_data_08007f8e",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "validate_and_process_input_08007fa0",
            "code": "\nvoid validate_and_process_input_08007fa0(int input_ptr,int flag,int param,undefined4 data)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (param == *(int *)(input_ptr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validate_input_func(input_ptr,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validate_input_func_v2(input_ptr,result + 0x68,0x20,8,data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "validate_and_process_input_08007fa0",
                "param_1": "input_ptr",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "data",
                "iVar1": "result",
                "subtract_four_08007f78": "subtract_four",
                "validate_input_080048c8": "validate_input_func",
                "validate_input_08004954": "validate_input_func_v2"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_08007ff0",
            "code": "\nvoid initialize_and_execute_08007ff0(undefined4 input_parameter)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_08007ff0",
                "param_1": "input_parameter",
                "iVar1": "result",
                "subtract_four_08007f78": "get_function_pointer",
                "initialize_data_080049e0": "initialize_data"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "check_and_initialize_data_08008020",
            "code": "\nvoid checkAndInitializeData_08008020(undefined4 inputParam)\n\n{\n  int subtractedValue;\n  \n  subtractedValue = subtract_four_08007f78();\n  if (*(char *)(subtractedValue + 0x5d) == '\\0') {\n    initialize_data_080049e0(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "check_and_initialize_data_08008020",
                "param_1": "inputParam",
                "iVar1": "subtractedValue"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initializeUARTPins_08008078(int *pinArray)\n\n{\n  int uartPinIndex;\n  int peripheralPinIndex;\n  undefined4 memoryAddress;\n  uint valueFromArray;\n  uint uartPinBitMask;\n  uint pinFunctionSelectBits;\n  uint pinModeBits;\n  undefined4 numBitsToUpdate;\n  \n  if (pinArray != (int *)0x0) {\n    uartPinIndex = find_valid_value_index_08007320((int)*(char *)(pinArray + 0x16),&DAT_0800a864);\n    peripheralPinIndex = find_valid_value_index_08007320((int)*(char *)((int)pinArray + 0x59),&DAT_0800a81c);\n    if ((peripheralPinIndex == 0) || (uartPinIndex == 0)) {\n      printErrorMessage(\"ERROR: at least one UART pin has no peripheral\\n\",peripheralPinIndex);\n    }\n    else {\n      uartPinIndex = compareUARTPins(uartPinIndex);\n      *pinArray = uartPinIndex;\n      if (uartPinIndex == 0) {\n        printErrorMessage(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinIndex == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pinArray + 0x11) = 0;\n          *(undefined *)((int)pinArray + 0x5a) = 0x25;\n        }\n        else if (uartPinIndex == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pinArray + 0x11) = 1;\n          *(undefined *)((int)pinArray + 0x5a) = 0x26;\n        }\n        else if (uartPinIndex == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pinArray + 0x11) = 2;\n          *(undefined *)((int)pinArray + 0x5a) = 0x27;\n        }\n        memoryAddress = setMemoryAddress((uint)((int)*(char *)((int)pinArray + 0x59) << 0x18) >> 0x1c);\n        valueFromArray = getValueFromArray((int)*(char *)((int)pinArray + 0x59),&DAT_0800a81c);\n        uartPinBitMask = 1 << (*(byte *)((int)pinArray + 0x59) & 0xf) & 0xffff;\n        pinFunctionSelectBits = (valueFromArray >> 3 & 1) << 4 | valueFromArray & 7;\n        pinModeBits = (valueFromArray << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((valueFromArray << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        numBitsToUpdate = 3;\n        updateBits(memoryAddress,&uartPinBitMask);\n        memoryAddress = setMemoryAddress((uint)((int)*(char *)(pinArray + 0x16) << 0x18) >> 0x1c);\n        valueFromArray = getValueFromArray((int)*(char *)(pinArray + 0x16),&DAT_0800a864);\n        uartPinBitMask = 1 << (*(byte *)(pinArray + 0x16) & 0xf) & 0xffff;\n        pinFunctionSelectBits = (valueFromArray >> 3 & 1) << 4 | valueFromArray & 7;\n        pinModeBits = (valueFromArray << 0x1a) >> 0x1e;\n        updateBits(memoryAddress,&uartPinBitMask);\n        (&DAT_200006c0)[*(byte *)(pinArray + 0x11)] = pinArray + 1;\n        pinArray[1] = *pinArray;\n        pinArray[2] = pinArray[0x12];\n        pinArray[3] = pinArray[0x13];\n        pinArray[4] = pinArray[0x14];\n        pinArray[5] = pinArray[0x15];\n        pinArray[6] = 0xc;\n        pinArray[7] = 0;\n        pinArray[8] = 0;\n        initializeParameters(pinArray + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "pinArray",
                "iVar1": "uartPinIndex",
                "iVar2": "peripheralPinIndex",
                "uVar3": "memoryAddress",
                "uVar4": "valueFromArray",
                "local_20": "uartPinBitMask",
                "local_1c": "pinFunctionSelectBits",
                "local_18": "pinModeBits",
                "local_14": "numBitsToUpdate",
                "initialize_and_parse_input_080098d8": "printErrorMessage",
                "compare_and_return_080073ae": "compareUARTPins",
                "set_memory_address_08006bb8": "setMemoryAddress",
                "get_value_from_array_08007376": "getValueFromArray",
                "update_bits_080040e8": "updateBits",
                "initialize_parameters_0800674e": "initializeParameters"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int value_index;\n  undefined4 nonzero_index;\n  \n  value_index = find_valid_value_index_08007320(2,&DAT_0800a864);\n  if (value_index != 0) {\n    nonzero_index = find_valid_value_index_08007320(2,&DAT_0800a864);\n    DAT_20000075 = find_first_nonzero_0800734a(nonzero_index,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_uart_080084b0_pins_08008078(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "value_index",
                "uVar2": "nonzero_index"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_communication_08008500",
            "code": "\nuint processCommunication_08008500(undefined4 inputValue,uint parameter)\n\n{\n  int globalValue1;\n  int validValueIndex;\n  uint index;\n  \n  globalValue1 = get_global_value_08003760();\n  validValueIndex = find_valid_value_index_08007320(2,&DAT_0800a864);\n  if (validValueIndex == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (validValueIndex = find_valid_value_index_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != validValueIndex))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_uart_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    validValueIndex = process_input_080067ac((&DAT_200006c0)[index],inputValue,parameter & 0xffff,1000);\n    if (validValueIndex == 0) {\n      return parameter;\n    }\n    validValueIndex = get_global_value_08003760();\n  } while ((uint)(validValueIndex - globalValue1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_communication_08008500",
                "param_1": "inputValue",
                "param_2": "parameter",
                "iVar1": "globalValue1",
                "iVar2": "validValueIndex",
                "uVar3": "index"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_combination_080085b8",
            "code": "\nbool check_combination_080085b8(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200006c0)[*(byte *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_combination_080085b8",
                "param_1": "input_value",
                "uVar1": "combined_bytes",
                "combine_bytes_08006b1c": "combine_bytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_flag_combination_080085dc",
            "code": "\nbool checkFlagCombination_080085dc(int flagIndex)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_byteValues_08006b1c((&DAT_200006c0)[*(byteValue *)(flagIndex + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_flag_combination_080085dc",
                "param_1": "flagIndex",
                "uVar1": "combinedBytes",
                "byte": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "validate_combination_08008600",
            "code": "\nundefined4 validate_combination_08008600(int input_length,undefined *output,undefined4 param_3,undefined4 param_4)\n\n{\n  int combination_valid;\n  \n  if (input_length == 0) {\n    return 0xffffffff;\n  }\n  combination_valid = check_combination();\n  if (combination_valid == 0) {\n    *output = *(undefined *)(input_length + 0x45);\n    validate_input((&DAT_200006c0)[*(byte *)(input_length + 0x44)],input_length + 0x45,1,&DAT_200006c0,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "validate_combination_08008600",
                "param_1": "input_length",
                "param_2": "output",
                "iVar1": "combination_valid",
                "check_combination_080085b8": "check_combination",
                "check_valid_input_080068d6": "validate_input"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "update_memory_with_combination_0800863c",
            "code": "\nvoid updateMemoryWithCombination_0800863c(int combination,undefined4 data,undefined4 unknown,undefined4 otherData)\n\n{\n  int result;\n  uint combinationIndex;\n  \n  if (combination != 0) {\n    result = check_combination_080085b8();\n    if (result == 0) {\n      combinationIndex = (uint)*(byte *)(combination + 0x44);\n      *(undefined4 *)(&DAT_20000670 + combinationIndex * 4) = data;\n      *(int *)(&DAT_20000684 + combinationIndex * 4) = combination;\n      update_memory_08003f30((int)*(char *)(combination + 0x5a),0,1,combinationIndex,otherData);\n      set_bit_in_memory_08003f94((int)*(char *)(combination + 0x5a));\n      check_valid_input_080068d6((&DAT_200006c0)[*(byte *)(combination + 0x44)],combination + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "update_memory_with_combination_0800863c",
                "param_1": "combination",
                "param_2": "data",
                "param_3": "unknown",
                "param_4": "otherData",
                "iVar1": "result",
                "uVar2": "combinationIndex"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_memory_08008694",
            "code": "\nvoid updateMemory_08008694(int inputPtr,undefined4 dataValue)\n\n{\n  byte byteValue;\n  \n  if (inputPtr != 0) {\n    byteValue = *(byte *)(inputPtr + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = dataValue;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = inputPtr;\n    update_memory_08003f30((int)*(char *)(inputPtr + 0x5a),0,2);\n    set_bit_in_memory_08003f94((int)*(char *)(inputPtr + 0x5a));\n    check_and_update_data_0800688e((&DAT_200006c0)[*(byte *)(inputPtr + 0x44)],\n                 *(int *)(inputPtr + 100) + (uint)*(ushort *)(inputPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_memory_08008694",
                "param_1": "inputPtr",
                "param_2": "dataValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint findValueIndex_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_selected_function_0800870c",
            "code": "\nvoid execute_selected_function_0800870c(void)\n\n{\n  uint value_index;\n  \n  value_index = find_value_index();\n  if (value_index < 5) {\n    (**(code **)(&DAT_20000670 + value_index * 4))(*(undefined4 *)(&DAT_20000684 + value_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_selected_function_0800870c",
                "uVar1": "value_index",
                "find_value_index_080086e8": "find_value_index"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "handle_value_08008730",
            "code": "\nvoid handle_value_08008730(void)\n\n{\n  uint value_index;\n  int result;\n  int data_index;\n  \n  value_index = find_value_index_080086e8();\n  data_index = *(int *)(&DAT_200006ac + value_index * 4);\n  if ((value_index < 5) && (result = (**(code **)(&DAT_20000698 + value_index * 4))(data_index), result != -1)) {\n    check_and_update_data_0800688e((&DAT_200006c0)[*(byte *)(data_index + 0x44)],\n                 *(int *)(data_index + 100) + (uint)*(ushort *)(data_index + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "handle_value_08008730",
                "uVar1": "value_index",
                "iVar2": "result",
                "iVar3": "data_index"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocatedMemory = DAT_200006d4;\n  if (DAT_200006d4 + size <= &stackTop) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocatedMemory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "stack0x00000000": "stackTop"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "initialize_return_value_08008840",
            "code": "\nundefined4 initializeReturnValue_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "initialize_return_value_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_memory_size_08008846",
            "code": "\nundefined4 setMemorySize_08008846(undefined4 param_1,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_memory_size_08008846",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_08008850",
            "code": "\nundefined4 initialize_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_default_settings_08008854",
            "code": "\nundefined4 initializeDefaultSettings_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_default_settings_08008854"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_system_08008858",
            "code": "\nundefined4 initializeSystem_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_system_08008858"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_communication_0800885c",
            "code": "\nvoid processCommunication_0800885c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  process_communication_08008500(arg2,arg3,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_communication_0800885c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "initialize_program_0800887c",
            "code": "\nundefined4 initializeProgram_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "initialize_program_0800887c"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "decode_configuration_08008880",
            "code": "\nuint decode_configuration_08008880(uint input_value)\n\n{\n  bool is_small_value;\n  char result_char;\n  uint processed_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_small_value = true;\n    }\n    else {\n      is_small_value = false;\n    }\n  }\n  else {\n    is_small_value = input_value < 0x3c;\n  }\n  if (is_small_value) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    result_char = (&DAT_0800a908)[input_value];\n  }\n  else {\n    result_char = -1;\n  }\n  if (result_char == -1) {\n    processed_value = 0;\n  }\n  else {\n    processed_value = process_configuration_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return processed_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return processed_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return processed_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "decode_configuration_08008880",
                "param_1": "input_value",
                "bVar1": "is_small_value",
                "cVar2": "result_char",
                "uVar3": "processed_value"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "update_parameter_080088e0",
            "code": "\nvoid updateParameter_080088e0(uint index,uint value)\n\n{\n  int position;\n  int data;\n  \n  if (index < 0x3c) {\n    data = (int)(char)(&DAT_0800a908)[index];\n  }\n  else {\n    data = -1;\n  }\n  if (data != -1) {\n    position = findPosition(data,&DAT_0800a6cc);\n    if (position == 0) {\n      performMemoryOperation(index,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        updateParamValue(index,0);\n      }\n      else {\n        updateParamValue(index,1);\n      }\n    }\n    else {\n      position = isBitExtracted(data,&DAT_200006d8);\n      if (position == 0) {\n        setBitInArray(data,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initializeAndUpdateParams(data,0x3e418,0xff,value,position == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "update_parameter_080088e0",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "position",
                "iVar2": "data",
                "find_value_position_0800738a": "findPosition",
                "perform_memory_operation_08008990": "performMemoryOperation",
                "update_parameter_value_08008a24": "updateParamValue",
                "extracted_data_bit_08006b28": "isBitExtracted",
                "set_bit_in_array_08006b3e": "setBitInArray",
                "initialize_and_update_params_08007118": "initializeAndUpdateParams"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "perform_memory_operation_08008990",
            "code": "\nvoid performMemoryOperation_08008990(uint index,undefined4 mode,undefined4 value,undefined1 *dataArray)\n\n{\n  int result;\n  undefined1 *dataPtr;\n  int dataIndex;\n  \n  if (index < 0x3c) {\n    dataIndex = (int)(char)(&DAT_0800a908)[index];\n    dataPtr = &DAT_0800a908;\n  }\n  else {\n    dataIndex = -1;\n    dataPtr = dataArray;\n  }\n  if (dataIndex != -1) {\n    result = extracted_data_bit_08006b28(dataIndex,&DAT_200006d8,value,dataPtr,dataArray);\n    if (result != 0) {\n      result = find_value_position_0800738a(dataIndex,&DAT_0800a6cc);\n      if (result != 0) {\n        update_flags_based_on_value_080071e4(dataIndex);\n      }\n      update_array_value_08006b5c(dataIndex,&DAT_200006d8);\n    }\n    switch(mode) {\n    case 0:\n      initialize_memory_08007258(dataIndex,0);\n      break;\n    case 1:\n      initialize_memory_08007258(dataIndex,1,0);\n      break;\n    case 2:\n      initialize_memory_08007258(dataIndex,0,1);\n      break;\n    case 3:\n      initialize_memory_08007258(dataIndex,0,2);\n    }\n    set_bit_in_array_08006b3e(dataIndex,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "perform_memory_operation_08008990",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "value",
                "param_4": "dataArray",
                "iVar1": "result",
                "puVar2": "dataPtr",
                "iVar3": "dataIndex"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "update_parameter_value_08008a24",
            "code": "\nvoid updateParameterValue_08008a24(uint inputIndex,undefined4 paramValue,undefined4 param3,undefined1 *dataPtr)\n\n{\n  int result;\n  undefined4 address;\n  undefined1 *charPtr;\n  uint charValue;\n  \n  if (inputIndex < 0x3c) {\n    charValue = (uint)(char)(&DAT_0800a908)[inputIndex];\n    charPtr = &DAT_0800a908;\n  }\n  else {\n    charValue = 0xffffffff;\n    charPtr = dataPtr;\n  }\n  if ((charValue != 0xffffffff) &&\n     (result = extractDataBit(charValue,&DAT_200006ec,param3,charPtr,dataPtr), result != 0)) {\n    address = mapParamToAddress((charValue << 0x18) >> 0x1c);\n    updateParamValue(address,1 << (charValue & 0xf) & 0xffff,paramValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "update_parameter_value_08008a24",
                "param_1": "inputIndex",
                "param_2": "paramValue",
                "param_3": "param3",
                "param_4": "dataPtr",
                "uVar4": "charValue",
                "puVar3": "charPtr",
                "iVar1": "result",
                "uVar2": "address",
                "extracted_data_bit_08006b28": "extractDataBit",
                "map_param_to_address_08006b7c": "mapParamToAddress",
                "update_param_value_080072d8": "updateParamValue"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_data_flag_08008a6c",
            "code": "\nchar check_data_flag_08008a6c(uint input_value)\n\n{\n  char result;\n  int bit_check_result;\n  undefined4 address;\n  uint index;\n  \n  if (input_value < 0x3c) {\n    index = (uint)(char)(&DAT_0800a908)[input_value];\n  }\n  else {\n    index = 0xffffffff;\n  }\n  if (index == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_check_result = extracted_data_bit_08006b28(index,&DAT_200006ec);\n    if (bit_check_result == 0) {\n      result = '\\0';\n    }\n    else {\n      address = map_param_to_address_08006b7c((index << 0x18) >> 0x1c);\n      result = check_bit_flag_080072f0(address,1 << (index & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_data_flag_08008a6c",
                "param_1": "input_value",
                "cVar1": "result",
                "iVar2": "bit_check_result",
                "uVar3": "address",
                "uVar4": "index"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_global_value_08008abc",
            "code": "\nvoid initialize_global_value_08008abc(void)\n\n{\n  initialize_global_value_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_global_value_08008abc"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_checksum_08008afa",
            "code": "\nushort calculateChecksum_08008afa(int memoryAddress)\n\n{\n  return (*(short *)(memoryAddress + 0x134) + 0x40) - *(short *)(memoryAddress + 0x136) bitwiseAnd 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_checksum_08008afa",
                "param_1": "memoryAddress",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_combination_08008b66",
            "code": "\nvoid updateCombination_08008b66(int combination)\n\n{\n  int validationResult;\n  ushort updatedIndex;\n  undefined newValue;\n  \n  validationResult = validate_combination_08008600(combination,&newValue);\n  if ((validationResult == 0) &&\n     (updatedIndex = *(short *)(combination + 0x60) + 1U & 0x3f, updatedIndex != *(ushort *)(combination + 0x62))) {\n    *(undefined *)(*(int *)(combination + 0x5c) + (uint)*(ushort *)(combination + 0x60)) = newValue;\n    *(ushort *)(combination + 0x60) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_combination_08008b66",
                "param_1": "combination",
                "iVar1": "validationResult",
                "uVar2": "updatedIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_function_08008c20",
            "code": "\nvoid initializeFunction_08008c20(int memoryAddress)\n\n{\n  *(int *)(memoryAddress + 0x130) = memoryAddress + 0x11;\n  *(undefined2 *)(memoryAddress + 0x134) = 0;\n  *(undefined2 *)(memoryAddress + 0x136) = 0;\n  *(int *)(memoryAddress + 0x138) = memoryAddress + 0x51;\n  *(undefined2 *)(memoryAddress + 0x13c) = 0;\n  *(undefined2 *)(memoryAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_function_08008c20",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_port_08008c44",
            "code": "\nvoid initializeSerialPort_08008c44(int serialPortAddress,undefined4 baudRate,byte serialConfig)\n\n{\n  uint configValue;\n  byte configOption;\n  int numConfigs;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x140) = serialConfig;\n  configOption = serialConfig & 7;\n  if (configOption == 4) {\n    numConfigs = 7;\n  }\n  else if (configOption == 6) {\n    numConfigs = 8;\n  }\n  else if (configOption == 2) {\n    numConfigs = 6;\n  }\n  else {\n    numConfigs = 0;\n  }\n  if ((serialConfig & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    numConfigs = numConfigs + 1;\n  }\n  else if ((serialConfig & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    numConfigs = numConfigs + 1;\n  }\n  if ((serialConfig & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (numConfigs == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (numConfigs == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    numConfigs = 0;\n  }\n  if (numConfigs != 0) {\n    initialize_uart_pins_08008078(serialPortAddress + 0xd4);\n    update_memory_with_combination_0800863c(serialPortAddress + 0xd4,0x8008b67);\n    return;\n  }\n  jumpTable = (code *)0x8008cee;\n  handle_assertion_failure_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (configValue < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[configValue];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0,configValue,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_port_08008c44",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "serialConfig",
                "extraout_r1": "configValue",
                "bVar1": "configOption",
                "iVar2": "numConfigs",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "decode_and_execute_08008d00",
            "code": "\nvoid decode_and_execute_08008d00(int address,uint index)\n\n{\n  undefined value;\n  code *jump_table;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "decode_and_execute_08008d00",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_value_08008d18",
            "code": "\nvoid setByteValue_08008d18(int baseAddress,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_and_execute_08008d30",
            "code": "\nundefined4 *\ninitializeAndExecute_08008d30(undefined4 *array,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined nonZeroValue;\n  \n  array[1] = 0;\n  array[2] = 1000;\n  *array = &PTR_LAB_08008ba4_1_0800aab8;\n  if (array == (undefined4 *)&DAT_20000700) {\n    decodeAndExecute(&DAT_20000700,0,value2,&DAT_20000700,value3);\n    setByteValue(&DAT_20000700,1);\n  }\n  else {\n    nonZeroValue = findFirstNonZero(value1,&DAT_0800a81c);\n    *(undefined *)((int)array + 0x12d) = nonZeroValue;\n    nonZeroValue = findFirstNonZero(value1,&DAT_0800a864);\n    *(undefined *)(array + 0x4b) = nonZeroValue;\n  }\n  initializeFunction(array);\n  return array;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_and_execute_08008d30",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "nonZeroValue",
                "decode_and_execute_08008d00": "decodeAndExecute",
                "set_byte_value_08008d18": "setByteValue",
                "find_first_nonzero_0800734a": "findFirstNonZero",
                "initialize_function_08008c20": "initializeFunction"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_and_execute_08008d8c",
            "code": "\nvoid initialize_and_execute_08008d8c(int status,int value,undefined4 param,undefined4 flag)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_and_execute_08008d8c_function(&DAT_20000700,0x40004400,param,0xffff,flag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_and_execute_08008d8c",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param",
                "param_4": "flag",
                "initialize_and_execute_08008d30": "initialize_and_execute_function"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "set_data_08008df8",
            "code": "\nvoid set_data_08008df8(undefined4 *result,undefined value_1,undefined value_2,undefined value_3,\n                 undefined value_4)\n\n{\n  *result = &DAT_0800ab0c;\n  *(undefined *)(result + 1) = value_1;\n  *(undefined *)((int)result + 5) = value_2;\n  *(undefined *)((int)result + 6) = value_3;\n  *(undefined *)((int)result + 7) = value_4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "set_data_08008df8",
                "param_1": "result",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_08008e14",
            "code": "\nvoid initializeData_08008e14(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    set_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_08008e14",
                "param_1": "flag",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_value_08008ef4",
            "code": "\nint calculate_value_08008ef4(int lower_bound,int lower_value,int upper_bound,int lower_range,int upper_range)\n\n{\n  return (uint)((upper_range - lower_range) * (lower_bound - lower_value)) / (uint)(upper_bound - lower_value) + lower_range;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_value_08008ef4",
                "param_1": "lower_bound",
                "param_2": "lower_value",
                "param_3": "upper_bound",
                "param_4": "lower_range",
                "param_5": "upper_range"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_and_update_device_08008f0e",
            "code": "\nvoid initialize_and_update_device_08008f0e(void)\n\n{\n  update_data(3);\n  initialize_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_and_update_device_08008f0e",
                "update_data_08003f0c": "update_data",
                "initialize_device_080036a2": "initialize_device"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "process_continuous_data_08008f1c",
            "code": "\nvoid process_continuous_data_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_data();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "process_continuous_data_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_data_080022f8": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_bit_shifts_08008f3c",
            "code": "\nchar countBitShifts_08008f3c(uint input)\n\n{\n  char bitShiftCount;\n  \n  bitShiftCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitShiftCount = bitShiftCount + '\\x01';\n  }\n  return bitShiftCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_bit_shifts_08008f3c",
                "param_1": "input",
                "cVar1": "bitShiftCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_memory_08008f78",
            "code": "\nvoid initializeMemory_08008f78(int condition,int value,undefined4 data1,undefined4 data2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    left_shift_by_32_bits_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,data2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_memory_08008f78",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_data_08009084",
            "code": "\nvoid processData_08009084(int input)\n\n{\n  int shiftCount;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  process_data_0800a18c();\n  shiftCount = count_bit_shifts_08008f3c();\n  if ((&DAT_20000858)[shiftCount * 5] != 0) {\n    processData_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "input",
                "iVar1": "shiftCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int bitShiftCount;\n  \n  bitShiftCount = getBitShiftCount();\n  if ((&DAT_20000858)[bitShiftCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "bitShiftCount",
                "count_bit_shifts_08008f3c": "getBitShiftCount",
                "process_data_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "left_shift_by_32_bits_080090c2",
            "code": "\nvoid left_shift_by_32_bits_080090c2(undefined4 source,undefined4 destination)\n\n{\n  shift_left_by32_08009108(destination,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "left_shift_by_32_bits_080090c2",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "handle_assertion_failure_080090cc",
            "code": "\nvoid handle_assertion_failure_080090cc(undefined4 file_name,undefined4 line_number,char *message,undefined4 function_name)\n\n{\n  undefined4 ptr_offset;\n  char *additional_info;\n  undefined8 result;\n  undefined4 param_4;\n  \n  ptr_offset = *(undefined4 *)(DAT_20000090 + 0xc);\n  param_4 = function_name;\n  if (message == (char *)0x0) goto LAB_080090f0;\n  additional_info = \", function: \";\n  do {\n    print_assertion_failure(ptr_offset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,file_name,line_number\n                 ,additional_info,message,param_4);\n    result = process_data();\n    line_number = (undefined4)((ulonglong)result >> 0x20);\n    ptr_offset = (undefined4)result;\nLAB_080090f0:\n    message = \"\";\n    additional_info = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "handle_assertion_failure_080090cc",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "message",
                "param_4": "function_name",
                "uVar1": "ptr_offset",
                "pcVar2": "additional_info",
                "uVar3": "result",
                "uVar4": "param_4",
                "handle_input_08009124": "print_assertion_failure",
                "process_data_08009b5c": "process_data"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_left_by32_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftLeftBy32_08009108(undefined4 flags,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_left_by32_08009108",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "handle_input_08009124",
            "code": "\nvoid handle_input_08009124(undefined4 input_param_1,undefined4 input_param_2,undefined4 output_param_1,undefined4 output_param_2)\n\n{\n  undefined4 output_param_1_updated;\n  undefined4 output_param_2_updated;\n  \n  output_param_1_updated = output_param_1;\n  output_param_2_updated = output_param_2;\n  parse_and_handle_input_08009124_0800937c(DAT_20000090,input_param_1,input_param_2,&output_param_1_updated,input_param_1,&output_param_1_updated);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "handle_input_08009124",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "output_param_1",
                "param_4": "output_param_2",
                "uStack_8": "output_param_1_updated",
                "uStack_4": "output_param_2_updated"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid allocateMemory_08009190(undefined4 memorySize)\n\n{\n  allocate_memory_08009270(DAT_20000090,memorySize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "param_1": "memorySize"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "update_linked_list_080091a0",
            "code": "\nvoid updateLinkedList_080091a0(undefined4 inputParam)\n\n{\n  update_linked_list_080091d8(DAT_20000090,inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "update_linked_list_080091a0",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_array_to_buffer_080091b0",
            "code": "\nvoid copy_array_to_buffer_080091b0(int buffer_start,undefined *source_array,int array_length)\n\n{\n  undefined *end_of_array;\n  undefined *buffer_end;\n  \n  buffer_end = (undefined *)(buffer_start + -1);\n  end_of_array = source_array + array_length;\n  for (; source_array != end_of_array; source_array = source_array + 1) {\n    buffer_end = buffer_end + 1;\n    *buffer_end = *source_array;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_array_to_buffer_080091b0",
                "param_1": "buffer_start",
                "param_2": "source_array",
                "param_3": "array_length",
                "puVar1": "end_of_array",
                "puVar2": "buffer_end"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *destination,undefined value,int size)\n\n{\n  undefined *endPosition;\n  \n  endPosition = destination + size;\n  for (; destination != endPosition; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPosition"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "update_linked_list_080091d8",
            "code": "\nvoid updateLinkedList_080091d8(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **newNode;\n  int **currentNode;\n  int **nextNode;\n  int *temp;\n  int **prevNode;\n  int **newLinkedList;\n  \n  if (size == 0) {\n    return;\n  }\n  newLinkedList = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newLinkedList = (int **)((int)newLinkedList + *(int *)(size + -4));\n  }\n  FUNC_08009f48();\n  nextNode = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    newLinkedList[1] = (int *)0x0;\n    currentNode = newNode;\n    DAT_2000098c = newLinkedList;\n  }\n  else {\n    nextNode = DAT_2000098c;\n    if (newLinkedList < DAT_2000098c) {\n      currentNode = (int **)*newLinkedList;\n      nextNode = (int **)((int)newLinkedList + (int)currentNode);\n      if (DAT_2000098c == nextNode) {\n        temp = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        nextNode = (int **)((int)temp + (int)currentNode);\n        *newLinkedList = (int *)nextNode;\n      }\n      newLinkedList[1] = (int *)DAT_2000098c;\n      DAT_2000098c = newLinkedList;\n    }\n    else {\n      do {\n        prevNode = nextNode;\n        nextNode = (int **)prevNode[1];\n        if (nextNode == (int **)0x0) break;\n      } while (nextNode <= newLinkedList);\n      currentNode = (int **)*prevNode;\n      if ((int **)((int)prevNode + (int)currentNode) == newLinkedList) {\n        currentNode = (int **)((int)currentNode + (int)*newLinkedList);\n        *prevNode = (int *)currentNode;\n        if (nextNode == (int **)((int)prevNode + (int)currentNode)) {\n          temp = *nextNode;\n          nextNode = (int **)nextNode[1];\n          currentNode = (int **)((int)currentNode + (int)temp);\n          *prevNode = (int *)currentNode;\n          prevNode[1] = (int *)nextNode;\n        }\n      }\n      else if (newLinkedList < (int **)((int)prevNode + (int)currentNode)) {\n        *result = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)newLinkedList + (int)*newLinkedList);\n        if (nextNode == currentNode) {\n          temp = *nextNode;\n          nextNode = (int **)nextNode[1];\n          currentNode = (int **)((int)temp + (int)*newLinkedList);\n          *newLinkedList = (int *)currentNode;\n        }\n        newLinkedList[1] = (int *)nextNode;\n        prevNode[1] = (int *)newLinkedList;\n      }\n    }\n  }\n  FUNC_08009f4a(result,currentNode,nextNode,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "update_linked_list_080091d8",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "newNode",
                "ppiVar1": "currentNode",
                "ppiVar2": "nextNode",
                "piVar3": "temp",
                "ppiVar4": "prevNode",
                "ppiVar5": "newLinkedList"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *output_buffer,uint input_size)\n\n{\n  uint *current_block;\n  int block_size;\n  uint *previous_block;\n  uint block_diff;\n  uint *previous_block_next;\n  uint required_size;\n  \n  required_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (required_size < 0xc) {\n    required_size = 0xc;\n  }\n  if (((int)required_size < 0) || (required_size < input_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    previous_block_next = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_diff = *previous_block - required_size;\n      if (-1 < (int)block_diff) {\n        if (block_diff < 0xc) {\n          if (previous_block_next == previous_block) {\n            current_block = (uint *)previous_block_next[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block_next != previous_block) {\n            previous_block_next[1] = (uint)current_block;\n            previous_block_next = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_diff;\n          *(uint *)((int)previous_block + block_diff) = required_size;\n          previous_block_next = (uint *)((int)previous_block + block_diff);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block_next = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = initialize_memory(output_buffer);\n    }\n    current_block = (uint *)initialize_memory(output_buffer,required_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block_next = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block_next ||\n        (block_size = initialize_memory(output_buffer,(int)previous_block_next - (int)current_block), block_size != -1)))) {\n      *previous_block_next = required_size;\nLAB_080092d4:\n      FUNC_08009f4a(output_buffer);\n      required_size = (int)previous_block_next + 0xbU & 0xfffffff8;\n      block_size = required_size - (int)(previous_block_next + 1);\n      if (block_size != 0) {\n        *(int *)((int)previous_block_next + block_size) = -block_size;\n        return required_size;\n      }\n      return required_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_08009f4a(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "puVar1": "current_block",
                "iVar2": "block_size",
                "puVar3": "previous_block",
                "uVar4": "block_diff",
                "puVar5": "previous_block_next",
                "uVar6": "required_size",
                "initialize_memory_08009918": "initialize_memory"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int data_ptr,byte input_byte,byte **params_ptr)\n\n{\n  int temp_int;\n  byte *temp_byte_ptr_1;\n  byte *temp_byte_ptr_2;\n  uint result;\n  \n  temp_byte_ptr_1 = params_ptr[2] + -1;\n  params_ptr[2] = temp_byte_ptr_1;\n  if ((-1 < (int)temp_byte_ptr_1) ||\n     (((int)params_ptr[6] <= (int)temp_byte_ptr_1 && (temp_byte_ptr_1 = (byte *)(uint)input_byte, temp_byte_ptr_1 != (byte *)0xa))))\n  {\n    temp_byte_ptr_1 = *params_ptr;\n    *params_ptr = temp_byte_ptr_1 + 1;\n    *temp_byte_ptr_1 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    initialize_data();\n  }\n  if (params_ptr == (byte **)&DAT_0800aba4) {\n    params_ptr = *(byte ***)(data_ptr + 4);\n  }\n  else if (params_ptr == (byte **)&DAT_0800abc4) {\n    params_ptr = *(byte ***)(data_ptr + 8);\n  }\n  else if (params_ptr == (byte **)&DAT_0800ab84) {\n    params_ptr = *(byte ***)(data_ptr + 0xc);\n  }\n  params_ptr[2] = params_ptr[6];\n  temp_byte_ptr_2 = (byte *)(uint)*(ushort *)(params_ptr + 3);\n  temp_int = (int)temp_byte_ptr_2 << 0x1c;\n  if (((temp_int < 0) && (temp_byte_ptr_2 = params_ptr[4], temp_byte_ptr_2 != (byte *)0x0)) ||\n     (temp_int = process_data_1(data_ptr,params_ptr,temp_int,temp_byte_ptr_2,temp_byte_ptr_1), temp_int == 0)) {\n    result = (uint)input_byte;\n    temp_int = (int)*params_ptr - (int)params_ptr[4];\n    if ((temp_int < (int)params_ptr[5]) || (temp_int = process_data_2(data_ptr,params_ptr), temp_int == 0)) {\n      params_ptr[2] = params_ptr[2] + -1;\n      temp_byte_ptr_1 = *params_ptr;\n      *params_ptr = temp_byte_ptr_1 + 1;\n      *temp_byte_ptr_1 = input_byte;\n      if ((byte *)(temp_int + 1) != params_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(params_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_int = process_data_2(data_ptr,params_ptr);\n      if (temp_int == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "data_ptr",
                "param_2": "input_byte",
                "param_3": "params_ptr",
                "iVar1": "temp_int",
                "pbVar2": "temp_byte_ptr_1",
                "pbVar3": "temp_byte_ptr_2",
                "uVar4": "result",
                "initialize_memory_and_data_structure_08009d50": "initialize_data",
                "process_data_08009a80": "process_data_1",
                "process_data_08009c7c": "process_data_2"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_and_increment_input_08009358",
            "code": "\nint processAndIncrementInput_08009358(undefined4 inputSize,undefined4 inputValue,undefined *inputArray,int arraySize)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentIndex;\n  \n  endPointer = inputArray + arraySize;\n  currentIndex = arraySize;\n  do {\n    if (inputArray == endPointer) {\n      return 0;\n    }\n    result = process_input_0800932c(inputSize,*inputArray,inputValue,arraySize,currentIndex);\n    arraySize = result + 1;\n    inputArray = inputArray + 1;\n  } while (arraySize != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_and_increment_input_08009358",
                "param_1": "inputSize",
                "param_2": "inputValue",
                "param_3": "inputArray",
                "param_4": "arraySize",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentIndex"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "parse_and_handle_input_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint parseAndHandleInput_0800937c(int input,undefined4 *settings,byte *inputString,int *output)\n\n{\n  int result;\n  int *ptr;\n  bool found;\n  byte *currentChar;\n  byte *nextChar;\n  int parseResult;\n  int tempVar;\n  int *outputPtr;\n  uint modifiers;\n  int precision;\n  undefined4 unusedVar;\n  int width;\n  int totalProcessed;\n  byte specifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined flag;\n  undefined4 unusedVar2;\n  \n  outputPtr = output;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50();\n  }\n  if (settings == &DAT_0800aba4) {\n    settings = *(undefined4 **)(input + 4);\n  }\n  else if (settings == (undefined4 *)&DAT_0800abc4) {\n    settings = *(undefined4 **)(input + 8);\n  }\n  else if (settings == (undefined4 *)&DAT_0800ab84) {\n    settings = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(settings + 3) << 0x1c)) || (settings[4] == 0)) &&\n     (tempVar = process_data_08009a80(input,settings), tempVar != 0)) {\n    return -1;\n  }\n  totalProcessed = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = inputString;\nLAB_080093be:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  tempVar = (int)nextChar - (int)inputString;\n  if (tempVar != 0) {\n    result = process_and_increment_input_08009358(input,settings,inputString,tempVar);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(settings + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalProcessed;\n    }\n    totalProcessed = totalProcessed + tempVar;\n  }\n  if (*nextChar == 0) goto LAB_08009568;\n  modifiers = 0;\n  width = 0;\n  precision = -1;\n  unusedVar = 0;\n  flag = 0;\n  unusedVar2 = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    tempVar = find_char_in_string_08009f2c(\"#-0+ \",*currentChar);\n    inputString = currentChar + 1;\n    if (tempVar == 0) break;\n    modifiers = 1 << (tempVar + 0xf7ff54b0U & 0xff) | modifiers;\n    currentChar = inputString;\n  }\n  if ((int)(modifiers << 0x1b) < 0) {\n    flag = 0x20;\n  }\n  if ((int)(modifiers << 0x1c) < 0) {\n    flag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    ptr = outputPtr + 1;\n    tempVar = *outputPtr;\n    outputPtr = ptr;\n    if (tempVar < 0) {\n      width = -tempVar;\n      modifiers = modifiers | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    found = false;\n    tempVar = width;\n    inputString = currentChar;\n    while( true ) {\n      if (9 < *inputString - 0x30) break;\n      tempVar = tempVar * 10 + (*inputString - 0x30);\n      found = true;\n      inputString = inputString + 1;\n    }\n    if (!found) goto LAB_080094a6;\n  }\n  width = tempVar;\nLAB_080094a6:\n  if (*inputString == 0x2e) {\n    if (inputString[1] == 0x2a) {\n      inputString = inputString + 2;\n      ptr = outputPtr + 1;\n      precision = *outputPtr;\n      outputPtr = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      found = false;\n      tempVar = 0;\n      precision = 0;\n      while( true ) {\n        inputString = inputString + 1;\n        if (9 < *inputString - 0x30) break;\n        tempVar = tempVar * 10 + (*inputString - 0x30);\n        found = true;\n      }\n      if (found) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = find_char_in_string_08009f2c(&DAT_0800ab56,*inputString,3);\n  if (tempVar != 0) {\n    inputString = inputString + 1;\n    modifiers = modifiers | 0x40 << (tempVar + 0xf7ff54aaU & 0xff);\n  }\n  specifier = *inputString;\n  inputString = inputString + 1;\n  tempVar = find_char_in_string_08009f2c(\"efgEFG\",specifier,6);\n  if (tempVar == 0) {\n    parseResult = parse_and_handle_data_08009698(input,&modifiers,settings,0x8009359,&outputPtr);\n    if (parseResult == -1) goto LAB_08009568;\n  }\n  else {\n    outputPtr = (int *)(((int)outputPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalProcessed = totalProcessed + parseResult;\n  currentChar = inputString;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "parse_and_handle_input_0800937c",
                "param_1": "input",
                "param_2": "settings",
                "param_3": "inputString",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "found",
                "pbVar4": "currentChar",
                "pbVar5": "nextChar",
                "unaff_r9": "parseResult",
                "iVar6": "tempVar",
                "local_8c": "outputPtr",
                "local_88": "modifiers",
                "local_84": "precision",
                "local_80": "unusedVar",
                "local_7c": "width",
                "local_74": "totalProcessed",
                "local_70": "specifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "flag",
                "local_30": "unusedVar2"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "parse_and_process_data_080095a8",
            "code": "\nundefined4\nparseAndProcessData_080095a8(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index1;\n  int index2;\n  uint maxValue;\n  uint offset;\n  bool isTrue;\n  \n  maxValue = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxValue = data[2];\n  }\n  *output = maxValue;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxValue + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index1 = 0; index1 < (int)(data[3] - *output); index1 = index1 + 1) {\n      index2 = (*callback)(input,param,(int)data + 0x19,1);\n      if (index2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  offset = maxValue;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxValue + 0x43) = 0x30;\n    offset = maxValue + 2;\n    *(undefined *)((int)data + maxValue + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index1 = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index1 != -1) {\n    maxValue = data[3];\n    isTrue = (*data & 6) != 4;\n    if (isTrue) {\n      maxValue = 0;\n    }\n    offset = 0;\n    if (!isTrue) {\n      maxValue = maxValue - *output;\n    }\n    if (!isTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxValue = maxValue + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxValue == offset) {\n        return 0;\n      }\n      index1 = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index1 == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "parse_and_process_data_080095a8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "maxValue",
                "uVar4": "offset",
                "bVar5": "isTrue"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "parse_and_handle_data_08009698",
            "code": "\nuint parse_and_handle_data_08009698(undefined4 input_value,uint *data_array,undefined4 param_3,code *callback_function,uint **counter)\n\n{\n  byte byte_value;\n  int loop_counter;\n  uint *pointer_value;\n  int inner_loop_counter;\n  char *hexadecimal_array;\n  uint temp_value;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint temp_value_2;\n  char *pointer_to_char;\n  char *pointer_to_string;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data_array + 6);\n  pointer_to_string = (char *)((int)data_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)data_array + 0x45) = 0x58;\n          hexadecimal_array = \"0123456789ABCDEF\";\nLAB_080097e2:\n          temp_value = *data_array;\n          pointer_value = *counter;\n          *counter = pointer_value + 1;\n          if (((temp_value & 0x80) == 0) && ((int)(temp_value << 0x19) < 0)) {\n            result = (uint)*(ushort *)pointer_value;\n          }\n          else {\n            result = *pointer_value;\n          }\n          if ((int)(temp_value << 0x1f) < 0) {\n            *data_array = temp_value | 0x20;\n          }\n          if (result == 0) {\n            *data_array = *data_array & 0xffffffdf;\n          }\n          temp_value = 0x10;\nLAB_08009778:\n          *(undefined *)((int)data_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          result = *data_array;\n          pointer_value = *counter;\n          if ((result & 0x80) == 0) {\n            *counter = pointer_value + 1;\n            if ((result & 0x40) == 0) goto LAB_080096e8;\n            result = (uint)(short)*(ushort *)pointer_value;\n          }\n          else {\n            *counter = pointer_value + 1;\nLAB_080096e8:\n            result = *pointer_value;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)data_array + 0x43) = 0x2d;\n          }\n          hexadecimal_array = \"0123456789ABCDEF\";\n          temp_value = 10;\n        }\n        temp_value_2 = data_array[1];\n        data_array[2] = temp_value_2;\n        pointer_to_char = pointer_to_string;\n        if ((int)temp_value_2 < 0) {\n          if (result != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)data_array + 0x42) = *hexadecimal_array;\n          pointer_to_char = (char *)((int)data_array + 0x42);\n        }\n        else {\n          *data_array = *data_array & 0xfffffffb;\n          if (result == 0) {\n            if (temp_value_2 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp_value_2 = result / temp_value;\n              pointer_to_char = pointer_to_char + -1;\n              *pointer_to_char = hexadecimal_array[result - temp_value * temp_value_2];\n              result = temp_value_2;\n            } while (temp_value_2 != 0);\n          }\n        }\n        if (((temp_value == 8) && ((int)(*data_array << 0x1f) < 0)) && ((int)data_array[1] <= (int)data_array[4]))\n        {\n          pointer_to_char[-1] = '0';\n          pointer_to_char = pointer_to_char + -1;\n        }\n        data_array[4] = (int)pointer_to_string - (int)pointer_to_char;\n        pointer_to_string = pointer_to_char;\n        goto LAB_080097be;\n      }\n      pointer_value = *counter;\n      *counter = pointer_value + 1;\n      *(char *)((int)data_array + 0x42) = (char)*pointer_value;\nLAB_08009728:\n      pointer_to_string = (char *)((int)data_array + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            result = *data_array;\n            pointer_value = *counter;\n            if ((result & 0x80) == 0) {\n              *counter = pointer_value + 1;\n              if ((result & 0x40) == 0) goto LAB_0800975c;\n              result = (uint)*(ushort *)pointer_value;\n            }\n            else {\n              *counter = pointer_value + 1;\nLAB_0800975c:\n              result = *pointer_value;\n            }\n            if (byte_value == 0x6f) {\n              temp_value = 8;\n            }\n            else {\n              temp_value = 10;\n            }\n            hexadecimal_array = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *data_array = *data_array | 0x20;\nLAB_0800970e:\n            hexadecimal_array = \"0123456789abcdef\";\n            *(undefined *)((int)data_array + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)data_array + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*counter;\n      *counter = (uint *)(ppcVar8 + 1);\n      pointer_to_string = *ppcVar8;\n      loop_counter = find_char_in_string_08009f2c(pointer_to_string,0,data_array[1]);\n      if (loop_counter != 0) {\n        data_array[1] = loop_counter - (int)pointer_to_string;\n      }\n      result = data_array[1];\n    }\n    data_array[4] = result;\n    *(undefined *)((int)data_array + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  result = *data_array;\n  ppuVar7 = (uint **)*counter;\n  temp_value = data_array[5];\n  if ((result & 0x80) == 0) {\n    *counter = (uint *)(ppuVar7 + 1);\n    pointer_value = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_0800983e;\n    *(short *)pointer_value = (short)temp_value;\n  }\n  else {\n    *counter = (uint *)(ppuVar7 + 1);\n    pointer_value = *ppuVar7;\nLAB_0800983e:\n    *pointer_value = temp_value;\n  }\nLAB_08009852:\n  data_array[4] = 0;\nLAB_080097be:\n  loop_counter = parse_and_process_data_080095a8(input_value,data_array,local_array,param_3,callback_function);\n  if ((loop_counter == -1) || (loop_counter = (*callback_function)(input_value,param_3,pointer_to_string,data_array[4]), loop_counter == -1)) {\nLAB_080097d2:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_array << 0x1e) < 0) {\n      for (loop_counter = 0; loop_counter < (int)(data_array[3] - local_array[0]); loop_counter = loop_counter + 1) {\n        inner_loop_counter = (*callback_function)(input_value,param_3,(int)data_array + 0x19,1);\n        if (inner_loop_counter == -1) goto LAB_080097d2;\n      }\n    }\n    result = data_array[3];\n    if ((int)data_array[3] < (int)local_array[0]) {\n      result = local_array[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009698": "parse_and_handle_data_08009698",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_4": "callback_function",
                "param_5": "counter",
                "bVar1": "byte_value",
                "iVar2": "loop_counter",
                "puVar3": "pointer_value",
                "iVar4": "inner_loop_counter",
                "pcVar5": "hexadecimal_array",
                "uVar6": "temp_value",
                "uVar9": "result",
                "uVar10": "temp_value_2",
                "pcVar11": "pointer_to_char",
                "pcVar12": "pointer_to_string",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "initialize_and_parse_input_080098d8",
            "code": "\nvoid initializeAndParseInput_080098d8(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int dataPtr;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  \n  dataPtr = DAT_20000090;\n  param1 = inputParam1;\n  param2 = inputParam2;\n  param3 = inputParam3;\n  param4 = inputParam4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50(DAT_20000090);\n  }\n  parse_and_handle_input_0800937c(dataPtr,*(undefined4 *)(dataPtr + 8),inputParam1,&param2,param1,&param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "initialize_and_parse_input_080098d8",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "dataPtr",
                "uVar2": "param1",
                "uStack_c": "param2",
                "uStack_8": "param3",
                "uStack_4": "param4"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_and_update_linked_list_08009908",
            "code": "\nint allocateAndUpdateLinkedList_08009908(int sizeOfArray,uint requiredSize)\n\n{\n  undefined4 globalVar;\n  int returnValue;\n  uint sum;\n  \n  globalVar = DAT_20000090;\n  if (sizeOfArray != 0) {\n    if (requiredSize == 0) {\n      update_linked_list_080091d8();\n      returnValue = 0;\n    }\n    else {\n      sum = calculate_sum_0800a154();\n      returnValue = sizeOfArray;\n      if ((sum < requiredSize) && (returnValue = allocate_memory_08009270(globalVar,requiredSize), returnValue != 0)) {\n        copy_array_to_buffer_080091b0(returnValue,sizeOfArray,requiredSize);\n        update_linked_list_080091d8(globalVar,sizeOfArray);\n      }\n    }\n    return returnValue;\n  }\n  returnValue = allocate_memory_08009270(DAT_20000090,requiredSize,requiredSize,&DAT_20000090);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_and_update_linked_list_08009908",
                "param_1": "sizeOfArray",
                "param_2": "requiredSize",
                "uVar1": "globalVar",
                "iVar2": "returnValue",
                "uVar3": "sum"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "initialize_memory_08009918",
            "code": "\nvoid initializeMemory_08009918(int *resultPointer,undefined4 memorySize)\n\n{\n  int allocationResult;\n  \n  DAT_20000a38 = 0;\n  allocationResult = allocate_memory_08008804(memorySize);\n  if ((allocationResult == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "initialize_memory_08009918",
                "param_1": "resultPointer",
                "param_2": "memorySize",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *input_string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = input_string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    input_string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "input_string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_with_null_terminator_08009954",
            "code": "\nvoid copyStringWithNullTerminator_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *destPtr;\n  \n  do {\n    destPtr = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destPtr + 1;\n    *destPtr = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destPtr + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_with_null_terminator_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "destPtr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_character_index_0800997e",
            "code": "\nint find_last_character_index_0800997e(int string,int string_length,undefined4 character_to_find,undefined4 marker)\n\n{\n  int index;\n  int last_character_index;\n  \n  if (string_length != 0) {\n    last_character_index = 0;\n    while (index = find_character_08009938(string,string_length,character_to_find,string,marker), index != 0) {\n      string = index + 1;\n      last_character_index = index;\n    }\n    return last_character_index;\n  }\n  last_character_index = find_character_08009938();\n  return last_character_index;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_character_index_0800997e",
                "param_1": "string",
                "param_2": "string_length",
                "param_3": "character_to_find",
                "param_4": "marker",
                "iVar1": "index",
                "iVar2": "last_character_index"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *str1,char *str2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *temp_char;\n  \n  if (*str1 == '\\0') {\n    if (*str2 != '\\0') {\n      str1 = (char *)0x0;\n    }\n    return str1;\n  }\n  do {\n    current_char1 = str1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    temp_char = str2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      temp_char = temp_char + 1;\n      if (*temp_char == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      str1 = current_char1 + 1;\n    } while (*current_char2 == *temp_char);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "str1",
                "param_2": "str2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "temp_char"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint processData_08009a80(undefined4 *outputPointer,undefined4 *inputPointer)\n\n{\n  int dataAddress;\n  uint result;\n  ushort flags;\n  \n  dataAddress = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_and_data_structure_08009d50(DAT_20000090);\n  }\n  if (inputPointer == &DAT_0800aba4) {\n    inputPointer = *(undefined4 **)(dataAddress + 4);\n  }\n  else if (inputPointer == (undefined4 *)&DAT_0800abc4) {\n    inputPointer = *(undefined4 **)(dataAddress + 8);\n  }\n  else if (inputPointer == (undefined4 *)&DAT_0800ab84) {\n    inputPointer = *(undefined4 **)(dataAddress + 0xc);\n  }\n  flags = *(ushort *)(inputPointer + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputPointer = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputPointer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPointer[0xd] != inputPointer + 0x11) {\n          update_linked_list_080091d8(outputPointer);\n        }\n        inputPointer[0xd] = 0;\n      }\n      *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) & 0xffdb;\n      inputPointer[1] = 0;\n      *inputPointer = inputPointer[4];\n    }\n    *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) | 8;\n  }\n  if ((inputPointer[4] == 0) && ((*(ushort *)(inputPointer + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08009eac(outputPointer,inputPointer);\n  }\n  flags = *(ushort *)(inputPointer + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = inputPointer[5];\n    }\n    inputPointer[2] = result;\n  }\n  else {\n    inputPointer[2] = 0;\n    inputPointer[6] = -inputPointer[5];\n  }\n  if (inputPointer[4] == 0) {\n    flags = *(ushort *)(inputPointer + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(inputPointer + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "iVar1": "dataAddress",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_data_08009b5c",
            "code": "\nvoid processData_08009b5c(void)\n\n{\n  uint *pointerToUInt;\n  int integerOne;\n  int *pointerToData;\n  int *pointerToDataTwo;\n  uint unsignedVarOne;\n  ushort unsignedVarTwo;\n  int integerTwo;\n  code *functionPointer;\n  int integerThree;\n  uint unsignedVarThree;\n  code *jumpTable;\n  bool booleanVar;\n  undefined8 unsignedVarFour;\n  \n  process_data_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  unsignedVarFour = infinite_loop_08008868(1);\n  pointerToData = (int *)((ulonglong)unsignedVarFour >> 0x20);\n  pointerToUInt = (uint *)unsignedVarFour;\n  unsignedVarTwo = *(ushort *)(pointerToData + 3);\n  unsignedVarOne = (uint)unsignedVarTwo;\n  if ((int)(unsignedVarOne << 0x1c) < 0) {\n    integerOne = pointerToData[4];\n    if (integerOne != 0) {\n      integerTwo = unsignedVarOne << 0x1e;\n      booleanVar = integerTwo != 0;\n      if (booleanVar) {\n        integerTwo = 0;\n      }\n      integerThree = *pointerToData;\n      if (!booleanVar) {\n        integerTwo = pointerToData[5];\n      }\n      *pointerToData = integerOne;\n      pointerToData[2] = integerTwo;\n      for (integerThree = integerThree - integerOne; 0 < integerThree; integerThree = integerThree - integerTwo) {\n        integerTwo = (*(code *)pointerToData[10])(pointerToUInt,pointerToData[8],integerOne,integerThree);\n        if (integerTwo < 1) {\n          unsignedVarTwo = *(ushort *)(pointerToData + 3);\n          goto LAB_08009c62;\n        }\n        integerOne = integerOne + integerTwo;\n      }\n    }\n  }\n  else if (((0 < pointerToData[1]) || (0 < pointerToData[0x10])) &&\n          (functionPointer = (code *)pointerToData[0xb], functionPointer != (code *)0x0)) {\n    unsignedVarThree = *pointerToUInt;\n    *pointerToUInt = 0;\n    if ((unsignedVarTwo & 0x1000) == 0) {\n      integerOne = (*functionPointer)(pointerToUInt,pointerToData[8],unsignedVarOne & 0x1000,1);\n      if ((integerOne == -1) && (unsignedVarOne = *pointerToUInt, unsignedVarOne != 0)) {\n        if ((unsignedVarOne != 0x1d) && (unsignedVarOne != 0x16)) {\n          *(ushort *)(pointerToData + 3) = *(ushort *)(pointerToData + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *pointerToUInt = unsignedVarThree;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      integerOne = pointerToData[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointerToData + 3) << 0x1d) < 0) &&\n       (integerOne = integerOne - pointerToData[1], pointerToData[0xd] != 0)) {\n      integerOne = integerOne - pointerToData[0x10];\n    }\n    integerOne = (*(code *)pointerToData[0xb])(pointerToUInt,pointerToData[8],integerOne,0);\n    unsignedVarTwo = *(ushort *)(pointerToData + 3);\n    if ((integerOne == -1) &&\n       ((0x1d < *pointerToUInt || (-1 < (int)((0x20400001U >> (*pointerToUInt & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(pointerToData + 3) = unsignedVarTwo | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    pointerToData[1] = 0;\n    *pointerToData = pointerToData[4];\n    if (((int)((uint)unsignedVarTwo << 0x13) < 0) && ((integerOne != -1 || (*pointerToUInt == 0)))) {\n      pointerToData[0x15] = integerOne;\n    }\n    pointerToDataTwo = (int *)pointerToData[0xd];\n    *pointerToUInt = unsignedVarThree;\n    if (pointerToDataTwo != (int *)0x0) {\n      if (pointerToDataTwo != pointerToData + 0x11) {\n        update_linked_list_080091d8(pointerToUInt);\n      }\n      pointerToData[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "piVar3": "pointerToData",
                "piVar4": "pointerToDataTwo",
                "puVar1": "pointerToUInt",
                "iVar2": "integerOne",
                "iVar7": "integerTwo",
                "iVar9": "integerThree",
                "uVar5": "unsignedVarOne",
                "uVar6": "unsignedVarTwo",
                "uVar10": "unsignedVarThree",
                "bVar11": "booleanVar",
                "pcVar8": "functionPointer",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "uVar12": "unsignedVarFour"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *data,int *config)\n\n{\n  undefined4 result;\n  int length;\n  int *linkedData;\n  uint tempValue;\n  ushort flag;\n  int counter;\n  undefined4 unaff_var1;\n  undefined4 unaff_var2;\n  code *functionPtr;\n  int tempVar;\n  uint tempFlag;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (config[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      initialize_memory_and_data_structure_08009d50();\n    }\n    if (config == &DAT_0800aba4) {\n      config = (int *)data[1];\n    }\n    else if (config == (int *)&DAT_0800abc4) {\n      config = (int *)data[2];\n    }\n    else if (config == (int *)&DAT_0800ab84) {\n      config = (int *)data[3];\n    }\n    if (*(short *)(config + 3) != 0) {\n      flag = *(ushort *)(config + 3);\n      tempValue = (uint)flag;\n      if ((int)(tempValue << 0x1c) < 0) {\n        length = config[4];\n        if (length != 0) {\n          counter = tempValue << 0x1e;\n          bVar10 = counter != 0;\n          if (bVar10) {\n            counter = 0;\n          }\n          tempVar = *config;\n          if (!bVar10) {\n            counter = config[5];\n          }\n          *config = length;\n          config[2] = counter;\n          for (tempVar = tempVar - length; 0 < tempVar; tempVar = tempVar - counter) {\n            counter = (*(code *)config[10])(data,config[8],length,tempVar,unaff_var1,unaff_var2);\n            if (counter < 1) {\n              flag = *(ushort *)(config + 3);\n              goto LAB_08009c62;\n            }\n            length = length + counter;\n          }\n        }\n      }\n      else if (((0 < config[1]) || (0 < config[0x10])) &&\n              (functionPtr = (code *)config[0xb], functionPtr != (code *)0x0)) {\n        tempFlag = *data;\n        *data = 0;\n        if ((flag & 0x1000) == 0) {\n          length = (*functionPtr)(data,config[8],tempValue & 0x1000,1);\n          if ((length == -1) && (tempValue = *data, tempValue != 0)) {\n            if ((tempValue != 0x1d) && (tempValue != 0x16)) {\n              *(ushort *)(config + 3) = *(ushort *)(config + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*UNRECOVERED_JUMPTABLE_00)();\n              return result;\n            }\n            *data = tempFlag;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          length = config[0x15];\n        }\n        if (((int)((uint)*(ushort *)(config + 3) << 0x1d) < 0) &&\n           (length = length - config[1], config[0xd] != 0)) {\n          length = length - config[0x10];\n        }\n        length = (*(code *)config[0xb])(data,config[8],length,0);\n        flag = *(ushort *)(config + 3);\n        if ((length == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(config + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return result;\n        }\n        config[1] = 0;\n        *config = config[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((length != -1 || (*data == 0)))) {\n          config[0x15] = length;\n        }\n        linkedData = (int *)config[0xd];\n        *data = tempFlag;\n        if (linkedData != (int *)0x0) {\n          if (linkedData != config + 0x11) {\n            update_linked_list_080091d8(data);\n          }\n          config[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*UNRECOVERED_JUMPTABLE_00)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "config",
                "uVar1": "result",
                "iVar2": "length",
                "piVar3": "linkedData",
                "uVar4": "tempValue",
                "uVar5": "flag",
                "iVar6": "counter",
                "unaff_r4": "unaff_var1",
                "unaff_r5": "unaff_var2",
                "pcVar7": "functionPtr",
                "iVar8": "tempVar",
                "uVar9": "tempFlag"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initializeDataStructure_08009cdc(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  fill_memory_080091c6(dataStructure + 0x17,0,8);\n  dataStructure[8] = dataStructure;\n  dataStructure[9] = 0x800a021;\n  dataStructure[10] = 0x800a043;\n  dataStructure[0xb] = 0x800a07b;\n  dataStructure[0xc] = &LAB_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_and_initialize_memory_08009d24",
            "code": "\nundefined4 * allocate_and_initialize_memory_08009d24(undefined4 destination_pointer,int count)\n\n{\n  undefined4 *allocated_memory;\n  int allocated_memory_size;\n  \n  allocated_memory_size = (count + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08009270(destination_pointer,allocated_memory_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = count;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_080091c6(allocated_memory + 3,0,allocated_memory_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_08009d24",
                "param_1": "destination_pointer",
                "param_2": "count",
                "puVar1": "allocated_memory",
                "iVar2": "allocated_memory_size"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_memory_and_data_structure_08009d50",
            "code": "\nvoid initializeMemoryAndDataStructure_08009d50(undefined4 *parameters)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointer;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    pointer = &DAT_20000094;\n    parameters[10] = &LAB_08009cd0_1;\n    if (parameters == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_20000094) {\n      parameters[6] = pointer;\n    }\n    returnValue = allocateAndInitializeMemory();\n    parameters[1] = returnValue;\n    returnValue = allocateAndInitializeMemory(parameters);\n    parameters[2] = returnValue;\n    returnValue = allocateAndInitializeMemory(parameters);\n    parameters[3] = returnValue;\n    initializeDataStructure(parameters[1],4,0);\n    initializeDataStructure(parameters[2],9,1);\n    initializeDataStructure(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_memory_and_data_structure_08009d50",
                "param_1": "parameters",
                "uVar1": "returnValue",
                "puVar2": "pointer",
                "allocate_and_initialize_memory_08009db0": "allocateAndInitializeMemory",
                "initialize_data_structure_08009cdc": "initializeDataStructure"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "allocate_and_initialize_memory_08009db0",
            "code": "\nint * allocate_and_initialize_memory_08009db0(undefined4 *error_code,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int *current_pointer;\n  int *inner_pointer;\n  int **outer_pointer;\n  \n  if (DAT_200000ac == 0) {\n    initialize_memory_and_data_structure_08009d50(&DAT_20000094);\n  }\n  outer_pointer = (int **)&DAT_200000dc;\n  do {\n    inner_pointer = outer_pointer[2];\n    current_pointer = outer_pointer[1];\n    while (current_pointer = (int *)((int)current_pointer + -1), -1 < (int)current_pointer) {\n      if (*(short *)(inner_pointer + 3) == 0) {\n        *(undefined2 *)((int)inner_pointer + 0xe) = 0xffff;\n        inner_pointer[0x19] = 0;\n        *(undefined2 *)(inner_pointer + 3) = 1;\n        *inner_pointer = 0;\n        inner_pointer[2] = 0;\n        inner_pointer[1] = 0;\n        inner_pointer[4] = 0;\n        inner_pointer[5] = 0;\n        inner_pointer[6] = 0;\n        fill_memory_080091c6(inner_pointer + 0x17,0,8,1,arg4);\n        inner_pointer[0xd] = 0;\n        inner_pointer[0xe] = 0;\n        inner_pointer[0x12] = 0;\n        inner_pointer[0x13] = 0;\n        return inner_pointer;\n      }\n      inner_pointer = inner_pointer + 0x1a;\n    }\n    if (*outer_pointer == (int *)0x0) {\n      current_pointer = (int *)allocate_and_initialize_memory_08009db0_08009d24(error_code,4);\n      *outer_pointer = current_pointer;\n      if (current_pointer == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    outer_pointer = (int **)*outer_pointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "allocate_and_initialize_memory_08009db0",
                "param_1": "error_code",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "current_pointer",
                "piVar2": "inner_pointer",
                "ppiVar3": "outer_pointer"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "calculate_memory_usage_08009e64",
            "code": "\nundefined4 calculateMemoryUsage_08009e64(undefined4 ptrToMemory,int paramArray,undefined4 *ptrToResult,uint *ptrToFlag)\n\n{\n  int status;\n  undefined4 result;\n  undefined tempArray [4];\n  uint localVariable;\n  \n  if ((*(short *)(paramArray + 0xe) < 0) ||\n     (status = set_memory_size_0800a0ec(ptrToMemory,(int)*(short *)(paramArray + 0xe),tempArray), status < 0)) {\n    *ptrToFlag = 0;\n    if ((int)((uint)*(ushort *)(paramArray + 0xc) << 0x18) < 0) {\n      result = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *ptrToFlag = (uint)((localVariable & 0xf000) == 0x2000);\n  }\n  result = 0x400;\nLAB_08009ea4:\n  *ptrToResult = result;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "calculate_memory_usage_08009e64",
                "param_1": "ptrToMemory",
                "param_2": "paramArray",
                "param_3": "ptrToResult",
                "param_4": "ptrToFlag",
                "iVar1": "status",
                "uVar2": "result",
                "auStack_4c": "tempArray",
                "local_48": "localVariable"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "allocate_and_initialize_memory_08009eac",
            "code": "\nvoid allocate_and_initialize_memory_08009eac(int memory_size,int *memory_block)\n\n{\n  ushort memory_usage;\n  int allocated_memory;\n  int memory_size_local;\n  int *memory_block_local;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    memory_size_local = memory_size;\n    memory_block_local = memory_block;\n    memory_usage = calculate_memory_usage_08009e64(memory_size,memory_block,&memory_size_local,&memory_block_local);\n    allocated_memory = allocate_memory_08009270(memory_size,memory_size_local);\n    if (allocated_memory != 0) {\n      *(undefined **)(memory_size + 0x28) = &LAB_08009cd0_1;\n      *memory_block = allocated_memory;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[4] = allocated_memory;\n      memory_block[5] = memory_size_local;\n      if ((memory_block_local != (int *)0x0) &&\n         (allocated_memory = initialize_and_check_0800a110(memory_size,(int)*(short *)((int)memory_block + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = memory_usage | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "allocate_and_initialize_memory_08009eac",
                "param_1": "memory_size",
                "param_2": "memory_block",
                "uVar1": "memory_usage",
                "iVar2": "allocated_memory",
                "local_18": "memory_size_local",
                "local_14": "memory_block_local"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_char_in_string_08009f2c",
            "code": "\nchar * find_char_in_string_08009f2c(char *string,char character,int string_length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + string_length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_data_08009fe8",
            "code": "\nint processData_08009fe8(uint input)\n\n{\n  int *ptrData;\n  undefined4 result;\n  int index;\n  code *callback;\n  undefined4 reg4;\n  undefined4 reg5;\n  undefined4 lr;\n  undefined4 *ptrDataPointer;\n  \n  ptrData = DAT_20000090;\n  ptrDataPointer = &DAT_20000090;\n  if (0x1f < input) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  index = DAT_20000090[0x11];\n  if ((index != 0) && (callback = *(code **)(index + input * 4), callback != (code *)0x0)) {\n    if (callback != (code *)0x1) {\n      if (callback == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + input * 4) = 0;\n      (*callback)(input);\n    }\n    return 0;\n  }\n  result = thunk_initialize_program_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  index = initialize_data_0800886c(result,input,input,0,ptrDataPointer,reg4,reg5,lr);\n  if ((index == -1) && (DAT_20000a38 != 0)) {\n    *ptrData = DAT_20000a38;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "process_data_08009fe8",
                "param_1": "input",
                "piVar1": "ptrData",
                "uVar2": "result",
                "iVar3": "index",
                "pcVar4": "callback",
                "unaff_r4": "reg4",
                "unaff_r5": "reg5",
                "in_lr": "lr",
                "puVar5": "ptrDataPointer"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_return_value_thunk_0800887c",
            "code": "\nundefined4 get_return_value_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_system_values_0800a020",
            "code": "\nvoid updateSystemValues_0800a020(undefined4 systemParam,int dataParam)\n\n{\n  int systemResult;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  systemResult = initialize_and_check_system_0800a168(systemParam,(int)*(short *)(dataParam + 0xe));\n  isSuccessful = -1 < systemResult;\n  if (isSuccessful) {\n    updatedValue = *(int *)(dataParam + 0x54) + systemResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataParam + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(dataParam + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(dataParam + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_system_values_0800a020",
                "param_1": "systemParam",
                "param_2": "dataParam",
                "iVar1": "systemResult",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "initialize_and_check_0800a042",
            "code": "\nvoid initialize_and_check_0800a042(int *result,int data,undefined4 value1,undefined4 value2)\n\n{\n  int processingResult;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 returnAddress;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_check_0800a042_settings_0800a130(result,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  processingResult = process_communication_0800885c((int)*(short *)(data + 0xe),value1,value2,value2,value2,parameter1,\n                       parameter2,returnAddress);\n  if ((processingResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "initialize_and_check_0800a042",
                "param_1": "result",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "processingResult",
                "unaff_r4": "parameter1",
                "unaff_r5": "parameter2",
                "in_lr": "returnAddress"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "initialize_settings_0800a07a",
            "code": "\nvoid initializeSettings_0800a07a(undefined4 settings,int data)\n\n{\n  int result;\n  ushort modifiedValue;\n  bool isError;\n  \n  result = initialize_and_check_settings_0800a130(settings,(int)*(short *)(data + 0xe));\n  isError = result == -1;\n  if (isError) {\n    modifiedValue = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    modifiedValue = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = modifiedValue;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = modifiedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "initialize_settings_0800a07a",
                "param_1": "settings",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "modifiedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "set_memory_size_0800a0ec",
            "code": "\nvoid set_memory_size_0800a0ec(int *result,undefined4 size_param,undefined4 size1,undefined4 size2)\n\n{\n  int set_result;\n  \n  DAT_20000a38 = 0;\n  set_result = set_memory_size_0800a0ec_08008846(size_param,size1,size1,0,size2);\n  if ((set_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "set_memory_size_0800a0ec",
                "param_1": "result",
                "param_2": "size_param",
                "param_3": "size1",
                "param_4": "size2",
                "iVar1": "set_result"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "initialize_and_check_0800a110",
            "code": "\nvoid initialize_and_check_0800a110(int *result,undefined4 input_value)\n\n{\n  int initializationResult;\n  \n  DAT_20000a38 = 0;\n  initializationResult = initialize_08008850(input_value);\n  if ((initializationResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "initialize_and_check_0800a110",
                "param_1": "result",
                "param_2": "input_value",
                "iVar1": "initializationResult"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "initialize_and_check_settings_0800a130",
            "code": "\nvoid initialize_and_check_settings_0800a130(int *result,undefined4 setting1,undefined4 setting2,undefined4 setting3)\n\n{\n  int init_result;\n  \n  DAT_20000a38 = 0;\n  init_result = initialize_default_settings_08008854(setting1,setting2,setting3,setting3,setting3);\n  if ((init_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "initialize_and_check_settings_0800a130",
                "param_1": "result",
                "param_2": "setting1",
                "param_3": "setting2",
                "param_4": "setting3",
                "iVar1": "init_result"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 result,int arr)\n\n{\n  int sum;\n  \n  sum = *(int *)(arr + -4) + -4;\n  if (*(int *)(arr + -4) < 0) {\n    sum = sum + *(int *)(arr + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "result",
                "param_2": "arr",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "initialize_and_check_system_0800a168",
            "code": "\nvoid initialize_and_check_system_0800a168(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int systemStatus;\n  \n  DAT_20000a38 = 0;\n  systemStatus = initialize_system_08008858(arg1,arg2,arg3,arg3,arg3);\n  if ((systemStatus == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "initialize_and_check_system_0800a168",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "systemStatus"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "process_data_0800a18c",
            "code": "\nvoid process_data_0800a18c(void)\n\n{\n  code *function_pointer;\n  \n  function_pointer = process_data_0800a18c;\n  process_data_0800a18c_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*function_pointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "process_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "function_pointer"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 205516,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}