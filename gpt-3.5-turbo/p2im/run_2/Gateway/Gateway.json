{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "main_function_08007246",
                "add_byte_to_uint_and_store_in_ptr_dat_08003748": "add_byte_to_uint_and_store_in_ptr_data",
                "do_nothing_and_return_08004046": "do_nothing_and_return",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void main_function_08007246(void)\n{\n  //implementation details here\n}\n\nvoid do_nothing_and_return(void)\n{\n  //implementation details here\n}\n\nvoid do_nothing(void)\n{\n  //implementation details here\n}\n\nvoid main_function_08007246(void)\n{\n  main_function_08007246();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "main_function_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_input_0800a042",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "arg3",
                "param_4": "arg4",
                "sVar1": "input_length",
                "puVar2": "unused_pointer",
                "iVar3": "input_result",
                "unaff_r4": "unused_variable",
                "unaff_r5": "unused_variable",
                "in_lr": "unused_variable",
                "PTR_DAT_0800a0c8": "PTR_DAT_0800a0c8",
                "process_input_0800a130": "process_input_0800a130",
                "process_input_and_return_0800885c": "process_input_and_return_0800885c"
            },
            "code": "void process_input_0800a042(int *output, int input_address, undefined4 arg3, undefined4 arg4)\n{\n    short input_length = *(short *)(input_address + 0xe);\n    ushort *input_flag = (ushort *)(input_address + 0xc);\n    *input_flag &= 0xefff;\n    if ((int)((uint)*input_flag << 0x17) < 0)\n    {\n        process_input_0800a042_0800a130(output, input_length, 0, 2);\n    }\n    undefined4 unused_variable = 0;\n    int input_result = process_input_0800a042_and_return_0800885c(input_length, arg3, arg4, arg4, arg4, unused_variable, unused_variable, unused_variable);\n    if ((input_result == -1) && (*(int *)PTR_DAT_0800a0c8 != 0))\n    {\n        *output = *(int *)PTR_DAT_0800a0c8;\n    }\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_input_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "store_data_08008694",
                "param_1": "data_address",
                "param_2": "data_value",
                "bVar1": "data_index",
                "PTR_DAT_080086dc": "data_table",
                "PTR_DAT_080086e0": "data_address_table",
                "decode_and_store_08003f30": "decode_and_store",
                "set_bit_at_index_08003f94": "set_bit",
                "check_data_0800688e": "check_data",
                "PTR_DAT_080086e4": "data_table_index"
            },
            "code": "void store_data_08008694(int data_address, int data_value) {\n  if (data_address != 0) {\n    byte data_index = *(byte *)(data_address + 0x44);\n    *(undefined4 *)(PTR_DAT_080086dc + (uint)data_index * 4) = data_value;\n    *(int *)(PTR_DAT_080086e0 + (uint)data_index * 4) = data_address;\n    decode_and_store((int)*(char *)(data_address + 0x5a),0,2);\n    set_bit((int)*(char *)(data_address + 0x5a));\n    check_data(PTR_DAT_080086e4[data_index], *(int *)(data_address + 100) + (uint)*(ushort *)(data_address + 0x6a),1);\n  }\n}",
            "called": [
                "FUN_0800688e",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "store_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_and_process_data_08002ce0",
                "param_1": "input_data",
                "iVar1": "data_offset",
                "set_param_to_zero_0800314e": "set_zero_to_offset",
                "initialize_data_structure_080032bc": "initialize_data_structure",
                "PTR_execute_function_if_not_null_08002c2c_1_08002d90": "FUNC_execute_function_if_not_null",
                "PTR_LAB_08002c40_1_08002d94": "LAB_08002c40_1_08002d94",
                "PTR_LAB_08002c7c_1_08002d98": "LAB_08002c7c_1_08002d98",
                "PTR_LAB_08002c90_1_08002d9c": "LAB_08002c90_1_08002d9c",
                "PTR_LAB_08002c54_1_08002da0": "LAB_08002c54_1_08002da0",
                "PTR_LAB_08002c68_1_08002da4": "LAB_08002c68_1_08002da4",
                "set_values_if_param2_equals_113_08003366": "set_values_if_param2_equals_113",
                "PTR_LAB_08002ca4_1_08002da8": "LAB_08002ca4_1_08002da8",
                "set_parameters_08003370": "set_parameters",
                "PTR_LAB_08002cb8_1_08002dac": "LAB_08002cb8_1_08002dac",
                "copy_data_if_flag_set_08003346": "copy_data_if_flag_set",
                "PTR_LAB_08002e1a_1_08002db0": "LAB_08002e1a_1_08002db0",
                "process_data_08003350": "process_data",
                "PTR_LAB_08002dea_1_08002db4": "LAB_08002dea_1_08002db4",
                "PTR_LAB_08002cd0_1_08002db8": "LAB_08002cd0_1_08002db8"
            },
            "code": "int initialize_and_process_data_08002ce0(int input_data)\n{\n  int data_offset = input_data + 0x44;\n  set_zero_to_offset(data_offset + 0x40);\n  initialize_data_structure(data_offset, input_data, 0x40);\n  *(undefined *)(input_data + 0xc4) = 0;\n  *(undefined4 *)(input_data + 200) = 0;\n  *(undefined *)(input_data + 0x1f8) = 0;\n  set_data_at_offset(data_offset, 0xe0, PTR_execute_function_if_not_null_08002c2c_1_08002d90, 0);\n  set_data_at_offset(data_offset, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  set_data_at_offset(data_offset, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  set_data_at_offset(data_offset, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  set_data_at_offset(data_offset, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  set_data_at_offset(data_offset, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  set_values_if_param2_equals_113(data_offset, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  set_parameters(data_offset, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  copy_data_if_flag_set(data_offset, 0x79, PTR_LAB_08002e1a_1_08002db0, input_data);\n  process_data(data_offset, 0xf9, PTR_LAB_08002dea_1_08002db4, input_data);\n  process_data(data_offset, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return input_data;\n}",
            "called": [
                "FUN_08003306",
                "FUN_08003350",
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "handle_input_08005188",
                "param_1": "input_data",
                "iVar1": "input_data_ptr",
                "uVar2": "flags",
                "uVar3": "input_flags",
                "uVar4": "device_status"
            },
            "code": "void handle_input_08005188(int *input_data)\n{\n  int input_data_ptr = *input_data;\n  uint flags = *(uint *)(input_data_ptr + 0x14);\n  uint device_status = *(uint *)(input_data_ptr + 0x18);\n  uint input_flags = *(uint *)(input_data_ptr + 4);\n  \n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flags & 0x10001) == 0) || ((input_flags & 0x200) == 0)) {\n      if (((device_status & flags) == 0) || ((input_flags & 0x200) == 0)) {\n        if (((DAT_080052d4 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n          handle_input_08005188_data(input_data);\n        }\n      }\n      else {\n        set_param_value(input_data);\n      }\n    }\n    else {\n      set_device_status(input_data);\n    }\n    if ((DAT_080052dc & device_status) == 0) {\n      if ((((DAT_080052ec & flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_080052e4 & flags) == 0)) {\n        process_input_string(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n        process_input(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_080052e4 & flags) == 0)) {\n        process_input_data(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n        handle_input_08005188(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_080052d4 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n      process_input(input_data);\n      return;\n    }\n    if (((DAT_080052d8 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n      process_input_and_set_flags(input_data);\n      return;\n    }\n    if ((DAT_080052dc & device_status) == 0) {\n      if ((((DAT_080052ec & flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_080052e4 & flags) == 0)) {\n        process_data(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n        increment_and_copy(input_data);\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & flags) != 0) && ((input_flags & 0x400) != 0)) && ((DAT_080052e4 & flags) == 0)) {\n        process_input(input_data);\n        return;\n      }\n      if (((DAT_080052e4 & flags) != 0) && ((input_flags & 0x200) != 0)) {\n        increment_byte(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004396",
                "FUN_08005084",
                "FUN_0800459c",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_08004a76",
                "FUN_08004a24",
                "FUN_0800430c",
                "FUN_08004e3c",
                "FUN_080043a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "handle_input_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "findEmptySlotInArray_08009db0",
                "param_1": "error",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentSlot",
                "piVar2": "emptySlot",
                "iVar3": "arrayStart",
                "ppiVar4": "arrayPtrPtr"
            },
            "code": "int * findEmptySlotInArray_08009db0(undefined4 *error, undefined4 param2, undefined4 param3, undefined4 param4)\n{\n  int *emptySlot;\n  int *currentSlot;\n  int arrayStart;\n  int **arrayPtrPtr;\n  \n  arrayStart = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(arrayStart + 0x18) == 0) {\n    initializeArray(arrayStart);\n  }\n  arrayPtrPtr = (int **)(arrayStart + 0x48);\n  do {\n    currentSlot = arrayPtrPtr[1];\n    emptySlot = arrayPtrPtr[2];\n    while (currentSlot = (int *)((int)currentSlot + -1), -1 < (int)currentSlot) {\n      if (*(short *)(emptySlot + 3) == 0) {\n        *(undefined2 *)((int)emptySlot + 0xe) = 0xffff;\n        emptySlot[0x19] = 0;\n        *(undefined2 *)(emptySlot + 3) = 1;\n        *emptySlot = 0;\n        emptySlot[2] = 0;\n        emptySlot[1] = 0;\n        emptySlot[4] = 0;\n        emptySlot[5] = 0;\n        emptySlot[6] = 0;\n        fillMemoryWithVal(emptySlot + 0x17, 0, 8, 1, param4);\n        emptySlot[0xd] = 0;\n        emptySlot[0xe] = 0;\n        emptySlot[0x12] = 0;\n        emptySlot[0x13] = 0;\n        return emptySlot;\n      }\n      emptySlot = emptySlot + 0x1a;\n    }\n    if (*arrayPtrPtr == (int *)0x0) {\n      currentSlot = (int *)allocateAndInitializeBlock(error, 4);\n      *arrayPtrPtr = currentSlot;\n      if (currentSlot == (int *)0x0) {\n        *error = 0xc;\n        return (int *)0x0;\n      }\n    }\n    arrayPtrPtr = (int **)*arrayPtrPtr;\n  } while( true );\n}",
            "called": [
                "FUN_08009d24",
                "FUN_080091c6",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "findEmptySlotInArray_08009db0",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08009d50(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_block_08009d24(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_if_not_null_08002c2c",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter",
                "pcVar1": "function_pointer",
                "PTR_DAT_08002c3c": "pointer_to_function_pointer"
            },
            "code": "void execute_function_if_not_null_08002c2c(code* function_pointer, int param_1, int param_2, int param_3, int param_4)\n{\n  code* function = *(code**)PTR_DAT_08002c3c;\n  if (function != NULL) {\n    (*function)(param_1, param_2, param_3, function, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "copy_data_to_buffer_wrapper_08001bf8",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "size",
                "param_4": "num_times",
                "copy_data_to_buffer_0800288c": "copy_data_to_buffer",
                "PTR_DAT_08001c04": "buffer"
            },
            "code": "void copy_data_to_buffer_wrapper_08001bf8(void* PTR_DAT_08001c04, void* data, size_t size, int num_times)\n{\n  copy_data_to_PTR_DAT_08001c04(PTR_DAT_08001c04, data, size, num_times);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_wrapper_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "check_bit_in_word_and_update_flag_080072f0",
                "param_1": "word",
                "param_2": "bit_position",
                "param_3": "flag_ptr_1",
                "param_4": "flag_ptr_2",
                "is_param2_bit_set_in_param1_080042d4": "is_bit_set_in_word"
            },
            "code": "void check_bit_in_word_and_update_flag_080072f0(uint32_t word, uint16_t bit_position, uint32_t *flag_ptr_1, uint32_t *flag_ptr_2) {\n  is_bit_set_in_word(word, bit_position, flag_ptr_1, flag_ptr_2, flag_ptr_2);\n  return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "check_bit_in_word_and_update_flag_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_end_of_string_08000178",
                "param_1": "str",
                "pcVar2": "current_pos",
                "pcVar3": "current_char_pos",
                "cVar1": "current_char"
            },
            "code": "char* get_end_of_string_08000178(char* str) {\n  char current_char;\n  char* current_pos = str;\n  while (current_char = *current_pos) {\n    current_pos++;\n  }\n  return current_pos;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_080032a2",
                "FUN_08002e44",
                "FUN_08008e7c"
            ],
            "imported": false,
            "current_name": "get_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_data_if_flags_set_080069ec",
                "param_1": "data",
                "puVar3": "flags",
                "uVar5": "flag1",
                "uVar2": "flag2",
                "uVar4": "flag3",
                "process_data_0800694c": "process_data",
                "read_and_modify_080064cc": "read_and_modify",
                "set_data_flag_08006932": "set_data_flag",
                "do_nothing_0800877c": "do_nothing",
                "updateMemory_080064b0": "update_memory",
                "get_value_from_param_08004050": "get_value_from_param",
                "PTR_LAB_08006b0c_1_08006b08": "label"
            },
            "code": "void process_data_if_flags_set_080069ec(uint **data)\n{\n  uint *flags = *data;\n  uint flag1 = flags[0];\n  uint flag2 = flags[3];\n  \n  if (((flag1 & 0xf) == 0) && ((flag1 & 0x20) != 0)) && ((flag2 & 0x20) != 0)) {\n    process_data(data);\n    return;\n  }\n  if (((flag1 & 0xf) == 0) || ((flags[5] & 1) == 0 && ((flag2 & 0x120) == 0)))) {\n    if (((flag1 & 0x80) != 0) && ((flag2 & 0x80) != 0)) {\n      read_and_modify(data);\n      return;\n    }\n    if (((flag1 & 0x40) != 0) && ((flag2 & 0x40) != 0)) {\n      set_data_flag(data);\n    }\n  }\n  else {\n    if (((flag1 & 1) != 0) && ((flag2 & 0x100) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if (((flag1 & 4) != 0) && ((flags[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if (((flag1 & 2) != 0) && ((flags[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if (((flag1 & 8) != 0) && ((flags[5] & 1) != 0)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if (((flag1 & 0x20) != 0) && ((flag2 & 0x20) != 0)) {\n        process_data(data);\n      }\n      if ((((uint)data[15] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      update_memory(data);\n      flags = *data;\n      if ((flags[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      flags[5] = flags[5] & 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      int value = get_value_from_param(data[13]);\n      if (value != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800694c",
                "FUN_080064cc",
                "FUN_08006932",
                "FUN_080064b0",
                "FUN_08004050",
                "FUN_0800877c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_data_if_flags_set_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "process_input_0800a168",
                "param_1": "output",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "data_ptr",
                "iVar2": "return_val"
            },
            "code": "void process_input_0800a168(int *output, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *data_ptr;\n  int return_val;\n  data_ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  return_val = check_input(param_2, param_3, param_4, param_4, param_4);\n  if ((return_val == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "process_input_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_input_080067ac",
                "param_1": "input_data",
                "param_2": "input_values",
                "param_3": "num_values",
                "param_4": "param_4",
                "uVar1": "value_from_pointer",
                "iVar2": "result"
            },
            "code": "int process_input_080067ac(int *input_data, ushort *input_values, int num_values, undefined4 param_4)\n{\n  undefined4 value_from_pointer;\n  int result;\n  \n  if (*(char *)((int)input_data + 0x39) == ' ') {\n    if (input_values == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (num_values == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xe) = 1;\n      input_data[0xf] = 0;\n      *(undefined *)((int)input_data + 0x39) = 0x21;\n      value_from_pointer = get_value_from_pointer_08003760();\n      *(short *)(input_data + 9) = (short)num_values;\n      *(short *)((int)input_data + 0x26) = (short)num_values;\n      while (*(short *)((int)input_data + 0x26) != 0) {\n        *(short *)((int)input_data + 0x26) = *(short *)((int)input_data + 0x26) + -1;\n        if (input_data[2] == 0x1000) {\n          result = check_parameters(input_data,0x80,0,value_from_pointer,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_data + 4) = *input_values & 0x1ff;\n          if (input_data[4] == 0) {\n            input_values = input_values + 1;\n          }\n          else {\n            input_values = (ushort *)((int)input_values + 1);\n          }\n        }\n        else {\n          result = check_parameters(input_data,0x80,0,value_from_pointer,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_data + 4) = (uint)*(byte *)input_values;\n          input_values = (ushort *)((int)input_values + 1);\n        }\n      }\n      result = check_parameters(input_data,0x40,0,value_from_pointer,param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_data + 0x39) = 0x20;\n        *(undefined *)(input_data + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_input_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_character_in_string_0800735a",
                "param_1": "character",
                "param_2": "string",
                "*param_2": "*string",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_character_in_string_0800735a(int character, char *string)\n{\n  while( true ) {\n    if (*string == -1) {\n      return 0xffffffff;\n    }\n    if (*string == character) break;\n    string = string + 0xc;\n  }\n  return *(unsigned int *)(string + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_character_in_string_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_data_structures_08008c20",
                "param_1": "data_structure_address",
                "*(int *)(param_1 + 0x130)": "*starting_value_ptr",
                "*(undefined2 *)(param_1 + 0x134)": "*(unsigned short *)(data_structure_address + 0x134)",
                "*(undefined2 *)(param_1 + 0x136)": "*(unsigned short *)(data_structure_address + 0x136)",
                "*(int *)(param_1 + 0x138)": "*ending_value_ptr",
                "*(undefined2 *)(param_1 + 0x13c)": "*(unsigned short *)(data_structure_address + 0x13c)",
                "*(undefined2 *)(param_1 + 0x13e)": "*(unsigned short *)(data_structure_address + 0x13e)"
            },
            "code": "void initialize_data_structures_08008c20(int data_structure_address)\n{\n  int* starting_value_ptr = (int *)(data_structure_address + 0x130);\n  *starting_value_ptr = data_structure_address + 0x11;\n  \n  int* ending_value_ptr = (int *)(data_structure_address + 0x138);\n  *ending_value_ptr = data_structure_address + 0x51;\n\n  *(unsigned short *)(data_structure_address + 0x134) = 0;\n  *(unsigned short *)(data_structure_address + 0x136) = 0;\n  *(unsigned short *)(data_structure_address + 0x13c) = 0;\n  *(unsigned short *)(data_structure_address + 0x13e) = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_and_execute_commands_08000a64",
                "iVar1": "index",
                "uVar2": "command_index",
                "PTR_DAT_08000ad8": "command_array",
                "PTR_DAT_08000adc": "parameter_array_1",
                "PTR_DAT_08000ae0": "parameter_array_2",
                "FUNC_080005f8": "execute_command",
                "initialize_parameters_08002a26": "initialize_parameters"
            },
            "code": "void check_and_execute_commands_08000a64(void)\n{\n    int index;\n    uint8_t command_index;\n    for (command_index = 0; command_index < 0x3c; command_index++) {\n        if (command_index < 0x3c) {\n            if (PTR_DAT_08000ad8[command_index] == -1) {\n                index = 0;\n            }\n            else {\n                index = find_command_index();\n                if (index == 0) {\n                    index = 0;\n                }\n                else {\n                    index = find_command_index((int)(char)PTR_DAT_08000ad8[command_index]);\n                    if (index == 1) {\n                        index = 0;\n                    }\n                    else {\n                        index = check_param((int)(char)PTR_DAT_08000ad8[command_index], PTR_DAT_08000adc);\n                        if (index == 0) {\n                            index = check_param((int)(char)PTR_DAT_08000ad8[command_index], PTR_DAT_08000ae0);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            index = 0;\n        }\n        if (index != 0) {\n            execute_command(command_index, 6);\n        }\n    }\n    *PTR_DAT_08000ae4 = 1;\n    initialize_parameters(PTR_DAT_08000ae8);\n    return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002a26",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_execute_commands_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "get_value_and_return_0800723c",
                "get_value_from_pointer_08003760": "get_value_from_pointer"
            },
            "code": "void get_value_and_return_0800723c() {\n  get_value_from_pointer();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "get_value_and_return_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "handle_input_080043a2",
                "param_1": "input_data",
                "puVar1": "flag_ptr",
                "PTR_DAT_0000000b": "input_data[11]",
                "DAT_08004a00": "0x3d",
                "PTR_DAT_00000014": "input_data[20]",
                "DAT_08004a01": "0x3e",
                "PTR_DAT_00000004": "input_data[4]",
                "DAT_08004a0a": "0x2a",
                "PTR_DAT_0000000c": "input_data[12]"
            },
            "code": "uint32_t handle_input_080043a2(uint32_t **input_data)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = PTR_DAT_0000000b;\n  if ((*(char *)((int)input_data + DAT_08004a00) == '\"') && ((PTR_DAT_00000014 != (uint32_t *)0x0 || (*(char *)((int)input_data + DAT_08004a01) != '@')))) {\n    if ((PTR_DAT_00000014 == (uint32_t *)0x0) && (PTR_DAT_00000004 == (uint32_t *)0xc000)) {\n      **input_data = **input_data | 0x100;\n      PTR_DAT_00000014 = (uint32_t *)((int)PTR_DAT_00000014 + 1);\n    }\n    else {\n      if (*(short *)((int)input_data + DAT_08004a0a) == 0) {\n        **input_data = **input_data | 0x200;\n      }\n      else if (*(short *)((int)input_data + DAT_08004a0a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **input_data = **input_data & 0xfffffbff;\n          flag_ptr = *input_data;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (PTR_DAT_0000000c == (uint32_t *)0x12)) {\n          **input_data = **input_data & 0xfffffbff;\n          **input_data = **input_data | 0x200;\n        }\n        else if (PTR_DAT_0000000b == (uint32_t *)0x2) {\n          **input_data = **input_data | 0x400;\n        }\n        else {\n          **input_data = **input_data & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input_data + DAT_08004a0a) == 2) {\n        if (PTR_DAT_0000000b == (uint32_t *)0x2) {\n          **input_data = **input_data | 0x400;\n        }\n        else {\n          **input_data = **input_data | 0x800;\n          **input_data = **input_data & 0xfffffbff;\n        }\n        flag_ptr = *input_data;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **input_data = **input_data | 0x400;\n        flag_ptr = *input_data;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      PTR_DAT_00000014 = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "handle_input_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "byte_pointer",
                "sVar2": "short_var",
                "puVar3": "void_pointer",
                "current_char": "current_char",
                "pointer_to_data": "pointer_to_data",
                "data_index": "data_index",
                "data_length": "data_length"
            },
            "code": "int process_data_0800694c(int *data)\n{\n  char current_char = *(char *)((int)data + 0x3a);\n  int *pointer_to_data = (int *)*data;\n  int data_index = data[10];\n  int data_length = *(short *)((int)data + 0x2e);\n  \n  if (current_char != '\"') {\n    return 2;\n  }\n  \n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(unsigned short *)(pointer_to_data + 2) = (unsigned short)((unsigned int)(*(int *)(*pointer_to_data + 4) << 0x17) >> 0x17);\n      data_index += 2;\n    }\n    else {\n      *(unsigned short *)(pointer_to_data + 2) = (unsigned short)*(unsigned int *)(*pointer_to_data + 4) & 0xff;\n      data_index += 1;\n    }\n  }\n  else if (data[4] == 0) {\n    *(char *)(data_index + (int)pointer_to_data) = *(unsigned int *)(*pointer_to_data + 4);\n    data_index += 1;\n  }\n  else {\n    *(char *)(data_index + (int)pointer_to_data) = *(unsigned int *)(*pointer_to_data + 4) & 0x7f;\n    data_index += 1;\n  }\n  \n  data_length -= 1;\n  data[10] = data_index;\n  \n  if (data_length != 0) {\n    return 0;\n  }\n  \n  *(unsigned int *)(*pointer_to_data + 0xc) &= 0xffffffdf;\n  *(unsigned int *)(*pointer_to_data + 0xc) &= 0xfffffeff;\n  *(unsigned int *)(*pointer_to_data + 0x14) &= 0xfffffffe;\n  *(char *)((int)data + 0x3a) = 0x20;\n  execute_function_if_index_less_than_five_0800870c();\n  return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_bit_and_update_memory_08006280",
                "param_1": "memory",
                "param_2": "bit_position",
                "puVar1": "memory_location",
                "DAT_080062f0": "PTR_DATA_080062f0"
            },
            "code": "int set_bit_and_update_memory_08006280(uint **memory, unsigned int bit_position)\n{\n  uint *memory_location = *memory;\n  switch(bit_position) {\n    case 0:\n      memory_location[3] |= 2;\n      break;\n    case 4:\n      memory_location[3] |= 4;\n      break;\n    case 8:\n      memory_location[3] |= 8;\n      break;\n    case 0xc:\n      memory_location[3] |= 0x10;\n      break;\n  }\n  update_memory_bit(memory_location, bit_position, 1);\n  if (memory_location == DAT_080062f0) {\n    memory_location[0x11] |= 0x8000;\n  }\n  **memory = **memory | 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_memory_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "set_bits_08007258",
                "param_1": "flag",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "flag_value",
                "local_20": "local_bits",
                "local_1c": "param_2",
                "local_18": "param_3",
                "DAT_080072d0": "PTR_DAT_080072d0",
                "DAT_080072d4": "PTR_DAT_080072d4"
            },
            "code": "void set_bits_08007258(uint32_t flag, uint16_t* bit_array, uint32_t param_2, uint32_t param_3) {\n  uint32_t flag_value = set_flag_bits((flag << 0x18) >> 0x1c);\n  uint16_t local_bits = 1 << (flag & 0xf) & 0xffff;\n  uint32_t value = 3;\n  *(uint32_t *)(DAT_080072d0 + 0x18) = *(uint32_t *)(DAT_080072d0 + 0x18) | 1;\n  if ((flag - 0xd & 0xff) < 2) {\n    *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n  }\n  if (((flag == 0xf) || (flag == 0x13)) || (flag == 0x14)) {\n    *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n  }\n  *bit_array = param_2;\n  *(bit_array + 1) = param_3;\n  set_bits_08007258_value(flag_value, &local_bits);\n  return;\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bits_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "set_memory_permissions_0800a0ec",
                "param_1": "destination_address",
                "param_2": "starting_address",
                "param_3": "size",
                "param_4": "permissions",
                "puVar1": "pointer_to_data",
                "iVar2": "result"
            },
            "code": "void set_memory_permissions_0800a0ec(int *destination_address, int starting_address, int size, int permissions, int process_id) {\n    undefined *pointer_to_data = PTR_DAT_0800a10c;\n    *(undefined4 *)PTR_DAT_0800a10c = 0;\n    int result = set_memory_permissions_0800a0ec_08008846(starting_address, size, size, permissions, process_id);\n    if ((result == -1) && (*(int *)pointer_to_data != 0)) {\n        *destination_address = *(int *)pointer_to_data;\n    }\n    return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_data_pointer_08008df8",
                "param_1": "data_pointer",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "PTR_PTR_LAB_08008dbe_1_08008e10": "data_start_pointer"
            },
            "code": "void initialize_data_pointer_08008df8(undefined4 *data_pointer, undefined parameter_2, undefined parameter_3, undefined parameter_4, undefined parameter_5)\n{\n  *data_pointer = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(data_pointer + 1) = parameter_2;\n  *(undefined *)((int)data_pointer + 5) = parameter_3;\n  *(undefined *)((int)data_pointer + 6) = parameter_4;\n  *(undefined *)((int)data_pointer + 7) = parameter_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "initialize_data_pointer_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "find_character_position_08006c7c",
                "param_1": "character",
                "param_2": "list",
                "param_3": "list_size",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "masked_index",
                "PTR_DAT_08006ca4": "N/A",
                "PTR_": "N/A",
                "DAT_": "N/A"
            },
            "code": "int find_character_position_08006c7c(int character, int* list, int list_size, int start_index, int end_index) {\n    int index = find_character_or_negative_one(character, list, list_size, start_index, end_index);\n    int shifted_index = index << 12;\n    int masked_index = shifted_index >> 27;\n    if (masked_index == 3) {\n        return 8;\n    }\n    if (masked_index == 4) {\n        return 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_character_position_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "update_bit_08006b5c",
                "param_1": "bit_position",
                "param_2": "bit_array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "mask",
                "*(uint *)(param_2 + uVar1 * 4) = *(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "*target = *target & mask"
            },
            "code": "void update_bit_08006b5c(uint bit_position, int* bit_array) {\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint* target = (uint*)(bit_array + index * 4);\n    uint mask = ~(1 << (bit_position & 0xf));\n    *target = *target & mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "update_bit_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "find_character_or_negative_one_08007376",
                "param_1": "input",
                "uVar1": "result",
                "find_character_in_string_0800735a": "find_character_in_string"
            },
            "code": "int find_character_or_negative_one_08007376(int input)\n{\n  int result = -1;\n  if (input != -1)\n  {\n    result = find_character_in_string();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_080077b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08006e68",
                "FUN_08006c7c",
                "FUN_08006c60",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_character_or_negative_one_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_software_interrupt_08000188",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void trigger_software_interrupt_08000188(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_NUMBER);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "process_input_and_set_flags_08004f3c",
                "param_1": "input",
                "iVar1": "flag",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "code": "void process_input_and_set_flags_08004f3c(uint **input)\n{\n  int flag;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (input[0][0x3d] - 0x29 < 2) {\n    input[0xc] = NULL;\n    input[0][0x3d] = 0x28;\n  }\n  else {\n    if ((char)input[0][0x3d] != '`' && (input[0][1] & 0x800) == 0) {\n      input[0][0x3d] = 0x20;\n    }\n    input[0xc] = NULL;\n    input[0][0x3e] = 0;\n  }\n  *input[0] &= 0xfffff7ff;\n  ptr2 = *input;\n  if ((ptr2[1] & 0x800) == 0) {\n    if ((char)input[0][0x3d] == '`') {\n      input[0][0x3d] = 0x20;\n      input[0x10] = NULL;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = ptr1 + 1;\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      *input[0] &= 0xfffffffe;\n      do_nothing(input);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = input[9];\n        input[9] = ptr1 + 1;\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      check_input_and_set_flag(input);\n    }\n  }\n  else {\n    ptr2[1] &= 0xfffff7ff;\n    if (*(char *)(input[0xd] + 0x21) == '\\x01') {\n      input[0xe][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      flag = get_value_from_param(input[0xe]);\n      if (flag != 0) {\n        if ((input[0][5] & 0x40) != 0) {\n          ptr2 = input[9];\n          input[9] = ptr2 + 1;\n          *(char *)ptr2 = (char)input[0][4];\n        }\n        *input[0] &= 0xfffffffe;\n        input[0][0x3d] = 0x20;\n        (*(code *)input[0xe][0xd])();\n      }\n    }\n    else {\n      input[0xd][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      flag = get_value_from_param(input[0xd]);\n      if (flag != 0) {\n        *input[0] &= 0xfffffffe;\n        input[0][0x3d] = 0x20;\n        (*(code *)input[0xd][0xd])();\n      }\n    }\n  }\n  if ((char)input[0][0x3d] == '(' && ((uint)input[0x10] & 4) != 0) {\n    input[0xb] = DAT_08005080;\n    input[0xc] = NULL;\n    input[0][0x3d] = 0x20;\n    input[0][0x3e] = 0;\n    process_input_and_set_flags_08004f3c(input);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08004f3a",
                "FUN_08004050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "process_input_and_set_flags_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_data_080033cc",
                "param_1": "data",
                "param_2": "data_ptr",
                "param_3": "function_ptr",
                "param_4": "shift_amount",
                "cVar1": "first_char",
                "iVar2": "shift_amount",
                "pcVar3": "data_ptr_shifted"
            },
            "code": "void process_data_080033cc(int data, int* data_ptr, int* function_ptr, int* shift_amount){\n char first_char = *data_ptr;\n char *data_ptr_shifted = data_ptr + 1;\n if (first_char == 'q'){\n if (*function_ptr != 0){\n int shift_amount = copy_and_shift_bits(data,*(int *)(data + 0x18) - 1,data_ptr_shifted,data_ptr,shift_amount);\n process_data_080033cc(data,0,shift_amount + 1);\n (**(code **)(data + 0x68))(*(undefined4 *)(data + 0x40),*(int *)(data + 4) + 1);\n return;\n }\n }\n else if (first_char == 'y'){\n if (*(code **)(data + 0x70) != (code *)0x0){\n if (*(uint *)(data + 0x18) < 3){\n (**(code **)(data + 0x70))(*(undefined4 *)(data + 0x34),0,0);\n return;\n }\n int shift_amount = copy_and_shift_bits(data,*(uint *)(data + 0x18) - 3,data_ptr_shifted + 3,data_ptr,shift_amount);\n process_data_080033cc(data,0,shift_amount + 3);\n int data_ptr_val = *(int *)(data + 4);\n (**(code **)(data + 0x70))(*(undefined4 *)(data + 0x34),*(undefined *)(data_ptr_val + 1),*(undefined *)(data_ptr_val + 2),data_ptr_val + 3);\n return;\n }\n }\n else if (*(code **)(data + 0x6c) != (code *)0x0){\n (**(code **)(data + 0x6c))(*(undefined4 *)(data + 0x44),first_char,*(int *)(data + 0x18) - 1,data_ptr_shifted);\n }\n return;\n }",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_data_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_and_set_flags_08003de4",
                "param_1": "input_param",
                "iVar1": "result",
                "flag": "flag",
                "check_and_set_flags_08003b8c": "check_and_set_flags_internal"
            },
            "code": "int check_and_set_flags_08003de4(int input_param)\n{\n  int result;\n  char flag = *(char *)(input_param + 0x24);\n  if (flag == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(input_param + 0x24) = 1;\n  result = check_and_set_flags_08003de4_internal();\n  if (result == 0) {\n    *(uint *)(input_param + 0x28) = *(uint *)(input_param + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(input_param + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "update_servo_flags_08000500",
                "param_1": "servo_index",
                "param_2": "servo_value",
                "param_3": "servo_count",
                "param_4": "undefined_param",
                "PTR_DAT_0800056c": "servo_max_ptr",
                "PTR_DAT_08000570": "last_servo_ptr",
                "PTR_DAT_08000578": "servo_flags",
                "PTR_DAT_08000574": "undefined_ptr",
                "PTR_DAT_08000584": "servo_buffer_ptr",
                "PTR_DAT_08000580": "undefined_ptr",
                "PTR_DAT_0800057c": "servo_flag_ptr"
            },
            "code": "void update_servo_flags_08000500(int servo_index, int servo_value, int servo_count, undefined4 param_4)\n{\n  byte max_servos_attached = *PTR_DAT_0800056c;\n  if (max_servos_attached > 11) {\n    encode_string_to_buffer_08002f14(PTR_DAT_08000584, \"Max_servos_attached\", servo_count, param_4, param_4);\n    return;\n  }\n  byte last_servo_index = *PTR_DAT_08000570;\n  if (last_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = max_servos_attached;\n    *PTR_DAT_0800056c = max_servos_attached + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000578[last_servo_index - 1];\n    *PTR_DAT_08000570 = last_servo_index - 1;\n  }\n  if ((servo_value > 0) && (servo_count > 0)) {\n    update_flags_and_decode_080025ac(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index, servo_value, servo_count);\n    return;\n  }\n  update_flags_and_decode_wrapper_08002634(PTR_DAT_0800057c + (uint)(byte)PTR_DAT_08000578[servo_index] * 3, servo_index);\n  return;\n}",
            "called": [
                "FUN_08002f14",
                "FUN_080025ac",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_servo_flags_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_block_08009d24",
                "param_1": "memory_block",
                "param_2": "num_blocks",
                "puVar1": "new_block_ptr",
                "iVar2": "block_size"
            },
            "code": "undefined4 * allocate_and_initialize_block_08009d24(undefined4 memory_block, int num_blocks)\n{\n  undefined4 *new_block_ptr;\n  int block_size = (num_blocks - 1) * 0x68;\n  new_block_ptr = (undefined4 *) allocate_memory_block_08009270(memory_block, block_size + 0x74);\n  if (new_block_ptr != (undefined4 *) 0x0) {\n    *new_block_ptr = 0;\n    new_block_ptr[1] = num_blocks;\n    new_block_ptr[2] = new_block_ptr + 3;\n    fill_memory_with_value_080091c6(new_block_ptr + 3, 0, block_size + 0x68);\n  }\n  return new_block_ptr;\n}",
            "called": [
                "FUN_08009270",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_block_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_data_structures_0800344a",
                "param_1": "data_struct_ptr",
                "uVar1": "i",
                "PTR_DAT_08004048": "unknown_ptr",
                "PTR_DAT_08004078": "func_ptr",
                "PTR_DAT_08004010": "unknown_ptr_2",
                "PTR_DAT_08004014": "unknown_ptr_3",
                "PTR_DAT_08004018": "unknown_ptr_4",
                "PTR_DAT_0800400c": "unknown_ptr_5"
            },
            "code": "void initialize_data_structures_0800344a(int data_struct_ptr) {\n    uint num_elements = *(uint *)(data_struct_ptr + 8);\n    *(undefined4 *)(data_struct_ptr + 0x10) = 0;\n    *(undefined *)(data_struct_ptr + 0xc) = 0;\n    *(undefined *)(data_struct_ptr + 0xd) = 0;\n    for (uint i = 0; i < num_elements; i++) {\n        *(undefined *)(*(int *)(data_struct_ptr + 4) + i) = 0;\n    }\n    *(undefined *)(data_struct_ptr + 0x14) = 0;\n    *(undefined4 *)(data_struct_ptr + 0x18) = 0;\n    if (*(code **)(data_struct_ptr + 0x78) != (code *)0x0) {\n        (**(code **)(data_struct_ptr + 0x78))(*(undefined4 *)(data_struct_ptr + 0x48));\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "check_conditions_and_set_flags_080071e4",
                "param_1": "input",
                "local_50": "array",
                "PTR_DAT_08007238": "ARRAY_PTR",
                "find_value_in_array_08007320": "find_value_in_array",
                "find_character_position_08006c7c": "find_character_position",
                "find_character_or_negative_one_08007376": "find_character_or_negative_one",
                "clear_bit_in_memory_if_conditions_met_080063c0": "clear_bit_in_memory_if_conditions_met",
                "set_bit_and_check_08006460": "set_bit_and_check",
                "set_flags_and_return_08005e2e": "set_flags_and_return"
            },
            "code": "void check_conditions_and_set_flags_080071e4(int input)\n{\n  int position;\n  uint character;\n  int array[17];\n  array[0] = find_value_in_array(input, PTR_DAT_08007238);\n  if ((array[0] != 0) && ((((position = find_character_position(input), position == 0 || (position == 4)) || (position == 8)) || ((position == 0xc || (position == 0x18)))))) {\n    character = find_character_or_negative_one(input, PTR_DAT_08007238);\n    if ((character & 0x100000) == 0) {\n      clear_bit_in_memory_if_conditions_met(array, position);\n    }\n    else {\n      set_bit_and_check(array, position);\n    }\n    set_flags_and_return(array);\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08006460",
                "FUN_080063c0",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "check_conditions_and_set_flags_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "call_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void call_function_pointer_08008e72(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "call_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_and_send_encoded_data_080022f8",
                "execute_function_from_pointer_08002ec4": "execute_function_from_pointer",
                "process_data_from_param_08002ed2": "process_data_from_param",
                "readValueAndReturn_08008abc": "readValueAndReturn",
                "PTR_DAT_080023e0": "PTR_DATA_080023e0",
                "PTR_DAT_080023e4": "PTR_DATA_080023e4",
                "PTR_DAT_080023e8": "PTR_DATA_080023e8",
                "PTR_DAT_080023ec": "PTR_DATA_080023ec",
                "PTR_DAT_080023f0": "PTR_DATA_080023f0",
                "PTR_DAT_080023f4": "PTR_DATA_080023f4",
                "PTR_DAT_080023f8": "PTR_DATA_080023f8",
                "PTR_DAT_080023fc": "PTR_DATA_080023fc",
                "find_char_index_080036ac": "find_char_index",
                "get_byte_at_offset_08002fa0": "get_byte_at_offset",
                "get_value_from_array_08008880": "get_value_from_array",
                "send_encoded_data_with_offset_08002ef2": "send_encoded_data_with_offset",
                "receive_data_08001c18": "receive_data",
                "bool bVar1": "bool is_valid_char",
                "int iVar2": "int char_index",
                "undefined4 uVar3": "int value",
                "uint uVar4": "int offset",
                "uint uVar5": "int data_to_receive_count"
            },
            "code": "void process_data_and_send_encoded_data_080022f8(void)\n{\n  bool is_valid_char;\n  int char_index;\n  int value;\n  int offset;\n  int data_to_receive_count;\n\n  initialize_function_08000ef8();\n  while (char_index = execute_function_from_pointer(PTR_DAT_080023e0), char_index != 0) {\n    process_data_from_param(PTR_DAT_080023e0);\n  }\n  value = readValueAndReturn();\n  *(int *)PTR_DAT_080023e4 = value;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(value - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (offset = 0; offset < 0x3c; offset = (offset + 1) & 0xff) {\n      int char_index = offset - 0x2e & 0xff;\n      if (char_index < 0xe) {\n        if (offset < 0x3c) {\n          int char_value = (int)(char)PTR_DAT_080023f4[offset];\n        }\n        else {\n          char_value = -1;\n        }\n        char_index = find_char_index(char_value);\n        if (char_index == 0) {\n          is_valid_char = false;\n        }\n        else {\n          if (offset < 0x3c) {\n            int char_value = (int)(char)PTR_DAT_080023f4[offset];\n          }\n          else {\n            char_value = -1;\n          }\n          char_index = find_char_index(char_value);\n          if (char_index == 1) {\n            is_valid_char = false;\n          }\n          else {\n            int byte_value = get_byte_at_offset(PTR_DAT_080023e0,offset);\n            if (byte_value == 2) {\n              is_valid_char = true;\n            }\n            else {\n              is_valid_char = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_char = false;\n      }\n      if ((is_valid_char) && ((*(int *)PTR_DAT_080023f0 >> char_index & 1U) != 0)) {\n        value = get_value_from_array(char_index);\n        send_encoded_data_with_offset(PTR_DAT_080023e0,char_index,value);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      data_to_receive_count = (char)*PTR_DAT_080023f8 + 1;\n      for (offset = 0; offset < data_to_receive_count; offset = (offset + 1) & 0xff) {\n        int data_offset = offset * 0xc;\n        receive_data(PTR_DAT_080023fc[data_offset],*(undefined4 *)(PTR_DAT_080023fc + data_offset + 4),PTR_DAT_080023fc[data_offset + 8],PTR_DAT_080023fc[data_offset + 9]);\n      }\n    }\n  }\n  return;\n}\n",
            "called": [
                "FUN_08002fa0",
                "FUN_08002ec4",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08008880",
                "FUN_08008abc",
                "FUN_08002ed2",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_and_send_encoded_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_device_and_update_data_080072fa",
                "set_flag_and_update_data_08003724": "set_flag_and_update_data",
                "initialize_device_080035b8": "initialize_device"
            },
            "code": "void initialize_device_and_update_data_080072fa(void)\n{\n  set_flag_and_update_data();\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_080035b8",
                "FUN_08003724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_data_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "process_input_and_set_flags_08005084",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "input_pointer",
                "puVar3": "input_pointer_9",
                "DAT_08005184": "PTR_DAT_08005184",
                "short": "input_short"
            },
            "code": "uint process_input_and_set_flags_08005084(uint **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  uint *input_pointer = *input;\n  uint *second_input_pointer = input[1];\n  \n  second_input_pointer[1] &= 0xfffff8ff;\n  **input_pointer |= 1;\n  **input_pointer &= 0xfffffbff;\n  \n  if ((second_input_pointer[1] & 0x800) != 0) {\n    if ((current_char == '\"') || (current_char == '*')) {\n      *(short *)((int)input + 0x2a) = (short)*(undefined4 *)(*input_pointer[0xe] + 4);\n    }\n    else {\n      *(short *)((int)input + 0x2a) = (short)*(undefined4 *)(*input_pointer[0xd] + 4);\n    }\n  }\n  \n  short input_short = *(short *)((int)input + 0x2a);\n  if (input_short != 0) {\n    if ((input_pointer[5] & 4) != 0) {\n      uint *input_pointer_9 = input[9];\n      input[9] = (uint *)((int)input_pointer_9 + 1);\n      *(char *)input_pointer_9 = (char)input_pointer[4];\n      input_short--;\n    }\n    if (((*input_pointer)[5] & 0x40) != 0) {\n      uint *input_pointer_9 = input[9];\n      input[9] = (uint *)((int)input_pointer_9 + 1);\n      *(char *)input_pointer_9 = (char)(*input_pointer)[4];\n      input_short--;\n    }\n    input[0x10] = (uint *)((uint)input[0x10] | 4);\n  }\n  \n  if (input[0x10] == (uint *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = DAT_08005184;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      process_input_and_set_flags_08005084_08007ff0();\n    }\n    else if ((input[0xc] == (uint *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_08004a74();\n    }\n  }\n  else {\n    process_input_and_set_flags_08005084_08004f3c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_and_set_flags_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "params",
                "PTR_PTR_FUN_0800288c_1_08002940": "function_pointer",
                "PTR_DAT_08002944": "data_pointer"
            },
            "code": "void initialize_parameters_0800291c(undefined4 *params) {\n  undefined *data_ptr;\n  params[1] = 0;\n  params[2] = 1000;\n  *params = PTR_PTR_copy_data_to_buffer_0800288c_1_08002940;\n  data_ptr = PTR_DAT_08002944;\n  *(undefined *)(params + 0x1b) = PTR_DAT_08002944[0xe];\n  *(undefined *)((int)params + 0x6d) = data_ptr[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "check_if_string_not_empty_08002ac0",
                "param_1": "str",
                "param_2": "str_len",
                "param_3": "param_3",
                "param_4": "param_4",
                "check_if_string_is_empty_08002a58": "check_if_string_is_empty"
            },
            "code": "void check_if_string_not_empty_08002ac0(char* str, int str_len, int param_3, int param_4)\n{\n  check_if_string_is_empty(str, str_len, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_if_string_not_empty_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "copy_data_if_flag_set_08003346",
                "param_1": "target_address",
                "param_2": "flag_value",
                "param_3": "data_1",
                "param_4": "data_2",
                "*(undefined4 *)(param_1 + 0x70)": "*(int *)(target_address + 112)",
                "*(undefined4 *)(param_1 + 0x34)": "*(int *)(target_address + 52)"
            },
            "code": "void copy_data_if_flag_set_08003346(int target_address, int flag_value, int data_1, int data_2)\n{\n  if (flag_value == 121) {\n    *(int *)(target_address + 112) = data_1;\n    *(int *)(target_address + 52) = data_2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "copy_data_if_flag_set_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data_structure",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "leading_zeroes_count"
            },
            "code": "void initialize_data_structure_080032bc(uint8_t *data_structure, uint32_t param_2, uint32_t param_3) {\n    uint32_t leading_zeroes_count;\n\n    *(uint32_t *)(data_structure + 4) = param_2;\n    *(uint32_t *)(data_structure + 8) = param_3;\n    data_structure[0xc] = 0;\n    data_structure[0xd] = 0;\n    *(uint32_t *)(data_structure + 0x10) = 0;\n    data_structure[0x14] = 0;\n    *(uint32_t *)(data_structure + 0x18) = 0;\n    *(uint32_t *)(data_structure + 0x1c) = 0;\n    *(uint32_t *)(data_structure + 0x20) = 0;\n    *(uint32_t *)(data_structure + 0x24) = 0;\n    *(uint32_t *)(data_structure + 0x28) = 0;\n    *(uint32_t *)(data_structure + 0x2c) = 0;\n    *(uint32_t *)(data_structure + 0x30) = 0;\n    *(uint32_t *)(data_structure + 0x34) = 0;\n    *(uint32_t *)(data_structure + 0x38) = 0;\n    *(uint32_t *)(data_structure + 0x3c) = 0;\n    *(uint32_t *)(data_structure + 0x40) = 0;\n    *(uint32_t *)(data_structure + 0x44) = 0;\n    *(uint32_t *)(data_structure + 0x48) = 0;\n    *(uint32_t *)(data_structure + 0x4c) = 0;\n    *(uint32_t *)(data_structure + 0x50) = 0;\n    *(uint32_t *)(data_structure + 0x54) = 0;\n    *(uint32_t *)(data_structure + 0x58) = 0;\n    *(uint32_t *)(data_structure + 0x5c) = 0;\n    *(uint32_t *)(data_structure + 0x60) = 0;\n    *(uint32_t *)(data_structure + 100) = 0;\n    *(uint32_t *)(data_structure + 0x68) = 0;\n    *(uint32_t *)(data_structure + 0x6c) = 0;\n    *(uint32_t *)(data_structure + 0x70) = 0;\n    *(uint32_t *)(data_structure + 0x74) = 0;\n    *(uint32_t *)(data_structure + 0x78) = 0;\n    leading_zeroes_count = count_leading_zeroes(param_2);\n    data_structure[0] = (uint8_t)(leading_zeroes_count >> 5);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "encode_and_send_data_08003106",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "func_ptr"
            },
            "code": "void encode_and_send_data_08003106(undefined4 *data_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined4 *func_ptr;\n  func_ptr = (undefined4 *)*data_ptr;\n  if (func_ptr != (undefined4 *)0x0) {\n    (**(code **)*func_ptr)(func_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x6f);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_2);\n    encode_data_0800307a(data_ptr,param_3,param_4,param_3);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = find_value_in_array_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = find_value_in_array_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = compare_and_return_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        process_data_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = find_character_or_negative_one_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = find_character_or_negative_one_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_character_or_negative_one_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_character_or_negative_one_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        set_bits_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = find_character_or_negative_one_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = find_character_or_negative_one_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_character_or_negative_one_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_character_or_negative_one_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        set_bits_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        decode_and_store_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        decode_and_store_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        calculate_value_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080045c0",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "set_flags_and_return_08007708"
            },
            "code": "void set_flags_and_return_08007708(void)\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "handle_interrupt_0800018c",
                "param_1": "interrupt_num",
                "param_2": "param1",
                "param_3": "dummy1",
                "param_4": "param4",
                "uVar1": "result"
            },
            "code": "int handle_interrupt_0800018c(int interrupt_num, int param1, int dummy1, int dummy2, int param4) {\n  if (*(int *)PTR_DAT_080001a4 != 0) {\n    return 0;\n  }\n  int result = trigger_software_interrupt_08000188(1, param1, 0, 0, param4);\n  return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "handle_interrupt_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index",
                "DAT_08003fac": "data_array"
            },
            "code": "void set_bit_at_index_08003f94(uint index) {\n  if (index >= 0) {\n    *(int *)(DAT_08003fac + (index >> 5) * 4) = 1 << (index & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "initialize_game_state_08008c44",
                "param_1": "game_state",
                "param_2": "player_count",
                "param_3": "game_options",
                "bVar1": "game_option_masked",
                "iVar2": "game_option_count",
                "UNRECOVERED_JUMPTABLE": "game_state_handler",
                "FUNC_08008078": "initialize_game_board",
                "decode_and_store_0800863c": "decode_and_store_board_layout",
                "extraout_r1": "game_state_handler_param_2"
            },
            "code": "void initialize_game_state_08008c44(int game_state, int player_count, byte game_options)\n{\n  uint game_option_bits;\n  byte game_option_masked;\n  int game_option_count = 0;\n  code *game_state_handler;\n  \n  *(int *)(game_state + 0x11c) = player_count;\n  *(byte *)(game_state + 0x140) = game_options;\n  game_option_masked = game_options & 7;\n  if (game_option_masked == 4) {\n    game_option_count = 7;\n  }\n  else if (game_option_masked == 6) {\n    game_option_count = 8;\n  }\n  else if (game_option_masked == 2) {\n    game_option_count = 6;\n  }\n  if ((game_options & 0x30) == 0x30) {\n    *(int *)(game_state + 0x128) = 0x600;\n    game_option_count++;\n  }\n  else if ((game_options & 0x20) == 0) {\n    *(int *)(game_state + 0x128) = 0;\n  }\n  else {\n    *(int *)(game_state + 0x128) = 0x400;\n    game_option_count++;\n  }\n  if ((game_options & 8) == 0) {\n    *(int *)(game_state + 0x124) = 0;\n  }\n  else {\n    *(int *)(game_state + 0x124) = 0x2000;\n  }\n  if (game_option_count == 8) {\n    *(int *)(game_state + 0x120) = 0;\n  }\n  else if (game_option_count == 9) {\n    *(int *)(game_state + 0x120) = 0x1000;\n  }\n  else {\n    game_option_count = 0;\n  }\n  if (game_option_count != 0) {\n    initialize_game_board(game_state + 0xd4);\n    decode_and_store_board_layout(game_state + 0xd4,uRam08008cf0);\n    return;\n  }\n  game_state_handler = (code *)0x8008cee;\n  execute_game_state_handler_with_params_and_stack_pointer_080090cc(uRam08008cfc,299,uRam08008cf8,uRam08008cf4);\n  if (game_option_count < 0x3c) {\n    uRam0000012d = PTR_DAT_08008d14[game_option_count];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*game_state_handler)(0,game_option_count,&stack0x00000148);\n  return;\n}",
            "called": [
                "FUN_08008078",
                "FUN_0800863c",
                "FUN_080090cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "initialize_game_state_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "initialize_parameters_08002a26",
                "param_1": "ptr_arg1",
                "param_2": "arg2",
                "param_3": "ptr_arg3",
                "param_4": "ptr_arg4"
            },
            "code": "void initialize_parameters_08002a26(void* ptr_arg1, int arg2, void* ptr_arg3, void* ptr_arg4)\n{\n  initialize_parameters_08002a26_08002a1c(ptr_arg1,arg2,ptr_arg3,ptr_arg4,ptr_arg4);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "set_device_status_0800430c",
                "param_1": "device_info",
                "device_type": "type",
                "device_status": "status",
                "device_data": "data"
            },
            "code": "int set_device_status_0800430c(int *device_info)\n{\n    char device_type = *(char *)((int)device_info + 0x3e);\n    int device_status = device_info[0x11];\n    int *device_data = (int *)(*device_info + 0x10);\n\n    if (device_type == '@') {\n        if (device_info[0x14] == 0) {\n            *device_data = device_status & 0xfe;\n        }\n        else {\n            *device_data = device_status & 0xffU | 1;\n        }\n    }\n    else if (device_info[4] == 0x4000) {\n        if (*(char *)((int)device_info + 0x3d) == '!') {\n            *device_data = device_status & 0xfe;\n        }\n        else {\n            *device_data = device_status & 0xffU | 1;\n        }\n    }\n    else if (device_info[0x14] == 0) {\n        *device_data = (uint)(device_status << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (device_info[0x14] == 1) {\n        *device_data = (uint)(device_status << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_device_status_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "update_data_08006060",
                "param_1": "data_array",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_array + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(data_array + 0xf)",
                "set_flags_and_return_08007708": "set_flags_and_return",
                "update_memory_08005fe8": "update_memory"
            },
            "code": "int update_data_08006060(int *data_array)\n{\n    if (data_array != NULL) {\n        if (*(char *)((int)data_array + 0x3d) == '\\0') {\n            *(char *)(data_array + 0xf) = '\\0';\n            set_flags_and_return();\n        }\n        *(char *)((int)data_array + 0x3d) = 2;\n        update_memory(*data_array, data_array + 1);\n        *(char *)((int)data_array + 0x3d) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "update_data_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "process_data_08003350",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void process_data_08003350(int data_ptr, int data_value, undefined4 value1, undefined4 value2) {\n  if (data_value == 0xf9) {\n    *(undefined4 *)(data_ptr + 0x74) = value1;\n    *(undefined4 *)(data_ptr + 0x38) = value2;\n    return;\n  }\n  if (data_value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(data_ptr + 0x78) = value1;\n  *(undefined4 *)(data_ptr + 0x48) = value2;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "process_data_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_character_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = calculate_length_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "update_data_08006186",
                "param_1": "data_ptr",
                "param_2": "update_ptr",
                "param_3": "update_type",
                "PTR_": "",
                "DAT_": "",
                "set_flags_08005cec": "set_flags",
                "update_data_080060c4": "update_data_1",
                "update_data_08005d48": "update_data_2",
                "update_data_08005dac": "update_data_3"
            },
            "code": "int update_data_08006186(int *data_ptr, int update_ptr, int update_type) {\n    bool is_updated = (*(char *)(data_ptr + 0xf) == 1);\n    if (!is_updated) {\n        *(char *)(data_ptr + 0xf) = 1;\n        *(char *)((int)data_ptr + 0x3d) = 2;\n        switch(update_type) {\n            case 0:\n                set_flags(*data_ptr);\n                *(uint *)(*data_ptr + 0x18) |= 8;\n                *(uint *)(*data_ptr + 0x18) &= 0xfffffffb;\n                *(uint *)(*data_ptr + 0x18) |= *(uint *)(update_ptr + 0x10);\n                break;\n            case 4:\n                update_data_08006186_080060c4(*data_ptr);\n                *(uint *)(*data_ptr + 0x18) |= 0x800;\n                *(uint *)(*data_ptr + 0x18) &= 0xfffffbff;\n                *(uint *)(*data_ptr + 0x18) |= *(int *)(update_ptr + 0x10) << 8;\n                break;\n            case 8:\n                update_data_08006186_08005d48(*data_ptr);\n                *(uint *)(*data_ptr + 0x1c) |= 8;\n                *(uint *)(*data_ptr + 0x1c) &= 0xfffffffb;\n                *(uint *)(*data_ptr + 0x1c) |= *(uint *)(update_ptr + 0x10);\n                break;\n            case 0xc:\n                update_data_08006186_08005dac(*data_ptr);\n                *(uint *)(*data_ptr + 0x1c) |= 0x800;\n                *(uint *)(*data_ptr + 0x1c) &= 0xfffffbff;\n                *(uint *)(*data_ptr + 0x1c) |= *(int *)(update_ptr + 0x10) << 8;\n                break;\n        }\n        *(char *)((int)data_ptr + 0x3d) = 1;\n        *(char *)(data_ptr + 0xf) = 0;\n        return 0;\n    }\n    return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "update_data_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "set_flags_based_on_input_and_return_08007710",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_flags_based_on_input_and_return_08007710(void)\n{\n  set_flags_based_on_input();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_and_return_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "data",
                "param_2": "length",
                "PTR_08003488": "ptr1",
                "DAT_0800346e": "flag",
                "DAT_0800346f": "bVar1"
            },
            "code": "void process_data_08003474(uint8_t *data, uint16_t length) {\n    uint8_t DAT_0800346e = *(data + 0x14);\n    if (DAT_0800346e != 0) {\n        if (length != 0xf7) {\n            process_data_08003474_08003376(data, length, *(uint32_t *)(data + 0x18));\n            *(uint32_t *)(data + 0x18) += 1;\n            return;\n        }\n        *(data + 0x14) = 0;\n        process_data_08003474_080033cc();\n        return;\n    }\n    uint32_t *PTR_08003488 = (uint32_t *)(data + 0x10);\n    if ((*PTR_08003488 == 0) || (length > 0x7f)) {\n        if (length < 0xf0) {\n            *(data + 0xd) = length & 0xf;\n            length &= 0xf0;\n        }\n        if (length == 0xf0) {\n            *(data + 0x14) = 1;\n            *(uint32_t *)(data + 0x18) = 0;\n            return;\n        }\n        if (length < 0xf1) {\n            if (length != 0xc0) {\n                if (length < 0xc1) {\n                    if (length != 0x90) {\n                        return;\n                    }\n                }\n                else {\n                    if (length == 0xd0) {\n                        *(PTR_08003488) = 2;\n                        *(data + 0xc) = length;\n                        return;\n                    }\n                    if (length != 0xe0) {\n                        return;\n                    }\n                }\n                *(PTR_08003488) = 2;\n                *(data + 0xc) = length;\n                return;\n            }\n            *(PTR_08003488) = 1;\n            *(data + 0xc) = length;\n            return;\n        }\n        if (length != 0xf9) {\n            if (length > 0xf9) {\n                if (length == 0xff) {\n                    initialize_data_structures(data);\n                    return;\n                }\n                return;\n            }\n            if (length > 0xf5) {\n                return;\n            }\n            *(PTR_08003488) = 2;\n            *(data + 0xc) = length;\n            return;\n        }\n        if (*(code **)(data + 0x74) != (code *)0x0) {\n            (**(code **)(data + 0x74))(*(uint32_t *)(data + 0x38));\n        }\n    }\n    else {\n        *(PTR_08003488) -= 1;\n        process_data_08003474_08003376();\n        if ((*PTR_08003488 == 0) && (*(data + 0xc) != 0)) {\n            uint8_t DAT_0800346f = *(data + 0xc);\n            if (DAT_0800346f == 0xd0) {\n                if (*(code **)(data + 0x58) != (code *)0x0) {\n                    (**(code **)(data + 0x58))(*(uint32_t *)(data + 0x28), *(data + 0xd), **(uint8_t **)(data + 4));\n                }\n            }\n            else if (DAT_0800346f < 0xd1) {\n                if (DAT_0800346f == 0x90) {\n                    if (*(code **)(data + 0x50) != (code *)0x0) {\n                        (**(code **)(data + 0x50))(*(uint32_t *)(data + 0x20), *(data + 0xd), (*(uint8_t **)(data + 4))[1] + (uint32_t)**(uint8_t **)(data + 4) * 0x80);\n                    }\n                }\n                else if ((DAT_0800346f == 0xc0) && (*(code **)(data + 0x54) != (code *)0x0)) {\n                    (**(code **)(data + 0x54))(*(uint32_t *)(data + 0x24), *(data + 0xd), **(uint8_t **)(data + 4));\n                }\n            }\n            else if (DAT_0800346f == 0xf4) {\n                if (*(code **)(data + 0x5c) != (code *)0x0) {\n                    (**(code **)(data + 0x5c))(*(uint32_t *)(data + 0x2c), (*(uint8_t **)(data + 4))[1], **(uint8_t **)(data + 4));\n                }\n            }\n            else if (DAT_0800346f == 0xf5) {\n                if (*(code **)(data + 0x60) != (code *)0x0) {\n                    (**(code **)(data + 0x60))(*(uint32_t *)(data + 0x30), (*(uint8_t **)(data + 4))[1], **(uint8_t **)(data + 4));\n                }\n            }\n            else if ((DAT_0800346f == 0xe0) && (*(code **)(data + 0x4c) != (code *)0x0)) {\n                (**(code **)(data + 0x4c))(*(uint32_t *)(data + 0x1c), *(data + 0xd), (*(uint8_t **)(data + 4))[1] + (uint32_t)**(uint8_t **)(data + 4) * 0x80);\n            }\n            *(data + 0xc) = 0;\n            return;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_080033cc",
                "FUN_08003376",
                "FUN_0800344a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_data_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_data_by_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba4": "data_1",
                "DAT_08006bb4": "data_2",
                "DAT_08006ba8": "data_3",
                "DAT_08006bac": "data_4",
                "DAT_08006bb0": "data_5"
            },
            "code": "int get_data_by_index_08006b7c(int index) {\n    switch(index) {\n        case 0:\n            return DAT_08006ba4;\n        case 1:\n            return DAT_08006bb4;\n        case 2:\n            return DAT_08006ba8;\n        case 3:\n            return DAT_08006bac;\n        case 4:\n            return DAT_08006bb0;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_data_by_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "ptr_input",
                "param_2": "input_length",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "local_15": "digits",
                "cVar1": "digit"
            },
            "code": "undefined4 convert_base_08008e7c(int *ptr_input, uint input_length, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char digits[9];\n  digits[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *current_digit = digits + 1;\n  do {\n    quotient = input_length / base;\n    remainder = (input_length & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit--;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_digit = digit;\n    input_length = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint output_length = get_end_of_string_08000178(current_digit);\n    result = (**(code **)(*ptr_input + 4))(ptr_input, current_digit, output_length);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "checkAndUpdateConfig_08003aa0",
                "param_1": "config",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_08003b84": "PTR_DAT_08003b84",
                "DAT_08003b88": "PTR_DAT_08003b88"
            },
            "code": "int checkAndUpdateConfig_08003aa0(undefined4 *config)\n{\n    int result;\n    bool hasUpdated = *(char *)(config + 9) == '\\x01';\n    if (!hasUpdated) {\n        *(undefined *)(config + 9) = 1;\n        result = checkAndUpdate_08003a20();\n        if (result == 0) {\n            config[10] = (config[10] & 0xfffffcfe) | 0x100;\n            undefined4 *ptr = (undefined4 *)*config;\n            if ((ptr == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n                config[10] |= 0x100000;\n                if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n                    config[10] = (config[10] & 0xffffcfff) | 0x1000;\n                }\n            }\n            else {\n                config[10] &= 0xffefffff;\n                if ((ptr[1] & 0x400) != 0) {\n                    config[10] = (config[10] & 0xffffcfff) | 0x1000;\n                }\n            }\n            if ((config[10] & 0x1000) == 0) {\n                config[0xb] = 0;\n            }\n            else {\n                config[0xb] &= 0xfffffff9;\n            }\n            *(undefined *)(config + 9) = 0;\n            *ptr = 0xfffffffd;\n            config = (undefined4 *)*config;\n            if (((config[2] & 0xe0000) == 0xe0000) && ((config != DAT_08003b84) || ((DAT_08003b84[-0xff] & 0xf0000) == 0))) {\n                config[2] |= 0x500000;\n            }\n            else {\n                config[2] |= 0x100000;\n            }\n        }\n        else {\n            *(undefined *)(config + 9) = 0;\n        }\n        return result;\n    }\n    return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "checkAndUpdateConfig_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "clear_memory_and_flags_08003ce8",
                "param_1": "memory",
                "iVar1": "success"
            },
            "code": "int clear_memory_and_flags_08003ce8(int *memory) {\n  int success;\n  if (memory == NULL) {\n    success = 1;\n  }\n  else {\n    memory[10] |= 2;\n    success = check_and_set_flags();\n    if (success == 0) {\n      *(int *)(*memory) = -32;\n      *(unsigned int *)(*memory + 4) &= DAT_08003ddc;\n      *(unsigned int *)(*memory + 8) &= DAT_08003de0;\n      *(unsigned int *)(*memory + 12) &= 0xff000000;\n      *(unsigned int *)(*memory + 16) &= 0xc0000000;\n      *(unsigned int *)(*memory + 20) &= 0xfffff000;\n      *(unsigned int *)(*memory + 24) &= 0xfffff000;\n      *(unsigned int *)(*memory + 28) &= 0xfffff000;\n      *(unsigned int *)(*memory + 32) &= 0xfffff000;\n      *(unsigned int *)(*memory + 36) &= 0xfffff000;\n      *(unsigned int *)(*memory + 40) &= 0xfffff000;\n      *(unsigned int *)(*memory + 44) &= 0xff000000;\n      *(unsigned int *)(*memory + 48) &= 0xff000000;\n      *(unsigned int *)(*memory + 52) &= 0xc0000000;\n      *(unsigned int *)(*memory + 56) &= 0xc0000000;\n      *(unsigned int *)(*memory + 60) &= 0xffc00000;\n      *(unsigned int *)(*memory + 64) &= 0xffc00000;\n      update_flags(memory);\n      memory[11] = 0;\n      memory[10] = 0;\n    }\n    *(char *)(memory + 9) = 0;\n  }\n  return success;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "clear_memory_and_flags_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memory_block",
                "param_2": "new_values",
                "uVar1": "current_value",
                "DAT_0800605c": "ptr_1",
                "PTR_": "ptr_",
                "memory_block": "memory_block",
                "new_values": "new_values",
                "current_value": "current_value"
            },
            "code": "void update_memory_08005fe8(uint *memory_block, uint *new_values) {\n  uint current_value = *memory_block;\n  if ((((memory_block == DAT_0800605c) || (memory_block == (uint *)0x40000000)) ||\n      (memory_block == PTR_2)) || (memory_block == PTR_3)) {\n    current_value = current_value & 0xffffff8f | new_values[1];\n  }\n  if (((memory_block == DAT_0800605c) || (memory_block == (uint *)0x40000000)) ||\n     ((memory_block == PTR_2 || (memory_block == PTR_3)))) {\n    current_value = current_value & 0xfffffcff | new_values[3];\n  }\n  *memory_block = current_value & 0xffffff7f | new_values[5];\n  memory_block[11] = new_values[2];\n  memory_block[10] = *new_values;\n  if (memory_block == DAT_0800605c) {\n    memory_block[12] = new_values[4];\n  }\n  memory_block[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "update_memory_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "findOffset_08008804",
                "param_1": "offset",
                "iVar1": "currentOffset",
                "puVar2": "currentPtr",
                "PTR_DAT_08008834": "globalVar1",
                "PTR_DAT_08008838": "globalVar2",
                "PTR_DAT_0800883c": "globalVar3"
            },
            "code": "int findOffset_08008804(int offset)\n{\n  int currentOffset;\n  undefined *currentPtr;\n  \n  if (*PTR_DAT_08008834 == 0) {\n    *PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  currentOffset = *PTR_DAT_08008834;\n  currentPtr = (undefined *)(offset + currentOffset);\n  if (currentPtr <= &stack0x00000000) {\n    *PTR_DAT_08008834 = currentPtr;\n    return currentOffset;\n  }\n  *PTR_DAT_0800883c = 0xc;\n  return -1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "findOffset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "check_param_0800738a",
                "param_1": "value",
                "param_2": "string_array",
                "undefined4": "int"
            },
            "code": "int check_param_0800738a(int value, char *string_array)\n{\n    if (value == -1) {\n        return 0;\n    }\n    while( true ) {\n        if (*string_array == -1) {\n            return 0;\n        }\n        if (value == *string_array) break;\n        string_array = string_array + 0xc;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "check_param_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_input_08004e3c",
                "param_1": "input",
                "puVar1": "current_ptr"
            },
            "code": "uint32_t process_input_08004e3c(uint32_t **input)\n{\n  uint32_t *current_ptr;\n  \n  current_ptr = input[11];\n  \n  if (*(int16_t *)((int)input + 42) == 3) {\n    if (((current_ptr == (uint32_t *)0x4) || (current_ptr == (uint32_t *)0x8)) || (current_ptr == (uint32_t *)0xffff0000)) {\n      **input = **input & 0xfffffbff;\n    }\n    current_ptr = input[9];\n    input[9] = (uint32_t *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*input)[4];\n    *(int16_t *)((int)input + 42) = *(int16_t *)((int)input + 42) + -1;\n  }\n  else if (*(int16_t *)((int)input + 42) == 2) {\n    if (((current_ptr == (uint32_t *)0x4) || (current_ptr == (uint32_t *)0x8)) || (current_ptr == (uint32_t *)0xffff0000)) {\n      (*input)[1] = (*input)[1] & 0xfffffcff;\n      **input = **input | 0x200;\n    }\n    else {\n      if (current_ptr == (uint32_t *)0x2) {\n        **input = **input | 0x400;\n      }\n      else {\n        **input = **input & 0xfffffbff;\n      }\n      (*input)[1] = (*input)[1] & 0xfffffcff;\n    }\n    current_ptr = input[9];\n    input[9] = (uint32_t *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*input)[4];\n    *(int16_t *)((int)input + 42) = *(int16_t *)((int)input + 42) + -1;\n    current_ptr = input[9];\n    input[9] = (uint32_t *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*input)[4];\n    *(undefined *)((int)input + 61) = 0x20;\n    input[12] = (uint32_t *)0x0;\n    if (*(char *)((int)input + 62) == '@') {\n      *(undefined *)((int)input + 62) = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      *(undefined *)((int)input + 62) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    current_ptr = input[9];\n    input[9] = (uint32_t *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*input)[4];\n    *(int16_t *)((int)input + 42) = *(int16_t *)((int)input + 42) + -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "insert_node_into_list_080091a0",
                "param_1": "new_node_value",
                "PTR_PTR_DAT_080091ac": "PTR_PTR_DATA"
            },
            "code": "void insert_node_into_list_080091a0(undefined4 new_node_value)\n{\n    insert_node(*(undefined4 *)PTR_PTR_DAT_080091ac, new_node_value);\n    return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "insert_node_into_list_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "initialize_parameters_08002a1c",
                "param_1": "ptr1",
                "param_2": "num1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "initialize_params_08002968": "initialize_params"
            },
            "code": "void initialize_parameters_08002a1c(void *ptr1, int num1, void *ptr2, void *ptr3) {\n   initialize_params_08002968(ptr1, num1, ptr2, ptr3, ptr3);\n   return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_from_input_08007718",
                "param_1": "input"
            },
            "code": "int subtract_four_from_input_08007718(int input)\n{\n  return input - 4;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "initialize_if_param1_is_1_and_param2_is_0xffff_08002948",
                "param_1": "param1",
                "param_2": "param2",
                "initialize_parameters_0800291c": "initialize_parameters",
                "PTR_DAT_08002964": "PTR_DAT_08002964"
            },
            "code": "void initialize_if_param1_is_1_and_param2_is_0xffff_08002948(int param1, int param2) {\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_parameters(PTR_DAT_08002964);\n  }\n  return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "initialize_if_param1_is_1_and_param2_is_0xffff_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_memory_permissions_08009e64",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "permission",
                "param_4": "result",
                "iVar1": "error_code",
                "uVar2": "page_protection",
                "auStack_4c": "stack_buffer",
                "local_48": "page_protection"
            },
            "code": "int check_memory_permissions_08009e64(uint32_t base_address, int16_t size, uint32_t *permission, uint32_t *result)\n{\n    int error_code;\n    uint32_t page_protection;\n    uint32_t temp_result;\n    uint8_t stack_buffer[4];\n\n    if (size < 0 || (error_code = set_memory_permissions(base_address, size, stack_buffer)) < 0)\n    {\n        *result = 0;\n        if (size < 0)\n        {\n            page_protection = 0x40;\n        }\n    }\n    else\n    {\n        *result = (uint32_t)((page_protection & 0xF000) == 0x2000);\n    }\n\n    if (page_protection != 0)\n    {\n        temp_result = 0x400;\n    }\n    else\n    {\n        temp_result = page_protection;\n    }\n\n    *permission = temp_result;\n    return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_memory_permissions_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "allocate_memory_if_needed_08002acc",
                "param_1": "requested_size",
                "param_2": "current_size_ptr",
                "param_3": "element_size",
                "param_4": "buffer_ptr",
                "puVar1": "buffer_ptr_ptr",
                "iVar2": "new_size",
                "uVar3": "buffer_size"
            },
            "code": "void allocate_memory_if_needed_08002acc(uint requested_size, uint* current_size_ptr, uint element_size, void** buffer_ptr) {\n  undefined* buffer = *buffer_ptr;\n  if (*current_size_ptr < requested_size) {\n    if (requested_size < 0x20) {\n      requested_size = 0x20;\n    }\n    int new_size = allocate_memory_08009908(*(undefined4*)PTR_DAT_08002afc, requested_size, element_size, *current_size_ptr, *buffer_ptr);\n    *(int*)PTR_DAT_08002afc = new_size;\n    if (new_size == 0) {\n      buffer = NULL;\n    }\n    else {\n      buffer = (undefined*)new_size;\n    }\n    *current_size_ptr = requested_size;\n    *buffer_ptr = buffer;\n  }\n}\n",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "allocate_memory_if_needed_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "data",
                "param_2": "value",
                "PTR_DAT_08002a48": "data_pointer_1",
                "PTR_DAT_08002a4c": "data_pointer_2",
                "PTR_DAT_08002a50": "data_pointer_3",
                "PTR_DAT_08002a54": "data_pointer_4"
            },
            "code": "void initialize_data_08002a30(int data, int value) {\n  *PTR_DAT_08002a48 = 1;\n  *PTR_DAT_08002a4c = (char)(value << 1);\n  *PTR_DAT_08002a50 = 0;\n  *PTR_DAT_08002a54 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08002b68",
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_offset",
                "pbVar2": "current_byte",
                "pbVar3": "buffer_end",
                "uVar4": "result"
            },
            "code": "uint process_input_0800932c(int input_length, byte input_byte, byte **input_buffer)\n{\n  int buffer_offset;\n  byte *current_byte;\n  byte *buffer_end;\n  uint result;\n  \n  buffer_end = (*input_buffer)[2] + -1;\n  (*input_buffer)[2] = buffer_end;\n  if ((-1 < (int)buffer_end) || (((int)(*input_buffer)[6] <= (int)buffer_end && (buffer_end = (byte *)(uint)input_byte, buffer_end != (byte *)0xa))))\n  {\n    current_byte = *input_buffer;\n    *input_buffer = current_byte + 1;\n    *current_byte = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_data_08009d50();\n  }\n  if (input_buffer == (byte **)PTR_DAT_08009a74) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_08009a78) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_08009a7c) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  current_byte = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_offset = (int)current_byte << 0x1c;\n  if (((buffer_offset < 0) && (current_byte = input_buffer[4], current_byte != (byte *)0x0)) || (buffer_offset = process_data(input_length, input_buffer, buffer_offset, current_byte, current_byte), buffer_offset == 0)) {\n    result = (uint)input_byte;\n    buffer_offset = (int)*input_buffer - (int)input_buffer[4];\n    if ((buffer_offset < (int)input_buffer[5]) || (buffer_offset = process_data_08009c7c(input_length, input_buffer), buffer_offset == 0)) {\n      (*input_buffer)[2] = (*input_buffer)[2] + -1;\n      current_byte = *input_buffer;\n      *input_buffer = current_byte + 1;\n      *current_byte = input_byte;\n      if ((byte *)(buffer_offset + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      buffer_offset = process_data_08009c7c(input_length, input_buffer);\n      if (buffer_offset == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "process_data_0800322c",
                "param_1": "data_ptr",
                "param_2": "data_2",
                "param_3": "data_3",
                "puVar1": "func_ptr"
            },
            "code": "void process_data_0800322c(uint32_t *data_ptr, uint32_t data_2, uint32_t data_3) {\n  uint32_t *func_ptr = (uint32_t *)*data_ptr;\n  if (func_ptr != NULL) {\n    (**(void (**)(uint32_t *, uint32_t))(func_ptr))(func_ptr, 0xf9);\n    (***(void (***)(uint32_t *))(uint32_t *)*data_ptr)((uint32_t *)*data_ptr, data_2);\n    (***(void (***)(uint32_t *))(uint32_t *)*data_ptr)((uint32_t *)*data_ptr, data_3);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "process_data_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "string_ptr",
                "pcVar2": "substring_ptr",
                "pcVar3": "string_end"
            },
            "code": "char *find_substring_080099a4(char *string, char *substring) {\n  char *string_ptr;\n  char *substring_ptr;\n  char *string_end;\n  if (*string == '\\0') {\n    if (*substring != '\\0') {\n      string = NULL;\n    }\n    return string;\n  }\n  do {\n    string_ptr = string;\n    if (*string_ptr == '\\0') {\n      return NULL;\n    }\n    string_end = substring - 1;\n    substring_ptr = string_ptr - 1;\n    do {\n      string_end++;\n      if (*string_end == '\\0') {\n        return string_ptr;\n      }\n      substring_ptr++;\n      string = string_ptr + 1;\n    } while (*substring_ptr == *string_end);\n  } while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "PTR_DAT_08005a24": "PTR_DATA"
            },
            "code": "uint32_t get_value_from_pointer_08005a1c() {\n  uint32_t* data_pointer = (uint32_t*) PTR_DAT_08005a24;\n  return *data_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_080035b8",
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n    call_function_pointer_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_char_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_char_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    call_function_pointer_08002f1e(PTR_DAT_08002044,0xf0);\n    call_function_pointer_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        call_function_pointer_08002f1e(PTR_DAT_08002044,0);\n        call_function_pointer_08002f1e(puVar4,1);\n        call_function_pointer_08002f1e(puVar4,0xb);\n        call_function_pointer_08002f1e(puVar4,1);\n        call_function_pointer_08002f1e(puVar4,1);\n        call_function_pointer_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_char_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_char_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,2);\n        call_function_pointer_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = check_param_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,3);\n        call_function_pointer_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,4);\n        call_function_pointer_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = check_param_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = check_param_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        call_function_pointer_08002f1e(PTR_DAT_080022e8,6);\n        call_function_pointer_08002f1e(puVar4,1);\n      }\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n      call_function_pointer_08002f1e(puVar5,0x6e);\n      call_function_pointer_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = get_byte_at_offset_08002fa0(puVar5,bVar1);\n        call_function_pointer_08002f1e(puVar5,uVar6);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        call_function_pointer_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = get_value_at_offset_08002fba(puVar5,bVar1);\n          call_function_pointer_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n          call_function_pointer_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      call_function_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      decode_and_process_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_char_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_char_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = get_byte_from_ptr_dat_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          process_data_08000588(uVar12);\n        }\n        update_servo_flags_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      encode_string_to_buffer_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        initialize_data_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          copy_data_to_buffer_wrapper_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        check_if_string_not_empty_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        receive_data_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        encode_string_to_buffer_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      check_and_execute_commands_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_08002ac0",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_08001bf8",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_08002a30",
                "FUN_08001c18",
                "FUN_08000a64",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_value_from_pointer_08003760",
                "undefined4": "int",
                "PTR_DAT_08003768": "pointer_to_value"
            },
            "code": "int get_value_from_pointer_08003760() {\n    int* PTR_DAT_08003768 = (int*) PTR_DAT_08003768;\n    return *PTR_DAT_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_080067ac",
                "FUN_08005460",
                "FUN_08007e74",
                "FUN_08003e20",
                "FUN_08003a20",
                "FUN_08005aa4",
                "FUN_0800376c",
                "FUN_08003b8c",
                "FUN_080066e8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "find_value_in_array_08007320",
                "param_1": "value_to_find",
                "uVar1": "found_value"
            },
            "code": "int find_value_in_array_08007320(int value_to_find){\n                      int found_value = 0;\n                      if(value_to_find != -1){\n                        found_value = search_array(value_to_find);\n                      }\n                      return found_value;\n                    }",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080077b0",
                "FUN_08006d80",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "execute_function_08000be8",
                "param_1": "function_index",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "puVar1": "current_element_ptr",
                "puVar2": "target_element_ptr",
                "PTR_DAT_08000c0c": "element_array",
                "PTR_DAT_08000c10": "element_array"
            },
            "code": "void execute_function_08000be8(int function_index, uint parameter_2, int parameter_3, undefined4 parameter_4)\n{\n  undefined *current_element_ptr;\n  undefined *target_element_ptr;\n  \n  target_element_ptr = (undefined *)((byte)PTR_DAT_08000c0c[function_index] & parameter_2);\n  current_element_ptr = PTR_DAT_08000c0c;\n  if ((parameter_3 != 0) || (current_element_ptr = (undefined *)(uint)(byte)PTR_DAT_08000c0c[function_index + 1], target_element_ptr != current_element_ptr)) \n  {\n    execute_with_data_08002efe(data_array, function_index, target_element_ptr, current_element_ptr, parameter_4);\n    PTR_DAT_08000c0c[function_index + 1] = (char)target_element_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "execute_function_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "check_value_08003fd8",
                "param_1": "value",
                "puVar1": "data_pointer"
            },
            "code": "int check_value_08003fd8(int value) {\n  int* data_pointer = DAT_08003ffc;\n  if (value - 1U < 0x1000000) {\n    data_pointer[1] = value - 1U;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    data_pointer[2] = 0;\n    *data_pointer = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": false,
            "current_name": "check_value_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_data_0800307a",
                "param_1": "function_pointer",
                "param_2": "num_elements",
                "param_3": "data",
                "param_4": "max_num_bits",
                "uVar1": "current_byte",
                "uVar2": "current_bit_position",
                "uVar3": "num_bits_to_write",
                "uVar4": "bits_written"
            },
            "code": "void encode_data_0800307a(uint32_t *function_pointer, uint32_t num_elements, uint8_t *data, uint32_t max_num_bits) {\n  uint32_t current_byte = (uint32_t)*data;\n  if (max_num_bits == 0) {\n    max_num_bits = 0xffffffff;\n  }\n  uint32_t bits_written = 0;\n  uint32_t current_bit_position = 0;\n  uint32_t num_bits_to_write = 0;\n  while ((bits_written < num_elements && (num_bits_to_write < max_num_bits))) {\n    (***(void (**)(void))(uint32_t *)*function_pointer)((uint32_t *)*function_pointer,((uint32_t)data[bits_written] << (current_bit_position & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint32_t)data[bits_written] >> (7 - current_bit_position & 0xff) & 0xff;\n    current_bit_position = current_bit_position + 1;\n    while ((num_bits_to_write = num_bits_to_write + 1, 6 < current_bit_position && (num_bits_to_write < max_num_bits))) {\n      (***(void (**)(void))(uint32_t *)*function_pointer)((uint32_t *)*function_pointer,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      current_bit_position = current_bit_position - 7;\n    }\n    bits_written = bits_written + 1;\n  }\n  if ((current_bit_position != 0) && (num_bits_to_write < max_num_bits)) {\n    (***(void (**)(void))(uint32_t *)*function_pointer)((uint32_t *)*function_pointer,(1 << (current_bit_position & 0xff)) - 1U & current_byte);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_080031ce",
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_08003106",
                "FUN_0800319e"
            ],
            "imported": false,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_with_data_0800319e",
                "param_1": "function_pointer",
                "param_2": "data_size",
                "param_3": "data_value",
                "puVar1": "function",
                "local_a": "data_value",
                "encode_data_0800307a": "encode_data"
            },
            "code": "void execute_function_with_data_0800319e(void *function_pointer, uint32_t data_size, uint16_t data_value) {\n  void (*function)(void *, uint32_t) = *(void (**)(void *, uint32_t))function_pointer;\n  if (function != NULL) {\n    uint32_t modified_data_size = data_size & 0xf | 0x90;\n    function(function_pointer, modified_data_size);\n    encode_data(&function_pointer, 2, &data_value);\n  }\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_with_data_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_value_at_offset_08008d00",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "byte_value",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_offset_08008d00(int offset, uint value) {\n  undefined byte_value;\n  code *jump_table;\n  if (value < 0x3c) {\n    byte_value = PTR_DAT_08008d14[value];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(undefined *)(offset + 0x12d) = byte_value;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "allocate_memory_block_and_set_pointer_to_it_08009190",
                "param_1": "block_size",
                "PTR_PTR_DAT_0800919c": "pointer_to_pointer",
                "allocate_memory_block_08009270": "allocate_memory_block"
            },
            "code": "void allocate_memory_block_and_set_pointer_to_it_08009190(undefined4 block_size)\n{\n  void** PTR_PTR_DAT_0800919c = *(void***)PTR_PTR_DAT_0800919c;\n  allocate_memory_block_08009270(PTR_PTR_DAT_0800919c, block_size);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_and_set_pointer_to_it_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "process_input_data_08004b82",
                "param_1": "input_data",
                "cVar1": "current_char",
                "puVar2": "current_pointer"
            },
            "code": "uint32_t process_input_data_08004b82(uint32_t **input_data)\n{\n  char current_char;\n  uint32_t *current_pointer;\n  \n  current_char = *(char *)((int)input_data + 0x3d);\n  current_pointer = input_data[0xb];\n  if ((*(short *)(input_data + 10) == 0) && (current_char == '!')) {\n    if ((current_pointer == (uint32_t *)0x4) || ((current_pointer == (uint32_t *)0x8 || (current_pointer == (uint32_t *)0xffff0000)))) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      **input_data = **input_data | 0x200;\n      input_data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      if (*(char *)((int)input_data + 0x3e) == '@') {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      input_data[0xc] = (uint32_t *)0x11;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input_data + 0x2a) == 0) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_data + 0x3e) == '@') {\n      if (input_data[0x14] == (uint32_t *)0x0) {\n        if (input_data[0x13] == (uint32_t *)0x1) {\n          (*input_data)[4] = (uint32_t)input_data[0x12] & 0xff;\n          input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 2);\n        }\n        else {\n          (*input_data)[4] = (uint32_t)((int)input_data[0x12] << 0x10) >> 0x18;\n          input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 1);\n        }\n      }\n      else if (input_data[0x14] == (uint32_t *)0x1) {\n        (*input_data)[4] = (uint32_t)input_data[0x12] & 0xff;\n        input_data[0x14] = (uint32_t *)((int)input_data[0x14] + 1);\n      }\n      else if (input_data[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input_data + 0x3d) == '\"') {\n          **input_data = **input_data | 0x100;\n        }\n        else if (*(char *)((int)input_data + 0x3d) == '!') {\n          current_pointer = input_data[9];\n          input_data[9] = (uint32_t *)((int)current_pointer + 1);\n          (*input_data)[4] = (uint32_t)*(uint8_t *)current_pointer;\n          *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      current_pointer = input_data[9];\n      input_data[9] = (uint32_t *)((int)current_pointer + 1);\n      (*input_data)[4] = (uint32_t)*(uint8_t *)current_pointer;\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_data_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_of_character_in_string_0800997e",
                "param_1": "string_start",
                "param_2": "string_length",
                "param_3": "character",
                "param_4": "param_4",
                "iVar1": "current_position",
                "iVar2": "last_occurrence"
            },
            "code": "int find_last_occurrence_of_character_in_string_0800997e(int string_start, int string_length, char character, int param_4) {\n  int last_occurrence = -1;\n  if (string_length != 0) {\n    int current_position = 0;\n    while (current_position = find_character_in_string(string_start, string_length, character, string_start, param_4), current_position != 0) {\n      string_start = current_position + 1;\n      last_occurrence = current_position;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = find_character_in_string(string_start, string_length, character, string_start, param_4);\n  return last_occurrence;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_of_character_in_string_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "initialize_if_param_is_one_and_process_data_08002dbc",
                "param_1": "param_is_one",
                "param_2": "param_value"
            },
            "code": "void initialize_if_param_is_one_and_process_data_08002dbc(int param_is_one, int param_value){\n    if (param_is_one != 1) {\n        return;\n    }\n    if (param_value == 0xffff) {\n        initialize_and_process_data_08002ce0(PTR_DAT_08002dd8);\n    }\n    return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_is_one_and_process_data_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "generate_node_08002e44",
                "param_1": "node_index",
                "param_2": "input_string",
                "param_3": "char1",
                "param_4": "char2",
                "iVar3": "substring_index",
                "iVar4": "last_slash_index",
                "puVar5": "new_node",
                "STR_CPP": "STR_CPP",
                "insert_node_into_list_080091a0": "insert_node_into_list",
                "allocate_memory_block_and_set_pointer_to_it_08009190": "allocate_and_set_pointer",
                "copy_string_08009954": "copy_string",
                "get_end_of_string_08000178": "get_end_of_string",
                "*(char *)(param_1 + 0xc4)": "*(char *)(node_index + 0xc4)",
                "*(undefined4 *)(param_1 + 200)": "*(undefined4 *)(node_index + 200)",
                "*(byte *)(param_1 + 0xc4)": "*(byte *)(node_index + 0xc4)"
            },
            "code": "void generate_node_08002e44(int node_index, int input_string, undefined char1, undefined char2) {\n  int substring_index = find_substring(input_string, STR_CPP);\n  int last_slash_index = find_last_occurrence_of_character_in_string(input_string, 0x2f);\n  if (last_slash_index == 0) {\n    last_slash_index = find_last_occurrence_of_character_in_string(input_string, 0x5c);\n  }\n  if (last_slash_index != 0) {\n    input_string = last_slash_index + 1;\n  }\n  if (substring_index == 0) {\n    char end_char = get_end_of_string(input_string);\n    *(char *)(node_index + 0xc4) = end_char + 2;\n  }\n  else {\n    *(char *)(node_index + 0xc4) = ((char)substring_index - (char)input_string) + 2;\n  }\n  insert_node_into_list(*(undefined4 *)(node_index + 200));\n  byte size = *(byte *)(node_index + 0xc4);\n  undefined *new_node = (undefined *)allocate_and_set_pointer(size + 1);\n  *(undefined **)(node_index + 200) = new_node;\n  new_node[size] = 0;\n  *new_node = char1;\n  new_node[1] = char2;\n  copy_string(new_node + 2, input_string, size - 2);\n  return;\n}",
            "called": [
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_0800997e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "generate_node_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "initialize_data_structure_0800242c",
                "param_1": "data_structure",
                "param_2": "size",
                "param_3": "value",
                "param_4": "ptr",
                "initialize_data_structure_08007648": "initialize_data_structure_08007648",
                "PTR_LAB_08002444_1_08002440": "PTR_LAB_08002444_1_08002440",
                "return": "return"
            },
            "code": "void initialize_data_structure_0800242c(void* data_structure, int size, int value, void* ptr, void* param) {\n    initialize_data_structure_0800242c_08007648(data_structure, size, value, ptr, param);\n    return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "validate_input_and_calculate_result_080058d2",
                "param_1": "input_flags",
                "param_2": "input_value",
                "puVar1": "global_values",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "DAT_08005a10": "global_flags",
                "DAT_08005a0c": "global_values"
            },
            "code": "int validate_input_and_calculate_result_080058d2(uint *input_flags, uint input_value) {\n    uint *DAT_08005a10 = DAT_08005a10;\n    uint *DAT_08005a0c = DAT_08005a0c;\n    if ((*input_flags & 2) != 0) {\n        DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffff0f) | input_flags[2];\n    }\n    if ((*input_flags & 1) != 0) {\n        uint input_type = input_flags[1];\n        if (input_type == 1) {\n            if ((DAT_08005a10[0] & 0x20000) == 0) {\n                return 1;\n            }\n        }\n        else if ((input_type != 2) && ((DAT_08005a10[0] & 2) == 0)) {\n            return 1;\n        }\n        DAT_08005a10[1] = input_type | (DAT_08005a10[1] & 0xfffffffc);\n        int start_time = get_time_08003760();\n        while (true) {\n            int current_time = get_time_08003760();\n            if (5000 < (uint)(current_time - start_time)) {\n                return 3;\n            }\n            if ((input_type == 1 && (DAT_08005a10[1] & 0xc) == 4) || (input_type == 2 && (DAT_08005a10[1] & 0xc) == 8) || (input_type != 1 && input_type != 2 && (DAT_08005a10[1] & 0xc) == 0)) {\n                break;\n            }\n        }\n    }\n    if ((input_value < (*DAT_08005a0c & 7)) && (*DAT_08005a0c = (*DAT_08005a0c & 0xfffffff8) | input_value, input_value != (*DAT_08005a0c & 7))) {\n        return 1;\n    }\n    if ((*input_flags & 4) != 0) {\n        DAT_08005a10[1] = (DAT_08005a10[1] & 0xfffff8ff) | input_flags[3];\n    }\n    if ((*input_flags & 8) != 0) {\n        DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffc7ff) | (input_flags[4] << 3);\n    }\n    uint result = calculate_result_08005840();\n    *(uint *)PTR_DAT_08005a18 = result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n    validate_input_080036d8(0xf);\n    return 0;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08003760",
                "FUN_080036d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "validate_input_and_calculate_result_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "process_input_and_return_08002c00",
                "process_input_08002b68": "process_input"
            },
            "code": "void process_input_and_return_08002c00(void)\n{\n  process_input();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "process_input_and_return_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "decode_and_store_08003f30",
                "param_1": "address",
                "param_2": "bitfield",
                "param_3": "value",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance",
                "DAT_08003f8c": "ptr_dat_08003f8c",
                "DAT_08003f90": "ptr_dat_08003f90"
            },
            "code": "void decode_and_store_08003f30(uint address, uint bitfield, uint value) {\n  uint shift_amount = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount -= 3;\n  }\n  uint mask = (1 << (shift_distance & 0xff)) - 1U;\n  uint masked_bitfield = bitfield & mask;\n  uint shifted_bitfield = masked_bitfield << (shift_amount & 0xff);\n  uint masked_value = (1 << (shift_amount & 0xff)) - 1U & value;\n  uint result = shifted_bitfield | masked_value;\n  if ((int)address < 0) {\n    *(char *)(DAT_08003f90 + (address & 0xf)) = (char)(result << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(result << 4);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_080036d8",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "decode_and_store_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "subtract_four_from_input_08007f78",
                "param_1": "input",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08007f78(int input) {\n    int result = input - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_at_index_08006b28",
                "param_1": "bit_array",
                "param_2": "index",
                "PTR_": "bit_array",
                "DAT_": "array_index"
            },
            "code": "uint get_bit_at_index_08006b28(uint PTR_[], int index) {\n    uint DAT_ = (PTR_[index >> 4] >> ((index & 0xf) & 0x1f));\n    return (DAT_ & 1);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_combination_valid_080085dc",
                "param_1": "input_value",
                "uVar1": "combined_bytes",
                "combine_bytes_08006b1c": "combine_bytes",
                "PTR_DAT_080085fc": "data_array"
            },
            "code": "bool is_combination_valid_080085dc(int input_value) {\n  uint16_t combined_bytes = combine_bytes(get_value_from_array(PTR_DAT_080085fc, (uint)*(byte *)(input_value + 0x44) * 4));\n  return (combined_bytes & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_combination_valid_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address",
                "*(byte *)(param_1 + 0x3a)": "byte1",
                "*(byte *)(param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_08006b1c(int address){\n    byte byte1 = *(byte *)(address + 0x3a);\n    byte byte2 = *(byte *)(address + 0x39);\n    return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "convert_or_call_function_08008ed6",
                "param_1": "function_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "convert_base_08008e7c": "convert_base"
            },
            "code": "void convert_or_call_function_08008ed6(uint32_t *function_ptr, uint32_t param1, uint32_t param2, uint32_t param3)\n{\n    if (param3 != 0) {\n        convert_base(function_ptr, param1, param3 & 0xff);\n        return;\n    }\n    (**(void (**)(uint32_t *, uint32_t, uint32_t, void *, uint32_t))function_ptr)(function_ptr, param1 & 0xff, 0, *(void (**)(void))(function_ptr), param4);\n    return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "convert_or_call_function_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "process_input_0800a130",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void process_input_0800a130(int *output, undefined4 input1, undefined4 input2, undefined4 input3)\n{\n  undefined *data_pointer = PTR_DAT_0800a150;\n  *(undefined4 *)PTR_DAT_0800a150 = 0;\n  int result = return_zero_08008854(input1, input2, input3, input3, input3);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_input_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08008f3c(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    bit_count++;\n    num = num >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "count_bits_set_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "send_encoded_data_with_offset_08002ef2",
                "param_1": "offset",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void send_encoded_data_with_offset_08002ef2(int offset, undefined4 param_2, undefined2 param_3, undefined4 param_4)\n{\n    send_encoded_data_08003158(offset + 0x40, param_2, param_3, param_4, param_4);\n    return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "send_encoded_data_with_offset_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_character_by_id_08007332",
                "param_1": "id",
                "param_2": "characters_list",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int find_character_by_id_08007332(int id, char *characters_list)\n{\n  while( true ) {\n    if (*(int *)(characters_list + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(characters_list + 4) == id) break;\n    characters_list = characters_list + 0xc;\n  }\n  return (int)*characters_list;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "imported": false,
            "current_name": "find_character_by_id_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "process_data_08006128",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "operation_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(data_ptr + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_ptr + 0x3d)",
                "set_flags_08005cec": "set_flags",
                "update_data_080060c4": "update_data",
                "update_data_08005d48": "update_data2",
                "update_data_08005dac": "update_data3"
            },
            "code": "int process_data_08006128(int *data_ptr, int data_size, int operation_type) {\n  if (*(char *)(data_ptr + 0xf) != '\\x01') {\n    *(char *)(data_ptr + 0xf) = 1;\n    *(char *)((int)data_ptr + 0x3d) = 2;\n    switch(operation_type) {\n      case 0:\n        set_flags(*data_ptr);\n        break;\n      case 4:\n        update_data(*data_ptr);\n        break;\n      case 8:\n        update_data2(*data_ptr);\n        break;\n      case 0xc:\n        update_data3(*data_ptr);\n    }\n    *(char *)((int)data_ptr + 0x3d) = 1;\n    *(char *)(data_ptr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "process_data_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_data_and_clear_flags_08003658",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void copy_data_and_clear_flags_08003658(void)\n{\n  int index;\n  undefined4 *data_ptr;\n  code *jump_table;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (data_ptr = (undefined4 *)PTR_DAT_08003698; data_ptr < PTR_DAT_0800369c; data_ptr++) {\n    *data_ptr = 0;\n  }\n  set_bit_and_clear_flags();\n  execute_functions();\n  jump_table = (code *)0x800368a;\n  run_game_loop();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08008f1c",
                "FUN_08009148",
                "FUN_080073ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_clear_flags_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "ptr",
                "PTR_PTR_DAT_08009b4c": "ptr_ptr",
                "PTR_DAT_08009b50": "ptr_data_1",
                "PTR_DAT_08009b54": "ptr_data_2",
                "PTR_DAT_08009b58": "ptr_data_3"
            },
            "code": "uint process_data_08009a80(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int ptr;\n  ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    clean_up(ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_08009b50) {\n    input = *(undefined4 **)(ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b54) {\n    input = *(undefined4 **)(ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b58) {\n    input = *(undefined4 **)(ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          insert_node(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_set_memory_block(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08009eac",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009a80",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08009d50(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08009b50) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b54) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b58) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_node_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_set_memory_block_08009eac(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "clear_flags_and_update_bit_080062f4",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "ptr"
            },
            "code": "uint32_t clear_flags_and_update_bit_080062f4(uint32_t **data, uint32_t flag){\n\tuint32_t *ptr;\n\tswitch(flag) {\n\t\tcase 0:\n\t\t\t(*data)[3] &= 0xfffffffd;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\t(*data)[3] &= 0xfffffffb;\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\t(*data)[3] &= 0xfffffff7;\n\t\t\tbreak;\n\t\tcase 0xc:\n\t\t\t(*data)[3] &= 0xffffffef;\n\t\t\tbreak;\n\t}\n\tupdate_bit_in_memory(*data, flag, 0);\n\tptr = *data;\n\tif (((ptr == PTR_0800638c) && ((ptr[8] & 0x1111) == 0)) && ((ptr[8] & 0x444) == 0)) {\n\t\tptr[0x11] &= 0xffff7fff;\n\t}\n\tptr = *data;\n\tif (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n\t\t*ptr &= 0xfffffffe;\n\t}\n\treturn 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "clear_flags_and_update_bit_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "code": "void infinite_loop_080073e8() {\n  while( true ) {\n    // Do nothing\n  }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": false,
            "current_name": "infinite_loop_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "buffer_ptr",
                "counter_ptr": "counter_ptr",
                "do_nothing_08004a74": "do_nothing"
            },
            "code": "int process_data_08004a76(int *data)\n{\n    char current_char;\n    uint16_t *counter_ptr;\n    char *buffer_ptr;\n\n    current_char = *(char *)((int)data + 0x3d);\n    counter_ptr = (uint16_t *)((int)data + 0x2a);\n    if (*counter_ptr != 0) {\n        buffer_ptr = (char *)data[9];\n        data[9] = (int)(buffer_ptr + 1);\n        *buffer_ptr = (char)*(int *)(*data + 0x10);\n        *counter_ptr = *counter_ptr + -1;\n        if ((*counter_ptr == 0) && (current_char == '*')) {\n            *(uint *)(*data + 4) &= 0xfffffbff;\n            data[0xc] = 0x22;\n            *(char *)((int)data + 0x3d) = '(';\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_value_0800267c",
                "param_1": "byte_array",
                "param_2": "value",
                "iVar1": "calculated_value"
            },
            "code": "void calculate_value_0800267c(byte *byte_array, int value) {\n  int calculated_value;\n  if (*byte_array < 0xc) {\n    calculated_value = (0x88 - (char)byte_array[1]) * 4;\n    if ((calculated_value - value == 0 || calculated_value < value) &&\n       (calculated_value = (600 - (char)byte_array[2]) * 4,\n       value == calculated_value || value + (600 - (char)byte_array[2]) * -4 < 0 != SBORROW4(value, calculated_value)))\n    {\n      calculated_value = value;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*byte_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_input_080047f4",
                "param_1": "input_data",
                "param_2": "param1",
                "param_3": "param3",
                "puVar2": "ptr1",
                "local_c": "counter",
                "uVar1": "ret_val",
                "PTR_DAT_080048bc": "CONST_2",
                "DAT_080048c0": "CONST_1",
                "param_4": "param3",
                "param_1[0xc]": "input_data[0xc]",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)input_data + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(input_data + 0xf)",
                "puVar2[6]": "ptr1[6]",
                "*(char *)(param_1 + 0xf)": "*(char *)(input_data + 0xf)",
                "*(undefined *)((int)param_1 + 0x3e)": "*(undefined *)((int)input_data + 0x3e)",
                "param_1[0x10]": "input_data[0x10]",
                "param_1[9]": "param2",
                "*(undefined2 *)((int)param_1 + 0x2a)": "*(uint16_t *)((int)input_data + 0x2a)",
                "param_1[0xb]": "CONST_3",
                "*(undefined2 *)(param_1 + 10)": "*(uint16_t *)(input_data + 10)",
                "param_1[0x11]": "param1",
                "(*param_1)[1]": "(*input_data)[1]"
            },
            "code": "uint32_t process_input_080047f4(uint32_t **input_data, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n    uint32_t ret_val;\n    uint32_t *ptr1;\n    int counter = 0;\n    if (*(char *)((int)input_data + 0x3d) == ' ') {\n        counter = (uint32_t)((unsigned long long)DAT_080048c0 * (unsigned long long)(*(uint32_t *)PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n        do {\n            if (counter == 0) {\n                input_data[0xc] = (uint32_t *)0x0;\n                *(undefined *)((int)input_data + 0x3d) = 0x20;\n                *(undefined *)(input_data + 0xf) = 0;\n                return 3;\n            }\n            ptr1 = *input_data;\n            counter--;\n        } while ((ptr1[6] & 2) != 0);\n        if (*(char *)(input_data + 0xf) == '\\x01') {\n            ret_val = 2;\n        }\n        else {\n            *(undefined *)(input_data + 0xf) = 1;\n            if ((*ptr1 & 1) == 0) {\n                *ptr1 = *ptr1 | 1;\n            }\n            **input_data = **input_data & 0xfffff7ff;\n            *(undefined *)((int)input_data + 0x3d) = 0x22;\n            *(undefined *)((int)input_data + 0x3e) = 0x10;\n            ret_val = 0;\n            input_data[0x10] = (uint32_t *)0x0;\n            input_data[9] = param2;\n            *(uint16_t *)((int)input_data + 0x2a) = param3;\n            input_data[0xb] = CONST_3;\n            *(uint16_t *)(input_data + 10) = *(uint16_t *)((int)input_data + 0x2a);\n            input_data[0x11] = param1;\n            **input_data = **input_data | 0x400;\n            **input_data = **input_data | 0x100;\n            *(undefined *)(input_data + 0xf) = 0;\n            (*input_data)[1] = (*input_data)[1] | 0x700;\n        }\n    }\n    else {\n        ret_val = 2;\n    }\n    return ret_val;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_input_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "calculate_value_and_check_0800376c",
                "param_1": "pointer_to_pointer",
                "param_2": "limit",
                "iVar1": "initial_value",
                "iVar3": "division_result",
                "uVar2": "result",
                "puVar5": "pointer",
                "uVar6": "value_from_pointer",
                "local_1c": "i"
            },
            "code": "uint32_t calculate_value_and_check_0800376c(uint32_t **pointer_to_pointer, uint32_t limit)\n{\n    uint32_t initial_value = get_initial_value();\n    uint32_t *pointer = *pointer_to_pointer;\n    uint32_t result = 0;\n    if ((pointer[2] & 0x100) == 0) {\n        if (((pointer[1] & 0x100) == 0) && ((pointer[0xb] & 0xf00000) == 0)) {\n            while ((**pointer_to_pointer & 2) == 0) {\n                if ((limit == 0xffffffff) || ((limit != 0) && ((get_initial_value() - initial_value) <= limit))) {\n                    pointer_to_pointer[10] = (uint32_t *)((uint32_t)pointer_to_pointer[10] | 4);\n                    *(uint8_t *)(pointer_to_pointer + 9) = 0;\n                    result = 3;\n                }\n            }\n        }\n        else {\n            uint32_t division_result = *(uint32_t *)PTR_DAT_080038c8 / calculate_value_08005bb8(2);\n            uint32_t *pointer = *pointer_to_pointer;\n            if (((pointer[4] & DAT_080038cc) == 0) && ((pointer[3] & DAT_080038cc + 0xdc000000) == 0)) {\n                if ((pointer[4] & DAT_080038d0) == 0) {\n                    if ((pointer[3] & DAT_080038d4) == 0) {\n                        division_result = 0x14;\n                    }\n                    else {\n                        division_result = 0x29;\n                    }\n                }\n                else {\n                    division_result = 0x29;\n                }\n            }\n            else if (((pointer[4] & DAT_080038d0) == 0) && ((pointer[3] & DAT_080038d0 + 0xee000000) == 0)) {\n                division_result = 0x54;\n            }\n            else if ((DAT_080038d8 & pointer[4]) == 0) {\n                if ((DAT_080038d8 & pointer[3]) == 0) {\n                    division_result = 0x54;\n                }\n                else {\n                    division_result = 0xfc;\n                }\n            }\n            else {\n                division_result = 0xfc;\n            }\n            for (uint32_t i = 0; i <= division_result && division_result - i != 0; i++) {\n                if ((limit != 0xffffffff) && ((limit == 0) || ((get_initial_value() - initial_value) > limit))) {\n                    pointer_to_pointer[10] = (uint32_t *)((uint32_t)pointer_to_pointer[10] | 4);\n                    *(uint8_t *)(pointer_to_pointer + 9) = 0;\n                    return 3;\n                }\n            }\n            **pointer_to_pointer = 0xffffffed;\n            pointer_to_pointer[10] = (uint32_t *)((uint32_t)pointer_to_pointer[10] | 0x200);\n            if (((*pointer_to_pointer)[2] & 0xe0000) == 0xe0000) {\n                if (pointer_to_pointer[3] == (uint32_t *)0x0) {\n                    pointer_to_pointer[10] = (uint32_t *)((uint32_t)pointer_to_pointer[10] & 0xfffffeff);\n                    if (((uint32_t)pointer_to_pointer[10] & 0x1000) == 0) {\n                        pointer_to_pointer[10] = (uint32_t *)((uint32_t)pointer_to_pointer[10] | 1);\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                result = 0;\n            }\n        }\n    }\n    else {\n        pointer_to_pointer[10] = (uint32_t *)((uint32_t)pointer_to_pointer[10] | 0x20);\n        *(uint8_t *)(pointer_to_pointer + 9) = 0;\n        result = 1;\n    }\n    return result;\n}\n",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_value_and_check_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "perform_operation_08003e20",
                "param_1": "operation_params",
                "iVar1": "result",
                "uVar2": "time_difference",
                "iVar3": "start_time",
                "iVar4": "is_flag_set",
                "uVar5": "start_time",
                "local_14": "start_time",
                "PTR_DAT_08003f08": "PTR_DAT_START_TIME",
                "calculate_value_08005bb8": "calculate_time_difference",
                "check_and_update_08003a20": "check_and_update",
                "get_value_from_pointer_08003760": "get_value_from_pointer"
            },
            "code": "int perform_operation_08003e20(int *operation_params) {\n  int result;\n  uint uVar1;\n  int start_time;\n  int current_time;\n  uint time_difference;\n  int is_flag_set;\n  int value_from_pointer;\n  \n  if (*(char *)(operation_params + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(operation_params + 9) = 1;\n  result = check_and_set_flags();\n  if (result == 0) {\n    operation_params[10] = operation_params[10] & 0xffffeefdU | 2;\n    uVar1 = *(uint *)PTR_DAT_08003f08;\n    time_difference = calculate_time_difference(2);\n    for (start_time = uVar1 / time_difference << 1; start_time != 0; start_time = start_time + -1) {\n    }\n    check_and_update(operation_params);\n    *(uint *)(*operation_params + 8) = *(uint *)(*operation_params + 8) | 8;\n    value_from_pointer = get_value_from_pointer();\n    while (is_flag_set = *operation_params, (*(uint *)(is_flag_set + 8) & 8) != 0) {\n      is_flag_set = get_value_from_pointer();\n      if (10 < (uint)(is_flag_set - value_from_pointer)) {\n        operation_params[10] = operation_params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(operation_params + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(is_flag_set + 8) = *(uint *)(is_flag_set + 8) | 4;\n    value_from_pointer = get_value_from_pointer();\n    while ((*(uint *)(*operation_params + 8) & 4) != 0) {\n      is_flag_set = get_value_from_pointer();\n      if (10 < (uint)(is_flag_set - value_from_pointer)) {\n        operation_params[10] = operation_params[10] & 0xffffffedU | 0x10;\n        *(undefined *)(operation_params + 9) = 0;\n        return 1;\n      }\n    }\n    operation_params[10] = operation_params[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(operation_params + 9) = 0;\n  return result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760",
                "FUN_08003a20",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "perform_operation_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "get_shifted_value_from_pointer_08005a48",
                "uVar1": "shifted_value",
                "get_value_from_pointer_08005a1c": "get_value_from_pointer",
                "PTR_DAT_08005a64": "pointer_array",
                "DAT_08005a60": "data_pointer"
            },
            "code": "uint get_shifted_value_from_pointer_08005a48(void)\n{\n  uint shifted_value = get_value_from_pointer();\n  uint index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  uint shifted_value_indexed = shifted_value >> PTR_DAT_08005a64[index];\n  return shifted_value_indexed;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08006538",
                "FUN_08005bb8",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "destination",
                "param_2": "size",
                "param_3": "source",
                "iVar2": "destination_index",
                "uVar3": "source_index",
                "bVar1": "current_byte"
            },
            "code": "void copy_and_shift_bits_080033a8(uint8_t *destination, uint32_t size, uint8_t *source) {\n    uint32_t destination_index = 0;\n    for (uint32_t source_index = 0; source_index < size; source_index += 2) {\n        uint8_t current_byte = *(source + source_index);\n        *(destination + destination_index) = current_byte;\n        *(destination + destination_index) = (*(source + source_index + 1) << 7) | current_byte;\n        destination_index++;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_and_shift_bits_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "process_input_and_return_08002c00_wrapper_08002c14"
            },
            "code": "void process_input_and_return_08002c00_wrapper_08002c14(void)\n{\n  process_input_and_return_08002c00();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "process_input_and_return_08002c00_wrapper_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "get_byte_from_data_08008d18",
                "param_1": "data",
                "param_2": "index",
                "uVar1": "byte_to_get",
                "PTR_DAT_08008d2c": "PTR_DATA"
            },
            "code": "void get_byte_from_data_08008d18(uint8_t *data, uint8_t index){\n\tuint8_t byte_to_get;\n\tif (index < 0x3c) {\n\t\tbyte_to_get = PTR_DAT_08008d2c[index];\n\t}\n\telse {\n\t\tbyte_to_get = 0xff;\n\t}\n\t*(uint8_t *)(data + 300) = byte_to_get;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "get_byte_from_data_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "data_index",
                "iVar1": "bit_count",
                "PTR_DAT_080090b0": "PTR_DATA",
                "process_and_wait_for_data_0800a18c": "process_and_wait_for_data",
                "count_bits_set_08008f3c": "count_bits_set"
            },
            "code": "void process_data_08009084(int data_index){\n    int bit_count;\n    int* data_ptr = (int*)(data_index + 8);\n    if (*data_ptr != 0) {\n        code* func_ptr = *(code**)(data_index + 12);\n        (*func_ptr)();\n        return;\n    }\n    process_and_wait_for_data();\n    bit_count = count_bits_set();\n    int* ptr = (int*)(PTR_DAT_080090b0 + bit_count * 0x14 + 0xc);\n    if (*ptr != 0) {\n        process_data_08009084(data_index);\n    }\n    return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "process_data_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "process_input_and_update_counter_0800a020",
                "param_1": "input",
                "param_2": "counter_address",
                "iVar1": "input_length",
                "bVar3": "is_input_valid",
                "uVar2": "updated_counter_value"
            },
            "code": "void process_input_and_update_counter_0800a020(undefined4 input, int counter_address) {\n  int input_length = process_input_0800a168(input, (int)*(short *)(counter_address + 0xe));\n  bool is_input_valid = input_length >= 0;\n  uint updated_counter_value;\n  if (is_input_valid) {\n    updated_counter_value = *(int *)(counter_address + 0x54) + input_length;\n  }\n  else {\n    updated_counter_value = *(ushort *)(counter_address + 0xc) & 0xffffefff;\n  }\n  if (is_input_valid) {\n    *(uint *)(counter_address + 0x54) = updated_counter_value;\n  }\n  if (!is_input_valid) {\n    *(short *)(counter_address + 0xc) = (short)updated_counter_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_update_counter_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uVar2": "var2",
                "local_1c": "local_value",
                "abStack_18": "stack_array",
                "uStack_14": "stack_value1",
                "uStack_10": "stack_value2",
                "uStack_c": "stack_value3"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result;\n  uint stack_value1;\n  uint stack_value2;\n  uint stack_value3;\n  uint var1;\n  uint var2;\n  undefined2 local_value;\n  byte stack_array[4];\n\n  stack_value3 = *(uint *)(PTR_DAT_0800589c + 8);\n  stack_value2 = *(uint *)(PTR_DAT_0800589c + 4);\n  stack_value1 = *(uint *)PTR_DAT_0800589c;\n  local_value = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  var2 = *(uint *)(DAT_080058a0 + 4);\n  var1 = DAT_080058a8;\n  if ((var2 & 0xc) == 8) {\n    if ((var2 & 0x10000) == 0) {\n      result = DAT_080058a4 * (uint)stack_array[(var2 << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_080058a8 * stack_array[(var2 << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_value - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "update_param_08007f7c",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "*(int *)(param_1 + 0x60)": "*ptr_param_1_offset",
                "set_bit_and_flags_if_space_080049e0": "set_bit_and_flags_if_space_080049e0",
                "param_1 + 4": "ptr_param_1_offset + 4"
            },
            "code": "void update_param_08007f7c(int ptr_param_1, int ptr_param_2) {\n  if (ptr_param_1 != 0) {\n    if (ptr_param_2 != 0) {\n      int* ptr_param_1_offset = (int*)(ptr_param_1 + 0x60);\n      *ptr_param_1_offset = ptr_param_2;\n      set_bit_and_flags_if_space_080049e0(ptr_param_1 + 4);\n    }\n  }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "update_param_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "find_value_in_array_08006d80",
                "param_1": "value",
                "local_46": "index",
                "local_44": "index2",
                "local_40": "input6",
                "local_3c": "input7",
                "local_38": "found_value",
                "local_34": "input1",
                "local_30": "input2",
                "local_2c": "input3",
                "local_28": "input8",
                "local_24": "unused",
                "local_20": "unused",
                "local_1c": "input5",
                "local_10": "unused",
                "fill_memory_with_value_080091c6": "set_array_value",
                "PTR_DAT_08006e60": "array",
                "PTR_DAT_08006e64": "array2",
                "validate_input_08003bd8": "validate_input",
                "find_character_index_08006c60": "find_character_index",
                "process_data_080038e4": "process_data",
                "perform_operation_08003e20": "perform_operation",
                "checkAndUpdateConfig_08003aa0": "check_and_update_config",
                "calculate_value_and_check_0800376c": "calculate_value_and_check",
                "get_value_at_offset_08003a1c": "get_value_at_offset",
                "get_offset_080038dc": "get_offset",
                "check_and_set_flags_08003de4": "check_and_set_flags",
                "clear_memory_and_flags_08003ce8": "clear_memory_and_flags"
            },
            "code": "uint16_t find_value_in_array_08006d80(uint32_t value)\n{\n  uint16_t index = 0;\n  uint32_t found_value = find_value(value, PTR_DAT_08006e60);\n  if (found_value != 0) {\n    uint32_t input1 = 0;\n    uint32_t input2 = 0;\n    uint32_t input3 = 0;\n    uint32_t input4 = 0;\n    uint32_t input5 = 0xE0000;\n    uint32_t input6 = 0;\n    uint32_t input7 = 1;\n    uint32_t input8 = 0;\n    set_PTR_DAT_08006e60_value(&PTR_DAT_08006e64, (char)value);\n    if (validate_input(&found_value, &input1, &input2, &input3, &input4, &input5, &input6, &input7, &input8) == 0) {\n      uint16_t index2 = find_character_index(&found_value);\n      if (index2 < 0x12) {\n        uint32_t result = process_data(&found_value, &index2);\n        if (result == 0) {\n          result = perform_operation(&found_value);\n          if (result == 0) {\n            result = check_and_update_config(&found_value);\n            if (result == 0) {\n              result = calculate_value_and_check(&found_value, 10);\n              if (result == 0) {\n                uint32_t value_at_offset = get_value_at_offset(&found_value);\n                if ((value_at_offset & 0x200) != 0) {\n                  index = get_offset(&found_value);\n                }\n                if (check_and_set_flags(&found_value) == 0) {\n                  if (clear_memory_and_flags(&found_value) != 0) {\n                    index = 0;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return index;\n}",
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_080038dc",
                "FUN_080091c6",
                "FUN_080038e4",
                "FUN_08003a1c",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003aa0",
                "FUN_0800376c",
                "FUN_08006c60",
                "FUN_08003bd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "find_character_index_08006c60",
                "param_1": "character",
                "param_2": "array",
                "param_3": "array_length",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "shifted_index"
            },
            "code": "uint find_character_index_08006c60(uint character, uint* array, uint array_length, uint start_index, uint end_index) {\n  int index = find_character_or_negative_one(character, array, array_length, start_index, end_index);\n  uint shifted_index = (uint)(index << 12) >> 27;\n  if (shifted_index > 15) {\n    shifted_index = 0;\n  }\n  return shifted_index;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "find_character_index_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_data_at_offset_08003306",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "data1",
                "param_4": "data2",
                "*(undefined4 *)(param_1 + 0x50)": "*(uint32_t *)(base_address + 0x50)",
                "*(undefined4 *)(param_1 + 0x20)": "*(uint32_t *)(base_address + 0x20)",
                "*(undefined4 *)(param_1 + 0x54)": "*(uint32_t *)(base_address + 0x54)",
                "*(undefined4 *)(param_1 + 0x24)": "*(uint32_t *)(base_address + 0x24)",
                "*(undefined4 *)(param_1 + 0x58)": "*(uint32_t *)(base_address + 0x58)",
                "*(undefined4 *)(param_1 + 0x28)": "*(uint32_t *)(base_address + 0x28)",
                "*(undefined4 *)(param_1 + 0x5c)": "*(uint32_t *)(base_address + 0x5c)",
                "*(undefined4 *)(param_1 + 0x2c)": "*(uint32_t *)(base_address + 0x2c)",
                "*(undefined4 *)(param_1 + 0x60)": "*(uint32_t *)(base_address + 0x60)",
                "*(undefined4 *)(param_1 + 0x30)": "*(uint32_t *)(base_address + 0x30)",
                "*(undefined4 *)(param_1 + 0x4c)": "*(uint32_t *)(base_address + 0x4c)",
                "*(undefined4 *)(param_1 + 0x1c)": "*(uint32_t *)(base_address + 0x1c)"
            },
            "code": "void set_data_at_offset_08003306(int base_address, uint8_t offset, uint32_t data1, uint32_t data2) {\n    switch(offset) {\n        case 0x50:\n            *(uint32_t *)(base_address + 0x50) = data1;\n            *(uint32_t *)(base_address + 0x20) = data2;\n            break;\n        case 0x54:\n            *(uint32_t *)(base_address + 0x54) = data1;\n            *(uint32_t *)(base_address + 0x24) = data2;\n            break;\n        case 0x58:\n            *(uint32_t *)(base_address + 0x58) = data1;\n            *(uint32_t *)(base_address + 0x28) = data2;\n            break;\n        case 0x5c:\n            *(uint32_t *)(base_address + 0x5c) = data1;\n            *(uint32_t *)(base_address + 0x2c) = data2;\n            break;\n        case 0x60:\n            *(uint32_t *)(base_address + 0x60) = data1;\n            *(uint32_t *)(base_address + 0x30) = data2;\n            break;\n        case 0x4c:\n            *(uint32_t *)(base_address + 0x4c) = data1;\n            *(uint32_t *)(base_address + 0x1c) = data2;\n            break;\n        default:\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_data_at_offset_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "update_flags_08002578",
                "set_flags_and_update_if_zero_080076e0": "set_flags_and_update_if_zero"
            },
            "code": "void update_flags_08002578();\n\nvoid update_flags_08002578()\n{\n  update_flags_08002578();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "update_flags_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_data_flag_08006932",
                "param_1": "data_ptr",
                "PTR_": "data",
                "DAT_": "flag"
            },
            "code": "int set_data_flag_08006932(int *PTR__ptr) {\n    uint32_t *PTR_ = (uint32_t *)(*PTR__ptr + 0xc);\n    *PTR_ &= 0xffffffbf;\n    char *DAT_ = (char *)((int)PTR__ptr + 0x39);\n    *DAT_ = 0x20;\n    find_and_check_PTR_();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_data_flag_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_data_080060c4",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "data_word1",
                "uVar2": "data_word2",
                "iVar3": "data_value1",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "mask4": "mask4",
                "DAT_08006124": "PTR_DAT_08006124",
                "*(uint *)(param_1 + 0x20)": "data_word1",
                "*(uint *)(param_1 + 0x4)": "data_word2",
                "*param_2": "data_value1",
                "param_2[1]": "data_value2",
                "param_2[2]": "data_value3",
                "param_2[3]": "data_value4",
                "param_2[5]": "data_value5",
                "param_2[6]": "data_value6",
                "*(uint *)(param_1 + 0x18)": "data_word3",
                "*(int *)(param_1 + 0x38)": "data_value2"
            },
            "code": "void update_data_080060c4(int data_address, int *data_values) {\n    uint32_t mask1 = 0xffffffef;\n    uint32_t mask2 = 0xfffff3ff;\n    uint32_t mask3 = 0xffffffdf;\n    uint32_t mask4 = 0xffffff7f;\n    uint32_t data_word1 = *(uint32_t *)(data_address + 0x20) & mask1;\n    uint32_t data_word2 = *(uint32_t *)(data_address + 0x4);\n    int data_value1 = *data_values;\n    int data_value2 = data_values[1];\n    int data_value3 = data_values[2];\n    int data_value4 = data_values[3];\n    int data_value5 = data_values[4];\n    int data_value6 = data_values[5];\n    data_word1 = data_word1 & mask3 | data_value3 << 4;\n    if (data_address == DAT_08006124) {\n        data_word1 = data_word1 & mask4 | data_value4 << 4;\n        data_word2 = data_word2 & mask2 | data_value5 << 2 | data_value6 << 2;\n    }\n    *(uint32_t *)(data_address + 0x4) = data_word2;\n    *(uint32_t *)(data_address + 0x18) = *(uint32_t *)(data_address + 0x18) & 0xffff8cff | data_value1 << 8;\n    *(int *)(data_address + 0x38) = data_value2;\n    *(uint32_t *)(data_address + 0x20) = data_word1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "allocate_and_set_memory_block_08009eac",
                "param_1": "process_id",
                "param_2": "memory_block_details",
                "uVar1": "memory_permissions",
                "iVar2": "allocated_memory_size",
                "local_18": "process_id_copy",
                "local_14": "memory_block_details_copy"
            },
            "code": "void allocate_and_set_memory_block_08009eac(int process_id, int *memory_block_details)\n{\n    ushort memory_permissions;\n    int allocated_memory_size;\n    int process_id_copy;\n    int *memory_block_details_copy;\n\n    if ((int)((uint)*(ushort *)(memory_block_details + 3) << 0x1e) >= 0) {\n        process_id_copy = process_id;\n        memory_block_details_copy = memory_block_details;\n        memory_permissions = check_memory_permissions(process_id, memory_block_details, &process_id_copy, &memory_block_details_copy);\n        allocated_memory_size = allocate_memory_block(process_id, process_id_copy);\n        if (allocated_memory_size != 0) {\n            *(undefined **)(process_id + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n            *memory_block_details = allocated_memory_size;\n            *(ushort *)(memory_block_details + 3) = *(ushort *)(memory_block_details + 3) | 0x80;\n            memory_block_details[4] = allocated_memory_size;\n            memory_block_details[5] = process_id_copy;\n            if ((memory_block_details_copy != (int *)0x0) &&\n                (allocated_memory_size = checkIfNegativeOneAndUpdate(process_id, (int)*(short *)((int)memory_block_details + 0xe)), allocated_memory_size != 0)) {\n                *(ushort *)(memory_block_details + 3) = *(ushort *)(memory_block_details + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(memory_block_details + 3) = memory_permissions | *(ushort *)(memory_block_details + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(memory_block_details + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(memory_block_details + 3) = *(ushort *)(memory_block_details + 3) & 0xfffc | 2;\n    }\n    *memory_block_details = (int)memory_block_details + 0x47;\n    memory_block_details[4] = (int)memory_block_details + 0x47;\n    memory_block_details[5] = 1;\n    return;\n}",
            "called": [
                "FUN_08009270",
                "FUN_0800a110",
                "FUN_08009e64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "allocate_and_set_memory_block_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "set_value_at_offset_if_param_not_zero_080072d8",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "param",
                "param_4": "value",
                "set_value_at_offset_080042e2": "set_value_at_offset"
            },
            "code": "void set_value_at_offset_if_param_not_zero_080072d8(void* data, uint16_t* offset, int param, void* value){\n  if (param == 0) {\n    set_value_at_offset(data, offset, 0, value, value);\n    return;\n  }\n  set_value_at_offset(data, offset, 1, value, value);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_if_param_not_zero_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_value_080045c0",
                "param_1": "values",
                "bVar1": "is_valid",
                "uVar2": "shifted_value",
                "puVar3": "ptr1",
                "uVar4": "result"
            },
            "code": "uint32_t calculate_value_080045c0(uint32_t **values)\n{\n    bool is_valid = false;\n    uint32_t shifted_value = 0;\n    uint32_t result = 0;\n    uint32_t *ptr1 = values[1];\n    uint32_t *ptr2 = values[2];\n    if (values == NULL) {\n        return 1;\n    }\n    if (*(char *)((int)values + 0x3d) == '\\0') {\n        *(undefined *)(values + 0xf) = 0;\n        do_nothing_080045bc();\n    }\n    *(undefined *)((int)values + 0x3d) = 0x24;\n    **values &= 0xfffffffe;\n    shifted_value = get_shifted_value_from_pointer_08005a28();\n    if (DAT_08004714 < ptr1) {\n        is_valid = shifted_value <= DAT_08004720;\n    }\n    else if (DAT_08004718 < shifted_value) {\n        is_valid = false;\n    }\n    else {\n        is_valid = true;\n    }\n    if (is_valid) {\n        return 1;\n    }\n    result = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)shifted_value >> 0x32);\n    (*values)[1] = result;\n    if (DAT_08004714 < ptr1) {\n        result = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(result * 300) >> 0x26);\n    }\n    (*values)[8] = result + 1;\n    uint32_t leading_zeroes = 0;\n    if (DAT_08004714 < ptr1) {\n        if (ptr2 == NULL) {\n            leading_zeroes = count_leading_zeroes((shifted_value - 1) / (uint32_t)((int)ptr1 * 3) + 1 & 0xfff);\n        }\n        else {\n            leading_zeroes = count_leading_zeroes((shifted_value - 1) / (uint32_t)((int)ptr1 * 0x19) + 1 & 0xfff);\n        }\n        if (leading_zeroes >> 5 == 0) {\n            if (ptr2 == NULL) {\n                result = (shifted_value - 1) / (uint32_t)((int)ptr1 * 3) + 1 & 0xfff | 0x8000;\n            }\n            else {\n                result = (shifted_value - 1) / (uint32_t)((int)ptr1 * 0x19) + 1 & 0xfff | 0xc000;\n            }\n        }\n        else {\n            result = 1;\n        }\n    }\n    else {\n        result = (shifted_value - 1) / (uint32_t)((int)ptr1 << 1) + 1 & 0xfff;\n        if (result < 4) {\n            result = 4;\n        }\n    }\n    (*values)[7] = result;\n    **values = (uint32_t)values[7] | (uint32_t)values[8];\n    (*values)[2] = (uint32_t)values[4] | (uint32_t)values[3];\n    (*values)[3] = (uint32_t)values[5] | (uint32_t)values[6];\n    **values |= 1;\n    values[0x10] = NULL;\n    *(undefined *)((int)values + 0x3d) = 0x20;\n    values[0xc] = NULL;\n    *(undefined *)((int)values + 0x3e) = 0;\n    return 0;\n}\n",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_value_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "check_value_08007e74",
                "param_1": "value",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "start_value",
                "uVar3": "increment",
                "iVar4": "result",
                "iVar5": "value_ptr",
                "iVar2": "set_result",
                "temp_result": "temp_result",
                "get_value_at_offset_0800542a": "get_value_at_offset",
                "get_value_from_pointer_08003760": "get_value_from_pointer",
                "uVar6": "param_4",
                "get_value_at_offset_08005430": "get_value_at_offset",
                "temp_value": "temp_value",
                "next_value": "next_value"
            },
            "code": "int check_value_08007e74(int value, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_value = get_value_from_pointer();\n  uint increment = 0;\n  int result = 2;\n  do {\n    int value_ptr = value + 4;\n    int set_result = check_and_set(value_ptr, param_2, param_3, param_4);\n    if (set_result == 0) {\n      result = 0;\n      int temp_result = 0;\n      while ((temp_result = get_value_at_offset(value_ptr), temp_result != 0x20 && (result == 0))) {\n        int current_value = get_value_from_pointer();\n        increment = current_value - start_value;\n        if (increment < 0x65) {\n          int temp_value = get_value_at_offset(value_ptr + 4);\n          if (temp_value != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    int next_value = get_value_at_offset(value_ptr + 4);\n  } while ((next_value == 4) && (increment < 100));\n  return result;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "check_value_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "execute_with_data_08002efe",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "data_type",
                "param_4": "arg1",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void execute_with_data_08002efe(int data_offset, int data_size, int data_type, int arg1, int arg2) {\n  execute_function_with_data(data_offset + 0x40, data_size, data_type, arg1, arg2);\n  return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "execute_with_data_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "store_data_if_max_value_reached_08002f84",
                "param_1": "data_location",
                "param_2": "value",
                "param_3": "max_value_location"
            },
            "code": "void store_data_if_max_value_reached_08002f84(undefined4 data_location, int value, undefined4 max_value_location) {\n  if (value == 0xff) {\n    *(undefined4 *)PTR_DAT_08002f90 = max_value_location;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_data_if_max_value_reached_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "process_data_with_offset_08002ddc",
                "param_1": "data_offset",
                "param_2": "num1",
                "param_3": "num2",
                "param_4": "param_4"
            },
            "code": "void process_data_with_offset_08002ddc(int data_offset, int num1, int num2, undefined4 param_4){\n  process_data_0800322c(data_offset + 0x40, num1, num2, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "process_data_with_offset_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "checkAndProcessData_08009094",
                "iVar1": "bitsSetCount",
                "count_bits_set_08008f3c": "countSetBits",
                "PTR_DAT_080090b0": "dataPointer",
                "process_data_08009084": "processData"
            },
            "code": "void checkAndProcessData_08009094(void)\n{\n    int bitsSetCount = countSetBits();\n    int* dataPtr = (int*)(PTR_DAT_080090b0 + bitsSetCount * 0x14 + 0xc);\n    if (*dataPtr != 0)\n    {\n        processData();\n    }\n    return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "checkAndProcessData_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_character",
                "pcVar2": "current_character_pointer"
            },
            "code": "char* find_character_08009f2c(char* string, char character, int length) {\n  char* current_character = string;\n  while (current_character != string + length) {\n    if (*current_character == character) {\n      return current_character;\n    }\n    current_character++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "find_character_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_value_0800a154",
                "param_1": "initial_value",
                "param_2": "data_array",
                "iVar1": "index"
            },
            "code": "int calculate_value_0800a154(int initial_value, int *data_array)\n{\n  int index = initial_value - 4;\n  if (initial_value < 0) {\n    index += data_array[index];\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_value_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_and_assign_08002580",
                "*param_1": "*output_byte",
                "bVar1": "current_count"
            },
            "code": "void increment_and_assign_08002580(byte *output_byte)\n{\n  byte current_count = *PTR_DAT_080025a4;\n  if (current_count > 11) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_count + 1;\n  *output_byte = current_count;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_count * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_and_assign_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_value_if_not_zero_08007f8e",
                "param_1": "param_index",
                "param_2": "param_value",
                "*(int *)(param_1 + 100)": "param_value_at_index_plus_100",
                "set_bit_and_flags_if_space_080049e0": "set_bit_and_flags_if_space_080049e0",
                "param_1 + 4": "index_plus_4"
            },
            "code": "void set_param_value_if_not_zero_08007f8e(int param_index, int param_value)\n{\n  if (param_index != 0) {\n    if (param_value != 0) {\n      *(int *)(param_index + 100) = param_value;\n      set_bit_and_flags_if_space_080049e0(param_index + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_value_if_not_zero_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_08006b3e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "uint": "unsigned int",
                "*(uint *)": "*element",
                "bit_mask": "bit_mask"
            },
            "code": "void set_bit_08006b3e(uint bit_position, int *array) {\n    uint index = (bit_position << 0x18) >> 0x1c;\n    uint *element = (uint *)(array + index * 4);\n    uint bit_mask = 1 << (bit_position & 0xf);\n    *element |= bit_mask;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "updateBitInMemory_08006262",
                "param_1": "memoryAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue",
                "PTR_": "memoryPointer",
                "DAT_": "bitMask"
            },
            "code": "void updateBitInMemory_08006262(int memoryAddress, uint bitPosition, int bitValue) {\n    uint* PTR_ = (uint*)(memoryAddress + 0x20);\n    uint DAT_ = ~(1 << (bitPosition & 0xff));\n    *PTR_ = (*PTR_ & DAT_) | (bitValue << (bitPosition & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_080063c0",
                "FUN_08006390"
            ],
            "imported": false,
            "current_name": "updateBitInMemory_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "set_flags_based_on_input_and_return_08007110",
                "set_flags_based_on_input_080074e0": "set_flags_based_on_input"
            },
            "code": "void set_flags_based_on_input_and_return_08007110(void)\n{\n  set_flags_based_on_input();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_and_return_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_param_08007594",
                "param_1": "param",
                "DAT_080075d0": "unknown_timer_instance",
                "DAT_080075d4": "unknown_timer_instance_2",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "process_data"
            },
            "code": "int check_param_08007594(uint param){\n\tint result = 0;\n\tif (param == 0xffffffff) {\n\t\tresult = 0;\n\t}\n\telse if (param == DAT_080075d0) {\n\t\tresult = 1;\n\t}\n\telse if (DAT_080075d0 < param) {\n\t\tif (param == DAT_080075d4) {\n\t\t\tresult = 1;\n\t\t}\n\t\telse if (param == DAT_080075d4 + 0x12400) {\n\t\t\tresult = 2;\n\t\t}\n\t}\n\telse if (param == 0x40000000) {\n\t\tresult = 1;\n\t}\n\tPTR_s_TIM__Unknown_timer_instance_080075d8(PTR_s_TIM__Unknown_timer_instance_080075d8);\n\treturn result;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_param_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_clear_flags_080073ec",
                "puVar1": "ptr"
            },
            "code": "void set_bit_and_clear_flags_080073ec(void)\n{\n    uint32_t *ptr = DAT_0800742c;\n    *ptr |= 1;\n    ptr[1] &= DAT_08007430;\n    *ptr &= 0xfef6ffff;\n    *ptr &= 0xfffbffff;\n    ptr[1] &= 0xff80ffff;\n    ptr[2] = 0x9f0000;\n    *(uint32_t *)(DAT_08007434 + 8) = 0x8000000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_flags_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "range_start",
                "param_4": "range_end",
                "param_5": "new_range_start",
                "uint": "unsigned_integer",
                "return": "return",
                "value_in_range": "new_value",
                "*": "",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int calculate_new_value_08008ef4(int start_value, int end_value, int range_start, int range_end, int new_range_start) {\n    int range_size = range_end - range_start;\n    int new_range_size = end_value - start_value;\n    int value_in_range = start_value + (new_range_size * (new_range_start - range_start)) / range_size;\n    return value_in_range;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "send_encoded_data_if_not_empty_08002df6",
                "param_1": "data_ptr",
                "puVar1": "data",
                "*(byte *)(param_1 + 0xc4)": "*data_length_ptr",
                "*(undefined **)(param_1 + 200)": "*data",
                "puVar1[1]": "data[1]",
                "*(byte *)(param_1 + 0xc4) - 2": "data_size",
                "puVar1 + 2": "data + offset"
            },
            "code": "void send_encoded_data_if_not_empty_08002df6(int data_ptr)\n{\n  byte* data_length_ptr = (byte*)(data_ptr + 0xc4);\n  if (*data_length_ptr == 0) {\n    return;\n  }\n  undefined* data = *(undefined**)(data_ptr + 200);\n  int data_size = *data_length_ptr - 2;\n  int offset = 2;\n  encode_and_send_data_080031ce(data_ptr + 0x40, data, data[1], data_size, data + offset);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "send_encoded_data_if_not_empty_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "process_data_08007118",
                "param_1": "value",
                "param_2": "divisor",
                "param_3": "offset",
                "param_4": "character",
                "param_5": "flag",
                "local_74": "byte",
                "local_70": "dword",
                "local_6c": "word",
                "local_68": "value",
                "local_64": "byte",
                "local_60": "dword",
                "local_5c": "word",
                "local_58": "data_pointer",
                "local_54": "quotient",
                "local_50": "dword",
                "local_4c": "index",
                "local_48": "byte",
                "local_44": "dword",
                "local_1b": "byte",
                "fill_memory_with_value_080091c6": "fill_memory_with_value",
                "PTR_DAT_080071dc": "data_array",
                "PTR_DAT_080071e0": "data_pointer",
                "check_and_update_memory_08006092": "check_and_update_memory",
                "find_character_position_08006c7c": "find_character_position",
                "process_clock_source_080075dc": "process_clock_source",
                "update_data_08006186": "update_data",
                "find_character_or_negative_one_08007376": "find_character_or_negative_one",
                "set_bit_in_memory_08006390": "set_bit_in_memory",
                "set_bit_and_update_values_0800643c": "set_bit_and_update_values"
            },
            "code": "void process_data_08007118(uint8_t value, uint32_t divisor, int offset, uint8_t character, char flag)\\n\\\n    {\\n\\\n        uint32_t clock_value = process_clock_source();\\n\\\n        int position = find_value_in_array(value, PTR_DAT_080071dc);\\n\\\n        if (position != 0)\\n\\\n        {\\n\\\n            int quotient = clock_value / divisor - 1;\\n\\\n            int index = offset + -1;\\n\\\n            uint8_t byte = 0;\\n\\\n            uint32_t dword = 0;\\n\\\n            uint16_t word = 0;\\n\\\n            if (flag == 1)\\n\\\n            {\\n\\\n                *PTR_DAT_080071e0 = (char)value;\\n\\\n                int result = check_and_update_memory(PTR_DAT_080071e0);\\n\\\n                if (result != 0)\\n\\\n                {\\n\\\n                    return;\\n\\\n                }\\n\\\n            }\\n\\\n            int char_position = find_character_position(value);\\n\\\n            if ((((char_position == 0) || (char_position == 4)) || (char_position == 8)) || ((char_position == 0xc || (char_position == 0x18))))\\n\\\n            {\\n\\\n                byte = 0x60;\\n\\\n                dword = 0;\\n\\\n                word = 0;\\n\\\n                uint32_t value = PTR_DAT_080071e0;\\n\\\n                byte = update_data(value, byte, char_position);\\n\\\n                if (byte == 0)\\n\\\n                {\\n\\\n                    uint32_t result = find_character_or_negative_one(value, PTR_DAT_080071dc);\\n\\\n                    if ((result & 0x100000) == 0)\\n\\\n                    {\\n\\\n                        set_bit_in_memory(value, char_position);\\n\\\n                    }\\n\\\n                    else\\n\\\n                    {\\n\\\n                        set_bit_and_update_values(value, char_position);\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        return;\\n\\\n    }",
            "called": [
                "FUN_08007376",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007320",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_080075dc",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "process_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "process_data_08009fe8",
                "param_1": "data_input",
                "puVar1": "pointer",
                "uVar2": "return_value",
                "piVar3": "function_pointers",
                "iVar4": "result",
                "pcVar5": "function_pointer",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "pointer_to_pointer_dat",
                "PTR_PTR_DAT_08009ff4": "pointer_to_pointer_dat_08009ff4",
                "PTR_DAT_0800a018": "pointer_dat_0800a018",
                "thunk_return_one_0800887c": "thunk_function",
                "set_ptr_dat_to_22_0800886c": "set_pointer_dat_to_22_0800886c"
            },
            "code": "int process_data_08009fe8(uint data_input) {\n  int *function_pointers = *(int **)PTR_PTR_DAT_08009ff4;\n  if (data_input > 31) {\n    *function_pointers = 22;\n    return -1;\n  }\n  int function_pointer = function_pointers[17];\n  if ((function_pointer != 0) && (*(code **)(function_pointer + data_input * 4) != (code *)0)) {\n    if (*(code **)(function_pointer + data_input * 4) != (code *)1) {\n      if (*(code **)(function_pointer + data_input * 4) == (code *)-1) {\n        *function_pointers = 22;\n        return 1;\n      }\n      *(undefined4 *)(function_pointer + data_input * 4) = 0;\n      (*(code **)(function_pointer + data_input * 4))(data_input);\n    }\n    return 0;\n  }\n  undefined *pointer_to_pointer_dat = PTR_PTR_DAT_08009ff4;\n  int return_value = thunk_return_one_0800887c(function_pointers);\n  undefined *pointer_dat = PTR_DAT_0800a018;\n  *(undefined4 *)PTR_DAT_0800a018 = 0;\n  int result = set_ptr_dat_to_22_0800886c(return_value,data_input,data_input,0,pointer_to_pointer_dat,unaff_r4,unaff_r5,in_lr);\n  if ((result == -1) && (*(int *)pointer_dat != 0)) {\n    *function_pointers = *(int *)pointer_dat;\n  }\n  return result;\n}",
            "called": [
                "thunk_FUN_0800887c",
                "FUN_0800886c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "process_data_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_and_set_values_if_param1_is_1_and_param2_is_0xffff_08002c1e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_if_param1_is_1_and_param2_is_0xffff_08002948": "initialize_values"
            },
            "code": "void initialize_and_set_values_if_param1_is_1_and_param2_is_0xffff_08002c1e(int param1, int param2, int param3, int param4)\n{\n  initialize_values(param1, param2, param3, param4, param4);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_set_values_if_param1_is_1_and_param2_is_0xffff_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "extract_data_08005a68",
                "param_1": "output_data",
                "param_2": "input_data",
                "iVar1": "data_segment_address",
                "*param_1": "*output_data",
                "DAT_08005a9c": "data_segment_start_address",
                "*(uint *)(DAT_08005a9c + 4)": "*(uint32_t *)(data_segment_address + 4)",
                "*(uint *)(iVar1 + 4) & 3": "*(uint32_t *)(data_segment_address + 4) & 3",
                "*(uint *)(iVar1 + 4) & 0xf0": "*(uint32_t *)(data_segment_address + 4) & 0xf0",
                "*(uint *)(iVar1 + 4) & 0x700": "*(uint32_t *)(data_segment_address + 4) & 0x700",
                "*(uint *)(iVar1 + 4) >> 3 & 0x700": "*(uint32_t *)(data_segment_address + 4) >> 3 & 0x700",
                "*param_2": "*input_data",
                "*DAT_08005aa0": "*input_data_address"
            },
            "code": "void extract_data_08005a68(uint32_t *output_data, uint32_t *input_data)\n{\n    uint32_t data_segment_address = DAT_08005a9c;\n    output_data[0] = 0xf;\n    output_data[1] = *(uint *)(DAT_08005a9c + 4) & 3;\n    output_data[2] = *(uint *)(DAT_08005a9c + 4) & 0xf0;\n    output_data[3] = *(uint *)(DAT_08005a9c + 4) & 0x700;\n    output_data[4] = *(uint *)(DAT_08005a9c + 4) >> 3 & 0x700;\n    *input_data = *DAT_08005aa0 & 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "extract_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_if_required_08008f78",
                "param_1": "status",
                "param_2": "value",
                "puVar1": "data_pointer",
                "PTR_DAT_08009018": "data_array_pointer",
                "PTR_LAB_08008f50_1_08009020": "label_pointer",
                "PTR_DAT_0800901c": "data_array_pointer_2"
            },
            "code": "void initialize_data_if_required_08008f78(int status, int value, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_pointer;\n  data_pointer = PTR_DAT_08009018;\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_pointer + 0xc) = 0;\n    data_pointer[0x14] = 7;\n    *(undefined4 *)(data_pointer + 0x20) = 0;\n    data_pointer[0x28] = 8;\n    *(undefined4 *)(data_pointer + 0x34) = 0;\n    data_pointer[0x3c] = 9;\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    data_pointer[0x50] = 10;\n    *(undefined4 *)(data_pointer + 0x5c) = 0;\n    data_pointer[100] = 0x17;\n    *(undefined4 *)(data_pointer + 0x70) = 0;\n    data_pointer[0x78] = 0x17;\n    *(undefined4 *)(data_pointer + 0x84) = 0;\n    data_pointer[0x8c] = 0x17;\n    *(undefined4 *)(data_pointer + 0x98) = 0;\n    data_pointer[0xa0] = 0x17;\n    *(undefined4 *)(data_pointer + 0xac) = 0;\n    data_pointer[0xb4] = 0x17;\n    *(undefined4 *)(data_pointer + 0xc0) = 0;\n    data_pointer[200] = 0x28;\n    *(undefined4 *)(data_pointer + 0xd4) = 0;\n    data_pointer[0xdc] = 0x28;\n    *(undefined4 *)(data_pointer + 0xe8) = 0;\n    data_pointer[0xf0] = 0x28;\n    *(undefined4 *)(data_pointer + 0xfc) = 0;\n    data_pointer[0x104] = 0x28;\n    *(undefined4 *)(data_pointer + 0x110) = 0;\n    data_pointer[0x118] = 0x28;\n    *(undefined4 *)(data_pointer + 0x124) = 0;\n    data_pointer[300] = 0x28;\n    *(undefined4 *)(data_pointer + 0x138) = 0;\n    get_result_and_swap_params(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, data_pointer, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_required_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_character_data_08008d30",
                "param_1": "character_data",
                "param_2": "character_type",
                "param_3": "offset",
                "param_4": "value",
                "uVar1": "character_id_1",
                "*(undefined *)((int)param_1 + 0x12d)": "character_id_1",
                "*(undefined *)(param_1 + 0x4b)": "character_id_2"
            },
            "code": "undefined4 *initialize_character_data_08008d30(undefined4 *character_data, undefined4 character_type, undefined4 offset, undefined4 value) {\n  undefined character_id_1;\n  undefined character_id_2;\n  character_data[1] = 0;\n  character_data[2] = 1000;\n  *character_data = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (character_data == (undefined4 *)PTR_DAT_08008d80) {\n    set_value_at_offset_08008d00(character_data, 0, value, PTR_DAT_08008d80, offset);\n    get_byte_from_data_08008d18(character_data, 1);\n  }\n  else {\n    character_id_1 = get_character_id_0800734a(character_type, PTR_DAT_08008d84);\n    *(undefined *)((int)character_data + 0x12d) = character_id_1;\n    character_id_2 = get_character_id_0800734a(character_type, PTR_DAT_08008d88);\n    *(undefined *)(character_data + 0x4b) = character_id_2;\n  }\n  initialize_data_structures_08008c20(character_data);\n  return character_data;\n}",
            "called": [
                "FUN_08008d18",
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_character_data_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "save_parameter_to_pointer_08002f94",
                "param_1": "pointer",
                "param_2": "unused",
                "param_3": "parameter",
                "PTR_DAT_08002f9c": "pointer"
            },
            "code": "void save_parameter_to_pointer_08002f94(void* PTR_DAT_08002f9c, int parameter) {\n  *(int *)PTR_DAT_08002f9c = parameter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "save_parameter_to_pointer_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "get_character_id_0800734a",
                "param_1": "character_id",
                "uVar1": "found_character_id",
                "find_character_by_id_08007332": "find_character_by_id"
            },
            "code": "int get_character_id_0800734a(int character_id) {\n    int found_character_id;\n    if (character_id != 0) {\n        found_character_id = find_character_by_id();\n        return found_character_id;\n    }\n    return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "get_character_id_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "analyze_data_08000aec",
                "bVar1": "is_valid_char",
                "iVar2": "char_index",
                "uVar3": "i",
                "PTR_DAT_08000bc0": "status",
                "PTR_DAT_08000bc4": "flag",
                "clear_memory_080005e0": "clear_memory",
                "PTR_DAT_08000bc8": "data_array_1",
                "PTR_DAT_08000bcc": "data_array_2",
                "PTR_DAT_08000bd0": "data_array_3",
                "PTR_DAT_08000bd4": "input_data",
                "find_char_index_080036ac": "find_char_index",
                "FUNC_080005f8": "process_data",
                "PTR_DAT_08000bd8": "output_data",
                "PTR_DAT_08000bdc": "var_1",
                "PTR_DAT_08000be0": "var_2",
                "PTR_DAT_08000be4": "var_3"
            },
            "code": "void analyze_data_08000aec(void)\\n{\\n  bool is_valid_char;\\n  int char_index;\\n  uint i;\\n\\n  *PTR_DAT_08000bc0 = 1;\\n  if (*PTR_DAT_08000bc4 != \"\\0\") {\\n    clear_memory_080005e0();\\n  }\\n  for (i = 0; i < 5; i++) {\\n    PTR_DAT_08000bc8[i] = 0;\\n    PTR_DAT_08000bcc[i] = 0;\\n    PTR_DAT_08000bd0[i] = 0;\\n  }\\n  for (i = 0; i < 0x3c; i++) {\\n    if ((i - 0x2e & 0xff) < 0xe) {\\n      if (i < 0x3c) {\\n        char_index = (int)(char)PTR_DAT_08000bd4[i];\\n      }\\n      else {\\n        char_index = -1;\\n      }\\n      char_index = find_char_index(char_index);\\n      if (char_index == 0) {\\n        is_valid_char = false;\\n      }\\n      else {\\n        if (i < 0x3c) {\\n          char_index = (int)(char)PTR_DAT_08000bd4[i];\\n        }\\n        else {\\n          char_index = -1;\\n        }\\n        char_index = find_char_index(char_index);\\n        if (char_index == 1) {\\n          is_valid_char = false;\\n        }\\n        else {\\n          is_valid_char = true;\\n        }\\n      }\\n    }\\n    else {\\n      is_valid_char = false;\\n    }\\n    if (is_valid_char) {\\n      process_data(i, 2);\\n    }\\n    else {\\n      if (i < 0x3c) {\\n        if (((PTR_DAT_08000bd4[i] != -1) && (char_index = find_char_index(), char_index != 0)) &&\\n           (char_index = find_char_index((int)(char)PTR_DAT_08000bd4[i]), char_index != 1)) {\\n          is_valid_char = true;\\n        }\\n      }\\n      if (is_valid_char) {\\n        process_data(i, 1);\\n      }\\n    }\\n    PTR_DAT_08000bd8[i] = 0xff;\\n  }\\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\\n  *PTR_DAT_08000be0 = 0;\\n  *PTR_DAT_08000be4 = 0;\\n  *PTR_DAT_08000bc0 = 0;\\n  return;\\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "analyze_data_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "convert_or_call_new_function_08008eec",
                "convert_or_call_function_08008ed6": "convert_or_call_function_08008ed6"
            },
            "code": "void convert_or_call_new_function_08008eec(void)\n{\n  convert_or_call_function_08008ed6();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "convert_or_call_new_function_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "check_input_080068d6",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "input_value",
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[46]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 12)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 20)"
            },
            "code": "int check_input_080068d6(int *input_array, int array_size, int input_value)\n{\n    if (input_array[10] != ' ')\n    {\n        return 2;\n    }\n    if (array_size == 0)\n    {\n        return 1;\n    }\n    if (input_value == 0)\n    {\n        return 1;\n    }\n    if (input_array[14] != '\\x01')\n    {\n        input_array[10] = array_size;\n        input_array[11] = (short)input_value;\n        input_array[14] = 0;\n        input_array[15] = 0;\n        input_array[58] = 0x22;\n        *(uint *)(*input_array + 12) = *(uint *)(*input_array + 12) | 0x100;\n        *(uint *)(*input_array + 20) = *(uint *)(*input_array + 20) | 1;\n        *(uint *)(*input_array + 12) = *(uint *)(*input_array + 12) | 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "check_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "encode_string_to_buffer_080032a2",
                "param_1": "buffer",
                "param_2": "string",
                "param_3": "buffer_size",
                "param_4": "encoding_type",
                "uVar1": "end_of_string",
                "get_end_of_string_08000178": "get_end_of_string",
                "encode_data_to_buffer_0800325a": "encode_data_to_buffer"
            },
            "code": "void encode_string_to_buffer_080032a2(void* buffer, int buffer_size, void* string, int string_length, void* encoding_type)\n{\n    void* end_of_string = get_end_of_string(string);\n    encode_data_to_buffer(buffer, encoding_type, buffer_size, string, end_of_string);\n    return;\n}",
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "encode_string_to_buffer_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "run_game_08001b48",
                "puVar1": "root_node",
                "generate_node_08002e44": "generate_node",
                "check_and_assign_value_to_pointer_08002f2c": "check_and_assign_value_to_pointer",
                "PTR_DAT_08001bc0": "root_node",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "game_data",
                "PTR_FUN_08000214_1_08001bc8": "check_battery",
                "PTR_LAB_080002ec_1_08001bcc": "handle_error",
                "DAT_08001bd0": "data_1",
                "PTR_LAB_08000c18_1_08001bd4": "handle_interrupt",
                "DAT_08001bd8": "data_2",
                "PTR_LAB_080001a8_1_08001bdc": "handle_input",
                "PTR_FUNC_08001cd0_1_08001be0": "process_data",
                "DAT_08001be4": "max_data",
                "process_game_state_and_data_08003048": "process_game_state_and_data",
                "analyze_data_08000aec": "analyze_data",
                "handle_interrupt_0800018c": "handle_interrupt"
            },
            "code": "void run_game_08001b48(void)\n{\n  Node* PTR_DAT_08001bc0 = PTR_DAT_08001bc0;\n  generate_node(PTR_DAT_08001bc0, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  check_and_assign_value_to_pointer(PTR_DAT_08001bc0, 0xe0, PTR_PTR_decode_and_process_08000214_1_08001bc8_08000214_1_08001bc8);\n  check_and_assign_value_to_pointer(PTR_DAT_08001bc0, 0x90, PTR_PTR_LAB_080002ec_1_08001bcc_080002ec_1_08001bcc);\n  check_and_assign_value_to_pointer(PTR_DAT_08001bc0, 0xc0, DAT_08001bd0);\n  check_and_assign_value_to_pointer(PTR_DAT_08001bc0, 0xd0, PTR_PTR_LAB_08000c18_1_08001bd4_08000c18_1_08001bd4);\n  check_and_assign_value_to_pointer(PTR_DAT_08001bc0, 0xf4, DAT_08001bd8);\n  check_and_assign_value_to_pointer(PTR_DAT_08001bc0, 0xf5, PTR_PTR_LAB_080001a8_1_08001bdc_080001a8_1_08001bdc);\n  save_parameter_to_pointer(PTR_DAT_08001bc0, 0xf0, PTR_PTR_FUNC_08001cd0_1_08001be0_08001cd0_1_08001be0);\n  store_data_if_max_value_reached(PTR_DAT_08001bc0, 0xff, DAT_08001be4);\n  process_game_state_and_data(PTR_DAT_08001bc0, 0xe100);\n  analyze_data();\n  PTR_LAB_08000c18_1_08001bd4(0);\n  return;\n}",
            "called": [
                "FUN_08000aec",
                "FUN_08002f94",
                "FUN_08002f2c",
                "FUN_08002f84",
                "FUN_0800018c",
                "FUN_08003048",
                "FUN_08002e44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "run_game_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_bit_in_memory_08006390",
                "param_1": "memory",
                "param_2": "bit_position",
                "puVar1": "memory_pointer",
                "updateBitInMemory_08006262": "update_bit_in_memory",
                "DAT_080063bc": "memory_constant"
            },
            "code": "int set_bit_in_memory_08006390(uint **memory, uint bit_position)\n{\n  uint *memory_pointer;\n  update_bit_in_memory(*memory, bit_position, 1);\n  memory_pointer = *memory;\n  if (memory_pointer == DAT_080063bc) {\n    memory_pointer[17] = memory_pointer[17] | 0x8000;\n  }\n  **memory = **memory | 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_in_memory_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "find_and_check_data_08008730",
                "uVar1": "index",
                "iVar2": "data_offset",
                "iVar3": "data_ptr",
                "PTR_DAT_08008770": "DATA_PTR_ARRAY",
                "PTR_DAT_08008774": "DATA_FUNC_ARRAY",
                "PTR_DAT_08008778": "DATA_TYPE_ARRAY",
                "check_data_0800688e": "check_data",
                "byte": "data_type_index",
                "ushort": "data_size_offset"
            },
            "code": "void find_and_check_data_08008730(void)\n{\n  uint index = find_index();\n  int data_ptr = *(int *)(PTR_DAT_08008770 + index * 4);\n  if ((index < 5) && (data_ptr != -1)) {\n    int data_offset = (**(code **)(PTR_DAT_08008774 + index * 4))(data_ptr);\n    check_data(get_data_type(data_ptr), get_data_size(data_ptr) + get_data_offset(data_ptr),1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "find_and_check_data_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "set_flags_and_return_08005df4",
                "param_1": "input",
                "puVar1": "input_ptr"
            },
            "code": "void set_flags_and_return_08005df4(uint **input){\n  uint *input_ptr;\n  *(undefined *)((int)input + 0x3d) = 2;\n  input_ptr = *input;\n  if ((input_ptr[8] & 0x1111) == 0) {\n    if ((input_ptr[8] & 0x444) == 0) {\n      *input_ptr = *input_ptr & 0xfffffffe;\n    }\n  }\n  set_flags_based_on_input_and_return_08007710(input);\n  *(undefined *)((int)input + 0x3d) = 0;\n  *(undefined *)(input + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointers_start",
                "iVar2": "function_pointers_length",
                "iVar3": "i"
            },
            "code": "void execute_functions_08009148(void)\n{\n  undefined *function_pointers_start = PTR_DAT_08009180;\n  int function_pointers_length = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < function_pointers_length / sizeof(int); i++) {\n    (**(code **)(function_pointers_start + i * sizeof(int)))();\n  }\n  do_nothing_0800a424();\n  function_pointers_start = PTR_DAT_08009188;\n  function_pointers_length = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < function_pointers_length / sizeof(int); i++) {\n    (**(code **)(function_pointers_start + i * sizeof(int)))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_value_from_pointer_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = get_value_from_pointer_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_value_from_pointer_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = get_value_from_pointer_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = get_value_from_pointer_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = get_value_from_pointer_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = get_value_from_pointer_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = get_value_from_pointer_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      count_down_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = get_value_from_pointer_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_value_from_pointer_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_value_from_pointer_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = get_value_from_pointer_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = get_value_from_pointer_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = get_value_from_pointer_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_value_from_pointer_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_value_from_pointer_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = get_value_from_pointer_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_value_from_pointer_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int return_zero_08008854(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "read_and_modify_080064cc",
                "param_1": "input_array",
                "pbVar2": "char_ptr",
                "sVar1": "short_value",
                "ptr1": "input_array",
                "ptr2": "ptr_to_array",
                "value": "value",
                "ptr3": "ptr_to_short"
            },
            "code": "int read_and_modify_080064cc(int *input_array){\n  int *ptr1 = input_array;\n  char first_char = *(char *)(ptr1 + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int *ptr2 = (int *)*ptr1;\n  int value = 0;\n  if (ptr1[2] == 0x1000) {\n    value = *(unsigned short *)ptr1[8] & 0x1ff;\n    if (ptr1[4] == 0) {\n      ptr1[8] = ptr1[8] + 2;\n    }\n    else {\n      ptr1[8] = ptr1[8] + 1;\n    }\n  }\n  else {\n    char *char_ptr = (char *)ptr1[8];\n    ptr1[8] = (int)(char_ptr + 1);\n    value = (int)*char_ptr;\n  }\n  short *ptr3 = (short *)(ptr1 + 0x26);\n  *ptr3 = *ptr3 - 1;\n  if (*ptr3 == 0) {\n    ptr2[3] = ptr2[3] & 0xffffff7f;\n    ptr2[3] = ptr2[3] | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "read_and_modify_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "process_input_string_08004d6c",
                "param_1": "input",
                "puVar1": "input_ptr",
                "input_char": "input_quote",
                "input_len": "input_len",
                "input_flag": "input_flag"
            },
            "code": "int process_input_string_08004d6c(uint **input)\n{\n  uint *input_ptr;\n  char input_char;\n  int input_len = *(ushort *)((int)input + 0x2a);\n  char input_quote = *(char *)((int)input + 0x3d);\n  uint *input_flag = param_1[0xb];\n  \n  if (input_quote == '\"') {\n    if (input_len < 4) {\n      if (input_len == 2) {\n        if (input_flag == (uint *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x800;\n        }\n        (*input)[1] = (*input)[1] & 0xfffffbff;\n      }\n      else {\n        if (input_flag == (uint *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n        }\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input_ptr = input[9];\n        input[9] = (uint *)((int)input_ptr + 1);\n        *(char *)input_ptr = (char)(*input)[4];\n        input_len = input_len - 1;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        input[0xc] = (uint *)0x0;\n        input_char = *(char *)((int)input + 0x3e);\n        if (input_char == '@') {\n          *(undefined *)((int)input + 0x3e) = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *(undefined *)((int)input + 0x3e) = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      input_ptr = input[9];\n      input[9] = (uint *)((int)input_ptr + 1);\n      *(char *)input_ptr = (char)(*input)[4];\n      input_len = input_len - 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_string_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "process_input_08004ac2",
                "param_1": "input_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "data",
                "uVar2": "flag"
            },
            "code": "int process_input_08004ac2(int *input_data, int param2, int param3, int param4)\n{\n    int flag = *(int *)(*input_data + 0x18);\n    int data;\n    if ((flag & 0x80) == 0)\n    {\n        data = *(int *)(input_data + 3);\n    }\n    else\n    {\n        data = *(int *)(input_data + 6);\n    }\n    process_input_08004ac2_08007fa0(input_data, (flag & 4) == 0, data, flag, param4);\n    return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "returnOne_08008850"
            },
            "code": "int returnOne_08008850() {\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "returnOne_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "update_flag_08006ca8",
                "param_1": "flag",
                "param_2": "param",
                "puVar1": "flag_ptr",
                "iVar2": "var1",
                "uVar3": "val2",
                "uVar4": "bit_mask",
                "uVar5": "val1",
                "local_18": "bit_mask",
                "local_14": "val3",
                "local_10": "val4"
            },
            "code": "void update_flag_08006ca8(uint *flag, undefined4 param){\n    undefined *flag_ptr;\n    int var1;\n    undefined4 var2;\n    uint val1;\n    uint val2;\n    uint bit_mask;\n    undefined4 val3;\n    undefined4 val4;\n    undefined4 val5;\n    \n    var1 = DAT_08006d20;\n    val1 = *flag;\n    if (val1 == DAT_08006d14) {\n        bit_mask = *(uint *)(DAT_08006d20 + 0x18) | 0x200;\n        *(uint *)(DAT_08006d20 + 0x18) = bit_mask;\n        val1 = *(uint *)(var1 + 0x18) & 0x200;\n    } else {\n        bit_mask = DAT_08006d18;\n        if (val1 == DAT_08006d18) {\n            bit_mask = *(uint *)(DAT_08006d20 + 0x18) | 0x400;\n            *(uint *)(DAT_08006d20 + 0x18) = bit_mask;\n            val1 = *(uint *)(var1 + 0x18) & 0x400;\n        }\n    }\n    flag_ptr = PTR_DAT_08006d1c;\n    val2 = set_flag((uint)((int)(char)*PTR_DAT_08006d1c << 0x18) >> 0x1c, param, bit_mask, val1);\n    bit_mask = 1 << ((byte)*flag_ptr & 0xf) & 0xffff;\n    val3 = 3;\n    val4 = 0;\n    set_bits(val2, &bit_mask);\n    return;\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "update_flag_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_value_at_index_08002fc2",
                "param_1": "array_base",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_08002fc2(int array_base, int index, int value) {\n  int offset = (index + 0x42) * sizeof(int);\n  int* target_address = (int*)(array_base + offset);\n  *target_address = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_shift_amount_08008afa",
                "param_1": "input_address",
                "PTR_": "ptr_",
                "DAT_": "value_at_"
            },
            "code": "ushort calculate_shift_amount_08008afa(int input_address)\n{\n    short* PTR_input_address_134 = (short*)(input_address + 0x134);\n    short* PTR_input_address_136 = (short*)(input_address + 0x136);\n    short DAT_134 = *PTR_input_address_134;\n    short DAT_136 = *PTR_input_address_136;\n    short result = (DAT_134 + 0x40) - DAT_136;\n    ushort final_result = result & 0x3f;\n    return final_result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_shift_amount_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "process_game_state_and_data_08003048",
                "param_1": "data",
                "param_2": "game_state",
                "param_3": "game_state_size",
                "param_4": "unknown",
                "puVar1": "game_state_ptr",
                "PTR_DAT_08003068": "game_state_ptr",
                "initialize_game_state_08008c44": "initialize_game_state",
                "process_data_08003002": "process_data",
                "process_and_send_data_08002e26": "process_and_send_data"
            },
            "code": "void process_game_state_and_data_08003048(undefined4 data, undefined4 game_state, undefined4 game_state_size, undefined4 unknown) {\n  undefined *PTR_DAT_08003068;\n  PTR_DAT_08003068 = PTR_DAT_08003068;\n  initialize_game_state_08008c44(PTR_DAT_08003068, game_state, game_state_size, unknown, unknown);\n  process_data_08003002(data);\n  process_and_send_data_08002e26(data, PTR_DAT_08003068);\n  return;\n}",
            "called": [
                "FUN_08003002",
                "FUN_08008c44",
                "FUN_08002e26"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_game_state_and_data_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_data_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_and_return_last_index_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_character_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_character_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_character_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "decode_and_process_08000214",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "bVar1": "is_valid",
                "iVar2": "char_index",
                "PTR_DAT_080002d8": "PTR_DATA_1",
                "PTR_DAT_080002dc": "PTR_DATA_2",
                "PTR_DAT_080002e8": "PTR_DATA_3",
                "PTR_DAT_080002e0": "PTR_DATA_5",
                "PTR_DAT_080002e4": "PTR_DATA_4"
            },
            "code": "void decode_and_process_08000214(uint index, undefined4 value, undefined4 param1, undefined4 param2)\n{\n  bool is_valid = false;\n  int byte_value = 0;\n  if (index > 59) {\n    return;\n  }\n  byte_value = get_byte_at_offset(PTR_DAT_080002d8,index,param1,param2,param2);\n  if (byte_value == 3) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        int char_index = find_char_index((int)(char)PTR_DAT_080002dc[index]);\n        if (char_index == 0) {\n          is_valid = false;\n        }\n        else {\n          char_index = find_char_index((int)(char)PTR_DAT_080002dc[index]);\n          if (char_index == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = check_param((int)(char)PTR_DAT_080002dc[index],PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      decode_and_process_08000214_data(index,value);\n    }\n    set_value_at_index(PTR_DAT_080002d8,index,value);\n  }\n  else if (byte_value == 4) {\n    if (index < 60) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        int char_index = find_char_index((int)(char)PTR_DAT_080002dc[index]);\n        if (char_index == 0) {\n          is_valid = false;\n        }\n        else {\n          char_index = find_char_index((int)(char)PTR_DAT_080002dc[index]);\n          if (char_index == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    if (is_valid) {\n      calculate_and_set_value(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[index] * 3,value);\n    }\n    set_value_at_index(PTR_DAT_080002d8,index,value);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "decode_and_process_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_update_data_08003724",
                "DAT_08003744": "data_flag",
                "update_data_08003f0c": "update_data",
                "validate_input_080036d8": "validate_input",
                "do_nothing_080036d4": "do_nothing"
            },
            "code": "int set_flag_and_update_data_08003724() {\n  *DAT_08003744 = *DAT_08003744 | 0x10;\n  update_data(3);\n  validate_input(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036d8",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_data_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_offset_080038dc",
                "param_1": "base_address",
                "*param_1": "*base_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_offset_080038dc(int *base_address) {\n    int offset = 0x4c;\n    int *address = (int *)(*base_address + offset);\n    return *address;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "update_flags_and_decode_080025ac",
                "param_1": "buffer",
                "param_2": "buffer_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "ptr_dat_value",
                "uVar2": "buffer_index",
                "uVar3": "dat_0800262c_value",
                "iVar4": "buffer_index_diff_220, buffer_index_diff_960, bit_set_index"
            },
            "code": "byte update_flags_and_decode_080025ac(byte *buffer, uint buffer_length, int param_3, int param_4)\n{\n  uint buffer_index = (uint)*buffer;\n  if (buffer_index < 0xc) {\n    decode_and_update_flags(buffer_length, 1, param_3, *buffer, param_4);\n    uint ptr_dat_value = (byte)PTR_DAT_08002628[buffer_index * 8] & 0xffffffc0 | buffer_length & 0x3f;\n    PTR_DAT_08002628[buffer_index * 8] = (char)ptr_dat_value;\n    int buffer_index_diff_220 = -param_3 + 0x220;\n    if (buffer_index_diff_220 < 0) {\n      buffer_index_diff_220 = -param_3 + 0x223;\n    }\n    buffer[1] = (byte)((uint)(buffer_index_diff_220 << 0x16) >> 0x18);\n    int buffer_index_diff_960 = -param_4 + 0x960;\n    if (buffer_index_diff_960 < 0) {\n      buffer_index_diff_960 = -param_4 + 0x963;\n    }\n    buffer[2] = (byte)((uint)(buffer_index_diff_960 << 0x16) >> 0x18);\n    uint dat_0800262c_value = (uint)((ulonglong)DAT_0800262c * (ulonglong)*buffer >> 0x23);\n    int bit_set_index = find_first_bit_set(dat_0800262c_value, ptr_dat_value, buffer_index, (int)((ulonglong)DAT_0800262c * (ulonglong)*buffer));\n    if (bit_set_index == 0) {\n      PTR_DAT_08002630[0x44] = (char)dat_0800262c_value;\n      initialize_data_structure();\n    }\n    PTR_DAT_08002628[buffer_index * 8] = PTR_DAT_08002628[buffer_index * 8] | 0x40;\n  }\n  return *buffer;\n}",
            "called": [
                "FUN_0800242c",
                "FUN_08008990",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "update_flags_and_decode_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "update_flags_and_decode_wrapper_08002634",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unchanged",
                "param_4": "PTR_4"
            },
            "code": "void update_flags_and_decode_wrapper_08002634(undefined4 input_1, undefined4 input_2) {\n  update_flags_and_decode_080025ac(input_1, input_2, 0x220, 0x960, PTR_4);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "update_flags_and_decode_wrapper_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "encode_data_to_buffer_08002f0a",
                "param_1": "data",
                "PTR_0800325a": "encode_data_to_buffer_0800325a",
                "buffer_address": "buffer_address"
            },
            "code": "void encode_data_to_buffer_08002f0a(int data){\n    int buffer_address = data + 0x40;\n    PTR_0800325a(buffer_address);\n    return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "encode_data_to_buffer_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable_1",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_variable_1",
                "uStack_18": "stack_variable_2",
                "uStack_14": "stack_variable_3"
            },
            "code": "uint calculate_value_08005bb8(int input)\n{\n  uint result;\n  undefined2 local_variable_1;\n  byte stack_array[4];\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n\n  stack_variable_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_variable_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_variable_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = get_shifted_value_from_pointer_08005a48();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": false,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_data_structure_08007648",
                "param_1": "data_structure",
                "param_2": "source",
                "param_3": "param_3",
                "param_4": "param_4",
                "cVar1": "param_check",
                "uVar2": "clock_source",
                "iVar3": "update_data_status",
                "puVar4": "data_ptr",
                "local_34": "local_var_1",
                "local_30": "local_var_2",
                "local_2c": "local_var_3",
                "local_28": "local_var_4",
                "local_24": "local_var_5",
                "local_20": "local_var_6",
                "local_1c": "local_var_7"
            },
            "code": "void initialize_data_structure_08007648(uint32_t *data_structure, uint32_t source, uint32_t param_3, uint32_t param_4)\n{\n    uint32_t clock_source;\n    uint32_t *data_ptr;\n    uint32_t temp_var_1 = 0x40000000;\n    uint32_t temp_var_2 = 0x40000000;\n    uint32_t zero = 0;\n    clock_source = process_clock_source();\n    data_structure[0] = temp_var_1;\n    data_structure[1] = temp_var_2;\n    data_structure[4] = source;\n    data_structure[2] = ((uint64_t)DAT_080076dc * (uint64_t)clock_source >> 0x32) - 1;\n    data_structure[5] = zero;\n    data_structure[3] = zero;\n    data_structure[6] = zero;\n    data_structure[0x13] = param_4;\n    uint32_t local_34 = 0;\n    uint32_t local_30 = param_3;\n    char param_check = check_param(*data_structure);\n    decode_and_store(param_check, 0xe, 0);\n    param_check = check_param(*data_structure);\n    set_bit_at_index(param_check);\n    int update_data_status = update_data(data_ptr);\n    if ((update_data_status == 0) && (update_data_status = process_data(data_ptr, &local_34, 0), update_data_status == 0)) {\n        set_bit_and_update_memory(data_ptr, 0);\n    }\n}",
            "called": [
                "FUN_08006128",
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08006060"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "return_zero_08008858"
            },
            "code": "int return_zero_08008858(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "return_zero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "clear_bit_in_memory_if_conditions_met_080063c0",
                "param_1": "memory",
                "param_2": "bit_position",
                "puVar1": "memory_ptr",
                "DAT_0800641c": "memory_end"
            },
            "code": "int clear_bit_in_memory_if_conditions_met_080063c0(uint **memory, int bit_position)\n{\n    uint *memory_ptr;\n    updateBitInMemory(*memory, bit_position, 0);\n    memory_ptr = *memory;\n    if (((memory_ptr == DAT_0800641c) && ((memory_ptr[8] & 0x1111) == 0)) && ((memory_ptr[8] & 0x444) == 0)) {\n        memory_ptr[17] &= 0xffff7fff;\n    }\n    memory_ptr = *memory;\n    if (((memory_ptr[8] & 0x1111) == 0) && ((memory_ptr[8] & 0x444) == 0)) {\n        *memory_ptr &= 0xfffffffe;\n    }\n    *(undefined *)((int)memory + 0x3d) = 1;\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "clear_bit_in_memory_if_conditions_met_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "process_input_08004a24",
                "param_1": "input_array",
                "pbVar2": "current_byte",
                "cVar1": "last_char"
            },
            "code": "int process_input_08004a24(int *input_array) {\n  char last_char = *(char *)((int)input_array + 0x3d);\n  if (*(short *)((int)input_array + 0x2a) != 0) {\n    byte *current_byte = (byte *)input_array[9];\n    input_array[9] = (int)(current_byte + 1);\n    *(uint *)(*input_array + 0x10) = (uint)*current_byte;\n    *(short *)((int)input_array + 0x2a) = *(short *)((int)input_array + 0x2a) + -1;\n    if ((*(short *)((int)input_array + 0x2a) == 0) && (last_char == ')')) {\n      *(uint *)(*input_array + 4) = *(uint *)(*input_array + 4) & 0xfffffbff;\n      input_array[0xc] = 0x21;\n      *(undefined *)((int)input_array + 0x3d) = 0x28;\n      do_nothing_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004aec",
                "FUN_08004a24"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "code": "int get_value_at_offset_08002fba(int* base_address, int offset)\n{\n    return *(int*)(base_address + (offset + 0x42) * sizeof(int));\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "execute_function_with_params_and_stack_pointer_080090cc",
                "param_1": "func_address",
                "param_2": "param_1",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "ptr_ptr_data",
                "puVar2": "ptr_s_function",
                "uVar3": "uVar3",
                "uVar4": "param_4_copy"
            },
            "code": "void execute_function_with_params_and_stack_pointer_080090cc(int func_address, char* assertion_message, int param_1, int param_2, char* function_name, void* param_3, int param_4){\n  int ptr_ptr_data = *(int*)PTR_PTR_DAT_080090f8 + 0xc;\n  char* ptr_s_function = PTR_s___function__080090fc;\n  int param_4_copy = param_4;\n  if(param_3 == NULL){\n    goto LAB_080090f0;\n  }\n  do{\n    execute_function_with_params_and_stack_pointer_080090cc_08009124(ptr_ptr_data, PTR_s_assertion___s__failed__file___s__08009100, param_4_copy, param_1, param_2, ptr_s_function, param_3, param_4_copy);\n    long long uVar3 = process_data_and_wait_08009b5c();\n    param_2 = (int)(uVar3 >> 0x20);\n    ptr_ptr_data = (int)uVar3;\n  } while(param_3 = PTR_s__08009104, ptr_s_function = PTR_s__08009104, true);\n}\n",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointer_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_bit_and_flags_if_space_080049e0",
                "param_1": "input_string_ptr",
                "puVar1": "flags_ptr",
                "*(char *)((int)param_1 + 0x3d)": "input_string[61]",
                "*(undefined *)((int)param_1 + 0x3d)": "input_string[61] = '(';",
                "*puVar1": "*flags_ptr",
                "**param_1": "*((uint32_t *)input_string)",
                "(*param_1)[1]": "*(flags_ptr + 1)"
            },
            "code": "int set_bit_and_flags_if_space_080049e0(char **input_string_ptr)\n{\n  char *input_string = *input_string_ptr;\n  if (input_string[61] != ' ') {\n    return 2;\n  }\n  input_string[61] = '(';\n  uint32_t *flags_ptr = (uint32_t *)(input_string + 64);\n  if ((*flags_ptr & 1) == 0) {\n    *flags_ptr |= 1;\n  }\n  *flags_ptr |= 0x400;\n  *(flags_ptr + 1) |= 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007ff0",
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e"
            ],
            "imported": false,
            "current_name": "set_bit_and_flags_if_space_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "update_flags_08006d24",
                "param_1": "flag_ptr",
                "iVar1": "initial_flag_value"
            },
            "code": "void update_flags_08006d24(int *flag_ptr)\n{\n  int initial_flag_value = DAT_08006d7c;\n  if (*flag_ptr != DAT_08006d74) {\n    if (*flag_ptr == DAT_08006d78) {\n      *(uint *)(DAT_08006d7c + 0xc) |= 0x400;\n      *(uint *)(initial_flag_value + 0xc) &= 0xfffffbff;\n      *(uint *)(initial_flag_value + 0x18) &= 0xfffffbff;\n      *(uint *)(initial_flag_value + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(DAT_08006d7c + 0xc) |= 0x200;\n  *(uint *)(initial_flag_value + 0xc) &= 0xfffffdff;\n  *(uint *)(initial_flag_value + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "update_flags_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_to_data",
                "uVar2": "var_1",
                "uStack_c": "var_2",
                "uStack_8": "var_3",
                "uStack_4": "var_4",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904",
                "FUNC_08009d50": "cleanup_data",
                "FUNC_0800937c": "process_data_helper"
            },
            "code": "void process_data_080098d8(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int ptr_to_data = *(int *)PTR_PTR_DAT_08009904;\n  undefined4 var_1 = data_1;\n  undefined4 var_2 = data_2;\n  undefined4 var_3 = data_3;\n  undefined4 var_4 = data_4;\n  \n  if ((ptr_to_data != 0) && (*(int *)(ptr_to_data + 0x18) == 0)) {\n    cleanup_data(ptr_to_data);\n  }\n  process_data_080098d8_helper(ptr_to_data, *(undefined4 *)(ptr_to_data + 8), data_1, &var_2, var_1, &var_2);\n  return;\n}",
            "called": [
                "FUN_0800937c",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8",
            "code_backup": "\nvoid FUN_080098d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08009d50(iVar1);\n  }\n  FUNC_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "*param_1": "*memory_blocks",
                "param_2": "requested_size",
                "puVar1": "unused_pointer_1",
                "uVar2": "unused_variable_1",
                "puVar3": "current_block",
                "iVar4": "unused_variable_2",
                "puVar5": "unused_pointer_2",
                "uVar6": "block_size",
                "puVar7": "previous_block",
                "uVar8": "new_block_size"
            },
            "code": "uint allocate_memory_block_08009270(uint *memory_blocks, uint requested_size)\n{\n  uint *current_block;\n  uint block_size;\n  uint *previous_block;\n  uint new_block_size;\n  \n  new_block_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < requested_size)) {\n    *memory_blocks = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    current_block = *(uint **)PTR_DAT_08009324;\n    previous_block = *(uint **)PTR_DAT_08009324;\n    while (current_block != (uint *)0x0) {\n      block_size = *current_block - new_block_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block == current_block) {\n            new_block_size = previous_block[1];\n            *(uint *)PTR_DAT_08009324 = new_block_size;\n          }\n          else {\n            new_block_size = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = new_block_size;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size;\n          *(uint *)((int)current_block + block_size) = new_block_size;\n          previous_block = (uint *)((int)current_block + block_size);\n        }\n        do_nothing_08009f4a(memory_blocks);\n        new_block_size = (int)previous_block + 0xbU & 0xfffffff8;\n        block_size = new_block_size - (int)(previous_block + 1);\n        if (block_size != 0) {\n          *(int *)((int)previous_block + block_size) = -block_size;\n          return new_block_size;\n        }\n        return new_block_size;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      new_block_size = find_and_set_offset_08009918(memory_blocks);\n      *(undefined4 *)PTR_DAT_08009328 = new_block_size;\n    }\n    current_block = (uint *)find_and_set_offset_08009918(memory_blocks,new_block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (block_size = find_and_set_offset_08009918(memory_blocks,(int)previous_block - (int)current_block), block_size != -1)))) {\n      *previous_block = new_block_size;\n      do_nothing_08009f4a(memory_blocks);\n      new_block_size = (int)previous_block + 0xbU & 0xfffffff8;\n      block_size = new_block_size - (int)(previous_block + 1);\n      if (block_size != 0) {\n        *(int *)((int)previous_block + block_size) = -block_size;\n        return new_block_size;\n      }\n      return new_block_size;\n    }\n    *memory_blocks = 0xc;\n    do_nothing_08009f4a(memory_blocks);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a",
                "FUN_08009918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009190",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "process_input_08008500",
                "param_1": "input_val",
                "param_2": "param_val",
                "iVar2": "initial_value",
                "cVar1": "char_value",
                "iVar3": "index",
                "PTR_DAT_080085a8": "array_1",
                "PTR_DAT_080085ac": "array_2",
                "PTR_DAT_080085b0": "array_3",
                "PTR_DAT_080085b4": "array_4",
                "uVar4": "loop_index",
                "process_input_080067ac": "process_input_2",
                "get_value_from_pointer_08003760": "get_initial_value",
                "update_character_info_080084b0": "update_character_info"
            },
            "code": "uint process_input_08008500(uint input_val, uint param_val)\n{\n  int initial_value = get_initial_value();\n  char char_value = PTR_DAT_080085a8[1];\n  int index = find_index(char_value, PTR_DAT_080085ac);\n  if (index == 0) {\n    return 0;\n  }\n  uint loop_index = 0;\n  while ((loop_index < 5 && ((*(int *)(PTR_DAT_080085b0 + loop_index * 4) == 0 || (index = find_index(char_value, PTR_DAT_080085ac), **(int **)(PTR_DAT_080085b0 + loop_index * 4) != index))))) {\n    loop_index = loop_index + 1 & 0xff;\n  }\n  if (4 < loop_index) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (update_character_info(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    loop_index = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    index = process_input_08008500_2(*(undefined4 *)(PTR_DAT_080085b0 + loop_index * 4),input_val,param_val & 0xffff,1000);\n    if (index == 0) {\n      return param_val;\n    }\n    index = get_initial_value();\n  } while ((uint)(index - initial_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_080067ac",
                "FUN_080084b0",
                "FUN_08007320",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "process_input_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "process_input_080048c8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "data_length",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int process_input_080048c8(uint **input_ptr, uint *input_data, int data_length, uint *output_ptr) {\n  int result = 0;\n  uint *ptr;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL || data_length == 0 || *(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 1;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)data_length;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "process_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "pcVar3": "current_destination",
                "iVar2": "remaining_length",
                "cVar1": "current_character"
            },
            "code": "void copy_string_08009954(char *source, char *destination, int length) {\n  char current_character;\n  int remaining_length;\n  char *current_destination = destination;\n  while ((remaining_length = length) && (current_character = *source)) {\n    *current_destination++ = current_character;\n    source++;\n    length--;\n  }\n  while (current_destination != destination + length) {\n    *current_destination++ = '\\0';\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "set_config_values_08005aa4",
                "param_1": "config_values",
                "puVar1": "config_values_ptr",
                "iVar2": "current_config_values",
                "iVar3": "current_time",
                "uVar4": "config_values_mask",
                "bVar5": "is_bit_28_set"
            },
            "code": "int set_config_values_08005aa4(uint *config_values) {\n  bool is_bit_set = (*config_values & 1) != 0;\n  if (is_bit_set) {\n    bool is_bit_28_set = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (is_bit_28_set) {\n      *(uint *)(DAT_08005bac + 0x1c) |= 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 |= 0x100;\n      int start_time = get_value_from_pointer_08003760();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        int current_time = get_value_from_pointer_08003760();\n        if (current_time - start_time > 100) {\n          return 3;\n        }\n      }\n    }\n    uint *config_values_ptr = DAT_08005bb4;\n    int current_config_values = DAT_08005bac;\n    uint config_values_mask = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if (config_values_mask != 0 && config_values_mask != (config_values[1] & 0x300)) {\n      config_values_mask = *(uint *)(DAT_08005bac + 0x20);\n      *config_values_ptr = 1;\n      *(config_values_ptr + 1) = 0;\n      *(uint *)(current_config_values + 0x20) = config_values_mask & 0xfffffcff;\n      if ((config_values_mask & 1) != 0) {\n        int start_time = get_value_from_pointer_08003760();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          int current_time = get_value_from_pointer_08003760();\n          if (current_time - start_time > 5000) {\n            return 3;\n          }\n        }\n      }\n    }\n    int current_config_values = DAT_08005bac;\n    *(uint *)(current_config_values + 0x20) = *(uint *)(current_config_values + 0x20) & 0xfffffcff | config_values[1];\n    if (is_bit_28_set) {\n      *(uint *)(current_config_values + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((*config_values & 2) != 0) {\n    *(uint *)(DAT_08005bac + 4) &= 0xffff3fff | config_values[2];\n  }\n  if ((*config_values & 0x10) != 0) {\n    *(uint *)(DAT_08005bac + 4) &= 0xffbfffff | config_values[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_config_values_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "check_flags_08005e6e",
                "param_1": "flags",
                "iVar1": "ptr"
            },
            "code": "void check_flags_08005e6e(int *flags)\n{\n  int ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 2) != 0) && ((*(uint *)(ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_function_if_flag_set_0800771c();\n      do_nothing_08005e6a(flags);\n    }\n    else {\n      do_nothing_08005e68();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 4) != 0) && ((*(uint *)(ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_function_if_flag_set_0800771c(flags);\n      do_nothing_08005e6a(flags);\n    }\n    else {\n      do_nothing_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 8) != 0) && ((*(uint *)(ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_function_if_flag_set_0800771c(flags);\n      do_nothing_08005e6a(flags);\n    }\n    else {\n      do_nothing_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x10) != 0) && ((*(uint *)(ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_function_if_flag_set_0800771c(flags);\n      do_nothing_08005e6a(flags);\n    }\n    else {\n      do_nothing_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 1) != 0) && ((*(uint *)(ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xfffffffe;\n    execute_function_if_not_null_08007736(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x80) != 0) && ((*(uint *)(ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffff7f;\n    do_nothing_080064ae(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x40) != 0) && ((*(uint *)(ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffbf;\n    do_nothing_08005e6c(flags);\n  }\n  ptr = *flags;\n  if (((*(uint *)(ptr + 0x10) & 0x20) != 0) && ((*(uint *)(ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(ptr + 0x10) = 0xffffffdf;\n    do_nothing_080064ac(flags);\n  }\n  return;\n}",
            "called": [
                "FUN_08005e6c",
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_08005e6a",
                "FUN_08005e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flag_value",
                "DAT_08004040": "flags"
            },
            "code": "void set_flag_08004024(int flag_value)\n{\n  if (flag_value != 4) {\n    DAT_08004040 = DAT_08004040 & 0xfffffffb;\n    return;\n  }\n  DAT_08004040 = DAT_08004040 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "find_first_bit_set_08002400",
                "param_1": "index",
                "uVar1": "bit_index"
            },
            "code": "int find_first_bit_set_08002400(int index) {\n    int bit_index = 0;\n    while (true) {\n        if (bit_index > 11) {\n            return 0;\n        }\n        if ((PTR_DAT_08002428[(index * 12 + bit_index) * 8] & 0x40) != 0) {\n            break;\n        }\n        bit_index = (bit_index + 1) & 0xFF;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "find_first_bit_set_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "process_data_08000588",
                "param_1": "data_index",
                "cVar1": "current_char",
                "cVar2": "current_data",
                "puVar3": "processed_chars",
                "PTR_DAT_080005cc": "data",
                "PTR_DAT_080005d0": "processed_data",
                "PTR_DAT_080005d4": "processed_chars",
                "PTR_DAT_080005d8": "next_char_index",
                "PTR_DAT_080005dc": "processed_chars_buffer"
            },
            "code": "void process_data_08000588(int PTR_DAT_080005cc_index) {\n    char current_PTR_DAT_080005cc = PTR_DAT_080005cc[PTR_DAT_080005cc_index];\n    process_byte(PTR_DAT_080005d0 + current_PTR_DAT_080005cc * 3);\n    char current_char = *PTR_DAT_080005d4;\n    if ((current_PTR_DAT_080005cc == current_char) && (current_char != '\\0')) {\n        *PTR_DAT_080005d4 = current_char - 1;\n    }\n    else if (current_char != '\\0') {\n        char next_char = *PTR_DAT_080005d8;\n        *PTR_DAT_080005d8 = next_char + 1;\n        PTR_DAT_080005dc[(byte)(next_char + 1) - 1] = current_PTR_DAT_080005cc;\n    }\n    PTR_DAT_080005cc[PTR_DAT_080005cc_index] = 0xff;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar2": "byte_index",
                "bVar1": "current_byte",
                "iVar3": "bit_index"
            },
            "code": "void process_byte_08002644(byte* input, uint32_t param_2, uint32_t param_3, uint32_t param_4) {\n\tuint32_t byte_index = (uint32_t)*input;\n\tbyte current_byte = PTR_DAT_08002670[byte_index * 8];\n\tPTR_DAT_08002670[byte_index * 8] = current_byte & 0xbf;\n\tint bit_index = find_first_bit_set_08002400((uint32_t)((uint64_t)DAT_08002674 * (uint64_t)byte_index >> 0x23), param_2, current_byte & 0xbf, (int)((uint64_t)DAT_08002674 * (uint64_t)byte_index), param_4);\n\tif (bit_index == 0) {\n\t\tupdate_flags_08002578(PTR_DAT_08002678);\n\t}\n}",
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "wait_forever_08008868"
            },
            "code": "void wait_forever_08008868(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "wait_forever_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_char_index_080036ac",
                "param_1": "char_to_find",
                "uVar1": "index",
                "PTR_DAT_080036d0": "char_array"
            },
            "code": "uint find_char_index_080036ac(int char_to_find) {\n\tuint index = 0;\n\tif ((char_to_find << 0x18) >> 0x1c < 5) {\n\t\tfor (index = 0; (index < 0x3c && (char_to_find != (char)PTR_DAT_080036d0[index])); index++) {\n\t\t}\n\t}\n\telse {\n\t\tindex = 0xffffffff;\n\t}\n\treturn index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "find_char_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "call_function_pointer_08002f1e",
                "param_1": "pointer_address"
            },
            "code": "void call_function_pointer_08002f1e(int pointer_address){\n  (**(code **)**(undefined4 **)(pointer_address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "process_input_and_return_0800885c",
                "param_1": "unused",
                "param_2": "input_buffer",
                "param_3": "input_length",
                "param_4": "output_buffer"
            },
            "code": "void process_input_and_return_0800885c(void* input_buffer, int input_length, void* output_buffer, int output_length)\n{\n  process_input_08008500(input_buffer, input_length, output_buffer, output_length, output_length);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_input_and_return_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_bit_and_update_values_0800643c",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "set_bit_08006420": "set_bit",
                "**param_1": "**bit_array",
                "0x11": "17"
            },
            "code": "int set_bit_and_update_values_0800643c(uint **bit_array, uint bit_index, uint value) {\n\tset_bit(*bit_array, bit_index);\n\t(*bit_array)[17] |= 0x8000;\n\t**bit_array |= value;\n\treturn 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_values_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "process_data_loop_08002fca",
                "param_1": "unused",
                "param_2": "data",
                "param_3": "data_len",
                "param_4": "no_op_1",
                "param_5": "no_op_2",
                "uVar1": "i"
            },
            "code": "void process_data_loop_08002fca(uint8_t* data, uint32_t data_len, uint8_t* no_op_1, uint8_t* no_op_2, uint8_t* no_op_3)\n{\n  uint32_t i;\n  for (i = 0; i < data_len; i++) {\n    do_nothing(no_op_3);\n    process_data(data[i], no_op_1);\n    do_nothing(no_op_2);\n    process_data(data[i], no_op_1);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "process_data_loop_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "info",
                "uVar1": "result",
                "iVar2": "info_offset",
                "piVar3": "info_node",
                "uVar4": "info_len",
                "uVar5": "info_flag",
                "iVar6": "info_step",
                "unaff_r4": "unused_1",
                "unaff_r5": "unused_2",
                "pcVar7": "callback",
                "iVar8": "callback_result",
                "uVar9": "data_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "condition"
            },
            "code": "int process_data_08009c7c(uint *data, int *info) {\n    int result = 0;\n    int *info_ptr;\n    uint info_value;\n    ushort info_flag;\n    int info_len;\n    int info_offset;\n    int info_step;\n    code *callback;\n    int callback_result;\n    uint data_value;\n\n    if (info[4] != 0) {\n        if ((data != NULL) && (data[6] == 0)) {\n            error();\n        }\n        if (info == (int *)PTR_DAT_08009cc4) {\n            info_ptr = (int *)data[1];\n        }\n        else if (info == (int *)PTR_DAT_08009cc8) {\n            info_ptr = (int *)data[2];\n        }\n        else if (info == (int *)PTR_DAT_08009ccc) {\n            info_ptr = (int *)data[3];\n        }\n        if (*(short *)(info_ptr + 3) != 0) {\n            info_flag = *(ushort *)(info_ptr + 3);\n            info_len = (int)info_flag;\n            if ((int)(info_len << 0x1c) < 0) {\n                info_offset = info[4];\n                if (info_offset != 0) {\n                    info_step = info_len << 0x1e;\n                    if (info_step != 0) {\n                        info_step = 0;\n                    }\n                    callback = (code *)info_ptr[10];\n                    if (info_step == 0) {\n                        info_step = info_ptr[5];\n                    }\n                    info_ptr[0] = info_offset;\n                    info_ptr[2] = info_step;\n                    for (info_offset = info_ptr[0] - info_offset; 0 < info_offset; info_offset = info_offset - info_step) {\n                        callback_result = (*callback)(data, info_ptr[8], info_len, info_offset, 0, 0);\n                        if (callback_result < 1) {\n                            info_flag = *(ushort *)(info_ptr + 3);\n                            goto LAB_08009c62;\n                        }\n                        info_len = info_len + callback_result;\n                    }\n                }\n            }\n            else if (((0 < info_ptr[1]) || (0 < info_ptr[0x10])) && ((callback = (code *)info_ptr[0xb]) != NULL)) {\n                data_value = *data;\n                *data = 0;\n                if ((info_len & 0x1000) == 0) {\n                    callback_result = (*callback)(data, info_ptr[8], info_len & 0x1000, 1);\n                    if ((callback_result == -1) && ((info_value = *data) != 0)) {\n                        if ((info_value != 0x1d) && (info_value != 0x16)) {\n                            info_flag = *(ushort *)(info_ptr + 3);\n                            goto LAB_08009c2c;\n                        }\n                        *data = data_value;\n                        goto LAB_08009b86;\n                    }\n                }\n                else {\n                    callback_result = info_ptr[0x15];\n                }\n                if (((int)((uint)info_flag << 0x1d) < 0) && ((callback_result = callback_result - info_ptr[1]), info_ptr[0xd] != 0)) {\n                    callback_result = callback_result - info_ptr[0x10];\n                }\n                callback_result = (*callback)(data, info_ptr[8], callback_result, 0);\n                info_flag = *(ushort *)(info_ptr + 3);\n                if ((callback_result == -1) && ((0x1d < *data) || (-1 < (int)((DAT_08009c78 >> (*data & 0xff)) << 0x1f))))) {\n                    goto LAB_08009c62;\n                }\n                info_ptr[1] = 0;\n                info_ptr[0] = info_ptr[4];\n                if (((int)((uint)info_flag << 0x13) < 0) && ((callback_result != -1) || (*data == 0))) {\n                    info_ptr[0x15] = callback_result;\n                }\n                if ((info_ptr[0xd] != NULL) && (info_ptr[0xd] != info_ptr + 0x11)) {\n                    insert_node_080091d8(data);\n                }\n                info_ptr[0xd] = 0;\n                goto LAB_08009c02;\n            }\n        }\n    }\n    return result;\n\nLAB_08009b86:\n    result = (*UNRECOVERED_JUMPTABLE_00)(0);\n    return result;\n\nLAB_08009c02:\n    result = (*UNRECOVERED_JUMPTABLE_00)();\n    return result;\n\nLAB_08009c2c:\n    result = (*UNRECOVERED_JUMPTABLE_00)(-1);\n    return result;\n\nLAB_08009c62:\n    result = (*UNRECOVERED_JUMPTABLE_00)(-1);\n    return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == (int *)PTR_DAT_08009cc4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009cc8) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009ccc) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08009c78 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_node_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "process_data_and_wait_08009b5c",
                "puVar1": "data_ptr",
                "iVar2": "num_bytes_remaining",
                "piVar3": "ptr_to_data",
                "piVar4": "ptr_to_data2",
                "uVar5": "num_bytes",
                "uVar6": "flags",
                "iVar7": "offset",
                "pcVar8": "function_ptr",
                "iVar9": "counter",
                "uVar10": "byte_value",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar11": "flag",
                "uVar12": "return_value"
            },
            "code": "void process_data_and_wait_08009b5c(void)\n{\n  uint *data_ptr;\n  int num_bytes;\n  int *ptr_to_data;\n  int *ptr_to_data2;\n  uint uVar1;\n  ushort flags;\n  int offset;\n  code *function_ptr;\n  int counter;\n  int num_bytes_remaining;\n  uint byte_value;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool flag;\n  undefined8 return_value;\n  \n  process_data_08009fe8(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8009b6b;\n  return_value = wait_forever_08008868(1);\n  ptr_to_data = (int *)((ulonglong)return_value >> 0x20);\n  data_ptr = (uint *)return_value;\n  flags = *(ushort *)(ptr_to_data + 3);\n  num_bytes = (int)flags;\n  if ((int)(num_bytes << 0x1c) < 0) {\n    num_bytes_remaining = ptr_to_data[4];\n    if (num_bytes_remaining != 0) {\n      offset = num_bytes << 0x1e;\n      flag = offset != 0;\n      if (flag) {\n        offset = 0;\n      }\n      counter = *ptr_to_data;\n      if (!flag) {\n        offset = ptr_to_data[5];\n      }\n      *ptr_to_data = num_bytes_remaining;\n      ptr_to_data[2] = offset;\n      for (counter = counter - num_bytes_remaining; 0 < counter; counter = counter - offset) {\n        offset = (*(code *)ptr_to_data[10])(data_ptr,ptr_to_data[8],num_bytes_remaining,counter);\n        if (offset < 1) {\n          flags = *(ushort *)(ptr_to_data + 3);\n          goto LAB_08009c62;\n        }\n        num_bytes_remaining = num_bytes_remaining + offset;\n      }\n    }\n  }\n  else if (((0 < ptr_to_data[1]) || (0 < ptr_to_data[0x10])) &&\n          (function_ptr = (code *)ptr_to_data[0xb], function_ptr != (code *)0x0)) {\n    byte_value = *data_ptr;\n    *data_ptr = 0;\n    if ((flags & 0x1000) == 0) {\n      offset = (*function_ptr)(data_ptr,ptr_to_data[8],num_bytes & 0x1000,1);\n      if ((offset == -1) && (num_bytes = *data_ptr, num_bytes != 0)) {\n        if ((num_bytes != 0x1d) && (num_bytes != 0x16)) {\n          *(ushort *)(ptr_to_data + 3) = *(ushort *)(ptr_to_data + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *data_ptr = byte_value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      offset = ptr_to_data[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr_to_data + 3) << 0x1d) < 0) &&\n       (offset = offset - ptr_to_data[1], ptr_to_data[0xd] != 0)) {\n      offset = offset - ptr_to_data[0x10];\n    }\n    offset = (*(code *)ptr_to_data[0xb])(data_ptr,ptr_to_data[8],offset,0);\n    flags = *(ushort *)(ptr_to_data + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08009c78 >> (*data_ptr & 0xff)) << 0x1f)))) {\nLAB_08009c62:\n      *(ushort *)(ptr_to_data + 3) = flags | 0x40;\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    ptr_to_data[1] = 0;\n    *ptr_to_data = ptr_to_data[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((offset != -1 || (*data_ptr == 0)))) {\n      ptr_to_data[0x15] = offset;\n    }\n    ptr_to_data2 = (int *)ptr_to_data[0xd];\n    *data_ptr = byte_value;\n    if (ptr_to_data2 != (int *)0x0) {\n      if (ptr_to_data2 != ptr_to_data + 0x11) {\n        insert_node_080091d8(data_ptr);\n      }\n      ptr_to_data[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_and_wait_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "decode_and_set_value_if_valid_0800021a",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "is_valid_index",
                "iVar2": "char_index",
                "get_byte_at_offset_08002fa0": "get_byte_at_offset",
                "PTR_DAT_080002d8": "PTR_DAT_080002d8",
                "PTR_DAT_080002dc": "PTR_DAT_080002dc",
                "find_char_index_080036ac": "find_char_index_080036ac",
                "check_param_0800738a": "check_param_0800738a",
                "decode_and_process_data_080088e0": "decode_and_process_data_080088e0",
                "set_value_at_index_08002fc2": "set_value_at_index_08002fc2",
                "calculate_and_set_value_080026b0": "calculate_and_set_value_080026b0",
                "PTR_DAT_080002e4": "PTR_DAT_080002e4",
                "PTR_DAT_080002e0": "PTR_DAT_080002e0"
            },
            "code": "void decode_and_set_value_if_valid_0800021a(uint index, undefined4 value) {\n  bool is_valid_index;\n  int char_index;\n  int byte_value = get_byte_at_offset_08002fa0(PTR_DAT_080002d8, index, param_3, param_4, param_4);\n  if (byte_value == 3) {\n    if (index < 0x3c) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid_index = false;\n      }\n      else {\n        char_index = find_char_index_080036ac();\n        if (char_index == 0) {\n          is_valid_index = false;\n        }\n        else {\n          char_index = find_char_index_080036ac((int)(char)PTR_DAT_080002dc[index]);\n          if (char_index == 1) {\n            is_valid_index = false;\n          }\n          else {\n            is_valid_index = check_param_0800738a((int)(char)PTR_DAT_080002dc[index], PTR_DAT_080002e8);\n          }\n        }\n      }\n    }\n    else {\n      is_valid_index = false;\n    }\n    if (is_valid_index) {\n      decode_and_process_data_080088e0(index, value);\n    }\n    set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n  }\n  else if (byte_value == 4) {\n    if (index < 0x3c) {\n      if (PTR_DAT_080002dc[index] == -1) {\n        is_valid_index = false;\n      }\n      else {\n        char_index = find_char_index_080036ac();\n        if (char_index == 0) {\n          is_valid_index = false;\n        }\n        else {\n          char_index = find_char_index_080036ac((int)(char)PTR_DAT_080002dc[index]);\n          if (char_index == 1) {\n            is_valid_index = false;\n          }\n          else {\n            is_valid_index = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid_index = false;\n    }\n    if (is_valid_index) {\n      calculate_and_set_value_080026b0(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[index] * 3, value);\n    }\n    set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080088e0",
                "FUN_08002fc2",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_080026b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "decode_and_set_value_if_valid_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "is_bit_set_08008a6c",
                "param_1": "index",
                "cVar1": "is_set",
                "iVar2": "bit_index",
                "uVar3": "data",
                "uVar4": "value"
            },
            "code": "bool is_bit_set_08008a6c(unsigned int index)\n{\n  unsigned int data;\n  unsigned int bit_mask;\n  unsigned int value;\n  if (index < 60) {\n    value = (unsigned int)(char)PTR_DAT_08008ab4[index];\n  }\n  else {\n    value = 0xffffffff;\n  }\n  if (value == 0xffffffff) {\n    return false;\n  }\n  else {\n    data = get_data_by_index_08006b7c((value << 0x18) >> 0x1c);\n    bit_mask = 1 << (value & 0xf) & 0xffff;\n    bool is_set = check_bit_in_word_and_update_flag_080072f0(data, bit_mask);\n    if (is_set) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "is_bit_set_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_from_ptr_dat_080026f8",
                "param_1": "input",
                "*param_1": "*input",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "uint": "uint",
                "byte": "byte",
                "index": "index",
                "shifted": "shifted",
                "result": "result"
            },
            "code": "uint get_byte_from_ptr_dat_080026f8(byte *input) {\n  uint index = (uint)*input * 8;\n  uint shifted = (uint)(byte)PTR_DAT_08002708[index] << 0x19;\n  uint result = shifted >> 0x1f;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_from_ptr_dat_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_combination_valid_080085b8",
                "param_1": "index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080085d8": "get_pointer_address",
                "byte": "byte_index"
            },
            "code": "bool is_combination_valid_080085b8(int index)\n{\n  uint16_t combined_bytes = combine_bytes(PTR_DAT_080085d8(index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "is_combination_valid_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "readByteFromMemory_08001c08",
                "uVar1": "byteValue"
            },
            "code": "unsigned char readByteFromMemory_08001c08(void)\n{\n  unsigned char byteValue;\n  byteValue = read_byte_from_memory_08002720(PTR_DAT_08001c14);\n  return byteValue;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "readByteFromMemory_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "process_clock_source_080075dc",
                "param_1": "clock_source",
                "local_20": "extracted_data",
                "local_1c": "data1",
                "local_18": "data2",
                "local_14": "data3",
                "local_10": "data4",
                "local_c": "data5",
                "uVar1": "value",
                "uVar3": "index",
                "check_param_08007594": "check_clock_source",
                "get_shifted_value_from_pointer_08005a28": "get_shifted_value_from_pointer1",
                "get_shifted_value_from_pointer_08005a48": "get_shifted_value_from_pointer2",
                "process_data_080098d8": "process_data",
                "PTR_s_TIM__Unknown_clock_source_08007644": "PTR_s_TIM__Unknown_clock_source_08007644"
            },
            "code": "int process_clock_source_080075dc(uint8_t clock_source)\n{\n    uint16_t data1 = 0;\n    uint16_t data2 = 0;\n    uint16_t data3 = 0;\n    uint16_t data4 = 0;\n    uint16_t data5 = 0;\n    uint16_t extracted_data = 0;\n    extract_data(&data1, &extracted_data);\n    int result = check_clock_source(clock_source);\n    uint16_t value = data5;\n    uint16_t index = data2;\n    if (result == 1)\n    {\n        result = get_shifted_value_from_pointer1();\n    }\n    else if (result == 2)\n    {\n        result = get_shifted_value_from_pointer2();\n        index = value;\n    }\n    else\n    {\n        process_data(PTR_s_TIM__Unknown_clock_source_08007644);\n        result = 0;\n        index = 0;\n    }\n    if (index != 0x500)\n    {\n        if (index < 0x501)\n        {\n            if (index != 0x400)\n            {\n                return result;\n            }\n        }\n        else if (index != 0x600 && index != 0x700)\n        {\n            return result;\n        }\n    }\n    return result << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "process_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "check_param_08007544",
                "param_1": "param",
                "DAT_08007588": "timer_val",
                "DAT_0800758c": "timer_val2",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_irq"
            },
            "code": "uint32_t check_param_08007544(uint32_t param) {\n    if (param == 0xffffffff) {\n        return 0;\n    }\n    if (param == DAT_08007588) {\n        return 29;\n    }\n    if (DAT_08007588 < param) {\n        if (param == DAT_0800758c) {\n            return 30;\n        }\n        if (param == DAT_0800758c + 0x12400) {\n            return 25;\n        }\n    }\n    else if (param == 0x40000000) {\n        return 28;\n    }\n    process_data(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n    return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_param_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "process_input_and_set_flags_08007ff0",
                "param_1": "input",
                "iVar1": "input_subtracted",
                "subtract_four_from_input_08007f78": "subtract_four_from_input",
                "*(code **)(iVar1 + 0x60)": "function_ptr",
                "*(char *)(iVar1 + 0x5c)": "flag_1",
                "*(char *)(iVar1 + 0x2c)": "flag_2",
                "set_bit_and_flags_if_space_080049e0": "set_bit_and_flags_if_space"
            },
            "code": "void process_input_and_set_flags_08007ff0(undefined4 input) {\n  int input_subtracted = subtract_four_from_input();\n  code* function_ptr = *(code**)(input_subtracted + 0x60);\n  char flag_1 = *(char*)(input_subtracted + 0x5c);\n  char flag_2 = *(char*)(input_subtracted + 0x2c);\n  if (function_ptr != (code*)0x0 && flag_1 == '\\x01' && flag_2 != ' ') {\n    (*function_ptr)(input_subtracted + 0x68);\n  }\n  set_bit_and_flags_if_space(input);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004aec",
                "FUN_08004f3c",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "process_input_and_set_flags_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "decode_and_update_flags_08008990",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "flags",
                "param_4": "data",
                "iVar1": "bit_value",
                "puVar2": "ptr",
                "iVar3": "bit_index",
                "check_param_0800738a": "check_param",
                "check_conditions_and_set_flags_080071e4": "check_conditions_and_set_flags",
                "update_bit_08006b5c": "update_bit",
                "set_bits_08007258": "set_bits",
                "set_bit_08006b3e": "set_bit"
            },
            "code": "void decode_and_update_flags_08008990(uint8_t index, uint8_t mode, uint8_t flags, uint8_t *data){\n  int8_t bit_index;\n  uint8_t *ptr;\n  int8_t bit_value;\n  int8_t check_result;\n\n  if (index < 0x3c) {\n    bit_index = (int8_t)(char)PTR_DAT_08008a14[index];\n    ptr = PTR_DAT_08008a14;\n  }\n  else {\n    bit_index = -1;\n    ptr = data;\n  }\n  if (bit_index != -1) {\n    bit_value = get_bit_at_index(bit_index, PTR_DAT_08008a18, flags, ptr, data);\n    if (bit_value != 0) {\n      check_result = check_param(bit_index, PTR_DAT_08008a1c);\n      if (check_result != 0) {\n        check_conditions_and_set_flags(bit_index);\n      }\n      update_bit(bit_index, PTR_DAT_08008a18);\n    }\n    switch(mode) {\n    case 0:\n      set_bits(bit_index, 0);\n      break;\n    case 1:\n      set_bits(bit_index, 1, 0);\n      break;\n    case 2:\n      set_bits(bit_index, 0, 1);\n      break;\n    case 3:\n      set_bits(bit_index, 0, 2);\n    }\n    set_bit(bit_index, PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08007258",
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_080071e4",
                "FUN_08006b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_and_update_flags_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_in_array_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = find_value_in_array_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        process_data_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_character_or_negative_one_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        set_bits_080040e8(uVar5,&local_20);\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_character_or_negative_one_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        set_bits_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        check_and_update_values_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_0800674e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_param_value_08004396",
                "*param_1": "*param_array",
                "PTR_": "param_array",
                "DAT_": "value",
                "param_1": "param_array",
                "0x10": "offset",
                "0x11": "index"
            },
            "code": "int set_param_value_08004396(int *PTR_) {\n    int offset = 0x10;\n    int index = 0x11;\n    int DAT_ = PTR_[index] & 0xff;\n    *(unsigned int *)(PTR_ + offset) = DAT_;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_param_value_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_in_array_08003fb0",
                "param_1": "bit_index",
                "DAT_08003fd4": "array_start"
            },
            "code": "void set_bit_in_array_08003fb0(uint bit_index){\n  if (bit_index >= 0) {\n    int* array_ptr = (int*)(DAT_08003fd4 + ((bit_index >> 5) + 0x20) * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "process_input_and_set_flags_080052f0",
                "param_1": "input",
                "puVar2": "input_ptr",
                "uVar3": "flags",
                "uVar4": "input_val",
                "DAT_080053c8": "FLAG_1",
                "process_input_08004aec": "process_input",
                "char cVar1": "char char_val"
            },
            "code": "void process_input_and_set_flags_080052f0(uint **input)\n{\n    uint *input_ptr = *input;\n    uint flags = input_ptr[5];\n    uint input_val = input_ptr[1];\n\n    if ((flags & DAT_080053c8) && (input_val & 0x100)) {\n        input[16] = (uint *)((uint)input[16] | 1);\n        input_ptr[5] = 0xfffffeff;\n        **input = **input | 0x8000;\n    }\n\n    if ((flags & FLAG_2) && (input_val & 0x100)) {\n        input[16] = (uint *)((uint)input[16] | 2);\n        (*input)[5] = 0xfffffdff;\n    }\n\n    if ((flags & FLAG_3) && (input_val & 0x100)) {\n        char char_val = *(char *)((int)input + 0x3d);\n        if (((*(char *)((int)input + 0x3e) == ' ') && (*(short *)((int)input + 0x2a) == 0)) &&\n            (((char_val == '!' || (char_val == ')')) || ((char_val == '(' && (input[12] == (uint *)0x21)))))) {\n            process_input_08004aec(input);\n        }\n        else {\n            input[16] = (uint *)((uint)input[16] | 4);\n            if (*(char *)((int)input + 0x3e) == '\\x10') {\n                **input = **input | 0x200;\n            }\n            (*input)[5] = 0xfffffbff;\n        }\n    }\n\n    if ((flags & FLAG_4) && (input_val & 0x100)) {\n        input[16] = (uint *)((uint)input[16] | 8);\n        (*input)[5] = 0xfffff7ff;\n    }\n\n    if (input[16] != (uint *)0x0) {\n        process_input_and_set_flags_080052f0(input);\n    }\n}\n",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_set_flags_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_from_pointer_08002ec4",
                "param_1": "param_1",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void execute_function_from_pointer_08002ec4(int param_1)\n{\n    int function_pointer = *(int *)(param_1 + 0xc0);\n    int function_address = *(int *)(function_pointer + 8);\n    void (*function)() = (void (*)())function_address;\n    function();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_from_pointer_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value_to_find",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_08007306(int value_to_find, char* array) {\n  while (*array != -1) {\n    if (*array == value_to_find) {\n      return *(int *)(array + 4);\n    }\n    array += 12;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_device_and_update_data_08008f0e",
                "update_data_08003f0c": "update_data",
                "initialize_device_and_update_data_080036a2": "initialize_device"
            },
            "code": "void initialize_device_and_update_data_08008f0e(void)\n{\n  update_data(3);\n  initialize_device();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_data_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "check_and_assign_value_to_pointer_08002f2c",
                "param_1": "value_to_assign",
                "param_2": "value_to_compare",
                "param_3": "pointer_to_assign"
            },
            "code": "void check_and_assign_value_to_pointer_08002f2c(uint8_t value_to_assign, uint8_t value_to_compare, uint8_t* pointer_to_assign) {\n    switch(value_to_compare) {\n        case 0x90:\n            *(uint8_t*)PTR_DAT_08002f74 = value_to_assign;\n            break;\n        case 0xc0:\n            *(uint8_t*)PTR_DAT_08002f70 = value_to_assign;\n            break;\n        case 0xd0:\n            *(uint8_t*)PTR_DAT_08002f78 = value_to_assign;\n            break;\n        case 0xe0:\n            *(uint8_t*)PTR_DAT_08002f6c = value_to_assign;\n            break;\n        case 0xf4:\n            *(uint8_t*)PTR_DAT_08002f7c = value_to_assign;\n            break;\n        case 0xf5:\n            *(uint8_t*)PTR_DAT_08002f80 = value_to_assign;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_and_assign_value_to_pointer_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "process_data_08004954",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "data_len",
                "param_4": "result_ptr",
                "uVar1": "result",
                "puVar2": "data_ptr_val"
            },
            "code": "uint32_t process_data_08004954(uint32_t **data_ptr, uint32_t *data, int data_len, uint32_t *result_ptr) {\n  uint32_t result;\n  uint32_t *data_ptr_val;\n  \n  if ((*data_ptr)[0x3d] == '(') {\n    if (data == NULL) {\n      result = 1;\n    }\n    else if (data_len == 0) {\n      result = 1;\n    }\n    else if ((*data_ptr)[0xf] == 0x01) {\n      result = 2;\n    }\n    else {\n      (*data_ptr)[0xf] = 1;\n      data_ptr_val = *data_ptr;\n      if ((*data_ptr_val & 1) == 0) {\n        *data_ptr_val = *data_ptr_val | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      (*data_ptr)[0x3d] = '*';\n      (*data_ptr)[0x3e] = ' ';\n      result = 0;\n      data_ptr[0x10] = NULL;\n      data_ptr[9] = data;\n      (*data_ptr)[0xb] = result_ptr;\n      data_ptr[10] = (uint16_t)data_len;\n      (*data_ptr)[0xf] = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "process_data_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "set_flags_08005cec",
                "param_1": "target_address",
                "param_2": "flag_values",
                "uVar1": "new_flag_value_1",
                "uVar2": "current_value_1",
                "uVar3": "current_value_2",
                "DAT_08005d44": "PTR_08005d44"
            },
            "code": "void set_flags_08005cec(int target_address, uint *flag_values) {\n  uint new_flag_value_1;\n  uint new_flag_value_2;\n  uint new_flag_value_3;\n\n  uint current_flags = *(uint *)(target_address + 0x20) & 0xfffffffe;\n  uint current_value_1 = *(uint *)(target_address + 0x4);\n  uint current_value_2 = *flag_values;\n  new_flag_value_1 = (current_flags & 0xfffffffd) | flag_values[2];\n  if (target_address == DAT_08005d44) {\n    new_flag_value_1 = (new_flag_value_1 & 0xfffffff7) | flag_values[3];\n    new_flag_value_2 = (current_value_1 & 0xfffffcff) | flag_values[5] | flag_values[6];\n  }\n  *(uint *)(target_address + 0x4) = current_value_2;\n  *(uint *)(target_address + 0x18) = *(uint *)(target_address + 0x18) & 0xffffff8c | current_value_1;\n  *(uint *)(target_address + 0x34) = flag_values[1];\n  *(uint *)(target_address + 0x20) = new_flag_value_1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "set_flags_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_ptr_dat_to_22_0800886c",
                "PTR_DAT_08008878": "ptr_dat"
            },
            "code": "void set_ptr_dat_to_22_0800886c(void)\n{\n  int new_value = 22;\n  int* ptr = (int*)PTR_DAT_08008878;\n  *ptr = new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "add_byte_to_uint_and_store_in_ptr_dat_08003748",
                "PTR_DAT_08003758": "ptr_dat_c",
                "PTR_DAT_0800375c": "ptr_dat_b"
            },
            "code": "void add_byte_to_uint_and_store_in_ptr_dat_08003748(void)\n{\n  uint *ptr_dat_a = (uint *)PTR_DAT_08003758;\n  byte *PTR_DAT_0800375c = (byte *)PTR_DAT_0800375c;\n  int *PTR_DAT_08003758 = (int *)PTR_DAT_08003758;\n  uint a = *PTR_DAT_0800375c;\n  uint b = *PTR_DAT_08003758;\n  uint result = a + b;\n  *ptr_dat_a = result;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "add_byte_to_uint_and_store_in_ptr_dat_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "set_bits_080040e8",
                "param_1": "bits",
                "param_2": "flags",
                "uVar2": "flag_bit",
                "uVar3": "flag_value",
                "uVar4": "flag_type",
                "uVar5": "bit_index",
                "uVar6": "set_value",
                "uVar7": "bit_offset",
                "iVar8": "index_offset",
                "iVar10": "index_offset",
                "puVar1": "bit_ptr"
            },
            "code": "void set_bits_080040e8(uint *bits, uint *flags)\n{\n  uint *bit_ptr;\n  uint flag_bit;\n  uint flag_type;\n  uint flag_value;\n  uint bit_index = 0;\n  uint set_value = 0;\n  do {\n    if (bit_index > 0xf) {\n      return;\n    }\n    flag_bit = 1 << (bit_index & 0xff);\n    if ((*flags & flag_bit) == flag_bit) {\n      flag_type = flags[1];\n      if (flag_type == 0x12) {\n        set_value = flags[3] + 0xc;\n      }\n      else if (flag_type < 0x13) {\n        if (flag_type == 2) {\n          set_value = flags[3] + 8;\n        }\n        else if (flag_type == 1) {\n          set_value = flags[3];\n        }\n        else if (flag_type == 3) {\n          set_value = 0;\n        }\n        else if (flag_type == 0x11) {\n          set_value = flags[3] + 4;\n        }\n      }\n      else {\n        if (flag_type == PTR_DAT_080042c8) {\n          goto LAB_0800423a;\n        }\n        if (flag_type < PTR_DAT_080042c8) {\n          if (flag_type == PTR_DAT_080042cc) {\n            goto LAB_0800423a;\n          }\n          flag_value = PTR_DAT_080042cc + 0x10000;\n          flag_bit = PTR_DAT_080042cc;\n        }\n        else {\n          flag_value = PTR_DAT_080042c8 - 0x100000;\n          flag_bit = PTR_DAT_080042c8;\n        }\n        if ((flag_type != flag_value) && (flag_type != flag_bit - 0xf0000)) {\n          goto LAB_080040fe;\n        }\n      }\nLAB_0800423a:\n      if (flags[2] == 0) {\n        set_value = 4;\n      }\n      else if (flags[2] == 1) {\n        bits[4] = flag_bit;\n        set_value = 8;\n      }\n      else {\n        bits[5] = flag_bit;\n        set_value = 8;\n      }\n    }\n    bit_ptr = bits;\n    if (0xff < flag_bit) {\n      bit_index -= 8;\n      bit_ptr = bits + 1;\n    }\n    *bit_ptr = *bit_ptr & ~(0xf << (bit_index << 2 & 0xff)) | set_value << (bit_index << 2 & 0xff);\n    if ((flags[1] & 0x10000000) != 0) {\n      *(uint *)(PTR_DAT_080042bc + 0x18) = *(uint *)(PTR_DAT_080042bc + 0x18) | 1;\n      uint bit_offset = (bit_index & 3) << 2;\n      int index_offset = 4;\n      if (bit_ptr == PTR_DAT_080042d0) {\n        index_offset = 0;\n      }\n      else if (bit_ptr == PTR_DAT_080042d0 + 0x100) {\n        index_offset = 1;\n      }\n      else if (bit_ptr == PTR_DAT_080042d0 + 0x200) {\n        index_offset = 2;\n      }\n      else if (bit_ptr == PTR_DAT_080042d0 + 0x300) {\n        index_offset = 3;\n      }\n      *(uint *)(PTR_DAT_080042c0 + ((bit_index >> 2) + 2) * 4) = *(uint *)(PTR_DAT_080042c0 + ((bit_index >> 2) + 2) * 4) & ~(0xf << bit_offset) | index_offset << bit_offset;\n      if ((flags[1] & 0x10000) == 0) {\n        *PTR_DAT_080042c4 = *PTR_DAT_080042c4 & ~flag_bit;\n      }\n      else {\n        *PTR_DAT_080042c4 = *PTR_DAT_080042c4 | flag_bit;\n      }\n      if ((flags[1] & 0x20000) == 0) {\n        PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] & ~flag_bit;\n      }\n      else {\n        PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] | flag_bit;\n      }\n      if ((flags[1] & 0x100000) == 0) {\n        PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] & ~flag_bit;\n      }\n      else {\n        PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] | flag_bit;\n      }\n      if ((flags[1] & 0x200000) == 0) {\n        PTR_DAT_080042c4[3] = PTR_DAT_080042c4[3] & ~flag_bit;\n      }\n      else {\n        PTR_DAT_080042c4[3] = flag_bit | PTR_DAT_080042c4[3];\n      }\n    }\n  bit_index++;\n  } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "copy_data_to_buffer_0800288c",
                "param_1": "buffer_address",
                "param_2": "data",
                "puVar1": "buffer_pointer",
                "iVar2": "result",
                "uVar3": "return_value",
                "cVar4": "buffer_capacity_increment",
                "uVar5": "buffer_capacity",
                "uVar6": "buffer_size",
                "local_11": "data_character"
            },
            "code": "int copy_data_to_buffer_0800288c(int buffer_address, char data, int data_size) {\n    int result = 0;\n    if (*buffer_address == '\\0') {\n        result = copy_data_to_buffer_0800288c_08007ede(buffer_address + 0x14, &data, data_size);\n        if (result == 0) {\n            result = 1;\n        }\n    }\n    else {\n        uint buffer_size = (byte)*buffer_address + 1;\n        if ((byte)*buffer_address < buffer_size) {\n            if (buffer_size < 0x20) {\n                buffer_size = 0x20;\n            }\n            int allocated_memory = allocate_memory_08009908(*(int *)PTR_DAT_08002914, buffer_size);\n            *(int *)PTR_DAT_08002914 = allocated_memory;\n            if (allocated_memory == 0) {\n                result = 0;\n            }\n            else {\n                *(char *)(*(int *)PTR_DAT_08002914 + (uint)(byte)*PTR_DAT_08002918) = data;\n                char *buffer_capacity = PTR_DAT_08002918;\n                *buffer_capacity = *buffer_capacity + 1;\n                *buffer_address = *buffer_capacity;\n                result = 1;\n            }\n        }\n        else {\n            *(int *)(buffer_address + 4) = 1;\n            result = 0;\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_initialized_0800010c",
                "param_1": "input",
                "PTR_DAT_08000124": "ptr_data",
                "DAT_08000128": "fun_data",
                "PTR_FUN_0800012c": "ptr_fun"
            },
            "code": "int* check_initialized_0800010c(int* input)\n{\n    int* PTR_DAT_08000124 = PTR_DAT_08000124;\n    int* PTR_FUN_0800012c = PTR_FUN_0800012c;\n    int data = *PTR_DAT_08000124;\n    if (data == 0)\n    {\n        int DAT_08000128 = DAT_08000128;\n        if (DAT_08000128 != 0)\n        {\n            input = PTR_FUN_0800012c;\n        }\n        *PTR_DAT_08000124 = 1;\n    }\n    return input;\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "process_and_send_data_08002e26",
                "param_1": "data_offset",
                "param_2": "data_value",
                "copy_value_to_pointer_08003154": "copy_data_to_buffer",
                "process_data_with_offset_08002ddc": "process_data",
                "send_encoded_data_if_not_empty_08002df6": "send_encoded_data"
            },
            "code": "void process_and_send_data_08002e26(int data_offset, undefined4 data_value)\n{\n  *(undefined4 *)(data_offset + 0xc0) = data_value;\n  copy_data_to_buffer(data_offset + 0x40);\n  process_data(data_offset);\n  send_encoded_data(data_offset);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_and_send_data_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "validate_input_080036d8",
                "param_1": "input",
                "iVar1": "check_result",
                "check_value_08003fd8": "check_value",
                "PTR_DAT_0800371c": "divisor_ptr",
                "PTR_DAT_08003718": "byte_ptr",
                "0xf": "MAX_INPUT_VALUE"
            },
            "code": "int validate_input_080036d8(uint input) {\n    uint divisor = *(uint *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n    int check_result = check_value_08003fd8(divisor);\n    if (check_result != 0) {\n        return 1;\n    }\n    if (input > 0xf) {\n        return 1;\n    }\n    decode_and_store_08003f30(0xffffffff, input, 0);\n    *(uint *)PTR_DAT_08003720 = input;\n    return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "validate_input_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = find_character_or_negative_one_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  set_flags_08007438(param_1);\n  uVar3 = set_flag_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  set_bits_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080040e8",
                "FUN_08006bb8",
                "FUN_08007438"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "input",
                "uVar1": "index"
            },
            "code": "unsigned int find_index_080086e8(int input) {\n  unsigned int index;\n  if (input == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while (true) {\n      if (index > 4) {\n        return index;\n      }\n      if (input == *(int *)(PTR_DAT_08008708 + index * 4)) {\n        break;\n      }\n      index = (index + 1) & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "find_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "checkIfNegativeOneAndUpdate_0800a110",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void checkIfNegativeOneAndUpdate_0800a110(int *output, undefined4 input) {\n  undefined *ptr;\n  int result;\n  ptr = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  result = returnOne_08008850(input);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *output = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "checkIfNegativeOneAndUpdate_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_set_flags_08003b8c",
                "param_1": "ptr_param_1",
                "iVar1": "ptr_iVar1",
                "iVar2": "ptr_iVar2"
            },
            "code": "int check_and_set_flags_08003b8c(int *ptr_param_1)\n{\n  int ptr_iVar1;\n  int ptr_iVar2;\n\n  ptr_iVar2 = *ptr_param_1;\n  if ((*(uint *)(ptr_iVar2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(ptr_iVar2 + 8) = *(uint *)(ptr_iVar2 + 8) & 0xfffffffe;\n  ptr_iVar2 = get_value_from_pointer_08003760();\n  do {\n    if ((*(uint *)(*ptr_param_1 + 8) & 1) == 0) {\n      return 0;\n    }\n    ptr_iVar1 = get_value_from_pointer_08003760();\n  } while ((uint)(ptr_iVar1 - ptr_iVar2) < 3);\n  ptr_param_1[10] = ptr_param_1[10] | 0x10;\n  ptr_param_1[0xb] = ptr_param_1[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "local_54": "config_values",
                "local_4c": "config_values[1]",
                "local_44": "input_params[0]",
                "local_40": "input_params[1]",
                "local_3c": "input_params[2]",
                "local_38": "input_params[3]",
                "local_34": "input_params[4]",
                "local_30": "constants",
                "local_20": "constants[1]",
                "local_1c": "constants[2]",
                "local_14": "constants[3]",
                "local_10": "constants[4]",
                "local_c": "flags",
                "PTR_s__home_bo__arduino15_packages_STM_08003654": "error_message",
                "DAT_08003650": "constant_value"
            },
            "code": "void initialize_device_080035b8(void)\n{\n  int result;\n  uint value;\n  uint32_t config_values[2];\n  uint32_t input_params[5];\n  uint32_t constants[5] = {2, 1, 0x10, 2, 0};\n  uint32_t flags = 0x380000;\n  config_values[0] = 2;\n  config_values[1] = 0x8000;\n  result = set_config(config_values);\n  if (result != 0) {\n    infinite_loop(\"Failed to set config values\", 0x9c);\n  }\n  input_params[0] = 0xf;\n  input_params[1] = 2;\n  input_params[2] = 0;\n  input_params[3] = 0x400;\n  input_params[4] = 0;\n  result = process_input(input_params);\n  if (result != 0) {\n    infinite_loop(\"Failed to process input values\", 0x95);\n  }\n  value = get_pointer_value();\n  check_value((uint)((uint64_t)constants[4] * (uint64_t)value >> 0x26));\n  set_flag(4);\n  decode_and_store(0xffffffff, 0);\n  return;\n}",
            "called": [
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08005a1c",
                "FUN_080058ac",
                "FUN_08004024",
                "FUN_08005aa4",
                "FUN_08003f30",
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_device_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "receive_data_08001c18",
                "param_1": "device_address",
                "param_2": "expected_data_length",
                "param_3": "buffer_size",
                "param_4": "receive_buffer",
                "puVar1": "receive_data_ptr",
                "uVar2": "byte_read",
                "iVar3": "i",
                "iVar4": "difference",
                "bVar5": "is_buffer_empty",
                "PTR_DAT_08001cbc": "i2c_data",
                "PTR_DAT_08001cc4": "output_buffer",
                "PTR_DAT_08001cc8": "device_address_ptr",
                "PTR_s_I2C__Too_many_bytes_received_08001cc0": "too_many_bytes_received_error_message",
                "PTR_s_I2C__Too_few_bytes_received_08001ccc": "too_few_bytes_received_error_message"
            },
            "code": "void receive_data_08001c18(uint8_t device_address, uint8_t expected_data_length, int buffer_size, uint8_t* receive_buffer)\n{\n    uint8_t* receive_data_08001c18_ptr;\n    uint8_t byte_read;\n    uint8_t* error_message;\n    uint8_t* PTR_DAT_08001cc8 = receive_buffer;\n\n    if (expected_data_length == 0xff)\n    {\n        expected_data_length = 0;\n    }\n    else\n    {\n        initialize_PTR_DAT_08001cbc(PTR_DAT_08001cbc, device_address);\n        copy_data_to_buffer(expected_data_length & 0xff);\n        check_if_string_is_empty_08002a58(PTR_DAT_08001cbc, receive_buffer);\n    }\n\n    process_input_and_return_data(PTR_DAT_08001cbc, device_address, buffer_size);\n\n    if (buffer_size < calculate_difference_between_two_pointers(PTR_DAT_08001cbc, PTR_DAT_08001cc8))\n    {\n        error_message = PTR_s_I2C__Too_many_bytes_received_08001cc0;\n    }\n    else if (calculate_difference_between_two_pointers(PTR_DAT_08001cbc, PTR_DAT_08001cc8) < buffer_size)\n    {\n        error_message = PTR_s_I2C__Too_few_bytes_received_08001ccc;\n    }\n    else\n    {\n        receive_data_08001c18_ptr = PTR_DAT_08001cc8;\n        for (int i = 0; i < buffer_size; i++)\n        {\n            byte_read = read_byte_from_memory();\n            receive_data_08001c18_ptr++;\n            *receive_data_08001c18_ptr = byte_read;\n        }\n        encode_data_to_buffer(PTR_DAT_08001cc4, 0x77, buffer_size + 2U & 0xff, PTR_DAT_08001cc8);\n        return;\n    }\n    encode_string_to_buffer(PTR_DAT_08001cc4, error_message);\n    return;\n}",
            "called": [
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002f0a",
                "FUN_08002f14",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08002c14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "receive_data_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "set_bit_and_check_08006460",
                "param_1": "bits_array",
                "param_2": "bit_index",
                "puVar1": "bits"
            },
            "code": "int set_bit_and_check_08006460(uint **bits_array, uint bit_index){\n  uint *bits = *bits_array;\n  set_bit(bits, bit_index, 0);\n  if (((bits[8] & 0x1111) == 0) && ((bits[8] & 0x444) == 0)) {\n    bits[17] = bits[17] & 0xffff7fff;\n  }\n  bits = *bits_array;\n  if (((bits[8] & 0x1111) == 0) && ((bits[8] & 0x444) == 0)) {\n    *bits = *bits & 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_bit_and_check_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing_08004044();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "get_value_from_array_08008880",
                "param_1": "index",
                "bVar1": "is_index_in_range",
                "cVar2": "value_from_array",
                "uVar3": "value_to_return",
                "uVar4": "shift_amount",
                "PTR_DAT_080088d8": "array_of_values",
                "PTR_DAT_080088dc": "pointer_to_shift_amount",
                "find_value_in_array_08006d80": "find_value_in_array"
            },
            "code": "uint get_value_from_array_08008880(uint index){\n  bool is_index_in_range;\n  char value_from_array;\n  uint value_to_return;\n  uint shift_amount;\n  \n  if (index < 14) {\n    is_index_in_range = (index + 46) < 60;\n  }\n  else {\n    is_index_in_range = index < 60;\n  }\n  \n  if (is_index_in_range) {\n    if (index < 14) {\n      index += 46;\n    }\n    value_from_array = PTR_DAT_080088d8[index];\n  }\n  else {\n    value_from_array = -1;\n  }\n  \n  if (value_from_array == -1) {\n    value_to_return = 0;\n  }\n  else {\n    value_to_return = find_value_in_array();\n    shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 12) {\n      if (shift_amount < 12) {\n        return value_to_return >> (12 - shift_amount);\n      }\n      return value_to_return << (shift_amount - 12);\n    }\n  }\n  return value_to_return;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "get_value_from_array_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_data_from_param_08002ed2",
                "param_1": "param",
                "uVar1": "result",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void process_data_from_param_08002ed2(int param)\n{\n  uint result;\n  \n  uint function_ptr = **(code **)(**(int **)(param + 0xc0) + 0xc);\n  result = (*function_ptr)();\n  \n  if (result != 0xffffffff) {\n    process_data_08003474(param + 0x44,result & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_data_from_param_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_080073ae(int value1, int value2)\n{\n    if (value1 != value2) {\n        if (value1 == 0) {\n            return value2;\n        }\n        if (value2 == 0) {\n            return value1;\n        }\n        value1 = 0;\n    }\n    return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_index",
                "param_2": "set_bit",
                "uVar1": "value",
                "PTR_DAT_080004c8": "bit_array",
                "PTR_DAT_080004cc": "some_pointer",
                "PTR_DAT_080004d0": "another_pointer"
            },
            "code": "void set_bit_08000488(uint bit_index, int set_bit_08000488)\n{\n    uint *PTR_DAT_080004c8 = PTR_DAT_080004c8;\n    if (bit_index < 0xe) {\n        if (set_bit_08000488 == 0) {\n            *PTR_DAT_080004c8 = *PTR_DAT_080004c8 & ~(1 << (bit_index & 0xff));\n            return;\n        }\n        *PTR_DAT_080004c8 = 1 << (bit_index & 0xff) | *PTR_DAT_080004c8;\n        if (*PTR_DAT_080004cc == '\\0') {\n            uint value = get_value_from_array_08008880();\n            send_encoded_data_with_offset_08002ef2(PTR_DAT_080004d0, bit_index, value);\n            return;\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "data",
                "PTR_DAT_08003f2c": "ptr",
                "mask": "mask",
                "value": "value"
            },
            "code": "void update_data_08003f0c(uint8_t data){\n    uint32_t* PTR_DAT_08003f2c = (uint32_t*)(DAT_08003f2c + 0xc);\n    uint32_t mask = 0xf8ff;\n    uint32_t value = (data & 7) << 8 | (*PTR_DAT_08003f2c & mask) | 0x5fa0000;\n    *PTR_DAT_08003f2c = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_data_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "run_game_loop_08008f1c",
                "do_nothing_08008f0c": "do_nothing",
                "run_game_08001b48": "run_game",
                "process_data_and_send_encoded_data_080022f8": "process_and_send_encoded_data",
                "DAT_08008f38": "should_continue_processing_data",
                "process_shift_amount_08008bf4": "process_shift_amount"
            },
            "code": "void run_game_loop_08008f1c(void)\n{\n  do_nothing();\n  run_game();\n  do {\n    do {\n      process_and_send_encoded_data();\n    } while (DAT_08008f38());\n    process_shift_amount();\n  } while(true);\n}",
            "called": [
                "FUN_08008bf4",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_080022f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "run_game_loop_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "process_input_080058ac",
                "param_1": "input_array",
                "param_2": "input_length",
                "puVar1": "control_block",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "temp_value"
            },
            "code": "uint32_t process_input_080058ac(uint32_t *input_array, uint32_t input_length)\\n\\\n{\\n\\\n  uint32_t *control_block = control_block_ptr;\\n\\\n  uint32_t status = 0;\\n\\\n  uint32_t temp_value;\\n\\\n  if (((*control_block & 7) < input_length) && (*control_block = *control_block & 0xfffffff8 | input_length, input_length != (*control_block & 7))) {\\n\\\n    return 1;\\n\\\n  }\\n\\\n  if ((*input_array & 2) != 0) {\\n\\\n    control_block[1] = control_block[1] & 0xffffff0f | input_array[2];\\n\\\n  }\\n\\\n  if ((*input_array & 1) != 0) {\\n\\\n    temp_value = input_array[1];\\n\\\n    if (temp_value == 1) {\\n\\\n      if ((*control_block & 0x20000) == 0) {\\n\\\n        return 1;\\n\\\n      }\\n\\\n    }\\n\\\n    else if ((temp_value != 2) && ((*control_block & 2) == 0)) {\\n\\\n      return 1;\\n\\\n    }\\n\\\n    control_block[1] = temp_value | control_block[1] & 0xfffffffc;\\n\\\n    uint32_t start_time = get_current_time();\\n\\\n    if (input_array[1] == 1) {\\n\\\n      while ((control_block[1] & 0xc) != 4) {\\n\\\n        uint32_t current_time = get_current_time();\\n\\\n        if (5000 < (current_time - start_time)) {\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n    else if (input_array[1] == 2) {\\n\\\n      while ((control_block[1] & 0xc) != 8) {\\n\\\n        uint32_t current_time = get_current_time();\\n\\\n        if (5000 < (current_time - start_time)) {\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n    else {\\n\\\n      while ((control_block[1] & 0xc) != 0) {\\n\\\n        uint32_t current_time = get_current_time();\\n\\\n        if (5000 < (current_time - start_time)) {\\n\\\n          return 3;\\n\\\n        }\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  control_block = control_block_ptr;\\n\\\n  if ((input_length < (*control_block & 7)) && (*control_block = *control_block & 0xfffffff8 | input_length, input_length != (*control_block & 7))) {\\n\\\n    return 1;\\n\\\n  }\\n\\\n  if ((*input_array & 4) != 0) {\\n\\\n    control_block[1] = control_block[1] & 0xfffff8ff | input_array[3];\\n\\\n  }\\n\\\n  if ((*input_array & 8) != 0) {\\n\\\n    control_block[1] = control_block[1] & 0xffffc7ff | input_array[4] << 3;\\n\\\n  }\\n\\\n  uint32_t result = calculate_result();\\n\\\n  *(uint32_t *)result_ptr = result >> result_shift_table[(control_block[1] << 0x18) >> 0x1c];\\n\\\n  validate_input(0xf);\\n\\\n  return status;\\n\\\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "process_input_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag_index",
                "uVar1": "return_value",
                "DAT_08006c48": "flag_data",
                "DAT_08006c4c": "return_value_0",
                "DAT_08006c50": "return_value_1",
                "DAT_08006c54": "return_value_2",
                "DAT_08006c58": "return_value_3",
                "DAT_08006c5c": "return_value_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag_index)\n{\n  uint32_t* flag_ptr = (uint32_t*)(DAT_08006c48 + 0x18);\n  uint32_t flag_value = 0;\n  switch(flag_index) {\n    case 0:\n      flag_value = 4;\n      return DAT_08006c4c;\n    case 1:\n      flag_value = 8;\n      return DAT_08006c50;\n    case 2:\n      flag_value = 0x10;\n      return DAT_08006c54;\n    case 3:\n      flag_value = 0x20;\n      return DAT_08006c58;\n    case 4:\n      flag_value = 0x40;\n      return DAT_08006c5c;\n    default:\n      return 0;\n  }\n  *flag_ptr |= flag_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "*param_1": "*flag_ptr",
                "DAT_080074d0": "FLAG_A",
                "PTR_DAT_080074dc": "PTR_A",
                "0x40000000": "FLAG_B",
                "_DAT_4002101c": "_DAT_B",
                "DAT_080074d4": "FLAG_C",
                "DAT_080074d8": "FLAG_D"
            },
            "code": "void set_flags_08007438(int *flag_ptr) {\n  int flag_value = *flag_ptr;\n  if (flag_value == DAT_080074d0) {\n    *(uint *)(DAT_080074d0 + 0xe418) |= 0x800;\n    *(int **)PTR_DAT_080074dc = flag_ptr;\n  }\n  if (flag_value == FLAG_B) {\n    _DAT_4002101c |= 1;\n    *(int **)(PTR_B + 4) = flag_ptr;\n  }\n  if (flag_value == DAT_080074d4) {\n    *(uint *)(DAT_080074d4 + 0x20c1c) |= 2;\n    *(int **)(PTR_C + 8) = flag_ptr;\n  }\n  if (flag_value == DAT_080074d8) {\n    *(uint *)(DAT_080074d8 + 0x2081c) |= 4;\n    *(int **)(PTR_D + 0xc) = flag_ptr;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "process_input_08004aec",
                "param_1": "input_array",
                "DAT_08004b7c": "PTR_DAT_08004b7c",
                "uint": "unsigned int",
                "int": "signed int"
            },
            "code": "int process_input_08004aec(uint **input_array){\n    uint *flag_ptr = input_array[0xb];\n    char *char_ptr = (char *)((int)input_array + 0x3d);\n\n    if ((flag_ptr == (uint *)0x4 || flag_ptr == (uint *)0x8) && (*char_ptr == '(')){\n        flag_ptr = DAT_08004b7c;\n        (*input_array)[1] &= 0xfffff8ff;\n        (*input_array)[5] = 0xfffffbff;\n        **input_array &= 0xfffffbff;\n        input_array[0xc] = (uint *)0x0;\n        *char_ptr = 0x20;\n        *(char_ptr + 1) = 0;\n        process_input_08004aec_and_set_flags_08007ff0();\n    }\n    else if (*char_ptr == '!'){\n        flag_ptr = DAT_08004b7c;\n        input_array[0xc] = (uint *)0x21;\n        *char_ptr = 0x20;\n        *(char_ptr + 1) = 0;\n        (*input_array)[1] &= 0xfffff8ff;\n        (*input_array)[5] = 0xfffffbff;\n        **input_array &= 0xfffffbff;\n        do_nothing_08004a22();\n    }\n    else{\n        (*input_array)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "process_input_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "return_one_0800887c",
                "undefined4": "int",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "int return_one_0800887c(void)\n{\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "return_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "check_and_set_08004728",
                "param_1": "list",
                "param_2": "value_list",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "result",
                "puVar2": "current_value",
                "local_c": "loop_counter"
            },
            "code": "int check_and_set_08004728(uint **list, uint *value_list, uint *param_3, uint16_t param_4) {\n    int result;\n    uint *current_value;\n    int loop_counter;\n\n    if (**list == ' ') {\n        loop_counter = (uint)((unsigned long long)DAT_080047ec * (unsigned long long)(*(uint *)PTR_DAT_080047e8 >> 3) >> 0x28) * 0x19;\n        do {\n            if (loop_counter == 0) {\n                list[0xc] = (uint *)0x0;\n                **((char **)list + 0xf) = 0;\n                **((char **)list + 0x3d) = ' ';\n                result = 3;\n                return result;\n            }\n            current_value = *list;\n            loop_counter = loop_counter + -1;\n        } while ((current_value[6] & 2) != 0);\n        if (**((char **)list + 0xf) == 1) {\n            result = 2;\n        }\n        else {\n            **((char **)list + 0xf) = 1;\n            if ((*current_value & 1) == 0) {\n                *current_value = *current_value | 1;\n            }\n            **list = **list & 0xfffff7ff;\n            **((char **)list + 0x3d) = '!';\n            **((char **)list + 0x3e) = 0x10;\n            result = 0;\n            list[0x10] = (uint *)0x0;\n            list[9] = param_3;\n            **((uint16_t **)list + 5) = param_4;\n            list[0xb] = DAT_080047f0;\n            **((uint16_t **)list + 4) = **((uint16_t **)list + 5);\n            list[0x11] = value_list;\n            **list = **list | 0x100;\n            **((uint32_t **)list + 1) = **((uint32_t **)list + 1) | 0x700;\n            **((char **)list + 0xf) = 0;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "check_and_set_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "param_1": "buffer_address",
                "param_2": "data_address",
                "param_3": "data_size",
                "uVar1": "current_index"
            },
            "code": "int copy_data_to_buffer_08007ede(int buffer_address, int data_address, uint data_size)\n{\n  uint current_index;\n  if (data_size > 0x20) {\n    return 2;\n  }\n  for (current_index = 0; current_index < data_size; current_index++) {\n    *(undefined *)(buffer_address + current_index + 0x68) = *(undefined *)(data_address + current_index);\n    *(char *)(buffer_address + 0x88) = *(char *)(buffer_address + 0x88) + 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "decode_and_store_0800863c",
                "param_1": "combination",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param4",
                "iVar1": "is_valid",
                "uVar2": "index_value",
                "PTR_DAT_08008688": "combination_array",
                "PTR_DAT_0800868c": "combination_index_array",
                "decode_and_store_08003f30": "decode_and_store_helper_1",
                "set_bit_at_index_08003f94": "decode_and_store_helper_2",
                "check_input_080068d6": "decode_and_store_helper_3"
            },
            "code": "void decode_and_store_0800863c(int combination, int param1, int param2, int index, int param4) {\n  int is_valid = is_combination_valid();\n  if (is_valid == 0) {\n    uint8_t index_value = *(uint8_t *)(combination + 0x44);\n    PTR_DAT_08008688[index_value] = param1;\n    PTR_DAT_0800868c[index_value] = combination;\n    decode_and_store_0800863c_08003f30((int)*(char *)(combination + 0x5a),0,1,index_value,param_4);\n    set_bit_at_index_08003f94((int)*(char *)(combination + 0x5a));\n    check_input(PTR_DAT_08008688[index_value], combination + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "decode_and_store_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_true_value_thunk_0800887c",
                "undefined4": "int"
            },
            "code": "int get_true_value_thunk_0800887c(void)\n{\n  return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "get_true_value_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "set_flags_based_on_input_080074e0",
                "param_1": "input",
                "DAT_08007534": "FLAG_A",
                "DAT_08007538": "FLAG_C",
                "DAT_0800753c": "FLAG_D",
                "DAT_08007540": "data",
                "uint": "uint32_t",
                "*": "*",
                "&": "&",
                "=": "="
            },
            "code": "void set_flags_based_on_input_080074e0(int *input)\n{\n    uint32_t *DAT_08007540 = (uint32_t *)DAT_08007540;\n    if (*input == DAT_08007534)\n    {\n        DAT_08007540[3] &= ~DAT_08007534_BIT;\n    }\n    if (*input == FLAG_B)\n    {\n        DAT_08007540[4] &= ~FLAG_B_BIT;\n    }\n    if (*input == DAT_08007538)\n    {\n        DAT_08007540[4] &= ~DAT_08007538_BIT;\n    }\n    if (*input == DAT_0800753c)\n    {\n        DAT_08007540[4] &= ~DAT_0800753c_BIT;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_if_not_null_080073c0",
                "PTR_DAT_080073d0": "function_pointer_ptr",
                "PTR_DAT_080073d4": "data_ptr"
            },
            "code": "void execute_code_if_not_null_080073c0(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080073d0;\n  if (function_pointer != NULL) {\n    function_pointer(*(int*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "update_character_info_080084b0",
                "cVar1": "character_id",
                "iVar4": "index",
                "uVar5": "value",
                "puVar2": "character_info_ptr",
                "uVar3": "character_info",
                "PTR_DAT_080084f0": "character_ids",
                "PTR_DAT_080084f4": "character_id_array",
                "PTR_DAT_080084f8": "character_info_array",
                "PTR_DAT_080084fc": "character_info",
                "FUNC_08008078": "update_display"
            },
            "code": "void update_character_info_080084b0(void)\n{\n  char character_id;\n  int index;\n  int value;\n  undefined *PTR_DAT_080084fc_ptr;\n  undefined uVar1;\n  \n  character_id = PTR_DAT_080084f0[1];\n  index = find_index_in_array(character_id, PTR_DAT_080084f4);\n  if (index != 0) {\n    value = find_value_in_array(index, character_value_array);\n    uVar1 = get_PTR_DAT_080084fc(value, PTR_DAT_080084f8);\n    PTR_DAT_080084fc_ptr = PTR_DAT_080084fc;\n    PTR_DAT_080084fc[0x59] = uVar1;\n    PTR_DAT_080084fc[0x58] = character_id;\n    *(int *)(PTR_DAT_080084fc + 0x48) = 9600;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x54) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x4c) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x50) = 0;\n    update_display(PTR_DAT_080084fc);\n  }\n  return;\n}",
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "update_character_info_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "get_value_from_param_08004050",
                "param_1": "param",
                "uVar1": "value",
                "puVar2": "puVar"
            },
            "code": "uint get_value_from_param_08004050(uint **param)\n{\n  uint value;\n  if (*(char *)((int)param + 0x21) != '\\x02') {\n    param[14] = (uint *)0x4;\n    return 1;\n  }\n  **param &= 0xfffffff1;\n  **param &= 0xfffffffe;\n  uint *puVar = *param;\n  if (puVar == PTR_DAT_080040e0) {\n    value = 1;\n  }\n  else if (puVar == PTR_DAT_080040e0 + 5) {\n    value = 0x10;\n  }\n  else if (puVar == PTR_DAT_080040e0 + 10) {\n    value = 0x100;\n  }\n  else if (puVar == PTR_DAT_080040e0 + 15) {\n    value = 0x1000;\n  }\n  else if (puVar == PTR_DAT_080040e0 + 20) {\n    value = 0x10000;\n  }\n  else if (puVar == PTR_DAT_080040e0 + 25) {\n    value = 0x100000;\n  }\n  else {\n    value = 0x1000000;\n  }\n  *(uint *)(PTR_DAT_080040e4 + 4) = value;\n  *(char *)((int)param + 0x21) = 1;\n  *(uint *)(param + 8) = 0;\n  if (param[13] != (uint *)0x0) {\n    (*(code *)param[13])();\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "get_value_from_param_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "initialize_data_if_needed_08008e14",
                "param_1": "input1",
                "param_2": "input2",
                "initialize_data_pointer_08008df8": "initialize_data_pointer",
                "PTR_DAT_08008e3c": "PTR_DATA"
            },
            "code": "void initialize_data_if_needed_08008e14(int input1, int input2)\n{\n    if ((input1 == 1) && (input2 == 0xffff)) {\n        initialize_data_pointer(PTR_DAT_08008e3c, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_if_needed_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "get_shifted_value_from_pointer_08005a28",
                "uVar1": "value",
                "get_value_from_pointer_08005a1c": "get_value_from_pointer",
                "DAT_08005a40": "data_pointer",
                "PTR_DAT_08005a44": "shift_amounts",
                "index": "shift_amount_index",
                "shifted_amount": "shift_amount",
                "shifted_value": "shifted_pointer_value"
            },
            "code": "uint get_shifted_value_from_pointer_08005a28(void)\n{\n  uint value = get_value_from_pointer();\n  uint shifted_value = *(int *)(DAT_08005a40 + 4) << 0x15;\n  uint index = shifted_value >> 0x1d;\n  uint shifted_amount = PTR_DAT_08005a44[index];\n  return value >> shifted_amount;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_shifted_value_from_pointer_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "calculate_length_080095a8",
                "param_1": "start_pos",
                "param_2": "data",
                "param_3": "length",
                "param_4": "param_4",
                "param_5": "callback",
                "uVar2": "extra_byte",
                "uVar3": "extra_byte_length",
                "bVar4": "has_extra_byte",
                "iVar1": "callback_result",
                "current_pos": "current_pos"
            },
            "code": "uint32_t calculate_length_080095a8(uint32_t start_pos, uint32_t* data, uint32_t* length, uint32_t param_4, code* callback)\\n\\\n{\\n\\\n  int32_t i = 0;\\n\\\n  uint32_t max_length = data[4];\\n\\\n  uint32_t min_length = data[2];\\n\\\n  bool has_extra_byte = (*(char*)(data + 0x43) != \"\\0\");\\n\\\n  if (max_length < min_length) {\\n\\\n    max_length = min_length;\\n\\\n  }\\n\\\n  *length = max_length;\\n\\\n  if (has_extra_byte) {\\n\\\n    *length = max_length + 1;\\n\\\n  }\\n\\\n  if ((int32_t)(*data << 0x1a) < 0) {\\n\\\n    *length = *length + 2;\\n\\\n  }\\n\\\n  uint32_t current_pos = *data & 6;\\n\\\n  if (current_pos == 0) {\\n\\\n    for (; (int32_t)current_pos < (int32_t)(data[3] - *length); current_pos++) {\\n\\\n      int32_t callback_result = (*callback)(start_pos, param_4, (int)data + 0x19, 1);\\n\\\n      if (callback_result == -1) {\\n\\\n        return 0xffffffff;\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  uint32_t extra_byte = (uint32_t)*(byte*)((int)data + 0x43);\\n\\\n  if (extra_byte != 0) {\\n\\\n    extra_byte = 1;\\n\\\n  }\\n\\\n  uint32_t extra_byte_length = extra_byte;\\n\\\n  if ((int32_t)(*data << 0x1a) < 0) {\\n\\\n    *(undefined*)((int)data + extra_byte + 0x43) = 0x30;\\n\\\n    extra_byte_length = extra_byte + 2;\\n\\\n    *(undefined*)((int)data + extra_byte + 0x44) = *(undefined*)((int)data + 0x45);\\n\\\n  }\\n\\\n  int32_t callback_result = (*callback)(start_pos, param_4, (int)data + 0x43, extra_byte_length);\\n\\\n  if (callback_result != -1) {\\n\\\n    uint32_t remaining_length = data[3];\\n\\\n    bool has_remaining_length = (*data & 6) != 4;\\n\\\n    if (has_remaining_length) {\\n\\\n      remaining_length = 0;\\n\\\n    }\\n\\\n    uint32_t length_diff = 0;\\n\\\n    if (!has_remaining_length) {\\n\\\n      length_diff = remaining_length - *length;\\n\\\n    }\\n\\\n    if (!has_remaining_length) {\\n\\\n      length_diff = length_diff & ~((int32_t)length_diff >> 0x1f);\\n\\\n    }\\n\\\n    if (max_length < min_length) {\\n\\\n      length_diff = length_diff + (min_length - max_length);\\n\\\n    }\\n\\\n    while (true) {\\n\\\n      if (length_diff == remaining_length) {\\n\\\n        return 0;\\n\\\n      }\\n\\\n      callback_result = (*callback)(start_pos, param_4, (int)data + 0x1a, 1);\\n\\\n      if (callback_result == -1) {\\n\\\n        break;\\n\\\n      }\\n\\\n      remaining_length = remaining_length + 1;\\n\\\n    }\\n\\\n  }\\n\\\n  return 0xffffffff;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "calculate_length_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "process_data_08003002",
                "param_1": "data",
                "decode_and_update_flags_08008990": "decode_and_update_flags",
                "process_data_loop_08002fca": "process_data_loop",
                "do_nothing_08008ac4": "do_nothing",
                "0xd": "constant1",
                "0x28": "constant2",
                "0xd2": "constant3",
                "0xfa": "constant4",
                "0x7d": "constant5"
            },
            "code": "void process_data_08003002(int data){\n    char* ptr = (char*)(data + 0x1f8);\n    if (*ptr != \"\\0\") {\n        return;\n    }\n    decode_and_update_flags(0xd,1);\n    process_data_08003002_loop(data,0xd,2,0x28,0xd2);\n    do_nothing(0xfa);\n    process_data_08003002_loop(data,0xd,5,0x28,0xd2);\n    do_nothing(0x7d);\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_data_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "validate_input_08003bd8",
                "param_1": "input_array",
                "iVar1": "flags",
                "uVar1": "uVar1",
                "uVar2": "uVar2",
                "uVar3": "uVar3"
            },
            "code": "int validate_input_08003bd8(int *input_array)\n{\n    int flags = check_and_set_flags(input_array);\n    if (input_array == NULL) {\n        return 1;\n    }\n    if (input_array[10] == 0) {\n        input_array[11] = 0;\n        *(unsigned char *)(input_array + 9) = 0;\n        update_flag();\n    }\n    else if ((input_array[10] & 0x10) || (flags != 0)) {\n        input_array[10] |= 0x10;\n        return 1;\n    }\n    else {\n        input_array[10] = (input_array[10] & 0xffffeefd) | 2;\n        unsigned int uVar1 = input_array[1] | input_array[7] | (input_array[3] << 1);\n        unsigned int uVar2 = 0;\n        if (input_array[2] == 0x100 || input_array[2] == 1) {\n            uVar2 = (input_array[4] - 1) * 0x100000;\n        }\n        unsigned int uVar3 = 0;\n        if (input_array[2] == 0x100) {\n            uVar3 = 0x100;\n        }\n        else if (input_array[2] == 1) {\n            uVar3 = 0x100;\n        }\n        if (input_array[5] == 1) {\n            if (input_array[3] == 0) {\n                uVar3 |= (input_array[6] - 1) * 0x2000 | 0x800;\n            }\n            else {\n                input_array[10] |= 0x20;\n                input_array[11] |= 1;\n            }\n        }\n        *(unsigned int *)(*input_array + 4) = *(unsigned int *)(*input_array + 4) & 0xffff16ff | uVar3;\n        *(unsigned int *)(*input_array + 8) = *(unsigned int *)(*input_array + 8) & DAT_08003ce0 | uVar1;\n        *(unsigned int *)(*input_array + 0x2c) = *(unsigned int *)(*input_array + 0x2c) & 0xff0fffff | uVar2;\n        if (uVar1 != (DAT_08003ce4 & *(unsigned int *)(*input_array + 8))) {\n            input_array[10] = (input_array[10] & 0xffffffed) | 0x10;\n            input_array[11] |= 1;\n            return 1;\n        }\n        input_array[11] = 0;\n        input_array[10] = (input_array[10] & 0xfffffffc) | 1;\n        return 0;\n    }\n}",
            "called": [
                "FUN_08006ca8",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "validate_input_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data",
                "iVar2": "array_start",
                "bVar3": "is_array_start",
                "PTR_PTR_DAT_08009da8": "global_array_pointer",
                "PTR_LAB_08009cd0_1_08009dac": "data_label_1",
                "findEmptySlotInArray_08009db0": "find_empty_slot_in_array",
                "initialize_data_08009cdc": "initialize_data_function"
            },
            "code": "void initialize_data_08009d50(int data)\n{\n    if (*(int *)(data + 0x18) == 0) {\n        *(undefined4 *)(data + 0x48) = 0;\n        *(undefined4 *)(data + 0x4c) = 0;\n        *(undefined4 *)(data + 0x50) = 0;\n        int array_start = *(int *)PTR_PTR_DAT_08009da8;\n        *(undefined **)(data + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n        bool is_array_start = data == array_start;\n        if (is_array_start) {\n            array_start = 1;\n        }\n        if (is_array_start) {\n            *(int *)(data + 0x18) = array_start;\n        }\n        undefined4 empty_slot_1 = find_empty_slot_in_array();\n        *(undefined4 *)(data + 4) = empty_slot_1;\n        undefined4 empty_slot_2 = find_empty_slot_in_array(data);\n        *(undefined4 *)(data + 8) = empty_slot_2;\n        undefined4 empty_slot_3 = find_empty_slot_in_array(data);\n        *(undefined4 *)(data + 0xc) = empty_slot_3;\n        initialize_data_08009d50_08009cdc(*(undefined4 *)(data + 4),4,0);\n        initialize_data_08009d50_08009cdc(*(undefined4 *)(data + 8),9,1);\n        initialize_data_08009d50_08009cdc(*(undefined4 *)(data + 0xc),0x12,2);\n        *(undefined4 *)(data + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_0800937c",
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_data_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_values_if_param2_equals_113_08003366",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x68)": "*(int *)(base_address + 0x68)",
                "*(undefined4 *)(param_1 + 0x40)": "*(int *)(base_address + 0x40)"
            },
            "code": "void set_values_if_param2_equals_113_08003366(int base_address, int param2, int value1, int value2) {\n  if (param2 == 0x71) {\n    *(int *)(base_address + 0x68) = value1;\n    *(int *)(base_address + 0x40) = value2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_if_param2_equals_113_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "dest_offset",
                "param_2": "dest_buffer",
                "param_3": "src_length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "code": "void copy_data_080091b0(int dest_offset, undefined *dest_buffer, int src_length)\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  dest_ptr = (undefined *)(dest_offset - 1);\n  src_ptr = dest_buffer + src_length;\n  for (; dest_buffer != src_ptr; dest_buffer++) {\n    dest_ptr++;\n    *dest_ptr = *dest_buffer;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "imported": false,
            "current_name": "copy_data_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "get_result_08009108",
                "param_1": "val1",
                "param_2": "val2",
                "DAT_08009120": "global_var"
            },
            "code": "long long get_result_08009108(uint32_t val1, uint32_t val2)\n{\n  if (DAT_08009120 != 0) {\n    return ((long long)val1 << 32) | 2;\n  }\n  return (long long)val2 << 32;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "get_result_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "process_and_wait_for_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "PTR_DAT_0800a228": "DATA_PTR_1",
                "PTR_DAT_0800a22c": "DATA_PTR_2",
                "PTR_DAT_0800a230": "DATA_PTR_3",
                "PTR_DAT_0800a234": "DATA_PTR_4",
                "PTR_DAT_0800a238": "DATA_PTR_5",
                "PTR_DAT_0800a23c": "DATA_PTR_6",
                "PTR_DAT_0800a240": "DATA_PTR_7",
                "PTR_DAT_0800a244": "DATA_PTR_8",
                "PTR_DAT_0800a248": "DATA_PTR_9",
                "PTR_DAT_0800a24c": "DATA_PTR_10",
                "PTR_DAT_0800a250": "DATA_PTR_11",
                "PTR_DAT_0800a254": "DATA_PTR_12"
            },
            "code": "void process_and_wait_for_data_0800a18c(void)\n{\n  code *jump_table_ptr;\n  jump_table_ptr = process_and_wait_for_data_0800a18c;\n  process_data_and_wait();\n  if (*(int *)PTR_DAT_0800a228 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a228 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a22c < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a22c = 1;\n  }\n  if (*(int *)PTR_DAT_0800a230 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a230 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a234 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a234 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a238 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a238 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a23c < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a23c = 1;\n  }\n  if (*(int *)PTR_DAT_0800a240 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a240 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a244 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a244 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a248 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a248 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a24c < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a24c = 1;\n  }\n  if (*(int *)PTR_DAT_0800a250 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a250 = 1;\n  }\n  if (*(int *)PTR_DAT_0800a254 < 0)\n  {\n    *(undefined4 *)PTR_DAT_0800a254 = 1;\n  }\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "process_and_wait_for_data_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "allocate_memory_08009908",
                "param_1": "block_size",
                "param_2": "data_size",
                "uVar1": "ptr",
                "uVar2": "data",
                "uVar3": "calculated_value",
                "PTR_PTR_DAT_08009914": "memory_pointer",
                "allocate_memory_block_08009270": "allocate_memory_block",
                "copy_data_080091b0": "copy_data",
                "insert_node_080091d8": "insert_node",
                "calculate_value_0800a154": "calculate_value"
            },
            "code": "uint allocate_memory_08009908(uint block_size, uint data_size)\n{\n  undefined4 ptr = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (block_size == 0)\n  {\n    return allocate_memory_08009908_block(ptr, data_size, data_size, PTR_PTR_DAT_08009914);\n  }\n  else if (data_size == 0)\n  {\n    insert_node(PTR_PTR_DAT_08009914, block_size);\n    return data_size;\n  }\n  else\n  {\n    uint calculated_value = calculate_value();\n    if (calculated_value >= data_size)\n    {\n      uint allocated_memory = allocate_memory_08009908_block(ptr, block_size, data_size, PTR_PTR_DAT_08009914);\n      if (allocated_memory != 0)\n      {\n        copy_data(allocated_memory, block_size, data_size);\n        insert_node(PTR_PTR_DAT_08009914, block_size);\n        return allocated_memory;\n      }\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "allocate_memory_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "process_data_08008a24",
                "param_1": "data_index",
                "param_2": "bit_mask",
                "param_3": "output_value",
                "param_4": "data_array",
                "iVar1": "bit_index",
                "uVar2": "value",
                "puVar3": "data_ptr",
                "uVar4": "data_value"
            },
            "code": "void process_data_08008a24(uint data_index, undefined4 bit_mask, undefined4 output_value, undefined *data_array)\n{\n  int bit_index;\n  uint data_value;\n  undefined *data_ptr;\n\n  if (data_index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_08008a64[data_index];\n    data_ptr = PTR_DAT_08008a64;\n  }\n  else {\n    data_value = 0xffffffff;\n    data_ptr = data_array;\n  }\n  if ((data_value != 0xffffffff) && (bit_index = get_bit_at_index(data_value, PTR_DAT_08008a68, output_value, data_ptr, data_array), bit_index != 0)) {\n    uint value = get_data_by_index((data_value << 0x18) >> 0x1c);\n    set_value_at_offset_if_param_not_zero(value, 1 << (data_value & 0xf) & 0xffff, bit_mask);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_080005f8",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "process_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "readValueAndReturn_08008abc",
                "get_value_and_return_0800723c": "getValueAndReturn"
            },
            "code": "void readValueAndReturn_08008abc(void)\n{\n  getValueAndReturn();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "readValueAndReturn_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "process_input_08002b68",
                "param_1": "input_buffer",
                "param_2": "input_length",
                "param_3": "output_buffer",
                "param_4": "output_length",
                "param_5": "input_type",
                "iVar1": "check_result",
                "uVar2": "input_byte_count",
                "uVar3": "input_length_copy",
                "PTR_DAT_08002bf4": "global_pointer",
                "PTR_DAT_08002bf8": "global_pointer2",
                "PTR_DAT_08002bfc": "global_pointer3",
                "initialize_data_08002a30": "initialize_input",
                "check_if_string_is_empty_08002a58": "check_if_input_empty",
                "check_input_08007f0e": "check_input"
            },
            "code": "uint32_t process_input_08002b68(uint32_t *input_buffer, uint32_t input_length, uint32_t *output_buffer, uint32_t output_length, uint8_t input_type) {\n  int check_result;\n  uint32_t input_value;\n  uint8_t input_byte_count = (uint8_t)input_type;\n  if (input_buffer[4] == 0) {\n    return 0;\n  }\n  allocate_memory_if_needed(param_3);\n  if (*PTR_DAT_08002bf4 != 0) {\n    if (input_byte_count != 0) {\n      initialize_input(input_buffer, input_length);\n      if (input_byte_count > 3) {\n        input_byte_count = 3;\n      }\n      while (input_byte_count > 0) {\n        input_value = (input_length >> ((input_byte_count - 1) * 8)) & 0xff;\n        (**(code **)*input_buffer)(input_buffer, input_value);\n        input_byte_count--;\n      }\n      check_if_input_empty(input_buffer, 0);\n    }\n    check_result = check_input(input_buffer + 5, (input_length & 0x7f) << 1, *PTR_DAT_08002bf4, param_3, output_length);\n    if (check_result != 0) {\n      output_length = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)output_length;\n    return output_length;\n  }\n  input_buffer[1] = 1;\n  return 0;\n}\n",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "process_input_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "PTR_DAT_080005f0": "memory_start",
                "PTR_DAT_080005f4": "memory_end"
            },
            "code": "void clear_memory_080005e0(void)\n{\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 255;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_input_and_set_flag_08008020",
                "param_1": "input_value",
                "iVar1": "input_index",
                "subtract_four_from_input_08007f78": "subtract_four_from_input",
                "set_bit_and_flags_if_space_080049e0": "set_bit_and_flags_if_space"
            },
            "code": "void check_input_and_set_flag_08008020(int input_value) {\\n  int input_index = subtract_four_from_input();\\n  if (*(char *)(input_index + 0x5d) == \"\\0\") {\\n    set_bit_and_flags_if_space(input_value);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_input_and_set_flag_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "data2",
                "iVar2": "data3",
                "iVar3": "data4",
                "mask1": "0xffffefff",
                "mask2": "0xffffbfff",
                "mask3": "0xffff8cff",
                "mask4": "0xffffdfff"
            },
            "code": "void update_data_08005dac(int data_address, int *data_array)\n{\n    uint mask1 = 0xffffefff;\n    uint mask2 = 0xffffbfff;\n    uint mask3 = 0xffff8cff;\n    uint mask4 = 0xffffdfff;\n    uint data1 = *(uint *)(data_address + 0x20) & mask1;\n    uint data2 = *(uint *)(data_address + 4);\n    int data3 = *data_array;\n    int data4 = data_array[2];\n    if (data_address == PTR_08005df0)\n    {\n        data2 = data2 & mask2 | data_array[5] << 6;\n    }\n    *(uint *)(data_address + 4) = data2;\n    *(uint *)(data_address + 0x1c) = data1 | data3 << 8;\n    *(int *)(data_address + 0x40) = data_array[1];\n    *(uint *)(data_address + 0x20) = data1 | data4 << 0xc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "check_and_update_values_0800674e",
                "param_1": "input_array",
                "*(char *)((int)param_1 + 0x39)": "input_array[9]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "do_nothing_0800674c": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "input_array[9]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(input_array[0] + 0xc)",
                "calculate_values_08006538": "calculate_values",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(input_array[0] + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(input_array[0] + 0x14)",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[10]"
            },
            "code": "int check_and_update_values_0800674e(int *input_array)\n{\n    if (input_array != NULL) {\n        if (input_array[9] == 0) {\n            input_array[14] = 0;\n            do_nothing();\n        }\n        input_array[9] = 0x24;\n        *(uint *)(input_array[0] + 0xc) &= 0xffffdfff;\n        calculate_values(input_array);\n        *(uint *)(input_array[0] + 0x10) &= 0xffffb7ff;\n        *(uint *)(input_array[0] + 0x14) &= 0xffffffd5;\n        *(uint *)(input_array[0] + 0xc) |= 0x2000;\n        input_array[15] = 0;\n        input_array[9] = 0x20;\n        input_array[10] = 0x20;\n        return 0;\n    }\n    return 1;\n}\n",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "check_and_update_values_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_function_if_flag_set_0800771c",
                "param_1": "input_parameter",
                "iVar1": "subtracted_value",
                "subtract_four_from_input_08007718": "subtract_four_from_input"
            },
            "code": "void execute_function_if_flag_set_0800771c(int input_parameter)\n{\n  int subtracted_value = subtract_four_from_input();\n  if ((*(code **)(subtracted_value + 0x4c) != (code *)0x0) && (*(char *)(input_parameter + 0x1c) == '\\x01')) {\n    (**(code **)(subtracted_value + 0x4c))(subtracted_value,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "pointer_array",
                "param_2": "bit_mask",
                "param_3": "expected_bit_value",
                "param_4": "integer_value",
                "param_5": "max_value",
                "iVar1": "difference"
            },
            "code": "int check_parameters_080066e8(uint **pointer_array,uint bit_mask,uint expected_bit_value,int integer_value,uint max_value)\n{\n  int difference;\n  do {\n    difference = (bit_mask & ~**pointer_array) == 0;\n    if (difference != expected_bit_value) {\n      return 0;\n    }\n  } while ((max_value == 0xffffffff) || ((max_value != 0 && (difference = get_value_from_pointer_08003760() - integer_value) <= max_value))));\n  (*pointer_array)[3] &= 0xfffffe5f;\n  (*pointer_array)[5] &= 0xfffffffe;\n  *(undefined *)((int)pointer_array + 0x39) = 0x20;\n  *(undefined *)((int)pointer_array + 0x3a) = 0x20;\n  *(undefined *)(pointer_array + 0xe) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_input_and_return_last_index_08009358",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_array",
                "param_4": "array_length",
                "iVar1": "last_index",
                "puVar2": "array_end",
                "iVar3": "current_index"
            },
            "code": "int process_input_and_return_last_index_08009358(undefined4 input_1, undefined4 input_2, undefined* input_array, int array_length) {\n  int last_index = 0;\n  undefined* array_end = input_array + array_length;\n  int current_index = array_length;\n  do {\n    if (input_array == array_end) {\n      return 0;\n    }\n    last_index = process_input_0800932c(input_1, *input_array, input_2, array_length, current_index);\n    array_length = last_index + 1;\n    input_array = input_array + 1;\n  } while (array_length != 0);\n  return last_index;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_input_and_return_last_index_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_two_pointers_0800270c",
                "*PTR_DAT_08002718": "first_pointer",
                "*PTR_DAT_0800271c": "second_pointer",
                "uint": "unsigned int",
                "byte": "uint8_t"
            },
            "code": "int calculate_difference_between_two_pointers_0800270c(void)\n{\n    uint8_t* *PTR_DAT_08002718 = PTR_DAT_08002718;\n    uint8_t* *PTR_DAT_0800271c = PTR_DAT_0800271c;\n    uint difference = (uint)(**PTR_DAT_08002718) - (uint)(**PTR_DAT_0800271c);\n    return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_between_two_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "obj_address",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "param_4": "parameter3"
            },
            "code": "void set_parameters_08003370(int obj_address, int parameter1, int parameter2, int parameter3){\n\t*(int *)(obj_address + 0x6c) = parameter2;\n\t*(int *)(obj_address + 0x44) = parameter3;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_parameters_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "param_1": "input_address",
                "param_2": "input_value",
                "param_3": "input_flag",
                "iVar1": "subtracted_value"
            },
            "code": "void process_input_08007fa0(int input_address, int input_value, int input_flag, undefined4 param_4)\n{\n  int subtracted_value = subtract_four_from_input();\n  if (input_flag == *(int *)(input_address + 0xc)) {\n    if (input_value == 0) {\n      *(undefined *)(subtracted_value + 0x88) = 0;\n      *(undefined *)(subtracted_value + 0x5c) = 0;\n      if (*(code **)(subtracted_value + 100) != (code *)0x0) {\n        (**(code **)(subtracted_value + 100))();\n      }\n      process_input_08007fa0_080048c8(input_address, subtracted_value + 0x68, *(undefined *)(subtracted_value + 0x88), 8);\n      return;\n    }\n    *(undefined *)(subtracted_value + 0x5c) = 1;\n    process_data_08004954(input_address, subtracted_value + 0x68, 0x20, 8, param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "process_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "process_data_08003376",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "length",
                "bVar1": "is_valid_length",
                "*param_1": "*buffer",
                "*(uint *)(param_1 + 8)": "*(unsigned int *)(buffer + 8)",
                "*(code **)(param_1 + 100)": "*(code **)(buffer + 100)",
                "*(undefined4 *)(param_1 + 0x3c)": "*(unsigned int *)(buffer + 60)",
                "*(undefined *)(*(int *)(param_1 + 4) + param_3)": "*(buffer + *(int *)(buffer + 4) + length)"
            },
            "code": "void process_data_08003376(char *buffer, char data, unsigned int length) {\n  bool is_valid_length = length >= *(unsigned int *)(buffer + 8);\n  if (is_valid_length) {\n    code *function_ptr = *(code **)(buffer + 100);\n    if (function_ptr != (code *)0x0) {\n      *buffer = 1;\n      (*function_ptr)(*(unsigned int *)(buffer + 60));\n      is_valid_length = length >= *(unsigned int *)(buffer + 8);\n    }\n  }\n  if (!is_valid_length) {\n    *(buffer + *(int *)(buffer + 4) + length) = data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_data_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "process_shift_amount_08008bf4",
                "DAT_08008c18": "is_shift_amount_initialized",
                "PTR_DAT_08008c1c": "shift_amount_pointer",
                "calculate_shift_amount_08008afa": "calculate_shift_amount"
            },
            "code": "void process_shift_amount_08008bf4(void)\n{\n  if (DAT_08008c18) {\n    calculate_shift_amount(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_shift_amount_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "base_address",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_08005430(int base_address) {\n  int offset = 0x40;\n  return *(int *)(base_address + offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "read_byte_from_memory_08002720",
                "PTR_DAT_08002740": "memory_pointer_1",
                "PTR_DAT_08002744": "memory_pointer_2",
                "PTR_DAT_08002748": "memory_pointer_3",
                "bVar1": "current_byte",
                "bVar2": "byte_to_return"
            },
            "code": "unsigned int read_byte_from_memory_08002720() {\n  unsigned char current_byte = *PTR_DAT_08002740;\n  if ((unsigned int)current_byte < (unsigned int)(unsigned char)*PTR_DAT_08002744) {\n    unsigned char byte_to_return = *(unsigned char *)(*(int *)PTR_DAT_08002748 + (unsigned int)current_byte);\n    *PTR_DAT_08002740 = current_byte + 1;\n    return (unsigned int)byte_to_return;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "read_byte_from_memory_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "encode_and_send_data_080031ce",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_type",
                "param_4": "num_iterations",
                "param_5": "offset",
                "puVar1": "function_ptr",
                "uVar2": "i"
            },
            "code": "void encode_and_send_data_080031ce(uint32_t *data_ptr, uint32_t data_size, uint32_t data_type, uint32_t num_iterations, int offset) {\n  uint32_t *function_ptr;\n  uint32_t i;\n  function_ptr = (uint32_t *)*data_ptr;\n  if (function_ptr != (uint32_t *)0x0) {\n    (**(void (**)(uint32_t *,uint32_t,uint32_t,uint32_t,uint32_t))(function_ptr[0]))(function_ptr, 0xf0, data_type, *(void (**)(void))(function_ptr[0]), num_iterations);\n    (***(void (***)(uint32_t *))(function_ptr))((uint32_t *)*data_ptr, 0x79);\n    (***(void (***)(uint32_t *))(function_ptr))((uint32_t *)*data_ptr, data_size);\n    (***(void (***)(uint32_t *))(function_ptr))((uint32_t *)*data_ptr, data_type);\n    for (i = 0; i < num_iterations; i = i + 1) {\n      encode_data(data_ptr, 1, offset + i, 0);\n    }\n    (***(void (***)(uint32_t *))(function_ptr))((uint32_t *)*data_ptr, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "find_and_set_offset_08009918",
                "param_1": "output_offset",
                "param_2": "input_offset",
                "puVar1": "offset_pointer",
                "iVar2": "found_offset"
            },
            "code": "void find_and_set_offset_08009918(int *output_offset, undefined4 input_offset) {\n  undefined *offset_pointer;\n  int found_offset;\n  offset_pointer = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  found_offset = findOffset_08008804(input_offset);\n  if ((found_offset == -1) && (*(int *)offset_pointer != 0)) {\n    *output_offset = *(int *)offset_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "find_and_set_offset_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "count_down_08005434",
                "param_1": "num",
                "local_4": "countdown_value",
                "DAT_0800545c": "global_constant",
                "PTR_DAT_08005458": "global_pointer"
            },
            "code": "void count_down_08005434(int num)\n{\n  int countdown_value = num * (uint)((ulonglong)DAT_0800545c * (ulonglong)*(uint *)PTR_DAT_08005458 >> 0x29);\n  do {\n    countdown_value--;\n  } while (countdown_value != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "set_flags_and_return_08005e2e",
                "param_1": "input",
                "puVar1": "input_pointer"
            },
            "code": "void set_flags_and_return_08005e2e(uint **input)\n{\n  uint *input_pointer;\n  input_pointer = *input;\n\n  // Set a flag\n  *(undefined *)((int)input + 0x3d) = 2;\n\n  // Check some conditions\n  if ((input_pointer[8] & 0x1111) == 0) {\n    if ((input_pointer[8] & 0x444) == 0) {\n      *input_pointer = *input_pointer & 0xfffffffe;\n    }\n  }\n\n  // Call another function\n  set_flags_based_on_input_and_return_08007110(input);\n\n  // Reset flags\n  *(undefined *)((int)input + 0x3d) = 0;\n  *(undefined *)(input + 0xf) = 0;\n\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "iVar1": "input_value",
                "subtract_four_from_input_08007718": "subtract_four_from_input",
                "code": "function_pointer"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int input_value = subtract_four_from_input();\n  if (*(code **)(input_value + 0x48) != (code *)0x0) {\n    (**(code **)(input_value + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_params_08002968",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "mem_value1",
                "iVar2": "mem_value2",
                "PTR_DAT_080029ec": "mem_value3",
                "PTR_DAT_080029f0": "mem_value4",
                "PTR_DAT_080029f4": "mem_value5",
                "PTR_DAT_080029f8": "mem_value6",
                "PTR_DAT_080029fc": "mem_value7",
                "PTR_DAT_08002a00": "mem_value8",
                "PTR_DAT_08002a04": "mem_value9",
                "PTR_DAT_08002a08": "mem_value10",
                "PTR_DAT_08002a0c": "mem_value11",
                "DAT_08002a10": "mem_value12",
                "PTR_LAB_08002774_1_08002a14": "mem_value13",
                "PTR_LAB_08002b00_1_08002a18": "mem_value14"
            },
            "code": "void initialize_params_08002968(int param1, uint32_t param2) {\\n    int mem_value1;\\n    int mem_value2;\\n    int PTR_DAT_080029ec;\\n    int PTR_DAT_080029f0;\\n    int PTR_DAT_080029f4;\\n    int PTR_DAT_080029f8;\\n\\n    *PTR_DAT_080029ec = 0;\\n    *PTR_DAT_080029f0 = 0;\\n    if (*(int *)PTR_DAT_080029f4 != 0) {\\n        fill_memory_with_value_080091c6(*(int *)PTR_DAT_080029f4, 0, *PTR_DAT_080029f8);\\n    }\\n    *PTR_DAT_080029fc = 0;\\n    *PTR_DAT_08002a00 = 0;\\n    if (*(int *)PTR_DAT_08002a04 != 0) {\\n        fill_memory_with_value_080091c6(*(int *)PTR_DAT_08002a04, 0, *PTR_DAT_08002a08);\\n    }\\n    *PTR_DAT_08002a0c = 0;\\n    mem_value1 = (param2 & 0x7f) << 1;\\n    *(char *)(param1 + 0x10) = (char)mem_value1;\\n    if (param2 == 0x33) {\\n        *(undefined *)(param1 + 0x11) = 1;\\n    }\\n    else {\\n        *(undefined *)(param1 + 0x11) = 0;\\n    }\\n    mem_value2 = param1 + 0x14;\\n    FUNC_080077b0(mem_value2, DAT_08002a10, 0x4000, mem_value1, *(undefined *)(param1 + 0x11));\\n    if (*(char *)(param1 + 0x11) == \"\\0\") {\\n        set_param_value_if_not_zero_08007f8e(mem_value2, PTR_LAB_08002774_1_08002a14);\\n        update_param_08007f7c(mem_value2, PTR_LAB_08002b00_1_08002a18);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_params_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "handle_input_08004ccc",
                "param_1": "input",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t handle_input_08004ccc(uint32_t **input)\n{\n  uint32_t *flag_ptr = input[11];\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(int16_t *)((int)input + 0x2a) == 0) {\n      if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n        (*input)[1] &= 0xfffff8ff;\n        **input |= 0x200;\n        input[12] = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          *(char *)((int)input + 0x3e) = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        (*input)[1] &= 0xfffff8ff;\n        input[12] = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3e) = 0;\n        *(char *)((int)input + 0x3d) = 0x20;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      flag_ptr = input[9];\n      input[9] = (uint32_t *)((int)flag_ptr + 1);\n      (*input)[4] = (uint32_t)*(char *)flag_ptr;\n      *(int16_t *)((int)input + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "handle_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "is_param2_bit_set_in_param1_080042d4",
                "param_1": "ptr_param1",
                "param_2": "param2_mask",
                "*(uint *)(param_1 + 8)": "param1_mask"
            },
            "code": "int is_param2_bit_set_in_param1_080042d4(uint32_t* ptr_param1, uint32_t param2_mask)\n{\n  uint32_t* ptr_param1_offset = ptr_param1 + 2;\n  uint32_t param1_mask = *ptr_param1_offset;\n  if ((param2_mask & param1_mask) == 0) {\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_in_param1_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_value_at_offset_0800542a",
                "param_1": "base_address"
            },
            "code": "undefined get_value_at_offset_0800542a(int base_address) {\n  return *(undefined *)(base_address + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_at_pointer_0800457c",
                "param_1": "ptr_array",
                "*pbVar1": "byte_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*short_ptr",
                "pbVar1": "byte_ptr",
                "*(uint *)(*param_1 + 0x10)": "*(unsigned int *)(*ptr_array + 16)"
            },
            "code": "int increment_byte_at_pointer_0800457c(int *ptr_array)\n{\n    short *short_ptr = (short *)(ptr_array + 10);\n    byte *byte_ptr = (byte *)ptr_array[9];\n    if (*short_ptr != 0)\n    {\n        ptr_array[9] = (int)(byte_ptr + 1);\n        *(unsigned int *)(*ptr_array + 16) = (unsigned int)*byte_ptr;\n        *short_ptr -= 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_at_pointer_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "fill_memory_with_value_080091c6",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "code": "void fill_memory_with_value_080091c6(void* dest, char value, int size) {\n  void* end_address = dest + size;\n  for (; dest != end_address; dest++) {\n    *dest = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08006d80",
                "FUN_08009d24",
                "FUN_08009cdc",
                "FUN_08002a58",
                "FUN_08009db0",
                "FUN_08002968",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "process_input_and_update_status_0800a07a",
                "param_1": "input",
                "param_2": "status_address",
                "iVar1": "result",
                "uVar2": "status_flag",
                "bVar3": "input_failed"
            },
            "code": "void process_input_and_update_status_0800a07a(int input, int status_address)\n{\n  int result = process_input(input, *(short *)(status_address + 0xe));\n  bool input_failed = result == -1;\n  ushort status_flag = *(ushort *)(status_address + 0xc);\n  if (input_failed) {\n    status_flag &= 0xefff;\n  }\n  else {\n    *(int *)(status_address + 0x54) = result;\n    status_flag |= 0x1000;\n  }\n  *(ushort *)(status_address + 0xc) = status_flag;\n}\n",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "process_input_and_update_status_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "check_and_update_08003a20",
                "param_1": "pointer_to_data",
                "param_2": "data_size",
                "iVar1": "next_value",
                "iVar3": "current_value",
                "local_14": "delay",
                "value": "initial_value"
            },
            "code": "int check_and_update_08003a20(int *pointer_to_data, unsigned int data_size) {\n    int current_value = *pointer_to_data;\n    if ((*(unsigned int *)(current_value + 8) & 1) == 0) {\n        *(unsigned int *)(current_value + 8) = *(unsigned int *)(current_value + 8) | 1;\n        unsigned int delay = (unsigned int)((unsigned long long)DAT_08003a9c * (unsigned long long)*(unsigned int *)PTR_DAT_08003a98 >> 0x32);\n        while (delay != 0) {\n            delay--;\n        }\n        int value = get_value_from_pointer_08003760(pointer_to_data, data_size, (int)((unsigned long long)DAT_08003a9c * (unsigned long long)*(unsigned int *)PTR_DAT_08003a98));\n        do {\n            if ((*(unsigned int *)(*pointer_to_data + 8) & 1) != 0) {\n                return 0;\n            }\n            int next_value = get_value_from_pointer_08003760();\n        } while ((unsigned int)(next_value - value) < 3);\n        pointer_to_data[10] = pointer_to_data[10] | 0x10;\n        pointer_to_data[0xb] = pointer_to_data[0xb] | 1;\n        *(unsigned char *)(pointer_to_data + 9) = 0;\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": false,
            "current_name": "check_and_update_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "updateMemory_080064b0",
                "param_1": "memoryAddress",
                "*param_1": "*memoryAddress",
                "uint": "unsigned int",
                "undefined": "unsigned char",
                "0xc": "12",
                "0x14": "20",
                "0x3a": "58"
            },
            "code": "void updateMemory_080064b0(int *memoryAddress)\n{\n  uint *memoryAddressPlus12 = (uint *)(*memoryAddress + 0xc);\n  *memoryAddressPlus12 = *memoryAddressPlus12 & 0xfffffedf;\n  uint *memoryAddressPlus20 = (uint *)(*memoryAddress + 0x14);\n  *memoryAddressPlus20 = *memoryAddressPlus20 & 0xfffffffe;\n  undefined *memoryAddressPlus58 = (undefined *)((int)memoryAddress + 0x3a);\n  *memoryAddressPlus58 = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "updateMemory_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data_array",
                "param_2": "data_2",
                "param_3": "data_3"
            },
            "code": "void initialize_data_08009cdc(undefined4 *data_array, undefined2 data_2, undefined2 data_3) {\n    *data_array = 0;\n    data_array[1] = 0;\n    data_array[2] = 0;\n    *(undefined2 *)(data_array + 3) = data_2;\n    data_array[0x19] = 0;\n    *(undefined2 *)((int)data_array + 0xe) = data_3;\n    data_array[4] = 0;\n    data_array[5] = 0;\n    data_array[6] = 0;\n    fill_memory_with_value_080091c6(data_array + 0x17, 0, 8);\n    data_array[8] = data_array;\n    data_array[9] = DAT_08009d14;\n    data_array[10] = PTR_process_input_0800a042_1_08009d18;\n    data_array[0xb] = PTR_process_input_and_update_status_0800a07a_1_08009d1c;\n    data_array[0xc] = PTR_LAB_0800a09e_1_08009d20;\n    return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "check_if_string_is_empty_08002a58",
                "param_1": "address",
                "iVar1": "check_value",
                "uVar2": "result"
            },
            "code": "int check_if_string_is_empty_08002a58(int address)\n{\n  int check_value;\n  int result;\n  \n  if (*(char *)(address + 0x11) == '\\0') {\n    result = 4;\n  }\n  else {\n    check_value = check_value_08007e74(address + 0x14,*PTR_DAT_08002ab0,*(int *)PTR_DAT_08002aac,\n                         *PTR_DAT_08002aa8);\n    if (check_value == 0) {\n      result = 0;\n    }\n    else if (check_value == 1) {\n      result = 1;\n    }\n    else {\n      result = 4;\n    }\n    if (*(int *)PTR_DAT_08002aac != 0) {\n      fill_memory_with_value_080091c6(*(int *)PTR_DAT_08002aac,0,*PTR_DAT_08002ab4);\n    }\n    *PTR_DAT_08002ab8 = 0;\n    *PTR_DAT_08002aa8 = 0;\n    *PTR_DAT_08002abc = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002b68",
                "FUN_08002ac0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "check_if_string_is_empty_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "calculate_and_set_value_080026b0",
                "param_1": "base_address",
                "param_2": "value",
                "calculate_new_value_08008ef4": "calculate_new_value",
                "calculate_value_0800267c": "set_calculated_value"
            },
            "code": "void calculate_and_set_value_080026b0(int base_address, int value)\n{\n    if (value < 544)\n    {\n        if (value < 0)\n        {\n            value = 0;\n        }\n        else if (180 < value)\n        {\n            value = 180;\n        }\n        value = calculate_new_value(value, 0, 180, (136 - *(char *)(base_address + 1)) * 4, (600 - *(char *)(base_address + 2)) * 4);\n    }\n    set_calculated_value(base_address, value);\n    return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "calculate_and_set_value_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "check_and_update_memory_08006092",
                "param_1": "memory_block",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)memory_block + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(memory_block + 15)",
                "FUNC_08006e68": "call_memory_update",
                "update_memory_08005fe8": "update_memory",
                "0x0": "NULL"
            },
            "code": "int check_and_update_memory_08006092(int *memory_block)\\n{\\n    if (memory_block != NULL) {\\n        if (*(char *)((int)memory_block + 0x3d) == \"\\0\") {\\n            *(char *)(memory_block + 15) = 0;\\n            call_memory_update();\\n        }\\n        *(char *)((int)memory_block + 0x3d) = 2;\\n        update_memory_08005fe8(*memory_block, memory_block + 1);\\n        *(char *)((int)memory_block + 0x3d) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_and_update_memory_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "initialize_character_data_if_param_1_is_1_08008d8c",
                "param_1": "character_id",
                "param_2": "character_data",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2",
                "PTR_DAT_08008dac": "PTR_CHARACTER_DATA_ARRAY",
                "DAT_08008da8": "DAT_CHARACTER_DATA_SIZE",
                "initialize_character_data_08008d30": "initialize_character_data"
            },
            "code": "void initialize_character_data_if_param_1_is_1_08008d8c(int character_id, int character_data, undefined4 unknown_param_1, undefined4 unknown_param_2)\n{\n    if (character_id != 1) {\n        return;\n    }\n    if (character_data == 0xffff) {\n        initialize_character_data(PTR_DAT_08008dac, DAT_08008da8, unknown_param_1, 0xffff, unknown_param_2);\n    }\n    return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_character_data_if_param_1_is_1_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "increment_values_in_array_080004d4",
                "param_1": "index",
                "param_2": "value",
                "iVar1": "i",
                "puVar2": "array",
                "PTR_DAT_080004fc": "array",
                "increment_and_assign_08002580": "increment_and_assign"
            },
            "code": "void increment_values_in_array_080004d4(int index, int value)\n{\n  int PTR_DAT_080004fc_length = 11;\n  int *PTR_DAT_080004fc = PTR_DAT_080004fc;\n  if (index == 1 && value == 0xffff) {\n    for (int i = 0; i < PTR_DAT_080004fc_length; i++) {\n      increment_and_assign_08002580(PTR_DAT_080004fc);\n      PTR_DAT_080004fc += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "increment_values_in_array_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = get_byte_at_offset_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = get_byte_at_offset_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      clear_memory_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = get_byte_from_ptr_dat_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        process_data_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = find_char_index_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_char_index_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      set_bit_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    set_value_at_index_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        decode_and_update_flags_08008990(param_1,0);\n        update_memory_value_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = get_byte_at_offset_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          process_data_08008a24(param_1,0);\n        }\n        decode_and_update_flags_08008990(param_1,1);\n        update_memory_value_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_char_index_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = find_char_index_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          decode_and_update_flags_08008990(param_1,0);\n        }\n        update_memory_value_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = check_param_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        decode_and_update_flags_08008990(param_1,1);\n        decode_and_process_data_080088e0(param_1,0);\n        update_memory_value_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        update_memory_value_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = get_byte_from_ptr_dat_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          update_servo_flags_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      encode_string_to_buffer_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = check_param_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = check_param_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        update_memory_value_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_char_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        decode_and_update_flags_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        update_memory_value_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        set_value_at_index_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08008990",
                "FUN_080026f8",
                "FUN_08002fa8",
                "FUN_08000588",
                "FUN_08002fc2",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_080005e0",
                "FUN_08008a24",
                "FUN_08000488"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "execute_function_with_params_and_stack_pointer_08009124",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "stack_pointer",
                "uStack_8": "param3",
                "uStack_4": "param4",
                "PTR_PTR_DAT_08009144": "unchanged"
            },
            "code": "void execute_function_with_params_and_stack_pointer_08009124(void* function_pointer, int param1, int param2, int* stack_pointer)\n{\n  int param3 = *stack_pointer;\n  int param4 = *(stack_pointer+1);\n  function_pointer(param1, param2, &param3, param1, &param3);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointer_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_byte_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "buffer"
            },
            "code": "unsigned char get_byte_at_offset_08002fa0(int offset, unsigned char *buffer) {\n    return *(buffer + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "int",
                "*(undefined4 *)": "int*",
                "param_1 + 0x28": "base_address + offset",
                "*(undefined4 *)(param_1 + 0x28)": "*ptr_value",
                "ptr_value": "ptr_value",
                "value": "value",
                "offset": "offset"
            },
            "code": "int get_value_at_offset_08003a1c(int base_address) {\n    int offset = 0x28;\n    int* ptr_value = (int*)(base_address + offset);\n    int value = *ptr_value;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "execute_if_both_flags_set_08005cb4",
                "param_1": "flags",
                "**param_1": "first_flag",
                "(*param_1)[1]": "second_flag",
                "execute_code_if_not_null_080073c0": "execute_code_if_not_null",
                "*(undefined4 *)(DAT_08005ce8 + 0x14)": "*(uint *)(DAT_08005ce8 + 0x14)",
                "*(undefined *)((int)param_1 + 0x11)": "*(uchar *)((int)flags + 0x11)"
            },
            "code": "void execute_if_both_flags_set_08005cb4(uint **flags) {\n  uint first_flag = **flags & 2;\n  uint second_flag = (*flags)[1] & 2;\n  if (first_flag && second_flag) {\n    execute_code_if_not_null();\n    (*flags)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n  *(uchar *)((int)flags + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_both_flags_set_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_from_ptr_08007744",
                "param_1": "param",
                "PTR_": "ptr",
                "DAT_": "value"
            },
            "code": "int get_value_from_ptr_08007744(int param)\n{\n    int* PTR_ = *(int *)(param + 4);\n    int DAT_ = *(PTR_ + 9);\n    return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_ptr_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "param_1": "values",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "shift_value_1",
                "iVar4": "shift_value_3",
                "iVar5": "shift_value_5",
                "iVar6": "shift_value_6",
                "iVar7": "shift_value_7",
                "iVar8": "value_1",
                "iVar9": "value_2",
                "iVar10": "value_4",
                "iVar11": "value_5",
                "iVar12": "value_ptr"
            },
            "code": "void calculate_values_08006538(int *values)\n{\n  uint shift_value_1, shift_value_2, shift_value_3, shift_value_4, shift_value_5, shift_value_6, shift_value_7, shift_value_8, shift_value_9, shift_value_10, shift_value_11;\n  uint result;\n  uint *value_ptr = (uint *)(*values);\n  uint value_1 = values[1];\n  uint value_2 = values[2];\n  uint value_3 = values[3];\n  uint value_4 = values[4];\n  uint value_5 = values[5];\n  uint value_6 = values[6];\n  uint *result_ptr = (uint *)(value_ptr + 2);\n\n  *result_ptr = (*result_ptr & 0xffffcfff) | value_3;\n  *(result_ptr - 1) = value_2 | value_4 | value_5 | (*(result_ptr - 1) & 0xffffe9f3);\n  *(result_ptr + 1) = (*(result_ptr + 1) & 0xfffffcff) | value_6;\n\n  if (value_ptr != PTR_DAT_080066e0) {\n    shift_value_1 = get_shifted_value_from_pointer_08005a28();\n    shift_value_2 = DAT_080066e4;\n    shift_value_3 = get_shifted_value_from_pointer_08005a28();\n    shift_value_4 = get_shifted_value_from_pointer_08005a28();\n    shift_value_5 = get_shifted_value_from_pointer_08005a28();\n    shift_value_6 = get_shifted_value_from_pointer_08005a28();\n    shift_value_7 = get_shifted_value_from_pointer_08005a28();\n    shift_value_8 = get_shifted_value_from_pointer_08005a28();\n    shift_value_9 = get_shifted_value_from_pointer_08005a28();\n    shift_value_10 = get_shifted_value_from_pointer_08005a28();\n    shift_value_11 = get_shifted_value_from_pointer_08005a28();\n  }\n  else {\n    shift_value_1 = get_shifted_value_from_pointer_08005a48();\n    shift_value_2 = DAT_080066e4;\n    shift_value_3 = get_shifted_value_from_pointer_08005a48();\n    shift_value_4 = get_shifted_value_from_pointer_08005a48();\n    shift_value_5 = get_shifted_value_from_pointer_08005a48();\n    shift_value_6 = get_shifted_value_from_pointer_08005a48();\n    shift_value_7 = get_shifted_value_from_pointer_08005a48();\n    shift_value_8 = get_shifted_value_from_pointer_08005a48();\n    shift_value_9 = get_shifted_value_from_pointer_08005a48();\n    shift_value_10 = get_shifted_value_from_pointer_08005a48();\n    shift_value_11 = get_shifted_value_from_pointer_08005a48();\n  }\n\n  result = ((shift_value_2 * (((shift_value_6 * 25) / (value_5 << 2)) + (((shift_value_2 * ((shift_value_7 * 25) / (value_1 << 2))) >> 37) * -100) + 50)) >> 32 << 23) >> 28;\n  result += ((shift_value_2 * (((shift_value_4 * 25) / (value_4 << 2)) + (((shift_value_2 * ((shift_value_5 * 25) / (value_2 << 2))) >> 37) * -100) + 50)) >> 37) & 0xf0;\n  result += (shift_value_2 * ((shift_value_1 * 25) / (value_1 << 2)) >> 37) * 16;\n\n  *(result_ptr + 2) = result;\n}\n",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_value_at_offset_080042e2",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset",
                "*(int *)(param_1 + 0x10)": "*(int *)(base_address + 0x10)"
            },
            "code": "void set_value_at_offset_080042e2(int base_address, int value, int offset)\n{\n  if (offset == 0) {\n    *(int *)(base_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_memory_value_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value",
                "*(char *)(param_1 + param_2 + 0xcc)": "current_value",
                "*(undefined *)(param_1 + param_2 + 0xcc)": "*(char *)(base_address + offset + 0xcc)"
            },
            "code": "void update_memory_value_08002fa8(int base_address, int offset, char new_value){\n  char current_value = *(char *)(base_address + offset + 0xcc);\n  if (current_value != '\\x7f') {\n    *(char *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_memory_value_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "encode_data_to_buffer_0800325a",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "length",
                "param_4": "offset",
                "puVar1": "function_pointer",
                "uVar2": "i"
            },
            "code": "void encode_data_to_buffer_0800325a(uint8_t *buffer, uint8_t data, uint32_t offset, uint32_t length) {\n  uint8_t *function_pointer;\n  uint32_t i;\n  function_pointer = (uint8_t *)*buffer;\n  if (function_pointer != NULL) {\n    (**(void (**)(uint8_t *, uint8_t))(function_pointer))(function_pointer, 0xf0);\n    (***(void (***)(uint8_t *))(*buffer))(buffer, data);\n    for (i = 0; i < length; i++) {\n      encode_data_to_buffer_0800325a(buffer, 1, offset + i, 0);\n    }\n    (***(void (***)(uint8_t *))(*buffer))(buffer, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "imported": false,
            "current_name": "encode_data_to_buffer_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_node_080091d8",
                "param_1": "head",
                "param_2": "data",
                "param_3": "size",
                "param_4": "error_code",
                "puVar1": "pointer_to_data",
                "extraout_r1": "next_node",
                "ppiVar2": "next_node",
                "ppiVar3": "prev_node",
                "piVar4": "data_ptr",
                "ppiVar5": "current_node",
                "ppiVar6": "next_node",
                "ppiVar7": "tail"
            },
            "code": "void insert_node_080091d8(int **head, int data, int size, int *error_code){\n  if (size == 0) {\n    return;\n  }\n  int **tail = head + (size - 1);\n  if (*tail < 0) {\n    tail += *tail;\n  }\n  do_nothing1();\n  int **current_node = *(int ***)PTR_DAT_0800926c;\n  if (current_node == NULL) {\n    *tail = NULL;\n    *(int ***)PTR_DAT_0800926c = tail;\n    int **next_node = NULL;\n    int **prev_node = *(int ***)PTR_DAT_0800926c;\n  }\n  else if (tail < current_node) {\n    int **next_node = *tail;\n    int **prev_node = tail + next_node;\n    if (current_node == prev_node) {\n      int *data_ptr = *current_node;\n      current_node = *(int **)(current_node + 1);\n      prev_node = data_ptr + next_node;\n      *tail = prev_node;\n    }\n    *tail = next_node;\n    *(int ***)PTR_DAT_0800926c = tail;\n  }\n  else {\n    while (current_node != NULL) {\n      int **next_node = *(int **)(current_node + 1);\n      if (next_node == NULL || next_node > tail) break;\n      current_node = next_node;\n    }\n    int **next_node = *current_node;\n    if (current_node + next_node == tail) {\n      next_node += *tail;\n      *current_node = next_node;\n      if (*(int **)(current_node + 1) == current_node + next_node) {\n        int *data_ptr = **(int ***)(current_node + 1);\n        int **next_node = *(int ***)(current_node + 1) + 1;\n        next_node += data_ptr;\n        *current_node = next_node;\n        *(int **)(current_node + 1) = next_node;\n      }\n    }\n    else if (tail < current_node + next_node) {\n      *error_code = 0xc;\n    }\n    else {\n      next_node += *tail;\n      if (*(int **)(current_node + 1) == next_node) {\n        int *data_ptr = **(int ***)(current_node + 1);\n        int **next_node = *(int ***)(current_node + 1) + 1;\n        next_node += data_ptr;\n        *current_node = next_node;\n      }\n      *tail = *(int **)(current_node + 1);\n      *(int **)(current_node + 1) = tail;\n    }\n  }\n  do_nothing2(error_code, current_node, tail, data);\n  return;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "insert_node_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "check_data_0800688e",
                "param_1": "data",
                "param_2": "length",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x39)": "data[9]",
                "*(char *)(param_1 + 0xe)": "data[14]",
                "param_1[8]": "data[8]",
                "*(short *)(param_1 + 9)": "*(short *)(data + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)data + 38)",
                "param_1[0xf]": "data[15]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)data + 57)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(data + 14)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data + 12)"
            },
            "code": "int check_data_0800688e(int *data, int length, int value) {\n    if (data[9] != ' ') {\n        return 2;\n    }\n    if (length == 0) {\n        return 1;\n    }\n    if (value == 0) {\n        return 1;\n    }\n    if (data[14] != 1) {\n        data[8] = length;\n        *(short *)(data + 9) = (short)value;\n        *(short *)((int)data + 38) = (short)value;\n        data[15] = 0;\n        *(undefined *)((int)data + 57) = 33;\n        *(undefined *)(data + 14) = 0;\n        *(uint *)(*data + 12) = *(uint *)(*data + 12) | 128;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008694",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "check_data_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "decode_and_process_data_080088e0",
                "param_1": "current_param",
                "param_2": "data",
                "iVar1": "check_result",
                "uVar2": "shift_amount",
                "iVar3": "param_index",
                "PTR_DAT_0800897c": "param_index_array",
                "PTR_DAT_08008980": "check_array",
                "decode_and_update_flags_08008990": "update_flags",
                "process_data_08008a24": "process_data",
                "get_bit_at_index_08006b28": "get_flag_value",
                "PTR_DAT_08008984": "flag_array",
                "set_bit_08006b3e": "set_flag_value",
                "process_data_08007118": "process_data_with_flags",
                "DAT_0800898c": "constant_value"
            },
            "code": "void decode_and_process_data_080088e0(uint current_param, uint data)\n{\n    int param_index;\n    uint shift_amount;\n    uint flag_value;\n    int check_result;\n\n    if (current_param < 0x3c)\n    {\n        param_index = (int)(char)PTR_DAT_0800897c[current_param];\n    }\n    else\n    {\n        param_index = -1;\n    }\n\n    if (param_index != -1)\n    {\n        check_result = check_param_0800738a(param_index, PTR_DAT_08008980);\n        if (check_result == 0)\n        {\n            decode_and_update_flags_08008990(current_param, 1);\n            shift_amount = *(uint *)PTR_DAT_08008988;\n            if (shift_amount != 8)\n            {\n                if (shift_amount < 9)\n                {\n                    data = data << (8 - shift_amount & 0xff);\n                }\n                else\n                {\n                    data = data >> (shift_amount - 8 & 0xff);\n                }\n            }\n            if (data < 0x80)\n            {\n                process_data_08008a24(current_param, 0);\n            }\n            else\n            {\n                process_data_08008a24(current_param, 1);\n            }\n        }\n        else\n        {\n            flag_value = get_bit_at_index_08006b28(param_index, PTR_DAT_08008984);\n            if (flag_value == 0)\n            {\n                set_bit_08006b3e(param_index, PTR_DAT_08008984);\n            }\n            shift_amount = *(uint *)PTR_DAT_08008988;\n            if (shift_amount != 8)\n            {\n                if (shift_amount < 9)\n                {\n                    data = data << (8 - shift_amount & 0xff);\n                }\n                else\n                {\n                    data = data >> (shift_amount - 8 & 0xff);\n                }\n            }\n            process_data_08007118(param_index, DAT_0800898c, 0xff, data, flag_value == 0);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_08008990",
                "FUN_0800738a",
                "FUN_08008a24",
                "FUN_08007118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "validate_combination_and_update_08008b66",
                "param_1": "combination_address",
                "iVar1": "validation_result",
                "uVar2": "index",
                "local_9": "new_value"
            },
            "code": "void validate_combination_and_update_08008b66(int combination_address)\n{\n  int validation_result;\n  ushort index;\n  undefined new_value;\n  \n  validation_result = validate_combination(combination_address, &new_value);\n  \n  if ((validation_result == 0) && (index = *(short *)(combination_address + 0x60) + 1U & 0x3f, index != *(ushort *)(combination_address + 0x62))) {\n    *(undefined *)(*(int *)(combination_address + 0x5c) + (uint)*(ushort *)(combination_address + 0x60)) = new_value;\n    *(ushort *)(combination_address + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "validate_combination_and_update_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_if_index_less_than_five_0800870c",
                "uVar1": "index",
                "find_index_080086e8": "find_index",
                "PTR_DAT_08008728": "original_function_pointers",
                "PTR_DAT_0800872c": "function_arguments"
            },
            "code": "void execute_function_if_index_less_than_five_0800870c(void)\n{\n  uint index = find_index();\n  if (index < 5) {\n    (**(code **)(PTR_DAT_08008728 + index * 4))(*(undefined4 *)(PTR_DAT_0800872c + index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_if_index_less_than_five_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "code": "unsigned int get_error_code_08008840(void)\n{\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "validate_combination_08008600",
                "param_1": "combination_length",
                "param_2": "output_combination",
                "param_3": "input_value_1",
                "param_4": "input_value_2",
                "iVar1": "is_combination_valid"
            },
            "code": "int validate_combination_08008600(int combination_length, undefined *output_combination, int input_value_1, int input_value_2) {\n  int is_combination_valid = is_combination_valid_080085b8();\n  if (combination_length == 0) {\n    return 0xffffffff;\n  }\n  if (is_combination_valid == 0) {\n    *output_combination = *(undefined *)(combination_length + 0x45);\n    check_input_080068d6(*(int *)(PTR_DAT_08008638 + (uint)*(byte *)(combination_length + 0x44) * 4), combination_length + 0x45, 1, PTR_DAT_08008638, input_value_2);\n    return 0;\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "validate_combination_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value",
                "*param_1": "*destination"
            },
            "code": "void copy_value_to_pointer_08003154(int* destination, int value) {\n    *destination = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "copy_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "set_bit_08006420",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "uint": "uint32_t",
                "*(uint *)": "*",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_bit_08006420(uint32_t *data, uint8_t bit_position, uint32_t bit_value){\n    uint32_t mask = ~(1 << bit_position);\n    *data &= mask;\n    *data |= (bit_value << bit_position);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_08006460",
                "FUN_0800643c"
            ],
            "imported": false,
            "current_name": "set_bit_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_value_at_index_08007750",
                "param_1": "array_ptr",
                "param_2": "index",
                "param_3": "value",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": "*(int*)(array + offset)",
                "*(int*)": "int*",
                "undefined4": "int"
            },
            "code": "void set_value_at_index_08007750(int array_ptr, int index, int value) {\n    int* array = *(int*)(array_ptr + 4);\n    int offset = 0x34 + index * 4;\n    *(int*)(array + offset) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_value_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "str",
                "param_2": "ch",
                "pcVar1": "current_char"
            },
            "code": "char* find_character_in_string_08009938(char* str, char ch) {\n    char* current_char;\n    do {\n        current_char = str;\n        if (*current_char == '\\0') {\n            if (ch != '\\0') {\n                current_char = NULL;\n            }\n            return current_char;\n        }\n        str = current_char + 1;\n    } while (ch != *current_char);\n    return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "check_input_08007f0e",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar6": "initial_value",
                "iVar1": "initial_value",
                "uVar3": "difference",
                "iVar4": "state",
                "iVar5": "input_pointer",
                "iVar2": "input_value"
            },
            "code": "int check_input_08007f0e(int input, int param2, int param3, int param4) {\n  int initial_value = get_initial_value();\n  uint difference = 0;\n  int state = 2;\n  do {\n    int input_pointer = input + 4;\n    int input_value = process_input(input_pointer, param2, param3, param4, initial_value);\n    if (input_value == 0) {\n      state = 0;\n      int character = get_character(input_pointer);\n      while (character != 0x20 && state == 0) {\n        int current_value = get_current_value();\n        difference = current_value - initial_value;\n        if (difference < 0x65) {\n          int next_value = get_next_value(input_pointer);\n          if (next_value != 0) {\n            state = 2;\n          }\n        }\n        else {\n          state = 1;\n        }\n        character = get_character(input_pointer);\n      }\n    }\n    input_value = get_next_value(input_pointer);\n  } while (input_value == 4 && difference < 100);\n  return state;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_input_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "bit_position",
                "DAT_08004020": "ARRAY_START_ADDRESS"
            },
            "code": "void set_bit_in_array_08004004(uint bit_position)\n{\n    const int BITS_PER_WORD = 32;\n    const uint WORD_OFFSET = 0x60;\n    const uint DAT_08004020 = DAT_08004020;\n    const uint WORD_INDEX = bit_position >> 5;\n    const uint BIT_INDEX = bit_position & 0x1f;\n\n    if (bit_position >= 0)\n    {\n        uint* word_ptr = (uint*)(DAT_08004020 + (WORD_OFFSET + WORD_INDEX) * sizeof(uint));\n        *word_ptr = 1 << BIT_INDEX;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "send_encoded_data_08003158",
                "param_1": "buffer_ptr",
                "param_2": "buffer_size",
                "param_3": "data_to_encode",
                "puVar1": "function_ptr",
                "local_a": "encoded_data"
            },
            "code": "void send_encoded_data_08003158(undefined4 *buffer_ptr, uint buffer_size, ushort data_to_encode)\n{\n    undefined4 *function_ptr;\n    ushort encoded_data;\n    \n    function_ptr = (undefined4 *)*buffer_ptr;\n    if (function_ptr != (undefined4 *)0x0) {\n        encoded_data = data_to_encode;\n        if (((int)buffer_size < 0x10) && (data_to_encode < 0x4000)) {\n            (**(code **)*function_ptr)(function_ptr, buffer_size | 0xe0);\n            encode_data(buffer_ptr, 2, &encoded_data);\n        }\n        else {\n            encode_and_send_data(buffer_ptr, buffer_size, 2, &encoded_data);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "send_encoded_data_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "get_result_and_swap_params_080090c2",
                "param_1": "input_param_1",
                "param_2": "input_param_2"
            },
            "code": "void get_result_and_swap_params_080090c2(int input_param_1, int input_param_2)\n{\n  get_result_08009108(input_param_2, input_param_1);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "get_result_and_swap_params_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_char_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_char_index_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = is_bit_set_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    execute_function_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_1": "buffer_address",
                "param_2": "buffer_size",
                "PTR_": "buffer_",
                "DAT_": "data_"
            },
            "code": "int set_memory_permissions_08008846(void* PTR_address, int PTR_size)\n{\n    int permissions = 0x2000;\n    *(int*)(PTR_address + 4) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_and_copy_0800459c",
                "param_1": "array",
                "puVar1": "ptr_to_char",
                "PTR_00101010": "ptr_to_array_element"
            },
            "code": "int increment_and_copy_0800459c(int *array)\n{\n  int *PTR_00101010 = &array[9];\n  if (*(short *)((int)array + 0x2a) != 0) {\n    unsigned char *ptr_to_char = (unsigned char *)(*PTR_00101010);\n    *PTR_00101010 = (int)(ptr_to_char + 1);\n    *ptr_to_char = (char)*(int *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_and_copy_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "param_index",
                "param_2": "param_value",
                "* (undefined4 *) ( * (int *)(param_1 + 4) + 0x24)": "*(undefined4 *)(ptr + 0x24)",
                "*(undefined4 *)": "",
                "ptr": "ptr"
            },
            "code": "void set_param_value_0800774a(int param_index, undefined4 param_value) {\n    int ptr = *(int *)(param_index + 4);\n    *(undefined4 *)(ptr + 0x24) = param_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_param_value_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "checkAndUpdateData_080042f0",
                "param_1": "dataToCheck",
                "DAT_08004308": "dataLocation",
                "checkAndProcessData_08009094": "processData",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void checkAndUpdateData_080042f0(uint dataToCheck){\n    uint* dataPtr = (uint*)(DAT_08004308 + 0x14);\n    if((*dataPtr & dataToCheck) != 0){\n        *dataPtr = dataToCheck;\n        checkAndProcessData_08009094();\n    }\n    return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "checkAndUpdateData_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "copy_data_080027f0",
                "param_1": "destination_address",
                "param_2": "source_address",
                "param_3": "size",
                "cVar1": "current_byte",
                "puVar2": "destination_pointer",
                "iVar3": "allocation_result",
                "uVar4": "size_byte",
                "uVar5": "new_size"
            },
            "code": "uint copy_data_080027f0(uint destination_address, undefined4 source_address, uint size)\\n{\\n  char current_byte;\\n  undefined *destination_pointer;\\n  int allocation_result;\\n  undefined size_byte;\\n  uint new_size;\\n  \\n  destination_pointer = PTR_DAT_08002884;\\n  if (*PTR_DAT_08002878 == \"\\0\") {\\n    allocation_result = copy_data_080027f0_to_buffer_08007ede(destination_address + 0x14, source_address, size & 0xffff);\\n    if (allocation_result != 0) {\\n      return 0;\\n    }\\n    return size;\\n  }\\n  new_size = (byte)*PTR_DAT_0800287c + size;\\n  if ((byte)*PTR_DAT_08002880 < new_size) {\\n    if (new_size < 0x20) {\\n      new_size = 0x20;\\n    }\\n    allocation_result = allocate_memory_08009908(*(undefined4 *)PTR_DAT_08002884,new_size);\\n    *(int *)destination_pointer = allocation_result;\\n    if (allocation_result == 0) {\\n      size_byte = 0;\\n    }\\n    else {\\n      size_byte = (undefined)new_size;\\n    }\\n    *PTR_DAT_08002880 = size_byte;\\n  }\\n  destination_pointer = PTR_DAT_08002888;\\n  if (*(int *)PTR_DAT_08002884 != 0) {\\n    copy_data_080027f0_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, source_address, size);\\n    current_byte = *destination_pointer + (char)size;\\n    *destination_pointer = current_byte;\\n    *PTR_DAT_0800287c = current_byte;\\n    return size;\\n  }\\n  *(undefined4 *)(destination_address + 4) = 1;\\n  return 0;\\n}",
            "called": [
                "FUN_08009908",
                "FUN_08007ede",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param",
                "*param_1": "*param"
            },
            "code": "void set_param_to_zero_0800314e(int* param){\n    *param = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "set_flags_and_update_if_zero_080076e0",
                "*param_1": "*params",
                "cVar1": "param_check",
                "iVar2": "flags",
                "param_1[0x13]": "params[19]",
                "check_param_08007544": "check_param",
                "set_bit_in_array_08003fb0": "set_bit_in_array",
                "set_flags_and_return_08005df4": "set_flags",
                "clear_flags_and_update_bit_080062f4": "clear_flags_and_update_bit"
            },
            "code": "void set_flags_and_update_if_zero_080076e0(int* params)\n{\n    int flags = 0;\n    params[19] = 0;\n    char param_check = check_param(*params);\n    set_bit_in_array((int)param_check);\n    flags = set_flags(params + 1);\n    if (flags == 0) {\n        clear_flags_and_update_bit(params + 1, 0);\n    }\n    return;\n}",
            "called": [
                "FUN_080062f4",
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_08003fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "set_flags_and_update_if_zero_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "encode_string_to_buffer_08002f14",
                "param_1": "string_address"
            },
            "code": "void encode_string_to_buffer_08002f14(int string_address) {\n  int encoded_string_address = string_address + 0x40;\n  encode_string_to_buffer_08002f14_080032a2(encoded_string_address);\n  return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "encode_string_to_buffer_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_device_and_update_data_080036a2"
            },
            "code": "void initialize_device_and_update_data_080036a2(void)\n{\n  initialize_device();\n  update_data();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "initialize_device_and_update_data_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "process_data_080038e4",
                "param_1": "param",
                "param_2": "params",
                "uVar1": "result",
                "uVar2": "param_1",
                "iVar3": "data_ptr",
                "local_c": "i"
            },
            "code": "int process_data_080038e4(int *data, uint *params) {\n    int result;\n    uint param_1 = params[1];\n    if (*(char *)(data + 9) == '\\x01') {\n        result = 2;\n    }\n    else {\n        *(undefined *)(data + 9) = 1;\n        if (param_1 < 7) {\n            param_1 = param_1 * 5 - 5;\n            *(uint *)(*data + 0x34) = *params << (param_1 & 0xff) | *(uint *)(*data + 0x34) & ~(0x1f << (param_1 & 0xff));\n        }\n        else if (param_1 < 0xd) {\n            param_1 = param_1 * 5 - 0x23;\n            *(uint *)(*data + 0x30) = *params << (param_1 & 0xff) | *(uint *)(*data + 0x30) & ~(0x1f << (param_1 & 0xff));\n        }\n        else {\n            param_1 = param_1 * 5 - 0x41;\n            *(uint *)(*data + 0x2c) = *params << (param_1 & 0xff) | *(uint *)(*data + 0x2c) & ~(0x1f << (param_1 & 0xff));\n        }\n        param_1 = *params;\n        if (param_1 < 10) {\n            *(uint *)(*data + 0x10) = params[2] << (param_1 * 3 & 0xff) | *(uint *)(*data + 0x10) & ~(7 << (param_1 * 3 & 0xff));\n        }\n        else {\n            param_1 = param_1 * 3 - 0x1e;\n            *(uint *)(*data + 0xc) = params[2] << (param_1 & 0xff) | *(uint *)(*data + 0xc) & ~(7 << (param_1 & 0xff));\n        }\n        if (*params - 0x10 < 2) {\n            int data_ptr = *data;\n            if (data_ptr == DAT_08003a10) {\n                if ((*(uint *)(data_ptr + 8) & 0x800000) == 0) {\n                    *(uint *)(data_ptr + 8) = *(uint *)(data_ptr + 8) | 0x800000;\n                    if (*params == 0x10) {\n                        for (int i = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*(uint *)PTR_DAT_08003a14 >> 0x32) * 10; i != 0; i = i + -1) {\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                data[10] = data[10] | 0x20;\n                result = 1;\n            }\n        }\n        else {\n            result = 0;\n        }\n        *(undefined *)(data + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "process_data_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_08005d48",
                "param_1": "data_offset",
                "param_2": "data_array",
                "uVar1": "data_4",
                "uVar2": "data_2",
                "uVar3": "data_3",
                "DAT_08005da8": "data_offset_2"
            },
            "code": "void update_data_08005d48(int data_offset, uint *data_array){\n  uint data_1 = *(uint *)(data_offset + 0x20) & 0xfffffeff;\n  uint data_2 = *(uint *)(data_offset + 4);\n  uint data_3 = *data_array;\n  uint data_4 = *(uint *)(data_offset + 0x20) & 0xfffffdff | data_array[2] << 8;\n  if (data_offset == DAT_08005da8) {\n    data_4 = (data_4 & 0xfffff7ff | data_array[3] << 8) & 0xfffffbff;\n    data_2 = data_2 & 0xffffcfff | data_array[5] << 4 | data_array[6] << 4;\n  }\n  *(uint *)(data_offset + 4) = data_2;\n  *(uint *)(data_offset + 0x1c) = *(uint *)(data_offset + 0x1c) & 0xffffff8c | data_3;\n  *(uint *)(data_offset + 0x3c) = data_array[1];\n  *(uint *)(data_offset + 0x20) = data_4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 288271,
    "layers": [
        [
            "FUN_08002c2c",
            "FUN_08000178",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_080043a2",
            "FUN_08008df8",
            "FUN_08006b5c",
            "FUN_08000188",
            "FUN_0800344a",
            "FUN_08008e72",
            "FUN_0800291c",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003f94",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08006b7c",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_08008d00",
            "FUN_08004b82",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_08006b1c",
            "FUN_08008f3c",
            "FUN_08007332",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_080033a8",
            "FUN_08008d18",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_080060c4",
            "FUN_08002f84",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08005a68",
            "FUN_08002f94",
            "FUN_080068d6",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08008850",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_080038dc",
            "FUN_08008858",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_080026f8",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08004046",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_08004050",
            "FUN_080095a8",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_080005e0",
            "FUN_08005dac",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_08005434",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_080064b0",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08007744",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_08008840",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08004004",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_0800314e",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_08007246",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_080072f0",
            "FUN_0800a168",
            "FUN_0800723c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08007376",
            "FUN_080033cc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08008e7c",
            "FUN_080091a0",
            "FUN_08002948",
            "FUN_08007320",
            "FUN_0800319e",
            "FUN_0800997e",
            "FUN_080085dc",
            "FUN_0800a130",
            "FUN_08006128",
            "FUN_080062f4",
            "FUN_08005a48",
            "FUN_08007f7c",
            "FUN_080072d8",
            "FUN_08007e74",
            "FUN_08002ddc",
            "FUN_08007f8e",
            "FUN_08007110",
            "FUN_08009fe8",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08006ca8",
            "FUN_080063c0",
            "FUN_08005aa4",
            "FUN_0800643c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_08007ff0",
            "FUN_080036d8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_08006460",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_08008020",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08007fa0",
            "FUN_08008bf4",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08007736",
            "FUN_08003a20",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_080004d4",
            "FUN_08005cb4",
            "FUN_0800325a",
            "FUN_0800870c",
            "FUN_08007f0e",
            "FUN_080090c2"
        ],
        [
            "FUN_080067ac",
            "FUN_0800694c",
            "FUN_08006c7c",
            "FUN_08004f3c",
            "FUN_08003de4",
            "FUN_08006060",
            "FUN_08003474",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08009e64",
            "FUN_08002dbc",
            "FUN_080058d2",
            "FUN_08008ed6",
            "FUN_0800a020",
            "FUN_08006c60",
            "FUN_08006932",
            "FUN_080045c0",
            "FUN_08002efe",
            "FUN_08002df6",
            "FUN_08002c1e",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_080032a2",
            "FUN_08005df4",
            "FUN_08004ac2",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08009270",
            "FUN_08005e6e",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080058ac",
            "FUN_08004aec",
            "FUN_0800863c",
            "FUN_080084b0",
            "FUN_08003bd8",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08005e2e",
            "FUN_08002968",
            "FUN_0800a07a",
            "FUN_08002a58",
            "FUN_08006538",
            "FUN_08008600",
            "FUN_08003158"
        ],
        [
            "FUN_080069ec",
            "FUN_08009d24",
            "FUN_080071e4",
            "FUN_08005084",
            "FUN_08002ac0",
            "FUN_08002a1c",
            "FUN_08000be8",
            "FUN_08009190",
            "FUN_08002ef2",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08009eac",
            "FUN_08008eec",
            "FUN_080090cc",
            "FUN_08008500",
            "FUN_08002fca",
            "FUN_080052f0",
            "FUN_08002e26",
            "FUN_080035b8",
            "FUN_08002ed2",
            "FUN_08009908",
            "FUN_0800674e",
            "FUN_08008d8c",
            "FUN_08008b66",
            "FUN_08002f14"
        ],
        [
            "FUN_08005188",
            "FUN_080072fa",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08006d80",
            "FUN_0800885c",
            "FUN_08008990",
            "FUN_0800288c",
            "FUN_080027f0"
        ],
        [
            "FUN_0800a042",
            "FUN_08001bf8",
            "FUN_08000a64",
            "FUN_08008880",
            "FUN_08003002",
            "FUN_08002b68",
            "FUN_080036a2"
        ],
        [
            "FUN_08002c00",
            "FUN_08003048",
            "FUN_08008f0e",
            "FUN_08000488"
        ],
        [
            "FUN_08002c14",
            "FUN_08001b48"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_08008f1c"
        ],
        [
            "FUN_08003658"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009db0",
            "FUN_08009a80",
            "FUN_080098d8",
            "FUN_08009c7c"
        ],
        [
            "FUN_08007594",
            "FUN_08007544",
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c",
            "FUN_080075dc",
            "FUN_080076e0"
        ],
        [
            "FUN_08002578",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08009358"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_080025ac",
            "FUN_08000588",
            "FUN_0800021a"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ]
    ],
    "locked_functions": []
}