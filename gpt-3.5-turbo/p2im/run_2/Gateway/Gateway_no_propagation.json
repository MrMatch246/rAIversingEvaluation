{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "execute_main_function_08007246",
                "FUN_08003748": "execute_first_subfunction",
                "FUN_08004046": "execute_second_subfunction",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void execute_main_function_08007246(void)\n{\n  execute_first_subfunction();\n  execute_second_subfunction();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004046",
                "FUN_08003748",
                "FUN_08007244"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "execute_main_function_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "result",
                "param_2": "data_ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "sVar1": "data_value",
                "puVar2": "ptr",
                "iVar3": "func_result"
            },
            "code": "void process_data_0800a042(int *result, int data_ptr, undefined4 arg1, undefined4 arg2) {\n    short data_value = *(short *)(data_ptr + 0xe);\n    if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x17) < 0) {\n        FUN_0800a130(result, data_value, 0, 2);\n    }\n    *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) & 0xefff;\n    undefined *ptr = PTR_DAT_0800a0c8;\n    *(undefined4 *)PTR_DAT_0800a0c8 = 0;\n    int func_result = FUN_0800885c((int)data_value, arg1, arg2, arg2, arg2, unaff_r4, unaff_r5, in_lr);\n    if ((func_result == -1) && (*(int *)ptr != 0)) {\n        *result = *(int *)ptr;\n    }\n    return;\n}",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "PTR_DAT_080086dc": "g_data_ptrs",
                "PTR_DAT_080086e0": "g_data_indexes",
                "PTR_DAT_080086e4": "g_data_offsets"
            },
            "code": "void update_data_08008694(int data_ptr, int new_data) {\n  if (data_ptr != 0) {\n    int data_index = *(byte *)(data_ptr + 0x44);\n    *(undefined4 *)(PTR_DAT_080086dc + data_index * 4) = new_data;\n    *(int *)(PTR_DAT_080086e0 + data_index * 4) = data_ptr;\n    int char_value = *(char *)(data_ptr + 0x5a);\n    update_char(char_value, 0, 2);\n    update_char(char_value);\n    int data_ptr_offset = *(PTR_DAT_080086e4 + data_index * 4);\n    int ushort_value = *(ushort *)(data_ptr + 0x6a);\n    int data_ptr_address = data_ptr_offset + *(int *)(data_ptr + 100) + ushort_value;\n    update_data_08008694_at_address(data_ptr_address, 1);\n  }\n}\n",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_data_structures_08002ce0",
                "param_1": "data",
                "iVar1": "data_offset"
            },
            "code": "int initialize_data_structures_08002ce0(int data)\n{\n  int data_offset = 0x44;\n  initialize_buffer(data + 0x40);\n  initialize_structures(data_offset, data, 0x40);\n  *(undefined *)(data + 0xc4) = 0;\n  *(undefined4 *)(data + 200) = 0;\n  *(undefined *)(data + 0x1f8) = 0;\n  initialize_structures(data_offset, 0xe0, PTR_FUN_08002c2c_1_08002d90, 0);\n  initialize_structures(data_offset, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  initialize_structures(data_offset, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  initialize_structures(data_offset, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  initialize_structures(data_offset, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  initialize_structures(data_offset, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  initialize_structures(data_offset, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  initialize_structures(data_offset, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  initialize_structures(data_offset, 0x79, PTR_LAB_08002e1a_1_08002db0, data);\n  initialize_structures(data_offset, 0xf9, PTR_LAB_08002dea_1_08002db4, data);\n  initialize_structures(data_offset, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return data;\n}\n",
            "called": [
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_08003306",
                "FUN_08003350",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_data_08005188",
                "param_1": "data_ptr",
                "iVar1": "data",
                "uVar2": "val1",
                "uVar3": "val2",
                "uVar4": "val3",
                "FUN_080043a2": "execute_function1",
                "FUN_08004396": "execute_function2",
                "FUN_0800430c": "execute_function3",
                "DAT_080052dc": "constant1",
                "DAT_080052ec": "constant2",
                "DAT_080052e4": "constant3",
                "FUN_08004d6c": "execute_function4",
                "FUN_08004e3c": "execute_function5",
                "FUN_08004b82": "execute_function6",
                "FUN_08004ccc": "execute_function7",
                "FUN_08004ac2": "execute_function8",
                "FUN_08005084": "execute_function9",
                "FUN_08004a76": "execute_function10",
                "FUN_0800459c": "execute_function11",
                "FUN_08004a24": "execute_function12",
                "FUN_0800457c": "execute_function13"
            },
            "code": "void process_data_08005188(int *data_ptr)\n{\n  int data = *data_ptr;\n  uint val1 = *(uint *)(data + 0x18);\n  uint val2 = *(uint *)(data + 0x14);\n  uint val3 = *(uint *)(data + 4);\n  \n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((val2 & 0x10001) == 0) || ((val3 & 0x200) == 0)) {\n      if (((DAT_080052e8 & val2) == 0) || ((val3 & 0x200) == 0)) {\n        if (((DAT_080052d4 & val2) != 0) && ((val3 & 0x200) != 0)) {\n          execute_function1(data_ptr);\n        }\n      }\n      else {\n        execute_function2(data_ptr);\n      }\n    }\n    else {\n      execute_function3(data_ptr);\n    }\n    if ((DAT_080052dc & val1) == 0) {\n      if ((((DAT_080052ec & val2) != 0) && ((val3 & 0x400) != 0)) && ((DAT_080052e4 & val2) == 0)\n         ) {\n        execute_function4(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & val2) != 0) && ((val3 & 0x200) != 0)) {\n        execute_function5(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & val2) != 0) && ((val3 & 0x400) != 0)) && ((DAT_080052e4 & val2) == 0)\n         ) {\n        execute_function6(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & val2) != 0) && ((val3 & 0x200) != 0)) {\n        execute_function7(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((DAT_080052d4 & val2) != 0) && ((val3 & 0x200) != 0)) {\n      execute_function8();\n      return;\n    }\n    if (((DAT_080052d8 & val2) != 0) && ((val3 & 0x200) != 0)) {\n      execute_function9(data_ptr);\n      return;\n    }\n    if ((DAT_080052dc & val1) == 0) {\n      if ((((DAT_080052ec & val2) != 0) && ((val3 & 0x400) != 0)) && ((DAT_080052e4 & val2) == 0)\n         ) {\n        execute_function10(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & val2) != 0) && ((val3 & 0x200) != 0)) {\n        execute_function11(data_ptr);\n      }\n    }\n    else {\n      if ((((DAT_080052e0 & val2) != 0) && ((val3 & 0x400) != 0)) && ((DAT_080052e4 & val2) == 0)\n         ) {\n        execute_function12(data_ptr);\n        return;\n      }\n      if (((DAT_080052e4 & val2) != 0) && ((val3 & 0x200) != 0)) {\n        execute_function13(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08004396",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_080043a2",
                "FUN_0800457c",
                "FUN_08004ac2",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004b82",
                "FUN_08004ccc",
                "FUN_08004a76",
                "FUN_08004e3c",
                "FUN_0800430c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "findUnusedMemoryBlock_08009db0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "memoryBlockStart",
                "piVar2": "currentBlock",
                "iVar3": "memPoolStart",
                "ppiVar4": "memPoolPtrPtr",
                "PTR_PTR_DAT_08009e24": "memPoolStartPtrPtr",
                "FUN_08009d50": "initializeMemoryPool",
                "FUN_080091c6": "initializeMemoryBlock",
                "FUN_08009d24": "allocateMemoryBlock"
            },
            "code": "int* findUnusedMemoryBlock_08009db0(undefined4* errorCode, undefined4 param2, undefined4 param3, undefined4 param4) {\n  int* memoryBlockStart;\n  int* currentBlock;\n  int memPoolStart;\n  int** memPoolPtrPtr;\n  memPoolStart = *(int*)PTR_PTR_DAT_08009e24;\n  if (*(int*)(memPoolStart + 0x18) == 0) {\n    initializeMemoryPool(memPoolStart);\n  }\n  memPoolPtrPtr = (int**)(memPoolStart + 0x48);\n  do {\n    currentBlock = memPoolPtrPtr[2];\n    memoryBlockStart = memPoolPtrPtr[1];\n    while (memoryBlockStart = (int*)((int)memoryBlockStart - 1), -1 < (int)memoryBlockStart) {\n      if (*(short*)(currentBlock + 3) == 0) {\n        *(undefined2*)((int)currentBlock + 0xe) = 0xffff;\n        currentBlock[0x19] = 0;\n        *(undefined2*)(currentBlock + 3) = 1;\n        *currentBlock = 0;\n        currentBlock[2] = 0;\n        currentBlock[1] = 0;\n        currentBlock[4] = 0;\n        currentBlock[5] = 0;\n        currentBlock[6] = 0;\n        initializeMemoryBlock(currentBlock + 0x17, 0, 8, 1, param4);\n        currentBlock[0xd] = 0;\n        currentBlock[0xe] = 0;\n        currentBlock[0x12] = 0;\n        currentBlock[0x13] = 0;\n        return currentBlock;\n      }\n      currentBlock = currentBlock + 0x1a;\n    }\n    if (*memPoolPtrPtr == (int*)0x0) {\n      memoryBlockStart = (int*)allocateMemoryBlock(errorCode, 4);\n      *memPoolPtrPtr = memoryBlockStart;\n      if (memoryBlockStart == (int*)0x0) {\n        *errorCode = 0xc;\n        return (int*)0x0;\n      }\n    }\n    memPoolPtrPtr = (int**)*memPoolPtrPtr;\n  } while(true);\n}",
            "called": [
                "FUN_08009d24",
                "FUN_08009d50",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "findUnusedMemoryBlock_08009db0"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_pointer_if_not_null_08002c2c",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter",
                "pcVar1": "function_pointer",
                "PTR_DAT_08002c3c": "function_pointer_address"
            },
            "code": "void execute_function_pointer_if_not_null_08002c2c(undefined4 param_1, undefined4 PTR_DAT_08002c3c, undefined4 param_3, undefined4 param_4)\n{\n  code *function_pointer = *(code **)PTR_DAT_08002c3c;\n  if (function_pointer != (code *)0x0) {\n    (*function_pointer)(param_1, param_2, param_3, function_pointer, param_4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_if_not_null_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "print_data_to_screen_08001bf8",
                "param_1": "data",
                "param_2": "size",
                "param_3": "index",
                "param_4": "value",
                "FUN_0800288c": "write_to_output_buffer"
            },
            "code": "void print_data_to_screen_08001bf8(int* data, int size, int index, int value)\n{\n  write_to_output_buffer(data, size, index, value);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "print_data_to_screen_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "initialize_data_structures_and_copy_data_080072f0",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "dest_ptr",
                "param_4": "dest_end_ptr",
                "FUN_080042d4": "memcpy_and_set",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void initialize_data_structures_and_copy_data_080072f0(void *data_ptr, uint16_t data_size, void *dest_ptr, void *dest_end_ptr)\n{\n    memcpy(dest_ptr, data_ptr, data_size);\n    memset(dest_ptr + data_size, 0, dest_end_ptr - dest_ptr - data_size);\n    return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_and_copy_data_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "get_end_of_string_08000178",
                "param_1": "input_string",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char_value"
            },
            "code": "char* get_end_of_string_08000178(char* input_string) {\n                      char* current_char = input_string;\n                      while(*current_char != \"\\0\") {\n                          current_char++;\n                      }\n                      return current_char;\n                  }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08002e44",
                "FUN_08008e7c",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "get_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_input_080069ec",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "third_byte",
                "uVar4": "bit_check",
                "uVar5": "first_byte",
                "puVar3": "data_ptr",
                "FUN_0800694c": "process_case_1",
                "FUN_080064cc": "process_case_2",
                "FUN_08006932": "process_case_3",
                "do_nothing_0800877c": "do_nothing",
                "FUN_080064b0": "process_case_4",
                "PTR_LAB_08006b0c_1_08006b08": "process_data",
                "FUN_08004050": "call_function"
            },
            "code": "void process_input_080069ec(uint **input_data)\n{\n  uint *data_ptr = *input_data;\n  uint first_byte = *data_ptr;\n  uint third_byte = data_ptr[3];\n  \n  if ((((first_byte & 0xf) == 0) && ((first_byte & 0x20) != 0)) && ((third_byte & 0x20) != 0))) {\n    process_case_1(input_data);\n    return;\n  }\n  if (((first_byte & 0xf) == 0) || ((data_ptr[5] & 1) == 0 && ((third_byte & 0x120) == 0)))) {\n    if (((first_byte & 0x80) != 0) && ((third_byte & 0x80) != 0))) {\n      process_case_2(input_data);\n      return;\n    }\n    if (((first_byte & 0x40) != 0) && ((third_byte & 0x40) != 0))) {\n      process_case_3(input_data);\n    }\n  }\n  else {\n    if (((first_byte & 1) != 0) && ((third_byte & 0x100) != 0))) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((first_byte & 4) != 0) && ((data_ptr[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((first_byte & 2) != 0) && ((data_ptr[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((first_byte & 8) != 0) && ((data_ptr[5] & 1) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((first_byte & 0x20) != 0) && ((third_byte & 0x20) != 0))) {\n        process_case_1(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && (((*input_data)[5] & 0x40) == 0)) {\n        do_nothing(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      process_case_4(input_data);\n      data_ptr = *input_data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(input_data);\n        return;\n      }\n      data_ptr[5] = data_ptr[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        do_nothing(input_data);\n        return;\n      }\n      input_data[0xd][0xd] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      int result = call_function(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006932",
                "FUN_08004050",
                "FUN_0800877c",
                "FUN_0800694c",
                "FUN_080064b0",
                "FUN_080064cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "initialize_param_0800a168",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "ptr",
                "iVar2": "status"
            },
            "code": "void initialize_param_0800a168(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  int status = FUN_08008858(param_2, param_3, param_4, param_4, param_4);\n  if (status == -1 && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "initialize_param_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "process_input_080067ac",
                "param_1": "input_buffer",
                "param_2": "data_buffer",
                "param_3": "data_size",
                "param_4": "param_4",
                "uVar1": "init_variable",
                "iVar2": "result"
            },
            "code": "int process_input_080067ac(int *input_buffer, ushort *data_buffer, int data_size, undefined4 param_4)\n{\n  undefined4 uVar1;\n  int result;\n  \n  if (*(char *)((int)input_buffer + 0x39) == ' ') {\n    if (data_buffer == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (data_size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_buffer + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_buffer + 0xe) = 1;\n      input_buffer[0xf] = 0;\n      *(undefined *)((int)input_buffer + 0x39) = 0x21;\n      uVar1 = initialize_variable();\n      *(short *)(input_buffer + 9) = (short)data_size;\n      *(short *)((int)input_buffer + 0x26) = (short)data_size;\n      while (*(short *)((int)input_buffer + 0x26) != 0) {\n        *(short *)((int)input_buffer + 0x26) = *(short *)((int)input_buffer + 0x26) + -1;\n        if (input_buffer[2] == 0x1000) {\n          result = process_data(input_buffer,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = *data_buffer & 0x1ff;\n          if (input_buffer[4] == 0) {\n            data_buffer = data_buffer + 1;\n          }\n          else {\n            data_buffer = (ushort *)((int)data_buffer + 1);\n          }\n        }\n        else {\n          result = process_data(input_buffer,0x80,0,uVar1,param_4);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_buffer + 4) = (uint)*(byte *)data_buffer;\n          data_buffer = (ushort *)((int)data_buffer + 1);\n        }\n      }\n      result = process_data(input_buffer,0x40,0,uVar1,param_4);\n      if (result == 0) {\n        *(undefined *)((int)input_buffer + 0x39) = 0x20;\n        *(undefined *)(input_buffer + 0xe) = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_input_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_character_in_string_0800735a",
                "param_1": "character_to_find",
                "param_2": "string",
                "*param_2": "*string",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_character_in_string_0800735a(int character_to_find, char *string)\n{\n    while(true)\n    {\n        if (*string == -1)\n        {\n            return 0xffffffff;\n        }\n        if (*string == character_to_find)\n        {\n            break;\n        }\n        string += 0xc;\n    }\n    return *(unsigned int *)(string + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_character_in_string_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_struct_08008c20",
                "param_1": "struct_address",
                "PTR_": "",
                "DAT_": "",
                "*": "",
                "+": "_address_offset",
                "int": "",
                "short": ""
            },
            "code": "void initialize_struct_08008c20(int struct_address){\n    int* struct_ptr = (int*)(struct_address + 0x130);\n    *struct_ptr = struct_address + 0x11;\n\n    short* short_ptr1 = (short*)(struct_address + 0x134);\n    *short_ptr1 = 0;\n\n    short* short_ptr2 = (short*)(struct_address + 0x136);\n    *short_ptr2 = 0;\n\n    int* int_ptr = (int*)(struct_address + 0x138);\n    *int_ptr = struct_address + 0x51;\n\n    short* short_ptr3 = (short*)(struct_address + 0x13c);\n    *short_ptr3 = 0;\n\n    short* short_ptr4 = (short*)(struct_address + 0x13e);\n    *short_ptr4 = 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_and_execute_commands_08000a64",
                "iVar1": "command_result",
                "uVar2": "command_index",
                "PTR_DAT_08000ad8": "command_array",
                "PTR_DAT_08000adc": "first_arg_array",
                "PTR_DAT_08000ae0": "second_arg_array",
                "FUN_080036ac": "execute_command",
                "FUN_0800738a": "execute_command_with_two_arg_sets",
                "FUNC_080005f8": "print_command_result",
                "PTR_DAT_08000ae4": "final_command_flag",
                "FUN_08002a26": "execute_final_command",
                "PTR_DAT_08000ae8": "final_command"
            },
            "code": "void check_and_execute_commands_08000a64(void)\n{\n  int command_result;\n  uint8_t command_index;\n  for (command_index = 0; command_index < 0x3c; command_index++) {\n    if (command_index < 0x3c) {\n      if (PTR_DAT_08000ad8[command_index] == -1) {\n        command_result = 0;\n      }\n      else {\n        command_result = execute_command(PTR_DAT_08000ad8[command_index]);\n        if (command_result == 0) {\n          command_result = 0;\n        }\n        else {\n          command_result = execute_command_with_args(PTR_DAT_08000ad8[command_index]);\n          if (command_result == 1) {\n            command_result = 0;\n          }\n          else {\n            command_result = execute_command_with_two_arg_sets(PTR_DAT_08000ad8[command_index], PTR_DAT_08000adc);\n            if (command_result == 0) {\n              command_result = execute_command_with_two_arg_sets(PTR_DAT_08000ad8[command_index], PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      command_result = 0;\n    }\n    if (command_result != 0) {\n      print_command_result(command_index, 6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  execute_PTR_DAT_08000ae8(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_execute_commands_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "run_application_0800723c",
                "FUN_08003760": "initialize_application"
            },
            "code": "void run_application_0800723c(void)\n{\n  initialize_application();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "run_application_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "set_flags_based_on_params_080043a2",
                "param_1": "params",
                "puVar1": "flag_ptr"
            },
            "code": "uint32_t set_flags_based_on_params_080043a2(uint32_t **params)\n{\n  uint32_t *flag_ptr;\n  flag_ptr = params[11];\n  if ((*(char *)((int)params + 0x3d) == '\"') &&\n     ((params[20] != (uint32_t *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[20] == (uint32_t *)0x0) && (params[4] == (uint32_t *)0xc000)) {\n      **params = **params | 0x100;\n      params[20] = (uint32_t *)((int)params[20] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (flag_ptr == (uint32_t *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          flag_ptr = *params;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) ||\n                (params[12] == (uint32_t *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[11] == (uint32_t *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        flag_ptr = *params;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      params[20] = (uint32_t *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_params_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "sVar2": "count",
                "puVar3": "void_ptr",
                "value": "data_value",
                "ptr": "data_ptr"
            },
            "code": "int process_data_0800694c(int *data)\n{\n    char *str = (char *)(data + 0x3a);\n    if (*str != '\"') {\n        return 2;\n    }\n    int value = *(int *)(*data + 4);\n    int *ptr = data + 10;\n    if (data[2] == 0x1000) {\n        if (data[4] == 0) {\n            *ptr = (ushort)((uint)(value << 0x17) >> 0x17);\n            ptr++;\n        }\n        else {\n            *ptr = (ushort)value & 0xff;\n            ptr++;\n        }\n    }\n    else {\n        if (data[4] == 0) {\n            *ptr = (char)value;\n            ptr++;\n        }\n        else {\n            *ptr = (byte)value & 0x7f;\n            ptr++;\n        }\n    }\n    short count = *(short *)(data + 0x2e) - 1;\n    *(short *)(data + 0x2e) = count;\n    if (count != 0) {\n        return 0;\n    }\n    *(uint *)(*data + 0xc) &= 0xffffffdf;\n    *(uint *)(*data + 0xc) &= 0xfffffeff;\n    *(uint *)(*data + 0x14) &= 0xfffffffe;\n    *str = 0x20;\n    run_post_processing();\n    return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "update_flags_08006280",
                "param_1": "data_ptr",
                "param_2": "flag",
                "puVar1": "data",
                "*param_1": "*data_ptr",
                "DAT_080062f0": "PTR_DAT_080062f0"
            },
            "code": "int update_flags_08006280(uint **data_ptr, uint flag){\n  uint *data = *data_ptr;\n  switch(flag) {\n    case 0:\n      data[3] |= 2;\n      break;\n    case 4:\n      data[3] |= 4;\n      break;\n    case 8:\n      data[3] |= 8;\n      break;\n    case 0xc:\n      data[3] |= 0x10;\n  }\n  update_data(data_ptr, flag, 1);\n  if (data == DAT_080062f0) {\n    data[0x11] |= 0x8000;\n  }\n  **data_ptr |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "update_flags_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "decode_and_write_08007258",
                "param_1": "bit_offset",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "decoded_bit",
                "local_20": "local_bit",
                "local_1c": "decoded_data1",
                "local_18": "decoded_data2",
                "local_14": "local_var"
            },
            "code": "void decode_and_write_08007258(uint8_t bit_offset, uint32_t data1, uint32_t data2)\n{\n    uint32_t decoded_bit = (bit_offset << 0x18) >> 0x1c;\n    uint32_t local_bit = 1 << (bit_offset & 0xf) & 0xffff;\n    uint32_t local_var = 3;\n    *(uint32_t *)(DAT_080072d0 + 0x18) |= 1;\n    if ((bit_offset - 0xd & 0xff) < 2)\n    {\n        *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x4000000;\n    }\n    if (((bit_offset == 0xf) || (bit_offset == 0x13)) || (bit_offset == 0x14))\n    {\n        *(uint32_t *)(DAT_080072d4 + 4) = *(uint32_t *)(DAT_080072d4 + 4) & 0xf8ffffff | 0x2000000;\n    }\n    uint32_t decoded_data1 = data1;\n    uint32_t decoded_data2 = data2;\n    decode_data(decoded_bit, &local_bit, &decoded_data1, &decoded_data2);\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "decode_and_write_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "check_and_update_result_0800a0ec",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "ptr",
                "iVar2": "func_result"
            },
            "code": "void check_and_update_result_0800a0ec(int *result, int param1, int param2, int param3){\n                      undefined *ptr = PTR_DAT_0800a10c;\n                      *(undefined4 *)PTR_DAT_0800a10c = 0;\n                      int func_result = FUN_08008846(param1, param2, param3, 0, param3);\n                      if ((func_result == -1) && (*(int *)ptr != 0)) {\n                        *result = *(int *)ptr;\n                      }\n                      return;\n                    }",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "check_and_update_result_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "PTR_PTR_LAB_08008dbe_1_08008e10": "global_data_ptr"
            },
            "code": "void initialize_data_08008df8(undefined4 *data_ptr, undefined param_2, undefined param_3, undefined param_4, undefined param_5)\n{\n  *data_ptr = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(data_ptr + 1) = param_2;\n  *(undefined *)((int)data_ptr + 5) = param_3;\n  *(undefined *)((int)data_ptr + 6) = param_4;\n  *(undefined *)((int)data_ptr + 7) = param_5;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "initialize_data_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "get_result_based_on_input_08006c7c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "uint32_t get_result_based_on_input_08006c7c(uint32_t input1, uint32_t input2, uint32_t input3, uint32_t input4)\n{\n  int32_t result = FUN_08007376(input1, PTR_DAT_08006ca4, input3, input4, input4);\n  uint32_t shifted_result = (uint32_t)(result << 12) >> 27;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result == 4) {\n    return 0xc;\n  }\n  if (shifted_result == 2) {\n    return 4;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "get_result_based_on_input_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_to_zero_08006b5c",
                "param_1": "bit_index",
                "param_2": "array",
                "uVar1": "index_in_array",
                "*(uint *)(param_2 + uVar1 * 4)": "target_word",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "*target_word & ~bit_mask"
            },
            "code": "void set_bit_to_zero_08006b5c(uint bit_index, int* array) {\n  uint index_in_array = (bit_index << 0x18) >> 0x1c;\n  uint* target_word = (uint*)(array + index_in_array);\n  uint bit_mask = 1 << (bit_index & 0xf);\n  *target_word = *target_word & ~bit_mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "get_value_or_minus_one_08007376",
                "param_1": "input_value",
                "uVar1": "result",
                "FUN_0800735a": "calculate_value"
            },
            "code": "int get_value_or_minus_one_08007376(int input_value) {\n  if (input_value == -1) {\n    return -1;\n  }\n  int result = calculate_value();\n  return result;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "imported": false,
            "current_name": "get_value_or_minus_one_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_system_interrupt_08000188"
            },
            "code": "void trigger_system_interrupt_08000188(void)\n{\n  system_interrupt(0x3f);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "count",
                "puVar2": "current_data",
                "puVar3": "previous_data"
            },
            "code": "void process_data_08004f3c(uint **data)\n{\n  int count;\n  uint *current_data;\n  uint *previous_data;\n\n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  previous_data = *data;\n  if ((previous_data[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = NULL;\n      if ((previous_data[5] & 0x40) != 0) {\n        current_data = data[9];\n        data[9] = (uint *)((int)current_data + 1);\n        *(char *)current_data = (char)previous_data[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((previous_data[5] & 0x40) != 0) {\n        current_data = data[9];\n        data[9] = (uint *)((int)current_data + 1);\n        *(char *)current_data = (char)previous_data[4];\n      }\n      process_data_08004f3c_step2(data);\n    }\n  }\n  else {\n    previous_data[1] = previous_data[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x21) == '\\x01') {\n      data[14][13] = (uint)PTR_LAB_080053cc_1_0800507c;\n      count = FUN_08004050(data[14]);\n      if (count != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          current_data = data[9];\n          data[9] = (uint *)((int)current_data + 1);\n          *(char *)current_data = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][13])();\n      }\n    }\n    else {\n      data[13][13] = (uint)PTR_LAB_080053cc_1_0800507c;\n      count = FUN_08004050(data[13]);\n      if (count != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][13])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_08005080;\n    data[12] = NULL;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_data_08004f3c_step3(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004050",
                "FUN_08007ff0",
                "FUN_08004f3a",
                "FUN_08008020"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08005084",
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "process_data_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_length",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "pcVar3": "char_ptr",
                "cVar1": "first_char",
                "iVar2": "processed_length"
            },
            "code": "void process_input_080033cc(int input_length, uint32_t arg1, uint32_t arg2, uint32_t arg3) {\n    char first_char = *(*(char ***)(input_length + 4));\n    if (first_char == 'q') {\n        if (*(int *)(input_length + 0x68) != 0) {\n            int processed_length = process_string(input_length, *(int *)(input_length + 0x18) - 1, *(*(char ***)(input_length + 4)) + 1, *(*(char ***)(input_length + 4)), arg3);\n            write_output(input_length, 0, processed_length + 1);\n            (**(void (**)(uint32_t, uint32_t))(input_length + 0x68))(*(uint32_t *)(input_length + 0x40), *(int *)(input_length + 4) + 1);\n            return;\n        }\n    }\n    else if (first_char == 'y') {\n        if (*(void (**)(uint32_t, uint32_t, uint32_t))(input_length + 0x70) != (void (*)(uint32_t, uint32_t, uint32_t))0x0) {\n            if (*(uint *)(input_length + 0x18) < 3) {\n                (**(void (**)(uint32_t, uint32_t, uint32_t))(input_length + 0x70))(*(uint32_t *)(input_length + 0x34), 0, 0);\n                return;\n            }\n            int processed_length = process_string(input_length, *(uint *)(input_length + 0x18) - 3, *(*(char ***)(input_length + 4)) + 3, *(*(char ***)(input_length + 4)), arg3);\n            write_output(input_length, 0, processed_length + 3);\n            int char_ptr = *(int *)(input_length + 4);\n            (**(void (**)(uint32_t, uint8_t, uint8_t, uint32_t))(input_length + 0x70))(*(uint32_t *)(input_length + 0x34), *(uint8_t *)(char_ptr + 1), *(uint8_t *)(char_ptr + 2), char_ptr + 3);\n            return;\n        }\n    }\n    else if (*(void (**)(uint32_t, char, int, char *))(input_length + 0x6c) != (void (*)(uint32_t, char, int, char *))0x0) {\n        (**(void (**)(uint32_t, char, int, char *))(input_length + 0x6c))(*(uint32_t *)(input_length + 0x44), first_char, *(int *)(input_length + 0x18) - 1, *(*(char ***)(input_length + 4)) + 1);\n    }\n    return;\n}\n",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_status_08003de4",
                "param_1": "status",
                "iVar1": "result",
                "FUN_08003b8c": "check_connection"
            },
            "code": "int check_status_08003de4(int status){\n  int result;\n  if (*(char *)(status + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 0x24) = 1;\n  result = check_connection();\n  if (result == 0) {\n    *(uint *)(status + 0x28) = *(uint *)(status + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(status + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_status_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servo_index",
                "param_2": "min_pulse_width",
                "param_3": "max_pulse_width",
                "param_4": "servo_pin",
                "bVar1": "servo_count",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000584": "max_servos_attached_error",
                "PTR_s_Max_servos_attached_08000580": "max_servos_attached_error_msg",
                "bVar2": "last_detached_servo_index",
                "PTR_DAT_08000570": "last_detached_servo_ptr",
                "PTR_DAT_08000578": "servo_pulse_widths",
                "PTR_DAT_08000574": "detached_servos",
                "FUN_08002f14": "print_error_message",
                "FUN_080025ac": "set_servo_pulse_width",
                "FUN_08002634": "stop_servo",
                "PTR_DAT_0800057c": "servo_pulse_widths_base"
            },
            "code": "void attach_servo_08000500(int servo_index, int min_pulse_width, int max_pulse_width, undefined4 servo_pin)\n{\n    byte servo_count = *PTR_DAT_0800056c;\n    if (servo_count > 11) {\n        print_error_message(PTR_DAT_08000584, PTR_s_Max_servos_attached_08000580, max_pulse_width, servo_pin, servo_pin);\n        return;\n    }\n    byte last_detached_servo_index = *PTR_DAT_08000570;\n    if (last_detached_servo_index == 0) {\n        PTR_DAT_08000578[servo_index] = servo_count;\n        *PTR_DAT_0800056c = servo_count + 1;\n    }\n    else {\n        PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_detached_servo_index - 1];\n        *PTR_DAT_08000570 = last_detached_servo_index - 1;\n    }\n    if ((min_pulse_width > 0) && (max_pulse_width > 0)) {\n        set_servo_pulse_width(PTR_DAT_08000578[servo_index] * 3 + PTR_DAT_0800057c, servo_index, min_pulse_width, max_pulse_width);\n        return;\n    }\n    stop_servo(PTR_DAT_08000578[servo_index] * 3 + PTR_DAT_0800057c, servo_index);\n    return;\n}",
            "called": [
                "FUN_080025ac",
                "FUN_08002f14",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "attach_servo_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_memory_for_struct_08009d24",
                "param_1": "num_structs",
                "param_2": "struct_size",
                "puVar1": "struct_ptr",
                "iVar2": "total_size",
                "FUN_08009270": "allocate_memory",
                "undefined4": "void",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "undefined4* allocate_memory_for_struct_08009d24(int num_structs, int struct_size) {\n  undefined4 *struct_ptr;\n  int total_size = (num_structs - 1) * struct_size + 0x74;\n  struct_ptr = (undefined4 *)allocate_memory(total_size);\n  if (struct_ptr != NULL) {\n    *struct_ptr = 0;\n    struct_ptr[1] = num_structs;\n    struct_ptr[2] = struct_ptr + 3;\n    memset(struct_ptr + 3, 0, total_size - 0x68);\n  }\n  return struct_ptr;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_struct_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_struct_0800344a",
                "param_1": "struct_address",
                "uVar1": "index",
                "PTR_": "pointer_",
                "DAT_": "data_"
            },
            "code": "void initialize_struct_0800344a(int struct_address) {\n  uint32_t index;\n  *(int32_t *)(struct_address + 0x10) = 0;\n  *(uint8_t *)(struct_address + 0xc) = 0;\n  *(uint8_t *)(struct_address + 0xd) = 0;\n  uint32_t struct_size = *(uint32_t *)(struct_address + 8);\n  for (index = 0; index < struct_size; index++) {\n    *(uint8_t *)(*(int32_t *)(struct_address + 4) + index) = 0;\n  }\n  *(uint8_t *)(struct_address + 0x14) = 0;\n  *(int32_t *)(struct_address + 0x18) = 0;\n  if (*(function_pointer *)(struct_address + 0x78) != (function_pointer)0x0) {\n    (**(function_pointer *)(struct_address + 0x78))(*(int32_t *)(struct_address + 0x48));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_struct_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "process_data_080071e4",
                "param_1": "data",
                "local_50": "data_array",
                "FUN_08007320": "get_data",
                "PTR_DAT_08007238": "PTR_DATA",
                "FUN_08006c7c": "check_data",
                "FUN_08007376": "get_flag",
                "FUN_080063c0": "process_data1",
                "FUN_08006460": "process_data2",
                "FUN_08005e2e": "finalize_data"
            },
            "code": "void process_data_080071e4(undefined4 data)\n{\n  int result;\n  uint flag;\n  int data_array[17];\n\n  data_array[0] = get_data(data,PTR_DAT_08007238);\n  if ((data_array[0] != 0) && (((result = check_data(data), result == 0 || result == 4 || result == 8 || result == 0xc || result == 0x18)) && ((flag = get_flag(data,PTR_DAT_08007238) & 0x100000) == 0))) {\n    process_data_080071e41(data_array,result);\n  }\n  else {\n    process_data_080071e42(data_array,result);\n  }\n  finalize_data(data_array);\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c",
                "FUN_08006460",
                "FUN_080063c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "process_data_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08008e72(void *function_pointer){\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "bVar1": "is_valid",
                "iVar2": "result",
                "uVar3": "value",
                "uVar4": "index",
                "uVar5": "inner_index"
            },
            "code": "void process_data_080022f8()\n{\n  bool is_valid;\n  int result;\n  undefined4 value;\n  uint index;\n  uint inner_index;\n  FUNC_08000ef8();\n  while (result = FUN_08002ec4(PTR_DAT_080023e0), result != 0) {\n    FUN_08002ed2(PTR_DAT_080023e0);\n  }\n  result = FUN_08008abc();\n  *(int *)PTR_DAT_080023e4 = result;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(result - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      inner_index = index - 0x2e & 0xff;\n      if (inner_index < 0xe) {\n        if (index < 0x3c) {\n          result = (int)(char)PTR_DAT_080023f4[index];\n        }\n        else {\n          result = -1;\n        }\n        result = FUN_080036ac(result);\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          if (index < 0x3c) {\n            result = (int)(char)PTR_DAT_080023f4[index];\n          }\n          else {\n            result = -1;\n          }\n          result = FUN_080036ac(result);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            result = FUN_08002fa0(PTR_DAT_080023e0,index);\n            if (result == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((*(int *)PTR_DAT_080023f0 >> inner_index & 1U) != 0)) {\n        value = FUN_08008880(inner_index);\n        FUN_08002ef2(PTR_DAT_080023e0,inner_index,value);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (index = 0; (int)index < (char)*PTR_DAT_080023f8 + 1; index = index + 1 & 0xff) {\n        result = index * 0xc;\n        FUN_08001c18(PTR_DAT_080023fc[result],*(undefined4 *)(PTR_DAT_080023fc + result + 4),PTR_DAT_080023fc[result + 8],PTR_DAT_080023fc[result + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08002ef2",
                "FUN_08002ec4",
                "FUN_08002fa0",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_application_080072fa",
                "FUN_08003724": "initialize_network",
                "FUN_080035b8": "initialize_database"
            },
            "code": "void initialize_application_080072fa(void)\n{\n  initialize_network();\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_application_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "current_char",
                "puVar2": "ptr_data",
                "puVar3": "ptr_data_9"
            },
            "code": "uint32_t process_data_08005084(uint32_t **data)\n{\n  char current_char = *(char *)((int)data + 0x3d);\n  (*data)[1] &= 0xfffff8ff;\n  **data |= 1;\n  **data &= 0xfffffbff;\n  uint32_t *ptr_data = *data;\n  if ((ptr_data[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(int16_t *)((int)data + 0x2a) = (int16_t)*(uint32_t *)(*data[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)data + 0x2a) = (int16_t)*(uint32_t *)(*data[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)data + 0x2a) != 0) {\n    if ((ptr_data[5] & 4) != 0) {\n      uint32_t *ptr_data_9 = data[9];\n      data[9] = (uint32_t *)((int)ptr_data_9 + 1);\n      *(char *)ptr_data_9 = (char)ptr_data[4];\n      *(int16_t *)((int)data + 0x2a) = *(int16_t *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr_data = data[9];\n      data[9] = (uint32_t *)((int)ptr_data + 1);\n      *(char *)ptr_data = (char)(*data)[4];\n      *(int16_t *)((int)data + 0x2a) = *(int16_t *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint32_t *)((uint32_t)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      data[0xb] = PTR_DAT_08005184;\n      data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUN_08007ff0();\n    }\n    else if ((data[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      data[0xc] = (uint32_t *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      do_nothing_08004a74();\n    }\n  }\n  else {\n    FUN_08004f3c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "params",
                "puVar1": "ptr1"
            },
            "code": "void initialize_parameters_0800291c(undefined4 *params)\n{\n  undefined *ptr1;\n  params[1] = 0;\n  params[2] = 1000;\n  *params = function_ptr;\n  ptr1 = data_ptr;\n  *(undefined *)(params + 0x1b) = data_ptr[0xe];\n  *(undefined *)((int)params + 0x6d) = ptr1[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "execute_function_with_param_08002ac0",
                "param_1": "function",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "FUN_08002a58": "execute_function"
            },
            "code": "void execute_function_with_param_08002ac0(void* function, int param1, void* param2, void* param3)\n{\n  execute_function(function, 1, param2, param3, param3);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_values_if_param_2_equals_121_08003346",
                "param_1": "base_address",
                "param_2": "param_2",
                "param_3": "new_value_1",
                "param_4": "new_value_2",
                "*(undefined4 *)(param_1 + 0x70)": "*(int *)(base_address + 0x70)",
                "*(undefined4 *)(param_1 + 0x34)": "*(int *)(base_address + 0x34)"
            },
            "code": "void update_values_if_param_2_equals_121_08003346(int base_address, int param_2, int new_value_1, int new_value_2) {\n  if (param_2 == 0x79) {\n    *(int *)(base_address + 0x70) = new_value_1;\n    *(int *)(base_address + 0x34) = new_value_2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_values_if_param_2_equals_121_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_structure_080032bc",
                "param_1": "structure",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "leading_zeroes_count"
            },
            "code": "void initialize_structure_080032bc(int *structure, int param_2, int param_3)\n{\n    uint leading_zeroes_count;\n    structure[1] = param_2;\n    structure[2] = param_3;\n    structure[3] = 0;\n    structure[4] = 0;\n    structure[5] = 0;\n    structure[6] = 0;\n    structure[7] = 0;\n    structure[8] = 0;\n    structure[9] = 0;\n    structure[10] = 0;\n    structure[11] = 0;\n    structure[12] = 0;\n    structure[13] = 0;\n    structure[14] = 0;\n    structure[15] = 0;\n    structure[16] = 0;\n    structure[17] = 0;\n    structure[18] = 0;\n    structure[19] = 0;\n    structure[20] = 0;\n    structure[21] = 0;\n    structure[22] = 0;\n    structure[23] = 0;\n    structure[24] = 0;\n    structure[25] = 0;\n    structure[26] = 0;\n    structure[27] = 0;\n    structure[28] = 0;\n    structure[29] = 0;\n    structure[30] = 0;\n    structure[31] = 0;\n    structure[32] = 0;\n    structure[33] = 0;\n    structure[34] = 0;\n    structure[35] = 0;\n    structure[36] = 0;\n    structure[37] = 0;\n    structure[38] = 0;\n    structure[39] = 0;\n    structure[40] = 0;\n    structure[41] = 0;\n    structure[42] = 0;\n    structure[43] = 0;\n    structure[44] = 0;\n    structure[45] = 0;\n    structure[46] = 0;\n    structure[47] = 0;\n    structure[48] = 0;\n    structure[49] = 0;\n    structure[50] = 0;\n    leading_zeroes_count = count_leading_zeroes(param_2);\n    structure[0] = (int)(leading_zeroes_count >> 5);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "execute_function_08003106",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr"
            },
            "code": "void execute_function_08003106(void **function_ptr, int arg1, int arg2, int arg3) {\n  void **ptr = (void **)*function_ptr;\n  if (ptr != NULL) {\n    (**(void (**)(void *, int))(*ptr))(ptr, 0xf0);\n    (***(void (***)(void *))(*function_ptr))((void *)*function_ptr, 0x6f);\n    (***(void (***)(void *))(*function_ptr))((void *)*function_ptr, arg1);\n    execute_another_function(function_ptr, arg2, arg3, arg2);\n    (***(void (***)(void *))(*function_ptr))((void *)*function_ptr, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "execute_function_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = FUN_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        FUN_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        FUN_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_08007320",
                "FUN_080073ae",
                "FUN_080045c0",
                "FUN_08003f30",
                "FUN_08003f94",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "initialize_game_08007708",
                "FUN_08007438": "load_game_data"
            },
            "code": "void initialize_game_08007708(void)\n{\n  load_game_data();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "initialize_game_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "check_if_initialized_and_call_function_0800018c",
                "param_1": "input_param_1",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "input_param_4",
                "uVar1": "return_value",
                "PTR_DAT_080001a4": "ptr_dat_080001a4",
                "FUN_08000188": "call_function"
            },
            "code": "int check_if_initialized_and_call_function_0800018c(int input_param_1, int input_param_4) {\n  int return_value;\n  if (*(int *)PTR_DAT_080001a4 != 0) {\n    return 0;\n  }\n  return_value = call_function(1, input_param_1, 0, 0, input_param_4);\n  return return_value;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_if_initialized_and_call_function_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "bit_position",
                "DAT_08003fac": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08003f94(uint bit_position)\n{\n  if (bit_position >= 0) {\n    int array_index = bit_position / 32;\n    int bit_index = bit_position % 32;\n    int* array_ptr = (int*)(DAT_08003fac + array_index * 4);\n    *array_ptr = 1 << bit_index;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "set_flags_and_call_function_08008c44",
                "param_1": "obj",
                "param_2": "param",
                "param_3": "flags",
                "bVar1": "flag_masked",
                "iVar2": "num_flags_set",
                "UNRECOVERED_JUMPTABLE": "jump_table_index",
                "extraout_r1": "jump_table_lookup_result"
            },
            "code": "void set_flags_and_call_function_08008c44(int obj, int param, byte flags) {\\n\\\n    int num_flags_set = 0;\\n\\\n    int jump_table_index = 0;\\n\\\n    uint jump_table_lookup_result;\\n\\\n    byte flag_masked = flags & 7;\\n\\\n    if (flag_masked == 4) {\\n\\\n        num_flags_set = 7;\\n\\\n    }\\n\\\n    else if (flag_masked == 6) {\\n\\\n        num_flags_set = 8;\\n\\\n    }\\n\\\n    else if (flag_masked == 2) {\\n\\\n        num_flags_set = 6;\\n\\\n    }\\n\\\n    if ((flags & 0x30) == 0x30) {\\n\\\n        *(int *)(obj + 0x128) = 0x600;\\n\\\n        num_flags_set++;\\n\\\n    }\\n\\\n    else if ((flags & 0x20) == 0) {\\n\\\n        *(int *)(obj + 0x128) = 0;\\n\\\n    }\\n\\\n    else {\\n\\\n        *(int *)(obj + 0x128) = 0x400;\\n\\\n        num_flags_set++;\\n\\\n    }\\n\\\n    if ((flags & 8) == 0) {\\n\\\n        *(int *)(obj + 0x124) = 0;\\n\\\n    }\\n\\\n    else {\\n\\\n        *(int *)(obj + 0x124) = 0x2000;\\n\\\n    }\\n\\\n    if (num_flags_set == 8) {\\n\\\n        *(int *)(obj + 0x120) = 0;\\n\\\n    }\\n\\\n    else if (num_flags_set == 9) {\\n\\\n        *(int *)(obj + 0x120) = 0x1000;\\n\\\n    }\\n\\\n    else {\\n\\\n        num_flags_set = 0;\\n\\\n    }\\n\\\n    if (num_flags_set != 0) {\\n\\\n        FUNC_08008078(obj + 0xd4);\\n\\\n        FUN_0800863c(obj + 0xd4,uRam08008cf0);\\n\\\n        return;\\n\\\n    }\\n\\\n    jump_table_index = 0x8008cee;\\n\\\n    FUN_080090cc(uRam08008cfc,299,uRam08008cf8,uRam08008cf4);\\n\\\n    jump_table_lookup_result = (uint)extraout_r1;\\n\\\n    if (jump_table_lookup_result < 0x3c) {\\n\\\n        uRam0000012d = PTR_DAT_08008d14[jump_table_lookup_result];\\n\\\n    }\\n\\\n    else {\\n\\\n        uRam0000012d = 0xff;\\n\\\n    }\\n\\\n    (*jump_table_index)(0,jump_table_lookup_result,&stack0x00000148);\\n\\\n    return;\\n\\\n}",
            "called": [
                "FUN_08008078",
                "FUN_080090cc",
                "FUN_0800863c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "perform_task_08002a26",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "FUN_08002a1c": "call_function"
            },
            "code": "void perform_task_08002a26(undefined4 arg1, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  call_function(arg1, 0x33, arg3, arg4, arg4);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "perform_task_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "set_flags_0800430c",
                "param_1": "param_array",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)(ptr + 0x3e)",
                "param_1[0x14]": "ptr[0x14]",
                "*(uint *)(*param_1 + 0x10)": "ptr[4]",
                "param_1[0x11]": "ptr[0x11]",
                "0xfe": "0xfe",
                "0xffU": "0xffU",
                "1": "1",
                "param_1[4]": "ptr[4]",
                "0x4000": "0x4000",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)(ptr + 0x3d)",
                "(uint)(param_1[0x11] << 0x10) >> 0x17 & 6 | 0xf0": "(ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf0",
                "0xf0": "0xf0",
                "0x17": "0x17",
                "param_1[0x14] == 1": "ptr[0x14] == 1"
            },
            "code": "uint8_t set_flags_0800430c(int *param_array)\n{\n    uint32_t* ptr = (uint32_t*) param_array;\n    uint8_t flag = 0;\n\n    if (*(char *)(ptr + 0x3e) == '@')\n    {\n        if (ptr[0x14] == 0)\n        {\n            ptr[4] = ptr[0x11] & 0xfe;\n        }\n        else\n        {\n            ptr[4] = ptr[0x11] & 0xffU | 1;\n        }\n    }\n    else if (ptr[4] == 0x4000)\n    {\n        if (*(char *)(ptr + 0x3d) == '!')\n        {\n            ptr[4] = ptr[0x11] & 0xfe;\n        }\n        else\n        {\n            ptr[4] = ptr[0x11] & 0xffU | 1;\n        }\n    }\n    else if (ptr[0x14] == 0)\n    {\n        ptr[4] = (ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (ptr[0x14] == 1)\n    {\n        ptr[4] = (ptr[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return flag;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flags_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "check_and_process_data_08006060",
                "param_1": "data_array",
                "*(char *)((int)param_1 + 0x3d)": "data_array[0x3d]",
                "*(undefined *)(param_1 + 0xf)": "data_array[0xf]",
                "FUN_08007708": "call_helper_function",
                "*(undefined *)((int)param_1 + 0x3d)": "data_array[0x3d]",
                "FUN_08005fe8": "process_data"
            },
            "code": "int check_and_process_data_08006060(int *data_array)\n{\n    if (data_array != NULL) {\n        if (data_array[0x3d] == 0) {\n            data_array[0xf] = 0;\n            call_helper_function();\n        }\n        data_array[0x3d] = 2;\n        process_data(data_array[0], &data_array[1]);\n        data_array[0x3d] = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08007708",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_and_process_data_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "update_data_08003350",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "new_data",
                "param_4": "new_flag",
                "*(undefined4 *)(param_1 + 0x74)": "*(int *)(data_ptr + 0x74)",
                "*(undefined4 *)(param_1 + 0x38)": "*(int *)(data_ptr + 0x38)",
                "*(undefined4 *)(param_1 + 0x78)": "*(int *)(data_ptr + 0x78)",
                "*(undefined4 *)(param_1 + 0x48)": "*(int *)(data_ptr + 0x48)"
            },
            "code": "void update_data_08003350(int data_ptr, int flag, int new_data, int new_flag) {\n  if (flag == 0xf9) {\n    *(int *)(data_ptr + 0x74) = new_data;\n    *(int *)(data_ptr + 0x38) = new_flag;\n    return;\n  }\n  if (flag != 0xff) {\n    return;\n  }\n  *(int *)(data_ptr + 0x78) = new_data;\n  *(int *)(data_ptr + 0x48) = new_flag;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = FUN_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "set_flags_08006186",
                "param_1": "ptr_param",
                "param_2": "param_2",
                "param_3": "flag",
                "*(char *)(param_1 + 0xf)": "*(char *)(ptr_param + 0xf)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(ptr_param + 0xf)",
                "*(undefined *)((int)param_1 + 0x3d)": "*(undefined *)((int)ptr_param + 0x3d)",
                "*(uint *)(*param_1 + 0x18)": "*(uint *)(*ptr_param + 0x18)",
                "*(uint *)(param_2 + 0x10)": "*(uint *)(param_2 + 0x10)",
                "*(uint *)(*param_1 + 0x1c)": "*(uint *)(*ptr_param + 0x1c)",
                "*(int *)(param_2 + 0x10)": "*(int *)(param_2 + 0x10)",
                "FUN_08005cec": "set_flag1",
                "FUN_080060c4": "set_flag2",
                "FUN_08005d48": "set_flag3",
                "FUN_08005dac": "set_flag4"
            },
            "code": "int set_flags_08006186(int *ptr_param, int param_2, int flag)\n{\n  if (*(char *)(ptr_param + 0xf) != '\\x01') {\n    *(undefined *)(ptr_param + 0xf) = 1;\n    *(undefined *)((int)ptr_param + 0x3d) = 2;\n    switch(flag) {\n    case 0:\n      set_flag1(*ptr_param);\n      *(uint *)(*ptr_param + 0x18) |= 8;\n      *(uint *)(*ptr_param + 0x18) &= 0xfffffffb;\n      *(uint *)(*ptr_param + 0x18) |= *(uint *)(param_2 + 0x10);\n      break;\n    case 4:\n      set_flag2(*ptr_param);\n      *(uint *)(*ptr_param + 0x18) |= 0x800;\n      *(uint *)(*ptr_param + 0x18) &= 0xfffffbff;\n      *(uint *)(*ptr_param + 0x18) |= *(int *)(param_2 + 0x10) << 8;\n      break;\n    case 8:\n      set_flag3(*ptr_param);\n      *(uint *)(*ptr_param + 0x1c) |= 8;\n      *(uint *)(*ptr_param + 0x1c) &= 0xfffffffb;\n      *(uint *)(*ptr_param + 0x1c) |= *(uint *)(param_2 + 0x10);\n      break;\n    case 0xc:\n      set_flag4(*ptr_param);\n      *(uint *)(*ptr_param + 0x1c) |= 0x800;\n      *(uint *)(*ptr_param + 0x1c) &= 0xfffffbff;\n      *(uint *)(*ptr_param + 0x1c) |= *(int *)(param_2 + 0x10) << 8;\n    }\n    *(undefined *)((int)ptr_param + 0x3d) = 1;\n    *(undefined *)(ptr_param + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flags_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "call_function_on_start_08007710",
                "FUN_080074e0": "initialize_data"
            },
            "code": "void call_function_on_start_08007710(void)\n{\n  initialize_data();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "call_function_on_start_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_index",
                "param_2": "input_value",
                "bVar1": "byte_value",
                "input_array": "input_array",
                "is_set": "is_set",
                "counter": "counter",
                "note": "note",
                "message": "message",
                "sysex_callback": "sysex_callback",
                "sysex_data": "sysex_data",
                "aftertouch_callback": "aftertouch_callback",
                "aftertouch_data": "aftertouch_data",
                "note_on_callback": "note_on_callback",
                "note_on_data": "note_on_data",
                "program_change_callback": "program_change_callback",
                "program_change_data": "program_change_data",
                "song_position_callback": "song_position_callback",
                "song_position_data": "song_position_data",
                "song_select_callback": "song_select_callback",
                "song_select_data": "song_select_data",
                "pitch_bend_callback": "pitch_bend_callback",
                "pitch_bend_data": "pitch_bend_data",
                "process_input_helper": "process_input_helper",
                "reset_input_counters": "reset_input_counters",
                "process_program_change": "process_program_change"
            },
            "code": "void process_input_08003474(int input_index, uint8_t input_value) {\n  if (input_array[input_index].is_set) {\n    if (input_value != 0xf7) {\n      process_input_08003474_helper(input_index, input_value, input_array[input_index].counter);\n      input_array[input_index].counter++;\n      return;\n    }\n    input_array[input_index].is_set = false;\n    reset_input_counters();\n    return;\n  }\n  if ((input_array[input_index].counter == 0) || (input_value > 0x7f)) {\n    if ((int)input_value < 0xf0) {\n      input_array[input_index].note = input_value & 0xf;\n      input_value = input_value & 0xf0;\n    }\n    if (input_value == 0xf0) {\n      input_array[input_index].is_set = true;\n      input_array[input_index].counter = 0;\n      return;\n    }\n    if (input_value < 0xf1) {\n      if (input_value != 0xc0) {\n        if (input_value < 0xc1) {\n          if (input_value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (input_value == 0xd0) {\n            process_program_change(input_index, input_value);\n            return;\n          }\n          if (input_value != 0xe0) {\n            return;\n          }\n        }\n        input_array[input_index].counter = 2;\n        input_array[input_index].message[0] = input_value;\n        return;\n      }\n      process_program_change(input_index, input_value);\n      return;\n    }\n    if (input_value != 0xf9) {\n      if (0xf9 < input_value) {\n        if (input_value == 0xff) {\n          reset_input_counters();\n          return;\n        }\n        return;\n      }\n      if (1 < input_value - 0xf4) {\n        return;\n      }\n      input_array[input_index].counter = 2;\n      input_array[input_index].message[0] = input_value;\n      return;\n    }\n    if (input_array[input_index].sysex_callback != NULL) {\n      input_array[input_index].sysex_callback(input_array[input_index].sysex_data);\n    }\n  }\n  else {\n    input_array[input_index].counter--;\n    process_input_08003474_helper(input_index, input_value, input_array[input_index].counter);\n    if ((input_array[input_index].counter == 0) && (input_array[input_index].note != 0)) {\n      switch (input_array[input_index].note) {\n        case 0xd0:\n          if (input_array[input_index].aftertouch_callback != NULL) {\n            input_array[input_index].aftertouch_callback(input_array[input_index].aftertouch_data, input_array[input_index].note, input_array[input_index].message[1]);\n          }\n          break;\n        case 0x90:\n          if (input_array[input_index].note_on_callback != NULL) {\n            input_array[input_index].note_on_callback(input_array[input_index].note_on_data, input_array[input_index].note, input_array[input_index].message[1] + (input_array[input_index].message[2] << 7));\n          }\n          break;\n        case 0xc0:\n          if (input_array[input_index].program_change_callback != NULL) {\n            input_array[input_index].program_change_callback(input_array[input_index].program_change_data, input_array[input_index].note);\n          }\n          break;\n        case 0xf4:\n          if (input_array[input_index].song_position_callback != NULL) {\n            input_array[input_index].song_position_callback(input_array[input_index].song_position_data, input_array[input_index].message[1], input_array[input_index].message[2]);\n          }\n          break;\n        case 0xf5:\n          if (input_array[input_index].song_select_callback != NULL) {\n            input_array[input_index].song_select_callback(input_array[input_index].song_select_data, input_array[input_index].message[1]);\n          }\n          break;\n        case 0xe0:\n          if (input_array[input_index].pitch_bend_callback != NULL) {\n            input_array[input_index].pitch_bend_callback(input_array[input_index].pitch_bend_data, input_array[input_index].note, input_array[input_index].message[1] + (input_array[input_index].message[2] << 7));\n          }\n          break;\n      }\n      input_array[input_index].note = 0;\n      return;\n    }\n  }\n}",
            "called": [
                "FUN_0800344a",
                "FUN_080033cc",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_input_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_data_by_index_08006b7c",
                "param_1": "index",
                "DAT_08006ba4": "data_1",
                "DAT_08006bb4": "data_2",
                "DAT_08006ba8": "data_3",
                "DAT_08006bac": "data_4",
                "DAT_08006bb0": "data_5"
            },
            "code": "int get_data_by_index_08006b7c(int index) {\n  switch(index) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_data_by_index_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_decimal_to_base_08008e7c",
                "param_1": "output_string",
                "param_2": "decimal_number",
                "param_3": "base",
                "uVar2": "output_string_length",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "output_string_ptr",
                "cVar1": "digit",
                "local_15": "reversed_output_string",
                "0x0": "NULL",
                "**(code **)(*param_1 + 4)": "function_pointer"
            },
            "code": "int convert_decimal_to_base_08008e7c(int *output_string, uint decimal_number, uint base)\n{\n  char digit;\n  int output_string_length = 0;\n  char *output_string_ptr;\n  char digit_to_char_map[] = \"0123456789ABCDEF\";\n  char reversed_output_string[9];\n  reversed_output_string[0] = '\\0';\n  if ((int)base < 2) {\n    base = 10;\n  }\n  output_string_ptr = reversed_output_string + 1;\n  do {\n    uint quotient = decimal_number / base;\n    uint remainder = decimal_number % base;\n    output_string_ptr--;\n    digit = digit_to_char_map[remainder];\n    *output_string_ptr = digit;\n    output_string_length++;\n    decimal_number = quotient;\n  } while (decimal_number != 0);\n  for (int i = 0; i < output_string_length; i++) {\n    output_string[i] = reversed_output_string[i];\n  }\n  output_string[output_string_length] = '\\0';\n  return output_string_length;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_decimal_to_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "check_and_update_status_08003aa0",
                "param_1": "status_array",
                "iVar1": "result",
                "puVar2": "ptr_status_array"
            },
            "code": "int check_and_update_status_08003aa0(undefined4 *status_array) {\n  int result;\n  bool is_status_updated = *(char *)(status_array + 9) != '\\x01';\n  if (is_status_updated) {\n    *(undefined *)(status_array + 9) = 1;\n    result = FUN_08003a20();\n    if (result == 0) {\n      status_array[10] = (status_array[10] & 0xfffffcfe) | 0x100;\n      undefined4 *ptr_status_array = (undefined4 *)*status_array;\n      if ((ptr_status_array == PTR_DAT_08003b84) && ((PTR_DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        status_array[10] |= 0x100000;\n        if ((*(uint *)(PTR_DAT_08003b88 + 4) & 0x400) != 0) {\n          status_array[10] = (status_array[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        status_array[10] &= 0xffefffff;\n        if ((ptr_status_array[1] & 0x400) != 0) {\n          status_array[10] = (status_array[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((status_array[10] & 0x1000) == 0) {\n        status_array[0xb] = 0;\n      }\n      else {\n        status_array[0xb] &= 0xfffffff9;\n      }\n      *(undefined *)(status_array + 9) = 0;\n      *ptr_status_array = 0xfffffffd;\n      status_array = (undefined4 *)*status_array;\n      if (((status_array[2] & 0xe0000) == 0xe0000) && ((status_array != PTR_DAT_08003b84) || ((PTR_DAT_08003b84[-0xff] & 0xf0000) == 0))) {\n        status_array[2] |= 0x500000;\n      }\n      else {\n        status_array[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(status_array + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_status_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "set_flags_08003ce8",
                "param_1": "flag_array",
                "iVar1": "return_value",
                "DAT_08003ddc": "DAT_08003ddc",
                "DAT_08003de0": "DAT_08003de0",
                "some_other_function": "some_other_function"
            },
            "code": "int set_flags_08003ce8(int *flag_array)\n{\n  int return_value;\n  if (flag_array == NULL) {\n    return_value = 1;\n  }\n  else {\n    flag_array[10] |= 2;\n    return_value = some_other_function();\n    if (return_value == 0) {\n      *(int *)*flag_array = -32;\n      *(unsigned int *)(*flag_array + 4) = DAT_08003ddc & *(unsigned int *)(*flag_array + 4);\n      *(unsigned int *)(*flag_array + 8) = DAT_08003de0 & *(unsigned int *)(*flag_array + 8);\n      *(unsigned int *)(*flag_array + 12) &= 0xff000000;\n      *(unsigned int *)(*flag_array + 16) &= 0xc0000000;\n      *(unsigned int *)(*flag_array + 20) &= 0xfffff000;\n      *(unsigned int *)(*flag_array + 24) &= 0xfffff000;\n      *(unsigned int *)(*flag_array + 28) &= 0xfffff000;\n      *(unsigned int *)(*flag_array + 32) &= 0xfffff000;\n      *(unsigned int *)(*flag_array + 36) &= 0xfffff000;\n      *(unsigned int *)(*flag_array + 44) &= 0xff000000;\n      *(unsigned int *)(*flag_array + 48) &= 0xff000000;\n      *(unsigned int *)(*flag_array + 52) &= 0xc0000000;\n      *(unsigned int *)(*flag_array + 56) &= 0xc0000000;\n      *(unsigned int *)(*flag_array + 60) &= 0xffc00000;\n      *(unsigned int *)(*flag_array + 64) &= 0xffc00000;\n      some_other_function(flag_array);\n      flag_array[11] = 0;\n      flag_array[10] = 0;\n    }\n    *(char *)(flag_array + 9) = 0;\n  }\n  return return_value;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_flags_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_params_08005fe8",
                "param_1": "param_array",
                "param_2": "new_values",
                "uVar1": "current_value",
                "DAT_0800605c": "ptr_1",
                "ptr_2": "ptr_2",
                "ptr_3": "ptr_3",
                "ptr_4": "ptr_4"
            },
            "code": "void update_params_08005fe8(uint *param_array, uint *new_values) {\n  uint current_value = *param_array;\n  if ((((param_array == DAT_0800605c) || (param_array == ptr_2)) || (param_array == ptr_3)) || (param_array == ptr_4)) {\n    current_value = current_value & 0xffffff8f | new_values[1];\n  }\n  if (((param_array == DAT_0800605c) || (param_array == ptr_2)) || ((param_array == ptr_3 || (param_array == ptr_4)))) {\n    current_value = current_value & 0xfffffcff | new_values[3];\n  }\n  *param_array = current_value & 0xffffff7f | new_values[5];\n  param_array[11] = new_values[2];\n  param_array[10] = *new_values;\n  if (param_array == DAT_0800605c) {\n    param_array[12] = new_values[4];\n  }\n  param_array[5] = 1;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "update_params_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "find_offset_08008804",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "memory_address"
            },
            "code": "int find_offset_08008804(int offset){\n  int current_offset = 0;\n  if (*(int *)PTR_DAT_08008834 == 0) {\n    *(undefined **)PTR_DAT_08008834 = PTR_DAT_08008838;\n  }\n  current_offset = *(int *)PTR_DAT_08008834;\n  undefined *memory_address = (undefined *)(offset + current_offset);\n  if (memory_address <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = memory_address;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "find_offset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "is_char_in_string_0800738a",
                "param_1": "char_to_find",
                "param_2": "string",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int is_char_in_string_0800738a(int char_to_find, char *string){\n                      if (char_to_find == -1) {\n                        return 0;\n                      }\n                      while( true ) {\n                        if (*string == -1) {\n                          return 0;\n                        }\n                        if (char_to_find == *string) break;\n                        string = string + 0xc;\n                      }\n                      return 1;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "is_char_in_string_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_input_08004e3c",
                "param_1": "input",
                "puVar1": "input_11",
                "input_9": "input_9",
                "short": "short_val"
            },
            "code": "uint32_t process_input_08004e3c(uint32_t **input)\n{\n  uint32_t *input_11 = input[0xb];\n  uint16_t short_val = *(uint16_t *)((int)input + 0x2a);\n  \n  if (short_val == 3) {\n    if (((input_11 == (uint32_t *)0x4) || (input_11 == (uint32_t *)0x8)) || (input_11 == (uint32_t *)0xffff0000)) {\n      **input = **input & 0xfffffbff;\n    }\n    uint32_t *input_9 = input[9];\n    input[9] = (uint32_t *)((int)input_9 + 1);\n    *(char *)input_9 = (char)(*input)[4];\n    *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) - 1;\n  }\n  else if (short_val == 2) {\n    if (((input_11 == (uint32_t *)0x4) || (input_11 == (uint32_t *)0x8)) || (input_11 == (uint32_t *)0xffff0000)) {\n      (*input)[1] = (*input)[1] & 0xfffffcff;\n      **input = **input | 0x200;\n    }\n    else {\n      if (input_11 == (uint32_t *)0x2) {\n        **input = **input | 0x400;\n      }\n      else {\n        **input = **input & 0xfffffbff;\n      }\n      (*input)[1] = (*input)[1] & 0xfffffcff;\n    }\n    uint32_t *input_9 = input[9];\n    input[9] = (uint32_t *)((int)input_9 + 1);\n    *(char *)input_9 = (char)(*input)[4];\n    *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) - 1;\n    uint32_t *input_9_2 = input[9];\n    input[9] = (uint32_t *)((int)input_9_2 + 1);\n    *(char *)input_9_2 = (char)(*input)[4];\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    input[0xc] = (uint32_t *)0x0;\n    if (*(char *)((int)input + 0x3e) == '@') {\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      *(undefined *)((int)input + 0x3e) = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    uint32_t *input_9 = input[9];\n    input[9] = (uint32_t *)((int)input_9 + 1);\n    *(char *)input_9 = (char)(*input)[4];\n    *(uint16_t *)((int)input + 0x2a) = *(uint16_t *)((int)input + 0x2a) - 1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "execute_function_with_param_080091a0",
                "param_1": "param",
                "PTR_PTR_DAT_080091ac": "function_pointer_array",
                "FUN_080091d8": "function_ptr"
            },
            "code": "void execute_function_with_param_080091a0(void** PTR_PTR_DAT_080091ac, void* param){\n  void (*function_ptr)(void*) = (void (*)(void*)) PTR_PTR_DAT_080091ac[0][0];\n  function_ptr(param);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "execute_function_08002a1c",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "FUN_08002968": "execute_with_args"
            },
            "code": "void execute_function_08002a1c(void* function_ptr, int arg1, void* arg2, int arg3)\n{\n  execute_with_args(function_ptr, arg1, arg2, arg3, arg3);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "execute_function_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input_param",
                "return": "result"
            },
            "code": "int subtract_four_08007718(int input_param) {\n  int result = input_param - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "check_param_08002948",
                "param_1": "param1",
                "param_2": "param2",
                "FUN_0800291c": "call_function"
            },
            "code": "void check_param_08002948(int param1, int param2)\n{\n  if (param1 == 1) {\n    if (param2 == 0xffff) {\n      call_function(PTR_DAT_08002964);\n    }\n  }\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "check_param_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "file_descriptor",
                "param_2": "file_mode",
                "param_3": "permission_result",
                "param_4": "permission_flags",
                "iVar1": "file_permission",
                "uVar2": "flags",
                "auStack_4c": "file_permission_buffer",
                "local_48": "file_permission_mask"
            },
            "code": "int check_file_permissions_08009e64(int file_descriptor, int file_mode, int *permission_result, uint *permission_flags)\n{\n  int file_permission;\n  uint flags = 0;\n  if ((*(short *)(file_mode + 0xe) < 0) ||\n     (file_permission = check_file_permission(file_descriptor,(int)*(short *)(file_mode + 0xe),&file_permission), file_permission < 0)) {\n    *permission_flags = 0;\n    if ((int)((uint)*(ushort *)(file_mode + 0xc) << 0x18) < 0) {\n      flags = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *permission_flags = (uint)((file_permission & 0xf000) == 0x2000);\n  }\n  flags = 0x400;\nLAB_08009ea4:\n  *permission_result = flags;\n  return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_file_permissions_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "calculate_new_value_08002acc",
                "param_1": "requested_length",
                "puVar1": "data_pointer",
                "iVar2": "calculated_length",
                "uVar3": "new_value"
            },
            "code": "void calculate_new_value_08002acc(uint32_t requested_length, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_pointer;\n  int calculated_length;\n  undefined new_value;\n  data_pointer = PTR_DAT_08002afc;\n  if ((byte)*PTR_DAT_08002af8 < requested_length) {\n    if (requested_length < 0x20) {\n      requested_length = 0x20;\n    }\n    calculated_length = FUN_08009908(*(undefined4 *)PTR_DAT_08002afc, requested_length, param_3, (uint)(byte)*PTR_DAT_08002af8, param_4);\n    *(int *)data_pointer = calculated_length;\n    if (calculated_length == 0) {\n      new_value = 0;\n    }\n    else {\n      new_value = (undefined)requested_length;\n    }\n    *PTR_DAT_08002af8 = new_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_values_08002a30",
                "param_1": "flag",
                "param_2": "value"
            },
            "code": "void initialize_values_08002a30(int flag, int value) {\n    *PTR_DAT_08002a48 = 1;\n    *PTR_DAT_08002a4c = (char)(value << 1);\n    *PTR_DAT_08002a50 = 0;\n    *PTR_DAT_08002a54 = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "initialize_values_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "buffer_offset",
                "pbVar2": "current_buffer",
                "pbVar3": "end_of_buffer",
                "uVar4": "output_byte",
                "PTR_DAT_08009a74": "ptr1",
                "PTR_DAT_08009a78": "ptr2",
                "PTR_DAT_08009a7c": "ptr3",
                "FUN_08009d50": "handle_error",
                "FUN_08009a80": "handle_buffer",
                "FUN_08009c7c": "handle_buffer"
            },
            "code": "uint process_input_0800932c(int input_length, byte input_byte, byte **input_buffer) {\n  int buffer_offset;\n  byte *current_buffer;\n  byte *end_of_buffer;\n  uint output_byte;\n  \n  end_of_buffer = (*input_buffer)[2] + -1;\n  (*input_buffer)[2] = end_of_buffer;\n  if ((-1 < (int)end_of_buffer) || (((int)(*input_buffer)[6] <= (int)end_of_buffer) && (end_of_buffer != (byte *)0xa))) {\n    current_buffer = *input_buffer;\n    *input_buffer = current_buffer + 1;\n    *current_buffer = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    handle_error();\n  }\n  if (input_buffer == (byte **)PTR_DAT_08009a74) {\n    input_buffer = *(byte ***)(input_length + 4);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_08009a78) {\n    input_buffer = *(byte ***)(input_length + 8);\n  }\n  else if (input_buffer == (byte **)PTR_DAT_08009a7c) {\n    input_buffer = *(byte ***)(input_length + 0xc);\n  }\n  (*input_buffer)[2] = (*input_buffer)[6];\n  current_buffer = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  buffer_offset = (int)current_buffer << 0x1c;\n  if (((buffer_offset < 0) && ((current_buffer = (*input_buffer)[4]) != (byte *)0x0)) ||\n      ((buffer_offset = handle_buffer(input_length, input_buffer, buffer_offset, current_buffer, current_buffer), buffer_offset == 0))) {\n    output_byte = (uint)input_byte;\n    buffer_offset = (int)*input_buffer - (int)(*input_buffer)[4];\n    if ((buffer_offset < (int)(*input_buffer)[5]) || ((buffer_offset = handle_buffer(input_length, input_buffer), buffer_offset == 0))) {\n      (*input_buffer)[2] = (*input_buffer)[2] + -1;\n      current_buffer = *input_buffer;\n      *input_buffer = current_buffer + 1;\n      *current_buffer = input_byte;\n      if ((byte *)(buffer_offset + 1) != (*input_buffer)[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return output_byte;\n        }\n        if (output_byte != 10) {\n          return output_byte;\n        }\n      }\n      buffer_offset = handle_buffer(input_length, input_buffer);\n      if (buffer_offset == 0) {\n        return output_byte;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "execute_function_with_params_0800322c",
                "param_1": "function_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "func_ptr_ptr"
            },
            "code": "void execute_function_with_params_0800322c(undefined4 *function_ptr, undefined4 param_2, undefined4 param_3)\n{\n  undefined4 *func_ptr_ptr = (undefined4 *)*function_ptr;\n  if (func_ptr_ptr != (undefined4 *)0x0) {\n    (**(code **)*func_ptr_ptr)(func_ptr_ptr, 0xf9);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr, param_2);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr, param_3);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "str",
                "param_2": "substr",
                "pcVar1": "str_ptr",
                "pcVar2": "match_ptr",
                "pcVar3": "substr_ptr",
                "*param_1": "*str",
                "*param_2": "*substr"
            },
            "code": "char* find_substring_080099a4(char* str, char* substr) {\n    char* str_ptr;\n    char* substr_ptr;\n    char* match_ptr;\n\n    if (*str == '\\0') {\n        if (*substr != '\\0') {\n            str = NULL;\n        }\n        return str;\n    }\n\n    do {\n        str_ptr = str;\n\n        if (*str_ptr == '\\0') {\n            return NULL;\n        }\n\n        substr_ptr = substr - 1;\n        match_ptr = str_ptr - 1;\n\n        do {\n            substr_ptr++;\n\n            if (*substr_ptr == '\\0') {\n                return str_ptr;\n            }\n\n            match_ptr++;\n            str = str_ptr + 1;\n        } while (*match_ptr == *substr_ptr);\n    } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "PTR_DAT_08005a24": "PTR_DATA",
                "undefined4": "int",
                "*(undefined4 *)PTR_DAT_08005a24": "*value_pointer",
                "value_pointer": "value_pointer"
            },
            "code": "int get_value_from_pointer_08005a1c() {\n    int *(undefined4 *)PTR_DAT_08005a24 = (int *)PTR_DAT_08005a24;\n    return *(undefined4 *)PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n    FUN_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    FUN_08002f1e(PTR_DAT_08002044,0xf0);\n    FUN_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_08002044,0);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,0xb);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,2);\n        FUN_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,3);\n        FUN_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,4);\n        FUN_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,6);\n        FUN_08002f1e(puVar4,1);\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n      FUN_08002f1e(puVar5,0x6e);\n      FUN_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = FUN_08002fa0(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar6);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = FUN_08002fba(puVar5,bVar1);\n          FUN_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n          FUN_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      FUN_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = FUN_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          FUN_08000588(uVar12);\n        }\n        FUN_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      FUN_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        FUN_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          FUN_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        FUN_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        FUN_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        FUN_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      FUN_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_08002f14",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000a64",
                "FUN_08002a30",
                "FUN_08001bf8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_value_from_pointer_08003760",
                "PTR_DAT_08003768": "PTR_VALUE"
            },
            "code": "uint32_t get_value_from_pointer_08003760() {\n  uint32_t* pointer_to_value = (uint32_t*) PTR_DAT_08003768;\n  return *pointer_to_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08003b8c",
                "FUN_08003e20",
                "FUN_080066e8",
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_0800723c",
                "FUN_0800376c",
                "FUN_080067ac",
                "FUN_08007f0e",
                "FUN_08005460",
                "FUN_08005aa4",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_08007320",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_08007306": "call_function"
            },
            "code": "int check_param_08007320(int input_param)\n{\n  int result = 0;\n  if (input_param != -1) {\n    result = call_function();\n  }\n  return result;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_param_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "updateData_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "param_4",
                "puVar1": "originalPtr",
                "puVar2": "dataPtr",
                "PTR_DAT_08000c0c": "originalData",
                "PTR_DAT_08000c10": "modifiedData",
                "PTR_DAT_08000c14": "updateDataArray"
            },
            "code": "void updateData_08000be8(int index, uint32_t mask, int value, uint32_t param_4)\n{\n  uint32_t* dataPtr = (uint32_t*)((byte)PTR_DAT_08000c0c[index] & mask);\n  uint32_t* originalPtr = PTR_DAT_08000c0c;\n  if ((value != 0) || (originalPtr = (uint32_t*)(uint8_t)PTR_DAT_08000c10[index], dataPtr != originalPtr)) {\n    updateData_08000be8Helper(PTR_DAT_08000c14, index, dataPtr, originalPtr, param_4);\n    PTR_DAT_08000c10[index] = (char)dataPtr;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "updateData_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "calculate_and_set_value_if_valid_08003fd8",
                "param_1": "input_value",
                "puVar1": "data_ptr",
                "DAT_08003ffc": "data_ptr",
                "DAT_08004000": "memory_ptr"
            },
            "code": "int calculate_and_set_value_if_valid_08003fd8(unsigned int input_value) {\n  unsigned int *DAT_08003ffc = DAT_08003ffc;\n  unsigned int max_value = 0x1000000;\n  if (input_value - 1U < max_value) {\n    DAT_08003ffc[1] = input_value - 1U;\n    *(unsigned char *)(DAT_08004000 + 0x23) = 0xf0;\n    DAT_08003ffc[2] = 0;\n    *DAT_08003ffc = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "calculate_and_set_value_if_valid_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_message_0800307a",
                "param_1": "encoder",
                "param_2": "message_length",
                "param_3": "message",
                "param_4": "max_encoded_length",
                "uVar1": "current_byte",
                "uVar2": "bit_position",
                "uVar3": "encoded_length",
                "uVar4": "unused_variable"
            },
            "code": "void encode_message_0800307a(uint32_t *encoder, uint message_length, uint8_t *message, uint max_encoded_length) {\n  uint8_t current_byte = *message;\n  if (max_encoded_length == 0) {\n    max_encoded_length = 0xffffffff;\n  }\n  uint bit_position = 0;\n  uint encoded_length = 0;\n  while (encoded_length < message_length && (bit_position < max_encoded_length)) {\n    (***(code ***)(uint32_t *)*encoder)(encoder, ((uint)message[encoded_length] << (bit_position & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)message[encoded_length] >> (7 - bit_position & 0xff) & 0xff;\n    bit_position++;\n    while ((encoded_length = encoded_length + 1, 6 < bit_position && (encoded_length < max_encoded_length))) {\n      (***(code ***)(uint32_t *)*encoder)(encoder, current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_position = bit_position - 7;\n    }\n    encoded_length++;\n  }\n  if ((bit_position != 0) && (encoded_length < max_encoded_length)) {\n    (***(code ***)(uint32_t *)*encoder)(encoder, (1 << (bit_position & 0xff)) - 1U & current_byte);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce",
                "FUN_08003158",
                "FUN_0800325a"
            ],
            "imported": false,
            "current_name": "encode_message_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_with_param_0800319e",
                "param_1": "function_ptr",
                "param_2": "param",
                "param_3": "param2",
                "puVar1": "ptr_to_function",
                "local_a": "param2",
                "FUN_0800307a": "update_param_and_ptr"
            },
            "code": "void execute_function_with_param_0800319e(void* function_ptr, uint32_t param, uint16_t param2) {\n  void* ptr_to_function = *(void**)function_ptr;\n  if (ptr_to_function != NULL) {\n    uint32_t modified_param = param & 0xF | 0x90;\n    (*(void(*)(void*, uint32_t))ptr_to_function)(ptr_to_function, modified_param);\n    update_param_and_ptr(function_ptr, 2, &param2);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_value_at_offset_08008d00",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "value_to_set",
                "PTR_DAT_08008d14": "PTR_DAT_08008d14",
                "UNRECOVERED_JUMPTABLE": "UNRECOVERED_JUMPTABLE"
            },
            "code": "void set_value_at_offset_08008d00(int offset, uint value) {\n  const uint MAX_OFFSET = 0x3c;\n  const uint DEFAULT_VALUE = 0xff;\n  uint8_t value_to_set;\n  if (offset < MAX_OFFSET) {\n    value_to_set = PTR_DAT_08008d14[offset];\n  }\n  else {\n    value_to_set = DEFAULT_VALUE;\n  }\n  *(uint8_t *)(offset + 0x12d) = value_to_set;\n  code *UNRECOVERED_JUMPTABLE;\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "call_function_with_param_08009190",
                "param_1": "param",
                "PTR_PTR_DAT_0800919c": "ptr",
                "FUN_08009270": "function_with_param"
            },
            "code": "void call_function_with_param_08009190(void* PTR_PTR_DAT_0800919c, int param) {\n  function_with_param(*(void**)PTR_PTR_DAT_0800919c, param);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "call_function_with_param_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "process_input_08004b82",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1",
                "param_1[0xb]": "input[ptr1]",
                "param_1 + 10": "input + 10",
                "*(short *)(param_1 + 10)": "*(short *)(input + 10)",
                "*(short *)((int)param_1 + 0x2a)": "*(short *)((int)input + 0x2a)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)input + 0x3d)",
                "*(char *)((int)param_1 + 0x3e)": "*(char *)((int)input + 0x3e)",
                "param_1[0xc]": "input[ptr2]",
                "uint *": "uint32_t *",
                "input[0xb]": "input[ptr1]",
                "input[0xc]": "input[ptr2]",
                "input[0x12]": "input[ptr3]",
                "input[0x13]": "input[ptr4]",
                "input[0x14]": "input[ptr5]",
                "input[9]": "input[ptr6]",
                "(uint *)0x4": "(uint32_t *)0x4",
                "(uint *)0x8": "(uint32_t *)0x8",
                "(uint *)0xffff0000": "(uint32_t *)0xffff0000",
                "(uint32_t *)((int)input[0x14] + 2)": "(uint32_t *)((int)input[ptr5] + 2)",
                "(uint32_t *)((int)input[0x14] + 1)": "(uint32_t *)((int)input[ptr5] + 1)",
                "(uint32_t)input[0x12] & 0xff": "(uint32_t)input[ptr3] & 0xff",
                "(uint32_t)((int)input[0x12] << 0x10) >> 0x18": "(uint32_t)((int)input[ptr3] << 0x10) >> 0x18",
                "(uint32_t *)((int)ptr4 + 1)": "(uint32_t *)((int)input[ptr6] + 1)",
                "(uint32_t)*(byte *)ptr4": "(uint32_t)*(byte *)input[ptr6]"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input)\n{\n    char current_char;\n    uint32_t *ptr1;\n    uint32_t *ptr2;\n    uint32_t *ptr3;\n    uint32_t *ptr4;\n    uint32_t *ptr5;\n    uint32_t *ptr6;\n    uint32_t *ptr7;\n    uint32_t *ptr8;\n    uint32_t *ptr9;\n    uint32_t *ptr10;\n    uint32_t *ptr11;\n    uint32_t *ptr12;\n    uint32_t *ptr13;\n    uint32_t *ptr14;\n    uint32_t *ptr15;\n    uint32_t *ptr16;\n    uint32_t *ptr17;\n    uint32_t *ptr18;\n    uint32_t *ptr19;\n    uint32_t *ptr20;\n    current_char = *(char *)((int)input + 0x3d);\n    ptr1 = input[0xb];\n    if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n        if ((ptr1 == (uint32_t *)0x4) || ((ptr1 == (uint32_t *)0x8 || (ptr1 == (uint32_t *)0xffff0000)))) {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            **input = **input | 0x200;\n            input[0xc] = (uint32_t *)0x0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            if (*(char *)((int)input + 0x3e) == '@') {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08004b80();\n            }\n            else {\n                *(undefined *)((int)input + 0x3e) = 0;\n                do_nothing_08004a1e();\n            }\n        }\n        else {\n            (*input)[1] = (*input)[1] & 0xfffff8ff;\n            input[0xc] = (uint32_t *)0x11;\n            *(undefined *)((int)input + 0x3e) = 0;\n            *(undefined *)((int)input + 0x3d) = 0x20;\n            do_nothing_08004a1e();\n        }\n    }\n    else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            (*input)[1] = (*input)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)input + 0x3e) == '@') {\n            ptr2 = input[0x14];\n            if (ptr2 == (uint32_t *)0x0) {\n                ptr3 = input[0x13];\n                if (ptr3 == (uint32_t *)0x1) {\n                    (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n                }\n                else {\n                    (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n                    input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n                }\n            }\n            else if (ptr2 == (uint32_t *)0x1) {\n                (*input)[4] = (uint32_t)input[0x12] & 0xff;\n                input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n            }\n            else if (ptr2 == (uint32_t *)0x2) {\n                if (*(char *)((int)input + 0x3d) == '\"') {\n                    **input = **input | 0x100;\n                }\n                else if (*(char *)((int)input + 0x3d) == '!') {\n                    ptr4 = input[9];\n                    input[9] = (uint32_t *)((int)ptr4 + 1);\n                    (*input)[4] = (uint32_t)*(byte *)ptr4;\n                    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            ptr5 = input[9];\n            input[9] = (uint32_t *)((int)ptr5 + 1);\n            (*input)[4] = (uint32_t)*(byte *)ptr5;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "start_index",
                "param_2": "end_index",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "current_index",
                "iVar2": "last_occurrence_index",
                "FUN_08009938": "find_next_occurrence"
            },
            "code": "int find_last_occurrence_0800997e(int start_index, int end_index, undefined4 param_3, undefined4 param_4)\n{\n  int last_occurrence_index = -1;\n  if (end_index != 0) {\n    int current_index = 0;\n    while (current_index = find_next_occurrence(start_index, end_index, param_3, start_index, param_4), current_index != 0) {\n      start_index = current_index + 1;\n      last_occurrence_index = current_index;\n    }\n    return last_occurrence_index;\n  }\n  last_occurrence_index = find_next_occurrence();\n  return last_occurrence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "check_param_08002dbc",
                "param_1": "param1",
                "param_2": "param2",
                "FUN_08002ce0": "execute_function"
            },
            "code": "void check_param_08002dbc(int param1, int param2) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        execute_function(PTR_DAT_08002dd8);\n    }\n    return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "check_param_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "string_processing_08002e44",
                "param_1": "input_string_address",
                "param_2": "output_string_address",
                "param_3": "input_undefined_1",
                "param_4": "input_undefined_2",
                "bVar1": "string_length",
                "cVar2": "character",
                "iVar3": "cpp_string_address",
                "iVar4": "forward_slash_index",
                "puVar5": "output_string_pointer"
            },
            "code": "void string_processing_08002e44(int input_string_address, int output_string_address, undefined input_undefined_1, undefined input_undefined_2)\n{\n  byte string_length;\n  char character;\n  int cpp_string_address = FUN_080099a4(output_string_address, CPP_STRING);\n  int forward_slash_index = FUN_0800997e(output_string_address, 0x2f);\n  if (forward_slash_index == 0) {\n    forward_slash_index = FUN_0800997e(output_string_address, 0x5c);\n  }\n  if (forward_slash_index != 0) {\n    output_string_address = forward_slash_index + 1;\n  }\n  if (cpp_string_address == 0) {\n    character = FUN_08000178(output_string_address);\n    *(char *)(input_string_address + 0xc4) = character + '\\x02';\n  }\n  else {\n    *(char *)(input_string_address + 0xc4) = ((char)cpp_string_address - (char)output_string_address) + '\\x02';\n  }\n  FUN_080091a0(*(undefined4 *)(input_string_address + 200));\n  string_length = *(byte *)(input_string_address + 0xc4);\n  undefined *output_string_pointer = (undefined *)FUN_08009190(string_length + 1);\n  *(undefined **)(input_string_address + 200) = output_string_pointer;\n  output_string_pointer[string_length] = 0;\n  *output_string_pointer = input_undefined_1;\n  output_string_pointer[1] = input_undefined_2;\n  FUN_08009954(output_string_pointer + 2, output_string_address, *(byte *)(input_string_address + 0xc4) - 2);\n  return;\n}",
            "called": [
                "FUN_080091a0",
                "FUN_0800997e",
                "FUN_080099a4",
                "FUN_08009954",
                "FUN_08009190",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "string_processing_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "send_data_to_server_0800242c",
                "param_1": "server_socket",
                "param_2": "timeout_ms",
                "param_3": "buffer_size",
                "param_4": "data_buffer",
                "FUN_08007648": "send",
                "PTR_LAB_08002444_1_08002440": "flags"
            },
            "code": "void send_data_to_server_0800242c(int server_socket, int timeout_ms, int buffer_size, char *data_buffer, int PTR_LAB_08002444_1_08002440) {\n  send(server_socket, data_buffer, buffer_size, PTR_LAB_08002444_1_08002440);\n  return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "wait_for_status_080058d2",
                "param_1": "status_flags",
                "param_2": "status_flags_len",
                "puVar1": "status_register",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "flag_value"
            },
            "code": "int wait_for_status_080058d2(uint *status_flags, uint status_flags_len) {\n  uint *status_register;\n  int start_time;\n  int current_time;\n  uint flag_value;\n  \n  if ((*status_flags & 2) != 0) {\n    status_register[1] = status_register[1] & 0xffffff0f | status_flags[2];\n  }\n  if ((*status_flags & 1) != 0) {\n    flag_value = status_flags[1];\n    if (flag_value == 1) {\n      if ((*status_register & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((flag_value != 2) && ((*status_register & 2) == 0)) {\n      return 1;\n    }\n    status_register[1] = flag_value | status_register[1] & 0xfffffffc;\n    start_time = get_current_time();\n    if (flag_value == 1) {\n      while ((status_register[1] & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flag_value == 2) {\n      while ((status_register[1] & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((status_register[1] & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  status_register = DAT_08005a0c;\n  if ((status_flags_len < (*DAT_08005a0c & 7)) && (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | status_flags_len, status_flags_len != (*status_register & 7))) {\n    return 1;\n  }\n  if ((*status_flags & 4) != 0) {\n    status_register[1] = status_register[1] & 0xfffff8ff | status_flags[3];\n  }\n  if ((*status_flags & 8) != 0) {\n    status_register[1] = status_register[1] & 0xffffc7ff | status_flags[4] << 3;\n  }\n  flag_value = get_status_register_value();\n  *(uint *)PTR_DAT_08005a18 = flag_value >> PTR_DAT_08005a14[(status_register[1] << 0x18) >> 0x1c];\n  set_status_register(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080036d8",
                "FUN_08005840"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "wait_for_status_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "execute_function_08002c00",
                "FUN_08002b68": "call_another_function"
            },
            "code": "void execute_function_08002c00(void)\n{\n  call_another_function();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "execute_function_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "set_bits_in_output_08003f30",
                "param_1": "output_offset",
                "param_2": "input_mask",
                "param_3": "input_bits",
                "uVar1": "shift_amount",
                "uVar2": "shift_distance",
                "DAT_08003f8c": "PTR_DAT_08003f8c",
                "DAT_08003f90": "PTR_DAT_08003f90"
            },
            "code": "void set_bits_in_output_08003f30(uint output_offset, uint input_mask, uint input_bits) {\n  uint shift_amount = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint shift_distance = 7 - shift_amount;\n  if (shift_distance > 3) {\n    shift_distance = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint shifted_input_bits = (input_mask & (1 << (shift_distance & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & input_bits;\n  if ((int)output_offset < 0) {\n    *(char *)(DAT_08003f90 + (output_offset & 0xf)) = (char)(shifted_input_bits << 4);\n  }\n  else {\n    *(char *)(output_offset + 0xe000e400) = (char)(shifted_input_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_bits_in_output_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "decrement_param_08007f78",
                "param_1": "input_param",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int decrement_param_08007f78(int input_param)\n{\n  int decremented_param = input_param - 4;\n  return decremented_param;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "decrement_param_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_at_position_08006b28",
                "param_1": "num",
                "param_2": "pos",
                "*PTR_DAT_0800c000": "ptr",
                "DAT_0800c000": "ptr_value",
                "shifted_num": "shifted_num",
                "shifted_pos": "shifted_pos",
                "ptr": "ptr",
                "value_at_ptr": "ptr_value",
                "masked_num": "masked_num",
                "masked_value": "masked_value",
                "bit": "bit"
            },
            "code": "uint get_bit_at_position_08006b28(uint num, int pos) {\n    uint shifted_num = num << 0x18;\n    uint shifted_pos = shifted_num >> 0x1c;\n    uint *PTR_DAT_0800c000 = PTR_DAT_0800c000 + shifted_pos * 4;\n    uint value_at_*PTR_DAT_0800c000 = *(uint *)*PTR_DAT_0800c000;\n    uint masked_num = num & 0xf;\n    uint masked_value = value_at_*PTR_DAT_0800c000 >> masked_num;\n    uint bit = masked_value & 1;\n    return bit;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_at_position_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_valid_080085dc",
                "param_1": "data",
                "uVar1": "result",
                "PTR_DAT_080085fc": "ptr_data"
            },
            "code": "bool is_valid_080085dc(uint8_t *data) {\n  uint32_t index = data[0x44];\n  uint32_t ptr = *(uint32_t *)(PTR_DAT_080085fc + index * 4);\n  uint32_t result = FUN_08006b1c(ptr);\n  return (result & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_valid_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "base_address",
                "*(byte *)(param_1 + 0x3a)": "byte_1",
                "*(byte *)(param_1 + 0x39)": "byte_2"
            },
            "code": "byte combine_bytes_08006b1c(int base_address){\n    byte byte_1 = *(byte *)(base_address + 0x3a);\n    byte byte_2 = *(byte *)(base_address + 0x39);\n    return byte_1 | byte_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "execute_function_with_params_08008ed6",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "FUN_08008e7c": "execute_function_with_params"
            },
            "code": "void execute_function_with_params_08008ed6(undefined4 *function_pointer, uint8_t param1, uint8_t param2, undefined4 param3) {\n  if (param2 != 0) {\n    execute_function_with_params_08008ed6(function_pointer, param1, param2 & 0xff, 0);\n    return;\n  }\n  (**(code **)*function_pointer)(function_pointer, param1 & 0xff, 0, *(code **)*function_pointer, param3);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "findValueInMemoryAndAssign_0800a130",
                "param_1": "result",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "memoryPointer",
                "iVar2": "functionResult"
            },
            "code": "void findValueInMemoryAndAssign_0800a130(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined *memoryPointer;\n  int functionResult;\n  memoryPointer = PTR_DAT_0800a150;\n  *(undefined4 *)PTR_DAT_0800a150 = 0;\n  functionResult = callAnotherFunction(param_2, param_3, param_4, param_4, param_4);\n  if ((functionResult == -1) && (*(int *)memoryPointer != 0)) {\n    *result = *(int *)memoryPointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a042",
                "FUN_0800a07a"
            ],
            "imported": false,
            "current_name": "findValueInMemoryAndAssign_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08008f3c(uint number) {\n  char bit_count = 0;\n  while (number != 1) {\n    bit_count++;\n    number = number >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "count_bits_set_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "calculate_result_08002ef2",
                "param_1": "base_value",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3",
                "FUN_08003158": "add_offset_to_base"
            },
            "code": "void calculate_result_08002ef2(int base_value, undefined4 unused_param, undefined2 unused_param_2, undefined4 unused_param_3)\n{\n  add_offset_to_base(base_value + 0x40, unused_param, unused_param_2, unused_param_3, unused_param_3);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "calculate_result_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_value_by_id_08007332",
                "param_1": "id",
                "param_2": "data",
                "*param_2": "*data"
            },
            "code": "int find_value_by_id_08007332(int id, char *data) {\n  while( true ) {\n    if (*(int *)(data + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(data + 4) == id) break;\n    data = data + 0xc;\n  }\n  return (int)*data;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_08007332",
                "FUN_0800734a"
            ],
            "imported": false,
            "current_name": "find_value_by_id_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "check_and_execute_function_08006128",
                "param_1": "array",
                "param_2": "array_length",
                "param_3": "function_code",
                "*(char *)(param_1 + 0xf)": "*(char *)(array + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)array + 0x3d)",
                "FUN_08005cec": "execute_function_1",
                "FUN_080060c4": "execute_function_2",
                "FUN_08005d48": "execute_function_3",
                "FUN_08005dac": "execute_function_4"
            },
            "code": "int check_and_execute_function_08006128(int *array, int array_length, int function_code) {\n  if (*(char *)(array + 0xf) != 1) {\n    *(char *)(array + 0xf) = 1;\n    *(char *)((int)array + 0x3d) = 2;\n    switch(function_code) {\n      case 0:\n        execute_function_1(*array);\n        break;\n      case 4:\n        execute_function_2(*array);\n        break;\n      case 8:\n        execute_function_3(*array);\n        break;\n      case 0xc:\n        execute_function_4(*array);\n        break;\n    }\n    *(char *)((int)array + 0x3d) = 1;\n    *(char *)(array + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_and_reset_memory_08003658",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable_ptr"
            },
            "code": "void copy_and_reset_memory_08003658(void)\n{\n  int index;\n  undefined4 *dest_ptr;\n  code *jumptable_ptr;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (dest_ptr = (undefined4 *)PTR_DAT_08003698; dest_ptr < PTR_DAT_0800369c; dest_ptr++) {\n    *dest_ptr = 0;\n  }\n  execute_function_080073ec();\n  execute_function_08009148();\n  jumptable_ptr = (code *)0x800368a;\n  execute_function_08008f1c(jumptable_ptr);\n  return;\n}",
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_reset_memory_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "calculateResult_08009a80",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "resultValue",
                "uVar2": "inputVal",
                "iVar3": "iVar",
                "PTR_PTR_DAT_08009b4c": "ptrPtrDat08009b4c",
                "PTR_DAT_08009b50": "ptrDat08009b50",
                "PTR_DAT_08009b54": "ptrDat08009b54",
                "PTR_DAT_08009b58": "ptrDat08009b58"
            },
            "code": "uint calculateResult_08009a80(undefined4 *result, undefined4 *input)\n{\n  uint resultValue;\n  ushort inputVal;\n  int iVar;\n  iVar = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar != 0) && (*(int *)(iVar + 0x18) == 0)) {\n    clearMemory(iVar);\n  }\n  if (input == (undefined4 *)PTR_DAT_08009b50) {\n    input = *(undefined4 **)(iVar + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b54) {\n    input = *(undefined4 **)(iVar + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b58) {\n    input = *(undefined4 **)(iVar + 0xc);\n  }\n  inputVal = *(ushort *)(input + 3);\n  resultValue = (uint)inputVal;\n  if (-1 < (int)(resultValue << 0x1c)) {\n    if (-1 < (int)(resultValue << 0x1b)) {\n      *result = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(resultValue << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          handleResult(result);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    calculateFinalResult(result, input);\n  }\n  inputVal = *(ushort *)(input + 3);\n  resultValue = inputVal & 1;\n  if ((inputVal & 1) == 0) {\n    if (-1 < (int)((uint)inputVal << 0x1e)) {\n      resultValue = input[5];\n    }\n    input[2] = resultValue;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    inputVal = *(ushort *)(input + 3);\n    resultValue = (int)(short)inputVal & 0x80;\n    if (resultValue != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = inputVal | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    resultValue = 0;\n  }\n  return resultValue;\n}",
            "called": [
                "FUN_08009eac",
                "FUN_08009d50",
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "calculateResult_08009a80"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08005084",
                "FUN_08004a76"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "modify_and_check_flags_080062f4",
                "param_1": "data_ptr",
                "param_2": "flag_value",
                "puVar1": "data",
                "DAT_0800638c": "PTR_0800638c"
            },
            "code": "uint32_t modify_and_check_flags_080062f4(uint32_t **data_ptr, uint32_t flag_value) {\n  uint32_t *data = *data_ptr;\n\n  switch(flag_value) {\n    case 0:\n      data[3] &= 0xfffffffd;\n      break;\n    case 4:\n      data[3] &= 0xfffffffb;\n      break;\n    case 8:\n      data[3] &= 0xfffffff7;\n      break;\n    case 0xc:\n      data[3] &= 0xffffffef;\n  }\n\n  modify_data(data_ptr, flag_value, 0);\n\n  if (((data == DAT_0800638c) && ((data[8] & 0x1111) == 0)) && ((data[8] & 0x444) == 0)) {\n    data[0x11] &= 0xffff7fff;\n  }\n\n  if (((data[8] & 0x1111) == 0) && ((data[8] & 0x444) == 0)) {\n    *data &= 0xfffffffe;\n  }\n\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "modify_and_check_flags_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "wait_forever_080073e8"
            },
            "code": "void wait_forever_080073e8(void)\n{\n  while(true) {\n    // do nothing\n  }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "wait_forever_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "param_1": "data",
                "puVar2": "current_ptr",
                "cVar1": "current_char"
            },
            "code": "int process_data_08004a76(int *data)\n{\n  char current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    undefined *current_ptr = (undefined *)data[9];\n    data[9] = (int)(current_ptr + 1);\n    *current_ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_value_0800267c",
                "param_1": "input_array",
                "param_2": "input_value",
                "iVar1": "calculated_value"
            },
            "code": "void calculate_value_0800267c(byte *input_array,int input_value)\n{\n  int calculated_value;\n  \n  if (*input_array < 0xc) {\n    calculated_value = (0x88 - (char)input_array[1]) * 4;\n    if ((calculated_value - input_value == 0 || calculated_value < input_value) &&\n       (calculated_value = (600 - (char)input_array[2]) * 4,\n       input_value == calculated_value || input_value + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(input_value,calculated_value)))\n    {\n      calculated_value = input_value;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "code": "uint32_t process_data_080047f4(uint32_t **data_ptr, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n  uint32_t result;\n  uint32_t *ptr;\n  int counter;\n  if ((*data_ptr)[0x3d] == ' ')\n  {\n    counter = (uint32_t)((uint64_t)DAT_080048c0 * (uint64_t)(*(uint32_t *)PTR_DAT_080048bc >> 3) >> 0x28) * 0x19;\n    do\n    {\n      if (counter == 0)\n      {\n        data_ptr[0xc] = (uint32_t *)0x0;\n        (*data_ptr)[0x3d] = 0x20;\n        data_ptr[0xf] = 0;\n        return 3;\n      }\n      ptr = *data_ptr;\n      counter--;\n    } while ((ptr[6] & 2) != 0);\n    if ((*data_ptr)[0xf] == 1)\n    {\n      result = 2;\n    }\n    else\n    {\n      (*data_ptr)[0xf] = 1;\n      if ((*ptr & 1) == 0)\n      {\n        *ptr |= 1;\n      }\n      **data_ptr &= 0xfffff7ff;\n      (*data_ptr)[0x3d] = 0x22;\n      (*data_ptr)[0x3e] = 0x10;\n      result = 0;\n      data_ptr[0x10] = (uint32_t *)0x0;\n      data_ptr[9] = param2;\n      (*data_ptr)[0xb] = DAT_080048c4;\n      data_ptr[10][0] = param3;\n      data_ptr[0x11] = param1;\n      **data_ptr |= 0x400;\n      **data_ptr |= 0x100;\n      data_ptr[0xf] = 0;\n      (*data_ptr)[1] |= 0x700;\n    }\n  }\n  else\n  {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_data_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "verify_input_0800376c",
                "param_1": "input",
                "param_2": "input_length",
                "iVar1": "start_time",
                "uVar2": "flags",
                "iVar3": "elapsed_time",
                "uVar4": "result",
                "puVar5": "data",
                "uVar6": "divisor",
                "local_1c": "i",
                "PTR_DAT_080038c8": "DIVISOR_PTR",
                "DAT_080038cc": "FLAG_A",
                "DAT_080038d0": "FLAG_B",
                "DAT_080038d4": "FLAG_C",
                "DAT_080038d8": "FLAG_D",
                "FUN_08003760": "get_start_time",
                "FUN_08005bb8": "calculate_result"
            },
            "code": "uint32_t verify_input_0800376c(uint32_t **input, uint32_t input_length)\n{\n  int32_t start_time = get_start_time();\n  uint32_t *data = *input;\n  uint32_t flags = (*data) & 0x1FF0000;\n  uint32_t result = 0;\n  if ((flags & 0x100) == 0) {\n    if (((*data & 0x100) == 0) && ((data[0xB] & 0xF00000) == 0)) {\n      while ((*input)[0] & 2 == 0) {\n        if ((input_length != 0xFFFFFFFF) && (input_length != 0 && (get_start_time() - start_time) > input_length)) {\n          (*input)[10] |= 4;\n          (*input)[9] = 0;\n          result = 3;\n          break;\n        }\n      }\n    }\n    else {\n      uint32_t divisor = calculate_divisor();\n      uint32_t calculation_result = calculate_result(divisor, data);\n      for (uint32_t i = 0; i <= calculation_result; i++) {\n        if ((input_length != 0xFFFFFFFF) && (input_length != 0 && (get_start_time() - start_time) > input_length)) {\n          (*input)[10] |= 4;\n          (*input)[9] = 0;\n          result = 3;\n          break;\n        }\n      }\n      if (result == 0) {\n        (*input)[0] = 0xFFFFFFED;\n        (*input)[10] |= 0x200;\n        if (((*input)[2] & 0xE0000) == 0xE0000) {\n          if ((*input)[3] == NULL) {\n            (*input)[10] &= 0xFFFFFEFF;\n            if (((*input)[10] & 0x1000) == 0) {\n              (*input)[10] |= 1;\n              result = 0;\n            }\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n  }\n  else {\n    (*input)[10] |= 0x20;\n    (*input)[9] = 0;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "verify_input_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data",
                "iVar1": "status",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "time_difference",
                "local_14": "i",
                "PTR_DAT_08003f08": "PTR_DAT_data_size"
            },
            "code": "int process_data_08003e20(int *data)\n{\n  int status;\n  uint divisor;\n  int start_time;\n  int current_time;\n  uint time_difference;\n  int is_processing = *(char *)(data + 9);\n  if (is_processing == 1) {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  status = initialize_data();\n  if (status == 0) {\n    data[10] = (data[10] & 0xffffeefdU) | 2;\n    uint data_size = *(uint *)PTR_DAT_08003f08;\n    divisor = FUN_08005bb8(2);\n    for (int i = data_size / divisor << 1; i != 0; i--) {\n    }\n    setup_data(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start_time = get_time();\n    while ((*(uint *)(*data + 8) & 8) != 0) {\n      current_time = get_time();\n      time_difference = (uint)(current_time - start_time);\n      if (time_difference > 10) {\n        data[10] = (data[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 4;\n    start_time = get_time();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current_time = get_time();\n      time_difference = (uint)(current_time - start_time);\n      if (time_difference > 10) {\n        data[10] = (data[10] & 0xffffffedU) | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = (data[10] & 0xfffffffcU) | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return status;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08003b8c",
                "FUN_08005bb8",
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "process_data_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "calculate_shifted_value_08005a48",
                "uVar1": "function_result",
                "PTR_DAT_08005a64": "shift_amounts",
                "DAT_08005a60": "global_data",
                "shifted_value": "shifted_value",
                "index": "index"
            },
            "code": "uint calculate_shifted_value_08005a48(void)\n{\n  uint shifted_value;\n  uint function_result = call_function();\n  uint index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  shifted_value = function_result >> PTR_DAT_08005a64[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08005bb8",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "destination",
                "param_2": "size",
                "param_3": "source",
                "iVar2": "destination_index",
                "uVar3": "source_index",
                "bVar1": "current_byte"
            },
            "code": "void copy_and_shift_bits_080033a8(uint8_t* destination, const uint8_t* source, uint32_t size) {\n  uint32_t destination_index = 0;\n  for (uint32_t source_index = 0; source_index < size; source_index += 2) {\n    uint8_t current_byte = *(source + source_index);\n    *(destination + destination_index) = current_byte;\n    *(destination + destination_index) = (*(source + source_index + 1) << 7) | current_byte;\n    destination_index++;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_and_shift_bits_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "initialize_program_08002c14",
                "FUN_08002c00": "initialize_system"
            },
            "code": "void initialize_program_08002c14(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_program_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "get_value_at_index_08008d18",
                "param_1": "index",
                "param_2": "max_index",
                "uVar1": "value"
            },
            "code": "void get_value_at_index_08008d18(int index, uint8_t max_index)\n{\n    uint8_t value;\n    if (max_index < 0x3c) {\n        value = PTR_DAT_08008d2c[max_index];\n    }\n    else {\n        value = 0xff;\n    }\n    *(uint8_t *)(index + 300) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "execute_function_08009084",
                "param_1": "function_pointer",
                "iVar1": "index",
                "PTR_DAT_080090b0": "PTR_DAT_080090b0",
                "get_result_index": "get_result_index",
                "value": "value"
            },
            "code": "void execute_function_08009084(int function_pointer) {\n    int index = *(int *)(function_pointer + 8);\n    if (index != 0) {\n        (**(code **)(function_pointer + 0xc))();\n        return;\n    }\n    initialize();\n    int result_index = get_result_index();\n    int value = *(int *)(PTR_DAT_080090b0 + result_index * 0x14 + 0xc);\n    if (value != 0) {\n        execute_function_08009084();\n    }\n    return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "execute_function_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "calculate_new_value_0800a020",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "value",
                "uVar2": "new_value",
                "bVar3": "is_positive"
            },
            "code": "void calculate_new_value_0800a020(undefined4 data, int offset)\n{\n    int value = calculate_offset(data, (int)*(short *)(offset + 0xe));\n    bool is_positive = value >= 0;\n    uint new_value;\n    if (is_positive) {\n        new_value = *(int *)(offset + 0x54) + value;\n    }\n    else {\n        new_value = *(ushort *)(offset + 0xc) & 0xffffefff;\n    }\n    if (is_positive) {\n        *(uint *)(offset + 0x54) = new_value;\n    }\n    if (!is_positive) {\n        *(short *)(offset + 0xc) = (short)new_value;\n    }\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "calculate_new_value_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uVar2": "flags",
                "local_1c": "value",
                "abStack_18": "stack_values",
                "uStack_c": "stack_pointer_0",
                "uStack_10": "stack_pointer_1",
                "uStack_14": "stack_pointer_2"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result;\n  uint flags;\n  undefined2 value;\n  byte stack_values[4];\n  undefined4 stack_pointer_2;\n  undefined4 stack_pointer_1;\n  undefined4 stack_pointer_0;\n  \n  stack_pointer_0 = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  stack_pointer_1 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  stack_pointer_2 = *(undefined4 *)PTR_DAT_0800589c;\n  value = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  flags = *(uint *)(DAT_080058a0 + 4);\n  result = DAT_080058a8;\n  if ((flags & 0xc) == 8) {\n    if ((flags & 0x10000) == 0) {\n      result = DAT_080058a4 * (uint)stack_values[(flags << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_080058a8 * stack_values[(flags << 10) >> 0x1c]) / (uint)*(byte *)((int)&value - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_parameter_08007f7c",
                "param_1": "object_address",
                "param_2": "parameter_value",
                "*(int *)(param_1 + 0x60)": "*parameter_address",
                "FUN_080049e0": "call_function"
            },
            "code": "void set_parameter_08007f7c(int object_address, int parameter_value)\n{\n  if (object_address != 0) {\n    if (parameter_value != 0) {\n      int* parameter_address = (int *)(object_address + 0x60);\n      *parameter_address = parameter_value;\n      call_function(object_address + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_parameter_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "get_data_from_server_08006d80",
                "param_1": "input",
                "local_46": "status",
                "local_44": "data_length",
                "local_40": "flag_1",
                "local_3c": "flag_2",
                "local_38": "server_response",
                "local_34": "unused_1",
                "local_30": "unused_2",
                "local_2c": "unused_3",
                "local_28": "unused_4",
                "local_24": "unused_5",
                "local_20": "unused_6",
                "local_1c": "flags",
                "local_10": "unused_7",
                "PTR_DAT_08006e60": "server_url",
                "PTR_DAT_08006e64": "server_data"
            },
            "code": "int get_data_from_server_08006d80(int input) {\n  int status = 0;\n  uint32_t flags = 0x200;\n  char* PTR_DAT_08006e64 = calloc(1, 0x30);\n  if (PTR_DAT_08006e64 == NULL) {\n    return status;\n  }\n  int server_response = make_request(input, PTR_DAT_08006e64);\n  if (server_response == 0) {\n    int data_length = parse_response(PTR_DAT_08006e64, &flags);\n    if (data_length >= 0x12 && (flags & 0x200)) {\n      status = extract_data(PTR_DAT_08006e64);\n    }\n  }\n  free(PTR_DAT_08006e64);\n  return status;\n}",
            "called": [
                "FUN_0800376c",
                "FUN_08003aa0",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_080038dc",
                "FUN_08003de4",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003a1c",
                "FUN_08006c60",
                "FUN_08003ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "get_data_from_server_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "get_shifted_value_08006c60",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_value",
                "uVar2": "masked_value"
            },
            "code": "uint get_shifted_value_08006c60(uint input_1, uint input_3, uint input_4)\n{\n  int shifted_value = FUN_08007376(input_1, PTR_DAT_08006c78, input_3, input_4, input_4);\n  uint masked_value = (uint)(shifted_value << 0xc) >> 0x1b;\n  if (masked_value > 0x10) {\n    masked_value = 0;\n  }\n  return masked_value;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_shifted_value_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_at_offsets_08003306",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_at_offsets_08003306(int base_address, uint offset, undefined4 value1, undefined4 value2)\n{\n  if (offset == 208) {\n    *(undefined4 *)(base_address + 0x58) = value1;\n    *(undefined4 *)(base_address + 0x28) = value2;\n    return;\n  }\n  if (offset > 208) {\n    if (offset == 244) {\n      *(undefined4 *)(base_address + 0x5c) = value1;\n      *(undefined4 *)(base_address + 0x2c) = value2;\n      return;\n    }\n    if (offset == 245) {\n      *(undefined4 *)(base_address + 0x60) = value1;\n      *(undefined4 *)(base_address + 0x30) = value2;\n    }\n    else if (offset == 224) {\n      *(undefined4 *)(base_address + 0x4c) = value1;\n      *(undefined4 *)(base_address + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (offset == 144) {\n    *(undefined4 *)(base_address + 0x50) = value1;\n    *(undefined4 *)(base_address + 0x20) = value2;\n    return;\n  }\n  if (offset == 192) {\n    *(undefined4 *)(base_address + 0x54) = value1;\n    *(undefined4 *)(base_address + 0x24) = value2;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_at_offsets_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "initialize_program_08002578",
                "FUN_080076e0": "initialize_database"
            },
            "code": "void initialize_program_08002578() {\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "initialize_program_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_flag_and_call_function_08006932",
                "param_1": "flag_ptr",
                "*(uint *)(*param_1 + 0xc)": "flag",
                "*(undefined *)((int)param_1 + 0x39)": "char_ptr",
                "FUN_08008730": "call_function"
            },
            "code": "int set_flag_and_call_function_08006932(int *flag_ptr)\n{\n    uint32_t *flag = (uint32_t *)(*flag_ptr + 0xc);\n    *flag &= 0xffffffbf;\n    char *char_ptr = (char *)flag_ptr + 0x39;\n    *char_ptr = 0x20;\n    call_function();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_function_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_data_080060c4",
                "param_1": "data_ptr",
                "param_2": "data_array",
                "uVar1": "data1",
                "uVar2": "data2",
                "iVar3": "data_array[0]",
                "mask1": "0xffffffef",
                "mask2": "0xfffff3ff",
                "mask3": "0xffffffdf"
            },
            "code": "void update_data_080060c4(int data_ptr, int *data_array) {\n  uint mask1 = 0xffffffef;\n  uint mask2 = 0xfffff3ff;\n  uint mask3 = 0xffffffdf;\n  uint data1 = *(uint *)(data_ptr + 0x20) & mask1;\n  uint data2 = *(uint *)(data_ptr + 4);\n  uint data3 = data_array[2] << 4;\n  if (data_ptr == PTR_08006124) {\n    data3 |= data_array[3] << 4;\n    data2 = (data2 & mask2) | (data_array[5] << 2) | (data_array[6] << 2);\n    data1 = (data1 & mask3) | (data_array[3] << 4);\n  }\n  *(uint *)(data_ptr + 4) = data2;\n  *(uint *)(data_ptr + 0x18) = (*(uint *)(data_ptr + 0x18) & 0xffff8cff) | (data_array[0] << 8);\n  *(int *)(data_ptr + 0x38) = data_array[1];\n  *(uint *)(data_ptr + 0x20) = data1 | data3;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "process_data_08009eac",
                "param_1": "data",
                "param_2": "data_array",
                "uVar1": "flag",
                "iVar2": "result",
                "local_18": "index",
                "local_14": "local_array",
                "FUN_08009e64": "get_flag",
                "FUN_08009270": "get_result",
                "PTR_LAB_08009cd0_1_08009f28": "PTR_LAB_08009cd0_1_08009f28",
                "FUN_0800a110": "process_local_data"
            },
            "code": "void process_data_08009eac(int data, int *data_array) {\n    ushort flag;\n    int index;\n    int result;\n    int *local_array;\n\n    if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1e)) {\n        index = data;\n        local_array = data_array;\n        flag = get_flag(data, data_array, &index, &local_array);\n        result = get_result(data, index);\n        if (result != 0) {\n            *(undefined **)(data + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n            *data_array = result;\n            *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x80;\n            data_array[4] = result;\n            data_array[5] = index;\n            if ((local_array != (int *)0x0) &&\n                (result = process_local_data(data, (int)*(short *)((int)data_array + 0xe)), result != 0)) {\n                *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 1;\n            }\n            *(ushort *)(data_array + 3) = flag | *(ushort *)(data_array + 3);\n            return;\n        }\n        if ((int)(short)*(ushort *)(data_array + 3) << 0x16 < 0) {\n            return;\n        }\n        *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) & 0xfffc | 2;\n    }\n    *data_array = (int)data_array + 0x47;\n    data_array[4] = (int)data_array + 0x47;\n    data_array[5] = 1;\n    return;\n}",
            "called": [
                "FUN_08009e64",
                "FUN_08009270",
                "FUN_0800a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "process_data_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "process_data_080072d8",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_size",
                "param_4": "data_location",
                "FUN_080042e2": "process_data_helper"
            },
            "code": "void process_data_080072d8(undefined4 data_ptr, undefined2 data_type, int data_size, undefined4 data_location) {\n  if (data_size == 0) {\n    process_data_080072d8_helper(data_ptr, data_type, 0, data_location, data_location);\n    return;\n  }\n  process_data_080072d8_helper(data_ptr, data_type, 1, data_location, data_location);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "process_data_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_result_080045c0",
                "param_1": "numbers_array",
                "bVar1": "is_valid",
                "uVar2": "random_number",
                "puVar3": "ptr1",
                "uVar4": "result",
                "DAT_08004714": "PTR_DAT_08004714",
                "DAT_08004720": "PTR_DAT_08004720",
                "DAT_08004718": "PTR_DAT_08004718",
                "DAT_0800471c": "PTR_DAT_0800471c",
                "DAT_08004724": "PTR_DAT_08004724"
            },
            "code": "uint32_t calculate_result_080045c0(uint32_t **numbers_array)\n{\n  bool is_valid;\n  uint32_t random_number, *ptr1, result, *ptr3, leading_zeroes, *ptr5, *ptr6;\n  \n  if (numbers_array == NULL) {\n    return 1;\n  }\n  if (*(char *)((int)numbers_array + 0x3d) == '\\0') {\n    *(undefined *)(numbers_array + 0xf) = 0;\n    do_nothing();\n  }\n  *(undefined *)((int)numbers_array + 0x3d) = 0x24;\n  **numbers_array &= 0xfffffffe;\n  random_number = generate_random_number();\n  if (DAT_08004714 < numbers_array[1]) {\n    is_valid = random_number <= DAT_08004720;\n  }\n  else if (DAT_08004718 < random_number) {\n    is_valid = false;\n  }\n  else {\n    is_valid = true;\n  }\n  if (is_valid) {\n    return 1;\n  }\n  result = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)random_number >> 0x32);\n  (*numbers_array)[1] = result;\n  if (DAT_08004714 < numbers_array[1]) {\n    result = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)(result * 300) >> 0x26);\n  }\n  (*numbers_array)[8] = result + 1;\n  ptr1 = numbers_array[1];\n  if (DAT_08004714 < ptr1) {\n    if (numbers_array[2] == NULL) {\n      leading_zeroes = count_leading_zeroes((random_number - 1) / (uint32_t)((int)ptr1 * 3) + 1 & 0xfff);\n    }\n    else {\n      leading_zeroes = count_leading_zeroes((random_number - 1) / (uint32_t)((int)ptr1 * 0x19) + 1 & 0xfff);\n    }\n    if (leading_zeroes >> 5 == 0) {\n      if (numbers_array[2] == NULL) {\n        random_number = (random_number - 1) / (uint32_t)((int)ptr1 * 3) + 1 & 0xfff | 0x8000;\n      }\n      else {\n        random_number = (random_number - 1) / (uint32_t)((int)ptr1 * 0x19) + 1 & 0xfff | 0xc000;\n      }\n    }\n    else {\n      random_number = 1;\n    }\n  }\n  else {\n    random_number = (random_number - 1) / (uint32_t)((int)ptr1 << 1) + 1 & 0xfff;\n    if (random_number < 4) {\n      random_number = 4;\n    }\n  }\n  (*numbers_array)[7] = random_number;\n  **numbers_array = (uint32_t)numbers_array[7] | (uint32_t)numbers_array[8];\n  (*numbers_array)[2] = (uint32_t)numbers_array[4] | (uint32_t)numbers_array[3];\n  (*numbers_array)[3] = (uint32_t)numbers_array[5] | (uint32_t)numbers_array[6];\n  **numbers_array |= 1;\n  numbers_array[0x10] = NULL;\n  *(undefined *)((int)numbers_array + 0x3d) = 0x20;\n  numbers_array[0xc] = NULL;\n  *(undefined *)((int)numbers_array + 0x3e) = 0;\n  return 0;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_result_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "check_string_08007e74",
                "param_1": "string_address",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "start_time",
                "uVar3": "time_diff",
                "iVar4": "consecutive_spaces",
                "iVar2": "result",
                "iVar5": "string_address_plus_4",
                "uVar6": "arg4"
            },
            "code": "int check_string_08007e74(int string_address, int arg2, int arg3, int arg4) {\n  int start_time = FUN_08003760();\n  int consecutive_spaces = 2;\n  uint time_diff = 0;\n  do {\n    int string_address_plus_4 = string_address + 4;\n    int result = FUN_08004728(string_address_plus_4, arg2, arg3, arg4, arg4);\n    if (result == 0) {\n      consecutive_spaces = 0;\n      while ((result = FUN_0800542a(string_address_plus_4), result != 0x20 && (consecutive_spaces == 0))) {\n        int current_time = FUN_08003760();\n        time_diff = current_time - start_time;\n        if (time_diff < 0x65) {\n          result = FUN_08005430(string_address_plus_4);\n          if (result != 0) {\n            consecutive_spaces = 2;\n          }\n        }\n        else {\n          consecutive_spaces = 1;\n        }\n      }\n    }\n    result = FUN_08005430(string_address_plus_4);\n  } while ((result == 4) && (time_diff < 100));\n  return consecutive_spaces;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "check_string_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "execute_function_08002efe",
                "param_1": "base_address",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_0800319e": "call_function"
            },
            "code": "void execute_function_08002efe(int base_address, undefined4 param_2, undefined2 param_3, undefined4 param_4)\n{\n  call_function(base_address + 0x40, param_2, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "execute_function_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "update_data_if_max_value_reached_08002f84",
                "param_1": "data_pointer",
                "param_2": "current_value",
                "param_3": "new_data"
            },
            "code": "void update_data_if_max_value_reached_08002f84(undefined4 data_pointer, int current_value, undefined4 new_data) {\n  if (current_value == 0xff) {\n    *(undefined4 *)PTR_DAT_08002f90 = new_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_data_if_max_value_reached_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "calculate_result_08002ddc",
                "param_1": "input_value",
                "param_2": "constant1",
                "param_3": "constant2",
                "param_4": "output_value",
                "FUN_0800322c": "perform_calculation"
            },
            "code": "void calculate_result_08002ddc(int input_value, int constant1, int constant2, int output_value) {\n    perform_calculation(input_value + 0x40, 2, 5, output_value, output_value);\n    return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "calculate_result_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "check_if_ptr_dat_not_null_08009094",
                "iVar1": "index",
                "FUN_08008f3c": "get_index_of_ptr_dat",
                "PTR_DAT_080090b0": "ptr_dat",
                "* (int *) (PTR_DAT_080090b0 + iVar1 * 0x14 + 0xc)": "ptr",
                "FUN_08009084": "execute_fun_08009084"
            },
            "code": "void check_if_ptr_dat_not_null_08009094(void)\n{\n  int index = get_index_of_PTR_DAT_080090b0();\n  int* * (int *) (PTR_DAT_080090b0 + iVar1 * 0x14 + 0xc) = (int*)(PTR_DAT_080090b0 + index * 0x14 + 0xc);\n  if (** (int *) (PTR_DAT_080090b0 + iVar1 * 0x14 + 0xc) != 0) {\n    execute_fun_08009084();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "check_if_ptr_dat_not_null_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_pointer",
                "pcVar2": "previous_pointer"
            },
            "code": "char* find_character_08009f2c(char* string, char character, int length) {\n  char* current_pointer = string;\n  while (current_pointer != string + length) {\n    if (*current_pointer == character) {\n      return current_pointer;\n    }\n    current_pointer++;\n  }\n  return NULL;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_08009698",
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "find_character_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_new_index_0800a154",
                "param_1": "current_index",
                "param_2": "array",
                "iVar1": "new_index"
            },
            "code": "int calculate_new_index_0800a154(int current_index, int* array) {\n  int new_index = current_index - 4;\n  if (current_index < 0) {\n    new_index += array[new_index];\n  }\n  return new_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_new_index_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "read_byte_from_data_buffer_08002580",
                "param_1": "output_byte",
                "bVar1": "buffer_size"
            },
            "code": "void read_byte_from_data_buffer_08002580(byte *output_byte) {\n  byte buffer_size = *PTR_DAT_080025a4;\n  if (buffer_size > 0xb) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = buffer_size + 1;\n  *output_byte = buffer_size;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)buffer_size * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "read_byte_from_data_buffer_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_param_08007f8e",
                "param_1": "address",
                "param_2": "value",
                "*(int *)(param_1 + 100)": "*(int *)(address + 100)",
                "FUN_080049e0": "initialize_param"
            },
            "code": "void set_param_08007f8e(int address, int value)\n{\n  if (address != 0) {\n    if (value != 0) {\n      *(int *)(address + 100) = value;\n      initialize_param(address + 4);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_08006b3e",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "index",
                "*(uint *)(param_2 + uVar1 * 4)": "target",
                "*(uint *)(param_2 + uVar1 * 4) | 1 << (param_1 & 0xf)": "*target |= 1 << (bit_position & 0xf)"
            },
            "code": "void set_bit_08006b3e(uint bit_position, int* array) {\n  uint index = (bit_position << 0x18) >> 0x1c;\n  uint* target = (uint*)(array + index * 4);\n  *target |= 1 << (bit_position & 0xf);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_08006262",
                "param_1": "data",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "1 << (param_2 & 0xff)": "mask",
                "|": "|",
                "~mask": "~mask",
                "param_3 << (param_2 & 0xff)": "bit_value << (bit_index & 0xff)"
            },
            "code": "void set_bit_08006262(uint32_t *data, uint8_t bit_index, uint8_t bit_value) {\n    uint32_t mask = 1 << (bit_index & 0xff);\n    *data = (*data & ~mask) | (bit_value << (bit_index & 0xff));\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_08006390",
                "FUN_080063c0"
            ],
            "imported": false,
            "current_name": "set_bit_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "initialize_system_08007110",
                "FUN_080074e0": "setup_hardware"
            },
            "code": "void initialize_system_08007110() {\n  setup_hardware();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "initialize_system_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_timer_08007594",
                "param_1": "timer_val",
                "DAT_080075d0": "timer_threshold",
                "DAT_080075d4": "timer_threshold_2",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "timer_instance",
                "FUN_080098d8": "trigger_timer"
            },
            "code": "int check_timer_08007594(uint timer_val) {\n  if (timer_val == 0xffffffff) {\n    return 0;\n  }\n  if (timer_val == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < timer_val) {\n    if (timer_val == DAT_080075d4) {\n      return 1;\n    }\n    if (timer_val == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (timer_val == 0x40000000) {\n    return 1;\n  }\n  trigger_timer(PTR_s_TIM__Unknown_PTR_s_TIM__Unknown_timer_instance_080075d8_080075d8);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_timer_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_clear_other_bits_080073ec",
                "puVar1": "ptr_data",
                "*puVar1": "*ptr_data",
                "DAT_0800742c": "ptr_data",
                "DAT_08007430": "bit_mask",
                "puVar1[1]": "ptr_data[1]",
                "puVar1[2]": "ptr_data[2]",
                "*DAT_0800742c": "*ptr_data",
                "*(undefined4 *)(DAT_08007434 + 8)": "*(undefined4 *)(DAT_08007434 + 8)"
            },
            "code": "void set_bit_and_clear_other_bits_080073ec(void)\n{\n  uint *DAT_0800742c = DAT_0800742c;\n  *DAT_0800742c |= 1;\n  DAT_0800742c[1] &= DAT_08007430;\n  *DAT_0800742c &= 0xfef6ffff;\n  *DAT_0800742c &= 0xfffbffff;\n  DAT_0800742c[1] &= 0xff80ffff;\n  DAT_0800742c[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_clear_other_bits_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_new_value_08008ef4",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "intermediate_value",
                "param_4": "start_range",
                "param_5": "end_range",
                "uint": "unsigned int"
            },
            "code": "int calculate_new_value_08008ef4(int start_value, int end_value, int intermediate_value, int start_range, int end_range) {\n    int range_difference = end_range - start_range;\n    int value_difference = end_value - start_value;\n    int intermediate_difference = intermediate_value - start_value;\n    int new_value = (intermediate_difference * value_difference) / range_difference + start_value;\n    return new_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_new_value_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "process_data_08002df6",
                "param_1": "data_address",
                "PTR_08004b00": "data_ptr",
                "DAT_08004b08": "DATA_OFFSET",
                "DAT_08004b09": "DATA_PTR_OFFSET",
                "DAT_08004b0a": "DATA_HELPER_OFFSET",
                "FUN_080031ce": "process_data_helper"
            },
            "code": "void process_data_08002df6(int data_address)\n{\n  if (*(byte *)(data_address + DAT_08004b08) == 0) {\n    return;\n  }\n  undefined *PTR_08004b00 = *(undefined **)(data_address + DAT_08004b09);\n  process_data_08002df6_helper(data_address + DAT_08004b0a,*PTR_08004b00,PTR_08004b00[1],*(byte *)(data_address + DAT_08004b08) - 2,PTR_08004b00 + 2);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "process_data_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "decode_function_08007118",
                "param_1": "input_byte",
                "param_2": "divisor",
                "param_3": "offset",
                "param_4": "param_4",
                "param_5": "is_true",
                "uVar1": "quotient",
                "iVar2": "result",
                "iVar3": "status",
                "local_74": "local_70",
                "local_70": "local_6C",
                "local_6c": "local_68",
                "local_68": "local_64",
                "local_64": "local_60",
                "local_60": "local_5C",
                "local_5c": "local_58",
                "local_58": "local_54",
                "local_54": "local_50",
                "local_50": "local_4C",
                "local_4c": "local_48",
                "local_48": "local_44",
                "local_44": "local_1B",
                "local_1b": "local_buffer"
            },
            "code": "void decode_function_08007118(uint8_t input_byte, uint32_t divisor, int offset, uint32_t param_4, bool is_true)\n{\n  uint32_t quotient;\n  int result;\n  int status;\n  uint8_t local_buffer[64];\n  uint32_t local_70;\n  uint32_t local_6C;\n  uint32_t local_68;\n  uint32_t local_64;\n  uint32_t local_60;\n  uint32_t local_5C;\n  int local_58;\n  int local_54;\n  uint32_t local_50;\n  int local_4C;\n  uint32_t local_48;\n  uint32_t local_44;\n  uint8_t local_1B;\n  initialize_buffer(local_buffer, 0, 0x40);\n  local_70 = 0;\n  local_6C = 0;\n  local_68 = 0;\n  local_64 = 0;\n  local_60 = 0;\n  local_5C = 0;\n  local_58 = decode_first_byte(input_byte, PTR_DAT_080071dc);\n  if (local_58 != 0) {\n    quotient = get_quotient();\n    local_54 = quotient / divisor - 1;\n    local_4C = offset + -1;\n    local_48 = 0;\n    local_50 = 0;\n    local_44 = 0;\n    local_1B = 0;\n    if (is_true) {\n      *PTR_DAT_080071e0 = (char)input_byte;\n      result = decode_buffer(local_buffer, &local_58);\n      if (result != 0) {\n        return;\n      }\n    }\n    status = decode_second_byte(input_byte);\n    if ((((status == 0) || (status == 4)) || (status == 8)) || ((status == 0xc || (status == 0x18)))) {\n      local_70 = 0x60;\n      local_6C = 0;\n      local_64 = 0;\n      local_68 = 0;\n      local_5C = 0;\n      local_60 = 0;\n      local_50 = param_4;\n      result = decode_third_byte(&local_58, &local_70, status);\n      if (result == 0) {\n        quotient = get_quotient(input_byte, PTR_DAT_080071dc);\n        if ((quotient & 0x100000) == 0) {\n          decode_fourth_byte(&local_58, status);\n        }\n        else {\n          decode_fifth_byte(&local_58, status);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08006186",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_08006c7c",
                "FUN_080091c6",
                "FUN_08006092",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "decode_function_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "process_input_08009fe8",
                "param_1": "input_size",
                "puVar1": "ptr1",
                "uVar2": "var1",
                "piVar3": "function_table",
                "iVar4": "function_ptr",
                "pcVar5": "function",
                "puVar6": "ptr2"
            },
            "code": "int process_input_08009fe8(uint input_size)\n{\n    int *function_table = *(int **)PTR_PTR_DAT_08009ff4;\n    if (input_size > 0x1f)\n    {\n        *function_table = 0x16;\n        return -1;\n    }\n    int function_ptr = function_table[0x11];\n    if ((function_ptr != 0) && (*(code **)(function_ptr + input_size * 4) != (code *)0x0))\n    {\n        code *function = *(code **)(function_ptr + input_size * 4);\n        if (function != (code *)0x1)\n        {\n            if (function == (code *)0xffffffff)\n            {\n                *function_table = 0x16;\n                return 1;\n            }\n            *(undefined4 *)(function_ptr + input_size * 4) = 0;\n            (*function)(input_size);\n        }\n        return 0;\n    }\n    undefined *ptr1 = PTR_PTR_DAT_08009ff4;\n    undefined4 var1 = thunk_FUN_0800887c(function_table);\n    undefined *ptr2 = PTR_DAT_0800a018;\n    *(undefined4 *)PTR_DAT_0800a018 = 0;\n    int result = FUN_0800886c(var1, input_size, input_size, 0, ptr1, unaff_r4, unaff_r5, in_lr);\n    if ((result == -1) && (*(int *)ptr2 != 0))\n    {\n        *function_table = *(int *)ptr2;\n    }\n    return result;\n}",
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "process_input_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "set_limits_08002c1e",
                "param_1": "enable_limit",
                "param_2": "max_limit",
                "param_3": "limit_val_1",
                "param_4": "limit_val_2",
                "FUN_08002948": "set_limit"
            },
            "code": "void set_limits_08002c1e(int enable_limit, int max_limit, int limit_val_1, int limit_val_2){\n  set_limit(1, 0xffff, limit_val_1, limit_val_2, max_limit);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "set_limits_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "extract_data_08005a68",
                "param_1": "out_data",
                "param_2": "in_data",
                "iVar1": "temp_data"
            },
            "code": "void extract_data_08005a68(uint32_t *out_data, uint32_t *in_data){\n  uint32_t temp_data;\n  *out_data = 0xf;\n  temp_data = PTR_DAT_08005a9c;\n  out_data[1] = *(uint32_t *)(temp_data + 4) & 3;\n  out_data[2] = *(uint32_t *)(temp_data + 4) & 0xf0;\n  out_data[3] = *(uint32_t *)(temp_data + 4) & 0x700;\n  out_data[4] = *(uint32_t *)(temp_data + 4) >> 3 & 0x700;\n  *in_data = *PTR_DAT_08005aa0 & 7;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "extract_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "data_ptr"
            },
            "code": "void initialize_data_08008f78(int flag, int value, undefined4 arg3, undefined4 arg4)\n{\n  undefined *data_ptr;\n  data_ptr = PTR_DAT_08009018;\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_ptr + 0xc) = 0;\n    data_ptr[0x14] = 7;\n    *(undefined4 *)(data_ptr + 0x20) = 0;\n    data_ptr[0x28] = 8;\n    *(undefined4 *)(data_ptr + 0x34) = 0;\n    data_ptr[0x3c] = 9;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    data_ptr[0x50] = 10;\n    *(undefined4 *)(data_ptr + 0x5c) = 0;\n    data_ptr[100] = 0x17;\n    *(undefined4 *)(data_ptr + 0x70) = 0;\n    data_ptr[0x78] = 0x17;\n    *(undefined4 *)(data_ptr + 0x84) = 0;\n    data_ptr[0x8c] = 0x17;\n    *(undefined4 *)(data_ptr + 0x98) = 0;\n    data_ptr[0xa0] = 0x17;\n    *(undefined4 *)(data_ptr + 0xac) = 0;\n    data_ptr[0xb4] = 0x17;\n    *(undefined4 *)(data_ptr + 0xc0) = 0;\n    data_ptr[200] = 0x28;\n    *(undefined4 *)(data_ptr + 0xd4) = 0;\n    data_ptr[0xdc] = 0x28;\n    *(undefined4 *)(data_ptr + 0xe8) = 0;\n    data_ptr[0xf0] = 0x28;\n    *(undefined4 *)(data_ptr + 0xfc) = 0;\n    data_ptr[0x104] = 0x28;\n    *(undefined4 *)(data_ptr + 0x110) = 0;\n    data_ptr[0x118] = 0x28;\n    *(undefined4 *)(data_ptr + 0x124) = 0;\n    data_ptr[300] = 0x28;\n    *(undefined4 *)(data_ptr + 0x138) = 0;\n    FUN_080090c2(0,PTR_LAB_08008f50_1_08009020,PTR_DAT_0800901c,data_ptr,arg4);\n  }\n  return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_array_08008d30",
                "param_1": "array",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "temp1",
                "FUN_0800734a": "call_function3",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "PTR_PTR_LAB",
                "PTR_DAT_08008d80": "PTR_DAT1",
                "PTR_DAT_08008d84": "PTR_DAT2",
                "PTR_DAT_08008d88": "PTR_DAT3",
                "FUN_08008d00": "call_function1",
                "FUN_08008d18": "call_function2",
                "FUN_08008c20": "call_function4"
            },
            "code": "undefined4* initialize_array_08008d30(undefined4* array, undefined4 arg1, undefined4 arg2, undefined4 arg3)\n{\n  undefined temp1;\n  array[1] = 0;\n  array[2] = 1000;\n  *array = PTR_PTR_LAB_08008ba4_1_08008d7c_08008ba4_1_08008d7c;\n  if (array == (undefined4*)PTR_DAT_08008d80) {\n    call_function1(array, 0, arg3, PTR_DAT_08008d80, arg2);\n    call_function2(array, 1);\n  }\n  else {\n    temp1 = call_function3(arg1, PTR_DAT_08008d84);\n    *(undefined*)((int)array + 0x12d) = temp1;\n    temp1 = call_function3(arg1, PTR_DAT_08008d88);\n    *(undefined*)(array + 0x4b) = temp1;\n  }\n  call_function4(array);\n  return array;\n}",
            "called": [
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_array_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "set_param_3_in_dat_08002f94",
                "param_1": "",
                "param_2": "",
                "param_3": "param_3",
                "PTR_DAT_08002f9c": "PTR_DAT_08002f9c"
            },
            "code": "void set_param_3_in_dat_08002f94(){\n    *(undefined4 *)PTR_DAT_08002f9c = param_3;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_param_3_in_dat_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "check_parameter_0800734a",
                "param_1": "user_param",
                "uVar1": "result",
                "FUN_08007332": "execute_function"
            },
            "code": "int check_parameter_0800734a(int user_param)\n{\n  int result;\n  if (user_param != 0)\n  {\n    result = execute_function();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "check_parameter_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "process_data_08000aec",
                "uVar3": "i",
                "iVar2": "char_value",
                "bVar1": "valid_char",
                "PTR_DAT_08000bc0": "data_pointer_1",
                "PTR_DAT_08000bc4": "data_pointer_2",
                "FUN_080005e0": "initialize_data",
                "PTR_DAT_08000bc8": "data_array_1",
                "PTR_DAT_08000bcc": "data_array_2",
                "PTR_DAT_08000bd0": "data_array_3",
                "PTR_DAT_08000bd4": "char_array",
                "FUN_080036ac": "check_char",
                "FUNC_080005f8": "process_char",
                "PTR_DAT_08000bd8": "data_array_4",
                "PTR_DAT_08000bdc": "data_pointer_3",
                "PTR_DAT_08000be0": "data_pointer_4",
                "PTR_DAT_08000be4": "data_pointer_5"
            },
            "code": "void process_data_08000aec(void)\n{\n  bool valid_char;\n  int char_value;\n  uint i;\n\n  *PTR_DAT_08000bc0 = 1;\n  if (*PTR_DAT_08000bc4 != '\\0') {\n    initialize_data();\n  }\n  for (i = 0; i < 5; i++) {\n    PTR_DAT_08000bc8[i] = 0;\n    PTR_DAT_08000bcc[i] = 0;\n    PTR_DAT_08000bd0[i] = 0;\n  }\n  for (i = 0; i < 0x3c; i++) {\n    if ((i - 0x2e & 0xff) < 0xe) {\n      if (i < 0x3c) {\n        char_value = (int)(char)PTR_DAT_08000bd4[i];\n      }\n      else {\n        char_value = -1;\n      }\n      char_value = check_char(char_value);\n      if (char_value == 0) {\n        valid_char = false;\n      }\n      else {\n        if (i < 0x3c) {\n          char_value = (int)(char)PTR_DAT_08000bd4[i];\n        }\n        else {\n          char_value = -1;\n        }\n        char_value = check_char(char_value);\n        if (char_value == 1) {\n          valid_char = false;\n        }\n        else {\n          valid_char = true;\n        }\n      }\n    }\n    else {\n      valid_char = false;\n    }\n    if (valid_char) {\n      process_char(i,2);\n    }\n    else {\n      if (i < 0x3c) {\n        if (((PTR_DAT_08000bd4[i] != -1) && (char_value = check_char(), char_value != 0)) &&\n           (char_value = check_char((int)(char)PTR_DAT_08000bd4[i]), char_value != 1)) {\n          valid_char = true;\n        }\n      }\n      if (valid_char) {\n        process_char(i,1);\n      }\n    }\n    PTR_DAT_08000bd8[i] = 0xff;\n  }\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\n  *PTR_DAT_08000be0 = 0;\n  *PTR_DAT_08000be4 = 0;\n  *PTR_DAT_08000bc0 = 0;\n  return;\n}\n",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_data_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "initialize_game_08008eec",
                "FUN_08008ed6": "load_resources"
            },
            "code": "void initialize_game_08008eec(void)\n{\n  load_resources();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "initialize_game_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "check_params_080068d6",
                "param_1": "data",
                "param_2": "len",
                "param_3": "flag",
                "*(char *)((int)param_1 + 0x3a)": "data[10]",
                "param_2 == 0": "len == 0",
                "param_3 == 0": "flag == 0",
                "*(char *)(param_1 + 0xe)": "data[14]",
                "param_1[10]": "data[10]",
                "*(short *)(param_1 + 0xb)": "data[11]",
                "*(short *)((int)param_1 + 0x2e)": "*(short *)(data + 0x2e)",
                "param_1[0xf]": "data[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "data[10] = 34",
                "*(undefined *)(param_1 + 0xe)": "data[14] = 0",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*data + 0xc)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*data + 0x14)"
            },
            "code": "int check_params_080068d6(int *data, int len, int flag) {\n    if (data[10] != ' ') {\n        return 2;\n    }\n    if (len == 0) {\n        return 1;\n    }\n    if (flag == 0) {\n        return 1;\n    }\n    if (data[14] != 1) {\n        data[10] = 34;\n        data[14] = 0;\n        data[11] = (short)flag;\n        *(short *)(data + 0x2e) = (short)flag;\n        data[15] = 0;\n        *(uint *)(*data + 0xc) |= 0x100;\n        *(uint *)(*data + 0x14) |= 1;\n        *(uint *)(*data + 0xc) |= 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "check_params_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "send_data_to_server_080032a2",
                "param_1": "server_address",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "timeout",
                "uVar1": "data_ptr",
                "FUN_08000178": "get_data_pointer",
                "FUN_0800325a": "send_packet"
            },
            "code": "void send_data_to_server_080032a2(undefined4 server_address, undefined4 data, undefined4 data_length, undefined4 timeout)\n{\n  undefined4 data_ptr;\n  \n  data_ptr = get_data_pointer(data);\n  send_packet(server_address, 0x71, data_ptr, data_length, timeout);\n  return;\n}",
            "called": [
                "FUN_08000178",
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "send_data_to_server_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_device_08001b48",
                "PTR_DAT_08001bc0": "device_data_ptr",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "device_firmware_path",
                "PTR_FUN_08000214_1_08001bc8": "device_init_func_ptr",
                "PTR_LAB_080002ec_1_08001bcc": "device_reset_label_ptr",
                "DAT_08001bd0": "device_config_data",
                "PTR_LAB_08000c18_1_08001bd4": "device_data_label_ptr",
                "DAT_08001bd8": "device_status_data",
                "PTR_LAB_080001a8_1_08001bdc": "device_status_label_ptr",
                "PTR_FUNC_08001cd0_1_08001be0": "device_cmd_func_ptr",
                "DAT_08001be4": "device_default_data"
            },
            "code": "void initialize_device_08001b48(void)\n{\n  undefined *device_ptr;\n  device_ptr = PTR_DAT_08001bc0;\n  set_device_mode(PTR_DAT_08001bc0, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  set_device_config(device_ptr, 0xe0, PTR_FUN_08000214_1_08001bc8);\n  set_device_config(device_ptr, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  set_device_config(device_ptr, 0xc0, DAT_08001bd0);\n  set_device_config(device_ptr, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  set_device_config(device_ptr, 0xf4, DAT_08001bd8);\n  set_device_config(device_ptr, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  set_device_config(device_ptr, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  set_device_config(device_ptr, 0xff, DAT_08001be4);\n  set_device_timeout(device_ptr, 0xe100);\n  init_device_communication();\n  set_device_error(0);\n  return;\n}",
            "called": [
                "FUN_08002f94",
                "FUN_08000aec",
                "FUN_08002e44",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f2c",
                "FUN_0800018c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "initialize_device_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_bit_08006390",
                "param_1": "ptr_param",
                "param_2": "value",
                "puVar1": "ptr_data"
            },
            "code": "int set_bit_08006390(uint **ptr_param, int value) {\n  uint *ptr_data = *ptr_param;\n  FUN_08006262(ptr_data, value, 1);\n  if (ptr_data == DAT_080063bc) {\n    ptr_data[17] |= 0x8000;\n  }\n  **ptr_param |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "process_data_08008730",
                "uVar1": "random_index",
                "iVar2": "function_result",
                "iVar3": "data_index",
                "FUN_080086e8": "get_random_index",
                "PTR_DAT_08008770": "PTR_DATA_ARRAY",
                "PTR_DAT_08008774": "PTR_FUNCTION_POINTER_ARRAY",
                "PTR_DAT_08008778": "PTR_DATA_ITEM_ARRAY"
            },
            "code": "void process_data_08008730(void)\n{\n  uint8_t random_index;\n  int32_t function_result;\n  int32_t data_index;\n  \n  random_index = get_random_index();\n  data_index = *(int32_t *)(PTR_DAT_08008770 + random_index * 4);\n  if ((random_index < 5) && (function_result = (**(code **)(PTR_DAT_08008774 + random_index * 4))(data_index), function_result != -1)) {\n    process_data_08008730_item(*(undefined4 *)(PTR_DAT_08008778 + (uint32_t)*(uint8_t *)(data_index + 0x44) * 4), *(int32_t *)(data_index + 100) + (uint32_t)*(uint16_t *)(data_index + 0x6a),1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "process_data_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_data_08005df4",
                "param_1": "data",
                "puVar1": "data_ptr"
            },
            "code": "void update_data_08005df4(uint **data){\n  uint *data_ptr;\n  *(undefined *)((int)data + 0x3d) = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  update_data_08005df4_helper(data);\n  *(undefined *)((int)data + 0x3d) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "update_data_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointers",
                "iVar2": "num_functions",
                "iVar3": "i"
            },
            "code": "void execute_functions_08009148(void)\n{\n  void **function_pointers = PTR_DAT_08009180;\n  int num_functions = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < num_functions / 4; i++) {\n    (**(code **)(function_pointers + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_pointers = PTR_DAT_08009188;\n  num_functions = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < num_functions / 4; i++) {\n    (**(code **)(function_pointers + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = FUN_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = FUN_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = FUN_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "returnZero_08008854"
            },
            "code": "int returnZero_08008854(void) {\n    int result = 0;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "returnZero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "counter",
                "pbVar2": "byte_input_data",
                "first_char": "first_char",
                "data_type": "data_type",
                "output_data": "output_data",
                "input_data": "input_data"
            },
            "code": "int process_data_080064cc(int *data)\n{\n  char first_char = *(char *)(data + 0x39);\n  if (first_char != '!') {\n    return 2;\n  }\n  int data_type = data[2];\n  int *output_data = (int *)*data;\n  int *input_data = (int *)data[8];\n\n  if (data_type == 0x1000) {\n    int input_value = *(ushort *)input_data & 0x1ff;\n\n    if (data[4] == 0) {\n      input_data += 2;\n    }\n    else {\n      input_data += 1;\n    }\n    *output_data += 4;\n    *(uint *)(*output_data) = input_value;\n  }\n  else {\n    byte *byte_input_data = (byte *)input_data;\n    input_data += 1;\n    *output_data += 4;\n    *(uint *)(*output_data) = (uint)*byte_input_data;\n  }\n\n  short counter = *(short *)(data + 0x26) - 1;\n  *(short *)(data + 0x26) = counter;\n\n  if (counter == 0) {\n    *(uint *)(*data + 0xc) &= 0xffffff7f;\n    *(uint *)(*data + 0xc) |= 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "update_data_08004d6c",
                "param_1": "data",
                "puVar1": "ptr"
            },
            "code": "uint32_t update_data_08004d6c(uint32_t **data)\n{\n    uint32_t *ptr;\n    if (*(char *)((int)data + 0x3d) == '\"') {\n        if (*(uint16_t *)((int)data + 0x2a) < 4) {\n            if (*(uint16_t *)((int)data + 0x2a) - 2 < 2) {\n                if (data[0xb] == (uint32_t *)0x2) {\n                    **data |= 0x400;\n                }\n                else {\n                    **data &= 0xfffffbff;\n                    **data |= 0x800;\n                }\n                (*data)[1] &= 0xfffffbff;\n            }\n            else {\n                if (data[0xb] == (uint32_t *)0x2) {\n                    **data |= 0x400;\n                }\n                else {\n                    **data &= 0xfffffbff;\n                }\n                (*data)[1] &= 0xfffff8ff;\n                ptr = data[9];\n                data[9] = (uint32_t *)((int)ptr + 1);\n                *(char *)ptr = (char)(*data)[4];\n                *(uint16_t *)((int)data + 0x2a) += -1;\n                *(char *)((int)data + 0x3d) = 0x20;\n                data[0xc] = (uint32_t *)0;\n                if (*(char *)((int)data + 0x3e) == '@') {\n                    *(char *)((int)data + 0x3e) = 0;\n                    do_nothing_08004d6a();\n                }\n                else {\n                    *(char *)((int)data + 0x3e) = 0;\n                    do_nothing_08004a20();\n                }\n            }\n        }\n        else {\n            ptr = data[9];\n            data[9] = (uint32_t *)((int)ptr + 1);\n            *(char *)ptr = (char)(*data)[4];\n            *(uint16_t *)((int)data + 0x2a) += -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "update_data_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "process_data_08004ac2",
                "param_1": "data_ptr",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "flag3",
                "uVar1": "value",
                "uVar2": "data",
                "FUN_08007fa0": "call_function"
            },
            "code": "int process_data_08004ac2(int *data_ptr, int flag1, int flag2, int flag3) {\n  int data = *(int *)(*data_ptr + 0x18);\n  int value;\n  if ((data & 0x80) == 0) {\n    value = *(int *)(data_ptr + 3);\n  }\n  else {\n    value = *(int *)(data_ptr + 6);\n  }\n  call_function(data_ptr, (data & 4) == 0, value, data, flag3);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "return_one_08008850",
                "undefined4": "int"
            },
            "code": "int return_one_08008850(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "return_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "update_flags_08006ca8",
                "param_1": "flag_address",
                "param_2": "param_2",
                "puVar1": "flag_mask_pointer",
                "iVar2": "flag_data_address",
                "uVar3": "function_result",
                "uVar4": "new_flag_value",
                "uVar5": "current_flag_value",
                "local_18": "bit_position",
                "local_14": "function_param_2",
                "local_10": "function_param_3"
            },
            "code": "void update_flags_08006ca8(uint *flag_address, undefined4 param_2)\n{\n  uint current_flag_value = *flag_address;\n  uint new_flag_value;\n  uint bit_mask;\n  undefined *flag_mask_pointer;\n  undefined4 function_result;\n  uint bit_position;\n\n  int flag_data_address = DAT_08006d20;\n  uint flag_1_value = DAT_08006d14;\n  uint flag_2_value = DAT_08006d18;\n\n  if (current_flag_value == flag_1_value)\n  {\n    new_flag_value = *(uint *)(flag_data_address + 0x18) | 0x200;\n    *(uint *)(flag_data_address + 0x18) = new_flag_value;\n    bit_mask = *(uint *)(flag_data_address + 0x18) & 0x200;\n  }\n  else\n  {\n    if (current_flag_value == flag_2_value)\n    {\n      new_flag_value = *(uint *)(flag_data_address + 0x18) | 0x400;\n      *(uint *)(flag_data_address + 0x18) = new_flag_value;\n      bit_mask = *(uint *)(flag_data_address + 0x18) & 0x400;\n    }\n  }\n\n  flag_mask_pointer = PTR_DAT_08006d1c;\n  function_result = FUN_08006bb8((uint)((int)(char)*PTR_DAT_08006d1c << 0x18) >> 0x1c, param_2, new_flag_value, bit_mask);\n  bit_position = 1 << ((byte)*flag_mask_pointer & 0xf) & 0xffff;\n  uint function_param_2 = 3;\n  uint function_param_3 = 0;\n  FUN_080040e8(function_result, &bit_position);\n}",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "update_flags_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "store_value_at_index_08002fc2",
                "param_1": "array_start",
                "param_2": "index",
                "param_3": "value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void store_value_at_index_08002fc2(int array_start, int index, int value) {\n    int* array_ptr = (int*)(array_start + (index + 0x42) * 4);\n    *array_ptr = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "store_value_at_index_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_checksum_08008afa",
                "param_1": "data_address",
                "*(short *)(param_1 + 0x134)": "first_value",
                "*(short *)(param_1 + 0x136)": "second_value",
                "checksum": "checksum"
            },
            "code": "ushort calculate_checksum_08008afa(int data_address){\n    ushort checksum = (*(short *)(data_address + 0x134) + 0x40) - *(short *)(data_address + 0x136) & 0x3f;\n    return checksum;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_checksum_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "print_data_and_address_08003048",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "num_repeats",
                "param_4": "address",
                "puVar1": "address_ptr",
                "FUN_08008c44": "write_data_to_address",
                "FUN_08003002": "print_data",
                "FUN_08002e26": "print_address"
            },
            "code": "void print_data_and_address_08003048(void* data, size_t data_size, int num_repeats, void* address){\n    undefined *address_ptr;\n    address_ptr = PTR_DAT_08003068;\n    write_data_to_address(PTR_DAT_08003068, data, data_size, address, address);\n    print_data(data);\n    print_address(data, address_ptr);\n    return;\n}",
            "called": [
                "FUN_08003002",
                "FUN_08002e26",
                "FUN_08008c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "print_data_and_address_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009698",
                "FUN_08009d50",
                "FUN_08009f2c",
                "FUN_08009358",
                "FUN_08009a80"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "check_and_execute_command_08000214",
                "param_1": "command_index",
                "param_2": "command_arg1",
                "param_3": "command_arg2",
                "param_4": "command_arg3",
                "iVar2": "command_type",
                "PTR_DAT_080002d8": "command_args",
                "PTR_DAT_080002dc": "special_command_data",
                "FUN_08002fa0": "get_command_type",
                "FUN_080036ac": "execute_command",
                "FUN_0800738a": "execute_special_command",
                "FUN_080088e0": "execute_command_callback",
                "FUN_080026b0": "execute_command"
            },
            "code": "void check_and_execute_command_08000214(uint8_t command_index, uint32_t command_arg1, uint32_t command_arg2, uint32_t command_arg3)\n{\n    if (command_index > 59) {\n        return;\n    }\n    uint8_t command_type = get_command_type(command_index, command_arg2, command_arg3, command_arg3);\n    if (command_type == 3) {\n        if (command_index < 60) {\n            if (PTR_DAT_080002d8[command_index] == -1) {\n                return;\n            }\n            else {\n                uint8_t result = execute_command(PTR_DAT_080002d8[command_index]);\n                if (result == 0) {\n                    return;\n                }\n                else if (result == 1) {\n                    return;\n                }\n                else {\n                    execute_special_command(PTR_DAT_080002d8[command_index], PTR_DAT_080002dc);\n                }\n            }\n        }\n        else {\n            return;\n        }\n        if (result != 0) {\n            execute_command_callback(command_index, command_arg1);\n        }\n        mark_command_as_executed(command_index, command_arg1);\n    }\n    else if (command_type == 4) {\n        if (command_index < 60) {\n            if (PTR_DAT_080002d8[command_index] == -1) {\n                return;\n            }\n            else {\n                bool should_execute = should_execute_command(PTR_DAT_080002d8[command_index]);\n                if (should_execute) {\n                    execute_command(PTR_DAT_080002e4 + (uint8_t)PTR_DAT_080002e0[command_index] * 3, command_arg1);\n                }\n            }\n        }\n        else {\n            return;\n        }\n        mark_command_as_executed(command_index, command_arg1);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_execute_command_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_call_functions_08003724",
                "FUN_08003f0c": "call_function_one",
                "FUN_080036d8": "call_function_two",
                "do_nothing_080036d4": "do_nothing",
                "DAT_08003744": "data_pointer"
            },
            "code": "int set_flag_and_call_functions_08003724(void)\\n\\\n{\\n\\\n  *DAT_08003744 = *DAT_08003744 | 0x10;\\n\\\n  call_function_one(3);\\n\\\n  call_function_two(0xf);\\n\\\n  do_nothing();\\n\\\n  return 0;\\n\\\n}",
            "called": [
                "FUN_080036d8",
                "FUN_08003f0c",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_call_functions_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_value_at_offset_080038dc",
                "param_1": "pointer_to_value",
                "*param_1": "*pointer_to_value",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_080038dc(int *pointer_to_value)\n{\n    int offset = 0x4c;\n    int *address_of_value = (int *)(*pointer_to_value + offset);\n    return *address_of_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "encode_080025ac",
                "*param_1": "message",
                "param_2": "key",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "shift_amount",
                "uVar2": "message_length",
                "uVar3": "result",
                "iVar4": "shift1, shift2",
                "PTR_DAT_08002628": "PTR_DAT_08002628",
                "DAT_0800262c": "DAT_0800262c",
                "FUN_08002400": "FUN_08002400",
                "PTR_DAT_08002630": "PTR_DAT_08002630"
            },
            "code": "byte encode_080025ac(byte *message, uint key, int param_3, int param_4)\n{\n  uint message_length = (uint)*message;\n  if (message_length < 0xc) {\n    encode_080025ac_helper(key, 1, param_3, message_length, param_4);\n    uint shift_amount = (byte)PTR_DAT_08002628[message_length * 8] & 0xffffffc0 | key & 0x3f;\n    PTR_DAT_08002628[message_length * 8] = (char)shift_amount;\n    int shift1 = -param_3 + 0x220;\n    if (shift1 < 0) {\n      shift1 = -param_3 + 0x223;\n    }\n    message[1] = (byte)((uint)(shift1 << 0x16) >> 0x18);\n    int shift2 = -param_4 + 0x960;\n    if (shift2 < 0) {\n      shift2 = -param_4 + 0x963;\n    }\n    message[2] = (byte)((uint)(shift2 << 0x16) >> 0x18);\n    uint uVar3 = (uint)((ulonglong)DAT_0800262c * (ulonglong)*message >> 0x23);\n    int result = FUN_08002400(uVar3, shift_amount, message_length, (int)((ulonglong)DAT_0800262c * (ulonglong)*message));\n    if (result == 0) {\n      PTR_DAT_08002630[0x44] = (char)uVar3;\n      FUN_0800242c();\n    }\n    PTR_DAT_08002628[message_length * 8] = PTR_DAT_08002628[message_length * 8] | 0x40;\n  }\n  return *message;\n}",
            "called": [
                "FUN_08008990",
                "FUN_08002400",
                "FUN_0800242c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "encode_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "send_data_to_server_08002634",
                "param_1": "socket_fd",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "unused_param",
                "FUN_080025ac": "send",
                "0x220": "data_length",
                "0x960": "flags"
            },
            "code": "void send_data_to_server_08002634(int socket_fd, char* data, int data_length) {\n    send(socket_fd, data, data_length, 0);\n    return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "send_data_to_server_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "call_function_with_offset_08002f0a",
                "param_1": "offset_from_param_1",
                "FUN_0800325a": "call_function_with_offset"
            },
            "code": "void call_function_with_offset_08002f0a(int offset_from_param_1)\n{\n  call_function_with_offset_08002f0a(offset_from_param_1 + 0x40);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "call_function_with_offset_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_result_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_variable_1",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_variable_1",
                "uStack_18": "stack_variable_2",
                "uStack_14": "stack_variable_3"
            },
            "code": "uint calculate_result_08005bb8(int input)\n{\n  uint result;\n  undefined2 local_variable_1;\n  byte stack_array[4];\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n  stack_variable_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_variable_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_variable_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_variable_1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = calculate_value();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_variable_1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_0800376c",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "calculate_result_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_parameters_08007648",
                "param_1": "parameters",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar2": "result_1",
                "puVar4": "ptr_to_parameter_2",
                "local_34": "result_2",
                "local_30": "result_3",
                "local_2c": "result_4",
                "local_28": "result_5",
                "local_24": "result_6",
                "local_20": "result_7",
                "cVar1": "temp_char",
                "DAT_080076dc": "DAT_constant"
            },
            "code": "void initialize_parameters_08007648(uint32_t *parameters, uint32_t parameter_2, uint32_t parameter_3, uint32_t parameter_4) {\n  uint32_t result_1;\n  uint32_t *ptr_to_parameter_2 = parameters + 1;\n  uint32_t result_2;\n  uint32_t result_3;\n  uint32_t result_4;\n  uint32_t result_5;\n  uint32_t result_6;\n  uint32_t result_7;\n  parameters[0] = 0x40000000;\n  parameters[1] = 0x40000000;\n  parameters[4] = parameter_2;\n  result_1 = calculate_result_1();\n  parameters[2] = (uint32_t)(((uint64_t)DAT_080076dc * (uint64_t)result_1) >> 0x32) - 1;\n  parameters[5] = 0;\n  parameters[3] = 0;\n  parameters[6] = 0;\n  parameters[0x13] = parameter_4;\n  result_2 = 0;\n  result_3 = 0;\n  result_4 = 0;\n  result_5 = 0;\n  result_6 = 0;\n  result_7 = 0;\n  result_3 = parameter_3;\n  result_2 = calculate_result_2(*parameters);\n  print_result_1((int)result_2, 0xe, 0);\n  result_4 = calculate_result_2(*parameters);\n  print_result_2((int)result_4);\n  int result_8 = calculate_result_3(ptr_to_parameter_2);\n  if ((result_8 == 0) && (result_8 = calculate_result_4(ptr_to_parameter_2, &result_2, 0), result_8 == 0)) {\n    calculate_result_5(ptr_to_parameter_2, 0);\n  }\n}",
            "called": [
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08006060",
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08006128"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_parameters_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "return_zero_08008858"
            },
            "code": "int return_zero_08008858(void) {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "return_zero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "remove_flagged_bits_080063c0",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "ptr_data",
                "DAT_0800641c": "PTR_FLAGGED_DATA",
                "BIT_FLAG_0": "0x1",
                "BIT_FLAG_3": "0x8000",
                "FLAG_1": "0x1111",
                "FLAG_2": "0x444",
                "*(undefined *)((int)param_1 + 0x3d)": "*(char*)((int)data + OFFSET_FLAG)"
            },
            "code": "int remove_flagged_bits_080063c0(uint** data, int size) {\\n\\\n        uint* ptr_data = *data;\\n\\\n        FUN_08006262(ptr_data, size, 0);\\n\\\n        if (((ptr_data == DAT_0800641c) && ((ptr_data[8] & FLAG_1) == 0)) && ((ptr_data[8] & FLAG_2) == 0)) {\\n\\\n            ptr_data[17] = ptr_data[17] & ~BIT_FLAG_3;\\n\\\n        }\\n\\\n        if (((ptr_data[8] & FLAG_1) == 0) && ((ptr_data[8] & FLAG_2) == 0)) {\\n\\\n            *ptr_data = *ptr_data & ~BIT_FLAG_0;\\n\\\n        }\\n\\\n        *(char*)((int)data + OFFSET_FLAG) = 1;\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "remove_flagged_bits_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "pbVar2": "byte_array",
                "cVar1": "closing_parenthesis"
            },
            "code": "int process_data_08004a24(int *data)\n{\n  char closing_parenthesis;\n  byte *byte_array;\n  \n  closing_parenthesis = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_array = (byte *)data[9];\n    data[9] = (int)(byte_array + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_array;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_index_08002fba",
                "param_1": "array_start_index",
                "param_2": "index",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "int get_value_at_index_08002fba(int array_start_index, int index) {\n    int* PTR_value = (int*)(array_start_index + (index + 0x42) * 4);\n    return *PTR_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "check_assertion_and_exit_if_failed_080090cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "file",
                "param_4": "line",
                "uVar1": "error_code",
                "puVar2": "assertion_failed_msg",
                "uVar3": "current_time",
                "uVar4": "exit_code",
                "PTR_PTR_DAT_080090f8": "assertion_error_code_ptr",
                "PTR_s___function__080090fc": "assertion_failed_msg_ptr",
                "PTR_s_assertion___s__failed__file___s__08009100": "assertion_failed_msg",
                "FUN_08009124": "print_assertion_failed_msg",
                "PTR_s__08009104": "exit_msg_ptr"
            },
            "code": "void check_assertion_and_exit_if_failed_080090cc(int param1, int param2, char* file, int line)\n{\n  int error_code = *(int *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n  char* PTR_s_assertion___s__failed__file___s__08009100 = PTR_s___function__080090fc;\n  int exit_code = line;\n  if (file == NULL) goto LAB_EXIT;\n  do {\n    print_PTR_s_assertion___s__failed__file___s__08009100(error_code, PTR_s_assertion___s__failed__file___s__08009100, line, param1, param2, file, uVar4);\n    long long current_time = get_current_time();\n    param2 = (int)((unsigned long long)current_time >> 0x20);\n    error_code = (int)current_time;\n  } while (true);\n\nLAB_EXIT:\n  file = PTR_s__08009104;\n  PTR_s_assertion___s__failed__file___s__08009100 = PTR_s__08009104;\n  print_PTR_s_assertion___s__failed__file___s__08009100(error_code, PTR_s_assertion___s__failed__file___s__08009100, exit_code, param1, param2, file, uVar4);\n  exit(exit_code);\n}\n",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "check_assertion_and_exit_if_failed_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "update_data_080049e0",
                "param_1": "data_ptr",
                "puVar1": "data",
                "current_value": "current_char"
            },
            "code": "int update_data_080049e0(uint **data_ptr) {\n    char current_value = *(char *)((int)data_ptr + 0x3d);\n    if (current_value != ' ') {\n        return 2;\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 0x28;\n    uint *data = *data_ptr;\n    if ((*data & 1) == 0) {\n        *data = *data | 1;\n    }\n    **data_ptr = **data_ptr | 0x400;\n    (*data_ptr)[1] = (*data_ptr)[1] | 0x300;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007f7c",
                "FUN_08007ff0",
                "FUN_08007f8e",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "update_data_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_flags_based_on_input_08006d24",
                "param_1": "input",
                "iVar1": "current_address"
            },
            "code": "void set_flags_based_on_input_08006d24(int *input) {\n  int current_address = DAT_08006d7c;\n  if (*input != DAT_08006d74) {\n    if (*input == DAT_08006d78) {\n      *(uint *)(current_address + 0xc) |= 0x400;\n      *(uint *)(current_address + 0xc) &= 0xfffffbff;\n      *(uint *)(current_address + 0x18) &= 0xfffffbff;\n      *(uint *)(current_address + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(uint *)(current_address + 0xc) |= 0x200;\n  *(uint *)(current_address + 0xc) &= 0xfffffdff;\n  *(uint *)(current_address + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "ptr",
                "uVar2": "param1",
                "uStack_c": "param2",
                "uStack_8": "param3",
                "uStack_4": "param4",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904",
                "FUN_08009d50": "free_memory",
                "FUNC_0800937c": "call_function"
            },
            "code": "void process_data_080098d8(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4) {\n  int ptr;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  \n  ptr = *(int *)PTR_PTR_DAT_08009904;\n  param1 = data1;\n  param2 = data2;\n  param3 = data3;\n  param4 = data4;\n  \n  if ((ptr != 0) && (*(int *)(ptr + 0x18) == 0)) {\n    free_memory(ptr);\n  }\n  \n  call_function(ptr, *(undefined4 *)(ptr + 8), data1, &data2, param1, &param2);\n  return;\n}",
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "out_memory_block",
                "param_2": "requested_size",
                "puVar1": "current_block_ptr",
                "uVar2": "initialization_result",
                "puVar3": "current_block",
                "iVar4": "padding_size",
                "puVar5": "block_start_ptr",
                "uVar6": "block_size",
                "puVar7": "previous_block",
                "uVar8": "aligned_requested_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *out_memory_block, uint requested_size)\n{\n  uint *current_block = *(uint **)CURRENT_BLOCK_PTR;\n  uint *previous_block = current_block;\n  uint aligned_requested_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_requested_size < 0xc) {\n    aligned_requested_size = 0xc;\n  }\n  if (((int)aligned_requested_size < 0) || (aligned_requested_size < requested_size)) {\n    *out_memory_block = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    while (current_block != (uint *)0x0) {\n      uint block_size = *current_block - aligned_requested_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block == current_block) {\n            uint next_block = previous_block[1];\n            *(uint **)CURRENT_BLOCK_PTR = next_block;\n          }\n          else {\n            uint next_block = current_block[1];\n          }\n          if (previous_block != current_block) {\n            previous_block[1] = next_block;\n            previous_block = current_block;\n          }\n        }\n        else {\n          *current_block = block_size;\n          *(uint *)((int)current_block + block_size) = aligned_requested_size;\n          previous_block = (uint *)((int)current_block + block_size);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block = current_block;\n      current_block = (uint *)current_block[1];\n    }\n    if (*(int *)MEMORY_INITIALIZED == 0) {\n      uint initialization_result = initialize_memory(out_memory_block);\n      *(undefined4 *)MEMORY_INITIALIZATION_FLAG = initialization_result;\n    }\n    current_block = (uint *)initialize_memory(out_memory_block,aligned_requested_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (int block_size = initialize_memory(out_memory_block,(int)previous_block - (int)current_block), block_size != -1)))) {\n      *previous_block = aligned_requested_size;\nLAB_080092d4:\n      do_nothing_08009f4a(out_memory_block);\n      uint block_end = (int)previous_block + 0xbU & 0xfffffff8;\n      int padding_size = block_end - (int)(previous_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)previous_block + padding_size) = -padding_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out_memory_block = 0xc;\n    do_nothing_08009f4a(out_memory_block);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009eac",
                "FUN_08009908",
                "FUN_08009190"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "find_and_execute_08008500",
                "param_1": "search_value",
                "param_2": "param_2",
                "cVar1": "char_value",
                "iVar2": "start_time",
                "iVar3": "found_index",
                "uVar4": "index",
                "PTR_DAT_080085a8": "char_array",
                "PTR_DAT_080085ac": "int_array",
                "PTR_DAT_080085b0": "int_array",
                "PTR_DAT_080085b4": "byte_array",
                "FUN_08003760": "get_time",
                "FUN_08007320": "find_index",
                "FUN_080084b0": "execute_error",
                "FUN_080067ac": "execute_command"
            },
            "code": "uint find_and_execute_08008500(uint search_value, uint param_2)\n{\n  int start_time = get_time();\n  char char_value = PTR_DAT_080085a8[1];\n  int found_index = find_index((int)char_value, PTR_DAT_080085ac);\n  if (found_index == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 && ((PTR_DAT_080085ac[index] == 0 || (found_index = find_index((int)char_value, PTR_DAT_080085ac), *(int *)(PTR_DAT_080085ac + index * 4) != found_index))))) {\n    index = index + 1 & 0xff;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (execute_error(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    found_index = execute_command(*(undefined4 *)(PTR_DAT_080085ac + index * 4), search_value, param_2 & 0xffff, 1000);\n    if (found_index == 0) {\n      return param_2;\n    }\n    start_time = get_time();\n  } while ((uint)(get_time() - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08007320",
                "FUN_080067ac",
                "FUN_080084b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "find_and_execute_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "process_input_080048c8",
                "param_1": "input",
                "param_2": "input_len",
                "param_3": "input_flag",
                "param_4": "output",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int process_input_080048c8(uint **input, uint *input_len, int input_flag, uint *output) {\n    int result;\n    uint *ptr;\n    if (*(char *)((int)input + 0x3d) == '(') {\n        if (input_len == (uint *)0x0) {\n            result = 1;\n        }\n        else if (input_flag == 0) {\n            result = 1;\n        }\n        else if (*(char *)(input + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(input + 0xf) = 1;\n            ptr = *input;\n            if ((*ptr & 1) == 0) {\n                *ptr = *ptr | 1;\n            }\n            **input = **input & 0xfffff7ff;\n            *(undefined *)((int)input + 0x3d) = 0x29;\n            *(undefined *)((int)input + 0x3e) = 0x20;\n            result = 0;\n            input[0x10] = (uint *)0x0;\n            input[9] = input_len;\n            *(short *)((int)input + 0x2a) = (short)input_flag;\n            input[0xb] = output;\n            *(undefined2 *)(input + 10) = *(undefined2 *)((int)input + 0x2a);\n            *(undefined *)(input + 0xf) = 0;\n            (*input)[1] = (*input)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "process_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "iVar2": "remaining_length",
                "pcVar3": "dest_ptr"
            },
            "code": "void copy_string_08009954(char *destination, char *source, int length) {\n  char current_char;\n  int remaining_length;\n  char *dest_ptr;\n\n  do {\n    dest_ptr = destination;\n    remaining_length = length;\n    if (remaining_length == 0) {\n      return;\n    }\n    current_char = *source;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_char;\n    source = source + 1;\n    length = remaining_length - 1;\n  } while (current_char != '\\0');\n  for (; destination != dest_ptr + remaining_length; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "set_config_08005aa4",
                "param_1": "config_values",
                "puVar1": "config_base_ptr",
                "iVar2": "config_base_address",
                "iVar3": "end_time",
                "uVar4": "config_value_mask",
                "bVar5": "is_bit_cleared",
                "DAT_08005bac": "CONFIG_BASE_ADDRESS",
                "DAT_08005bb0": "CONFIG_BASE_STATUS",
                "DAT_08005bb4": "CONFIG_VALUE_MODIFIED",
                "undefined4": "int",
                "bool": "bool",
                "uint": "uint",
                "*": "*",
                "&": "&",
                "|": "|",
                "==": "==",
                "!=": "!=",
                "<": "<",
                "+": "+",
                "-": "-",
                ":": ":",
                "\n": "\n",
                "(": "(",
                ")": ")",
                "{": "{",
                "}": "}",
                ";": ";",
                ",": ",",
                "get_current_time()": "get_current_time()"
            },
            "code": "int set_config_08005aa4(uint *config_values) {\n  bool is_bit_set = (*config_values & 1) != 0;\n  if (is_bit_set) {\n    bool is_bit_cleared = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (is_bit_cleared) {\n      *(uint *)(DAT_08005bac + 0x1c) = *(uint *)(DAT_08005bac + 0x1c) | 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 = *DAT_08005bb0 | 0x100;\n      int start_time = get_current_time();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        int end_time = get_current_time();\n        if (100 < (uint)(end_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    uint *config_base_ptr = CONFIG_BASE_PTR;\n    int config_base_address = DAT_08005bac;\n    uint config_value_mask = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if ((config_value_mask != 0) && (config_value_mask != (config_values[1] & 0x300))) {\n      config_value_mask = *(uint *)(DAT_08005bac + 0x20);\n      *CONFIG_BASE_PTR = 1;\n      *config_base_ptr = 0;\n      *(uint *)(config_base_address + 0x20) = config_value_mask & 0xfffffcff;\n      if ((config_value_mask & 1) != 0) {\n        int start_time = get_current_time();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          int end_time = get_current_time();\n          if (5000 < (uint)(end_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n    int config_base_address = DAT_08005bac;\n    *(uint *)(config_base_address + 0x20) = *(uint *)(config_base_address + 0x20) & 0xfffffcff | config_values[1];\n    if (is_bit_cleared) {\n      *(uint *)(config_base_address + 0x1c) = *(uint *)(config_base_address + 0x1c) & 0xefffffff;\n    }\n  }\n  if ((*config_values & 2) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffff3fff | config_values[2];\n  }\n  if ((*config_values & 0x10) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffbfffff | config_values[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_config_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "check_flags_08005e6e",
                "param_1": "parameters",
                "iVar1": "data"
            },
            "code": "void check_flags_08005e6e(int *parameters)\n{\n    int data = *parameters;\n    if (((*(uint *)(data + 0x10) & 2) != 0) && ((*(uint *)(data + 0xc) & 2) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xfffffffd;\n        *(undefined *)(parameters + 7) = 1;\n        if ((*(uint *)(*parameters + 0x18) & 3) == 0)\n        {\n            FUN_0800771c();\n            do_nothing_08005e6a(parameters);\n        }\n        else\n        {\n            do_nothing_08005e68(parameters);\n        }\n        *(undefined *)(parameters + 7) = 0;\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 4) != 0) && ((*(uint *)(data + 0xc) & 4) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xfffffffb;\n        *(undefined *)(parameters + 7) = 2;\n        if ((*(uint *)(*parameters + 0x18) & 0x300) == 0)\n        {\n            FUN_0800771c(parameters);\n            do_nothing_08005e6a(parameters);\n        }\n        else\n        {\n            do_nothing_08005e68(parameters);\n        }\n        *(undefined *)(parameters + 7) = 0;\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 8) != 0) && ((*(uint *)(data + 0xc) & 8) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xfffffff7;\n        *(undefined *)(parameters + 7) = 4;\n        if ((*(uint *)(*parameters + 0x1c) & 3) == 0)\n        {\n            FUN_0800771c(parameters);\n            do_nothing_08005e6a(parameters);\n        }\n        else\n        {\n            do_nothing_08005e68(parameters);\n        }\n        *(undefined *)(parameters + 7) = 0;\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 0x10) != 0) && ((*(uint *)(data + 0xc) & 0x10) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xffffffef;\n        *(undefined *)(parameters + 7) = 8;\n        if ((*(uint *)(*parameters + 0x1c) & 0x300) == 0)\n        {\n            FUN_0800771c(parameters);\n            do_nothing_08005e6a(parameters);\n        }\n        else\n        {\n            do_nothing_08005e68(parameters);\n        }\n        *(undefined *)(parameters + 7) = 0;\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 1) != 0) && ((*(uint *)(data + 0xc) & 1) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xfffffffe;\n        FUN_08007736(parameters);\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 0x80) != 0) && ((*(uint *)(data + 0xc) & 0x80) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xffffff7f;\n        do_nothing_080064ae(parameters);\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 0x40) != 0) && ((*(uint *)(data + 0xc) & 0x40) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xffffffbf;\n        do_nothing_08005e6c(parameters);\n    }\n    data = *parameters;\n    if (((*(uint *)(data + 0x10) & 0x20) != 0) && ((*(uint *)(data + 0xc) & 0x20) != 0))\n    {\n        *(undefined4 *)(data + 0x10) = 0xffffffdf;\n        do_nothing_080064ac(parameters);\n    }\n}\n",
            "called": [
                "FUN_08005e6c",
                "FUN_0800771c",
                "FUN_08005e6a",
                "FUN_08005e68",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_080064ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "check_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_if_param_is_4_08004024",
                "param_1": "param",
                "*DAT_08004040": "*flag_ptr"
            },
            "code": "void set_flag_if_param_is_4_08004024(int param) {\n  if (param == 4) {\n    *DAT_08004040 = *DAT_08004040 | 4;\n  } else {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_4_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "has_valid_flag_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "code": "int has_valid_flag_08002400(int index) {\n  uint counter = 0;\n  while (counter <= 0xb) {\n    if ((PTR_DAT_08002428[(index * 0xc + counter) * 8] & 0x40) != 0) {\n      return 1;\n    }\n    counter++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "has_valid_flag_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "reverse_and_modify_string_08000588",
                "param_1": "index",
                "cVar1": "current_char",
                "cVar2": "target_char",
                "puVar3": "ptr_data_cc",
                "PTR_DAT_080005cc": "ptr_data_cc",
                "PTR_DAT_080005d0": "ptr_data_d0",
                "PTR_DAT_080005d4": "current_char",
                "PTR_DAT_080005d8": "ptr_data_d8",
                "PTR_DAT_080005dc": "PTR_DAT_080005dc"
            },
            "code": "void reverse_and_modify_string_08000588(int index)\n{\n  char PTR_DAT_080005d4;\n  char target_char;\n  undefined *PTR_DAT_080005cc = PTR_DAT_080005cc;\n  uint8_t PTR_DAT_080005d4_index = (uint8_t)PTR_DAT_080005cc[index];\n  char *PTR_DAT_080005d0 = PTR_DAT_080005d0;\n  FUN_08002644(PTR_DAT_080005d0 + PTR_DAT_080005d4_index * 3);\n  target_char = PTR_DAT_080005cc[index];\n  PTR_DAT_080005d4 = *PTR_DAT_080005d4;\n  if ((target_char == PTR_DAT_080005d4) && (PTR_DAT_080005d4 != '\\0')) {\n    *PTR_DAT_080005d4 = PTR_DAT_080005d4 + -1;\n  }\n  else if (PTR_DAT_080005d4 != '\\0') {\n    char *PTR_DAT_080005d8 = PTR_DAT_080005d8;\n    uint8_t next_char_index = (uint8_t)(*PTR_DAT_080005d8 + 1);\n    *PTR_DAT_080005d8 = next_char_index;\n    PTR_DAT_080005dc[next_char_index - 1] = target_char;\n  }\n  PTR_DAT_080005cc[index] = 0xff;\n  return;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_string_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "*param_1": "input_buffer",
                "param_2": "buffer_size",
                "param_3": "unused_param",
                "param_4": "unused_param",
                "bVar1": "modified_byte",
                "uVar2": "index",
                "iVar3": "result"
            },
            "code": "void process_byte_08002644(byte* input_buffer, int buffer_size, int param_2, int param_4) {\n    byte current_byte = input_buffer[0];\n    uint index = (uint)current_byte;\n    byte modified_byte = PTR_DAT_08002670[index * 8];\n    PTR_DAT_08002670[index * 8] = modified_byte & 0xbf;\n    int result = FUN_08002400((uint)((ulonglong)DAT_08002674 * (ulonglong)index >> 0x23), param_2, modified_byte & 0xbf, (int)((ulonglong)DAT_08002674 * (ulonglong)index), param_4);\n    if (result == 0) {\n        FUN_08002578(PTR_DAT_08002678);\n    }\n}",
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "code": "void infinite_loop_08008868(void)\n{\n    while(true) {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "infinite_loop_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_value_in_data_array_080036ac",
                "param_1": "value_to_find",
                "uVar1": "found_index"
            },
            "code": "uint find_value_in_data_array_080036ac(int value_to_find) {\n\tuint found_index = 0xffffffff;\n\tif ((uint)(value_to_find << 0x18) >> 0x1c < 5) {\n\t\tfor (uint i = 0; (i < 0x3c && (value_to_find != (char)PTR_DAT_080036d0[i])); i++) {\n\t\t\t// iterate through the data array to find the value\n\t\t}\n\t}\n\treturn found_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_080022f8",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "find_value_in_data_array_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "execute_function_at_address_08002f1e",
                "param_1": "address"
            },
            "code": "void execute_function_at_address_08002f1e(int address) {\n  (**(code **)**(undefined4 **)(address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_at_address_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "process_data_0800885c",
                "param_1": "data_start",
                "param_2": "data_end",
                "param_3": "data_size",
                "param_4": "checksum",
                "FUN_08008500": "calculate_checksum"
            },
            "code": "void process_data_0800885c(int data_start, int data_end, int data_size, int checksum) {\n  calculate_checksum(data_start, data_end, data_size, checksum, checksum);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_data_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_flags_0800643c",
                "param_1": "ptr_param",
                "param_2": "flag_value",
                "FUN_08006420": "set_value",
                "*param_1": "*ptr_param",
                "0x11": "17"
            },
            "code": "int set_flags_0800643c(uint **ptr_param, int flag_value){\n    set_value(*ptr_param, flag_value, 4);\n    (*ptr_param)[17] |= 0x8000;\n    **ptr_param |= 1;\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flags_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "do_something_multiple_times_08002fca",
                "param_1": "data",
                "param_2": "callback_data",
                "param_3": "num_iterations",
                "param_4": "callback_fn",
                "param_5": "callback_fn_arg",
                "uVar1": "iteration_count"
            },
            "code": "void do_something_multiple_times_08002fca(void* data, void* callback_data, int num_iterations, void* callback_fn, void* callback_fn_arg)\n{\n  uint iteration_count;\n  for (iteration_count = 0; iteration_count < num_iterations; iteration_count++) {\n    ((void (*)(void*))callback_fn)(callback_fn_arg);\n    ((void (*)(void*, int))data)(callback_data, 1);\n    ((void (*)(void*))callback_fn)(callback_fn_arg);\n    ((void (*)(void*, int))data)(callback_data, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "do_something_multiple_times_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "param_value",
                "piVar3": "param_ptr",
                "uVar4": "loop_count",
                "uVar5": "flags",
                "iVar6": "function_result",
                "unaff_r4": "unused_param1",
                "unaff_r5": "unused_param2",
                "pcVar7": "function_ptr",
                "iVar8": "loop_variable",
                "uVar9": "original_data_value",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table",
                "bVar10": "condition"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params) {\n  uint32_t result;\n  int *param_ptr;\n  uint32_t param_value;\n  uint32_t loop_count;\n  uint16_t flags;\n  code *function_ptr;\n  uint32_t function_result;\n  bool condition;\n  if (params[4] != 0) {\n    if ((data != NULL) && (data[6] == 0)) {\n      initialize_data();\n    }\n    if (params == (int *)PTR_DAT_08009cc4) {\n      param_ptr = (int *)data[1];\n    }\n    else if (params == (int *)PTR_DAT_08009cc8) {\n      param_ptr = (int *)data[2];\n    }\n    else if (params == (int *)PTR_DAT_08009ccc) {\n      param_ptr = (int *)data[3];\n    }\n    if (*(uint16_t *)(param_ptr + 3) != 0) {\n      flags = *(uint16_t *)(param_ptr + 3);\n      if ((int)(flags << 0x1c) < 0) {\n        loop_count = flags << 0x1e;\n        condition = loop_count == 0;\n        if (condition) {\n          loop_count = 0;\n        }\n        param_value = params[4];\n        if (!condition) {\n          loop_count = param_ptr[5];\n        }\n        params[0] = param_value;\n        params[2] = loop_count;\n        for (param_value = *param_ptr - param_value; param_value > 0; param_value -= loop_count) {\n          function_result = (*(code *)param_ptr[10])(data, param_ptr[8], param_value, param_ptr[4], 0, 0);\n          if (function_result < 1) {\n            flags = *(uint16_t *)(param_ptr + 3);\n            goto LAB_08009c62;\n          }\n          param_value += function_result;\n        }\n      }\n      else if (((params[1] > 0) || (params[0x10] > 0)) && ((function_ptr = (code *)param_ptr[0xb]) != NULL)) {\n        param_value = *data;\n        *data = 0;\n        if ((flags & 0x1000) == 0) {\n          function_result = (*function_ptr)(data, param_ptr[8], flags & 0x1000, 1);\n          if ((function_result == -1) && ((param_value = *data) != 0)) {\n            if ((param_value != 0x1d) && (param_value != 0x16)) {\n              flags = *(uint16_t *)(param_ptr + 3);\n              goto LAB_08009c2c;\n            }\n            *data = param_value;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          function_result = params[0x15];\n        }\n        if (((int)(flags << 0x1d) < 0) && ((function_result = function_result - params[1]), (param_ptr[0xd] != 0))) {\n          function_result = function_result - params[0x10];\n        }\n        function_result = (*(code *)param_ptr[0xb])(data, param_ptr[8], function_result, 0);\n        flags = *(uint16_t *)(param_ptr + 3);\n        if ((function_result == -1) && ((param_value = *data) > 0x1d || ((int)(DAT_08009c78 >> (param_value & 0xff)) < 0)))) {\n          goto LAB_08009c62;\n        }\n        params[1] = 0;\n        *params = params[4];\n        if (((int)(flags << 0x13) < 0) && ((function_result != -1) || (*data == 0))) {\n          params[0x15] = function_result;\n        }\n        param_ptr = (int *)param_ptr[0xd];\n        *data = param_value;\n        if (param_ptr != NULL) {\n          if (param_ptr != params + 0x11) {\n            cleanup_data(data);\n          }\n          params[0xd] = 0;\n          result = (*(code *)param_ptr)();\n        }\n        else {\nLAB_08009b86:\n          result = (*(code *)PTR_FUN_08009b88)();\n        }\n        return result;\n      }\n    }\n  }\n  return 0;\n\nLAB_08009c2c:\n  flags = *(uint16_t *)(param_ptr + 3);\n  goto LAB_08009c6c;\n\nLAB_08009c62:\n  flags |= 0x40;\nLAB_08009c6c:\n  result = (*(code *)PTR_FUN_08009c70)(0xffffffff);\n  return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "validate_input_and_run_function_08009b5c",
                "puVar1": "input_ptr",
                "iVar2": "input_len",
                "piVar3": "func_ptr",
                "piVar4": "func_ptr2",
                "uVar5": "input_val",
                "uVar6": "input_flag",
                "iVar7": "loop_count",
                "pcVar8": "jump_table_ptr",
                "iVar9": "func_return_val",
                "uVar10": "temp_val",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_ptr",
                "bVar11": "flag",
                "uVar12": "func_result"
            },
            "code": "void validate_input_and_run_function_08009b5c(void)\n{\n    uint *input_ptr;\n    int input_len;\n    int *func_ptr;\n    int *func_ptr2;\n    uint input_val;\n    ushort input_flag;\n    int loop_count;\n    code *jump_table_ptr;\n    int func_return_val;\n    uint temp_val;\n    bool flag;\n    undefined8 func_result;\n    validate_input(6);\n    jump_table_ptr = (code *)0x8009b6b;\n    func_result = get_input(1);\n    func_ptr = (int *)((ulonglong)func_result >> 0x20);\n    input_ptr = (uint *)func_result;\n    input_flag = *(ushort *)(func_ptr + 3);\n    input_len = (int)input_flag;\n    if ((int)(input_len << 0x1c) < 0) {\n        func_ptr2 = func_ptr + 4;\n        if (*func_ptr2 != 0) {\n            loop_count = input_len << 0x1e;\n            flag = loop_count == 0;\n            if (flag) {\n                loop_count = 0;\n            }\n            func_return_val = *func_ptr;\n            if (!flag) {\n                loop_count = func_ptr[5];\n            }\n            *func_ptr = *func_ptr2;\n            func_ptr[2] = loop_count;\n            for (func_return_val = func_return_val - *func_ptr2; func_return_val > 0; func_return_val = func_return_val - loop_count) {\n                loop_count = (*(code *)func_ptr[10])(input_ptr, func_ptr[8], *func_ptr2, func_return_val);\n                if (loop_count < 1) {\n                    input_flag = *(ushort *)(func_ptr + 3);\n                    goto LAB_08009c62;\n                }\n                *func_ptr2 = *func_ptr2 + loop_count;\n            }\n        }\n    } else if (((func_ptr[1] > 0) || (func_ptr[0x10] > 0)) && ((jump_table_ptr = (code *)func_ptr[0xb]) != (code *)0x0)) {\n        temp_val = *input_ptr;\n        *input_ptr = 0;\n        if ((input_len & 0x1000) == 0) {\n            func_return_val = (*(code *)func_ptr[0xb])(input_ptr, func_ptr[8], input_len & 0x1000, 1);\n            if ((func_return_val == -1) && ((input_len = *input_ptr, input_len != 0))) {\n                if ((input_len != 0x1d) && (input_len != 0x16)) {\n                    *(ushort *)(func_ptr + 3) = *(ushort *)(func_ptr + 3) | 0x40;\n                    (*jump_table_ptr)();\n                    return;\n                }\n                *input_ptr = temp_val;\n                goto LAB_08009b86;\n            }\n        } else {\n            func_return_val = func_ptr[0x15];\n        }\n        if (((int)((uint)input_flag << 0x1d) < 0) && ((func_return_val = func_return_val - func_ptr[1], func_ptr[0xd] != 0))) {\n            func_return_val = func_return_val - func_ptr[0x10];\n        }\n        func_return_val = (*(code *)func_ptr[0xb])(input_ptr, func_ptr[8], func_return_val, 0);\n        input_flag = *(ushort *)(func_ptr + 3);\n        if ((func_return_val == -1) && ((0x1d < *input_ptr) || (-1 < (int)((DAT_08009c78 >> (*input_ptr & 0xff)) << 0x1f))))) {\n            *(ushort *)(func_ptr + 3) = input_flag | 0x40;\n            (*jump_table_ptr)(0xffffffff);\n            return;\n        }\n        func_ptr[1] = 0;\n        *func_ptr2 = *func_ptr;\n        if (((int)((uint)input_flag << 0x13) < 0) && ((func_return_val != -1) || (*input_ptr == 0))) {\n            func_ptr[0x15] = func_return_val;\n        }\n        func_ptr2 = (int *)func_ptr[0xd];\n        *input_ptr = temp_val;\n        if (func_ptr2 != (int *)0x0) {\n            if (func_ptr2 != func_ptr + 0x11) {\n                free_memory(input_ptr);\n            }\n            func_ptr[0xd] = 0;\n            (*jump_table_ptr)();\n            return;\n        }\n    }\nLAB_08009b86:\n    (*jump_table_ptr)(0);\n    return;\n}\n",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "validate_input_and_run_function_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "bVar1": "success",
                "iVar2": "result",
                "PTR_DAT_080002d8": "PTR_DATA_ARRAY",
                "PTR_DAT_080002dc": "PTR_FLAG_ARRAY",
                "PTR_DAT_080002e0": "PTR_FLAGGED_DATA_ARRAY",
                "PTR_DAT_080002e4": "PTR_FLAGGED_DATA_CALLBACK_ARRAY",
                "PTR_DAT_080002e8": "PTR_DATA_CALLBACK_ARRAY",
                "FUN_08002fa0": "get_data",
                "FUN_080036ac": "check_data",
                "FUN_0800738a": "check_data",
                "FUN_080088e0": "process_data_callback",
                "FUN_080026b0": "process_flagged_data_callback",
                "undefined4": "uint32_t",
                "undefined": "uint8_t"
            },
            "code": "void process_data_0800021a(uint8_t data_index, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n    bool success = false;\n\n    int result = get_data(PTR_DAT_080002d8, data_index, param_3, param_4, param_4);\n\n    if (result == 3) {\n        if (data_index < 0x3c) {\n            if (PTR_DAT_080002dc[data_index] == -1) {\n                success = false;\n            }\n            else {\n                int check_result = check_data(PTR_DAT_080002dc[data_index]);\n                if (check_result == 0) {\n                    success = false;\n                }\n                else {\n                    int flag_value = (int)(char)PTR_DAT_080002dc[data_index];\n                    int check_result = check_data(flag_value);\n                    if (check_result == 1) {\n                        success = false;\n                    }\n                    else {\n                        success = check_data(flag_value, PTR_DAT_080002d8);\n                    }\n                }\n            }\n        }\n        else {\n            success = false;\n        }\n        if (success) {\n            process_data_0800021a_callback(data_index, param_2);\n        }\n        update_data(PTR_DAT_080002d8, data_index, param_2);\n    }\n    else if (result == 4) {\n        if (data_index < 0x3c) {\n            if (PTR_DAT_080002dc[data_index] == -1) {\n                success = false;\n            }\n            else {\n                int check_result = check_data(PTR_DAT_080002dc[data_index]);\n                if (check_result == 0) {\n                    success = false;\n                }\n                else {\n                    success = true;\n                }\n            }\n        }\n        else {\n            success = false;\n        }\n        if (success) {\n            process_flagged_data_callback(PTR_DAT_080002dc[data_index], param_2);\n        }\n        update_data(PTR_DAT_080002d8, data_index, param_2);\n    }\n}",
            "called": [
                "FUN_08002fc2",
                "FUN_080026b0",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "process_data_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "get_character_08008a6c",
                "param_1": "index",
                "cVar1": "character",
                "iVar2": "result",
                "uVar3": "value",
                "uVar4": "value"
            },
            "code": "char get_character_08008a6c(uint index) {\n  char character;\n  int result;\n  uint value;\n  if (index < 0x3c) {\n    value = (uint)(char)PTR_DAT_08008ab4[index];\n  }\n  else {\n    value = 0xffffffff;\n  }\n  if (value == 0xffffffff) {\n    character = '\\0';\n  }\n  else {\n    result = FUN_08006b28(value,PTR_DAT_08008ab8);\n    if (result == 0) {\n      character = '\\0';\n    }\n    else {\n      value = (value << 0x18) >> 0x1c;\n      result = FUN_08006b7c(value);\n      character = FUN_080072f0(result,1 << (value & 0xf) & 0xffff);\n    }\n  }\n  if (character != '\\0') {\n    character = '\\x01';\n  }\n  return character;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "get_character_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_from_ptr_dat_080026f8",
                "*param_1": "input_byte",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "uint": "unsigned int",
                "byte": "unsigned char",
                "byte_index": "byte_index",
                "shifted_byte": "shifted_byte"
            },
            "code": "unsigned int get_byte_from_ptr_dat_080026f8(byte *input_byte) {\n    unsigned int byte_index = (unsigned int)*input_byte * 8;\n    unsigned int shifted_byte = (unsigned int)(unsigned char)PTR_DAT_08002708[byte_index] << 0x19;\n    return shifted_byte >> 0x1f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_from_ptr_dat_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_valid_input_080085b8",
                "param_1": "input",
                "uVar1": "value"
            },
            "code": "bool is_valid_input_080085b8(int input) {\n  uint32_t ptr = PTR_DAT_080085d8 + (uint32_t)*(byte *)(input + 0x44) * 4;\n  uint32_t value = FUN_08006b1c(*(uint32_t*)ptr);\n  return (value & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "is_valid_input_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "get_result_08001c08",
                "uVar1": "result",
                "FUN_08002720": "calculate",
                "PTR_DAT_08001c14": "PTR_DATA"
            },
            "code": "undefined get_result_08001c08(void)\n{\n  undefined result;\n  result = calculate(PTR_DAT_08001c14);\n  return result;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "get_result_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "check_clock_source_080075dc",
                "param_1": "clock_source",
                "uVar1": "local_var1",
                "iVar2": "return_value",
                "uVar3": "local_var2",
                "local_20": "local_var3",
                "local_1c": "local_var4",
                "local_18": "local_var5",
                "local_14": "local_var6",
                "local_10": "local_var7",
                "local_c": "local_var8",
                "FUN_08005a68": "get_clock_source_details",
                "FUN_08007594": "check_clock_source_validity",
                "FUN_08005a28": "get_clock_source_details_2",
                "FUN_08005a48": "get_clock_source_details_3",
                "PTR_s_TIM__Unknown_clock_source_08007644": "error_message"
            },
            "code": "int check_clock_source_080075dc(uint8_t clock_source)\n{\n    uint32_t local_var1;\n    int return_value;\n    uint32_t local_var2;\n    uint32_t local_var3;\n    uint32_t local_var4;\n    uint32_t local_var5;\n    uint32_t local_var6;\n    local_var2 = 0;\n    local_var3 = 0;\n    local_var4 = 0;\n    local_var5 = 0;\n    local_var6 = 0;\n    local_var1 = 0;\n    get_clock_source_details(&local_var2, &local_var1);\n    return_value = check_clock_source_080075dc_validity(clock_source);\n    if (return_value == 1)\n    {\n        return_value = get_clock_source_details_2();\n    }\n    else if (return_value == 2)\n    {\n        return_value = get_clock_source_details_3();\n        local_var3 = local_var2;\n    }\n    else\n    {\n        print_PTR_s_TIM__Unknown_clock_source_08007644(PTR_s_TIM__Unknown_clock_source_08007644);\n        return_value = 0;\n        local_var3 = 0;\n    }\n    if (local_var3 != 1280)\n    {\n        if (local_var3 < 1281)\n        {\n            if (local_var3 != 1024)\n            {\n                return return_value;\n            }\n        }\n        else if ((local_var3 != 1536) && (local_var3 != 1792))\n        {\n            return return_value;\n        }\n    }\n    return return_value << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a28",
                "FUN_08005a68",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "get_result_08007544",
                "param_1": "input_val",
                "DAT_08007588": "special_val_1",
                "DAT_0800758c": "special_val_2",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "interrupt_trigger"
            },
            "code": "uint8_t get_result_08007544(uint32_t input_val) {\n  if (input_val == 0xffffffff) {\n    return 0;\n  }\n  if (input_val == DAT_08007588) {\n    return 0x1d;\n  }\n  if (DAT_08007588 < input_val) {\n    if (input_val == DAT_0800758c) {\n      return 0x1e;\n    }\n    if (input_val == DAT_0800758c + 0x12400) {\n      return 0x19;\n    }\n  }\n  else if (input_val == 0x40000000) {\n    return 0x1c;\n  }\n  trigger_interrupt(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "get_result_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "execute_function_if_valid_08007ff0",
                "PTR_08007f78": "get_function_result",
                "PTR_080049e0": "execute_second_function",
                "param_1": "input_parameter",
                "iVar1": "function_result",
                "*(code **)(iVar1 + 0x60)": "function_pointer",
                "*(char *)(iVar1 + 0x5c)": "is_valid",
                "*(char *)(iVar1 + 0x2c)": "character"
            },
            "code": "void execute_function_if_valid_08007ff0(code* function_pointer, char is_valid, char character) {\n  int function_result = PTR_08007f78();\n  if(function_pointer != NULL && is_valid && character != ' ') {\n    (*function_pointer)(function_result + 0x68);\n  }\n  PTR_080049e0(param_1);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08005084",
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "execute_function_if_valid_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_array",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data_value"
            },
            "code": "void process_data_08008990(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_array)\n{\n  int data_value;\n  undefined *data_ptr;\n  int result;\n  if (data_index < 0x3c) {\n    data_value = (int)(char)PTR_DAT_08008a14[data_index];\n    data_ptr = PTR_DAT_08008a14;\n  }\n  else {\n    data_value = -1;\n    data_ptr = data_array;\n  }\n  if (data_value != -1) {\n    result = FUN_08006b28(data_value, PTR_DAT_08008a18, param_3, data_ptr, data_array);\n    if (result != 0) {\n      result = FUN_0800738a(data_value, PTR_DAT_08008a1c);\n      if (result != 0) {\n        FUN_080071e4(data_value);\n      }\n      FUN_08006b5c(data_value, PTR_DAT_08008a18);\n    }\n    switch(param_2) {\n    case 0:\n      FUN_08007258(data_value,0);\n      break;\n    case 1:\n      FUN_08007258(data_value,1,0);\n      break;\n    case 2:\n      FUN_08007258(data_value,0,1);\n      break;\n    case 3:\n      FUN_08007258(data_value,0,2);\n    }\n    FUN_08006b3e(data_value, PTR_DAT_08008a20);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_0800738a",
                "FUN_08007258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = FUN_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        FUN_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_080040e8(uVar5,&local_20);\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_080098d8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "<original_function_name>": "set_param_value",
                "param_1": "param_array",
                "FUN_08004396": "set_param_value_08004396"
            },
            "code": "int set_param_value_08004396(int *param_array){\n                      int param_index = 0x11;\n                      int offset = 0x10;\n                      int value = param_array[param_index] & 0xff;\n                      uint *ptr = (uint *)(param_array + offset);\n                      *ptr = value;\n                      return 0;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_param_value_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_at_position_08003fb0",
                "param_1": "position"
            },
            "code": "void set_bit_at_position_08003fb0(uint position) {\n  if (position >= 0) {\n    uint word_index = (position >> 5) + 0x20;\n    uint bit_offset = position & 0x1f;\n    uint* word_ptr = (uint*)(DAT_08003fd4 + word_index * 4);\n    *word_ptr = 1 << bit_offset;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "process_data_080052f0",
                "param_1": "data",
                "puVar2": "data_ptr",
                "uVar3": "flags",
                "uVar4": "status",
                "DAT_080053c8": "STATUS_FLAG_1",
                "PTR_00000010": "data[16]",
                "FUN_08004aec": "process_special_case",
                "*(char *)((int)param_1 + 0x3d)": "c",
                "*(char *)((int)param_1 + 0x3e)": "d",
                "*(short *)((int)param_1 + 0x2a)": "s"
            },
            "code": "void process_data_080052f0(uint **data)\n{\n  uint *data_ptr = *data;\n  uint flags = data_ptr[5];\n  uint status = data_ptr[1];\n  if (((flags & DAT_080053c8) != 0) && ((status & 0x100) != 0)) {\n    PTR_00000010 = (uint *)((uint)PTR_00000010 | 1);\n    data_ptr[5] = 0xfffffeff;\n    **data = **data | 0x8000;\n  }\n  if (((flags & STATUS_FLAG_2) != 0) && ((status & 0x100) != 0)) {\n    PTR_00000010 = (uint *)((uint)PTR_00000010 | 2);\n    (*data)[5] = 0xfffffdff;\n  }\n  if (((flags & STATUS_FLAG_3) != 0) && ((status & 0x100) != 0)) {\n    char c = *(char *)((int)data + 0x3d);\n    if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (data[12] == (uint *)0x21)))))) {\n      process_special_case(data);\n    }\n    else {\n      PTR_00000010 = (uint *)((uint)PTR_00000010 | 4);\n      if (*(char *)((int)data + 0x3e) == '\\x10') {\n        **data = **data | 0x200;\n      }\n      (*data)[5] = 0xfffffbff;\n    }\n  }\n  if (((flags & STATUS_FLAG_4) != 0) && ((status & 0x100) != 0)) {\n    PTR_00000010 = (uint *)((uint)PTR_00000010 | 8);\n    (*data)[5] = 0xfffff7ff;\n  }\n  if (PTR_00000010 != (uint *)0x0) {\n    process_final_data(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_at_address_08002ec4",
                "param_1": "address",
                "**(code **)(**(int **)(param_1 + 0xc0) + 8)": "*(void (**)(void))(**(int **)(address + 0xc0) + 8)",
                "function_pointer": "function_pointer"
            },
            "code": "void execute_function_at_address_08002ec4(int address) {\n  void (*function_pointer)() = *(void (**)(void))(**(int **)(address + 0xc0) + 8);\n  (*function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_at_address_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_value_in_array_08007306(int value, char* array) {\n  while (*array != -1) {\n    if (*array == value) {\n      break;\n    }\n    array += 12;\n  }\n  return *(int*)(array + 4);\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_game_08008f0e",
                "FUN_08003f0c": "initialize_players",
                "FUN_080036a2": "setup_game"
            },
            "code": "void initialize_game_08008f0e(void)\n{\n    initialize_players(3);\n    setup_game();\n    return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_game_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "set_value_by_code_08002f2c",
                "param_1": "code",
                "param_2": "value",
                "param_3": "value",
                "PTR_DAT_08002f74": "value_ptr_0x90",
                "PTR_DAT_08002f70": "value_ptr_0xc0",
                "PTR_DAT_08002f78": "value_ptr_0xd0",
                "PTR_DAT_08002f6c": "value_ptr_0xe0",
                "PTR_DAT_08002f7c": "value_ptr_0xf4",
                "PTR_DAT_08002f80": "value_ptr_0xf5"
            },
            "code": "void set_value_by_code_08002f2c(uint8_t code, uint32_t value) {\n  switch(code) {\n    case 0x90:\n      *(uint32_t *)PTR_DAT_08002f74 = value;\n      break;\n    case 0xc0:\n      *(uint32_t *)PTR_DAT_08002f70 = value;\n      break;\n    case 0xd0:\n      *(uint32_t *)PTR_DAT_08002f78 = value;\n      break;\n    case 0xe0:\n      *(uint32_t *)PTR_DAT_08002f6c = value;\n      break;\n    case 0xf4:\n      *(uint32_t *)PTR_DAT_08002f7c = value;\n      break;\n    case 0xf5:\n      *(uint32_t *)PTR_DAT_08002f80 = value;\n      break;\n    default:\n      break;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_value_by_code_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_ptr",
                "param_2": "size_ptr",
                "param_3": "size",
                "param_4": "data_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "int validate_input_08004954(uint **input_ptr, uint *size_ptr, int size, uint *data_ptr)\n{\n    int result;\n    uint *ptr;\n    if (*(char *)((int)input_ptr + 0x3d) == '(')\n    {\n        if (size_ptr == NULL || size == 0)\n        {\n            result = 1;\n        }\n        else if (*(char *)(input_ptr + 0xf) == '\\x01')\n        {\n            result = 2;\n        }\n        else\n        {\n            *(undefined *)(input_ptr + 0xf) = 1;\n            ptr = *input_ptr;\n            if ((*ptr & 1) == 0)\n            {\n                *ptr |= 1;\n            }\n            **input_ptr &= 0xfffff7ff;\n            *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n            *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n            result = 0;\n            input_ptr[0x10] = NULL;\n            input_ptr[9] = size_ptr;\n            *(short *)((int)input_ptr + 0x2a) = (short)size;\n            input_ptr[0xb] = data_ptr;\n            *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n            *(undefined *)(input_ptr + 0xf) = 0;\n            (*input_ptr)[1] |= 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "data_index",
                "param_2": "new_data",
                "uVar1": "new_bitmask",
                "uVar2": "old_data",
                "uVar3": "new_data_1",
                "DAT_08005d44": "PTR_DAT_08005d44",
                "bitmask1": "0xfffffffe",
                "bitmask2": "0xfffffffd",
                "bitmask3": "0xfffffff7",
                "bitmask4": "0xfffffffb"
            },
            "code": "void update_data_08005cec(int data_index, uint *new_data)\n{\n  uint bitmask1 = 0xfffffffe;\n  uint bitmask2 = 0xfffffffd;\n  uint bitmask3 = 0xfffffff7;\n  uint bitmask4 = 0xfffffffb;\n  uint old_data = *(uint *)(data_index + 0x18);\n  uint old_bitmask = *(uint *)(data_index + 0x20);\n  uint new_bitmask = (old_bitmask & bitmask2) | new_data[2];\n  uint new_data_1 = new_data[1];\n  uint new_data_3 = new_data[3];\n  uint new_data_5 = new_data[5];\n  uint new_data_6 = new_data[6];\n  if (data_index == DAT_08005d44) {\n    new_bitmask = (new_bitmask & bitmask4) | new_data_3;\n    old_data = (old_data & bitmask1) | new_data_5 | new_data_6;\n  }\n  *(uint *)(data_index + 0x18) = old_data | new_data_1;\n  *(uint *)(data_index + 0x20) = new_bitmask;\n  *(uint *)(data_index + 0x34) = new_data_1;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_ptr_dat_to_22_0800886c",
                "PTR_DAT_08008878": "ptr_dat"
            },
            "code": "void set_ptr_dat_to_22_0800886c(void)\n{\n  int value_to_set = 22;\n  int *PTR_DAT_08008878 = (int *)PTR_DAT_08008878;\n  *PTR_DAT_08008878 = value_to_set;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_ptr_dat_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "add_byte_to_uint_and_store_08003748",
                "PTR_DAT_08003758": "uint_ptr",
                "PTR_DAT_0800375c": "byte_ptr",
                "uint": "uint",
                "byte": "byte",
                "int": "int",
                "*PTR_DAT_08003758": "*uint_ptr",
                "*PTR_DAT_0800375c": "*byte_ptr",
                "*int_ptr": "*int_ptr",
                "*(uint *)PTR_DAT_08003758": "*uint_ptr",
                "(uint)(byte)*PTR_DAT_0800375c + *(int *)PTR_DAT_08003758": "byte_val + int_val"
            },
            "code": "void add_byte_to_uint_and_store_08003748(void)\n{\n  uint* PTR_DAT_08003758 = (uint*)PTR_DAT_08003758;\n  byte* PTR_DAT_0800375c = (byte*)PTR_DAT_0800375c;\n  int* int_ptr = (int*)PTR_DAT_08003758;\n  uint byte_val = (uint)(*PTR_DAT_0800375c);\n  uint int_val = (*int_ptr);\n  *PTR_DAT_08003758 = (uint)(byte)*PTR_DAT_0800375c + *(int *)PTR_DAT_08003758;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "add_byte_to_uint_and_store_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "decode_bits_080040e8",
                "param_1": "bits_array",
                "param_2": "decoded_array",
                "puVar1": "decoded_ptr",
                "uVar2": "bit_index",
                "uVar3": "bit_mask",
                "uVar4": "bit_value",
                "uVar5": "decoded_offset",
                "uVar6": "decoded_value",
                "uVar7": "decoded_index",
                "iVar8": "decoded_shift",
                "uVar9": "decoded_mask",
                "iVar10": "decoded_table_index",
                "decoded_table_value": "decoded_table_value"
            },
            "code": "void decode_bits_080040e8(uint *bits_array, uint *decoded_array)\n{\n  uint *decoded_ptr;\n  uint bit_mask;\n  uint bit_index;\n  uint bit_value;\n  uint decoded_value;\n  uint decoded_offset;\n  uint decoded_index;\n  uint decoded_shift;\n  uint decoded_mask;\n  uint decoded_data;\n  int decoded_table_index;\n  uint decoded_table_value;\n  \n  decoded_offset = 0;\n  bit_index = 0;\n  do {\n    if (bit_index > 15) {\n      return;\n    }\n    bit_mask = 1 << bit_index;\n    bit_value = *decoded_array & bit_mask;\n    if (bit_value == bit_mask) {\n      decoded_value = decoded_array[1];\n      if (decoded_value == 0x12) {\n        decoded_offset = decoded_array[3] + 0xc;\n      }\n      else if (decoded_value < 0x13) {\n        if (decoded_value == 2) {\n          decoded_offset = decoded_array[3] + 8;\n        }\n        else if (decoded_value < 3) {\n          if (decoded_value == 0) goto LAB_0800423a;\n          if (decoded_value == 1) {\n            decoded_offset = decoded_array[3];\n          }\n        }\n        else if (decoded_value == 3) {\n          decoded_offset = 0;\n        }\n        else if (decoded_value == 0x11) {\n          decoded_offset = decoded_array[3] + 4;\n        }\n      }\n      else {\n        if (decoded_value != decoded_table_value) {\n          if (decoded_table_value < decoded_value) {\n            if (decoded_value == decoded_table_index) goto LAB_0800423a;\n            decoded_table_value = decoded_table_index + 0x10000;\n            decoded_mask = decoded_table_index;\n          }\n          else {\n            decoded_table_value = decoded_value - 0x100000;\n            decoded_mask = decoded_value;\n          }\n          if ((decoded_value != decoded_table_value) && (decoded_value != decoded_mask - 0xf0000)) goto LAB_080040fe;\n        }\nLAB_0800423a:\n        if (decoded_array[2] == 0) {\n          decoded_offset = 4;\n        }\n        else if (decoded_array[2] == 1) {\n          bits_array[4] = bit_mask;\n          decoded_offset = 8;\n        }\n        else {\n          bits_array[5] = bit_mask;\n          decoded_offset = 8;\n        }\n      }\nLAB_080040fe:\n      decoded_shift = (bit_index & 3) << 2;\n      decoded_index = bit_index >> 2;\n      decoded_ptr = bits_array + decoded_index;\n      *decoded_ptr = *decoded_ptr & ~(0xf << decoded_shift) | decoded_offset << decoded_shift;\n      if ((decoded_array[1] & 0x10000000) != 0) {\n        *(uint *)(decoded_array[4] + 0x18) = *(uint *)(decoded_array[4] + 0x18) | 1;\n        decoded_table_index = decoded_index + 2;\n        decoded_table_value = *(uint *)(decoded_array[5] + decoded_table_index * 4);\n        if ((decoded_array[1] & 0x10000) == 0) {\n          *decoded_table_value = *decoded_table_value & ~bit_mask;\n        }\n        else {\n          *decoded_table_value = *decoded_table_value | bit_mask;\n        }\n        if ((decoded_array[1] & 0x20000) == 0) {\n          *(decoded_table_value + 1) = *(decoded_table_value + 1) & ~bit_mask;\n        }\n        else {\n          *(decoded_table_value + 1) = *(decoded_table_value + 1) | bit_mask;\n        }\n        if ((decoded_array[1] & 0x100000) == 0) {\n          *(decoded_table_value + 2) = *(decoded_table_value + 2) & ~bit_mask;\n        }\n        else {\n          *(decoded_table_value + 2) = *(decoded_table_value + 2) | bit_mask;\n        }\n        if ((decoded_array[1] & 0x200000) == 0) {\n          *(decoded_table_value + 3) = *(decoded_table_value + 3) & ~bit_mask;\n        }\n        else {\n          *(decoded_table_value + 3) = bit_mask | *(decoded_table_value + 3);\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while(true);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "decode_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "write_to_memory_0800288c",
                "param_1": "address",
                "param_2": "value",
                "puVar1": "memory_pointer1",
                "iVar2": "result",
                "uVar3": "result",
                "cVar4": "new_count",
                "uVar5": "count",
                "uVar6": "count",
                "local_11": "value",
                "*PTR_DAT_08002908": "memory_flag",
                "PTR_DAT_08002914": "memory_pointer1",
                "*PTR_DAT_0800290c": "memory_count",
                "*PTR_DAT_08002910": "memory_max_count",
                "PTR_DAT_08002918": "memory_pointer2",
                "FUN_08007ede": "write_to_file",
                "0x14": "offset"
            },
            "code": "int write_to_memory_0800288c(int address, char value) {\n  int result = 0;\n  char *ptr1 = PTR_DAT_08002914;\n  char *ptr2 = PTR_DAT_08002918;\n  if (**PTR_DAT_08002908 == 0) {\n    result = write_to_file(address + 0x14, &value, 1);\n    result = result == 0 ? 1 : 0;\n  }\n  else {\n    uint8_t count = (uint8_t)**PTR_DAT_0800290c + 1;\n    if ((uint8_t)**PTR_DAT_08002910 < count) {\n      count = 0x20;\n      int memory_allocation = allocate_memory_block(*(int *)PTR_DAT_08002914, count);\n      *PTR_DAT_08002914 = memory_allocation;\n      if (memory_allocation == 0) {\n        result = 0;\n      }\n      else {\n        **PTR_DAT_0800290c = (char)count;\n        **PTR_DAT_08002910 = (char)count;\n        result = 1;\n      }\n    }\n    else {\n      *(char *)(*(int *)PTR_DAT_08002914 + (uint8_t)*PTR_DAT_08002918) = value;\n      char new_count = *PTR_DAT_08002918 + 1;\n      *PTR_DAT_08002918 = new_count;\n      **PTR_DAT_0800290c = new_count;\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "write_to_memory_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_if_initialized_and_return_function_pointer_0800010c",
                "param_1": "function_pointer",
                "*PTR_DAT_08000124": "initialized_flag",
                "DAT_08000128": "some_constant",
                "PTR_FUN_0800012c": "function_pointer_pointer"
            },
            "code": "undefined* check_if_initialized_and_return_function_pointer_0800010c(undefined* function_pointer)\\n{\\n    if (**PTR_DAT_08000124 == \"\\0\") {\\n        if (DAT_08000128 != 0) {\\n            function_pointer = PTR_FUN_0800012c;\\n        }\\n        **PTR_DAT_08000124 = 1;\\n    }\\n    return function_pointer;\\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_if_initialized_and_return_function_pointer_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "set_parameter_08002e26",
                "param_1": "object_address",
                "param_2": "parameter_value",
                "FUN_08003154": "execute_function",
                "FUN_08002ddc": "cleanup_object",
                "FUN_08002df6": "finalize_object"
            },
            "code": "void set_parameter_08002e26(int object_address, undefined4 parameter_value)\n{\n  *(undefined4 *)(object_address + 0xc0) = parameter_value;\n  execute_function(object_address + 0x40);\n  cleanup_object(object_address);\n  finalize_object(object_address);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_parameter_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "validate_input_and_set_value_080036d8",
                "param_1": "input_value",
                "iVar1": "result",
                "PTR_DAT_0800371c": "divisor_ptr",
                "PTR_DAT_08003718": "byte_ptr",
                "FUN_08003fd8": "validate_divisor",
                "FUN_08003f30": "set_value",
                "PTR_DAT_08003720": "value_ptr"
            },
            "code": "int validate_input_and_set_value_080036d8(uint input_value) {\n    uint divisor = *(uint *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n    int result = FUN_08003fd8(divisor);\n    if (result != 0) {\n        return 1;\n    }\n    if (input_value > 0xf) {\n        return 1;\n    }\n    FUN_08003f30(0xffffffff, input_value, 0);\n    *(uint *)PTR_DAT_08003720 = input_value;\n    return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_value_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = FUN_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  FUN_08007438(param_1);\n  uVar3 = FUN_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  FUN_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_of_value_080086e8",
                "param_1": "value_to_find",
                "uVar1": "index",
                "PTR_DAT_08008708": "values",
                "DAT_08008708": "values[5]"
            },
            "code": "unsigned int find_index_of_value_080086e8(int value_to_find)\n{\n  unsigned int index = 0;\n  unsigned int max_index = 4;\n  unsigned int DAT_08008708 = {1, 2, 3, 4, 5};\n  if (value_to_find == 0) {\n    return 5;\n  }\n  while(index < max_index) {\n    if (value_to_find == PTR_DAT_08008708[index]) {\n      return index;\n    }\n    index++;\n  }\n  return max_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_08008730",
                "FUN_0800870c"
            ],
            "imported": false,
            "current_name": "find_index_of_value_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "process_input_0800a110",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void process_input_0800a110(int *output, undefined4 input) {\n\tundefined *ptr = PTR_DAT_0800a12c;\n\t*(undefined4 *)PTR_DAT_0800a12c = 0;\n\tint result = execute_function(input);\n\tif ((result == -1) && (*(int *)ptr != 0)) {\n\t\t*output = *(int *)ptr;\n\t}\n\treturn;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "process_input_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_if_valid_08003b8c",
                "param_1": "ptr_param",
                "iVar1": "var1",
                "iVar2": "var2",
                "FUN_08003760": "get_current_time"
            },
            "code": "int check_if_valid_08003b8c(int *ptr_param){\n    int var1;\n    int var2 = *ptr_param;\n    if ((*(uint *)(var2 + 8) & 1) == 0){\n        return 0;\n    }\n    *(uint *)(var2 + 8) = *(uint *)(var2 + 8) & 0xfffffffe;\n    int start_time = get_current_time();\n    do {\n        if ((*(uint *)(*ptr_param + 8) & 1) == 0){\n            return 0;\n        }\n        var1 = get_current_time();\n    } while ((uint)(var1 - start_time) < 3);\n    ptr_param[10] = ptr_param[10] | 0x10;\n    ptr_param[0xb] = ptr_param[0xb] | 1;\n    return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003de4",
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "check_if_valid_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_and_calculate_080035b8",
                "local_54": "array",
                "local_4c": "array_element_1",
                "local_44": "mask",
                "local_40": "shift",
                "local_3c": "value",
                "local_38": "limit",
                "local_34": "denominator",
                "local_30": "multiplier",
                "local_20": "numerator",
                "local_1c": "divisor",
                "local_14": "unused_variable",
                "local_10": "unused_variable",
                "local_c": "constant",
                "DAT_08003650": "constant2"
            },
            "code": "void initialize_and_calculate_080035b8() {\n  int result;\n  uint32_t multiplier = 2;\n  uint32_t divisor = 0x10;\n  uint32_t numerator = 2;\n  uint32_t denominator = 0;\n  uint32_t constant = 0x380000;\n  result = FUNC_08005460(&multiplier);\n  if (result != 0) {\n    FUN_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x88);\n  }\n  uint32_t mask = 0xf;\n  uint32_t shift = 2;\n  uint32_t value = 0;\n  uint32_t limit = 0x400;\n  result = FUN_080058ac(&mask, &shift, &value, &limit, &denominator);\n  if (result != 0) {\n    FUN_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x95);\n  }\n  uint32_t array[2] = {2, 0x8000};\n  result = FUN_08005aa4(array);\n  if (result != 0) {\n    FUN_080073e8(PTR_s__home_bo__arduino15_packages_STM_08003654,0x9c);\n  }\n  uint32_t DAT_08003650 = FUN_08005a1c();\n  FUN_08003fd8((uint32_t)((uint64_t)constant * (uint64_t)DAT_08003650 >> 0x26));\n  FUN_08004024(4);\n  FUN_08003f30(0xffffffff,0);\n}",
            "called": [
                "FUN_080073e8",
                "FUN_08005a1c",
                "FUN_08004024",
                "FUN_08003fd8",
                "FUN_080058ac",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08005aa4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_and_calculate_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "receive_data_and_validate_08001c18",
                "param_1": "device_address",
                "param_2": "data_length",
                "param_3": "expected_length",
                "param_4": "register_address",
                "puVar1": "data_pointer",
                "uVar2": "received_byte",
                "iVar3": "received_length",
                "iVar4": "i",
                "bVar5": "is_valid_length"
            },
            "code": "void receive_data_and_validate_08001c18(uint8_t device_address, uint32_t data_length, int expected_length, uint8_t register_address){\n  uint8_t *data_pointer;\n  uint8_t received_byte;\n  int received_length;\n  bool is_valid_length;\n  data_pointer = data_buffer;\n  if (data_length == 0xFFFFFFFF) {\n    data_length = 0;\n  }\n  else {\n    set_device_address(I2C_BUS, device_address);\n    send_register_address(I2C_BUS, register_address);\n    set_receive_mode(I2C_BUS);\n    receive_data(I2C_BUS, data_pointer, data_length);\n  }\n  received_length = get_received_length(I2C_BUS);\n  is_valid_length = expected_length >= received_length;\n  if (!is_valid_length) {\n    print_error_message(I2C_BUS, TOO_MANY_BYTES_MESSAGE);\n  }\n  else {\n    is_valid_length = received_length >= expected_length;\n    if (!is_valid_length) {\n      print_error_message(I2C_BUS, TOO_FEW_BYTES_MESSAGE);\n    }\n  }\n  *data_pointer = device_address;\n  *(data_pointer + 1) = data_length & 0xFF;\n  for (int i = 0; i < expected_length; i++) {\n    received_byte = get_received_byte(I2C_BUS);\n    *(data_pointer + i + 2) = received_byte;\n  }\n  print_receive_message(I2C_BUS, data_length + 2, data_pointer);\n}\n",
            "called": [
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002a30",
                "FUN_08002c14",
                "FUN_08002f14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "receive_data_and_validate_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "clear_bit_08006460",
                "param_1": "bit_array",
                "param_2": "bit_index",
                "puVar1": "bits",
                "DAT_0804a008": "mask1",
                "DAT_0804a00c": "mask2",
                "iVar1": "bit_mask1",
                "iVar2": "bit_mask2"
            },
            "code": "int clear_bit_08006460(uint **bit_array, int bit_index) {\\n\\\n    uint *bits = *bit_array;\\n\\\n    int DAT_0804a008 = 0x1111;\\n\\\n    int DAT_0804a00c = 0x444;\\n\\\n    int bit_DAT_0804a008 = bits[8] & DAT_0804a008;\\n\\\n    int bit_DAT_0804a00c = bits[8] & DAT_0804a00c;\\n\\\n    if (bit_DAT_0804a008 == 0 && bit_DAT_0804a00c == 0) {\\n\\\n        bits[17] &= 0xffff7fff;\\n\\\n    }\\n\\\n    bits = *bit_array;\\n\\\n    bit_DAT_0804a008 = bits[8] & DAT_0804a008;\\n\\\n    bit_DAT_0804a00c = bits[8] & DAT_0804a00c;\\n\\\n    if (bit_DAT_0804a008 == 0 && bit_DAT_0804a00c == 0) {\\n\\\n        *bits &= 0xfffffffe;\\n\\\n    }\\n\\\n    return 0;\\n\\\n    }",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "clear_bit_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing_08004044();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "get_data_08008880",
                "param_1": "input_value",
                "bVar1": "is_valid_input",
                "cVar2": "data",
                "uVar3": "result",
                "uVar4": "shift_amount",
                "PTR_DAT_080088d8": "data_array",
                "FUN_08006d80": "get_random_number",
                "PTR_DAT_080088dc": "data_shift_amount_ptr"
            },
            "code": "uint get_data_08008880(uint input_value)\n{\n  bool is_valid_input = false;\n  char data = -1;\n  uint result = 0;\n  uint shift_amount = 0;\n\n  if (input_value < 14) {\n    if (input_value + 46 < 60) {\n      is_valid_input = true;\n    }\n  }\n  else {\n    is_valid_input = input_value < 60;\n  }\n\n  if (is_valid_input) {\n    if (input_value < 14) {\n      input_value += 46;\n    }\n    data = PTR_DAT_080088d8[input_value];\n  }\n\n  if (data != -1) {\n    result = get_random_number();\n    shift_amount = *(uint *)PTR_DAT_080088dc;\n    if (shift_amount != 12) {\n      if (shift_amount < 12) {\n        result >>= (12 - shift_amount);\n      }\n      else {\n        result <<= (shift_amount - 12);\n      }\n    }\n  }\n\n  return result;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "get_data_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_param_08002ed2",
                "param_1": "param_address",
                "uVar1": "result",
                "FUN_08003474": "update_param_value"
            },
            "code": "void process_param_08002ed2(int param_address) {\n  uint32_t result = (**(code **)(**(int **)(param_address + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    update_param_value(param_address + 0x44, result & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_param_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int compare_and_return_080073ae(int num1, int num2) {\n  if (num1 != num2) {\n    if (num1 == 0) {\n      return num2;\n    }\n    if (num2 == 0) {\n      return num1;\n    }\n    num1 = 0;\n  }\n  return num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_08008078",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_index",
                "param_2": "bit_value",
                "uVar1": "function_result",
                "PTR_DAT_080004c8": "data_ptr",
                "PTR_DAT_080004cc": "function_flag_ptr",
                "PTR_DAT_080004d0": "function_data_ptr"
            },
            "code": "void set_bit_08000488(uint bit_index, int bit_value) {\n                      if (bit_index < 14) {\n                        uint* PTR_DAT_080004c8 = (uint*) PTR_DAT_080004c8;\n                        uint bit_mask = 1 << (bit_index & 0xff);\n                        if (bit_value == 0) {\n                          *PTR_DAT_080004c8 &= ~bit_mask;\n                        } else {\n                          *PTR_DAT_080004c8 |= bit_mask;\n                          if (*PTR_DAT_080004cc == 0) {\n                            uint function_result = FUN_08008880();\n                            FUN_08002ef2(PTR_DAT_080004d0, bit_index, function_result);\n                          }\n                        }\n                      }\n                    }",
            "called": [
                "FUN_08002ef2",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_data_08003f0c",
                "param_1": "input_data",
                "*(uint *)(DAT_08003f2c + 0xc)": "*data_ptr",
                "current_data": "*data_ptr",
                "masked_data": "masked_data",
                "new_data": "new_data"
            },
            "code": "void update_data_08003f0c(uint input_data) {\n    uint* data_ptr = (uint*)(DAT_08003f2c + 0xc);\n    uint current_data = *(uint *)(DAT_08003f2c + 0xc);\n    uint masked_data = current_data & 0xf8ff;\n    uint new_data = (input_data & 7) << 8 | masked_data | 0x5fa0000;\n    *(uint *)(DAT_08003f2c + 0xc) = new_data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_data_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "do_stuff_and_wait_08008f1c",
                "FUN_08001b48": "perform_initialization",
                "FUN_080022f8": "perform_operation",
                "FUN_08008bf4": "perform_cleanup",
                "DAT_08008f38": "data_flag",
                "do_nothing_08008f0c": "do_nothing"
            },
            "code": "void do_stuff_and_wait_08008f1c(void)\n{\n  do_nothing();\n  perform_initialization();\n  do {\n    do {\n      perform_operation();\n    } while (DAT_08008f38 == 0);\n    perform_cleanup();\n  } while (true);\n}",
            "called": [
                "FUN_080022f8",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "do_stuff_and_wait_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "perform_task_080058ac",
                "param_1": "task_params",
                "param_2": "num_params",
                "puVar1": "task_state",
                "iVar2": "start_time",
                "iVar3": "time_elapsed",
                "uVar4": "task_result",
                "task_state_bits": "DAT_08005a0c",
                "current_task_param": "current_task_param"
            },
            "code": "uint32_t perform_task_080058ac(uint32_t *task_params, uint32_t num_params)\\n\\\n    {\\n\\\n        uint32_t *task_state = DAT_08005a0c;\\n\\\n        uint32_t current_task_param;\\n\\\n        uint32_t task_state_bits;\\n\\\n        uint32_t time_elapsed;\\n\\\n        \\n\\\n        if (((*task_state & 7) < num_params) &&\\n\\\n            (*task_state = *task_state & 0xfffffff8 | num_params, num_params != (*task_state & 7))) {\\n\\\n            return 1;\\n\\\n        }\\n\\\n        \\n\\\n        if ((*task_params & 2) != 0) {\\n\\\n            DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | task_params[2];\\n\\\n        }\\n\\\n        \\n\\\n        if ((*task_params & 1) != 0) {\\n\\\n            current_task_param = task_params[1];\\n\\\n            if (current_task_param == 1) {\\n\\\n                if ((*DAT_08005a10 & 0x20000) == 0) {\\n\\\n                    return 1;\\n\\\n                }\\n\\\n            }\\n\\\n            else if ((current_task_param != 2) && ((*DAT_08005a10 & 2) == 0)) {\\n\\\n                return 1;\\n\\\n            }\\n\\\n            DAT_08005a10[1] = current_task_param | DAT_08005a10[1] & 0xfffffffc;\\n\\\n            uint32_t start_time = FUN_08003760();\\n\\\n            if (task_params[1] == 1) {\\n\\\n                while ((DAT_08005a10[1] & 0xc) != 4) {\\n\\\n                    time_elapsed = FUN_08003760() - start_time;\\n\\\n                    if (time_elapsed > 5000) {\\n\\\n                        return 3;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n            else if (task_params[1] == 2) {\\n\\\n                while ((DAT_08005a10[1] & 0xc) != 8) {\\n\\\n                    time_elapsed = FUN_08003760() - start_time;\\n\\\n                    if (time_elapsed > 5000) {\\n\\\n                        return 3;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n            else {\\n\\\n                while ((DAT_08005a10[1] & 0xc) != 0) {\\n\\\n                    time_elapsed = FUN_08003760() - start_time;\\n\\\n                    if (time_elapsed > 5000) {\\n\\\n                        return 3;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n        \\n\\\n        task_state = DAT_08005a0c;\\n\\\n        if ((num_params < (*DAT_08005a0c & 7)) &&\\n\\\n            (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | num_params, num_params != (*task_state & 7))) {\\n\\\n            return 1;\\n\\\n        }\\n\\\n        \\n\\\n        if ((*task_params & 4) != 0) {\\n\\\n            DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | task_params[3];\\n\\\n        }\\n\\\n        \\n\\\n        if ((*task_params & 8) != 0) {\\n\\\n            DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | task_params[4] << 3;\\n\\\n        }\\n\\\n        uint32_t task_result = FUN_08005840();\\n\\\n        *(uint32_t *)PTR_DAT_08005a18 = task_result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\\n\\\n        FUN_080036d8(0xf);\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "perform_task_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag_index",
                "uVar1": "return_value",
                "DAT_08006c48": "flag_ptr",
                "DAT_08006c4c": "flag_0",
                "DAT_08006c50": "flag_1",
                "DAT_08006c54": "flag_2",
                "DAT_08006c58": "flag_3",
                "DAT_08006c5c": "flag_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag_index) {\n    uint32_t* DAT_08006c48 = (uint32_t*)(DAT_08006c48 + 0x18);\n    switch(flag_index) {\n        case 0:\n            *DAT_08006c48 |= 0x04;\n            return DAT_08006c4c;\n        case 1:\n            *DAT_08006c48 |= 0x08;\n            return DAT_08006c50;\n        case 2:\n            *DAT_08006c48 |= 0x10;\n            return DAT_08006c54;\n        case 3:\n            *DAT_08006c48 |= 0x20;\n            return DAT_08006c58;\n        case 4:\n            *DAT_08006c48 |= 0x40;\n            return DAT_08006c5c;\n        default:\n            return 0;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "update_global_flags_08007438",
                "param_1": "flag_ptr",
                "DAT_080074d0": "GLOBAL_FLAG_1",
                "DAT_080074d4": "GLOBAL_FLAG_2",
                "DAT_080074d8": "GLOBAL_FLAG_3",
                "PTR_DAT_080074dc": "GLOBAL_FLAG_PTR_1",
                "*_DAT_4002101c": "GLOBAL_FLAG_4",
                "PTR_DAT_080074dc + 4": "GLOBAL_FLAG_PTR_4",
                "PTR_DAT_080074dc + 8": "GLOBAL_FLAG_PTR_2",
                "PTR_DAT_080074dc + 0xc": "GLOBAL_FLAG_PTR_3"
            },
            "code": "void update_global_flags_08007438(int *flag_ptr)\n{\n  int flag_value = *flag_ptr;\n  if (flag_value == DAT_080074d0) {\n    *(uint *)(DAT_080074d0 + 0xe418) |= 0x800;\n    *(int **)PTR_DAT_080074dc = flag_ptr;\n  }\n  if (flag_value == DAT_080074d4) {\n    *(uint *)(DAT_080074d4 + 0x20c1c) |= 2;\n    *(int **)PTR_DAT_080074dc + 8 = flag_ptr;\n  }\n  if (flag_value == DAT_080074d8) {\n    *(uint *)(DAT_080074d8 + 0x2081c) |= 4;\n    *(int **)PTR_DAT_080074dc + 0xc = flag_ptr;\n  }\n  if (flag_value == *_DAT_4002101c) {\n    *(uint *)(*_DAT_4002101c + 0x4002101c) |= 1;\n    *(int **)PTR_DAT_080074dc + 4 = flag_ptr;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "update_global_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "process_input_08004aec",
                "param_1": "input",
                "eleven": "eleven",
                "char_ptr": "char_ptr"
            },
            "code": "int process_input_08004aec(uint **input)\n{\n    uint *eleven = input[0xb];\n    char *char_ptr = (char *)input + 0x3d;\n    if ((eleven == (uint *)0x4 || eleven == (uint *)0x8) && (*char_ptr == '('))\n    {\n        eleven = PTR_DAT_08004b7c;\n        (*input)[1] &= 0xfffff8ff;\n        (*input)[5] = 0xfffffbff;\n        **input &= 0xfffffbff;\n        input[0xc] = (uint *)0x0;\n        *char_ptr = 0x20;\n        *(char_ptr + 1) = 0;\n        do_something_08007ff0();\n    }\n    else if (*char_ptr == '!')\n    {\n        eleven = PTR_DAT_08004b7c;\n        input[0xc] = (uint *)0x21;\n        *char_ptr = 0x20;\n        *(char_ptr + 1) = 0;\n        (*input)[1] &= 0xfffff8ff;\n        (*input)[5] = 0xfffffbff;\n        **input &= 0xfffffbff;\n        do_nothing_08004a22();\n    }\n    else\n    {\n        (*input)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "process_input_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "return_one_0800887c"
            },
            "code": "int return_one_0800887c(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "return_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "current_data",
                "local_c": "counter",
                "PTR_DAT_080047e8": "original_ptr",
                "DAT_080047ec": "original_constant",
                "DAT_080047f0": "original_data"
            },
            "code": "uint32_t process_data_08004728(uint32_t **data, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n    uint32_t result;\n    uint32_t *current_data;\n    int counter;\n    \n    if ((*data)[0x3d] == ' ')\n    {\n        counter = (uint32_t)((uint64_t)DAT_080047ec * ((uint64_t)(*(uint32_t *)PTR_DAT_080047e8 >> 3)) >> 0x28) * 0x19;\n        do\n        {\n            if (counter == 0)\n            {\n                (*data)[0xc] = NULL;\n                (*data)[0x3d] = 0x20;\n                (*data)[0xf] = 0;\n                return 3;\n            }\n            current_data = *data;\n            counter--;\n        } while ((current_data[6] & 2) != 0);\n        if ((*data)[0xf] == '\\x01')\n        {\n            result = 2;\n        }\n        else\n        {\n            (*data)[0xf] = 1;\n            if ((*current_data & 1) == 0)\n            {\n                *current_data = *current_data | 1;\n            }\n            **data = **data & 0xfffff7ff;\n            (*data)[0x3d] = 0x21;\n            (*data)[0x3e] = 0x10;\n            result = 0;\n            (*data)[0x10] = NULL;\n            (*data)[9] = param2;\n            (*data)[0xb] = DAT_080047f0;\n            (*data)[10] = param3;\n            (*data)[0x11] = param1;\n            **data = **data | 0x100;\n            (*data)[0xf] = 0;\n            (*data)[1] = (*data)[1] | 0x700;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "process_data_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_address_08007ede",
                "param_1": "dest_address",
                "param_2": "src_address",
                "param_3": "num_bytes_to_copy",
                "uVar1": "bytes_copied"
            },
            "code": "int copy_data_to_address_08007ede(int dest_address, int src_address, uint num_bytes_to_copy)\n{\n  uint bytes_copied = 0;\n  if (num_bytes_to_copy > 0x20) {\n    return 2;\n  }\n  for (uint i = 0; i < num_bytes_to_copy; i++) {\n    *(char *)(dest_address + i + 0x68) = *(char *)(src_address + i);\n    bytes_copied++;\n  }\n  *(char *)(dest_address + 0x88) += bytes_copied;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_address_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "update_data_0800863c",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "param_3": "unknown_param",
                "param_4": "param_4",
                "iVar1": "result",
                "uVar2": "index",
                "char_val": "char_val"
            },
            "code": "void update_data_0800863c(int data_ptr, int new_data, int unknown_param, int param_4)\n{\n  int result = FUN_080085b8();\n  if (data_ptr != 0 && result == 0) {\n    int index = *(byte *)(data_ptr + 0x44);\n    *(int *)(PTR_DAT_0800868c + index * 4) = data_ptr;\n    *(int *)(PTR_DAT_08008688 + index * 4) = new_data;\n    int char_val = *(char *)(data_ptr + 0x5a);\n    FUN_08003f30(char_val, 0, 1, index, param_4);\n    FUN_08003f94(char_val);\n    FUN_080068d6(*(int *)(PTR_DAT_08008690 + index * 4), data_ptr + 0x45, 1);\n  }\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "update_data_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_one_thunk_0800887c"
            },
            "code": "int get_one_thunk_0800887c() {\n  return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "set_flags_080074e0",
                "*param_1": "*flag_value",
                "DAT_08007534": "FLAG_A",
                "DAT_08007540": "FLAG_PTR",
                "0x18": "OFFSET_A",
                "0x1c": "OFFSET_B",
                "0x40000000": "FLAG_B",
                "DAT_08007538": "FLAG_C",
                "DAT_0800753c": "FLAG_D"
            },
            "code": "void set_flags_080074e0(int *flag_value) {\n    if (*flag_value == DAT_08007534) {\n        *(uint *)(DAT_08007540 + 0x18) &= 0xfffff7ff;\n    }\n    if (*flag_value == FLAG_B) {\n        *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffe;\n    }\n    if (*flag_value == DAT_08007538) {\n        *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffd;\n    }\n    if (*flag_value == DAT_0800753c) {\n        *(uint *)(DAT_08007540 + 0x1c) &= 0xfffffffb;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007710",
                "FUN_08007110"
            ],
            "imported": false,
            "current_name": "set_flags_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_080073c0",
                "PTR_DAT_080073d0": "code_ptr_pointer",
                "PTR_DAT_080073d4": "argument_pointer",
                "code": "code_function_pointer"
            },
            "code": "void execute_code_080073c0(void)\n{\n    code* code_ptr = *(code**)PTR_DAT_080073d0;\n    if (code_ptr != NULL)\n    {\n        code_ptr(*(undefined4*)PTR_DAT_080073d4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "update_data_080084b0",
                "cVar1": "data",
                "puVar2": "data_ptr",
                "uVar3": "updated_data",
                "iVar4": "result",
                "uVar5": "searched_data"
            },
            "code": "void update_data_080084b0(void)\n{\n  char data = data_array[1];\n  int result = search_data((int)data, data_array);\n  if (result != 0) {\n    int searched_data = search_data((int)data, data_array);\n    undefined updated_data = update(searched_data, update_array);\n    undefined *data_ptr = data_array;\n    data_array[0x59] = updated_data;\n    data_ptr[0x58] = data;\n    *(undefined4 *)(data_ptr + 0x48) = 0x2580;\n    *(undefined4 *)(data_ptr + 0x54) = 0;\n    *(undefined4 *)(data_ptr + 0x4c) = 0;\n    *(undefined4 *)(data_ptr + 0x50) = 0;\n    process_data(data_ptr);\n  }\n  return;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08008078",
                "FUN_0800734a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "update_data_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "set_flag_and_value_08004050",
                "param_1": "param",
                "puVar2": "pointer_2",
                "uVar1": "value",
                "DAT_080040e0": "PTR_DAT_080040e0",
                "DAT_080040e4": "PTR_DAT_080040e4"
            },
            "code": "uint32_t set_flag_and_value_08004050(uint32_t **param_1)\n{\n    uint32_t value;\n    if (*(char *)((int)param_1 + 0x21) != '\\x02') {\n        param_1[14] = (uint32_t *)0x4;\n        return 1;\n    }\n    **param_1 &= 0xfffffff1;\n    **param_1 &= 0xfffffffe;\n    uint32_t *puVar2 = *param_1;\n    if (puVar2 == DAT_080040e0) {\n        value = 1;\n    }\n    else if (puVar2 == DAT_080040e0 + 5) {\n        value = 0x10;\n    }\n    else if (puVar2 == DAT_080040e0 + 10) {\n        value = 0x100;\n    }\n    else if (puVar2 == DAT_080040e0 + 0xf) {\n        value = 0x1000;\n    }\n    else if (puVar2 == DAT_080040e0 + 0x14) {\n        value = 0x10000;\n    }\n    else if (puVar2 == DAT_080040e0 + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(uint32_t *)(DAT_080040e4 + 4) = value;\n    *(char *)((int)param_1 + 0x21) = 1;\n    *(uint32_t *)(param_1 + 8) = 0;\n    if (param_1[13] != (uint32_t *)0x0) {\n        (*(void (*)())param_1[13])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flag_and_value_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "process_data_08008e14",
                "param_1": "input_1",
                "param_2": "input_2",
                "FUN_08008df8": "execute_function"
            },
            "code": "void process_data_08008e14(int input_1, int input_2) {\n    if ((input_1 == 1) && (input_2 == 0xffff)) {\n        execute_function(PTR_DAT_08008e3c, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "calculate_shifted_value_08005a28",
                "uVar1": "shifted_value",
                "PTR_DAT_08005a44": "shift_array",
                "DAT_08005a40": "data_array"
            },
            "code": "uint calculate_shifted_value_08005a28(void)\n{\n  uint shifted_value = FUN_08005a1c();\n  uint index = (uint)(*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d;\n  uint shifted_result = shifted_value >> PTR_DAT_08005a44[index];\n  return shifted_result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_080045c0",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "calculate_size_080095a8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "input_3",
                "param_5": "callback",
                "iVar1": "result",
                "uVar2": "max_size",
                "uVar3": "loop_end",
                "bVar4": "condition",
                "loop_count": "loop_count",
                "extra_size": "extra_size",
                "loop_index": "loop_index"
            },
            "code": "uint32_t calculate_size_080095a8(uint32_t input_1, uint32_t* input_2, uint32_t* output_1, uint32_t input_3, code* callback)\n{\n  uint32_t max_size = input_2[4];\n  if (max_size < input_2[2]) {\n    max_size = input_2[2];\n  }\n  *output_1 = max_size;\n  if (*(char*)((uint32_t)input_2 + 0x43) != '\\0') {\n    *output_1 = max_size + 1;\n  }\n  if ((int32_t)(*input_2 << 0x1a) < 0) {\n    *output_1 += 2;\n  }\n  uint32_t loop_count = *input_2 & 6;\n  if (loop_count == 0) {\n    for (; loop_count < (input_2[3] - *output_1); loop_count++) {\n      int32_t result = (*callback)(input_1, input_3, (uint32_t)input_2 + 0x19, 1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uint32_t extra_size = (uint32_t)*(byte*)((uint32_t)input_2 + 0x43);\n  if (extra_size != 0) {\n    extra_size = 1;\n  }\n  uint32_t loop_index = extra_size;\n  if ((int32_t)(*input_2 << 0x1a) < 0) {\n    *(undefined*)((uint32_t)input_2 + extra_size + 0x43) = 0x30;\n    loop_index = extra_size + 2;\n    *(undefined*)((uint32_t)input_2 + extra_size + 0x44) = *(undefined*)((uint32_t)input_2 + 0x45);\n  }\n  int32_t result = (*callback)(input_1, input_3, (uint32_t)input_2 + 0x43, loop_index);\n  if (result != -1) {\n    uint32_t size = input_2[3];\n    bool condition = (*input_2 & 6) != 4;\n    if (condition) {\n      size = 0;\n    }\n    uint32_t loop_end = 0;\n    if (!condition) {\n      size -= *output_1;\n    }\n    if (!condition) {\n      size &= ~((int32_t)size >> 0x1f);\n    }\n    if (max_size < input_2[2]) {\n      size += (input_2[2] - input_2[4]);\n    }\n    while (true) {\n      if (loop_end == size) {\n        return 0;\n      }\n      int32_t result = (*callback)(input_1, input_3, (uint32_t)input_2 + 0x1a, 1);\n      if (result == -1) {\n        break;\n      }\n      loop_end++;\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "calculate_size_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "check_and_update_data_08003002",
                "param_1": "data_ptr",
                "FUN_08008990": "update_data",
                "FUN_08002fca": "update_data_with_params",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void check_and_update_data_08003002(int data_ptr)\n{\n  if (*(char *)(data_ptr + 0x1f8) != '\\0') {\n    return;\n  }\n  update_data(0xd, 1);\n  update_data_with_params(data_ptr, 0xd, 2, 0x28, 0xd2);\n  do_nothing(0xfa);\n  update_data_with_params(data_ptr, 0xd, 5, 0x28, 0xd2);\n  do_nothing(0x7d);\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "check_and_update_data_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "check_parameter_08003bd8",
                "param_1": "param_array",
                "iVar1": "index",
                "uVar2": "uVar2",
                "uVar3": "flag_1",
                "DAT_08003ce0": "DAT_08003ce0",
                "DAT_08003ce4": "DAT_08003ce4"
            },
            "code": "int check_parameter_08003bd8(int *param_array)\n{\n  int index = 0;\n  uint32_t bit_mask_1 = 0x100;\n  uint32_t bit_mask_2 = 0x16ff;\n  uint32_t bit_mask_3 = 0xff0fffff;\n  uint32_t data_1 = 0x800;\n  uint32_t data_2 = 0x10;\n  uint32_t data_3 = 0x20;\n  uint32_t data_4 = 0x2;\n  uint32_t data_5 = 0x1;\n  uint32_t data_6 = 0x10;\n\n  if (param_array == NULL) {\n    return 1;\n  }\n\n  if (param_array[10] == 0) {\n    param_array[11] = 0;\n    *(uint8_t *)(param_array + 9) = 0;\n    perform_action();\n  }\n\n  index = get_index(param_array);\n  uint32_t flag_1 = param_array[10] & 0x10;\n\n  if ((flag_1 == 0) && (index == 0)) {\n    param_array[10] = param_array[10] & ~data_6 | data_4;\n    uint32_t uVar2 = param_array[1] | param_array[7] | param_array[3] << 1;\n\n    if (param_array[2] == bit_mask_1 || param_array[2] == 1) {\n      flag_1 = bit_mask_1;\n    }\n\n    if (param_array[5] == 1) {\n      if (param_array[3] == 0) {\n        flag_1 |= (param_array[6] + -1) * 0x2000 | data_1;\n      }\n      else {\n        param_array[10] |= data_3;\n        param_array[11] |= data_5;\n      }\n    }\n\n    *(uint32_t *)(*param_array + 4) = flag_1 | *(uint32_t *)(*param_array + 4) & bit_mask_2;\n    *(uint32_t *)(*param_array + 8) = DAT_08003ce0 & *(uint32_t *)(*param_array + 8) | uVar2;\n\n    if ((param_array[2] == bit_mask_1) || (param_array[2] == 1)) {\n      flag_1 = (param_array[4] + -1) * 0x100000;\n    }\n    else {\n      flag_1 = 0;\n    }\n\n    *(uint32_t *)(*param_array + 44) = flag_1 | *(uint32_t *)(*param_array + 44) & bit_mask_3;\n\n    if (uVar2 != (DAT_08003ce4 & *(uint32_t *)(*param_array + 8))) {\n      param_array[10] = param_array[10] & ~data_2 | data_6;\n      param_array[11] |= data_5;\n      return 1;\n    }\n\n    param_array[11] = 0;\n    param_array[10] = param_array[10] & ~data_4 | data_5;\n    return 0;\n  }\n\n  param_array[10] = param_array[10] | data_2;\n  return 1;\n}",
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_parameter_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data_address",
                "iVar2": "ptr_data",
                "bVar3": "is_current_data",
                "uVar1": "result",
                "PTR_PTR_DAT_08009da8": "PTR_PTR_DATA_08009da8",
                "PTR_LAB_08009cd0_1_08009dac": "PTR_LABEL_08009cd0_1_08009dac"
            },
            "code": "void initialize_data_08009d50(int data_address)\n{\n    if (*(int *)(data_address + 0x18) == 0) {\n        int is_initialized = 0;\n        int ptr_data = *(int *)PTR_PTR_DAT_08009da8;\n        bool is_current_data = data_address == ptr_data;\n        if (is_current_data) {\n            is_initialized = 1;\n        }\n        *(int *)(data_address + 0x18) = is_initialized;\n        *(int *)(data_address + 0x48) = 0;\n        *(int *)(data_address + 0x4c) = 0;\n        *(int *)(data_address + 0x50) = 0;\n        *(void **)(data_address + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n        *(int *)(data_address + 4) = FUN_08009db0();\n        *(int *)(data_address + 8) = FUN_08009db0(data_address);\n        *(int *)(data_address + 0xc) = FUN_08009db0(data_address);\n        FUN_08009cdc(*(int *)(data_address + 4), 4, 0);\n        FUN_08009cdc(*(int *)(data_address + 8), 9, 1);\n        FUN_08009cdc(*(int *)(data_address + 0xc), 0x12, 2);\n        *(int *)(data_address + 0x18) = 1;\n    }\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800937c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_data_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_values_if_param2_is_113_08003366",
                "param_1": "struct_address",
                "param_2": "param2_value",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_if_param2_is_113_08003366(int struct_address, int param2_value, undefined4 value1, undefined4 value2) {\n  if (param2_value == 0x71) {\n    *(undefined4 *)(struct_address + 0x68) = value1;\n    *(undefined4 *)(struct_address + 0x40) = value2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_if_param2_is_113_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_string_080091b0",
                "param_1": "destination_length",
                "param_2": "destination_string",
                "param_3": "source_string",
                "puVar1": "destination_current_char",
                "puVar2": "source_current_char"
            },
            "code": "void copy_string_080091b0(int destination_length, char *destination_string, char *source_string)\\n\\\n{\\n\\\n  char *destination_current_char;\\n\\\n  char *source_current_char;\\n\\\n  destination_current_char = (char *)(destination_length + -1);\\n\\\n  source_current_char = source_string + strlen(source_string);\\n\\\n  for (; source_string != source_current_char; source_string = source_string + 1) {\\n\\\n    destination_current_char = destination_current_char + 1;\\n\\\n    *destination_current_char = *source_string;\\n\\\n  }\\n\\\n  return;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "copy_string_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "check_and_shift_08009108",
                "param_1": "value",
                "param_2": "shift_amount"
            },
            "code": "longlong check_and_shift_08009108(uint32_t value, uint64_t shift_amount) {\n  if (DAT_08009120 != 0) {\n    return CONCAT44(value, 2);\n  }\n  return (uint64_t)value << shift_amount;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "check_and_shift_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "update_flags_and_call_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr",
                "FUN_08009b5c": "call_other_function"
            },
            "code": "void update_flags_and_call_0800a18c(void)\n{\n    code *jump_table_ptr;\n    jump_table_ptr = update_flags_and_call_0800a18c;\n    call_other_function();\n\n    if (*(int *)PTR_DAT_0800a228 < 0) {\n        *(undefined4 *)PTR_DAT_0800a228 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a22c < 0) {\n        *(undefined4 *)PTR_DAT_0800a22c = 1;\n    }\n    if (*(int *)PTR_DAT_0800a230 < 0) {\n        *(undefined4 *)PTR_DAT_0800a230 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a234 < 0) {\n        *(undefined4 *)PTR_DAT_0800a234 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a238 < 0) {\n        *(undefined4 *)PTR_DAT_0800a238 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a23c < 0) {\n        *(undefined4 *)PTR_DAT_0800a23c = 1;\n    }\n    if (*(int *)PTR_DAT_0800a240 < 0) {\n        *(undefined4 *)PTR_DAT_0800a240 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a244 < 0) {\n        *(undefined4 *)PTR_DAT_0800a244 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a248 < 0) {\n        *(undefined4 *)PTR_DAT_0800a248 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a24c < 0) {\n        *(undefined4 *)PTR_DAT_0800a24c = 1;\n    }\n    if (*(int *)PTR_DAT_0800a250 < 0) {\n        *(undefined4 *)PTR_DAT_0800a250 = 1;\n    }\n    if (*(int *)PTR_DAT_0800a254 < 0) {\n        *(undefined4 *)PTR_DAT_0800a254 = 1;\n    }\n    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n    /* WARNING: Treating indirect jump as call */\n    (*jump_table_ptr)();\n    return;\n}",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "update_flags_and_call_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "calculate_result_08009908",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "var1",
                "uVar2": "result",
                "uVar3": "var2",
                "FUN_080091d8": "handle_error",
                "FUN_0800a154": "calculate_var2",
                "FUN_08009270": "calculate_var3",
                "PTR_PTR_DAT_08009914": "PTR_PTR_DAT_08009914"
            },
            "code": "uint calculate_result_08009908(uint num1, uint num2)\n{\n  undefined4 var1 = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (num1 != 0)\n  {\n    if (num2 == 0)\n    {\n      handle_error();\n      result = num2;\n    }\n    else\n    {\n      uint var2 = calculate_var2();\n      result = num1;\n      if ((var2 < num2) && (result = calculate_var3(var1, num2), result != 0))\n      {\n        perform_operation(result, num1, num2);\n        handle_error(var1, num1);\n      }\n    }\n    return result;\n  }\n  result = calculate_var3(var1, num2, num2, PTR_PTR_DAT_08009914);\n  return result;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_0800a154"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "calculate_result_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "process_data_08008a24",
                "param_1": "index",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "buffer",
                "iVar1": "result",
                "uVar2": "processed_data",
                "uVar4": "data",
                "puVar3": "data_ptr"
            },
            "code": "void process_data_08008a24(uint index, undefined4 arg1, undefined4 arg2, undefined* buffer)\n{\n  int result;\n  uint data;\n  undefined* data_ptr;\n  if (index < 0x3c) {\n    data = (uint)(char)PTR_DAT_08008a64[index];\n    data_ptr = PTR_DAT_08008a64;\n  }\n  else {\n    data = 0xffffffff;\n    data_ptr = buffer;\n  }\n  if ((data != 0xffffffff) && (result = process_data_08008a24_helper(data, PTR_DAT_08008a68, arg2, data_ptr, buffer), result != 0)) {\n    uint processed_data = process_data_08008a24_helper_2((data << 0x18) >> 0x1c);\n    set_bit(processed_data, 1 << (data & 0xf) & 0xffff, arg1);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_08002fca",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "initialize_system_08008abc",
                "FUN_0800723c": "initialize_components"
            },
            "code": "void initialize_system_08008abc(void)\n{\n  initialize_components();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "initialize_system_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "reverse_byte_order_and_send_to_function_08002b68",
                "param_1": "buffer",
                "param_2": "buffer_len",
                "param_3": "value",
                "param_4": "value_len",
                "param_5": "byte_order",
                "iVar1": "success",
                "uVar2": "byte_order_value",
                "uVar3": "value_len_copy",
                "PTR_DAT_08002bf4": "data_pointer",
                "PTR_DAT_08002bf8": "data_pointer_2",
                "PTR_DAT_08002bfc": "data_pointer_3"
            },
            "code": "int reverse_byte_order_and_send_to_function_08002b68(uint32_t* buffer, uint32_t buffer_len, uint32_t value, uint32_t value_len, uint8_t byte_order)\\n{\\n    int success = 0;\\n    uint8_t num_bytes = (uint8_t) value_len;\\n    if (*(char *)((int)buffer + 0x11) != \"\\0\") {\\n        if (*(int *)PTR_DAT_08002bf4 != 0) {\\n            if (byte_order != 0) {\\n                reverse_byte_order(buffer, buffer_len, value, value_len);\\n                if (num_bytes > 3) {\\n                    num_bytes = 3;\\n                }\\n                for (int i = num_bytes - 1; i >= 0; i--) {\\n                    (**(code **)*buffer)(buffer, value >> (i * 8) & 0xff);\\n                }\\n                send_end_of_data(buffer, 0);\\n            }\\n            success = send_data_to_function(buffer + 5, (buffer_len & 0x7f) << 1, *(uint32_t *)PTR_DAT_08002bf4, value, value_len);\\n            if (success != 0) {\\n                value = 0;\\n            }\\n            *PTR_DAT_08002bf8 = 0;\\n            *PTR_DAT_08002bfc = (char)value;\\n        }\\n        else {\\n            buffer[1] = 1;\\n        }\\n    }\\n    return success;\\n}",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a58",
                "FUN_08002a30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "reverse_byte_order_and_send_to_function_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "initializeMemory_080005e0",
                "*PTR_DAT_080005f0": "*memoryPointer1",
                "*PTR_DAT_080005f4": "*memoryPointer2"
            },
            "code": "void initializeMemory_080005e0(void)\n{\n    *PTR_DAT_080005f0 = 0;\n    *PTR_DAT_080005f4 = 255;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "initializeMemory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_call_function_08008020",
                "param_1": "input_param",
                "iVar1": "function_result",
                "FUN_08007f78": "get_function_result",
                "*(char *)(iVar1 + 0x5d)": "result_char",
                "FUN_080049e0": "call_function"
            },
            "code": "void check_and_call_function_08008020(undefined4 input_param)\\n{\\n    int function_result = get_function_result();\\n    if (*(char *)(function_result + 0x5d) == \"\\0\") {\\n        call_function(input_param);\\n    }\\n    return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_params_08005dac",
                "param_1": "param_address",
                "param_2": "new_params",
                "uVar1": "old_param1",
                "iVar2": "old_param2",
                "iVar3": "old_param3",
                "*(uint *)(param_1 + 0x20)": "*(uint *)(param_address + 0x20)",
                "*(uint *)(param_1 + 4)": "*(uint *)(param_address + 0x4)",
                "param_1 == DAT_08005df0": "param_address == DAT_08005df0",
                "*(uint *)(param_1 + 4) = uVar1": "*(uint *)(param_address + 0x4) = old_param1",
                "*(uint *)(param_1 + 0x1c)": "*(uint *)(param_address + 0x1c)",
                "*(int *)(param_1 + 0x40)": "*(int *)(param_address + 0x40)"
            },
            "code": "void update_params_08005dac(int param_address, int *new_params)\n{\n    uint old_param1 = *(uint *)(param_address + 0x4);\n    int old_param2 = *new_params;\n    int old_param3 = new_params[2];\n    \n    *(uint *)(param_address + 0x4) = (old_param1 & 0xffffbfff) | (new_params[5] << 6);\n    *(uint *)(param_address + 0x1c) = (old_param1 & 0xffff8cff) | (old_param2 << 8);\n    *(int *)(param_address + 0x40) = new_params[1];\n    *(uint *)(param_address + 0x20) = (old_param1 & 0xffffdfff) | (old_param3 << 0xc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_params_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "set_flags_and_values_0800674e",
                "param_1": "param_array",
                "flag": "flag",
                "do_nothing_0800674c": "do_nothing",
                "undefined": "void",
                "uint": "unsigned int",
                "*param_1": "*param_array",
                "0x0": "NULL",
                "(int)param_1 + 0x39": "flag_ptr",
                "0x39": "flag_offset",
                "0xe": "value_offset",
                "0x24": "new_flag_value",
                "0xc": "flags_offset",
                "0x10": "other_flags_offset",
                "0x14": "more_flags_offset",
                "0x20": "some_value",
                "0xf": "another_value"
            },
            "code": "int set_flags_and_values_0800674e(int *param_array) {\n    if (param_array != NULL) {\n        int flag = *(char *)(param_array + 0x39);\n        if (flag == 0) {\n            *(undefined *)(param_array + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)(param_array + 0x39) = 0x24;\n        *(uint *)(*param_array + 0xc) &= 0xffffdfff;\n        FUN_08006538(param_array);\n        *(uint *)(*param_array + 0x10) &= 0xffffb7ff;\n        *(uint *)(*param_array + 0x14) &= 0xffffffd5;\n        *(uint *)(*param_array + 0xc) |= 0x2000;\n        param_array[0xf] = 0;\n        *(undefined *)(param_array + 0x39) = 0x20;\n        *(undefined *)(param_array + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_command_if_allowed_0800771c",
                "param_1": "user_input",
                "iVar1": "command_ptr",
                "FUN_08007718": "get_command_pointer"
            },
            "code": "void execute_command_if_allowed_0800771c(int user_input) {\n  int command_ptr;\n  command_ptr = get_command_pointer();\n  if ((*(code **)(command_ptr + 0x4c) != (code *)0x0) && (*(char *)(user_input + 0x1c) == '\\x01')) {\n    (**(code **)(command_ptr + 0x4c))(command_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_command_if_allowed_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "ptr_param_array",
                "param_2": "param_mask",
                "param_3": "expected_value",
                "param_4": "param_int",
                "param_5": "max_param_int_diff",
                "iVar1": "diff"
            },
            "code": "uint32_t check_parameters_080066e8(uint32_t **ptr_param_array, uint32_t param_mask, bool expected_value, int32_t param_int, uint32_t max_param_int_diff)\n{\n    int32_t diff;\n    do {\n        bool condition = ((param_mask & ~(**ptr_param_array)) == 0) != expected_value;\n        if (condition) {\n            return 0;\n        }\n    } while ((max_param_int_diff == UINT32_MAX) || ((max_param_int_diff != 0) && ((diff = FUN_08003760(), (uint32_t)(diff - param_int) <= max_param_int_diff))));\n    (*ptr_param_array)[3] &= 0xfffffe5f;\n    (*ptr_param_array)[5] &= 0xfffffffe;\n    *((uint8_t *)(*ptr_param_array) + 0x39) = 0x20;\n    *((uint8_t *)(*ptr_param_array) + 0x3a) = 0x20;\n    *((uint32_t *)(ptr_param_array + 0xe)) = 0;\n    return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_parameters_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "data_len",
                "puVar2": "data_end",
                "iVar3": "index",
                "iVar1": "result",
                "FUN_0800932c": "process_byte"
            },
            "code": "int process_data_08009358(undefined4 arg1, undefined4 arg2, undefined* data, int data_len) {\n  int index = 0;\n  undefined* data_end = data + data_len;\n  do {\n    if (data == data_end) {\n      return 0;\n    }\n    int result = process_byte(arg1, *data, arg2, data_len, index);\n    index = result + 1;\n    data++;\n  } while (index != 0);\n  return result;\n}",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_data_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_between_two_pointers_0800270c",
                "PTR_DAT_08002718": "pointer_to_first_value",
                "PTR_DAT_0800271c": "pointer_to_second_value"
            },
            "code": "int calculate_difference_between_two_pointers_0800270c(void)\n{\n  uint8_t first_value = *PTR_DAT_08002718;\n  uint8_t second_value = *PTR_DAT_0800271c;\n  return (uint)first_value - (uint)second_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_between_two_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_params_08003370",
                "param_1": "obj",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3"
            },
            "code": "void set_params_08003370(int obj, int param1, int param2, int param3)\n{\n  *(int *)(obj + 0x6c) = param2;\n  *(int *)(obj + 0x44) = param3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_params_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "param_1": "input_buffer",
                "param_2": "is_file",
                "param_3": "input_length",
                "param_4": "unknown_param",
                "iVar1": "process_id",
                "FUN_08007f78": "get_process_id",
                "*(int *)(param_1 + 0xc)": "*(int *)(input_buffer + 0xc)",
                "*(undefined *)(iVar1 + 0x88)": "*(undefined *)(process_id + 0x88)",
                "*(undefined *)(iVar1 + 0x5c)": "*(undefined *)(process_id + 0x5c)",
                "*(code **)(iVar1 + 100)": "*(code **)(process_id + 100)",
                "(code *)0x0": "(code *)0",
                "FUN_080048c8": "process_output",
                "iVar1 + 0x68": "process_id + 0x68"
            },
            "code": "void process_input_08007fa0(int input_buffer, int is_file, int input_length, int unknown_param)\n{\n  int process_id;\n  process_id = get_process_id();\n  if (input_length == *(int *)(input_buffer + 0xc)) {\n    if (is_file == 0) {\n      *(undefined *)(process_id + 0x88) = 0;\n      *(undefined *)(process_id + 0x5c) = 0;\n      if (*(code **)(process_id + 100) != (code *)0x0) {\n        (**(code **)(process_id + 100))();\n      }\n      process_output(input_buffer, process_id + 0x68, *(undefined *)(process_id + 0x88), 8);\n      return;\n    }\n    *(undefined *)(process_id + 0x5c) = 1;\n    process_output(input_buffer, process_id + 0x68, 0x20, 8, unknown_param);\n  }\n  return;\n}",
            "called": [
                "FUN_080048c8",
                "FUN_08007f78",
                "FUN_08004954"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "process_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "process_data_08003376",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "length",
                "bVar1": "data_processed"
            },
            "code": "void process_data_08003376(char *buffer, char data, uint32_t length){\n    bool data_processed = false;\n    \n    if (length >= *(uint32_t *)(buffer + 8)) {\n        if (*(code **)(buffer + 100) != (code *)0x0) {\n            *buffer = 1;\n            (**(code **)(buffer + 100))(*(uint32_t *)(buffer + 0x3c));\n            if (length >= *(uint32_t *)(buffer + 8)) {\n                data_processed = true;\n            }\n        }\n    } else {\n        *(char *)(*(int *)(buffer + 4) + length) = data;\n        data_processed = true;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_data_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "check_data_08008bf4",
                "DAT_08008c18": "data_available",
                "PTR_DAT_08008c1c": "data_ptr",
                "FUN_08008afa": "process_data"
            },
            "code": "void check_data_08008bf4(void)\n{\n  if (DAT_08008c18 != 0) {\n    process_data(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "check_data_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "base_address",
                "PTR_": "",
                "DAT_": "",
                "offset": "offset",
                "value_pointer": "value_pointer"
            },
            "code": "int get_value_at_offset_08005430(int base_address) {\n    int offset = 0x40;\n    int* value_pointer = (int*)(base_address + offset);\n    return *value_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "read_byte_from_array_08002720",
                "PTR_DAT_08002740": "array_index_ptr",
                "PTR_DAT_08002744": "array_size_ptr",
                "PTR_DAT_08002748": "array_ptr",
                "bVar1": "index",
                "bVar2": "value"
            },
            "code": "uint read_byte_from_array_08002720(void)\n{\n  uint index = *PTR_DAT_08002740;\n  if (index < (uint)*PTR_DAT_08002744) {\n    uint value = *(uint *)(*(int *)PTR_DAT_08002748 + index);\n    *PTR_DAT_08002740 = index + 1;\n    return value;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "read_byte_from_array_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "execute_function_if_exists_080031ce",
                "param_1": "function_pointer",
                "param_2": "function_arg_1",
                "param_3": "function_arg_2",
                "param_4": "function_arg_3",
                "param_5": "array_size",
                "puVar1": "function",
                "uVar2": "i"
            },
            "code": "void execute_function_if_exists_080031ce(int *function_pointer, int function_arg_1, int function_arg_2, uint function_arg_3, int array_size)\n{\n  int *function = (int *)*function_pointer;\n  if (function != (int *)0x0) {\n    (**(void (**)(int *, int, int, void *, uint))(function))(function, 0xf0, function_arg_2, *(void **)*function, function_arg_3);\n    (***(void (***)(int *))(int *)*function_pointer)((int *)*function_pointer, 0x79);\n    (***(void (***)(int *))(int *)*function_pointer)((int *)*function_pointer, function_arg_1);\n    (***(void (***)(int *))(int *)*function_pointer)((int *)*function_pointer, function_arg_2);\n    for (uint i = 0; i < function_arg_3; i++) {\n      execute_function_if_exists_080031ce(function_pointer, 1, array_size + i, 0);\n    }\n    (***(void (***)(int *))(int *)*function_pointer)((int *)*function_pointer, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "execute_function_if_exists_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "validate_and_set_value_08009918",
                "param_1": "value_to_set",
                "param_2": "value_to_validate",
                "puVar1": "data_pointer",
                "iVar2": "validation_result"
            },
            "code": "void validate_and_set_value_08009918(int* value_to_set, undefined4 value_to_validate) {\n    undefined* data_pointer = PTR_DAT_08009934;\n    *(undefined4*)PTR_DAT_08009934 = 0;\n    int validation_result = validate(value_to_validate);\n    if ((validation_result == -1) && (*(int*)data_pointer != 0)) {\n        *value_to_set = *(int*)data_pointer;\n    }\n    return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "validate_and_set_value_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "count_down_08005434",
                "param_1": "num",
                "local_4": "countdown",
                "bVar1": "check_countdown",
                "DAT_0800545c": "multiplier_constant",
                "PTR_DAT_08005458": "multiplier_ptr"
            },
            "code": "void count_down_08005434(int num){\n  uint64_t multiplier = (uint64_t)DAT_0800545c * (uint64_t)*(uint *)PTR_DAT_08005458 >> 0x29;\n  int countdown = num * multiplier;\n  do {\n    countdown--;\n  } while (countdown > 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_data_08005e2e",
                "param_1": "data",
                "puVar1": "data_ptr",
                "DAT_0805f4e0": "FLAG_1",
                "DAT_0805f4e4": "FLAG_2"
            },
            "code": "void update_data_08005e2e(uint **data)\n{\n    uint *data_ptr;\n    const uint DAT_0805f4e0 = 0x1111;\n    const uint DAT_0805f4e4 = 0x444;\n\n    // Set a flag to 2\n    *(undefined *)((int)data + 0x3d) = 2;\n\n    // Check if DAT_0805f4e0 and DAT_0805f4e4 are not set in data[8]\n    data_ptr = *data;\n    if ((data_ptr[8] & DAT_0805f4e0) == 0) {\n        if ((data_ptr[8] & DAT_0805f4e4) == 0) {\n            // Clear the least significant bit of data[0]\n            *data_ptr = *data_ptr & 0xfffffffe;\n        }\n    }\n\n    // Call another function\n    update_metadata(data);\n\n    // Reset the flag and metadata\n    *(undefined *)((int)data + 0x3d) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_data_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "iVar1": "function_address",
                "FUN_08007718": "get_function_address",
                "FUNCTION_POINTER_OFFSET": "0x48"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int function_address = get_function_address();\n  if (*(code **)(function_address + FUNCTION_POINTER_OFFSET) != (code *)0x0) {\n    (**(code **)(function_address + FUNCTION_POINTER_OFFSET))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_data_08002968",
                "param_1": "data_address",
                "param_2": "data_value",
                "iVar1": "shifted_value",
                "iVar2": "data_address_offset"
            },
            "code": "void initialize_data_08002968(int data_address, uint data_value)\n{\n    int variable1;\n    int variable2;\n    *PTR_DAT_080029ec = 0;\n    *PTR_DAT_080029f0 = 0;\n    if (*(int *)PTR_DAT_080029f4 != 0)\n    {\n        FUN_080091c6(*(int *)PTR_DAT_080029f4, 0, *PTR_DAT_080029f8);\n    }\n    *PTR_DAT_080029fc = 0;\n    *PTR_DAT_08002a00 = 0;\n    if (*(int *)PTR_DAT_08002a04 != 0)\n    {\n        FUN_080091c6(*(int *)PTR_DAT_08002a04, 0, *PTR_DAT_08002a08);\n    }\n    *PTR_DAT_08002a0c = 0;\n    variable1 = (data_value & 0x7f) << 1;\n    *(char *)(data_address + 0x10) = (char)variable1;\n    if (data_value == 0x33)\n    {\n        *(undefined *)(data_address + 0x11) = 1;\n    }\n    else\n    {\n        *(undefined *)(data_address + 0x11) = 0;\n    }\n    variable2 = data_address + 0x14;\n    FUNC_080077b0(variable2, DAT_08002a10, 0x4000, variable1, *(undefined *)(data_address + 0x11));\n    if (*(char *)(data_address + 0x11) == '\\0')\n    {\n        FUN_08007f8e(variable2, PTR_LAB_08002774_1_08002a14);\n        FUN_08007f7c(variable2, PTR_LAB_08002b00_1_08002a18);\n    }\n    return;\n}",
            "called": [
                "FUN_08007f7c",
                "FUN_08007f8e",
                "FUN_080077b0",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_data_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_command_08004ccc",
                "param_1": "command_buffer",
                "puVar1": "command_word",
                "DAT_08004d3c": "0x3D",
                "DAT_08004d40": "0x20",
                "DAT_08004d44": "0x3E"
            },
            "code": "uint32_t process_command_08004ccc(uint32_t **command_buffer) {\n  uint32_t *command_word = command_buffer[0xB];\n  if (*(char *)((int)command_buffer + DAT_08004d3c) == '!') {\n    if (*(int16_t *)((int)command_buffer + 0x2A) == 0) {\n      if (((command_word == (uint32_t *)0x4) || (command_word == (uint32_t *)0x8)) || (command_word == (uint32_t *)0xFFFF0000)) {\n        (*command_buffer)[1] = (*command_buffer)[1] & 0xFFFFF8FF;\n        **command_buffer = **command_buffer | DAT_08004d400;\n        command_buffer[0xC] = (uint32_t *)0x0;\n        *(char *)((int)command_buffer + DAT_08004d3c) = DAT_08004d40;\n        if (*(char *)((int)command_buffer + DAT_08004d44) == '@') {\n          *(char *)((int)command_buffer + DAT_08004d44) = 0;\n          do_nothing_08004b80();\n        }\n        else {\n          *(char *)((int)command_buffer + DAT_08004d44) = 0;\n          do_nothing_08004a1e();\n        }\n      }\n      else {\n        (*command_buffer)[1] = (*command_buffer)[1] & 0xFFFFF8FF;\n        command_buffer[0xC] = (uint32_t *)0x11;\n        *(char *)((int)command_buffer + DAT_08004d44) = 0;\n        *(char *)((int)command_buffer + DAT_08004d3c) = DAT_08004d40;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      command_word = command_buffer[9];\n      command_buffer[9] = (uint32_t *)((int)command_word + 1);\n      (*command_buffer)[4] = (uint32_t)*(char *)command_word;\n      *(int16_t *)((int)command_buffer + 0x2A) = *(int16_t *)((int)command_buffer + 0x2A) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_command_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "is_param2_bit_set_at_offset8_080042d4",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int is_param2_bit_set_at_offset8_080042d4(int PTR_param1, uint param2)\n{\n  uint* PTR_offset8 = (uint*)(PTR_param1 + 8);\n  if ((param2 & *PTR_offset8) == 0)\n  {\n    return 0;\n  }\n  else\n  {\n    return 1;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_at_offset8_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_byte_at_offset_0800542a",
                "param_1": "offset"
            },
            "code": "unsigned char get_byte_at_offset_0800542a(unsigned char* buffer, int offset) {\n    return *(unsigned char*)(buffer + offset);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_byte_at_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_in_memory_0800457c",
                "param_1": "memory",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "uint_ptr": "uint_ptr"
            },
            "code": "int increment_byte_in_memory_0800457c(int *memory) {\n  short *short_ptr = (short *)((int)memory + 0x2a);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)memory[9];\n    memory[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*memory + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_in_memory_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "fill_array_with_value_080091c6",
                "param_1": "array",
                "param_2": "value",
                "param_3": "array_length",
                "puVar1": "end_of_array",
                "*param_1": "*array"
            },
            "code": "void fill_array_with_value_080091c6(char *array, char value, int array_length) {\n  char *end_of_array = array + array_length;\n  for (; array != end_of_array; array++) {\n    *array = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08009cdc",
                "FUN_08009d24",
                "FUN_08007118",
                "FUN_08002a58",
                "FUN_08002968",
                "FUN_08006d80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "fill_array_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "check_and_update_value_0800a07a",
                "param_1": "buffer",
                "param_2": "offset",
                "iVar1": "value",
                "uVar2": "flag",
                "bVar3": "is_error"
            },
            "code": "void check_and_update_value_0800a07a(undefined4 buffer, int offset)\n{\n    int value = get_new_value(buffer, (int)*(short *)(offset + 0xe));\n    bool is_error = value == -1;\n    ushort flag = *(ushort *)(offset + 0xc);\n    if (is_error) {\n        flag &= 0xefff;\n    } else {\n        *(int *)(offset + 0x54) = value;\n        flag |= 0x1000;\n    }\n    *(ushort *)(offset + 0xc) = flag;\n}",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_value_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "set_flag_if_not_set_08003a20",
                "param_1": "data",
                "param_2": "flag",
                "iVar1": "current_data",
                "uVar2": "result",
                "iVar3": "current_data",
                "local_14": "i",
                "DAT_08003a9c": "constant_1",
                "PTR_DAT_08003a98": "constant_2"
            },
            "code": "int set_flag_if_not_set_08003a20(int *data, uint32_t flag)\n{\n  int current_data = *data;\n  if ((*(uint32_t *)(current_data + 8) & 1) == 0) {\n    *(uint32_t *)(current_data + 8) |= 1;\n    for (uint32_t i = (uint32_t)((uint64_t)DAT_08003a9c * (uint64_t)*(uint32_t *)PTR_DAT_08003a98 >> 0x32); i != 0; i--) {\n    }\n    int initial_data = FUN_08003760(data, flag, (int)((uint64_t)DAT_08003a9c * (uint64_t)*(uint32_t *)PTR_DAT_08003a98));\n    do {\n      if ((*(uint32_t *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      current_data = FUN_08003760();\n    } while ((uint32_t)(current_data - initial_data) < 3);\n    data[10] |= 0x10;\n    data[0xb] |= 1;\n    *(undefined *)(data + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003aa0",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "clear_flags_080064b0",
                "*param_1": "flag_ptr",
                "*(uint *)(*param_1 + 0xc)": "flag_c",
                "*(uint *)(*param_1 + 0x14)": "flag_14",
                "*(undefined *)((int)param_1 + 0x3a)": "flag_3a"
            },
            "code": "void clear_flags_080064b0(int *flag_ptr)\n{\n    uint *flag_c = (uint *)(*flag_ptr + 0xc);\n    uint *flag_14 = (uint *)(*flag_ptr + 0x14);\n    *flag_c &= 0xfffffedf;\n    *flag_14 &= 0xfffffffe;\n    undefined *flag_3a = (undefined *)((int)flag_ptr + 0x3a);\n    *flag_3a = 0x20;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "clear_flags_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initializeDataStructure_08009cdc",
                "param_1": "dataStructure",
                "param_2": "initialParam1",
                "param_3": "initialParam2",
                "uVar1": "temporaryVariable",
                "DAT_08009d14": "DAT_08009d14",
                "PTR_FUN_0800a042_1_08009d18": "PTR_FUN_0800a042_1_08009d18",
                "PTR_FUN_0800a07a_1_08009d1c": "PTR_FUN_0800a07a_1_08009d1c",
                "PTR_LAB_0800a09e_1_08009d20": "PTR_LAB_0800a09e_1_08009d20"
            },
            "code": "void initializeDataStructure_08009cdc(undefined4 *dataStructure, undefined2 initialParam1, undefined2 initialParam2) {\n    *dataStructure = 0;\n    dataStructure[1] = 0;\n    dataStructure[2] = 0;\n    *(undefined2 *)(dataStructure + 3) = initialParam1;\n    dataStructure[0x19] = 0;\n    *(undefined2 *)((int)dataStructure + 0xe) = initialParam2;\n    dataStructure[4] = 0;\n    dataStructure[5] = 0;\n    dataStructure[6] = 0;\n    initializeArray(dataStructure + 0x17, 0, 8);\n    dataStructure[8] = dataStructure;\n    dataStructure[9] = DAT_08009d14;\n    dataStructure[10] = PTR_FUN_0800a042_1_08009d18;\n    dataStructure[0xb] = PTR_FUN_0800a07a_1_08009d1c;\n    dataStructure[0xc] = PTR_LAB_0800a09e_1_08009d20;\n    return;\n}\n",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initializeDataStructure_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "check_string_08002a58",
                "param_1": "str_ptr",
                "iVar1": "string_compare_result",
                "uVar2": "result",
                "PTR_DAT_08002ab0": "string_to_compare",
                "PTR_DAT_08002aac": "sub_result_ptr",
                "PTR_DAT_08002aa8": "int_ptr_1",
                "PTR_DAT_08002ab4": "int_ptr_2",
                "PTR_DAT_08002ab8": "int_ptr_3",
                "PTR_DAT_08002abc": "int_ptr_4"
            },
            "code": "int check_string_08002a58(int str_ptr) {\n    int result;\n    if (*(char *)(str_ptr + 0x11) == '\\0') {\n        result = 4;\n    }\n    else {\n        int string_compare_result = strcmp(str_ptr + 0x14, PTR_DAT_08002ab0);\n        if (string_compare_result == 0) {\n            result = 0;\n        }\n        else if (string_compare_result == 1) {\n            result = 1;\n        }\n        else {\n            result = 4;\n        }\n        if (*(int *)PTR_DAT_08002aac != 0) {\n            int sub_result = FUN_080091c6(*(int *)PTR_DAT_08002aac, 0, *PTR_DAT_08002ab4);\n        }\n        *PTR_DAT_08002ab8 = 0;\n        *PTR_DAT_08002aa8 = 0;\n        *PTR_DAT_08002abc = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_string_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "limit_and_transform_080026b0",
                "param_1": "x_pos",
                "param_2": "y_pos",
                "FUN_08008ef4": "transform",
                "FUN_0800267c": "apply_transform"
            },
            "code": "void limit_and_transform_080026b0(int x_pos, int y_pos)\n{\n    if (y_pos < 544)\n    {\n        if (y_pos < 0)\n        {\n            y_pos = 0;\n        }\n        else if (y_pos > 180)\n        {\n            y_pos = 180;\n        }\n        y_pos = transform(y_pos, 0, 180, (136 - *(char *)(x_pos + 1)) * 4, (600 - *(char *)(x_pos + 2)) * 4);\n    }\n    apply_transform(x_pos, y_pos);\n    return;\n}",
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "limit_and_transform_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "validate_data_entry_08006092",
                "param_1": "data_entry_ptr",
                "*(char *)((int)param_1 + 0x3d)": "data_entry_ptr[61]",
                "*(undefined *)(param_1 + 0xf)": "data_entry_ptr[15]",
                "FUNC_08006e68": "execute_data_validation",
                "*(undefined *)((int)param_1 + 0x3d)": "data_entry_ptr[61]",
                "FUN_08005fe8": "process_data_entry"
            },
            "code": "int validate_data_entry_08006092(int *data_entry_ptr)\\n\\\n{\\n\\\n  if (data_entry_ptr != NULL) {\\n\\\n    if (data_entry_ptr[15] == 0) {\\n\\\n      *(char *)(data_entry_ptr + 60) = 0;\\n\\\n      execute_data_validation();\\n\\\n    }\\n\\\n    *(char *)(data_entry_ptr + 60) = 2;\\n\\\n    process_data_entry(data_entry_ptr[0], data_entry_ptr + 1);\\n\\\n    *(char *)(data_entry_ptr + 60) = 1;\\n\\\n    return 0;\\n\\\n  }\\n\\\n  return 1;\\n\\\n}",
            "called": [
                "FUN_08006e68",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "validate_data_entry_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "process_input_08008d8c",
                "param_1": "input_value",
                "param_2": "max_value",
                "PTR_DAT_08008dac": "PTR_DAT",
                "DAT_08008da8": "DAT",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void process_input_08008d8c(int input_value, int max_value, undefined4 param_3, undefined4 param_4)\n{\n    if (input_value != 1)\n    {\n        return;\n    }\n\n    if (max_value == 0xffff)\n    {\n        execute_function(PTR_DAT_08008da8_08008dac_08008dac, DAT_08008da8_08008da8, param_3, 0xffff, param_4);\n    }\n\n    return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "print_data_080004d4",
                "param_1": "data",
                "param_2": "limit",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "PTR_DAT_080004fc": "PTR_DAT_080004fc"
            },
            "code": "void print_data_080004d4(int data, int limit)\n{\n  int index;\n  char *data_ptr;\n  \n  if (data != 1) {\n    return;\n  }\n  if (limit == 0xffff) {\n    data_ptr = PTR_DAT_080004fc;\n    for (index = 11; index > -1; index--) {\n      print_string(data_ptr);\n      data_ptr = data_ptr + 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "print_data_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      FUN_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = FUN_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = FUN_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      FUN_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    FUN_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = FUN_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          FUN_08008a24(param_1,0);\n        }\n        FUN_08008990(param_1,1);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = FUN_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08008990(param_1,0);\n        }\n        FUN_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08008990(param_1,1);\n        FUN_080088e0(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = FUN_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      FUN_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        FUN_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08002fa8",
                "FUN_08002f14",
                "FUN_08000488",
                "FUN_08008a24",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_080026f8",
                "FUN_08008990",
                "FUN_08000588",
                "FUN_080005e0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "execute_function_with_params_and_stack_pointer_08009124",
                "param_1": "function_parameter_1",
                "param_2": "function_parameter_2",
                "param_3": "function_parameter_3",
                "param_4": "function_parameter_4",
                "uStack_8": "temp_stack_1",
                "uStack_4": "temp_stack_2",
                "PTR_PTR_DAT_08009144": "function_pointer"
            },
            "code": "void execute_function_with_params_and_stack_pointer_08009124(void *PTR_PTR_DAT_08009144, int param_1, int param_2, int *stack_pointer_1, int param_3, int *stack_pointer_2)\n{\n    int temp_stack_1 = *stack_pointer_1;\n    int temp_stack_2 = *stack_pointer_2;\n    PTR_PTR_DAT_08009144(param_1, param_2, &temp_stack_1, param_3, &temp_stack_2);\n    return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_and_stack_pointer_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_ptr"
            },
            "code": "unsigned char get_value_at_offset_08002fa0(unsigned int offset, unsigned int base_ptr) {\n    return *(unsigned char *)(base_ptr + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + 0x28)"
            },
            "code": "int get_value_at_offset_08003a1c(int base_address) {\n    int value = *(int *)(base_address + 0x28);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "check_and_set_flags_08005cb4",
                "param_1": "data",
                "**param_1": "*data",
                "DAT_08005ce8": "DAT_08005ce8",
                "uint": "uint",
                "flag1": "flag1",
                "flag2": "flag2",
                "call_some_function()": "call_some_function()",
                "(*param_1)[1]": "(*data)[1]",
                "0xfffffffd": "0xfffffffd",
                "ptr": "ptr",
                "param": "param"
            },
            "code": "void check_and_set_flags_08005cb4(uint **data)\n{\n    uint flag1 = (**data & 2) != 0;\n    uint flag2 = ((*data)[1] & 2) != 0;\n    if (flag1 && flag2) {\n        call_some_function();\n        (*data)[1] = 0xfffffffd;\n    }\n    uint *ptr = (uint *)(DAT_08005ce8 + 0x14);\n    *ptr = 0x20000;\n    uint *param = (uint *)((int)data + 0x11);\n    *param = 1;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flags_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_data_from_ptr_08007744",
                "param_1": "ptr_param",
                "PTR_": "ptr_",
                "DAT_": "data_"
            },
            "code": "int get_data_from_ptr_08007744(int PTR_param){\n    int PTR_to_data = *(int *)(PTR_param + 4);\n    int data = *(int *)(PTR_to_data + 0x24);\n    return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_data_from_ptr_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_result_08006538",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "PTR_DAT_080066e0": "PTR_TARGET_VALUE",
                "PTR_DAT_080066e4": "PTR_MULTIPLIER",
                "iVar3": "val1",
                "uVar2": "val2",
                "iVar8": "val3",
                "iVar4": "val4",
                "iVar9": "val5",
                "iVar5": "val6",
                "iVar10": "val7",
                "iVar6": "val8",
                "iVar7": "val9",
                "ptr1": "ptr_target",
                "ptr2": "ptr_mask1",
                "ptr3": "ptr_mask2",
                "ptr4": "ptr_check"
            },
            "code": "void calculate_result_08006538(int *param_array)\n{\n    // Update values of three elements of the array\n    uint *ptr1 = (uint *)(*param_array + 0x10);\n    *ptr1 = (*ptr1 & 0xffffcfff) | param_array[3];\n    uint *ptr2 = (uint *)(*param_array + 0xc);\n    *ptr2 = param_array[2] | param_array[4] | param_array[5] | (*ptr2 & 0xffffe9f3);\n    uint *ptr3 = (uint *)(*param_array + 0x14);\n    *ptr3 = (*ptr3 & 0xfffffcff) | param_array[6];\n\n    // Calculate new value and update the array\n    int *ptr4 = param_array;\n    if (*ptr4 != PTR_DAT_080066e0) {\n        int val1 = calculate_value();\n        uint val2 = PTR_DAT_080066e4;\n        int val3 = param_array[1];\n        int val4 = calculate_value();\n        int val5 = param_array[1];\n        int val6 = calculate_value();\n        int val7 = param_array[1];\n        int val8 = calculate_value();\n        *ptr1 = (((val2 * (val6 * 0x19 / (val7 << 2) + (val2 * ((val8 * 0x19) / (param_array[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17 >> 0x1c) + ((val2 * ((val4 * 0x19) / (val5 << 2) + (val2 * ((val6 * 0x19) / (val7 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25 & 0xF0) + (PTR_DAT_080066e4 * ((val1 * 0x19) / (val3 << 2)) >> 0x25) * 0x10;\n    }\n    else {\n        int val1 = calculate_value();\n        uint val2 = PTR_DAT_080066e4;\n        int val3 = param_array[1];\n        int val4 = calculate_value();\n        int val5 = param_array[1];\n        int val6 = calculate_value();\n        int val7 = param_array[1];\n        int val8 = calculate_value();\n        *ptr1 = (((val2 * (val6 * 0x19 / (val7 << 2) + (val2 * ((val8 * 0x19) / (param_array[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17 >> 0x1c) + ((val2 * ((val4 * 0x19) / (val5 << 2) + (val2 * ((val6 * 0x19) / (val7 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25 & 0xF0) + (PTR_DAT_080066e4 * ((val1 * 0x19) / (val3 << 2)) >> 0x25) * 0x10;\n    }\n}\n",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_result_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "data",
                "param_2": "value",
                "param_3": "shift_bit",
                "*(int *)(param_1 + 0x10)": "*(int *)(data + 0x10)"
            },
            "code": "void set_param_value_080042e2(int data, int value, int shift_bit){\n  if (shift_bit == 0) {\n    *(int *)(data + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(data + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_param_value_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_memory_08002fa8",
                "param_1": "address",
                "param_2": "offset",
                "param_3": "value",
                "*(char *)(param_1 + param_2 + 0xcc)": "*memory_address",
                "*(undefined *)(param_1 + param_2 + 0xcc)": "*memory_address"
            },
            "code": "void update_memory_08002fa8(int address,int offset,undefined value)\n{\n  char* memory_address = (char*)(address + offset + 0xcc);\n  if (*memory_address != '\\x7f') {\n    *memory_address = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_memory_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "process_data_0800325a",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "param_3": "data_count",
                "param_4": "offset",
                "puVar1": "func_ptr",
                "uVar2": "i"
            },
            "code": "void process_data_0800325a(uint32_t *data_ptr, uint32_t data_value, uint32_t data_count, int offset) {\n  uint32_t *func_ptr;\n  uint32_t i;\n  func_ptr = (uint32_t *)*data_ptr;\n  if (func_ptr != NULL) {\n    (**(void (**)(uint32_t *, uint32_t))(*func_ptr))(func_ptr, 0xf0);\n    (***(void (****)(uint32_t *))((uint32_t *)*data_ptr))((uint32_t *)*data_ptr, data_value);\n    for (i = 0; i < data_count; i++) {\n      process_data_0800325a(data_ptr, 1, offset + i, 0);\n    }\n    (***(void (****)(uint32_t *))((uint32_t *)*data_ptr))((uint32_t *)*data_ptr, 0xf7);\n  }\n}\n",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "process_data_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_node_080091d8",
                "param_1": "root",
                "param_2": "key",
                "param_3": "unused",
                "param_4": "unused",
                "puVar1": "ptr_to_root",
                "extraout_r1": "unused",
                "ppiVar2": "left_child",
                "ppiVar3": "right_child",
                "piVar4": "unused",
                "ppiVar5": "current_node",
                "ppiVar6": "parent_node",
                "ppiVar7": "temp_node"
            },
            "code": "void insert_node_080091d8(int **root, int key) {\n  int **current = root;\n  int **parent = NULL;\n  int *new_node = malloc(sizeof(int));\n  *new_node = key;\n  while (*current != NULL) {\n    parent = current;\n    if (key < **current) {\n      current = (int **)(*current + 0x4);\n    } else {\n      current = (int **)(*current + 0x8);\n    }\n  }\n  if (parent == NULL) {\n    *root = new_node;\n  } else if (key < **parent) {\n    *(int **)(parent + 0x4) = new_node;\n  } else {\n    *(int **)(parent + 0x8) = new_node;\n  }\n}\n",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "insert_node_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "initialize_device_0800688e",
                "param_1": "device",
                "param_2": "device_type",
                "param_3": "device_id",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)device + DEVICE_NAME_OFFSET)",
                "DEVICE_NAME_OFFSET": "0x39",
                "DEVICE_NAME_ERROR": "2",
                "device_type == 0": "device_type == DEVICE_TYPE_ERROR",
                "DEVICE_TYPE_ERROR": "1",
                "device_id == 0": "device_id == DEVICE_ID_ERROR",
                "DEVICE_ID_ERROR": "1",
                "*(char *)(param_1 + 0xe)": "*(char *)(device + DEVICE_INITIALIZED_FLAG_OFFSET)",
                "DEVICE_INITIALIZED_FLAG_OFFSET": "0xe",
                "DEVICE_INITIALIZED": "\\x01",
                "device[8]": "device[DEVICE_TYPE_OFFSET]",
                "device + 9": "device + DEVICE_ID_OFFSET",
                "(int)param_1 + 0x26": "(int)device + DEVICE_SIZE_OFFSET",
                "device[0xf]": "device[DEVICE_INITIALIZED_FLAG_OFFSET + 1]",
                "*(undefined *)((int)param_1 + 0x39)": "*(char *)((int)device + DEVICE_NAME_OFFSET) = DEVICE_NAME_PREFIX;",
                "DEVICE_NAME_PREFIX": "\\x21",
                "*(undefined *)(param_1 + 0xe)": "*(char *)(device + DEVICE_INITIALIZED_FLAG_OFFSET) = DEVICE_INITIALIZED;",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*device + DEVICE_CONTROL_OFFSET)",
                "DEVICE_CONTROL_OFFSET": "0xc",
                "DEVICE_CONTROL_FLAG": "0x80",
                "DEVICE_SUCCESS": "0",
                "DEVICE_ALREADY_INITIALIZED": "2"
            },
            "code": "int initialize_device_0800688e(int *device, int device_type, int device_id) {\n    if (*(char *)((int)device + DEVICE_NAME_OFFSET) != ' ') {\n        return DEVICE_NAME_ERROR;\n    }\n    if (device_type == 0) {\n        return DEVICE_TYPE_ERROR;\n    }\n    if (device_id == 0) {\n        return DEVICE_ID_ERROR;\n    }\n    if (*(char *)(device + DEVICE_INITIALIZED_FLAG_OFFSET) != DEVICE_INITIALIZED) {\n        device[DEVICE_TYPE_OFFSET] = device_type;\n        *(short *)(device + DEVICE_ID_OFFSET) = (short)device_id;\n        *(short *)((int)device + DEVICE_SIZE_OFFSET) = (short)device_id;\n        device[DEVICE_INITIALIZED_FLAG_OFFSET + 1] = 0;\n        *(char *)((int)device + DEVICE_NAME_OFFSET) = DEVICE_NAME_PREFIX;\n        *(char *)(device + DEVICE_INITIALIZED_FLAG_OFFSET) = DEVICE_INITIALIZED;\n        *(unsigned int *)(*device + DEVICE_CONTROL_OFFSET) = *(unsigned int *)(*device + DEVICE_CONTROL_OFFSET) | DEVICE_CONTROL_FLAG;\n        return DEVICE_SUCCESS;\n    }\n    return DEVICE_ALREADY_INITIALIZED;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "imported": false,
            "current_name": "initialize_device_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "data_index",
                "param_2": "data_value",
                "iVar1": "found_index",
                "uVar2": "shift_amount",
                "iVar3": "char_value",
                "PTR_DAT_0800897c": "lookup_table",
                "PTR_DAT_08008980": "index_table",
                "FUN_0800738a": "find_index",
                "FUN_08008990": "set_bit",
                "PTR_DAT_08008988": "shift_value",
                "FUN_08008a24": "set_bit",
                "DAT_0800898c": "value_table",
                "FUN_08006b28": "find_index",
                "FUN_08006b3e": "add_index",
                "FUN_08007118": "update_value"
            },
            "code": "void process_data_080088e0(uint data_index, uint data_value)\n{\n  int char_value;\n  uint shift_amount;\n  int found_index;\n  \n  if (data_index < 0x3c) {\n    char_value = (int)(char)PTR_DAT_0800897c[data_index];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value != -1) {\n    found_index = find_index(char_value, PTR_DAT_08008980);\n    if (found_index == 0) {\n      set_bit(data_index, 1);\n      shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          data_value = data_value << (8 - shift_amount & 0xff);\n        }\n        else {\n          data_value = data_value >> (shift_amount - 8 & 0xff);\n        }\n      }\n      if (data_value < 0x80) {\n        set_bit(data_index, 0);\n      }\n      else {\n        set_bit(data_index, 1);\n      }\n    }\n    else {\n      if (find_index(char_value, PTR_DAT_08008980) == 0) {\n        add_index(char_value, PTR_DAT_08008980);\n      }\n      shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          data_value = data_value << (8 - shift_amount & 0xff);\n        }\n        else {\n          data_value = data_value >> (shift_amount - 8 & 0xff);\n        }\n      }\n      update_value(char_value, DAT_0800898c, 0xff, data_value, found_index == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_0800738a",
                "FUN_08007118",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "process_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "update_data_08008b66",
                "param_1": "data_address",
                "iVar1": "result",
                "uVar2": "index",
                "local_9": "data"
            },
            "code": "void update_data_08008b66(int data_address){\n  int result = 0;\n  ushort index = 0;\n  undefined data = 0;\n  result = get_data(data_address, &data);\n  if ((result == 0) && ((*(short *)(data_address + 0x60) + 1U & 0x3f) != *(ushort *)(data_address + 0x62))) {\n    *(undefined *)(*(int *)(data_address + 0x5c) + (uint)*(ushort *)(data_address + 0x60)) = data;\n    *(ushort *)(data_address + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_based_on_index_0800870c",
                "uVar1": "index",
                "PTR_DAT_08008728": "function_pointer_array",
                "PTR_DAT_0800872c": "function_argument_array",
                "function_ptr": "function_pointer",
                "arg": "function_argument"
            },
            "code": "void execute_function_based_on_index_0800870c(void)\n{\n  uint index = get_index();\n  if (index < 5) {\n    void (*function_ptr)(int) = (void (*)(int))(*(int *)(PTR_DAT_08008728 + index * 4));\n    int arg = *(int *)(PTR_DAT_0800872c + index * 4);\n    function_ptr(arg);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_index_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "code": "unsigned int get_error_code_08008840(void)\n{\n    return 0xFFFFFFFF;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "get_value_from_param_08008600",
                "param_1": "param_size",
                "param_2": "param_buffer",
                "param_3": "value_offset",
                "param_4": "lookup_offset",
                "iVar1": "lookup_val"
            },
            "code": "int get_value_from_param_08008600(int param_size, char* param_buffer, int value_offset, int lookup_offset)\n{\n    if (param_size == 0) {\n        return -1;\n    }\n    int lookup_val = lookup_value();\n    if (lookup_val == 0) {\n        *param_buffer = *(char *)(param_size + value_offset);\n        set_value(*(int *)(PTR_DAT_08008638 + (uint)*(byte *)(param_size + lookup_offset) * 4),\n                  param_size + value_offset,1,PTR_DAT_08008638,lookup_val);\n        return 0;\n    }\n    return -1;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "get_value_from_param_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value",
                "*param_1": "*destination",
                "undefined4": "int"
            },
            "code": "void copy_value_to_pointer_08003154(int *destination, int value) {\n  *destination = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "copy_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_bits_in_uint_at_offset_08006420",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "4": "BIT_MASK",
                "mask": "bit_mask"
            },
            "code": "void update_bits_in_uint_at_offset_08006420(uint32_t* data, uint8_t offset, uint32_t value) {\n  uint32_t mask = ~(4 << (offset & 0xff));\n  *data = (*data & mask) | (value << (offset & 0xff));\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "imported": false,
            "current_name": "update_bits_in_uint_at_offset_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_value_at_index_08007750",
                "param_1": "array_addr",
                "param_2": "index",
                "param_3": "value",
                "*(undefined4 *)(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": "*index_ptr"
            },
            "code": "void set_value_at_index_08007750(int array_addr, int index, int value) {\n  int* array_ptr = *(int*)(array_addr + 4);\n  int* index_ptr = array_ptr + 0x34 + index * 4;\n  *index_ptr = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_value_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_char_in_string_08009938",
                "param_1": "string",
                "param_2": "target_char",
                "pcVar1": "current_char"
            },
            "code": "char * find_char_in_string_08009938(char *string, char target_char)\n{\n  char *current_char;\n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (target_char != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (target_char != *current_char);\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "count_valid_words_08007f0e",
                "param_1": "word_list",
                "param_2": "word_length",
                "param_3": "max_word_length",
                "param_4": "comparison_value",
                "iVar1": "first_character",
                "iVar2": "current_word_length",
                "uVar3": "difference",
                "iVar4": "word_validity",
                "iVar5": "start_of_word",
                "uVar6": "saved_comparison_value"
            },
            "code": "int count_valid_words_08007f0e(int word_list, int word_length, int max_word_length, int comparison_value)\n{\n  int start_of_word;\n  int current_word_length;\n  uint difference;\n  int word_validity = 2;\n  \n  int first_character = get_first_character();\n  difference = 0;\n  word_validity = 2;\n\n  do {\n    start_of_word = word_list + 4;\n    current_word_length = get_word_length(start_of_word, word_length, max_word_length, comparison_value);\n    if (current_word_length == 0) {\n      word_validity = 0;\n      while ((current_word_length = get_word_length(start_of_word), current_word_length != 0x20 && (word_validity == 0))) {\n        current_word_length = get_first_character();\n        difference = current_word_length - first_character;\n        if (difference < 0x65) {\n          current_word_length = is_word_valid(start_of_word);\n          if (current_word_length != 0) {\n            word_validity = 2;\n          }\n        }\n        else {\n          word_validity = 1;\n        }\n      }\n    }\n    current_word_length = is_word_valid(start_of_word);\n  } while ((current_word_length == 4) && (difference < 100));\n  return word_validity;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "count_valid_words_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "bit_position",
                "DAT_08004020": "array_ptr"
            },
            "code": "void set_bit_in_array_08004004(uint bit_position)\n{\n    if (bit_position >= 0)\n    {\n        uint array_index = (bit_position >> 5) + 0x60;\n        uint* DAT_08004020 = (uint*)DAT_08004020;\n        uint bit_mask = 1 << (bit_position & 0x1f);\n        *(DAT_08004020 + array_index) = bit_mask;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "send_command_to_device_08003158",
                "param_1": "device_ptr",
                "param_2": "command",
                "param_3": "data",
                "puVar1": "function_ptr",
                "local_a": "local_data"
            },
            "code": "void send_command_to_device_08003158(uint8_t *device_ptr, uint32_t command, uint16_t data)\n{\n  uint8_t *function_ptr;\n  uint16_t local_data;\n  function_ptr = (uint8_t *)*device_ptr;\n  if (function_ptr != (uint8_t *)0x0) {\n    local_data = data;\n    if (((int)command < 0x10) && (data < 0x4000)) {\n      (**(void (**)(uint8_t *, uint32_t)) *function_ptr)(function_ptr, command | 0xe0);\n      send_data_to_device(device_ptr, 2, &local_data);\n    }\n    else {\n      send_data_to_device(device_ptr, command, 2, &local_data);\n    }\n  }\n  return;\n}\n",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "send_command_to_device_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "copy_params_to_new_order_080090c2",
                "param_1": "new_param",
                "param_2": "old_param",
                "FUN_08009108": "memcpy",
                "PTR_": "new_param_",
                "DAT_": "old_param_"
            },
            "code": "void copy_params_to_new_order_080090c2(void *new_param, void *old_param)\n{\n  memcpy(new_param, old_param, sizeof(old_param));\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "copy_params_to_new_order_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08000be8",
                "FUN_08008a6c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_1": "address",
                "param_2": "permissions",
                "PTR_": "address_",
                "DAT_": "data_"
            },
            "code": "int set_memory_permissions_08008846(int* address, int permissions) {\n    *(int*)(address + 4) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_and_store_value_0800459c",
                "param_1": "array",
                "puVar1": "ptr_to_char",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "int increment_and_store_value_0800459c(int *array){\n  int *PTR_array_element = &array[9];\n  short *PTR_array_short = (short *)(array + 0x2a);\n  if (*PTR_array_short != 0) {\n    unsigned char *PTR_char = (unsigned char *)(*PTR_array_element);\n    *PTR_array_element = (int)(PTR_char + 1);\n    *PTR_char = (unsigned char)(*(int *)(array + 0x10));\n    *PTR_array_short -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_and_store_value_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "obj_ptr",
                "param_2": "param_value",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "void set_param_value_0800774a(int obj_ptr, int param_value) {\n    int param_ptr = *(int *)(obj_ptr + 4);\n    int param_offset = 0x24;\n    *(int *)(param_ptr + param_offset) = param_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_param_value_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "update_value_if_flag_set_080042f0",
                "param_1": "flag",
                "DAT_08004308": "PTR_data",
                "call_function": "FUN_08009094"
            },
            "code": "void update_value_if_flag_set_080042f0(uint flag) {\n  if ((*(uint *)(DAT_08004308 + 0x14) & flag) != 0) {\n    *(uint *)(DAT_08004308 + 0x14) = flag;\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "update_value_if_flag_set_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "checksum",
                "cVar1": "char_var",
                "puVar2": "ptr1",
                "iVar3": "int_var1",
                "uVar4": "undefined_var1",
                "uVar5": "uint_var1",
                "PTR_DAT_08002884": "ptr1",
                "PTR_DAT_08002878": "PTR_DAT_08002878",
                "PTR_DAT_0800287c": "PTR_DAT_0800287c",
                "PTR_DAT_08002880": "PTR_DAT_08002880",
                "PTR_DAT_08002888": "PTR_DAT_08002888",
                "FUN_08007ede": "FUN_08007ede",
                "FUN_08009908": "FUN_08009908",
                "FUN_080091b0": "FUN_080091b0"
            },
            "code": "uint process_data_080027f0(int data_offset, uint data_size, uint checksum) {\n  char char_var;\n  undefined *PTR_DAT_08002884 = PTR_DAT_08002884;\n  uint uint_var1;\n  int int_var1;\n  undefined undefined_var1;\n  uint checksum_var = checksum;\n  if (*PTR_DAT_08002878 == '\\0') {\n    int_var1 = FUN_08007ede(data_offset + 20, data_size, checksum & 0xFFFF);\n    if (int_var1 != 0) {\n      return 0;\n    }\n    return checksum;\n  }\n  uint_var1 = (byte)*PTR_DAT_0800287c + checksum_var;\n  if ((byte)*PTR_DAT_08002880 < uint_var1) {\n    if (uint_var1 < 32) {\n      uint_var1 = 32;\n    }\n    int_var1 = FUN_08009908(*(undefined4 *)PTR_DAT_08002884, uint_var1);\n    *(int *)PTR_DAT_08002884 = int_var1;\n    if (int_var1 == 0) {\n      undefined_var1 = 0;\n    }\n    else {\n      undefined_var1 = (undefined)uint_var1;\n    }\n    *PTR_DAT_08002880 = undefined_var1;\n  }\n  PTR_DAT_08002884 = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    FUN_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data_size, checksum_var);\n    char_var = *PTR_DAT_08002884 + (char)checksum_var;\n    *PTR_DAT_08002884 = char_var;\n    *PTR_DAT_0800287c = char_var;\n    return checksum_var;\n  }\n  *(undefined4 *)(data_offset + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_080091b0",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "initialize_value_to_zero_0800314e",
                "param_1": "value"
            },
            "code": "void initialize_value_to_zero_0800314e(int *value)\n{\n    *value = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_value_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "process_data_080076e0",
                "param_1": "data_array",
                "cVar1": "processed_char",
                "iVar2": "result",
                "FUN_08007544": "get_processed_char",
                "FUN_08003fb0": "print_char",
                "FUN_08005df4": "process_data_array"
            },
            "code": "void process_data_080076e0(undefined4 *data_array)\n{\n  char processed_char;\n  int result;\n  data_array[0x13] = 0;\n  processed_char = get_processed_char(*data_array);\n  print_char(processed_char);\n  result = process_data_080076e0_array(data_array + 1);\n  if (result == 0) {\n    process_data_080076e0_array(data_array + 1, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007544",
                "FUN_080062f4",
                "FUN_08003fb0",
                "FUN_08005df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "process_data_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "copy_data_to_buffer_08002f14",
                "param_1": "data",
                "FUN_080032a2": "copy_data",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void copy_data_to_buffer_08002f14(int data)\n{\n    int buffer_address = data + 0x40;\n    copy_data(buffer_address);\n    return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "start_application_080036a2",
                "FUN_080072fa": "initialize_system"
            },
            "code": "void start_application_080036a2(void)\n{\n  initialize_system();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "start_application_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "set_data_080038e4",
                "param_1": "data_ptr",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "temp",
                "local_c": "i",
                "flag": "flag",
                "index": "index",
                "data_ptr_val": "data_ptr_val",
                "val": "val"
            },
            "code": "uint32_t set_data_080038e4(uint32_t *data_ptr, uint32_t *data)\n{\n    uint32_t result;\n    uint32_t shift_amount;\n    uint32_t temp;\n    uint8_t flag = *(uint8_t *)(data_ptr + 9);\n    if (flag == 0x01) {\n        result = 2;\n    }\n    else {\n        *(uint8_t *)(data_ptr + 9) = 1;\n        uint32_t index = data[1];\n        if (index < 7) {\n            shift_amount = index * 5 - 5;\n            temp = *(uint32_t *)(*data_ptr + 0x34);\n            *(uint32_t *)(*data_ptr + 0x34) = data[0] << (shift_amount & 0xff) | temp & ~(0x1f << (shift_amount & 0xff));\n        }\n        else if (index < 0xd) {\n            shift_amount = index * 5 - 0x23;\n            temp = *(uint32_t *)(*data_ptr + 0x30);\n            *(uint32_t *)(*data_ptr + 0x30) = data[0] << (shift_amount & 0xff) | temp & ~(0x1f << (shift_amount & 0xff));\n        }\n        else {\n            shift_amount = index * 5 - 0x41;\n            temp = *(uint32_t *)(*data_ptr + 0x2c);\n            *(uint32_t *)(*data_ptr + 0x2c) = data[0] << (shift_amount & 0xff) | temp & ~(0x1f << (shift_amount & 0xff));\n        }\n        index = data[0];\n        if (index < 10) {\n            shift_amount = index * 3;\n            temp = *(uint32_t *)(*data_ptr + 0x10);\n            *(uint32_t *)(*data_ptr + 0x10) = data[2] << (shift_amount & 0xff) | temp & ~(7 << (shift_amount & 0xff));\n        }\n        else {\n            shift_amount = index * 3 - 0x1e;\n            temp = *(uint32_t *)(*data_ptr + 0xc);\n            *(uint32_t *)(*data_ptr + 0xc) = data[2] << (shift_amount & 0xff) | temp & ~(7 << (shift_amount & 0xff));\n        }\n        index = data[0] - 0x10;\n        if (index < 2) {\n            uint32_t data_ptr_val = *data_ptr;\n            if (data_ptr_val == DAT_08003a10) {\n                uint32_t val = *(uint32_t *)(data_ptr_val + 8);\n                if ((val & 0x800000) == 0) {\n                    *(uint32_t *)(data_ptr_val + 8) = val | 0x800000;\n                    if (data[0] == 0x10) {\n                        for (uint32_t i = (uint32_t)((uint64_t)DAT_08003a18 * (uint64_t)*(uint32_t *)PTR_DAT_08003a14 >> 0x32) * 10; i != 0; i--) {\n                        }\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                *(uint8_t *)(data_ptr + 10) = *(uint8_t *)(data_ptr + 10) | 0x20;\n                result = 1;\n            }\n        }\n        else {\n            result = 0;\n        }\n        *(uint8_t *)(data_ptr + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_data_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_08005d48",
                "param_1": "data_address",
                "param_2": "new_data",
                "uVar1": "new_data1",
                "uVar2": "old_data2",
                "uVar3": "old_data3",
                "mask1": "0xfffffeff",
                "mask2": "0xfffffdff",
                "mask3": "0xfffff7ff",
                "mask4": "0xfffffbff",
                "*(uint *)(param_1 + 0x20)": "old_data1",
                "*(uint *)(param_1 + 4)": "old_data2",
                "*(uint *)(param_1 + 0x1c)": "old_data3",
                "param_2[2]": "new_data[2]",
                "param_2[3]": "new_data[3]",
                "param_2[5]": "new_data[5]",
                "param_2[6]": "new_data[6]",
                "*(uint *)(param_1 + 0x20) & 0xfffffeff": "old_data1 & mask1",
                "*(uint *)(param_1 + 0x20) & 0xfffffdff | param_2[2] << 8": "new_data1",
                "param_1 == DAT_08005da8": "old_data1 == DAT_08005da8",
                "uVar1 & 0xfffff7ff | param_2[3] << 8": "new_data3",
                "uVar1 & 0xfffffbff": "new_data3",
                "uVar2 & 0xffffcfff | param_2[5] << 4 | param_2[6] << 4": "new_data2",
                "*(uint *)(param_1 + 0x20) = new_data1": "*(uint *)(data_address + 0x20) = new_data1",
                "*(uint *)(param_1 + 4) = uVar2": "*(uint *)(data_address + 4) = new_data2",
                "*(uint *)(param_1 + 0x1c) = *(uint *)(param_1 + 0x1c) & 0xffffff8c | uVar3": "*(uint *)(data_address + 0x1c) = (old_data3 & 0xffffff8c) | new_data3",
                "*(uint *)(param_1 + 0x3c) = param_2[1]": "*(uint *)(data_address + 0x3c) = new_data[1]"
            },
            "code": "void update_data_08005d48(int data_address, uint *new_data)\n{\n  uint mask1 = 0xfffffeff;\n  uint mask2 = 0xfffffdff;\n  uint mask3 = 0xfffff7ff;\n  uint mask4 = 0xfffffbff;\n  uint old_data1 = *(uint *)(data_address + 0x20);\n  uint old_data2 = *(uint *)(data_address + 4);\n  uint old_data3 = *(uint *)(data_address + 0x1c);\n  uint new_data1 = (old_data1 & mask1) | (new_data[2] << 8);\n  uint new_data2 = old_data2 & 0xffffcfff | new_data[5] << 4 | new_data[6] << 4;\n  uint new_data3 = (param_1 == DAT_08005da8) ? ((new_data1 & mask3) | (new_data[3] << 8)) & mask4 : old_data3;\n  *(uint *)(data_address + 0x20) = new_data1;\n  *(uint *)(data_address + 4) = new_data2;\n  *(uint *)(data_address + 0x1c) = (old_data3 & 0xffffff8c) | new_data3;\n  *(uint *)(data_address + 0x3c) = new_data[1];\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 286125,
    "layers": [
        [
            "FUN_08007246",
            "FUN_0800a042",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_08005188",
            "FUN_08009db0",
            "FUN_08002c2c",
            "FUN_08001bf8",
            "FUN_080072f0",
            "FUN_08000178",
            "FUN_080069ec",
            "FUN_0800a168",
            "FUN_080067ac",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_08000a64",
            "FUN_0800723c",
            "FUN_080043a2",
            "FUN_0800694c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08008df8",
            "FUN_08006c7c",
            "FUN_08006b5c",
            "FUN_08007376",
            "FUN_08000188",
            "FUN_08004f3c",
            "FUN_080033cc",
            "FUN_08003de4",
            "FUN_08000500",
            "FUN_08009d24",
            "FUN_0800344a",
            "FUN_080071e4",
            "FUN_08008e72",
            "FUN_080022f8",
            "FUN_080072fa",
            "FUN_08005084",
            "FUN_0800291c",
            "FUN_08002ac0",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08003f94",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_0800430c",
            "FUN_08006060",
            "FUN_08003350",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08003474",
            "FUN_08006b7c",
            "FUN_08008e7c",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_080091a0",
            "FUN_08002a1c",
            "FUN_08007718",
            "FUN_08002948",
            "FUN_08009e64",
            "FUN_08002acc",
            "FUN_08002a30",
            "FUN_0800932c",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08007320",
            "FUN_08000be8",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_0800319e",
            "FUN_08008d00",
            "FUN_08009190",
            "FUN_08004b82",
            "FUN_0800997e",
            "FUN_08002dbc",
            "FUN_08002e44",
            "FUN_0800242c",
            "FUN_080058d2",
            "FUN_08002c00",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_080085dc",
            "FUN_08006b1c",
            "FUN_08008ed6",
            "FUN_0800a130",
            "FUN_08008f3c",
            "FUN_08002ef2",
            "FUN_08007332",
            "FUN_08006128",
            "FUN_08003658",
            "FUN_08009a80",
            "FUN_080062f4",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005a48",
            "FUN_080033a8",
            "FUN_08002c14",
            "FUN_08008d18",
            "FUN_08009084",
            "FUN_0800a020",
            "FUN_08005840",
            "FUN_08007f7c",
            "FUN_08006d80",
            "FUN_08006c60",
            "FUN_08003306",
            "FUN_08002578",
            "FUN_08006932",
            "FUN_080060c4",
            "FUN_08009eac",
            "FUN_080072d8",
            "FUN_080045c0",
            "FUN_08007e74",
            "FUN_08002efe",
            "FUN_08002f84",
            "FUN_08002ddc",
            "FUN_08009094",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08007f8e",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_08007110",
            "FUN_08007594",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08002df6",
            "FUN_08007118",
            "FUN_08009fe8",
            "FUN_08002c1e",
            "FUN_08005a68",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_08002f94",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08008eec",
            "FUN_080068d6",
            "FUN_080032a2",
            "FUN_08001b48",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08005df4",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08004ac2",
            "FUN_08008850",
            "FUN_08006ca8",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_08003048",
            "FUN_08000214",
            "FUN_08003724",
            "FUN_080038dc",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08007648",
            "FUN_08008858",
            "FUN_080063c0",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080090cc",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080098d8",
            "FUN_08009270",
            "FUN_08008500",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08005aa4",
            "FUN_08005e6e",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08000588",
            "FUN_08002644",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_0800885c",
            "FUN_0800643c",
            "FUN_08002fca",
            "FUN_08009c7c",
            "FUN_08009b5c",
            "FUN_0800021a",
            "FUN_08008a6c",
            "FUN_080026f8",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_080075dc",
            "FUN_08007544",
            "FUN_08007ff0",
            "FUN_08008990",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_080052f0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08008f0e",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800288c",
            "FUN_0800010c",
            "FUN_08002e26",
            "FUN_080036d8",
            "FUN_080086e8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_080035b8",
            "FUN_08001c18",
            "FUN_08006460",
            "FUN_08004046",
            "FUN_08008880",
            "FUN_08002ed2",
            "FUN_080073ae",
            "FUN_08000488",
            "FUN_08003f0c",
            "FUN_08008f1c",
            "FUN_080058ac",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_08004aec",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "FUN_0800863c",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_080084b0",
            "FUN_08004050",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_080095a8",
            "FUN_08003002",
            "FUN_08003bd8",
            "FUN_08009d50",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_0800a18c",
            "FUN_08009908",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08002b68",
            "FUN_080005e0",
            "FUN_08008020",
            "FUN_08005dac",
            "FUN_0800674e",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08009358",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08007fa0",
            "FUN_08003376",
            "FUN_08008bf4",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08005434",
            "FUN_08005e2e",
            "FUN_08007736",
            "FUN_08002968",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_0800a07a",
            "FUN_08003a20",
            "FUN_080064b0",
            "FUN_08009cdc",
            "FUN_08002a58",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_08008d8c",
            "FUN_080004d4",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08005cb4",
            "FUN_08007744",
            "FUN_08006538",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_0800325a",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_080088e0",
            "FUN_08008b66",
            "FUN_0800870c",
            "FUN_08008840",
            "FUN_08008600",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08007f0e",
            "FUN_08004004",
            "FUN_08003158",
            "FUN_080090c2",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_080042f0",
            "FUN_080027f0",
            "FUN_0800314e",
            "FUN_080076e0",
            "FUN_08002f14",
            "FUN_080036a2",
            "FUN_080038e4",
            "FUN_08005d48"
        ]
    ],
    "locked_functions": []
}