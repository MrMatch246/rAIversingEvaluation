{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_completed_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeCompletedFlag_0800010c(undefined4 inputParam)\n\n{\n  if ((char)completionFlag == '\\0') {\n    completionFlag._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_completed_flag_0800010c",
                "param_1": "inputParam",
                "completed_8667": "completionFlag"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000130": {
            "entrypoint": "0x08000130",
            "current_name": "FUNC_08000130",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000134) */\n/* WARNING: Removing unreachable block (ram,0x0800014e) */\n/* WARNING: Removing unreachable block (ram,0x08000144) */\n/* WARNING: Removing unreachable block (ram,0x08000160) */\n/* WARNING: Removing unreachable block (ram,0x08000154) */\n\nvoid FUNC_08000130(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000130": "FUNC_08000130"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "calculate_string_length_08000178",
            "code": "\nsize_t calculateStringLength_08000178(char *string)\n\n{\n  char currentChar;\n  char *nextCharPointer;\n  char *currentCharPointer;\n  \n  currentCharPointer = string;\n  do {\n    nextCharPointer = currentCharPointer + 1;\n    currentChar = *currentCharPointer;\n    currentCharPointer = nextCharPointer;\n  } while (currentChar != '\\0');\n  return (size_t)(nextCharPointer + (-1 - (int)string));\n}\n\n",
            "renaming": {
                "FUN_08000178": "calculate_string_length_08000178",
                "__s": "string",
                "cVar1": "currentChar",
                "pcVar2": "nextCharPointer",
                "pcVar3": "currentCharPointer"
            },
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion",
                "printNumber"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_software_interrupt_08000188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t execute_software_interrupt_08000188(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_software_interrupt_08000188"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_afl_call_0800018c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint executeAflCall_0800018c(int inputTicks)\n\n{\n  uint32_t callResult;\n  \n  if (noHyperCall != 0) {\n    return 0;\n  }\n  callResult = aflCall(1,inputTicks,0);\n  return callResult;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_afl_call_0800018c",
                "ticks": "inputTicks",
                "uVar1": "callResult"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001a8": {
            "entrypoint": "0x080001a8",
            "current_name": "update_pin_value_080001a8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinValue_080001a8(byte inputPin,int newValue)\n\n{\n  bool isValidPin;\n  byte pinMode;\n  uint convertedPin;\n  uint32_t convertedValue;\n  \n  convertedPin = (uint)inputPin;\n  if (convertedPin < 0x3c) {\n    if (convertedPin < 0x3c) {\n      if ((&digitalPin)[convertedPin] == NC) {\n        isValidPin = false;\n      }\n      else {\n        convertedValue = inputPinNametoDigitalPin((&digitalPin)[convertedPin]);\n        if (convertedValue == 0) {\n          isValidPin = false;\n        }\n        else {\n          convertedValue = inputPinNametoDigitalPin((&digitalPin)[convertedPin]);\n          if (convertedValue == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n  }\n  else {\n    isValidPin = false;\n  }\n  if ((isValidPin) && (pinMode = firmata::FirmataClass::getPinMode(&Firmata,inputPin), pinMode == '\\x01')) {\n    firmata::FirmataClass::setPinState(&Firmata,inputPin,newValue);\n    digitalWrite(convertedPin,newValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001a8": "update_pin_value_080001a8",
                "pin": "inputPin",
                "value": "newValue",
                "bVar1": "isValidPin",
                "bVar2": "pinMode",
                "ulPin": "convertedPin",
                "uVar3": "convertedValue"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "pinNametoDigitalPin",
                "getPinMode",
                "setPinState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_pin_value_08000214",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid processPinValue_08000214(byte inputPin,int pinValue)\n\n{\n  bool isServoValid;\n  byte pinMode;\n  _Bool isValidPin;\n  uint pin;\n  uint32_t digitalPinIndex;\n  void *servoPtr;\n  \n  pin = (uint)inputPin;\n  if (0x3b < pin) {\n    return;\n  }\n  pinMode = firmata::FirmataClass::getPinMode(&Firmata,inputPin);\n  if (pinMode == '\\x03') {\n    if (pin < 0x3c) {\n      if ((&digitalPin)[pin] == NC) {\n        isValidPin = false;\n      }\n      else {\n        digitalPinIndex = inputPinNametoDigitalPin((&digitalPin)[pin]);\n        if (digitalPinIndex == 0) {\n          isValidPin = false;\n        }\n        else {\n          digitalPinIndex = inputPinNametoDigitalPin((&digitalPin)[pin]);\n          if (digitalPinIndex == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = inputPin_in_inputPinmap((&digitalPin)[pin],(PinMap_conflict *)&PinMap_PWM);\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin != false) {\n      analogWrite(pin,pinValue);\n    }\n    firmata::FirmataClass::setPinState(&Firmata,inputPin,pinValue);\n  }\n  else if (pinMode == '\\x04') {\n    if (pin < 0x3c) {\n      if ((&digitalPin)[pin] == NC) {\n        isServoValid = false;\n      }\n      else {\n        digitalPinIndex = inputPinNametoDigitalPin((&digitalPin)[pin]);\n        if (digitalPinIndex == 0) {\n          isServoValid = false;\n        }\n        else {\n          digitalPinIndex = inputPinNametoDigitalPin((&digitalPin)[pin]);\n          if (digitalPinIndex == 1) {\n            isServoValid = false;\n          }\n          else {\n            isServoValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isServoValid = false;\n    }\n    if (isServoValid) {\n      Servo::write(servos + servoPinMap[pin],pinValue,servoPtr,(size_t)servos);\n    }\n    firmata::FirmataClass::setPinState(&Firmata,inputPin,pinValue);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_pin_value_08000214",
                "pin": "inputPin",
                "value": "pinValue",
                "bVar1": "isServoValid",
                "bVar2": "pinMode",
                "_Var3": "isValidPin",
                "ulPin": "pin",
                "uVar4": "digitalPinIndex",
                "in_r2": "servoPtr"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "getPinMode",
                "write",
                "setPinState",
                "analogWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002ec": {
            "entrypoint": "0x080002ec",
            "current_name": "update_digital_pins_080002ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateDigitalPins_080002ec(byte port,int pinValues)\n\n{\n  bool isValidPin;\n  byte pinMode;\n  uint portNum;\n  uint32_t pinNumber;\n  int pinState;\n  byte currentPin;\n  uint32_t pinIndex;\n  uint bitMask;\n  byte lastPin;\n  uint endPinIndex;\n  byte pin;\n  byte lastValidPin;\n  uint32_t currentPinIndex;\n  uint pinMask;\n  byte valueToSet;\n  \n  portNum = (uint)port;\n  if (portNum < 5) {\n    endPinIndex = (portNum + 1 & 0x1f) * 8;\n    if (0x3c < endPinIndex) {\n      endPinIndex = 0x3c;\n    }\n    pinMask = 0;\n    bitMask = 1;\n    currentPinIndex = (portNum & 0x1f) * 8;\n    for (pinIndex = currentPinIndex; pinIndex < endPinIndex; pinIndex = pinIndex + 1 & 0xff) {\n      if (pinIndex < 0x3c) {\n        if ((&digitalPin)[pinIndex] == NC) {\n          isValidPin = false;\n        }\n        else {\n          pinNumber = pinNametoDigitalPin((&digitalPin)[pinIndex]);\n          if (pinNumber == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinNumber = pinNametoDigitalPin((&digitalPin)[pinIndex]);\n            if (pinNumber == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        currentPin = (byte)pinIndex;\n        pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin);\n        if ((pinMode != '\\x01') &&\n           (pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin), pinMode != '\\0')) {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          portNum = (uint)((bitMask & pinValues) != 0);\n          pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin);\n          if (pinMode == '\\x01') {\n            pinMask = bitMask | pinMask;\n          }\n          else {\n            pinMode = firmata::FirmataClass::getPinMode(&Firmata,currentPin);\n            if (pinMode == '\\0') {\n              if (portNum == 0) {\n                isValidPin = false;\n              }\n              else {\n                pinState = firmata::FirmataClass::getPinState(&Firmata,currentPin);\n                if (pinState == 1) {\n                  isValidPin = false;\n                }\n              }\n            }\n            else {\n              isValidPin = false;\n            }\n            if (isValidPin) {\n              pinMode(pinIndex,2);\n            }\n          }\n          firmata::FirmataClass::setPinState(&Firmata,currentPin,portNum);\n        }\n      }\n      bitMask = (bitMask & 0x7f) << 1;\n    }\n    if ((pinMask & 1) != 0) {\n      digitalWrite(currentPinIndex,pinValues & 1);\n    }\n    if ((pinMask & 2) != 0) {\n      digitalWrite(currentPinIndex + 1,pinValues & 2);\n    }\n    if ((pinMask & 4) != 0) {\n      digitalWrite(currentPinIndex + 2,pinValues & 4);\n    }\n    if ((pinMask & 8) != 0) {\n      digitalWrite(currentPinIndex + 3,pinValues & 8);\n    }\n    if ((pinMask & 0x10) != 0) {\n      digitalWrite(currentPinIndex + 4,pinValues & 0x10);\n    }\n    if ((pinMask & 0x20) != 0) {\n      digitalWrite(currentPinIndex + 5,pinValues & 0x20);\n    }\n    if ((pinMask & 0x40) != 0) {\n      digitalWrite(currentPinIndex + 6,pinValues & 0x40);\n    }\n    if ((pinMask & 0x80) != 0) {\n      digitalWrite(currentPinIndex + 7,pinValues & 0x80);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002ec": "update_digital_pins_080002ec",
                "value": "pinValues",
                "bVar1": "isValidPin",
                "bVar2": "pinMode",
                "uVar3": "portNum",
                "uVar4": "pinNumber",
                "iVar5": "pinState",
                "pin_00": "currentPin",
                "pin_1": "lastValidPin",
                "ulPin_00": "currentPinIndex",
                "ulPin": "pinIndex",
                "uVar6": "bitMask",
                "uVar7": "endPinIndex",
                "uVar8": "pinMask",
                "pinValue": "valueToSet"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "getPinState",
                "pinNametoDigitalPin",
                "getPinMode",
                "setPinState",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_analog_pin_value_08000488",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateAnalogPinValue_08000488(byte pinNumber,int pinValue)\n\n{\n  uint convertedPinNumber;\n  uint32_t readValue;\n  \n  convertedPinNumber = (uint)pinNumber;\n  if (convertedPinNumber < 0xe) {\n    if (pinValue == 0) {\n      reportedAnalogInputs = reportedAnalogInputs & ~(1 << convertedPinNumber);\n      return;\n    }\n    reportedAnalogInputs = 1 << convertedPinNumber | reportedAnalogInputs;\n    if (!resettingFlag) {\n      readValue = readAnalogValue(convertedPinNumber);\n      firmata::firmataObjectClass::sendAnalog(&firmataObject,pinNumber,readValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_analog_pin_value_08000488",
                "analogPin": "pinNumber",
                "value": "pinValue",
                "ulPin": "convertedPinNumber",
                "value_00": "readValue",
                "analogInputsToReport": "reportedAnalogInputs",
                "isResetting": "resettingFlag",
                "analogRead": "readAnalogValue",
                "Firmata": "firmataObject"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [
                "analogRead",
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_servos_080004d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServos_080004d4(int initializeFlag,int priorityFlag)\n\n{\n  int counter;\n  ServoClass *currentServo;\n  \n  if (initializeFlag != 1) {\n    return;\n  }\n  if (priorityFlag == 0xffff) {\n    currentServo = servos;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      ServoClass::ServoClass(currentServo);\n      currentServo = currentServo + 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_servos_080004d4",
                "__initialize_p": "initializeFlag",
                "__priority": "priorityFlag",
                "iVar1": "counter",
                "Servo": "ServoClass",
                "this": "currentServo"
            },
            "calling": [
                "_GLOBAL__sub_I_analogInputsToReport"
            ],
            "called": [
                "Servo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_servo_08000500",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeServo_08000500(byte servoPin,int minimumPulse,int maximumPulse)\n\n{\n  uint convertedPin;\n  \n  convertedPin = (uint)servoPin;\n  if (0xb < attachedServoCount) {\n    firmata::firmataInstanceClass::sendString(&firmataInstance,\"Max servoArray attached\");\n    return;\n  }\n  if (detachedServoIndex == 0) {\n    pinToServoMap[convertedPin] = attachedServoCount;\n    attachedServoCount = attachedServoCount + '\\x01';\n  }\n  else {\n    pinToServoMap[convertedPin] = (&DAT_2000011f)[detachedServoIndex];\n    detachedServoIndex = detachedServoIndex + 0xff;\n  }\n  if ((0 < minimumPulse) && (0 < maximumPulse)) {\n    Servo::attach(servoArray + pinToServoMap[convertedPin],convertedPin,minimumPulse,maximumPulse);\n    return;\n  }\n  Servo::attach(servoArray + pinToServoMap[convertedPin],convertedPin);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_servo_08000500",
                "pin": "servoPin",
                "minPulse": "minimumPulse",
                "maxPulse": "maximumPulse",
                "pin_00": "convertedPin",
                "servoCount": "attachedServoCount",
                "servoPinMap": "pinToServoMap",
                "detachedServoCount": "detachedServoIndex",
                "Firmata": "firmataInstance",
                "servos": "servoArray"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [
                "attach",
                "attach",
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_servo_08000588",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid detachServo_08000588(byte servoPin)\n\n{\n  Servo::detach(servoss + pinMap[servoPin]);\n  if ((pinMap[servoPin] == totalServos) && (totalServos != '\\0')) {\n    totalServos = totalServos + 0xff;\n  }\n  else if (totalServos != '\\0') {\n    totalDetachedServos = totalDetachedServos + 1;\n    (&DAT_2000011f)[totalDetachedServos] = pinMap[servoPin];\n  }\n  pinMap[servoPin] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_servo_08000588",
                "pin": "servoPin",
                "servo": "servos",
                "servoPinMap": "pinMap",
                "servoCount": "totalServos",
                "detachedServoCount": "totalDetachedServos"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [
                "detach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_i2_c_080005e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2C_080005e0(void)\n\n{\n  is_I2C_enabled = false;\n  query_index = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_i2_c_080005e0",
                "isI2CEnabled": "is_I2C_enabled",
                "queryIndex": "query_index"
            },
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "set_pin_mode_and_state_080005f8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinModeAndState_080005f8(byte pinNum,int pinMode)\n\n{\n  byte pinModeResult;\n  PinName_conflict pinName;\n  bool isValidPin;\n  bool isServoAttached;\n  _Bool isPWMPin;\n  uint unsignedPin;\n  uint32_t pinMapping;\n  char isI2CEnabled;\n  uint analogPinNum;\n  \n  unsignedPin = (uint)pinNum;\n  pinModeResult = firmata::FirmataClass::getPinMode(&Firmata,pinNum);\n  if (pinModeResult != '\\x7f') {\n    pinModeResult = firmata::FirmataClass::getPinMode(&Firmata,pinNum);\n    if (pinModeResult == '\\x06') {\n      if (isI2CEnabled == false) {\n        isI2CEnabled = '\\0';\n      }\n      else {\n        isI2CEnabled = isI2CEnabled;\n        if (pinMode == 6) {\n          isI2CEnabled = '\\0';\n        }\n      }\n    }\n    else {\n      isI2CEnabled = '\\0';\n    }\n    if (isI2CEnabled != '\\0') {\n      disableI2CPins();\n    }\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isValidPin = false;\n      }\n      else {\n        pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (pinMapping == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 1) {\n            isValidPin = false;\n          }\n          else if (pinMode == 4) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      if (servoPinMap[unsignedPin] < 0xc) {\n        isValidPin = Servo::attached(servos + servoPinMap[unsignedPin]);\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin != false) {\n        detachServo(pinNum);\n      }\n    }\n    analogPinNum = unsignedPin - 0x2e & 0xff;\n    if (analogPinNum < 0xe) {\n      if (unsignedPin < 0x3c) {\n        pinName = (&digitalPin)[unsignedPin];\n      }\n      else {\n        pinName = NC;\n      }\n      pinMapping = pinNumNametoDigitalPin(pinName);\n      if (pinMapping == 0) {\n        isValidPin = false;\n      }\n      else {\n        if (unsignedPin < 0x3c) {\n          pinName = (&digitalPin)[unsignedPin];\n        }\n        else {\n          pinName = NC;\n        }\n        pinMapping = pinNumNametoDigitalPin(pinName);\n        if (pinMapping == 1) {\n          isValidPin = false;\n        }\n        else {\n          isValidPin = true;\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      reportAnalogCallback((byte)analogPinNum,(uint)(pinMode == 2));\n    }\n    if (unsignedPin < 0x3c) {\n      if ((&digitalPin)[unsignedPin] == NC) {\n        isValidPin = false;\n      }\n      else {\n        pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n        if (pinMapping == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      if ((pinMode == 0) || (pinMode == 0xb)) {\n        portConfigInputs[pinNum >> 3] = portConfigInputs[pinNum >> 3] | (byte)(1 << (unsignedPin & 7));\n      }\n      else {\n        portConfigInputs[pinNum >> 3] = portConfigInputs[pinNum >> 3] & ~(byte)(1 << (unsignedPin & 7));\n      }\n    }\n    firmata::FirmataClass::setPinState(&Firmata,pinNum,0);\n    switch(pinMode) {\n    case 0:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isValidPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinNumMode(unsignedPin,0);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\0');\n        return;\n      }\n      break;\n    case 1:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isValidPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinModeResult = firmata::FirmataClass::getPinMode(&Firmata,pinNum);\n        if (pinModeResult == '\\x03') {\n          digitalWrite(unsignedPin,0);\n        }\n        pinNumMode(unsignedPin,1);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\x01');\n        return;\n      }\n      break;\n    case 2:\n      if (analogPinNum < 0xe) {\n        if (unsignedPin < 0x3c) {\n          pinName = (&digitalPin)[unsignedPin];\n        }\n        else {\n          pinName = NC;\n        }\n        pinMapping = pinNumNametoDigitalPin(pinName);\n        if (pinMapping == 0) {\n          isValidPin = false;\n        }\n        else {\n          if (unsignedPin < 0x3c) {\n            pinName = (&digitalPin)[unsignedPin];\n          }\n          else {\n            pinName = NC;\n          }\n          pinMapping = pinNumNametoDigitalPin(pinName);\n          if (pinMapping == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        if (unsignedPin < 0x3c) {\n          if ((&digitalPin)[unsignedPin] == NC) {\n            isValidPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 0) {\n              isValidPin = false;\n            }\n            else {\n              pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n              if (pinMapping == 1) {\n                isValidPin = false;\n              }\n            }\n          }\n        }\n        else {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          pinNumMode(unsignedPin,0);\n        }\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\x02');\n        return;\n      }\n      break;\n    case 3:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPWMPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 0) {\n            isPWMPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 1) {\n              isPWMPin = false;\n            }\n            else {\n              isPWMPin = pinNum_in_pinNummap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_PWM);\n            }\n          }\n        }\n      }\n      else {\n        isPWMPin = false;\n      }\n      if (isPWMPin != false) {\n        pinNumMode(unsignedPin,1);\n        analogWrite(unsignedPin,0);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\x03');\n        return;\n      }\n      break;\n    case 4:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isValidPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\x04');\n        if ((servoPinMap[unsignedPin] != 0xff) &&\n           (isServoAttached = Servo::attached(servos + servoPinMap[unsignedPin]), isServoAttached)) {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          attachServo(pinNum,-1,-1);\n          return;\n        }\n      }\n      break;\n    default:\n      firmata::FirmataClass::sendString(&Firmata,\"Unknown pinNum pinMode\");\n      break;\n    case 6:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isPWMPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 0) {\n            isPWMPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 1) {\n              isPWMPin = false;\n            }\n            else {\n              isPWMPin = pinNum_in_pinNummap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_I2C_SDA);\n              if (!isPWMPin) {\n                isPWMPin = pinNum_in_pinNummap((&digitalPin)[unsignedPin],(PinMap_conflict *)&PinMap_I2C_SCL);\n              }\n            }\n          }\n        }\n      }\n      else {\n        isPWMPin = false;\n      }\n      if (isPWMPin != false) {\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\x06');\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (unsignedPin < 0x3c) {\n        if ((&digitalPin)[unsignedPin] == NC) {\n          isValidPin = false;\n        }\n        else {\n          pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n          if (pinMapping == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinMapping = pinNumNametoDigitalPin((&digitalPin)[unsignedPin]);\n            if (pinMapping == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinNumMode(unsignedPin,2);\n        firmata::FirmataClass::setPinMode(&Firmata,pinNum,'\\v');\n        firmata::FirmataClass::setPinState(&Firmata,pinNum,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "set_pin_mode_and_state_080005f8",
                "pin": "pinNum",
                "mode": "pinMode",
                "bVar1": "pinModeResult",
                "PVar2": "pinName",
                "bVar3": "isValidPin",
                "bVar4": "isServoAttached",
                "ulPin": "unsignedPin",
                "uVar6": "pinMapping",
                "uVar8": "analogPinNum",
                "cVar7": "isI2CEnabled",
                "_Var5": "isPWMPin"
            },
            "calling": [
                "systemResetCallback",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [
                "attached",
                "disableI2CPins",
                "setPinMode",
                "setPinState",
                "analogWrite",
                "reportAnalogCallback",
                "digitalWrite",
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "detachServo",
                "getPinMode",
                "sendString",
                "pinMode",
                "attachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_i2_c_pins_08000a64",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2CPins_08000a64(void)\n\n{\n  _Bool isValidPin;\n  uint32_t pinValue;\n  uint index;\n  \n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if (index < 0x3c) {\n      if ((&digitalPin)[index] == NC) {\n        isValidPin = false;\n      }\n      else {\n        pinValue = pinNametoDigitalPin((&digitalPin)[index]);\n        if (pinValue == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinValue = pinNametoDigitalPin((&digitalPin)[index]);\n          if (pinValue == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = pin_in_pinmap((&digitalPin)[index],(PinMap_conflict *)&PinMap_I2C_SDA);\n            if (!isValidPin) {\n              isValidPin = pin_in_pinmap((&digitalPin)[index],(PinMap_conflict *)&PinMap_I2C_SCL);\n            }\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin != false) {\n      setPinModeCallback((byte)index,6);\n    }\n  }\n  isI2CEnabled = true;\n  TwoWire::begin(&Wire);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_i2_c_pins_08000a64",
                "uVar3": "index",
                "_Var1": "isValidPin",
                "uVar2": "pinValue"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "begin",
                "setPinModeCallback",
                "pinNametoDigitalPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_board_08000aec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeBoard_08000aec(void)\n\n{\n  bool bVar1;\n  PinName_conflict PVar2;\n  uint32_t uVar3;\n  byte i;\n  uint uVar4;\n  byte i_1;\n  \n  isResetting = true;\n  if (isI2CEnabled) {\n    disableI2CPins();\n  }\n  for (uVar4 = 0; uVar4 < 5; uVar4 = uVar4 + 1 & 0xff) {\n    reportedPins[uVar4] = '\\0';\n    configuredInputs[uVar4] = '\\0';\n    previousPins[uVar4] = '\\0';\n  }\n  for (uVar4 = 0; uVar4 < 0x3c; uVar4 = uVar4 + 1 & 0xff) {\n    if ((uVar4 - 0x2e & 0xff) < 0xe) {\n      if (uVar4 < 0x3c) {\n        PVar2 = (&digitalPin)[uVar4];\n      }\n      else {\n        PVar2 = NC;\n      }\n      uVar3 = convertPinNameToDigitalPin(PVar2);\n      if (uVar3 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar4 < 0x3c) {\n          PVar2 = (&digitalPin)[uVar4];\n        }\n        else {\n          PVar2 = NC;\n        }\n        uVar3 = convertPinNameToDigitalPin(PVar2);\n        if (uVar3 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      setPinModeCallback((byte)uVar4,2);\n    }\n    else {\n      if ((((uVar4 < 0x3c) && ((&digitalPin)[uVar4] != NC)) &&\n          (uVar3 = convertPinNameToDigitalPin((&digitalPin)[uVar4]), uVar3 != 0)) &&\n         (uVar3 = convertPinNameToDigitalPin((&digitalPin)[uVar4]), uVar3 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        setPinModeCallback((byte)uVar4,1);\n      }\n    }\n    servoPinMap[uVar4] = 0xff;\n  }\n  analogInputsToReport = 0;\n  detachedServoCount = '\\0';\n  servoCount = '\\0';\n  isResetting = false;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_board_08000aec",
                "reportPINs": "reportedPins",
                "portConfigInputs": "configuredInputs",
                "previousPINs": "previousPins",
                "pinNametoDigitalPin": "convertPinNameToDigitalPin"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinNametoDigitalPin",
                "setPinModeCallback",
                "disableI2CPins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_or_skip_digital_port_value_08000be8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid sendOrSkipDigitalPortValue_08000be8(byte portNum,byte pinValue,byte shouldSend)\n\n{\n  byte inputConfig;\n  \n  inputConfig = portConfigInputs[portNum] & pinValue;\n  if ((shouldSend != '\\0') || ((uint)inputConfig != (uint)previousPINs[portNum])) {\n    firmata::FirmataClass::sendDigitalPort(&firmataInstance,portNum,(uint)inputConfig);\n    previousPINs[portNum] = inputConfig;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_or_skip_digital_port_value_08000be8",
                "portNumber": "portNum",
                "portValue": "pinValue",
                "forceSend": "shouldSend",
                "bVar1": "inputConfig",
                "&Firmata": "&firmataInstance"
            },
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c18": {
            "entrypoint": "0x08000c18",
            "current_name": "gpio_pin_report_08000c18",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid gpioPinReport_08000c18(byte pinNumber,int pinValue)\n\n{\n  byte inputConfig;\n  bool valueIsSet;\n  uint32_t digitalPinValue;\n  int digitalPinRead;\n  uchar pinName;\n  uint pinIndex;\n  byte outputValue;\n  \n  pinIndex = (uint)pinNumber;\n  if ((pinIndex < 5) && (pinReports[pinIndex] = (byte)pinValue, pinValue != 0)) {\n    inputConfig = inputConfigurations[pinIndex];\n    pinIndex = (pinIndex & 0x1f) * 8;\n    if (pinIndex < 0x3c) {\n      if ((&allDigitalPins)[pinIndex] == nonConnectedPin) {\n        outputValue = 0;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&allDigitalPins)[pinIndex]);\n        if (digitalPinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&allDigitalPins)[pinIndex]);\n          if (digitalPinValue == 1) {\n            outputValue = 0;\n          }\n          else if ((inputConfig & 1) == 0) {\n            outputValue = 0;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex);\n            if (digitalPinRead == 0) {\n              outputValue = 0;\n            }\n            else {\n              outputValue = 1;\n            }\n          }\n        }\n      }\n    }\n    else {\n      outputValue = 0;\n    }\n    if (pinIndex + 1 < 0x3c) {\n      if ((&DAT_0800a909)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a909)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a909)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 2) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 1);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 2;\n    }\n    if (pinIndex + 2 < 0x3c) {\n      if ((&DAT_0800a90a)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a90a)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a90a)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 4) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 2);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 4;\n    }\n    if (pinIndex + 3 < 0x3c) {\n      if ((&DAT_0800a90b)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a90b)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a90b)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 8) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 3);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 8;\n    }\n    if (pinIndex + 4 < 0x3c) {\n      if ((&DAT_0800a90c)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a90c)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a90c)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 0x10) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 4);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 0x10;\n    }\n    if (pinIndex + 5 < 0x3c) {\n      if ((&DAT_0800a90d)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a90d)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a90d)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 0x20) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 5);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 0x20;\n    }\n    if (pinIndex + 6 < 0x3c) {\n      if ((&DAT_0800a90e)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a90e)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a90e)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 0x40) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 6);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 0x40;\n    }\n    if (pinIndex + 7 < 0x3c) {\n      if ((&DAT_0800a90f)[pinIndex] == nonConnectedPin) {\n        valueIsSet = false;\n      }\n      else {\n        digitalPinValue = nameToDigitalPin((&DAT_0800a90f)[pinIndex]);\n        if (digitalPinValue == 0) {\n          valueIsSet = false;\n        }\n        else {\n          digitalPinValue = nameToDigitalPin((&DAT_0800a90f)[pinIndex]);\n          if (digitalPinValue == 1) {\n            valueIsSet = false;\n          }\n          else if ((inputConfig & 0x80) == 0) {\n            valueIsSet = false;\n          }\n          else {\n            digitalPinRead = readDigitalPin(pinIndex + 7);\n            if (digitalPinRead == 0) {\n              valueIsSet = false;\n            }\n            else {\n              valueIsSet = true;\n            }\n          }\n        }\n      }\n    }\n    else {\n      valueIsSet = false;\n    }\n    if (valueIsSet) {\n      outputValue = outputValue | 0x80;\n    }\n    outputToPort(pinNumber,outputValue,'\\x01');\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c18": "gpio_pin_report_08000c18",
                "port": "pinNumber",
                "value": "pinValue",
                "bVar1": "inputConfig",
                "bVar2": "valueIsSet",
                "uVar3": "digitalPinValue",
                "uVar5": "pinIndex",
                "iVar4": "digitalPinRead",
                "pin": "pinName",
                "portValue": "outputValue",
                "reportPINs": "pinReports",
                "portConfigInputs": "inputConfigurations",
                "digitalPin": "allDigitalPins",
                "NC": "nonConnectedPin",
                "pinNametoDigitalPin": "nameToDigitalPin",
                "digitalRead": "readDigitalPin",
                "outputPort": "outputToPort"
            },
            "calling": [],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "read_and_output_digital_pins_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n/* WARNING: Unknown calling convention */\n\nvoid readAndOutputDigitalPins_08000ef8(void)\n\n{\n  bool isHigh;\n  byte inputConfigByte;\n  uint32_t pinNumber;\n  int pinValue;\n  byte outputValue;\n  \n  inputConfigByte = inputConfig[0];\n  if (reportPins[0] != '\\0') {\n    pinNumber = pinNametoDigitalPin(PA_3);\n    if (pinNumber == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_3);\n      if (pinNumber == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfigByte & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinNumber = pinNametoDigitalPin(PA_2);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_2);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(1);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinNumber = pinNametoDigitalPin(PA_10);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_10);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(2);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinNumber = pinNametoDigitalPin(PB_3);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_3);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(3);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinNumber = pinNametoDigitalPin(PB_5);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_5);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(4);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinNumber = pinNametoDigitalPin(PB_4);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_4);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(5);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinNumber = pinNametoDigitalPin(PB_10);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_10);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(6);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinNumber = pinNametoDigitalPin(PA_8);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_8);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(7);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\0',outputValue,'\\0');\n  }\n  inputConfigByte = inputConfig[1];\n  if (reportPins[1] != '\\0') {\n    pinNumber = pinNametoDigitalPin(PA_9);\n    if (pinNumber == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_9);\n      if (pinNumber == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfigByte & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(8);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinNumber = pinNametoDigitalPin(PC_7);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_7);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(9);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinNumber = pinNametoDigitalPin(PB_6);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_6);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(10);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinNumber = pinNametoDigitalPin(PA_7);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_7);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xb);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinNumber = pinNametoDigitalPin(PA_6);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_6);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xc);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinNumber = pinNametoDigitalPin(PA_5);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_5);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xd);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinNumber = pinNametoDigitalPin(PB_9);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_9);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xe);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinNumber = pinNametoDigitalPin(PB_8);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_8);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0xf);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x01',outputValue,'\\0');\n  }\n  inputConfigByte = inputConfig[2];\n  if (reportPins[2] != '\\0') {\n    pinNumber = pinNametoDigitalPin(PC_10);\n    if (pinNumber == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_10);\n      if (pinNumber == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfigByte & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x10);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinNumber = pinNametoDigitalPin(PC_12);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_12);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x11);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinNumber = pinNametoDigitalPin(PA_13);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_13);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x13);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinNumber = pinNametoDigitalPin(PA_14);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_14);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x14);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinNumber = pinNametoDigitalPin(PA_15);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_15);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x15);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinNumber = pinNametoDigitalPin(PB_7);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_7);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x16);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinNumber = pinNametoDigitalPin(PC_13);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_13);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x17);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x02',outputValue,'\\0');\n  }\n  inputConfigByte = inputConfig[3];\n  if (reportPins[3] != '\\0') {\n    pinNumber = pinNametoDigitalPin(PC_14);\n    if (pinNumber == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_14);\n      if (pinNumber == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfigByte & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x18);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinNumber = pinNametoDigitalPin(PC_15);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_15);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x19);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinNumber = pinNametoDigitalPin(PD_0);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PD_0);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1a);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinNumber = pinNametoDigitalPin(PD_1);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PD_1);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1b);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinNumber = pinNametoDigitalPin(PC_2);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_2);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1c);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinNumber = pinNametoDigitalPin(PC_3);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_3);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1d);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinNumber = pinNametoDigitalPin(PC_11);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_11);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1e);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinNumber = pinNametoDigitalPin(PD_2);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PD_2);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x1f);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x03',outputValue,'\\0');\n  }\n  inputConfigByte = inputConfig[4];\n  if (reportPins[4] != '\\0') {\n    pinNumber = pinNametoDigitalPin(PC_9);\n    if (pinNumber == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_9);\n      if (pinNumber == 1) {\n        outputValue = 0;\n      }\n      else if ((inputConfigByte & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x20);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinNumber = pinNametoDigitalPin(PC_8);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_8);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 2) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x21);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 2;\n    }\n    pinNumber = pinNametoDigitalPin(PC_6);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_6);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 4) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x22);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 4;\n    }\n    pinNumber = pinNametoDigitalPin(PC_5);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PC_5);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 8) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x23);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 8;\n    }\n    pinNumber = pinNametoDigitalPin(PA_12);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_12);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x10) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x24);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x10;\n    }\n    pinNumber = pinNametoDigitalPin(PA_11);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PA_11);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x20) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x25);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x20;\n    }\n    pinNumber = pinNametoDigitalPin(PB_12);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_12);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x40) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x26);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x40;\n    }\n    pinNumber = pinNametoDigitalPin(PB_11);\n    if (pinNumber == 0) {\n      isHigh = false;\n    }\n    else {\n      pinNumber = pinNametoDigitalPin(PB_11);\n      if (pinNumber == 1) {\n        isHigh = false;\n      }\n      else if ((inputConfigByte & 0x80) == 0) {\n        isHigh = false;\n      }\n      else {\n        pinValue = digitalRead(0x27);\n        if (pinValue == 0) {\n          isHigh = false;\n        }\n        else {\n          isHigh = true;\n        }\n      }\n    }\n    if (isHigh) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort('\\x04',outputValue,'\\0');\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "read_and_output_digital_pins_08000ef8",
                "portConfigInputs": "inputConfig",
                "reportPINs": "reportPins",
                "uVar3": "pinNumber",
                "iVar4": "pinValue",
                "bVar1": "isHigh",
                "bVar2": "inputConfigByte",
                "bVar5": "outputValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_firmata_08001b48",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFirmata_08001b48(void)\n\n{\n  firmata::firmataClass::setFirmwareNameAndVersion\n            (&firmata,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/Standardfirmata.ino\",'\\x02',\n             '\\x05');\n  firmata::firmataClass::attach(&firmata,0xe0,analogWriteCallback + 1);\n  firmata::firmataClass::attach(&firmata,0x90,digitalWriteCallback + 1);\n  firmata::firmataClass::attach(&firmata,0xc0,reportAnalogCallback + 1);\n  firmata::firmataClass::attach(&firmata,0xd0,reportDigitalCallback + 1);\n  firmata::firmataClass::attach(&firmata,0xf4,setPinModeCallback + 1);\n  firmata::firmataClass::attach(&firmata,0xf5,setPinValueCallback + 1);\n  firmata::firmataClass::attach(&firmata,0xf0,sysexCallback + 1);\n  firmata::firmataClass::attach(&firmata,0xff,systemResetCallback);\n  firmata::firmataClass::begin(&firmata,0xe100);\n  systemResetCallback();\n  startForkserver(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_firmata_08001b48",
                "Firmata": "firmata"
            },
            "calling": [
                "main"
            ],
            "called": [
                "systemResetCallback",
                "begin",
                "attach",
                "attach",
                "setFirmwareNameAndVersion",
                "startForkserver",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_static_data_08001be8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_data_08001be8(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_static_data_08001be8"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "write_data_08001bf8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writeData_08001bf8(byte inputData)\n\n{\n  void *in_r2;\n  size_t in_r3;\n  \n  TwoWire::write(&Wire,(uint)inputData,in_r2,in_r3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "write_data_08001bf8",
                "data": "inputData"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback"
            ],
            "called": [
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_byte_from_wire_08001c08",
            "code": "\n/* WARNING: Unknown calling convention */\n\nbyte readByteFromWire_08001c08(void)\n\n{\n  ssize_t readResult;\n  int address;\n  void *buffer;\n  size_t size;\n  \n  readResult = TwoWire::read(&Wire,address,buffer,size);\n  return (byte)readResult;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_byte_from_wire_08001c08",
                "in_r1": "address",
                "in_r2": "buffer",
                "in_r3": "size",
                "sVar1": "readResult"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "i2c_data_transfer_08001c18",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid i2cDataTransfer_08001c18(byte deviceAddress,int registerAddress,byte byteCount,byte endTransmissionFlag)\n\n{\n  bool hasData;\n  byte receivedByte;\n  int availableBytes;\n  int availableBytesLoop;\n  uint numBytesConverted;\n  \n  numBytesConverted = (uint)byteCount;\n  if (registerAddress == -1) {\n    registerAddress = 0;\n  }\n  else {\n    TwoWire::beginTransmission(&Wire,deviceAddress);\n    wireWrite((byte)registerAddress);\n    TwoWire::endTransmission(&Wire,endTransmissionFlag);\n  }\n  TwoWire::requestFrom(&Wire,deviceAddress,byteCount);\n  availableBytes = TwoWire::available(&Wire);\n  if ((int)numBytesConverted < availableBytes) {\n    firmata::FirmataClass::sendString(&Firmata,\"I2C: Too many bytes received\");\n  }\n  else {\n    availableBytes = TwoWire::available(&Wire);\n    if (availableBytes < (int)numBytesConverted) {\n      firmata::FirmataClass::sendString(&Firmata,\"I2C: Too few bytes received\");\n    }\n  }\n  i2cRxData[1] = (byte)registerAddress;\n  availableBytes = 0;\n  i2cRxData[0] = deviceAddress;\n  while( true ) {\n    if (availableBytes < (int)numBytesConverted) {\n      availableBytesLoop = TwoWire::available(&Wire);\n      if (availableBytesLoop == 0) {\n        hasData = false;\n      }\n      else {\n        hasData = true;\n      }\n    }\n    else {\n      hasData = false;\n    }\n    if (!hasData) break;\n    receivedByte = wireRead();\n    i2cRxData[availableBytes + 2] = receivedByte;\n    availableBytes = availableBytes + 1;\n  }\n  firmata::FirmataClass::sendSysex(&Firmata,'w',byteCount + '\\x02',i2cRxData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "i2c_data_transfer_08001c18",
                "address": "deviceAddress",
                "theRegister": "registerAddress",
                "numBytes": "byteCount",
                "stopTX": "endTransmissionFlag",
                "bVar1": "hasData",
                "bVar2": "receivedByte",
                "iVar3": "availableBytes",
                "iVar4": "availableBytesLoop",
                "uVar5": "numBytesConverted"
            },
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "called": [
                "wireRead",
                "sendSysex",
                "beginTransmission",
                "available",
                "requestFrom",
                "sendString",
                "endTransmission",
                "wireWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "initialize_firmata_08001cd0",
            "code": "\n/* WARNING: Unknown callindexng conventindexon */\n\nvoindexd initializeFirmata_08001cd0(byte cmd,byte argCount,byte *argValues)\n\n{\n  byte byteVar1;\n  uindexnt8_t deviceAddress;\n  byte byteVar2;\n  byte byteVar3;\n  byte byteVar4;\n  byte slaveAddress;\n  byte data;\n  PindexnName_conflindexct pinName;\n  _Bool pinFound;\n  byte byteVar7;\n  uindexnt32_t uintVar8;\n  indexnt intVar9;\n  indexnt value;\n  byte pinMode;\n  byte byteVar10;\n  byte stopTransmission;\n  byte index;\n  byte index_1;\n  undefindexned1 *pointer;\n  uindexnt uintVar11;\n  uindexnt delayTindexme;\n  byte pindexn_1;\n  undefindexned1 *unknown;\n  sindexze_t size;\n  indexnt maximumPulse;\n  byte pindexn;\n  uindexnt uintVar13;\n  indexnt minimumPulse;\n  indexnt intVar14;\n  bool boolVar15;\n  \n  uintVar13 = (uindexnt)argCount;\n  swindextch(cmd) {\n  case 'index':\n    findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xf0,argValues,(sindexze_t)pointer);\n    findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0x6a,argValues,(sindexze_t)pointer);\n    for (uintVar13 = 0; uintVar13 < 0x3c; uintVar13 = uintVar13 + 1 & 0xff) {\n      uintVar11 = uintVar13 - 0x2e & 0xff;\n      indexf (uintVar11 < 0xe) {\n        indexf (uintVar13 < 0x3c) {\n          pointer = &dindexgindextalPindexn;\n          pinName = (&dindexgindextalPindexn)[uintVar13];\n        }\n        else {\n          pinName = NC;\n        }\n        uintVar8 = pindexnNametoDindexgindextalPindexn(pinName);\n        indexf (uintVar8 == 0) {\n          uintVar11 = 0x7f;\n        }\n        else {\n          indexf (uintVar13 < 0x3c) {\n            pointer = &dindexgindextalPindexn;\n            pinName = (&dindexgindextalPindexn)[uintVar13];\n          }\n          else {\n            pinName = NC;\n          }\n          uintVar8 = pindexnNametoDindexgindextalPindexn(pinName);\n          indexf (uintVar8 == 1) {\n            uintVar11 = 0x7f;\n          }\n        }\n      }\n      else {\n        uintVar11 = 0x7f;\n      }\n      findexrmata::FindexrmataClass::wrindexte(&Findexrmata,uintVar11,argValues,(sindexze_t)pointer);\n    }\n    findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xf7,argValues,(sindexze_t)pointer);\n    break;\n  case 'k':\n    findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xf0,argValues,(sindexze_t)pointer);\n    findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0x6c,argValues,(sindexze_t)pointer);\n    for (uintVar13 = 0; uintVar13 < 0x3c; uintVar13 = uintVar13 + 1 & 0xff) {\n      indexf (uintVar13 < 0x3c) {\n        indexf ((&dindexgindextalPindexn)[uintVar13] == NC) {\n          size = 0;\n        }\n        else {\n          uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n          indexf (uintVar8 == 0) {\n            size = 0;\n          }\n          else {\n            uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n            indexf (uintVar8 == 1) {\n              size = 0;\n            }\n            else {\n              size = 1;\n            }\n          }\n        }\n      }\n      else {\n        size = 0;\n      }\n      indexf (size != 0) {\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0,argValues,size);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,1,argValues,size);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xb,argValues,size);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,1,argValues,size);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,1,argValues,size);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,1,argValues,size);\n      }\n      indexf ((uintVar13 - 0x2e & 0xff) < 0xe) {\n        indexf (uintVar13 < 0x3c) {\n          pinName = (&dindexgindextalPindexn)[uintVar13];\n        }\n        else {\n          pinName = NC;\n        }\n        uintVar8 = pindexnNametoDindexgindextalPindexn(pinName);\n        indexf (uintVar8 == 0) {\n          unknown = (undefindexned1 *)0x0;\n        }\n        else {\n          indexf (uintVar13 < 0x3c) {\n            pinName = (&dindexgindextalPindexn)[uintVar13];\n          }\n          else {\n            pinName = NC;\n          }\n          uintVar8 = pindexnNametoDindexgindextalPindexn(pinName);\n          indexf (uintVar8 == 1) {\n            unknown = (undefindexned1 *)0x0;\n          }\n          else {\n            unknown = (undefindexned1 *)0x1;\n          }\n        }\n      }\n      else {\n        unknown = (undefindexned1 *)0x0;\n      }\n      indexf (unknown != (undefindexned1 *)0x0) {\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,2,argValues,(sindexze_t)unknown);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,10,argValues,(sindexze_t)unknown);\n      }\n      indexf (uintVar13 < 0x3c) {\n        unknown = &dindexgindextalPindexn;\n        indexf ((&dindexgindextalPindexn)[uintVar13] == NC) {\n          pinFound = false;\n        }\n        else {\n          uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n          indexf (uintVar8 == 0) {\n            pinFound = false;\n          }\n          else {\n            unknown = &dindexgindextalPindexn;\n            uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n            indexf (uintVar8 == 1) {\n              pinFound = false;\n            }\n            else {\n              unknown = &dindexgindextalPindexn;\n              pinFound = pindexn_indexn_pindexnmap((&dindexgindextalPindexn)[uintVar13],(PindexnMap_conflindexct *)&PindexnMap_PWM);\n            }\n          }\n        }\n      }\n      else {\n        pinFound = false;\n      }\n      indexf (pinFound != false) {\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,3,argValues,(sindexze_t)unknown);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,8,argValues,(sindexze_t)unknown);\n      }\n      indexf (uintVar13 < 0x3c) {\n        indexf ((&dindexgindextalPindexn)[uintVar13] == NC) {\n          size = 0;\n        }\n        else {\n          uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n          indexf (uintVar8 == 0) {\n            size = 0;\n          }\n          else {\n            uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n            indexf (uintVar8 == 1) {\n              size = 0;\n            }\n            else {\n              size = 1;\n            }\n          }\n        }\n      }\n      else {\n        size = 0;\n      }\n      indexf (size != 0) {\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,4,argValues,size);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xe,argValues,size);\n      }\n      indexf (uintVar13 < 0x3c) {\n        indexf ((&dindexgindextalPindexn)[uintVar13] == NC) {\n          pointer = (undefindexned1 *)0x0;\n        }\n        else {\n          uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n          indexf (uintVar8 == 0) {\n            pointer = (undefindexned1 *)0x0;\n          }\n          else {\n            uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n            indexf (uintVar8 == 1) {\n              pointer = (undefindexned1 *)0x0;\n            }\n            else {\n              pinFound = pindexn_indexn_pindexnmap((&dindexgindextalPindexn)[uintVar13],(PindexnMap_conflindexct *)&PindexnMap_I2C_SDA);\n              pointer = (undefindexned1 *)(uindexnt)pinFound;\n              indexf (pointer == (undefindexned1 *)0x0) {\n                pinFound = pindexn_indexn_pindexnmap((&dindexgindextalPindexn)[uintVar13],(PindexnMap_conflindexct *)&PindexnMap_I2C_SCL);\n                pointer = (undefindexned1 *)(uindexnt)pinFound;\n              }\n            }\n          }\n        }\n      }\n      else {\n        pointer = (undefindexned1 *)0x0;\n      }\n      indexf (pointer != (undefindexned1 *)0x0) {\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,6,argValues,(sindexze_t)pointer);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,1,argValues,(sindexze_t)pointer);\n      }\n      findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0x7f,argValues,(sindexze_t)pointer);\n    }\n    findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xf7,argValues,(sindexze_t)pointer);\n    return;\n  case 'm':\n    indexf (uintVar13 != 0) {\n      byteVar1 = *argValues;\n      findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xf0,argValues,(sindexze_t)pointer);\n      findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0x6e,argValues,(sindexze_t)pointer);\n      findexrmata::FindexrmataClass::wrindexte(&Findexrmata,(uindexnt)byteVar1,argValues,(sindexze_t)pointer);\n      indexf (byteVar1 < 0x3c) {\n        byteVar7 = findexrmata::FindexrmataClass::getPindexnMode(&Findexrmata,byteVar1);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,(uindexnt)byteVar7,argValues,(sindexze_t)pointer);\n        uintVar13 = findexrmata::FindexrmataClass::getPindexnState(&Findexrmata,byteVar1);\n        findexrmata::FindexrmataClass::wrindexte(&Findexrmata,uintVar13 & 0x7f,argValues,(sindexze_t)pointer);\n        uintVar13 = findexrmata::FindexrmataClass::getPindexnState(&Findexrmata,byteVar1);\n        pointer = (undefindexned1 *)0xff80;\n        indexf ((uintVar13 & 0xff80) != 0) {\n          intVar9 = findexrmata::FindexrmataClass::getPindexnState(&Findexrmata,byteVar1);\n          findexrmata::FindexrmataClass::wrindexte(&Findexrmata,(uindexnt)(intVar9 << 0x12) >> 0x19,argValues,(sindexze_t)pointer);\n        }\n        uintVar13 = findexrmata::FindexrmataClass::getPindexnState(&Findexrmata,byteVar1);\n        indexf ((uintVar13 & 0xc000) != 0) {\n          intVar9 = findexrmata::FindexrmataClass::getPindexnState(&Findexrmata,byteVar1);\n          findexrmata::FindexrmataClass::wrindexte(&Findexrmata,(uindexnt)(intVar9 << 0xb) >> 0x19,argValues,(sindexze_t)pointer);\n        }\n      }\n      findexrmata::FindexrmataClass::wrindexte(&Findexrmata,0xf7,argValues,(sindexze_t)pointer);\n      return;\n    }\n    break;\n  case 'o':\n    indexf (1 < uintVar13) {\n      uintVar11 = (uindexnt)argValues[1];\n      indexf (2 < uintVar13) {\n        uintVar11 = uintVar11 | (uindexnt)argValues[2] << 7;\n      }\n      indexf (3 < uintVar13) {\n        uintVar11 = uintVar11 | (uindexnt)argValues[3] << 0xe;\n      }\n      analogWrindexteCallback(*argValues,uintVar11);\n      return;\n    }\n    break;\n  case 'p':\n    indexf (4 < uintVar13) {\n      byteVar1 = *argValues;\n      uintVar13 = (uindexnt)byteVar1;\n      byteVar7 = argValues[1];\n      byteVar2 = argValues[2];\n      byteVar3 = argValues[3];\n      byteVar4 = argValues[4];\n      indexf (uintVar13 < 0x3c) {\n        indexf ((&dindexgindextalPindexn)[uintVar13] == NC) {\n          boolVar15 = false;\n        }\n        else {\n          uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n          indexf (uintVar8 == 0) {\n            boolVar15 = false;\n          }\n          else {\n            uintVar8 = pindexnNametoDindexgindextalPindexn((&dindexgindextalPindexn)[uintVar13]);\n            indexf (uintVar8 == 1) {\n              boolVar15 = false;\n            }\n            else {\n              boolVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar15 = false;\n      }\n      indexf (boolVar15) {\n        indexf (servoPindexnMap[uintVar13] < 0xc) {\n          boolVar15 = Servo::attached(servos + servoPindexnMap[uintVar13]);\n        }\n        else {\n          boolVar15 = false;\n        }\n        indexf (boolVar15 != false) {\n          detachServo(byteVar1);\n        }\n        attachServo(byteVar1,(uindexnt)byteVar7 + (uindexnt)byteVar2 * 0x80,(uindexnt)byteVar3 + (uindexnt)byteVar4 * 0x80);\n        setPindexnModeCallback(byteVar1,4);\n        return;\n      }\n    }\n    break;\n  case 'v':\n    byteVar1 = argValues[1];\n    indexf ((byteVar1 & 0x20) != 0) {\n      findexrmata::FindexrmataClass::sendStrindexng(&Findexrmata,\"10-bindext deviceAddressindexng not supported\");\n      return;\n    }\n    deviceAddress = *argValues;\n    boolVar15 = (byteVar1 & 0x40) == 0;\n    indexf ((byteVar1 & 0x18) < 0x19) {\n      swindextch(byteVar1 & 0x18) {\n      case 0:\n        TwoWindexre::begindexnTransmindexssindexon(&Windexre,deviceAddress);\n        for (uintVar11 = 2; uintVar11 < uintVar13; uintVar11 = uintVar11 + 2 & 0xff) {\n          windexreWrindexte(argValues[uintVar11 + 1] * -0x80 + argValues[uintVar11]);\n        }\n        TwoWindexre::endTransmindexssindexon(&Windexre);\n        return;\n      case 8:\n        indexf (uintVar13 == 6) {\n          intVar9 = (uindexnt)argValues[2] + (uindexnt)argValues[3] * 0x80;\n          byteVar10 = argValues[4] + argValues[5] * -0x80;\n        }\n        else {\n          byteVar10 = argValues[2] + argValues[3] * -0x80;\n          intVar9 = -1;\n        }\n        readAndReportData(deviceAddress,intVar9,byteVar10,boolVar15);\n        return;\n      case 0x10:\n        indexf (queryIndex + 1 < 8) {\n          indexf (uintVar13 == 6) {\n            intVar9 = (uindexnt)argValues[2] + (uindexnt)argValues[3] * 0x80;\n            byteVar10 = argValues[4] + argValues[5] * -0x80;\n          }\n          else {\n            byteVar10 = argValues[2] + argValues[3] * -0x80;\n            intVar9 = -1;\n          }\n          queryIndex = queryIndex + '\\x01';\n          intVar14 = (indexnt)queryIndex;\n          query[intVar14].addr = deviceAddress;\n          query[intVar14].reg = intVar9;\n          query[intVar14].bytes = byteVar10;\n          *(bool *)(intVar14 * 0xc + 0x20000191) = boolVar15;\n          return;\n        }\n        findexrmata::FindexrmataClass::sendStrindexng(&Findexrmata,\"too many querindexes\");\n        return;\n      case 0x18:\n        indexf (queryIndex < 1) {\n          queryIndex = -1;\n          return;\n        }\n      }\n      for (uintVar13 = 0; intVar9 = queryIndex + 1, (indexnt)uintVar13 < intVar9; uintVar13 = uintVar13 + 1 & 0xff) {\n        indexf (deviceAddress == query[uintVar13].addr) goto LAB_08001e66;\n      }\n      uintVar13 = 0;\nLAB_08001e66:\n      for (; (indexnt)uintVar13 < intVar9; uintVar13 = uintVar13 + 1 & 0xff) {\n        indexf (uintVar13 < 8) {\n          intVar14 = uintVar13 + 1;\n          query[uintVar13].addr = query[intVar14].addr;\n          query[uintVar13].reg = query[intVar14].reg;\n          query[uintVar13].bytes = query[intVar14].bytes;\n          query[uintVar13].stopTransmission = query[intVar14].stopTransmission;\n        }\n      }\n      queryIndex = queryIndex + -1;\n      return;\n    }\n    break;\n  case 'x':\n    uintVar11 = (uindexnt)*argValues + (uindexnt)argValues[1] * 0x80;\n    indexf ((1 < uintVar13) && (uintVar11 != 0)) {\n      index2cReadDelayTindexme = uintVar11;\n    }\n    indexf (!indexsI2CEnabled) {\n      enableI2CPindexns();\n      return;\n    }\n    break;\n  case 'z':\n    indexf ((1 < uintVar13) &&\n       (samplindexngIntervalue = (uindexnt)*argValues + (uindexnt)argValues[1] * 0x80, samplindexngIntervalue == 0)) {\n      samplindexngIntervalue = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "initialize_firmata_08001cd0",
                "command": "cmd",
                "argc": "argCount",
                "argv": "argValues",
                "bVar1": "byteVar1",
                "address": "deviceAddress",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "bVar4": "byteVar4",
                "PVar5": "pinName",
                "_Var6": "pinFound",
                "bVar7": "byteVar7",
                "uVar8": "uintVar8",
                "iVar9": "intVar9",
                "val": "value",
                "mode": "pinMode",
                "bVar10": "byteVar10",
                "stopTX": "stopTransmission",
                "i": "index",
                "i_1": "index_1",
                "in_r3": "pointer",
                "uVar11": "uintVar11",
                "__n": "unknown",
                "sVar12": "size",
                "maxPulse": "maximumPulse",
                "uVar13": "uintVar13",
                "minPulse": "minimumPulse",
                "iVar14": "intVar14",
                "bVar15": "boolVar15"
            },
            "calling": [],
            "called": [
                "attached",
                "analogWriteCallback",
                "beginTransmission",
                "readAndReportData",
                "write",
                "getPinState",
                "endTransmission",
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "setPinModeCallback",
                "detachServo",
                "getPinMode",
                "sendString",
                "attachServo",
                "wireWrite",
                "enableI2CPins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "read_and_send_data_080022f8",
            "code": "\n/* WARNING: Unknown callcounterng conventcounteron */\n\nvocounterd readAndSendData_080022f8(vocounterd)\n\n{\n  bool isDigitalPin;\n  PcounternName_conflcounterct pinName;\n  byte pinMode;\n  counternt receivedData;\n  ucounternt32_t digitalPinValue;\n  byte counter;\n  ucounternt index;\n  byte inputPin;\n  ucounternt mappedPin;\n  \n  checkDcountergcountertalInputs();\n  whcounterle (receivedData = fcounterrmata::FcounterrmataClass::avacounterlable(&Fcounterrmata), receivedData != 0) {\n    fcounterrmata::FcounterrmataClass::processInput(&Fcounterrmata);\n  }\n  currentMcounterllcounters = mcounterllcounters();\n  counterf (samplcounterngInterval < currentMcounterllcounters - prevcounterousMcounterllcounters) {\n    prevcounterousMcounterllcounters = prevcounterousMcounterllcounters + samplcounterngInterval;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      mappedPin = index - 0x2e & 0xff;\n      counterf (mappedPin < 0xe) {\n        counterf (index < 0x3c) {\n          pinName = (&dcountergcountertalPcountern)[index];\n        }\n        else {\n          pinName = NC;\n        }\n        digitalPinValue = pcounternNametoDcountergcountertalPcountern(pinName);\n        counterf (digitalPinValue == 0) {\n          isDigitalPin = false;\n        }\n        else {\n          counterf (index < 0x3c) {\n            pinName = (&dcountergcountertalPcountern)[index];\n          }\n          else {\n            pinName = NC;\n          }\n          digitalPinValue = pcounternNametoDcountergcountertalPcountern(pinName);\n          counterf (digitalPinValue == 1) {\n            isDigitalPin = false;\n          }\n          else {\n            pinMode = fcounterrmata::FcounterrmataClass::getPcounternMode(&Fcounterrmata,(byte)index);\n            counterf (pinMode == '\\x02') {\n              isDigitalPin = true;\n            }\n            else {\n              isDigitalPin = false;\n            }\n          }\n        }\n      }\n      else {\n        isDigitalPin = false;\n      }\n      counterf ((isDigitalPin) && ((analogInputsToReport >> mappedPin & 1U) != 0)) {\n        digitalPinValue = analogRead(mappedPin);\n        fcounterrmata::FcounterrmataClass::sendAnalog(&Fcounterrmata,(byte)mappedPin,digitalPinValue);\n      }\n    }\n    counterf (-1 < queryIndex) {\n      for (index = 0; (counternt)index < queryIndex + 1; index = index + 1 & 0xff) {\n        readAndReportData(query[index].addr,query[index].reg,query[index].bytes,query[index].stopTX)\n        ;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "read_and_send_data_080022f8",
                "PVar2": "pinName",
                "bVar1": "isDigitalPin",
                "bVar3": "pinMode",
                "iVar4": "receivedData",
                "uVar5": "digitalPinValue",
                "i": "counter",
                "uVar6": "index",
                "analogPin": "inputPin",
                "ulPin": "mappedPin"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available",
                "analogRead",
                "millis",
                "pinNametoDigitalPin",
                "sendAnalog",
                "checkDigitalInputs",
                "getPinMode",
                "readAndReportData",
                "processInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_servo_pin_status_08002400",
            "code": "\n/* WARNING: Unknown calling convention */\n\nboolean check_servo_pin_status_08002400(timer_sequence16_Sequence_t timer_sequence)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return false;\n    }\n    if (((byte)servo_list[(uint)timer_sequence * 0xc + counter].Pin & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return true;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_servo_pin_status_08002400",
                "timer": "timer_sequence",
                "uVar1": "counter",
                "servos": "servo_list"
            },
            "calling": [
                "attach",
                "detach"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_0800242c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_0800242c(stimer_t *timerObject)\n\n{\n  initializeTimer_0800242cPulse((timerConfig *)timerObject,60000,0x5dc,servoIRQHandler + 1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_0800242c",
                "obj": "timerObject",
                "TimerPulseInit": "initializeTimerPulse",
                "stimer_t_conflict": "timerConfig",
                "ServoIrqHandle": "servoIRQHandler"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "TimerPulseInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002444": {
            "entrypoint": "0x08002444",
            "current_name": "update_servo_channel_08002444",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateServoChannel_08002444(stimer_t *servo,uint32_t channelIndex)\n\n{\n  bool isPinOccupied;\n  uint32_t timerCounter;\n  int channelOffset;\n  uint idx;\n  \n  idx = (uint)servo->idx;\n  if ((servoChannel[idx] & 0x80U) == 0) {\n    channelOffset = idx * 0xc;\n    if (servoChannel[idx] + channelOffset < (int)(uint)totalServos) {\n      if (((byte)servoObjects[servoChannel[idx] + channelOffset].pinNumber & 0x40) == 0) {\n        isPinOccupied = false;\n      }\n      else {\n        isPinOccupied = true;\n      }\n    }\n    else {\n      isPinOccupied = false;\n    }\n    if (isPinOccupied) {\n      writePinState((byte)servoObjects[channelOffset + servoChannel[idx]].pinNumber & 0x3f,0);\n    }\n  }\n  else {\n    initializeTimerCounter((stimer_t_conflict *)servo,0);\n  }\n  servoChannel[idx] = servoChannel[idx] + '\\x01';\n  channelOffset = idx * 0xc;\n  if (servoChannel[idx] + channelOffset < (int)(uint)totalServos) {\n    if (servoChannel[idx] < '\\f') {\n      isPinOccupied = true;\n    }\n    else {\n      isPinOccupied = false;\n    }\n  }\n  else {\n    isPinOccupied = false;\n  }\n  if (isPinOccupied) {\n    if (((byte)servoObjects[servoChannel[idx] + channelOffset].pinNumber & 0x40) != 0) {\n      writePinState((byte)servoObjects[servoChannel[idx] + channelOffset].pinNumber & 0x3f,1);\n    }\n    timerCounter = getTimerCounter((stimer_t_conflict *)servo);\n    setCCRValue((stimer_t_conflict *)servo,channelIndex,\n                   servoObjects[channelOffset + servoChannel[idx]].servoTicks + timerCounter);\n    return;\n  }\n  timerCounter = getTimerCounter((stimer_t_conflict *)servo);\n  if (timerCounter + 4 < 20000) {\n    setCCRValue((stimer_t_conflict *)servo,channelIndex,20000);\n  }\n  else {\n    timerCounter = getTimerCounter((stimer_t_conflict *)servo);\n    setCCRValue((stimer_t_conflict *)servo,channelIndex,timerCounter + 4);\n  }\n  servoChannel[idx] = -1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002444": "update_servo_channel_08002444",
                "obj": "servo",
                "channel": "channelIndex",
                "bVar1": "isPinOccupied",
                "uVar2": "timerCounter",
                "iVar3": "channelOffset",
                "uVar4": "idx",
                "timerChannel": "servoChannel",
                "ServoCount": "totalServos",
                "servos": "servoObjects",
                "Pin": "pinNumber",
                "setTimerCounter": "initializeTimerCounter",
                "digitalWrite": "writePinState",
                "setCCRRegister": "setCCRValue",
                "ticks": "servoTicks"
            },
            "calling": [],
            "called": [
                "digitalWrite",
                "setCCRRegister",
                "setTimerCounter",
                "getTimerCounter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinitialize_timer_pulse_08002578",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid deinitializeTimerPulse_08002578(stimer_t *timerObject)\n\n{\n  TimerPulseDeinit((stimer_t_conflict *)timerObject);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinitialize_timer_pulse_08002578",
                "obj": "timerObject"
            },
            "calling": [
                "detach"
            ],
            "called": [
                "TimerPulseDeinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_servo_08002580",
            "code": "\n/* DWARF original prototype: Servo *  Servo(Servo * servoInstance) */\n\nServo * __servoInstancecall Servo::initializeServo_08002580(Servo *servoInstance)\n\n{\n  uint8_t newServoCount;\n  uint currentServoCount;\n  \n  currentServoCount = (uint)servoCount;\n  if (0xb < currentServoCount) {\n    servoInstance->servoIndex = 0xff;\n    return servoInstance;\n  }\n  newServoCount = servoCount + '\\x01';\n  servoInstance->servoIndex = servoCount;\n  servoCount = newServoCount;\n  servoArray[currentServoCount].ticks = 0x5dc;\n  return servoInstance;\n}\n\n",
            "renaming": {
                "this": "servoInstance",
                "uVar1": "newServoCount",
                "uVar2": "currentServoCount",
                "ServoCount": "servoCount",
                "servos": "servoArray",
                "FUN_08002580": "initialize_servo_08002580"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "attach_080025ac",
            "code": "\n/* DWARF original prototype: uint8_t  attach_080025ac(Servo * servo, int servoPin, int minimumPulse, int maximumPulse) */\n\nuint8_t __servocall Servo::attach_080025ac(Servo *servo,int servoPin,int minimumPulse,int maximumPulse)\n\n{\n  currentTimer16_Sequence_t timerSequence;\n  boolean isTimerActive;\n  currentTimer16_Sequence_t currentTimer;\n  int tempVariable;\n  \n  if (servo->servoIndex < 0xc) {\n    servoPinMode(servoPin,1);\n    servos[servo->servoIndex].Pin =\n         (ServoPin_t)((byte)servos[servo->servoIndex].Pin & 0xc0 | (byte)servoPin & 0x3f);\n    tempVariable = -minimumPulse + 0x220;\n    if (tempVariable < 0) {\n      tempVariable = -minimumPulse + 0x223;\n    }\n    servo->minimumPulse = (int8_t)((uint)(tempVariable << 0x16) >> 0x18);\n    tempVariable = -maximumPulse + 0x960;\n    if (tempVariable < 0) {\n      tempVariable = -maximumPulse + 0x963;\n    }\n    servo->maximumPulse = (int8_t)((uint)(tempVariable << 0x16) >> 0x18);\n    timerSequence = servo->servoIndex / 0xc;\n    isTimerActive = isTimerActive(timerSequence);\n    if (!isTimerActive) {\n      globalTimer.idx = timerSequence;\n      initISR(&globalTimer);\n    }\n    servos[servo->servoIndex].Pin = (ServoPin_t)((byte)servos[servo->servoIndex].Pin | 0x40);\n  }\n  return servo->servoIndex;\n}\n\n",
            "renaming": {
                "this": "servo",
                "pin": "servoPin",
                "min": "minimumPulse",
                "max": "maximumPulse",
                "timer_00": "timerSequence",
                "bVar1": "isTimerActive",
                "timer": "currentTimer",
                "iVar2": "tempVariable",
                "_timer": "globalTimer",
                "FUN_080025ac": "attach_080025ac"
            },
            "calling": [
                "attach",
                "attachServo"
            ],
            "called": [
                "isTimerActive",
                "initISR",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "attach_servo_08002634",
            "code": "\n/* DWARF original prototype: uint8_t  attach(Servo * servo, int servo_pin) */\n\nuint8_t __servocall Servo::attach_servo_08002634(Servo *servo,int servo_pin)\n\n{\n  uint8_t result;\n  \n  result = attach(servo,servo_pin,0x220,0x960);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002634": "attach_servo_08002634",
                "this": "servo",
                "pin": "servo_pin",
                "uVar1": "result"
            },
            "calling": [
                "attachServo"
            ],
            "called": [
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "detach_08002644",
            "code": "\n/* DWARF original prototype: void  detach_08002644(Servo * servo) */\n\nvoid __servocall Servo::detach_08002644(Servo *servo)\n\n{\n  byte index;\n  boolean isActive;\n  \n  index = servo->servoIndex;\n  servos[index].Pin = (ServoPin_t)((byte)servos[index].Pin & 0xbf);\n  isActive = isTimerActive(index / 0xc);\n  if (!isActive) {\n    finISR(&_timer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "detach_08002644",
                "this": "servo",
                "bVar1": "index",
                "bVar2": "isActive"
            },
            "calling": [
                "detachServo"
            ],
            "called": [
                "isTimerActive",
                "finISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_servo_ticks_0800267c",
            "code": "\n/* DWARF original prototype: void  writeMicroseconds(Servo * servoInstance, int microseconds) */\n\nvoid __servoInstancecall Servo::updateServoTicks_0800267c(Servo *servoInstance,int microseconds)\n\n{\n  uint range;\n  int adjustment;\n  \n  if (servoInstance->servoIndex < 0xc) {\n    range = (0x88 - servoInstance->min) * 4;\n    if ((range - microseconds == 0 || (int)range < microseconds) &&\n       (adjustment = 600 - servoInstance->max, range = adjustment * 4,\n       microseconds == range || microseconds + adjustment * -4 < 0 != SBORROW4(microseconds,range))) {\n      range = microseconds;\n    }\n    servos[servoInstance->servoIndex].ticks = range;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "servoInstance",
                "value": "microseconds",
                "uVar1": "range",
                "iVar2": "adjustment",
                "FUN_0800267c": "update_servo_ticks_0800267c"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "map_and_write_servo_080026b0",
            "code": "\n/* DWARF original prototype: void  write(Servo * servo, int value) */\n\nssize_t __servocall Servo::map_and_write_servo_080026b0(Servo *servo,int file_descriptor,void *buffer,size_t buffer_size)\n\n{\n  if (file_descriptor < 0x220) {\n    if (file_descriptor < 0) {\n      file_descriptor = 0;\n    }\n    else if (0xb4 < file_descriptor) {\n      file_descriptor = 0xb4;\n    }\n    file_descriptor = map(file_descriptor,0,0xb4,(0x88 - servo->min) * 4,(600 - servo->max) * 4);\n  }\n  writeMicroseconds(servo,file_descriptor);\n  return (ssize_t)servo;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "map_and_write_servo_080026b0",
                "this": "servo",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "buffer_size"
            },
            "calling": [
                "analogWriteCallback"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "is_servo_attached_080026f8",
            "code": "\n/* DWARF original prototype: bool  attached(Servo * servo) */\n\nbool __servocall Servo::isServoAttached_080026f8(Servo *servo)\n\n{\n  return SUB41(((uint)(byte)allServos[servo->index].servoPin << 0x19) >> 0x1f,0);\n}\n\n",
            "renaming": {
                "FUN_080026f8": "is_servo_attached_080026f8",
                "this": "servo",
                "servos": "allServos",
                "servoIndex": "index",
                "Pin": "servoPin"
            },
            "calling": [
                "setPinModeCallback",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_available_bytes_0800270c",
            "code": "\n/* DWARF original prototype: int  available(TwoWire * wireObject) */\n\nint __wireObjectcall TwoWire::calculateAvailableBytes_0800270c(TwoWire *wireObject)\n\n{\n  return (uint)receiveBufferLength - (uint)receiveBufferIndex;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_available_bytes_0800270c",
                "this": "wireObject",
                "rxBufferLength": "receiveBufferLength",
                "rxBufferIndex": "receiveBufferIndex"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_from_wire_08002720",
            "code": "\n/* DWARF original prototype: int  read(TwoWire * wire) */\n\nssize_t __wirecall TwoWire::readFromWire_08002720(TwoWire *wire,int fileDescriptor,void *buffer,size_t numBytes)\n\n{\n  uint currentIndex;\n  \n  currentIndex = (uint)bufferIndex;\n  if (currentIndex < bufferLength) {\n    bufferIndex = bufferIndex + '\\x01';\n    return (uint)receiveBuffer[currentIndex];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_from_wire_08002720",
                "this": "wire",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "numBytes",
                "uVar1": "currentIndex",
                "rxBufferIndex": "bufferIndex",
                "rxBufferLength": "bufferLength",
                "rxBuffer": "receiveBuffer"
            },
            "calling": [
                "wireRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800274c": {
            "entrypoint": "0x0800274c",
            "current_name": "peek_0800274c",
            "code": "\n/* DWARF original prototype: int  peek_0800274c(TwoWire * wire) */\n\nint __wirecall TwoWire::peek_0800274c(TwoWire *wire)\n\n{\n  if ((uint)currentIndex < (uint)bufferLength) {\n    return (uint)buffer[currentIndex];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_0800274c": "peek_0800274c",
                "this": "wire",
                "rxBufferIndex": "currentIndex",
                "rxBufferLength": "bufferLength",
                "rxBuffer": "buffer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002774": {
            "entrypoint": "0x08002774",
            "current_name": "handle_on_request_08002774",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::handleOnRequest_08002774(void)\n\n{\n  if (onRequestCallback != (functionVoid *)0x0) {\n    bufferIndex = '\\0';\n    bufferLength = '\\0';\n    (*onRequestCallback)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002774": "handle_on_request_08002774",
                "user_onRequest": "onRequestCallback",
                "txBufferIndex": "bufferIndex",
                "txBufferLength": "bufferLength",
                "_func_void": "functionVoid"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002798": {
            "entrypoint": "0x08002798",
            "current_name": "clear_wire_buffers_08002798",
            "code": "\n/* DWARF original prototype: void  flush(TwoWire * wire) */\n\nvoid __wirecall TwoWire::clearWireBuffers_08002798(TwoWire *wire)\n\n{\n  receiveBufferIndex = '\\0';\n  receiveBufferLength = '\\0';\n  if (receiveBuffer != (uint8_t *)0x0) {\n    memset(receiveBuffer,0,(uint)receiveBufferAllocated);\n  }\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  if (transmitBuffer != (uint8_t *)0x0) {\n    memset(transmitBuffer,0,(uint)transmitBufferAllocated);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002798": "clear_wire_buffers_08002798",
                "this": "wire",
                "rxBufferIndex": "receiveBufferIndex",
                "rxBufferLength": "receiveBufferLength",
                "rxBuffer": "receiveBuffer",
                "rxBufferAllocated": "receiveBufferAllocated",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength",
                "txBuffer": "transmitBuffer"
            },
            "calling": [],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "write_data_080027f0",
            "code": "\n/* DWARF original prototype: size_t  write(TwoWire * wire, uint8_t * data, size_t quantity) */\n\nssize_t __wirecall TwoWire::writeData_080027f0(TwoWire *wire,int fileDescriptor,void *data,size_t quantity)\n\n{\n  I2CStatus iVar1;\n  size_t totalSize;\n  \n  if (isTransmitting == '\\0') {\n    iVar1 = i2c_slave_write_IT((I2CType *)&wire->_i2c,(uint8_t *)fileDescriptor,(uint16_t)data);\n    if (iVar1 == I2C_OK) {\n      return (ssize_t)data;\n    }\n    return 0;\n  }\n  totalSize = (uint)bufferLength + (int)data;\n  if (bufferAllocated < totalSize) {\n    if (totalSize < 0x20) {\n      totalSize = 0x20;\n    }\n    buffer = (uint8_t *)realloc(buffer,totalSize);\n    if (buffer == (uint8_t *)0x0) {\n      bufferAllocated = '\\0';\n    }\n    else {\n      bufferAllocated = (uint8_t)totalSize;\n    }\n  }\n  if (buffer == (uint8_t *)0x0) {\n    (wire->super_Stream).super_Print.write_error = 1;\n    return 0;\n  }\n  memcpy(buffer + bufferIndex,(void *)fileDescriptor,(size_t)data);\n  bufferIndex = bufferIndex + (char)data;\n  bufferLength = bufferIndex;\n  return (ssize_t)data;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "write_data_080027f0",
                "this": "wire",
                "__fd": "fileDescriptor",
                "__buf": "data",
                "__n": "quantity",
                "i2c_status_e_conflict": "I2CStatus",
                "__size": "totalSize",
                "transmitting": "isTransmitting",
                "i2c_t_conflict": "I2CType",
                "txBufferLength": "bufferLength",
                "txBufferAllocated": "bufferAllocated",
                "txBuffer": "buffer",
                "txBufferIndex": "bufferIndex"
            },
            "calling": [],
            "called": [
                "i2c_slave_write_IT",
                "realloc",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "write_data_0800288c",
            "code": "\n/* DWARF original prototype: size_t  write(TwoWire * this, uint8_t data) */\n\nssize_t __thiscall TwoWire::writeData_0800288c(TwoWire *this,int fileDescriptor,void *buffer,size_t size)\n\n{\n  i2c_status_e_conflict status;\n  ssize_t result;\n  size_t newSize;\n  uint8_t dataByte;\n  \n  dataByte = (uint8_t)fileDescriptor;\n  if (transmitting == '\\0') {\n    status = i2c_slave_write_IT((i2c_t_conflict *)&this->_i2c,&dataByte,1);\n    if (status == I2C_OK) {\n      result = 1;\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    newSize = txBufferLength + 1;\n    if (txBufferAllocated < newSize) {\n      if (newSize < 0x20) {\n        newSize = 0x20;\n      }\n      txBuffer = (uint8_t *)realloc(txBuffer,newSize);\n      if (txBuffer == (uint8_t *)0x0) {\n        txBufferAllocated = '\\0';\n      }\n      else {\n        txBufferAllocated = (uint8_t)newSize;\n      }\n    }\n    if (txBuffer == (uint8_t *)0x0) {\n      (this->super_Stream).super_Print.write_error = 1;\n      result = 0;\n    }\n    else {\n      txBuffer[txBufferIndex] = dataByte;\n      txBufferIndex = txBufferIndex + '\\x01';\n      result = 1;\n      txBufferLength = txBufferIndex;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "write_data_0800288c",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "size",
                "iVar1": "status",
                "sVar2": "result",
                "__size": "newSize",
                "local_11": "dataByte"
            },
            "calling": [
                "wireWrite"
            ],
            "called": [
                "i2c_slave_write_IT",
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_wire_0800291c",
            "code": "\n/* DWARF original prototype: TwoWire *  TwoWire(TwoWire * wireObject) */\n\nTwoWire * __wireObjectcall TwoWire::initializeWire_0800291c(TwoWire *wireObject)\n\n{\n  (wireObject->super_Stream).super_Print.write_error = 0;\n  (wireObject->super_Stream)._timeout = 1000;\n  (wireObject->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)&PTR_write_1_0800a5a0;\n  (wireObject->_i2c).sda = PB_9;\n  (wireObject->_i2c).scl = PB_8;\n  return wireObject;\n}\n\n",
            "renaming": {
                "this": "wireObject",
                "FUN_0800291c": "initialize_wire_0800291c"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_wire_08002948",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeWire_08002948(int isInitialize,int priority)\n\n{\n  if (isInitialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    WireConstructor(&wire);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_wire_08002948",
                "__initialize_p": "isInitialize",
                "__priority": "priority",
                "TwoWire::TwoWire": "WireConstructor",
                "Wire": "wire"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "called": [
                "TwoWire"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_wire_08002968",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wire, uint8_t deviceAddress) */\n\nvoid __wirecall TwoWire::initializeWire_08002968(TwoWire *wire,uint8_t deviceAddress)\n\n{\n  uint32_t calculatedAddress;\n  i2c_t *obj;\n  \n  receiveBufferIndex = '\\0';\n  receiveBufferLength = '\\0';\n  if (receiveBuffer != (uint8_t *)0x0) {\n    memset(receiveBuffer,0,(uint)receiveBufferAllocated);\n  }\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  if (transmitBuffer != (uint8_t *)0x0) {\n    memset(transmitBuffer,0,(uint)transmitBufferAllocated);\n  }\n  isTransmitting = '\\0';\n  calculatedAddress = (deviceAddress & 0x7f) << 1;\n  wire->calculatedAddress = (uint8_t)calculatedAddress;\n  if (deviceAddress == 0x33) {\n    wire->master = true;\n  }\n  else {\n    wire->master = false;\n  }\n  obj = &wire->i2cObject;\n  i2c_custom_init((i2c_t_conflict *)obj,I2C_100KHz,0x4000,calculatedAddress,wire->master);\n  if (wire->master == false) {\n    i2c_attachSlaveTxEvent((i2c_t_conflict *)obj,onRequestService + 1);\n    i2c_attachSlaveRxEvent((i2c_t_conflict *)obj,onReceiveService + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_wire_08002968",
                "this": "wire",
                "address": "deviceAddress",
                "ownAddress": "calculatedAddress",
                "rxBufferIndex": "receiveBufferIndex",
                "rxBufferLength": "receiveBufferLength",
                "rxBuffer": "receiveBuffer",
                "rxBufferAllocated": "receiveBufferAllocated",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength",
                "txBuffer": "transmitBuffer",
                "txBufferAllocated": "transmitBufferAllocated",
                "transmitting": "isTransmitting",
                "_i2c": "i2cObject"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "memset",
                "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent",
                "i2c_custom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_communication_08002a1c",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wire, int deviceAddress) */\n\nvoid __wirecall TwoWire::initializeCommunication_08002a1c(TwoWire *wire,int deviceAddress)\n\n{\n  begin(wire,(uint8_t)deviceAddress);\n  return;\n}\n\n",
            "renaming": {
                "this": "wire",
                "address": "deviceAddress",
                "FUN_08002a1c": "initialize_communication_08002a1c"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_wire_communication_08002a26",
            "code": "\n/* DWARF original prototype: void  begin(TwoWire * wireInstance) */\n\nvoid __wireInstancecall TwoWire::initializeWireCommunication_08002a26(TwoWire *wireInstance)\n\n{\n  begin(wireInstance,0x33);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_wire_communication_08002a26",
                "this": "wireInstance"
            },
            "calling": [
                "enableI2CPins"
            ],
            "called": [
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_wire_transmission_08002a30",
            "code": "\n/* DWARF original prototype: void  beginTransmission(TwoWire * wireInstance, uint8_t deviceAddress) */\n\nvoid __wireInstancecall TwoWire::initializeWireTransmission_08002a30(TwoWire *wireInstance,uint8_t deviceAddress)\n\n{\n  isTransmitting = '\\x01';\n  transmittingAddress = deviceAddress << 1;\n  transmitBufferIndex = '\\0';\n  transmitBufferLength = '\\0';\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_wire_transmission_08002a30",
                "this": "wireInstance",
                "address": "deviceAddress",
                "transmitting": "isTransmitting",
                "txAddress": "transmittingAddress",
                "txBufferIndex": "transmitBufferIndex",
                "txBufferLength": "transmitBufferLength"
            },
            "calling": [
                "readAndReportData",
                "requestFrom",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "end_transmission_08002a58",
            "code": "\n/* DWARF original prototype: uint8_t  endTransmission_08002a58(TwoWire * wire, uint8_t stopTransmission) */\n\nuint8_t __wirecall TwoWire::endTransmission_08002a58(TwoWire *wire,uint8_t stopTransmission)\n\n{\n  i2c_status_e_conflict status;\n  uint8_t result;\n  \n  if (wire->master == false) {\n    result = '\\x04';\n  }\n  else {\n    status = i2c_master_write((i2c_t_conflict *)&wire->_i2c,txAddress,txBuffer,(ushort)txBufferLength\n                            );\n    if (status == I2C_OK) {\n      result = '\\0';\n    }\n    else if (status == I2C_TIMEOUT) {\n      result = '\\x01';\n    }\n    else {\n      result = '\\x04';\n    }\n    if (txBuffer != (uint8_t *)0x0) {\n      memset(txBuffer,0,(uint)txBufferAllocated);\n    }\n    txBufferIndex = '\\0';\n    txBufferLength = '\\0';\n    transmitting = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "end_transmission_08002a58",
                "this": "wire",
                "sendStop": "stopTransmission",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "endTransmission",
                "readAndReportData",
                "requestFrom"
            ],
            "called": [
                "memset",
                "i2c_master_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "send_transmission_with_flag_08002ac0",
            "code": "\n/* DWARF original prototype: uint8_t  endTransmission(TwoWire * wireObj) */\n\nuint8_t __wireObjcall TwoWire::sendTransmissionWithFlag_08002ac0(TwoWire *wireObj)\n\n{\n  uint8_t result;\n  \n  result = endTransmission(wireObj,'\\x01');\n  return result;\n}\n\n",
            "renaming": {
                "this": "wireObj",
                "uVar1": "result",
                "FUN_08002ac0": "send_transmission_with_flag_08002ac0"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "endTransmission"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "resize_rx_buffer_08002acc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::resizeRxBuffer_08002acc(size_t newSize)\n\n{\n  if (currentSize < newSize) {\n    if (newSize < 0x20) {\n      newSize = 0x20;\n    }\n    newRxBuffer = (uint8_t *)realloc(newRxBuffer,newSize);\n    if (newRxBuffer == (uint8_t *)0x0) {\n      currentSize = '\\0';\n    }\n    else {\n      currentSize = (uint8_t)newSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "resize_rx_buffer_08002acc",
                "length": "newSize",
                "rxBufferAllocated": "currentSize",
                "rxBuffer": "newRxBuffer"
            },
            "calling": [
                "onReceiveService",
                "requestFrom"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b00": {
            "entrypoint": "0x08002b00",
            "current_name": "handle_received_data_08002b00",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid TwoWire::handleReceivedData_08002b00(uint8_t *receivedData,int dataLength)\n\n{\n  if ((receiveCallback != (_func_void_int *)0x0) && (bufferLength <= bufferIndex)) {\n    createRxBuffer(dataLength);\n    if (buffer == (uint8_t *)0x0) {\n      _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/libraries/Wire/src/Wire.cpp\"\n                     ,0x183);\n    }\n    copyData(buffer,receivedData,dataLength);\n    bufferIndex = '\\0';\n    bufferLength = (uint8_t)dataLength;\n    (*receiveCallback)(dataLength);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b00": "handle_received_data_08002b00",
                "inBytes": "receivedData",
                "numBytes": "dataLength",
                "user_onReceive": "receiveCallback",
                "rxBufferLength": "bufferLength",
                "rxBufferIndex": "bufferIndex",
                "allocateRxBuffer": "createRxBuffer",
                "rxBuffer": "buffer",
                "memcpy": "copyData"
            },
            "calling": [],
            "called": [
                "_Error_Handler",
                "allocateRxBuffer",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "request_from_08002b68",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08002bb2 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: uint8_t  requestFrom_08002b68(TwoWire * wire, uint8_t deviceAddress, uint8_t dataLength,\n   uint32_t internalAddress, uint8_t internalSize, uint8_t sendStopFlag) */\n\nuint8_t __wirecall\nTwoWire::requestFrom_08002b68(TwoWire *wire,uint8_t deviceAddress,uint8_t dataLength,uint32_t internalAddress,uint8_t internalSize,\n          uint8_t sendStopFlag)\n\n{\n  i2c_status_e_conflict i2cStatus;\n  uint internalSizeUInt;\n  \n  internalSizeUInt = (uint)internalSize;\n  if (wire->master == false) {\n    return '\\0';\n  }\n  allocateRxBuffer((uint)dataLength);\n  if (receiveBuffer != (uint8_t *)0x0) {\n    if (internalSizeUInt != 0) {\n      startTransmission(wire,deviceAddress);\n      if (3 < internalSizeUInt) {\n        internalSizeUInt = 3;\n      }\n      while( true ) {\n        if (internalSizeUInt == 0) break;\n        (**(wire->super_Stream).super_Print._vptr_Print)\n                  (wire,internalAddress >> ((internalSizeUInt - 1 & 0x1f) << 3) & 0xff);\n        internalSizeUInt = internalSizeUInt - 1 & 0xff;\n      }\n      finishTransmission(wire,'\\0');\n    }\n    i2cStatus = i2c_master_read((i2c_t_conflict *)&wire->_i2c,deviceAddress << 1,receiveBuffer,(ushort)dataLength);\n    if (i2cStatus != I2C_OK) {\n      dataLength = '\\0';\n    }\n    bufferIndex = '\\0';\n    bufferLength = dataLength;\n    return dataLength;\n  }\n  (wire->super_Stream).super_Print.write_error = 1;\n  return '\\0';\n}\n\n",
            "renaming": {
                "this": "wire",
                "address": "deviceAddress",
                "quantity": "dataLength",
                "iaddress": "internalAddress",
                "isize": "internalSize",
                "sendStop": "sendStopFlag",
                "uVar2": "internalSizeUInt",
                "iVar1": "i2cStatus",
                "beginTransmission": "startTransmission",
                "endTransmission": "finishTransmission",
                "rxBuffer": "receiveBuffer",
                "rxBufferIndex": "bufferIndex",
                "rxBufferLength": "bufferLength",
                "FUN_08002b68": "request_from_08002b68"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "beginTransmission",
                "i2c_master_read",
                "allocateRxBuffer",
                "endTransmission"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "request_data_from_slave_08002c00",
            "code": "\n/* DWARF original prototype: uint8_t  requestFrom(TwoWire * wire, uint8_t slaveAddress, uint8_t dataSize,\n   uint8_t sendStop) */\n\nuint8_t __wirecall\nTwoWire::requestDataFromSlave_08002c00(TwoWire *wire,uint8_t slaveAddress,uint8_t dataSize,uint8_t sendStop)\n\n{\n  uint8_t uVar1;\n  \n  uVar1 = requestFrom(wire,slaveAddress,dataSize,0,'\\0',sendStop);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "request_data_from_slave_08002c00",
                "this": "wire",
                "address": "slaveAddress",
                "quantity": "dataSize"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "requestFrom"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "request_from_08002c14",
            "code": "\n/* DWARF original prototype: uint8_t  requestFrom_08002c14(TwoWire * wireObject, uint8_t deviceAddress, uint8_t dataQuantity)\n    */\n\nuint8_t __wireObjectcall TwoWire::requestFrom_08002c14(TwoWire *wireObject,uint8_t deviceAddress,uint8_t dataQuantity)\n\n{\n  uint8_t responseSize;\n  \n  responseSize = requestFrom_08002c14(wireObject,deviceAddress,dataQuantity,'\\x01');\n  return responseSize;\n}\n\n",
            "renaming": {
                "this": "wireObject",
                "address": "deviceAddress",
                "quantity": "dataQuantity",
                "uVar1": "responseSize",
                "FUN_08002c14": "request_from_08002c14"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "requestFrom"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_and_destruct_08002c1e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_and_destruct_08002c1e(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_and_destruct_08002c1e"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "process_analog_command_08002c2c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::processAnalogCommand_08002c2c(void *data,uint8_t commandCode,uint16_t commandValue)\n\n{\n  if (analogCallback != (callback)0x0) {\n    (*analogCallback)(commandCode,(int)commandValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "process_analog_command_08002c2c",
                "param_1": "data",
                "command": "commandCode",
                "value": "commandValue",
                "currentAnalogCallback": "analogCallback",
                "callbackFunction": "callback"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c40": {
            "entrypoint": "0x08002c40",
            "current_name": "handle_digital_command_08002c40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleDigitalCommand_08002c40(void *data,uint8_t digitalCommand,uint16_t digitalValue)\n\n{\n  if (currentDigitalCallback != (callbackFunction)0x0) {\n    (*currentDigitalCallback)(digitalCommand,(int)digitalValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "digitalCommand",
                "value": "digitalValue",
                "FUN_08002c40": "handle_digital_command_08002c40"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "handle_pin_mode_08002c54",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handlePinMode_08002c54(void *dataPointer,uint8_t pinMode,uint16_t pinValue)\n\n{\n  if (callbackFunctionPointer != (callbackFunction)0x0) {\n    (*callbackFunctionPointer)(pinMode,(int)pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "handle_pin_mode_08002c54",
                "param_1": "dataPointer",
                "command": "pinMode",
                "value": "pinValue",
                "currentPinModeCallback": "callbackFunctionPointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c68": {
            "entrypoint": "0x08002c68",
            "current_name": "handle_pin_value_update_08002c68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handlePinValueUpdate_08002c68(void *data,uint8_t pinCommand,uint16_t pinValue)\n\n{\n  if (callback != (pinValueCallback)0x0) {\n    (*callback)(pinCommand,(int)pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c68": "handle_pin_value_update_08002c68",
                "param_1": "data",
                "command": "pinCommand",
                "value": "pinValue",
                "currentPinValueCallback": "callback",
                "callbackFunction": "pinValueCallback"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c7c": {
            "entrypoint": "0x08002c7c",
            "current_name": "process_firmata_command_08002c7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::processFirmataCommand_08002c7c(void *data,uint8_t cmd,uint16_t param)\n\n{\n  if (currentReportAnalogCallback != (callbackFunction)0x0) {\n    (*currentReportAnalogCallback)(cmd,(int)param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "param_1": "data",
                "command": "cmd",
                "value": "param",
                "FUN_08002c7c": "process_firmata_command_08002c7c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c90": {
            "entrypoint": "0x08002c90",
            "current_name": "handle_digital_command_08002c90",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleDigitalCommand_08002c90(void *data,uint8_t digitalCommand,uint16_t digitalValue)\n\n{\n  if (currentReportDigitalCallback != (callbackFunction)0x0) {\n    (*currentReportDigitalCallback)(digitalCommand,(int)digitalValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c90": "handle_digital_command_08002c90",
                "param_1": "data",
                "command": "digitalCommand",
                "value": "digitalValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "handle_string_callback_08002ca4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleStringCallback_08002ca4(void *data,char *stringData)\n\n{\n  if (callbackFunction != (stringCallbackFunction)0x0) {\n    (*callbackFunction)(stringData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "handle_string_callback_08002ca4",
                "param_1": "data",
                "c_str": "stringData",
                "currentStringCallback": "callbackFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb8": {
            "entrypoint": "0x08002cb8",
            "current_name": "process_sysex_command_08002cb8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::processSysexCommand_08002cb8(void *data,uint8_t cmd,size_t argCount,uint8_t *argValues)\n\n{\n  if (sysexCallback != (sysexCallbackFunction)0x0) {\n    (*sysexCallback)(cmd,(uint8_t)argCount,argValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb8": "process_sysex_command_08002cb8",
                "param_1": "data",
                "command": "cmd",
                "argc": "argCount",
                "argv": "argValues",
                "currentSysexCallback": "sysexCallback"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cd0": {
            "entrypoint": "0x08002cd0",
            "current_name": "handle_system_reset_08002cd0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleSystemReset_08002cd0(void *data)\n\n{\n  if (resetCallback != (CallbackFunction)0x0) {\n    (*resetCallback)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cd0": "handle_system_reset_08002cd0",
                "param_1": "data",
                "currentSystemResetCallback": "resetCallback",
                "systemCallbackFunction": "CallbackFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_firmata_08002ce0",
            "code": "\n/* DWARF original prototype: ImprovedFirmata *  ImprovedFirmata(ImprovedFirmata * firmataInstance) */\n\nImprovedFirmata * __firmataInstancecall firmata::ImprovedFirmata::initializeFirmata_08002ce0(ImprovedFirmata *firmataInstance)\n\n{\n  FirmataParser *firmataParser;\n  \n  FirmataMarshaller::FirmataMarshaller(&firmataInstance->firmataMarshaller);\n  firmataParser = &firmataInstance->firmataParserInstance;\n  FirmataParser::FirmataParser(firmataParser,firmataInstance->firmataParserInstanceBuffer,0x40);\n  firmataInstance->versionCount = '\\0';\n  firmataInstance->versionVector = (byte *)0x0;\n  firmataInstance->isBlinkVersionDisabled = false;\n  FirmataParser::attach(firmataParser,0xe0,staticAnalogCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,0x90,staticDigitalCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,0xc0,staticReportAnalogCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,0xd0,staticReportDigitalCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,0xf4,staticPinModeCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,0xf5,staticPinValueCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,'q',staticStringCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,0xf0,staticSysexCallback + 1,(void *)0x0);\n  FirmataParser::attach(firmataParser,'y',staticReportFirmwareCallback + 1,firmataInstance);\n  FirmataParser::attach(firmataParser,0xf9,staticReportVersionCallback + 1,firmataInstance);\n  FirmataParser::attach(firmataParser,0xff,staticSystemResetCallback + 1,(void *)0x0);\n  return firmataInstance;\n}\n\n",
            "renaming": {
                "FirmataClass": "ImprovedFirmata",
                "FUN_08002ce0": "initialize_firmata_08002ce0",
                "this": "firmataInstance",
                "this_00": "firmataParser",
                "marshaller": "firmataMarshaller",
                "parser": "firmataParserInstance",
                "firmwareVersionCount": "versionCount",
                "firmwareVersionVector": "versionVector",
                "blinkVersionDisabled": "isBlinkVersionDisabled"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "attach",
                "attach",
                "attach",
                "FirmataParser",
                "FirmataMarshaller",
                "attach",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_firmata_08002dbc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeFirmata_08002dbc(int isInitialize,int priority)\n\n{\n  if (isInitialize != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    firmata::firmataClass::firmataClass(&firmata);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_firmata_08002dbc",
                "__initialize_p": "isInitialize",
                "__priority": "priority",
                "Firmata": "firmata"
            },
            "calling": [
                "_GLOBAL__sub_I_Firmata"
            ],
            "called": [
                "FirmataClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_version_to_marshaller_08002ddc",
            "code": "\n/* DWARF original prototype: void  printVersion(Firmata * firmataInstance) */\n\nvoid __firmataInstancecall firmata::Firmata::sendVersionToMarshaller_08002ddc(Firmata *firmataInstance)\n\n{\n  FirmataMarshaller::sendVersion(&firmataInstance->marshaller,'\\x02','\\x05');\n  return;\n}\n\n",
            "renaming": {
                "FirmataClass": "Firmata",
                "this": "firmataInstance",
                "FUN_08002ddc": "send_version_to_marshaller_08002ddc"
            },
            "calling": [
                "begin",
                "staticReportVersionCallback"
            ],
            "called": [
                "sendVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dea": {
            "entrypoint": "0x08002dea",
            "current_name": "print_firmata_version_08002dea",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::printFirmataVersion_08002dea(void *ptr_context)\n\n{\n  if (ptr_context != (void *)0x0) {\n    printVersion((FirmataClass *)ptr_context);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dea": "print_firmata_version_08002dea",
                "context": "ptr_context"
            },
            "calling": [],
            "called": [
                "printVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_info_08002df6",
            "code": "\n/* DWARF original prototype: void  printFirmwareVersion(Firmata * firmataObject) */\n\nvoid __firmataObjectcall firmata::Firmata::sendFirmwareVersionInfo_08002df6(Firmata *firmataObject)\n\n{\n  uint8_t *versionPointer;\n  \n  if (firmataObject->versionCount == 0) {\n    return;\n  }\n  versionPointer = firmataObject->versionVector;\n  sendFirmwareVersion\n            (&firmataObject->marshaller,*versionPointer,versionPointer[1],firmataObject->versionCount - 2,versionPointer + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_info_08002df6",
                "FirmataClass": "Firmata",
                "firmwareVersionCount": "versionCount",
                "firmwareVersionVector": "versionVector",
                "FirmataMarshaller::sendFirmwareVersion": "sendFirmwareVersion",
                "this": "firmataObject",
                "puVar1": "versionPointer"
            },
            "calling": [
                "begin",
                "staticReportFirmwareCallback"
            ],
            "called": [
                "sendFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e1a": {
            "entrypoint": "0x08002e1a",
            "current_name": "handle_firmware_version_08002e1a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid firmata::FirmataClass::handleFirmwareVersion_08002e1a(void *firmwareContext,size_t sizeParam2,size_t sizeParam3,char *charParam4)\n\n{\n  if (firmwareContext != (void *)0x0) {\n    printFirmwareVersion((FirmataClass *)firmwareContext);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e1a": "handle_firmware_version_08002e1a",
                "context": "firmwareContext",
                "param_2": "sizeParam2",
                "param_3": "sizeParam3",
                "param_4": "charParam4"
            },
            "calling": [],
            "called": [
                "printFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "initialize_firmata_08002e26",
            "code": "\n/* DWARF original prototype: void  begin(FirmataClastreamObjstreamObj * firmataObj, Stream * streamObj) */\n\nvoid __firmataObjcall firmata::FirmataClastreamObjstreamObj::initializeFirmata_08002e26(FirmataClastreamObjstreamObj *firmataObj,Stream *streamObj)\n\n{\n  firmataObj->streamObj = streamObj;\n  FirmataMarstreamObjhaller::begin(&firmataObj->firmataMarshallerObj,streamObj);\n  printLibraryVersion(firmataObj);\n  printFirmwareLibraryVersion(firmataObj);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "initialize_firmata_08002e26",
                "this": "firmataObj",
                "s": "streamObj",
                "FirmataStream": "streamObj",
                "marshaller": "firmataMarshallerObj",
                "printVersion": "printLibraryVersion",
                "printFirmwareVersion": "printFirmwareLibraryVersion"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "printFirmwareVersion",
                "printVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "set_firmware_name_and_version_08002e44",
            "code": "\n/* DWARF original prototype: void  setFirmwareNameAndVersion_08002e44(FirmataClass * firmataInstance, char * firmwarePath, byte\n   majorVersion, byte minorVersion) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::setFirmwareNameAndVersion_08002e44(FirmataClass *firmataInstance,char *firmwarePath,byte majorVersion,byte minorVersion)\n\n{\n  byte versionCount;\n  char *cppExtension;\n  char *extension;\n  char *lastSlashOrBackslash;\n  char *fileName;\n  byte *firmwareVersionData;\n  size_t nameLength;\n  \n  cppExtension = strstr(firmwarePath,\".cpp\");\n  lastSlashOrBackslash = strrchr(firmwarePath,0x2f);\n  if (lastSlashOrBackslash == (char *)0x0) {\n    lastSlashOrBackslash = strrchr(firmwarePath,0x5c);\n  }\n  if (lastSlashOrBackslash != (char *)0x0) {\n    firmwarePath = lastSlashOrBackslash + 1;\n  }\n  if (cppExtension == (char *)0x0) {\n    nameLength = strlen(firmwarePath);\n    firmataInstance->firmwareVersionCount = (char)nameLength + '\\x02';\n  }\n  else {\n    firmataInstance->firmwareVersionCount = ((char)cppExtension - (char)firmwarePath) + '\\x02';\n  }\n  free(firmataInstance->firmwareVersionVector);\n  versionCount = firmataInstance->firmwareVersionCount;\n  firmwareVersionData = (byte *)malloc(versionCount + 1);\n  firmataInstance->firmwareVersionVector = firmwareVersionData;\n  firmwareVersionData[versionCount] = '\\0';\n  *firmwareVersionData = majorVersion;\n  firmwareVersionData[1] = minorVersion;\n  strncpy((char *)(firmwareVersionData + 2),firmwarePath,firmataInstance->firmwareVersionCount - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "set_firmware_name_and_version_08002e44",
                "this": "firmataInstance",
                "name": "firmwarePath",
                "major": "majorVersion",
                "minor": "minorVersion",
                "pcVar2": "cppExtension",
                "pcVar3": "lastSlashOrBackslash",
                "firmwareName": "fileName",
                "pbVar4": "firmwareVersionData",
                "sVar5": "nameLength",
                "bVar1": "versionCount"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "free",
                "strrchr",
                "strncpy",
                "strstr",
                "strlen",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "get_available_08002ec4",
            "code": "\n/* DWARF original prototype: int  available(FirmataClass * instance) */\n\nint __instancecall firmata::FirmataClass::getAvailable_08002ec4(FirmataClass *instance)\n\n{\n  int result;\n  \n  result = (*(instance->FirmataStream->super_Print)._vptr_Print[2])();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "get_available_08002ec4",
                "this": "instance",
                "iVar1": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_input_08002ed2",
            "code": "\n/* DWARF original prototype: void  processInput_08002ed2(FirmataClass * firmataInstance) */\n\nvoid __firmataInstancecall firmata::FirmataClass::processInput_08002ed2(FirmataClass *firmataInstance)\n\n{\n  int inputByte;\n  int inputByte;\n  \n  inputByte = (*(firmataInstance->FirmataStream->super_Print)._vptr_Print[3])();\n  if (inputByte != -1) {\n    FirmataParser::parse(&firmataInstance->parser,(uint8_t)inputByte);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "this": "firmataInstance",
                "iVar1": "inputByte",
                "inputData": "inputByte"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "parse"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_value_08002ef2",
            "code": "\n/* DWARF original prototype: void  sendAnalog(FirmataClass * firmataObject, byte analogPin, int analogValue) */\n\nvoid __firmataObjectcall firmata::FirmataClass::sendAnalogValue_08002ef2(FirmataClass *firmataObject,byte analogPin,int analogValue)\n\n{\n  FirmataMarshaller::sendAnalog(&firmataObject->marshaller,analogPin,(uint16_t)analogValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "send_analog_value_08002ef2",
                "this": "firmataObject",
                "pin": "analogPin",
                "value": "analogValue"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_digital_port_improved_08002efe",
            "code": "\n/* DWARF original prototype: void  sendDigitalPort(FirmataClass * firmataInstance, byte portNum, int\n   data) */\n\nvoid __firmataInstancecall firmata::FirmataClass::sendDigitalPortImproved_08002efe(FirmataClass *firmataInstance,byte portNum,int data)\n\n{\n  FirmataMarshaller::sendDigitalPort(&firmataInstance->marshaller,portNum,(uint16_t)data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "send_digital_port_improved_08002efe",
                "this": "firmataInstance",
                "portNumber": "portNum",
                "portData": "data"
            },
            "calling": [
                "outputPort"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_sysex_data_08002f0a",
            "code": "\n/* DWARF original prototype: void  sendSysex(FirmataClass * firmataInstance, byte sysexCommand, byte numBytes, byte *\n   byteValues) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::sendSysexData_08002f0a(FirmataClass *firmataInstance,byte sysexCommand,byte numBytes,byte *byteValues)\n\n{\n  marshaller::sendSysex(&firmataInstance->marshaller,sysexCommand,(uint)numBytes,byteValues);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_sysex_data_08002f0a",
                "this": "firmataInstance",
                "command": "sysexCommand",
                "bytec": "numBytes",
                "bytev": "byteValues",
                "FirmataMarshaller": "marshaller"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_improved_08002f14",
            "code": "\n/* DWARF original prototype: void  sendString(FirmataInstance * firmataInstance, char * inputString) */\n\nvoid __firmataInstancecall firmata::FirmataInstance::sendStringImproved_08002f14(FirmataInstance *firmataInstance,char *inputString)\n\n{\n  MarshallerInstance::sendString(&firmataInstance->marshaller,inputString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_improved_08002f14",
                "this": "firmataInstance",
                "string": "inputString",
                "FirmataClass": "FirmataInstance",
                "FirmataMarshaller": "MarshallerInstance"
            },
            "calling": [
                "setPinModeCallback",
                "readAndReportData",
                "attachServo",
                "sysexCallback"
            ],
            "called": [
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "write_to_stream_08002f1e",
            "code": "\n/* DWARF original prototype: void  write(FirmataClass * firmataObj, byte c) */\n\nssize_t __firmataObjcall\nfirmata::FirmataClass::writeToStream_08002f1e(FirmataClass *firmataObj,int fileDescriptor,void *buffer,size_t bufferSize)\n\n{\n  int returnValue;\n  \n  returnValue = (**(firmataObj->FirmataStream->super_Print)._vptr_Print)();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "write_to_stream_08002f1e",
                "this": "firmataObj",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__n": "bufferSize",
                "iVar1": "returnValue"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "set_callback_function_08002f2c",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataObj, uint8_t cmd, callbackFunction\n   callbackFunc) */\n\nvoid __firmataObjcall\nfirmata::FirmataClass::setCallbackFunction_08002f2c(FirmataClass *firmataObj,uint8_t cmd,callbackFunction callbackFunc)\n\n{\n  callbackFunction tempCallback;\n  \n  if (cmd == 0xd0) {\n    currentReportDigitalCallback = callbackFunc;\n    return;\n  }\n  if (0xd0 < cmd) {\n    if (cmd == 0xf4) {\n      currentPinModeCallback = callbackFunc;\n      return;\n    }\n    tempCallback = callbackFunc;\n    if ((cmd != 0xf5) && (tempCallback = currentPinValueCallback, cmd == 0xe0)) {\n      currentAnalogCallback = callbackFunc;\n      return;\n    }\n    currentPinValueCallback = tempCallback;\n    return;\n  }\n  if (cmd == 0x90) {\n    currentDigitalCallback = callbackFunc;\n    return;\n  }\n  if (cmd != 0xc0) {\n    return;\n  }\n  currentReportAnalogCallback = callbackFunc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "set_callback_function_08002f2c",
                "this": "firmataObj",
                "command": "cmd",
                "newFunction": "callbackFunc",
                "p_Var1": "tempCallback"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "handle_system_callback_08002f84",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataInstance, uint8_t callbackCommand,\n   systemCallbackFunction callbackFunction) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::handleSystemCallback_08002f84(FirmataClass *firmataInstance,uint8_t callbackCommand,systemCallbackFunction callbackFunction)\n\n{\n  if (callbackCommand == 0xff) {\n    systemResetCallback = callbackFunction;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "handle_system_callback_08002f84",
                "this": "firmataInstance",
                "command": "callbackCommand",
                "newFunction": "callbackFunction",
                "currentSystemResetCallback": "systemResetCallback"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_sysex_callback_08002f94",
            "code": "\n/* DWARF original prototype: void  attach(FirmataClass * firmataInstance, uint8_t newCommand,\n   sysexCallbackFunction callbackFunction) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::setSysexCallback_08002f94(FirmataClass *firmataInstance,uint8_t newCommand,sysexCallbackFunction callbackFunction)\n\n{\n  currentSysexCallback = callbackFunction;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_sysex_callback_08002f94",
                "this": "firmataInstance",
                "command": "newCommand",
                "newFunction": "callbackFunction"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_pin_mode_08002fa0",
            "code": "\n/* DWARF original prototype: byte  getPinMode_08002fa0(FirmataClass * firmataObject, byte pinNumber) */\n\nbyte __firmataObjectcall firmata::FirmataClass::getPinMode_08002fa0(FirmataClass *firmataObject,byte pinNumber)\n\n{\n  return firmataObject->pinConfigArray[pinNumber];\n}\n\n",
            "renaming": {
                "this": "firmataObject",
                "pin": "pinNumber",
                "pinConfig": "pinConfigArray",
                "FUN_08002fa0": "get_pin_mode_08002fa0"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "setPinModeCallback",
                "loop",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_pin_config_08002fa8",
            "code": "\n/* DWARF original prototype: void  setPinMode(FirmataClass * firmataObj, byte pinNumber, byte newConfig) */\n\nvoid __firmataObjcall firmata::FirmataClass::updatePinConfig_08002fa8(FirmataClass *firmataObj,byte pinNumber,byte newConfig)\n\n{\n  if (firmataObj->pinNumberConfig[pinNumber] != '\\x7f') {\n    firmataObj->pinNumberConfig[pinNumber] = newConfig;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_pin_config_08002fa8",
                "this": "firmataObj",
                "pin": "pinNumber",
                "config": "newConfig"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_pin_state_08002fba",
            "code": "\n/* DWARF original prototype: int  getPinState_08002fba(Firmata * firmataInstance, byte pinNumber) */\n\nint __firmataInstancecall firmata::Firmata::getPinState_08002fba(Firmata *firmataInstance,byte pinNumber)\n\n{\n  return firmataInstance->pinNumberState[pinNumber];\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_pin_state_08002fba",
                "FirmataClass": "Firmata",
                "this": "firmataInstance",
                "pin": "pinNumber"
            },
            "calling": [
                "digitalWriteCallback",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "set_pin_state_08002fc2",
            "code": "\n/* DWARF original prototype: void  setPinState_08002fc2(FirmataClass * firmataObject, byte pinNumber, int newState) */\n\nvoid __firmataObjectcall firmata::FirmataClass::setPinState_08002fc2(FirmataClass *firmataObject,byte pinNumber,int newState)\n\n{\n  firmataObject->pinNumberState[pinNumber] = newState;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "set_pin_state_08002fc2",
                "pin": "pinNumber",
                "state": "newState",
                "this": "firmataObject"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "strobe_blink_pin_08002fca",
            "code": "\n/* DWARF original prototype: void  strobeBlinkPin_08002fca(FirmataClass * firmataInstance, byte blinkPin, int blinkCount, int\n   onDuration, int offDuration) */\n\nvoid __firmataInstancecall\nfirmata::FirmataClass::strobeBlinkPin_08002fca(FirmataClass *firmataInstance,byte blinkPin,int blinkCount,int onDuration,int offDuration)\n\n{\n  uint iteration;\n  \n  for (iteration = 0; (int)iteration < blinkCount; iteration = iteration + 1 & 0xff) {\n    delay(offDuration);\n    digitalWrite((uint)blinkPin,1);\n    delay(onDuration);\n    digitalWrite((uint)blinkPin,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "strobe_blink_pin_08002fca",
                "this": "firmataInstance",
                "pin": "blinkPin",
                "count": "blinkCount",
                "onInterval": "onDuration",
                "offInterval": "offDuration",
                "uVar1": "iteration"
            },
            "calling": [
                "blinkVersion"
            ],
            "called": [
                "digitalWrite",
                "delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "blink_version_08003002",
            "code": "\n/* DWARF original prototype: void  blinkVersion_08003002(FirmataClass * firmataObject) */\n\nvoid __firmataObjectcall firmata::FirmataClass::blinkVersion_08003002(FirmataClass *firmataObject)\n\n{\n  if (firmataObject->isBlinkVersionDisabled != false) {\n    return;\n  }\n  setPinMode(0xd,1);\n  performBlink(firmataObject,'\\r',2,0x28,0xd2);\n  pause(0xfa);\n  performBlink(firmataObject,'\\r',5,0x28,0xd2);\n  pause(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "blink_version_08003002",
                "this": "firmataObject",
                "blinkVersionDisabled": "isBlinkVersionDisabled",
                "pinMode": "setPinMode",
                "strobeBlinkPin": "performBlink",
                "delay": "pause"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "strobeBlinkPin",
                "delay",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_firmata_08003048",
            "code": "\n/* DWARF original prototype: void  initializeSerialCommunication(FirmataClass * firmataInstance, long baudRate) */\n\nvoid __firmataInstancecall firmata::FirmataClass::initializeFirmata_08003048(FirmataClass *firmataInstance,long baudRate)\n\n{\n  setSerialSpeed(serialPort,baudRate,'\\x06');\n  blinkFirmwareVersion(firmataInstance);\n  initializeSerialCommunication(firmataInstance,serialPort.super_Stream);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_firmata_08003048",
                "this": "firmataInstance",
                "speed": "baudRate",
                "HardwareSerial::begin": "setSerialSpeed",
                "&Serial2": "serialPort",
                "blinkVersion": "blinkFirmwareVersion",
                "begin": "initializeSerialCommunication"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "begin",
                "blinkVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "initialize_static_variables_0800306c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_0800306c(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "initialize_static_variables_0800306c"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "encode_byte_stream_0800307a",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003102 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  encodeByteStream_0800307a(FirmataMarshaller * marshaller, size_t byteCount, uint8_t\n   * byteArray, size_t maxBytes) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::encodeByteStream_0800307a(FirmataMarshaller *marshaller,size_t byteCount,uint8_t *byteArray,size_t maxBytes)\n\n{\n  uint8_t currentByte;\n  uint8_t bitCache;\n  uint lowerByte;\n  uint bitOffset;\n  uint byteIndex;\n  uint byteCounter;\n  \n  lowerByte = (uint)*byteArray;\n  if (maxBytes == 0) {\n    maxBytes = 0xffffffff;\n  }\n  byteCounter = 0;\n  bitOffset = 0;\n  byteIndex = 0;\n  while ((byteCounter < byteCount && (byteIndex < maxBytes))) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)\n              (marshaller->FirmataStream,((uint)byteArray[byteCounter] << (bitOffset & 0xff) | lowerByte) & 0x7f);\n    lowerByte = (int)(uint)byteArray[byteCounter] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((byteIndex = byteIndex + 1, 6 < bitOffset && (byteIndex < maxBytes))) {\n      (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,lowerByte & 0x7f);\n      lowerByte = lowerByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    byteCounter = byteCounter + 1;\n  }\n  if ((bitOffset != 0) && (byteIndex < maxBytes)) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)\n              (marshaller->FirmataStream,(1 << (bitOffset & 0xff)) - 1U & lowerByte);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "encode_byte_stream_0800307a",
                "this": "marshaller",
                "bytec": "byteCount",
                "bytev": "byteArray",
                "max_bytes": "maxBytes",
                "transmit_byte": "currentByte",
                "outstanding_bit_cache": "bitCache",
                "uVar1": "lowerByte",
                "uVar2": "bitOffset",
                "uVar3": "byteIndex",
                "uVar4": "byteCounter"
            },
            "calling": [
                "sendFirmwareVersion",
                "sendSysex",
                "sendAnalog",
                "sendExtendedAnalog",
                "sendDigitalPort"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "send_extended_analog_08003106",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0800311e */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendExtendedAnalog_08003106(FirmataMarshaller * marshaller, uint8_t pinNumber, size_t\n   byteCount, uint8_t * byteValues) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendExtendedAnalog_08003106(FirmataMarshaller *marshaller,uint8_t pinNumber,size_t byteCount,uint8_t *byteValues)\n\n{\n  if (marshaller->stream != (Stream *)0x0) {\n    (**(marshaller->stream->super_Print)._vptr_Print)(marshaller,0xf0);\n    (**(marshaller->stream->super_Print)._vptr_Print)(marshaller->stream,0x6f);\n    (**(marshaller->stream->super_Print)._vptr_Print)(marshaller->stream,(uint)pinNumber);\n    encodeByteStream(marshaller,byteCount,byteValues,byteCount);\n    (**(marshaller->stream->super_Print)._vptr_Print)(marshaller->stream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "send_extended_analog_08003106",
                "this": "marshaller",
                "pin": "pinNumber",
                "bytec": "byteCount",
                "bytev": "byteValues",
                "FirmataStream": "stream"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_firmata_marshaller_0800314e",
            "code": "\n/* DWARF original prototype: FirmataMarshallerInitializer *  FirmataMarshallerInitializer(FirmataMarshallerInitializer * marshallerInstance) */\n\nFirmataMarshallerInitializer * __marshallerInstancecall firmata::FirmataMarshallerInitializer::initializeFirmataMarshaller_0800314e(FirmataMarshallerInitializer *marshallerInstance)\n\n{\n  marshallerInstance->FirmataStream = (Stream *)0x0;\n  return marshallerInstance;\n}\n\n",
            "renaming": {
                "FirmataMarshaller": "FirmataMarshallerInitializer",
                "FUN_0800314e": "initialize_firmata_marshaller_0800314e",
                "this": "marshallerInstance"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "initialize_firmata_marshaller_08003154",
            "code": "\n/* DWARF original prototype: void  begin(FirmataMarstreamhaller * marshaller, Stream * stream) */\n\nvoid __marshallercall firmata::FirmataMarstreamhaller::initializeFirmataMarshaller_08003154(FirmataMarstreamhaller *marshaller,Stream *stream)\n\n{\n  marshaller->firmataStream = stream;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "initialize_firmata_marshaller_08003154",
                "this": "marshaller",
                "s": "stream",
                "FirmataStream": "firmataStream"
            },
            "calling": [
                "begin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "send_analog_08003158",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x0800318c */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendAnalog_08003158(FirmataMarshaller * marshaller, uint8_t analogPin, uint16_t analogValue)\n    */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendAnalog_08003158(FirmataMarshaller *marshaller,uint8_t analogPin,uint16_t analogValue)\n\n{\n  uint16_t encodedValue;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    encodedValue = analogValue;\n    if ((analogPin < 0x10) && (analogValue < 0x4000)) {\n      (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,analogPin | 0xe0);\n      encodeByteStream(marshaller,2,(uint8_t *)&encodedValue,2);\n    }\n    else {\n      sendExtendedAnalog(marshaller,analogPin,2,(uint8_t *)&encodedValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "send_analog_08003158",
                "this": "marshaller",
                "pin": "analogPin",
                "value": "analogValue",
                "local_a": "encodedValue"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "sendExtendedAnalog",
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "send_digital_port_0800319e",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x080031ba */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendDigitalPort_0800319e(FirmataMarshaller * marshaller, uint8_t port,\n   uint16_t data) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendDigitalPort_0800319e(FirmataMarshaller *marshaller,uint8_t port,uint16_t data)\n\n{\n  uint16_t encodedData;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    encodedData = data;\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,port & 0xf | 0x90);\n    encodeByteStream(marshaller,2,(uint8_t *)&encodedData,2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "portNumber": "port",
                "portData": "data",
                "local_a": "encodedData",
                "FUN_0800319e": "send_digital_port_0800319e"
            },
            "calling": [
                "sendDigitalPort"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "send_firmware_version_080031ce",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x080031e8 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendFirmwareVersion_080031ce(FirmataMarshaller * marshaller, uint8_t firmwareMajor,\n   uint8_t firmwareMinor, size_t byteCount, uint8_t * byteValues) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendFirmwareVersion_080031ce(FirmataMarshaller *marshaller,uint8_t firmwareMajor,uint8_t firmwareMinor,size_t byteCount,uint8_t *byteValues)\n\n{\n  _func_int_varargs *printFunc;\n  uint uVar2;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    printFunc = *(marshaller->FirmataStream->super_Print)._vptr_Print;\n    (*printFunc)(marshaller,0xf0,(uint)firmwareMinor,printFunc,byteCount);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0x79);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)firmwareMajor);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)firmwareMinor);\n    for (uVar2 = 0; uVar2 < byteCount; uVar2 = uVar2 + 1) {\n      encodeByteStream(marshaller,1,byteValues + uVar2,0);\n    }\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "major": "firmwareMajor",
                "minor": "firmwareMinor",
                "bytec": "byteCount",
                "bytev": "byteValues",
                "p_Var1": "printFunc",
                "FUN_080031ce": "send_firmware_version_080031ce"
            },
            "calling": [
                "printFirmwareVersion"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "send_version_0800322c",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003240 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendVersion_0800322c(FirmataMarshaller * marshaller, uint8_t majorVersion, uint8_t\n   minorVersion) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendVersion_0800322c(FirmataMarshaller *marshaller,uint8_t majorVersion,uint8_t minorVersion)\n\n{\n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf9);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)majorVersion);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)minorVersion);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "marshaller",
                "major": "majorVersion",
                "minor": "minorVersion",
                "FUN_0800322c": "send_version_0800322c"
            },
            "calling": [
                "printVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "send_sysex_0800325a",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08003272 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: void  sendSysex_0800325a(FirmataMarshaller * marshaller, uint8_t sysexCommand, size_t\n   byteCount, uint8_t * byteValues) */\n\nvoid __marshallercall\nfirmata::FirmataMarshaller::sendSysex_0800325a(FirmataMarshaller *marshaller,uint8_t sysexCommand,size_t byteCount,uint8_t *byteValues)\n\n{\n  uint index;\n  \n  if (marshaller->FirmataStream != (Stream *)0x0) {\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller,0xf0);\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,(uint)sysexCommand);\n    for (index = 0; index < byteCount; index = index + 1) {\n      encodeByteStream(marshaller,1,byteValues + index,0);\n    }\n    (**(marshaller->FirmataStream->super_Print)._vptr_Print)(marshaller->FirmataStream,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "send_sysex_0800325a",
                "this": "marshaller",
                "command": "sysexCommand",
                "bytec": "byteCount",
                "bytev": "byteValues",
                "uVar1": "index"
            },
            "calling": [
                "sendSysex",
                "sendString"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_string_decomposed_080032a2",
            "code": "\n/* DWARF original prototype: void  sendString(FirmataMarshaller * marshaller, char * message) */\n\nvoid __marshallercall firmata::FirmataMarshaller::sendString_Decomposed_080032a2(FirmataMarshaller *marshaller,char *message)\n\n{\n  size_t messageLength;\n  \n  messageLength = strlen(message);\n  sendSysex(marshaller,'q',messageLength,(uint8_t *)message);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "send_string_decomposed_080032a2",
                "this": "marshaller",
                "string": "message",
                "bytec": "messageLength"
            },
            "calling": [
                "sendString"
            ],
            "called": [
                "sendSysex",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_firmata_parser_080032bc",
            "code": "\n/* DWARF original prototype: FirmataParser *  FirmataParser(FirmataParser * parser, uint8_t *\n   buffer, size_t bufferSize) */\n\nFirmataParser * __parsercall\nfirmata::FirmataParser::initializeFirmataParser_080032bc(FirmataParser *parser,uint8_t *buffer,size_t bufferSize)\n\n{\n  parser->buffer = buffer;\n  parser->bufferSize = bufferSize;\n  parser->multiByteCommand = '\\0';\n  parser->channel = '\\0';\n  parser->wait = 0;\n  parser->sysexParsing = false;\n  parser->sysexBytesRead = 0;\n  parser->analogCallbackContext = (void *)0x0;\n  parser->digitalCallbackContext = (void *)0x0;\n  parser->reportAnalogCallbackContext = (void *)0x0;\n  parser->reportDigitalCallbackContext = (void *)0x0;\n  parser->pinModeCallbackContext = (void *)0x0;\n  parser->pinValueCallbackContext = (void *)0x0;\n  parser->reportFirmwareCallbackContext = (void *)0x0;\n  parser->reportVersionCallbackContext = (void *)0x0;\n  parser->dataBufferOverflowCallbackContext = (void *)0x0;\n  parser->stringCallbackContext = (void *)0x0;\n  parser->sysexCallbackContext = (void *)0x0;\n  parser->systemResetCallbackContext = (void *)0x0;\n  parser->analogCallback = (callbackFunction)0x0;\n  parser->digitalCallback = (callbackFunction)0x0;\n  parser->reportAnalogCallback = (callbackFunction)0x0;\n  parser->reportDigitalCallback = (callbackFunction)0x0;\n  parser->pinModeCallback = (callbackFunction)0x0;\n  parser->pinValueCallback = (callbackFunction)0x0;\n  parser->dataBufferOverflowCallback = (bufferOverflowCallbackFunction)0x0;\n  parser->stringCallback = (stringCallbackFunction)0x0;\n  parser->sysexCallback = (sysexCallbackFunction)0x0;\n  parser->reportFirmwareCallback = (versionCallbackFunction)0x0;\n  parser->reportVersionCallback = (systemCallbackFunction)0x0;\n  parser->systemResetCallback = (systemCallbackFunction)0x0;\n  parser->allowBufferUpdate = buffer == (uint8_t *)0x0;\n  return parser;\n}\n\n",
            "renaming": {
                "this": "parser",
                "dataBuffer": "buffer",
                "dataBufferSize": "bufferSize",
                "executeMultiByteCommand": "multiByteCommand",
                "multiByteChannel": "channel",
                "waitForData": "wait",
                "parsingSysex": "sysexParsing",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentReportAnalogCallbackContext": "reportAnalogCallbackContext",
                "currentReportDigitalCallbackContext": "reportDigitalCallbackContext",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "currentReportFirmwareCallbackContext": "reportFirmwareCallbackContext",
                "currentReportVersionCallbackContext": "reportVersionCallbackContext",
                "currentDataBufferOverflowCallbackContext": "dataBufferOverflowCallbackContext",
                "currentStringCallbackContext": "stringCallbackContext",
                "currentSysexCallbackContext": "sysexCallbackContext",
                "currentSystemResetCallbackContext": "systemResetCallbackContext",
                "currentAnalogCallback": "analogCallback",
                "currentDigitalCallback": "digitalCallback",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinValueCallback": "pinValueCallback",
                "currentDataBufferOverflowCallback": "dataBufferOverflowCallback",
                "currentStringCallback": "stringCallback",
                "currentSysexCallback": "sysexCallback",
                "currentReportFirmwareCallback": "reportFirmwareCallback",
                "currentReportVersionCallback": "reportVersionCallback",
                "currentSystemResetCallback": "systemResetCallback",
                "FUN_080032bc": "initialize_firmata_parser_080032bc"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "attach_08003306",
            "code": "\n/* DWARF original prototype: void  attach_08003306(FirmataParser * parser, uint8_t cmd, callbackFunction\n   callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::attach_08003306(FirmataParser *parser,uint8_t cmd,callbackFunction callback,void *ctx)\n\n{\n  if (cmd == 0xd0) {\n    parser->reportDigitalCallback = callback;\n    parser->reportDigitalCallbackContext = ctx;\n    return;\n  }\n  if (0xd0 < cmd) {\n    if (cmd == 0xf4) {\n      parser->pinModeCallback = callback;\n      parser->pinModeCallbackContext = ctx;\n      return;\n    }\n    if (cmd == 0xf5) {\n      parser->pinValueCallback = callback;\n      parser->pinValueCallbackContext = ctx;\n    }\n    else if (cmd == 0xe0) {\n      parser->analogCallback = callback;\n      parser->analogCallbackContext = ctx;\n      return;\n    }\n    return;\n  }\n  if (cmd == 0x90) {\n    parser->digitalCallback = callback;\n    parser->digitalCallbackContext = ctx;\n    return;\n  }\n  if (cmd == 0xc0) {\n    parser->reportAnalogCallback = callback;\n    parser->reportAnalogCallbackContext = ctx;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "attach_08003306",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentReportDigitalCallbackContext": "reportDigitalCallbackContext",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallback": "pinValueCallback",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "currentAnalogCallback": "analogCallback",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentDigitalCallback": "digitalCallback",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportAnalogCallbackContext": "reportAnalogCallbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "attach_firmware_parser_08003346",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * firmwareParser, uint8_t firmwareCommand,\n   versionCallbackFunction firmwareVersionCallback, void * callbackContext) */\n\nvoid __firmwareParsercall\nfirmata::FirmataParser::attachFirmwareParser_08003346(FirmataParser *firmwareParser,uint8_t firmwareCommand,versionCallbackFunction firmwareVersionCallback,void *callbackContext)\n\n{\n  if (firmwareCommand == 'y') {\n    firmwareParser->currentReportFirmwareCallback = firmwareVersionCallback;\n    firmwareParser->currentReportFirmwareCallbackContext = callbackContext;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "attach_firmware_parser_08003346",
                "this": "firmwareParser",
                "command": "firmwareCommand",
                "newFunction": "firmwareVersionCallback",
                "context": "callbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_callbacks_08003350",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * parser, uint8_t cmd,\n   systemCallbackFunction callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::updateCallbacks_08003350(FirmataParser *parser,uint8_t cmd,systemCallbackFunction callback,void *ctx)\n\n{\n  if (cmd == 0xf9) {\n    parser->currentReportVersionCallback = callback;\n    parser->currentReportVersionCallbackContext = ctx;\n    return;\n  }\n  if (cmd != 0xff) {\n    return;\n  }\n  parser->currentSystemResetCallback = callback;\n  parser->currentSystemResetCallbackContext = ctx;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_callbacks_08003350",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "attach_string_callback_08003366",
            "code": "\n/* DWARF original prototype: void  attach(FirmataParser * parser, uint8_t cmd,\n   stringCallbackFunction callback, void * ctx) */\n\nvoid __parsercall\nfirmata::FirmataParser::attachStringCallback_08003366(FirmataParser *parser,uint8_t cmd,stringCallbackFunction callback,void *ctx)\n\n{\n  if (cmd == 'q') {\n    parser->currentStringCallback = callback;\n    parser->currentStringCallbackContext = ctx;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "attach_string_callback_08003366",
                "this": "parser",
                "command": "cmd",
                "newFunction": "callback",
                "context": "ctx"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "attach_08003370",
            "code": "\n/* DWARF original prototype: void  attach_08003370(FirmataParser * parser, uint8_t command,\n   sysexCallbackFunction callbackFunction, void * callbackContext) */\n\nvoid __parsercall\nfirmata::FirmataParser::attach_08003370(FirmataParser *parser,uint8_t command,sysexCallbackFunction callbackFunction,void *callbackContext)\n\n{\n  parser->currentCallback = callbackFunction;\n  parser->currentCallbackContext = callbackContext;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "attach_08003370",
                "this": "parser",
                "newFunction": "callbackFunction",
                "context": "callbackContext",
                "currentSysexCallback": "currentCallback",
                "currentSysexCallbackContext": "currentCallbackContext"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "buffer_data_at_position_08003376",
            "code": "\n/* DWARF original prototype: bool  bufferDataAtPosition_08003376(FirmataParser * parser, uint8_t singleData, size_t\n   position) */\n\nbool __parsercall firmata::FirmataParser::bufferDataAtPosition_08003376(FirmataParser *parser,uint8_t singleData,size_t position)\n\n{\n  bool bufferOverflow;\n  bool isOverflow;\n  \n  if (position < parser->singleDataBufferSize) {\n    bufferOverflow = false;\n  }\n  else {\n    bufferOverflow = true;\n    if (parser->currentDataBufferOverflowCallback != (singleDataBufferOverflowCallbackFunction)0x0) {\n      parser->allowBufferUpdate = true;\n      (*parser->currentDataBufferOverflowCallback)(parser->currentDataBufferOverflowCallbackContext);\n      if (position < parser->singleDataBufferSize) {\n        bufferOverflow = false;\n      }\n      else {\n        bufferOverflow = true;\n      }\n    }\n  }\n  if (!bufferOverflow) {\n    parser->singleDataBuffer[position] = singleData;\n  }\n  return bufferOverflow;\n}\n\n",
            "renaming": {
                "FUN_08003376": "buffer_data_at_position_08003376",
                "this": "parser",
                "data": "singleData",
                "pos": "position",
                "bVar1": "bufferOverflow",
                "bufferOverflow": "isOverflow"
            },
            "calling": [
                "processSysexMessage",
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "decode_byte_stream_080033a8",
            "code": "\n/* DWARF original prototype: size_t  decodeByteStream_080033a8(FirmataParser * this, size_t numBytes, uint8_t *\n   byteArray) */\n\nsize_t __thiscall\nfirmata::FirmataParser::decodeByteStream_080033a8(FirmataParser *this,size_t numBytes,uint8_t *byteArray)\n\n{\n  byte currentByte;\n  size_t currentIndex;\n  uint loopIndex;\n  \n  currentIndex = 0;\n  for (loopIndex = 0; loopIndex < numBytes; loopIndex = loopIndex + 2) {\n    currentByte = byteArray[loopIndex];\n    byteArray[currentIndex] = currentByte;\n    byteArray[currentIndex] = byteArray[loopIndex + 1] << 7 | currentByte;\n    currentIndex = currentIndex + 1;\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "decode_byte_stream_080033a8",
                "bytec": "numBytes",
                "bytev": "byteArray",
                "bVar1": "currentByte",
                "sVar2": "currentIndex",
                "uVar3": "loopIndex"
            },
            "calling": [
                "processSysexMessage"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_sysex_message_080033cc",
            "code": "\n/* DWARF original prototype: void  processSysexMessage_080033cc(FirmataParser * parser) */\n\nvoid __parsercall firmata::FirmataParser::processSysexMessage_080033cc(FirmataParser *parser)\n\n{\n  uint8_t firstByte;\n  size_t decodedSize;\n  uint8_t *dataPtr;\n  \n  dataPtr = parser->dataBuffer;\n  firstByte = *dataPtr;\n  if (firstByte == 'q') {\n    if (parser->currentStringCallback != (stringCallbackFunction)0x0) {\n      decodedSize = decodeByteStream(parser,parser->sysexBytesRead - 1,dataPtr + 1);\n      bufferDataAtPosition(parser,'\\0',decodedSize + 1);\n      (*parser->currentStringCallback)\n                (parser->currentStringCallbackContext,(char *)(parser->dataBuffer + 1));\n      return;\n    }\n  }\n  else if (firstByte == 'y') {\n    if (parser->currentReportFirmwareCallback != (versionCallbackFunction)0x0) {\n      if (parser->sysexBytesRead < 3) {\n        (*parser->currentReportFirmwareCallback)\n                  (parser->currentReportFirmwareCallbackContext,0,0,(char *)0x0);\n        return;\n      }\n      decodedSize = decodeByteStream(parser,parser->sysexBytesRead - 3,dataPtr + 3);\n      bufferDataAtPosition(parser,'\\0',decodedSize + 3);\n      dataPtr = parser->dataBuffer;\n      (*parser->currentReportFirmwareCallback)\n                (parser->currentReportFirmwareCallbackContext,(uint)dataPtr[1],(uint)dataPtr[2],\n                 (char *)(dataPtr + 3));\n      return;\n    }\n  }\n  else if (parser->currentSysexCallback != (sysexCallbackFunction)0x0) {\n    (*parser->currentSysexCallback)\n              (parser->currentSysexCallbackContext,firstByte,parser->sysexBytesRead - 1,dataPtr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "this": "parser",
                "uVar1": "firstByte",
                "sVar2": "decodedSize",
                "puVar3": "dataPtr",
                "FUN_080033cc": "process_sysex_message_080033cc"
            },
            "calling": [
                "parse"
            ],
            "called": [
                "decodeByteStream",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "reset_system_0800344a",
            "code": "\n/* DWARF original prototype: void  systemReset(FirmataParser * parser) */\n\nvoid __parsercall firmata::FirmataParser::resetSystem_0800344a(FirmataParser *parser)\n\n{\n  size_t i;\n  \n  parser->isWaitingForData = 0;\n  parser->currentCommand = '\\0';\n  parser->currentChannel = '\\0';\n  for (i = 0; i < parser->bufferSize; i = i + 1) {\n    parser->buffer[i] = '\\0';\n  }\n  parser->isParsingSysex = false;\n  parser->sysexBytesCounter = 0;\n  if (parser->systemResetCallback != (systemCallbackFunction)0x0) {\n    (*parser->systemResetCallback)(parser->systemResetCallbackContext);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "reset_system_0800344a",
                "this": "parser",
                "waitForData": "isWaitingForData",
                "executeMultiByteCommand": "currentCommand",
                "multiByteChannel": "currentChannel",
                "dataBufferSize": "bufferSize",
                "dataBuffer": "buffer",
                "parsingSysex": "isParsingSysex",
                "sysexBytesRead": "sysexBytesCounter",
                "currentSystemResetCallback": "systemResetCallback",
                "currentSystemResetCallbackContext": "systemResetCallbackContext"
            },
            "calling": [
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "parse_firmata_data_08003474",
            "code": "\n/* DWARF original prototype: void  parse(FirmataParser * parser, uint8_t byteData) */\n\nvoid __parsercall firmata::FirmataParser::parseFirmataData_08003474(FirmataParser *parser,uint8_t byteData)\n\n{\n  byte bVar1;\n  uint inputValue;\n  size_t position;\n  \n  inputValue = (uint)byteData;\n  if (parser->isParsingSysex != false) {\n    if (inputValue != 0xf7) {\n      storeDataAtPosition(parser,byteData,parser->numBytesRead);\n      parser->numBytesRead = parser->numBytesRead + 1;\n      return;\n    }\n    parser->isParsingSysex = false;\n    handleSysexMessage(parser);\n    return;\n  }\n  if ((parser->numDataToWait == 0) || (0x7f < inputValue)) {\n    if (inputValue < 0xf0) {\n      parser->channel = byteData & 0xf;\n      inputValue = inputValue & 0xf0;\n    }\n    if (inputValue == 0xf0) {\n      parser->isParsingSysex = true;\n      parser->numBytesRead = 0;\n      return;\n    }\n    if (inputValue < 0xf1) {\n      if (inputValue != 0xc0) {\n        if (inputValue < 0xc1) {\n          if (inputValue != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (inputValue == 0xd0) goto LAB_0800359c;\n          if (inputValue != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        parser->numDataToWait = 2;\n        parser->command = (uint8_t)inputValue;\n        return;\n      }\nLAB_0800359c:\n      parser->numDataToWait = 1;\n      parser->command = (uint8_t)inputValue;\n      return;\n    }\n    if (inputValue != 0xf9) {\n      if (0xf9 < inputValue) {\n        if (inputValue == 0xff) {\n          resetSystem(parser);\n          return;\n        }\n        return;\n      }\n      if (1 < inputValue - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (parser->reportVersionCallback != (systemCallbackFunction)0x0) {\n      (*parser->reportVersionCallback)(parser->callbackContext);\n    }\n  }\n  else {\n    position = parser->numDataToWait - 1;\n    parser->numDataToWait = position;\n    storeDataAtPosition(parser,byteData,position);\n    if ((parser->numDataToWait == 0) && (bVar1 = parser->command, bVar1 != 0)) {\n      if (bVar1 == 0xd0) {\n        if (parser->reportDigitalCallback != (callbackFunction)0x0) {\n          (*parser->reportDigitalCallback)\n                    (parser->digitalCallbackContext,parser->channel,\n                     (uint16_t)*parser->buffer);\n        }\n      }\n      else if (bVar1 < 0xd1) {\n        if (bVar1 == 0x90) {\n          if (parser->digitalCallback != (callbackFunction)0x0) {\n            (*parser->digitalCallback)\n                      (parser->digitalCallbackContext,parser->channel,\n                       (ushort)parser->buffer[1] + (ushort)*parser->buffer * 0x80);\n          }\n        }\n        else if ((bVar1 == 0xc0) && (parser->reportAnalogCallback != (callbackFunction)0x0)) {\n          (*parser->reportAnalogCallback)\n                    (parser->analogCallbackContext,parser->channel,\n                     (uint16_t)*parser->buffer);\n        }\n      }\n      else if (bVar1 == 0xf4) {\n        if (parser->pinModeCallback != (callbackFunction)0x0) {\n          (*parser->pinModeCallback)\n                    (parser->pinModeCallbackContext,parser->buffer[1],\n                     (uint16_t)*parser->buffer);\n        }\n      }\n      else if (bVar1 == 0xf5) {\n        if (parser->pinValueCallback != (callbackFunction)0x0) {\n          (*parser->pinValueCallback)\n                    (parser->pinValueCallbackContext,parser->buffer[1],\n                     (uint16_t)*parser->buffer);\n        }\n      }\n      else if ((bVar1 == 0xe0) && (parser->analogCallback != (callbackFunction)0x0)) {\n        (*parser->analogCallback)\n                  (parser->analogCallbackContext,parser->channel,\n                   (ushort)parser->buffer[1] + (ushort)*parser->buffer * 0x80);\n      }\n      parser->command = '\\0';\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "parse_firmata_data_08003474",
                "this": "parser",
                "inputData": "byteData",
                "uVar2": "inputValue",
                "pos": "position",
                "bufferDataAtPosition": "storeDataAtPosition",
                "parsingSysex": "isParsingSysex",
                "sysexBytesRead": "numBytesRead",
                "processSysexMessage": "handleSysexMessage",
                "waitForData": "numDataToWait",
                "multiByteChannel": "channel",
                "executeMultiByteCommand": "command",
                "currentReportVersionCallback": "reportVersionCallback",
                "currentReportVersionCallbackContext": "callbackContext",
                "currentReportDigitalCallback": "reportDigitalCallback",
                "currentReportDigitalCallbackContext": "digitalCallbackContext",
                "dataBuffer": "buffer",
                "currentDigitalCallback": "digitalCallback",
                "currentAnalogCallback": "analogCallback",
                "currentDigitalCallbackContext": "digitalCallbackContext",
                "currentAnalogCallbackContext": "analogCallbackContext",
                "currentReportAnalogCallback": "reportAnalogCallback",
                "currentReportAnalogCallbackContext": "analogCallbackContext",
                "currentPinModeCallback": "pinModeCallback",
                "currentPinValueCallback": "pinValueCallback",
                "currentPinModeCallbackContext": "pinModeCallbackContext",
                "currentPinValueCallbackContext": "pinValueCallbackContext",
                "systemReset": "resetSystem"
            },
            "calling": [
                "processInput"
            ],
            "called": [
                "processSysexMessage",
                "systemReset",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_clock_system_080035b8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeClockSystem_080035b8(void)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t hclkFrequency;\n  periphClkInit PeriphClkInit;\n  clkInit RCC_ClkInitStruct;\n  oscInit RCC_OscInitStruct;\n  \n  RCC_OscInitStruct.OscillatorType = 2;\n  RCC_OscInitStruct.HSIState = 1;\n  RCC_OscInitStruct.HSICalibrationValue = 0x10;\n  RCC_OscInitStruct.PLL.PLLState = 2;\n  RCC_OscInitStruct.PLL.PLLSource = 0;\n  RCC_OscInitStruct.PLL.PLLMUL = 0x380000;\n  status = HAL_RCC_OscConfig((oscInit_conflict *)&RCC_OscInitStruct);\n  if (status != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  RCC_ClkInitStruct.ClockType = 0xf;\n  RCC_ClkInitStruct.SYSCLKSource = 2;\n  RCC_ClkInitStruct.AHBCLKDivider = 0;\n  RCC_ClkInitStruct.APB1CLKDivider = 0x400;\n  RCC_ClkInitStruct.APB2CLKDivider = 0;\n  status = HAL_RCC_ClockConfig((clkInit_conflict *)&RCC_ClkInitStruct,2);\n  if (status != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  PeriphClkInit.PeriphClockSelection = 2;\n  PeriphClkInit.AdcClockSelection = 0x8000;\n  status = HAL_RCCEx_PeriphCLKConfig((periphClkInit_conflict *)&PeriphClkInit);\n  if (status != HAL_OK) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFrequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_clock_system_080035b8",
                "HVar1": "status",
                "uVar2": "hclkFrequency",
                "RCC_OscInitTypeDef": "oscInit",
                "RCC_ClkInitTypeDef": "clkInit",
                "RCC_PeriphCLKInitTypeDef": "periphClkInit"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCCEx_PeriphCLKConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_system_08003658",
            "code": "\nvoid initializeSystem_08003658(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumptable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &completed_8667; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(&_sidata + index);\n  }\n  for (ptr = &completed_8667; ptr < &_ebss; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable = (code *)0x800368a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_system_08003658",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [],
            "called": [
                "main",
                "SystemInit",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a0": {
            "entrypoint": "0x080036a0",
            "current_name": "infinite_loop_080036a0",
            "code": "\nvoid infiniteLoop_080036a0(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080036a0": "infinite_loop_080036a0"
            },
            "calling": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "called": [
                "USB_HP_CAN1_TX_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_configuration_080036a2",
            "code": "\nint initializeHardwareConfiguration_080036a2(EVP_PKEY_CTX *context)\n\n{\n  hw_config_init();\n  return (int)context;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_configuration_080036a2",
                "ctx": "context"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_digital_pin_080036ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t findDigitalPin_080036ac(pin p)\n\n{\n  uint32_t pinIndex;\n  \n  if ((uint)((int)p << 0x18) >> 0x1c < 5) {\n    for (pinIndex = 0; (pinIndex < 0x3c && ((int)p != (int)(char)(&digitalPin)[pinIndex])); pinIndex = pinIndex + 1\n        ) {\n    }\n  }\n  else {\n    pinIndex = 0xffffffff;\n  }\n  return pinIndex;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_digital_pin_080036ac",
                "PinName_conflict": "pin",
                "uVar1": "pinIndex"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "analogWriteCallback",
                "systemResetCallback",
                "setPinModeCallback",
                "checkDigitalInputs",
                "loop",
                "reportDigitalCallback",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "configure_tick_priority_080036d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTickPriority_080036d8(uint32_t tickPriority)\n\n{\n  uint32_t configResult;\n  \n  configResult = HAL_SYSTICK_Config((uint32_t)((ulonglong)SystemCoreClock / (1000 / (ulonglong)uwTickFreq))\n                            );\n  if (configResult != 0) {\n    return HAL_ERROR;\n  }\n  if (0xf < tickPriority) {\n    return HAL_ERROR;\n  }\n  HAL_NVIC_SetPriority(SysTick_IRQn,tickPriority,0);\n  uwTickPrio = tickPriority;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "configure_tick_priority_080036d8",
                "TickPriority": "tickPriority",
                "uVar1": "configResult"
            },
            "calling": [
                "HAL_Init",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_hal_components_08003724",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initialize_HAL_components_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_interrupt_priority_grouping(3);\n  initialize_tick(0xf);\n  initialize_MSP();\n  return HAL_operation_success;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_hal_components_08003724",
                "HAL_NVIC_SetPriorityGrouping": "set_interrupt_priority_grouping",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_MSP",
                "HAL_OK": "HAL_operation_success"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_tick_08003748",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updateTick_08003748(void)\n\n{\n  currentTick = tickFrequency + currentTick;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_tick_08003748",
                "uwTick": "currentTick",
                "uwTickFreq": "tickFrequency"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_system_tick_08003760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemTick_08003760(void)\n\n{\n  return systemTick;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_system_tick_08003760",
                "uwTick": "systemTick"
            },
            "calling": [
                "HAL_UART_Transmit",
                "uart_debug_write",
                "HAL_RCC_OscConfig",
                "HAL_ADCEx_Calibration_Start",
                "ADC_Enable",
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCCEx_PeriphCLKConfig",
                "GetCurrentMilli",
                "i2c_master_read",
                "i2c_master_write",
                "HAL_RCC_ClockConfig",
                "HAL_ADC_PollForConversion",
                "ADC_ConversionStop_Disable"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "perform_adc_conversion_with_timeout_0800376c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict performADCConversionWithTimeout_0800376c(ADC_HandleTypeDef *ADC_handle,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTick;\n  uint32_t peripheralCLKFreq;\n  int conversionTime;\n  uint32_t currentTick;\n  ADC_TypeDef *ADC_instance;\n  uint totalConversionTime;\n  uint32_t cpuCycles;\n  \n  cpuCycles = 0;\n  startTick = HAL_GetTick();\n  currentTick = SystemCoreClock;\n  ADC_instance = ADC_handle->Instance;\n  if ((ADC_instance->CR2 & 0x100) == 0) {\n    if (((ADC_instance->CR1 & 0x100) == 0) && ((ADC_instance->SQR1 & 0xf00000) == 0)) {\n      do {\n        if ((ADC_handle->Instance->SR & 2) != 0) goto LAB_0800387e;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (currentTick = HAL_GetTick(), currentTick - startTick <= timeout))));\n      ADC_handle->State = ADC_handle->State | 4;\n      ADC_handle->Lock = HAL_UNLOCKED;\n      status = HAL_TIMEOUT;\n    }\n    else {\n      peripheralCLKFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      ADC_instance = ADC_handle->Instance;\n      if (((ADC_instance->SMPR2 & 0x24924924) == 0) && ((ADC_instance->SMPR1 & 0x924924) == 0)) {\n        if ((ADC_instance->SMPR2 & 0x12492492) == 0) {\n          if ((ADC_instance->SMPR1 & 0x492492) == 0) {\n            conversionTime = 0x14;\n          }\n          else {\n            conversionTime = 0x29;\n          }\n        }\n        else {\n          conversionTime = 0x29;\n        }\n      }\n      else if (((ADC_instance->SMPR2 & 0x12492492) == 0) && ((ADC_instance->SMPR1 & 0x492492) == 0)) {\n        conversionTime = 0x54;\n      }\n      else if ((ADC_instance->SMPR2 & 0x249249) == 0) {\n        if ((ADC_instance->SMPR1 & 0x249249) == 0) {\n          conversionTime = 0x54;\n        }\n        else {\n          conversionTime = 0xfc;\n        }\n      }\n      else {\n        conversionTime = 0xfc;\n      }\n      totalConversionTime = (currentTick / peripheralCLKFreq) * conversionTime;\n      for (; cpuCycles <= totalConversionTime && totalConversionTime - cpuCycles != 0;\n          cpuCycles = cpuCycles + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (currentTick = HAL_GetTick(), timeout < currentTick - startTick)))) {\n          ADC_handle->State = ADC_handle->State | 4;\n          ADC_handle->Lock = HAL_UNLOCKED;\n          return HAL_TIMEOUT;\n        }\n      }\nLAB_0800387e:\n      ADC_handle->Instance->SR = 0xffffffed;\n      ADC_handle->State = ADC_handle->State | 0x200;\n      if ((ADC_handle->Instance->CR2 & 0xe0000) == 0xe0000) {\n        if ((ADC_handle->Init).ContinuousConvMode == 0) {\n          ADC_handle->State = ADC_handle->State & 0xfffffeff;\n          if ((ADC_handle->State & 0x1000) == 0) {\n            ADC_handle->State = ADC_handle->State | 1;\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        status = HAL_OK;\n      }\n    }\n  }\n  else {\n    ADC_handle->State = ADC_handle->State | 0x20;\n    ADC_handle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "perform_adc_conversion_with_timeout_0800376c",
                "hadc": "ADC_handle",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "startTick",
                "uVar3": "peripheralCLKFreq",
                "iVar4": "conversionTime",
                "uVar5": "currentTick",
                "pAVar6": "ADC_instance",
                "uVar7": "totalConversionTime",
                "Conversion_Timeout_CPU_cycles": "cpuCycles"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_adc_value_080038dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_adc_value_080038dc(ADC_HandleTypeDef *adc_handle)\n\n{\n  return adc_handle->Instance->data_register;\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_adc_value_080038dc",
                "hadc": "adc_handle",
                "DR": "data_register"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "configure_adc_channel_080038e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureADCChannel_080038e4(ADC_HandleTypeDef *adcHandle,ADC_ChannelConfTypeDef *channelConfig)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint channelIndex;\n  uint32_t loopIndex;\n  \n  if (adcHandle->Lock == HAL_LOCKED) {\n    status = HAL_BUSY;\n  }\n  else {\n    adcHandle->Lock = HAL_LOCKED;\n    channelIndex = channelConfig->Rank;\n    if (channelIndex < 7) {\n      channelIndex = channelIndex * 5 - 5;\n      adcHandle->Instance->SQR3 =\n           channelConfig->Channel << (channelIndex & 0xff) | adcHandle->Instance->SQR3 & ~(0x1f << (channelIndex & 0xff));\n    }\n    else if (channelIndex < 0xd) {\n      channelIndex = channelIndex * 5 - 0x23;\n      adcHandle->Instance->SQR2 =\n           channelConfig->Channel << (channelIndex & 0xff) | adcHandle->Instance->SQR2 & ~(0x1f << (channelIndex & 0xff));\n    }\n    else {\n      channelIndex = channelIndex * 5 - 0x41;\n      adcHandle->Instance->SQR1 =\n           channelConfig->Channel << (channelIndex & 0xff) | adcHandle->Instance->SQR1 & ~(0x1f << (channelIndex & 0xff));\n    }\n    channelIndex = channelConfig->Channel;\n    if (channelIndex < 10) {\n      adcHandle->Instance->SMPR2 =\n           channelConfig->SamplingTime << (channelIndex * 3 & 0xff) |\n           adcHandle->Instance->SMPR2 & ~(7 << (channelIndex * 3 & 0xff));\n    }\n    else {\n      channelIndex = channelIndex * 3 - 0x1e;\n      adcHandle->Instance->SMPR1 =\n           channelConfig->SamplingTime << (channelIndex & 0xff) | adcHandle->Instance->SMPR1 & ~(7 << (channelIndex & 0xff));\n    }\n    if (channelConfig->Channel - 0x10 < 2) {\n      if (adcHandle->Instance == (ADC_TypeDef *)0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (channelConfig->Channel == 0x10) {\n            for (loopIndex = (SystemCoreClock / 1000000) * 10; loopIndex != 0;\n                loopIndex = loopIndex - 1) {\n            }\n            status = HAL_OK;\n          }\n          else {\n            status = HAL_OK;\n          }\n        }\n        else {\n          status = HAL_OK;\n        }\n      }\n      else {\n        adcHandle->State = adcHandle->State | 0x20;\n        status = HAL_ERROR;\n      }\n    }\n    else {\n      status = HAL_OK;\n    }\n    adcHandle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "configure_adc_channel_080038e4",
                "hadc": "adcHandle",
                "sConfig": "channelConfig",
                "HVar1": "status",
                "uVar2": "channelIndex",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_adc_state_08003a1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getADCState_08003a1c(ADC_HandleTypeDef *analogToDigitalConverter)\n\n{\n  return analogToDigitalConverter->State;\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_adc_state_08003a1c",
                "hadc": "analogToDigitalConverter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "initialize_adc_08003a20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeADC_08003a20(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTick;\n  uint32_t currentTick;\n  ADC_TypeDef *adcInstance;\n  uint32_t loopIndex;\n  \n  adcInstance = adcHandle->Instance;\n  if ((adcInstance->CR2 & 1) == 0) {\n    adcInstance->CR2 = adcInstance->CR2 | 1;\n    for (loopIndex = SystemCoreClock / 1000000; loopIndex != 0;\n        loopIndex = loopIndex - 1) {\n    }\n    startTick = HAL_GetTick();\n    do {\n      if ((adcHandle->Instance->CR2 & 1) != 0) {\n        return HAL_OK;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - startTick < 3);\n    adcHandle->State = adcHandle->State | 0x10;\n    adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n    adcHandle->Lock = HAL_UNLOCKED;\n    status = HAL_ERROR;\n  }\n  else {\n    status = HAL_OK;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "initialize_adc_08003a20",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "startTick",
                "uVar3": "currentTick",
                "pAVar4": "adcInstance",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_adc_08003aa0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeADC_08003aa0(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  ADC_TypeDef *adcInstance;\n  \n  if (adcHandle->Lock != HAL_LOCKED) {\n    adcHandle->Lock = HAL_LOCKED;\n    status = ADC_Enable(adcHandle);\n    if (status == HAL_OK) {\n      adcHandle->State = adcHandle->State & 0xfffffcfe | 0x100;\n      adcInstance = adcHandle->Instance;\n      if ((adcInstance == (ADC_TypeDef *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        adcHandle->State = adcHandle->State | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          adcHandle->State = adcHandle->State & 0xffffcfff | 0x1000;\n        }\n      }\n      else {\n        adcHandle->State = adcHandle->State & 0xffefffff;\n        if ((adcInstance->CR1 & 0x400) != 0) {\n          adcHandle->State = adcHandle->State & 0xffffcfff | 0x1000;\n        }\n      }\n      if ((adcHandle->State & 0x1000) == 0) {\n        adcHandle->ErrorCode = 0;\n      }\n      else {\n        adcHandle->ErrorCode = adcHandle->ErrorCode & 0xfffffff9;\n      }\n      adcHandle->Lock = HAL_UNLOCKED;\n      adcInstance->SR = 0xfffffffd;\n      adcInstance = adcHandle->Instance;\n      if (((adcInstance->CR2 & 0xe0000) == 0xe0000) &&\n         ((adcInstance != (ADC_TypeDef *)0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        adcInstance->CR2 = adcInstance->CR2 | 0x500000;\n      }\n      else {\n        adcInstance->CR2 = adcInstance->CR2 | 0x100000;\n      }\n    }\n    else {\n      adcHandle->Lock = HAL_UNLOCKED;\n    }\n    return status;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_adc_08003aa0",
                "hadc": "adcHandle",
                "HVar1": "status",
                "pAVar2": "adcInstance"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_adc_08003b8c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict checkADC_08003b8c(ADC_HandleTypeDef *hadc)\n\n{\n  uint32_t startTick;\n  uint32_t currentTick;\n  ADC_TypeDef *adcInstance;\n  \n  adcInstance = hadc->Instance;\n  if ((adcInstance->CR2 & 1) == 0) {\n    return HAL_OK;\n  }\n  adcInstance->CR2 = adcInstance->CR2 & 0xfffffffe;\n  startTick = HAL_GetTick();\n  do {\n    if ((hadc->Instance->CR2 & 1) == 0) {\n      return HAL_OK;\n    }\n    currentTick = HAL_GetTick();\n  } while (currentTick - startTick < 3);\n  hadc->State = hadc->State | 0x10;\n  hadc->ErrorCode = hadc->ErrorCode | 1;\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_adc_08003b8c",
                "pAVar3": "adcInstance",
                "uVar1": "startTick",
                "uVar2": "currentTick"
            },
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "initialize_adc_08003bd8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeADC_08003bd8(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t value2;\n  uint value3;\n  uint value4;\n  uint32_t value5;\n  \n  if (adcHandle == (ADC_HandleTypeDef *)0x0) {\n    return HAL_ERROR;\n  }\n  if (adcHandle->State == 0) {\n    adcHandle->ErrorCode = 0;\n    adcHandle->Lock = HAL_UNLOCKED;\n    HAL_ADC_MspInit(adcHandle);\n  }\n  status = ADC_ConversionStop_Disable(adcHandle);\n  if (((adcHandle->State & 0x10) == 0) && (status == HAL_OK)) {\n    adcHandle->State = adcHandle->State & 0xffffeefd | 2;\n    value5 = (adcHandle->Init).ContinuousConvMode;\n    value3 = (adcHandle->Init).DataAlign | (adcHandle->Init).ExternalTrigConv | value5 << 1;\n    value2 = (adcHandle->Init).ScanConvMode;\n    if (value2 == 0x100) {\n      value4 = 0x100;\n    }\n    else {\n      value4 = 0;\n      if (value2 == 1) {\n        value4 = 0x100;\n      }\n    }\n    if ((adcHandle->Init).DiscontinuousConvMode == 1) {\n      if (value5 == 0) {\n        value4 = value4 | ((adcHandle->Init).NbrOfDiscConversion - 1) * 0x2000 | 0x800;\n      }\n      else {\n        adcHandle->State = adcHandle->State | 0x20;\n        adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n      }\n    }\n    adcHandle->Instance->CR1 = value4 | adcHandle->Instance->CR1 & 0xffff16ff;\n    adcHandle->Instance->CR2 = adcHandle->Instance->CR2 & 0xffe1f7fd | value3;\n    value2 = (adcHandle->Init).ScanConvMode;\n    if ((value2 == 0x100) || (value2 == 1)) {\n      value4 = ((adcHandle->Init).NbrOfConversion - 1) * 0x100000;\n    }\n    else {\n      value4 = 0;\n    }\n    adcHandle->Instance->SQR1 = value4 | adcHandle->Instance->SQR1 & 0xff0fffff;\n    if (value3 != (adcHandle->Instance->CR2 & 0xff1f0efe)) {\n      adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n      adcHandle->ErrorCode = adcHandle->ErrorCode | 1;\n      return HAL_ERROR;\n    }\n    adcHandle->ErrorCode = 0;\n    adcHandle->State = adcHandle->State & 0xfffffffc | 1;\n    return HAL_OK;\n  }\n  adcHandle->State = adcHandle->State | 0x10;\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "initialize_adc_08003bd8",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "value2",
                "uVar3": "value3",
                "uVar4": "value4",
                "uVar5": "value5"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "stop_adc_and_reset_08003ce8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef stopADCAndReset_08003ce8(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef status;\n  \n  if (adcHandle == (ADC_HandleTypeDef *)0x0) {\n    status = HAL_ERROR;\n  }\n  else {\n    adcHandle->State = adcHandle->State | 2;\n    status = ADC_ConversionStop_Disable(adcHandle);\n    if (status == HAL_OK) {\n      adcHandle->Instance->SR = 0xffffffe0;\n      adcHandle->Instance->CR1 = adcHandle->Instance->CR1 & 0xff3f0000;\n      adcHandle->Instance->CR2 = adcHandle->Instance->CR2 & 0xff0106f0;\n      adcHandle->Instance->SMPR1 = adcHandle->Instance->SMPR1 & 0xff000000;\n      adcHandle->Instance->SMPR2 = adcHandle->Instance->SMPR2 & 0xc0000000;\n      adcHandle->Instance->JOFR1 = adcHandle->Instance->JOFR1 & 0xfffff000;\n      adcHandle->Instance->JOFR2 = adcHandle->Instance->JOFR2 & 0xfffff000;\n      adcHandle->Instance->JOFR3 = adcHandle->Instance->JOFR3 & 0xfffff000;\n      adcHandle->Instance->JOFR4 = adcHandle->Instance->JOFR4 & 0xfffff000;\n      adcHandle->Instance->HTR = adcHandle->Instance->HTR & 0xfffff000;\n      adcHandle->Instance->LTR = adcHandle->Instance->LTR & 0xfffff000;\n      adcHandle->Instance->SQR1 = adcHandle->Instance->SQR1 & 0xff000000;\n      adcHandle->Instance->SQR1 = adcHandle->Instance->SQR1 & 0xff000000;\n      adcHandle->Instance->SQR2 = adcHandle->Instance->SQR2 & 0xc0000000;\n      adcHandle->Instance->SQR3 = adcHandle->Instance->SQR3 & 0xc0000000;\n      adcHandle->Instance->JSQR = adcHandle->Instance->JSQR & 0xffc00000;\n      adcHandle->Instance->JSQR = adcHandle->Instance->JSQR & 0xffc00000;\n      deinitializeADCPeriph(adcHandle);\n      adcHandle->ErrorCode = 0;\n      adcHandle->State = 0;\n    }\n    adcHandle->Lock = HAL_UNLOCKED;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "stop_adc_and_reset_08003ce8",
                "hadc": "adcHandle",
                "HVar1": "status",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_ADC_MspDeInit": "deinitializeADCPeriph"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "stop_and_unlock_conversion_08003de4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict stop_and_unlock_conversion_08003de4(ADC_HandleTypeDef *adc_handle)\n\n{\n  HAL_StatusTypeDef_conflict result;\n  \n  if (adc_handle->Lock == locked) {\n    return busy;\n  }\n  adc_handle->Lock = locked;\n  result = disable_conversion_stop(adc_handle);\n  if (result == HAL_OK) {\n    adc_handle->state = adc_handle->state & 0xffffeefe | 1;\n  }\n  adc_handle->Lock = unlocked;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "stop_and_unlock_conversion_08003de4",
                "hadc": "adc_handle",
                "HVar1": "result",
                "HAL_LOCKED": "locked",
                "HAL_BUSY": "busy",
                "HAL_UNLOCKED": "unlocked",
                "ADC_ConversionStop_Disable": "disable_conversion_stop",
                "State": "state"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "configure_adc_08003e20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureADC_08003e20(ADC_HandleTypeDef *adcHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t coreClockFreq;\n  uint32_t periphClockFreq;\n  ADC_TypeDef *adcInstance;\n  uint32_t startTick;\n  uint32_t loopIndex;\n  \n  if (adcHandle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  adcHandle->Lock = HAL_LOCKED;\n  status = ADC_ConversionStop_Disable(adcHandle);\n  if (status == HAL_OK) {\n    adcHandle->State = adcHandle->State & 0xffffeefd | 2;\n    periphClockFreq = SystemCoreClock;\n    coreClockFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loopIndex = periphClockFreq / coreClockFreq << 1; loopIndex != 0;\n        loopIndex = loopIndex - 1) {\n    }\n    ADC_Enable(adcHandle);\n    adcHandle->Instance->CR2 = adcHandle->Instance->CR2 | 8;\n    periphClockFreq = HAL_GetTick();\n    while (adcInstance = adcHandle->Instance, (adcInstance->CR2 & 8) != 0) {\n      coreClockFreq = HAL_GetTick();\n      if (10 < coreClockFreq - periphClockFreq) {\n        adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n        adcHandle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adcInstance->CR2 = adcInstance->CR2 | 4;\n    periphClockFreq = HAL_GetTick();\n    while ((adcHandle->Instance->CR2 & 4) != 0) {\n      coreClockFreq = HAL_GetTick();\n      if (10 < coreClockFreq - periphClockFreq) {\n        adcHandle->State = adcHandle->State & 0xffffffed | 0x10;\n        adcHandle->Lock = HAL_UNLOCKED;\n        return HAL_ERROR;\n      }\n    }\n    adcHandle->State = adcHandle->State & 0xfffffffc | 1;\n  }\n  adcHandle->Lock = HAL_UNLOCKED;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "configure_adc_08003e20",
                "hadc": "adcHandle",
                "HVar1": "status",
                "uVar2": "coreClockFreq",
                "uVar3": "periphClockFreq",
                "pAVar4": "adcInstance",
                "tickstart": "startTick",
                "wait_loop_index": "loopIndex"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable",
                "ADC_ConversionStop_Disable",
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "set_priority_group_08003f0c",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setPriorityGroup_08003f0c(uint32_t priorityGroup)\n\n{\n  uint32_t tempValue;\n  \n  _DAT_e000ed0c = (priorityGroup & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "set_priority_group_08003f0c",
                "PriorityGroup": "priorityGroup",
                "reg_value": "tempValue"
            },
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "set_interrupt_priority_08003f30",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid setInterruptPriority_08003f30(interruptNumber IRQn,uint32_t preemptPriority,uint32_t subPriority)\n\n{\n  uint interruptNumberAsUint;\n  uint priorityGroupBits;\n  uint32_t priorityGroupTemp;\n  uint32_t subPriorityBits;\n  uint32_t preemptPriorityBits;\n  \n  interruptNumberAsUint = (uint)IRQn;\n  priorityGroupBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  preemptPriorityBits = 7 - priorityGroupBits;\n  if (3 < preemptPriorityBits) {\n    preemptPriorityBits = 4;\n  }\n  if (priorityGroupBits + 4 < 7) {\n    subPriorityBits = 0;\n  }\n  else {\n    subPriorityBits = priorityGroupBits - 3;\n  }\n  priorityGroupBits = (preemptPriority & (1 << (preemptPriorityBits & 0xff)) - 1U) << (subPriorityBits & 0xff) |\n          (1 << (subPriorityBits & 0xff)) - 1U & subPriority;\n  if ((int)interruptNumberAsUint < 0) {\n    *(char *)((interruptNumberAsUint & 0xf) + 0xe000ed14) = (char)(priorityGroupBits << 4);\n  }\n  else {\n    *(char *)(interruptNumberAsUint + 0xe000e400) = (char)(priorityGroupBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "set_interrupt_priority_08003f30",
                "IRQn_Type_conflict": "interruptNumber",
                "PreemptPriority": "preemptPriority",
                "SubPriority": "subPriority",
                "uVar1": "interruptNumberAsUint",
                "uVar2": "priorityGroupBits",
                "PriorityGroupTmp": "priorityGroupTemp",
                "SubPriorityBits": "subPriorityBits",
                "PreemptPriorityBits": "preemptPriorityBits"
            },
            "calling": [
                "SystemClock_Config",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "i2c_custom_init",
                "HAL_InitTick"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_interrupt_enabled_08003f94",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setInterruptEnabled_08003f94(interruptNumber_Type_conflict interruptNumber)\n\n{\n  uint interruptBitPosition;\n  \n  interruptBitPosition = (uint)interruptNumber;\n  if (-1 < (int)interruptBitPosition) {\n    *(int *)((interruptBitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (interruptBitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_interrupt_enabled_08003f94",
                "IRQn": "interruptNumber",
                "uVar1": "interruptBitPosition"
            },
            "calling": [
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_interrupt_enable_bit_08003fb0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setInterruptEnableBit_08003fb0(IRQn IRQn)\n\n{\n  uint irqNumber;\n  \n  irqNumber = (uint)IRQn;\n  if (-1 < (int)irqNumber) {\n    *(int *)(((irqNumber >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (irqNumber & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_interrupt_enable_bit_08003fb0",
                "IRQn_Type_conflict": "IRQn",
                "uVar1": "irqNumber"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_ticks_numb_08003fd8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t setTicksNumb_08003fd8(uint32_t ticksNumber)\n\n{\n  if (ticksNumber - 1 < 0x1000000) {\n    _DAT_e000e014 = ticksNumber - 1;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_ticks_numb_08003fd8",
                "TicksNumb": "ticksNumber"
            },
            "calling": [
                "SystemClock_Config",
                "HAL_InitTick"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_irq_enabled_08004004",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setIRQEnabled_08004004(interruptNumber_Type_conflict interruptNumber)\n\n{\n  uint convertedNumber;\n  \n  convertedNumber = (uint)interruptNumber;\n  if (-1 < (int)convertedNumber) {\n    *(int *)(((convertedNumber >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (convertedNumber & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_irq_enabled_08004004",
                "IRQn": "interruptNumber",
                "uVar1": "convertedNumber"
            },
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "configure_clock_source_08004024",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureClockSource_08004024(uint32_t source)\n\n{\n  if (source != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "configure_clock_source_08004024",
                "CLKSource": "source"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "execute_systick_callback_08004046",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid executeSystickCallback_08004046(void)\n\n{\n  handleSysTickCallback();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "execute_systick_callback_08004046",
                "HAL_SYSTICK_Callback": "handleSysTickCallback"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "set_dma_channel_configuration_08004050",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict set_DMA_Channel_Configuration_08004050(DMA_HandleTypeDef_conflict *dma_handle)\n\n{\n  DMA_Channel_TypeDef_conflict *channel_instance;\n  \n  if (dma_handle->State != HAL_DMA_STATE_BUSY) {\n    dma_handle->ErrorCode = 4;\n    return HAL_ERROR;\n  }\n  dma_handle->Instance->CCR = dma_handle->Instance->CCR & 0xfffffff1;\n  dma_handle->Instance->CCR = dma_handle->Instance->CCR & 0xfffffffe;\n  channel_instance = dma_handle->Instance;\n  if (channel_instance == (DMA_Channel_TypeDef_conflict *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (channel_instance == (DMA_Channel_TypeDef_conflict *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (channel_instance == (DMA_Channel_TypeDef_conflict *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (channel_instance == (DMA_Channel_TypeDef_conflict *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (channel_instance == (DMA_Channel_TypeDef_conflict *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (channel_instance == (DMA_Channel_TypeDef_conflict *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  dma_handle->State = HAL_DMA_STATE_READY;\n  dma_handle->Lock = HAL_UNLOCKED;\n  if (dma_handle->XferAbortCallback != (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0) {\n    (*dma_handle->XferAbortCallback)(dma_handle);\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004050": "set_dma_channel_configuration_08004050",
                "hdma": "dma_handle",
                "pDVar1": "channel_instance"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "configure_gpio_080040e8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configureGPIO_080040e8(GPIO_TypeDef *gpioPort,gpioConfigTypeDef *gpioConfig)\n\n{\n  GPIO_TypeDef *currentGPIO;\n  uint pinMask;\n  uint pinConfig;\n  uint pinIndex;\n  uint mode;\n  uint32_t speedConfig;\n  int bitShift;\n  uint32_t *gpioRegister;\n  int portMapping;\n  uint32_t temporaryRegister;\n  \n  speedConfig = 0;\n  pinIndex = 0;\n  do {\n    if (0xf < pinIndex) {\n      return;\n    }\n    pinMask = 1 << (pinIndex & 0xff);\n    pinConfig = gpioConfig->Pin & pinMask;\n    if (pinMask == pinConfig) {\n      mode = gpioConfig->Mode;\n      if (mode == 0x12) {\n        speedConfig = gpioConfig->Speed + 0xc;\n      }\n      else if (mode < 0x13) {\n        if (mode == 2) {\n          speedConfig = gpioConfig->Speed + 8;\n        }\n        else if (mode < 3) {\n          if (mode == 0) goto LAB_0800423a;\n          if (mode == 1) {\n            speedConfig = gpioConfig->Speed;\n          }\n        }\n        else if (mode == 3) {\n          speedConfig = 0;\n        }\n        else if (mode == 0x11) {\n          speedConfig = gpioConfig->Speed + 4;\n        }\n      }\n      else if (mode == 0x10210000) {\nLAB_0800423a:\n        if (gpioConfig->Pull == 0) {\n          speedConfig = 4;\n        }\n        else if (gpioConfig->Pull == 1) {\n          gpioPort->BSRR = pinMask;\n          speedConfig = 8;\n        }\n        else {\n          gpioPort->BRR = pinMask;\n          speedConfig = 8;\n        }\n      }\n      else if (mode < 0x10210001) {\n        if ((mode == 0x10110000) || (mode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((mode == 0x10310000) || ((mode == 0x10320000 || (mode == 0x10220000))))\n      goto LAB_0800423a;\n      pinMask = pinIndex;\n      currentGPIO = gpioPort;\n      if (0xff < pinConfig) {\n        pinMask = pinIndex - 8;\n        currentGPIO = (GPIO_TypeDef *)&gpioPort->CRH;\n      }\n      currentGPIO->CRL = currentGPIO->CRL & ~(0xf << (pinMask << 2 & 0xff)) | speedConfig << (pinMask << 2 & 0xff);\n      if ((gpioConfig->Mode & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitShift = (pinIndex & 3) << 2;\n        if (gpioPort == (GPIO_TypeDef *)0x40010800) {\n          portMapping = 0;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40010c00) {\n          portMapping = 1;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40011000) {\n          portMapping = 2;\n        }\n        else if (gpioPort == (GPIO_TypeDef *)0x40011400) {\n          portMapping = 3;\n        }\n        else {\n          portMapping = 4;\n        }\n        *(uint *)(((pinIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((pinIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bitShift) | portMapping << bitShift;\n        if ((gpioConfig->Mode & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~pinConfig;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | pinConfig;\n        }\n        if ((gpioConfig->Mode & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~pinConfig;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | pinConfig;\n        }\n        if ((gpioConfig->Mode & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~pinConfig;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | pinConfig;\n        }\n        if ((gpioConfig->Mode & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~pinConfig;\n        }\n        else {\n          _DAT_4001040c = pinConfig | _DAT_4001040c;\n        }\n      }\n    }\n    pinIndex = pinIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "configure_gpio_080040e8",
                "GPIOx": "gpioPort",
                "GPIO_Init": "gpioConfig",
                "pGVar1": "currentGPIO",
                "uVar2": "pinMask",
                "uVar3": "pinConfig",
                "uVar4": "pinIndex",
                "uVar5": "mode",
                "uVar6": "speedConfig",
                "iVar7": "bitShift",
                "configregister": "gpioRegister",
                "iVar8": "portMapping",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_gpio_pin_state_080042d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\npin_numberState check_GPIO_PinState_080042d4(GPIO_TypeDef *GPIO_port,uint16_t pin_number)\n\n{\n  pin_numberState pin_state;\n  \n  if (((uint)pin_number & GPIO_port->IDR) == 0) {\n    pin_state = GPIO_PIN_RESET;\n    return pin_state;\n  }\n  return GPIO_PIN_SET;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_gpio_pin_state_080042d4",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "pin_number",
                "bitstatus": "pin_state"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "update_pin_state_080042e2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid updatePinState_080042e2(GPIO_TypeDef *port,uint16_t pin,pinState state)\n\n{\n  if (state == GPIO_PIN_RESET) {\n    port->BSRR = (uint)pin << 0x10;\n    return;\n  }\n  port->BSRR = (uint)pin;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "update_pin_state_080042e2",
                "GPIOx": "port",
                "GPIO_Pin": "pin",
                "PinState": "state"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "handle_gpio_pin_change_080042f0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_Pin_change_080042f0(uint16_t pin)\n\n{\n  if ((_DAT_40010414 & pin) != 0) {\n    _DAT_40010414 = (uint)pin;\n    HAL_GPIO_EXTI_Callback(pin);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "handle_gpio_pin_change_080042f0",
                "GPIO_Pin": "pin"
            },
            "calling": [
                "EXTI15_10_IRQHandler",
                "EXTI3_IRQHandler",
                "EXTI9_5_IRQHandler",
                "EXTI2_IRQHandler",
                "EXTI4_IRQHandler",
                "EXTI1_IRQHandler",
                "EXTI0_IRQHandler"
            ],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "set_i2_c_device_address_0800430c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict setI2CDeviceAddress_0800430c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  if (i2cHandle->mode == I2C_MODE_MEMORY) {\n    if (i2cHandle->eventCount == 0) {\n      i2cHandle->i2cInstance->dataRegister = i2cHandle->deviceAddress & 0xfe;\n    }\n    else {\n      i2cHandle->i2cInstance->dataRegister = i2cHandle->deviceAddress & 0xff | 1;\n    }\n  }\n  else if ((i2cHandle->i2cInit).addressingMode == 0x4000) {\n    if (i2cHandle->i2cState == I2C_STATE_BUSY_TRANSMIT) {\n      i2cHandle->i2cInstance->dataRegister = i2cHandle->deviceAddress & 0xfe;\n    }\n    else {\n      i2cHandle->i2cInstance->dataRegister = i2cHandle->deviceAddress & 0xff | 1;\n    }\n  }\n  else if (i2cHandle->eventCount == 0) {\n    i2cHandle->i2cInstance->dataRegister = (i2cHandle->deviceAddress << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (i2cHandle->eventCount == 1) {\n    i2cHandle->i2cInstance->dataRegister = (i2cHandle->deviceAddress << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return HAL_SUCCESS;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "set_i2_c_device_address_0800430c",
                "hi2c": "i2cHandle",
                "Mode": "mode",
                "EventCount": "eventCount",
                "Instance": "i2cInstance",
                "DR": "dataRegister",
                "Devaddress": "deviceAddress",
                "Init": "i2cInit",
                "AddressingMode": "addressingMode",
                "State": "i2cState",
                "HAL_I2C_MODE_MEM": "I2C_MODE_MEMORY",
                "HAL_I2C_STATE_BUSY_TX": "I2C_STATE_BUSY_TRANSMIT",
                "HAL_OK": "HAL_SUCCESS"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_i2_c_device_address_08004396",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict setI2CDeviceAddress_08004396(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  i2cHandle->Instance->DR = i2cHandle->Devaddress & 0xff;\n  return HAL_Status_OK;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_i2_c_device_address_08004396",
                "hi2c": "i2cHandle",
                "HAL_OK": "HAL_Status_OK"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "configure_i2_c_080043a2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureI2C_080043a2(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t currentXferOptions;\n  uint32_t var1;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t previousState;\n  uint32_t tempReg;\n  uint32_t tempReg1;\n  uint32_t tempReg2;\n  uint32_t tempReg3;\n  uint32_t tempReg4;\n  uint32_t tempReg5;\n  uint32_t tempReg6;\n  uint32_t tempReg7;\n  uint32_t tempReg8;\n  uint32_t tempReg9;\n  uint32_t tempReg10;\n  \n  var1 = i2cHandle->XferOptions;\n  if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) &&\n     ((i2cHandle->EventCount != 0 || (i2cHandle->Mode != HAL_I2C_MODE_MEM)))) {\n    if ((i2cHandle->EventCount == 0) && ((i2cHandle->Init).AddressingMode == 0xc000)) {\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->EventCount = i2cHandle->EventCount + 1;\n    }\n    else {\n      if (i2cHandle->XferCount == 0) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      }\n      else if (i2cHandle->XferCount == 1) {\n        if (var1 == 0xffff0000) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n          i2cInstance = i2cHandle->Instance;\n          if ((i2cInstance->CR2 & 0x800) == 0) {\n            i2cInstance->CR1 = i2cInstance->CR1 | 0x200;\n          }\n          else {\n            i2cInstance->CR1 = i2cInstance->CR1 & 0xfffffbff;\n          }\n        }\n        else if (((var1 == 4) || (var1 == 8)) || (i2cHandle->PreviousState == 0x12)) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n        }\n        else if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n      }\n      else if (i2cHandle->XferCount == 2) {\n        if (i2cHandle->XferOptions == 2) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        }\n        else {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x800;\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n        }\n        i2cInstance = i2cHandle->Instance;\n        if ((i2cInstance->CR2 & 0x800) != 0) {\n          i2cInstance->CR2 = i2cInstance->CR2 | 0x1000;\n        }\n      }\n      else {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n        i2cInstance = i2cHandle->Instance;\n        if ((i2cInstance->CR2 & 0x800) != 0) {\n          i2cInstance->CR2 = i2cInstance->CR2 | 0x1000;\n        }\n      }\n      i2cHandle->EventCount = 0;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "configure_i2_c_080043a2",
                "hi2c": "i2cHandle",
                "CurrentXferOptions": "currentXferOptions",
                "uVar1": "var1",
                "pIVar2": "i2cInstance",
                "Prev_State": "previousState",
                "tmpreg": "tempReg",
                "tmpreg_1": "tempReg1",
                "tmpreg_2": "tempReg2",
                "tmpreg_3": "tempReg3",
                "tmpreg_4": "tempReg4",
                "tmpreg_5": "tempReg5",
                "tmpreg_6": "tempReg6",
                "tmpreg_7": "tempReg7",
                "tmpreg_8": "tempReg8",
                "tmpreg_9": "tempReg9",
                "tmpreg_10": "tempReg10"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "transfer_one_byte_0800457c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict transferOneByte_0800457c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  byte *bufferPtr;\n  \n  if (i2cHandle->XferCount != 0) {\n    bufferPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPtr + 1;\n    i2cHandle->Instance->DR = (uint)*bufferPtr;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "transfer_one_byte_0800457c",
                "hi2c": "i2cHandle",
                "pbVar1": "bufferPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_xfer_count_and_buffer_0800459c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict updateXferCountAndBuffer_0800459c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint8_t *dataPtr;\n  \n  if (i2cHandle->XferCount != 0) {\n    dataPtr = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = dataPtr + 1;\n    *dataPtr = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_xfer_count_and_buffer_0800459c",
                "hi2c": "i2cHandle",
                "puVar1": "dataPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080045bc(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "initialize_i2_c_080045c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeI2C_080045c0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  bool isHighClockSpeedAllowed;\n  uint32_t pclk1Freq;\n  uint prescaler;\n  uint trise;\n  uint32_t dutyCycle;\n  \n  if (i2cHandle == (I2C_HandleTypeDef_conflict *)0x0) {\n    return HAL_ERROR;\n  }\n  if (i2cHandle->State == HAL_I2C_STATE_RESET) {\n    i2cHandle->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(i2cHandle);\n  }\n  i2cHandle->State = HAL_I2C_STATE_BUSY;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  if ((i2cHandle->Init).ClockSpeed < 0x186a1) {\n    if (pclk1Freq < 2000000) {\n      isHighClockSpeedAllowed = true;\n    }\n    else {\n      isHighClockSpeedAllowed = false;\n    }\n  }\n  else {\n    isHighClockSpeedAllowed = pclk1Freq < 4000000;\n  }\n  if (isHighClockSpeedAllowed) {\n    return HAL_ERROR;\n  }\n  prescaler = pclk1Freq / 1000000;\n  i2cHandle->Instance->CR2 = prescaler;\n  if (100000 < (i2cHandle->Init).ClockSpeed) {\n    prescaler = (prescaler * 300) / 1000;\n  }\n  i2cHandle->Instance->TRISE = prescaler + 1;\n  prescaler = (i2cHandle->Init).ClockSpeed;\n  if (prescaler < 0x186a1) {\n    pclk1Freq = (pclk1Freq - 1) / (prescaler << 1) + 1 & 0xfff;\n    if (pclk1Freq < 4) {\n      pclk1Freq = 4;\n    }\n  }\n  else {\n    dutyCycle = (i2cHandle->Init).DutyCycle;\n    if (dutyCycle == 0) {\n      trise = (pclk1Freq - 1) / (prescaler * 3);\n    }\n    else {\n      trise = (pclk1Freq - 1) / (prescaler * 0x19);\n    }\n    if ((trise + 1 & 0xfff) == 0) {\n      pclk1Freq = 1;\n    }\n    else if (dutyCycle == 0) {\n      pclk1Freq = (pclk1Freq - 1) / (prescaler * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      pclk1Freq = (pclk1Freq - 1) / (prescaler * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  i2cHandle->Instance->CCR = pclk1Freq;\n  i2cHandle->Instance->CR1 = (i2cHandle->Init).GeneralCallMode | (i2cHandle->Init).NoStretchMode;\n  i2cHandle->Instance->OAR1 = (i2cHandle->Init).AddressingMode | (i2cHandle->Init).OwnAddress1;\n  i2cHandle->Instance->OAR2 = (i2cHandle->Init).DualAddressMode | (i2cHandle->Init).OwnAddress2;\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 1;\n  i2cHandle->ErrorCode = 0;\n  i2cHandle->State = HAL_I2C_STATE_READY;\n  i2cHandle->PreviousState = 0;\n  i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "initialize_i2_c_080045c0",
                "hi2c": "i2cHandle",
                "bVar1": "isHighClockSpeedAllowed",
                "uVar2": "pclk1Freq",
                "uVar3": "prescaler",
                "uVar4": "trise",
                "uVar5": "dutyCycle"
            },
            "calling": [
                "i2c_custom_init"
            ],
            "called": [
                "HAL_I2C_MspInit",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "transmit_via_i2_c_08004728",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ntransmitViaI2C_08004728(I2C_HandleTypeDef_conflict *i2cHandle,uint16_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t timeoutCount;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    timeoutCount = (SystemCoreClock / 25000) * 0x19;\n    do {\n      if (timeoutCount == 0) {\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      i2cInstance = i2cHandle->Instance;\n      timeoutCount = timeoutCount - 1;\n    } while ((i2cInstance->SR2 & 2) != 0);\n    if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_TX;\n      i2cHandle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Devaddress = (uint)deviceAddress;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004728": "transmit_via_i2_c_08004728",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "count": "timeoutCount"
            },
            "calling": [
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "initialize_i2_c_080047f4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ninitializeI2C_080047f4(I2C_HandleTypeDef_conflict *i2cHandle,uint16_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t timeoutCount;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_READY) {\n    timeoutCount = (SystemCoreClock / 25000) * 0x19;\n    do {\n      if (timeoutCount == 0) {\n        i2cHandle->PreviousState = 0;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        i2cHandle->Lock = HAL_UNLOCKED;\n        return HAL_TIMEOUT;\n      }\n      i2cInstance = i2cHandle->Instance;\n      timeoutCount = timeoutCount - 1;\n    } while ((i2cInstance->SR2 & 2) != 0);\n    if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_RX;\n      i2cHandle->Mode = HAL_I2C_MODE_MASTER;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->XferOptions = 0xffff0000;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Devaddress = (uint)deviceAddress;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x400;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "initialize_i2_c_080047f4",
                "hi2c": "i2cHandle",
                "DevAddress": "deviceAddress",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "count": "timeoutCount"
            },
            "calling": [
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "set_i2_c_listen_mode_080048c8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nsetI2CListenMode_080048c8(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t *dataBuffer,uint16_t bufferSize,uint32_t transferOptions)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cPeripheral;\n  uint32_t tempRegister;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_LISTEN) {\n    if (dataBuffer == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (bufferSize == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      i2cPeripheral = i2cHandle->Instance;\n      if ((i2cPeripheral->CR1 & 1) == 0) {\n        i2cPeripheral->CR1 = i2cPeripheral->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_TX_LISTEN;\n      i2cHandle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataBuffer;\n      i2cHandle->XferCount = bufferSize;\n      i2cHandle->transferOptions = transferOptions;\n      i2cHandle->XferbufferSize = i2cHandle->XferCount;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "set_i2_c_listen_mode_080048c8",
                "hi2c": "i2cHandle",
                "pData": "dataBuffer",
                "Size": "bufferSize",
                "XferOptions": "transferOptions",
                "HVar1": "status",
                "pIVar2": "i2cPeripheral",
                "tmpreg": "tempRegister"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "listen_mode_i2_c_08004954",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nlistenModeI2C_08004954(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t *dataPointer,uint16_t dataSize,uint32_t transferOptions)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t temporaryRegister;\n  \n  if (i2cHandle->State == HAL_I2C_STATE_LISTEN) {\n    if (dataPointer == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (dataSize == 0) {\n      status = HAL_ERROR;\n    }\n    else if (i2cHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      i2cHandle->Lock = HAL_LOCKED;\n      i2cInstance = i2cHandle->Instance;\n      if ((i2cInstance->CR1 & 1) == 0) {\n        i2cInstance->CR1 = i2cInstance->CR1 | 1;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n      i2cHandle->State = HAL_I2C_STATE_BUSY_RX_LISTEN;\n      i2cHandle->Mode = HAL_I2C_MODE_SLAVE;\n      status = HAL_OK;\n      i2cHandle->ErrorCode = 0;\n      i2cHandle->pBuffPtr = dataPointer;\n      i2cHandle->XferCount = dataSize;\n      i2cHandle->transferOptions = transferOptions;\n      i2cHandle->XferdataSize = i2cHandle->XferCount;\n      i2cHandle->Lock = HAL_UNLOCKED;\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 | 0x700;\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08004954": "listen_mode_i2_c_08004954",
                "hi2c": "i2cHandle",
                "pData": "dataPointer",
                "Size": "dataSize",
                "XferOptions": "transferOptions",
                "HVar1": "status",
                "pIVar2": "i2cInstance",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_i2_c_080049e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeI2C_080049e0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  I2C_TypeDef_conflict *i2cTypeDef;\n  \n  if (i2cHandle->currentState != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  i2cHandle->currentState = HAL_I2C_STATE_LISTEN;\n  i2cTypeDef = i2cHandle->i2cInstance;\n  if ((i2cTypeDef->controlRegister1 & 1) == 0) {\n    i2cTypeDef->controlRegister1 = i2cTypeDef->controlRegister1 | 1;\n  }\n  i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x400;\n  i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 | 0x300;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_i2_c_080049e0",
                "hi2c": "i2cHandle",
                "State": "currentState",
                "Instance": "i2cInstance",
                "pIVar1": "i2cTypeDef",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2"
            },
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "i2c_attachSlaveTxEvent",
                "i2c_attachSlaveRxEvent",
                "HAL_I2C_ErrorCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a1e(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a20(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a22(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "send_byte_to_i2_c_08004a24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict sendByteToI2C_08004a24(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  byte *bufferPointer;\n  \n  currentState = i2cHandle->State;\n  if (i2cHandle->XferCount != 0) {\n    bufferPointer = i2cHandle->pBuffPtr;\n    i2cHandle->pBuffPtr = bufferPointer + 1;\n    i2cHandle->Instance->DR = (uint)*bufferPointer;\n    i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    if ((i2cHandle->XferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      i2cHandle->PreviousState = 0x21;\n      i2cHandle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n    }\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "send_byte_to_i2_c_08004a24",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "pbVar2": "bufferPointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004a74(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "read_from_i2_c_buffer_08004a76",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict readFromI2CBuffer_08004a76(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  uint8_t *bufferPtr;\n  \n  currentState = i2cHandle->State;\n  if (i2cHandle->transferCount != 0) {\n    bufferPtr = i2cHandle->currentBufferPtr;\n    i2cHandle->currentBufferPtr = bufferPtr + 1;\n    *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    if ((i2cHandle->transferCount == 0) && (currentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n      i2cHandle->PreviousState = 0x22;\n      i2cHandle->State = HAL_I2C_STATE_LISTEN;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "read_from_i2_c_buffer_08004a76",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "puVar2": "bufferPtr",
                "XferCount": "transferCount",
                "pBuffPtr": "currentBufferPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "handle_address_matching_08004ac2",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleAddressMatching_08004ac2(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint16_t addressMatchCode;\n  \n  if ((i2cHandle->Instance->SR2 & 0x80) == 0) {\n    addressMatchCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress1;\n  }\n  else {\n    addressMatchCode = *(uint16_t *)&(i2cHandle->Init).OwnAddress2;\n  }\n  HAL_I2C_AddrCallback(i2cHandle,(i2cHandle->Instance->SR2 & 4) == 0,addressMatchCode);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "handle_address_matching_08004ac2",
                "hi2c": "i2cHandle",
                "AddrMatchCode": "addressMatchCode"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_events_08004aec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CEvents_08004aec(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t currentTransferOptions;\n  uint32_t currentState;\n  \n  if (((i2cHandle->XferOptions == 4) || (i2cHandle->XferOptions == 8)) &&\n     (i2cHandle->State == HAL_I2C_STATE_LISTEN)) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2cHandle);\n  }\n  else if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->PreviousState = 0x21;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback(i2cHandle);\n  }\n  else {\n    i2cHandle->Instance->SR1 = 0xfffffbff;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_events_08004aec",
                "hi2c": "i2cHandle",
                "CurrentXferOptions": "currentTransferOptions",
                "CurrentState": "currentState"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004b80(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "handle_i2_c_transfer_08004b82",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef handleI2CTransfer_08004b82(I2C_HandleTypeDef *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef currentState;\n  uint32_t currentState;\n  byte *dataPtr;\n  uint32_t currentXferOptions;\n  uint32_t currentXferOptions;\n  \n  currentState = i2cHandle->State;\n  currentXferOptions = i2cHandle->XferOptions;\n  if ((i2cHandle->XferSize == 0) && (currentState == HAL_I2C_STATE_BUSY_TX)) {\n    if ((currentXferOptions == 4) || ((currentXferOptions == 8 || (currentXferOptions == 0xffff0000)))) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      i2cHandle->PreviousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MemTxCpltCallback(i2cHandle);\n      }\n      else {\n        i2cHandle->Mode = HAL_I2C_MODE_NONE;\n        HAL_I2C_MasterTxCpltCallback(i2cHandle);\n      }\n    }\n    else {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffff8ff;\n      i2cHandle->PreviousState = 0x11;\n      i2cHandle->Mode = HAL_I2C_MODE_NONE;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      HAL_I2C_MasterTxCpltCallback(i2cHandle);\n    }\n  }\n  else if ((currentState == HAL_I2C_STATE_BUSY_TX) ||\n          ((i2cHandle->Mode == HAL_I2C_MODE_MEM && (currentState == HAL_I2C_STATE_BUSY_RX)))) {\n    if (i2cHandle->XferCount == 0) {\n      i2cHandle->Instance->CR2 = i2cHandle->Instance->CR2 & 0xfffffbff;\n    }\n    else if (i2cHandle->Mode == HAL_I2C_MODE_MEM) {\n      if (i2cHandle->EventCount == 0) {\n        if (i2cHandle->MemaddSize == 1) {\n          i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n          i2cHandle->EventCount = i2cHandle->EventCount + 2;\n        }\n        else {\n          i2cHandle->Instance->DR = (i2cHandle->Memaddress << 0x10) >> 0x18;\n          i2cHandle->EventCount = i2cHandle->EventCount + 1;\n        }\n      }\n      else if (i2cHandle->EventCount == 1) {\n        i2cHandle->Instance->DR = i2cHandle->Memaddress & 0xff;\n        i2cHandle->EventCount = i2cHandle->EventCount + 1;\n      }\n      else if (i2cHandle->EventCount == 2) {\n        if (i2cHandle->State == HAL_I2C_STATE_BUSY_RX) {\n          i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x100;\n        }\n        else if (i2cHandle->State == HAL_I2C_STATE_BUSY_TX) {\n          dataPtr = i2cHandle->pBuffPtr;\n          i2cHandle->pBuffPtr = dataPtr + 1;\n          i2cHandle->Instance->DR = (uint)*dataPtr;\n          i2cHandle->XferCount = i2cHandle->XferCount - 1;\n        }\n      }\n    }\n    else {\n      dataPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataPtr + 1;\n      i2cHandle->Instance->DR = (uint)*dataPtr;\n      i2cHandle->XferCount = i2cHandle->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "handle_i2_c_transfer_08004b82",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "uVar3": "currentXferOptions",
                "pbVar2": "dataPtr",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "I2C_HandleTypeDef_conflict": "I2C_HandleTypeDef",
                "HAL_I2C_StateTypeDef_conflict": "HAL_I2C_StateTypeDef",
                "CurrentState": "currentState",
                "CurrentXferOptions": "currentXferOptions"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "transfer_complete_handler_08004ccc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict transferCompleteHandler_08004ccc(I2C_HandleTypeDef_conflict *i2cHandler)\n\n{\n  uint32_t transferOptions;\n  uint32_t currentTransferOptions;\n  byte *bufferPtr;\n  \n  transferOptions = i2cHandler->XferOptions;\n  if (i2cHandler->State == HAL_I2C_STATE_BUSY_TX) {\n    if (i2cHandler->XferCount == 0) {\n      if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n        i2cHandler->Instance->CR2 = i2cHandler->Instance->CR2 & 0xfffff8ff;\n        i2cHandler->Instance->CR1 = i2cHandler->Instance->CR1 | 0x200;\n        i2cHandler->PreviousState = 0;\n        i2cHandler->State = HAL_I2C_STATE_READY;\n        if (i2cHandler->Mode == HAL_I2C_MODE_MEM) {\n          i2cHandler->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MemTxCpltCallback(i2cHandler);\n        }\n        else {\n          i2cHandler->Mode = HAL_I2C_MODE_NONE;\n          HAL_I2C_MasterTxCpltCallback(i2cHandler);\n        }\n      }\n      else {\n        i2cHandler->Instance->CR2 = i2cHandler->Instance->CR2 & 0xfffff8ff;\n        i2cHandler->PreviousState = 0x11;\n        i2cHandler->Mode = HAL_I2C_MODE_NONE;\n        i2cHandler->State = HAL_I2C_STATE_READY;\n        HAL_I2C_MasterTxCpltCallback(i2cHandler);\n      }\n    }\n    else {\n      bufferPtr = i2cHandler->pBuffPtr;\n      i2cHandler->pBuffPtr = bufferPtr + 1;\n      i2cHandler->Instance->DR = (uint)*bufferPtr;\n      i2cHandler->XferCount = i2cHandler->XferCount - 1;\n    }\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "transfer_complete_handler_08004ccc",
                "hi2c": "i2cHandler",
                "uVar1": "transferOptions",
                "CurrentXferOptions": "currentTransferOptions",
                "pbVar2": "bufferPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004d6a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "receive_data_08004d6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict receiveData_08004d6c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint8_t *puVar1;\n  \n  if (i2cHandle->currentState == HAL_I2C_STATE_RECEIVING) {\n    if (i2cHandle->transferCount < 4) {\n      if (i2cHandle->transferCount - 2 < 2) {\n        if (i2cHandle->transferOptions == 2) {\n          i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x400;\n        }\n        else {\n          i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 & 0xfffffbff;\n          i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x800;\n        }\n        i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 & 0xfffffbff;\n      }\n      else {\n        if (i2cHandle->transferOptions == 2) {\n          i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x400;\n        }\n        else {\n          i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 & 0xfffffbff;\n        }\n        i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 & 0xfffff8ff;\n        puVar1 = i2cHandle->EEYPPdataRegisterGAH;\n        i2cHandle->EEYPPdataRegisterGAH = puVar1 + 1;\n        *puVar1 = (uint8_t)i2cHandle->i2cInstance->dataRegister;\n        i2cHandle->transferCount = i2cHandle->transferCount - 1;\n        i2cHandle->currentState = HAL_I2C_STATE_IDLE;\n        i2cHandle->PreviouscurrentState = 0;\n        if (i2cHandle->currentMode == HAL_I2C_MODE_MEMORY) {\n          i2cHandle->currentMode = HAL_I2C_MODE_NORMAL;\n          HAL_I2C_MemRxCpltCallback(i2cHandle);\n        }\n        else {\n          i2cHandle->currentMode = HAL_I2C_MODE_NORMAL;\n          HAL_I2C_MasterRxCpltCallback(i2cHandle);\n        }\n      }\n    }\n    else {\n      puVar1 = i2cHandle->EEYPPdataRegisterGAH;\n      i2cHandle->EEYPPdataRegisterGAH = puVar1 + 1;\n      *puVar1 = (uint8_t)i2cHandle->i2cInstance->dataRegister;\n      i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    }\n  }\n  return HAL_SUCCESS;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "receive_data_08004d6c",
                "hi2c": "i2cHandle",
                "State": "currentState",
                "XferCount": "transferCount",
                "XferOptions": "transferOptions",
                "Instance": "i2cInstance",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "pBuffPtr": "bufferPointer",
                "DR": "dataRegister",
                "Mode": "currentMode",
                "HAL_I2C_STATE_BUSY_RX": "HAL_I2C_STATE_RECEIVING",
                "HAL_I2C_STATE_READY": "HAL_I2C_STATE_IDLE",
                "HAL_I2C_MODE_NONE": "HAL_I2C_MODE_NORMAL",
                "HAL_I2C_MODE_MEM": "HAL_I2C_MODE_MEMORY",
                "HAL_OK": "HAL_SUCCESS"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_i2_c_data_08004e3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef processI2CData_08004e3c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  uint32_t transferOptions;\n  uint32_t currentTransferOptions;\n  uint8_t *bufferPtr;\n  \n  transferOptions = i2cHandle->transferOptions;\n  if (i2cHandle->transferCount == 3) {\n    if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n      i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 & 0xfffffbff;\n    }\n    bufferPtr = i2cHandle->bufferPointer;\n    i2cHandle->bufferPointer = bufferPtr + 1;\n    *bufferPtr = (uint8_t)i2cHandle->i2cInstance->DR;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n  }\n  else if (i2cHandle->transferCount == 2) {\n    if (((transferOptions == 4) || (transferOptions == 8)) || (transferOptions == 0xffff0000)) {\n      i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 & 0xfffffcff;\n      i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x200;\n    }\n    else {\n      if (transferOptions == 2) {\n        i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 | 0x400;\n      }\n      else {\n        i2cHandle->i2cInstance->controlRegister1 = i2cHandle->i2cInstance->controlRegister1 & 0xfffffbff;\n      }\n      i2cHandle->i2cInstance->controlRegister2 = i2cHandle->i2cInstance->controlRegister2 & 0xfffffcff;\n    }\n    bufferPtr = i2cHandle->bufferPointer;\n    i2cHandle->bufferPointer = bufferPtr + 1;\n    *bufferPtr = (uint8_t)i2cHandle->i2cInstance->DR;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    bufferPtr = i2cHandle->bufferPointer;\n    i2cHandle->bufferPointer = bufferPtr + 1;\n    *bufferPtr = (uint8_t)i2cHandle->i2cInstance->DR;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    i2cHandle->i2cState = HAL_I2C_STATE_READY;\n    i2cHandle->previousI2CState = 0;\n    if (i2cHandle->i2cMode == HAL_I2C_MODE_MEM) {\n      i2cHandle->i2cMode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MemRxCpltCallback(i2cHandle);\n    }\n    else {\n      i2cHandle->i2cMode = HAL_I2C_MODE_NONE;\n      HAL_I2C_MasterRxCpltCallback(i2cHandle);\n    }\n  }\n  else {\n    bufferPtr = i2cHandle->bufferPointer;\n    i2cHandle->bufferPointer = bufferPtr + 1;\n    *bufferPtr = (uint8_t)i2cHandle->i2cInstance->DR;\n    i2cHandle->transferCount = i2cHandle->transferCount - 1;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_i2_c_data_08004e3c",
                "hi2c": "i2cHandle",
                "uVar1": "transferOptions",
                "CurrentXferOptions": "currentTransferOptions",
                "puVar2": "bufferPtr",
                "XferOptions": "transferOptions",
                "XferCount": "transferCount",
                "Instance": "i2cInstance",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "pBuffPtr": "bufferPointer",
                "Mode": "i2cMode",
                "State": "i2cState",
                "PreviousState": "previousI2CState",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08004f3a(I2C_HandleTypeDef_conflict *hi2c)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "handle_i2_c_state_08004f3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CState_08004f3c(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint8_t *bufferPtr;\n  I2C_TypeDef_conflict *i2cInstance;\n  \n  if (i2cHandle->State - 0x29 < 2) {\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_LISTEN;\n  }\n  else {\n    if ((i2cHandle->State != HAL_I2C_STATE_ABORT) && ((i2cHandle->Instance->CR2 & 0x800) == 0)) {\n      i2cHandle->State = HAL_I2C_STATE_READY;\n    }\n    i2cHandle->PreviousState = 0;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n  }\n  i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffff7ff;\n  i2cInstance = i2cHandle->Instance;\n  if ((i2cInstance->CR2 & 0x800) == 0) {\n    if (i2cHandle->State == HAL_I2C_STATE_ABORT) {\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->ErrorCode = 0;\n      if ((i2cInstance->SR1 & 0x40) != 0) {\n        bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cInstance->DR;\n      }\n      i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(i2cHandle);\n    }\n    else {\n      if ((i2cInstance->SR1 & 0x40) != 0) {\n        bufferPtr = i2cHandle->pBuffPtr;\n        i2cHandle->pBuffPtr = bufferPtr + 1;\n        *bufferPtr = (uint8_t)i2cInstance->DR;\n      }\n      HAL_I2C_ErrorCallback(i2cHandle);\n    }\n  }\n  else {\n    i2cInstance->CR2 = i2cInstance->CR2 & 0xfffff7ff;\n    if (i2cHandle->hdmatx->State == HAL_DMA_STATE_READY) {\n      i2cHandle->hdmarx->XferAbortCallback = I2C_DMAAbort + 1;\n      status = HAL_DMA_Abort_IT(i2cHandle->hdmarx);\n      if (status != HAL_OK) {\n        if ((i2cHandle->Instance->SR1 & 0x40) != 0) {\n          bufferPtr = i2cHandle->pBuffPtr;\n          i2cHandle->pBuffPtr = bufferPtr + 1;\n          *bufferPtr = (uint8_t)i2cHandle->Instance->DR;\n        }\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        (*i2cHandle->hdmarx->XferAbortCallback)(i2cHandle->hdmarx);\n      }\n    }\n    else {\n      i2cHandle->hdmatx->XferAbortCallback = I2C_DMAAbort + 1;\n      status = HAL_DMA_Abort_IT(i2cHandle->hdmatx);\n      if (status != HAL_OK) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 & 0xfffffffe;\n        i2cHandle->State = HAL_I2C_STATE_READY;\n        (*i2cHandle->hdmatx->XferAbortCallback)(i2cHandle->hdmatx);\n      }\n    }\n  }\n  if ((i2cHandle->State == HAL_I2C_STATE_LISTEN) && ((i2cHandle->ErrorCode & 4) != 0)) {\n    i2cHandle->XferOptions = 0xffff0000;\n    i2cHandle->PreviousState = 0;\n    i2cHandle->State = HAL_I2C_STATE_READY;\n    i2cHandle->Mode = HAL_I2C_MODE_NONE;\n    HAL_I2C_ListenCpltCallback(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "handle_i2_c_state_08004f3c",
                "hi2c": "i2cHandle",
                "HVar1": "status",
                "puVar2": "bufferPtr",
                "pIVar3": "i2cInstance"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "handle_i2_c_transfer_08005084",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict handleI2CTransfer_08005084(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict currentState;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint8_t *dataBufferPtr;\n  uint32_t currentI2CState;\n  uint32_t temporaryRegister;\n  \n  currentState = i2cHandle->State;\n  i2cHandle->instance->controlRegister2 = i2cHandle->instance->controlRegister2 & 0xfffff8ff;\n  i2cHandle->instance->controlRegister1 = i2cHandle->instance->controlRegister1 | 1;\n  i2cHandle->instance->controlRegister1 = i2cHandle->instance->controlRegister1 & 0xfffffbff;\n  i2cInstance = i2cHandle->instance;\n  if ((i2cInstance->controlRegister2 & 0x800) != 0) {\n    if ((i2cHandle->State == HAL_I2C_STATE_BUSY_RX) || (i2cHandle->State == HAL_I2C_STATE_BUSY_RX_LISTEN)) {\n      i2cHandle->transferCount = (uint16_t)i2cHandle->dmaRxHandle->instance->DMAtransferCount;\n    }\n    else {\n      i2cHandle->transferCount = (uint16_t)i2cHandle->DdataRegisterSYLBPIR->instance->DMAtransferCount;\n    }\n  }\n  if (i2cHandle->transferCount != 0) {\n    if ((i2cInstance->statusRegister1 & 4) != 0) {\n      dataBufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataBufferPtr + 1;\n      *dataBufferPtr = (uint8_t)i2cInstance->dataRegister;\n      i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    }\n    if ((i2cHandle->instance->statusRegister1 & 0x40) != 0) {\n      dataBufferPtr = i2cHandle->pBuffPtr;\n      i2cHandle->pBuffPtr = dataBufferPtr + 1;\n      *dataBufferPtr = (uint8_t)i2cHandle->instance->dataRegister;\n      i2cHandle->transferCount = i2cHandle->transferCount - 1;\n    }\n    i2cHandle->error = i2cHandle->error | 4;\n  }\n  if (i2cHandle->error == 0) {\n    if (((currentState == HAL_I2C_STATE_LISTEN) || (currentState == HAL_I2C_STATE_BUSY_RX_LISTEN)) ||\n       (currentState == HAL_I2C_STATE_BUSY_TX_LISTEN)) {\n      i2cHandle->transferOptions = 0xffff0000;\n      i2cHandle->previousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->i2cMode = HAL_I2C_MODE_NONE;\n      HAL_I2C_ListenCpltCallback(i2cHandle);\n    }\n    else if ((i2cHandle->previousState == 0x22) || (currentState == HAL_I2C_STATE_BUSY_RX)) {\n      i2cHandle->previousState = 0;\n      i2cHandle->State = HAL_I2C_STATE_READY;\n      i2cHandle->i2cMode = HAL_I2C_MODE_NONE;\n      HAL_I2C_SlaveRxCpltCallback(i2cHandle);\n    }\n  }\n  else {\n    I2C_ITError(i2cHandle);\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08005084": "handle_i2_c_transfer_08005084",
                "hi2c": "i2cHandle",
                "HVar1": "currentState",
                "pIVar2": "i2cInstance",
                "puVar3": "dataBufferPtr",
                "CurrentState": "currentI2CState",
                "tmpreg": "temporaryRegister",
                "Instance": "instance",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "XferCount": "transferCount",
                "hdmarx": "dmaRxHandle",
                "CNDTR": "DMAtransferCount",
                "hdmatx": "dmaTxHandle",
                "SR1": "statusRegister1",
                "DR": "dataRegister",
                "ErrorCode": "error",
                "XferOptions": "transferOptions",
                "PreviousState": "previousState",
                "Mode": "i2cMode"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "handle_i2_c_interrupt_08005188",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CInterrupt_08005188(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t currentMode;\n  uint statusRegister1;\n  uint32_t interruptFlags1;\n  uint controlRegister2;\n  uint32_t interruptSources;\n  uint statusRegister2;\n  uint32_t sr2itflags;\n  \n  i2cInstance = i2cHandle->Instance;\n  statusRegister2 = i2cInstance->SR2;\n  statusRegister1 = i2cInstance->SR1;\n  controlRegister2 = i2cInstance->CR2;\n  if ((i2cHandle->Mode == HAL_I2C_MODE_MASTER) || (i2cHandle->Mode == HAL_I2C_MODE_MEM)) {\n    if (((statusRegister1 & 0x10001) == 0) || ((controlRegister2 & 0x200) == 0)) {\n      if (((statusRegister1 & 0x10008) == 0) || ((controlRegister2 & 0x200) == 0)) {\n        if (((statusRegister1 & 0x10002) != 0) && ((controlRegister2 & 0x200) != 0)) {\n          I2C_Master_ADDR(i2cHandle);\n        }\n      }\n      else {\n        I2C_Master_ADD10(i2cHandle);\n      }\n    }\n    else {\n      I2C_Master_SB(i2cHandle);\n    }\n    if ((statusRegister2 & 0x100004) == 0) {\n      if ((((statusRegister1 & 0x10040) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(i2cHandle);\n        return;\n      }\n    }\n    else {\n      if ((((statusRegister1 & 0x10080) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(i2cHandle);\n        return;\n      }\n    }\n  }\n  else {\n    if (((statusRegister1 & 0x10002) != 0) && ((controlRegister2 & 0x200) != 0)) {\n      I2C_Slave_ADDR(i2cHandle);\n      return;\n    }\n    if (((statusRegister1 & 0x10010) != 0) && ((controlRegister2 & 0x200) != 0)) {\n      I2C_Slave_STOPF(i2cHandle);\n      return;\n    }\n    if ((statusRegister2 & 0x100004) == 0) {\n      if ((((statusRegister1 & 0x10040) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(i2cHandle);\n      }\n    }\n    else {\n      if ((((statusRegister1 & 0x10080) != 0) && ((controlRegister2 & 0x400) != 0)) && ((statusRegister1 & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(i2cHandle);\n        return;\n      }\n      if (((statusRegister1 & 0x10004) != 0) && ((controlRegister2 & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(i2cHandle);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "handle_i2_c_interrupt_08005188",
                "hi2c": "i2cHandle",
                "pIVar1": "i2cInstance",
                "CurrentMode": "currentMode",
                "uVar2": "statusRegister1",
                "sr1itflags": "interruptFlags1",
                "uVar3": "controlRegister2",
                "itsources": "interruptSources",
                "uVar4": "statusRegister2"
            },
            "calling": [
                "I2C2_EV_IRQHandler",
                "I2C1_EV_IRQHandler"
            ],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF",
                "I2C_SlaveReceive_RXNE",
                "I2C_MasterTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_TXE",
                "I2C_Master_SB",
                "I2C_Master_ADD10",
                "I2C_MasterTransmit_BTF",
                "I2C_SlaveReceive_BTF",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_BTF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "handle_i2_c_interrupt_080052f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CInterrupt_080052f0(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  I2C_TypeDef_conflict *i2cInstance;\n  uint32_t statusReg1ITFlags;\n  uint statusReg1Value;\n  uint32_t itsources;\n  uint controlReg2Value;\n  \n  i2cInstance = i2cHandle->Instance;\n  statusReg1Value = i2cInstance->SR1;\n  controlReg2Value = i2cInstance->CR2;\n  if (((statusReg1Value & 0x10100) != 0) && ((controlReg2Value & 0x100) != 0)) {\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 1;\n    i2cInstance->SR1 = 0xfffffeff;\n    i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x8000;\n  }\n  if (((statusReg1Value & 0x10200) != 0) && ((controlReg2Value & 0x100) != 0)) {\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 2;\n    i2cHandle->Instance->SR1 = 0xfffffdff;\n  }\n  if (((statusReg1Value & 0x10400) != 0) && ((controlReg2Value & 0x100) != 0)) {\n    i2cState = i2cHandle->State;\n    if (((i2cHandle->Mode == HAL_I2C_MODE_SLAVE) && (i2cHandle->XferCount == 0)) &&\n       (((i2cState == HAL_I2C_STATE_BUSY_TX || (i2cState == HAL_I2C_STATE_BUSY_TX_LISTEN)) ||\n        ((i2cState == HAL_I2C_STATE_LISTEN && (i2cHandle->PreviousState == 0x21)))))) {\n      I2C_Slave_AF(i2cHandle);\n    }\n    else {\n      i2cHandle->ErrorCode = i2cHandle->ErrorCode | 4;\n      if (i2cHandle->Mode == HAL_I2C_MODE_MASTER) {\n        i2cHandle->Instance->CR1 = i2cHandle->Instance->CR1 | 0x200;\n      }\n      i2cHandle->Instance->SR1 = 0xfffffbff;\n    }\n  }\n  if (((statusReg1Value & 0x10800) != 0) && ((controlReg2Value & 0x100) != 0)) {\n    i2cHandle->ErrorCode = i2cHandle->ErrorCode | 8;\n    i2cHandle->Instance->SR1 = 0xfffff7ff;\n  }\n  if (i2cHandle->ErrorCode != 0) {\n    I2C_ITError(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "handle_i2_c_interrupt_080052f0",
                "hi2c": "i2cHandle",
                "HVar1": "i2cState",
                "pIVar2": "i2cInstance",
                "sr1itflags": "statusReg1ITFlags",
                "uVar3": "statusReg1Value",
                "uVar4": "controlReg2Value"
            },
            "calling": [
                "I2C2_ER_IRQHandler",
                "I2C1_ER_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053cc": {
            "entrypoint": "0x080053cc",
            "current_name": "reset_i2_c_080053cc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetI2C_080053cc(DMA_HandleTypeDef_conflict *dma)\n\n{\n  I2C_HandleTypeDef_conflict *i2cParent;\n  I2C_HandleTypeDef_conflict *i2c;\n  \n  i2cParent = (I2C_HandleTypeDef_conflict *)dma->Parent;\n  i2cParent->Instance->CR1 = i2cParent->Instance->CR1 & 0xfffffbff;\n  i2cParent->XferCount = 0;\n  i2cParent->dmatx->XferAbortCallback = (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0;\n  i2cParent->dmarx->XferAbortCallback = (_func_void___DMA_HandleTypeDef_ptr_conflict *)0x0;\n  if (i2cParent->State != STATE_ABORT) {\n    i2cParent->State = STATE_READY;\n    i2cParent->Mode = MODE_NONE;\n    i2cParent->Instance->CR1 = i2cParent->Instance->CR1 & 0xfffffffe;\n    handleI2CError(i2cParent);\n    return;\n  }\n  i2cParent->State = STATE_READY;\n  i2cParent->Mode = MODE_NONE;\n  i2cParent->ErrorCode = 0;\n  i2cParent->Instance->CR1 = i2cParent->Instance->CR1 & 0xfffffffe;\n  handleI2CAbortComplete(i2cParent);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053cc": "reset_i2_c_080053cc",
                "hdma": "dma",
                "hi2c_00": "i2cParent",
                "hi2c": "i2c",
                "HAL_I2C_STATE_ABORT": "STATE_ABORT",
                "HAL_I2C_STATE_READY": "STATE_READY",
                "HAL_I2C_MODE_NONE": "MODE_NONE",
                "HAL_I2C_ErrorCallback": "handleI2CError",
                "HAL_I2C_AbortCpltCallback": "handleI2CAbortComplete"
            },
            "calling": [],
            "called": [
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_i2_c_state_0800542a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nI2CState getI2CState_0800542a(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  return i2cHandle->State;\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_i2_c_state_0800542a",
                "hi2c": "i2cHandle",
                "HAL_I2C_StateTypeDef_conflict": "I2CState"
            },
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_i2_c_error_code_08005430",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getI2CErrorCode_08005430(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  return i2cHandle->error;\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_i2_c_error_code_08005430",
                "hi2c": "i2cHandle",
                "ErrorCode": "error"
            },
            "calling": [
                "i2c_master_read",
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_milliseconds_08005434",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid delayMilliseconds_08005434(uint32_t inputMilliseconds)\n\n{\n  bool isDelayNotZero;\n  uint32_t delayCount;\n  \n  delayCount = inputMilliseconds * (SystemCoreClock / 8000);\n  do {\n    isDelayNotZero = delayCount != 0;\n    delayCount = delayCount - 1;\n  } while (isDelayNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_milliseconds_08005434",
                "mdelay": "inputMilliseconds",
                "Delay": "delayCount",
                "bVar1": "isDelayNotZero"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "initialize_rcc_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeRCC_08005460(RCC_OscInitTypeDef_conflict *RCC_InitParams)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t currentTick;\n  uint32_t startTick;\n  bool isHSENew;\n  uint32_t temporaryRegister;\n  \n  if ((RCC_InitParams->OscillatorType & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (RCC_InitParams->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      startTick = RCC_InitParams->HSEState;\n      if (startTick == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (startTick == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (startTick == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (RCC_InitParams->HSEState == 0) {\n        startTick = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTick = HAL_GetTick();\n          if (100 < currentTick - startTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n      else {\n        startTick = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTick = HAL_GetTick();\n          if (100 < currentTick - startTick) {\n            return HAL_TIMEOUT;\n          }\n        }\n      }\n    }\n  }\n  if ((RCC_InitParams->OscillatorType & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (RCC_InitParams->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | RCC_InitParams->HSICalibrationValue << 3;\n    }\n    else if (RCC_InitParams->HSIState == 0) {\n      _DAT_42420000 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | RCC_InitParams->HSICalibrationValue << 3;\n    }\n  }\n  if ((RCC_InitParams->OscillatorType & 8) != 0) {\n    if (RCC_InitParams->LSIState == 0) {\n      _DAT_42420480 = 0;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTick = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (2 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((RCC_InitParams->OscillatorType & 4) != 0) {\n    isHSENew = (_DAT_4002101c & 0x10000000) == 0;\n    if (isHSENew) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTick = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTick = HAL_GetTick();\n        if (100 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    startTick = RCC_InitParams->LSEState;\n    if (startTick == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (startTick == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (startTick == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (RCC_InitParams->LSEState == 0) {\n      startTick = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTick = HAL_GetTick();\n        if (5000 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      startTick = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTick = HAL_GetTick();\n        if (5000 < currentTick - startTick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    if (isHSENew) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  startTick = (RCC_InitParams->PLL).PLLState;\n  if (startTick == 0) {\n    status = HAL_OK;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    status = HAL_ERROR;\n  }\n  else if (startTick == 2) {\n    _DAT_42420060 = 0;\n    startTick = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if ((RCC_InitParams->PLL).PLLSource == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | RCC_InitParams->HSEPredivValue;\n        }\n        _DAT_40021004 =\n             _DAT_40021004 & 0xffc2ffff |\n             (RCC_InitParams->PLL).PLLSource | (RCC_InitParams->PLL).PLLMUL;\n        _DAT_42420060 = 1;\n        startTick = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return HAL_OK;\n          }\n          currentTick = HAL_GetTick();\n        } while (currentTick - startTick < 3);\n        return HAL_TIMEOUT;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - startTick < 3);\n    status = HAL_TIMEOUT;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTick = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return HAL_OK;\n      }\n      currentTick = HAL_GetTick();\n    } while (currentTick - startTick < 3);\n    status = HAL_TIMEOUT;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08005460": "initialize_rcc_08005460",
                "RCC_OscInitStruct": "RCC_InitParams",
                "HVar1": "status",
                "uVar2": "currentTick",
                "uVar3": "startTick",
                "bVar4": "isHSENew",
                "tmpreg": "temporaryRegister"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "RCC_Delay",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_system_clock_08005840",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateSystemClock_08005840(void)\n\n{\n  uint32_t uVar1;\n  uint8_t predivFactors [2];\n  uint8_t pllmulFactors [16];\n  \n  pllmulFactors[12] = '\\x0e';\n  pllmulFactors[13] = '\\x0f';\n  pllmulFactors[14] = '\\x10';\n  pllmulFactors[15] = '\\x10';\n  pllmulFactors[8] = '\\n';\n  pllmulFactors[9] = '\\v';\n  pllmulFactors[10] = '\\f';\n  pllmulFactors[11] = '\\r';\n  pllmulFactors[4] = '\\x06';\n  pllmulFactors[5] = '\\a';\n  pllmulFactors[6] = '\\b';\n  pllmulFactors[7] = '\\t';\n  pllmulFactors[0] = '\\x02';\n  pllmulFactors[1] = '\\x03';\n  pllmulFactors[2] = '\\x04';\n  pllmulFactors[3] = '\\x05';\n  predivFactors[0] = '\\x01';\n  predivFactors[1] = '\\x02';\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = (uint)pllmulFactors[(_DAT_40021004 << 10) >> 0x1c] * 4000000;\n    }\n    else {\n      uVar1 = ((uint)pllmulFactors[(_DAT_40021004 << 10) >> 0x1c] * 8000000) /\n              (uint)predivFactors[-((int)(_DAT_40021004 << 0xe) >> 0x1f)];\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_system_clock_08005840",
                "aPredivFactorTable": "predivFactors",
                "aPLLMULFactorTable": "pllmulFactors"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "configure_clocks_080058ac",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef\nconfigureClocks_080058ac(RCC_ClkInitTypeDef_conflict *clockInitConfig,uint32_t flashLatency)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  uint uVar3;\n  \n  if ((_DAT_40022000 & 7) < flashLatency) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | flashLatency;\n    if (flashLatency != (flashLatency & 7)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitConfig->ClockType & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | clockInitConfig->AHBCLKDivider;\n  }\n  if ((clockInitConfig->ClockType & 1) != 0) {\n    uVar3 = clockInitConfig->SYSCLKSource;\n    if (uVar3 == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return HAL_ERROR;\n      }\n    }\n    else if ((uVar3 != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return HAL_ERROR;\n    }\n    _DAT_40021004 = uVar3 | _DAT_40021004 & 0xfffffffc;\n    uVar1 = getCurrentTick;\n    if (clockInitConfig->SYSCLKSource == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        uVar2 = getCurrentTick;\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else if (clockInitConfig->SYSCLKSource == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        uVar2 = getCurrentTick;\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        uVar2 = getCurrentTick;\n        if (5000 < uVar2 - uVar1) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\n  if (flashLatency < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | flashLatency;\n    if (flashLatency != (flashLatency & 7)) {\n      return HAL_ERROR;\n    }\n  }\n  if ((clockInitConfig->ClockType & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | clockInitConfig->APB1CLKDivider;\n  }\n  if ((clockInitConfig->ClockType & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | clockInitConfig->APB2CLKDivider << 3;\n  }\n  uVar1 = getSysClockFrequency;\n  systemCoreClock = uVar1 >> \"\"[(_DAT_40021004 << 0x18) >> 0x1c];\n  initializeTick;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "configure_clocks_080058ac",
                "RCC_ClkInitStruct": "clockInitConfig",
                "FLatency": "flashLatency",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "HAL_GetTick()": "getCurrentTick",
                "HAL_RCC_GetSysClockFreq()": "getSysClockFrequency",
                "SystemCoreClock": "systemCoreClock",
                "HAL_InitTick(0xf)": "initializeTick"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_system_core_clock_08005a1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getSystemCoreClock_08005a1c(void)\n\n{\n  return systemClock;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_system_core_clock_08005a1c",
                "SystemCoreClock": "systemClock"
            },
            "calling": [
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_adjusted_hclk_freq_08005a28",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getAdjustedHCLKFreq_08005a28(void)\n\n{\n  uint32_t adjustedFreq;\n  \n  adjustedFreq = HAL_RCC_GetHCLKFreq();\n  return adjustedFreq >> \"\"[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_adjusted_hclk_freq_08005a28",
                "uVar1": "adjustedFreq"
            },
            "calling": [
                "getTimerClkFreq",
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_hclk_frequency_08005a48",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t getHCLKFrequency_08005a48(void)\n\n{\n  uint32_t hclkFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  return hclkFreq >> \"\"[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_hclk_frequency_08005a48",
                "uVar1": "hclkFreq"
            },
            "calling": [
                "getTimerClkFreq",
                "HAL_RCCEx_GetPeriphCLKFreq",
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "update_clk_config_08005a68",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid updateClkConfig_08005a68(RCC_ClkInitTypeDef_conflict *RCC_ClkInitStruct,uint32_t *pointerToLatency)\n\n{\n  RCC_ClkInitStruct->clockType = 0xf;\n  RCC_ClkInitStruct->sysClockSource = _DAT_40021004 & 3;\n  RCC_ClkInitStruct->ahbClockDivider = _DAT_40021004 & 0xf0;\n  RCC_ClkInitStruct->apb1ClockDivider = _DAT_40021004 & 0x700;\n  RCC_ClkInitStruct->apb2ClockDivider = _DAT_40021004 >> 3 & 0x700;\n  *pointerToLatency = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "update_clk_config_08005a68",
                "pFLatency": "pointerToLatency",
                "ClockType": "clockType",
                "SYSCLKSource": "sysClockSource",
                "AHBCLKDivider": "ahbClockDivider",
                "APB1CLKDivider": "apb1ClockDivider",
                "APB2CLKDivider": "apb2ClockDivider"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "configure_periph_clocks_08005aa4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configurePeriphClocks_08005aa4(RCC_PeriphCLKInitTypeDef_conflict *peripheralClockInit)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  bool bVar5;\n  uint32_t tmpreg;\n  \n  if ((peripheralClockInit->PeriphClockSelection & 1) != 0) {\n    bVar5 = (_DAT_4002101c & 0x10000000) == 0;\n    if (bVar5) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      uVar3 = getCurrentTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        uVar4 = getCurrentTick();\n        if (100 < uVar4 - uVar3) {\n          return HAL_ERROR_TIMEOUT;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) &&\n       ((_DAT_40021020 & 0x300) != (peripheralClockInit->RTCClockSelection & 0x300))) {\n      uVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      uVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = uVar2;\n      if (uVar1 != 0) {\n        uVar3 = getCurrentTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          uVar4 = getCurrentTick();\n          if (5000 < uVar4 - uVar3) {\n            return HAL_ERROR_TIMEOUT;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | peripheralClockInit->RTCClockSelection;\n    if (bVar5) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((peripheralClockInit->PeriphClockSelection & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | peripheralClockInit->AdcClockSelection;\n  }\n  if ((peripheralClockInit->PeriphClockSelection & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | peripheralClockInit->UsbClockSelection;\n  }\n  return HAL_ERROR_NONE;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "configure_periph_clocks_08005aa4",
                "PeriphClkInit": "peripheralClockInit",
                "HAL_GetTick": "getCurrentTick",
                "HAL_TIMEOUT": "HAL_ERROR_TIMEOUT",
                "HAL_OK": "HAL_ERROR_NONE"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_clock_frequency_08005bb8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nuint32_t calculateClockFrequency_08005bb8(uint32_t clockSource)\n\n{\n  uint32_t frequency;\n  uint tempValue;\n  uint8_t predivFactors [2];\n  uint8_t pllMultiplierFactors [16];\n  \n  pllMultiplierFactors[12] = '\\x0e';\n  pllMultiplierFactors[13] = '\\x0f';\n  pllMultiplierFactors[14] = '\\x10';\n  pllMultiplierFactors[15] = '\\x10';\n  pllMultiplierFactors[8] = '\\n';\n  pllMultiplierFactors[9] = '\\v';\n  pllMultiplierFactors[10] = '\\f';\n  pllMultiplierFactors[11] = '\\r';\n  pllMultiplierFactors[4] = '\\x06';\n  pllMultiplierFactors[5] = '\\a';\n  pllMultiplierFactors[6] = '\\b';\n  pllMultiplierFactors[7] = '\\t';\n  pllMultiplierFactors[0] = '\\x02';\n  pllMultiplierFactors[1] = '\\x03';\n  pllMultiplierFactors[2] = '\\x04';\n  pllMultiplierFactors[3] = '\\x05';\n  predivFactors[0] = '\\x01';\n  predivFactors[1] = '\\x02';\n  if (clockSource == 2) {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (clockSource == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        tempValue = 4000000;\n      }\n      else {\n        tempValue = 8000000 / predivFactors[-((int)(_DAT_40021004 << 0xe) >> 0x1f)];\n      }\n      frequency = tempValue * pllMultiplierFactors[(_DAT_40021004 << 10) >> 0x1c];\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (clockSource == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "PeriphClk": "clockSource",
                "uVar1": "frequency",
                "uVar2": "tempValue",
                "aPredivFactorTable": "predivFactors",
                "aPLLMULFactorTable": "pllMultiplierFactors"
            },
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "handle_rtc_events_08005cb4",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid handleRTCEvents_08005cb4(RTC_HandleTypeDef *rtcHandler)\n\n{\n  if (((rtcHandler->rtcInstance->controlHighReg & 2) != 0) && ((rtcHandler->rtcInstance->controlLowReg & 2) != 0)) {\n    handleAlarmAEvent(rtcHandler);\n    rtcHandler->rtcInstance->controlLowReg = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  rtcHandler->State = HAL_RTC_STATE_READY;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "handle_rtc_events_08005cb4",
                "hrtc": "rtcHandler",
                "Instance": "rtcInstance",
                "CRH": "controlHighReg",
                "CRL": "controlLowReg",
                "HAL_RTC_AlarmAEventCallback": "handleAlarmAEvent"
            },
            "calling": [
                "RTC_Alarm_IRQHandler"
            ],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "configure_timer_output_08005cec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerOutput_08005cec(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint32_t CCER_mask;\n  uint32_t CR2_value;\n  uint OCMode_value;\n  \n  timer->CCER = timer->CCER & 0xfffffffe;\n  CR2_value = timer->CR2;\n  OCMode_value = outputConfig->OCMode;\n  CCER_mask = timer->CCER & 0xfffffffd | outputConfig->OCPolarity;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    CCER_mask = (CCER_mask & 0xfffffff7 | outputConfig->OCNPolarity) & 0xfffffffb;\n    CR2_value = CR2_value & 0xfffffcff | outputConfig->OCIdleState | outputConfig->OCNIdleState;\n  }\n  timer->CR2 = CR2_value;\n  timer->CCMR1 = timer->CCMR1 & 0xffffff8c | OCMode_value;\n  timer->CCR1 = outputConfig->Pulse;\n  timer->CCER = CCER_mask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "configure_timer_output_08005cec",
                "TIMx": "timer",
                "OC_Config": "outputConfig",
                "uVar1": "CCER_mask",
                "uVar2": "CR2_value",
                "uVar3": "OCMode_value"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "configure_timer_output_compare_08005d48",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerOutputCompare_08005d48(timerTypeDef *timer,TIM_OC_InitTypeDef *outputCompareConfig)\n\n{\n  uint32_t ccerMask;\n  uint32_t cr2Value;\n  uint ocMode;\n  \n  timer->ccerRegister = timer->ccerRegister & 0xfffffeff;\n  cr2Value = timer->cr2Register;\n  ocMode = outputCompareConfig->ocMode;\n  ccerMask = timer->ccerRegister & 0xfffffdff | outputCompareConfig->ocPolarity << 8;\n  if (timer == (timerTypeDef *)0x40012c00) {\n    ccerMask = (ccerMask & 0xfffff7ff | outputCompareConfig->ocnPolarity << 8) & 0xfffffbff;\n    cr2Value = cr2Value & 0xffffcfff | outputCompareConfig->ocIdleState << 4 | outputCompareConfig->ocnIdleState << 4;\n  }\n  timer->cr2Register = cr2Value;\n  timer->ccmr2Register = timer->ccmr2Register & 0xffffff8c | ocMode;\n  timer->ccr3Value = outputCompareConfig->pulse;\n  timer->ccerRegister = ccerMask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "configure_timer_output_compare_08005d48",
                "TIMx": "timer",
                "OC_Config": "outputCompareConfig",
                "uVar1": "ccerMask",
                "uVar2": "cr2Value",
                "uVar3": "ocMode",
                "TIM_TypeDef_conflict": "timerTypeDef",
                "CCER": "ccerRegister",
                "CR2": "cr2Register",
                "OCMode": "ocMode",
                "OCPolarity": "ocPolarity",
                "OCNPolarity": "ocnPolarity",
                "OCIdleState": "ocIdleState",
                "OCNIdleState": "ocnIdleState",
                "CCMR2": "ccmr2Register",
                "CCR3": "ccr3Value",
                "Pulse": "pulse"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "configure_timer_output_compare_08005dac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerOutputCompare_08005dac(TIM_TypeDef_conflict *timer,TIM_OC_InitTypeDef *outputCompareConfig)\n\n{\n  uint32_t cr2Value;\n  uint32_t ocModeValue;\n  uint32_t ocPolarityValue;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  cr2Value = timer->CR2;\n  ocModeValue = outputCompareConfig->OCMode;\n  ocPolarityValue = outputCompareConfig->OCPolarity;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    cr2Value = cr2Value & 0xffffbfff | outputCompareConfig->OCIdleState << 6;\n  }\n  timer->CR2 = cr2Value;\n  timer->CCMR2 = timer->CCMR2 & 0xffff8cff | ocModeValue << 8;\n  timer->CCR4 = outputCompareConfig->Pulse;\n  timer->CCER = timer->CCER & 0xffffdfff | ocPolarityValue << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "configure_timer_output_compare_08005dac",
                "TIMx": "timer",
                "OC_Config": "outputCompareConfig",
                "uVar1": "cr2Value",
                "uVar2": "ocModeValue",
                "uVar3": "ocPolarityValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "reset_timer_08005df4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict resetTimer_08005df4(TIM_HandleTypeDef_conflict *timer)\n\n{\n  Timer_TypeDef *timerInstance;\n  \n  timer->State = TIM_STATE_BUSY;\n  timerInstance = timer->Instance;\n  if (((timerInstance->CaptureCompareEnableRegister & 0x1111) == 0) && ((timerInstance->CaptureCompareEnableRegister & 0x444) == 0)) {\n    timerInstance->ControlRegister1 = timerInstance->ControlRegister1 & 0xfffffffe;\n  }\n  deinitializeTimerOC(timer);\n  timer->State = TIM_STATE_RESET;\n  timer->Lock = UNLOCKED;\n  return OK;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "reset_timer_08005df4",
                "htim": "timer",
                "HAL_TIM_STATE_BUSY": "TIM_STATE_BUSY",
                "TIM_TypeDef_conflict": "Timer_TypeDef",
                "pTVar1": "timerInstance",
                "CCER": "CaptureCompareEnableRegister",
                "CR1": "ControlRegister1",
                "HAL_TIM_OC_MspDeInit": "deinitializeTimerOC",
                "HAL_TIM_STATE_RESET": "TIM_STATE_RESET",
                "HAL_UNLOCKED": "UNLOCKED",
                "HAL_OK": "OK"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "reset_timer_08005e2e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict resetTimer_08005e2e(TIM_HandleTypeDef_conflict *timer)\n\n{\n  TimerTypeDef *timerInstance;\n  \n  timer->State = busyState;\n  timerInstance = timer->Instance;\n  if (((timerInstance->captureCompareEnableRegister & 0x1111) == 0) && ((timerInstance->captureCompareEnableRegister & 0x444) == 0)) {\n    timerInstance->controlRegister1 = timerInstance->controlRegister1 & 0xfffffffe;\n  }\n  deinitializePwm(timer);\n  timer->State = resetState;\n  timer->Lock = unlockedState;\n  return OK;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "reset_timer_08005e2e",
                "htim": "timer",
                "HAL_TIM_STATE_BUSY": "busyState",
                "TIM_TypeDef_conflict": "TimerTypeDef",
                "pTVar1": "timerInstance",
                "CCER": "captureCompareEnableRegister",
                "CR1": "controlRegister1",
                "HAL_TIM_PWM_MspDeInit": "deinitializePwm",
                "HAL_TIM_STATE_RESET": "resetState",
                "HAL_UNLOCKED": "unlockedState",
                "HAL_OK": "OK"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e68(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e6a(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08005e6c(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "handle_irq_08005e6e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleIRQ_08005e6e(TIM_HandleTypeDef_conflict *timer)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 2) != 0) && ((timerInstance->DIER & 2) != 0)) {\n    timerInstance->SR = 0xfffffffd;\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_1;\n    if ((timer->Instance->CCMR1 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 4) != 0) && ((timerInstance->DIER & 4) != 0)) {\n    timerInstance->SR = 0xfffffffb;\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_2;\n    if ((timer->Instance->CCMR1 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 8) != 0) && ((timerInstance->DIER & 8) != 0)) {\n    timerInstance->SR = 0xfffffff7;\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_3;\n    if ((timer->Instance->CCMR2 & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 0x10) != 0) && ((timerInstance->DIER & 0x10) != 0)) {\n    timerInstance->SR = 0xffffffef;\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_4;\n    if ((timer->Instance->CCMR2 & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(timer);\n      HAL_TIM_PWM_PulseFinishedCallback(timer);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(timer);\n    }\n    timer->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 1) != 0) && ((timerInstance->DIER & 1) != 0)) {\n    timerInstance->SR = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(timer);\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 0x80) != 0) && ((timerInstance->DIER & 0x80) != 0)) {\n    timerInstance->SR = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(timer);\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 0x40) != 0) && ((timerInstance->DIER & 0x40) != 0)) {\n    timerInstance->SR = 0xffffffbf;\n    HAL_TIM_TriggerCallback(timer);\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->SR & 0x20) != 0) && ((timerInstance->DIER & 0x20) != 0)) {\n    timerInstance->SR = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(timer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "handle_irq_08005e6e",
                "htim": "timer",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "TIM4_IRQHandler",
                "TIM2_IRQHandler",
                "TIM3_IRQHandler",
                "TIM1_UP_IRQHandler"
            ],
            "called": [
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "configure_timer_08005fe8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimer_08005fe8(TIM_TypeDef_conflict *timer,TIM_Base_InitTypeDef_conflict *timerConfig)\n\n{\n  uint controlRegister;\n  \n  controlRegister = timer->CR1;\n  if ((((timer == (TIM_TypeDef_conflict *)0x40012c00) || (timer == (TIM_TypeDef_conflict *)0x40000000)\n       ) || (timer == (TIM_TypeDef_conflict *)0x40000400)) ||\n     (timer == (TIM_TypeDef_conflict *)0x40000800)) {\n    controlRegister = controlRegister & 0xffffff8f | timerConfig->CounterMode;\n  }\n  if (((timer == (TIM_TypeDef_conflict *)0x40012c00) || (timer == (TIM_TypeDef_conflict *)0x40000000))\n     || ((timer == (TIM_TypeDef_conflict *)0x40000400 || (timer == (TIM_TypeDef_conflict *)0x40000800)\n         ))) {\n    controlRegister = controlRegister & 0xfffffcff | timerConfig->ClockDivision;\n  }\n  timer->CR1 = controlRegister & 0xffffff7f | timerConfig->AutoReloadPreload;\n  timer->ARR = timerConfig->Period;\n  timer->PSC = timerConfig->Prescaler;\n  if (timer == (TIM_TypeDef_conflict *)0x40012c00) {\n    uRam40012c30 = timerConfig->RepetitionCounter;\n  }\n  timer->EGR = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "configure_timer_08005fe8",
                "TIMx": "timer",
                "Structure": "timerConfig",
                "uVar1": "controlRegister"
            },
            "calling": [
                "HAL_TIM_OC_Init",
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_tim_08006060",
            "code": "\n/* WARNING: Unknown calling convention */\n\nstatus initialize_TIM_08006060(timer_handler *timer)\n\n{\n  if (timer != (timer_handler *)0x0) {\n    if (timer->State == state_reset) {\n      timer->Lock = unlocked;\n      initialize_TIM_08006060_OC(timer);\n    }\n    timer->State = state_busy;\n    set_TIM_config(timer->instance,&timer->init);\n    timer->State = state_ready;\n    return ok;\n  }\n  return error;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_tim_08006060",
                "htim": "timer",
                "HAL_StatusTypeDef_conflict": "status",
                "TIM_HandleTypeDef_conflict": "timer_handler",
                "HAL_UNLOCKED": "unlocked",
                "HAL_TIM_STATE_RESET": "state_reset",
                "HAL_TIM_STATE_BUSY": "state_busy",
                "HAL_TIM_STATE_READY": "state_ready",
                "HAL_OK": "ok",
                "HAL_ERROR": "error",
                "HAL_TIM_OC_MspInit": "initialize_TIM_OC",
                "TIM_Base_SetConfig": "set_TIM_config",
                "Instance": "instance",
                "Init": "init"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "HAL_TIM_OC_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_tim_08006092",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef initialize_TIM_08006092(TIM_HandleTypeDef *timer_handle)\n\n{\n  if (timer_handle != (TIM_HandleTypeDef *)0x0) {\n    if (timer_handle->State == HAL_TIM_STATE_RESET) {\n      timer_handle->Lock = HAL_UNLOCKED;\n      HAL_TIM_PWM_MspInit(timer_handle);\n    }\n    timer_handle->State = HAL_TIM_STATE_BUSY;\n    TIM_Base_SetConfig(timer_handle->Instance,&timer_handle->Init);\n    timer_handle->State = HAL_TIM_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_tim_08006092",
                "htim": "timer_handle",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef",
                "TIM_HandleTypeDef_conflict": "TIM_HandleTypeDef"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "configure_timer_output_080060c4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerOutput_080060c4(TimerStruct *timer,TIM_OC_InitTypeDef *OutputConfig)\n\n{\n  uint32_t ccerMask;\n  uint32_t cr2Value;\n  uint32_t ocMode;\n  \n  timer->CCER = timer->CCER & 0xffffffef;\n  cr2Value = timer->CR2;\n  ocMode = OutputConfig->OCMode;\n  ccerMask = timer->CCER & 0xffffffdf | OutputConfig->OCPolarity << 4;\n  if (timer == (TimerStruct *)0x40012c00) {\n    ccerMask = (ccerMask & 0xffffff7f | OutputConfig->OCNPolarity << 4) & 0xffffffbf;\n    cr2Value = cr2Value & 0xfffff3ff | OutputConfig->OCIdleState << 2 | OutputConfig->OCNIdleState << 2;\n  }\n  timer->CR2 = cr2Value;\n  timer->CCMR1 = timer->CCMR1 & 0xffff8cff | ocMode << 8;\n  timer->CCR2 = OutputConfig->Pulse;\n  timer->CCER = ccerMask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "configure_timer_output_080060c4",
                "TIM_TypeDef_conflict": "TimerStruct",
                "OC_Config": "OutputConfig",
                "uVar1": "ccerMask",
                "uVar2": "cr2Value",
                "uVar3": "ocMode",
                "TIMx": "timer"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "configure_timer_output_compare_08006128",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureTimerOutputCompare_08006128(TIM_HandleTypeDef_conflict *timer,TIM_OC_InitTypeDef *outputConfig,uint32_t channel)\n\n{\n  if (timer->Lock != HAL_LOCKED) {\n    timer->Lock = HAL_LOCKED;\n    timer->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timer->Instance,outputConfig);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timer->Instance,outputConfig);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timer->Instance,outputConfig);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timer->Instance,outputConfig);\n    }\n    timer->State = HAL_TIM_STATE_READY;\n    timer->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08006128": "configure_timer_output_compare_08006128",
                "htim": "timer",
                "sConfig": "outputConfig",
                "Channel": "channel"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_timer_channel_08006186",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\nconfigureTimerChannel_08006186(TIM_HandleTypeDef_conflict *timerHandle,TIM_OC_InitTypeDef *initConfig,uint32_t channel)\n\n{\n  if (timerHandle->Lock != HAL_LOCKED) {\n    timerHandle->Lock = HAL_LOCKED;\n    timerHandle->State = HAL_TIM_STATE_BUSY;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(timerHandle->Instance,initConfig);\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | 8;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 & 0xfffffffb;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | initConfig->OCFastMode;\n      break;\n    case 4:\n      TIM_OC2_SetConfig(timerHandle->Instance,initConfig);\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | 0x800;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 & 0xfffffbff;\n      timerHandle->Instance->CCMR1 = timerHandle->Instance->CCMR1 | initConfig->OCFastMode << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(timerHandle->Instance,initConfig);\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | 8;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 & 0xfffffffb;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | initConfig->OCFastMode;\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(timerHandle->Instance,initConfig);\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | 0x800;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 & 0xfffffbff;\n      timerHandle->Instance->CCMR2 = timerHandle->Instance->CCMR2 | initConfig->OCFastMode << 8;\n    }\n    timerHandle->State = HAL_TIM_STATE_READY;\n    timerHandle->Lock = HAL_UNLOCKED;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_timer_channel_08006186",
                "htim": "timerHandle",
                "sConfig": "initConfig",
                "Channel": "channel"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_OC4_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC3_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "configure_timer_channel_state_08006262",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureTimerChannelState_08006262(TIM_TypeDef_conflict *timer,uint32_t channel,uint32_t channelState)\n\n{\n  timer->CCER = timer->CCER & ~(1 << (channel & 0xff));\n  timer->CCER = timer->CCER | channelState << (channel & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "configure_timer_channel_state_08006262",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channelState"
            },
            "calling": [
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_OC_Stop_IT",
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "configure_timer_interrupt_08006280",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimerInterrupt_08006280(TIM_HandleTypeDef_conflict *timerHandler,uint32_t channel)\n\n{\n  switch(channel) {\n  case 0:\n    timerHandler->timerInstance->interruptEnableRegister = timerHandler->timerInstance->interruptEnableRegister | 2;\n    break;\n  case 4:\n    timerHandler->timerInstance->interruptEnableRegister = timerHandler->timerInstance->interruptEnableRegister | 4;\n    break;\n  case 8:\n    timerHandler->timerInstance->interruptEnableRegister = timerHandler->timerInstance->interruptEnableRegister | 8;\n    break;\n  case 0xc:\n    timerHandler->timerInstance->interruptEnableRegister = timerHandler->timerInstance->interruptEnableRegister | 0x10;\n  }\n  configureCaptureCompareChannel(timerHandler->timerInstance,channel,1);\n  if (timerHandler->timerInstance == (TIM_TypeDef_conflict *)0x40012c00) {\n    uRam40012c44 = uRam40012c44 | 0x8000;\n  }\n  timerHandler->timerInstance->controlRegister1 = timerHandler->timerInstance->controlRegister1 | 1;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006280": "configure_timer_interrupt_08006280",
                "htim": "timerHandler",
                "Channel": "channel",
                "Instance": "timerInstance",
                "DIER": "interruptEnableRegister",
                "TIM_CCxChannelCmd": "configureCaptureCompareChannel",
                "CR1": "controlRegister1"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "configure_timer_080062f4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimer_080062f4(TIM_HandleTypeDef_conflict *timer,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *pTimer;\n  \n  switch(channel) {\n  case 0:\n    timer->Instance->DIER = timer->Instance->DIER & 0xfffffffd;\n    break;\n  case 4:\n    timer->Instance->DIER = timer->Instance->DIER & 0xfffffffb;\n    break;\n  case 8:\n    timer->Instance->DIER = timer->Instance->DIER & 0xfffffff7;\n    break;\n  case 0xc:\n    timer->Instance->DIER = timer->Instance->DIER & 0xffffffef;\n  }\n  TIM_CCxchannelCmd(timer->Instance,channel,0);\n  if (((timer->Instance == (TIM_TypeDef_conflict *)0x40012c00) && ((timerControl1 & 0x1111) == 0)) &&\n     ((timerControl1 & 0x444) == 0)) {\n    timerControl2 = timerControl2 & 0xffff7fff;\n  }\n  pTimer = timer->Instance;\n  if (((pTimer->CCER & 0x1111) == 0) && ((pTimer->CCER & 0x444) == 0)) {\n    pTimer->CR1 = pTimer->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "configure_timer_080062f4",
                "htim": "timer",
                "Channel": "channel",
                "pTVar1": "pTimer",
                "uRam40012c20": "timerControl1",
                "uRam40012c44": "timerControl2"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "configure_tim_channel_08006390",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configure_TIM_Channel_08006390(TIM_HandleTypeDef_conflict *timer_handle,uint32_t channel)\n\n{\n  configure_TIM_CCxChannel(timer_handle->Instance,channel,1);\n  if (timer_handle->Instance == (TIM_instance *)0x40012c00) {\n    data_register = data_register | 0x8000;\n  }\n  timer_handle->Instance->control_register = timer_handle->Instance->control_register | 1;\n  return HAL_Status_OK;\n}\n\n",
            "renaming": {
                "FUN_08006390": "configure_tim_channel_08006390",
                "htim": "timer_handle",
                "Channel": "channel",
                "TIM_CCxChannelCmd": "configure_TIM_CCxChannel",
                "TIM_TypeDef_conflict": "TIM_instance",
                "uRam40012c44": "data_register",
                "CR1": "control_register",
                "HAL_OK": "HAL_Status_OK"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "reset_timer_channel_080063c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict resetTimerChannel_080063c0(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  TIM_CCxchannelCmd(timerHandle->Instance,channel,0);\n  if (((timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) && ((memoryValue1 & 0x1111) == 0)) &&\n     ((memoryValue1 & 0x444) == 0)) {\n    memoryValue2 = memoryValue2 & 0xffff7fff;\n  }\n  timerInstance = timerHandle->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  timerHandle->timerState = HAL_TIM_STATE_READY;\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "reset_timer_channel_080063c0",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerInstance",
                "uRam40012c20": "memoryValue1",
                "uRam40012c44": "memoryValue2",
                "State": "timerState"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "configure_channel_08006420",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configureChannel_08006420(TIM_TypeDef_conflict *timer,uint32_t channelNumber,uint32_t channelState)\n\n{\n  timer->CCER = timer->CCER & ~(4 << (channelNumber & 0xff));\n  timer->CCER = timer->CCER | channelState << (channelNumber & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "configure_channel_08006420",
                "TIMx": "timer",
                "Channel": "channelNumber",
                "ChannelNState": "channelState"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "configure_timer_channel_0800643c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict configureTimerChannel_0800643c(TIM_HandleTypeDef_conflict *timerHandle,uint32_t channel)\n\n{\n  TIM_CCxNchannelCmd(timerHandle->timerInstance,channel,4);\n  timerHandle->timerInstance->breakAndDeadTimeRegister = timerHandle->timerInstance->breakAndDeadTimeRegister | 0x8000;\n  timerHandle->timerInstance->controlRegister = timerHandle->timerInstance->controlRegister | 1;\n  return HAL_StatusTypeDef_OK;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "configure_timer_channel_0800643c",
                "htim": "timerHandle",
                "Channel": "channel",
                "Instance": "timerInstance",
                "BDTR": "breakAndDeadTimeRegister",
                "CR1": "controlRegister",
                "HAL_OK": "HAL_StatusTypeDef_OK"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "disable_tim_channel_08006460",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict disableTimChannel_08006460(TIM_HandleTypeDef_conflict *timer,uint32_t channel)\n\n{\n  TIM_TypeDef_conflict *timerInstance;\n  \n  TIM_CCxNchannelCmd(timer->Instance,channel,0);\n  timerInstance = timer->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->BDTR = timerInstance->BDTR & 0xffff7fff;\n  }\n  timerInstance = timer->Instance;\n  if (((timerInstance->CCER & 0x1111) == 0) && ((timerInstance->CCER & 0x444) == 0)) {\n    timerInstance->CR1 = timerInstance->CR1 & 0xfffffffe;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_08006460": "disable_tim_channel_08006460",
                "htim": "timer",
                "Channel": "channel",
                "pTVar1": "timerInstance"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080064ac(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_080064ae(TIM_HandleTypeDef_conflict *htim)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "reset_uart_080064b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid reset_uart_080064b0(UART_HandleTypeDef *uart_handle)\n\n{\n  uart_handle->uart_instance->control_register1 = uart_handle->uart_instance->control_register1 & 0xfffffedf;\n  uart_handle->uart_instance->control_register3 = uart_handle->uart_instance->control_register3 & 0xfffffffe;\n  uart_handle->receive_state = HAL_UART_STATE_READY;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "reset_uart_080064b0",
                "huart": "uart_handle",
                "Instance": "uart_instance",
                "CR1": "control_register1",
                "CR3": "control_register3",
                "RxState": "receive_state"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "handle_uart_transmission_080064cc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nTransmissionStatus handleUartTransmission_080064cc(UART_HandleTypeDef *uartHandle)\n\n{\n  uint16_t updatedTransferCount;\n  byte *txBufferPointer;\n  uint16_t *temporaryPtr;\n  \n  if (uartHandle->gState != HAL_UART_STATE_BUSY_TX) {\n    return HAL_BUSY;\n  }\n  if ((uartHandle->Init).WordLength == 0x1000) {\n    uartHandle->Instance->DR = *(ushort *)uartHandle->pTxBuffPtr & 0x1ff;\n    if ((uartHandle->Init).Parity == 0) {\n      uartHandle->pTxBuffPtr = uartHandle->pTxBuffPtr + 2;\n    }\n    else {\n      uartHandle->pTxBuffPtr = uartHandle->pTxBuffPtr + 1;\n    }\n  }\n  else {\n    txBufferPointer = uartHandle->pTxBuffPtr;\n    uartHandle->pTxBuffPtr = txBufferPointer + 1;\n    uartHandle->Instance->DR = (uint)*txBufferPointer;\n  }\n  updatedTransferCount = uartHandle->TxXferCount - 1;\n  uartHandle->TxXferCount = updatedTransferCount;\n  if (updatedTransferCount == 0) {\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffff7f;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x40;\n    return HAL_OK;\n  }\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "handle_uart_transmission_080064cc",
                "huart": "uartHandle",
                "uVar1": "updatedTransferCount",
                "pbVar2": "txBufferPointer",
                "tmp": "temporaryPtr",
                "HAL_StatusTypeDef_conflict": "TransmissionStatus"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "initialize_uart_08006538",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeUART_08006538(UART_HandleTypeDef *UARTHandle)\n\n{\n  uint32_t pclk1Freq1;\n  uint32_t pclk1Freq2;\n  uint32_t pclk1Freq3;\n  uint32_t pclk1Freq4;\n  uint32_t pclk1Freq5;\n  uint32_t baudRate1;\n  uint32_t baudRate2;\n  uint32_t baudRate3;\n  uint32_t baudRate4;\n  USART_TypeDef *UARTInstanceCheck;\n  \n  UARTHandle->UARTInstance->controlRegister2 = UARTHandle->UARTInstance->controlRegister2 & 0xffffcfff | (UARTHandle->UARTInitConfig).stopBits;\n  UARTHandle->UARTInstance->controlRegister1 =\n       (UARTHandle->UARTInitConfig).wordLength | (UARTHandle->UARTInitConfig).parity | (UARTHandle->UARTInitConfig).mode |\n       UARTHandle->UARTInstance->controlRegister1 & 0xffffe9f3;\n  UARTHandle->UARTInstance->controlRegister3 = UARTHandle->UARTInstance->controlRegister3 & 0xfffffcff | (UARTHandle->UARTInitConfig).hardwareFlowControl;\n  UARTInstanceCheck = UARTHandle->UARTInstance;\n  if (UARTInstanceCheck != (USART_TypeDef *)0x40013800) {\n    pclk1Freq1 = HAL_RCC_GetPCLK1Freq();\n    baudRate1 = (UARTHandle->UARTInitConfig).baudRate;\n    pclk1Freq2 = HAL_RCC_GetPCLK1Freq();\n    baudRate2 = (UARTHandle->UARTInitConfig).baudRate;\n    pclk1Freq3 = HAL_RCC_GetPCLK1Freq();\n    baudRate3 = (UARTHandle->UARTInitConfig).baudRate;\n    pclk1Freq4 = HAL_RCC_GetPCLK1Freq();\n    baudRate4 = (UARTHandle->UARTInitConfig).baudRate;\n    pclk1Freq5 = HAL_RCC_GetPCLK1Freq();\n    UARTInstanceCheck->BRR = ((uint)((int)((ulonglong)\n                                 (((pclk1Freq4 * 0x19) / (baudRate4 << 2) +\n                                  (int)(((ulonglong)(pclk1Freq5 * 0x19) /\n                                        (ulonglong)((UARTHandle->UARTInitConfig).baudRate << 2)) / 100) * -100) *\n                                  0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                   ((((pclk1Freq2 * 0x19) / (baudRate2 << 2) +\n                     (int)(((ulonglong)(pclk1Freq3 * 0x19) / (ulonglong)(baudRate3 << 2)) / 100) * -100) *\n                     0x10 + 0x32) / 100 & 0xf0) +\n                   (int)(((ulonglong)(pclk1Freq1 * 0x19) / (ulonglong)(baudRate1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk1Freq1 = HAL_RCC_GetPCLK2Freq();\n  baudRate1 = (UARTHandle->UARTInitConfig).baudRate;\n  pclk1Freq2 = HAL_RCC_GetPCLK2Freq();\n  baudRate2 = (UARTHandle->UARTInitConfig).baudRate;\n  pclk1Freq3 = HAL_RCC_GetPCLK2Freq();\n  baudRate3 = (UARTHandle->UARTInitConfig).baudRate;\n  pclk1Freq4 = HAL_RCC_GetPCLK2Freq();\n  baudRate4 = (UARTHandle->UARTInitConfig).baudRate;\n  pclk1Freq5 = HAL_RCC_GetPCLK2Freq();\n  uartInstanceValue = ((uint)((int)((ulonglong)\n                               (((pclk1Freq4 * 0x19) / (baudRate4 << 2) +\n                                (int)(((ulonglong)(pclk1Freq5 * 0x19) /\n                                      (ulonglong)((UARTHandle->UARTInitConfig).baudRate << 2)) / 100) * -100) *\n                                0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((pclk1Freq2 * 0x19) / (baudRate2 << 2) +\n                   (int)(((ulonglong)(pclk1Freq3 * 0x19) / (ulonglong)(baudRate3 << 2)) / 100) * -100) * 0x10\n                  + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(pclk1Freq1 * 0x19) / (ulonglong)(baudRate1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "initialize_uart_08006538",
                "huart": "UARTHandle",
                "Instance": "UARTInstance",
                "CR2": "controlRegister2",
                "CR1": "controlRegister1",
                "CR3": "controlRegister3",
                "Init": "UARTInitConfig",
                "StopBits": "stopBits",
                "WordLength": "wordLength",
                "Parity": "parity",
                "Mode": "mode",
                "HwFlowCtl": "hardwareFlowControl",
                "BaudRate": "baudRate",
                "pUVar10": "UARTInstanceCheck",
                "uVar1": "pclk1Freq1",
                "uVar2": "pclk1Freq2",
                "uVar3": "pclk1Freq3",
                "uVar4": "pclk1Freq4",
                "uVar5": "pclk1Freq5",
                "uVar6": "baudRate1",
                "uVar7": "baudRate2",
                "uVar8": "baudRate3",
                "uVar9": "baudRate4",
                "iRam40013808": "uartInstanceValue"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_uart_flag_080066e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_expected_statusTypeDef_conflict\ncheck_uart_flag_080066e8(UART_HandleTypeDef *uart_handle,uint32_t flag,flagexpected_status expected_status,uint32_t tick_start,\n            uint32_t timeout)\n\n{\n  uint32_t current_tick;\n  \n  do {\n    if (((flag & ~uart_handle->Instance->SR) == 0) != (bool)expected_status) {\n      return HAL_OK;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_tick = HAL_GetTick(), current_tick - tick_start <= timeout))));\n  uart_handle->Instance->CR1 = uart_handle->Instance->CR1 & 0xfffffe5f;\n  uart_handle->Instance->CR3 = uart_handle->Instance->CR3 & 0xfffffffe;\n  uart_handle->gState = HAL_UART_STATE_READY;\n  uart_handle->RxState = HAL_UART_STATE_READY;\n  uart_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_uart_flag_080066e8",
                "huart": "uart_handle",
                "Flag": "flag",
                "Status": "expected_status",
                "Tickstart": "tick_start",
                "Timeout": "timeout",
                "uVar1": "current_tick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_0800674c(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef initializeUART_0800674e(UART_HandleTypeDef *uartHandle)\n\n{\n  if (uartHandle != (UART_HandleTypeDef *)0x0) {\n    if (uartHandle->globalState == HAL_UART_STATE_RESET) {\n      uartHandle->lockStatus = HAL_UNLOCKED;\n      HAL_UART_MspInit(uartHandle);\n    }\n    uartHandle->globalState = HAL_UART_STATE_BUSY;\n    uartHandle->uartInstance->controlRegister1 = uartHandle->uartInstance->controlRegister1 & 0xffffdfff;\n    UART_SetConfig(uartHandle);\n    uartHandle->uartInstance->controlRegister2 = uartHandle->uartInstance->controlRegister2 & 0xffffb7ff;\n    uartHandle->uartInstance->controlRegister3 = uartHandle->uartInstance->controlRegister3 & 0xffffffd5;\n    uartHandle->uartInstance->controlRegister1 = uartHandle->uartInstance->controlRegister1 | 0x2000;\n    uartHandle->errorStatus = 0;\n    uartHandle->globalState = HAL_UART_STATE_READY;\n    uartHandle->receiveState = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "huart": "uartHandle",
                "gState": "globalState",
                "Lock": "lockStatus",
                "Instance": "uartInstance",
                "CR1": "controlRegister1",
                "CR2": "controlRegister2",
                "CR3": "controlRegister3",
                "ErrorCode": "errorStatus",
                "RxState": "receiveState",
                "HAL_StatusTypeDef_conflict": "HAL_StatusTypeDef"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "transmit_data_080067ac",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict\ntransmitData_080067ac(UART_HandleTypeDef *uartHandle,uint8_t *dataBuffer,uint16_t dataSize,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTime;\n  uint16_t *temp;\n  \n  if (uartHandle->gState == HAL_UART_STATE_READY) {\n    if (dataBuffer == (uint8_t *)0x0) {\n      status = HAL_ERROR;\n    }\n    else if (dataSize == 0) {\n      status = HAL_ERROR;\n    }\n    else if (uartHandle->Lock == HAL_LOCKED) {\n      status = HAL_BUSY;\n    }\n    else {\n      uartHandle->Lock = HAL_LOCKED;\n      uartHandle->ErrorCode = 0;\n      uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n      startTime = HAL_GetTick();\n      uartHandle->TxXferdataSize = dataSize;\n      uartHandle->TxXferCount = dataSize;\n      while (uartHandle->TxXferCount != 0) {\n        uartHandle->TxXferCount = uartHandle->TxXferCount - 1;\n        if ((uartHandle->Init).WordLength == 0x1000) {\n          status = UART_WaitOnFlagUntiltimeout(uartHandle,0x80,RESET,startTime,timeout);\n          if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = *(ushort *)dataBuffer & 0x1ff;\n          if ((uartHandle->Init).Parity == 0) {\n            dataBuffer = (uint8_t *)((int)dataBuffer + 2);\n          }\n          else {\n            dataBuffer = (uint8_t *)((int)dataBuffer + 1);\n          }\n        }\n        else {\n          status = UART_WaitOnFlagUntiltimeout(uartHandle,0x80,RESET,startTime,timeout);\n          if (status != HAL_OK) {\n            return HAL_TIMEOUT;\n          }\n          uartHandle->Instance->DR = (uint)*dataBuffer;\n          dataBuffer = (uint8_t *)((int)dataBuffer + 1);\n        }\n      }\n      status = UART_WaitOnFlagUntiltimeout(uartHandle,0x40,RESET,startTime,timeout);\n      if (status == HAL_OK) {\n        uartHandle->gState = HAL_UART_STATE_READY;\n        uartHandle->Lock = HAL_UNLOCKED;\n        status = HAL_OK;\n      }\n      else {\n        status = HAL_TIMEOUT;\n      }\n    }\n  }\n  else {\n    status = HAL_BUSY;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "transmit_data_080067ac",
                "huart": "uartHandle",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "Timeout": "timeout",
                "HVar1": "status",
                "Tickstart": "startTime",
                "tmp": "temp"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "initialize_uart_transmit_0800688e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nUartTransmitStatus initializeUartTransmit_0800688e(UART_HandleTypeDef *uartHandle,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  if (uartHandle->gState != UART_STATE_READY) {\n    return UART_BUSY;\n  }\n  if (dataBuffer == (uint8_t *)0x0) {\n    return UART_ERROR;\n  }\n  if (dataSize == 0) {\n    return UART_ERROR;\n  }\n  if (uartHandle->Lock != UART_LOCKED) {\n    uartHandle->pTxBuffPtr = dataBuffer;\n    uartHandle->TxXferdataSize = dataSize;\n    uartHandle->TxXferCount = dataSize;\n    uartHandle->ErrorCode = 0;\n    uartHandle->gState = HAL_UART_STATE_BUSY_TX;\n    uartHandle->Lock = UART_UNLOCKED;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x80;\n    return UART_OK;\n  }\n  return UART_BUSY;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "initialize_uart_transmit_0800688e",
                "huart": "uartHandle",
                "pData": "dataBuffer",
                "Size": "dataSize",
                "HAL_StatusTypeDef_conflict": "UartTransmitStatus",
                "HAL_UART_STATE_READY": "UART_STATE_READY",
                "HAL_BUSY": "UART_BUSY",
                "HAL_ERROR": "UART_ERROR",
                "HAL_LOCKED": "UART_LOCKED",
                "HAL_UNLOCKED": "UART_UNLOCKED",
                "HAL_OK": "UART_OK"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "initialize_uart_receive_080068d6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeUartReceive_080068d6(UART_HandleTypeDef *uartHandle,uint8_t *receiveBuffer,uint16_t bufferSize)\n\n{\n  if (uartHandle->RxState != HAL_UART_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (receiveBuffer == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (bufferSize == 0) {\n    return HAL_ERROR;\n  }\n  if (uartHandle->Lock != HAL_LOCKED) {\n    uartHandle->pRxBuffPtr = receiveBuffer;\n    uartHandle->RxXferbufferSize = bufferSize;\n    uartHandle->RxXferCount = bufferSize;\n    uartHandle->ErrorCode = 0;\n    uartHandle->RxState = HAL_UART_STATE_BUSY_RX;\n    uartHandle->Lock = HAL_UNLOCKED;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x100;\n    uartHandle->Instance->CR3 = uartHandle->Instance->CR3 | 1;\n    uartHandle->Instance->CR1 = uartHandle->Instance->CR1 | 0x20;\n    return HAL_OK;\n  }\n  return HAL_BUSY;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "initialize_uart_receive_080068d6",
                "huart": "uartHandle",
                "pData": "receiveBuffer",
                "Size": "bufferSize"
            },
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "initialize_uart_08006932",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict initializeUART_08006932(UART_HandleTypeDef *UART_handle)\n\n{\n  UART_handle->UART_instance->control_register1 = UART_handle->UART_instance->control_register1 & 0xffffffbf;\n  UART_handle->UART_state = HAL_UART_STATE_READY;\n  UART_transmissionCompleteCallback(UART_handle);\n  return HAL_operationSuccessful;\n}\n\n",
            "renaming": {
                "FUN_08006932": "initialize_uart_08006932",
                "huart": "UART_handle",
                "Instance": "UART_instance",
                "CR1": "control_register1",
                "gState": "UART_state",
                "HAL_UART_TxCpltCallback": "UART_transmissionCompleteCallback",
                "HAL_OK": "HAL_operationSuccessful"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_received_data_0800694c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_StatusTypeDef_conflict processReceivedData_0800694c(UART_HandleTypeDef *uartHandle)\n\n{\n  uint16_t *temp;\n  byte *bytePointer;\n  uint16_t updatedVar;\n  uint8_t *pointerVar;\n  \n  if (uartHandle->RxState != HAL_UART_STATE_BUSY_RX) {\n    return HAL_BUSY;\n  }\n  if ((uartHandle->Init).WordLength == 0x1000) {\n    if ((uartHandle->Init).Parity == 0) {\n      *(ushort *)uartHandle->pRxBuffPtr = (ushort)((uartHandle->Instance->DR << 0x17) >> 0x17);\n      uartHandle->pRxBuffPtr = uartHandle->pRxBuffPtr + 2;\n    }\n    else {\n      *(ushort *)uartHandle->pRxBuffPtr = (ushort)uartHandle->Instance->DR & 0xff;\n      uartHandle->pRxBuffPtr = uartHandle->pRxBuffPtr + 1;\n    }\n  }\n  else if ((uartHandle->Init).Parity == 0) {\n    pointerVar = uartHandle->pRxBuffPtr;\n    uartHandle->pRxBuffPtr = pointerVar + 1;\n    *pointerVar = (uint8_t)uartHandle->Instance->DR;\n  }\n  else {\n    bytePointer = uartHandle->pRxBuffPtr;\n    uartHandle->pRxBuffPtr = bytePointer + 1;\n    *bytePointer = (byte)uartHandle->Instance->DR & 0x7f;\n  }\n  updatedVar = uartHandle->RxXferCount - 1;\n  uartHandle->RxXferCount = updatedVar;\n  if (updatedVar != 0) {\n    return HAL_OK;\n  }\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xffffffdf;\n  uartHandle->Instance->CR1 = uartHandle->Instance->CR1 & 0xfffffeff;\n  uartHandle->Instance->CR3 = uartHandle->Instance->CR3 & 0xfffffffe;\n  uartHandle->RxState = HAL_UART_STATE_READY;\n  HAL_UART_RxCpltCallback(uartHandle);\n  return HAL_OK;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_received_data_0800694c",
                "huart": "uartHandle",
                "tmp": "temp",
                "pbVar1": "bytePointer",
                "uVar2": "updatedVar",
                "puVar3": "pointerVar"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "handle_uart_errors_080069ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_UART_errors_080069ec(UART_HandleTypeDef *UART_handle)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint CR1_register;\n  uint32_t CR1_interrupt_status;\n  USART_TypeDef *USART_instance;\n  uint32_t CR3_interrupt_status;\n  uint CR3_bit;\n  uint SR_register;\n  uint32_t interrupt_flags;\n  \n  USART_instance = UART_handle->Instance;\n  SR_register = USART_instance->SR;\n  CR1_register = USART_instance->CR1;\n  if ((((SR_register & 0xf) == 0) && ((SR_register & 0x20) != 0)) && ((CR1_register & 0x20) != 0)) {\n    receive_data_interrupt(UART_handle);\n    return;\n  }\n  if (((SR_register & 0xf) == 0) || ((CR3_bit = USART_instance->CR3 & 1, CR3_bit == 0 && ((CR1_register & 0x120) == 0)))) {\n    if (((SR_register & 0x80) != 0) && ((CR1_register & 0x80) != 0)) {\n      transmit_data_interrupt(UART_handle);\n      return;\n    }\n    if (((SR_register & 0x40) != 0) && ((CR1_register & 0x40) != 0)) {\n      end_transmit_data_interrupt(UART_handle);\n    }\n  }\n  else {\n    if (((SR_register & 1) != 0) && ((CR1_register & 0x100) != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 1;\n    }\n    if (((SR_register & 4) != 0) && (CR3_bit != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 2;\n    }\n    if (((SR_register & 2) != 0) && (CR3_bit != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 4;\n    }\n    if (((SR_register & 8) != 0) && (CR3_bit != 0)) {\n      UART_handle->ErrorCode = UART_handle->ErrorCode | 8;\n    }\n    if (UART_handle->ErrorCode != 0) {\n      if (((SR_register & 0x20) != 0) && ((CR1_register & 0x20) != 0)) {\n        receive_data_interrupt(UART_handle);\n      }\n      if (((UART_handle->ErrorCode & 8) == 0) && ((UART_handle->Instance->CR3 & 0x40) == 0)) {\n        handle_UART_error_callback(UART_handle);\n        UART_handle->ErrorCode = 0;\n        return;\n      }\n      end_receive_data_transfer(UART_handle);\n      USART_instance = UART_handle->Instance;\n      if ((USART_instance->CR3 & 0x40) == 0) {\n        handle_UART_error_callback(UART_handle);\n        return;\n      }\n      USART_instance->CR3 = USART_instance->CR3 & 0xffffffbf;\n      if (UART_handle->DMA_handle_rx == (DMA_HandleTypeDef_conflict *)0x0) {\n        handle_UART_error_callback(UART_handle);\n        return;\n      }\n      UART_handle->DMA_handle_rx->XferAbortCallback = DMA_abort_on_error + 1;\n      status = abort_DMA_transfer_with_interrupt(UART_handle->DMA_handle_rx);\n      if (status != HAL_OK) {\n        (*UART_handle->DMA_handle_rx->XferAbortCallback)(UART_handle->DMA_handle_rx);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "handle_uart_errors_080069ec",
                "huart": "UART_handle",
                "HVar1": "status",
                "uVar2": "CR1_register",
                "uVar4": "CR3_bit",
                "uVar5": "SR_register",
                "cr1its": "CR1_interrupt_status",
                "cr3its": "CR3_interrupt_status",
                "isrflags": "interrupt_flags",
                "pUVar3": "USART_instance",
                "UART_Receive_IT": "receive_data_interrupt",
                "UART_Transmit_IT": "transmit_data_interrupt",
                "UART_EndTransmit_IT": "end_transmit_data_interrupt",
                "HAL_UART_ErrorCallback": "handle_UART_error_callback",
                "UART_EndRxTransfer": "end_receive_data_transfer",
                "UART_DMAAbortOnError": "DMA_abort_on_error",
                "HAL_DMA_Abort_IT": "abort_DMA_transfer_with_interrupt",
                "hdmarx": "DMA_handle_rx"
            },
            "calling": [
                "USART1_IRQHandler",
                "USART3_IRQHandler",
                "USART2_IRQHandler"
            ],
            "called": [
                "UART_EndTransmit_IT",
                "UART_Receive_IT",
                "UART_Transmit_IT",
                "HAL_DMA_Abort_IT",
                "HAL_UART_ErrorCallback",
                "UART_EndRxTransfer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b0c": {
            "entrypoint": "0x08006b0c",
            "current_name": "reset_uart_errors_08006b0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid resetUartErrors_08006b0c(DMA_HandleTypeDef_conflict *dmaHandler)\n\n{\n  UART_HandleTypeDef *uartHandler;\n  UART_HandleTypeDef *tempUartHandler;\n  \n  uartHandler = (UART_HandleTypeDef *)dmaHandler->Parent;\n  uartHandler->RxXferCount = 0;\n  uartHandler->TxXferCount = 0;\n  HAL_UART_ErrorCallback(uartHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b0c": "reset_uart_errors_08006b0c",
                "hdma": "dmaHandler",
                "huart_00": "uartHandler",
                "huart": "tempUartHandler"
            },
            "calling": [],
            "called": [
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "get_uart_state_08006b1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nHAL_UART_StateTypeDef get_UART_state_08006b1c(UART_HandleTypeDef *uart_handle)\n\n{\n  return uart_handle->receive_state | uart_handle->global_state;\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "get_uart_state_08006b1c",
                "huart": "uart_handle",
                "RxState": "receive_state",
                "gState": "global_state"
            },
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "check_pin_status_08006b28",
            "code": "\n/* WARNING: Unknown calling convention */\n\n_Bool checkPinStatus_08006b28(pinName pin,uint32_t *pinMap)\n\n{\n  uint32_t pinIndex;\n  \n  pinIndex = pinMap[(uint)((int)pin << 0x18) >> 0x1c];\n  return (_Bool)((byte)(pinIndex >> ((int)pin & 0xfU)) & 1);\n}\n\n",
            "renaming": {
                "FUN_08006b28": "check_pin_status_08006b28",
                "PinName_conflict": "pinName",
                "map": "pinMap",
                "index": "pinIndex"
            },
            "calling": [
                "digitalWrite",
                "digitalRead",
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_pin_on_map_08006b3e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setPinOnMap_08006b3e(pin pin,uint32_t *map)\n\n{\n  uint shiftedIndex;\n  uint32_t unmodifiedIndex;\n  \n  shiftedIndex = (uint)((int)pin << 0x18) >> 0x1c;\n  map[shiftedIndex] = map[shiftedIndex] | 1 << ((int)pin & 0xfU);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_pin_on_map_08006b3e",
                "PinName_conflict": "pin",
                "uVar1": "shiftedIndex",
                "index": "unmodifiedIndex"
            },
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "clear_pin_bit_08006b5c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid clearPinBit_08006b5c(pin pin,uint32_t *pinMap)\n\n{\n  uint pinIndex;\n  uint32_t notChanged;\n  \n  pinIndex = (uint)((int)pin << 0x18) >> 0x1c;\n  pinMap[pinIndex] = pinMap[pinIndex] & ~(1 << ((int)pin & 0xfU));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "clear_pin_bit_08006b5c",
                "PinName_conflict": "pin",
                "map": "pinMap",
                "uVar1": "pinIndex",
                "index": "notChanged"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_gpio_port_08006b7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nGPIO_Port * get_GPIO_Port_08006b7c(uint32_t port_index)\n\n{\n  switch(port_index) {\n  case 0:\n    return (GPIO_Port *)0x40010800;\n  case 1:\n    return (GPIO_Port *)0x40010c00;\n  case 2:\n    return (GPIO_Port *)0x40011000;\n  case 3:\n    return (GPIO_Port *)0x40011400;\n  case 4:\n    return (GPIO_Port *)0x40011800;\n  default:\n    return (GPIO_Port *)0x0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_gpio_port_08006b7c",
                "port_idx": "port_index",
                "GPIO_TypeDef": "GPIO_Port"
            },
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "get_gpio_port_08006bb8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nGPIO_TypeDef * get_GPIO_Port_08006bb8(uint32_t port_index)\n\n{\n  GPIO_TypeDef *port_address;\n  uint32_t temp_register;\n  uint32_t temp_register_1;\n  uint32_t temp_register_2;\n  uint32_t temp_register_3;\n  uint32_t temp_register_4;\n  \n  switch(port_index) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    port_address = (GPIO_TypeDef *)0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    port_address = (GPIO_TypeDef *)0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    port_address = (GPIO_TypeDef *)0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    port_address = (GPIO_TypeDef *)0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    port_address = (GPIO_TypeDef *)0x40011800;\n    break;\n  default:\n    port_address = (GPIO_TypeDef *)0x0;\n  }\n  return port_address;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "get_gpio_port_08006bb8",
                "port_idx": "port_index",
                "tmpreg": "temp_register",
                "tmpreg_1": "temp_register_1",
                "tmpreg_2": "temp_register_2",
                "tmpreg_3": "temp_register_3",
                "tmpreg_4": "temp_register_4",
                "pGVar1": "port_address"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_pin_function_08006c60",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getPinFunction_08006c60(pin pin)\n\n{\n  uint32_t pinFunction;\n  uint32_t mappedFunction;\n  \n  pinFunction = pinmap_mappedFunction(pin,(PinMap_conflict *)&PinMap_ADC);\n  mappedFunction = pinFunction << 0xc;\n  mappedFunction = mappedFunction >> 0x1b;\n  if (0x10 < mappedFunction - 1) {\n    mappedFunction = 0;\n  }\n  return mappedFunction;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_pin_function_08006c60",
                "PinName_conflict": "pin",
                "uVar1": "pinFunction",
                "function": "mappedFunction"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "detect_pin_function_08006c7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t detectPinFunction_08006c7c(PinName_conflict pinName)\n\n{\n  uint32_t functionIndex;\n  uint32_t shiftedFunction;\n  \n  functionIndex = pinNamemap_shiftedFunction(pinName,(PinMap_conflict *)&PinMap_PWM);\n  shiftedFunction = functionIndex << 0xc;\n  shiftedFunction = shiftedFunction >> 0x1b;\n  if (shiftedFunction == 3) {\n    return 8;\n  }\n  if (shiftedFunction != 4) {\n    if (shiftedFunction != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "detect_pin_function_08006c7c",
                "pin": "pinName",
                "uVar1": "functionIndex",
                "function": "shiftedFunction"
            },
            "calling": [
                "pwm_stop",
                "pwm_start"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "initialize_adc_gpio_08006ca8",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_ADC_GPIO_08006ca8(ADC_HandleTypeDef *adc_handle)\n\n{\n  GPIO_TypeDef *gpio_port;\n  GPIO_TypeDef *gpio_port;\n  uint32_t temporary_register;\n  uint32_t temporary_register_1;\n  GPIO_InitTypeDef gpio_init_structure;\n  \n  if (adc_handle->Instance == (ADC_TypeDef *)0x40012400) {\n    _DAT_40021018 = _DAT_40021018 | 0x200;\n  }\n  else if (adc_handle->Instance == (ADC_TypeDef *)0x40012800) {\n    _DAT_40021018 = _DAT_40021018 | 0x400;\n  }\n  gpio_port = set_GPIO_Port_Clock((uint)((int)current_pin << 0x18) >> 0x1c);\n  gpio_pin = 1 << (current_pin & 0xfU) & 0xffff;\n  gpio_mode = 3;\n  gpio_pull = 0;\n  HAL_GPIO_Init(gpio_port,&gpio_init_structure);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "initialize_adc_gpio_08006ca8",
                "hadc": "adc_handle",
                "GPIOx": "gpio_port",
                "port": "gpio_port",
                "tmpreg": "temporary_register",
                "tmpreg_1": "temporary_register_1",
                "GPIO_InitStruct": "gpio_init_structure",
                "g_current_pin": "current_pin",
                "GPIO_InitStruct.Pin": "gpio_pin",
                "GPIO_InitStruct.Mode": "gpio_mode",
                "GPIO_InitStruct.Pull": "gpio_pull"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "disable_unneeded_adc_interrupts_08006d24",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid disableUnneededADCInterrupts_08006d24(ADC_HandleTypeDef *adcHandle)\n\n{\n  if (adcHandle->Instance != (ADCInstance *)0x40012400) {\n    if (adcHandle->Instance == (ADCInstance *)0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "disable_unneeded_adc_interrupts_08006d24",
                "hadc": "adcHandle",
                "ADC_TypeDef": "ADCInstance"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "get_adc_value_08006d80",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint16_t getADCValue_08006d80(pin pin)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t convertedValue;\n  uint16_t adcValue;\n  ADC_ChannelConfTypeDef channelConfig;\n  ADC_HandleTypeDef adcHandle;\n  \n  memset(&adcHandle,0,0x30);\n  channelConfig.Channel = 0;\n  channelConfig.Rank = 0;\n  channelConfig.SamplingTime = 0;\n  adcValue = 0;\n  adcHandle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin,(PinMap_conflict *)&PinMap_ADC);\n  if (adcHandle.Instance == (ADC_TypeDef *)0x0) {\n    adcValue = 0;\n  }\n  else {\n    adcHandle.Init.DataAlign = 0;\n    adcHandle.Init.ScanConvMode = 0;\n    adcHandle.Init.ContinuousConvMode = 0;\n    adcHandle.Init.DiscontinuousConvMode = 0;\n    adcHandle.Init.ExternalTrigConv = 0xe0000;\n    adcHandle.State = 0;\n    adcHandle.Init.NbrOfConversion = 1;\n    adcHandle.Init.NbrOfDiscConversion = 0;\n    g_current_pin = pin;\n    status = HAL_ADC_Init(&adcHandle);\n    if (status == HAL_OK) {\n      channelConfig.Channel = get_adc_channel(pin);\n      if (channelConfig.Channel < 0x12) {\n        channelConfig.Rank = 1;\n        channelConfig.SamplingTime = 2;\n        status = HAL_ADC_ConfigChannel(&adcHandle,&channelConfig);\n        if (status == HAL_OK) {\n          status = HAL_ADCEx_Calibration_Start(&adcHandle);\n          if (status == HAL_OK) {\n            status = HAL_ADC_Start(&adcHandle);\n            if (status == HAL_OK) {\n              status = HAL_ADC_PollForConversion(&adcHandle,10);\n              if (status == HAL_OK) {\n                convertedValue = HAL_ADC_GetState(&adcHandle);\n                if ((convertedValue & 0x200) != 0) {\n                  convertedValue = HAL_ADC_GetValue(&adcHandle);\n                  adcValue = (uint16_t)convertedValue;\n                }\n                status = HAL_ADC_Stop(&adcHandle);\n                if (status == HAL_OK) {\n                  status = HAL_ADC_DeInit(&adcHandle);\n                  if (status != HAL_OK) {\n                    adcValue = 0;\n                  }\n                }\n                else {\n                  adcValue = 0;\n                }\n              }\n              else {\n                adcValue = 0;\n              }\n            }\n            else {\n              adcValue = 0;\n            }\n          }\n          else {\n            adcValue = 0;\n          }\n        }\n        else {\n          adcValue = 0;\n        }\n      }\n      else {\n        adcValue = 0;\n      }\n    }\n    else {\n      adcValue = 0;\n    }\n  }\n  return adcValue;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "get_adc_value_08006d80",
                "PinName_conflict": "pin",
                "HVar1": "status",
                "uVar2": "convertedValue",
                "uhADCxConvertedValue": "adcValue",
                "AdcChannelConf": "channelConfig",
                "AdcHandle": "adcHandle"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "memset",
                "HAL_ADC_ConfigChannel",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_GetValue",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_GetState",
                "HAL_ADC_Start",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_pwm_08006e68",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initialize_PWM_08006e68(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  uint32_t pin_function;\n  uint32_t function;\n  GPIO_TypeDef *gpio_port;\n  GPIO_TypeDef *port;\n  uint32_t temp_register_13;\n  uint32_t temp_register_1;\n  uint32_t temp_register_2;\n  uint32_t temp_register_3;\n  uint32_t temp_register_4;\n  uint32_t temp_register_5;\n  uint32_t temp_register_6;\n  uint32_t temp_register_7;\n  uint32_t temp_register_8;\n  uint32_t temp_register_9;\n  uint32_t temp_register_10;\n  uint32_t temp_register_11;\n  uint32_t temp_register_12;\n  uint32_t temp_register;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  pin_function = pinmap_function(current_pin,(PinMap_conflict *)&PinMap_PWM);\n  timer_enable_clock(timer_handle);\n  gpio_port = set_GPIO_Port_Clock((uint)((int)current_pin << 0x18) >> 0x1c);\n  gpio_init_struct.Mode = 2;\n  gpio_init_struct.Pull = 0;\n  gpio_init_struct.Speed = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((pin_function << 0x11) >> 0x19) {\n  case 1:\n    temp_register_10 = temp_register_10 | 0x7000001;\n    break;\n  case 2:\n    temp_register_10 = temp_register_10 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    temp_register_10 = temp_register_10 | 0x7000002;\n    break;\n  case 4:\n    temp_register_10 = temp_register_10 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    temp_register_10 = temp_register_10 | 0x7000004;\n    break;\n  case 6:\n    temp_register_10 = temp_register_10 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    temp_register_10 = temp_register_10 | 0x7000008;\n    break;\n  case 8:\n    temp_register_10 = temp_register_10 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    temp_register_10 = temp_register_10 | 0x7000030;\n    break;\n  case 10:\n    temp_register_1 = temp_register_10 & 0xffffffcf;\n    temp_register_10 = temp_register_1 | 0x7000010;\n    break;\n  case 0xb:\n    temp_register_2 = temp_register_10 & 0xffffffcf;\n    temp_register_10 = temp_register_2 | 0x7000000;\n    break;\n  case 0xc:\n    temp_register_10 = temp_register_10 | 0x70000c0;\n    break;\n  case 0xd:\n    temp_register_3 = temp_register_10 & 0xffffff3f;\n    temp_register_10 = temp_register_3 | 0x7000040;\n    break;\n  case 0xe:\n    temp_register_4 = temp_register_10 & 0xffffff3f;\n    temp_register_10 = temp_register_4 | 0x7000000;\n    break;\n  case 0xf:\n    temp_register_10 = temp_register_10 | 0x7000300;\n    break;\n  case 0x10:\n    temp_register_5 = temp_register_10 & 0xfffffcff;\n    temp_register_10 = temp_register_5 | 0x7000200;\n    break;\n  case 0x11:\n    temp_register_6 = temp_register_10 & 0xfffffcff;\n    temp_register_10 = temp_register_6 | 0x7000100;\n    break;\n  case 0x12:\n    temp_register_7 = temp_register_10 & 0xfffffcff;\n    temp_register_10 = temp_register_7 | 0x7000000;\n    break;\n  case 0x13:\n    temp_register_10 = temp_register_10 | 0x7000c00;\n    break;\n  case 0x14:\n    temp_register_8 = temp_register_10 & 0xfffff3ff;\n    temp_register_10 = temp_register_8 | 0x7000800;\n    break;\n  case 0x15:\n    temp_register_9 = temp_register_10 & 0xfffff3ff;\n    temp_register_10 = temp_register_9 | 0x7000000;\n    break;\n  case 0x16:\n    temp_register_10 = temp_register_10 | 0x7001000;\n    break;\n  case 0x17:\n    temp_register_10 = temp_register_10 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    temp_register_10 = temp_register_10 | 0x7008000;\n    break;\n  case 0x1c:\n    temp_register_10 = temp_register_10 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    temp_register_10 = temp_register_10 & 0xf8ffffff;\n    break;\n  case 0x22:\n    temp_register_11 = temp_register_10 & 0xf8ffffff;\n    temp_register_10 = temp_register_11 | 0x1000000;\n    break;\n  case 0x23:\n    temp_register_12 = temp_register_10 & 0xf8ffffff;\n    temp_register_10 = temp_register_12 | 0x2000000;\n    break;\n  case 0x24:\n    temp_register_10 = temp_register_10 & 0xf8ffffff | 0x4000000;\n  }\n  gpio_init_struct.Pin = 1 << (current_pin & 0xfU) & 0xffff;\n  HAL_GPIO_Init(gpio_port,&gpio_init_struct);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_pwm_08006e68",
                "htim": "timer_handle",
                "uVar1": "pin_function",
                "GPIOx": "gpio_port",
                "tmpreg_13": "temp_register_13",
                "tmpreg_1": "temp_register_1",
                "tmpreg_2": "temp_register_2",
                "tmpreg_3": "temp_register_3",
                "tmpreg_4": "temp_register_4",
                "tmpreg_5": "temp_register_5",
                "tmpreg_6": "temp_register_6",
                "tmpreg_7": "temp_register_7",
                "tmpreg_8": "temp_register_8",
                "tmpreg_9": "temp_register_9",
                "tmpreg_10": "temp_register_10",
                "tmpreg_11": "temp_register_11",
                "tmpreg_12": "temp_register_12",
                "tmpreg": "temp_register",
                "GPIO_InitStruct": "gpio_init_struct",
                "g_current_pin": "current_pin"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "timer_enable_clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableTimerClock_08007110(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  timer_disable_clock(timerHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110",
                "htim": "timerHandle"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "configure_pwm_08007118",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePWM_08007118(PinName_conflict pinName,uint32_t clockFrequency,uint32_t pulsePeriod,uint32_t pulseValue,\n                 uint8_t initializePWM)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerClkFreq;\n  uint32_t channel;\n  uint32_t pwmFunction;\n  TIM_OC_InitTypeDef timerConfig;\n  TIM_HandleTypeDef_conflict timerHandle;\n  \n  memset(&timerHandle,0,0x40);\n  timerConfig.OCMode = 0;\n  timerConfig.Pulse = 0;\n  timerConfig.OCPolarity = 0;\n  timerConfig.OCNPolarity = 0;\n  timerConfig.OCFastMode = 0;\n  timerConfig.OCIdleState = 0;\n  timerConfig.OCNIdleState = 0;\n  timerHandle.Instance = (TIM_TypeDef_conflict *)pinNamemap_peripheral(pinName,(PinMap_conflict *)&PinMap_PWM)\n  ;\n  if (timerHandle.Instance != (TIM_TypeDef_conflict *)0x0) {\n    timerClkFreq = getTimerClkFreq(timerHandle.Instance);\n    timerHandle.Init.Prescaler = timerClkFreq / clockFrequency - 1;\n    timerHandle.Init.Period = pulsePeriod - 1;\n    timerHandle.Init.ClockDivision = 0;\n    timerHandle.Init.CounterMode = 0;\n    timerHandle.Init.RepetitionCounter = 0;\n    timerHandle.State = HAL_TIM_STATE_RESET;\n    if (((initializePWM != '\\x01') ||\n        (g_current_pinName = pinName, status = HAL_TIM_PWM_Init(&timerHandle), status == HAL_OK)) &&\n       (((timerClkFreq = get_pwm_channel(pinName), timerClkFreq == 0 ||\n         (((timerClkFreq == 4 || (timerClkFreq == 8)) || (timerClkFreq == 0xc)))) || (timerClkFreq == 0x18)))) {\n      timerConfig.OCMode = 0x60;\n      timerConfig.OCPolarity = 0;\n      timerConfig.OCFastMode = 0;\n      timerConfig.OCNPolarity = 0;\n      timerConfig.OCNIdleState = 0;\n      timerConfig.OCIdleState = 0;\n      timerConfig.Pulse = pulseValue;\n      status = HAL_TIM_PWM_ConfigChannel(&timerHandle,&timerConfig,timerClkFreq);\n      if (status == HAL_OK) {\n        pwmFunction = pinNamemap_function(pinName,(PinMap_conflict *)&PinMap_PWM);\n        if ((pwmFunction & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&timerHandle,timerClkFreq);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&timerHandle,timerClkFreq);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "configure_pwm_08007118",
                "pin": "pinName",
                "clock_freq": "clockFrequency",
                "period": "pulsePeriod",
                "value": "pulseValue",
                "do_init": "initializePWM",
                "HVar1": "status",
                "uVar2": "timerClkFreq",
                "timChannel": "channel",
                "uVar3": "pwmFunction",
                "timConfig": "timerConfig",
                "timHandle": "timerHandle"
            },
            "calling": [
                "analogWrite"
            ],
            "called": [
                "memset",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIMEx_PWMN_Start",
                "pinmap_function",
                "get_pwm_channel",
                "HAL_TIM_PWM_Start",
                "pinmap_peripheral",
                "getTimerClkFreq",
                "HAL_TIM_PWM_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_signal_080071e4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid stopPwmSignal_080071e4(pin pin)\n\n{\n  uint32_t channel;\n  uint32_t timchannel;\n  uint32_t functionResult;\n  TIM_HandleTypeDef_conflict timHandle;\n  \n  timHandle.Instance = (TIM_TypeDef_conflict *)pinmap_peripheral(pin,(PinMap_conflict *)&PinMap_PWM)\n  ;\n  if ((timHandle.Instance != (TIM_TypeDef_conflict *)0x0) &&\n     ((((channel = get_pwm_channel(pin), channel == 0 || (channel == 4)) || (channel == 8)) ||\n      ((channel == 0xc || (channel == 0x18)))))) {\n    functionResult = pinmap_function(pin,(PinMap_conflict *)&PinMap_PWM);\n    if ((functionResult & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(&timHandle,channel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(&timHandle,channel);\n    }\n    HAL_TIM_PWM_DeInit(&timHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_signal_080071e4",
                "PinName_conflict": "pin",
                "Channel": "channel",
                "uVar1": "functionResult"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_TIM_PWM_DeInit",
                "HAL_TIM_PWM_Stop",
                "get_pwm_channel",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_current_time_0800723c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_current_time_0800723c(void)\n\n{\n  uint32_t current_time;\n  \n  current_time = HAL_GetTick();\n  return current_time;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_current_time_0800723c",
                "uVar1": "current_time"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "handle_system_tick_08007246",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleSystemTick_08007246(void)\n\n{\n  incrementSystemTick();\n  interruptHandler();\n  customSystickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "handle_system_tick_08007246",
                "HAL_IncTick": "incrementSystemTick",
                "HAL_SYSTICK_IRQHandler": "interruptHandler",
                "noOsSystickHandler": "customSystickHandler"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick",
                "noOsSystickHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_gpio_08007258",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeGPIO_08007258(PinName_conflict pinName,uint32_t GPIO_mode,uint32_t GPIO_pull)\n\n{\n  uint pinNumber;\n  GPIO_TypeDef *GPIO_Port;\n  GPIO_TypeDef *GPIO_port;\n  uint32_t tmpRegister2;\n  uint32_t tmpRegister1;\n  uint32_t tmpRegister;\n  GPIO_InitTypeDef GPIO_InitConfig;\n  \n  pinNumber = (uint)pinName;\n  GPIO_Port = set_GPIO_Port_Clock((pinNumber << 0x18) >> 0x1c);\n  GPIO_InitConfig.Pin = 1 << (pinNumber & 0xf) & 0xffff;\n  GPIO_InitConfig.Speed = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pinNumber - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pinNumber == 0xf) || (pinNumber == 0x13)) || (pinNumber == 0x14)) {\n    tmpRegister1 = _DAT_40010004 & 0xf8ffffff;\n    _DAT_40010004 = tmpRegister1 | 0x2000000;\n  }\n  GPIO_InitConfig.Mode = GPIO_mode;\n  GPIO_InitConfig.Pull = GPIO_pull;\n  HAL_GPIO_Init(GPIO_Port,&GPIO_InitConfig);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_gpio_08007258",
                "pin": "pinName",
                "mode": "GPIO_mode",
                "pull": "GPIO_pull",
                "uVar1": "pinNumber",
                "GPIOx": "GPIO_Port",
                "port": "GPIO_port",
                "tmpreg_2": "tmpRegister2",
                "tmpreg_1": "tmpRegister1",
                "tmpreg": "tmpRegister",
                "GPIO_InitStructure": "GPIO_InitConfig"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "write_pin_to_port_080072d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writePinToPort_080072d8(GPIO_TypeDef *gpioPort,uint32_t pinNumber,uint32_t pinValue)\n\n{\n  if (pinValue == 0) {\n    setPinState(gpioPort,(uint16_t)pinNumber,PIN_STATE_LOW);\n    return;\n  }\n  setPinState(gpioPort,(uint16_t)pinNumber,PIN_STATE_HIGH);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "write_pin_to_port_080072d8",
                "port": "gpioPort",
                "pin": "pinNumber",
                "val": "pinValue",
                "HAL_GPIO_WritePin": "setPinState",
                "GPIO_PIN_RESET": "PIN_STATE_LOW",
                "GPIO_PIN_SET": "PIN_STATE_HIGH"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_pin_state_080072f0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t readPinState_080072f0(GPIO_TypeDef *gpioPort,uint32_t gpioPin)\n\n{\n  GPIO_PinState pinState;\n  \n  pinState = HAL_GPIO_ReadPin(gpioPort,(uint16_t)gpioPin);\n  return (uint)pinState;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_pin_state_080072f0",
                "port": "gpioPort",
                "pin": "gpioPin",
                "GVar1": "pinState"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_080072fa",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_system_080072fa(void)\n\n{\n  initialize_HAL();\n  configure_system_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_080072fa",
                "HAL_Init": "initialize_HAL",
                "SystemClock_Config": "configure_system_clock"
            },
            "calling": [
                "init"
            ],
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_peripheral_by_pin_08007306",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * findPeripheralByPin_08007306(PinName_conflict targetPin,PinMap_conflict *pinMap)\n\n{\n  while( true ) {\n    if (pinMap->targetPin == NoConnection) {\n      return (void *)0x0;\n    }\n    if (pinMap->targetPin == targetPin) break;\n    pinMap = pinMap + 1;\n  }\n  return pinMap->foundPeripheral;\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_peripheral_by_pin_08007306",
                "pin": "targetPin",
                "map": "pinMap",
                "NC": "NoConnection",
                "peripheral": "foundPeripheral"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * find_peripheral_08007320(pin pin,map *map)\n\n{\n  void *peripheral;\n  \n  if (pin != NC) {\n    peripheral = pinmap_find_peripheral_08007320(pin,map);\n    return peripheral;\n  }\n  return (void *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "PinName_conflict": "pin",
                "PinMap_conflict": "map",
                "pvVar1": "peripheral"
            },
            "calling": [
                "uart_debug_write",
                "uart_init",
                "adc_read_value",
                "uart_debug_init",
                "pwm_stop",
                "pwm_start",
                "i2c_custom_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_pin_08007332",
            "code": "\n/* WARNING: Unknown calling convention */\n\nPinName_conflict findPin_08007332(void *device,PinConfiguration *pinConfigurations)\n\n{\n  loop( true ) {\n    if (pinConfigurations->device == (void *)0x0) {\n      return NotConnected;\n    }\n    if (pinConfigurations->device == device) exitLoop;\n    pinConfigurations = pinConfigurations + 1;\n  }\n  return pinConfigurations->pin;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_pin_08007332",
                "peripheral": "device",
                "PinMap_conflict": "PinConfiguration",
                "map": "pinConfigurations",
                "NC": "NotConnected",
                "while": "loop",
                "break": "exitLoop"
            },
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_pin_for_peripheral_0800734a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nPinName_conflict find_pin_for_peripheral_0800734a(void *peripheral_ptr,PinMap_conflict *pinmap_ptr)\n\n{\n  PinName_conflict found_pin;\n  \n  if (peripheral_ptr != (void *)0x0) {\n    found_pin = pinpinmap_ptr_find_pin(peripheral_ptr,pinmap_ptr);\n    return found_pin;\n  }\n  return NoConnection;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_pin_for_peripheral_0800734a",
                "peripheral": "peripheral_ptr",
                "map": "pinmap_ptr",
                "PVar1": "found_pin",
                "NC": "NoConnection"
            },
            "calling": [
                "uart_debug_init",
                "HardwareSerial"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_pin_function_0800735a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t findPinFunction_0800735a(PinName_conflict requestedPin,PinMap_conflict *pinMap)\n\n{\n  while( true ) {\n    if (pinMap->requestedPin == NotConnected) {\n      return 0xffffffff;\n    }\n    if (pinMap->requestedPin == requestedPin) break;\n    pinMap = pinMap + 1;\n  }\n  return pinMap->pinFunction;\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_pin_function_0800735a",
                "pin": "requestedPin",
                "map": "pinMap",
                "NC": "NotConnected",
                "function": "pinFunction"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "pinmap_lookup_function_08007376",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t pinmap_lookup_function_08007376(PinName_conflict pin_name,PinMap_conflict *pinmap)\n\n{\n  uint32_t uVar1;\n  \n  if (pin_name == NC) {\n    return 0xffffffff;\n  }\n  uVar1 = pin_namepinmap_find_function(pin_name,pinmap);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08007376": "pinmap_lookup_function_08007376",
                "pin": "pin_name",
                "map": "pinmap"
            },
            "calling": [
                "uart_init",
                "HAL_TIM_PWM_MspInit",
                "get_pwm_channel",
                "pwm_stop",
                "get_adc_channel",
                "pwm_start",
                "i2c_custom_init"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_pin_conflict_0800738a",
            "code": "\n/* WARNING: Unknown calling convention */\n\n_Bool checkPinConflict_0800738a(PinNameConflict inputPin,PinMapConflict *pinMap)\n\n{\n  if (inputPin == NotConnected) {\n    return false;\n  }\n  while( true ) {\n    if (pinMap->inputPin == NotConnected) {\n      return false;\n    }\n    if (inputPin == pinMap->inputPin) break;\n    pinMap = pinMap + 1;\n  }\n  return true;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_pin_conflict_0800738a",
                "pin": "inputPin",
                "map": "pinMap",
                "NC": "NotConnected",
                "PinName_conflict": "PinNameConflict",
                "PinMap_conflict": "PinMapConflict"
            },
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback",
                "analogWrite",
                "pinMode",
                "enableI2CPins",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "merge_pointers_080073ae",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid * merge_pointers_080073ae(void *a,void *b)\n\n{\n  if (a != b) {\n    if (a == (void *)0x0) {\n      return b;\n    }\n    if (b == (void *)0x0) {\n      return a;\n    }\n    a = (void *)0x0;\n  }\n  return a;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "merge_pointers_080073ae"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_rtc_user_callback_080073c0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid execute_RTC_user_callback_080073c0(RTC_HandleTypeDef *RTC_handle)\n\n{\n  if (user_callback_function != (callback_function_pointer)0x0) {\n    (*user_callback_function)(callback_user_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_rtc_user_callback_080073c0",
                "hrtc": "RTC_handle",
                "RTCUserCallback": "user_callback_function",
                "voidCallbackPtr": "callback_function_pointer",
                "callbackUserData": "callback_user_data"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073d8": {
            "entrypoint": "0x080073d8",
            "current_name": "handle_alarm_interrupt_080073d8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleAlarmInterrupt_080073d8(void)\n\n{\n  HAL_RTC_AlarmIRQHandler(rtcHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d8": "handle_alarm_interrupt_080073d8",
                "&RtcHandle": "rtcHandle"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid infiniteLoop_080073e8(char *message,int value)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8",
                "msg": "message",
                "val": "value"
            },
            "calling": [
                "SystemClock_Config",
                "_Error_Handler",
                "onReceiveService"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_hardware_080073ec",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeHardware_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_hardware_080073ec"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "initialize_timer_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007438(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  uint32_t tempRegister;\n  uint32_t tempRegister_1;\n  uint32_t tempRegister_2;\n  uint32_t tempRegister_3;\n  \n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    timer_handles[0] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    timer_handles[1] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    timer_handles[2] = timerHandle;\n  }\n  if (timerHandle->Instance == (TIM_TypeDef_conflict *)0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    timer_handles[3] = timerHandle;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "initialize_timer_08007438",
                "htim": "timerHandle",
                "tmpreg": "tempRegister",
                "tmpreg_1": "tempRegister_1",
                "tmpreg_2": "tempRegister_2",
                "tmpreg_3": "tempRegister_3"
            },
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "configure_tim_080074e0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid configure_TIM_080074e0(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  if (timer_handle->timer_instance == (TIM_TypeDef_conflict *)0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (timer_handle->timer_instance == (TIM_TypeDef_conflict *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (timer_handle->timer_instance == (TIM_TypeDef_conflict *)0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (timer_handle->timer_instance == (TIM_TypeDef_conflict *)0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "configure_tim_080074e0",
                "htim": "timer_handle",
                "Instance": "timer_instance"
            },
            "calling": [
                "HAL_TIM_OC_MspDeInit",
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_08007544",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTimerIRQn_08007544(TimerTypeDef *timer)\n\n{\n  if (timer == (TimerTypeDef *)0xffffffff) {\n    return 0;\n  }\n  if (timer == (TimerTypeDef *)0x40000400) {\n    return 0x1d;\n  }\n  if (timer < (TimerTypeDef *)0x40000401) {\n    if (timer == (TimerTypeDef *)0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timer == (TimerTypeDef *)0x40000800) {\n      return 0x1e;\n    }\n    if (timer == (TimerTypeDef *)0x40012c00) {\n      return 0x19;\n    }\n  }\n  iprintf(\"TIM: Unknown timerer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "tim": "timer",
                "TIM_TypeDef_conflict": "TimerTypeDef"
            },
            "calling": [
                "TimerPulseInit",
                "TimerPulseDeinit"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t checkTimerInstance_08007594(TimerTypeDef *timer)\n\n{\n  if (timer == (TimerTypeDef *)0xffffffff) {\n    return '\\0';\n  }\n  if (timer == (TimerTypeDef *)0x40000400) {\n    return '\\x01';\n  }\n  if (timer < (TimerTypeDef *)0x40000401) {\n    if (timer == (TimerTypeDef *)0x40000000) {\n      return '\\x01';\n    }\n  }\n  else {\n    if (timer == (TimerTypeDef *)0x40000800) {\n      return '\\x01';\n    }\n    if (timer == (TimerTypeDef *)0x40012c00) {\n      return '\\x02';\n    }\n  }\n  printMessage(\"TIM: Unknown timerer instance\");\n  return '\\0';\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "tim": "timer",
                "TIM_TypeDef_conflict": "TimerTypeDef",
                "iprintf": "printMessage"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "get_timer_frequency_080075dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getTimerFrequency_080075dc(TIM_TypeDef_conflict *timer)\n\n{\n  uint32_t apb2Divider;\n  uint8_t timerClkSrc;\n  uint32_t timerFrequency;\n  uint32_t apb1Divider;\n  uint32_t flashLatency;\n  RCC_ClkInitTypeDef_conflict clockConfig;\n  \n  clockConfig.ClockType = 0;\n  clockConfig.SYSCLKSource = 0;\n  clockConfig.AHBCLKDivider = 0;\n  clockConfig.APB1CLKDivider = 0;\n  clockConfig.APB2CLKDivider = 0;\n  flashLatency = 0;\n  HAL_RCC_GetClockConfig(&clockConfig,&flashLatency);\n  timerClkSrc = getTimerClkSrc(timer);\n  apb2Divider = clockConfig.APB2CLKDivider;\n  apb1Divider = clockConfig.APB1CLKDivider;\n  if (timerClkSrc == '\\x01') {\n    timerFrequency = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timerClkSrc == '\\x02') {\n    timerFrequency = HAL_RCC_GetPCLK2Freq();\n    apb1Divider = apb2Divider;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    timerFrequency = 0;\n    apb1Divider = 0;\n  }\n  if (apb1Divider != 0x500) {\n    if (apb1Divider < 0x501) {\n      if (apb1Divider != 0x400) {\n        return timerFrequency;\n      }\n    }\n    else if ((apb1Divider != 0x600) && (apb1Divider != 0x700)) {\n      return timerFrequency;\n    }\n  }\n  return timerFrequency << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "get_timer_frequency_080075dc",
                "tim": "timer",
                "uVar1": "apb2Divider",
                "uVar2": "timerClkSrc",
                "uVar3": "timerFrequency",
                "uVar4": "apb1Divider",
                "pFLatency": "flashLatency",
                "clkconfig": "clockConfig"
            },
            "calling": [
                "TimerPulseInit",
                "pwm_start"
            ],
            "called": [
                "getTimerClkSrc",
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK2Freq",
                "iprintf",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_timer_08007648",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeTimer_08007648(stimer_t_conflict *timerObject,uint16_t timerPeriod,uint16_t timerPulseWidth,\n                 _func_void_stimer_t_ptr_uint32_t_conflict *irqHandler)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerClkFreq;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  TIM_OC_InitTypeDef timerConfig;\n  \n  outputCompareMode = 0;\n  pulseValue = 0;\n  outputPolarity = 0;\n  outputNPolarity = 0;\n  fastMode = 0;\n  idleState = 0;\n  nIdleState = 0;\n  timerHandle = &timerObject->timerHandle;\n  timerObject->timer = (TIM_TypeDef_conflict *)0x40000000;\n  (timerObject->timerHandle).Instance = (TIM_TypeDef_conflict *)0x40000000;\n  (timerObject->timerHandle).Init.Period = (uint)timerPeriod;\n  timerClkFreq = getTimerClkFreq((TIM_TypeDef_conflict *)0x40000000);\n  (timerObject->timerHandle).Init.Prescaler = timerClkFreq / 1000000 - 1;\n  (timerObject->timerHandle).Init.ClockDivision = 0;\n  (timerObject->timerHandle).Init.CounterMode = 0;\n  (timerObject->timerHandle).Init.RepetitionCounter = 0;\n  timerObject->irqHandlerOC = irqHandler;\n  outputCompareMode = 0;\n  outputPolarity = 0;\n  fastMode = 0;\n  outputNPolarity = 0;\n  idleState = 0;\n  nIdleState = 0;\n  pulseValue = (uint)timerPulseWidth;\n  timerClkFreq = getTimerIrq(timerObject->timer);\n  HAL_NVIC_SetPriority((IRQn_Type_conflict)timerIRQ,0xe,0);\n  timerClkFreq = getTimerIrq(timerObject->timer);\n  HAL_NVIC_EnableIRQ((IRQn_Type_conflict)timerIRQ);\n  status = HAL_TIM_OC_Init(timerHandle);\n  if ((status == HAL_OK) && (status = HAL_TIM_OC_ConfigChannel(timerHandle,&timerConfig,0), status == HAL_OK)) {\n    HAL_TIM_OC_Start_IT(timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "obj": "timerObject",
                "period": "timerPeriod",
                "pulseWidth": "timerPulseWidth",
                "irqHandle": "irqHandler",
                "HVar1": "status",
                "handle": "timerHandle",
                "htim": "timerHandle",
                "sConfig": "timerConfig",
                "sConfig.OCMode": "outputCompareMode",
                "sConfig.Pulse": "pulseValue",
                "sConfig.OCPolarity": "outputPolarity",
                "sConfig.OCNPolarity": "outputNPolarity",
                "sConfig.OCFastMode": "fastMode",
                "sConfig.OCIdleState": "idleState",
                "sConfig.OCNIdleState": "nIdleState",
                "uVar2": "timerClkFreq",
                "(IRQn_Type_conflict)uVar2": "(IRQn_Type_conflict)timerIRQ",
                "HAL_NVIC_EnableIRQ((IRQn_Type_conflict)uVar2)": "HAL_NVIC_EnableIRQ((IRQn_Type_conflict)timerIRQ)"
            },
            "calling": [
                "initISR"
            ],
            "called": [
                "HAL_TIM_OC_Start_IT",
                "getTimerIrq",
                "HAL_TIM_OC_ConfigChannel",
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_timer_interrupt_080076e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableTimerInterrupt_080076e0(stimer_t_conflict *timerObject)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t timerIrq;\n  TIM_HandleTypeDef_conflict *timerHandle;\n  \n  timerObject->irqHandleOC = (_func_void_stimer_t_ptr_uint32_t_conflict *)0x0;\n  timerIrq = getTimerIrq(timerObject->timer);\n  HAL_NVIC_DisableIRQ((IRQn_Type_conflict)timerIrq);\n  status = HAL_TIM_OC_DeInit(&timerObject->timerHandle);\n  if (status == HAL_OK) {\n    HAL_TIM_OC_Stop_IT(&timerObject->timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_timer_interrupt_080076e0",
                "obj": "timerObject",
                "HVar1": "status",
                "uVar2": "timerIrq",
                "handle": "timerHandle"
            },
            "calling": [
                "finISR"
            ],
            "called": [
                "HAL_TIM_OC_Stop_IT",
                "getTimerIrq",
                "HAL_TIM_OC_DeInit",
                "HAL_NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "enable_timer_clock_08007708",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enable_timer_clock_08007708(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  enable_timer_clock_08007708(timer_handle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "enable_timer_clock_08007708",
                "htim": "timer_handle",
                "timer_enable_clock": "enable_timer_clock"
            },
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "called": [
                "timer_enable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_timer_clock_08007710",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid disableTimerClock_08007710(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  timer_disable_clock(timerHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710",
                "htim": "timerHandle"
            },
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "get_conflicted_s_timer_08007718",
            "code": "\n/* WARNING: Unknown calling convention */\n\nconflictedSTimer * getConflictedSTimer_08007718(timerHandle *timerHandle)\n\n{\n  return (conflictedSTimer *)&timerHandle[-1].conflictLock;\n}\n\n",
            "renaming": {
                "FUN_08007718": "get_conflicted_s_timer_08007718",
                "TIM_HandleTypeDef_conflict": "timerHandle",
                "stimer_t_conflict": "conflictedSTimer",
                "htim": "timerHandle",
                "Lock": "conflictLock"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "handle_timer_interrupt_0800771c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_timer_interrupt_0800771c(TIM_HandleTypeDef_conflict *timer_handle)\n\n{\n  stimer_t_conflict *timer_obj;\n  stimer_t_conflict *timer_obj;\n  \n  timer_obj = get_timer_timer_obj(timer_handle);\n  if ((timer_obj->interrupt_handler != (function_pointer *)0x0) &&\n     (timer_handle->active_channel == HAL_TIM_ACTIVE_CHANNEL_1)) {\n    (*timer_obj->interrupt_handler)(timer_obj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "handle_timer_interrupt_0800771c",
                "htim": "timer_handle",
                "psVar1": "timer_obj",
                "obj": "timer_obj",
                "irqHandleOC": "interrupt_handler",
                "_func_void_stimer_t_ptr_uint32_t_conflict": "function_pointer",
                "Channel": "active_channel"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "handle_timer_interrupt_08007736",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007736(TIM_HandleTypeDef_conflict *timerHandle)\n\n{\n  stimer_t_conflict *timerObject;\n  stimer_t_conflict *object;\n  \n  timerObject = get_timer_object(timerHandle);\n  if (timerObject->interruptHandle != (_func_void_stimer_t_ptr_conflict *)0x0) {\n    (*timerObject->interruptHandle)(timerObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "handle_timer_interrupt_08007736",
                "htim": "timerHandle",
                "psVar1": "timerObject",
                "obj": "object",
                "irqHandle": "interruptHandle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_cnt_from_handle_08007744",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t getCNTFromHandle_08007744(stimer_t_conflict *timerObject)\n\n{\n  return ((timerObject->timerHandle).timerInstance)->currentCounterValue;\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_cnt_from_handle_08007744",
                "obj": "timerObject",
                "handle": "timerHandle",
                "Instance": "timerInstance",
                "CNT": "currentCounterValue"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_timer_value_0800774a",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setTimerValue_0800774a(stimer_t_conflict *timerObject,uint32_t newValue)\n\n{\n  ((timerObject->handle).Instance)->CNT = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_timer_value_0800774a",
                "obj": "timerObject",
                "value": "newValue"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "set_channel_value_08007750",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setChannelValue_08007750(stimer_t_conflict *timerObject,uint32_t channelNumber,uint32_t newValue)\n\n{\n  (&((timerObject->handle).Instance)->CCR1)[channelNumber] = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "set_channel_value_08007750",
                "obj": "timerObject",
                "channel": "channelNumber",
                "value": "newValue"
            },
            "calling": [
                "ServoIrqHandle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007760": {
            "entrypoint": "0x08007760",
            "current_name": "handle_timer_interrupt_08007760",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007760(void)\n\n{\n  if (timerHandles[0] != (TimerHandleConflict *)0x0) {\n    handleTimerIRQ(timerHandles[0]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007760": "handle_timer_interrupt_08007760",
                "timer_handles": "timerHandles",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict",
                "HAL_TIM_IRQHandler": "handleTimerIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007774": {
            "entrypoint": "0x08007774",
            "current_name": "handle_timer1_interrupt_08007774",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimer1Interrupt_08007774(void)\n\n{\n  if (timerHandles[1] != (TimerHandleConflict *)0x0) {\n    HAL_TIM_IRQHandler(timerHandles[1]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007774": "handle_timer1_interrupt_08007774",
                "timer_handles": "timerHandles",
                "TIM_HandleTypeDef_conflict": "TimerHandleConflict"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007788": {
            "entrypoint": "0x08007788",
            "current_name": "handle_timer_interrupt_08007788",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimerInterrupt_08007788(void)\n\n{\n  if (timerHandles[2] != (TIM_HandleTypeDef_conflict *)0x0) {\n    HAL_TIM_IRQHandler(timerHandles[2]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007788": "handle_timer_interrupt_08007788",
                "timer_handles": "timerHandles"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800779c": {
            "entrypoint": "0x0800779c",
            "current_name": "handle_tim_interrupt_0800779c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleTimInterrupt_0800779c(void)\n\n{\n  if (timerHandle != (TimerHandle *)0x0) {\n    handleTimIRQ(timerHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800779c": "handle_tim_interrupt_0800779c",
                "timer_handles[3]": "timerHandle",
                "TIM_HandleTypeDef_conflict": "TimerHandle",
                "HAL_TIM_IRQHandler": "handleTimIRQ"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeI2C_080077b0(i2c_t_conflict *i2cObject,i2c_timingMode_e_conflict timingMode,uint32_t addrMode,\n                 uint32_t ownAddr,uint8_t isMaster)\n\n{\n  void *a;\n  I2C_TypeDef_conflict *i2cSDA;\n  void *b;\n  I2C_TypeDef_conflict *i2cSCL;\n  I2C_TypeDef_conflict *i2c;\n  GPIO_TypeDef *gpioPort;\n  GPIO_TypeDef *port;\n  uint32_t tmpVar1;\n  uint32_t tmpVar2;\n  uint32_t tmpreg3;\n  uint32_t tmpreg4;\n  uint32_t tmpreg5;\n  uint32_t tmpreg6;\n  uint32_t tmpreg7;\n  uint32_t tmpreg8;\n  uint32_t tmpreg9;\n  uint32_t tmpreg10;\n  uint32_t tmpreg11;\n  uint32_t tmpreg12;\n  uint32_t tmpreg13;\n  uint32_t tmpreg14;\n  uint32_t tmpreg15;\n  uint32_t tmpreg17;\n  uint32_t tmpreg18;\n  uint32_t tmpreg19;\n  uint32_t tmpreg20;\n  uint32_t tmpreg21;\n  uint32_t tmpreg22;\n  uint32_t tmpreg23;\n  uint32_t tmpreg24;\n  uint32_t tmpreg25;\n  uint32_t tmpreg26;\n  uint32_t tmpreg27;\n  uint32_t tmpreg28;\n  uint32_t tmpreg29;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  uint32_t tmpreg;\n  uint32_t tmpreg1;\n  uint32_t tmpreg16;\n  uint32_t tmpreg2;\n  GPIO_InitTypeDef gpioInitStruct;\n  \n  if (i2cObject != (i2c_t_conflict *)0x0) {\n    i2cHandle = &i2cObject->i2cHandle;\n    a = pinmap_peripheral(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n    b = pinmap_peripheral(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n    if ((a == (void *)0x0) || (b == (void *)0x0)) {\n      iprintf(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      i2c = (I2C_TypeDef_conflict *)pinmap_merge_peripheral(a,b);\n      i2cObject->i2c = i2c;\n      if (i2c == (I2C_TypeDef_conflict *)0x0) {\n        iprintf(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (i2c == (I2C_TypeDef_conflict *)0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          i2cObject->irq = I2C1_EV_IRQn;\n          i2cObject->irqER = I2C1_ER_IRQn;\n          i2c_i2cHandles = i2cHandle;\n        }\n        if (i2cObject->i2c == (I2C_TypeDef_conflict *)0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          i2cObject->irq = I2C2_EV_IRQn;\n          i2cObject->irqER = I2C2_ER_IRQn;\n          I2C2_ER_IRQHandler::i2cHandle = i2cHandle;\n        }\n        gpioPort = set_GPIO_Port_Clock((uint)((int)i2cObject->scl << 0x18) >> 0x1c);\n        port = (GPIO_TypeDef *)(int)i2cObject->scl;\n        gpioInitStruct.Pin = 1 << ((uint)port & 0xf) & 0xffff;\n        tmpVar1 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        tmpVar2 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        gpioInitStruct.Mode = (tmpVar1 >> 3 & 1) << 4 | tmpVar2 & 7;\n        gpioInitStruct.Speed = 3;\n        tmpVar1 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        gpioInitStruct.Pull = (tmpVar1 << 0x1a) >> 0x1e;\n        tmpVar1 = pinmap_function(i2cObject->scl,(PinMap_conflict *)&PinMap_I2C_SCL);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((tmpVar1 << 0x11) >> 0x19) {\n        case 1:\n          tmpreg26 = tmpreg26 | 0x7000001;\n          break;\n        case 2:\n          tmpreg26 = tmpreg26 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg26 = tmpreg26 | 0x7000002;\n          break;\n        case 4:\n          tmpreg26 = tmpreg26 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg26 = tmpreg26 | 0x7000004;\n          break;\n        case 6:\n          tmpreg26 = tmpreg26 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg26 = tmpreg26 | 0x7000008;\n          break;\n        case 8:\n          tmpreg26 = tmpreg26 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg26 = tmpreg26 | 0x7000030;\n          break;\n        case 10:\n          tmpreg3 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg3 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg4 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg4 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg26 = tmpreg26 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg5 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg5 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg6 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg6 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg26 = tmpreg26 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg7 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg7 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg8 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg8 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg9 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg9 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg26 = tmpreg26 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg10 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg10 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg11 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg11 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg26 = tmpreg26 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg26 = tmpreg26 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg26 = tmpreg26 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg26 = tmpreg26 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg12 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg12;\n          break;\n        case 0x22:\n          tmpreg13 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg13 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg14 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg14 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg15 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg15 | 0x4000000;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        gpioPort = set_GPIO_Port_Clock((uint)((int)i2cObject->sda << 0x18) >> 0x1c);\n        gpioInitStruct.Pin = 1 << ((int)i2cObject->sda & 0xfU) & 0xffff;\n        tmpVar1 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        tmpVar2 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        gpioInitStruct.Mode = (tmpVar1 >> 3 & 1) << 4 | tmpVar2 & 7;\n        gpioInitStruct.Speed = 3;\n        tmpVar1 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        gpioInitStruct.Pull = (tmpVar1 << 0x1a) >> 0x1e;\n        tmpVar1 = pinmap_function(i2cObject->sda,(PinMap_conflict *)&PinMap_I2C_SDA);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((tmpVar1 << 0x11) >> 0x19) {\n        case 1:\n          tmpreg26 = tmpreg26 | 0x7000001;\n          break;\n        case 2:\n          tmpreg26 = tmpreg26 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg26 = tmpreg26 | 0x7000002;\n          break;\n        case 4:\n          tmpreg26 = tmpreg26 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg26 = tmpreg26 | 0x7000004;\n          break;\n        case 6:\n          tmpreg26 = tmpreg26 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg26 = tmpreg26 | 0x7000008;\n          break;\n        case 8:\n          tmpreg26 = tmpreg26 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg26 = tmpreg26 | 0x7000030;\n          break;\n        case 10:\n          tmpreg17 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg17 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg18 = tmpreg26 & 0xffffffcf;\n          tmpreg26 = tmpreg18 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg26 = tmpreg26 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg19 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg19 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg20 = tmpreg26 & 0xffffff3f;\n          tmpreg26 = tmpreg20 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg26 = tmpreg26 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg21 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg21 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg22 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg22 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg23 = tmpreg26 & 0xfffffcff;\n          tmpreg26 = tmpreg23 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg26 = tmpreg26 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg24 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg24 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg25 = tmpreg26 & 0xfffff3ff;\n          tmpreg26 = tmpreg25 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg26 = tmpreg26 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg26 = tmpreg26 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg26 = tmpreg26 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg26 = tmpreg26 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg26 = tmpreg26 & 0xf8ffffff;\n          break;\n        case 0x22:\n          tmpreg27 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg27 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg28 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg28 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg29 = tmpreg26 & 0xf8ffffff;\n          tmpreg26 = tmpreg29 | 0x4000000;\n        }\n        HAL_GPIO_Init(gpioPort,&gpioInitStruct);\n        (i2cObject->i2cHandle).Instance = i2cObject->i2c;\n        (i2cObject->i2cHandle).Init.ClockSpeed = timingMode;\n        (i2cObject->i2cHandle).Init.DutyCycle = 0;\n        (i2cObject->i2cHandle).Init.OwnAddress1 = ownAddr;\n        (i2cObject->i2cHandle).Init.OwnAddress2 = 0xff;\n        (i2cObject->i2cHandle).Init.AddressingMode = addrMode;\n        (i2cObject->i2cHandle).Init.DualAddressMode = 0;\n        (i2cObject->i2cHandle).Init.GeneralCallMode = 0;\n        (i2cObject->i2cHandle).Init.NoStretchMode = 0;\n        (i2cObject->i2cHandle).State = HAL_I2C_STATE_RESET;\n        HAL_NVIC_SetPriority(i2cObject->irq,0,1);\n        HAL_NVIC_EnableIRQ(i2cObject->irq);\n        HAL_NVIC_SetPriority(i2cObject->irqER,0,1);\n        HAL_NVIC_EnableIRQ(i2cObject->irqER);\n        HAL_I2C_Init(i2cHandle);\n        i2cObject->isMaster = isMaster;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "obj": "i2cObject",
                "timing": "timingMode",
                "addressingMode": "addrMode",
                "ownAddress": "ownAddr",
                "master": "isMaster",
                "i2c_sda": "i2cSDA",
                "i2c_scl": "i2cSCL",
                "pIVar1": "i2c",
                "pGVar2": "gpioPort",
                "uVar3": "tmpVar1",
                "uVar4": "tmpVar2",
                "tmpreg_3": "tmpreg3",
                "tmpreg_4": "tmpreg4",
                "tmpreg_5": "tmpreg5",
                "tmpreg_6": "tmpreg6",
                "tmpreg_7": "tmpreg7",
                "tmpreg_8": "tmpreg8",
                "tmpreg_9": "tmpreg9",
                "tmpreg_10": "tmpreg10",
                "tmpreg_11": "tmpreg11",
                "tmpreg_12": "tmpreg12",
                "tmpreg_13": "tmpreg13",
                "tmpreg_14": "tmpreg14",
                "tmpreg_15": "tmpreg15",
                "tmpreg_17": "tmpreg17",
                "tmpreg_18": "tmpreg18",
                "tmpreg_19": "tmpreg19",
                "tmpreg_20": "tmpreg20",
                "tmpreg_21": "tmpreg21",
                "tmpreg_22": "tmpreg22",
                "tmpreg_23": "tmpreg23",
                "tmpreg_24": "tmpreg24",
                "tmpreg_25": "tmpreg25",
                "tmpreg_26": "tmpreg26",
                "tmpreg_27": "tmpreg27",
                "tmpreg_28": "tmpreg28",
                "tmpreg_29": "tmpreg29",
                "hi2c": "i2cHandle",
                "handle": "i2cHandle",
                "tmpreg_1": "tmpreg1",
                "tmpreg_16": "tmpreg16",
                "tmpreg_2": "tmpreg2",
                "GPIO_InitStruct": "gpioInitStruct"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "iprintf",
                "HAL_I2C_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_i2_c_data_08007e74",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict\ntransmitI2CData_08007e74(i2c_t_conflict *i2cObject,uint8_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  HAL_StatusTypeDef_conflict halStatus;\n  uint32_t startTick;\n  uint32_t currentTick;\n  uint32_t elapsedTime;\n  uint timeout;\n  i2c_status_e_conflict status;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  \n  startTick = HAL_GetTick();\n  timeout = 0;\n  status = I2C_ERROR;\n  do {\n    i2cHandle = &i2cObject->handle;\n    halStatus = HAL_I2C_Master_Transmit_IT(i2cHandle,(ushort)deviceAddress,dataBuffer,dataSize);\n    if (halStatus == HAL_OK) {\n      status = I2C_OK;\n      while ((i2cState = HAL_I2C_GetState(i2cHandle), i2cState != HAL_I2C_STATE_READY && (status == I2C_OK))) {\n        elapsedTime = HAL_GetTick();\n        timeout = elapsedTime - startTick;\n        if (timeout < 0x65) {\n          elapsedTime = HAL_I2C_GetError(i2cHandle);\n          if (elapsedTime != 0) {\n            status = I2C_ERROR;\n          }\n        }\n        else {\n          status = I2C_TIMEOUT;\n        }\n      }\n    }\n    elapsedTime = HAL_I2C_GetError(i2cHandle);\n  } while ((elapsedTime == 4) && (timeout < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_i2_c_data_08007e74",
                "obj": "i2cObject",
                "dev_address": "deviceAddress",
                "data": "dataBuffer",
                "size": "dataSize",
                "HVar1": "i2cState",
                "HVar2": "halStatus",
                "uVar3": "startTick",
                "tickstart": "currentTick",
                "uVar4": "elapsedTime",
                "uVar5": "timeout",
                "iVar6": "status",
                "hi2c": "i2cHandle"
            },
            "calling": [
                "endTransmission"
            ],
            "called": [
                "HAL_I2C_GetError",
                "HAL_I2C_GetState",
                "HAL_I2C_Master_Transmit_IT",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_to_buffer_08007ede",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict copyDataToBuffer_08007ede(i2c_t_conflict *i2cObject,uint8_t *inputData,uint16_t dataSize)\n\n{\n  uint index;\n  \n  if (0x20 < dataSize) {\n    return I2C_ERROR;\n  }\n  for (index = 0; index < dataSize; index = index + 1 & 0xff) {\n    i2cObject->i2cTxRxBuffer[index] = inputData[index];\n    i2cObject->i2cTxRxBufferSize = i2cObject->i2cTxRxBufferSize + '\\x01';\n  }\n  return I2C_OK;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "obj": "i2cObject",
                "data": "inputData",
                "size": "dataSize",
                "uVar1": "index"
            },
            "calling": [
                "write",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "receive_i2_c_data_08007f0e",
            "code": "\n/* WARNING: Unknown calling convention */\n\ni2c_status_e_conflict\nreceiveI2CData_08007f0e(i2c_t_conflict *i2cObject,uint8_t deviceAddress,uint8_t *dataBuffer,uint16_t dataSize)\n\n{\n  HAL_I2C_StateTypeDef_conflict i2cState;\n  HAL_StatusTypeDef_conflict halStatus;\n  uint32_t startTime;\n  uint32_t tickStart;\n  uint32_t elapsedTime;\n  uint timeDifference;\n  i2c_status_e_conflict status;\n  I2C_HandleTypeDef_conflict *i2cHandle;\n  \n  startTime = HAL_GetTick();\n  timeDifference = 0;\n  status = I2C_ERROR;\n  do {\n    i2cHandle = &i2cObject->handle;\n    halStatus = HAL_I2C_Master_Receive_IT(i2cHandle,(ushort)deviceAddress,dataBuffer,dataSize);\n    if (halStatus == HAL_OK) {\n      status = I2C_OK;\n      while ((i2cState = HAL_I2C_GetState(i2cHandle), i2cState != HAL_I2C_STATE_READY && (status == I2C_OK))) {\n        elapsedTime = HAL_GetTick();\n        timeDifference = elapsedTime - startTime;\n        if (timeDifference < 0x65) {\n          elapsedTime = HAL_I2C_GetError(i2cHandle);\n          if (elapsedTime != 0) {\n            status = I2C_ERROR;\n          }\n        }\n        else {\n          status = I2C_TIMEOUT;\n        }\n      }\n    }\n    elapsedTime = HAL_I2C_GetError(i2cHandle);\n  } while ((elapsedTime == 4) && (timeDifference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "receive_i2_c_data_08007f0e",
                "obj": "i2cObject",
                "dev_address": "deviceAddress",
                "data": "dataBuffer",
                "size": "dataSize",
                "HVar1": "i2cState",
                "HVar2": "halStatus",
                "uVar3": "startTime",
                "tickstart": "tickStart",
                "uVar4": "elapsedTime",
                "uVar5": "timeDifference",
                "iVar6": "status",
                "hi2c": "i2cHandle"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "HAL_I2C_GetError",
                "HAL_I2C_GetState",
                "HAL_GetTick",
                "HAL_I2C_Master_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "extract_i2c_t_conflict_from_hi2c_08007f78",
            "code": "\n/* WARNING: Unknown calling convention */\n\nextracted_i2c_t_conflict * extract_i2c_t_conflict_from_hi2c_08007f78(I2C_HandleTypeDef_conflict *hi2c_conflict)\n\n{\n  return (extracted_i2c_t_conflict *)&hi2c_conflict[-1].extracted_EventCount;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "extract_i2c_t_conflict_from_hi2c_08007f78",
                "hi2c": "hi2c_conflict",
                "i2c_t_conflict": "extracted_i2c_t_conflict",
                "EventCount": "extracted_EventCount"
            },
            "calling": [
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "set_slave_receive_function_08007f7c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setSlaveReceiveFunction_08007f7c(i2c_t_conflict *conflictObject,_func_void_uint8_t_ptr_int *callbackFunction)\n\n{\n  if (conflictObject != (i2c_t_conflict *)0x0) {\n    if (callbackFunction != (_func_void_uint8_t_ptr_int *)0x0) {\n      conflictObject->slaveReceiveCallback = callbackFunction;\n      enableListenInterrupt(&conflictObject->i2cHandle);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "set_slave_receive_function_08007f7c",
                "obj": "conflictObject",
                "function": "callbackFunction",
                "i2c_onSlaveReceive": "slaveReceiveCallback",
                "HAL_I2C_EnableListen_IT": "enableListenInterrupt",
                "handle": "i2cHandle"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "set_i2_c_on_slave_transmit_callback_08007f8e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid setI2COnSlaveTransmitCallback_08007f8e(i2c_t_conflict *i2cObject,_func_void *callbackFunction)\n\n{\n  if (i2cObject != (i2c_t_conflict *)0x0) {\n    if (callbackFunction != (_func_void *)0x0) {\n      i2cObject->onSlaveTransmit = callbackFunction;\n      enableI2CListenInterrupt(&i2cObject->handle);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "set_i2_c_on_slave_transmit_callback_08007f8e",
                "obj": "i2cObject",
                "function": "callbackFunction",
                "i2c_onSlaveTransmit": "onSlaveTransmit",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "handle_i2_c_transfer_08007fa0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CTransfer_08007fa0(I2C_HandleTypeDef_conflict *i2cHandle,uint8_t transferDirection,uint16_t addressMatchCode)\n\n{\n  i2c_t_conflict *i2cObj;\n  i2c_t_conflict *i2cObj2;\n  \n  i2cObj = get_i2c_i2cObj2(i2cHandle);\n  if ((uint)addressMatchCode == (i2cHandle->Init).OwnAddress1) {\n    if (transferDirection == '\\0') {\n      i2cObj->i2cTxRxBufferSize = '\\0';\n      i2cObj->slaveMode = '\\0';\n      if (i2cObj->i2c_onSlaveTransmit != (_func_void *)0x0) {\n        (*i2cObj->i2c_onSlaveTransmit)();\n      }\n      HAL_I2C_Slave_Sequential_Transmit_IT\n                (i2cHandle,i2cObj->i2cTxRxBuffer,(ushort)i2cObj->i2cTxRxBufferSize,8);\n      return;\n    }\n    i2cObj->slaveMode = '\\x01';\n    HAL_I2C_Slave_Sequential_Receive_IT(i2cHandle,i2cObj->i2cTxRxBuffer,0x20,8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "handle_i2_c_transfer_08007fa0",
                "hi2c": "i2cHandle",
                "TransferDirection": "transferDirection",
                "AddrMatchCode": "addressMatchCode",
                "piVar1": "i2cObj",
                "obj": "i2cObj2"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "HAL_I2C_Slave_Sequential_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_slave_receive_08007ff0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enableSlaveReceive_08007ff0(I2C_HandleTypeDef_conflict *i2cHandler)\n\n{\n  i2c_t_conflict *i2cObject;\n  i2c_t_conflict *tempObject;\n  uint remainingBytes;\n  \n  i2cObject = get_i2c_tempObject(i2cHandler);\n  if (((i2cObject->i2c_onSlaveReceive != (_func_void_uint8_t_ptr_int *)0x0) &&\n      (i2cObject->slaveMode == '\\x01')) &&\n     (remainingBytes = 0x20 - *(byte *)&(i2cObject->handle).XferSize & 0xff, remainingBytes != 0)) {\n    (*i2cObject->i2c_onSlaveReceive)(i2cObject->i2cTxRxBuffer,remainingBytes);\n  }\n  HAL_I2C_EnableListen_IT(i2cHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_slave_receive_08007ff0",
                "hi2c": "i2cHandler",
                "piVar1": "i2cObject",
                "obj": "tempObject",
                "uVar2": "remainingBytes"
            },
            "calling": [
                "I2C_ITError",
                "I2C_Slave_AF",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_listen_it_08008020",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid enableListenIT_08008020(I2C_HandleTypeDef_conflict *i2cHandle)\n\n{\n  i2c_t_conflict *i2cObject;\n  i2c_t_conflict *i2cObject;\n  \n  i2cObject = get_i2c_i2cObject(i2cHandle);\n  if (i2cObject->isMaster == '\\0') {\n    HAL_I2C_EnableListen_IT(i2cHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_listen_it_08008020",
                "hi2c": "i2cHandle",
                "piVar1": "i2cObject",
                "obj": "i2cObject"
            },
            "calling": [
                "I2C_ITError",
                "I2C_DMAAbort"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008038": {
            "entrypoint": "0x08008038",
            "current_name": "handle_i2_c_event_08008038",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CEvent_08008038(void)\n\n{\n  HAL_I2C_EV_IRQHandler(i2cHandles);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008038": "handle_i2_c_event_08008038",
                "i2c_handles": "i2cHandles"
            },
            "calling": [],
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008048": {
            "entrypoint": "0x08008048",
            "current_name": "handle_i2_c_error_interrupt_08008048",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CErrorInterrupt_08008048(void)\n\n{\n  HAL_I2C_ER_IRQHandler(i2c_handles);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008048": "handle_i2_c_error_interrupt_08008048"
            },
            "calling": [],
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008058": {
            "entrypoint": "0x08008058",
            "current_name": "handle_i2_c_events_08008058",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CEvents_08008058(void)\n\n{\n  HAL_I2C_EV_IRQHandler(i2c2ErrorHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008058": "handle_i2_c_events_08008058",
                "I2C2_ER_IRQHandler::handle": "i2c2ErrorHandler"
            },
            "calling": [],
            "called": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008068": {
            "entrypoint": "0x08008068",
            "current_name": "handle_i2_c_error_08008068",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleI2CError_08008068(void)\n\n{\n  HAL_I2C_ER_IRQHandler(i2cHandler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008068": "handle_i2_c_error_08008068",
                "I2C2_ER_IRQHandler::handle": "i2cHandler"
            },
            "calling": [],
            "called": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_serial_port_08008078",
            "code": "\n\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialPort_08008078(serial_t *serialObject)\n\n{\n  void *a;\n  USART_TypeDef *txUART;\n  void *b;\n  USART_TypeDef *rxUART;\n  USART_TypeDef *mergedPeripheral;\n  GPIO_TypeDef *GPIO_Port;\n  GPIO_TypeDef *GPIO_Port;\n  uint32_t pinFunction;\n  uint32_t tmpreg_4;\n  uint32_t tmpreg_5;\n  uint32_t tmpreg_6;\n  uint32_t tmpreg_7;\n  uint32_t tmpreg_8;\n  uint32_t tmpreg_9;\n  uint32_t tmpreg_10;\n  uint32_t tmpreg_11;\n  uint32_t tmpreg_12;\n  uint32_t tmpreg_13;\n  uint32_t tmpreg_14;\n  uint32_t tmpreg_15;\n  uint32_t tmpreg_16;\n  UART_HandleTypeDef *UART_Handle;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  uint32_t tmpreg_3;\n  GPIO_InitTypeDef GPIO_Init_Struct;\n  \n  if (serialObject != (serial_t *)0x0) {\n    a = pinmap_peripheral(serialObject->pin_tx,(PinMap_conflict *)&PinMap_UART_TX);\n    b = pinmap_peripheral(serialObject->pin_rx,(PinMap_conflict *)&PinMap_UART_RX);\n    if ((b == (void *)0x0) || (a == (void *)0x0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\");\n    }\n    else {\n      mergedPeripheral = (USART_TypeDef *)pinmap_merge_peripheral(a,b);\n      serialObject->uart = mergedPeripheral;\n      if (mergedPeripheral == (USART_TypeDef *)0x0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (mergedPeripheral == (USART_TypeDef *)0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          serialObject->index = '\\0';\n          serialObject->irq = USART1_IRQn;\n        }\n        else if (mergedPeripheral == (USART_TypeDef *)0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          serialObject->index = '\\x01';\n          serialObject->irq = USART2_IRQn;\n        }\n        else if (mergedPeripheral == (USART_TypeDef *)0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          serialObject->index = '\\x02';\n          serialObject->irq = USART3_IRQn;\n        }\n        GPIO_Port = set_GPIO_Port_Clock((uint)((int)serialObject->pin_rx << 0x18) >> 0x1c);\n        pinFunction = pinmap_function(serialObject->pin_rx,(PinMap_conflict *)&PinMap_UART_RX);\n        GPIO_Init_Struct.Pin = 1 << (serialObject->pin_rx & 0xfU) & 0xffff;\n        GPIO_Init_Struct.Mode = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        GPIO_Init_Struct.Pull = (pinFunction << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinFunction << 0x11) >> 0x19) {\n        case 1:\n          tmpreg_13 = tmpreg_13 | 0x7000001;\n          break;\n        case 2:\n          tmpreg_13 = tmpreg_13 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          tmpreg_13 = tmpreg_13 | 0x7000002;\n          break;\n        case 4:\n          tmpreg_13 = tmpreg_13 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          tmpreg_13 = tmpreg_13 | 0x7000004;\n          break;\n        case 6:\n          tmpreg_13 = tmpreg_13 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          tmpreg_13 = tmpreg_13 | 0x7000008;\n          break;\n        case 8:\n          tmpreg_13 = tmpreg_13 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          tmpreg_13 = tmpreg_13 | 0x7000030;\n          break;\n        case 10:\n          tmpreg_4 = tmpreg_13 & 0xffffffcf;\n          tmpreg_13 = tmpreg_4 | 0x7000010;\n          break;\n        case 0xb:\n          tmpreg_5 = tmpreg_13 & 0xffffffcf;\n          tmpreg_13 = tmpreg_5 | 0x7000000;\n          break;\n        case 0xc:\n          tmpreg_13 = tmpreg_13 | 0x70000c0;\n          break;\n        case 0xd:\n          tmpreg_6 = tmpreg_13 & 0xffffff3f;\n          tmpreg_13 = tmpreg_6 | 0x7000040;\n          break;\n        case 0xe:\n          tmpreg_7 = tmpreg_13 & 0xffffff3f;\n          tmpreg_13 = tmpreg_7 | 0x7000000;\n          break;\n        case 0xf:\n          tmpreg_13 = tmpreg_13 | 0x7000300;\n          break;\n        case 0x10:\n          tmpreg_8 = tmpreg_13 & 0xfffffcff;\n          tmpreg_13 = tmpreg_8 | 0x7000200;\n          break;\n        case 0x11:\n          tmpreg_9 = tmpreg_13 & 0xfffffcff;\n          tmpreg_13 = tmpreg_9 | 0x7000100;\n          break;\n        case 0x12:\n          tmpreg_10 = tmpreg_13 & 0xfffffcff;\n          tmpreg_13 = tmpreg_10 | 0x7000000;\n          break;\n        case 0x13:\n          tmpreg_13 = tmpreg_13 | 0x7000c00;\n          break;\n        case 0x14:\n          tmpreg_11 = tmpreg_13 & 0xfffff3ff;\n          tmpreg_13 = tmpreg_11 | 0x7000800;\n          break;\n        case 0x15:\n          tmpreg_12 = tmpreg_13 & 0xfffff3ff;\n          tmpreg_13 = tmpreg_12 | 0x7000000;\n          break;\n        case 0x16:\n          tmpreg_13 = tmpreg_13 | 0x7001000;\n          break;\n        case 0x17:\n          tmpreg_13 = tmpreg_13 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          tmpreg_13 = tmpreg_13 | 0x7008000;\n          break;\n        case 0x1c:\n          tmpreg_13 = tmpreg_13 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          tmpreg_13 = tmpreg_13 & 0xf8ffffff;\n          break;\n        case 0x22:\n          tmpreg_14 = tmpreg_13 & 0xf8ffffff;\n          tmpreg_13 = tmpreg_14 | 0x1000000;\n          break;\n        case 0x23:\n          tmpreg_15 = tmpreg_13 & 0xf8ffffff;\n          tmpreg_13 = tmpreg_15 | 0x2000000;\n          break;\n        case 0x24:\n          tmpreg_16 = tmpreg_13 & 0xf8ffffff;\n          tmpreg_13 = tmpreg_16 | 0x4000000;\n        }\n        GPIO_Init_Struct.Speed = 3;\n        HAL_GPIO_Init(GPIO_Port,&GPIO_Init_Struct);\n        GPIO_Port = set_GPIO_Port_Clock((uint)((int)serialObject->pin_tx << 0x18) >> 0x1c);\n        pinFunction = pinmap_function(serialObject->pin_tx,(PinMap_conflict *)&PinMap_UART_TX);\n        GPIO_Init_Struct.Pin = 1 << (serialObject->pin_tx & 0xfU) & 0xffff;\n        GPIO_Init_Struct.Mode = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        GPIO_Init_Struct.Pull = (pinFunction << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(GPIO_Port,&GPIO_Init_Struct);\n        uart_handlers[serialObject->index] = &serialObject->handle;\n        (serialObject->handle).Instance = serialObject->uart;\n        (serialObject->handle).Init.BaudRate = serialObject->baudrate;\n        (serialObject->handle).Init.WordLength = serialObject->databits;\n        (serialObject->handle).Init.StopBits = serialObject->stopbits;\n        (serialObject->handle).Init.Parity = serialObject->parity;\n        (serialObject->handle).Init.Mode = 0xc;\n        (serialObject->handle).Init.HwFlowCtl = 0;\n        (serialObject->handle).Init.OverSampling = 0;\n        HAL_UART_Init(&serialObject->handle);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_serial_port_08008078",
                "obj": "serialObject",
                "uart_tx": "txUART",
                "uart_rx": "rxUART",
                "pUVar1": "mergedPeripheral",
                "pGVar2": "GPIO_Port",
                "port": "GPIO_Port",
                "uVar3": "pinFunction",
                "huart": "UART_Handle",
                "GPIO_InitStruct": "GPIO_Init_Struct"
            },
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "pinmap_function",
                "HAL_UART_Init",
                "pinmap_peripheral",
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_serial_debug_080084b0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialDebug_080084b0(void)\n\n{\n  void *peripheralPtr;\n  \n  peripheralPtr = pinmap_peripheral(pinPA_2,(conflictingPinMap *)&UART_TX_PinMap);\n  if (peripheralPtr != (void *)0x0) {\n    peripheralPtr = pinmap_peripheral(pinPA_2,(conflictingPinMap *)&UART_TX_PinMap);\n    serialDebug.pin_rx = pinmap_pin(peripheralPtr,(conflictingPinMap *)&UART_RX_PinMap);\n    serialDebug.pin_tx = pinPA_2;\n    serialDebug.baudrate = 0x2580;\n    serialDebug.parity = 0;\n    serialDebug.databits = 0;\n    serialDebug.stopbits = 0;\n    initializeUART(&serialDebug);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_serial_debug_080084b0",
                "pvVar1": "peripheralPtr",
                "serial_debug": "serialDebug",
                "PA_2": "pinPA_2",
                "PinMap_conflict": "conflictingPinMap",
                "PinMap_UART_TX": "UART_TX_PinMap",
                "PinMap_UART_RX": "UART_RX_PinMap",
                "uart_init": "initializeUART"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_pin",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "transmit_data_08008500",
            "code": "\n/* WARNING: Unknown calling convention */\n\nbufferSize_t transmitData_08008500(uint8_t *dataBuffer,uint32_t bufferSize)\n\n{\n  HAL_StatusTypeDef_conflict status;\n  uint32_t startTime;\n  uint32_t tickstart;\n  void *peripheral;\n  USART_TypeDef *usartPeripheral;\n  uint32_t currentTime;\n  uint uartIndex;\n  \n  startTime = HAL_GetTick();\n  peripheral = pinmap_peripheral(PA_2,(PinMap_conflict *)&PinMap_UART_TX);\n  if (peripheral == (void *)0x0) {\n    return 0;\n  }\n  uartIndex = 0;\n  while ((uartIndex < 5 &&\n         ((uart_handlers[uartIndex] == (UART_HandleTypeDef *)0x0 ||\n          (usartPeripheral = (USART_TypeDef *)pinmap_peripheral(PA_2,(PinMap_conflict *)&PinMap_UART_TX),\n          uart_handlers[uartIndex]->Instance != usartPeripheral))))) {\n    uartIndex = uartIndex + 1 & 0xff;\n  }\n  if (4 < uartIndex) {\n    if ((4 < serial_debug.index) && (uart_debug_init(), 4 < serial_debug.index)) {\n      return 0;\n    }\n    uartIndex = (uint)serial_debug.index;\n  }\n  do {\n    status = HAL_UART_Transmit(uart_handlers[uartIndex],dataBuffer,(uint16_t)bufferSize,1000);\n    if (status == HAL_OK) {\n      return bufferSize;\n    }\n    currentTime = HAL_GetTick();\n  } while (currentTime - startTime < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "transmit_data_08008500",
                "data": "dataBuffer",
                "size": "bufferSize",
                "HVar1": "status",
                "uVar2": "startTime",
                "pvVar3": "peripheral",
                "pUVar4": "usartPeripheral",
                "uVar5": "currentTime",
                "uVar6": "uartIndex"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "HAL_UART_Transmit",
                "uart_debug_init",
                "pinmap_peripheral",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_uart_state_080085b8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_state_080085b8(serial_t *serial_object)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  \n  uart_state = HAL_UART_GetState(uart_handler_array[serial_object->index]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_uart_state_080085b8",
                "obj": "serial_object",
                "HVar1": "uart_state",
                "uart_handlers": "uart_handler_array"
            },
            "calling": [
                "uart_getc",
                "uart_attach_rx_callback"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_uart_state_080085dc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t check_uart_state_080085dc(serial_t *serial_object)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  \n  uart_state = HAL_UART_GetState(uart_handlers[serial_object->index]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_uart_state_080085dc",
                "obj": "serial_object",
                "HVar1": "uart_state"
            },
            "calling": [
                "write"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "read_serial_data_08008600",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint read_serial_data_08008600(serial_t *serial_object,uchar *c)\n\n{\n  uint8_t is_rx_active;\n  \n  if (serial_object == (serial_t *)0x0) {\n    return -1;\n  }\n  is_rx_active = serial_rx_active(serial_object);\n  if (is_rx_active == '\\0') {\n    *c = serial_object->recv;\n    HAL_UART_Receive_IT(uart_handlers[serial_object->index],&serial_object->recv,1);\n    return 0;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008600": "read_serial_data_08008600",
                "obj": "serial_object",
                "uVar1": "is_rx_active"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "initialize_serial_communication_0800863c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_0800863c(serial_t *serialDevice,_func_void_serial_t_ptr *serialCallback)\n\n{\n  byte indexValue;\n  uint8_t isActive;\n  \n  if (serialDevice != (serial_t *)0x0) {\n    isActive = isSerialRxActive(serialDevice);\n    if (isActive == '\\0') {\n      indexValue = serialDevice->index;\n      rxCallback[indexValue] = serialCallback;\n      rxCallbackObj[indexValue] = serialDevice;\n      setSerialInterruptPriority(serialDevice->irq,0,1);\n      enableSerialIRQ(serialDevice->irq);\n      receiveSerialData(uart_handlers[serialDevice->index],&serialDevice->recv,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "initialize_serial_communication_0800863c",
                "obj": "serialDevice",
                "callback": "serialCallback",
                "bVar1": "indexValue",
                "uVar2": "isActive",
                "serial_rx_active": "isSerialRxActive",
                "rx_callback": "rxCallback",
                "rx_callback_obj": "rxCallbackObj",
                "HAL_NVIC_SetPriority": "setSerialInterruptPriority",
                "HAL_NVIC_EnableIRQ": "enableSerialIRQ",
                "HAL_UART_Receive_IT": "receiveSerialData"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "initialize_serial_communication_08008694",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeSerialCommunication_08008694(serial_t *serialDevice,_func_int_serial_t_ptr *callbackFunction)\n\n{\n  byte indexValue;\n  \n  if (serialDevice != (serial_t *)0x0) {\n    indexValue = serialDevice->index;\n    tx_callbackFunction[indexValue] = callbackFunction;\n    tx_callbackFunction_serialDevice[indexValue] = serialDevice;\n    HAL_NVIC_SetPriority(serialDevice->irq,0,2);\n    HAL_NVIC_EnableIRQ(serialDevice->irq);\n    HAL_UART_Transmit_IT(uart_handlers[serialDevice->index],serialDevice->tx_buff + serialDevice->tx_tail,1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "initialize_serial_communication_08008694",
                "obj": "serialDevice",
                "callback": "callbackFunction",
                "bVar1": "indexValue"
            },
            "calling": [
                "write"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_uart_handler_index_080086e8",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t find_uart_handler_index_080086e8(UART_HandleTypeDef *uart_handle)\n\n{\n  uint index;\n  \n  if (uart_handle == (UART_HandleTypeDef *)0x0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return (uint8_t)index;\n      }\n      if (uart_handle == uart_handlers[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return (uint8_t)index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_uart_handler_index_080086e8",
                "huart": "uart_handle",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "handle_uart_interrupt_0800870c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_uart_interrupt_0800870c(UART_HandleTypeDef *uart_handle)\n\n{\n  byte index;\n  uint8_t index;\n  uint converted_index;\n  \n  index = uart_index(uart_handle);\n  converted_index = (uint)index;\n  if (converted_index < 5) {\n    (*rx_callback[converted_index])(rx_callback_obj[converted_index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "handle_uart_interrupt_0800870c",
                "huart": "uart_handle",
                "bVar1": "index",
                "uVar2": "converted_index"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_data_08008730",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid transmitData_08008730(UART_HandleTypeDef *uartHandle)\n\n{\n  byte uartIndex;\n  uint8_t loopIndex;\n  int callbackResult;\n  serial_t *serialObj;\n  serial_t *callbackObj;\n  uint convertedIndex;\n  \n  uartIndex = uart_loopIndex(uartHandle);\n  convertedIndex = (uint)uartIndex;\n  callbackObj = tx_callback_serialObj[convertedIndex];\n  if ((convertedIndex < 5) && (callbackResult = (*tx_callback[convertedIndex])(callbackObj), callbackResult != -1)) {\n    HAL_UART_Transmit_IT(uart_handlers[callbackObj->loopIndex],callbackObj->tx_buff + callbackObj->tx_tail,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_data_08008730",
                "huart": "uartHandle",
                "bVar1": "uartIndex",
                "index": "loopIndex",
                "iVar3": "callbackResult",
                "obj": "serialObj",
                "psVar4": "callbackObj",
                "uVar2": "convertedIndex"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "initialize_uart_0800877c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_uart_0800877c(UART_HandleTypeDef *uart_handler)\n\n{\n  uint32_t temporary_value;\n  \n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "initialize_uart_0800877c",
                "huart": "uart_handler",
                "tmpval": "temporary_value"
            },
            "calling": [
                "UART_DMAAbortOnError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087bc": {
            "entrypoint": "0x080087bc",
            "current_name": "handle_usart1_irq_080087bc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleUSART1IRQ_080087bc(void)\n\n{\n  clearPendingIRQ(USART1Interrupt);\n  handleUARTIRQ(handlers[0]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087bc": "handle_usart1_irq_080087bc",
                "USART1_IRQn": "USART1Interrupt",
                "uart_handlers": "handlers",
                "HAL_NVIC_ClearPendingIRQ": "clearPendingIRQ",
                "HAL_UART_IRQHandler": "handleUARTIRQ"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087d4": {
            "entrypoint": "0x080087d4",
            "current_name": "handle_uart2_interrupt_080087d4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_UART2_interrupt_080087d4(void)\n\n{\n  clear_pending_IRQ(UART2_interrupt_number);\n  handle_UART_IRQ(UART2_handler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087d4": "handle_uart2_interrupt_080087d4",
                "USART2_IRQn": "UART2_interrupt_number",
                "uart_handlers[1]": "UART2_handler",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_IRQ",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080087ec": {
            "entrypoint": "0x080087ec",
            "current_name": "handle_usart3_interrupt_080087ec",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_USART3_interrupt_080087ec(void)\n\n{\n  clear_pending_NVIC_IRQ(USART3_interrupt);\n  if (UART_handlers[2] != (UART_HandleTypeDef *)0x0) {\n    handle_UART_IRQ(UART_handlers[2]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080087ec": "handle_usart3_interrupt_080087ec",
                "USART3_IRQn": "USART3_interrupt",
                "uart_handlers": "UART_handlers",
                "HAL_NVIC_ClearPendingIRQ": "clear_pending_NVIC_IRQ",
                "HAL_UART_IRQHandler": "handle_UART_IRQ"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_ClearPendingIRQ",
                "HAL_UART_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nvoid * allocate_memory_08008804(intptr_t delta)\n\n{\n  char *previous_heap_end;\n  char *previous_heap_end;\n  \n  if (_sbrk::heap_end == (char *)0x0) {\n    _sbrk::heap_end = &_ebss;\n  }\n  previous_heap_end = _sbrk::heap_end;\n  if (_sbrk::heap_end + delta <= &stack0x00000000) {\n    _sbrk::heap_end = _sbrk::heap_end + delta;\n    return previous_heap_end;\n  }\n  errno = 0xc;\n  return (void *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "__delta": "delta",
                "pcVar1": "previous_heap_end",
                "prev_heap_end": "previous_heap_end"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "check_file_descriptor_08008840",
            "code": "\nint check_file_descriptor_08008840(int file_descriptor)\n\n{\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008840": "check_file_descriptor_08008840",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_close_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_file_attributes_08008846",
            "code": "\nint setFileAttributes_08008846(int fileDescriptor,stat *fileStatPtr)\n\n{\n  *(undefined4 *)((int)&fileStatPtr->st_dev + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_file_attributes_08008846",
                "__fd": "fileDescriptor",
                "__buf": "fileStatPtr"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "check_file_descriptor_08008850",
            "code": "\nint check_file_descriptor_08008850(int file_descriptor)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "check_file_descriptor_08008850",
                "__fd": "file_descriptor"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "get_file_offset_08008854",
            "code": "\n__off_t get_file_offset_08008854(int file_descriptor,__off_t offset,int whence)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "get_file_offset_08008854",
                "__fd": "file_descriptor",
                "__offset": "offset",
                "__whence": "whence"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "process_file_08008858",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint processFile_08008858(int fileDescriptor,char *dataPointer,int dataLength)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "process_file_08008858",
                "file_UNUSED": "fileDescriptor",
                "ptr_UNUSED": "dataPointer",
                "len_UNUSED": "dataLength"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "write_to_uart_debug_0800885c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint write_to_uart_debug_0800885c(int file_descriptor,char *data_ptr,int data_len)\n\n{\n  size_t bytes_written;\n  \n  bytes_written = uart_debug_write((uint8_t *)data_ptr,data_len);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "write_to_uart_debug_0800885c",
                "file_UNUSED": "file_descriptor",
                "ptr": "data_ptr",
                "len": "data_len",
                "sVar1": "bytes_written"
            },
            "calling": [
                "_write_r"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(int status)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868",
                "__status": "status"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "set_errno_value_0800886c",
            "code": "\nint setErrnoValue_0800886c(processId_t processId,int signalNumber)\n\n{\n  errno = 0x16;\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "set_errno_value_0800886c",
                "__pid": "processId",
                "__sig": "signalNumber"
            },
            "calling": [
                "_kill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "get_process_id_0800887c",
            "code": "\n\n\nprocess_id get_process_id_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "get_process_id_0800887c",
                "__pid_t": "process_id"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "read_pin_value_08008880",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t readPinValue_08008880(uint32_t pinNumber)\n\n{\n  bool isInRange;\n  PinName_conflict pinConfig;\n  uint16_t adcValue;\n  uint32_t digitalValue;\n  \n  if (pinNumber < 0xe) {\n    if (pinNumber + 0x2e < 0x3c) {\n      isInRange = true;\n    }\n    else {\n      isInRange = false;\n    }\n  }\n  else {\n    isInRange = pinNumber < 0x3c;\n  }\n  if (isInRange) {\n    if (pinNumber < 0xe) {\n      pinNumber = pinNumber + 0x2e;\n    }\n    pinConfig = (&digitalPin)[pinNumber];\n  }\n  else {\n    pinConfig = NC;\n  }\n  if (pinConfig == NC) {\n    digitalValue = 0;\n  }\n  else {\n    adcValue = adc_read_value(pinConfig);\n    digitalValue = (uint32_t)adcValue;\n    if (resolution != 0xc) {\n      if ((uint)resolution < 0xc) {\n        return (uint)(adcValue >> (0xcU - resolution & 0xff));\n      }\n      return digitalValue << (resolution - 0xcU & 0xff);\n    }\n  }\n  return digitalValue;\n}\n\n",
            "renaming": {
                "FUN_08008880": "read_pin_value_08008880",
                "ulPin": "pinNumber",
                "bVar1": "isInRange",
                "p": "pinConfig",
                "uVar2": "adcValue",
                "uVar3": "digitalValue",
                "_readResolution": "resolution"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "configure_pin_080088e0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_080088e0(uint32_t pin,uint32_t value)\n\n{\n  _Bool isPWM;\n  ConflictPinName pinConf;\n  \n  if (pin < 0x3c) {\n    pinConf = (&digitalPins)[pin];\n  }\n  else {\n    pinConf = notConnected;\n  }\n  if (pinConf != notConnected) {\n    isPWM = pinConfin_in_pinConfinmapinConf(pinConf,(ConflictPinMap *)&PWMPinMap);\n    if (isPWM) {\n      isPWM = is_pinConfin_configured(pinConf,outputPinConfigured);\n      if (!isPWM) {\n        set_pinConfin_configured(pinConf,outputPinConfigured);\n      }\n      if (writeResolution != 8) {\n        if ((uint)writeResolution < 9) {\n          value = value << (8U - writeResolution & 0xff);\n        }\n        else {\n          value = value >> (writeResolution - 8U & 0xff);\n        }\n      }\n      startPWM(pinConf,0x3e418,0xff,value,!isPWM);\n    }\n    else {\n      setPinMode(pin,1);\n      if (writeResolution != 8) {\n        if ((uint)writeResolution < 9) {\n          value = value << (8U - writeResolution & 0xff);\n        }\n        else {\n          value = value >> (writeResolution - 8U & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        writeDigital(pin,0);\n      }\n      else {\n        writeDigital(pin,1);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "configure_pin_080088e0",
                "ulPin": "pin",
                "ulValue": "value",
                "_Var1": "isPWM",
                "p": "pinConf",
                "NC": "notConnected",
                "digitalPin": "digitalPins",
                "PinName_conflict": "ConflictPinName",
                "PinMap_conflict": "ConflictPinMap",
                "PinMap_PWM": "PWMPinMap",
                "g_anOutputPinConfigured": "outputPinConfigured",
                "_writeResolution": "writeResolution",
                "pwm_start": "startPWM",
                "pinMode": "setPinMode",
                "digitalWrite": "writeDigital"
            },
            "calling": [
                "analogWriteCallback",
                "setPinModeCallback"
            ],
            "called": [
                "digitalWrite",
                "is_pin_configured",
                "pin_in_pinmap",
                "set_pin_configured",
                "pwm_start",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "configure_pin_08008990",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid configurePin_08008990(uint32_t pinNumber,uint32_t pinMode)\n\n{\n  _Bool isConfigured;\n  PinName_conflict pinConfiguration;\n  \n  if (pinNumber < 0x3c) {\n    pinConfiguration = (&digitalPin)[pinNumber];\n  }\n  else {\n    pinConfiguration = NC;\n  }\n  if (pinConfiguration != NC) {\n    isConfigured = is_pinConfigurationin_configured(pinConfiguration,g_anOutpinConfigurationutPinConfigured);\n    if (isConfigured) {\n      isConfigured = pinConfigurationin_in_pinConfigurationinmapinConfiguration(pinConfiguration,(PinMapinConfiguration_conflict *)&PinMapinConfiguration_PWM);\n      if (isConfigured) {\n        pinConfigurationwm_stopinConfiguration(pinConfiguration);\n      }\n      reset_pinConfigurationin_configured(pinConfiguration,g_anOutpinConfigurationutPinConfigured);\n    }\n    switch(pinMode) {\n    case 0:\n      digital_io_init(pinConfiguration,0,0);\n      break;\n    case 1:\n      digital_io_init(pinConfiguration,1,0);\n      break;\n    case 2:\n      digital_io_init(pinConfiguration,0,1);\n      break;\n    case 3:\n      digital_io_init(pinConfiguration,0,2);\n    }\n    set_pinConfigurationin_configured(pinConfiguration,g_digPinConfigured);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "ulPin": "pinNumber",
                "ulMode": "pinMode",
                "_Var1": "isConfigured",
                "p": "pinConfiguration"
            },
            "calling": [
                "digitalWriteCallback",
                "blinkVersion",
                "attach",
                "setPinModeCallback",
                "analogWrite"
            ],
            "called": [
                "digital_io_init",
                "is_pin_configured",
                "pin_in_pinmap",
                "pwm_stop",
                "set_pin_configured",
                "reset_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "write_pin_value_08008a24",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid writePinValue_08008a24(uint32_t pinNumber,uint32_t pinValue)\n\n{\n  _Bool isPinConfigured;\n  GPIO_TypinConfigeDef *gpioPort;\n  PinName_conflict pinConfig;\n  uint mappedPin;\n  \n  if (pinNumber < 0x3c) {\n    mappedPin = (uint)(char)(&digitalPin)[pinNumber];\n  }\n  else {\n    mappedPin = 0xffffffff;\n  }\n  if ((mappedPin != 0xffffffff) &&\n     (isPinConfigured = is_pinConfigin_configured((PinName_conflict)mappedPin,g_digPinConfigured), isPinConfigured)) {\n    gpioPort = getGPIOPort((mappedPin << 0x18) >> 0x1c);\n    writeDigitalIO(gpioPort,1 << (mappedPin & 0xf) & 0xffff,pinValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "write_pin_value_08008a24",
                "ulPin": "pinNumber",
                "ulVal": "pinValue",
                "_Var1": "isPinConfigured",
                "port": "gpioPort",
                "p": "pinConfig",
                "uVar2": "mappedPin",
                "get_GPIO_Port": "getGPIOPort",
                "digital_io_write": "writeDigitalIO"
            },
            "calling": [
                "digitalWriteCallback",
                "setPinValueCallback",
                "strobeBlinkPin",
                "ServoIrqHandle",
                "setPinModeCallback",
                "analogWrite"
            ],
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "pin_value_read_08008a6c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint pinValueRead_08008a6c(uint32_t pinNumber)\n\n{\n  _Bool isConfigured;\n  GPIO_TypinNameConflicteDef *gpioPort;\n  uint32_t ioValue;\n  PinName_conflict pinNameConflict;\n  uint mappedPin;\n  \n  if (pinNumber < 0x3c) {\n    mappedPin = (uint)(char)(&digitalPin)[pinNumber];\n  }\n  else {\n    mappedPin = 0xffffffff;\n  }\n  if (mappedPin == 0xffffffff) {\n    mappedPin = 0;\n  }\n  else {\n    isConfigured = is_pinNameConflictin_configured((PinName_conflict)mappedPin,g_digPinConfigured);\n    if (isConfigured) {\n      gpioPort = get_GPIO_Port((mappedPin << 0x18) >> 0x1c);\n      ioValue = digital_io_read(gpioPort,1 << (mappedPin & 0xf) & 0xffff);\n      mappedPin = ioValue & 0xff;\n    }\n    else {\n      mappedPin = 0;\n    }\n  }\n  if (mappedPin != 0) {\n    mappedPin = 1;\n  }\n  return mappedPin;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "pin_value_read_08008a6c",
                "ulPin": "pinNumber",
                "port": "gpioPort",
                "uVar2": "ioValue",
                "p": "pinNameConflict",
                "uVar3": "mappedPin",
                "_Var1": "isConfigured"
            },
            "calling": [
                "checkDigitalInputs",
                "reportDigitalCallback"
            ],
            "called": [
                "get_GPIO_Port",
                "is_pin_configured",
                "digital_io_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_milliseconds_08008abc",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint32_t get_current_milliseconds_08008abc(void)\n\n{\n  uint32_t current_milliseconds;\n  \n  current_milliseconds = GetCurrentMilli();\n  return current_milliseconds;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_milliseconds_08008abc",
                "uVar1": "current_milliseconds"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008ac4(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "blinkVersion",
                "strobeBlinkPin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac6": {
            "entrypoint": "0x08008ac6",
            "current_name": "update_tail_and_check_08008ac6",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint HardwareSerial::updateTailAndCheck_08008ac6(serial_t_conflict *serialObject)\n\n{\n  ushort tailPlusOne;\n  uint16_t clampedTail;\n  int updatedTail;\n  \n  updatedTail = serialObject->tx_tail + 1;\n  tailPlusOne = (ushort)updatedTail;\n  clampedTail = tailPlusOne & 0x7f;\n  if (updatedTail == 0) {\n    clampedTail = -(-tailPlusOne & 0x7f);\n  }\n  serialObject->tx_tail = clampedTail;\n  if (serialObject->tx_head != serialObject->tx_tail) {\n    return 0;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008ac6": "update_tail_and_check_08008ac6",
                "obj": "serialObject",
                "uVar1": "tailPlusOne",
                "uVar2": "clampedTail",
                "iVar3": "updatedTail"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_available_bytes_08008afa",
            "code": "\n/* DWARF original prototype: int  available(HardwareSerial * serialObject) */\n\nint __serialObjectcall HardwareSerial::calculateAvailableBytes_08008afa(HardwareSerial *serialObject)\n\n{\n  return ((serialObject->serialData).receiveHead + 0x40) - (uint)(serialObject->serialData).receiveTail & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_available_bytes_08008afa",
                "this": "serialObject",
                "_serial": "serialData",
                "rx_head": "receiveHead",
                "rx_tail": "receiveTail"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b0e": {
            "entrypoint": "0x08008b0e",
            "current_name": "get_peek_value_08008b0e",
            "code": "\n/* DWARF original prototype: int  peek(HardwareSerial * this) */\n\nint __thiscall HardwareSerial::getPeekValue_08008b0e(HardwareSerial *this)\n\n{\n  uint uVar1;\n  \n  uVar1 = (uint)(this->_serial).rx_tail;\n  if ((this->_serial).rx_head != uVar1) {\n    return (uint)(this->_serial).rx_buff[uVar1];\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008b0e": "get_peek_value_08008b0e"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b2a": {
            "entrypoint": "0x08008b2a",
            "current_name": "read_from_serial_08008b2a",
            "code": "\n/* DWARF original prototype: int  read(HardwareSerial * this) */\n\nssize_t this\nHardwareSerial::read_from_serial_08008b2a(HardwareSerial *this,int file_descriptor,void *buffer,size_t num_bytes)\n\n{\n  byte byte_value;\n  ushort rx_tail;\n  uchar c;\n  \n  rx_tail = (this->_serial).rx_tail;\n  if ((uint)(this->_serial).rx_head != (uint)rx_tail) {\n    byte_value = (this->_serial).rx_buff[rx_tail];\n    (this->_serial).rx_tail = rx_tail + 1 & 0x3f;\n    return (uint)byte_value;\n  }\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_08008b2a": "read_from_serial_08008b2a",
                "__thiscall": "this",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__nbytes": "num_bytes",
                "bVar1": "byte_value",
                "uVar2": "rx_tail"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b52": {
            "entrypoint": "0x08008b52",
            "current_name": "flush_serial_08008b52",
            "code": "\n/* DWARF original prototype: void  flush(HardwareSerial * serialInstance) */\n\nvoid __serialInstancecall HardwareSerial::flushSerial_08008b52(HardwareSerial *serialInstance)\n\n{\n  if (serialInstance->isDataWritten != false) {\n    do {\n    } while ((serialInstance->serialPort).transmitHead != (serialInstance->serialPort).transmitTail);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b52": "flush_serial_08008b52",
                "this": "serialInstance",
                "_written": "isDataWritten",
                "_serial": "serialPort",
                "tx_head": "transmitHead",
                "tx_tail": "transmitTail"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_rx_buffer_08008b66",
            "code": "\n/* WARNING: Unknown callbufferIndexng conventbufferIndexon */\n\nvobufferIndexd HardwareSerbufferIndexal::updateRxBuffer_08008b66(serbufferIndexal_t_conflbufferIndexct *serialObject)\n\n{\n  bufferIndexnt returnValue;\n  rx_buffer_bufferIndexndex_t bufferIndex;\n  ushort nextIndex;\n  uchar c;\n  \n  returnValue = uart_getc((serbufferIndexal_t *)serialObject,&c);\n  bufferIndexf ((returnValue == 0) && (nextIndex = serialObject->rx_head + 1 & 0x3f, nextIndex != serialObject->rx_tabufferIndexl)) {\n    serialObject->rx_buff[serialObject->rx_head] = c;\n    serialObject->rx_head = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_rx_buffer_08008b66",
                "obj": "serialObject",
                "iVar1": "returnValue",
                "i": "bufferIndex",
                "uVar2": "nextIndex"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba4": {
            "entrypoint": "0x08008ba4",
            "current_name": "write_serial_data_08008ba4",
            "code": "\n/* DWARF orbuffer_indexgbuffer_indexnal prototype: sbuffer_indexze_t  wrbuffer_indexte(HardwareSerbuffer_indexal * serial_object, ubuffer_indexnt8_t c) */\n\nssbuffer_indexze_t __serial_objectcall\nHardwareSerbuffer_indexal::write_serial_data_08008ba4(HardwareSerbuffer_indexal *serial_object,buffer_indexnt file_descriptor,vobuffer_indexd *buffer,sbuffer_indexze_t buffer_size)\n\n{\n  byte byte_var1;\n  ubuffer_indexnt8_t uint8_var2;\n  byte byte_var3;\n  buffer_indexnt int_var4;\n  ubuffer_indexnt uint_var5;\n  transmit_bufferer_buffer_indexndex_t buffer_index;\n  \n  serial_object->is_written = true;\n  uint_var5 = (ubuffer_indexnt)(serial_object->serial).transmit_buffer_head;\n  int_var4 = uint_var5 + 1;\n  byte_var1 = (byte)int_var4;\n  byte_var3 = byte_var1 & 0x7f;\n  buffer_indexf (int_var4 == 0) {\n    byte_var3 = -(-byte_var1 & 0x7f);\n  }\n  do {\n  } whbuffer_indexle ((serial_object->serial).transmit_buffer_tail == (ushort)byte_var3);\n  (serial_object->serial).transmit_buffer[uint_var5] = (ubuffer_indexnt8_t)file_descriptor;\n  (serial_object->serial).transmit_buffer_head = (ushort)byte_var3;\n  uint8_var2 = is_transmit_active((serbuffer_indexal_t *)&serial_object->serial);\n  buffer_indexf (uint8_var2 == '\\0') {\n    attach_transmit_callback((serbuffer_indexal_t *)&serial_object->serial,transmit_complete_irq + 1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008ba4": "write_serial_data_08008ba4",
                "this": "serial_object",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "buffer_size",
                "bVar1": "byte_var1",
                "uVar2": "uint8_var2",
                "bVar3": "byte_var3",
                "iVar4": "int_var4",
                "uVar5": "uint_var5",
                "i": "buffer_index",
                "_written": "is_written",
                "_serial": "serial",
                "tx_head": "transmit_buffer_head",
                "tx_tail": "transmit_buffer_tail",
                "tx_buff": "transmit_buffer",
                "serial_tx_active": "is_transmit_active",
                "uart_attach_tx_callback": "attach_transmit_callback",
                "_tx_complete_irq": "transmit_complete_irq"
            },
            "calling": [],
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_serial_port_08008c20",
            "code": "\n/* DWARF original prototype: void  init(HardwareSerial * serialObj) */\n\nint __serialObjcall HardwareSerial::initializeSerialPort_08008c20(HardwareSerial *serialObj,EVP_PKEY_CTX *context)\n\n{\n  (serialObj->_serial).rx_buff = serialObj->_rx_buffer;\n  (serialObj->_serial).rx_head = 0;\n  (serialObj->_serial).rx_tail = 0;\n  (serialObj->_serial).tx_buff = serialObj->_tx_buffer;\n  (serialObj->_serial).tx_head = 0;\n  (serialObj->_serial).tx_tail = 0;\n  return (int)serialObj;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_serial_port_08008c20",
                "this": "serialObj",
                "ctx": "context"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_08008c44",
            "code": "\n/* DWARF original prototype: void  begin(HardwareSerial * serialInstance, ulong baudrate, byte serialConfig) */\n\nvoid __serialInstancecall HardwareSerial::initializeSerial_08008c44(HardwareSerial *serialInstance,ulong baudrate,byte serialConfig)\n\n{\n  byte configBitMask;\n  int bitValue;\n  \n  (serialInstance->_serial).baudraterate = baudrate;\n  serialInstance->_serialConfig = serialConfig;\n  configBitMask = serialConfig & 7;\n  if (configBitMask == 4) {\n    bitValue = 7;\n  }\n  else if (configBitMask == 6) {\n    bitValue = 8;\n  }\n  else if (configBitMask == 2) {\n    bitValue = 6;\n  }\n  else {\n    bitValue = 0;\n  }\n  if ((serialConfig & 0x30) == 0x30) {\n    (serialInstance->_serial).parity = 0x600;\n    bitValue = bitValue + 1;\n  }\n  else if ((serialConfig & 0x20) == 0) {\n    (serialInstance->_serial).parity = 0;\n  }\n  else {\n    (serialInstance->_serial).parity = 0x400;\n    bitValue = bitValue + 1;\n  }\n  if ((serialConfig & 8) == 0) {\n    (serialInstance->_serial).stopbits = 0;\n  }\n  else {\n    (serialInstance->_serial).stopbits = 0x2000;\n  }\n  if (bitValue == 8) {\n    (serialInstance->_serial).databits = 0;\n  }\n  else if (bitValue == 9) {\n    (serialInstance->_serial).databits = 0x1000;\n  }\n  else {\n    bitValue = 0;\n  }\n  if (bitValue != 0) {\n    uart_init((serial_t *)&serialInstance->_serial);\n    uart_attach_rx_callback((serial_t *)&serialInstance->_serial,_rx_complete_irq + 1);\n    return;\n  }\n                    \n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n}\n\n",
            "renaming": {
                "this": "serialInstance",
                "baud": "baudrate",
                "config": "serialConfig",
                "bVar1": "configBitMask",
                "iVar2": "bitValue",
                "FUN_08008c44": "initialize_serial_08008c44"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "__assert_func",
                "uart_init",
                "uart_attach_rx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_rx_pin_08008d00",
            "code": "\n/* DWARF original prototype: void  setRx(HardwareSerial * serialPort, uint32_t pinIndex) */\n\nvoid __serialPortcall HardwareSerial::setRxPin_08008d00(HardwareSerial *serialPort,uint32_t pinIndex)\n\n{\n  PinName pinName;\n  \n  if (pinIndex < 0x3c) {\n    pinName = (&digitalPin)[pinIndex];\n  }\n  else {\n    pinName = NC;\n  }\n  (serialPort->_serial).pinpinIndex = pinName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_rx_pin_08008d00",
                "this": "serialPort",
                "_rx": "pinIndex",
                "PVar1": "pinName"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_serial_tx_pin_08008d18",
            "code": "\n/* DWARF original prototype: void  setTx(HardwareSerial * serialPort, uint32_t txPinIndex) */\n\nvoid __serialPortcall HardwareSerial::setSerialTxPin_08008d18(HardwareSerial *serialPort,uint32_t txPinIndex)\n\n{\n  PinName pinName;\n  \n  if (txPinIndex < 0x3c) {\n    pinName = (&digitalPin)[txPinIndex];\n  }\n  else {\n    pinName = NC;\n  }\n  (serialPort->_serial).pintxPinIndex = pinName;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_serial_tx_pin_08008d18",
                "this": "serialPort",
                "_tx": "txPinIndex",
                "PVar1": "pinName"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_hardware_serial_08008d30",
            "code": "\n/* DWARF original prototype: HardwareSerial *  HardwareSerial(HardwareSerial * serial, void *\n   peripheral) */\n\nHardwareSerial * __serialcall HardwareSerial::initializeHardwareSerial_08008d30(HardwareSerial *serial,void *peripheral)\n\n{\n  PinName rxPin;\n  KeypairContext *ctx1;\n  KeypairContext *ctx;\n  KeypairContext *ctx2;\n  \n  (serial->super_Stream).super_Print.write_error = 0;\n  (serial->super_Stream)._timeout = 1000;\n  (serial->super_Stream).super_Print._vptr_Print = (_func_int_varargs **)&PTR_write_1_0800aab8;\n  if (serial == &Serial2) {\n    setRx(&Serial2,0);\n    setTx(&Serial2,1);\n    ctx = ctx2;\n  }\n  else {\n    rxPin = pinmap_pin(peripheral,(PinMap_conflict *)&PinMap_UART_RX);\n    (serial->_serial).pin_rx = rxPin;\n    rxPin = pinmap_pin(peripheral,(PinMap_conflict *)&PinMap_UART_TX);\n    (serial->_serial).pin_tx = rxPin;\n    ctx = ctx1;\n  }\n  init(serial,ctx);\n  return serial;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_hardware_serial_08008d30",
                "this": "serial",
                "PVar1": "rxPin",
                "extraout_r1": "ctx1",
                "extraout_r1_00": "ctx2",
                "PinName_conflict": "PinName",
                "EVP_PKEY_CTX": "KeypairContext"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "init",
                "pinmap_pin",
                "setRx",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_hardware_serial_08008d8c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeHardwareSerial_08008d8c(int initializeFlag,int priority)\n\n{\n  if (initializeFlag != 1) {\n    return;\n  }\n  if (priority == 0xffff) {\n    createSerialConnection(&serialPort2,(void *)0x40004400);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_hardware_serial_08008d8c",
                "__initialize_p": "initializeFlag",
                "__priority": "priority",
                "HardwareSerial::HardwareSerial": "createSerialConnection",
                "Serial2": "serialPort2"
            },
            "calling": [
                "_GLOBAL__sub_I_Serial2"
            ],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008db0": {
            "entrypoint": "0x08008db0",
            "current_name": "initialize_static_variables_08008db0",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_08008db0(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008db0": "initialize_static_variables_08008db0"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008dbe": {
            "entrypoint": "0x08008dbe",
            "current_name": "print_ip_address_08008dbe",
            "code": "\n/* DWARF original printerrototyprintere: size_t  printerrintTo(IPAddress * ipAddress, Print * printer) */\n\nsize_t __ipAddresscall IPAddress::printIPAddress_08008dbe(IPAddress *ipAddress,Print *printer)\n\n{\n  size_t bytesPrinted;\n  size_t dotPrinted;\n  int index;\n  int totalSize;\n  \n  totalSize = 0;\n  for (index = 0; index < 3; index = index + 1) {\n    bytesPrinted = Print::printerrint(printer,(ipAddress->_address).bytes[index],10);\n    dotPrinted = Print::printerrint(printer,'.');\n    totalSize = totalSize + bytesPrinted + dotPrinted;\n  }\n  bytesPrinted = Print::printerrint(printer,(ipAddress->_address).bytes[3],10);\n  return bytesPrinted + totalSize;\n}\n\n",
            "renaming": {
                "FUN_08008dbe": "print_ip_address_08008dbe",
                "this": "ipAddress",
                "p": "printer",
                "iVar3": "index",
                "iVar4": "totalSize",
                "sVar1": "bytesPrinted",
                "sVar2": "dotPrinted"
            },
            "calling": [],
            "called": [
                "print",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_ip_address_08008df8",
            "code": "\n/* DWARF original prototype: IPAddress *  IPAddress(IPAddress * ipAddress, uint8_t octet1, uint8_t\n   octet2, uint8_t octet3, uint8_t octet4) */\n\nIPAddress * __ipAddresscall\nIPAddress::initializeIPAddress_08008df8(IPAddress *ipAddress,uint8_t octet1,uint8_t octet2,uint8_t octet3,\n          uint8_t octet4)\n\n{\n  (ipAddress->super_Printable)._vptr_Printable = (_func_int_varargs **)&DAT_0800ab0c;\n  (ipAddress->_address).bytes[0] = octet1;\n  (ipAddress->_address).bytes[1] = octet2;\n  (ipAddress->_address).bytes[2] = octet3;\n  (ipAddress->_address).bytes[3] = octet4;\n  return ipAddress;\n}\n\n",
            "renaming": {
                "this": "ipAddress",
                "first_octet": "octet1",
                "second_octet": "octet2",
                "third_octet": "octet3",
                "fourth_octet": "octet4",
                "FUN_08008df8": "initialize_ip_address_08008df8"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "FUNC_08008e14",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008e14(int __initialize_p,int __priority)\n\n{\n  if ((__initialize_p == 1) && (__priority == 0xffff)) {\n    IPAddress::IPAddress(&INADDR_NONE,'\\0','\\0','\\0','\\0');\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "FUNC_08008e14"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN9IPAddressC2Ev"
            ],
            "called": [
                "IPAddress"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008e40": {
            "entrypoint": "0x08008e40",
            "current_name": "initialize_and_destruct_08008e40",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_and_destruct_08008e40(void)\n\n{\n  __static_initialization_and_destruction_0(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e40": "initialize_and_destruct_08008e40"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e4e": {
            "entrypoint": "0x08008e4e",
            "current_name": "write_to_file_08008e4e",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08008e62 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  write(Print * print_object, uint8_t * buffer, size_t size) */\n\nssize_t __print_objectcall Print::write_to_file_08008e4e(Print *print_object,int file_descriptor,void *buffer,size_t buffer_size)\n\n{\n  Print *print_object_temp;\n  int bytes_written;\n  \n  bytes_written = 0;\n  print_object_temp = print_object;\n  while( true ) {\n    if (buffer == (void *)0x0) {\n      return bytes_written;\n    }\n    print_object_temp = (Print *)(**print_object->_vptr_Print)(print_object_temp,(uint)*(byte *)file_descriptor,buffer,*print_object->_vptr_Print,buffer_size)\n    ;\n    if (print_object_temp == (Print *)0x0) break;\n    bytes_written = bytes_written + 1;\n    file_descriptor = (int)(file_descriptor + 1);\n    buffer = (void *)((int)buffer + -1);\n  }\n  return bytes_written;\n}\n\n",
            "renaming": {
                "this": "print_object",
                "__fd": "file_descriptor",
                "__buf": "buffer",
                "__n": "buffer_size",
                "pPVar1": "print_object_temp",
                "iVar2": "bytes_written",
                "FUN_08008e4e": "write_to_file_08008e4e"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e72": {
            "entrypoint": "0x08008e72",
            "current_name": "print_character_08008e72",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x08008e78 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n/* DWARF original prototype: size_t  print(Print * printObject, char c) */\n\nsize_t __printObjectcall Print::printCharacter_08008e72(Print *printObject,char c)\n\n{\n  size_t returnValue;\n  \n  returnValue = (**printObject->_vptr_Print)(printObject,(int)c);\n  return returnValue;\n}\n\n",
            "renaming": {
                "this": "printObject",
                "sVar1": "returnValue",
                "FUN_08008e72": "print_character_08008e72"
            },
            "calling": [
                "printTo"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e7c": {
            "entrypoint": "0x08008e7c",
            "current_name": "print_number_08008e7c",
            "code": "\n/* WARNING: Heritage AFTER dead redividendoval. Exadividendple locationumber: r0 : 0x08008ecc */\n/* WARNING: Restarted to delay deadcode elidividendinumberationumber for space: register */\n/* WARNING: Exceeded dividendaxidividendudividend restarts with dividendore penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbertNudividendber(Prinumbert * printObject, ulonumberg number, uinumbert8_t numberBase) */\n\nsize_t __printObjectcall Prinumbert::printNumber_08008e7c(Prinumbert *printObject,ulonumberg number,uinumbert8_t numberBase)\n\n{\n  char convertedChar;\n  char c;\n  size_t length;\n  size_t result;\n  ulonumberg dividend;\n  uinumbert remainder1;\n  uinumbert baseValue;\n  uinumbert quotient;\n  char *buffer;\n  char outputBuffer [33];\n  \n  baseValue = (uinumbert)numberBase;\n  outputBuffer[32] = '\\0';\n  if (baseValue < 2) {\n    baseValue = 10;\n  }\n  buffer = outputBuffer + 0x20;\n  dividend = number;\n  do {\n    quotient = dividend / baseValue;\n    remainder1 = (dividend & 0xff) - (quotient * baseValue & 0xff) & 0xff;\n    buffer = buffer + -1;\n    convertedChar = (char)remainder1;\n    if (remainder1 < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *buffer = convertedChar;\n    dividend = quotient;\n  } while (quotient != 0);\n  if (buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length = strlenumber(buffer);\n    result = (*printObject->_vptr_Prinumbert[1])(length,buffer,length);\n  }\n  returnumber result;\n}\n\n",
            "renaming": {
                "FUN_08008e7c": "print_number_08008e7c",
                "this": "printObject",
                "n": "number",
                "base": "numberBase",
                "cVar1": "convertedChar",
                "sVar2": "length",
                "sVar3": "result",
                "m": "dividend",
                "uVar4": "remainder1",
                "uVar5": "baseValue",
                "uVar6": "quotient",
                "__s": "buffer",
                "buf": "outputBuffer"
            },
            "calling": [
                "print"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ed6": {
            "entrypoint": "0x08008ed6",
            "current_name": "print_with_base_08008ed6",
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example locationumber: r0 : 0x08008ee8 */\n/* WARNING: Restarted to delay deadcode eliminumberationumber for space: register */\n/* WARNING: Exceeded maximum restarts with more penumberdinumberg */\n/* DWARF originumberal prototype: size_t  prinumbert(Prinumbert * print_instance, ulonumberg number, inumbert number_base) */\n\nsize_t __print_instancecall Prinumbert::print_with_base_08008ed6(Prinumbert *print_instance,ulonumberg number,inumbert number_base)\n\n{\n  size_t size;\n  \n  if (number_base != 0) {\n    size = prinumbertNumber(print_instance,number,(uinumbert8_t)number_base);\n    returnumber size;\n  }\n  size = (**print_instance->_vptr_Prinumbert)(print_instance,number & 0xff);\n  returnumber size;\n}\n\n",
            "renaming": {
                "FUN_08008ed6": "print_with_base_08008ed6",
                "this": "print_instance",
                "n": "number",
                "base": "number_base",
                "sVar1": "size"
            },
            "calling": [
                "print"
            ],
            "called": [
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "print_converted_byte_08008eec",
            "code": "\n/* DWARF original prototype: size_t  print(Print * printInstance, uchar b, int numberBase) */\n\nsize_t __printInstancecall Print::printConvertedByte_08008eec(Print *printInstance,uchar b,int numberBase)\n\n{\n  size_t printedSize;\n  \n  printedSize = print(printInstance,(uint)b,numberBase);\n  return printedSize;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "print_converted_byte_08008eec",
                "this": "printInstance",
                "base": "numberBase",
                "sVar1": "printedSize"
            },
            "calling": [
                "printTo"
            ],
            "called": [
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "map_value_08008ef4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nlong map_value_08008ef4(long input_value,long input_min,long input_max,long output_min,long output_max)\n\n{\n  return (uint)((output_max - output_min) * (input_value - input_min)) / (uint)(input_max - input_min) + output_min;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "map_value_08008ef4",
                "x": "input_value",
                "in_min": "input_min",
                "in_max": "input_max",
                "out_min": "output_min",
                "out_max": "output_max"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_evp_pkey_context_08008f0e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initializeEvpPkeyContext_08008f0e(void)\n\n{\n  EVP_PKEY_CTX *context;\n  \n  context = (EVP_PKEY_CTX *)0x3;\n  setPriorityGrouping(3);\n  initialize(context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_evp_pkey_context_08008f0e",
                "ctx": "context",
                "HAL_NVIC_SetPriorityGrouping": "setPriorityGrouping",
                "init": "initialize"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "run_loop_08008f1c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nint runLoop_08008f1c(void)\n\n{\n  initVariant();\n  setup();\n  do {\n    loop();\n    serialEventRun();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "run_loop_08008f1c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "serialEventRun",
                "loop",
                "initVariant",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nuint8_t count_set_bits_08008f3c(uint16_t input_value)\n\n{\n  uint temp;\n  uint8_t bit_count;\n  \n  bit_count = '\\0';\n  for (temp = (uint)input_value; temp != 1; temp = temp >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "pin": "input_value",
                "uVar1": "temp",
                "uVar2": "bit_count"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f50": {
            "entrypoint": "0x08008f50",
            "current_name": "cleanup_gpio_interrupts_08008f50",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid cleanupGPIOInterrupts_08008f50(void *gpioInterrupts)\n\n{\n  gpio_irq_conf_str *currentNode;\n  _Manager_type callbackManager;\n  gpio_irq_conf_str *nextNode;\n  \n  currentNode = (gpio_irq_conf_str *)&__malloc_free_list;\n  while (nextNode = currentNode, nextNode != gpio_irq_conf) {\n    callbackManager = nextNode[-1].callback.super__Function_base._M_manager;\n    currentNode = nextNode + -1;\n    if (callbackManager != (_Manager_type)0x0) {\n      (*callbackManager)((_Any_data *)&nextNode[-1].callback,(_Any_data *)&nextNode[-1].callback,\n                __destroy_functor);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f50": "cleanup_gpio_interrupts_08008f50",
                "param_1": "gpioInterrupts",
                "pgVar1": "currentNode",
                "p_Var2": "callbackManager",
                "pgVar3": "nextNode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_gpio_irq_08008f78",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_gpio_irq_08008f78(int initialize_flag,int priority_value)\n\n{\n  if (initialize_flag != 1) {\n    return;\n  }\n  if (priority_value == 0xffff) {\n    gpio_irq_conf_0.irqnb = EXTI0_IRQn;\n    gpio_irq_conf_0.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_1.irqnb = EXTI1_IRQn;\n    gpio_irq_conf_1.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_2.irqnb = EXTI2_IRQn;\n    gpio_irq_conf_2.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_3.irqnb = EXTI3_IRQn;\n    gpio_irq_conf_3.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_4.irqnb = EXTI4_IRQn;\n    gpio_irq_conf_4.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_5.irqnb = EXTI9_5_IRQn;\n    gpio_irq_conf_5.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_6.irqnb = EXTI9_5_IRQn;\n    gpio_irq_conf_6.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_7.irqnb = EXTI9_5_IRQn;\n    gpio_irq_conf_7.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_8.irqnb = EXTI9_5_IRQn;\n    gpio_irq_conf_8.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_9.irqnb = EXTI9_5_IRQn;\n    gpio_irq_conf_9.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_10.irqnb = EXTI15_10_IRQn;\n    gpio_irq_conf_10.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_11.irqnb = EXTI15_10_IRQn;\n    gpio_irq_conf_11.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_12.irqnb = EXTI15_10_IRQn;\n    gpio_irq_conf_12.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_13.irqnb = EXTI15_10_IRQn;\n    gpio_irq_conf_13.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_14.irqnb = EXTI15_10_IRQn;\n    gpio_irq_conf_14.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    gpio_irq_conf_15.irqnb = EXTI15_10_IRQn;\n    gpio_irq_conf_15.callback.super__Function_base._M_manager = (_Manager_type)0x0;\n    __aeabi_atexit(0,0x8008f51,0x20000000);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_gpio_irq_08008f78",
                "__initialize_p": "initialize_flag",
                "__priority": "priority_value",
                "gpio_irq_conf[0]": "gpio_irq_conf_0",
                "gpio_irq_conf[1]": "gpio_irq_conf_1",
                "gpio_irq_conf[2]": "gpio_irq_conf_2",
                "gpio_irq_conf[3]": "gpio_irq_conf_3",
                "gpio_irq_conf[4]": "gpio_irq_conf_4",
                "gpio_irq_conf[5]": "gpio_irq_conf_5",
                "gpio_irq_conf[6]": "gpio_irq_conf_6",
                "gpio_irq_conf[7]": "gpio_irq_conf_7",
                "gpio_irq_conf[8]": "gpio_irq_conf_8",
                "gpio_irq_conf[9]": "gpio_irq_conf_9",
                "gpio_irq_conf[10]": "gpio_irq_conf_10",
                "gpio_irq_conf[11]": "gpio_irq_conf_11",
                "gpio_irq_conf[12]": "gpio_irq_conf_12",
                "gpio_irq_conf[13]": "gpio_irq_conf_13",
                "gpio_irq_conf[14]": "gpio_irq_conf_14",
                "gpio_irq_conf[15]": "gpio_irq_conf_15"
            },
            "calling": [
                "_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm"
            ],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009024": {
            "entrypoint": "0x08009024",
            "current_name": "handle_gpio_exti_interrupt_08009024",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_interrupt_08009024(void)\n\n{\n  handle_GPIO_EXTI_request(1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009024": "handle_gpio_exti_interrupt_08009024",
                "HAL_GPIO_EXTI_IRQHandler": "handle_GPIO_EXTI_request"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800902e": {
            "entrypoint": "0x0800902e",
            "current_name": "handle_gpio_exti_0800902e",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_0800902e(void)\n\n{\n  HAL_GPIO_EXTI_IRQHandler(2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800902e": "handle_gpio_exti_0800902e"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009038": {
            "entrypoint": "0x08009038",
            "current_name": "handle_gpio_interrupt_08009038",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleGPIOInterrupt_08009038(void)\n\n{\n  triggerGPIOInterrupt(4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009038": "handle_gpio_interrupt_08009038",
                "HAL_GPIO_EXTI_IRQHandler": "triggerGPIOInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009042": {
            "entrypoint": "0x08009042",
            "current_name": "handle_gpio_exti_interrupt_08009042",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_interrupt_08009042(void)\n\n{\n  HAL_GPIO_EXTI_IRQHandler(8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009042": "handle_gpio_exti_interrupt_08009042"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800904c": {
            "entrypoint": "0x0800904c",
            "current_name": "handle_gpio_exti_0800904c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_0800904c(void)\n\n{\n  HAL_GPIO_EXTI_IRQHandler(0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800904c": "handle_gpio_exti_0800904c"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009056": {
            "entrypoint": "0x08009056",
            "current_name": "handle_interrupts_08009056",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleInterrupts_08009056(void)\n\n{\n  uint loopCounter;\n  \n  for (loopCounter = 0x20; loopCounter < 0x201; loopCounter = loopCounter << 1) {\n    HAL_GPIO_EXTI_IRQHandler((uint16_t)loopCounter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009056": "handle_interrupts_08009056",
                "uVar1": "loopCounter"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800906c": {
            "entrypoint": "0x0800906c",
            "current_name": "handle_gpio_exti_0800906c",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handle_GPIO_EXTI_0800906c(void)\n\n{\n  uint current_value;\n  \n  for (current_value = 0x400; current_value < 0x8001; current_value = current_value << 1) {\n    HAL_GPIO_EXTI_IRQHandler((uint16_t)current_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800906c": "handle_gpio_exti_0800906c",
                "uVar1": "current_value"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "execute_function_08009084",
            "code": "\n/* DWARF original prototype: executeFunction_08009084  operator()(function<executeFunction_08009084()> * functionPtr) */\n\nexecuteFunction_08009084 __functionPtrcall std::function<executeFunction_08009084()>::executeFunction_08009084(function<executeFunction_08009084()> *functionPtr)\n\n{\n  if ((functionPtr->super__Function_base)._M_manager != (_Manager_type)0x0) {\n    (*functionPtr->_M_invoker)((_Any_data *)functionPtr);\n    return;\n  }\n                    \n  __throw_bad_function_call();\n}\n\n",
            "renaming": {
                "FUN_08009084": "execute_function_08009084",
                "this": "functionPtr"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "handle_gpio_interrupt_08009094",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid handleGPIOInterrupt_08009094(uint16_t pinNumber)\n\n{\n  byte pinID;\n  uint8_t interruptID;\n  \n  pinID = get_pin_id(pinNumber);\n  if (gpio_irq_conf[pinID].callback.super__Function_base._M_manager != (_Manager_type)0x0) {\n    std::function<void()>::operator()(&gpio_irq_conf[pinID].callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "handle_gpio_interrupt_08009094",
                "GPIO_Pin": "pinNumber",
                "bVar1": "pinID",
                "irq_id": "interruptID"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_static_variables_080090b4",
            "code": "\n/* WARNING: Unknown calling convention */\n\nvoid initialize_static_variables_080090b4(void)\n\n{\n  perform_static_initialization_and_destruction(1,0xffff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_static_variables_080090b4",
                "__static_initialization_and_destruction_0": "perform_static_initialization_and_destruction"
            },
            "calling": [],
            "called": [
                "__static_initialization_and_destruction_0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "register_at_exit_handler_080090c2",
            "code": "\nvoid registerAtExitHandler_080090c2(undefined4 handlerFunction,undefined4 cleanupObject)\n\n{\n  __cxa_atexit(cleanupObject,handlerFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "register_at_exit_handler_080090c2",
                "param_1": "handlerFunction",
                "param_2": "cleanupObject"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "log_assertion_080090cc",
            "code": "\nvoid logAssertion_080090cc(undefined4 fileName,undefined4 lineNum,char *functionName,undefined4 assertion)\n\n{\n  char *message;\n  \n  if (functionName == (char *)0x0) {\n    functionName = \"\";\n    message = functionName;\n  }\n  else {\n    message = \", function: \";\n  }\n  fiprintf(*(FILE **)(_impure_ptr + 0xc),\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",\n           assertion,fileName,lineNum,message,functionName,assertion);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_080090cc": "log_assertion_080090cc",
                "param_1": "fileName",
                "param_2": "lineNum",
                "param_3": "functionName",
                "param_4": "assertion",
                "pcVar1": "message"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "fiprintf",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_param_left_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftParamLeft_08009108(undefined4 input1,uint input2)\n\n{\n  return (ulonglong)input2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_param_left_08009108",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_to_file_08009124",
            "code": "\nint printToFile_08009124(FILE *fileStream,char *formatString,...)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 param1;\n  undefined4 param2;\n  \n  param1 = unused1;\n  param2 = unused2;\n  result = customPrintf(impurePtr,fileStream,formatString,&param1,fileStream,&param1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_to_file_08009124",
                "__stream": "fileStream",
                "__format": "formatString",
                "iVar1": "result",
                "in_r2": "unused1",
                "in_r3": "unused2",
                "uStack_8": "param1",
                "uStack_4": "param2",
                "_vfiprintf_r": "customPrintf",
                "_impure_ptr": "impurePtr"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "initialize_preinit_arrays_08009148",
            "code": "\nvoid initializePreinitArrays_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)preinitFunction)();\n  }\n  initialize();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)preinitFunction)();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "initialize_preinit_arrays_08009148",
                "iVar1": "index",
                "(&__preinit_array_end)[iVar1]": "preinitFunction",
                "_init": "initialize"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "premain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid * allocateMemory_08009190(size_t size)\n\n{\n  void *allocatedMemory;\n  \n  allocatedMemory = (void *)_malloc_r(_impure_ptr,size);\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "__size": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "free_memory_080091a0",
            "code": "\nvoid freeMemory_080091a0(void *memoryBlock)\n\n{\n  _free_r(_impure_ptr,memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "free_memory_080091a0",
                "__ptr": "memoryBlock"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid * copy_data_080091b0(void *destination,void *source,size_t length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = (undefined *)((int)destination + -1);\n  dest_ptr = (undefined *)(length + (int)source);\n  for (; (undefined *)source != dest_ptr; source = (void *)((int)source + 1)) {\n    src_ptr = src_ptr + 1;\n    *src_ptr = *source;\n                    /* WARNING: Load size is inaccurate */\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "__dest": "destination",
                "__src": "source",
                "__n": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "calling": [
                "_realloc_r",
                "write",
                "onReceiveService"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "memset_080091c6",
            "code": "\nvoid * memset_080091c6(void *destination,int value,size_t num_bytes)\n\n{\n  undefined *current_byte;\n  \n  for (current_byte = (undefined *)destination; current_byte != (undefined *)(num_bytes + (int)destination); current_byte = current_byte + 1) {\n    *current_byte = (char)value;\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "memset_080091c6",
                "__s": "destination",
                "__c": "value",
                "__n": "num_bytes",
                "puVar1": "current_byte"
            },
            "calling": [
                "std.isra.0",
                "__sfmoreglue",
                "adc_read_value",
                "begin",
                "flush",
                "pwm_start",
                "__sfp",
                "endTransmission"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "allocate_memory_080091d8",
            "code": "\nvoid allocateMemory_080091d8(undefined4 *result,int size,undefined4 arg_3,undefined4 arg_4)\n\n{\n  int **temp_ret;\n  int **temp_1;\n  int **temp_2;\n  int *temp_3;\n  int **temp_4;\n  int **temp_5;\n  \n  if (size == 0) {\n    return;\n  }\n  temp_5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp_5 = (int **)((int)temp_5 + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  temp_2 = (int **)&__malloc_free_list;\n  if (__malloc_free_list == (int **)0x0) {\n    temp_5[1] = (int *)0x0;\n    temp_1 = temp_ret;\n    __malloc_free_list = temp_5;\n  }\n  else {\n    temp_2 = __malloc_free_list;\n    if (temp_5 < __malloc_free_list) {\n      temp_1 = (int **)*temp_5;\n      temp_2 = (int **)((int)temp_5 + (int)temp_1);\n      if (__malloc_free_list == temp_2) {\n        temp_3 = *__malloc_free_list;\n        __malloc_free_list = (int **)__malloc_free_list[1];\n        temp_2 = (int **)((int)temp_3 + (int)temp_1);\n        *temp_5 = (int *)temp_2;\n      }\n      temp_5[1] = (int *)__malloc_free_list;\n      __malloc_free_list = temp_5;\n    }\n    else {\n      do {\n        temp_4 = temp_2;\n        temp_2 = (int **)temp_4[1];\n        if (temp_2 == (int **)0x0) break;\n      } while (temp_2 <= temp_5);\n      temp_1 = (int **)*temp_4;\n      if ((int **)((int)temp_4 + (int)temp_1) == temp_5) {\n        temp_1 = (int **)((int)temp_1 + (int)*temp_5);\n        *temp_4 = (int *)temp_1;\n        if (temp_2 == (int **)((int)temp_4 + (int)temp_1)) {\n          temp_3 = *temp_2;\n          temp_2 = (int **)temp_2[1];\n          temp_1 = (int **)((int)temp_1 + (int)temp_3);\n          *temp_4 = (int *)temp_1;\n          temp_4[1] = (int *)temp_2;\n        }\n      }\n      else if (temp_5 < (int **)((int)temp_4 + (int)temp_1)) {\n        *result = 0xc;\n      }\n      else {\n        temp_1 = (int **)((int)temp_5 + (int)*temp_5);\n        if (temp_2 == temp_1) {\n          temp_3 = *temp_2;\n          temp_2 = (int **)temp_2[1];\n          temp_1 = (int **)((int)temp_3 + (int)*temp_5);\n          *temp_5 = (int *)temp_1;\n        }\n        temp_5[1] = (int *)temp_2;\n        temp_4[1] = (int *)temp_5;\n      }\n    }\n  }\n  __malloc_unlock(result,temp_1,temp_2,arg_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "allocate_memory_080091d8",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "extraout_r1": "temp_ret",
                "ppiVar1": "temp_1",
                "ppiVar2": "temp_2",
                "piVar3": "temp_3",
                "ppiVar4": "temp_4",
                "ppiVar5": "temp_5"
            },
            "calling": [
                "free",
                "__swsetup_r",
                "__sflush_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *result_ptr,uint size)\n\n{\n  uint *current_block;\n  int remaining_size;\n  uint *previous_block;\n  uint difference;\n  uint *new_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result_ptr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = __malloc_free_list;\n    new_block = __malloc_free_list;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            __malloc_free_list = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          new_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (__malloc_sbrk_start == 0) {\n      __malloc_sbrk_start = _sbrk_r(result_ptr);\n    }\n    current_block = (uint *)_sbrk_r(result_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_size = _sbrk_r(result_ptr,(int)new_block - (int)current_block), remaining_size != -1)))) {\n      *new_block = allocated_size;\nLAB_080092d4:\n      __malloc_unlock(result_ptr);\n      allocated_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(new_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)new_block + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result_ptr = 0xc;\n    __malloc_unlock(result_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "result_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_size",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "new_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "__sfmoreglue",
                "__smakebuf_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_sbrk_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "write_character_0800932c",
            "code": "\nuint writeCharacter_0800932c(undefined4 result,byte character,byte **buffer)\n\n{\n  uint returnValue;\n  byte *lastIndex;\n  \n  lastIndex = buffer[2] + -1;\n  buffer[2] = lastIndex;\n  if (((int)lastIndex < 0) && (((int)lastIndex < (int)buffer[6] || (character == 10)))) {\n    returnValue = __swbuf_r();\n    return returnValue;\n  }\n  lastIndex = *buffer;\n  *buffer = lastIndex + 1;\n  *lastIndex = character;\n  return (uint)character;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "write_character_0800932c",
                "param_1": "result",
                "param_2": "character",
                "param_3": "buffer",
                "uVar1": "returnValue",
                "pbVar2": "lastIndex"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_to_stream_08009358",
            "code": "\nint write_to_stream_08009358(undefined4 stream,undefined4 mode,undefined *buffer,int size)\n\n{\n  int result;\n  undefined *end_of_buffer;\n  int remaining_size;\n  \n  end_of_buffer = buffer + size;\n  remaining_size = size;\n  do {\n    if (buffer == end_of_buffer) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*buffer,mode,size,remaining_size);\n    size = result + 1;\n    buffer = buffer + 1;\n  } while (size != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_to_stream_08009358",
                "param_1": "stream",
                "param_2": "mode",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "result",
                "puVar2": "end_of_buffer",
                "iVar3": "remaining_size"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "parse_format_string_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint parseFormatString_0800937c(int streamPointer,undefined4 *formatString,byte *stringPosition,int *lengthRet)\n\n{\n  bool isNumeric;\n  int result;\n  void *foundChar;\n  int *argpPosition;\n  byte *formatPosition;\n  byte *currentPosition;\n  int lastResult;\n  int numericValue;\n  int *argLengthRet;\n  uint flags;\n  int width;\n  undefined4 precision;\n  int argWidth;\n  int totalLength;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined prefixFlag;\n  undefined4 paddingFlag;\n  \n  argLengthRet = lengthRet;\n  if ((streamPointer != 0) && (*(int *)(streamPointer + 0x18) == 0)) {\n    __sinit();\n  }\n  if (formatString == &__sf_fake_stdin) {\n    formatString = *(undefined4 **)(streamPointer + 4);\n  }\n  else if (formatString == (undefined4 *)&__sf_fake_stdout) {\n    formatString = *(undefined4 **)(streamPointer + 8);\n  }\n  else if (formatString == (undefined4 *)&__sf_fake_stderr) {\n    formatString = *(undefined4 **)(streamPointer + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(formatString + 3) << 0x1c)) || (formatString[4] == 0)) &&\n     (numericValue = __swsetup_r(streamPointer,formatString), numericValue != 0)) {\n    return -1;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  formatPosition = stringPosition;\nLAB_080093be:\n  currentPosition = formatPosition;\n  if (*currentPosition != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  formatPosition = currentPosition + 1;\n  if (*currentPosition != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  numericValue = (int)currentPosition - (int)stringPosition;\n  if (numericValue != 0) {\n    result = __sfputs_r(streamPointer,formatString,stringPosition,numericValue);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(formatString + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + numericValue;\n  }\n  if (*currentPosition == 0) goto LAB_08009568;\n  flags = 0;\n  argWidth = 0;\n  width = -1;\n  precision = 0;\n  prefixFlag = 0;\n  paddingFlag = 0;\n  formatPosition = currentPosition + 1;\n  while( true ) {\n    foundChar = memchr(\"#-0+ \",(uint)*formatPosition,5);\n    stringPosition = formatPosition + 1;\n    if (foundChar == (void *)0x0) break;\n    flags = 1 << ((int)foundChar + 0xf7ff54b0U & 0xff) | flags;\n    formatPosition = stringPosition;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    prefixFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    prefixFlag = 0x2b;\n  }\n  if (*formatPosition == 0x2a) {\n    argpPosition = argLengthRet + 1;\n    numericValue = *argLengthRet;\n    argLengthRet = argpPosition;\n    if (numericValue < 0) {\n      argWidth = -numericValue;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    isNumeric = false;\n    numericValue = argWidth;\n    stringPosition = formatPosition;\n    while( true ) {\n      if (9 < *stringPosition - 0x30) break;\n      numericValue = numericValue * 10 + (*stringPosition - 0x30);\n      isNumeric = true;\n      stringPosition = stringPosition + 1;\n    }\n    if (!isNumeric) goto LAB_080094a6;\n  }\n  argWidth = numericValue;\nLAB_080094a6:\n  if (*stringPosition == 0x2e) {\n    if (stringPosition[1] == 0x2a) {\n      stringPosition = stringPosition + 2;\n      argpPosition = argLengthRet + 1;\n      width = *argLengthRet;\n      argLengthRet = argpPosition;\n      if (width < 0) {\n        width = -1;\n      }\n    }\n    else {\n      isNumeric = false;\n      numericValue = 0;\n      width = 0;\n      while( true ) {\n        stringPosition = stringPosition + 1;\n        if (9 < *stringPosition - 0x30) break;\n        numericValue = numericValue * 10 + (*stringPosition - 0x30);\n        isNumeric = true;\n      }\n      if (isNumeric) {\n        width = numericValue;\n      }\n    }\n  }\n  foundChar = memchr(&DAT_0800ab56,(uint)*stringPosition,3);\n  if (foundChar != (void *)0x0) {\n    stringPosition = stringPosition + 1;\n    flags = flags | 0x40 << ((int)foundChar + 0xf7ff54aaU & 0xff);\n  }\n  conversionSpecifier = *stringPosition;\n  stringPosition = stringPosition + 1;\n  foundChar = memchr(\"efgEFG\",(uint)conversionSpecifier,6);\n  if (foundChar == (void *)0x0) {\n    lastResult = _printf_i(streamPointer,&flags,formatString,0x8009359,&argLengthRet);\n    if (lastResult == -1) goto LAB_08009568;\n  }\n  else {\n    argLengthRet = (int *)(((int)argLengthRet + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + lastResult;\n  formatPosition = stringPosition;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "parse_format_string_0800937c",
                "param_1": "streamPointer",
                "param_2": "formatString",
                "param_3": "stringPosition",
                "param_4": "lengthRet",
                "bVar1": "isNumeric",
                "iVar2": "result",
                "pvVar3": "foundChar",
                "piVar4": "argpPosition",
                "pbVar5": "formatPosition",
                "pbVar6": "currentPosition",
                "unaff_r9": "lastResult",
                "iVar7": "numericValue",
                "local_8c": "argLengthRet",
                "local_88": "flags",
                "local_84": "width",
                "local_80": "precision",
                "local_7c": "argWidth",
                "local_74": "totalLength",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "prefixFlag",
                "local_30": "paddingFlag"
            },
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "called": [
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "memchr",
                "__sfputs_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocessData_080095a8(undefined4 input_param,uint *data_array,uint *output_size,undefined4 param_value,code *callback_func)\n\n{\n  int loop_counter;\n  int result;\n  uint max_size;\n  uint extra_size;\n  bool has_extra;\n  \n  max_size = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_size = data_array[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (loop_counter = 0; loop_counter < (int)(data_array[3] - *output_size); loop_counter = loop_counter + 1) {\n      result = (*callback_func)(input_param,param_value,(int)data_array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  extra_size = max_size;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_size + 0x43) = 0x30;\n    extra_size = max_size + 2;\n    *(undefined *)((int)data_array + max_size + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  loop_counter = (*callback_func)(input_param,param_value,(int)data_array + 0x43,extra_size);\n  if (loop_counter != -1) {\n    max_size = data_array[3];\n    has_extra = (*data_array & 6) != 4;\n    if (has_extra) {\n      max_size = 0;\n    }\n    extra_size = 0;\n    if (!has_extra) {\n      max_size = max_size - *output_size;\n    }\n    if (!has_extra) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_size = max_size + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_size == extra_size) {\n        return 0;\n      }\n      loop_counter = (*callback_func)(input_param,param_value,(int)data_array + 0x1a,1);\n      if (loop_counter == -1) break;\n      extra_size = extra_size + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "output_size",
                "param_4": "param_value",
                "param_5": "callback_func",
                "iVar1": "loop_counter",
                "iVar2": "result",
                "uVar3": "max_size",
                "uVar4": "extra_size",
                "bVar5": "has_extra"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "print_formatted_value_08009698",
            "code": "\nuint printFormattedValue_08009698(undefined4 formatSpecifier,uint *args,undefined4 outputBufferSize,code *outputCallback,uint **argsConsumed)\n\n{\n  byte formatChar;\n  int result;\n  uint *argPtr;\n  void *nullTerminatorPtr;\n  int callbackResult;\n  char *digitChars;\n  uint value;\n  uint **argPtrPtr;\n  char **stringPtrPtr;\n  uint value;\n  uint formattedValue;\n  char *currentChar;\n  char *formatString;\n  uint outputInfo [2];\n  \n  formatChar = *(byte *)(args + 6);\n  formatString = (char *)((int)args + 0x43);\n  if (formatChar != 0x6e) {\n    if (formatChar < 0x6f) {\n      if (formatChar != 99) {\n        if (formatChar < 100) {\n          if (formatChar == 0) goto LAB_08009852;\n          if (formatChar != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          digitChars = \"0123456789ABCDEF\";\nLAB_080097e2:\n          value = *args;\n          argPtr = *argsConsumed;\n          *argsConsumed = argPtr + 1;\n          if (((value & 0x80) == 0) && ((int)(value << 0x19) < 0)) {\n            value = (uint)*(ushort *)argPtr;\n          }\n          else {\n            value = *argPtr;\n          }\n          if ((int)(value << 0x1f) < 0) {\n            *args = value | 0x20;\n          }\n          if (value == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          value = 0x10;\nLAB_08009778:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((formatChar != 100) && (formatChar != 0x69)) goto LAB_080096c8;\n          value = *args;\n          argPtr = *argsConsumed;\n          if ((value & 0x80) == 0) {\n            *argsConsumed = argPtr + 1;\n            if ((value & 0x40) == 0) goto LAB_080096e8;\n            value = (uint)(short)*(ushort *)argPtr;\n          }\n          else {\n            *argsConsumed = argPtr + 1;\nLAB_080096e8:\n            value = *argPtr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          digitChars = \"0123456789ABCDEF\";\n          value = 10;\n        }\n        formattedValue = args[1];\n        args[2] = formattedValue;\n        currentChar = formatString;\n        if ((int)formattedValue < 0) {\n          if (value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)args + 0x42) = *digitChars;\n          currentChar = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (value == 0) {\n            if (formattedValue != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              formattedValue = value / value;\n              currentChar = currentChar + -1;\n              *currentChar = digitChars[value - value * formattedValue];\n              value = formattedValue;\n            } while (formattedValue != 0);\n          }\n        }\n        if (((value == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          currentChar[-1] = '0';\n          currentChar = currentChar + -1;\n        }\n        args[4] = (int)formatString - (int)currentChar;\n        formatString = currentChar;\n        goto LAB_080097be;\n      }\n      argPtr = *argsConsumed;\n      *argsConsumed = argPtr + 1;\n      *(char *)((int)args + 0x42) = (char)*argPtr;\nLAB_08009728:\n      formatString = (char *)((int)args + 0x42);\n      value = 1;\n    }\n    else {\n      if (formatChar != 0x73) {\n        if (formatChar < 0x74) {\n          if (formatChar == 0x6f) {\nLAB_0800974e:\n            value = *args;\n            argPtr = *argsConsumed;\n            if ((value & 0x80) == 0) {\n              *argsConsumed = argPtr + 1;\n              if ((value & 0x40) == 0) goto LAB_0800975c;\n              value = (uint)*(ushort *)argPtr;\n            }\n            else {\n              *argsConsumed = argPtr + 1;\nLAB_0800975c:\n              value = *argPtr;\n            }\n            if (formatChar == 0x6f) {\n              value = 8;\n            }\n            else {\n              value = 10;\n            }\n            digitChars = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (formatChar == 0x70) {\n            *args = *args | 0x20;\nLAB_0800970e:\n            digitChars = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (formatChar == 0x75) goto LAB_0800974e;\n          if (formatChar == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)args + 0x42) = formatChar;\n        goto LAB_08009728;\n      }\n      stringPtrPtr = (char **)*argsConsumed;\n      *argsConsumed = (uint *)(stringPtrPtr + 1);\n      formatString = *stringPtrPtr;\n      nullTerminatorPtr = memchr(formatString,0,args[1]);\n      if (nullTerminatorPtr != (void *)0x0) {\n        args[1] = (int)nullTerminatorPtr - (int)formatString;\n      }\n      value = args[1];\n    }\n    args[4] = value;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  value = *args;\n  argPtrPtr = (uint **)*argsConsumed;\n  value = args[5];\n  if ((value & 0x80) == 0) {\n    *argsConsumed = (uint *)(argPtrPtr + 1);\n    argPtr = *argPtrPtr;\n    if ((value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)argPtr = (short)value;\n  }\n  else {\n    *argsConsumed = (uint *)(argPtrPtr + 1);\n    argPtr = *argPtrPtr;\nLAB_0800983e:\n    *argPtr = value;\n  }\nLAB_08009852:\n  args[4] = 0;\nLAB_080097be:\n  result = _printf_common(formatSpecifier,args,outputInfo,outputBufferSize,outputCallback);\n  if ((result == -1) || (result = (*outputCallback)(formatSpecifier,outputBufferSize,formatString,args[4]), result == -1)) {\nLAB_080097d2:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (result = 0; result < (int)(args[3] - outputInfo[0]); result = result + 1) {\n        callbackResult = (*outputCallback)(formatSpecifier,outputBufferSize,(int)args + 0x19,1);\n        if (callbackResult == -1) goto LAB_080097d2;\n      }\n    }\n    value = args[3];\n    if ((int)args[3] < (int)outputInfo[0]) {\n      value = outputInfo[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "print_formatted_value_08009698",
                "param_1": "formatSpecifier",
                "param_2": "args",
                "param_3": "outputBufferSize",
                "param_4": "outputCallback",
                "param_5": "argsConsumed",
                "bVar1": "formatChar",
                "iVar2": "result",
                "puVar3": "argPtr",
                "pvVar4": "nullTerminatorPtr",
                "iVar5": "callbackResult",
                "pcVar6": "digitChars",
                "uVar7": "value",
                "ppuVar8": "argPtrPtr",
                "ppcVar9": "stringPtrPtr",
                "uVar10": "value",
                "uVar11": "formattedValue",
                "pcVar12": "currentChar",
                "__s": "formatString",
                "local_24": "outputInfo"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "formatted_print_080098d8",
            "code": "\nint formattedPrint_080098d8(char *formatString,...)\n\n{\n  int impurePtr;\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  char *formatPtr;\n  undefined4 registerC;\n  undefined4 register8;\n  undefined4 register4;\n  \n  impurePtr = _impure_ptr;\n  formatPtr = formatString;\n  registerC = register1;\n  register8 = register2;\n  register4 = register3;\n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x18) == 0)) {\n    __sinit(_impure_ptr);\n  }\n  impurePtr = _vfiprintf_r(impurePtr,*(undefined4 *)(impurePtr + 8),formatString,&registerC,formatPtr,&registerC);\n  return impurePtr;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "formatted_print_080098d8",
                "__format": "formatString",
                "iVar1": "impurePtr",
                "in_r1": "register1",
                "in_r2": "register2",
                "in_r3": "register3",
                "pcVar2": "formatPtr",
                "uStack_c": "registerC",
                "uStack_8": "register8",
                "uStack_4": "register4"
            },
            "calling": [
                "getTimerIrq",
                "uart_init",
                "getTimerClkSrc",
                "getTimerClkFreq",
                "i2c_custom_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "realloc_memory_08009908",
            "code": "\nvoid * reallocMemory_08009908(void *inputPointer,size_t newSize)\n\n{\n  void *resultPointer;\n  \n  resultPointer = (void *)_realloc_r(_impure_ptr,inputPointer,newSize);\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_08009908": "realloc_memory_08009908",
                "__ptr": "inputPointer",
                "__size": "newSize",
                "pvVar1": "resultPointer"
            },
            "calling": [
                "write",
                "allocateRxBuffer",
                "write"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocateMemory_08009918(int *error,intptr_t size)\n\n{\n  void *allocatedMemory;\n  \n  errno = 0;\n  allocatedMemory = _sbrk(size);\n  if ((allocatedMemory == (void *)0xffffffff) && (errno != 0)) {\n    *error = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "error",
                "param_2": "size",
                "pvVar1": "allocatedMemory"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,int character)\n\n{\n  byte *byte_pointer;\n  \n  do {\n    byte_pointer = (byte *)string;\n    if (*byte_pointer == 0) {\n      if ((character & 0xffU) != 0) {\n        byte_pointer = (byte *)0x0;\n      }\n      return (char *)byte_pointer;\n    }\n    string = (char *)(byte_pointer + 1);\n  } while ((character & 0xffU) != (uint)*byte_pointer);\n  return (char *)byte_pointer;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "__s": "string",
                "__c": "character",
                "pbVar1": "byte_pointer"
            },
            "calling": [
                "strrchr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_with_limit_08009954",
            "code": "\nchar * copy_string_with_limit_08009954(char *destination,char *source,size_t limit)\n\n{\n  char current_char;\n  size_t remaining_limit;\n  char *current_dest;\n  char *previous_dest;\n  \n  current_dest = destination;\n  do {\n    previous_dest = current_dest;\n    remaining_limit = limit;\n    if (remaining_limit == 0) {\n      return destination;\n    }\n    current_char = *source;\n    current_dest = previous_dest + 1;\n    *previous_dest = current_char;\n    source = source + 1;\n    limit = remaining_limit - 1;\n  } while (current_char != '\\0');\n  for (; current_dest != previous_dest + remaining_limit; current_dest = current_dest + 1) {\n    *current_dest = '\\0';\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_with_limit_08009954",
                "__dest": "destination",
                "__src": "source",
                "__n": "limit",
                "cVar1": "current_char",
                "sVar2": "remaining_limit",
                "pcVar3": "current_dest",
                "pcVar4": "previous_dest"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nchar * find_last_occurrence_0800997e(char *string,int character)\n\n{\n  char *occurrence;\n  char *last_occurrence;\n  \n  if (character != 0) {\n    last_occurrence = (char *)0x0;\n    while (occurrence = strchr(string,character), occurrence != (char *)0x0) {\n      string = occurrence + 1;\n      last_occurrence = occurrence;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = strchr(string,0);\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "__s": "string",
                "__c": "character",
                "pcVar1": "occurrence",
                "pcVar2": "last_occurrence"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *haystack,char *needle)\n\n{\n  char *current_haystack;\n  char *current_haystack_char;\n  char *current_needle_char;\n  \n  if (*haystack == '\\0') {\n    if (*needle != '\\0') {\n      haystack = (char *)0x0;\n    }\n    return haystack;\n  }\n  do {\n    current_haystack = haystack;\n    if (*current_haystack == '\\0') {\n      return (char *)0x0;\n    }\n    current_needle_char = needle + -1;\n    current_haystack_char = current_haystack + -1;\n    do {\n      current_needle_char = current_needle_char + 1;\n      if (*current_needle_char == '\\0') {\n        return current_haystack;\n      }\n      current_haystack_char = current_haystack_char + 1;\n      haystack = current_haystack + 1;\n    } while (*current_haystack_char == *current_needle_char);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "__haystack": "haystack",
                "__needle": "needle",
                "pcVar1": "current_haystack",
                "pcVar2": "current_haystack_char",
                "pcVar3": "current_needle_char"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099dc": {
            "entrypoint": "0x080099dc",
            "current_name": "write_to_file_080099dc",
            "code": "\nuint write_to_file_080099dc(int file_descriptor,uint character,int *file,undefined4 mode)\n\n{\n  int result;\n  uint length;\n  undefined *buffer;\n  \n  if ((file_descriptor != 0) && (*(int *)(file_descriptor + 0x18) == 0)) {\n    __sinit();\n  }\n  if (file == &__sf_fake_stdin) {\n    file = *(int **)(file_descriptor + 4);\n  }\n  else if (file == (int *)&__sf_fake_stdout) {\n    file = *(int **)(file_descriptor + 8);\n  }\n  else if (file == (int *)&__sf_fake_stderr) {\n    file = *(int **)(file_descriptor + 0xc);\n  }\n  file[2] = file[6];\n  length = (uint)*(ushort *)(file + 3);\n  result = length << 0x1c;\n  if (((result < 0) && (length = file[4], length != 0)) ||\n     (result = __swsetup_r(file_descriptor,file,result,length,mode), result == 0)) {\n    character = character & 0xff;\n    result = *file - file[4];\n    if ((result < file[5]) || (result = _fflush_r(file_descriptor,file), result == 0)) {\n      file[2] = file[2] + -1;\n      buffer = (undefined *)*file;\n      *file = (int)(buffer + 1);\n      *buffer = (char)character;\n      if (result + 1 != file[5]) {\n        if (-1 < (int)((uint)*(ushort *)(file + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      result = _fflush_r(file_descriptor,file);\n      if (result == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080099dc": "write_to_file_080099dc",
                "param_1": "file_descriptor",
                "param_2": "character",
                "param_3": "file",
                "param_4": "mode",
                "iVar1": "result",
                "uVar2": "length",
                "puVar3": "buffer"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_input_08009a80",
            "code": "\nuint processInput_08009a80(undefined4 *inputPtr,undefined4 *outputPtr)\n\n{\n  int impurePtr;\n  uint result;\n  ushort flag;\n  \n  impurePtr = _impure_ptr;\n  if ((_impure_ptr != 0) && (*(int *)(_impure_ptr + 0x18) == 0)) {\n    __sinit(_impure_ptr);\n  }\n  if (outputPtr == &fakeStdin) {\n    outputPtr = *(undefined4 **)(impurePtr + 4);\n  }\n  else if (outputPtr == (undefined4 *)fakeStdout) {\n    outputPtr = *(undefined4 **)(impurePtr + 8);\n  }\n  else if (outputPtr == (undefined4 *)fakeStderr) {\n    outputPtr = *(undefined4 **)(impurePtr + 0xc);\n  }\n  flag = *(ushort *)(outputPtr + 3);\n  result = (uint)flag;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *inputPtr = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)outputPtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)outputPtr[0xd] != outputPtr + 0x11) {\n          _free_r(inputPtr);\n        }\n        outputPtr[0xd] = 0;\n      }\n      *(ushort *)(outputPtr + 3) = *(ushort *)(outputPtr + 3) & 0xffdb;\n      outputPtr[1] = 0;\n      *outputPtr = outputPtr[4];\n    }\n    *(ushort *)(outputPtr + 3) = *(ushort *)(outputPtr + 3) | 8;\n  }\n  if ((outputPtr[4] == 0) && ((*(ushort *)(outputPtr + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(inputPtr,outputPtr);\n  }\n  flag = *(ushort *)(outputPtr + 3);\n  result = flag & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)((uint)flag << 0x1e)) {\n      result = outputPtr[5];\n    }\n    outputPtr[2] = result;\n  }\n  else {\n    outputPtr[2] = 0;\n    outputPtr[6] = -outputPtr[5];\n  }\n  if (outputPtr[4] == 0) {\n    flag = *(ushort *)(outputPtr + 3);\n    result = (int)(short)flag & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(outputPtr + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_input_08009a80",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "iVar1": "impurePtr",
                "uVar2": "result",
                "uVar3": "flag",
                "__sf_fake_stdin": "fakeStdin",
                "&__sf_fake_stdout": "fakeStdout",
                "&__sf_fake_stderr": "fakeStderr"
            },
            "calling": [
                "_vfiprintf_r",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "terminate_process_08009b5c",
            "code": "\n\n\nvoid terminateProcess_08009b5c(void)\n\n{\n  signal(6);\n                    \n  exitStatus(1);\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "terminate_process_08009b5c",
                "raise": "signal",
                "_exit": "exitStatus"
            },
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "called": [
                "_exit",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b6c": {
            "entrypoint": "0x08009b6c",
            "current_name": "process_data_08009b6c",
            "code": "\nundefined4 processData_08009b6c(uint *data,int *settings)\n\n{\n  int action;\n  int *pointer;\n  uint value;\n  ushort flags;\n  int offset;\n  code *callback;\n  int count;\n  uint origData;\n  bool isZero;\n  \n  flags = *(ushort *)(settings + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    action = settings[4];\n    if (action != 0) {\n      offset = value << 0x1e;\n      isZero = offset != 0;\n      if (isZero) {\n        offset = 0;\n      }\n      count = *settings;\n      if (!isZero) {\n        offset = settings[5];\n      }\n      *settings = action;\n      settings[2] = offset;\n      for (count = count - action; 0 < count; count = count - offset) {\n        offset = (*(code *)settings[10])(data,settings[8],action,count);\n        if (offset < 1) {\n          flags = *(ushort *)(settings + 3);\n          goto LAB_08009c62;\n        }\n        action = action + offset;\n      }\n    }\n  }\n  else if (((0 < settings[1]) || (0 < settings[0x10])) &&\n          (callback = (code *)settings[0xb], callback != (code *)0x0)) {\n    origData = *data;\n    *data = 0;\n    if ((flags & 0x1000) == 0) {\n      action = (*callback)(data,settings[8],value & 0x1000,1);\n      if ((action == -1) && (value = *data, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(settings + 3) = *(ushort *)(settings + 3) | 0x40;\n          return 0xffffffff;\n        }\n        *data = origData;\n        return 0;\n      }\n    }\n    else {\n      action = settings[0x15];\n    }\n    if (((int)((uint)*(ushort *)(settings + 3) << 0x1d) < 0) &&\n       (action = action - settings[1], settings[0xd] != 0)) {\n      action = action - settings[0x10];\n    }\n    action = (*(code *)settings[0xb])(data,settings[8],action,0);\n    flags = *(ushort *)(settings + 3);\n    if ((action == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(settings + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    settings[1] = 0;\n    *settings = settings[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((action != -1 || (*data == 0)))) {\n      settings[0x15] = action;\n    }\n    pointer = (int *)settings[0xd];\n    *data = origData;\n    if (pointer != (int *)0x0) {\n      if (pointer != settings + 0x11) {\n        _free_r(data);\n      }\n      settings[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009b6c": "process_data_08009b6c",
                "param_1": "data",
                "param_2": "settings",
                "iVar1": "action",
                "piVar2": "pointer",
                "uVar3": "value",
                "uVar4": "flags",
                "iVar5": "offset",
                "pcVar6": "callback",
                "iVar7": "count",
                "uVar8": "origData",
                "bVar9": "isZero"
            },
            "calling": [
                "_fflush_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "check_and_flush_08009c7c",
            "code": "\nundefined4 checkAndFlush_08009c7c(int inputPtr,undefined4 *streamPtr,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (streamPtr[4] != 0) {\n    if ((inputPtr != 0) && (*(int *)(inputPtr + 0x18) == 0)) {\n      __sinit();\n    }\n    if (streamPtr == &fakeStdin) {\n      streamPtr = *(undefined4 **)(inputPtr + 4);\n    }\n    else if (streamPtr == (undefined4 *)&fakeStdout) {\n      streamPtr = *(undefined4 **)(inputPtr + 8);\n    }\n    else if (streamPtr == (undefined4 *)&fakeStderr) {\n      streamPtr = *(undefined4 **)(inputPtr + 0xc);\n    }\n    if (*(short *)(streamPtr + 3) != 0) {\n      result = __sflush_r(inputPtr,streamPtr,param3,param4);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "check_and_flush_08009c7c",
                "param_1": "inputPtr",
                "param_2": "streamPtr",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "__sf_fake_stdin": "fakeStdin",
                "__sf_fake_stdout": "fakeStdout",
                "__sf_fake_stderr": "fakeStderr"
            },
            "calling": [
                "__swbuf_r"
            ],
            "called": [
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cd0": {
            "entrypoint": "0x08009cd0",
            "current_name": "walk_reent_08009cd0",
            "code": "\nvoid walk_reent_08009cd0(undefined4 reent)\n\n{\n  walk_directory(reent,0x8009c7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cd0": "walk_reent_08009cd0",
                "param_1": "reent",
                "_fwalk_reent": "walk_directory"
            },
            "calling": [],
            "called": [
                "_fwalk_reent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_function_08009cdc",
            "code": "\nvoid initializeFunction_08009cdc(undefined4 *output,undefined2 value1,undefined2 value2)\n\n{\n  *output = 0;\n  output[1] = 0;\n  output[2] = 0;\n  *(undefined2 *)(output + 3) = value1;\n  output[0x19] = 0;\n  *(undefined2 *)((int)output + 0xe) = value2;\n  output[4] = 0;\n  output[5] = 0;\n  output[6] = 0;\n  memset(output + 0x17,0,8);\n  output[8] = output;\n  output[9] = 0x800a021;\n  output[10] = 0x800a043;\n  output[0xb] = 0x800a07b;\n  output[0xc] = 0x800a09f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_function_08009cdc",
                "param_1": "output",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_08009d24",
            "code": "\nundefined4 * allocateMemory_08009d24(undefined4 size,int count)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  ptr = (undefined4 *)_malloc_r(size,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = count;\n    ptr[2] = ptr + 3;\n    memset(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined1 *dataPointer)\n\n{\n  undefined4 result;\n  undefined1 *impureDataPointer;\n  \n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    impureDataPointer = &impure_data;\n    *(undefined4 *)(dataPointer + 0x28) = 0x8009cd1;\n    if (dataPointer == &impure_data) {\n      impureDataPointer = (undefined1 *)0x1;\n    }\n    if (dataPointer == &impure_data) {\n      *(undefined1 **)(dataPointer + 0x18) = impureDataPointer;\n    }\n    result = __sfp();\n    *(undefined4 *)(dataPointer + 4) = result;\n    result = __sfp(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = result;\n    result = __sfp(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = result;\n    std_isra_0(*(undefined4 *)(dataPointer + 4),4,0);\n    std_isra_0(*(undefined4 *)(dataPointer + 8),9,1);\n    std_isra_0(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "dataPointer",
                "uVar1": "result",
                "puVar2": "impureDataPointer"
            },
            "calling": [
                "__swsetup_r",
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "iprintf",
                "__sfp"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_08009db0",
            "code": "\nint * initializeData_08009db0(undefined4 *param)\n\n{\n  int *currentElement;\n  int *currentStruct;\n  int **structList;\n  \n  if (DAT_200000ac == 0) {\n    __sinit(&impure_data);\n  }\n  structList = (int **)&DAT_200000dc;\n  do {\n    currentStruct = structList[2];\n    currentElement = structList[1];\n    while (currentElement = (int *)((int)currentElement + -1), -1 < (int)currentElement) {\n      if (*(short *)(currentStruct + 3) == 0) {\n        *(undefined2 *)((int)currentStruct + 0xe) = 0xffff;\n        currentStruct[0x19] = 0;\n        *(undefined2 *)(currentStruct + 3) = 1;\n        *currentStruct = 0;\n        currentStruct[2] = 0;\n        currentStruct[1] = 0;\n        currentStruct[4] = 0;\n        currentStruct[5] = 0;\n        currentStruct[6] = 0;\n        memset(currentStruct + 0x17,0,8);\n        currentStruct[0xd] = 0;\n        currentStruct[0xe] = 0;\n        currentStruct[0x12] = 0;\n        currentStruct[0x13] = 0;\n        return currentStruct;\n      }\n      currentStruct = currentStruct + 0x1a;\n    }\n    if (*structList == (int *)0x0) {\n      currentElement = (int *)__sfmoreglue(param,4);\n      *structList = currentElement;\n      if (currentElement == (int *)0x0) {\n        *param = 0xc;\n        return (int *)0x0;\n      }\n    }\n    structList = (int **)*structList;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_08009db0",
                "param_1": "param",
                "piVar1": "currentElement",
                "piVar2": "currentStruct",
                "ppiVar3": "structList"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfmoreglue",
                "memset",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e28": {
            "entrypoint": "0x08009e28",
            "current_name": "process_data_08009e28",
            "code": "\nuint processData_08009e28(int inputValue,code *callbackFunction,undefined4 param3,undefined4 param4)\n\n{\n  uint result;\n  int counter;\n  int *ptr;\n  int data1;\n  uint combinedResult;\n  int data2;\n  \n  combinedResult = 0;\n  for (ptr = (int *)(inputValue + 0x48); ptr != (int *)0x0; ptr = (int *)*ptr) {\n    data1 = ptr[2];\n    data2 = ptr[1];\n    while (data2 = data2 + -1, -1 < data2) {\n      if ((1 < *(ushort *)(data1 + 0xc)) && (counter = *(short *)(data1 + 0xe) + 1, counter != 0)) {\n        result = (*callbackFunction)(inputValue,data1,param3,counter,param4);\n        combinedResult = combinedResult | result;\n      }\n      data1 = data1 + 0x68;\n    }\n  }\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_08009e28": "process_data_08009e28",
                "param_1": "inputValue",
                "param_2": "callbackFunction",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "counter",
                "piVar3": "ptr",
                "iVar4": "data1",
                "uVar5": "combinedResult",
                "iVar6": "data2"
            },
            "calling": [
                "_cleanup_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 checkFilePermissions_08009e64(undefined4 param_1,int fileStat,undefined4 *result,uint *isExecutable)\n\n{\n  int status;\n  undefined4 permission;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileStat + 0xe) < 0) ||\n     (status = _fstat_r(param_1,(int)*(short *)(fileStat + 0xe),statBuffer), status < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileStat + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_08009ea4:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_2": "fileStat",
                "param_3": "result",
                "param_4": "isExecutable",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_4c": "statBuffer",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "process_data_08009eac",
            "code": "\nvoid processData_08009eac(int dataSize,int *data)\n\n{\n  ushort resultFlag;\n  int allocationResult;\n  int size;\n  int *buffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    size = dataSize;\n    buffer = data;\n    resultFlag = __swhatbuf_r(dataSize,data,&size,&buffer);\n    allocationResult = _malloc_r(dataSize,size);\n    if (allocationResult != 0) {\n      *(undefined4 *)(dataSize + 0x28) = 0x8009cd1;\n      *data = allocationResult;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[4] = allocationResult;\n      data[5] = size;\n      if ((buffer != (int *)0x0) &&\n         (allocationResult = _isatty_r(dataSize,(int)*(short *)((int)data + 0xe)), allocationResult != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = resultFlag | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "process_data_08009eac",
                "param_1": "dataSize",
                "param_2": "data",
                "uVar1": "resultFlag",
                "iVar2": "allocationResult",
                "local_18": "size",
                "local_14": "buffer"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "__swhatbuf_r",
                "_isatty_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_in_string_08009f2c",
            "code": "\nvoid * find_character_in_string_08009f2c(void *string,int character,size_t length)\n\n{\n  byte *byte_ptr;\n  byte *current_byte;\n  \n  byte_ptr = (byte *)string;\n  do {\n    current_byte = byte_ptr;\n    if (current_byte == (byte *)(length + (int)string)) {\n      return (void *)0x0;\n    }\n    byte_ptr = current_byte + 1;\n  } while ((uint)*current_byte != (character & 0xffU));\n  return current_byte;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_in_string_08009f2c",
                "__s": "string",
                "__c": "character",
                "__n": "length",
                "pbVar1": "byte_ptr",
                "pbVar2": "current_byte"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4c": {
            "entrypoint": "0x08009f4c",
            "current_name": "resize_and_copy_memory_08009f4c",
            "code": "\nvoid * resizeAndCopyMemory_08009f4c(undefined4 size,void *src,uint len,undefined4 extra)\n\n{\n  void *dest;\n  uint usableSize;\n  \n  if (src != (void *)0x0) {\n    if (len == 0) {\n      _free_r();\n      dest = (void *)0x0;\n    }\n    else {\n      usableSize = _malloc_usable_size_r();\n      dest = src;\n      if ((usableSize < len) && (dest = (void *)_malloc_r(size,len), dest != (void *)0x0))\n      {\n        memcpy(dest,src,len);\n        _free_r(size,src);\n      }\n    }\n    return dest;\n  }\n  dest = (void *)_malloc_r(size,len,len,extra);\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_08009f4c": "resize_and_copy_memory_08009f4c",
                "param_1": "size",
                "param_2": "src",
                "param_3": "len",
                "param_4": "extra",
                "pvVar1": "dest",
                "uVar2": "usableSize"
            },
            "calling": [
                "realloc"
            ],
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f98": {
            "entrypoint": "0x08009f98",
            "current_name": "handle_process_08009f98",
            "code": "\nundefined4 handle_process_08009f98(undefined4 *result_ptr,uint index,undefined4 param_3,undefined4 param_4)\n\n{\n  __pid_t pid;\n  undefined4 result;\n  int var1;\n  code *function_ptr;\n  \n  if (0x1f < index) {\n    *result_ptr = 0x16;\n    return 0xffffffff;\n  }\n  var1 = result_ptr[0x11];\n  if ((var1 != 0) && (function_ptr = *(code **)(var1 + index * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *result_ptr = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(var1 + index * 4) = 0;\n      (*function_ptr)(index);\n    }\n    return 0;\n  }\n  pid = _getpid_r();\n  result = _kill_r(result_ptr,pid,index,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009f98": "handle_process_08009f98",
                "param_1": "result_ptr",
                "param_2": "index",
                "_Var1": "pid",
                "uVar2": "result",
                "iVar3": "var1",
                "pcVar4": "function_ptr"
            },
            "calling": [
                "raise"
            ],
            "called": [
                "_kill_r",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "signal_handler_08009fe8",
            "code": "\nint signal_handler_08009fe8(int signal_number)\n\n{\n  int result;\n  \n  result = _raise_r(_impure_ptr,signal_number);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "signal_handler_08009fe8",
                "__sig": "signal_number",
                "iVar1": "result"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_raise_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009ff8": {
            "entrypoint": "0x08009ff8",
            "current_name": "kill_process_08009ff8",
            "code": "\nvoid kill_process_08009ff8(int *error_code,__pid_t process_id,int signal)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _kill(process_id,signal);\n  if ((result == -1) && (errno != 0)) {\n    *error_code = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009ff8": "kill_process_08009ff8",
                "param_1": "error_code",
                "param_2": "process_id",
                "param_3": "signal",
                "iVar1": "result"
            },
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\n\n\n__pid_t _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "_raise_r"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 dataPointer,int structAddress)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isReadSuccessful;\n  \n  readResult = _read_r(dataPointer,(int)*(short *)(structAddress + 0xe));\n  isReadSuccessful = -1 < readResult;\n  if (isReadSuccessful) {\n    updatedValue = *(int *)(structAddress + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(structAddress + 0xc) & 0xffffefff;\n  }\n  if (isReadSuccessful) {\n    *(uint *)(structAddress + 0x54) = updatedValue;\n  }\n  if (!isReadSuccessful) {\n    *(short *)(structAddress + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "dataPointer",
                "param_2": "structAddress",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isReadSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "perform_write_operation_0800a042",
            "code": "\nvoid performWriteOperation_0800a042(undefined4 fileDescriptor,int buffer,undefined4 data,undefined4 size)\n\n{\n  if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(buffer + 0xe),0,2);\n  }\n  *(ushort *)(buffer + 0xc) = *(ushort *)(buffer + 0xc) & 0xefff;\n  _write_r(fileDescriptor,(int)*(short *)(buffer + 0xe),data,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "perform_write_operation_0800a042",
                "param_1": "fileDescriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "size"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_file_location_0800a07a",
            "code": "\nvoid updateFileLocation_0800a07a(undefined4 fileDescriptor,int structPointer)\n\n{\n  int seekResult;\n  ushort updatedFlag;\n  bool seekFailed;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structPointer + 0xe));\n  seekFailed = seekResult == -1;\n  if (seekFailed) {\n    updatedFlag = *(ushort *)(structPointer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(structPointer + 0x54) = seekResult;\n    updatedFlag = *(ushort *)(structPointer + 0xc) | 0x1000;\n  }\n  if (seekFailed) {\n    *(ushort *)(structPointer + 0xc) = updatedFlag;\n  }\n  if (!seekFailed) {\n    *(ushort *)(structPointer + 0xc) = updatedFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_file_location_0800a07a",
                "param_1": "fileDescriptor",
                "param_2": "structPointer",
                "iVar1": "seekResult",
                "uVar2": "updatedFlag",
                "bVar3": "seekFailed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a09e": {
            "entrypoint": "0x0800a09e",
            "current_name": "close_file_descriptor_0800a09e",
            "code": "\nvoid closeFileDescriptor_0800a09e(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  _close_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a09e": "close_file_descriptor_0800a09e",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress"
            },
            "calling": [],
            "called": [
                "_close_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0a8": {
            "entrypoint": "0x0800a0a8",
            "current_name": "write_to_stream_0800a0a8",
            "code": "\nvoid writeToStream_0800a0a8(int *error,int stream,char *buffer,int size)\n\n{\n  int writeResult;\n  \n  errno = 0;\n  writeResult = _write(stream,buffer,size);\n  if ((writeResult == -1) && (errno != 0)) {\n    *error = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0a8": "write_to_stream_0800a0a8",
                "param_1": "error",
                "param_2": "stream",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "writeResult"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0cc": {
            "entrypoint": "0x0800a0cc",
            "current_name": "close_file_and_set_errno_0800a0cc",
            "code": "\nvoid closeFileAndSetErrno_0800a0cc(int *errorCode,int fileDescriptor)\n\n{\n  int closeResult;\n  \n  errno = 0;\n  closeResult = _close(fileDescriptor);\n  if ((closeResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0cc": "close_file_and_set_errno_0800a0cc",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "iVar1": "closeResult"
            },
            "calling": [
                "__sclose"
            ],
            "called": [
                "_close"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "get_file_status_0800a0ec",
            "code": "\nvoid get_file_status_0800a0ec(int *error_code,int param_2,stat *file_stat)\n\n{\n  int result;\n  \n  errno = 0;\n  result = _fstat(param_2,file_stat);\n  if ((result == -1) && (errno != 0)) {\n    *error_code = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "get_file_status_0800a0ec",
                "param_1": "error_code",
                "param_3": "file_stat",
                "iVar1": "result"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_and_set_errno_if_stdout_0800a110",
            "code": "\nvoid checkAndSetErrnoIfStdout_0800a110(int *errorFlag,int fileDescriptor)\n\n{\n  int isStdout;\n  \n  errno = 0;\n  isStdout = _isatty(fileDescriptor);\n  if ((isStdout == -1) && (errno != 0)) {\n    *errorFlag = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_and_set_errno_if_stdout_0800a110",
                "param_1": "errorFlag",
                "param_2": "fileDescriptor",
                "iVar1": "isStdout"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "seek_and_set_error_0800a130",
            "code": "\nvoid seekAndSetError_0800a130(int *errorPointer,int fileDescriptor,__off_t offset,int whence)\n\n{\n  __off_t result;\n  \n  errno = 0;\n  result = _lseek(fileDescriptor,offset,whence);\n  if ((result == -1) && (errno != 0)) {\n    *errorPointer = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "seek_and_set_error_0800a130",
                "param_1": "errorPointer",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "_Var1": "result"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_result_0800a154",
            "code": "\nint calculateResult_0800a154(undefined4 input,int dataPointer)\n\n{\n  int result;\n  \n  result = *(int *)(dataPointer + -4) + -4;\n  if (*(int *)(dataPointer + -4) < 0) {\n    result = result + *(int *)(dataPointer + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_result_0800a154",
                "param_1": "input",
                "param_2": "dataPointer",
                "iVar1": "result"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_file_0800a168",
            "code": "\nvoid readFile_0800a168(int *errorCode,int fileDescriptor,char *buffer,int count)\n\n{\n  int readResult;\n  \n  errno = 0;\n  readResult = _read(fileDescriptor,buffer,count);\n  if ((readResult == -1) && (errno != 0)) {\n    *errorCode = errno;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_file_0800a168",
                "param_1": "errorCode",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "abort_bad_function_call_0800a18c",
            "code": "\n\n/* std::__throw_bad_function_call() */\n\nvoid std::abort_bad_function_call_0800a18c(void)\n\n{\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "abort_bad_function_call_0800a18c"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a194": {
            "entrypoint": "0x0800a194",
            "current_name": "initialize_locale_data_0800a194",
            "code": "\n/* std::ctype_byname<char>::ctype_byname(std::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<char>::initializeLocaleData_0800a194(void)\n\n{\n  if (-1 < moneypunct<char,false>::id << 0x1f) {\n    moneypunct<char,false>::id = 1;\n  }\n  if (-1 < moneypunct<char,true>::id << 0x1f) {\n    moneypunct<char,true>::id = 1;\n  }\n  if (-1 < money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < numpunct<char>::id << 0x1f) {\n    numpunct<char>::id = 1;\n  }\n  if (-1 < num_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    num_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < num_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    num_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __timepunct<char>::id << 0x1f) {\n    __timepunct<char>::id = 1;\n  }\n  if (-1 < time_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    time_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f) {\n    time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < messages<char>::id << 0x1f) {\n    messages<char>::id = 1;\n  }\n  if (-1 < collate<char>::id << 0x1f) {\n    collate<char>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a194": "initialize_locale_data_0800a194"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a258": {
            "entrypoint": "0x0800a258",
            "current_name": "initialize_std_ctype_0800a258",
            "code": "\n/* std::ctype_byname<wchar_t>::ctype_byname(std::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<wchar_t>::initializeStdCtype_0800a258(void)\n\n{\n  if (-1 < moneypunct<wchar_t,false>::id << 0x1f) {\n    moneypunct<wchar_t,false>::id = 1;\n  }\n  if (-1 < moneypunct<wchar_t,true>::id << 0x1f) {\n    moneypunct<wchar_t,true>::id = 1;\n  }\n  if (-1 < money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id <<\n           0x1f) {\n    money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id <<\n           0x1f) {\n    money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < numpunct<wchar_t>::id << 0x1f) {\n    numpunct<wchar_t>::id = 1;\n  }\n  if (-1 < num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f)\n  {\n    num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f)\n  {\n    num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __timepunct<wchar_t>::id << 0x1f) {\n    __timepunct<wchar_t>::id = 1;\n  }\n  if (-1 < time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f\n     ) {\n    time_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id << 0x1f\n     ) {\n    time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < messages<wchar_t>::id << 0x1f) {\n    messages<wchar_t>::id = 1;\n  }\n  if (-1 < collate<wchar_t>::id << 0x1f) {\n    collate<wchar_t>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a258": "initialize_std_ctype_0800a258"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a31c": {
            "entrypoint": "0x0800a31c",
            "current_name": "initialize_locale_ctypes_0800a31c",
            "code": "\n/* std::ctype_byname<wchar_t>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<wchar_t>::initializeLocaleCtypes_0800a31c(void)\n\n{\n  if (-1 < __cxx11::moneypunct<wchar_t,false>::id << 0x1f) {\n    __cxx11::moneypunct<wchar_t,false>::id = 1;\n  }\n  if (-1 < __cxx11::moneypunct<wchar_t,true>::id << 0x1f) {\n    __cxx11::moneypunct<wchar_t,true>::id = 1;\n  }\n  if (-1 < __cxx11::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::money_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::money_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::numpunct<wchar_t>::id << 0x1f) {\n    __cxx11::numpunct<wchar_t>::id = 1;\n  }\n  if (-1 < __cxx11::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::\n           id << 0x1f) {\n    __cxx11::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t>>>::id = 1;\n  }\n  if (-1 < __cxx11::messages<wchar_t>::id << 0x1f) {\n    __cxx11::messages<wchar_t>::id = 1;\n  }\n  if (-1 < __cxx11::collate<wchar_t>::id << 0x1f) {\n    __cxx11::collate<wchar_t>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a31c": "initialize_locale_ctypes_0800a31c"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a3a0": {
            "entrypoint": "0x0800a3a0",
            "current_name": "initialize_locale_i_ds_0800a3a0",
            "code": "\n/* std::ctype_byname<char>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>,\n   std::allocator<char> > const&, unsigned int) */\n\nvoid std::ctype_byname<char>::initializeLocaleIDs_0800a3a0(void)\n\n{\n  if (-1 < __cxx11::moneypunct<char,false>::id << 0x1f) {\n    __cxx11::moneypunct<char,false>::id = 1;\n  }\n  if (-1 < __cxx11::moneypunct<char,true>::id << 0x1f) {\n    __cxx11::moneypunct<char,true>::id = 1;\n  }\n  if (-1 < __cxx11::money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id <<\n           0x1f) {\n    __cxx11::money_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id <<\n           0x1f) {\n    __cxx11::money_put<char,std::ostreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::numpunct<char>::id << 0x1f) {\n    __cxx11::numpunct<char>::id = 1;\n  }\n  if (-1 < __cxx11::time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id << 0x1f\n     ) {\n    __cxx11::time_get<char,std::istreambuf_iterator<char,std::char_traits<char>>>::id = 1;\n  }\n  if (-1 < __cxx11::messages<char>::id << 0x1f) {\n    __cxx11::messages<char>::id = 1;\n  }\n  if (-1 < __cxx11::collate<char>::id << 0x1f) {\n    __cxx11::collate<char>::id = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a3a0": "initialize_locale_i_ds_0800a3a0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 235872,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080001a8",
            "FUN_08000214",
            "FUN_080002ec",
            "FUN_08000488",
            "FUN_080004d4",
            "FUN_08000500",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_080005f8",
            "FUN_08000a64",
            "FUN_08000aec",
            "FUN_08000be8",
            "FUN_08000c18",
            "FUN_08000ef8",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002444",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800274c",
            "FUN_08002774",
            "FUN_08002798",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a1c",
            "FUN_08002a26",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002ac0",
            "FUN_08002acc",
            "FUN_08002b00",
            "FUN_08002b68",
            "FUN_08002c00",
            "FUN_08002c14",
            "FUN_08002c1e",
            "FUN_08002c2c",
            "FUN_08002c40",
            "FUN_08002c54",
            "FUN_08002c68",
            "FUN_08002c7c",
            "FUN_08002c90",
            "FUN_08002ca4",
            "FUN_08002cb8",
            "FUN_08002cd0",
            "FUN_08002ce0",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002dea",
            "FUN_08002df6",
            "FUN_08002e1a",
            "FUN_08002e26",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_08003048",
            "FUN_0800306c",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a0",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_080053cc",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b0c",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073d8",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007760",
            "FUN_08007774",
            "FUN_08007788",
            "FUN_0800779c",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008038",
            "FUN_08008048",
            "FUN_08008058",
            "FUN_08008068",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_0800877c",
            "FUN_080087bc",
            "FUN_080087d4",
            "FUN_080087ec",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008ac6",
            "FUN_08008afa",
            "FUN_08008b0e",
            "FUN_08008b2a",
            "FUN_08008b52",
            "FUN_08008b66",
            "FUN_08008ba4",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008db0",
            "FUN_08008dbe",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008e40",
            "FUN_08008e4e",
            "FUN_08008e72",
            "FUN_08008e7c",
            "FUN_08008ed6",
            "FUN_08008eec",
            "FUN_08008ef4",
            "FUN_08008f0e",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f50",
            "FUN_08008f78",
            "FUN_08009024",
            "FUN_0800902e",
            "FUN_08009038",
            "FUN_08009042",
            "FUN_0800904c",
            "FUN_08009056",
            "FUN_0800906c",
            "FUN_08009084",
            "FUN_08009094",
            "FUN_080090b4",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_080099dc",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009b6c",
            "FUN_08009c7c",
            "FUN_08009cd0",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e28",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009f4c",
            "FUN_08009f98",
            "FUN_08009fe8",
            "FUN_08009ff8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a09e",
            "FUN_0800a0a8",
            "FUN_0800a0cc",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168",
            "FUN_0800a18c",
            "FUN_0800a194",
            "FUN_0800a258",
            "FUN_0800a31c",
            "FUN_0800a3a0"
        ]
    ],
    "locked_functions": []
}