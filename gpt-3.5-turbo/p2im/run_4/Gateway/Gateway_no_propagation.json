{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "execute_program_08007246",
                "FUN_08003748": "initialize_data_structures",
                "FUN_08004046": "load_configuration",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void execute_program_08007246(void)\n{\n  initialize_data_structures();\n  load_configuration();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004046",
                "FUN_08003748",
                "FUN_08007244"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "execute_program_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "output",
                "param_2": "data_ptr",
                "param_3": "input_1",
                "param_4": "input_2",
                "sVar1": "data",
                "puVar2": "flags",
                "iVar3": "result"
            },
            "code": "void process_data_0800a042(int *output, int data_ptr, int input_1, int input_2)\n{\n    short data = *(short *)(data_ptr + 0xE);\n    ushort *flags = (ushort *)(data_ptr + 0xC);\n\n    if ((int)((uint)(*flags) << 0x17) < 0)\n    {\n        FUN_0800a130(output, data, 0, 2);\n    }\n\n    *flags &= 0xEFFF;\n\n    int result = FUN_0800885c((int)data, input_1, input_2, input_2, input_2, 0, 0, 0);\n\n    if (result == -1 && *PTR_DAT_0800a0c8 != 0)\n    {\n        *output = *PTR_DAT_0800a0c8;\n    }\n}\n",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "data_address",
                "param_2": "new_data",
                "bVar1": "index",
                "PTR_DAT_080086dc": "data_array",
                "PTR_DAT_080086e0": "address_array",
                "FUN_08003f30": "update_status",
                "FUN_08003f94": "update_info",
                "FUN_0800688e": "update_flag"
            },
            "code": "void update_data_08008694(int data_address, uint32_t new_data) {\n  if (data_address != 0) {\n    uint8_t index = *(uint8_t *)(data_address + 0x44);\n    PTR_DAT_080086dc[index] = new_data;\n    PTR_DAT_080086e0[index] = data_address;\n    update_status((int)*(char *)(data_address + 0x5a));\n    update_info((int)*(char *)(data_address + 0x5a));\n    update_flag(PTR_DAT_080086dc[index], *(int *)(data_address + 100) + (uint)*(uint16_t *)(data_address + 0x6a), 1);\n  }\n}",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_data_structures_08002ce0",
                "param_1": "data_structure_start_address",
                "iVar1": "data_structure_end_address"
            },
            "code": "int initialize_data_structures_08002ce0(int data_structure_start_address)\n{\n  int data_structure_end_address;\n  FUN_0800314e(data_structure_start_address + 0x40);\n  data_structure_end_address = data_structure_start_address + 0x44;\n  FUN_080032bc(data_structure_end_address, data_structure_start_address, 0x40);\n  *(undefined *)(data_structure_start_address + 0xc4) = 0;\n  *(undefined4 *)(data_structure_start_address + 200) = 0;\n  *(undefined *)(data_structure_start_address + 0x1f8) = 0;\n  FUN_08003306(data_structure_end_address, 0xe0, PTR_FUN_08002c2c_1_08002d90, 0);\n  FUN_08003306(data_structure_end_address, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  FUN_08003306(data_structure_end_address, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  FUN_08003306(data_structure_end_address, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  FUN_08003306(data_structure_end_address, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  FUN_08003306(data_structure_end_address, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  FUN_08003366(data_structure_end_address, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  FUN_08003370(data_structure_end_address, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  FUN_08003346(data_structure_end_address, 0x79, PTR_LAB_08002e1a_1_08002db0, data_structure_start_address);\n  FUN_08003350(data_structure_end_address, 0xf9, PTR_LAB_08002dea_1_08002db4, data_structure_start_address);\n  FUN_08003350(data_structure_end_address, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return data_structure_start_address;\n}",
            "called": [
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_08003306",
                "FUN_08003350",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_data_08005188",
                "param_1": "data",
                "iVar1": "data_ptr",
                "uVar2": "var1",
                "uVar3": "var3",
                "uVar4": "var2",
                "FUN_080043a2": "process_data_1",
                "FUN_08004396": "process_data_2",
                "DAT_080052e8": "CONST_1",
                "DAT_080052d4": "CONST_2",
                "DAT_080052dc": "CONST_3",
                "DAT_080052ec": "CONST_4",
                "DAT_080052e4": "CONST_5",
                "FUN_08004d6c": "process_data_4",
                "FUN_08004e3c": "process_data_5",
                "FUN_08004b82": "process_data_6",
                "FUN_08004ccc": "process_data_7",
                "FUN_08004ac2": "process_data_8",
                "FUN_08005084": "process_data_9",
                "FUN_08004a76": "process_data_10",
                "FUN_0800459c": "process_data_11",
                "FUN_08004a24": "process_data_12",
                "FUN_0800457c": "process_data_13"
            },
            "code": "void process_data_08005188(int *data)\n{\n    int data_ptr = *data;\n    uint var1 = *(uint *)(data_ptr + 0x14);\n    uint var2 = *(uint *)(data_ptr + 0x18);\n    uint var3 = *(uint *)(data_ptr + 4);\n    if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n        if (((var1 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n            if (((DAT_080052e8 & var1) == 0) || ((var3 & 0x200) == 0)) {\n                if (((DAT_080052d4 & var1) != 0) && ((var3 & 0x200) != 0)) {\n                    process_data_08005188_1(data);\n                }\n            }\n            else {\n                process_data_08005188_2(data);\n            }\n        }\n        else {\n            process_data_08005188_3(data);\n        }\n        if ((DAT_080052dc & var2) == 0) {\n            if ((((DAT_080052ec & var1) != 0) && ((var3 & 0x400) != 0)) && ((DAT_080052e4 & var1) == 0)) {\n                process_data_08005188_4(data);\n                return;\n            }\n            if (((DAT_080052e4 & var1) != 0) && ((var3 & 0x200) != 0)) {\n                process_data_08005188_5(data);\n                return;\n            }\n        }\n        else {\n            if ((((DAT_080052e0 & var1) != 0) && ((var3 & 0x400) != 0)) && ((DAT_080052e4 & var1) == 0)) {\n                process_data_08005188_6(data);\n                return;\n            }\n            if (((DAT_080052e4 & var1) != 0) && ((var3 & 0x200) != 0)) {\n                process_data_08005188_7(data);\n                return;\n            }\n        }\n    }\n    else {\n        if (((DAT_080052d4 & var1) != 0) && ((var3 & 0x200) != 0)) {\n            process_data_08005188_8();\n            return;\n        }\n        if (((DAT_080052d8 & var1) != 0) && ((var3 & 0x200) != 0)) {\n            process_data_08005188_9(data);\n            return;\n        }\n        if ((DAT_080052dc & var2) == 0) {\n            if ((((DAT_080052ec & var1) != 0) && ((var3 & 0x400) != 0)) && ((DAT_080052e4 & var1) == 0)) {\n                process_data_08005188_10(data);\n                return;\n            }\n            if (((DAT_080052e4 & var1) != 0) && ((var3 & 0x200) != 0)) {\n                process_data_08005188_11(data);\n            }\n        }\n        else {\n            if ((((DAT_080052e0 & var1) != 0) && ((var3 & 0x400) != 0)) && ((DAT_080052e4 & var1) == 0)) {\n                process_data_08005188_12(data);\n                return;\n            }\n            if (((DAT_080052e4 & var1) != 0) && ((var3 & 0x200) != 0)) {\n                process_data_08005188_13(data);\n                return;\n            }\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08004396",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_080043a2",
                "FUN_0800457c",
                "FUN_08004ac2",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004b82",
                "FUN_08004ccc",
                "FUN_08004a76",
                "FUN_08004e3c",
                "FUN_0800430c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "findFirstEmpty_08009db0",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "piVar1": "empty_slot",
                "piVar2": "current_slot",
                "iVar3": "memory_location",
                "ppiVar4": "memory_pointer",
                "PTR_PTR_DAT_08009e24": "memory_location_pointer"
            },
            "code": "int * findFirstEmpty_08009db0(int *error_code, int param_2, int param_3, int param_4)\n{\n  int *empty_slot;\n  int *current_slot;\n  int memory_location;\n  int **memory_pointer;\n  \n  memory_location = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(memory_location + 0x18) == 0) {\n    initializeMemory(memory_location);\n  }\n  memory_pointer = (int **)(memory_location + 0x48);\n  do {\n    current_slot = memory_pointer[2];\n    empty_slot = memory_pointer[1];\n    while (empty_slot = (int *)((int)empty_slot + -1), -1 < (int)empty_slot) {\n      if (*(short *)(current_slot + 3) == 0) {\n        *(undefined2 *)((int)current_slot + 0xe) = 0xffff;\n        current_slot[0x19] = 0;\n        *(undefined2 *)(current_slot + 3) = 1;\n        *current_slot = 0;\n        current_slot[2] = 0;\n        current_slot[1] = 0;\n        current_slot[4] = 0;\n        current_slot[5] = 0;\n        current_slot[6] = 0;\n        initializeSlot(current_slot + 0x17, 0, 8, 1, param_4);\n        current_slot[0xd] = 0;\n        current_slot[0xe] = 0;\n        current_slot[0x12] = 0;\n        current_slot[0x13] = 0;\n        return current_slot;\n      }\n      current_slot = current_slot + 0x1a;\n    }\n    if (*memory_pointer == (int *)0x0) {\n      empty_slot = (int *)allocateMemory(error_code, 4);\n      *memory_pointer = empty_slot;\n      if (empty_slot == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    memory_pointer = (int **)*memory_pointer;\n  } while( true );\n}",
            "called": [
                "FUN_08009d24",
                "FUN_08009d50",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "findFirstEmpty_08009db0"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_if_not_null_08002c2c",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "pcVar1": "function",
                "PTR_DAT_08002c3c": "function_pointer_pointer"
            },
            "code": "void execute_function_if_not_null_08002c2c(code* function_pointer, int param1, int param2, int param3, int param4) {\n  code* function = *(code**)PTR_DAT_08002c3c;\n  if (function != NULL) {\n    (*function)(param1, param2, param3, function, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_if_not_null_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "process_data_and_return_08001bf8",
                "param_1": "data_start",
                "param_2": "data_length",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_DAT_08001c04": "PTR_DATA_PROCESSING_FUNC"
            },
            "code": "void process_data_and_return_08001bf8(undefined4 data_start, undefined4 data_length, undefined4 param_3, undefined4 param_4)\n{\n  call_data_processing(PTR_DAT_08001c04, data_start, data_length, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_data_and_return_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "call_function_with_params_and_duplicate_last_param_080072f0",
                "param_1": "function",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3"
            },
            "code": "void call_function_with_params_and_duplicate_last_param_080072f0(undefined4 function, undefined2 param1, undefined4 param2, undefined4 param3)\n{\n  call_function_with_params_and_duplicate_last_param_080072f0(function, param1, param2, param3, param3);\n  return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "call_function_with_params_and_duplicate_last_param_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "str",
                "pcVar2": "current_ptr",
                "pcVar3": "str_ptr",
                "cVar1": "current_char"
            },
            "code": "char * find_end_of_string_08000178(char *str) {\n  char current_char;\n  char *current_ptr = str;\n  do {\n    current_ptr++;\n    current_char = *current_ptr;\n  } while (current_char != '\\0');\n  return current_ptr + (-1 - (int)str);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_08002e44",
                "FUN_08008e7c",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data",
                "iVar1": "status",
                "uVar2": "flags2",
                "puVar3": "data_ptr",
                "uVar4": "is_data_ptr_5_set",
                "uVar5": "flags1"
            },
            "code": "void process_data_080069ec(uint **data)\n{\n  uint *data_ptr = *data;\n  uint flags1 = *data_ptr;\n  uint flags2 = data_ptr[3];\n  \n  if ((flags1 & 0xf) == 0 && (flags1 & 0x20) && (flags2 & 0x20)) {\n    process_type1(data);\n  }\n  else if ((flags1 & 0xf) == 0 || ((data_ptr[5] & 1) == 0 && (flags2 & 0x120) == 0)) {\n    if ((flags1 & 0x80) && (flags2 & 0x80)) {\n      process_type2(data);\n    }\n    else if ((flags1 & 0x40) && (flags2 & 0x40)) {\n      process_type3(data);\n    }\n  }\n  else {\n    if ((flags1 & 1) && (flags2 & 0x100)) {\n      data[15] = (uint *)((uint)data[15] | 1);\n    }\n    if ((flags1 & 4) && (data_ptr[5] & 1)) {\n      data[15] = (uint *)((uint)data[15] | 2);\n    }\n    if ((flags1 & 2) && (data_ptr[5] & 1)) {\n      data[15] = (uint *)((uint)data[15] | 4);\n    }\n    if ((flags1 & 8) && (data_ptr[5] & 1)) {\n      data[15] = (uint *)((uint)data[15] | 8);\n    }\n    if (data[15] != (uint *)0x0) {\n      if ((flags1 & 0x20) && (flags2 & 0x20)) {\n        process_type1(data);\n      }\n      if ((data[15] & 8) == 0 && (data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        data[15] = (uint *)0x0;\n        return;\n      }\n      process_type4(data);\n      data_ptr = *data;\n      if ((data_ptr[5] & 0x40) == 0) {\n        do_nothing(data);\n        return;\n      }\n      data_ptr[5] &= 0xffffffbf;\n      if (data[13] == (uint *)0x0) {\n        do_nothing(data);\n        return;\n      }\n      data[13][13] = (uint)PTR_LAB_08006b0c_1_08006b08;\n      int status = process_data_080069ec(data[13]);\n      if (status != 0) {\n        (*(code *)data[13][13])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006932",
                "FUN_08004050",
                "FUN_0800877c",
                "FUN_0800694c",
                "FUN_080064b0",
                "FUN_080064cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "initialize_param1_with_dat_0800a168",
                "param_1": "param1",
                "param_2": "unused_param2",
                "param_3": "unused_param3",
                "param_4": "unused_param4",
                "puVar1": "ptr_dat",
                "iVar2": "result"
            },
            "code": "void initialize_param1_with_dat_0800a168(int* param1) {\n  undefined* ptr_dat = PTR_DAT_0800a188;\n  *(undefined4*)PTR_DAT_0800a188 = 0;\n  int result = FUN_08008858(0, 0, 0, 0, 0);\n  if (result == -1 && *(int*)ptr_dat != 0) {\n    *param1 = *(int*)ptr_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "initialize_param1_with_dat_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "decode_and_process_data_080067ac",
                "param_1": "data_ptr",
                "param_2": "data_buffer",
                "param_3": "buffer_size",
                "param_4": "param_4",
                "uVar1": "data",
                "iVar2": "status"
            },
            "code": "int decode_and_process_data_080067ac(int *data_ptr, ushort *data_buffer, int buffer_size, undefined4 param_4)\n{\n    undefined4 uVar1;\n    int status;\n\n    if (*(char *)((int)data_ptr + 0x39) == ' ')\n    {\n        if (data_buffer == (ushort *)0x0 || buffer_size == 0 || *(char *)(data_ptr + 0xe) == '\\x01')\n        {\n            status = 1;\n        }\n        else\n        {\n            *(undefined *)(data_ptr + 0xe) = 1;\n            data_ptr[0xf] = 0;\n            *(undefined *)((int)data_ptr + 0x39) = 0x21;\n            uVar1 = get_data();\n            *(short *)(data_ptr + 9) = (short)buffer_size;\n            *(short *)((int)data_ptr + 0x26) = (short)buffer_size;\n            while (*(short *)((int)data_ptr + 0x26) != 0)\n            {\n                *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n                if (data_ptr[2] == 0x1000)\n                {\n                    status = process_data(data_ptr,0x80,0,uVar1,param_4);\n                    if (status != 0)\n                    {\n                        return 3;\n                    }\n                    *(uint *)(*data_ptr + 4) = *data_buffer & 0x1ff;\n                    if (data_ptr[4] == 0)\n                    {\n                        data_buffer = data_buffer + 1;\n                    }\n                    else\n                    {\n                        data_buffer = (ushort *)((int)data_buffer + 1);\n                    }\n                }\n                else\n                {\n                    status = process_data(data_ptr,0x80,0,uVar1,param_4);\n                    if (status != 0)\n                    {\n                        return 3;\n                    }\n                    *(uint *)(*data_ptr + 4) = (uint)*(byte *)data_buffer;\n                    data_buffer = (ushort *)((int)data_buffer + 1);\n                }\n            }\n            status = process_data(data_ptr,0x40,0,uVar1,param_4);\n            if (status == 0)\n            {\n                *(undefined *)((int)data_ptr + 0x39) = 0x20;\n                *(undefined *)(data_ptr + 0xe) = 0;\n            }\n            else\n            {\n                status = 3;\n            }\n        }\n    }\n    else\n    {\n        status = 2;\n    }\n    return status;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_character_in_string_0800735a",
                "param_1": "character",
                "param_2": "string",
                "*param_2": "*string",
                "PTR_": "PTR_",
                "DAT_": "DAT_",
                "undefined4": "unsigned int"
            },
            "code": "unsigned int find_character_in_string_0800735a(int character, char *string)\n{\n    while(true)\n    {\n        if (*string == -1)\n        {\n            return 0xffffffff;\n        }\n        if (*string == character)\n        {\n            break;\n        }\n        string = string + 0xc;\n    }\n    return *(unsigned int *)(string + 8);\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_character_in_string_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_data_structure_08008c20",
                "param_1": "data_structure_ptr",
                "*(int *)(param_1 + 0x130)": "ptr_to_data_start",
                "*(undefined2 *)(param_1 + 0x134)": "ptr_to_initialized_flag",
                "*(undefined2 *)(param_1 + 0x136)": "ptr_to_initialized_flag2",
                "*(int *)(param_1 + 0x138)": "ptr_to_data_end",
                "*(undefined2 *)(param_1 + 0x13c)": "ptr_to_initialized_flag3",
                "*(undefined2 *)(param_1 + 0x13e)": "ptr_to_initialized_flag4"
            },
            "code": "void initialize_data_structure_08008c20(int data_structure_ptr)\n{\n  int* ptr_to_data_start = (int *)(data_structure_ptr + 0x130);\n  *ptr_to_data_start = data_structure_ptr + 0x11;\n  \n  short* ptr_to_initialized_flag = (short *)(data_structure_ptr + 0x134);\n  *ptr_to_initialized_flag = 0;\n  \n  short* ptr_to_initialized_flag2 = (short *)(data_structure_ptr + 0x136);\n  *ptr_to_initialized_flag2 = 0;\n  \n  int* ptr_to_data_end = (int *)(data_structure_ptr + 0x138);\n  *ptr_to_data_end = data_structure_ptr + 0x51;\n  \n  short* ptr_to_initialized_flag3 = (short *)(data_structure_ptr + 0x13c);\n  *ptr_to_initialized_flag3 = 0;\n  \n  short* ptr_to_initialized_flag4 = (short *)(data_structure_ptr + 0x13e);\n  *ptr_to_initialized_flag4 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_and_update_data_08000a64",
                "iVar1": "result",
                "uVar2": "index",
                "PTR_DAT_08000ad8": "data_array",
                "PTR_DAT_08000adc": "data_set_1",
                "PTR_DAT_08000ae0": "data_set_2",
                "FUN_080036ac": "check_data",
                "FUN_0800738a": "update_data",
                "FUNC_080005f8": "print_result",
                "PTR_DAT_08000ae4": "update_flag",
                "PTR_DAT_08000ae8": "updated_data"
            },
            "code": "void check_and_update_data_08000a64(void)\n{\n  int result;\n  uint index;\n  for (index = 0; index < 0x3c; index = (index + 1) & 0xff) {\n    if (index < 0x3c) {\n      if (PTR_DAT_08000ad8[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_data(PTR_DAT_08000ad8[index]);\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_data((int)(char)PTR_DAT_08000ad8[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = update_data((int)(char)PTR_DAT_08000ad8[index],PTR_DAT_08000adc);\n            if (result == 0) {\n              result = update_data((int)(char)PTR_DAT_08000ad8[index],PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      print_result(index,6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  update_data(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_update_data_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "initialize_system_0800723c",
                "FUN_08003760": "start_system"
            },
            "code": "void initialize_system_0800723c(void)\n{\n  start_system();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "initialize_system_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "process_input_080043a2",
                "param_1": "input_data",
                "puVar1": "flag_ptr"
            },
            "code": "int process_input_080043a2(uint **input_data){\n  uint *flag_ptr;\n  flag_ptr = input_data[11];\n  if ((*(char *)((int)input_data + 61) == '\"') && ((input_data[20] != (uint *)0x0 || (*(char *)((int)input_data + 62) != '@')))) {\n    if ((input_data[20] == (uint *)0x0) && (input_data[4] == (uint *)0xc000)) {\n      **input_data = **input_data | 0x100;\n      input_data[20] = (uint *)((int)input_data[20] + 1);\n    }\n    else {\n      if (*(short *)((int)input_data + 42) == 0) {\n        **input_data = **input_data | 0x200;\n      }\n      else if (*(short *)((int)input_data + 42) == 1) {\n        if (flag_ptr == (uint *)0xffff0000) {\n          **input_data = **input_data & 0xfffffbff;\n          flag_ptr = *input_data;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) || (input_data[12] == (uint *)0x12)) {\n          **input_data = **input_data & 0xfffffbff;\n          **input_data = **input_data | 0x200;\n        }\n        else if (input_data[11] == (uint *)0x2) {\n          **input_data = **input_data | 0x400;\n        }\n        else {\n          **input_data = **input_data & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input_data + 42) == 2) {\n        if (input_data[11] == (uint *)0x2) {\n          **input_data = **input_data | 0x400;\n        }\n        else {\n          **input_data = **input_data | 0x800;\n          **input_data = **input_data & 0xfffffbff;\n        }\n        flag_ptr = *input_data;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **input_data = **input_data | 0x400;\n        flag_ptr = *input_data;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      input_data[20] = (uint *)0x0;\n    }\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "output_char",
                "sVar2": "remaining_data_count",
                "puVar3": "output_char",
                "data_string": "data_string",
                "data_type": "data_type",
                "data_value": "data_value",
                "data_pointer": "data_pointer",
                "remaining_data_count": "remaining_data_count",
                "output_string": "output_string"
            },
            "code": "int process_data_0800694c(int *data)\n{\n  char *data_string = (char *)(data + 0x3a);\n  if (*data_string != '\"')\n  {\n    return 2;\n  }\n  \n  int data_type = data[2];\n  int data_value = *(int *)(*data + 4);\n  int *data_pointer = (int *)(*data + 0xc);\n  short *remaining_data_count = (short *)((char *)data + 0x2e);\n  char *output_string = (char *)(data + 10);\n  \n  if (data_type == 0x1000)\n  {\n    if (data[4] == 0)\n    {\n      *output_string = (char)((data_value << 0x17) >> 0x17);\n      output_string += 2;\n    }\n    else\n    {\n      *output_string = (char)data_value & 0xff;\n      output_string++;\n    }\n  }\n  else\n  {\n    if (data[4] == 0)\n    {\n      *output_string = (char)data_value;\n      output_string++;\n    }\n    else\n    {\n      *output_string = (char)data_value & 0x7f;\n      output_string++;\n    }\n  }\n  \n  (*remaining_data_count)--;\n  if (*remaining_data_count != 0)\n  {\n    return 0;\n  }\n  \n  *data_pointer &= 0xffffffdf;\n  *data_pointer &= 0xfffffeff;\n  *(uint *)(*data + 0x14) &= 0xfffffffe;\n  *data_string = 0x20;\n  FUN_0800870c();\n  return 0;\n}",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_data_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "set_flags_and_call_function_08006280",
                "param_1": "ptr_param",
                "param_2": "flag_value",
                "puVar1": "temp_ptr",
                "*param_1": "param",
                "**param_1": "*param",
                "DAT_080062f0": "PTR_DAT_080062f0"
            },
            "code": "int set_flags_and_call_function_08006280(uint **ptr_param, int flag_value) {\n  uint *param = *ptr_param;\n  switch(flag_value) {\n    case 0:\n      param[3] |= 2;\n      break;\n    case 4:\n      param[3] |= 4;\n      break;\n    case 8:\n      param[3] |= 8;\n      break;\n    case 0xc:\n      param[3] |= 0x10;\n  }\n  call_function_with_params(param, flag_value, 1);\n  if (param == DAT_080062f0) {\n    param[0x11] |= 0x8000;\n  }\n  **ptr_param |= 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_flags_and_call_function_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "decode_and_update_status_08007258",
                "param_1": "input",
                "param_2": "status_update_1",
                "param_3": "status_update_2",
                "uVar1": "decoded_input",
                "local_20": "input_mask",
                "local_1c": "status_update_1",
                "local_18": "status_update_2",
                "local_14": "status_register"
            },
            "code": "void decode_and_update_status_08007258(uint32_t input, uint32_t status_update_1, uint32_t status_update_2) {\n  uint32_t decoded_input = decode_input(input);\n  uint16_t input_mask = 1 << (input & 0xf) & 0xffff;\n  uint32_t status_register = *(uint32_t *)(DAT_080072d0 + 0x18);\n  status_register |= 1;\n  *(uint32_t *)(DAT_080072d0 + 0x18) = status_register;\n  if ((input - 0xd & 0xff) < 2) {\n    uint32_t status_update = *(uint32_t *)(DAT_080072d4 + 4);\n    status_update &= 0xf8ffffff;\n    status_update |= 0x4000000;\n    *(uint32_t *)(DAT_080072d4 + 4) = status_update;\n  }\n  if (((input == 0xf) || (input == 0x13)) || (input == 0x14)) {\n    uint32_t status_update = *(uint32_t *)(DAT_080072d4 + 4);\n    status_update &= 0xf8ffffff;\n    status_update |= 0x2000000;\n    *(uint32_t *)(DAT_080072d4 + 4) = status_update;\n  }\n  update_status(decoded_input, input_mask, status_update_1, status_update_2);\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "decode_and_update_status_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "checkForErrorAndSaveResult_0800a0ec",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "resultPointer",
                "iVar2": "functionResult"
            },
            "code": "void checkForErrorAndSaveResult_0800a0ec(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *resultPointer;\n  resultPointer = PTR_DAT_0800a10c;\n  *(undefined4 *)PTR_DAT_0800a10c = 0;\n  int functionResult = FUN_08008846(arg1, arg2, arg2, 0, arg3);\n  if ((functionResult == -1) && (*(int *)resultPointer != 0)) {\n    *result = *(int *)resultPointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "checkForErrorAndSaveResult_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_values_08008df8",
                "param_1": "ptr_to_values",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "code": "void initialize_values_08008df8(undefined4 *ptr_to_values, undefined value1, undefined value2, undefined value3, undefined value4)\n{\n  *ptr_to_values = PTR_PTR_LAB_08008dbe_1_08008e10;\n  *(undefined *)(ptr_to_values + 1) = value1;\n  *(undefined *)((int)ptr_to_values + 5) = value2;\n  *(undefined *)((int)ptr_to_values + 6) = value3;\n  *(undefined *)((int)ptr_to_values + 7) = value4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "initialize_values_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "get_result_from_function_08006c7c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "code": "int get_result_from_function_08006c7c(uint param1, uint param2, uint param3, uint param4) {\n  int result = call_function(param1, PTR_DAT_08006ca4, param3, param4, param4);\n  uint shifted_result = (uint)(result << 12) >> 27;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 12;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "get_result_from_function_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_to_zero_08006b5c",
                "param_1": "bit_index",
                "param_2": "array_address",
                "uVar1": "index",
                "PTR_": "array_element_address",
                "DAT_": "mask"
            },
            "code": "void set_bit_to_zero_08006b5c(uint bit_index, int array_address){\n        uint index = (bit_index << 0x18) >> 0x1c;\n        uint* PTR_ = (uint*)(array_address + index * 4);\n        uint DAT_ = ~(1 << (bit_index & 0xf));\n        *PTR_ = *PTR_ & DAT_;\n    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "get_result_08007376",
                "param_1": "input_val",
                "uVar1": "result",
                "FUN_0800735a": "calculate_result"
            },
            "code": "int get_result_08007376(int input_val) {\n  int result;\n  if (input_val == -1) {\n    result = -1;\n  }\n  else {\n    result = calculate_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "imported": false,
            "current_name": "get_result_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_system_interrupt_08000188",
                "PTR_": "",
                "DAT_": "",
                "software_interrupt": "software_interrupt",
                "interrupt_number": "interrupt_number"
            },
            "code": "void trigger_system_interrupt_08000188(void)\n{\n  int interrupt_number = 0x3f;\n  software_interrupt(interrupt_number);\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "trigger_system_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "i",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "code": "void process_data_08004f3c(uint **data)\n{\n  int i;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[16] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      do_nothing(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      process_sub_data(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[13] + 0x21) == '\\x01') {\n      data[14][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      i = process_sub_data(data[14]);\n      if (i != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[14][0xd])();\n      }\n    }\n    else {\n      data[13][0xd] = (uint)PTR_LAB_080053cc_1_0800507c;\n      i = process_sub_data(data[13]);\n      if (i != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[13][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[16] & 4) != 0)) {\n    data[11] = DAT_08005080;\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    process_sub_data(data);\n  }\n  return;\n}",
            "called": [
                "FUN_08004050",
                "FUN_08007ff0",
                "FUN_08004f3a",
                "FUN_08008020"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_08005084",
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "process_data_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_length",
                "param_2": "input_ptr",
                "param_3": "output_ptr",
                "param_4": "mode",
                "pcVar3": "input_char_ptr",
                "cVar1": "input_char",
                "iVar2": "processed_length"
            },
            "code": "void process_input_080033cc(int input_length, int* input_ptr, int* output_ptr, int mode)\n{\n    char input_char = *(char*)input_ptr;\n    if (input_char == 'q') {\n        if (*output_ptr != 0) {\n            int processed_length = process_string(input_length - 1, (char*)input_ptr + 1, (char*)input_ptr, mode);\n            write_output(input_length, processed_length + 1);\n            (*(void(**)(int, int))(output_ptr + 0x10))(*(int*)(output_ptr + 0x20), *(int*)input_ptr + 1);\n            return;\n        }\n    }\n    else if (input_char == 'y') {\n        if (*(void(**)(int, int, int))(output_ptr + 0x18) != (void*)0x0) {\n            if (input_length < 3) {\n                (*(void(**)(int, int, int))(output_ptr + 0x18))(*(int*)(output_ptr + 0x14), 0, 0);\n                return;\n            }\n            int processed_length = process_string(input_length - 3, (char*)input_ptr + 3, (char*)input_ptr, mode);\n            write_output(input_length, processed_length + 3);\n            int input_ptr_int = *(int*)input_ptr;\n            (*(void(**)(int, char, char, int))(output_ptr + 0x18))( *(int*)(output_ptr + 0x14), *(char*)(input_ptr_int + 1), *(char*)(input_ptr_int + 2), input_ptr_int + 3);\n            return;\n        }\n    }\n    else if (*(void(**)(int, char, int, char*))(output_ptr + 0x14) != (void*)0x0) {\n        (*(void(**)(int, char, int, char*))(output_ptr + 0x14))(*(int*)(output_ptr + 0x24), input_char, input_length - 1, (char*)input_ptr + 1);\n    }\n    return;\n}",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_status_08003de4",
                "param_1": "status",
                "iVar1": "result",
                "FUN_08003b8c": "check_connection"
            },
            "code": "int check_status_08003de4(int status)\n{\n  int result;\n  if (*(char *)(status + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(status + 0x24) = 1;\n  result = check_connection();\n  if (result == 0) {\n    *(uint *)(status + 0x28) = *(uint *)(status + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(status + 0x24) = 0;\n  return result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_status_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servo_index",
                "param_2": "min_pulse_width",
                "param_3": "max_pulse_width",
                "param_4": "unused_parameter",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000584": "max_servos_attached_error_msg",
                "PTR_s_Max_servos_attached_08000580": "unused_parameter",
                "PTR_DAT_08000570": "last_detached_servo_index_ptr",
                "PTR_DAT_08000578": "servo_pulse_widths",
                "PTR_DAT_08000574": "last_detached_servo_pulse_widths",
                "PTR_DAT_0800057c": "servo_pulse_widths_ptr",
                "FUN_08002f14": "print_error_message",
                "FUN_080025ac": "set_servo_pulse_width",
                "FUN_08002634": "move_servo_to_default_position"
            },
            "code": "void attach_servo_08000500(int servo_index, int min_pulse_width, int max_pulse_width, undefined4 PTR_s_Max_servos_attached_08000580)\n{\n  byte servo_count = *PTR_DAT_0800056c;\n  if (servo_count > 11) {\n    print_error_message(PTR_DAT_08000584, PTR_s_Max_servos_attached_08000580, PTR_s_Max_servos_attached_08000580);\n    return;\n  }\n  byte last_detached_servo_index = *PTR_DAT_08000570;\n  if (last_detached_servo_index == 0) {\n    PTR_DAT_08000578[servo_index] = servo_count;\n    *PTR_DAT_0800056c = servo_count + 1;\n  }\n  else {\n    PTR_DAT_08000578[servo_index] = PTR_DAT_08000574[last_detached_servo_index - 1];\n    *PTR_DAT_08000570 = last_detached_servo_index - 1;\n  }\n  if ((min_pulse_width > 0) && (max_pulse_width > 0)) {\n    set_servo_pulse_width(PTR_DAT_08000578[servo_index] * 3, servo_index, min_pulse_width, max_pulse_width);\n    return;\n  }\n  move_servo_to_default_position(PTR_DAT_08000578[servo_index] * 3, servo_index);\n  return;\n}",
            "called": [
                "FUN_080025ac",
                "FUN_08002f14",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "attach_servo_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_memory_and_initialize_to_zero_08009d24",
                "param_1": "starting_address",
                "param_2": "num_elements",
                "iVar2": "total_bytes_to_allocate",
                "puVar1": "allocated_address"
            },
            "code": "undefined4 * allocate_memory_and_initialize_to_zero_08009d24(undefined4 starting_address, int num_elements) {\n  int total_bytes_to_allocate = (num_elements - 1) * 0x68;\n  undefined4 *allocated_address = (undefined4 *)FUN_08009270(starting_address, total_bytes_to_allocate + 0x74);\n  if (allocated_address != (undefined4 *)0x0) {\n    *allocated_address = 0;\n    *(allocated_address + 1) = num_elements;\n    *(allocated_address + 2) = allocated_address + 3;\n    FUN_080091c6(allocated_address + 3, 0, total_bytes_to_allocate + 0x68);\n  }\n  return allocated_address;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_to_zero_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_data_structures_0800344a",
                "param_1": "data_structure_address",
                "uVar1": "index",
                "uint": "uint32_t"
            },
            "code": "void initialize_data_structures_0800344a(int data_structure_address) {\n    uint32_t index;\n    *(uint32_t *)(data_structure_address + 0x10) = 0;\n    *(uint8_t *)(data_structure_address + 0xc) = 0;\n    *(uint8_t *)(data_structure_address + 0xd) = 0;\n    for (index = 0; index < *(uint32_t *)(data_structure_address + 8); index++) {\n        *(uint8_t *)(*(int *)(data_structure_address + 4) + index) = 0;\n    }\n    *(uint8_t *)(data_structure_address + 0x14) = 0;\n    *(uint32_t *)(data_structure_address + 0x18) = 0;\n    if (*(void (**)(void))(data_structure_address + 0x78) != (void (*)(void))0x0) {\n        (**(void (**)(void))(data_structure_address + 0x78))(*(uint32_t *)(data_structure_address + 0x48));\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "process_data_080071e4",
                "param_1": "data",
                "local_50": "local_array",
                "PTR_DAT_08007238": "PTR_DATA",
                "FUN_08007320": "get_data",
                "FUN_08006c7c": "check_status",
                "FUN_08007376": "get_flag",
                "FUN_080063c0": "process_data1",
                "FUN_08006460": "process_data2",
                "FUN_08005e2e": "finalize_data",
                "iVar1": "status",
                "uVar2": "flag"
            },
            "code": "void process_data_080071e4(void* data)\n{\n  int status;\n  uint32_t flag;\n  int local_array [17];\n  local_array[0] = get_data(data, PTR_DAT_08007238);\n  if ((local_array[0] != 0) && (((status = check_status(data)) == 0 || (status == 4)) || (status == 8) || (status == 0xc || (status == 0x18)))) {\n    flag = get_flag(data, PTR_DAT_08007238);\n    if ((flag & 0x100000) == 0) {\n      process_data_080071e41(local_array, status);\n    }\n    else {\n      process_data_080071e42(local_array, status);\n    }\n    finalize_data(local_array);\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c",
                "FUN_08006460",
                "FUN_080063c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "process_data_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08008e72(void *function_pointer) {\n  (*(void (*)())function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_data_080022f8",
                "bVar1": "is_valid",
                "iVar2": "data_value",
                "uVar3": "var1",
                "uVar4": "counter1",
                "uVar5": "counter2",
                "FUNC_08000ef8": "execute_func1",
                "FUN_08002ec4": "read_data",
                "FUN_08002ed2": "execute_func2",
                "FUN_08008abc": "get_data",
                "PTR_DAT_080023e0": "PTR_DATA",
                "PTR_DAT_080023e4": "PTR_VAR1",
                "PTR_DAT_080023ec": "PTR_VAR2",
                "PTR_DAT_080023e8": "PTR_VAR3",
                "PTR_DAT_080023f4": "PTR_DATA_ARRAY",
                "FUN_080036ac": "execute_func3",
                "FUN_08002fa0": "read_data_type",
                "PTR_DAT_080023f0": "PTR_VAR4",
                "FUN_08008880": "execute_func4",
                "FUN_08002ef2": "execute_func5",
                "PTR_DAT_080023f8": "PTR_DATA_ARRAY2",
                "PTR_DAT_080023fc": "PTR_DATA_ARRAY3",
                "FUN_08001c18": "execute_func6"
            },
            "code": "void process_data_080022f8()\n{\n  bool is_valid;\n  int data_value;\n  undefined4 var1;\n  uint counter1;\n  uint counter2;\n  execute_func1();\n  while (data_value = read_data(PTR_DAT_080023e0), data_value != 0) {\n    execute_func2(PTR_DAT_080023e0);\n  }\n  data_value = get_data();\n  *(int *)PTR_DAT_080023e4 = data_value;\n  if (*(uint *)PTR_DAT_080023ec < (uint)(data_value - *(int *)PTR_DAT_080023e8)) {\n    *(uint *)PTR_DAT_080023e8 = *(int *)PTR_DAT_080023e8 + *(uint *)PTR_DAT_080023ec;\n    for (counter1 = 0; counter1 < 0x3c; counter1 = (counter1 + 1) & 0xff) {\n      counter2 = counter1 - 0x2e & 0xff;\n      if (counter2 < 0xe) {\n        if (counter1 < 0x3c) {\n          data_value = (int)(char)PTR_DAT_080023f4[counter1];\n        }\n        else {\n          data_value = -1;\n        }\n        data_value = execute_func3(data_value);\n        if (data_value == 0) {\n          is_valid = false;\n        }\n        else {\n          if (counter1 < 0x3c) {\n            data_value = (int)(char)PTR_DAT_080023f4[counter1];\n          }\n          else {\n            data_value = -1;\n          }\n          data_value = execute_func3(data_value);\n          if (data_value == 1) {\n            is_valid = false;\n          }\n          else {\n            data_value = read_data_type(PTR_DAT_080023e0, counter1);\n            if (data_value == 2) {\n              is_valid = true;\n            }\n            else {\n              is_valid = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid = false;\n      }\n      if ((is_valid) && ((*(int *)PTR_DAT_080023f0 >> counter2 & 1U) != 0)) {\n        var1 = execute_func4(counter2);\n        execute_func5(PTR_DAT_080023e0, counter2, var1);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (counter1 = 0; (int)counter1 < (char)*PTR_DAT_080023f8 + 1; counter1 = (counter1 + 1) & 0xff) {\n        data_value = counter1 * 0xc;\n        execute_func6(PTR_DAT_080023fc[data_value],*(undefined4 *)(PTR_DAT_080023fc + data_value + 4),PTR_DAT_080023fc[data_value + 8],PTR_DAT_080023fc[data_value + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08002ef2",
                "FUN_08002ec4",
                "FUN_08002fa0",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "run_program_080072fa",
                "FUN_08003724": "initialize_data",
                "FUN_080035b8": "execute_program"
            },
            "code": "void run_program_080072fa(void)\n{\n  initialize_data();\n  execute_program();\n  return;\n}",
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "run_program_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "process_input_08005084",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "code": "uint32_t process_input_08005084(uint32_t **input)\n{\n  char current_char = *(char *)((int)input + 0x3d);\n  (*input)[1] = (*input)[1] & 0xfffff8ff;\n  **input = **input | 1;\n  **input = **input & 0xfffffbff;\n  uint32_t *ptr1 = *input;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)input + 0x3d) == '\"') || (*(char *)((int)input + 0x3d) == '*')) {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xe] + 4);\n    }\n    else {\n      *(int16_t *)((int)input + 0x2a) = (int16_t)*(uint32_t *)(*input[0xd] + 4);\n    }\n  }\n  if (*(int16_t *)((int)input + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      uint32_t *ptr2 = input[9];\n      input[9] = (uint32_t *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\n    }\n    if (((*input)[5] & 0x40) != 0) {\n      ptr1 = input[9];\n      input[9] = (uint32_t *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*input)[4];\n      *(int16_t *)((int)input + 0x2a) = *(int16_t *)((int)input + 0x2a) + -1;\n    }\n    input[0x10] = (uint32_t *)((uint32_t)input[0x10] | 4);\n  }\n  if (input[0x10] == (uint32_t *)0x0) {\n    if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n      input[0xb] = PTR_DAT_08005184;\n      input[0xc] = (uint32_t *)0x0;\n      *(char *)((int)input + 0x3d) = 0x20;\n      *(char *)((int)input + 0x3e) = 0;\n      do_something_08007ff0();\n    }\n    else if ((input[0xc] == (uint32_t *)0x22) || (current_char == '\"')) {\n      input[0xc] = (uint32_t *)0x0;\n      *(char *)((int)input + 0x3d) = 0x20;\n      *(char *)((int)input + 0x3e) = 0;\n      do_nothing_08004a74();\n    }\n  }\n  else {\n    do_something_else_08004f3c();\n  }\n  return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "*param_1": "*params",
                "puVar1": "ptr_array",
                "PTR_PTR_FUN_0800288c_1_08002940": "function_pointer",
                "PTR_DAT_08002944": "data_pointer"
            },
            "code": "void initialize_parameters_0800291c(undefined4 *params)\n{\n  undefined *ptr_array;\n  params[1] = 0;\n  params[2] = 1000;\n  *params = PTR_PTR_FUN_0800288c_1_08002940;\n  ptr_array = PTR_DAT_08002944;\n  *(undefined *)(params + 0x1b) = ptr_array[0xe];\n  *(undefined *)((int)params + 0x6d) = ptr_array[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "initialize_data_08002ac0",
                "param_1": "data_start",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08002a58": "initialize_data"
            },
            "code": "void initialize_data_08002ac0(undefined4 data_start, undefined4 data_size, undefined4 param_3, undefined4 param_4)\n{\n  initialize_data_08002ac0(data_start, 1, data_size, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "initialize_data_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "data_address",
                "param_2": "value",
                "param_3": "new_value_1",
                "param_4": "new_value_2",
                "*(undefined4 *)(param_1 + 0x70)": "*(undefined4 *)(data_address + 112)",
                "*(undefined4 *)(param_1 + 0x34)": "*(undefined4 *)(data_address + 52)"
            },
            "code": "void update_data_08003346(int data_address, int value, undefined4 param_3, undefined4 param_4)\n{\n  if (value == 121) {\n    *(undefined4 *)(data_address + 112) = param_3;\n    *(undefined4 *)(data_address + 52) = param_4;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_data_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data_structure",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "leading_zeroes_count"
            },
            "code": "void initialize_data_structure_080032bc(uint32_t *data_structure, uint32_t param_2, uint32_t param_3)\n{\n    uint32_t leading_zeroes_count;\n\n    data_structure[1] = param_2;\n    data_structure[2] = param_3;\n    data_structure[3] = 0;\n    data_structure[4] = 0;\n    data_structure[5] = 0;\n    data_structure[6] = 0;\n    data_structure[7] = 0;\n    data_structure[8] = 0;\n    data_structure[9] = 0;\n    data_structure[10] = 0;\n    data_structure[11] = 0;\n    data_structure[12] = 0;\n    data_structure[13] = 0;\n    data_structure[14] = 0;\n    data_structure[15] = 0;\n    data_structure[16] = 0;\n    data_structure[17] = 0;\n    data_structure[18] = 0;\n    data_structure[19] = 0;\n    data_structure[20] = 0;\n    data_structure[21] = 0;\n    data_structure[22] = 0;\n    data_structure[23] = 0;\n    data_structure[24] = 0;\n    data_structure[25] = 0;\n    data_structure[26] = 0;\n    data_structure[27] = 0;\n    data_structure[28] = 0;\n    data_structure[29] = 0;\n    data_structure[30] = 0;\n    data_structure[31] = 0;\n    data_structure[32] = 0;\n    data_structure[33] = 0;\n    data_structure[34] = 0;\n    data_structure[35] = 0;\n    data_structure[36] = 0;\n    data_structure[37] = 0;\n    data_structure[38] = 0;\n    data_structure[39] = 0;\n    leading_zeroes_count = count_leading_zeroes(param_2);\n    data_structure[0] = (char)(leading_zeroes_count >> 5);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "execute_function_on_pointer_if_not_null_08003106",
                "param_1": "pointer_to_function",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "puVar1": "function_pointer"
            },
            "code": "void execute_function_on_pointer_if_not_null_08003106(undefined4 *pointer_to_function, undefined4 parameter_2, undefined4 parameter_3, undefined4 parameter_4)\n{\n  undefined4 *function_pointer = (undefined4 *)*pointer_to_function;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0);\n    (***(code ***)(undefined4 *)*pointer_to_function)((undefined4 *)*pointer_to_function,0x6f);\n    (***(code ***)(undefined4 *)*pointer_to_function)((undefined4 *)*pointer_to_function,parameter_2);\n    execute_function_on_pointer_if_not_null_08003106(pointer_to_function, parameter_3, parameter_4, parameter_3);\n    (***(code ***)(undefined4 *)*pointer_to_function)((undefined4 *)*pointer_to_function,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "execute_function_on_pointer_if_not_null_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = FUN_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        FUN_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = FUN_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        FUN_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        FUN_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        FUN_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        FUN_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_08007320",
                "FUN_080073ae",
                "FUN_080045c0",
                "FUN_08003f30",
                "FUN_08003f94",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "call_fun_08007438_before_fun_08007708_08007708",
                "FUN_08007438": "call_fun_08007438"
            },
            "code": "void call_fun_08007438_before_fun_08007708_08007708(void)\n{\n  call_fun_08007438();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "call_fun_08007438_before_fun_08007708_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "perform_operation_0800018c",
                "param_1": "input_1",
                "param_2": "N/A",
                "param_3": "N/A",
                "param_4": "input_4",
                "uVar1": "result",
                "PTR_DAT_080001a4": "N/A",
                "FUN_08000188": "perform_sub_operation"
            },
            "code": "int perform_operation_0800018c(int input_1, int input_4)\n{\n    int result;\n    \n    if (*(int *)PTR_DAT_080001a4 != 0) {\n        result = 0;\n    }\n    else {\n        result = perform_sub_operation(1, input_1, 0, 0, input_4);\n    }\n    \n    return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "perform_operation_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "bit_position",
                "DAT_08003fac": "array_of_bits"
            },
            "code": "void set_bit_in_array_08003f94(uint bit_position)\n{\n  if (bit_position >= 0) {\n    *(int *)(DAT_08003fac + (bit_position >> 5) * 4) = 1 << (bit_position & 0x1f);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "set_flags_08008c44",
                "param_1": "obj",
                "param_2": "param_2",
                "param_3": "flags",
                "extraout_r1": "result",
                "bVar1": "low_flags",
                "iVar2": "num_flags",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_flags_08008c44(int obj, undefined4 param_2, byte flags) {\n  uint extraout_r1;\n  byte bVar1;\n  int num_flags;\n  code *jump_table;\n  *(undefined4 *)(obj + 0x11c) = param_2;\n  *(byte *)(obj + 0x140) = flags;\n  bVar1 = flags & 7;\n  if (bVar1 == 4) {\n    num_flags = 7;\n  }\n  else if (bVar1 == 6) {\n    num_flags = 8;\n  }\n  else if (bVar1 == 2) {\n    num_flags = 6;\n  }\n  else {\n    num_flags = 0;\n  }\n  if ((flags & 0x30) == 0x30) {\n    *(undefined4 *)(obj + 0x128) = 0x600;\n    num_flags++;\n  }\n  else if ((flags & 0x20) == 0) {\n    *(undefined4 *)(obj + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(obj + 0x128) = 0x400;\n    num_flags++;\n  }\n  if ((flags & 8) == 0) {\n    *(undefined4 *)(obj + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(obj + 0x124) = 0x2000;\n  }\n  if (num_flags == 8) {\n    *(undefined4 *)(obj + 0x120) = 0;\n  }\n  else if (num_flags == 9) {\n    *(undefined4 *)(obj + 0x120) = 0x1000;\n  }\n  else {\n    num_flags = 0;\n  }\n  if (num_flags != 0) {\n    set_flag(param_1 + 0xd4);\n    set_flag(param_1 + 0xd4, 0x08008cf0);\n    return;\n  }\n  jump_table = (code *)0x8008cee;\n  FUN_080090cc(uRam08008cfc,299,uRam08008cf8,uRam08008cf4);\n  if (extraout_r1 < 0x3c) {\n    uRam0000012d = PTR_DAT_08008d14[extraout_r1];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  (*jump_table)(0,extraout_r1,&stack0x00000148);\n  return;\n}",
            "called": [
                "FUN_08008078",
                "FUN_080090cc",
                "FUN_0800863c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_flags_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "perform_action_on_value_08002a26",
                "param_1": "value_to_modify",
                "param_2": "constant_value",
                "param_3": "param_3",
                "param_4": "param_4",
                "FUN_08002a1c": "modify_value"
            },
            "code": "void perform_action_on_value_08002a26(undefined4 value_to_modify, undefined4 constant_value, undefined4 param_3, undefined4 param_4)\n{\n  modify_value(value_to_modify, constant_value, param_3, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "perform_action_on_value_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "get_status_0800430c",
                "param_1": "device_data",
                "*(char *)((int)param_1 + 0x3e)": "device_type",
                "param_1[0x14]": "device_subtype",
                "*(uint *)(*param_1 + 0x10)": "status",
                "param_1[0x11]": "data",
                "*(char *)((int)param_1 + 0x3d)": "device_status"
            },
            "code": "uint8_t get_status_0800430c(uint32_t *device_data) {\n    uint8_t status = 0;\n    uint32_t data = *device_data;\n    char device_type = *(char *)((int)device_data + 0x3e);\n    if (device_type == '@') {\n        if (device_data[0x14] == 0) {\n            status = device_data[0x11] & 0xfe;\n        }\n        else {\n            status = device_data[0x11] & 0xffU | 1;\n        }\n    }\n    else if (device_data[4] == 0x4000) {\n        char device_status = *(char *)((int)device_data + 0x3d);\n        if (device_status == '!') {\n            status = device_data[0x11] & 0xfe;\n        }\n        else {\n            status = device_data[0x11] & 0xffU | 1;\n        }\n    }\n    else if (device_data[0x14] == 0) {\n        status = (uint8_t)(device_data[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (device_data[0x14] == 1) {\n        status = (uint8_t)(device_data[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return status;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "get_status_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "process_data_08006060",
                "param_1": "data_ptr",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_ptr + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(char *)(data_ptr + 15)",
                "FUN_08007708": "call_helper_function",
                "FUN_08005fe8": "process_data_helper"
            },
            "code": "int process_data_08006060(int *data_ptr)\n{\n    if (data_ptr != NULL) {\n        if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n            *(char *)(data_ptr + 15) = '\\0';\n            call_helper_function();\n        }\n        *(char *)((int)data_ptr + 0x3d) = 2;\n        process_data_08006060_helper(*data_ptr, data_ptr + 1);\n        *(char *)((int)data_ptr + 0x3d) = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08007708",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "process_data_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_values_08003350",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "first_param",
                "param_4": "second_param"
            },
            "code": "void set_values_08003350(int base_address, int value, undefined4 first_param, undefined4 second_param) {\n  if (value == 249) {\n    *(undefined4 *)(base_address + 116) = first_param;\n    *(undefined4 *)(base_address + 56) = second_param;\n    return;\n  }\n  if (value != 255) {\n    return;\n  }\n  *(undefined4 *)(base_address + 120) = first_param;\n  *(undefined4 *)(base_address + 72) = second_param;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = FUN_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = FUN_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "set_flags_08006186",
                "param_1": "flags_ptr",
                "param_2": "param_2",
                "param_3": "flag_type",
                "FUN_08005cec": "execute_function_1",
                "FUN_080060c4": "execute_function_2",
                "FUN_08005d48": "execute_function_3",
                "FUN_08005dac": "execute_function_4"
            },
            "code": "int set_flags_08006186(int *flags_ptr, int param_2, int flag_type) {\n    if (*(char *)(flags_ptr + 0xf) != '\\x01') {\n        *(undefined *)(flags_ptr + 0xf) = 1;\n        *(undefined *)((int)flags_ptr + 0x3d) = 2;\n        switch(flag_type) {\n            case 0:\n                execute_function_1(*flags_ptr);\n                *(uint *)(*flags_ptr + 0x18) |= 8;\n                *(uint *)(*flags_ptr + 0x18) &= 0xfffffffb;\n                *(uint *)(*flags_ptr + 0x18) |= *(uint *)(param_2 + 0x10);\n                break;\n            case 4:\n                execute_function_2(*flags_ptr);\n                *(uint *)(*flags_ptr + 0x18) |= 0x800;\n                *(uint *)(*flags_ptr + 0x18) &= 0xfffffbff;\n                *(uint *)(*flags_ptr + 0x18) |= *(int *)(param_2 + 0x10) << 8;\n                break;\n            case 8:\n                execute_function_3(*flags_ptr);\n                *(uint *)(*flags_ptr + 0x1c) |= 8;\n                *(uint *)(*flags_ptr + 0x1c) &= 0xfffffffb;\n                *(uint *)(*flags_ptr + 0x1c) |= *(uint *)(param_2 + 0x10);\n                break;\n            case 0xc:\n                execute_function_4(*flags_ptr);\n                *(uint *)(*flags_ptr + 0x1c) |= 0x800;\n                *(uint *)(*flags_ptr + 0x1c) &= 0xfffffbff;\n                *(uint *)(*flags_ptr + 0x1c) |= *(int *)(param_2 + 0x10) << 8;\n                break;\n        }\n        *(undefined *)((int)flags_ptr + 0x3d) = 1;\n        *(undefined *)(flags_ptr + 0xf) = 0;\n        return 0;\n    }\n    return 2;\n}",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flags_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "execute_main_function_08007710",
                "FUN_080074e0": "execute_sub_function"
            },
            "code": "void execute_main_function_08007710(void)\n{\n  execute_sub_function();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "execute_main_function_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "bVar1": "current_byte",
                "FUN_08003376": "process_byte",
                "FUN_080033cc": "reset_data",
                "LAB_0800359c": "label_1",
                "PTR_08002e08": "code",
                "PTR_08002e14": "undefined",
                "PTR_08002e18": "undefined4",
                "PTR_08002e1c": "byte",
                "PTR_08002e20": "int",
                "PTR_08002e24": "char"
            },
            "code": "void process_data_08003474(PTR_08002e20 data_ptr, uPTR_08002e20 data_length)\\n{\\n    PTR_08002e1c current_PTR_08002e1c;\\n\\n    if (*(PTR_08002e24 *)(data_ptr + 0x14) != \"\\0\") {\\n        if (data_length != 0xf7) {\\n            process_PTR_08002e1c(data_ptr, data_length, *(PTR_08002e18 *)(data_ptr + 0x18));\\n            *(PTR_08002e20 *)(data_ptr + 0x18) = *(PTR_08002e20 *)(data_ptr + 0x18) + 1;\\n            return;\\n        }\\n        *(PTR_08002e14 *)(data_ptr + 0x14) = 0;\\n        reset_data();\\n        return;\\n    }\\n    if ((*(PTR_08002e20 *)(data_ptr + 0x10) == 0) || (0x7f < (PTR_08002e20)data_length)) {\\n        if ((PTR_08002e20)data_length < 0xf0) {\\n            *(PTR_08002e1c *)(data_ptr + 0xd) = (PTR_08002e1c)data_length & 0xf;\\n            data_length = data_length & 0xf0;\\n        }\\n        if (data_length == 0xf0) {\\n            *(PTR_08002e14 *)(data_ptr + 0x14) = 1;\\n            *(PTR_08002e18 *)(data_ptr + 0x18) = 0;\\n            return;\\n        }\\n        if (data_length < 0xf1) {\\n            if (data_length != 0xc0) {\\n                if (data_length < 0xc1) {\\n                    if (data_length != 0x90) {\\n                        return;\\n                    }\\n                }\\n                else {\\n                    if (data_length == 0xd0) goto LAB_0800359c;\\n                    if (data_length != 0xe0) {\\n                        return;\\n                    }\\n                }\\nLAB_08003586:\\n                *(PTR_08002e18 *)(data_ptr + 0x10) = 2;\\n                *(PTR_08002e24 *)(data_ptr + 0xc) = (PTR_08002e24)data_length;\\n                return;\\n            }\\nLAB_0800359c:\\n            *(PTR_08002e18 *)(data_ptr + 0x10) = 1;\\n            *(PTR_08002e24 *)(data_ptr + 0xc) = (PTR_08002e24)data_length;\\n            return;\\n        }\\n        if (data_length != 0xf9) {\\n            if (0xf9 < data_length) {\\n                if (data_length == 0xff) {\\n                    process_reset(data_ptr);\\n                    return;\\n                }\\n                return;\\n            }\\n            if (1 < data_length - 0xf4) {\\n                return;\\n            }\\n            goto LAB_08003586;\\n        }\\n        if (*(PTR_08002e08 **)(data_ptr + 0x74) != (PTR_08002e08 *)0x0) {\\n            (**(PTR_08002e08 **)(data_ptr + 0x74))(*(PTR_08002e18 *)(data_ptr + 0x38));\\n        }\\n    }\\n    else {\\n        *(PTR_08002e20 *)(data_ptr + 0x10) = *(PTR_08002e20 *)(data_ptr + 0x10) + -1;\\n        process_PTR_08002e1c(data_ptr);\\n        if ((*(PTR_08002e20 *)(data_ptr + 0x10) == 0) && (current_PTR_08002e1c = *(PTR_08002e1c *)(data_ptr + 0xc), current_PTR_08002e1c != 0)) {\\n            if (current_PTR_08002e1c == 0xd0) {\\n                if (*(PTR_08002e08 **)(data_ptr + 0x58) != (PTR_08002e08 *)0x0) {\\n                    (**(PTR_08002e08 **)(data_ptr + 0x58))(*(PTR_08002e18 *)(data_ptr + 0x28),*(PTR_08002e14 *)(data_ptr + 0xd),**(PTR_08002e14 **)(data_ptr + 4));\\n                }\\n            }\\n            else if (current_PTR_08002e1c < 0xd1) {\\n                if (current_PTR_08002e1c == 0x90) {\\n                    if (*(PTR_08002e08 **)(data_ptr + 0x50) != (PTR_08002e08 *)0x0) {\\n                        (**(PTR_08002e08 **)(data_ptr + 0x50))(*(PTR_08002e18 *)(data_ptr + 0x20),*(PTR_08002e14 *)(data_ptr + 0xd),(uPTR_08002e20)(*(PTR_08002e1c **)(data_ptr + 4))[1] + (uPTR_08002e20)**(PTR_08002e1c **)(data_ptr + 4) * 0x80);\\n                    }\\n                }\\n                else if ((current_PTR_08002e1c == 0xc0) && (*(PTR_08002e08 **)(data_ptr + 0x54) != (PTR_08002e08 *)0x0)) {\\n                    (**(PTR_08002e08 **)(data_ptr + 0x54))(*(PTR_08002e18 *)(data_ptr + 0x24),*(PTR_08002e14 *)(data_ptr + 0xd),**(PTR_08002e14 **)(data_ptr + 4));\\n                }\\n            }\\n            else if (current_PTR_08002e1c == 0xf4) {\\n                if (*(PTR_08002e08 **)(data_ptr + 0x5c) != (PTR_08002e08 *)0x0) {\\n                    (**(PTR_08002e08 **)(data_ptr + 0x5c))(*(PTR_08002e18 *)(data_ptr + 0x2c),(*(PTR_08002e14 **)(data_ptr + 4))[1],**(PTR_08002e14 **)(data_ptr + 4));\\n                }\\n            }\\n            else if (current_PTR_08002e1c == 0xf5) {\\n                if (*(PTR_08002e08 **)(data_ptr + 0x60) != (PTR_08002e08 *)0x0) {\\n                    (**(PTR_08002e08 **)(data_ptr + 0x60))(*(PTR_08002e18 *)(data_ptr + 0x30),(*(PTR_08002e14 **)(data_ptr + 4))[1],**(PTR_08002e14 **)(data_ptr + 4));\\n                }\\n            }\\n            else if ((current_PTR_08002e1c == 0xe0) && (*(PTR_08002e08 **)(data_ptr + 0x4c) != (PTR_08002e08 *)0x0)) {\\n                (**(PTR_08002e08 **)(data_ptr + 0x4c))(*(PTR_08002e18 *)(data_ptr + 0x1c),*(PTR_08002e14 *)(data_ptr + 0xd),(uPTR_08002e20)(*(PTR_08002e1c **)(data_ptr + 4))[1] + (uPTR_08002e20)**(PTR_08002e1c **)(data_ptr + 4) * 0x80);\\n            }\\n            *(PTR_08002e14 *)(data_ptr + 0xc) = 0;\\n            return;\\n        }\\n    }\\n    return;\\n}",
            "called": [
                "FUN_0800344a",
                "FUN_080033cc",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_data_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_data_from_param_08006b7c",
                "param_1": "param",
                "DAT_08006ba4": "data_0",
                "DAT_08006bb4": "data_1",
                "DAT_08006ba8": "data_2",
                "DAT_08006bac": "data_3",
                "DAT_08006bb0": "data_4"
            },
            "code": "int get_data_from_param_08006b7c(int param) {\n  switch(param) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_data_from_param_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "dest",
                "param_2": "num",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "current_digit",
                "cVar1": "digit",
                "local_15": "buffer"
            },
            "code": "undefined4 convert_base_08008e7c(int *dest, uint num, uint base)\n{\n  char digit;\n  undefined4 result;\n  uint quotient, remainder;\n  char buffer[9];\n  buffer[1] = 0;\n  if ((int)base < 2)\n    base = 10;\n  char *current_digit = buffer + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - (quotient * base & 0xff) & 0xff;\n    current_digit--;\n    digit = (char)remainder;\n    if (remainder < 10)\n      digit += '0';\n    else\n      digit += '7';\n    *current_digit = digit;\n    num = quotient;\n  } while (quotient != 0);\n  if (current_digit == (char *)0x0)\n    result = 0;\n  else {\n    result = FUN_08000178(current_digit);\n    result = (**(code **)(*dest + 4))(dest, current_digit, result);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "check_and_update_flags_08003aa0",
                "param_1": "params",
                "iVar1": "result",
                "puVar2": "ptr",
                "DAT_08003b84": "DAT_08003b84",
                "DAT_08003b88": "DAT_08003b88"
            },
            "code": "int check_and_update_flags_08003aa0(undefined4 *params) {\n  int result;\n  bool flag = *(char *)(params + 9) == '\\x01';\n  if (!flag) {\n    *(undefined *)(params + 9) = 1;\n    result = FUN_08003a20();\n    if (result == 0) {\n      params[10] = (params[10] & 0xfffffcfe) | 0x100;\n      undefined4 *ptr = (undefined4 *)*params;\n      bool is_dat_08003b84 = ptr == DAT_08003b84;\n      if (is_dat_08003b84 && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        params[10] |= 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          params[10] = (params[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        params[10] &= 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          params[10] = (params[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((params[10] & 0x1000) == 0) {\n        params[0xb] = 0;\n      }\n      else {\n        params[0xb] &= 0xfffffff9;\n      }\n      *(undefined *)(params + 9) = 0;\n      *ptr = 0xfffffffd;\n      params = (undefined4 *)*params;\n      bool is_dat_08003b84_2 = params[2] & 0xe0000 == 0xe0000;\n      if (is_dat_08003b84_2 && (params != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0))) {\n        params[2] |= 0x500000;\n      }\n      else {\n        params[2] |= 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(params + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_flags_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "set_data_08003ce8",
                "param_1": "data",
                "iVar1": "result"
            },
            "code": "int set_data_08003ce8(int *data) {\n  int result;\n  if (data == NULL) {\n    result = 1;\n  }\n  else {\n    data[10] |= 2;\n    result = do_something();\n    if (result == 0) {\n      *(int *)*data = -32;\n      *(unsigned int *)(*data + 4) &= DAT_08003ddc;\n      *(unsigned int *)(*data + 8) &= DAT_08003de0;\n      *(unsigned int *)(*data + 12) &= 4278190080;\n      *(unsigned int *)(*data + 16) &= -1073741824;\n      *(unsigned int *)(*data + 20) &= -1048576;\n      *(unsigned int *)(*data + 24) &= -1048576;\n      *(unsigned int *)(*data + 28) &= -1048576;\n      *(unsigned int *)(*data + 44) &= 4278190080;\n      *(unsigned int *)(*data + 48) &= -1073741824;\n      *(unsigned int *)(*data + 52) &= -1073741824;\n      *(unsigned int *)(*data + 56) &= 4286578688;\n      *(unsigned int *)(*data + 60) &= 4286578688;\n      do_something_else(data);\n      data[11] = 0;\n      data[10] = 0;\n    }\n    *(char *)(data + 9) = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_data_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_parameters_08005fe8",
                "param_1": "parameters",
                "param_2": "updates",
                "uVar1": "original_value",
                "DAT_0800605c": "ptr_0800605c"
            },
            "code": "void update_parameters_08005fe8(uint *parameters, uint *updates) {\n  uint original_value = *parameters;\n  if ((((parameters == DAT_0800605c) || (parameters == (uint *)0x40000000)) ||\n      (parameters == DAT_0800605c - 0x4a00)) || (parameters == DAT_0800605c - 0x4900)) {\n    original_value = original_value & 0xffffff8f | updates[1];\n  }\n  if (((parameters == DAT_0800605c) || (parameters == (uint *)0x40000000)) ||\n     ((parameters == DAT_0800605c - 0x4a00 || (parameters == DAT_0800605c - 0x4900)))) {\n    original_value = original_value & 0xfffffcff | updates[3];\n  }\n  *parameters = original_value & 0xffffff7f | updates[5];\n  parameters[0xb] = updates[2];\n  parameters[10] = *updates;\n  if (parameters == DAT_0800605c) {\n    parameters[0xc] = updates[4];\n  }\n  parameters[5] = 1;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "update_parameters_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "find_offset_08008804",
                "param_1": "offset",
                "iVar1": "current_offset",
                "puVar2": "address"
            },
            "code": "int find_offset_08008804(int offset)\n{\n  int current_offset = *(int *)PTR_DAT_08008834;\n  undefined *address = (undefined *)(offset + current_offset);\n  if (address <= &stack0x00000000) {\n    *(undefined **)PTR_DAT_08008834 = address;\n    return current_offset;\n  }\n  *(undefined4 *)PTR_DAT_0800883c = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "find_offset_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "find_value_in_array_0800738a",
                "param_1": "value_to_find",
                "param_2": "array",
                "undefined4": "int",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int find_value_in_array_0800738a(int value_to_find, char *array) {\n  if (value_to_find == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value_to_find == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_input_08004e3c",
                "param_1": "input_data",
                "puVar1": "current_data",
                "puVar2": "data_ptr",
                "input_length": "input_length"
            },
            "code": "int process_input_08004e3c(uint **input_data) {\n    uint *current_data = input_data[11];\n    short input_length = *(short *)((int)input_data + 0x2a);\n\n    if (input_length == 3) {\n        if (((current_data == (uint *)0x4) || (current_data == (uint *)0x8)) || (current_data == (uint *)0xffff0000)) {\n            **input_data = **input_data & 0xfffffbff;\n        }\n\n        uint *data_ptr = input_data[9];\n        input_data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*input_data)[4];\n        input_length--;\n    }\n    else if (input_length == 2) {\n        if (((current_data == (uint *)0x4) || (current_data == (uint *)0x8)) || (current_data == (uint *)0xffff0000)) {\n            (*input_data)[1] = (*input_data)[1] & 0xfffffcff;\n            **input_data = **input_data | 0x200;\n        }\n        else {\n            if (current_data == (uint *)0x2) {\n                **input_data = **input_data | 0x400;\n            }\n            else {\n                **input_data = **input_data & 0xfffffbff;\n            }\n            (*input_data)[1] = (*input_data)[1] & 0xfffffcff;\n        }\n\n        uint *data_ptr = input_data[9];\n        input_data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*input_data)[4];\n        input_length--;\n\n        data_ptr = input_data[9];\n        input_data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*input_data)[4];\n        input_length--;\n\n        *(undefined *)((int)input_data + 0x3d) = 0x20;\n        input_data[12] = (uint *)0x0;\n\n        if (*(char *)((int)input_data + 0x3e) == '@') {\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            do_nothing_08004d6a();\n        }\n        else {\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            do_nothing_08004a20();\n        }\n    }\n    else {\n        uint *data_ptr = input_data[9];\n        input_data[9] = (uint *)((int)data_ptr + 1);\n        *(char *)data_ptr = (char)(*input_data)[4];\n        input_length--;\n    }\n\n    return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "execute_function_with_param_080091a0",
                "param_1": "param_1",
                "FUN_080091d8": "execute_function",
                "PTR_PTR_DAT_080091ac": "PTR_PTR_DAT_080091ac"
            },
            "code": "void execute_function_with_param_080091a0(void* function_pointer, undefined4 param_1)\n{\n  execute_function(*(undefined4 *)PTR_PTR_DAT_080091ac, param_1);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "execute_function_with_param_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "call_function_with_params_08002a1c",
                "param_1": "function",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "FUN_08002968": "call_function"
            },
            "code": "void call_function_with_params_08002a1c(void* function, undefined* param1, void* param2, void* param3) {\n  call_function(function, param1, param2, param3, param3);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "call_function_with_params_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_from_input_08007718",
                "param_1": "input_value",
                "return": "result"
            },
            "code": "int subtract_four_from_input_08007718(int input_value) {\n\tint result = input_value - 4;\n\treturn result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_from_input_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "check_param_08002948",
                "param_1": "value",
                "param_2": "limit",
                "FUN_0800291c": "execute_function"
            },
            "code": "void check_param_08002948(int value, int limit) {\n  if (value != 1) {\n    return;\n  }\n  if (limit == 0xffff) {\n    execute_function(PTR_DAT_08002964);\n  }\n  return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "check_param_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_permissions_and_set_flag_08009e64",
                "param_1": "file_descriptor",
                "param_2": "file_info_offset",
                "param_3": "permission_flag",
                "param_4": "flag_pointer",
                "iVar1": "permission_check_result",
                "uVar2": "permission_flag_value",
                "auStack_4c": "file_permissions_buffer",
                "local_48": "file_permissions"
            },
            "code": "int check_permissions_and_set_flag_08009e64(int file_descriptor, int file_info_offset, int* permission_flag, uint* flag_pointer) {\n    int file_permissions = *(short*)(file_info_offset + 0xe);\n    int permission_check_result = check_file_permissions(file_descriptor, file_permissions);\n\n    if (file_permissions < 0 || permission_check_result < 0) {\n        *flag_pointer = 0;\n        if ((int)((uint)*(ushort*)(file_info_offset + 0xc) << 0x18) < 0) {\n            *permission_flag = 0x40;\n            goto LAB_08009ea4;\n        }\n    }\n    else {\n        *flag_pointer = (uint)((file_permissions & 0xf000) == 0x2000);\n    }\n    *permission_flag = 0x400;\n\nLAB_08009ea4:\n    return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_permissions_and_set_flag_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "calculateAndUpdateSize_08002acc",
                "param_1": "currentSize",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "dataPointer",
                "iVar2": "calculatedSize",
                "uVar3": "newSize"
            },
            "code": "void calculateAndUpdateSize_08002acc(uint currentSize, undefined4 arg2, undefined4 arg3, undefined4 arg4)\n{\n  undefined *dataPointer;\n  int calculatedSize;\n  undefined newSize;\n  dataPointer = PTR_DAT_08002afc;\n  if ((byte)*PTR_DAT_08002af8 < currentSize) {\n    if (currentSize < 0x20) {\n      currentSize = 0x20;\n    }\n    calculatedSize = FUN_08009908(*(undefined4 *)PTR_DAT_08002afc,currentSize,arg3,(uint)(byte)*PTR_DAT_08002af8,arg4);\n    *(int *)dataPointer = calculatedSize;\n    if (calculatedSize == 0) {\n      newSize = 0;\n    }\n    else {\n      newSize = (undefined)currentSize;\n    }\n    *PTR_DAT_08002af8 = newSize;\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "calculateAndUpdateSize_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "value",
                "param_2": "shift_amount",
                "PTR_DAT_08002a48": "data_pointer_1",
                "PTR_DAT_08002a4c": "data_pointer_2",
                "PTR_DAT_08002a50": "data_pointer_3",
                "PTR_DAT_08002a54": "data_pointer_4"
            },
            "code": "void initialize_data_08002a30(int value, int shift_amount)\n{\n  *PTR_DAT_08002a48 = 1;\n  *PTR_DAT_08002a4c = (char)(shift_amount << 1);\n  *PTR_DAT_08002a50 = 0;\n  *PTR_DAT_08002a54 = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_len",
                "param_2": "input_byte",
                "param_3": "input_array",
                "pbVar2": "current_byte",
                "pbVar3": "array_start",
                "uVar4": "output_byte",
                "iVar1": "array_index"
            },
            "code": "uint process_input_0800932c(int input_len, byte input_byte, byte **input_array)\n{\n  int array_index = 0;\n  byte *current_byte = NULL;\n  byte *array_start = NULL;\n  byte *array_end = NULL;\n  uint output_byte = 0;\n  \n  array_end = input_array[2] + -1;\n  input_array[2] = array_end;\n  \n  if ((-1 >= (int)array_end) && ((int)input_array[6] > (int)array_end || input_byte == 0xa))\n  {\n    if ((input_len != 0) && (*(int *)(input_len + 0x18) == 0))\n    {\n      check_function();\n    }\n    if (input_array == (byte **)PTR_DAT_08009a74)\n    {\n      input_array = *(byte ***)(input_len + 4);\n    }\n    else if (input_array == (byte **)PTR_DAT_08009a78)\n    {\n      input_array = *(byte ***)(input_len + 8);\n    }\n    else if (input_array == (byte **)PTR_DAT_08009a7c)\n    {\n      input_array = *(byte ***)(input_len + 0xc);\n    }\n    input_array[2] = input_array[6];\n    current_byte = (byte *)(uint)*(ushort *)(input_array + 3);\n    array_index = (int)current_byte << 0x1c;\n    if (((array_index < 0) && (current_byte = input_array[4], current_byte != (byte *)0x0)) || (array_index = check_input(input_len, input_array, array_index, current_byte, array_end), array_index == 0))\n    {\n      output_byte = (uint)input_byte;\n      array_index = (int)*input_array - (int)input_array[4];\n      if ((array_index < (int)input_array[5]) || (array_index = check_function(input_len, input_array), array_index == 0))\n      {\n        input_array[2] = input_array[2] + -1;\n        current_byte = *input_array;\n        *input_array = current_byte + 1;\n        *current_byte = input_byte;\n        if ((byte *)(array_index + 1) != input_array[5])\n        {\n          if (-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1f))\n          {\n            return output_byte;\n          }\n          if (output_byte != 10)\n          {\n            return output_byte;\n          }\n        }\n        array_index = check_function(input_len, input_array);\n        if (array_index == 0)\n        {\n          return output_byte;\n        }\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009d50",
                "FUN_08009a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "execute_function_on_ptr_0800322c",
                "param_1": "ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "function_ptr"
            },
            "code": "void execute_function_on_ptr_0800322c(void* ptr, int param_2, int param_3) {\n  void (*function_ptr)(void*, int);\n  function_ptr = *(void (**)(void*, int))ptr;\n  if (function_ptr != NULL) {\n    function_ptr(ptr, 0xf9);\n    (*(void (***) (void*)) *(void**)ptr)((void*)ptr, param_2);\n    (*(void (***) (void*)) *(void**)ptr)((void*)ptr, param_3);\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "execute_function_on_ptr_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "string_ptr",
                "pcVar2": "string_start",
                "pcVar3": "substring_start"
            },
            "code": "char* find_substring_080099a4(char* string, char* substring){\n    char* string_ptr;\n    char* substring_ptr;\n    char* string_start;\n    char* substring_start;\n    \n    if (*string == '\\0') {\n        if (*substring != '\\0') {\n            string = NULL;\n        }\n        return string;\n    }\n    \n    do {\n        string_ptr = string;\n        if (*string_ptr == '\\0') {\n            return NULL;\n        }\n        substring_start = substring - 1;\n        string_start = string_ptr - 1;\n        do {\n            substring_start++;\n            if (*substring_start == '\\0') {\n                return string_ptr;\n            }\n            string_start++;\n            string = string_ptr + 1;\n        } while (*string_start == *substring_start);\n    } while( true );\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_value_from_pointer_08005a1c",
                "undefined4": "int",
                "PTR_DAT_08005a24": "value_pointer",
                "*(undefined4 *)PTR_DAT_08005a24": "*value_pointer"
            },
            "code": "int get_value_from_pointer_08005a1c() {\n  int* PTR_DAT_08005a24 = (int*)PTR_DAT_08005a24;\n  int value = *(undefined4 *)PTR_DAT_08005a24;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n    FUN_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    FUN_08002f1e(PTR_DAT_08002044,0xf0);\n    FUN_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_08002044,0);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,0xb);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n        FUN_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = FUN_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = FUN_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,2);\n        FUN_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,3);\n        FUN_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        FUN_08002f1e(PTR_DAT_080022e8,4);\n        FUN_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = FUN_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        FUN_08002f1e(PTR_DAT_080022e8,6);\n        FUN_08002f1e(puVar4,1);\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      FUN_08002f1e(PTR_DAT_080022e8,0xf0);\n      FUN_08002f1e(puVar5,0x6e);\n      FUN_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = FUN_08002fa0(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar6);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        FUN_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = FUN_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = FUN_08002fba(puVar5,bVar1);\n          FUN_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = FUN_08002fba(PTR_DAT_080022e8,bVar1);\n          FUN_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      FUN_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      FUN_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = FUN_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = FUN_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = FUN_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          FUN_08000588(uVar12);\n        }\n        FUN_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      FUN_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        FUN_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          FUN_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        FUN_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        FUN_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        FUN_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      FUN_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_08002f14",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000a64",
                "FUN_08002a30",
                "FUN_08001bf8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_data_from_pointer_08003760",
                "PTR_DAT_08003768": "PTR_DATA"
            },
            "code": "int get_data_from_pointer_08003760() {\n    int *data_pointer = PTR_DAT_08003768;\n    return *data_pointer;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08003b8c",
                "FUN_08003e20",
                "FUN_080066e8",
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_0800723c",
                "FUN_0800376c",
                "FUN_080067ac",
                "FUN_08007f0e",
                "FUN_08005460",
                "FUN_08005aa4",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "check_param_08007320",
                "param_1": "input_param",
                "uVar1": "result",
                "FUN_08007306": "get_result"
            },
            "code": "int check_param_08007320(int input_param) {\n  int result = 0;\n  if (input_param != -1) {\n    result = get_result();\n  }\n  return result;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_param_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "updateData_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "param_4",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2"
            },
            "code": "void updateData_08000be8(int index, uint32_t mask, int value, undefined4 param_4)\n{\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  data_ptr_2 = (undefined *)((byte)PTR_DAT_08000c0c[index] & mask);\n  data_ptr_1 = PTR_DAT_08000c0c;\n  if ((value != 0) || (data_ptr_1 = (undefined *)(uint)(byte)PTR_DAT_08000c10[index], data_ptr_2 != data_ptr_1)) {\n    FUN_08002efe(PTR_DAT_08000c14,index,data_ptr_2,data_ptr_1,param_4);\n    PTR_DAT_08000c10[index] = (char)data_ptr_2;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "updateData_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "validate_input_and_set_values_08003fd8",
                "param_1": "input",
                "puVar1": "data_pointer",
                "DAT_08003ffc": "data_pointer",
                "DAT_08004000": "memory_address"
            },
            "code": "int validate_input_and_set_values_08003fd8(int input)\n{\n  int *DAT_08003ffc;\n  DAT_08003ffc = DAT_08003ffc;\n  if (input - 1U < 0x1000000) {\n    DAT_08003ffc[1] = input - 1U;\n    *(undefined *)(DAT_08004000 + 0x23) = 0xf0;\n    DAT_08003ffc[2] = 0;\n    *DAT_08003ffc = 7;\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "validate_input_and_set_values_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_data_0800307a",
                "param_1": "encoder",
                "param_2": "data_length",
                "param_3": "data",
                "param_4": "max_output_length",
                "uVar1": "current_byte",
                "uVar2": "bit_offset",
                "uVar3": "output_length",
                "uVar4": "unused_variable"
            },
            "code": "void encode_data_0800307a(uint32_t *encoder, uint32_t data_length, uint8_t *data, uint32_t max_output_length) {\n  uint32_t current_byte = (uint32_t)*data;\n  if (max_output_length == 0) {\n    max_output_length = 0xffffffff;\n  }\n  uint32_t output_length = 0;\n  uint32_t bit_offset = 0;\n  while ((output_length < data_length) && (output_length < max_output_length)) {\n    (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder, ((uint32_t)data[output_length] << (bit_offset & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint32_t)data[output_length] >> (7 - bit_offset & 0xff) & 0xff;\n    bit_offset = bit_offset + 1;\n    while ((output_length = output_length + 1, 6 < bit_offset && (output_length < max_output_length))) {\n      (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder, current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_offset = bit_offset - 7;\n    }\n  }\n  if ((bit_offset != 0) && (output_length < max_output_length)) {\n    (***(code ***)(uint32_t *)*encoder)((uint32_t *)*encoder, (1 << (bit_offset & 0xff)) - 1U & current_byte);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce",
                "FUN_08003158",
                "FUN_0800325a"
            ],
            "imported": false,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "execute_function_at_address_if_not_null_0800319e",
                "param_1": "function_address_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "puVar1": "function_ptr",
                "local_a": "modified_param_3",
                "FUN_0800307a": "update_function_address"
            },
            "code": "void execute_function_at_address_if_not_null_0800319e(uint32_t *function_address_ptr, uint32_t param_2, uint16_t param_3)\n{\n  uint32_t *function_ptr = (uint32_t *)*function_address_ptr;\n  if (function_ptr != NULL) {\n    uint8_t modified_param_2 = param_2 & 0xf | 0x90;\n    (**(void (**)(uint32_t *, uint8_t)) *function_ptr)(function_ptr, modified_param_2);\n    update_function_address(function_address_ptr, 2, &param_3);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "execute_function_at_address_if_not_null_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_value_at_offset_08008d00",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "max_value",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "code": "void set_value_at_offset_08008d00(int offset, uint8_t value)\n{\n  uint8_t max_value = (offset < 0x3c) ? PTR_DAT_08008d14[offset] : 0xff;\n  *(uint8_t *)(offset + 0x12d) = max_value;\n  code *jumptable = (code *)PTR_DAT_08008d0c;\n  jumptable();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "call_function_with_param_08009190",
                "param_1": "param",
                "PTR_PTR_DAT_0800919c": "function_ptr",
                "FUN_08009270": "func"
            },
            "code": "void call_function_with_param_08009190(void* PTR_PTR_DAT_0800919c, int param) {\n  void (*func)(int) = (void (*)(int))PTR_PTR_DAT_0800919c;\n  func(param);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "call_function_with_param_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "decode_message_08004b82",
                "param_1": "message",
                "cVar1": "message_type",
                "puVar2": "data",
                "do_nothing_08004b80": "do_nothing_1",
                "do_nothing_08004a1e": "do_nothing_2"
            },
            "code": "uint decode_message_08004b82(uint **message)\n{\n    char message_type = *(char *)((int)message + 0x3d);\n    uint *data = message[0xb];\n    if ((*(short *)(message + 10) == 0) && (message_type == '!')) {\n        if ((data == (uint *)0x4) || ((data == (uint *)0x8 || (data == (uint *)0xffff0000)))) {\n            (*message)[1] = (*message)[1] & 0xfffff8ff;\n            **message = **message | 0x200;\n            message[0xc] = (uint *)0x0;\n            *(undefined *)((int)message + 0x3d) = 0x20;\n            if (*(char *)((int)message + 0x3e) == '@') {\n                *(undefined *)((int)message + 0x3e) = 0;\n                do_nothing_08004b80();\n            }\n            else {\n                *(undefined *)((int)message + 0x3e) = 0;\n                do_nothing_08004a1e();\n            }\n        }\n        else {\n            (*message)[1] = (*message)[1] & 0xfffff8ff;\n            message[0xc] = (uint *)0x11;\n            *(undefined *)((int)message + 0x3e) = 0;\n            *(undefined *)((int)message + 0x3d) = 0x20;\n            do_nothing_08004a1e();\n        }\n    }\n    else if ((message_type == '!') || ((*(char *)((int)message + 0x3e) == '@' && (message_type == '\"')))) {\n        if (*(short *)((int)message + 0x2a) == 0) {\n            (*message)[1] = (*message)[1] & 0xfffffbff;\n        }\n        else if (*(char *)((int)message + 0x3e) == '@') {\n            if (message[0x14] == (uint *)0x0) {\n                if (message[0x13] == (uint *)0x1) {\n                    (*message)[4] = (uint)message[0x12] & 0xff;\n                    message[0x14] = (uint *)((int)message[0x14] + 2);\n                }\n                else {\n                    (*message)[4] = (uint)((int)message[0x12] << 0x10) >> 0x18;\n                    message[0x14] = (uint *)((int)message[0x14] + 1);\n                }\n            }\n            else if (message[0x14] == (uint *)0x1) {\n                (*message)[4] = (uint)message[0x12] & 0xff;\n                message[0x14] = (uint *)((int)message[0x14] + 1);\n            }\n            else if (message[0x14] == (uint *)0x2) {\n                if (*(char *)((int)message + 0x3d) == '\"') {\n                    **message = **message | 0x100;\n                }\n                else if (*(char *)((int)message + 0x3d) == '!') {\n                    uint *byte_data = message[9];\n                    message[9] = (uint *)((int)byte_data + 1);\n                    (*message)[4] = (uint)*(byte *)byte_data;\n                    *(short *)((int)message + 0x2a) = *(short *)((int)message + 0x2a) + -1;\n                }\n            }\n        }\n        else {\n            uint *byte_data = message[9];\n            message[9] = (uint *)((int)byte_data + 1);\n            (*message)[4] = (uint)*(byte *)byte_data;\n            *(short *)((int)message + 0x2a) = *(short *)((int)message + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "decode_message_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "search_value",
                "param_2": "array_size",
                "iVar1": "result",
                "iVar2": "last_occurrence",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "int find_last_occurrence_0800997e(int search_value, int array_size, undefined4 param_3, undefined4 param_4)\n{\n  int last_occurrence = -1;\n  if (array_size != 0) {\n    int current_index = 0;\n    while (current_index < array_size) {\n      int result = FUN_08009938(search_value, array_size, param_3, current_index, param_4);\n      if (result != 0) {\n        current_index = result + 1;\n        last_occurrence = result;\n      } else {\n        current_index = array_size;\n      }\n    }\n    return last_occurrence;\n  }\n  int result = FUN_08009938();\n  return result;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurrence_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "validate_input_08002dbc",
                "param_1": "input_value",
                "param_2": "flag_value",
                "FUN_08002ce0": "execute_function"
            },
            "code": "void validate_input_08002dbc(int input_value, int flag_value) {\n    if (input_value != 1) {\n        return;\n    }\n    if (flag_value == 0xffff) {\n        execute_function(PTR_DAT_08002dd8);\n    }\n    return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "validate_input_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "generate_string_08002e44",
                "param_1": "string_buffer",
                "param_2": "input_string",
                "param_3": "undefined_param_3",
                "param_4": "undefined_param_4",
                "bVar1": "string_length",
                "cVar2": "character",
                "iVar3": "position_in_input_string",
                "iVar4": "slash_position",
                "puVar5": "string_buffer_pointer"
            },
            "code": "void generate_string_08002e44(int string_buffer, int input_string, undefined param_3, undefined param_4)\n{\n  byte string_length;\n  char character;\n  int position_in_input_string;\n  int slash_position;\n  undefined *string_buffer_pointer;\n  \n  position_in_input_string = get_substring_position(input_string, \"cpp\");\n  slash_position = get_substring_position(input_string, \"/\");\n  if (slash_position == 0) {\n    slash_position = get_substring_position(input_string, \"\\\");\n  }\n  if (slash_position != 0) {\n    input_string = slash_position + 1;\n  }\n  if (position_in_input_string == 0) {\n    character = get_character(input_string);\n    *(char *)(string_buffer + 0xc4) = character + '\\x02';\n  }\n  else {\n    *(char *)(string_buffer + 0xc4) = ((char)position_in_input_string - (char)input_string) + '\\x02';\n  }\n  allocate_memory(*(undefined4 *)(string_buffer + 200));\n  string_length = *(byte *)(string_buffer + 0xc4);\n  string_buffer_pointer = (undefined *)allocate_memory(string_length + 1);\n  *(undefined **)(string_buffer + 200) = string_buffer_pointer;\n  string_buffer_pointer[string_length] = 0;\n  *string_buffer_pointer = param_3;\n  string_buffer_pointer[1] = param_4;\n  copy_substring(string_buffer_pointer + 2, input_string, string_length - 2);\n  return;\n}",
            "called": [
                "FUN_080091a0",
                "FUN_0800997e",
                "FUN_080099a4",
                "FUN_08009954",
                "FUN_08009190",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "generate_string_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "send_data_to_server_0800242c",
                "param_1": "socket_fd",
                "param_2": "timeout_ms",
                "param_3": "data_size",
                "param_4": "data_buffer",
                "PTR_LAB_08002444_1_08002440": "flags"
            },
            "code": "void send_data_to_server_0800242c(int socket_fd, int timeout_ms, int data_size, const void* data_buffer, int PTR_LAB_08002444_1_08002440) {\n  send(socket_fd, data_buffer, data_size, PTR_LAB_08002444_1_08002440);\n  struct timeval tv;\n  tv.tv_sec = timeout_ms / 1000;\n  tv.tv_usec = (timeout_ms % 1000) * 1000;\n  setsockopt(socket_fd, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof tv);\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "process_data_080058d2",
                "param_1": "data",
                "param_2": "length",
                "puVar1": "buffer",
                "iVar2": "time_start",
                "iVar3": "time_current",
                "uVar4": "mode",
                "config": "DAT_08005a10",
                "buffer": "DAT_08005a0c",
                "output": "output"
            },
            "code": "uint8_t process_data_080058d2(uint32_t *data, uint32_t length) {\n  uint32_t *config = DAT_08005a10;\n  uint32_t *buffer = DAT_08005a0c;\n  uint32_t time_start = FUN_08003760();\n\n  if ((*data & 2) != 0) {\n    config[1] = (config[1] & 0xffffff0f) | data[2];\n  }\n\n  if ((*data & 1) != 0) {\n    uint32_t mode = data[1];\n\n    if (mode == 1) {\n      if ((*config & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((mode != 2) && ((*config & 2) == 0)) {\n      return 1;\n    }\n\n    config[1] = mode | (config[1] & 0xfffffffc);\n\n    if (mode == 1) {\n      while ((config[1] & 0xc) != 4) {\n        uint32_t time_current = FUN_08003760();\n        if (5000 < (time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n    else if (mode == 2) {\n      while ((config[1] & 0xc) != 8) {\n        uint32_t time_current = FUN_08003760();\n        if (5000 < (time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((config[1] & 0xc) != 0) {\n        uint32_t time_current = FUN_08003760();\n        if (5000 < (time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n  }\n\n  if ((length < (*buffer & 7)) &&\n     (*buffer = (*buffer & 0xfffffff8) | length, length != (*buffer & 7))) {\n    return 1;\n  }\n\n  if ((*data & 4) != 0) {\n    config[1] = (config[1] & 0xfffff8ff) | data[3];\n  }\n\n  if ((*data & 8) != 0) {\n    config[1] = (config[1] & 0xffffc7ff) | (data[4] << 3);\n  }\n\n  uint32_t output = FUN_08005840();\n  *(uint32_t *)PTR_DAT_08005a18 = output >> PTR_DAT_08005a14[(config[1] << 0x18) >> 0x1c];\n  FUN_080036d8(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080036d8",
                "FUN_08005840"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "process_data_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "print_welcome_message_08002c00",
                "FUN_08002b68": "display_splash_screen"
            },
            "code": "void print_welcome_message_08002c00(void)\n{\n  display_splash_screen();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "print_welcome_message_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "decode_and_write_08003f30",
                "param_1": "position",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shift",
                "uVar2": "shift_complement",
                "DAT_08003f8c": "data_pointer",
                "DAT_08003f90": "other_pointer",
                "data_masked": "masked_data"
            },
            "code": "void decode_and_write_08003f30(uint32_t position, uint32_t mask, uint32_t data) {\n    uint32_t shift = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n    uint32_t shift_complement = 7 - shift;\n    if (shift_complement > 3) {\n        shift_complement = 4;\n    }\n    if ((shift + 4) < 7) {\n        shift = 0;\n    }\n    else {\n        shift = shift - 3;\n    }\n    uint32_t data_masked = (mask & (1 << (shift_complement & 0xff)) - 1U) << (shift & 0xff) |\n                          (1 << (shift & 0xff)) - 1U & data;\n    if ((int32_t)position < 0) {\n        *(char *)(DAT_08003f90 + (position & 0xf)) = (char)(data_masked << 4);\n    }\n    else {\n        *(char *)(position + 0xe000e400) = (char)(data_masked << 4);\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_08007648",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "decode_and_write_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "decrement_param_08007f78",
                "param_1": "input_param",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int decrement_param_08007f78(int input_param)\n{\n    int decremented_value = input_param - 4;\n    return decremented_value;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "decrement_param_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_at_index_08006b28",
                "param_1": "num",
                "param_2": "index",
                "PTR_": "ptr",
                "DAT_": "bit"
            },
            "code": "uint get_bit_at_index_08006b28(uint num, int index){\n    uint* PTR_ = (uint*)(index + ((num << 0x18) >> 0x1c) * 4);\n    uint DAT_ = (*PTR_ >> (num & 0xf)) & 1;\n    return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_at_index_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_flag_set_080085dc",
                "param_1": "flag_index",
                "uVar1": "flag_value",
                "PTR_DAT_080085fc": "ptr_data",
                "byte": "byte_value",
                "calculate_flag_value": "calculate_flag_value"
            },
            "code": "bool is_flag_set_080085dc(int flag_index) {\n  uint32_t ptr_offset = *(uint32_t *)(PTR_DAT_080085fc + (uint32_t)*(uint8_t *)(flag_index + 0x44) * 4);\n  uint32_t flag_value = calculate_flag_value(ptr_offset);\n  return (flag_value & 0x21) == 0x21;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_flag_set_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address",
                "* (byte *) (param_1 + 0x3a)": "byte_1",
                "* (byte *) (param_1 + 0x39)": "byte_2"
            },
            "code": "byte combine_bytes_08006b1c(int address) {\n\tbyte byte_1 = *(byte *)(address + 0x3a);\n\tbyte byte_2 = *(byte *)(address + 0x39);\n\treturn byte_1 | byte_2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "execute_function_08008ed6",
                "param_1": "function_ptr",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3"
            },
            "code": "void execute_function_08008ed6(uint32_t *function_ptr, uint32_t parameter_1, uint32_t parameter_2, uint32_t parameter_3) {\n  if (parameter_3 != 0) {\n    execute_function_08008ed6(function_ptr, parameter_1, parameter_2 & 0xff, parameter_3 & 0xff);\n    return;\n  }\n  (**(code **) *function_ptr)(function_ptr, parameter_1 & 0xff, 0, *(code **) *function_ptr, parameter_2);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "execute_function_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "processResult_0800a130",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "dataPointer",
                "iVar2": "status"
            },
            "code": "void processResult_0800a130(int *result, undefined4 param2, undefined4 param3, undefined4 param4)\n{\n  undefined *dataPointer;\n  int status;\n  dataPointer = PTR_DAT_0800a150;\n  *(undefined4 *)PTR_DAT_0800a150 = 0;\n  status = executeFunction(param2, param3, param4, param4, param4);\n  if ((status == -1) && (*(int *)dataPointer != 0)) {\n    *result = *(int *)dataPointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a042",
                "FUN_0800a07a"
            ],
            "imported": false,
            "current_name": "processResult_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "num",
                "cVar1": "bit_count"
            },
            "code": "char count_bits_set_08008f3c(uint num) {\n  char bit_count = 0;\n  while (num != 1) {\n    bit_count++;\n    num = num >> 1;\n  }\n  return bit_count;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "count_bits_set_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "copy_data_to_buffer_08002ef2",
                "param_1": "buffer_offset",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "param_4",
                "FUN_08003158": "copy_to_destination"
            },
            "code": "void copy_data_to_buffer_08002ef2(int buffer_offset, int data, short data_size, int param_4){\n  copy_to_destination(buffer_offset + 0x40, data, data_size, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_value_in_array_08007332",
                "param_1": "value_to_find",
                "param_2": "array_ptr",
                "*param_2": "*array_ptr"
            },
            "code": "int find_value_in_array_08007332(int value_to_find, char *array_ptr) {\n  while (true) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == value_to_find) {\n      break;\n    }\n    array_ptr += 0xc;\n  }\n  return (int)*array_ptr;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_08007332",
                "FUN_0800734a"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "process_data_08006128",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "operation_type",
                "*(char *)(param_1 + 0xf)": "*(char *)(data + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data + 0x3d)",
                "FUN_08005cec": "perform_operation_1",
                "FUN_080060c4": "perform_operation_2",
                "FUN_08005d48": "perform_operation_3",
                "FUN_08005dac": "perform_operation_4"
            },
            "code": "int process_data_08006128(int *data, int data_size, int operation_type)\n{\n  if (*(char *)(data + 0xf) != '\\x01') {\n    *(char *)(data + 0xf) = 1;\n    *(char *)((int)data + 0x3d) = 2;\n    switch(operation_type) {\n    case 0:\n      perform_operation_1(*data);\n      break;\n    case 4:\n      perform_operation_2(*data);\n      break;\n    case 8:\n      perform_operation_3(*data);\n      break;\n    case 0xc:\n      perform_operation_4(*data);\n    }\n    *(char *)((int)data + 0x3d) = 1;\n    *(char *)(data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005cec",
                "FUN_08005d48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "process_data_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_and_clear_memory_08003658",
                "iVar1": "index",
                "puVar2": "destination_ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table_ptr"
            },
            "code": "void copy_and_clear_memory_08003658(void)\n{\n  int index;\n  undefined4 *destination_ptr;\n  code *jump_table_ptr;\n  for (index = 0; PTR_DAT_08003690 + index < PTR_DAT_08003694; index += 4) {\n    *(undefined4 *)(PTR_DAT_08003690 + index) = *(undefined4 *)(DAT_0800368c + index);\n  }\n  for (destination_ptr = (undefined4 *)PTR_DAT_08003698; destination_ptr < PTR_DAT_0800369c; destination_ptr++) {\n    *destination_ptr = 0;\n  }\n  FUN_080073ec();\n  FUN_08009148();\n  jump_table_ptr = (code *)0x800368a;\n  FUN_08008f1c();\n  (*jump_table_ptr)();\n  return;\n}",
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_and_clear_memory_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "check_param_and_return_val_08009a80",
                "*param_1": "*result",
                "*param_2": "*param",
                "uVar1": "value",
                "uVar2": "temp",
                "iVar3": "var1"
            },
            "code": "uint check_param_and_return_val_08009a80(uint* result, uint* param)\n{\n    uint value;\n    ushort temp;\n    int var1 = *(int*)PTR_PTR_DAT_08009b4c;\n    if (var1 != 0 && *(int*)(var1 + 0x18) == 0)\n    {\n        FUN_08009d50(var1);\n    }\n    if (param == (uint*)PTR_DAT_08009b50)\n    {\n        param = *(uint**)(var1 + 4);\n    }\n    else if (param == (uint*)PTR_DAT_08009b54)\n    {\n        param = *(uint**)(var1 + 8);\n    }\n    else if (param == (uint*)PTR_DAT_08009b58)\n    {\n        param = *(uint**)(var1 + 0xc);\n    }\n    temp = *(ushort*)(param + 3);\n    value = (uint)temp;\n    if (-1 < (int)(value << 0x1c))\n    {\n        if (-1 < (int)(value << 0x1b))\n        {\n            *result = 9;\n            goto LAB_08009ab0;\n        }\n        if ((int)(value << 0x1d) < 0)\n        {\n            if ((uint*)param[0xd] != (uint*)0x0)\n            {\n                if ((uint*)param[0xd] != param + 0x11)\n                {\n                    FUN_080091d8(result);\n                }\n                param[0xd] = 0;\n            }\n            *(ushort*)(param + 3) = *(ushort*)(param + 3) & 0xffdb;\n            param[1] = 0;\n            *param = param[4];\n        }\n        *(ushort*)(param + 3) = *(ushort*)(param + 3) | 8;\n    }\n    if (param[4] == 0 && (*(ushort*)(param + 3) & 0x280) != 0x200)\n    {\n        FUN_08009eac(result, param);\n    }\n    temp = *(ushort*)(param + 3);\n    value = temp & 1;\n    if ((temp & 1) == 0)\n    {\n        if (-1 < (int)((uint)temp << 0x1e))\n        {\n            value = param[5];\n        }\n        param[2] = value;\n    }\n    else\n    {\n        param[2] = 0;\n        param[6] = -param[5];\n    }\n    if (param[4] == 0)\n    {\n        temp = *(ushort*)(param + 3);\n        value = (int)(short)temp & 0x80;\n        if (value != 0)\n        {\n            *(ushort*)(param + 3) = temp | 0x40;\n            return 0xffffffff;\n        }\n    }\n    else\n    {\n        value = 0;\n    }\n    return value;\n}",
            "called": [
                "FUN_08009eac",
                "FUN_08009d50",
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "check_param_and_return_val_08009a80"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08005084",
                "FUN_08004a76"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "clear_bits_080062f4",
                "param_1": "bits",
                "param_2": "mask",
                "puVar1": "bit_array"
            },
            "code": "uint32_t clear_bits_080062f4(uint32_t **bits, uint32_t mask) {\n  uint32_t *bit_array = *bits;\n  switch(mask) {\n    case 0x0: bit_array[3] &= 0xfffffffd; break;\n    case 0x4: bit_array[3] &= 0xfffffffb; break;\n    case 0x8: bit_array[3] &= 0xfffffff7; break;\n    case 0xc: bit_array[3] &= 0xffffffef; break;\n  }\n  set_bits(bit_array, mask, 0);\n  if (((bit_array == PTR_DAT_0800638c) && ((bit_array[8] & 0x1111) == 0)) && ((bit_array[8] & 0x444) == 0)) {\n    bit_array[0x11] &= 0xffff7fff;\n  }\n  if (((bit_array[8] & 0x1111) == 0) && ((bit_array[8] & 0x444) == 0)) {\n    *bit_array &= 0xfffffffe;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "clear_bits_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "wait_forever_080073e8"
            },
            "code": "void wait_forever_080073e8(void)\n{\n    while (true) {\n        // do nothing\n    }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "wait_forever_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "add_character_to_buffer_08004a76",
                "param_1": "buffer_ptr",
                "puVar2": "buffer",
                "cVar1": "current_char"
            },
            "code": "int add_character_to_buffer_08004a76(int *buffer_ptr)\n{\n  char current_char;\n  undefined *buffer;\n  current_char = *(char *)((int)buffer_ptr + 0x3d);\n  if (*(short *)((int)buffer_ptr + 0x2a) != 0) {\n    buffer = (undefined *)buffer_ptr[9];\n    buffer_ptr[9] = (int)(buffer + 1);\n    *buffer = (char)*(undefined4 *)(*buffer_ptr + 0x10);\n    *(short *)((int)buffer_ptr + 0x2a) = *(short *)((int)buffer_ptr + 0x2a) + -1;\n    if ((*(short *)((int)buffer_ptr + 0x2a) == 0) && (current_char == '*')) {\n      *(uint *)(*buffer_ptr + 4) = *(uint *)(*buffer_ptr + 4) & 0xfffffbff;\n      buffer_ptr[0xc] = 0x22;\n      *(undefined *)((int)buffer_ptr + 0x3d) = 0x28;\n      do_nothing_08004a74();\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "add_character_to_buffer_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_value_0800267c",
                "param_1": "input_array",
                "param_2": "input_length",
                "iVar1": "calculated_value",
                "*param_1": "*input_array",
                "PTR_DAT_080026ac": "PTR_DAT_080026ac"
            },
            "code": "void calculate_value_0800267c(byte *input_array, int input_length)\n{\n  int calculated_value;\n  if (*input_array < 0xc) {\n    int first_calculation = (0x88 - (char)input_array[1]) * 4;\n    if ((first_calculation - input_length == 0 || first_calculation < input_length) &&\n       (calculated_value = (600 - (char)input_array[2]) * 4,\n       input_length == calculated_value || input_length + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(input_length,calculated_value)))\n    {\n      calculated_value = input_length;\n    }\n    *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "check_input_080047f4",
                "param_1": "input",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "count"
            },
            "code": "uint32_t check_input_080047f4(uint32_t **input, uint32_t *param1, uint32_t *param2, uint16_t param3) {\n    uint32_t result;\n    uint32_t *ptr;\n    int count = 25;\n    if ((*input)[0x3d] == ' ') {\n        uint64_t temp = (uint64_t)DAT_080048c0 * (uint64_t)(*(uint32_t *)PTR_DAT_080048bc >> 3);\n        uint32_t local_c = (uint32_t)(temp >> 0x28) * 0x19;\n        do {\n            if (local_c == 0) {\n                (*input)[0xc] = NULL;\n                (*input)[0x3d] = 0x20;\n                (*input)[0xf] = 0;\n                return 3;\n            }\n            ptr = *input;\n            local_c--;\n        } while ((ptr[6] & 2) != 0);\n        if ((*input)[0xf] == 1) {\n            result = 2;\n        }\n        else {\n            (*input)[0xf] = 1;\n            if ((*ptr & 1) == 0) {\n                *ptr |= 1;\n            }\n            **input &= 0xfffff7ff;\n            (*input)[0x3d] = 0x22;\n            (*input)[0x3e] = 0x10;\n            result = 0;\n            (*input)[0x10] = NULL;\n            (*input)[9] = param2;\n            (*input)[0xb] = DAT_080048c4;\n            (*input)[10] = param3;\n            (*input)[0x11] = param1;\n            **input |= 0x400;\n            **input |= 0x100;\n            (*input)[0xf] = 0;\n            (*input)[1] |= 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "check_input_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "check_and_update_0800376c",
                "param_1": "input_data",
                "param_2": "max_iterations",
                "iVar1": "start_time",
                "uVar2": "data",
                "iVar3": "current_time",
                "uVar4": "result",
                "puVar5": "data_ptr",
                "uVar6": "divider",
                "local_1c": "local_counter",
                "PTR_DAT_080038c8": "divider_ptr",
                "DAT_080038cc": "flags_mask_1",
                "DAT_080038d0": "flags_mask_2",
                "DAT_080038d4": "flags_mask_3",
                "flags": "flags_ptr",
                "status": "status_ptr"
            },
            "code": "uint32_t check_and_update_0800376c(uint32_t **input_data, uint32_t max_iterations) {\n  int start_time = get_start_time();\n  uint32_t *data = *input_data;\n  uint32_t local_counter = 0;\n  uint32_t result = 0;\n  uint32_t divider = *(uint32_t *)PTR_DAT_080038c8;\n  uint32_t factor = FUN_08005bb8(2);\n  uint32_t limit = 0;\n  uint32_t *flags = input_data[10];\n  uint32_t *status = input_data[9];\n  if ((data[2] & 0x100) == 0) {\n    if (((data[1] & 0x100) == 0) && ((data[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**input_data & 2) != 0) goto LAB_0800387e;\n      } while ((max_iterations == 0xffffffff) || ((max_iterations != 0 && (get_start_time() - start_time) <= max_iterations)));\n      *flags = (uint32_t *)((uint32_t)*flags | 4);\n      *status = 0;\n      result = 3;\n    }\n    else {\n      uint32_t flags_4 = data[4] & DAT_080038cc;\n      uint32_t flags_3 = data[3] & (DAT_080038cc + 0xdc000000);\n      if ((flags_4 == 0) && (flags_3 == 0)) {\n        if ((data[4] & DAT_080038d0) == 0) {\n          if ((data[3] & DAT_080038d4) == 0) {\n            limit = 0x14;\n          }\n          else {\n            limit = 0x29;\n          }\n        }\n        else {\n          limit = 0x29;\n        }\n      }\n      else if (((data[4] & DAT_080038d0) == 0) && ((data[3] & (DAT_080038d0 + 0xee000000)) == 0)) {\n        limit = 0x54;\n      }\n      else if ((DAT_080038d8 & data[4]) == 0) {\n        if ((DAT_080038d8 & data[3]) == 0) {\n          limit = 0x54;\n        }\n        else {\n          limit = 0xfc;\n        }\n      }\n      else {\n        limit = 0xfc;\n      }\n      limit = (divider / factor) * limit;\n      for (; local_counter <= limit && limit - local_counter != 0; local_counter = local_counter + 1) {\n        if ((max_iterations != 0xffffffff) && ((max_iterations == 0) || ((get_start_time() - start_time) > max_iterations))) {\n          *flags = (uint32_t *)((uint32_t)*flags | 4);\n          *status = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **input_data = 0xffffffed;\n      *flags = (uint32_t *)((uint32_t)*flags | 0x200);\n      if (((*input_data)[2] & 0xe0000) == 0xe0000) {\n        if (input_data[3] == (uint32_t *)0x0) {\n          *flags = (uint32_t *)((uint32_t)*flags & 0xfffffeff);\n          if (((uint32_t)*flags & 0x1000) == 0) {\n            *flags = (uint32_t *)((uint32_t)*flags | 1);\n            result = 0;\n          }\n        }\n      }\n    }\n  }\n  else {\n    *flags = (uint32_t *)((uint32_t)*flags | 0x20);\n    *status = 0;\n    result = 1;\n  }\n  return result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_update_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "run_process_08003e20",
                "param_1": "process_info",
                "iVar1": "status",
                "uVar2": "divisor",
                "iVar3": "start_time",
                "iVar4": "current_time",
                "uVar5": "end_time",
                "local_14": "end_time"
            },
            "code": "int run_process_08003e20(int *process_info)\n{\n  int status = 0;\n  uint divisor = 0;\n  int start_time = 0;\n  int current_time = 0;\n  int end_time = 0;\n  \n  if (*(char *)(process_info + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(process_info + 9) = 1;\n  status = check_process();\n  if (status == 0) {\n    process_info[10] &= 0xffffeefdU;\n    process_info[10] |= 2;\n    divisor = *(uint *)PTR_DAT_08003f08;\n    divisor = FUN_08005bb8(2);\n    end_time = divisor / divisor << 1;\n    while (end_time != 0) {\n      end_time = end_time - 1;\n    }\n    start_process(process_info);\n    *(uint *)(*process_info + 8) |= 8;\n    start_time = get_time();\n    while ((*(uint *)(*process_info + 8) & 8) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        process_info[10] &= 0xffffffedU;\n        process_info[10] |= 0x10;\n        *(undefined *)(process_info + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) |= 4;\n    start_time = get_time();\n    while ((*(uint *)(*process_info + 8) & 4) != 0) {\n      current_time = get_time();\n      if (10 < (uint)(current_time - start_time)) {\n        process_info[10] &= 0xffffffedU;\n        process_info[10] |= 0x10;\n        *(undefined *)(process_info + 9) = 0;\n        return 1;\n      }\n    }\n    process_info[10] &= 0xfffffffcU;\n    process_info[10] |= 1;\n  }\n  *(undefined *)(process_info + 9) = 0;\n  return status;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08003b8c",
                "FUN_08005bb8",
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "run_process_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "calculate_shifted_value_08005a48",
                "uVar1": "shifted_value",
                "FUN_08005a1c": "get_shifted_value",
                "PTR_DAT_08005a64": "shift_array",
                "DAT_08005a60": "data_pointer",
                "index": "index",
                "result": "result"
            },
            "code": "unsigned int calculate_shifted_value_08005a48() {\n  unsigned int shifted_value = get_shifted_value();\n  unsigned int index = (*(int *)(DAT_08005a60 + 4) << 0x12) >> 0x1d;\n  unsigned int result = shifted_value >> PTR_DAT_08005a64[index];\n  return result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08005bb8",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_bytes_and_shift_bit_080033a8",
                "param_1": "destination",
                "param_2": "source_length",
                "param_3": "source_data",
                "iVar2": "destination_index",
                "uVar3": "source_index",
                "bVar1": "byte_value"
            },
            "code": "void copy_bytes_and_shift_bit_080033a8(unsigned int* destination, unsigned int source_length, unsigned char* source_data) {\n    unsigned int destination_index = 0;\n    for (unsigned int source_index = 0; source_index < source_length; source_index += 2) {\n        unsigned char byte_value = *(source_data + source_index);\n        *(destination + destination_index) = byte_value;\n        *(destination + destination_index) = (*(source_data + source_index + 1) << 7) | byte_value;\n        destination_index++;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_bytes_and_shift_bit_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "execute_function_08002c14",
                "FUN_08002c00": "call_helper_function"
            },
            "code": "void execute_function_08002c14(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "execute_function_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "get_value_at_index_08008d18",
                "param_1": "index",
                "param_2": "max_index",
                "uVar1": "value"
            },
            "code": "void get_value_at_index_08008d18(int index, uint8_t max_index)\n{\n    uint8_t value = (max_index < 0x3c) ? PTR_DAT_08008d2c[max_index] : 0xff;\n    *(uint8_t *)(index + 300) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "get_value_at_index_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "execute_function_08009084",
                "param_1": "function_address",
                "iVar1": "index",
                "PTR_DAT_080090b0": "result_pointer",
                "FUN_0800a18c": "initialize",
                "FUN_08008f3c": "get_result_index"
            },
            "code": "void execute_function_08009084(int function_address) {\n  int index = *(int *)(function_address + 8);\n  if (index != 0) {\n    code *function_pointer = *(code **)(function_address + 0xc);\n    (*function_pointer)();\n    return;\n  }\n  initialize();\n  int result_index = get_result_index();\n  int result_address = PTR_DAT_080090b0 + result_index * 0x14 + 0xc;\n  if (*(int *)(result_address) != 0) {\n    execute_function_08009084(result_address);\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "execute_function_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "update_value_0800a020",
                "param_1": "value",
                "param_2": "ptr_data",
                "iVar1": "index",
                "uVar2": "updated_value",
                "bVar3": "is_positive"
            },
            "code": "void update_value_0800a020(int value, int* ptr_data)\n{\n  int index = calculate_index(value, *(short *)(ptr_data + 0xe));\n  bool is_positive = index >= 0;\n  uint updated_value;\n  \n  if (is_positive) {\n    updated_value = *(int *)(ptr_data + 0x54) + index;\n  }\n  else {\n    updated_value = *(ushort *)(ptr_data + 0xc) & 0xffffefff;\n  }\n  \n  if (is_positive) {\n    *(uint *)(ptr_data + 0x54) = updated_value;\n  }\n  else {\n    *(short *)(ptr_data + 0xc) = (short)updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "update_value_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uVar2": "value1",
                "local_1c": "value2",
                "abStack_18": "value3",
                "uStack_14": "value4",
                "uStack_10": "value5",
                "uStack_c": "value6",
                "DAT_0800589c": "value7",
                "PTR_DAT_0800589c": "value8",
                "DAT_080058a0": "value9",
                "DAT_080058a4": "value10",
                "DAT_080058a8": "value11"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result = 0;\n  uint value1 = 0;\n  uint value2 = 0;\n  uint value3 = 0;\n  uint value4 = 0;\n  uint value5 = 0;\n  uint value6 = 0;\n  uint DAT_0800589c = 0;\n  uint PTR_DAT_0800589c = 0;\n  uint DAT_080058a0 = 0;\n  uint DAT_080058a4 = 0;\n  uint DAT_080058a8 = 0;\n  uint value12 = 0;\n  uint value13 = 0;\n  uint value14 = 0;\n  uint value15 = 0;\n  uint value16 = 0;\n  uint value17 = 0;\n  uint value18 = 0;\n  uint value19 = 0;\n  uint value20 = 0;\n  result = *(uint *)(DAT_080058a0 + 4);\n  value1 = DAT_080058a8;\n  if ((result & 0xc) == 8) {\n    if ((result & 0x10000) == 0) {\n      value1 = DAT_080058a4 * (uint)abStack_18[(result << 10) >> 0x1c];\n    }\n    else {\n      value1 = (DAT_080058a8 * abStack_18[(result << 10) >> 0x1c]) / (uint)*(byte *)((int)&local_1c - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_param2_if_param1_not_zero_08007f7c",
                "param_1": "param1",
                "param_2": "param2",
                "PTR_": "ptr",
                "DAT_": "data",
                "call_function_with_param1_plus_4": "call_function"
            },
            "code": "void set_param2_if_param1_not_zero_08007f7c(int param1, int param2)\n{\n    if (param1 != 0) {\n        if (param2 != 0) {\n            int* PTR_ = (int*)(param1 + 0x60);\n            *PTR_ = param2;\n            call_function_with_param1_plus_4(param1 + 4);\n        }\n    }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param2_if_param1_not_zero_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "parse_data_08006d80",
                "param_1": "data",
                "local_46": "result",
                "local_44": "length",
                "local_40": "temp",
                "local_3c": "temp2",
                "local_38": "buffer",
                "local_34": "unused",
                "local_30": "unused",
                "local_2c": "unused",
                "local_28": "unused",
                "local_24": "flags",
                "local_20": "unused",
                "local_1c": "unused",
                "local_10": "unused",
                "FUN_080091c6": "initialize_buffer",
                "FUN_08007320": "get_data",
                "PTR_DAT_08006e60": "data_pattern",
                "PTR_DAT_08006e64": "buffer_ptr",
                "FUN_08003bd8": "parse_buffer",
                "FUN_08006c60": "get_length",
                "FUN_080038e4": "extract_data",
                "FUN_08003e20": "check_data",
                "FUN_08003aa0": "check_data2",
                "FUN_0800376c": "skip_space",
                "FUN_08003a1c": "get_flags",
                "FUN_08003de4": "check_data3",
                "FUN_08003ce8": "check_data4"
            },
            "code": "typedef unsigned int uint;\n\n// Renamed function\nuint16_t parse_data_08006d80(uint32_t data)\n{\n    int status = 0;\n    uint16_t result = 0;\n    uint32_t buffer[12] = {0};\n\n    // Renamed function call and variable\n    status = initialize_buffer(buffer, 0, 0x30);\n\n    uint32_t* ptr = &buffer[2];\n    *ptr = data;\n\n    // Renamed function call and variable\n    status = parse_buffer(buffer);\n\n    if(status == 0)\n    {\n        uint16_t length = get_length(buffer);\n        if(length < 0x12)\n        {\n            uint16_t temp = 0;\n            uint16_t temp2 = 0;\n\n            // Renamed function call and variable\n            status = extract_data(buffer, &temp);\n            if(status == 0)\n            {\n                // Renamed function call and variable\n                status = extract_data(buffer, &temp2);\n                if(status == 0)\n                {\n                    // Renamed function call and variable\n                    status = extract_data(buffer, &result);\n                    if(status == 0)\n                    {\n                        // Renamed function call\n                        skip_space(buffer);\n                        uint32_t flags = get_flags(buffer);\n                        if((flags & 0x200) != 0)\n                        {\n                            // Renamed function call and variable\n                            status = extract_data(buffer, &result);\n                        }\n                        // Renamed function call and variable\n                        status = extract_data(buffer, &result);\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}",
            "called": [
                "FUN_0800376c",
                "FUN_08003aa0",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_080038dc",
                "FUN_08003de4",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003a1c",
                "FUN_08006c60",
                "FUN_08003ce8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "parse_data_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "calculate_shifted_value_08006c60",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "unused_param",
                "iVar1": "shifted_value",
                "uVar2": "masked_value"
            },
            "code": "uint calculate_shifted_value_08006c60(uint input_value)\n{\n  int shifted_value = call_function_with_params(input_value, PTR_DAT_08006c78, 0, input_value, input_value);\n  uint masked_value = (uint)(shifted_value << 0xc) >> 0x1b;\n  if (masked_value > 0x11) {\n    masked_value = 0;\n  }\n  return masked_value;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_by_code_08003306",
                "param_1": "obj_ptr",
                "param_2": "code",
                "param_3": "value1",
                "param_4": "value2",
                "*(undefined4 *)(param_1 + 0x58)": "*(undefined4 *)(obj_ptr + 88)",
                "*(undefined4 *)(param_1 + 0x28)": "*(undefined4 *)(obj_ptr + 40)",
                "*(undefined4 *)(param_1 + 0x5c)": "*(undefined4 *)(obj_ptr + 92)",
                "*(undefined4 *)(param_1 + 0x2c)": "*(undefined4 *)(obj_ptr + 44)",
                "*(undefined4 *)(param_1 + 0x60)": "*(undefined4 *)(obj_ptr + 96)",
                "*(undefined4 *)(param_1 + 0x30)": "*(undefined4 *)(obj_ptr + 48)",
                "*(undefined4 *)(param_1 + 0x4c)": "*(undefined4 *)(obj_ptr + 76)",
                "*(undefined4 *)(param_1 + 0x1c)": "*(undefined4 *)(obj_ptr + 28)",
                "*(undefined4 *)(param_1 + 0x50)": "*(undefined4 *)(obj_ptr + 80)",
                "*(undefined4 *)(param_1 + 0x20)": "*(undefined4 *)(obj_ptr + 32)",
                "*(undefined4 *)(param_1 + 0x54)": "*(undefined4 *)(obj_ptr + 84)",
                "*(undefined4 *)(param_1 + 0x24)": "*(undefined4 *)(obj_ptr + 36)"
            },
            "code": "void set_values_by_code_08003306(int obj_ptr, uint code, undefined4 value1, undefined4 value2)\n{\n  if (code == 208) {\n    *(undefined4 *)(obj_ptr + 88) = value1;\n    *(undefined4 *)(obj_ptr + 40) = value2;\n    return;\n  }\n  if (code > 208) {\n    if (code == 244) {\n      *(undefined4 *)(obj_ptr + 92) = value1;\n      *(undefined4 *)(obj_ptr + 44) = value2;\n      return;\n    }\n    if (code == 245) {\n      *(undefined4 *)(obj_ptr + 96) = value1;\n      *(undefined4 *)(obj_ptr + 48) = value2;\n    }\n    else if (code == 224) {\n      *(undefined4 *)(obj_ptr + 76) = value1;\n      *(undefined4 *)(obj_ptr + 28) = value2;\n      return;\n    }\n    return;\n  }\n  if (code == 144) {\n    *(undefined4 *)(obj_ptr + 80) = value1;\n    *(undefined4 *)(obj_ptr + 32) = value2;\n    return;\n  }\n  if (code == 192) {\n    *(undefined4 *)(obj_ptr + 84) = value1;\n    *(undefined4 *)(obj_ptr + 36) = value2;\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_by_code_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "initialize_program_08002578",
                "FUN_080076e0": "initialize_network"
            },
            "code": "void initialize_program_08002578(void)\n{\n  initialize_network();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "initialize_program_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "clear_bit_and_set_space_08006932",
                "param_1": "ptr_param1",
                "*param_1": "*ptr_param1",
                "uint": "uint32_t",
                "(int)param_1": "(int)ptr_param1",
                "undefined": "char",
                "*(uint *)(*param_1 + 0xc)": "*ptr_uint32_t",
                "*(undefined *)((int)param_1 + 0x39)": "*ptr_char",
                "0xffffffbf": "0b10111111",
                "0x20": "' '",
                "FUN_08008730": "call_some_other_function"
            },
            "code": "int clear_bit_and_set_space_08006932(int *ptr_param1)\n{\n    uint32_t *ptr_uint32_t = (uint32_t *)(*ptr_param1 + 0xc);\n    *ptr_uint32_t &= 0xffffffbf;\n    char *ptr_char = (char *)((int)ptr_param1 + 0x39);\n    *ptr_char = ' ';\n    call_some_other_function();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "clear_bit_and_set_space_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_data_structure_080060c4",
                "param_1": "data_structure_address",
                "param_2": "data",
                "uVar1": "updated_flags",
                "uVar2": "original_flags",
                "iVar3": "new_value"
            },
            "code": "void update_data_structure_080060c4(int data_structure_address, int *data) {\n  uint updated_flags;\n  uint original_flags;\n  int new_value;\n  \n  original_flags = *(uint *)(data_structure_address + 0x20);\n  *(uint *)(data_structure_address + 0x20) = original_flags & 0xffffffef;\n  new_value = data[0];\n  updated_flags = (original_flags & 0xffffffdf) | (data[2] << 4);\n  if (data_structure_address == DAT_08006124) {\n    updated_flags = (updated_flags & 0xffffff7f) | (data[3] << 4);\n    *(uint *)(data_structure_address + 4) = (*(uint *)(data_structure_address + 4) & 0xfffff3ff) | (data[5] << 2) | (data[6] << 2);\n  }\n  *(uint *)(data_structure_address + 0x18) = (*(uint *)(data_structure_address + 0x18) & 0xffff8cff) | (new_value << 8);\n  *(int *)(data_structure_address + 0x38) = data[1];\n  *(uint *)(data_structure_address + 0x20) = updated_flags;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_structure_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "processParams_08009eac",
                "param_1": "param1",
                "param_2": "param2",
                "local_18": "local1",
                "local_14": "local2",
                "uVar1": "flag",
                "iVar2": "result",
                "PTR_LAB_08009cd0_1_08009f28": "PTR_LAB_08009cd0_1_08009f28",
                "FUN_08009e64": "getFlag",
                "FUN_08009270": "getVar",
                "FUN_0800a110": "doSomething"
            },
            "code": "void processParams_08009eac(int param1, int *param2){\n  ushort flag;\n  int local1;\n  int *local2;\n  \n  if (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x1e)) {\n    local1 = param1;\n    local2 = param2;\n    flag = getFlag(param1, param2, &local1, &local2);\n    int result = getVar(param1, local1);\n    if (result != 0) {\n      *(undefined **)(param1 + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n      *param2 = result;\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x80;\n      param2[4] = result;\n      param2[5] = local1;\n      if ((local2 != (int *)0x0) && (result = doSomething(param1,(int)*(short *)((int)param2 + 0xe)), result != 0)) {\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(param2 + 3) = flag | *(ushort *)(param2 + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(param2 + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 2;\n  }\n  *param2 = (int)param2 + 0x47;\n  param2[4] = (int)param2 + 0x47;\n  param2[5] = 1;\n  return;\n}\n",
            "called": [
                "FUN_08009e64",
                "FUN_08009270",
                "FUN_0800a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "processParams_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "check_param_and_call_func_080072d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_080042e2": "call_func"
            },
            "code": "void check_param_and_call_func_080072d8(undefined4 param1, undefined2 param2, int param3, undefined4 param4) {\n  if (param3 == 0) {\n    call_func(param1, param2, 0, param4, param4);\n    return;\n  }\n  call_func(param1, param2, 1, param4, param4);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "check_param_and_call_func_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_and_set_values_080045c0",
                "param_1": "input",
                "bVar1": "is_valid",
                "uVar2": "random_number",
                "puVar3": "ptr1",
                "uVar4": "result",
                "DAT_08004714": "DAT_CONSTANT_1",
                "DAT_08004718": "DAT_CONSTANT_2",
                "DAT_0800471c": "DAT_CONSTANT_3",
                "DAT_08004720": "DAT_CONSTANT_4",
                "DAT_08004724": "DAT_CONSTANT_5",
                "count_leading_zeroes": "count_leading_zeros",
                "i": "count",
                "j": "j",
                "do_nothing_080045bc": "do_nothing"
            },
            "code": "int calculate_and_set_values_080045c0(uint **input)\\n{\\n    bool is_valid = false;\\n    uint random_number = 0;\\n    uint *ptr1 = NULL;\\n    uint result = 0;\\n    uint count = 0;\\n    uint *ptr2 = NULL;\\n    uint *ptr3 = NULL;\\n    uint i = 0;\\n    uint j = 0;\\n\\n    if (input == NULL) {\\n        return 1;\\n    }\\n\\n    if (*(char *)((int)input + 0x3d) == \"\\0\") {\\n        *(undefined *)(input + 0xf) = 0;\\n        do_nothing();\\n    }\\n\\n    *(undefined *)((int)input + 0x3d) = 0x24;\\n    **input &= 0xfffffffe;\\n    random_number = get_random_number();\\n\\n    if (DAT_08004714 < input[1]) {\\n        is_valid = random_number <= DAT_08004720;\\n    }\\n    else if (DAT_08004718 < random_number) {\\n        is_valid = false;\\n    }\\n    else {\\n        is_valid = true;\\n    }\\n\\n    if (is_valid) {\\n        return 1;\\n    }\\n\\n    result = (uint)((ulonglong)DAT_0800471c * (ulonglong)random_number >> 0x32);\\n    input[1][1] = result;\\n\\n    if (DAT_08004714 < input[1]) {\\n        result = (uint)((ulonglong)DAT_08004724 * (ulonglong)(result * 300) >> 0x26);\\n    }\\n\\n    input[1][8] = result + 1;\\n    ptr1 = input[1];\\n\\n    if (DAT_08004714 < ptr1) {\\n        if (input[2] == NULL) {\\n            count = count_leading_zeroes((random_number - 1) / (uint)((int)ptr1 * 3) + 1 & 0xfff);\\n        }\\n        else {\\n            count = count_leading_zeroes((random_number - 1) / (uint)((int)ptr1 * 0x19) + 1 & 0xfff);\\n        }\\n\\n        if (count >> 5 == 0) {\\n            if (input[2] == NULL) {\\n                j = (random_number - 1) / (uint)((int)ptr1 * 3) + 1 & 0xfff | 0x8000;\\n            }\\n            else {\\n                j = (random_number - 1) / (uint)((int)ptr1 * 0x19) + 1 & 0xfff | 0xc000;\\n            }\\n        }\\n        else {\\n            j = 1;\\n        }\\n    }\\n    else {\\n        j = (random_number - 1) / (uint)((int)ptr1 << 1) + 1 & 0xfff;\\n\\n        if (j < 4) {\\n            j = 4;\\n        }\\n    }\\n\\n    input[1][7] = j;\\n    **input = (uint)input[7] | (uint)input[8];\\n    input[1][2] = (uint)input[4] | (uint)input[3];\\n    input[1][3] = (uint)input[5] | (uint)input[6];\\n    **input |= 1;\\n    input[0x10] = NULL;\\n    *(undefined *)((int)input + 0x3d) = 0x20;\\n    input[0xc] = NULL;\\n    *(undefined *)((int)input + 0x3e) = 0;\\n    return 0;\\n}",
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_and_set_values_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "check_input_08007e74",
                "param_1": "input",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "start_time",
                "uVar3": "time_diff",
                "iVar4": "status",
                "iVar5": "input_ptr",
                "iVar2": "result",
                "iVar3": "char_code",
                "uVar6": "param_4",
                "current_time": "current_time",
                "next_char": "next_char"
            },
            "code": "int check_input_08007e74(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_time = FUN_08003760();\n  uint time_diff = 0;\n  int status = 2;\n  do {\n    int input_ptr = input + 4;\n    int result = FUN_08004728(input_ptr, param_2, param_3, param_4, param_4);\n    if (result == 0) {\n      status = 0;\n      int char_code = 0;\n      while ((char_code = FUN_0800542a(input_ptr), char_code != 0x20 && (status == 0))) {\n        int current_time = FUN_08003760();\n        time_diff = current_time - start_time;\n        if (time_diff < 0x65) {\n          int next_char = FUN_08005430(input_ptr);\n          if (next_char != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    int next_char = FUN_08005430(input_ptr);\n  } while ((next_char == 4) && (time_diff < 100));\n  return status;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "check_input_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "copy_data_to_buffer_08002efe",
                "param_1": "buffer_offset",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "param_4"
            },
            "code": "void copy_data_to_buffer_08002efe(int buffer_offset, int data, short data_size, int param_4)\n{\n    copy_data_to_buffer_08002efe(buffer_offset + 0x40, data, data_size, param_4, param_4);\n    return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "set_data_if_max_value_08002f84",
                "param_1": "value",
                "param_2": "max_value",
                "param_3": "data_ptr",
                "PTR_DAT_08002f90": "data_ptr"
            },
            "code": "void set_data_if_max_value_08002f84(uint8_t value, int max_value, uint32_t *PTR_DAT_08002f90) {\n  if (value == max_value) {\n    *PTR_DAT_08002f90 = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_data_if_max_value_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "calculate_and_print_result_08002ddc",
                "param_1": "input",
                "param_2": "offset",
                "param_3": "multiplier",
                "param_4": "output",
                "FUN_0800322c": "process_data",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void calculate_and_print_result_08002ddc(int input, int offset, int multiplier, int output){\n    int result = input + offset;\n    FUN_0800322c(result, multiplier, 5, output, output);\n    return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "calculate_and_print_result_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "check_if_valid_08009094",
                "iVar1": "random_number",
                "FUN_08008f3c": "get_random_number",
                "PTR_DAT_080090b0": "some_pointer",
                "do_something": "FUN_08009084",
                "ptr": "some_other_pointer"
            },
            "code": "void check_if_valid_08009094()\n{\n  int random_number = get_random_number();\n  int* ptr = (int*)(PTR_DAT_080090b0 + random_number * 0x14 + 0xc);\n  if (*ptr != 0) {\n    do_something();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "check_if_valid_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "param_1": "str",
                "param_2": "target_char",
                "param_3": "str_len",
                "pcVar1": "current_char",
                "pcVar2": "current_char"
            },
            "code": "char* find_char_in_string_08009f2c(char* str, char target_char, int str_len) {\n  char* current_char = str;\n  do {\n    if (current_char == str + str_len) {\n      return NULL;\n    }\n    current_char++;\n  } while (*current_char != target_char);\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_08009698",
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_new_index_0800a154",
                "param_1": "current_index",
                "param_2": "data",
                "iVar1": "new_index"
            },
            "code": "int calculate_new_index_0800a154(int current_index, int* data) {\n  int new_index = current_index - 4;\n  if (current_index < 0) {\n    new_index += *(data + new_index);\n  }\n  return new_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_new_index_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_and_store_08002580",
                "param_1": "output_byte",
                "bVar1": "current_byte_value"
            },
            "code": "void increment_and_store_08002580(byte *output_byte)\n{\n  byte current_byte_value = *PTR_DAT_080025a4;\n  if (current_byte_value > 11) {\n    *output_byte = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_byte_value + 1;\n  *output_byte = current_byte_value;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_byte_value * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_and_store_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "set_value_if_not_null_08007f8e",
                "param_1": "object_address",
                "param_2": "value",
                "*(int *)(param_1 + 100)": "*(int *)(object_address + 100)",
                "FUN_080049e0": "initialize_object"
            },
            "code": "void set_value_if_not_null_08007f8e(int object_address, int value) {\n  if (object_address != 0) {\n    if (value != 0) {\n      *(int *)(object_address + 100) = value;\n      initialize_object(object_address + 4);\n    }\n  }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_value_if_not_null_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_at_index_08006b3e",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shifted_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_element",
                "param_1 & 0xf": "bit_index"
            },
            "code": "void set_bit_at_index_08006b3e(uint index, int* array)\n{\n    uint shifted_index = (index << 0x18) >> 0x1c;\n    uint* array_element = (uint*)(array + shifted_index * 4);\n    uint bit_index = index & 0xf;\n    *array_element = *array_element | 1 << bit_index;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "set_bit_in_uint_array_08006262",
                "param_1": "array",
                "param_2": "bit_index",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "array[0x20]",
                "mask": "mask",
                "value": "value"
            },
            "code": "void set_bit_in_uint_array_08006262(uint* array, uint bit_index, uint bit_value){\n\tuint mask = ~(1 << (bit_index & 0xff));\n\tuint value = bit_value << (bit_index & 0xff);\n\tarray[0x20] = (array[0x20] & mask) | value;\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_08006390",
                "FUN_080063c0"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "initialize_application_08007110",
                "FUN_080074e0": "initialize_database"
            },
            "code": "void initialize_application_08007110(void)\n{\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "initialize_application_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "determine_timer_instance_08007594",
                "param_1": "timer_val",
                "DAT_080075d0": "timer_instance_1",
                "DAT_080075d4": "timer_instance_2",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "unknown_timer_instance"
            },
            "code": "int determine_timer_instance_08007594(uint timer_val) {\n  if (timer_val == 0xffffffff) {\n    return 0;\n  }\n  if (timer_val == DAT_080075d0) {\n    return 1;\n  }\n  if (DAT_080075d0 < timer_val) {\n    if (timer_val == DAT_080075d4) {\n      return 1;\n    }\n    if (timer_val == DAT_080075d4 + 0x12400) {\n      return 2;\n    }\n  }\n  else if (timer_val == 0x40000000) {\n    return 1;\n  }\n  PTR_s_TIM__Unknown_timer_instance_080075d8(PTR_s_TIM__Unknown_timer_instance_080075d8);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "determine_timer_instance_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_flags_and_values_080073ec",
                "puVar1": "flags_and_values"
            },
            "code": "void set_flags_and_values_080073ec(void)\n{\n  uint *flags_and_values = DAT_0800742c;\n  *DAT_0800742c |= 1;\n  flags_and_values[1] &= DAT_08007430;\n  *flags_and_values &= 0xfef6ffff;\n  *flags_and_values &= 0xfffbffff;\n  flags_and_values[1] &= 0xff80ffff;\n  flags_and_values[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08007434 + 8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_difference_and_multiply_08008ef4",
                "param_1": "end_value",
                "param_2": "start_value",
                "param_3": "end_range",
                "param_4": "start_range",
                "param_5": "difference"
            },
            "code": "int calculate_difference_and_multiply_08008ef4(int end_value, int start_value, int end_range, int start_range, int difference) {\n    int range_difference = end_range - start_range;\n    int value_difference = end_value - start_value;\n    int multiplied_difference = value_difference * difference;\n    int result = multiplied_difference / range_difference + start_range;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_difference_and_multiply_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "read_data_from_buffer_08002df6",
                "param_1": "buffer_address",
                "puVar1": "data_ptr",
                "*(byte *)(param_1 + 0xc4)": "*(byte *)(buffer_address + BUFFER_STATUS_OFFSET)",
                "FUN_080031ce": "read_data",
                "param_1 + 0x40": "buffer_address + DATA_START_OFFSET",
                "*puVar1": "*data_ptr",
                "puVar1[1]": "data_ptr[1]",
                "*(byte *)(param_1 + 0xc4) - 2": "*(byte *)(buffer_address + BUFFER_STATUS_OFFSET) - 2",
                "puVar1 + 2": "data_ptr + 2"
            },
            "code": "void read_data_from_buffer_08002df6(int buffer_address)\n{\n  if (*(byte *)(buffer_address + BUFFER_STATUS_OFFSET) == 0) {\n    return;\n  }\n  undefined *data_ptr = *(undefined **)(buffer_address + DATA_PTR_OFFSET);\n  read_data(buffer_address + DATA_START_OFFSET, *data_ptr, data_ptr[1], *(byte *)(buffer_address + BUFFER_STATUS_OFFSET) - 2, data_ptr + 2);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "read_data_from_buffer_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "process_data_08007118",
                "param_1": "data",
                "param_2": "divisor",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "flag",
                "uVar1": "quotient",
                "iVar2": "status",
                "iVar3": "type",
                "local_74": "var1",
                "local_70": "var2",
                "local_6c": "var3",
                "local_68": "var4",
                "local_64": "var5",
                "local_60": "var6",
                "local_5c": "var7",
                "local_58": "var8",
                "local_54": "var9",
                "local_50": "var10",
                "local_4c": "var11",
                "local_48": "var12",
                "local_44": "var13",
                "local_1b": "var14",
                "FUN_080091c6": "allocate_memory",
                "FUN_08007320": "get_value",
                "FUN_080075dc": "calculate_quotient",
                "FUN_08006092": "process_value",
                "FUN_08006c7c": "determine_type",
                "FUN_08006186": "process_value",
                "PTR_DAT_080071dc": "ptr_data",
                "PTR_DAT_080071e0": "ptr_flag"
            },
            "code": "void process_data_08007118(undefined4 data,uint divisor,int param_3,undefined4 param_4,char flag)\n{\n  uint quotient;\n  int status;\n  int type;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  int var8;\n  int var9;\n  undefined4 var10;\n  int var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined var14;\n  allocate_memory(&var8,0,0x40);\n  var1 = 0;\n  var2 = 0;\n  var3 = 0;\n  var4 = 0;\n  var5 = 0;\n  var6 = 0;\n  var7 = 0;\n  var8 = get_value(data,PTR_DAT_080071dc);\n  if (var8 != 0) {\n    quotient = calculate_quotient();\n    var9 = quotient / divisor - 1;\n    var11 = param_3 + -1;\n    var10 = 0;\n    var12 = 0;\n    var13 = 0;\n    var14 = 0;\n    if (flag == '\\x01') {\n      *PTR_DAT_080071e0 = (char)data;\n      status = process_value(&var8);\n      if (status != 0) {\n        return;\n      }\n    }\n    status = determine_type(data);\n    if ((((status == 0) || (status == 4)) || (status == 8)) || ((status == 0xc || (status == 0x18)))) {\n      var1 = 0x60;\n      var3 = 0;\n      var5 = 0;\n      var4 = 0;\n      var7 = 0;\n      var6 = 0;\n      var2 = param_4;\n      type = process_value(&var8,&var1,status);\n      if (type == 0) {\n        quotient = get_value(data,PTR_DAT_080071dc);\n        if ((quotient & 0x100000) == 0) {\n          free_memory(&var8,status);\n        }\n        else {\n          free_memory(&var8,status);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_08006186",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_08006c7c",
                "FUN_080091c6",
                "FUN_08006092",
                "FUN_080075dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "process_data_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "execute_function_08009fe8",
                "param_1": "function_id",
                "puVar1": "ptr1",
                "uVar2": "result1",
                "piVar3": "function_pointers",
                "iVar4": "function_ptr",
                "pcVar5": "function_ptr_call",
                "puVar6": "ptr2",
                "PTR_PTR_DAT_08009ff4": "function_pointers_ptr_ptr",
                "PTR_DAT_0800a018": "ptr2_ptr",
                "unaff_r4": "unaff_r4",
                "unaff_r5": "unaff_r5",
                "in_lr": "in_lr"
            },
            "code": "int execute_function_08009fe8(uint function_id)\n{\n    int *function_pointers = *(int **)PTR_PTR_DAT_08009ff4;\n    if (function_id > 0x1f) {\n        *function_pointers = 0x16;\n        return -1;\n    }\n    int function_ptr = function_pointers[0x11];\n    if ((function_ptr != 0) && (*(code **)(function_ptr + function_id * 4) != (code *)0x0)) {\n        if (*(code **)(function_ptr + function_id * 4) != (code *)0x1) {\n            if (*(code **)(function_ptr + function_id * 4) == (code *)0xffffffff) {\n                *function_pointers = 0x16;\n                return 1;\n            }\n            *(undefined4 *)(function_ptr + function_id * 4) = 0;\n            (*(code **)(function_ptr + function_id * 4))(function_id);\n        }\n        return 0;\n    }\n    undefined *ptr1 = PTR_PTR_DAT_08009ff4;\n    undefined4 result1 = thunk_FUN_0800887c(function_pointers);\n    undefined *ptr2 = PTR_DAT_0800a018;\n    *(undefined4 *)PTR_DAT_0800a018 = 0;\n    int result2 = FUN_0800886c(result1, function_id, function_id, 0, ptr1, unaff_r4, unaff_r5, in_lr);\n    if ((result2 == -1) && (*(int *)ptr2 != 0)) {\n        *function_pointers = *(int *)ptr2;\n    }\n    return result2;\n}",
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "execute_function_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_data_08002c1e",
                "param_1": "start",
                "param_2": "end",
                "param_3": "data1",
                "param_4": "data2",
                "FUN_08002948": "set_data"
            },
            "code": "void initialize_data_08002c1e(unsigned int start, unsigned int end, unsigned int data1, unsigned int data2){\n  set_data(1, 0xffff, data1, data2, data2);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "extract_data_08005a68",
                "param_1": "output_array",
                "param_2": "input_array",
                "iVar1": "data_ptr",
                "DAT_08005a9c": "first_data_word"
            },
            "code": "void extract_data_08005a68(uint8_t *output_array, uint32_t *input_array)\n{\n    output_array[0] = 0xf;\n    uint32_t *data_ptr = &input_array[1];\n    uint32_t DAT_08005a9c = *data_ptr;\n    output_array[1] = DAT_08005a9c & 3;\n    output_array[2] = (DAT_08005a9c & 0xf0) >> 4;\n    output_array[3] = (DAT_08005a9c & 0x700) >> 8;\n    output_array[4] = (DAT_08005a9c >> 3) & 0x700;\n    *output_array = *input_array & 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "extract_data_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "puVar1": "data_pointer"
            },
            "code": "void initialize_data_08008f78(int flag, int value, undefined4 param_3, undefined4 param_4)\n{\n  undefined *data_pointer;\n  data_pointer = PTR_DAT_08009018;\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    *PTR_DAT_08009018 = 6;\n    *(undefined4 *)(data_pointer + 0xc) = 0;\n    data_pointer[0x14] = 7;\n    *(undefined4 *)(data_pointer + 0x20) = 0;\n    data_pointer[0x28] = 8;\n    *(undefined4 *)(data_pointer + 0x34) = 0;\n    data_pointer[0x3c] = 9;\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    data_pointer[0x50] = 10;\n    *(undefined4 *)(data_pointer + 0x5c) = 0;\n    data_pointer[100] = 0x17;\n    *(undefined4 *)(data_pointer + 0x70) = 0;\n    data_pointer[0x78] = 0x17;\n    *(undefined4 *)(data_pointer + 0x84) = 0;\n    data_pointer[0x8c] = 0x17;\n    *(undefined4 *)(data_pointer + 0x98) = 0;\n    data_pointer[0xa0] = 0x17;\n    *(undefined4 *)(data_pointer + 0xac) = 0;\n    data_pointer[0xb4] = 0x17;\n    *(undefined4 *)(data_pointer + 0xc0) = 0;\n    data_pointer[200] = 0x28;\n    *(undefined4 *)(data_pointer + 0xd4) = 0;\n    data_pointer[0xdc] = 0x28;\n    *(undefined4 *)(data_pointer + 0xe8) = 0;\n    data_pointer[0xf0] = 0x28;\n    *(undefined4 *)(data_pointer + 0xfc) = 0;\n    data_pointer[0x104] = 0x28;\n    *(undefined4 *)(data_pointer + 0x110) = 0;\n    data_pointer[0x118] = 0x28;\n    *(undefined4 *)(data_pointer + 0x124) = 0;\n    data_pointer[300] = 0x28;\n    *(undefined4 *)(data_pointer + 0x138) = 0;\n    FUN_080090c2(0,PTR_LAB_08008f50_1_08009020,PTR_DAT_0800901c,data_pointer,param_4);\n}\n",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_array_08008d30",
                "param_1": "array",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "undefined_byte",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "PTR_PTR_LAB_08008ba4_1_08008d7c",
                "PTR_DAT_08008d80": "PTR_DAT_08008d80",
                "PTR_DAT_08008d84": "PTR_DAT_08008d84",
                "PTR_DAT_08008d88": "PTR_DAT_08008d88",
                "FUN_0800734a": "get_undefined_byte",
                "finalize_array": "FUN_08008c20"
            },
            "code": "undefined4* initialize_array_08008d30(undefined4* array, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined uVar1;\n  array[1] = 0;\n  array[2] = 1000;\n  *array = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (array == (undefined4*)PTR_DAT_08008d80) {\n    initialize_array_08008d30(array, 0, param_3, PTR_DAT_08008d80, param_4);\n    initialize_array_08008d30(array, 1);\n  }\n  else {\n    uVar1 = get_undefined_byte(param_2, PTR_DAT_08008d84);\n    *(undefined*)((int)array + 0x12d) = uVar1;\n    uVar1 = get_undefined_byte(param_2, PTR_DAT_08008d88);\n    *(undefined*)(array + 0x4b) = uVar1;\n  }\n  finalize_array(array);\n  return array;\n}",
            "called": [
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_array_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "set_param_3_in_global_var_08002f94",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param_3",
                "PTR_DAT_08002f9c": "g_ptr_global_var"
            },
            "code": "void set_param_3_in_global_var_08002f94(int param_1, int param_2, int param_3)\n{\n  *(int *)PTR_DAT_08002f9c = param_3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_param_3_in_global_var_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "check_value_0800734a",
                "param_1": "value",
                "uVar1": "result",
                "FUN_08007332": "calculate_value"
            },
            "code": "int check_value_0800734a(int value) {\n  if (value != 0) {\n    int result = calculate_value();\n    return result;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "check_value_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "analyze_data_08000aec",
                "bVar1": "is_valid",
                "iVar2": "char_val",
                "uVar3": "loop_counter",
                "PTR_DAT_08000bc0": "data_pointer1",
                "PTR_DAT_08000bc4": "data_pointer2",
                "FUN_080005e0": "initialize_data",
                "PTR_DAT_08000bc8": "data_array1",
                "PTR_DAT_08000bcc": "data_array2",
                "PTR_DAT_08000bd0": "data_array3",
                "PTR_DAT_08000bd4": "data_array4",
                "FUN_080036ac": "analyze_char",
                "FUNC_080005f8": "set_data",
                "PTR_DAT_08000bd8": "data_array5",
                "PTR_DAT_08000bdc": "data_pointer3",
                "PTR_DAT_08000be0": "data_pointer4",
                "PTR_DAT_08000be4": "data_pointer5"
            },
            "code": "void analyze_data_08000aec(void)\n{\n  bool is_valid;\n  int char_val;\n  uint loop_counter;\n\n  *PTR_DAT_08000bc0 = 1;\n  if (*PTR_DAT_08000bc4 != '\\0') {\n    initialize_data();\n  }\n  for (loop_counter = 0; loop_counter < 5; loop_counter++) {\n    PTR_DAT_08000bc8[loop_counter] = 0;\n    PTR_DAT_08000bcc[loop_counter] = 0;\n    PTR_DAT_08000bd0[loop_counter] = 0;\n  }\n  for (loop_counter = 0; loop_counter < 0x3c; loop_counter++) {\n    if ((loop_counter - 0x2e & 0xff) < 0xe) {\n      if (loop_counter < 0x3c) {\n        char_val = (int)(char)PTR_DAT_08000bd4[loop_counter];\n      }\n      else {\n        char_val = -1;\n      }\n      char_val = analyze_char(char_val);\n      if (char_val == 0) {\n        is_valid = false;\n      }\n      else {\n        if (loop_counter < 0x3c) {\n          char_val = (int)(char)PTR_DAT_08000bd4[loop_counter];\n        }\n        else {\n          char_val = -1;\n        }\n        char_val = analyze_char(char_val);\n        if (char_val == 1) {\n          is_valid = false;\n        }\n        else {\n          is_valid = true;\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      set_data(loop_counter,2);\n    }\n    else {\n      if (loop_counter < 0x3c) {\n        if (((PTR_DAT_08000bd4[loop_counter] != -1) && (char_val = analyze_char(), char_val != 0)) &&\n           (char_val = analyze_char((int)(char)PTR_DAT_08000bd4[loop_counter]), char_val != 1)) {\n          is_valid = true;\n        }\n      }\n      if (is_valid) {\n        set_data(loop_counter,1);\n      }\n    }\n    PTR_DAT_08000bd8[loop_counter] = 0xff;\n  }\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\n  *PTR_DAT_08000be0 = 0;\n  *PTR_DAT_08000be4 = 0;\n  *PTR_DAT_08000bc0 = 0;\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "analyze_data_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "run_function_08008eec",
                "FUN_08008ed6": "call_helper_function"
            },
            "code": "void run_function_08008eec(void)\n{\n  call_helper_function();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "run_function_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "value",
                "*(char *)((int)param_1 + 0x3a)": "input_array[46]",
                "param_2 == 0": "array_size == 0",
                "param_3 == 0": "value == 0",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[15]",
                "param_1[0xf]": "input_array[14]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[46]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(unsigned int *)(*input_array + 12)",
                "*(uint *)(*param_1 + 0x14)": "*(unsigned int *)(*input_array + 20)"
            },
            "code": "int validate_input_080068d6(int *input_array, int array_size, int value) {\n  if (input_array[10] != ' ') {\n    return 2;\n  }\n  if (array_size == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (input_array[14] != 1) {\n    input_array[10] = array_size;\n    input_array[11] = (short)value;\n    input_array[14] = 0;\n    input_array[46] = 34;\n    input_array[15] = 0;\n    *(unsigned int *)(*input_array + 12) |= 256;\n    *(unsigned int *)(*input_array + 20) |= 1;\n    *(unsigned int *)(*input_array + 12) |= 32;\n    return 0;\n  }\n  return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "validate_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "send_data_to_device_080032a2",
                "param_1": "device_address",
                "param_2": "data_address",
                "param_3": "data_length",
                "param_4": "flags",
                "uVar1": "data",
                "FUN_08000178": "get_data",
                "FUN_0800325a": "send_packet"
            },
            "code": "void send_data_to_device_080032a2(uint32_t device_address, uint32_t data_address, uint32_t data_length, uint32_t flags) {\n  uint32_t data = get_data(data_address);\n  send_packet(device_address, 0x71, data, data_length, flags);\n  return;\n}",
            "called": [
                "FUN_08000178",
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "send_data_to_device_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "initialize_and_start_firmware_08001b48",
                "PTR_DAT_08001bc0": "firmware_data_pointer",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "firmware_name_pointer",
                "PTR_FUN_08000214_1_08001bc8": "firmware_function_pointer_1",
                "PTR_LAB_080002ec_1_08001bcc": "firmware_label_pointer_1",
                "DAT_08001bd0": "firmware_data_constant_1",
                "PTR_LAB_08000c18_1_08001bd4": "firmware_label_pointer_2",
                "DAT_08001bd8": "firmware_data_constant_2",
                "PTR_LAB_080001a8_1_08001bdc": "firmware_label_pointer_3",
                "PTR_FUNC_08001cd0_1_08001be0": "firmware_function_pointer_2",
                "DAT_08001be4": "firmware_data_constant_3",
                "E100": "firmware_data_constant_4",
                "FUN_08000aec": "wait_for_firmware_to_initialize",
                "FUN_0800018c": "stop_firmware_execution"
            },
            "code": "void initialize_and_start_firmware_08001b48(void)\n{\n  undefined *firmware_data;\n  firmware_data = PTR_DAT_08001bc0;\n  initialize_firmware(firmware_data, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  set_firmware_data(firmware_data, 0xe0, PTR_FUN_08000214_1_08001bc8);\n  set_firmware_data(firmware_data, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  set_firmware_data(firmware_data, 0xc0, DAT_08001bd0);\n  set_firmware_data(firmware_data, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  set_firmware_data(firmware_data, 0xf4, DAT_08001bd8);\n  set_firmware_data(firmware_data, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  call_firmware_function(firmware_data, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  set_firmware_data(firmware_data, 0xff, DAT_08001be4);\n  set_firmware_data(firmware_data, 0xe100, firmware_data_constant_4);\n  wait_for_firmware_to_initialize();\n  stop_firmware_execution();\n}\n",
            "called": [
                "FUN_08002f94",
                "FUN_08000aec",
                "FUN_08002e44",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f2c",
                "FUN_0800018c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "initialize_and_start_firmware_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_flag_and_increment_counter_08006390",
                "param_1": "pointer_to_pointer",
                "param_2": "flag_value",
                "puVar1": "pointer",
                "DAT_080063bc": "END_MARKER"
            },
            "code": "int set_flag_and_increment_counter_08006390(uint **pointer_to_pointer, int flag_value)\n{\n  uint *pointer = *pointer_to_pointer;\n  set_value_at_address(pointer, flag_value, 1);\n  if (pointer == DAT_080063bc)\n  {\n    set_value_at_address(pointer, 0x8000, 0x11);\n  }\n  increment_value_at_address(*pointer_to_pointer, 1);\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flag_and_increment_counter_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "execute_random_action_08008730",
                "uVar1": "random_index",
                "iVar2": "action_result",
                "iVar3": "action_ptr",
                "PTR_DAT_08008770": "PTR_ACTIONS_ARRAY",
                "PTR_DAT_08008774": "PTR_ACTION_FUNCTIONS",
                "PTR_DAT_08008778": "PTR_ACTION_NAMES"
            },
            "code": "void execute_random_action_08008730(void)\n{\n  uint32_t random_index = get_random_index();\n  int32_t action_ptr = *(int32_t *)(PTR_DAT_08008770 + random_index * 4);\n  if ((random_index < 5) && (action_result = (**(code **)(PTR_DAT_08008774 + random_index * 4))(action_ptr), action_result != -1)) {\n    execute_action(*(uint32_t *)(PTR_DAT_08008778 + (uint32_t)*(uint8_t *)(action_ptr + 0x44) * 4), *(int32_t *)(action_ptr + 100) + (uint32_t)*(uint16_t *)(action_ptr + 0x6a), 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "execute_random_action_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_data_08005df4",
                "param_1": "data",
                "puVar1": "data_ptr",
                "PTR_08007710": "update_helper"
            },
            "code": "void update_data_08005df4(uint **data)\n{\n    uint *data_ptr;\n    *(undefined *)((int)data + 0x3d) = 2;\n    data_ptr = *data;\n    if ((data_ptr[8] & 0x1111) == 0) {\n        if ((data_ptr[8] & 0x444) == 0) {\n            *data_ptr = *data_ptr & 0xfffffffe;\n        }\n    }\n    PTR_08007710(data);\n    *(undefined *)((int)data + 0x3d) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "update_data_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "puVar1": "function_pointer_array",
                "iVar2": "function_pointer_array_size",
                "iVar3": "i"
            },
            "code": "void execute_functions_08009148(void)\n{\n  void **function_pointer_array = function_pointer_array_start;\n  int function_pointer_array_size = function_pointer_array_end - function_pointer_array_start;\n  for (int i = 0; i < function_pointer_array_size / 4; i++) {\n    (**(void (**)(void))(function_pointer_array + i * 4))();\n  }\n  do_nothing();\n  function_pointer_array = second_function_pointer_array_start;\n  function_pointer_array_size = second_function_pointer_array_end - second_function_pointer_array_start;\n  for (int i = 0; i < function_pointer_array_size / 4; i++) {\n    (**(void (**)(void))(function_pointer_array + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = FUN_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = FUN_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = FUN_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      FUN_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = FUN_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = FUN_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = FUN_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = FUN_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = FUN_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = FUN_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = FUN_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = FUN_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "returnZero_08008854"
            },
            "code": "int returnZero_08008854() {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "returnZero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "decode_packet_080064cc",
                "param_1": "packet_ptr",
                "pbVar2": "payload_byte_ptr",
                "sVar1": "remaining_packets"
            },
            "code": "int decode_packet_080064cc(int *packet_ptr) {\n  char packet_header = *(char *)((int)packet_ptr + 0x39);\n  if (packet_header != '!') {\n    return 2;\n  }\n  int packet_type = packet_ptr[2];\n  int *payload_ptr = (int *)(*packet_ptr + 4);\n  if (packet_type == 0x1000) {\n    *payload_ptr = *(unsigned short *)packet_ptr[8] & 0x1ff;\n    if (packet_ptr[4] == 0) {\n      packet_ptr[8] = packet_ptr[8] + 2;\n    }\n    else {\n      packet_ptr[8] = packet_ptr[8] + 1;\n    }\n  }\n  else {\n    char *payload_byte_ptr = (char *)packet_ptr[8];\n    packet_ptr[8] = (int)(payload_byte_ptr + 1);\n    *payload_ptr = (unsigned int)*payload_byte_ptr;\n  }\n  short remaining_packets = *(short *)((int)packet_ptr + 0x26) - 1;\n  *(short *)((int)packet_ptr + 0x26) = remaining_packets;\n  if (remaining_packets == 0) {\n    *payload_ptr = *payload_ptr & 0xffffff7f;\n    *payload_ptr = *payload_ptr | 0x40;\n    return 0;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "decode_packet_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "set_flags_based_on_string_08004d6c",
                "param_1": "ptr_param",
                "puVar1": "ptr_temp",
                "PTR_DAT_080059b8": "ptr_zero",
                "PTR_DAT_080059b0": "string_length",
                "PTR_DAT_080059ac": "ptr_string",
                "PTR_DAT_080059a8": "ptr_flag2",
                "PTR_DAT_080059a4": "ptr_flag1",
                "PTR_DAT_080059a0": "ptr_counter"
            },
            "code": "uint32_t set_flags_based_on_string_08004d6c(uint32_t **ptr_param) {\n  uint32_t *ptr_temp;\n  char *PTR_DAT_080059ac = (char *)((int)ptr_param + 0x3d);\n  uint16_t PTR_DAT_080059b0 = *(uint16_t *)((int)ptr_param + 0x2a);\n  uint32_t *PTR_DAT_080059a4 = *ptr_param;\n  uint32_t *PTR_DAT_080059a8 = (*ptr_param) + 1;\n  uint32_t *PTR_DAT_080059a0 = ptr_param[9];\n  uint32_t *PTR_DAT_080059b8 = (uint32_t *)0x0;\n  \n  if (*PTR_DAT_080059ac == '\"') {\n    if (PTR_DAT_080059b0 < 4) {\n      if (PTR_DAT_080059b0 == 2) {\n        if (ptr_param[0xb] == (uint32_t *)0x2) {\n          *PTR_DAT_080059a4 |= 0x400;\n        }\n        else {\n          *PTR_DAT_080059a4 &= 0xfffffbff;\n          *PTR_DAT_080059a4 |= 0x800;\n        }\n        *PTR_DAT_080059a8 &= 0xfffffbff;\n      }\n      else {\n        if (ptr_param[0xb] == (uint32_t *)0x2) {\n          *PTR_DAT_080059a4 |= 0x400;\n        }\n        else {\n          *PTR_DAT_080059a4 &= 0xfffffbff;\n        }\n        *PTR_DAT_080059a8 &= 0xfffff8ff;\n        *PTR_DAT_080059a0 += 1;\n        *(char *)PTR_DAT_080059a0 = (char)(*ptr_param)[4];\n        *(uint16_t *)((int)ptr_param + 0x2a) -= 1;\n        *PTR_DAT_080059ac = ' ';\n        ptr_param[0xc] = PTR_DAT_080059b8;\n        if (*(PTR_DAT_080059ac + 1) == '@') {\n          *(PTR_DAT_080059ac + 1) = 0;\n          do_nothing();\n        }\n        else {\n          *(PTR_DAT_080059ac + 1) = 0;\n          do_nothing_else();\n        }\n      }\n    }\n    else {\n      *PTR_DAT_080059a0 += 1;\n      *(char *)PTR_DAT_080059a0 = (char)(*ptr_param)[4];\n      *(uint16_t *)((int)ptr_param + 0x2a) -= 1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_string_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "process_data_08004ac2",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "start_pos",
                "param_4": "end_pos",
                "uVar1": "data_value",
                "uVar2": "data_length"
            },
            "code": "int process_data_08004ac2(int *data_ptr, int flag, int start_pos, int end_pos) {\n  int data_length = *(int *)(*data_ptr + 0x18);\n  int data_value;\n  if ((data_length & 0x80) == 0) {\n    data_value = *(int *)(data_ptr + 3);\n  }\n  else {\n    data_value = *(int *)(data_ptr + 6);\n  }\n  send_data(data_ptr, (data_length & 4) == 0, data_value, data_length, end_pos);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "return_one_08008850",
                "undefined4": "int"
            },
            "code": "int return_one_08008850(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "return_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "analyze_data_08006ca8",
                "param_1": "data",
                "param_2": "size",
                "puVar1": "data_pointer",
                "iVar2": "data_offset",
                "uVar3": "function_result",
                "uVar4": "flags_mask",
                "uVar5": "data_value",
                "local_18": "bit_mask",
                "local_14": "unused",
                "local_10": "unused",
                "DAT_08006d20": "DATA_OFFSET",
                "DAT_08006d14": "DATA_FLAG_A",
                "DAT_08006d18": "DATA_FLAG_B",
                "PTR_DAT_08006d1c": "FLAGS_POINTER",
                "FUN_08006bb8": "analyze_flags",
                "FLAGS_OFFSET": "FLAGS_OFFSET",
                "FLAG_BIT_A": "FLAG_BIT_A",
                "FLAG_BIT_B": "FLAG_BIT_B",
                "FLAGS_MASK_A": "FLAGS_MASK_A",
                "FLAGS_MASK_B": "FLAGS_MASK_B",
                "FUN_080040e8": "set_data_bit"
            },
            "code": "void analyze_data_08006ca8(uint *data, undefined4 size)\n{\n  undefined *data_pointer;\n  int data_offset;\n  undefined4 function_result;\n  uint data_value;\n  uint flags_value;\n  uint flags_mask;\n  uint flag_bit;\n  uint bit_mask = 0xffff;\n  uint bit_shift = 0xf;\n\n  data_offset = DAT_08006d20;\n  data_value = *data;\n\n  if (data_value == DAT_08006d14)\n  {\n    flags_mask = FLAGS_MASK_A;\n    flags_value = *(uint *)(data_offset + FLAGS_OFFSET) | FLAG_BIT_A;\n  }\n  else if (data_value == DAT_08006d18)\n  {\n    flags_mask = FLAGS_MASK_B;\n    flags_value = *(uint *)(data_offset + FLAGS_OFFSET) | FLAG_BIT_B;\n  }\n\n  data_pointer = DATA_POINTER;\n  flag_bit = (uint)((int)(char)*data_pointer << 0x18) >> 0x1c;\n  function_result = analyze_flags(flag_bit, size, flags_mask, flags_value);\n  bit_mask = 1 << (flag_bit & bit_shift) & bit_mask;\n\n  set_data_bit(function_result, &bit_mask);\n}\n",
            "called": [
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "analyze_data_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_integer_at_offset_08002fc2",
                "param_1": "ptr_base",
                "param_2": "offset",
                "param_3": "value",
                "(undefined4 *)": "int *",
                "(undefined4)": "int",
                "*": "",
                "+": "plus",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void set_integer_at_offset_08002fc2(int* PTR_base, int offset, int value)\n{\n  int* PTR_offset = PTR_base + (offset + 0x42) * 4;\n  *PTR_offset = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "set_integer_at_offset_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_checksum_08008afa",
                "param_1": "data_address",
                "PTR_": "",
                "DAT_": "",
                "*(short *)(param_1 + 0x134)": "checksum",
                "*(short *)(param_1 + 0x136)": "value_to_subtract",
                "result": "result"
            },
            "code": "ushort calculate_checksum_08008afa(int data_address)\n{\n    ushort checksum = *(ushort *)(data_address + 0x134);\n    ushort value_to_subtract = *(ushort *)(data_address + 0x136);\n    ushort result = checksum + 0x40 - value_to_subtract;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_checksum_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "print_string_and_address_08003048",
                "param_1": "string_to_print",
                "param_2": "address_to_print",
                "param_3": "unused_param",
                "param_4": "unused_param",
                "puVar1": "string_pointer",
                "PTR_DAT_08003068": "address_pointer",
                "FUN_08008c44": "unused_function_1",
                "FUN_08003002": "unused_function_2",
                "FUN_08002e26": "unused_function_3"
            },
            "code": "void print_string_and_address_08003048(char* string_to_print, void* address_to_print)\n{\n    char* string_pointer = string_to_print;\n    void* PTR_DAT_08003068 = address_to_print;\n    printf(\"%s: %p\\n\", string_pointer, PTR_DAT_08003068);\n}",
            "called": [
                "FUN_08003002",
                "FUN_08002e26",
                "FUN_08008c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "print_string_and_address_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    FUN_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = FUN_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = FUN_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = FUN_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = FUN_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = FUN_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009698",
                "FUN_08009d50",
                "FUN_08009f2c",
                "FUN_08009358",
                "FUN_08009a80"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "process_data_08000214",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar2": "result",
                "PTR_DAT_080002d8": "PTR_DATA_START",
                "PTR_DAT_080002dc": "PTR_DATA_ARRAY",
                "PTR_DAT_080002e8": "PTR_DATA_START_2",
                "PTR_DAT_080002e4": "PTR_DATA_START_3",
                "PTR_DAT_080002e0": "PTR_DATA_START_4",
                "bVar1": "flag"
            },
            "code": "void process_data_08000214(uint data_index, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n    bool flag;\n    int result;\n    \n    if (data_index > 59) {\n        return;\n    }\n    \n    result = get_data(PTR_DAT_080002d8, data_index, param_3, param_4, param_4);\n    \n    if (result == 3) {\n        if (data_index < 60) {\n            if (PTR_DAT_080002dc[data_index] == -1) {\n                result = 0;\n            }\n            else {\n                result = check_data();\n                if (result == 0) {\n                    result = 0;\n                }\n                else {\n                    result = check_data((int)(char)PTR_DAT_080002dc[data_index]);\n                    if (result == 1) {\n                        result = 0;\n                    }\n                    else {\n                        result = process_data_08000214((int)(char)PTR_DAT_080002dc[data_index], PTR_DAT_080002e8);\n                    }\n                }\n            }\n        }\n        else {\n            result = 0;\n        }\n        if (result != 0) {\n            process_data_08000214_2(data_index, param_2);\n        }\n        update_data(PTR_DAT_080002d8, data_index, param_2);\n    }\n    else if (result == 4) {\n        if (data_index < 60) {\n            if (PTR_DAT_080002dc[data_index] == -1) {\n                flag = false;\n            }\n            else {\n                result = check_data();\n                if (result == 0) {\n                    flag = false;\n                }\n                else {\n                    result = check_data((int)(char)PTR_DAT_080002dc[data_index]);\n                    if (result == 1) {\n                        flag = false;\n                    }\n                    else {\n                        flag = true;\n                    }\n                }\n            }\n        }\n        else {\n            flag = false;\n        }\n        if (flag) {\n            process_data_08000214_3(PTR_DAT_080002e4 + (uint)(byte)PTR_DAT_080002e0[data_index] * 3, param_2);\n        }\n        update_data(PTR_DAT_080002d8, data_index, param_2);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "process_data_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_flag_and_run_functions_08003724",
                "DAT_08003744": "data_pointer",
                "FUN_08003f0c": "run_function_A",
                "FUN_080036d8": "run_function_B",
                "do_nothing_080036d4": "do_nothing"
            },
            "code": "int set_flag_and_run_functions_08003724(void)\n{\n    *DAT_08003744 = *DAT_08003744 | 0x10;\n    run_function_A(3);\n    run_function_B(0xf);\n    do_nothing();\n    return 0;\n}",
            "called": [
                "FUN_080036d8",
                "FUN_08003f0c",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_flag_and_run_functions_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "getValueFromPointerOffset_080038dc",
                "param_1": "inputPointer",
                "PTR_": "",
                "DAT_": "",
                "*param_1": "*inputPointer",
                "*(undefined4 *)(*param_1 + 0x4c)": "value"
            },
            "code": "int getValueFromPointerOffset_080038dc(int *inputPointer) {\n  int offset = 0x4c;\n  int *pointerToValue = inputPointer + offset;\n  int value = *pointerToValue;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "getValueFromPointerOffset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "update_data_080025ac",
                "*param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "mask",
                "uVar2": "index",
                "uVar3": "offset",
                "iVar4": "temp_var",
                "PTR_DAT_08002628": "PTR_DAT_08002628",
                "PTR_DAT_08002630": "PTR_DAT_08002630",
                "DAT_0800262c": "DAT_0800262c",
                "FUN_08008990": "update_data_2",
                "FUN_08002400": "update_data_3",
                "FUN_0800242c": "update_data_4"
            },
            "code": "byte update_data_080025ac(byte *data, uint data_size, int param_3, int param_4)\n{\n  uint index;\n  uint offset;\n  uint mask;\n  int temp_var;\n  \n  if (*data < 0xc) {\n    update_data_080025ac_2(data_size, 1, param_3, *data, param_4);\n    index = (uint)*data;\n    mask = (byte)PTR_DAT_08002628[index * 8] & 0xffffffc0 | data_size & 0x3f;\n    PTR_DAT_08002628[index * 8] = (char)mask;\n    temp_var = -param_3 + 0x220;\n    if (temp_var < 0) {\n      temp_var = -param_3 + 0x223;\n    }\n    data[1] = (byte)((uint)(temp_var << 0x16) >> 0x18);\n    temp_var = -param_4 + 0x960;\n    if (temp_var < 0) {\n      temp_var = -param_4 + 0x963;\n    }\n    data[2] = (byte)((uint)(temp_var << 0x16) >> 0x18);\n    offset = (uint)((ulonglong)DAT_0800262c * (ulonglong)*data >> 0x23);\n    temp_var = update_data_080025ac_3(offset, mask, index, (int)((ulonglong)DAT_0800262c * (ulonglong)*data));\n    if (temp_var == 0) {\n      PTR_DAT_08002630[0x44] = (char)offset;\n      update_data_080025ac_4();\n    }\n    PTR_DAT_08002628[(uint)*data * 8] = PTR_DAT_08002628[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}",
            "called": [
                "FUN_08008990",
                "FUN_08002400",
                "FUN_0800242c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "update_data_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "send_data_to_server_08002634",
                "param_1": "socket_fd",
                "param_2": "data",
                "param_3": "data_size",
                "param_4": "flags",
                "FUN_080025ac": "send",
                "0x220": "data_size",
                "0x960": "flags"
            },
            "code": "void send_data_to_server_08002634(int socket_fd, char* data, int data_size, int flags)\n{\n  send(socket_fd, data, data_size, flags);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "send_data_to_server_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "call_function_with_offset_08002f0a",
                "param_1": "input_offset",
                "FUN_0800325a": "call_function",
                "PTR_": "PTR_ (unchanged)",
                "DAT_": "DAT_ (unchanged)"
            },
            "code": "void call_function_with_offset_08002f0a(int input_offset) {\n  call_function(input_offset + 0x40);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "call_function_with_offset_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "local_var",
                "abStack_20": "stack_array",
                "uStack_1c": "stack_var_1",
                "uStack_18": "stack_var_2",
                "uStack_14": "stack_var_3",
                "PTR_DAT_08005ca0": "ptr_data_1",
                "DAT_08005ca4": "data_array_1",
                "DAT_08005ca8": "data_value_1",
                "DAT_08005cac": "data_value_2",
                "DAT_08005cb0": "data_value_3"
            },
            "code": "uint calculate_value_08005bb8(int input) {\n  uint result;\n  undefined2 local_var;\n  byte stack_array[4];\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  undefined4 stack_var_3;\n  stack_var_3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  stack_var_2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  stack_var_1 = *(undefined4 *)PTR_DAT_08005ca0;\n  local_var = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = calculate_divided_value();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&local_var - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * stack_array[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_0800376c",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_pointers_and_variables_08007648",
                "param_1": "output_array",
                "param_2": "input_value1",
                "param_3": "input_value2",
                "param_4": "input_value3",
                "uVar2": "uint32_value1",
                "puVar4": "pointer1",
                "local_34": "local_int32_value1",
                "local_30": "local_int32_value2",
                "local_2c": "local_int32_value3",
                "local_28": "local_int32_value4",
                "local_24": "local_int32_value5",
                "local_20": "local_int32_value6",
                "local_1c": "local_int32_value7",
                "FUN_080075dc": "calculate_uint32_value",
                "FUN_08007544": "get_character_value",
                "FUN_08003f30": "print_character",
                "FUN_08003f94": "print_character",
                "FUN_08006060": "function1",
                "FUN_08006128": "function2",
                "FUN_08006280": "function3"
            },
            "code": "void initialize_pointers_and_variables_08007648(int* output_array, int input_value1, int input_value2, int input_value3) {\n  char character_value1;\n  uint32_t uint32_value1;\n  int integer_value1;\n  int* pointer1;\n  int32_t local_int32_value1 = 0;\n  int32_t local_int32_value2 = 0;\n  int32_t local_int32_value3 = 0;\n  int32_t local_int32_value4 = 0;\n  int32_t local_int32_value5 = 0;\n  int32_t local_int32_value6 = 0;\n  int32_t local_int32_value7 = 0;\n  output_array[0] = 0x40000000;\n  output_array[1] = 0x40000000;\n  output_array[4] = input_value1;\n  uint32_value1 = calculate_uint32_value();\n  output_array[2] = (uint32_t)((uint64_t)DAT_080076dc * (uint64_t)uint32_value1 >> 0x32) - 1;\n  output_array[5] = 0;\n  output_array[3] = 0;\n  output_array[6] = 0;\n  output_array[0x13] = input_value3;\n  local_int32_value1 = 0;\n  local_int32_value3 = 0;\n  local_int32_value5 = 0;\n  local_int32_value4 = 0;\n  local_int32_value6 = 0;\n  local_int32_value7 = 0;\n  local_int32_value2 = input_value2;\n  character_value1 = get_character_value(output_array[0]);\n  print_character(character_value1, 0xe, 0);\n  character_value1 = get_character_value(output_array[0]);\n  print_character(character_value1);\n  integer_value1 = function1(pointer1 + 1);\n  if ((integer_value1 == 0) && (integer_value1 = function2(pointer1 + 1, &local_int32_value1, 0), integer_value1 == 0)) {\n    function3(pointer1, 0);\n  }\n}\n",
            "called": [
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08006060",
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08006128"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_pointers_and_variables_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "returnZero_08008858"
            },
            "code": "int returnZero_08008858(void)\n{\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "returnZero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "update_data_080063c0",
                "param_1": "data_ptr",
                "param_2": "data_len",
                "puVar1": "data",
                "DAT_0800641c": "valid_data_ptr"
            },
            "code": "uint32_t update_data_080063c0(uint32_t **data_ptr, uint32_t data_len)\n{\n  uint32_t *data = *data_ptr;\n\n  // Check if data is valid\n  if (((data == DAT_0800641c) && ((data[8] & 0x1111) == 0)) && ((data[8] & 0x444) == 0)) {\n    data[17] &= 0xffff7fff;\n  }\n\n  // Update data\n  if (((data[8] & 0x1111) == 0) && ((data[8] & 0x444) == 0)) {\n    *data = *data & 0xfffffffe;\n  }\n\n  // Set flag\n  *(uint8_t *)((int)data_ptr + 0x3d) = 1;\n\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_data_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "current_char",
                "pbVar2": "byte_pointer"
            },
            "code": "int process_data_08004a24(int *data)\n{\n  char current_char;\n  byte *byte_pointer;\n  \n  current_char = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    byte_pointer = (byte *)data[9];\n    data[9] = (int)(byte_pointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (current_char == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "int get_value_at_offset_08002fba(int base_address, int offset) {\n    int* PTR_ = (int*)(base_address + (offset + 0x42) * 4);\n    return *PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "verify_assertion_and_log_error_if_failed_080090cc",
                "param_1": "line_number",
                "param_2": "file_name",
                "param_3": "assertion",
                "param_4": "data",
                "uVar1": "error_code",
                "puVar2": "log_message",
                "uVar3": "time_stamp",
                "uVar4": "error_code"
            },
            "code": "void verify_assertion_and_log_error_if_failed_080090cc(int line_number, const char* file_name, const char* assertion, void* data) {\n  int error_code = *(int *)(*(int *)PTR_PTR_DAT_080090f8 + 0xc);\n  const char* log_message = PTR_s___function__080090fc;\n  if (data == NULL) {\n    return;\n  }\n  do {\n    FUN_08009124(error_code, PTR_s_assertion___s__failed__file___s__08009100, data, line_number, file_name, assertion, log_message, error_code);\n    long long time_stamp = FUN_08009b5c();\n    error_code = (int)((unsigned long long)time_stamp >> 0x20);\n    error_code = (int)time_stamp;\n  } while (true);\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "verify_assertion_and_log_error_if_failed_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_bit_flags_080049e0",
                "param_1": "param_array",
                "puVar1": "param_ptr"
            },
            "code": "int set_bit_flags_080049e0(uint **param_array) {\n  uint *param_ptr;\n\n  if (*(char *)((int)param_array + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)param_array + 0x3d) = 0x28;\n  param_ptr = *param_array;\n  if ((*param_ptr & 1) == 0) {\n    *param_ptr = *param_ptr | 1;\n  }\n  **param_array = **param_array | 0x400;\n  (*param_array)[1] = (*param_array)[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007f7c",
                "FUN_08007ff0",
                "FUN_08007f8e",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "set_bit_flags_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_flags_based_on_input_08006d24",
                "param_1": "input_value",
                "iVar1": "data_segment_address",
                "DAT_08006d7c": "data_segment_address",
                "DAT_08006d74": "first_constant",
                "DAT_08006d78": "second_constant"
            },
            "code": "void set_flags_based_on_input_08006d24(int *input_value)\n{\n  int DAT_08006d7c = DAT_08006d7c;\n  int DAT_08006d74 = DAT_08006d74;\n  int DAT_08006d78 = DAT_08006d78;\n  if (*input_value != DAT_08006d74) {\n    if (*input_value == DAT_08006d78) {\n      *(unsigned int *)(DAT_08006d7c + 0xc) |= 0x400;\n      *(unsigned int *)(DAT_08006d7c + 0xc) &= 0xfffffbff;\n      *(unsigned int *)(DAT_08006d7c + 0x18) &= 0xfffffbff;\n      *(unsigned int *)(DAT_08006d7c + 0x18) &= 0xfffffbff;\n    }\n    return;\n  }\n  *(unsigned int *)(DAT_08006d7c + 0xc) |= 0x200;\n  *(unsigned int *)(DAT_08006d7c + 0xc) &= 0xfffffdff;\n  *(unsigned int *)(DAT_08006d7c + 0x18) &= 0xfffffdff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_flags_based_on_input_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "ptr_iVar",
                "uVar2": "var_uStack1",
                "uStack_c": "var_uStack2",
                "uStack_8": "var_uStack3",
                "uStack_4": "var_uStack4"
            },
            "code": "void process_data_080098d8(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n    int* ptr_iVar = *(int**)PTR_PTR_DAT_08009904;\n    undefined4 var_uStack1 = data_1;\n    undefined4 var_uStack2 = data_2;\n    undefined4 var_uStack3 = data_3;\n    undefined4 var_uStack4 = data_4;\n    \n    if(ptr_iVar != 0 && *(int*)(ptr_iVar + 0x18) == 0)\n    {\n        FUN_08009d50(ptr_iVar);\n    }\n    \n    FUNC_0800937c(ptr_iVar, *(undefined4*)(ptr_iVar + 8), data_1, &var_uStack2, var_uStack1, &var_uStack2);\n    return;\n}",
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080077b0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "block_ptr",
                "param_2": "block_size",
                "puVar1": "data_ptr",
                "uVar2": "ret_val",
                "puVar3": "prev_block",
                "iVar4": "padding_size",
                "puVar5": "curr_block",
                "uVar6": "block_size_diff",
                "puVar7": "prev_block",
                "uVar8": "aligned_block_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *block_ptr, uint block_size)\n{\n  uint aligned_block_size = (block_size + 3 & 0xfffffffc) + 8;\n  if (aligned_block_size < 0xc) {\n    aligned_block_size = 0xc;\n  }\n  if (((int)aligned_block_size < 0) || (aligned_block_size < block_size)) {\n    *block_ptr = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *prev_block = *(uint **)PTR_DAT_08009324;\n    uint *curr_block = *(uint **)PTR_DAT_08009324;\n    while (curr_block != (uint *)0x0) {\n      uint block_size_diff = *curr_block - aligned_block_size;\n      if (-1 < (int)block_size_diff) {\n        if (block_size_diff < 0xc) {\n          if (prev_block == curr_block) {\n            uint next_block = prev_block[1];\n            *(uint *)PTR_DAT_08009324 = next_block;\n          }\n          else {\n            uint next_block = curr_block[1];\n          }\n          if (prev_block != curr_block) {\n            prev_block[1] = next_block;\n            prev_block = curr_block;\n          }\n        }\n        else {\n          *curr_block = block_size_diff;\n          *(uint *)((int)curr_block + block_size_diff) = aligned_block_size;\n          prev_block = (uint *)((int)curr_block + block_size_diff);\n        }\n        goto LAB_080092d4;\n      }\n      prev_block = curr_block;\n      curr_block = (uint *)curr_block[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      uint ret_val = FUN_08009918(block_ptr);\n      *(undefined4 *)PTR_DAT_08009328 = ret_val;\n    }\n    curr_block = (uint *)FUN_08009918(block_ptr, aligned_block_size);\n    if ((curr_block != (uint *)0xffffffff) && ((prev_block = (uint *)((int)curr_block + 3U & 0xfffffffc), curr_block == prev_block || (int)FUN_08009918(block_ptr,(int)prev_block - (int)curr_block) != -1))) {\n      *prev_block = aligned_block_size;\nLAB_080092d4:\n      do_nothing_08009f4a(block_ptr);\n      uint aligned_block_end = (int)prev_block + 0xbU & 0xfffffff8;\n      int padding_size = aligned_block_end - (int)(prev_block + 1);\n      if (padding_size != 0) {\n        *(int *)((int)prev_block + padding_size) = -padding_size;\n        return aligned_block_end;\n      }\n      return aligned_block_end;\n    }\n    *block_ptr = 0xc;\n    do_nothing_08009f4a(block_ptr);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009eac",
                "FUN_08009908",
                "FUN_08009190"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "check_valid_input_and_process_08008500",
                "param_1": "input_length",
                "param_2": "input_data",
                "cVar1": "input_char",
                "iVar2": "start_time",
                "iVar3": "input_char_value",
                "uVar4": "index",
                "PTR_DAT_080085a8": "input_chars",
                "FUN_08003760": "get_current_time",
                "PTR_DAT_080085ac": "valid_chars",
                "valid_inputs": "PTR_DAT_080085b0",
                "invalid_inputs": "PTR_DAT_080085b4",
                "get_char_value": "FUN_08007320",
                "process_input": "FUN_080067ac",
                "log_error": "FUN_080084b0"
            },
            "code": "uint check_valid_input_and_process_08008500(uint input_length, uint input_data)\n{\n  int start_time = get_current_time();\n  char input_char = PTR_DAT_080085a8[1];\n  int input_char_value = get_char_value(input_char, PTR_DAT_080085ac);\n  if (input_char_value == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 && ((valid_inputs[index] == 0 || (input_char_value != get_char_value(input_char, PTR_DAT_080085ac))))) {\n    index++;\n  }\n  if (index > 4) {\n    if ((4 < (byte)invalid_inputs[0x44]) && (log_error(), 4 < (byte)invalid_inputs[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)invalid_inputs[0x44];\n  }\n  do {\n    int result = process_input(valid_inputs[index], input_length, input_data & 0xffff, 1000);\n    if (result == 0) {\n      return input_data;\n    }\n    start_time = get_current_time();\n  } while ((uint)(get_current_time() - start_time) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_08003760",
                "FUN_08007320",
                "FUN_080067ac",
                "FUN_080084b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "check_valid_input_and_process_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "parse_expression_080048c8",
                "param_1": "expression",
                "param_2": "value",
                "param_3": "length",
                "param_4": "data",
                "uVar1": "result",
                "puVar2": "pointer"
            },
            "code": "int parse_expression_080048c8(uint **expression, uint *value, int length, uint *data)\n{\n    int result;\n    uint *pointer;\n    if (*(char *)((int)expression + 0x3d) == '(') {\n        if (value == NULL) {\n            result = 1;\n        }\n        else if (length == 0) {\n            result = 1;\n        }\n        else if (*(char *)(expression + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(expression + 0xf) = 1;\n            pointer = *expression;\n            if ((*pointer & 1) == 0) {\n                *pointer |= 1;\n            }\n            **expression &= 0xfffff7ff;\n            *(undefined *)((int)expression + 0x3d) = 0x29;\n            *(undefined *)((int)expression + 0x3e) = 0x20;\n            result = 0;\n            expression[0x10] = NULL;\n            expression[9] = value;\n            *(short *)((int)expression + 0x2a) = (short)length;\n            expression[0xb] = data;\n            *(undefined2 *)(expression + 10) = *(undefined2 *)((int)expression + 0x2a);\n            *(undefined *)(expression + 0xf) = 0;\n            (*expression)[1] |= 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "parse_expression_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "max_length",
                "pcVar3": "destination_ptr",
                "iVar2": "remaining_length",
                "cVar1": "current_char"
            },
            "code": "void copy_string_08009954(char *source, char *destination, int max_length){\n  char current_char;\n  int remaining_length;\n  char *destination_ptr;\n  \n  do {\n    destination_ptr = source;\n    remaining_length = max_length;\n    if (remaining_length == 0) {\n      return;\n    }\n    current_char = *destination;\n    source = destination_ptr + 1;\n    *destination_ptr = current_char;\n    destination = destination + 1;\n    max_length = remaining_length - 1;\n  } while (current_char != '\\0');\n  for (; source != destination_ptr + remaining_length; source = source + 1) {\n    *source = '\\0';\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "set_flags_08005aa4",
                "param_1": "flags",
                "puVar1": "ptr1",
                "iVar2": "prev_time",
                "iVar3": "curr_time",
                "uVar4": "mask",
                "bVar5": "flag1",
                "DAT_08005bac": "ptr2",
                "DAT_08005bb0": "ptr3",
                "DAT_08005bb4": "ptr4"
            },
            "code": "int set_flags_08005aa4(uint *flags)\n{\n    int *ptr1;\n    int *DAT_08005bac;\n    int prev_time;\n    int curr_time;\n    uint mask;\n    bool flag1 = ((*flags & 1) != 0);\n    bool flag2 = ((*flags & 2) != 0);\n    bool flag3 = ((*flags & 0x10) != 0);\n\n    if (flag1) {\n        bool flag4 = ((*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0);\n        if (flag4) {\n            *(uint *)(DAT_08005bac + 0x1c) |= 0x10000000;\n        }\n        if ((*DAT_08005bb0 & 0x100) == 0) {\n            *DAT_08005bb0 |= 0x100;\n            prev_time = FUN_08003760();\n            while ((*DAT_08005bb0 & 0x100) == 0) {\n                curr_time = FUN_08003760();\n                if (100 < (uint)(curr_time - prev_time)) {\n                    return 3;\n                }\n            }\n        }\n        ptr1 = DAT_08005bb4;\n        mask = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n        if ((mask != 0) && (mask != (flags[1] & 0x300))) {\n            mask = *(uint *)(DAT_08005bac + 0x20);\n            *DAT_08005bb4 = 1;\n            *ptr1 = 0;\n            *(uint *)(DAT_08005bac + 0x20) = mask & 0xfffffcff;\n            if ((mask & 1) != 0) {\n                prev_time = FUN_08003760();\n                while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n                    curr_time = FUN_08003760();\n                    if (5000 < (uint)(curr_time - prev_time)) {\n                        return 3;\n                    }\n                }\n            }\n        }\n        DAT_08005bac = DAT_08005bac;\n        *(uint *)(DAT_08005bac + 0x20) = *(uint *)(DAT_08005bac + 0x20) & 0xfffffcff | flags[1];\n        if (flag4) {\n            *(uint *)(DAT_08005bac + 0x1c) &= 0xefffffff;\n        }\n    }\n    if (flag2) {\n        *(uint *)(DAT_08005bac + 4) &= 0xffff3fff | flags[2];\n    }\n    if (flag3) {\n        *(uint *)(DAT_08005bac + 4) &= 0xffbfffff | flags[3];\n    }\n    return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flags_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "param_1": "flag_data",
                "iVar1": "data_ptr",
                "do_nothing_08005e6a": "do_nothing",
                "do_nothing_08005e68": "do_nothing_2",
                "FUN_0800771c": "execute_process_1",
                "FUN_08007736": "execute_process_3",
                "do_nothing_080064ae": "do_nothing_4",
                "do_nothing_08005e6c": "do_nothing_5",
                "do_nothing_080064ac": "do_nothing_6"
            },
            "code": "void process_flags_08005e6e(int *flag_data)\n{\n  int data_ptr = *flag_data;\n  \n  if (((*(uint *)(data_ptr + 0x10) & 2) != 0) && ((*(uint *)(data_ptr + 0xc) & 2) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffffd;\n    *(undefined *)(flag_data + 7) = 1;\n    if ((*(uint *)(*flag_data + 0x18) & 3) == 0) {\n      execute_process_1();\n      do_nothing(flag_data);\n    }\n    else {\n      do_nothing_2();\n    }\n    *(undefined *)(flag_data + 7) = 0;\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 4) != 0) && ((*(uint *)(data_ptr + 0xc) & 4) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffffb;\n    *(undefined *)(flag_data + 7) = 2;\n    if ((*(uint *)(*flag_data + 0x18) & 0x300) == 0) {\n      execute_process_1(flag_data);\n      do_nothing(flag_data);\n    }\n    else {\n      do_nothing_2(flag_data);\n    }\n    *(undefined *)(flag_data + 7) = 0;\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 8) != 0) && ((*(uint *)(data_ptr + 0xc) & 8) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffff7;\n    *(undefined *)(flag_data + 7) = 4;\n    if ((*(uint *)(*flag_data + 0x1c) & 3) == 0) {\n      execute_process_1(flag_data);\n      do_nothing(flag_data);\n    }\n    else {\n      do_nothing_2(flag_data);\n    }\n    *(undefined *)(flag_data + 7) = 0;\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x10) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffffef;\n    *(undefined *)(flag_data + 7) = 8;\n    if ((*(uint *)(*flag_data + 0x1c) & 0x300) == 0) {\n      execute_process_1(flag_data);\n      do_nothing(flag_data);\n    }\n    else {\n      do_nothing_2(flag_data);\n    }\n    *(undefined *)(flag_data + 7) = 0;\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 1) != 0) && ((*(uint *)(data_ptr + 0xc) & 1) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xfffffffe;\n    execute_process_3(flag_data);\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x80) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffff7f;\n    do_nothing_4(flag_data);\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x40) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffffbf;\n    do_nothing_5(flag_data);\n  }\n  data_ptr = *flag_data;\n  if (((*(uint *)(data_ptr + 0x10) & 0x20) != 0) && ((*(uint *)(data_ptr + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(data_ptr + 0x10) = 0xffffffdf;\n    do_nothing_6(flag_data);\n  }\n  return;\n}",
            "called": [
                "FUN_08005e6c",
                "FUN_0800771c",
                "FUN_08005e6a",
                "FUN_08005e68",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_080064ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "process_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "update_flag_08004024",
                "param_1": "flag_value",
                "*DAT_08004040": "*flag_ptr"
            },
            "code": "void update_flag_08004024(int flag_value) {\n  if (flag_value != 4) {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n    return;\n  }\n  *DAT_08004040 = *DAT_08004040 | 4;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "update_flag_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "check_param_value_08002400",
                "param_1": "param_value",
                "uVar1": "index"
            },
            "code": "int check_param_value_08002400(int param_value) {\n    int index = 0;\n    while(index <= 0xb) {\n        if ((PTR_DAT_08002428[(param_value * 0xc + index) * 8] & 0x40) != 0) {\n            return 1;\n        }\n        index++;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "check_param_value_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "reverse_and_shift_08000588",
                "param_1": "index",
                "cVar1": "current_char",
                "cVar2": "last_char",
                "puVar3": "ptr_data",
                "PTR_DAT_080005cc": "ptr_data",
                "FUN_08002644": "reverse",
                "PTR_DAT_080005d0": "ptr_reverse",
                "PTR_DAT_080005d4": "ptr_last_char",
                "PTR_DAT_080005d8": "ptr_next_index",
                "PTR_DAT_080005dc": "ptr_data_array"
            },
            "code": "void reverse_and_shift_08000588(char index)\n{\n    char current_char = PTR_DAT_080005cc[index];\n    char last_char = *PTR_DAT_080005d4;\n    if ((current_char == last_char) && (last_char != '\\0')) {\n        *PTR_DAT_080005d4 = last_char - 1;\n    }\n    else if (last_char != '\\0') {\n        char next_index = ++(*PTR_DAT_080005d8);\n        PTR_DAT_080005dc[next_index - 1] = current_char;\n    }\n    PTR_DAT_080005cc[index] = 0xff;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "reverse_and_shift_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "*param_1": "input",
                "param_2": "input_length",
                "bVar1": "modified_byte",
                "uVar2": "index",
                "iVar3": "result"
            },
            "code": "void process_byte_08002644(byte *input, uint input_length, undefined4 param_3, undefined4 param_4)\n{\n  byte current_byte = input[0];\n  uint index = current_byte;\n  byte modified_byte = PTR_DAT_08002670[index * 8];\n  PTR_DAT_08002670[index * 8] = modified_byte & 0xbf;\n  int result = FUN_08002400((uint)((ulonglong)DAT_08002674 * (ulonglong)index >> 0x23), input_length, modified_byte & 0xbf,(int)((ulonglong)DAT_08002674 * (ulonglong)index),param_4);\n  if (result == 0) {\n    FUN_08002578(PTR_DAT_08002678);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08002578",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "waitForInput_08008868"
            },
            "code": "void waitForInput_08008868(void) \n{\n  while(true)\n  {\n     // Do nothing block with infinite loop\n  }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "waitForInput_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index",
                "PTR_DAT_080036d0": "character_array"
            },
            "code": "uint find_character_index_080036ac(int character) {\n    uint index;\n    if ((uint)(character << 0x18) >> 0x1c < 5) {\n        for (index = 0; (index < 0x3c && (character != (char)PTR_DAT_080036d0[index])); index++) {\n        }\n    }\n    else {\n        index = 0xffffffff;\n    }\n    return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_080022f8",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "find_character_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "call_function_pointer_08002f1e",
                "param_1": "pointer_address",
                "**(code **)**(undefined4 **)(param_1 + 0xc0)": "*(int *)(pointer_address + 0xc0)",
                "function_pointer": "function_pointer"
            },
            "code": "void call_function_pointer_08002f1e(int pointer_address) {\n  void (*function_pointer)() = (*(void (**)())(*(int *)(pointer_address + 0xc0)))();\n  function_pointer();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "call_function_with_params_0800885c",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4"
            },
            "code": "void call_function_with_params_0800885c(void* function_ptr, void* param_1, void* param_2, void* param_3, void* param_4)\n{\n  function_ptr(param_1, param_2, param_3, param_4);\n  return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "call_function_with_params_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_bit_and_flag_0800643c",
                "param_1": "data_ptr",
                "param_2": "flag",
                "*param_1": "*data_ptr",
                "(*param_1)[0x11]": "(*data_ptr)[17]",
                "**param_1": "**data_ptr"
            },
            "code": "int set_bit_and_flag_0800643c(uint** data_ptr, int flag) {\n    set_bits(data_ptr, flag, 4);\n    (*data_ptr)[17] |= 0x8000;\n    **data_ptr |= 1;\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_and_flag_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "execute_loop_08002fca",
                "param_1": "param_1",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "i",
                "do_nothing_08008ac4": "do_nothing",
                "FUN_08008a24": "set_bit"
            },
            "code": "void execute_loop_08002fca(uint32_t *data, int data_size, uint32_t *param_1, uint32_t *param_2, uint32_t *param_3) {\n  for (int i = 0; i < data_size; i++) {\n    do_nothing(param_3);\n    set_bit(param_2, 1);\n    do_nothing(param_1);\n    set_bit(param_2, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "execute_loop_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "j",
                "piVar3": "param_ptr",
                "uVar4": "temp_var1",
                "uVar5": "flag",
                "iVar6": "k",
                "unaff_r4": "temp_var2",
                "unaff_r5": "temp_var3",
                "pcVar7": "func_ptr",
                "iVar8": "l",
                "uVar9": "num_iterations",
                "UNRECOVERED_JUMPTABLE_00": "jump_table_ptr",
                "bVar10": "is_set",
                "func_result": "func_result",
                "data_ptr": "data_ptr",
                "increment": "increment",
                "m": "m",
                "n": "n"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params){\n  uint32_t result;\n  int i, j, k, l, m, n;\n  uint16_t flag;\n  code *func_ptr;\n  uint32_t temp_data;\n  uint32_t *data_ptr;\n  int *param_ptr;\n  uint32_t num_iterations;\n  uint32_t increment;\n  uint32_t func_result;\n  uint32_t *jump_table_ptr;\n  bool is_set;\n  \n  // Check if fourth element of params is non-zero\n  if (params[4] != 0) {\n    // Check if data is non-null and seventh element of data is zero\n    if ((data != NULL) && (data[6] == 0)) {\n      FUN_08009d50();\n    }\n    // Check which param_ptr to use\n    if (params == PTR_DAT_08009cc4) {\n      param_ptr = (int *)data[1];\n    }\n    else if (params == PTR_DAT_08009cc8) {\n      param_ptr = (int *)data[2];\n    }\n    else if (params == PTR_DAT_08009ccc) {\n      param_ptr = (int *)data[3];\n    }\n    // Check if third element of param_ptr is non-zero\n    if (*(uint16_t *)(param_ptr + 3) != 0) {\n      flag = *(uint16_t *)(param_ptr + 3);\n      // Check the most significant bit of flag\n      if ((int)(flag << 0x1c) < 0) {\n        j = params[4];\n        if (j != 0) {\n          k = flag << 0x1e;\n          is_set = k != 0;\n          if (is_set) {\n            k = 0;\n          }\n          l = *param_ptr;\n          if (!is_set) {\n            k = param_ptr[5];\n          }\n          *param_ptr = j;\n          param_ptr[2] = k;\n          for (l = l - j; l > 0; l -= k) {\n            func_result = (*(code *)param_ptr[10])(data,param_ptr[8],j,l,unaff_r4,unaff_r5);\n            if (func_result < 1) {\n              flag = *(uint16_t *)(param_ptr + 3);\n              goto LAB_08009c62;\n            }\n            j += func_result;\n          }\n        }\n      }\n      else if (((params[1] > 0) || (params[0x10] > 0)) &&\n              ((func_ptr = (code *)params[0xb]), func_ptr != NULL)) {\n        temp_data = *data;\n        *data = 0;\n        // Check if bit 12 of flag is zero\n        if ((flag & 0x1000) == 0) {\n          func_result = (*func_ptr)(data,params[8],flag & 0x1000,1);\n          if ((func_result == -1) && ((temp_data = *data), temp_data != 0)) {\n            if ((temp_data != 0x1d) && (temp_data != 0x16)) {\n              *(uint16_t *)(param_ptr + 3) = *(uint16_t *)(param_ptr + 3) | 0x40;\n              jump_table_ptr = UNRECOVERED_JUMPTABLE_00;\n              goto LAB_08009c2c;\n            }\n            *data = temp_data;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          func_result = params[0x15];\n        }\n        if (((int)((uint)flag << 0x1d) < 0) &&\n           ((func_result = func_result - params[1]), params[0xd] != 0)) {\n          func_result = func_result - params[0x10];\n        }\n        func_result = (*(code *)params[0xb])(data,params[8],func_result,0);\n        flag = *(uint16_t *)(param_ptr + 3);\n        if ((func_result == -1) &&\n           ((0x1d < *data) || (-1 < (int)((DAT_08009c78 >> (*data & 0xff)) << 0x1f)))) {\nLAB_08009c62:\n          *(uint16_t *)(param_ptr + 3) = flag | 0x40;\n          jump_table_ptr = UNRECOVERED_JUMPTABLE_00;\n          goto LAB_08009c6c;\n        }\n        params[1] = 0;\n        *params = params[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((func_result != -1) || (*data == 0))) {\n          params[0x15] = func_result;\n        }\n        m = params[0xd];\n        *data = temp_data;\n        if (m != 0) {\n          if (m != params + 0x11) {\n            FUN_080091d8(data);\n          }\n          params[0xd] = 0;\n          jump_table_ptr = UNRECOVERED_JUMPTABLE_00;\n          goto LAB_08009c02;\n        }\n      }\nLAB_08009b86:\n      jump_table_ptr = UNRECOVERED_JUMPTABLE_00;\n      goto LAB_08009b88;\n    }\n  }\n  result = 0;\n  jump_table_ptr = UNRECOVERED_JUMPTABLE_00;\n  goto LAB_08009c7c;\nLAB_08009c2c:\n  result = (*jump_table_ptr)();\n  goto LAB_08009c7c;\nLAB_08009c6c:\n  result = (*jump_table_ptr)(0xffffffff);\n  goto LAB_08009c7c;\nLAB_08009c02:\n  result = (*jump_table_ptr)();\n  goto LAB_08009c7c;\nLAB_08009b88:\n  result = (*jump_table_ptr)(0);\nLAB_08009c7c:\n  return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "puVar1": "data_ptr",
                "iVar2": "i",
                "piVar3": "ptr1",
                "piVar4": "ptr2",
                "uVar5": "data_value",
                "uVar6": "ushort_value",
                "iVar7": "var1",
                "pcVar8": "code_ptr1",
                "iVar9": "var2",
                "uVar10": "uint_value",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable",
                "bVar11": "bool_value",
                "uVar12": "undefined_value"
            },
            "code": "void process_data_08009b5c(void)\n{\n  uint *data_ptr;\n  int i;\n  int *ptr1;\n  int *ptr2;\n  uint data_value;\n  ushort ushort_value;\n  int var1;\n  code *code_ptr1;\n  int var2;\n  uint uint_value;\n  code *unrecovered_jumptable;\n  bool bool_value;\n  undefined8 undefined_value;\n  FUN_08009fe8(6);\n  unrecovered_jumptable = (code *)0x8009b6b;\n  undefined_value = FUN_08008868(1);\n  ptr1 = (int *)((ulonglong)undefined_value >> 0x20);\n  data_ptr = (uint *)undefined_value;\n  ushort_value = *(ushort *)(ptr1 + 3);\n  data_value = (uint)ushort_value;\n  if ((int)(data_value << 0x1c) < 0) {\n    var1 = ptr1[4];\n    if (var1 != 0) {\n      int var3 = data_value << 0x1e;\n      bool_value = var3 != 0;\n      if (bool_value) {\n        var3 = 0;\n      }\n      var2 = *ptr1;\n      if (!bool_value) {\n        var3 = ptr1[5];\n      }\n      *ptr1 = var1;\n      ptr1[2] = var3;\n      for (var2 = var2 - var1; 0 < var2; var2 = var2 - var3) {\n        var3 = (*(code *)ptr1[10])(data_ptr,ptr1[8],var1,var2);\n        if (var3 < 1) {\n          ushort_value = *(ushort *)(ptr1 + 3);\n          goto LAB_08009c62;\n        }\n        var1 = var1 + var3;\n      }\n    }\n  }\n  else if (((0 < ptr1[1]) || (0 < ptr1[0x10])) &&\n          (code_ptr1 = (code *)ptr1[0xb], code_ptr1 != (code *)0x0)) {\n    uint_value = *data_ptr;\n    *data_ptr = 0;\n    if ((ushort_value & 0x1000) == 0) {\n      var1 = (*code_ptr1)(data_ptr,ptr1[8],data_value & 0x1000,1);\n      if ((var1 == -1) && (ushort_value = *data_ptr, ushort_value != 0)) {\n        if ((ushort_value != 0x1d) && (ushort_value != 0x16)) {\n          *(ushort *)(ptr1 + 3) = *(ushort *)(ptr1 + 3) | 0x40;\n          (*unrecovered_jumptable)();\n          return;\n        }\n        *data_ptr = uint_value;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      var1 = ptr1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr1 + 3) << 0x1d) < 0) &&\n       (var1 = var1 - ptr1[1], ptr1[0xd] != 0)) {\n      var1 = var1 - ptr1[0x10];\n    }\n    var1 = (*(code *)ptr1[0xb])(data_ptr,ptr1[8],var1,0);\n    ushort_value = *(ushort *)(ptr1 + 3);\n    if ((var1 == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((DAT_08009c78 >> (*data_ptr & 0xff)) << 0x1f))))) {\n      *(ushort *)(ptr1 + 3) = ushort_value | 0x40;\n      (*unrecovered_jumptable)(0xffffffff);\n      return;\n    }\n    ptr1[1] = 0;\n    *ptr1 = ptr1[4];\n    if (((int)((uint)ushort_value << 0x13) < 0) && ((var1 != -1 || (*data_ptr == 0)))) {\n      ptr1[0x15] = var1;\n    }\n    ptr2 = (int *)ptr1[0xd];\n    *data_ptr = uint_value;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr1 + 0x11) {\n        FUN_080091d8(data_ptr);\n      }\n      ptr1[0xd] = 0;\n      (*unrecovered_jumptable)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*unrecovered_jumptable)(0);\n  return;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "process_input_0800021a",
                "param_1": "input_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar2": "input_value",
                "PTR_DAT_080002d8": "input_data",
                "PTR_DAT_080002dc": "input_data_2",
                "PTR_DAT_080002e0": "input_data_4",
                "PTR_DAT_080002e4": "input_data_3",
                "FUN_08002fa0": "get_input_value",
                "FUN_080036ac": "get_input_char_value",
                "FUN_0800738a": "is_input_valid",
                "FUN_080088e0": "process_valid_input",
                "FUN_080026b0": "update_input_data_2",
                "FUN_08002fc2": "update_input_data"
            },
            "code": "void process_input_0800021a(uint8_t input_index, uint32_t param_2, uint32_t param_3, uint32_t param_4)\n{\n  bool is_valid_input = false;\n  int input_value = get_input_value(input_index, param_3, param_4, param_4);\n  if (input_value == 3) {\n    if (input_index < 0x3c) {\n      if (PTR_DAT_080002d8[input_index] == -1) {\n        is_valid_input = false;\n      }\n      else {\n        int input_char = get_input_char();\n        if (input_char == 0) {\n          is_valid_input = false;\n        }\n        else {\n          int input_char_val = get_input_char_value((int)(char)PTR_DAT_080002d8[input_index]);\n          if (input_char_val == 1) {\n            is_valid_input = false;\n          }\n          else {\n            is_valid_input = is_input_valid((int)(char)PTR_DAT_080002d8[input_index], PTR_DAT_080002dc);\n          }\n        }\n      }\n    }\n    if (is_valid_input) {\n      process_valid_input(input_index, param_2);\n    }\n    update_PTR_DAT_080002d8(input_index, param_2);\n  }\n  else if (input_value == 4) {\n    if (input_index < 0x3c) {\n      if (PTR_DAT_080002d8[input_index] == -1) {\n        is_valid_input = false;\n      }\n      else {\n        int input_char = get_input_char();\n        if (input_char == 0) {\n          is_valid_input = false;\n        }\n        else {\n          int input_char_val = get_input_char_value((int)(char)PTR_DAT_080002d8[input_index]);\n          if (input_char_val == 1) {\n            is_valid_input = false;\n          }\n          else {\n            is_valid_input = true;\n          }\n        }\n      }\n    }\n    if (is_valid_input) {\n      update_PTR_DAT_080002dc(PTR_DAT_080002e4[(uint8_t)PTR_DAT_080002e0[input_index] * 3], param_2);\n    }\n    update_PTR_DAT_080002d8(input_index, param_2);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08002fc2",
                "FUN_080026b0",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "process_input_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "get_character_08008a6c",
                "param_1": "index",
                "uVar4": "data_value",
                "cVar1": "character",
                "iVar2": "value",
                "uVar3": "function_value",
                "PTR_DAT_08008ab4": "data_array",
                "PTR_DAT_08008ab8": "function_array"
            },
            "code": "char get_character_08008a6c(uint index) {\n  char character;\n  int value;\n  uint data_value;\n  if (index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_08008ab4[index];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value == 0xffffffff) {\n    character = '\\0';\n  }\n  else {\n    value = FUN_08006b28(data_value, PTR_DAT_08008ab8);\n    if (value == 0) {\n      character = '\\0';\n    }\n    else {\n      uint shifted_value = (data_value << 0x18) >> 0x1c;\n      uint mask = 1 << (data_value & 0xf) & 0xffff;\n      uint function_value = FUN_08006b7c(shifted_value);\n      character = FUN_080072f0(function_value, mask);\n    }\n  }\n  if (character != '\\0') {\n    character = '\\x01';\n  }\n  return character;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "get_character_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_ptr_dat_08002708_value_times_8_shifted_left_25_bits_right_shifted_31_bits_080026f8",
                "*param_1": "input",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "* 8": "* 8",
                "<< 0x19": "<< 25",
                ">> 0x1f": ">> 31",
                "(uint)": "(unsigned int)",
                "(byte)": "(unsigned char)"
            },
            "code": "unsigned int get_ptr_dat_08002708_value_times_8_shifted_left_25_bits_right_shifted_31_bits_080026f8(unsigned char *input) {\n\tunsigned int index = (unsigned int)(*input);\n\tunsigned int value = (unsigned int)(unsigned char)PTR_DAT_08002708[index * 8];\n\tunsigned int shifted_value = value << 25;\n\tunsigned int result = shifted_value >> 31;\n\treturn result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_ptr_dat_08002708_value_times_8_shifted_left_25_bits_right_shifted_31_bits_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "check_if_flag_set_080085b8",
                "param_1": "flag_index",
                "uVar1": "val",
                "PTR_DAT_080085d8": "ptr_dat",
                "byte": "byte_val"
            },
            "code": "bool check_if_flag_set_080085b8(int flag_index) {\n    uint32_t ptr = PTR_DAT_080085d8 + (uint32_t)*(uint8_t *)(flag_index + 0x44) * 4;\n    uint32_t val = FUN_08006b1c(*(uint32_t *)ptr);\n    return (val & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_0800863c",
                "FUN_08008600"
            ],
            "imported": false,
            "current_name": "check_if_flag_set_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "get_data_08001c08",
                "uVar1": "result",
                "FUN_08002720": "get_value",
                "PTR_DAT_08001c14": "PTR_DATA"
            },
            "code": "undefined get_data_08001c08(void)\n{\n  undefined result;\n  result = get_value(PTR_DAT_08001c14);\n  return result;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "get_data_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "get_clock_source_080075dc",
                "param_1": "clock_source",
                "local_20": "local_time_6",
                "local_1c": "local_time_2",
                "local_18": "local_time_3",
                "local_14": "local_time_4",
                "local_10": "local_time_5",
                "local_c": "local_time_1",
                "FUN_08005a68": "get_local_time",
                "FUN_08007594": "get_clock_source_type",
                "uVar1": "time_1",
                "uVar3": "time_2",
                "FUN_08005a28": "get_time_from_clock_source_1",
                "FUN_08005a48": "get_time_from_clock_source_2",
                "PTR_s_TIM__Unknown_clock_source_08007644": "unknown_clock_source_error_message"
            },
            "code": "int get_clock_source_080075dc(uint clock_source) {\n  uint local_time_1 = 0;\n  uint local_time_2 = 0;\n  uint local_time_3 = 0;\n  uint local_time_4 = 0;\n  uint local_time_5 = 0;\n  uint local_time_6 = 0;\n\n  get_local_time(&local_time_2,&local_time_6);\n  int result = get_clock_source_080075dc_type(clock_source);\n  uint time_1 = local_time_5;\n  uint time_2 = local_time_4;\n  if (result == 1) {\n    result = get_time_from_clock_source_1();\n  }\n  else if (result == 2) {\n    result = get_time_from_clock_source_2();\n    time_2 = time_1;\n  }\n  else {\n    print_error_message(PTR_s_TIM__Unknown_clock_source_08007644);\n    result = 0;\n    time_2 = 0;\n  }\n  if (time_2 != 0x500) {\n    if (time_2 < 0x501) {\n      if (time_2 != 0x400) {\n        return result;\n      }\n    }\n    else if ((time_2 != 0x600) && (time_2 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a28",
                "FUN_08005a68",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "get_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "determine_event_type_08007544",
                "param_1": "event_id",
                "DAT_08007588": "EVENT_ID_STARTUP",
                "0xffffffff": "EVENT_ID_UNKNOWN",
                "0x1d": "EVENT_TYPE_STARTUP",
                "DAT_0800758c": "EVENT_ID_SHUTDOWN",
                "0x1e": "EVENT_TYPE_SHUTDOWN",
                "0x12400": "EVENT_ID_CRASH",
                "0x19": "EVENT_TYPE_CRASH",
                "0x40000000": "EVENT_ID_SYSTEM",
                "0": "EVENT_TYPE_UNKNOWN",
                "FUN_080098d8": "log_event",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "TIMER_IRQ_HANDLER"
            },
            "code": "uint32_t determine_event_type_08007544(uint32_t event_id) {\n  if (event_id == 0xffffffff) {\n    return 0;\n  }\n  if (event_id == DAT_08007588) {\n    return EVENT_TYPE_STARTUP;\n  }\n  if (DAT_08007588 < event_id) {\n    if (event_id == DAT_0800758c) {\n      return EVENT_TYPE_SHUTDOWN;\n    }\n    if (event_id == EVENT_ID_CRASH) {\n      return EVENT_TYPE_CRASH;\n    }\n  }\n  else if (event_id == EVENT_ID_SYSTEM) {\n    return EVENT_TYPE_SYSTEM;\n  }\n  log_event(EVENT_ID_UNKNOWN);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "determine_event_type_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "execute_function_if_condition_met_08007ff0",
                "param_1": "input_param",
                "iVar1": "function_ptr_address",
                "FUN_08007f78": "get_function_ptr_address",
                "*(code **)(iVar1 + 0x60)": "function_ptr",
                "*(char *)(iVar1 + 0x5c)": "condition1",
                "*(char *)(iVar1 + 0x2c)": "condition2",
                "(*function_ptr)(iVar1 + 0x68)": "(*function_ptr)(function_ptr_address + 0x68)",
                "FUN_080049e0": "execute_another_function"
            },
            "code": "void execute_function_if_condition_met_08007ff0(undefined4 input_param)\n{\n  int function_ptr_address = get_function_ptr_address();\n  code* function_ptr = *(code **)(function_ptr_address + 0x60);\n  char condition1 = *(char *)(function_ptr_address + 0x5c);\n  char condition2 = *(char *)(function_ptr_address + 0x2c);\n  if ((function_ptr != (code *)0x0) && (condition1 == '\\x01') && (condition2 != ' ')) {\n    (*function_ptr)(function_ptr_address + 0x68);\n  }\n  execute_another_function(input_param);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08005084",
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "execute_function_if_condition_met_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "flags",
                "param_4": "data",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data_index"
            },
            "code": "void process_data_08008990(uint8_t index, uint32_t mode, uint32_t flags, uint8_t *data) {\n    int data_index;\n    uint8_t *data_ptr;\n    int result;\n\n    if (index < 0x3c) {\n        data_index = (int)(char)PTR_DAT_08008a14[index];\n        data_ptr = PTR_DAT_08008a14;\n    }\n    else {\n        data_index = -1;\n        data_ptr = data;\n    }\n    if (data_index != -1) {\n        result = process_data_08008990_part(data_index, PTR_DAT_08008a18, flags, data_ptr, data);\n        if (result != 0) {\n            result = FUN_0800738a(data_index, PTR_DAT_08008a1c);\n            if (result != 0) {\n                cleanup_data(data_index);\n            }\n            reset_data(data_index, PTR_DAT_08008a18);\n        }\n        switch(mode) {\n            case 0:\n                set_data_mode(data_index, 0);\n                break;\n            case 1:\n                set_data_mode(data_index, 1, 0);\n                break;\n            case 2:\n                set_data_mode(data_index, 0, 1);\n                break;\n            case 3:\n                set_data_mode(data_index, 0, 2);\n        }\n        finalize_data(data_index, PTR_DAT_08008a20);\n    }\n    return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_0800738a",
                "FUN_08007258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = FUN_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = FUN_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      FUN_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = FUN_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        FUN_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        FUN_080040e8(uVar5,&local_20);\n        uVar5 = FUN_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = FUN_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        FUN_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        FUN_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007320",
                "FUN_080098d8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_08006bb8",
                "FUN_080040e8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_value_at_offset_08004396",
                "param_1": "pointer_to_value"
            },
            "code": "void set_value_at_offset_08004396(int *pointer_to_value) {\n    int offset = 0x10;\n    int value = *(pointer_to_value + 0x11) & 0xff;\n    *(unsigned int *)(*pointer_to_value + offset) = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_in_array_08003fb0",
                "param_1": "bit_index"
            },
            "code": "void set_bit_in_array_08003fb0(uint bit_index)\n{\n  if (bit_index >= 0) {\n    int array_index = (bit_index >> 5) + 0x20;\n    int* array_ptr = (int*)(DAT_08003fd4 + array_index * 4);\n    int bit_mask = 1 << (bit_index & 0x1f);\n    *array_ptr = bit_mask;\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "process_params_080052f0",
                "param_1": "params",
                "puVar2": "param",
                "uVar3": "flags",
                "uVar4": "status",
                "DAT_080053c8": "FLAG_A",
                "0x100": "STATUS_B",
                "0x10200": "FLAG_E",
                "0x10400": "FLAG_G",
                "0x10800": "FLAG_J",
                "0x10": "params[16]",
                "FUN_08004aec": "execute_action",
                "*(char *)((int)param_1 + 0x3d)": "c",
                "*(char *)((int)param_1 + 0x3e)": "d",
                "*(short *)((int)param_1 + 0x2a)": "e",
                "(uint *)0x21": "f",
                "FUN_08004f3c": "execute"
            },
            "code": "void process_params_080052f0(uint **params)\n{\n    uint *param = *params;\n    uint flags = param[5];\n    uint status = param[1];\n\n    if (((flags & DAT_080053c8) != 0) && ((status & STATUS_B) != 0)) {\n        params[16] = (uint *)((uint)params[16] | FLAG_C);\n        param[5] = 0xfffffeff;\n        **params = **params | FLAG_D;\n    }\n\n    if (((flags & FLAG_E) != 0) && ((status & STATUS_B) != 0)) {\n        params[16] = (uint *)((uint)params[16] | FLAG_F);\n        (*params)[5] = 0xfffffdff;\n    }\n\n    if (((flags & FLAG_G) != 0) && ((status & STATUS_B) != 0)) {\n        char c = *(char *)((int)params + 0x3d);\n        if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) && (((c == '!' || (c == ')')) || ((c == '(' && (params[12] == (uint *)0x21)))))) {\n            execute_action(params);\n        }\n        else {\n            params[16] = (uint *)((uint)params[16] | FLAG_H);\n            if (*(char *)((int)params + 0x3e) == '\\x10') {\n                **params = **params | FLAG_I;\n            }\n            (*params)[5] = 0xfffffbff;\n        }\n    }\n\n    if (((flags & FLAG_J) != 0) && ((status & STATUS_B) != 0)) {\n        params[16] = (uint *)((uint)params[16] | FLAG_K);\n        (*params)[5] = 0xfffff7ff;\n    }\n\n    if (params[16] != (uint *)0x0) {\n        execute(params);\n    }\n}\n",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "process_params_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "execute_function_from_pointer_08002ec4",
                "param_1": "param_pointer",
                "**(int **)(param_1 + 0xc0) + 8": "function_pointer",
                "**(code **)(**(int **)(param_1 + 0xc0) + 8))()": "function_pointer()"
            },
            "code": "void execute_function_from_pointer_08002ec4(int param_pointer){\n  void (*function_pointer)() = (*(void (**)(void))(**(int **)(param_pointer + 0xc0) + 8));\n  function_pointer();\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_from_pointer_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array"
            },
            "code": "int find_value_in_array_08007306(int value, char* array)\n{\n    while(*array != -1)\n    {\n        if(*array == value)\n        {\n            return *(int*)(array + 4);\n        }\n        array += 12;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_and_start_08008f0e",
                "FUN_08003f0c": "initialize_screen",
                "FUN_080036a2": "start_game"
            },
            "code": "void initialize_and_start_08008f0e(void)\n{\n  initialize_screen(3);\n  start_game();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_and_start_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "set_data_08002f2c",
                "param_1": "unused",
                "param_2": "data_type",
                "param_3": "data",
                "PTR_DAT_08002f70": "PTR_DATA_2",
                "PTR_DAT_08002f74": "PTR_DATA_1",
                "PTR_DAT_08002f78": "PTR_DATA_3",
                "PTR_DAT_08002f7c": "PTR_DATA_5",
                "PTR_DAT_08002f80": "PTR_DATA_6",
                "PTR_DAT_08002f6c": "PTR_DATA_4"
            },
            "code": "void set_data_08002f2c(uint8_t data_type, uint32_t data) {\n    switch(data_type) {\n        case 0x90:\n            *(uint32_t *)PTR_DAT_08002f74 = data;\n            break;\n        case 0xc0:\n            *(uint32_t *)PTR_DAT_08002f70 = data;\n            break;\n        case 0xd0:\n            *(uint32_t *)PTR_DAT_08002f78 = data;\n            break;\n        case 0xe0:\n            *(uint32_t *)PTR_DAT_08002f6c = data;\n            break;\n        case 0xf4:\n            *(uint32_t *)PTR_DAT_08002f7c = data;\n            break;\n        case 0xf5:\n            *(uint32_t *)PTR_DAT_08002f80 = data;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "set_data_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "ptr_input",
                "param_2": "ptr_input_len",
                "param_3": "input_type",
                "param_4": "ptr_output",
                "uVar1": "result",
                "puVar2": "ptr_flags"
            },
            "code": "int validate_input_08004954(uint **ptr_input, uint *ptr_input_len, int input_type, uint *ptr_output){\n    int result = 0;\n    uint *ptr_flags = *ptr_input;\n    if (*(char *)((int)ptr_input + 0x3d) == '(') {\n        if (ptr_input_len == NULL || input_type == 0) {\n            result = 1;\n        }\n        else if (*(char *)(ptr_input + 0xf) == '\\x01') {\n            result = 2;\n        }\n        else {\n            *(undefined *)(ptr_input + 0xf) = 1;\n            if ((*ptr_flags & 1) == 0) {\n                *ptr_flags |= 1;\n            }\n            **ptr_input &= 0xfffff7ff;\n            *(undefined *)((int)ptr_input + 0x3d) = 0x2a;\n            *(undefined *)((int)ptr_input + 0x3e) = 0x20;\n            ptr_input[0x10] = NULL;\n            ptr_input[9] = ptr_input_len;\n            *(short *)((int)ptr_input + 0x2a) = (short)input_type;\n            ptr_input[0xb] = ptr_output;\n            *(undefined2 *)(ptr_input + 10) = *(undefined2 *)((int)ptr_input + 0x2a);\n            *(undefined *)(ptr_input + 0xf) = 0;\n            (*ptr_input)[1] |= 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "set_values_08005cec",
                "param_1": "base_address",
                "param_2": "values",
                "uVar1": "new_value1",
                "uVar2": "new_value5",
                "uVar3": "new_value2",
                "mask1": "0xfffffffe",
                "mask2": "0xfffffffd",
                "mask3": "0xfffffff7",
                "mask4": "0xfffffffb"
            },
            "code": "void set_values_08005cec(int base_address, uint *values)\n{\n  uint mask1 = 0xfffffffe;\n  uint mask2 = 0xfffffffd;\n  uint mask3 = 0xfffffff7;\n  uint mask4 = 0xfffffffb;\n  uint new_value1 = (values[2] | (base_address + 0x20) & mask2);\n  uint new_value2 = values[1];\n  uint new_value3 = (base_address + 0x18) & 0xffffff8c | values[0];\n  uint new_value4 = values[3];\n  uint new_value5 = *(uint *)(base_address + 4) & 0xfffffcff | values[5] | values[6];\n  if (base_address == DAT_08005d44) {\n    new_value1 = (new_value1 & mask4) | values[3];\n    new_value5 = new_value5 | values[4];\n  }\n  *(uint *)(base_address + 4) = new_value5;\n  *(uint *)(base_address + 0x18) = new_value3;\n  *(uint *)(base_address + 0x20) = new_value1;\n  *(uint *)(base_address + 0x34) = new_value2;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "set_values_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_value_at_pointer_0800886c",
                "PTR_DAT_08008878": "pointer_to_set",
                "0x16": "value_to_set"
            },
            "code": "void set_value_at_pointer_0800886c(void)\n{\n  int value_to_set = 22;\n  int *PTR_DAT_08008878 = (int *)PTR_DAT_08008878;\n  *PTR_DAT_08008878 = value_to_set;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_value_at_pointer_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "update_data_value_08003748",
                "PTR_DAT_0800375c": "data_pointer",
                "PTR_DAT_08003758": "value_pointer",
                "*PTR_DAT_0800375c": "*data_pointer",
                "*PTR_DAT_08003758": "*value_pointer",
                "(uint)(byte)*PTR_DAT_0800375c + *(int *)PTR_DAT_08003758": "new_value",
                "*(uint *)PTR_DAT_08003758": "*value_pointer",
                "uint": "uint32_t",
                "byte": "uint8_t"
            },
            "code": "void update_data_value_08003748(void)\n{\n    uint8_t* PTR_DAT_0800375c = (uint8_t*)PTR_DAT_0800375c;\n    uint32_t* PTR_DAT_08003758 = (uint32_t*)PTR_DAT_08003758;\n    uint32_t current_value = *PTR_DAT_08003758;\n    uint32_t (uint)(byte)*PTR_DAT_0800375c + *(int *)PTR_DAT_08003758 = current_value + *PTR_DAT_0800375c;\n    *PTR_DAT_08003758 = (uint)(byte)*PTR_DAT_0800375c + *(int *)PTR_DAT_08003758;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "update_data_value_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "update_bits_080040e8",
                "param_1": "bit_array",
                "param_2": "update_array",
                "puVar1": "bit_ptr",
                "uVar2": "update_value",
                "uVar3": "update_type",
                "uVar4": "update_offset",
                "uVar5": "bit_offset",
                "uVar6": "bit_mask",
                "uVar7": "byte_offset",
                "uVar9": "byte_index",
                "iVar8": "update_index",
                "iVar10": "byte_index",
                "LAB_0800423a": "skip_update",
                "PTR_DAT_080042c8": "update_value_1",
                "PTR_DAT_080042cc": "update_value_2"
            },
            "code": "void update_bits_080040e8(uint *bit_array, uint *update_array)\n{\n    uint *bit_ptr;\n    uint update_value;\n    uint update_type;\n    uint update_offset;\n    uint bit_offset;\n    uint bit_mask;\n    int byte_offset;\n    int byte_index;\n    int update_index;\n    bit_offset = 0;\n    update_index = 0;\n    do {\n        if (bit_offset > 15) {\n            return;\n        }\n        bit_mask = 1 << bit_offset;\n        update_type = *update_array & bit_mask;\n        if (bit_mask == update_type) {\n            update_value = update_array[1];\n            if (update_value == 0x12) {\n                update_offset = update_array[3] + 0xc;\n            }\n            else if (update_value < 0x13) {\n                if (update_value == 2) {\n                    update_offset = update_array[3] + 8;\n                }\n                else if (update_value < 3) {\n                    if (update_value == 0) goto LAB_0800423a;\n                    if (update_value == 1) {\n                        update_offset = update_array[3];\n                    }\n                }\n                else if (update_value == 3) {\n                    update_offset = 0;\n                }\n                else if (update_value == 0x11) {\n                    update_offset = update_array[3] + 4;\n                }\n            }\n            else {\n                if (update_value != PTR_DAT_080042c8) {\n                    if (PTR_DAT_080042c8 < update_value) {\n                        if (update_value == PTR_DAT_080042cc) goto LAB_0800423a;\n                        update_offset = PTR_DAT_080042cc + 0x10000;\n                    }\n                    else {\n                        update_offset = PTR_DAT_080042c8 - 0x100000;\n                    }\n                    if ((update_value != update_offset) && (update_value != update_offset - 0xf0000)) goto LAB_080040fe;\n                }\n                if (update_array[2] == 0) {\n                    update_offset = 4;\n                }\n                else if (update_array[2] == 1) {\n                    bit_array[4] = bit_mask;\n                    update_offset = 8;\n                }\n                else {\n                    bit_array[5] = bit_mask;\n                    update_offset = 8;\n                }\n            }\n            byte_offset = bit_offset / 4;\n            byte_index = bit_offset % 4;\n            bit_ptr = bit_array + byte_offset;\n            *bit_ptr = *bit_ptr & ~(0xf << (byte_index * 4)) | update_offset << (byte_index * 4);\n            if ((*update_array & 0x10000000) != 0) {\n                *(uint *)(PTR_DAT_080042bc + 0x18) = *(uint *)(PTR_DAT_080042bc + 0x18) | 1;\n                if (bit_array == PTR_DAT_080042d0) {\n                    update_index = 0;\n                }\n                else if (bit_array == PTR_DAT_080042d0 + 0x100) {\n                    update_index = 1;\n                }\n                else if (bit_array == PTR_DAT_080042d0 + 0x200) {\n                    update_index = 2;\n                }\n                else if (bit_array == PTR_DAT_080042d0 + 0x300) {\n                    update_index = 3;\n                }\n                else {\n                    update_index = 4;\n                }\n                *(uint *)(PTR_DAT_080042c0 + ((bit_offset >> 2) + 2) * 4) = *(uint *)(PTR_DAT_080042c0 + ((bit_offset >> 2) + 2) * 4) & ~(0xf << (byte_index * 4)) | update_index << (byte_index * 4);\n                if ((*update_array & 0x10000) == 0) {\n                    *PTR_DAT_080042c4 = *PTR_DAT_080042c4 & ~bit_mask;\n                }\n                else {\n                    *PTR_DAT_080042c4 = *PTR_DAT_080042c4 | bit_mask;\n                }\n                if ((*update_array & 0x20000) == 0) {\n                    PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] & ~bit_mask;\n                }\n                else {\n                    PTR_DAT_080042c4[1] = PTR_DAT_080042c4[1] | bit_mask;\n                }\n                if ((*update_array & 0x100000) == 0) {\n                    PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] & ~bit_mask;\n                }\n                else {\n                    PTR_DAT_080042c4[2] = PTR_DAT_080042c4[2] | bit_mask;\n                }\n                if ((*update_array & 0x200000) == 0) {\n                    PTR_DAT_080042c4[3] = PTR_DAT_080042c4[3] & ~bit_mask;\n                }\n                else {\n                    PTR_DAT_080042c4[3] = bit_mask | PTR_DAT_080042c4[3];\n                }\n            }\n        }\n        bit_offset++;\n    } while(true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "update_bits_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "write_char_to_buffer_0800288c",
                "param_1": "buffer_address",
                "param_2": "character",
                "puVar1": "buffer_ptr",
                "iVar2": "write_result",
                "uVar3": "result",
                "cVar4": "buffer_current_char",
                "uVar5": "new_buffer_length",
                "uVar6": "new_buffer_length",
                "local_11": "character",
                "PTR_DAT_08002908": "buffer_current_ptr",
                "PTR_DAT_0800290c": "buffer_length_ptr",
                "PTR_DAT_08002910": "buffer_current_length_ptr",
                "PTR_DAT_08002914": "buffer_ptr",
                "PTR_DAT_08002918": "buffer_current_length_ptr"
            },
            "code": "int write_char_to_buffer_0800288c(int buffer_address, char character) {\n  int PTR_DAT_08002914 = PTR_DAT_08002914;\n  char* PTR_DAT_0800290c = PTR_DAT_08002910;\n  char* PTR_DAT_08002910 = PTR_DAT_08002918;\n  char* PTR_DAT_08002908 = PTR_DAT_08002908;\n  char* buffer = *(char**)PTR_DAT_08002914;\n  char* current_char_ptr;\n  int buffer_length = (int)*PTR_DAT_0800290c;\n  int buffer_current_length = (int)*PTR_DAT_08002910;\n  char buffer_current_char = *PTR_DAT_08002908;\n  int result = 0;\n  if (buffer_current_char == '\\0') {\n    int write_result = FUN_08007ede(buffer_address + 0x14, &character, 1);\n    if (write_result == 0) {\n      result = 1;\n    } else {\n      result = 0;\n    }\n  } else {\n    int new_buffer_length = (int)buffer_current_char + 1;\n    if (new_buffer_length < 0x20) {\n      new_buffer_length = 0x20;\n    }\n    int new_PTR_DAT_08002914 = FUN_08009908(*(int*)PTR_DAT_08002914, new_buffer_length);\n    *(int*)PTR_DAT_08002914 = new_PTR_DAT_08002914;\n    if (new_PTR_DAT_08002914 == 0) {\n      result = 0;\n    } else {\n      current_char_ptr = buffer + (int)*PTR_DAT_08002910;\n      *current_char_ptr = character;\n      *PTR_DAT_08002910 += 1;\n      *PTR_DAT_0800290c = *PTR_DAT_08002910;\n      result = 1;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "write_char_to_buffer_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "is_first_call_0800010c",
                "param_1": "return_value",
                "*PTR_DAT_08000124": "*PTR_TO_FLAG",
                "DAT_08000128": "DAT_VAR",
                "PTR_FUN_0800012c": "PTR_TO_FUNCTION"
            },
            "code": "bool is_first_call_0800010c() {\\n  if (*PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      return true;\\n    }\\n    *PTR_DAT_08000124 = 1;\\n  }\\n  return false;\\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "is_first_call_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "set_param_08002e26",
                "param_1": "base_address",
                "param_2": "param_value",
                "*(undefined4 *)(param_1 + 0xc0)": "*(int *)(base_address + 0xc0)",
                "FUN_08003154": "call_func1",
                "FUN_08002ddc": "call_func2",
                "FUN_08002df6": "call_func3"
            },
            "code": "void set_param_08002e26(int base_address, int param_value) {\n  *(int *)(base_address + 0xc0) = param_value;\n  call_func1(base_address + 0x40);\n  call_func2(base_address);\n  call_func3(base_address);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_param_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "check_and_store_value_080036d8",
                "param_1": "value_to_store",
                "iVar1": "result",
                "PTR_DAT_0800371c": "divisor_ptr",
                "PTR_DAT_08003718": "byte_ptr",
                "0xffffffff": "mask"
            },
            "code": "int check_and_store_value_080036d8(uint32_t value_to_store) {\n  uint32_t divisor = *(uint32_t *)PTR_DAT_0800371c / (1000 / (byte)*PTR_DAT_08003718);\n  int result = FUN_08003fd8(divisor);\n  if (result != 0) {\n    return 1;\n  }\n  if (value_to_store > 0xf) {\n    return 1;\n  }\n  FUN_08003f30(0xffffffff, value_to_store, 0);\n  *(uint32_t *)PTR_DAT_08003720 = value_to_store;\n  return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "check_and_store_value_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = FUN_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  FUN_08007438(param_1);\n  uVar3 = FUN_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  FUN_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_param_index_080086e8",
                "param_1": "param",
                "uVar1": "index"
            },
            "code": "uint find_param_index_080086e8(int param) {\n  uint index;\n  if (param == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while(true) {\n      if (index > 4) {\n        return index;\n      }\n      if (param == *(int *)(PTR_DAT_08008708 + index * 4)) {\n        break;\n      }\n      index++;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_08008730",
                "FUN_0800870c"
            ],
            "imported": false,
            "current_name": "find_param_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "processInput_0800a110",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "puVar1": "ptrData",
                "iVar2": "result"
            },
            "code": "void processInput_0800a110(int *outputValue, undefined4 inputValue)\n{\n  undefined *ptrData = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  int result = findValue(inputValue);\n  if ((result == -1) && (*(int *)ptrData != 0)) {\n    *outputValue = *(int *)ptrData;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "processInput_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_if_flag_is_set_08003b8c",
                "param_1": "flag_array",
                "iVar1": "current_time",
                "iVar2": "flag_ptr",
                "FUN_08003760": "get_current_time"
            },
            "code": "int check_if_flag_is_set_08003b8c(int *flag_array) {\n  int flag_ptr = *flag_array;\n  if ((*(uint *)(flag_ptr + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(flag_ptr + 8) = *(uint *)(flag_ptr + 8) & 0xfffffffe;\n  int start_time = get_current_time();\n  do {\n    if ((*(uint *)(*flag_array + 8) & 1) == 0) {\n      return 0;\n    }\n    int current_time = get_current_time();\n  } while ((uint)(current_time - start_time) < 3);\n  flag_array[10] = flag_array[10] | 0x10;\n  flag_array[0xb] = flag_array[0xb] | 1;\n  return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003e20",
                "FUN_08003bd8",
                "FUN_08003de4",
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "check_if_flag_is_set_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_080035b8",
                "local_54": "constant3",
                "local_4c": "constant4",
                "local_44": "constant2[0]",
                "local_40": "constant2[1]",
                "local_3c": "constant2[2]",
                "local_38": "constant2[3]",
                "local_34": "constant2[4]",
                "local_30": "constant1",
                "local_20": "constant1[0]",
                "local_1c": "constant1[1]",
                "local_14": "constant1[2]",
                "local_10": "constant1[3]",
                "local_c": "constant1[4]",
                "iVar1": "result",
                "uVar2": "multiplier",
                "FUNC_08005460": "function1",
                "FUN_080073e8": "print_error_message",
                "FUN_080058ac": "function2",
                "FUN_08005aa4": "function3",
                "FUN_08005a1c": "function4",
                "DAT_08003650": "unknown_constant",
                "FUN_08003fd8": "print_result",
                "FUN_08004024": "print_value",
                "FUN_08003f30": "print_value"
            },
            "code": "void initialize_080035b8() {\n  int result;\n  uint multiplier;\n  uint constant1[2] = { 2, 0x10 };\n  uint constant2[4] = { 2, 0, 0x400, 0 };\n  uint constant3[1] = { 2 };\n  uint constant4 = 0x8000;\n  result = function1(constant1);\n  if (result != 0) {\n    print_error_message(\"Error message 1\", 0x88);\n  }\n  result = function2(constant2);\n  if (result != 0) {\n    print_error_message(\"Error message 2\", 0x95);\n  }\n  result = function3(constant3, constant4);\n  if (result != 0) {\n    print_error_message(\"Error message 3\", 0x9c);\n  }\n  multiplier = function4();\n  print_result((multiplier * 0x92C3) >> 0x26);\n  print_value(4);\n  print_value(-1);\n}\n",
            "called": [
                "FUN_080073e8",
                "FUN_08005a1c",
                "FUN_08004024",
                "FUN_08003fd8",
                "FUN_080058ac",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08005aa4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "receive_i2c_data_and_send_ack_08001c18",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data_length",
                "param_4": "data_buffer",
                "puVar1": "i2c_buffer",
                "uVar2": "i2c_byte",
                "iVar3": "received_bytes",
                "iVar4": "i",
                "bVar5": "has_bytes"
            },
            "code": "void receive_i2c_data_and_send_ack_08001c18(uint8_t device_address, uint8_t register_address, int data_length, uint8_t* data_buffer)\n{\n  uint8_t* i2c_buffer;\n  uint8_t i2c_byte;\n  int received_bytes;\n  int i;\n  i2c_buffer = I2C_BUFFER_POINTER;\n  if (data_length == 0xffffffff) {\n    data_length = 0;\n  }\n  else {\n    i2c_write_register_address(i2c_buffer, device_address, register_address);\n    i2c_write_ack(i2c_buffer, data_length & 0xff);\n    i2c_write_data(i2c_buffer, data_buffer);\n  }\n  i2c_write_device_address(i2c_buffer, device_address, I2C_WRITE);\n  i2c_write_register_address(i2c_buffer, device_address, register_address);\n  received_bytes = i2c_read_data(i2c_buffer, data_length);\n  if (data_length < received_bytes) {\n    i2c_write_error_message(PTR_ERROR_MESSAGE_TOO_MANY_BYTES_RECEIVED);\n  }\n  else {\n    if (received_bytes < data_length) {\n      i2c_write_error_message(PTR_ERROR_MESSAGE_TOO_FEW_BYTES_RECEIVED);\n    }\n  }\n  i2c_buffer[0] = (char)device_address;\n  i2c_buffer[1] = (char)data_length;\n  for (i = 0; i < data_length; i++) {\n    if (i2c_buffer[received_bytes] == 0) {\n      break;\n    }\n    i2c_byte = i2c_read_byte(i2c_buffer);\n    data_buffer[i] = i2c_byte;\n  }\n  i2c_write_data(i2c_buffer, data_buffer);\n}\n",
            "called": [
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002a30",
                "FUN_08002c14",
                "FUN_08002f14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "receive_i2c_data_and_send_ack_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "disable_feature_08006460",
                "param_1": "feature_array",
                "param_2": "feature_index",
                "puVar1": "feature",
                "DAT_0804a008": "feature_mask",
                "DAT_0804a00c": "feature_mask_2"
            },
            "code": "uint32_t disable_feature_08006460(uint32_t **feature_array, uint32_t feature_index) {\n  uint32_t *feature = *feature_array;\n  uint32_t DAT_0804a008 = 0x1111;\n  uint32_t DAT_0804a00c = 0x444;\n  \n  FUN_08006420(*feature_array, feature_index, 0);\n  \n  if (((feature[8] & DAT_0804a008) == 0) && ((feature[8] & DAT_0804a00c) == 0)) {\n    feature[0x11] &= 0xffff7fff;\n  }\n  \n  feature = *feature_array;\n  \n  if (((feature[8] & DAT_0804a008) == 0) && ((feature[8] & DAT_0804a00c) == 0)) {\n    *feature &= 0xfffffffe;\n  }\n  \n  return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "disable_feature_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "do_nothing_08004044": "do_nothing"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "get_value_08008880",
                "param_1": "input",
                "bVar1": "is_valid_range",
                "cVar2": "char_value",
                "uVar3": "result_value",
                "uVar4": "shift_value"
            },
            "code": "uint get_value_08008880(uint input)\n{\n  bool is_valid_range;\n  char char_value;\n  uint result_value;\n  uint shift_value;\n  \n  if (input < 14) {\n    if (input + 46 < 60) {\n      is_valid_range = true;\n    }\n    else {\n      is_valid_range = false;\n    }\n  }\n  else {\n    is_valid_range = input < 60;\n  }\n  if (is_valid_range) {\n    if (input < 14) {\n      input += 46;\n    }\n    char_value = PTR_DAT_080088d8[input];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value == -1) {\n    result_value = 0;\n  }\n  else {\n    result_value = FUN_08006d80();\n    shift_value = *(uint *)PTR_DAT_080088dc;\n    if (shift_value != 12) {\n      if (shift_value < 12) {\n        return result_value >> (12 - shift_value & 0xff);\n      }\n      return result_value << (shift_value - 12 & 0xff);\n    }\n  }\n  return result_value;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "get_value_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "execute_function_08002ed2",
                "param_1": "param",
                "uVar1": "result",
                "PTR_XXXX": "ptr1",
                "DAT_XXXX": "func_ptr",
                "FUN_08003474": "set_value"
            },
            "code": "void execute_function_08002ed2(int param)\n{\n  uint result;\n  int **PTR_XXXX = (int **)(param + 0xc0);\n  code *DAT_XXXX = *(code **)(*PTR_XXXX + 0xc);\n  \n  result = (*DAT_XXXX)();\n  if (result != 0xffffffff) {\n    set_value(param + 0x44, result & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "execute_function_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_replace_080073ae",
                "param_1": "num1",
                "param_2": "num2"
            },
            "code": "int compare_and_replace_080073ae(int num1, int num2) {\n\tif (num1 != num2) {\n\t\tif (num1 == 0) {\n\t\t\treturn num2;\n\t\t}\n\t\tif (num2 == 0) {\n\t\t\treturn num1;\n\t\t}\n\t\tnum1 = 0;\n\t}\n\treturn num1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_08008078",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "compare_and_replace_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "update_bit_08000488",
                "param_1": "bit_position",
                "param_2": "bit_value",
                "PTR_DAT_080004c8": "bit_array_ptr",
                "PTR_DAT_080004cc": "is_initialized_ptr",
                "FUN_08008880": "get_new_value",
                "FUN_08002ef2": "update_data_ptr",
                "PTR_DAT_080004d0": "bit_data_ptr",
                "uVar1": "new_value"
            },
            "code": "void update_bit_08000488(uint bit_position, int bit_value) {\\n  if (bit_position < 14) {\\n    if (bit_value == 0) {\\n      *PTR_DAT_080004c8 = *PTR_DAT_080004c8 & ~(1 << (bit_position & 0xff));\\n      return;\\n    }\\n    *PTR_DAT_080004c8 = 1 << (bit_position & 0xff) | *PTR_DAT_080004c8;\\n    if (*PTR_DAT_080004cc == \"\\0\") {\\n      uint new_value = get_new_value();\\n      update_data_ptr(PTR_DAT_080004d0, bit_position, new_value);\\n      return;\\n    }\\n  }\\n  return;\\n}",
            "called": [
                "FUN_08002ef2",
                "FUN_08008880"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "setParameter_08003f0c",
                "param_1": "parameterValue",
                "PTR_DAT_08003f2c": "ptr",
                "DAT_08003f2c": "constantOffset",
                "mask": "mask",
                "shift": "shift",
                "constant": "constant",
                "*PTR_DAT_08003f2c": "originalValue",
                "maskedOriginalValue": "maskedOriginalValue",
                "shiftedParameterValue": "shiftedParameterValue",
                "newValue": "newValue"
            },
            "code": "void setParameter_08003f0c(uint parameterValue)\n{\n    uint* PTR_DAT_08003f2c = (uint*)(DAT_08003f2c + 0xc);\n    uint mask = 0xf8ff;\n    uint shift = 8;\n    uint constant = 0x5fa0000;\n\n    uint maskedOriginalValue = *PTR_DAT_08003f2c & mask;\n    uint shiftedParameterValue = (parameterValue & 7) << shift;\n    uint newValue = shiftedParameterValue | maskedOriginalValue | constant;\n    *PTR_DAT_08003f2c = newValue;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "setParameter_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "do_nothing_and_call_function_08008f1c",
                "FUN_08001b48": "call_function",
                "FUN_080022f8": "perform_action",
                "FUN_08008bf4": "execute_another_function",
                "DAT_08008f38": "data_flag",
                "do_nothing_08008f0c": "do_nothing"
            },
            "code": "void do_nothing_and_call_function_08008f1c(void)\n{\n  do_nothing();\n  call_function();\n  do \n  {\n    do \n    {\n      perform_action();\n    } while (DAT_08008f38 == 0);\n    execute_another_function();\n  } while( true );\n}",
            "called": [
                "FUN_080022f8",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "do_nothing_and_call_function_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "perform_operation_080058ac",
                "param_1": "parameters",
                "param_2": "num_parameters",
                "puVar1": "memory_address",
                "iVar2": "start_time",
                "iVar3": "end_time",
                "uVar4": "value",
                "bitmask": "bitmask",
                "time_limit": "time_limit",
                "memory_value": "memory_value",
                "memory_value_1": "memory_value_1"
            },
            "code": "uint32_t perform_operation_080058ac(uint32_t *parameters, uint32_t num_parameters) {\n  uint32_t *memory_address = DAT_08005a0c;\n  uint32_t bitmask = 7;\n  uint32_t time_limit = 5000;\n  uint32_t *memory_value = DAT_08005a10;\n  uint32_t *memory_value_1 = DAT_08005a10 + 1;\n  uint32_t uVar4;\n  if (((*memory_address & bitmask) < num_parameters) &&\n     (*memory_address = *memory_address & 0xfffffff8 | num_parameters, num_parameters != (*memory_address & bitmask))) {\n    return 1;\n  }\n  if ((*parameters & 2) != 0) {\n    memory_value_1[1] = memory_value_1[1] & 0xffffff0f | parameters[2];\n  }\n  if ((*parameters & 1) != 0) {\n    uVar4 = parameters[1];\n    if (uVar4 == 1) {\n      if ((*memory_value_1 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((uVar4 != 2) && ((*memory_value_1 & 2) == 0)) {\n      return 1;\n    }\n    memory_value_1[1] = uVar4 | memory_value_1[1] & 0xfffffffc;\n    int start_time = FUN_08003760();\n    if (parameters[1] == 1) {\n      while ((memory_value_1[1] & 0xc) != 4) {\n        int end_time = FUN_08003760();\n        if (time_limit < (uint32_t)(end_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (parameters[1] == 2) {\n      while ((memory_value_1[1] & 0xc) != 8) {\n        int end_time = FUN_08003760();\n        if (time_limit < (uint32_t)(end_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((memory_value_1[1] & 0xc) != 0) {\n        int end_time = FUN_08003760();\n        if (time_limit < (uint32_t)(end_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  memory_address = DAT_08005a0c;\n  if ((num_parameters < (*memory_address & bitmask)) &&\n     (*memory_address = *memory_address & 0xfffffff8 | num_parameters, num_parameters != (*memory_address & bitmask))) {\n    return 1;\n  }\n  if ((*parameters & 4) != 0) {\n    memory_value_1[1] = memory_value_1[1] & 0xfffff8ff | parameters[3];\n  }\n  if ((*parameters & 8) != 0) {\n    memory_value_1[1] = memory_value_1[1] & 0xffffc7ff | parameters[4] << 3;\n  }\n  uVar4 = FUN_08005840();\n  *(uint32_t *)PTR_DAT_08005a18 = uVar4 >> PTR_DAT_08005a14[(memory_value_1[1] << 0x18) >> 0x1c];\n  FUN_080036d8(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "perform_operation_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag",
                "DAT_08006c48": "data_ptr",
                "DAT_08006c4c": "return_val_0",
                "DAT_08006c50": "return_val_1",
                "DAT_08006c54": "return_val_2",
                "DAT_08006c58": "return_val_3",
                "DAT_08006c5c": "return_val_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag)\n{\n  uint32_t* DAT_08006c48 = (uint32_t*)DAT_08006c48;\n  switch(flag) {\n    case 0:\n      DAT_08006c48[6] |= 0x04;\n      return DAT_08006c4c;\n    case 1:\n      DAT_08006c48[6] |= 0x08;\n      return DAT_08006c50;\n    case 2:\n      DAT_08006c48[6] |= 0x10;\n      return DAT_08006c54;\n    case 3:\n      DAT_08006c48[6] |= 0x20;\n      return DAT_08006c58;\n    case 4:\n      DAT_08006c48[6] |= 0x40;\n      return DAT_08006c5c;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08006e68",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08007258",
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "param_1": "flag_ptr",
                "*param_1": "flag_value",
                "DAT_080074d0": "FLAG_1_PTR",
                "DAT_080074d4": "FLAG_2_PTR",
                "DAT_080074d8": "FLAG_3_PTR",
                "PTR_DAT_080074dc": "FLAG_PTR_PTR",
                "*PTR_DAT_080074dc": "FLAG_1_PTR",
                "*(PTR_DAT_080074dc + 4)": "FLAG_2_PTR",
                "*(PTR_DAT_080074dc + 8)": "FLAG_3_PTR",
                "*(PTR_DAT_080074dc + 0xc)": "FLAG_4_PTR"
            },
            "code": "void set_flags_08007438(int *flag_ptr)\n{\n    int flag_value = *flag_ptr;\n    if (flag_value == FLAG_1)\n    {\n        *DAT_080074d0 |= FLAG_1_BIT;\n        *PTR_DAT_080074dc = flag_ptr;\n    }\n    if (flag_value == FLAG_2)\n    {\n        *DAT_080074d4 |= FLAG_2_BIT;\n        *(PTR_DAT_080074dc + 1) = flag_ptr;\n    }\n    if (flag_value == FLAG_3)\n    {\n        *DAT_080074d8 |= FLAG_3_BIT;\n        *(PTR_DAT_080074dc + 2) = flag_ptr;\n    }\n    if (flag_value == FLAG_4)\n    {\n        **(PTR_DAT_080074dc + 0xc) |= FLAG_4_BIT;\n        *(PTR_DAT_080074dc + 3) = flag_ptr;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "modify_params_08004aec",
                "param_1": "params",
                "param_1[0xb]": "param_b",
                "*(char *)((int)param_1 + 0x3d)": "(*param_3d)",
                "DAT_08004b7c": "PTR_DAT_08004b7c",
                "(*param_1)[1]": "(*params)[1]",
                "(*param_1)[5]": "(*params)[5]",
                "**param_1": "**params",
                "param_1[0xc]": "params[12]",
                "*(undefined *)((int)param_1 + 0x3d)": "*param_3d",
                "*(undefined *)((int)param_1 + 0x3e)": "*(param_3d + 1)"
            },
            "code": "int modify_params_08004aec(uint **params)\n{\n    uint *param_b = params[11];\n    char *param_3d = (char *)(params + 0x3d);\n    if ((param_b == (uint *)0x4 || param_b == (uint *)0x8) && (*param_3d == '('))\n    {\n        params[11] = DAT_08004b7c;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        params[12] = NULL;\n        *param_3d = ' ';\n        *(param_3d + 1) = 0;\n        FUN_08007ff0();\n    }\n    else if (*param_3d == '!')\n    {\n        params[11] = DAT_08004b7c;\n        params[12] = (uint *)0x21;\n        *param_3d = ' ';\n        *(param_3d + 1) = 0;\n        (*params)[1] &= 0xfffff8ff;\n        (*params)[5] = 0xfffffbff;\n        **params &= 0xfffffbff;\n        do_nothing_08004a22();\n    }\n    else\n    {\n        (*params)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "modify_params_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "get_default_value_0800887c"
            },
            "code": "int get_default_value_0800887c(void)\n{\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "get_default_value_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "input",
                "param_3": "output",
                "param_4": "flag",
                "uVar1": "result",
                "puVar2": "current_data",
                "local_c": "count"
            },
            "code": "uint32_t process_data_08004728(uint32_t **data, uint32_t *input, uint32_t *output, uint16_t flag) {\n    uint32_t result;\n    uint32_t *current_data;\n    int count;\n    if ((*data)[0x3d] == ' ') {\n        count = (uint32_t)(((uint64_t)DAT_080047ec * (uint64_t)((*data)[0x1e] >> 3)) >> 0x28) * 0x19;\n        do {\n            if (count == 0) {\n                (*data)[0xc] = NULL;\n                (*data)[0x3d] = 0x20;\n                (*data)[0xf] = 0;\n                result = 3;\n                goto exit;\n            }\n            current_data = *data;\n            count--;\n        } while ((current_data[6] & 2) != 0);\n        if ((*data)[0xf] == 1) {\n            result = 2;\n        }\n        else {\n            (*data)[0xf] = 1;\n            if ((*current_data & 1) == 0) {\n                *current_data = *current_data | 1;\n            }\n            **data = **data & 0xfffff7ff;\n            (*data)[0x3d] = 0x21;\n            (*data)[0x3e] = 0x10;\n            result = 0;\n            (*data)[0x10] = NULL;\n            (*data)[9] = output;\n            (*data)[0x2a] = flag;\n            (*data)[0xb] = DAT_080047f0;\n            (*data)[10] = (*data)[0x2a];\n            (*data)[0x11] = input;\n            **data = **data | 0x100;\n            (*data)[0xf] = 0;\n            (*data)[1] = (*data)[1] | 0x700;\n        }\n    }\n    else {\n        result = 2;\n    }\n    exit:\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "process_data_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_buffer_08007ede",
                "param_1": "buffer_start_address",
                "param_2": "data_start_address",
                "param_3": "data_size",
                "uVar1": "current_byte"
            },
            "code": "int copy_data_to_buffer_08007ede(int buffer_start_address, int data_start_address, uint data_size) {\n  uint current_byte;\n  if (data_size > 32) {\n    return 2;\n  }\n  for (current_byte = 0; current_byte < data_size; current_byte++) {\n    *(undefined *)(buffer_start_address + current_byte + 0x68) = *(undefined *)(data_start_address + current_byte);\n    *(char *)(buffer_start_address + 0x88) = *(char *)(buffer_start_address + 0x88) + '\\x01';\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "add_item_to_list_0800863c",
                "param_1": "item_id",
                "param_2": "item_value",
                "param_3": "item_flag",
                "param_4": "item_type",
                "iVar1": "list_size",
                "uVar2": "item_index"
            },
            "code": "void add_item_to_list_0800863c(int item_id, int item_value, int item_flag, int item_type)\n{\n  int list_size = get_list_size();\n  if (item_id != 0 && list_size < MAX_LIST_SIZE) {\n    int new_item_index = add_item_to_array(item_id, item_value);\n    if (new_item_index != -1) {\n      uint item_index = (uint)*(byte *)(item_id + ITEM_INDEX_OFFSET);\n      item_values[item_index] = item_value;\n      item_ids[item_index] = item_id;\n      update_item_flag(item_flag, item_index, item_type);\n      update_item_type(item_type, item_index);\n      update_item_size(list_size + 1);\n    }\n  }\n}\n",
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "add_item_to_list_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_one_thunk_0800887c"
            },
            "code": "int get_one_thunk_0800887c() {\n    return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "get_one_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "set_bit_080074e0",
                "param_1": "bit",
                "DAT_08007534": "BIT_FLAG_1",
                "DAT_08007538": "BIT_FLAG_3",
                "DAT_0800753c": "BIT_FLAG_4"
            },
            "code": "void set_bit_080074e0(int *bit) {\n    uint *base = (uint *)DAT_08007540;\n    if (*bit == DAT_08007534) {\n        base[0x18] &= 0xfffff7ff;\n    }\n    if (*bit == BIT_FLAG_2) {\n        base[0x1c] &= 0xfffffffe;\n    }\n    if (*bit == DAT_08007538) {\n        base[0x1c] &= 0xfffffffd;\n    }\n    if (*bit == DAT_0800753c) {\n        base[0x1c] &= 0xfffffffb;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007710",
                "FUN_08007110"
            ],
            "imported": false,
            "current_name": "set_bit_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_function_if_not_null_080073c0",
                "PTR_DAT_080073d0": "function_pointer_ptr",
                "PTR_DAT_080073d4": "function_parameter_ptr",
                "code": "function_pointer"
            },
            "code": "void execute_function_if_not_null_080073c0(void)\n{\n  code* function_pointer = *(code**)PTR_DAT_080073d0;\n  if (function_pointer != NULL) {\n    function_pointer(*(undefined4*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "update_data_080084b0",
                "PTR_DAT_080084f0": "data_array",
                "PTR_DAT_080084f4": "update_array",
                "PTR_DAT_080084f8": "search_array",
                "PTR_DAT_080084fc": "data_ptr",
                "cVar1": "data",
                "uVar3": "updated_data",
                "iVar4": "result"
            },
            "code": "void update_data_080084b0()\n{\n  char data = PTR_DAT_080084f0[1];\n  int result = search_data((int)data, PTR_DAT_080084f0);\n  if (result != 0) {\n    int data_index = search_data((int)data, PTR_DAT_080084f0);\n    char updated_data = modify_data(data_index, PTR_DAT_080084f4);\n    undefined *PTR_DAT_080084fc = PTR_DAT_080084f0;\n    PTR_DAT_080084fc[0x59] = updated_data;\n    PTR_DAT_080084fc[0x58] = data;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x48) = 0x2580;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x54) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x4c) = 0;\n    *(undefined4 *)(PTR_DAT_080084fc + 0x50) = 0;\n    execute_function(PTR_DAT_080084fc);\n  }\n  return;\n}",
            "called": [
                "FUN_08007320",
                "FUN_08008078",
                "FUN_0800734a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "update_data_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "get_value_from_param_08004050",
                "param_1": "param",
                "puVar2": "param_value",
                "uVar1": "value"
            },
            "code": "uint32_t get_value_from_param_08004050(uint32_t **param)\n{\n    uint32_t value;\n    uint32_t *param_value = *param;\n\n    if (*(char *)((int)param + 0x21) != '\\x02') {\n        param[0xe] = (uint32_t *)0x4;\n        return 1;\n    }\n\n    *param_value &= 0xfffffff1;\n    *param_value &= 0xfffffffe;\n\n    if (param_value == PTR_DAT_080040e0) {\n        value = 1;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 5) {\n        value = 0x10;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 10) {\n        value = 0x100;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 0xf) {\n        value = 0x1000;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 0x14) {\n        value = 0x10000;\n    }\n    else if (param_value == PTR_DAT_080040e0 + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n\n    *(uint32_t *)(PTR_DAT_080040e4 + 4) = value;\n    *(char *)((int)param + 0x21) = 1;\n    *(uint32_t *)(param + 8) = 0;\n\n    if (param[0xd] != (uint32_t *)0x0) {\n        (*(void (*)())param[0xd])();\n        return 0;\n    }\n\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "get_value_from_param_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "handle_special_case_08008e14",
                "param_1": "num1",
                "param_2": "num2",
                "FUN_08008df8": "call_function"
            },
            "code": "void handle_special_case_08008e14(int num1, int num2) {\n  if (num1 == 1 && num2 == 0xffff) {\n    call_function(PTR_DAT_08008e3c, 0, 0, 0, 0);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "handle_special_case_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "calculate_shifted_value_08005a28",
                "uVar1": "shifted_value",
                "FUN_08005a1c": "get_shifted_value",
                "PTR_DAT_08005a44": "pointer_array",
                "DAT_08005a40": "data_array"
            },
            "code": "unsigned int calculate_shifted_value_08005a28(void)\n{\n  unsigned int shifted_value;\n  shifted_value = get_shifted_value();\n  unsigned int index = (unsigned int)(*(int *)(DAT_08005a40 + 4) << 0x15) >> 0x1d;\n  unsigned int result = shifted_value >> PTR_DAT_08005a44[index];\n  return result;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_080045c0",
                "FUN_08006538",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "encode_080095a8",
                "param_1": "data",
                "param_2": "output_buffer",
                "param_3": "output_length",
                "param_4": "flags",
                "param_5": "encoder",
                "iVar1": "result",
                "uVar2": "max_output_length",
                "uVar3": "output_offset",
                "bVar4": "has_offset",
                "output_offset": "output_offset",
                "extra_byte": "extra_byte",
                "extra_length": "extra_length"
            },
            "code": "uint32_t encode_080095a8(uint32_t data, uint32_t *output_length, uint32_t *output_buffer, uint32_t flags, encode_080095a8r_fn *encode_080095a8r)\\n\\\n{\\n\\\n  int32_t i;\\n\\\n  uint32_t max_output_length = output_buffer[4];\\n\\\n  if (max_output_length < output_buffer[2]) {\\n\\\n    max_output_length = output_buffer[2];\\n\\\n  }\\n\\\n  *output_length = max_output_length;\\n\\\n  if (*(char *)((int)output_buffer + 0x43) != \"\\0\") {\\n\\\n    *output_length = max_output_length + 1;\\n\\\n  }\\n\\\n  if ((int32_t)(*output_buffer << 0x1a) < 0) {\\n\\\n    *output_length = *output_length + 2;\\n\\\n  }\\n\\\n  uint32_t output_offset = *output_buffer & 6;\\n\\\n  if (output_offset == 0) {\\n\\\n    for (; (int32_t)output_offset < (int32_t)(output_buffer[3] - *output_length); output_offset++) {\\n\\\n      int32_t result = (*encode_080095a8r)(data, flags, (int32_t)output_buffer + 0x19, 1);\\n\\\n      if (result == -1) {\\n\\\n        return 0xffffffff;\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  uint32_t extra_byte = (uint32_t)*(byte *)((int)output_buffer + 0x43);\\n\\\n  if (extra_byte != 0) {\\n\\\n    extra_byte = 1;\\n\\\n  }\\n\\\n  uint32_t extra_length = extra_byte;\\n\\\n  if ((int32_t)(*output_buffer << 0x1a) < 0) {\\n\\\n    *(undefined *)((int)output_buffer + extra_byte + 0x43) = 0x30;\\n\\\n    extra_length = extra_byte + 2;\\n\\\n    *(undefined *)((int)output_buffer + extra_byte + 0x44) = *(undefined *)((int)output_buffer + 0x45);\\n\\\n  }\\n\\\n  int32_t result = (*encode_080095a8r)(data, flags, (int32_t)output_buffer + 0x43, extra_length);\\n\\\n  if (result != -1) {\\n\\\n    uint32_t output_remaining = output_buffer[3];\\n\\\n    bool has_offset = (*output_buffer & 6) != 4;\\n\\\n    if (has_offset) {\\n\\\n      output_remaining = 0;\\n\\\n    }\\n\\\n    uint32_t output_processed = 0;\\n\\\n    if (!has_offset) {\\n\\\n      output_remaining = output_remaining - *output_length;\\n\\\n    }\\n\\\n    if (!has_offset) {\\n\\\n      output_remaining = output_remaining & ~((int32_t)output_remaining >> 0x1f);\\n\\\n    }\\n\\\n    if (max_output_length < output_buffer[2]) {\\n\\\n      output_remaining = output_remaining + (output_buffer[2] - output_buffer[4]);\\n\\\n    }\\n\\\n    while (true) {\\n\\\n      if (output_remaining == output_processed) {\\n\\\n        return 0;\\n\\\n      }\\n\\\n      result = (*encode_080095a8r)(data, flags, (int32_t)output_buffer + 0x1a, 1);\\n\\\n      if (result == -1) {\\n\\\n        break;\\n\\\n      }\\n\\\n      output_processed++;\\n\\\n    }\\n\\\n  }\\n\\\n  return 0xffffffff;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "encode_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "check_and_update_08003002",
                "param_1": "ptr_param_1",
                "*(char *)(param_1 + 0x1f8)": "*data_ptr",
                "FUN_08008990": "call_function_A",
                "FUN_08002fca": "call_function_B",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void check_and_update_08003002(int ptr_param_1)\n{\n    char* data_ptr = (char*)(ptr_param_1 + 0x1f8);\n    if (*data_ptr != '\\0') {\n        return;\n    }\n    call_function_A(0xd, 1);\n    call_function_B(ptr_param_1, 0xd, 2, 0x28, 0xd2);\n    do_nothing(0xfa);\n    call_function_B(ptr_param_1, 0xd, 5, 0x28, 0xd2);\n    do_nothing(0x7d);\n    return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "check_and_update_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "check_parameter_08003bd8",
                "param_1": "param_array",
                "iVar1": "param_value",
                "uVar2": "mask",
                "uVar3": "flags",
                "DAT_08003ce0": "GLOBAL_MASK",
                "DAT_08003ce4": "GLOBAL_MASK"
            },
            "code": "int check_parameter_08003bd8(int *param_array)\n{\n  int param_value;\n  uint32_t flags;\n  uint32_t mask;\n\n  if (param_array == NULL) {\n    return 1;\n  }\n  \n  if (param_array[10] == 0) {\n    param_array[11] = 0;\n    *(uint8_t *)(param_array + 9) = 0;\n    clear_flags();\n  }\n\n  param_value = get_parameter_value(param_array);\n  flags = param_array[10] & 0x10;\n\n  if ((flags == 0) && (param_value == 0)) {\n    param_array[10] = param_array[10] & 0xffffeefdU | 2;\n    mask = param_array[1] | param_array[7] | param_array[3] << 1;\n\n    if (param_array[2] == 0x100 || param_array[2] == 1) {\n      mask |= 0x100;\n    }\n\n    if (param_array[5] == 1) {\n      if (param_array[3] == 0) {\n        mask |= (param_array[6] - 1) * 0x2000 | 0x800;\n      }\n      else {\n        param_array[10] |= 0x20;\n        param_array[11] |= 1;\n      }\n    }\n\n    *(uint32_t *)(*param_array + 4) = mask | *(uint32_t *)(*param_array + 4) & 0xffff16ff;\n    *(uint32_t *)(*param_array + 8) = DAT_08003ce0 & *(uint32_t *)(*param_array + 8) | param_value;\n\n    if (param_array[2] == 0x100 || param_array[2] == 1) {\n      mask = (param_array[4] - 1) * 0x100000;\n    }\n    else {\n      mask = 0;\n    }\n\n    *(uint32_t *)(*param_array + 0x2c) = mask | *(uint32_t *)(*param_array + 0x2c) & 0xff0fffff;\n\n    if (param_value != (DAT_08003ce0 & *(uint32_t *)(*param_array + 8))) {\n      param_array[10] = param_array[10] & 0xffffffedU | 0x10;\n      param_array[11] |= 1;\n      return 1;\n    }\n\n    param_array[11] = 0;\n    param_array[10] = param_array[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n\n  param_array[10] |= 0x10;\n  return 1;\n}",
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_parameter_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_08009d50",
                "param_1": "param",
                "uVar1": "uVar",
                "iVar2": "iVar",
                "bVar3": "isParamEqual"
            },
            "code": "void initialize_08009d50(int param){\n    if (*(int *)(param + 0x18) == 0) {\n        int iVar = *(int *)PTR_PTR_DAT_08009da8;\n        *(undefined **)(param + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n        bool isParamEqual = param == iVar;\n        if (isParamEqual) {\n            iVar = 1;\n        }\n        if (isParamEqual) {\n            *(int *)(param + 0x18) = iVar;\n        }\n        undefined4 uVar = FUN_08009db0();\n        *(undefined4 *)(param + 4) = uVar;\n        uVar = FUN_08009db0(param);\n        *(undefined4 *)(param + 8) = uVar;\n        uVar = FUN_08009db0(param);\n        *(undefined4 *)(param + 0xc) = uVar;\n        FUN_08009cdc(*(undefined4 *)(param + 4), 4, 0);\n        FUN_08009cdc(*(undefined4 *)(param + 8), 9, 1);\n        FUN_08009cdc(*(undefined4 *)(param + 0xc), 0x12, 2);\n        *(undefined4 *)(param + 0x18) = 1;\n    }\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800937c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "update_params_08003366",
                "param_1": "base_address",
                "param_2": "param_value",
                "param_3": "first_param",
                "param_4": "second_param"
            },
            "code": "void update_params_08003366(int base_address, int param_value, undefined4 first_param, undefined4 second_param)\n{\n  if (param_value == 0x71) {\n    *(undefined4 *)(base_address + 0x68) = first_param;\n    *(undefined4 *)(base_address + 0x40) = second_param;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "update_params_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_data_to_buffer_080091b0",
                "param_1": "buffer_offset",
                "param_2": "source_data",
                "param_3": "data_length",
                "puVar1": "buffer_pointer",
                "puVar2": "source_pointer"
            },
            "code": "void copy_data_to_buffer_080091b0(int buffer_offset, undefined *source_data, int data_length) {\n  undefined *buffer_pointer;\n  undefined *source_pointer;\n  buffer_pointer = (undefined *)(buffer_offset + -1);\n  source_pointer = source_data + data_length;\n  for (; source_data != source_pointer; source_data = source_data + 1) {\n    buffer_pointer = buffer_pointer + 1;\n    *buffer_pointer = *source_data;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "copy_data_to_buffer_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "calculate_result_08009108",
                "param_1": "is_dat_zero",
                "param_2": "input_value"
            },
            "code": "longlong calculate_result_08009108(undefined4 is_dat_zero, uint input_value) {\n  if (DAT_08009120 != 0) {\n    return CONCAT44(is_dat_zero, 2);\n  }\n  return (ulonglong)input_value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "calculate_result_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "set_pointers_to_one_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800a228": "pointer_1",
                "PTR_DAT_0800a22c": "pointer_2",
                "PTR_DAT_0800a230": "pointer_3",
                "PTR_DAT_0800a234": "pointer_4",
                "PTR_DAT_0800a238": "pointer_5",
                "PTR_DAT_0800a23c": "pointer_6",
                "PTR_DAT_0800a240": "pointer_7",
                "PTR_DAT_0800a244": "pointer_8",
                "PTR_DAT_0800a248": "pointer_9",
                "PTR_DAT_0800a24c": "pointer_10",
                "PTR_DAT_0800a250": "pointer_11",
                "PTR_DAT_0800a254": "pointer_12",
                "FUN_08009b5c": "some_other_function",
                "jump_table": "jump_table",
                "set_pointer_to_one": "set_pointer_to_one"
            },
            "code": "void set_pointers_to_one_0800a18c(void)\n{\n  void (*jump_table)(void);\n  jump_table = set_pointers_to_one_0800a18c;\n  set_pointer_to_one(PTR_DAT_0800a228);\n  set_pointer_to_one(PTR_DAT_0800a22c);\n  set_pointer_to_one(PTR_DAT_0800a230);\n  set_pointer_to_one(PTR_DAT_0800a234);\n  set_pointer_to_one(PTR_DAT_0800a238);\n  set_pointer_to_one(PTR_DAT_0800a23c);\n  set_pointer_to_one(PTR_DAT_0800a240);\n  set_pointer_to_one(PTR_DAT_0800a244);\n  set_pointer_to_one(PTR_DAT_0800a248);\n  set_pointer_to_one(PTR_DAT_0800a24c);\n  set_pointer_to_one(PTR_DAT_0800a250);\n  set_pointer_to_one(PTR_DAT_0800a254);\n  jump_table();\n  return;\n}\n\nvoid set_pointer_to_one(int* pointer)\n{\n  if (*pointer < 0)\n  {\n    *pointer = 1;\n  }\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "set_pointers_to_one_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "calculate_result_08009908",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "default_value",
                "uVar2": "result",
                "uVar3": "calculation_result",
                "FUN_080091d8": "handle_success",
                "FUN_0800a154": "perform_calculation",
                "FUN_08009270": "calculate_other_value",
                "FUN_080091b0": "update_result"
            },
            "code": "uint calculate_result_08009908(uint input_1, uint input_2)\n{\n  undefined4 default_value = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (input_1 != 0) {\n    if (input_2 == 0) {\n      handle_error();\n      return input_2;\n    }\n    else {\n      uint result = perform_calculation();\n      if ((result < input_2) && (input_1 = calculate_other_value(default_value, input_2), input_1 != 0)) {\n        update_result(result, input_1, input_2);\n        handle_success(default_value, input_1);\n      }\n      return input_1;\n    }\n  }\n  uint result = calculate_other_value(default_value, input_2, input_2, PTR_PTR_DAT_08009914);\n  return result;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_0800a154"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "calculate_result_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "process_data_08008a24",
                "param_1": "data_index",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "data_ptr",
                "iVar1": "result",
                "uVar2": "data_mask",
                "puVar3": "data_array_ptr",
                "uVar4": "data_value"
            },
            "code": "void process_data_08008a24(uint data_index, undefined4 param_2, undefined4 param_3, undefined *data_ptr) {\n  int result;\n  uint data_value;\n  undefined *data_array_ptr;\n  if (data_index < 0x3c) {\n    data_value = (uint)(char)PTR_DAT_08008a64[data_index];\n    data_array_ptr = PTR_DAT_08008a64;\n  }\n  else {\n    data_value = 0xffffffff;\n    data_array_ptr = data_ptr;\n  }\n  if ((data_value != 0xffffffff) && (result = process_data_08008a24_value(data_value, PTR_DAT_08008a68, param_3, data_array_ptr, data_ptr), result != 0)) {\n    undefined4 data_mask = (data_value << 0x18) >> 0x1c;\n    uint data_shifted = 1 << (data_value & 0xf) & 0xffff;\n    set_data_value(data_mask, data_shifted, param_2);\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b7c",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_08002fca",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "initialize_system_08008abc",
                "FUN_0800723c": "initialize_database"
            },
            "code": "void initialize_system_08008abc(void)\n{\n  initialize_database();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "initialize_system_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "reverse_and_process_data_08002b68",
                "param_1": "data",
                "param_2": "data_len",
                "param_3": "key",
                "param_4": "iv",
                "param_5": "padding",
                "iVar1": "result",
                "uVar2": "padding_len",
                "uVar3": "remaining_data_len",
                "PTR_DAT_08002bf4": "key_schedule_ptr",
                "data_ptr": "current_data_ptr",
                "current_byte": "current_iv_byte"
            },
            "code": "int reverse_and_process_data_08002b68(uint8_t *data, uint32_t data_len, uint32_t key, uint32_t iv, uint8_t padding) {\n    int result = 0;\n    uint32_t remaining_data_len = data_len;\n    uint8_t *data_ptr = data;\n\n    if (*data_ptr == 0) {\n        return 0;\n    }\n\n    init(key);\n    if (*PTR_DAT_08002bf4 != 0) {\n        if (padding != 0) {\n            reverse_bytes(data_ptr, MIN(3, padding));\n            data_ptr += MIN(3, padding);\n            remaining_data_len -= MIN(3, padding);\n        }\n\n        while (remaining_data_len > 0) {\n            uint8_t current_byte = (uint8_t)(iv >> ((remaining_data_len - 1) * 8));\n            (**(code **)*data)(data, current_byte);\n            remaining_data_len--;\n        }\n\n        finalize(data + 5, (data_len & 0x7f) << 1, *(uint32_t *)PTR_DAT_08002bf4, iv, key);\n        if (*PTR_DAT_08002bf8 != 0) {\n            result = 0;\n        } else {\n            result = (int)*PTR_DAT_08002bfc;\n        }\n    } else {\n        *(data + 4) = 1;\n    }\n\n    return result;\n}",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a58",
                "FUN_08002a30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "reverse_and_process_data_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "*PTR_DAT_080005f0": "*memory_start",
                "*PTR_DAT_080005f4": "*memory_end"
            },
            "code": "void clear_memory_080005e0(void)\n{\n    *PTR_DAT_080005f0 = 0;\n    *PTR_DAT_080005f4 = 255;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_call_function_08008020",
                "param_1": "input_param",
                "iVar1": "function_result",
                "FUN_08007f78": "get_function_result",
                "*(char *)(iVar1 + 0x5d)": "*(char *)(function_result + 0x5d)",
                "FUN_080049e0": "call_function"
            },
            "code": "void check_and_call_function_08008020(undefined4 input_param)\\n{\\n  int function_result = get_function_result();\\n  if (*(char *)(function_result + 0x5d) == \"\\0\") {\\n    call_function(input_param);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_call_function_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_values_08005dac",
                "param_1": "base_address",
                "param_2": "params",
                "uVar1": "flag2",
                "iVar2": "param1",
                "iVar3": "param2"
            },
            "code": "void update_values_08005dac(int base_address, int *params)\n{\n    uint flag1 = *(uint *)(base_address + 0x20);\n    *(uint *)(base_address + 0x20) = flag1 & 0xffffefff;\n    uint flag2 = *(uint *)(base_address + 4);\n    int param1 = *params;\n    int param2 = params[2];\n    if (base_address == DAT_08005df0) {\n        flag2 = flag2 & 0xffffbfff | params[5] << 6;\n    }\n    *(uint *)(base_address + 4) = flag2;\n    *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | param1 << 8;\n    *(int *)(base_address + 0x40) = params[1];\n    *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | param2 << 0xc;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_values_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "set_flags_and_values_0800674e",
                "param_1": "ptr_param1",
                "do_nothing_0800674c": "do_nothing",
                "*(char *)((int)param_1 + 0x39)": "*(char *)(ptr_param1 + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(ptr_param1 + 0xe)",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)ptr_param1 + 0x39)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*ptr_param1 + 0xc)",
                "FUN_08006538": "set_values",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(*ptr_param1 + 0x10)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*ptr_param1 + 0x14)",
                "param_1[0xf]": "ptr_param1[0xf]"
            },
            "code": "int set_flags_and_values_0800674e(int *ptr_param1)\n{\n    if (ptr_param1 != NULL)\n    {\n        if (*(char *)(ptr_param1 + 0x39) == '\\0')\n        {\n            *(undefined *)(ptr_param1 + 0xe) = 0;\n            do_nothing();\n        }\n        *(undefined *)((int)ptr_param1 + 0x39) = 0x24;\n        *(uint *)(*ptr_param1 + 0xc) &= 0xffffdfff;\n        set_values(ptr_param1);\n        *(uint *)(*ptr_param1 + 0x10) &= 0xffffb7ff;\n        *(uint *)(*ptr_param1 + 0x14) &= 0xffffffd5;\n        *(uint *)(*ptr_param1 + 0xc) |= 0x2000;\n        ptr_param1[0xf] = 0;\n        *(undefined *)((int)ptr_param1 + 0x39) = 0x20;\n        *(undefined *)((int)ptr_param1 + 0x3a) = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "set_flags_and_values_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c",
                "param_1": "flag_value",
                "iVar1": "callback_ptr"
            },
            "code": "void execute_callback_if_flag_set_0800771c(int flag_value)\n{\n  int callback_ptr = get_callback_ptr();\n  if ((*(code **)(callback_ptr + 0x4c) != (code *)0x0) && (*(char *)(flag_value + 0x1c) == '\\x01')) {\n    (**(code **)(callback_ptr + 0x4c))(callback_ptr,0);\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_params_080066e8",
                "param_1": "params",
                "param_2": "mask",
                "param_3": "expected",
                "param_4": "threshold",
                "param_5": "timeout",
                "iVar1": "time_elapsed",
                "*param_1": "*params"
            },
            "code": "uint32_t check_params_080066e8(uint32_t **params, uint32_t mask, bool expected, int threshold, uint32_t timeout) {\n  while ((timeout != 0xffffffff) && ((timeout != 0) && (FUN_08003760() - threshold <= timeout))) {\n    if (((mask & ~**params) == 0) != expected) {\n      return 0;\n    }\n  }\n  (*params)[3] &= 0xfffffe5f;\n  (*params)[5] &= 0xfffffffe;\n  *((uint8_t *)params + 0x39) = 0x20;\n  *((uint8_t *)params + 0x3a) = 0x20;\n  *((uint32_t *)(params + 0xe)) = 0;\n  return 3;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_params_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "index",
                "FUN_0800932c": "process_value"
            },
            "code": "int process_data_08009358(undefined4 value1, undefined4 value2, undefined *data, int length) {\n  int index = 0;\n  int result = 0;\n  undefined *end_ptr = data + length;\n  while (data != end_ptr) {\n    if (index == 0) {\n      result = process_value(value1, *data, value2, length, index);\n    }\n    else {\n      result = process_value(value1, *data, value2, length, result);\n    }\n    index++;\n    data++;\n  }\n  return result;\n}\n",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_data_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c",
                "PTR_DAT_08002718": "first_value_ptr",
                "PTR_DAT_0800271c": "second_value_ptr"
            },
            "code": "int calculate_difference_0800270c(void) {\n    uint8_t first_value = *PTR_DAT_08002718;\n    uint8_t second_value = *PTR_DAT_0800271c;\n    uint difference = (uint)first_value - (uint)second_value;\n    return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "calculate_difference_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_params_08003370",
                "param_1": "obj",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3"
            },
            "code": "void set_params_08003370(int obj, int param1, int param2, int param3){\n                      *(int *)(obj + 0x6c) = param2;\n                      *(int *)(obj + 0x44) = param3;\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_params_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "process_data_08007fa0",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "param_4",
                "iVar1": "result"
            },
            "code": "void process_data_08007fa0(int data, int flag, int size, undefined4 param_4)\n{\n  int result = FUN_08007f78();\n  if (size == *(int *)(data + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      FUN_080048c8(data,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    FUN_08004954(data,result + 0x68,0x20,8,param_4);\n  }\n  return;\n}",
            "called": [
                "FUN_080048c8",
                "FUN_08007f78",
                "FUN_08004954"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "process_data_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "check_and_set_value_if_greater_than_current_08003376",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "index",
                "bVar1": "is_greater_than_current",
                "PTR_8": "current_size",
                "PTR_100": "function_pointer",
                "PTR_4": "offset_pointer"
            },
            "code": "void check_and_set_value_if_greater_than_current_08003376(uint8_t *buffer, uint8_t value, uint32_t index){\n                      bool is_greater_than_current = false;\n                      uint32_t PTR_8 = *(uint32_t *)(buffer + 8);\n                      uint32_t *PTR_100 = (uint32_t *)(buffer + 100);\n                      uint32_t *PTR_4 = (uint32_t *)(buffer + 4);\n                      if (index >= PTR_8){\n                        is_greater_than_current = true;\n                        if (*PTR_100 != 0){\n                          *buffer = 1;\n                          (**(void (*)(uint32_t))(PTR_100))( *(uint32_t *)(buffer + 0x3c));\n                          if (index >= *(uint32_t *)(buffer + 8)){\n                            is_greater_than_current = true;\n                          }\n                          else{\n                            is_greater_than_current = false;\n                          }\n                        }\n                      }\n                      if (!is_greater_than_current){\n                        *(buffer + *(PTR_4) + index) = value;\n                      }\n                    }",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "check_and_set_value_if_greater_than_current_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "checkAndCallFunction_08008bf4",
                "DAT_08008c18": "shouldCallFunction",
                "PTR_DAT_08008c1c": "functionPointer"
            },
            "code": "void checkAndCallFunction_08008bf4(void)\n{\n  if (DAT_08008c18 != 0) {\n    callFunction(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "checkAndCallFunction_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "base_address",
                "*(undefined4 *)(param_1 + 0x40)": "value_ptr",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_value_at_offset_08005430(int base_address, int offset) {\n    int* value_ptr = (int*)(base_address + offset);\n    return *value_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "read_byte_08002720",
                "PTR_DAT_08002740": "data_start_index",
                "PTR_DAT_08002744": "data_end_index",
                "PTR_DAT_08002748": "data_pointer",
                "bVar1": "current_byte_index",
                "bVar2": "data_value"
            },
            "code": "uint read_byte_08002720(void)\n{\n  uint current_byte_index = *PTR_DAT_08002740;\n  if (current_byte_index < *PTR_DAT_08002744) {\n    uint data_address = *(uint *)(*PTR_DAT_08002748 + current_byte_index);\n    *PTR_DAT_08002740 = current_byte_index + 1;\n    return (uint)*(byte *)data_address;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "read_byte_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "execute_function_on_pointer_080031ce",
                "param_1": "ptr_param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "count",
                "param_5": "param5",
                "puVar1": "ptr_function",
                "uVar2": "i"
            },
            "code": "void execute_function_on_pointer_080031ce(uint32_t *ptr_param1, uint32_t param2, uint32_t param3, uint32_t count, int param5) {\n  uint32_t *ptr_function = (uint32_t *)*ptr_param1;\n  if (ptr_function != NULL) {\n    (**(void (**)(uint32_t *, uint32_t, uint32_t, void *, uint32_t))(void *)*ptr_function)(ptr_function, 0xf0, param3, *(void **)*ptr_function, count);\n    (***(void (***)(uint32_t *)) (uint32_t *)*ptr_param1)((uint32_t *)*ptr_param1, 0x79);\n    (***(void (***)(uint32_t *)) (uint32_t *)*ptr_param1)((uint32_t *)*ptr_param1, param2);\n    (***(void (***)(uint32_t *)) (uint32_t *)*ptr_param1)((uint32_t *)*ptr_param1, param3);\n    for (uint32_t i = 0; i < count; i++) {\n      execute_function_on_pointer_080031ce(ptr_param1, 1, param5 + i, 0);\n    }\n    (***(void (***)(uint32_t *)) (uint32_t *)*ptr_param1)((uint32_t *)*ptr_param1, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "execute_function_on_pointer_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "process_input_08009918",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_pointer",
                "iVar2": "result"
            },
            "code": "void process_input_08009918(int *output, undefined4 input) {\n  undefined *data_pointer;\n  int result;\n  data_pointer = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  result = perform_calculation(input);\n  if ((result == -1) && (*(int *)data_pointer != 0)) {\n    *output = *(int *)data_pointer;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "process_input_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "count_down_08005434",
                "param_1": "num",
                "local_4": "countdown_value",
                "DAT_0800545c": "global_constant",
                "PTR_DAT_08005458": "global_pointer"
            },
            "code": "void count_down_08005434(int num)\n{\n  int countdown_value = num * (uint)((ulonglong)DAT_0800545c * (ulonglong)*PTR_DAT_08005458 >> 0x29);\n  do {\n    countdown_value--;\n  } while (countdown_value != 0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "update_data_08005e2e",
                "param_1": "data",
                "puVar1": "data_ptr",
                "*(undefined *)((int)param_1 + 0x3d)": "data[0][61]",
                "puVar1[8]": "data_ptr[8]",
                "*puVar1": "*data_ptr",
                "FUN_08007110": "call_function",
                "*(undefined *)(param_1 + 0xf)": "data[15]"
            },
            "code": "void update_data_08005e2e(uint **data)\n{\n  uint *data_ptr;\n  data[0][61] = 2;\n  data_ptr = *data;\n  if ((data_ptr[8] & 0x1111) == 0) {\n    if ((data_ptr[8] & 0x444) == 0) {\n      *data_ptr = *data_ptr & 0xfffffffe;\n    }\n  }\n  call_function(data);\n  data[0][61] = 0;\n  data[15] = 0;\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_data_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_function_if_not_null_08007736",
                "iVar1": "function_pointer_address",
                "FUN_08007718": "get_function_pointer_address",
                "*(code **)(iVar1 + 0x48)": "function_pointer",
                "code *": "code_pointer",
                "NULL": "null",
                "(**(code **)(iVar1 + 0x48))()": "(*function_pointer)()"
            },
            "code": "void execute_function_if_not_null_08007736(void)\n{\n  int function_pointer_address = get_function_pointer_address();\n  code* function_pointer = *(code**)(function_pointer_address + 0x48);\n  if (function_pointer != NULL) {\n    (*function_pointer)();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_data_08002968",
                "param_1": "data_address",
                "param_2": "data_value",
                "iVar1": "index",
                "iVar2": "data_ptr"
            },
            "code": "void initialize_data_08002968(int data_address, uint32_t data_value) {\n    int index = (data_value & 0x7f) << 1;\n    *(char *)(data_address + 0x10) = (char)index;\n    if (data_value == 0x33) {\n        *(undefined *)(data_address + 0x11) = 1;\n    }\n    else {\n        *(undefined *)(data_address + 0x11) = 0;\n    }\n    int data_ptr = data_address + 0x14;\n    FUNC_080077b0(data_ptr, PTR_DAT_08002a10, 0x4000, index, *(undefined *)(data_address + 0x11));\n    if (*(char *)(data_address + 0x11) == '\\0') {\n        FUN_08007f8e(data_ptr, PTR_LAB_08002774_1_08002a14);\n        FUN_08007f7c(data_ptr, PTR_LAB_08002b00_1_08002a18);\n    }\n}",
            "called": [
                "FUN_08007f7c",
                "FUN_08007f8e",
                "FUN_080077b0",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_data_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input",
                "puVar1": "flag",
                "first_char": "first_char",
                "second_short": "second_short",
                "PTR_DAT_08004ccc_0000000b": "input[0xB]",
                "PTR_DAT_08004ccc_0000000c": "input[0xC]",
                "PTR_DAT_08004ccc_00000009": "input[9]",
                "PTR_DAT_08004ccc_00000001": "(*input)[1]",
                "PTR_DAT_08004ccc_00000004": "(*input)[4]",
                "PTR_FUN_08004b80": "do_nothing_08004b80",
                "PTR_FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input)\n{\n  uint32_t *flag = PTR_DAT_08004ccc_0000000b;\n  char first_char = *(char *)((int)input + 0x3D);\n  if (first_char == '!') {\n    uint16_t second_short = *(uint16_t *)((int)input + 0x2A);\n    if (second_short == 0) {\n      if (((flag == (uint32_t *)0x4) || (flag == (uint32_t *)0x8)) || (flag == (uint32_t *)0xFFFF0000)) {\n        PTR_DAT_08004ccc_00000001 = PTR_DAT_08004ccc_00000001 & 0xFFFFF8FF;\n        **input = **input | 0x200;\n        PTR_DAT_08004ccc_0000000c = (uint32_t *)0x0;\n        *(char *)((int)input + 0x3D) = 0x20;\n        char second_char = *(char *)((int)input + 0x3E);\n        if (second_char == '@') {\n          *(char *)((int)input + 0x3E) = 0;\n          PTR_FUN_08004b80();\n        }\n        else {\n          *(char *)((int)input + 0x3E) = 0;\n          PTR_FUN_08004a1e();\n        }\n      }\n      else {\n        PTR_DAT_08004ccc_00000001 = PTR_DAT_08004ccc_00000001 & 0xFFFFF8FF;\n        PTR_DAT_08004ccc_0000000c = (uint32_t *)0x11;\n        *(char *)((int)input + 0x3E) = 0;\n        *(char *)((int)input + 0x3D) = 0x20;\n        PTR_FUN_08004a1e();\n      }\n    }\n    else {\n      uint32_t *ptr = PTR_DAT_08004ccc_00000009;\n      PTR_DAT_08004ccc_00000009 = (uint32_t *)((int)ptr + 1);\n      PTR_DAT_08004ccc_00000004 = (uint32_t)*(char *)ptr;\n      *(uint16_t *)((int)input + 0x2A) = *(uint16_t *)((int)input + 0x2A) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "check_if_flag_set_080042d4",
                "param_1": "flag",
                "param_2": "value",
                "PTR_": "flag_ptr",
                "DAT_": "data"
            },
            "code": "int check_if_flag_set_080042d4(int flag, uint value) {\n    uint* PTR_ = (uint*)(flag + 8);\n    if ((value & *PTR_) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "check_if_flag_set_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_value_at_offset_0800542a",
                "param_1": "offset"
            },
            "code": "unsigned char get_value_at_offset_0800542a(int offset) {\n    return *(unsigned char *)(offset + 0x3d);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_0800457c",
                "param_1": "data",
                "pbVar1": "byte_ptr",
                "short_ptr": "short_ptr",
                "*pbVar1": "*byte_ptr",
                "*param_1": "*data"
            },
            "code": "int increment_byte_0800457c(int *data)\n{\n    short *short_ptr = (short *)((int)data + 0x2a);\n    if (*short_ptr != 0)\n    {\n        byte *byte_ptr = (byte *)data[9];\n        data[9] = (int)(byte_ptr + 1);\n        uint *uint_ptr = (uint *)(*data + 0x10);\n        *uint_ptr = (uint)*byte_ptr;\n        *short_ptr = *short_ptr - 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "fill_memory_with_value_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_memory",
                "*puVar1": "*end_memory"
            },
            "code": "void fill_memory_with_value_080091c6(void *memory, char value, int size)\n{\n  void *end_memory = memory + size;\n  for (; memory != end_memory; memory++) {\n    *memory = value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08009cdc",
                "FUN_08009d24",
                "FUN_08007118",
                "FUN_08002a58",
                "FUN_08002968",
                "FUN_08006d80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "check_and_update_value_0800a07a",
                "param_1": "input_param",
                "param_2": "input_offset",
                "iVar1": "result",
                "uVar2": "updated_value",
                "bVar3": "is_result_minus_one"
            },
            "code": "void check_and_update_value_0800a07a(undefined4 input_param, int input_offset)\n{\n  int result = FUN_0800a130(input_param, (int)*(short *)(input_offset + 0xe));\n  bool is_result_minus_one = result == -1;\n  ushort updated_value;\n  if (is_result_minus_one) {\n    updated_value = *(ushort *)(input_offset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(input_offset + 0x54) = result;\n    updated_value = *(ushort *)(input_offset + 0xc) | 0x1000;\n  }\n  if (is_result_minus_one) {\n    *(ushort *)(input_offset + 0xc) = updated_value;\n  }\n  else {\n    *(ushort *)(input_offset + 0xc) = updated_value;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_value_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "set_flag_if_not_set_08003a20",
                "param_1": "flag_array",
                "param_2": "flag_value",
                "iVar1": "current_fun_call_result",
                "iVar3": "flag_array_offset",
                "local_14": "loop_count",
                "global_constant_1": "DAT_08003a9c",
                "global_pointer_1": "PTR_DAT_08003a98",
                "call_function_1": "FUN_08003760"
            },
            "code": "int set_flag_if_not_set_08003a20(int *flag_array, int flag_value) {\\\n  int flag_array_offset = *flag_array;\\\n  if ((*(uint *)(flag_array_offset + 8) & 1) == 0) {\\\n    *(uint *)(flag_array_offset + 8) = *(uint *)(flag_array_offset + 8) | 1;\\\n    uint loop_count = (uint)((ulonglong)global_constant_1 * (ulonglong)*(uint *)global_pointer_1 >> 0x32);\\\n    for (; loop_count != 0; loop_count--) {\\\n    }\\\n    int initial_fun_call_result = call_function_1(flag_array, flag_value,\\\n                         (int)((ulonglong)global_constant_1 * (ulonglong)*(uint *)global_pointer_1));\\\n    do {\\\n      if ((*(uint *)(*flag_array + 8) & 1) != 0) {\\\n        return 0;\\\n      }\\\n      int current_fun_call_result = call_function_1();\\\n    } while ((uint)(current_fun_call_result - initial_fun_call_result) < 3);\\\n    flag_array[10] = flag_array[10] | 0x10;\\\n    flag_array[0xb] = flag_array[0xb] | 1;\\\n    *(undefined *)(flag_array + 9) = 0;\\\n    return 1;\\\n  }\\\n  else {\\\n    return 0;\\\n  }\\\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003aa0",
                "FUN_08003e20"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "set_flags_and_value_080064b0",
                "param_1": "memory_address",
                "*param_1": "*memory_address",
                "uint": "uint32_t",
                "*(uint *)(*param_1 + 0xc)": "*flag_1",
                "*(uint *)(*param_1 + 0x14)": "*flag_2",
                "0xfffffedf": "0b11111111111111111111111011011111",
                "0xfffffffe": "0b11111111111111111111111111111110",
                "undefined": "char",
                "(int)param_1 + 0x3a": "(int)memory_address + 0x3a"
            },
            "code": "void set_flags_and_value_080064b0(int *memory_address)\n{\n  uint32_t *flag_1 = (uint32_t *)(*memory_address + 0xc);\n  uint32_t *flag_2 = (uint32_t *)(*memory_address + 0x14);\n  *flag_1 = *flag_1 & 0xfffffedf;\n  *flag_2 = *flag_2 & 0xfffffffe;\n  *(char *)((int)memory_address + 0x3a) = 0x20;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flags_and_value_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "unused_variable",
                "DAT_08009d14": "DAT_08009d14",
                "PTR_FUN_0800a042_1_08009d18": "PTR_FUN_0800a042_1_08009d18",
                "PTR_FUN_0800a07a_1_08009d1c": "PTR_FUN_0800a07a_1_08009d1c",
                "PTR_LAB_0800a09e_1_08009d20": "PTR_LAB_0800a09e_1_08009d20",
                "FUN_080091c6": "initialize_memory"
            },
            "code": "void initialize_data_08009cdc(undefined4 *data, undefined2 param_2, undefined2 param_3)\n{\n  data[0] = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = param_2;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = param_3;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  initialize_memory(data + 0x17, 0, 8);\n  data[8] = data;\n  data[9] = DAT_08009d14;\n  data[10] = PTR_FUN_0800a042_1_08009d18;\n  data[0xb] = PTR_FUN_0800a07a_1_08009d1c;\n  data[0xc] = PTR_LAB_0800a09e_1_08009d20;\n  return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "check_string_08002a58",
                "param_1": "str_address",
                "iVar1": "comparison_result",
                "uVar2": "result",
                "PTR_DAT_08002ab0": "string_to_compare",
                "PTR_DAT_08002aac": "string_pointer",
                "PTR_DAT_08002aa8": "comparison_result_pointer",
                "PTR_DAT_08002ab4": "string_length",
                "PTR_DAT_08002ab8": "pointer_to_zero",
                "PTR_DAT_08002abc": "another_pointer"
            },
            "code": "int check_string_08002a58(int str_address) {\n  int result;\n  if (*(char *)(str_address + 0x11) == '\\0') {\n    result = 4;\n  }\n  else {\n    int comparison_result = compare_strings(str_address + 0x14, *PTR_DAT_08002ab0, *(int *)PTR_DAT_08002aac, *PTR_DAT_08002aa8);\n    if (comparison_result == 0) {\n      result = 0;\n    }\n    else if (comparison_result == 1) {\n      result = 1;\n    }\n    else {\n      result = 4;\n    }\n    if (*(int *)PTR_DAT_08002aac != 0) {\n      set_string_to_zero(*(int *)PTR_DAT_08002aac, 0, *PTR_DAT_08002ab4);\n    }\n    *PTR_DAT_08002ab8 = 0;\n    *PTR_DAT_08002aa8 = 0;\n    *PTR_DAT_08002abc = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002ac0",
                "FUN_08001c18",
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_string_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "calculate_param_080026b0",
                "param_1": "input_1",
                "param_2": "modified_input_2",
                "0x220": "max_input_2_limit",
                "0xb4": "max_input_2",
                "FUN_08008ef4": "calculate_input",
                "0": "min_input_2",
                "(0x88 - *(char *)(param_1 + 1)) * 4": "max_calculation_input",
                "(600 - *(char *)(param_1 + 2)) * 4": "min_calculation_input",
                "FUN_0800267c": "calculate_output"
            },
            "code": "void calculate_param_080026b0(int input_1, int input_2){\n    int modified_input_2 = input_2;\n    int max_input_2 = 0xb4;\n    int min_input_2 = 0;\n    int max_calculation_input = (0x88 - *(char *)(input_1 + 1)) * 4;\n    int min_calculation_input = (600 - *(char *)(input_1 + 2)) * 4;\n    if (input_2 < 0x220) {\n        if (input_2 < 0) {\n            modified_input_2 = min_input_2;\n        } else if (input_2 > max_input_2) {\n            modified_input_2 = max_input_2;\n        }\n        modified_input_2 = calculate_input(modified_input_2, min_input_2, max_input_2, max_calculation_input, min_calculation_input);\n    }\n    calculate_output(input_1, modified_input_2);\n}",
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "calculate_param_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "process_data_08006092",
                "param_1": "data_array",
                "*(char *)((int)param_1 + 0x3d)": "data_array[61]",
                "*(undefined *)(param_1 + 0xf)": "data_array[15]",
                "FUNC_08006e68": "execute_function",
                "FUN_08005fe8": "call_function"
            },
            "code": "int process_data_08006092(int *data_array)\n{\n    if (data_array != NULL)\n    {\n        if (data_array[15] == 0)\n        {\n            data_array[15] = 0;\n            execute_function();\n        }\n        data_array[61] = 2;\n        call_function(data_array[0], &data_array[1]);\n        data_array[61] = 1;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006e68",
                "FUN_08005fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "process_data_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "execute_if_first_param_is_one_08008d8c",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "PTR_DAT_08008dac": "PTR_DAT_08008dac",
                "DAT_08008da8": "DAT_08008da8"
            },
            "code": "void execute_if_first_param_is_one_08008d8c(int first_param, int second_param, undefined4 third_param, undefined4 fourth_param)\n{\n  if (first_param != 1) {\n    return;\n  }\n  if (second_param == 0xffff) {\n    execute_with_specific_params(PTR_DAT_08008dac, DAT_08008da8, third_param, 0xffff, fourth_param);\n  }\n  return;\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_first_param_is_one_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "process_data_080004d4",
                "param_1": "data",
                "param_2": "flag",
                "iVar1": "count",
                "puVar2": "data_ptr"
            },
            "code": "void process_data_080004d4(int data, int flag) {\n  int count;\n  unsigned char *data_ptr;\n  if (data != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    data_ptr = PTR_DAT_080004fc;\n    for (count = 11; count >= 0; count--) {\n      process_byte(data_ptr);\n      data_ptr += 3;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = FUN_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      FUN_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = FUN_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = FUN_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      FUN_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    FUN_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = FUN_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          FUN_08008a24(param_1,0);\n        }\n        FUN_08008990(param_1,1);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = FUN_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = FUN_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08008990(param_1,0);\n        }\n        FUN_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08008990(param_1,1);\n        FUN_080088e0(param_1,0);\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = FUN_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          FUN_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      FUN_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = FUN_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = FUN_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = FUN_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        FUN_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        FUN_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        FUN_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08002fa8",
                "FUN_08002f14",
                "FUN_08000488",
                "FUN_08008a24",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_0800738a",
                "FUN_080026f8",
                "FUN_08008990",
                "FUN_08000588",
                "FUN_080005e0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "execute_function_with_params_08009124",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "function_param_3",
                "param_4": "function_param_4",
                "uStack_8": "local_param_3",
                "uStack_4": "local_param_4",
                "*PTR_PTR_DAT_08009144": "function_pointer"
            },
            "code": "void execute_function_with_params_08009124(void **PTR_PTR_DAT_08009144, int param_1, int param_2, int *param_3, int param_4) {\n  int local_param_3 = *param_3;\n  int local_param_4 = param_4;\n  *PTR_PTR_DAT_08009144(param_1, param_2, &local_param_3, param_1, &local_param_3);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "base_address",
                "*(undefined *)(param_2 + param_1 + 0xcc)": "*(undefined *)(base_address + offset + 0xcc)"
            },
            "code": "undefined get_value_at_offset_08002fa0(int offset, int base_address)\n{\n    return *(undefined *)(base_address + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_080022f8",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_from_offset_08003a1c",
                "param_1": "offset",
                "PTR_": "value_ptr",
                "DAT_": "data_"
            },
            "code": "int get_value_from_offset_08003a1c(int offset)\n{\n  int* PTR_ = (int*)(offset + 0x28);\n  return *PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_from_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "check_and_update_flags_08005cb4",
                "param_1": "flags",
                "**param_1": "*flags",
                "*param_1": "(*flags)",
                "DAT_08005ce8": "global_var"
            },
            "code": "void check_and_update_flags_08005cb4(uint **flags)\n{\n    bool flag1 = (**flags & 2) != 0;\n    bool flag2 = ((*flags)[1] & 2) != 0;\n    if (flag1 && flag2) {\n        call_some_function();\n        (*flags)[1] = 0xfffffffd;\n    }\n    *(uint *)(DAT_08005ce8 + 0x14) = 0x20000;\n    *(bool *)((int)flags + 0x11) = true;\n    return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "check_and_update_flags_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_from_struct_08007744",
                "param_1": "struct_ptr",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int get_value_from_struct_08007744(int struct_ptr)\n{\n    int* data_ptr = *(int*)(struct_ptr + 4);\n    int value = *(int*)(data_ptr + 0x24);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_struct_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "*param_1": "*input_values",
                "uVar1": "multiplier",
                "uVar2": "temp_value",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3",
                "iVar6": "value4",
                "iVar7": "value5",
                "iVar8": "value6",
                "iVar9": "value7",
                "iVar10": "value8",
                "iVar11": "value9",
                "iVar12": "input_value1"
            },
            "code": "void calculate_values_08006538(int *input_values)\n{\n  ulonglong multiplier;\n  uint temp_value;\n  int value1, value2, value3, value4, value5, value6, value7, value8, value9, value10;\n  \n  *(uint *)(*input_values + 0x10) = *(uint *)(*input_values + 0x10) & 0xffffcfff | input_values[3];\n  *(uint *)(*input_values + 0xc) = input_values[2] | input_values[4] | input_values[5] | *(uint *)(*input_values + 0xc) & 0xffffe9f3;\n  *(uint *)(*input_values + 0x14) = *(uint *)(*input_values + 0x14) & 0xfffffcff | input_values[6];\n  int input_value1 = *input_values;\n  if (input_value1 != PTR_DAT_080066e0) {\n    value1 = FUN_08005a28();\n    temp_value = DAT_080066e4;\n    int input_value2 = input_values[1];\n    multiplier = (ulonglong)DAT_080066e4;\n    value2 = FUN_08005a28();\n    value3 = input_values[1];\n    value4 = FUN_08005a28();\n    value5 = input_values[1];\n    value6 = FUN_08005a28();\n    value7 = input_values[1];\n    value8 = FUN_08005a28();\n    *(uint *)(input_value1 + 8) = ((uint)((int)((ulonglong)temp_value * (ulonglong)(((uint)(value6 * 0x19) / (uint)(value7 << 2) + (uint)((ulonglong)temp_value * ((ulonglong)(uint)(value8 * 0x19) / (ulonglong)(uint)(input_values[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((uint)((ulonglong)temp_value * (ulonglong)(((uint)(value2 * 0x19) / (uint)(value3 << 2) + (uint)((ulonglong)temp_value * ((ulonglong)(uint)(value4 * 0x19) / (ulonglong)(uint)(value5 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) + (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(input_value2 << 2)) >> 0x25) * 0x10;\n    return;\n  }\n  value1 = FUN_08005a48();\n  temp_value = DAT_080066e4;\n  int input_value2 = input_values[1];\n  multiplier = (ulonglong)DAT_080066e4;\n  value2 = FUN_08005a48();\n  value3 = input_values[1];\n  value4 = FUN_08005a48();\n  value5 = input_values[1];\n  value6 = FUN_08005a48();\n  value7 = input_values[1];\n  value8 = FUN_08005a48();\n  *(uint *)(input_value1 + 8) = ((uint)((int)((ulonglong)temp_value * (ulonglong)(((uint)(value6 * 0x19) / (uint)(value7 << 2) + (uint)((ulonglong)temp_value * ((ulonglong)(uint)(value8 * 0x19) / (ulonglong)(uint)(input_values[1] << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x20) << 0x17) >> 0x1c) + ((uint)((ulonglong)temp_value * (ulonglong)(((uint)(value2 * 0x19) / (uint)(value3 << 2) + (uint)((ulonglong)temp_value * ((ulonglong)(uint)(value4 * 0x19) / (ulonglong)(uint)(value5 << 2)) >> 0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf0) + (uint)(multiplier * ((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(input_value2 << 2)) >> 0x25) * 0x10;\n  return;\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_param_080042e2",
                "param_1": "obj_addr",
                "param_2": "param_val",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x10)": "*(int *)(obj_addr + 0x10)"
            },
            "code": "void set_param_080042e2(int obj_addr, int param_val, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(obj_addr + 0x10) = param_val << 0x10;\n    return;\n  }\n  *(int *)(obj_addr + 0x10) = param_val;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_param_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "update_memory_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value",
                "*(char *)(param_1 + param_2 + 0xcc)": "current_value"
            },
            "code": "void update_memory_08002fa8(int base_address, int offset, char new_value) {\n  char current_value = *(char *)(base_address + offset + 0xcc);\n  if (current_value != '\\x7f') {\n    *(char *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_memory_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "execute_function_0800325a",
                "param_1": "function_ptr",
                "param_2": "arg1",
                "param_3": "num_iterations",
                "param_4": "arg3",
                "puVar1": "next_function_ptr",
                "uVar2": "i"
            },
            "code": "void execute_function_0800325a(undefined4 *function_ptr, undefined4 arg1, uint num_iterations, int arg3)\n{\n    undefined4 *next_function_ptr;\n    uint i;\n    next_function_ptr = (undefined4 *)*function_ptr;\n    if (next_function_ptr != (undefined4 *)0x0) {\n        (**(code **)*next_function_ptr)(next_function_ptr, 0xf0);\n        (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr, arg1);\n        for (i = 0; i < num_iterations; i++) {\n            FUN_0800307a(function_ptr, 1, arg3 + i, 0);\n        }\n        (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr, 0xf7);\n    }\n    return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "imported": false,
            "current_name": "execute_function_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_into_linked_list_080091d8",
                "param_1": "head",
                "param_2": "value_to_insert",
                "param_3": "error_code",
                "param_4": "unused_param",
                "puVar1": "pointer_to_current_node",
                "extraout_r1": "next_node_ptr",
                "ppiVar2": "next_node_ptr",
                "ppiVar3": "current_node_next_ptr",
                "piVar4": "next_node",
                "ppiVar5": "list_head_ptr",
                "ppiVar6": "current_node_next_ptr",
                "ppiVar7": "current_node_ptr"
            },
            "code": "void insert_into_linked_list_080091d8(int *head, int value_to_insert, int error_code, int unused_param)\n{\n    if (value_to_insert == 0) {\n        return;\n    }\n    int **current_node_ptr = (int **)(value_to_insert - 4);\n    if (*current_node_ptr < 0) {\n        current_node_ptr = (int **)((int)current_node_ptr + **current_node_ptr);\n    }\n    do_nothing_08009f48();\n    int **list_head_ptr = *(int ***)PTR_DAT_0800926c;\n    if (list_head_ptr == NULL) {\n        current_node_ptr[1] = NULL;\n        *(int ***)PTR_DAT_0800926c = current_node_ptr;\n    }\n    else if (current_node_ptr < list_head_ptr) {\n        int **next_node_ptr = (int **)*current_node_ptr;\n        int **current_node_next_ptr = (int **)((int)current_node_ptr + (int)next_node_ptr);\n        if (list_head_ptr == current_node_next_ptr) {\n            int *next_node = *list_head_ptr;\n            list_head_ptr = (int **)list_head_ptr[1];\n            current_node_next_ptr = (int **)((int)next_node + (int)next_node_ptr);\n            *current_node_ptr = (int)current_node_next_ptr;\n        }\n        current_node_ptr[1] = (int *)list_head_ptr;\n        *(int ***)PTR_DAT_0800926c = current_node_ptr;\n    }\n    else {\n        int **current_node_next_ptr = list_head_ptr;\n        while (current_node_next_ptr[1] != NULL && current_node_next_ptr[1] <= current_node_ptr) {\n            current_node_next_ptr = current_node_next_ptr[1];\n        }\n        int **next_node_ptr = (int **)*current_node_next_ptr;\n        if ((int **)((int)current_node_next_ptr + (int)next_node_ptr) == current_node_ptr) {\n            next_node_ptr = (int **)((int)next_node_ptr + *current_node_ptr);\n            *current_node_next_ptr = (int)next_node_ptr;\n            if (current_node_next_ptr[1] == (int **)((int)current_node_next_ptr + (int)next_node_ptr)) {\n                int *next_node = *current_node_next_ptr[1];\n                current_node_next_ptr[1] = (int **)next_node_ptr[1];\n                next_node_ptr = (int **)((int)next_node_ptr + (int)next_node);\n                *current_node_next_ptr = (int)next_node_ptr;\n            }\n        }\n        else if (current_node_ptr < (int **)((int)current_node_next_ptr + (int)next_node_ptr)) {\n            *head = error_code;\n        }\n        else {\n            next_node_ptr = (int **)((int)current_node_ptr + (int)*current_node_ptr);\n            if (current_node_next_ptr[1] == next_node_ptr) {\n                int *next_node = *current_node_next_ptr[1];\n                current_node_next_ptr[1] = (int **)next_node_ptr;\n                next_node_ptr = (int **)((int)next_node + (int)*current_node_ptr);\n                *current_node_ptr = (int)next_node_ptr;\n            }\n            current_node_ptr[1] = (int *)current_node_next_ptr[1];\n            current_node_next_ptr[1] = current_node_ptr;\n        }\n    }\n    do_nothing_08009f4a(head, current_node_ptr, current_node_next_ptr, unused_param);\n    return;\n}",
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "check_and_set_values_0800688e",
                "param_1": "ptr_data",
                "param_2": "data_size",
                "param_3": "data_value",
                "(char *)((int)param_1 + 0x39)": "(char *)((int)ptr_data + 0x39)",
                "*(char *)((int)param_1 + 0x39)": "*(char *)((int)ptr_data + 0x39)",
                "param_2 == 0": "data_size == 0",
                "param_3 == 0": "data_value == 0",
                "*(char *)(param_1 + 0xe)": "*(char *)(ptr_data + 0xe)",
                "param_1[8]": "ptr_data[8]",
                "*(short *)(param_1 + 9)": "*(short *)(ptr_data + 9)",
                "*(short *)((int)param_1 + 0x26)": "*(short *)((int)ptr_data + 0x26)",
                "ptr_data[0xf]": "ptr_data[0xf]",
                "*(undefined *)((int)param_1 + 0x39)": "*(undefined *)((int)ptr_data + 0x39)",
                "*(undefined *)(param_1 + 0xe)": "*(undefined *)(ptr_data + 0xe)",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*ptr_data + 0xc)"
            },
            "code": "int check_and_set_values_0800688e(int *ptr_data, int data_size, int data_value) {\n    if (*(char *)((int)ptr_data + 0x39) != ' ') {\n        return 2;\n    }\n    if (data_size == 0) {\n        return 1;\n    }\n    if (data_value == 0) {\n        return 1;\n    }\n    if (*(char *)(ptr_data + 0xe) != '\\x01') {\n        ptr_data[8] = data_size;\n        *(short *)(ptr_data + 9) = (short)data_value;\n        *(short *)((int)ptr_data + 0x26) = (short)data_value;\n        ptr_data[0xf] = 0;\n        *(undefined *)((int)ptr_data + 0x39) = 0x21;\n        *(undefined *)(ptr_data + 0xe) = 0;\n        *(uint *)(*ptr_data + 0xc) = *(uint *)(*ptr_data + 0xc) | 0x80;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "imported": false,
            "current_name": "check_and_set_values_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "data_index",
                "param_2": "data_value",
                "iVar1": "func_result",
                "iVar3": "char_value",
                "uVar2": "shift_amount",
                "PTR_DAT_0800897c": "data_array_1",
                "PTR_DAT_08008980": "data_array_2",
                "FUN_0800738a": "function_1",
                "FUN_08008990": "function_2",
                "PTR_DAT_08008988": "data_pointer",
                "FUN_08008a24": "function_3",
                "FUN_08006b28": "function_4",
                "PTR_DAT_08008984": "data_array_3",
                "FUN_08006b3e": "function_5",
                "FUN_08007118": "function_6",
                "DAT_0800898c": "data_array_4"
            },
            "code": "void process_data_080088e0(uint data_index, uint data_value)\n{\n  int char_value;\n  uint shift_amount;\n  int bit_value;\n\n  if (data_index < 0x3c) {\n    char_value = (int)(char)PTR_DAT_0800897c[data_index];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value != -1) {\n    int func_result = FUN_0800738a(char_value,PTR_DAT_08008980);\n    if (func_result == 0) {\n      FUN_08008990(data_index,1);\n      shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          data_value = data_value << (8 - shift_amount & 0xff);\n        }\n        else {\n          data_value = data_value >> (shift_amount - 8 & 0xff);\n        }\n      }\n      if (data_value < 0x80) {\n        FUN_08008a24(data_index,0);\n      }\n      else {\n        FUN_08008a24(data_index,1);\n      }\n    }\n    else {\n      func_result = FUN_08006b28(char_value,PTR_DAT_08008984);\n      if (func_result == 0) {\n        FUN_08006b3e(char_value,PTR_DAT_08008984);\n      }\n      shift_amount = *(uint *)PTR_DAT_08008988;\n      if (shift_amount != 8) {\n        if (shift_amount < 9) {\n          data_value = data_value << (8 - shift_amount & 0xff);\n        }\n        else {\n          data_value = data_value >> (shift_amount - 8 & 0xff);\n        }\n      }\n      FUN_08007118(char_value,DAT_0800898c,0xff,data_value,func_result == 0);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08006b28",
                "FUN_08006b3e",
                "FUN_0800738a",
                "FUN_08007118",
                "FUN_08008990",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "process_data_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "update_data_08008b66",
                "param_1": "data_address",
                "iVar1": "result",
                "uVar2": "index",
                "local_9": "new_data"
            },
            "code": "void update_data_08008b66(int data_address) {\n  int result = 0;\n  ushort index = 0;\n  undefined new_data;\n  result = get_data(data_address, &new_data);\n  if (result == 0 && ((index = *(short *)(data_address + 0x60) + 1U & 0x3f), index != *(ushort *)(data_address + 0x62)))) {\n    *(undefined *)(*(int *)(data_address + 0x5c) + (uint)*(ushort *)(data_address + 0x60)) = new_data;\n    *(ushort *)(data_address + 0x60) = index;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_based_on_index_0800870c",
                "uVar1": "index",
                "PTR_DAT_08008728": "function_pointer_array",
                "PTR_DAT_0800872c": "parameter_array",
                "**(code **)(PTR_DAT_08008728 + uVar1 * 4)": "*(void (**)(uint32_t))(function_pointer_array + index * 4)",
                "*(undefined4 *)(PTR_DAT_0800872c + uVar1 * 4)": "*(uint32_t*)(parameter_array + index * 4)"
            },
            "code": "void execute_function_based_on_index_0800870c(void)\n{\n    uint8_t index = get_index();\n    if (index < 5) {\n        void (*function_pointer)(uint32_t parameter) = *(void (**)(uint32_t))(PTR_DAT_08008728 + index * 4);\n        uint32_t parameter = *(uint32_t*)(PTR_DAT_0800872c + index * 4);\n        function_pointer(parameter);\n    }\n    return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_based_on_index_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "code": "int get_error_code_08008840(void)\n{\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "get_error_code_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "read_data_08008600",
                "param_1": "data_length",
                "param_2": "data_buffer",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "read_status"
            },
            "code": "int read_data_08008600(int data_length, char* data_buffer, int param_3, int param_4){\n  if (data_length == 0) {\n    return -1;\n  }\n  int read_status = read_data_08008600_from_source();\n  if (read_status == 0) {\n    *data_buffer = *(char *)(data_length + 0x45);\n    write_data_to_destination(*(int *)(PTR_DAT_08008638 + (uint)*(byte *)(data_length + 0x44) * 4),\n                 data_length + 0x45,1,PTR_DAT_08008638,param_4);\n    return 0;\n  }\n  return -1;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "read_data_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "set_pointer_value_08003154",
                "param_1": "pointer",
                "param_2": "value",
                "*param_1": "*pointer"
            },
            "code": "void set_pointer_value_08003154(int *pointer, int value) {\n  *pointer = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "set_pointer_value_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "set_bit_08006420",
                "param_1": "data",
                "param_2": "bit_position",
                "param_3": "bit_value",
                "*(uint *)(param_1 + 0x20)": "*data",
                "*(uint *)(param_1 + 0x20) & ~(4 << (param_2 & 0xff))": "mask",
                "param_3 << (param_2 & 0xff)": "bit_value << bit_position"
            },
            "code": "void set_bit_08006420(uint32_t *data, uint8_t bit_position, uint32_t bit_value){\n    uint32_t mask = ~(1u << bit_position);\n    *data &= mask;\n    *data |= (bit_value << bit_position);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "imported": false,
            "current_name": "set_bit_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "set_data_at_index_08007750",
                "param_1": "data_array_ptr",
                "param_2": "index",
                "param_3": "data",
                "*(*(int *)(param_1 + 4) + 0x34 + param_2 * 4)": "target_ptr",
                "*(undefined4 *)target_ptr": "*target_ptr",
                "*(int *)(param_1 + 4)": "data_ptr"
            },
            "code": "void set_data_at_index_08007750(int data_array_ptr, int index, int data) {\n    int* data_ptr = *(int*)(data_array_ptr + 4);\n    int* target_ptr = data_ptr + 0x34 + index * 4;\n    *target_ptr = data;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "set_data_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_char_in_string_08009938",
                "param_1": "str",
                "param_2": "c",
                "pcVar1": "current_char"
            },
            "code": "char* find_char_in_string_08009938(char* str, char c) {\\n  char* current_char = str;\\n  while (*current_char != \"\\0\") {\\n    if (*current_char == c) {\\n      return current_char;\\n    }\\n    current_char++;\\n  }\\n  if (c != \"\\0\") {\\n    return NULL;\\n  }\\n  return current_char;\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "check_input_08007f0e",
                "param_1": "input",
                "iVar1": "initial_value",
                "uVar3": "difference",
                "iVar4": "return_value",
                "iVar2": "check_result",
                "iVar5": "ptr_input",
                "uVar6": "param_4",
                "FUN_08003760": "get_current_value",
                "FUN_080047f4": "check_space",
                "FUN_0800542a": "check_next_space",
                "FUN_08005430": "get_next_value"
            },
            "code": "int check_input_08007f0e(int input, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  int initial_value = FUN_08003760();\n  uint difference = 0;\n  int return_value = 2;\n  do {\n    int ptr_input = input + 4;\n    int check_result = FUN_080047f4(ptr_input, param_2, param_3, param_4, param_4);\n    if (check_result == 0) {\n      return_value = 0;\n      int space_check = FUN_0800542a(ptr_input);\n      while ((space_check != 0x20) && (return_value == 0)) {\n        int current_value = FUN_08003760();\n        difference = current_value - initial_value;\n        if (difference < 0x65) {\n          int next_check = FUN_08005430(ptr_input);\n          if (next_check != 0) {\n            return_value = 2;\n          }\n        }\n        else {\n          return_value = 1;\n        }\n        space_check = FUN_0800542a(ptr_input);\n      }\n    }\n    int next_check = FUN_08005430(ptr_input);\n  } while ((next_check == 4) && (difference < 100));\n  return return_value;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "check_input_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_at_position_08004004",
                "param_1": "bit_position",
                "DAT_08004020": "bit_array_ptr_base_address"
            },
            "code": "void set_bit_at_position_08004004(uint bit_position) {\n  if (bit_position >= 0) {\n    uint bit_offset = bit_position & 0x1f;\n    uint* bit_array_ptr = (uint*)(DAT_08004020 + ((bit_position >> 5) + 0x60) * 4);\n    *bit_array_ptr = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_position_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "data_flag",
                "puVar1": "func_ptr",
                "local_a": "flag"
            },
            "code": "void process_data_08003158(uint32_t *data_ptr, uint32_t data_size, uint16_t data_flag) {\n  uint32_t *func_ptr;\n  uint16_t flag;\n  func_ptr = (uint32_t *)*data_ptr;\n  if (func_ptr != NULL) {\n    flag = data_flag;\n    if (((int)data_size < 16) && (data_flag < 0x4000)) {\n      (**(code **) *func_ptr)(func_ptr,data_size | 0xe0);\n      process_data_08003158(data_ptr, 2, &flag);\n    }\n    else {\n      process_data_08003158(data_ptr, data_size, 2, &flag);\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "process_data_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "swap_arguments_and_call_function_080090c2",
                "param_1": "arg1",
                "param_2": "arg2",
                "FUN_08009108": "function"
            },
            "code": "void swap_arguments_and_call_function_080090c2(void* arg1, void* arg2)\n{\n\tfunction(arg2, arg1);\n\treturn;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "swap_arguments_and_call_function_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = FUN_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = FUN_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = FUN_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    FUN_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08000be8",
                "FUN_08008a6c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_1": "address",
                "param_2": "permissions",
                "(param_2 + 4)": "(address + 4)"
            },
            "code": "int set_memory_permissions_08008846(void* address, int permissions) {\n    *(int*)(address + 4) = permissions;\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_and_copy_value_0800459c",
                "param_1": "array",
                "puVar1": "ptr_to_value",
                "PTR_": "ptr_to_",
                "DAT_": "data_"
            },
            "code": "int increment_and_copy_value_0800459c(int *array)\n{\n  int *PTR_short = (int)array + 0x2a;\n  if (*(short *)PTR_short != 0) {\n    char *PTR_value = (char *)array[9];\n    array[9] = (int)(PTR_value + 1);\n    *PTR_value = (char)*(int *)(*array + 0x10);\n    *(short *)PTR_short -= 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_and_copy_value_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_parameter_0800774a",
                "param_1": "object_address",
                "param_2": "parameter_value",
                "PTR_": "ptr",
                "DAT_": "parameter_address"
            },
            "code": "void set_parameter_0800774a(int object_address, int parameter_value) {\n  int* PTR_ = *(int *)(object_address + 4);\n  int* DAT_ = PTR_ + 9;\n  *DAT_ = parameter_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_parameter_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "update_data_080042f0",
                "param_1": "new_data",
                "*(uint *)(DAT_08004308 + 0x14)": "data_ptr",
                "FUN_08009094": "call_function"
            },
            "code": "void update_data_080042f0(uint new_data)\n{\n  uint* *(uint *)(DAT_08004308 + 0x14) = (uint*)(DAT_08004308 + 0x14);\n  if ((**(uint *)(DAT_08004308 + 0x14) & new_data) != 0) {\n    **(uint *)(DAT_08004308 + 0x14) = new_data;\n    call_function();\n  }\n  return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "update_data_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "data_value",
                "cVar1": "current_char",
                "puVar2": "data_ptr",
                "iVar3": "result",
                "uVar4": "new_data_value",
                "uVar5": "updated_data_value"
            },
            "code": "uint process_data_080027f0(int data_offset, uint data_size, uint data_value)\n{\n  char current_char;\n  undefined *data_ptr;\n  int result;\n  undefined new_data_value;\n  uint updated_data_value;\n  \n  data_ptr = PTR_DAT_08002884;\n  if (*PTR_DAT_08002878 == '\\0') {\n    result = initialize_data(data_offset + 0x14, data_size, data_value & 0xffff);\n    if (result != 0) {\n      return 0;\n    }\n    return data_value;\n  }\n  updated_data_value = (byte)*PTR_DAT_0800287c + data_value;\n  if ((byte)*PTR_DAT_08002880 < updated_data_value) {\n    if (updated_data_value < 0x20) {\n      updated_data_value = 0x20;\n    }\n    result = update_data(*(undefined4 *)PTR_DAT_08002884, updated_data_value);\n    *(int *)data_ptr = result;\n    if (result == 0) {\n      new_data_value = 0;\n    }\n    else {\n      new_data_value = (undefined)updated_data_value;\n    }\n    *PTR_DAT_08002880 = new_data_value;\n  }\n  data_ptr = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    update_data((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data_size, data_value);\n    current_char = *data_ptr + (char)data_value;\n    *data_ptr = current_char;\n    *PTR_DAT_0800287c = current_char;\n    return data_value;\n  }\n  *(undefined4 *)(data_offset + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08007ede",
                "FUN_080091b0",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param",
                "*param_1": "*param"
            },
            "code": "void set_param_to_zero_0800314e(int *param){\n    *param = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "process_data_080076e0",
                "param_1": "data",
                "cVar1": "input_char",
                "FUN_08007544": "get_input_char",
                "FUN_08003fb0": "print_output",
                "iVar2": "result",
                "FUN_08005df4": "validate_data",
                "FUN_080062f4": "process_data"
            },
            "code": "void process_data_080076e0(undefined4 *data)\n{\n    char input_char;\n    int result;\n    data[0x13] = 0;\n    input_char = get_input_char(*data);\n    print_output((int)input_char);\n    result = validate_data(data + 1);\n    if (result == 0) {\n        process_data_080076e0(data + 1, 0);\n    }\n    return;\n}",
            "called": [
                "FUN_08007544",
                "FUN_080062f4",
                "FUN_08003fb0",
                "FUN_08005df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "process_data_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "perform_task_on_param_08002f14",
                "param_1": "param_value",
                "FUN_080032a2": "call_function_with_offset_param"
            },
            "code": "void perform_task_on_param_08002f14(int param_value)\n{\n  call_function_with_offset_param(param_value + 0x40);\n  return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "perform_task_on_param_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "run_function_080036a2",
                "FUN_080072fa": "execute_task"
            },
            "code": "void run_function_080036a2(void)\n{\n  execute_task();\n  return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "run_function_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "update_data_080038e4",
                "param_1": "data_ptr",
                "param_2": "data_values",
                "uVar1": "return_value",
                "uVar2": "data_value",
                "iVar3": "data_address",
                "local_c": "local_count"
            },
            "code": "int update_data_080038e4(int *data_ptr, uint *data_values)\n{\n  int return_value;\n  uint uVar2;\n  int data_address;\n  int local_count;\n\n  if (*(char *)(data_ptr + 9) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(data_ptr + 9) = 1;\n    uVar2 = data_values[1];\n    if (uVar2 < 7) {\n      uVar2 = uVar2 * 5 - 5;\n      *(uint *)(*data_ptr + 0x34) =\n           *data_values << (uVar2 & 0xff) | *(uint *)(*data_ptr + 0x34) & ~(0x1f << (uVar2 & 0xff));\n    }\n    else if (uVar2 < 0xd) {\n      uVar2 = uVar2 * 5 - 0x23;\n      *(uint *)(*data_ptr + 0x30) =\n           *data_values << (uVar2 & 0xff) | *(uint *)(*data_ptr + 0x30) & ~(0x1f << (uVar2 & 0xff));\n    }\n    else {\n      uVar2 = uVar2 * 5 - 0x41;\n      *(uint *)(*data_ptr + 0x2c) =\n           *data_values << (uVar2 & 0xff) | *(uint *)(*data_ptr + 0x2c) & ~(0x1f << (uVar2 & 0xff));\n    }\n    uVar2 = *data_values;\n    if (uVar2 < 10) {\n      *(uint *)(*data_ptr + 0x10) =\n           data_values[2] << (uVar2 * 3 & 0xff) |\n           *(uint *)(*data_ptr + 0x10) & ~(7 << (uVar2 * 3 & 0xff));\n    }\n    else {\n      uVar2 = uVar2 * 3 - 0x1e;\n      *(uint *)(*data_ptr + 0xc) =\n           data_values[2] << (uVar2 & 0xff) | *(uint *)(*data_ptr + 0xc) & ~(7 << (uVar2 & 0xff));\n    }\n    if (*data_values - 0x10 < 2) {\n      data_address = *data_ptr;\n      if (data_address == DAT_08003a10) {\n        if ((*(uint *)(data_address + 8) & 0x800000) == 0) {\n          *(uint *)(data_address + 8) = *(uint *)(data_address + 8) | 0x800000;\n          if (*data_values == 0x10) {\n            for (local_count = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*(uint *)PTR_DAT_08003a14 >>\n                                 0x32) * 10; local_count != 0; local_count = local_count + -1) {\n            }\n            return_value = 0;\n          }\n          else {\n            return_value = 0;\n          }\n        }\n        else {\n          return_value = 0;\n        }\n      }\n      else {\n        data_ptr[10] = data_ptr[10] | 0x20;\n        return_value = 1;\n      }\n    }\n    else {\n      return_value = 0;\n    }\n    *(undefined *)(data_ptr + 9) = 0;\n  }\n  return return_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "update_data_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_08005d48",
                "param_1": "data_address",
                "param_2": "data_values",
                "uVar1": "new_value_1",
                "uVar2": "old_value_2",
                "uVar3": "old_value_3",
                "DAT_08005da8": "special_data_address"
            },
            "code": "void update_data_08005d48(int data_address, uint *data_values)\n{\n    uint new_value_1;\n    uint new_value_2;\n    uint new_value_3;\n    \n    uint old_value_1 = *(uint *)(data_address + 0x20);\n    uint old_value_2 = *(uint *)(data_address + 4);\n    uint old_value_3 = *(uint *)(data_address + 0x1c);\n    \n    // Update old_value_1\n    old_value_1 = old_value_1 & 0xfffffeff;\n    new_value_1 = (old_value_1 & 0xfffffdff) | (data_values[2] << 8);\n    if (data_address == DAT_08005da8) {\n        new_value_1 = (new_value_1 & 0xfffff7ff) | (data_values[3] << 8);\n        new_value_2 = (old_value_2 & 0xffffcfff) | (data_values[5] << 4) | (data_values[6] << 4);\n    }\n    else {\n        new_value_2 = old_value_2;\n    }\n    \n    // Update old_value_3\n    new_value_3 = (old_value_3 & 0xffffff8c) | data_values[0];\n    \n    // Update data_address\n    *(uint *)(data_address + 0x20) = new_value_1;\n    *(uint *)(data_address + 4) = new_value_2;\n    *(uint *)(data_address + 0x1c) = new_value_3;\n    *(uint *)(data_address + 0x3c) = data_values[1];\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006186",
                "FUN_08006128"
            ],
            "imported": false,
            "current_name": "update_data_08005d48"
        }
    },
    "used_tokens": 286125,
    "layers": [
        [
            "FUN_08007246",
            "FUN_0800a042",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_08005188",
            "FUN_08009db0",
            "FUN_08002c2c",
            "FUN_08001bf8",
            "FUN_080072f0",
            "FUN_08000178",
            "FUN_080069ec",
            "FUN_0800a168",
            "FUN_080067ac",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_08000a64",
            "FUN_0800723c",
            "FUN_080043a2",
            "FUN_0800694c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08008df8",
            "FUN_08006c7c",
            "FUN_08006b5c",
            "FUN_08007376",
            "FUN_08000188",
            "FUN_08004f3c",
            "FUN_080033cc",
            "FUN_08003de4",
            "FUN_08000500",
            "FUN_08009d24",
            "FUN_0800344a",
            "FUN_080071e4",
            "FUN_08008e72",
            "FUN_080022f8",
            "FUN_080072fa",
            "FUN_08005084",
            "FUN_0800291c",
            "FUN_08002ac0",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08003f94",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_0800430c",
            "FUN_08006060",
            "FUN_08003350",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08003474",
            "FUN_08006b7c",
            "FUN_08008e7c",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_080091a0",
            "FUN_08002a1c",
            "FUN_08007718",
            "FUN_08002948",
            "FUN_08009e64",
            "FUN_08002acc",
            "FUN_08002a30",
            "FUN_0800932c",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08007320",
            "FUN_08000be8",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_0800319e",
            "FUN_08008d00",
            "FUN_08009190",
            "FUN_08004b82",
            "FUN_0800997e",
            "FUN_08002dbc",
            "FUN_08002e44",
            "FUN_0800242c",
            "FUN_080058d2",
            "FUN_08002c00",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_080085dc",
            "FUN_08006b1c",
            "FUN_08008ed6",
            "FUN_0800a130",
            "FUN_08008f3c",
            "FUN_08002ef2",
            "FUN_08007332",
            "FUN_08006128",
            "FUN_08003658",
            "FUN_08009a80",
            "FUN_080062f4",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005a48",
            "FUN_080033a8",
            "FUN_08002c14",
            "FUN_08008d18",
            "FUN_08009084",
            "FUN_0800a020",
            "FUN_08005840",
            "FUN_08007f7c",
            "FUN_08006d80",
            "FUN_08006c60",
            "FUN_08003306",
            "FUN_08002578",
            "FUN_08006932",
            "FUN_080060c4",
            "FUN_08009eac",
            "FUN_080072d8",
            "FUN_080045c0",
            "FUN_08007e74",
            "FUN_08002efe",
            "FUN_08002f84",
            "FUN_08002ddc",
            "FUN_08009094",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08007f8e",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_08007110",
            "FUN_08007594",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08002df6",
            "FUN_08007118",
            "FUN_08009fe8",
            "FUN_08002c1e",
            "FUN_08005a68",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_08002f94",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08008eec",
            "FUN_080068d6",
            "FUN_080032a2",
            "FUN_08001b48",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08005df4",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08004ac2",
            "FUN_08008850",
            "FUN_08006ca8",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_08003048",
            "FUN_08000214",
            "FUN_08003724",
            "FUN_080038dc",
            "FUN_080025ac",
            "FUN_08002634",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08007648",
            "FUN_08008858",
            "FUN_080063c0",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080090cc",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080098d8",
            "FUN_08009270",
            "FUN_08008500",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08005aa4",
            "FUN_08005e6e",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08000588",
            "FUN_08002644",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_0800885c",
            "FUN_0800643c",
            "FUN_08002fca",
            "FUN_08009c7c",
            "FUN_08009b5c",
            "FUN_0800021a",
            "FUN_08008a6c",
            "FUN_080026f8",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_080075dc",
            "FUN_08007544",
            "FUN_08007ff0",
            "FUN_08008990",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_080052f0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08008f0e",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800288c",
            "FUN_0800010c",
            "FUN_08002e26",
            "FUN_080036d8",
            "FUN_080086e8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_080035b8",
            "FUN_08001c18",
            "FUN_08006460",
            "FUN_08004046",
            "FUN_08008880",
            "FUN_08002ed2",
            "FUN_080073ae",
            "FUN_08000488",
            "FUN_08003f0c",
            "FUN_08008f1c",
            "FUN_080058ac",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_08004aec",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "FUN_0800863c",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_080084b0",
            "FUN_08004050",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_080095a8",
            "FUN_08003002",
            "FUN_08003bd8",
            "FUN_08009d50",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_0800a18c",
            "FUN_08009908",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08002b68",
            "FUN_080005e0",
            "FUN_08008020",
            "FUN_08005dac",
            "FUN_0800674e",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08009358",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08007fa0",
            "FUN_08003376",
            "FUN_08008bf4",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08005434",
            "FUN_08005e2e",
            "FUN_08007736",
            "FUN_08002968",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_0800a07a",
            "FUN_08003a20",
            "FUN_080064b0",
            "FUN_08009cdc",
            "FUN_08002a58",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_08008d8c",
            "FUN_080004d4",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08005cb4",
            "FUN_08007744",
            "FUN_08006538",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_0800325a",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_080088e0",
            "FUN_08008b66",
            "FUN_0800870c",
            "FUN_08008840",
            "FUN_08008600",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08007f0e",
            "FUN_08004004",
            "FUN_08003158",
            "FUN_080090c2",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_080042f0",
            "FUN_080027f0",
            "FUN_0800314e",
            "FUN_080076e0",
            "FUN_08002f14",
            "FUN_080036a2",
            "FUN_080038e4",
            "FUN_08005d48"
        ]
    ],
    "locked_functions": []
}