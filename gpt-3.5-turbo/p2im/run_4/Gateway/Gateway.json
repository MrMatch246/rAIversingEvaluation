{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "set_flag_if_unset_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 setFlagIfUnset_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "set_flag_if_unset_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_string_end_08000178",
            "code": "\nchar * findStringEnd_08000178(char *string)\n\n{\n  char currentChar;\n  char *nextChar;\n  char *stringPtr;\n  \n  stringPtr = string;\n  do {\n    nextChar = stringPtr + 1;\n    currentChar = *stringPtr;\n    stringPtr = nextChar;\n  } while (currentChar != '\\0');\n  return nextChar + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_string_end_08000178",
                "param_1": "string",
                "cVar1": "currentChar",
                "pcVar2": "nextChar",
                "pcVar3": "stringPtr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "send_software_interrupt_08000188",
            "code": "\nvoid sendSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "send_software_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "send_interrupt_0800018c",
            "code": "\nundefined4 send_interrupt_0800018c(undefined4 data,undefined4 unused,undefined4 unused,undefined4 flag)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = send_software_interrupt_08000188(1,data,0,0,flag);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "send_interrupt_0800018c",
                "param_1": "data",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "flag",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_and_write_data_08000214",
            "code": "\nvoid processAndWriteData_08000214(uint dataIndex,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  bool isCharacterValid;\n  int result;\n  \n  if (0x3b < (int)dataIndex) {\n    return;\n  }\n  result = getValueFromPointer(&DAT_200003d4,dataIndex,value2,value3,value3);\n  if (result == 3) {\n    if (dataIndex < 0x3c) {\n      if ((&DAT_0800a908)[dataIndex] == -1) {\n        result = 0;\n      }\n      else {\n        result = findCharacterIndex();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = findCharacterIndex((int)(char)(&DAT_0800a908)[dataIndex]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = checkParamAndString((int)(char)(&DAT_0800a908)[dataIndex],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      processData(dataIndex,value1);\n    }\n    writeParamToMemory(&DAT_200003d4,dataIndex,value1);\n  }\n  else if (result == 4) {\n    if (dataIndex < 0x3c) {\n      if ((&DAT_0800a908)[dataIndex] == -1) {\n        isCharacterValid = false;\n      }\n      else {\n        result = findCharacterIndex();\n        if (result == 0) {\n          isCharacterValid = false;\n        }\n        else {\n          result = findCharacterIndex((int)(char)(&DAT_0800a908)[dataIndex]);\n          if (result == 1) {\n            isCharacterValid = false;\n          }\n          else {\n            isCharacterValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isCharacterValid = false;\n    }\n    if (isCharacterValid) {\n      updateAndCalculate(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[dataIndex] * 3,value1);\n    }\n    writeParamToMemory(&DAT_200003d4,dataIndex,value1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_and_write_data_08000214",
                "param_1": "dataIndex",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "isCharacterValid",
                "iVar2": "result",
                "get_specific_value_from_pointer_08002fa0": "getValueFromPointer",
                "find_character_index_080036ac": "findCharacterIndex",
                "check_param_and_string_0800738a": "checkParamAndString",
                "process_data_080088e0": "processData",
                "write_param_to_memory_08002fc2": "writeParamToMemory",
                "update_and_calculate_080026b0": "updateAndCalculate"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "process_data_0800021a",
            "code": "\nvoid process_data_0800021a(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool is_valid;\n  int result;\n  \n  result = get_specific_value_from_pointer_08002fa0(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_index_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_index_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_param_and_string_0800738a((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data_0800021a_080088e0(index,value);\n    }\n    write_param_to_memory_08002fc2(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        is_valid = false;\n      }\n      else {\n        result = find_character_index_080036ac();\n        if (result == 0) {\n          is_valid = false;\n        }\n        else {\n          result = find_character_index_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      update_and_calculate_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    write_param_to_memory_08002fc2(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "index",
                "param_2": "value",
                "bVar1": "is_valid",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_bit_08000488",
            "code": "\nvoid updateBit_08000488(uint bitPosition,int bitValue)\n\n{\n  undefined4 retrievedValue;\n  \n  if ((int)bitPosition < 0xe) {\n    if (bitValue == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (bitPosition & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (bitPosition & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      retrievedValue = retrieve_value_08008880();\n      process_and_execute_data_08002ef2(&DAT_200003d4,bitPosition,retrievedValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_bit_08000488",
                "param_1": "bitPosition",
                "param_2": "bitValue",
                "uVar1": "retrievedValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_byte_array_080004d4",
            "code": "\nvoid initializeByteArray_080004d4(int status,int flag)\n\n{\n  int counter;\n  undefined *byteArrayPtr;\n  \n  if (status != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    byteArrayPtr = &DAT_2000022c;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      set_byte_value_08002580(byteArrayPtr);\n      byteArrayPtr = byteArrayPtr + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_byte_array_080004d4",
                "param_1": "status",
                "param_2": "flag",
                "iVar1": "counter",
                "puVar2": "byteArrayPtr"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "attach_servo_08000500",
            "code": "\nvoid attach_servo_08000500(int servo_id,int data_size,int flag,undefined4 unknown_param)\n\n{\n  if (0xb < DAT_200001ed) {\n    display_warning_message(&DAT_200003d4,\"Max servos attached\",flag,unknown_param,unknown_param);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servo_id] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servo_id] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < data_size) && (0 < flag)) {\n    process_valid_data(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_id] * 3,servo_id,data_size,flag);\n    return;\n  }\n  process_and_store_data(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_id] * 3,servo_id);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servo_id",
                "param_2": "data_size",
                "param_3": "flag",
                "param_4": "unknown_param",
                "process_data_08002f14": "display_warning_message",
                "process_data_080025ac": "process_valid_data",
                "process_and_store_data_08002634": "process_and_store_data"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "process_data_08000588",
            "code": "\nvoid processData_08000588(int index)\n\n{\n  process_data_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "process_data_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_pin_mode_080005f8",
            "code": "\nvoid processPinMode_080005f8(uint pinNumber,int mode)\n\n{\n  int value;\n  char specificValue;\n  bool isValid;\n  uint maskedPin;\n  \n  value = getSpecificValue(&DAT_200003d4,pinNumber);\n  if (value != 0x7f) {\n    value = getSpecificValue(&DAT_200003d4,pinNumber);\n    if (value == 6) {\n      if (DAT_20000170 == '\\0') {\n        specificValue = '\\0';\n      }\n      else {\n        specificValue = DAT_20000170;\n        if (mode == 6) {\n          specificValue = '\\0';\n        }\n      }\n    }\n    else {\n      specificValue = '\\0';\n    }\n    if (specificValue != '\\0') {\n      initializeData();\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValid = false;\n      }\n      else {\n        value = findCharacterIndex();\n        if (value == 0) {\n          isValid = false;\n        }\n        else {\n          value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (value == 1) {\n            isValid = false;\n          }\n          else if (mode == 4) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((byte)(&DAT_200001f0)[pinNumber] < 0xc) {\n        value = extractedByte(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3);\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        processData(pinNumber);\n      }\n    }\n    maskedPin = pinNumber - 0x2e & 0xff;\n    if (maskedPin < 0xe) {\n      if (pinNumber < 0x3c) {\n        value = (int)(char)(&DAT_0800a908)[pinNumber];\n      }\n      else {\n        value = -1;\n      }\n      value = findCharacterIndex(value);\n      if (value == 0) {\n        isValid = false;\n      }\n      else {\n        if (pinNumber < 0x3c) {\n          value = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          value = -1;\n        }\n        value = findCharacterIndex(value);\n        if (value == 1) {\n          isValid = false;\n        }\n        else {\n          isValid = true;\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      updateBit(maskedPin,mode == 2);\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValid = false;\n      }\n      else {\n        value = findCharacterIndex();\n        if (value == 0) {\n          isValid = false;\n        }\n        else {\n          value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (value == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] | (byte)(1 << (pinNumber & 7));\n      }\n      else {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] & ~(byte)(1 << (pinNumber & 7));\n      }\n    }\n    writeParamToMemory(&DAT_200003d4,pinNumber,0);\n    switch(mode) {\n    case 0:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          value = findCharacterIndex();\n          if (value == 0) {\n            isValid = false;\n          }\n          else {\n            value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (value == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        processData2(pinNumber,0);\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          value = findCharacterIndex();\n          if (value == 0) {\n            isValid = false;\n          }\n          else {\n            value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (value == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        value = getSpecificValue(&DAT_200003d4,pinNumber);\n        if (value == 3) {\n          processParam(pinNumber,0);\n        }\n        processData2(pinNumber,1);\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n      break;\n    case 2:\n      if (maskedPin < 0xe) {\n        if (pinNumber < 0x3c) {\n          value = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          value = -1;\n        }\n        value = findCharacterIndex(value);\n        if (value == 0) {\n          isValid = false;\n        }\n        else {\n          if (pinNumber < 0x3c) {\n            value = (int)(char)(&DAT_0800a908)[pinNumber];\n          }\n          else {\n            value = -1;\n          }\n          value = findCharacterIndex(value);\n          if (value == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        if (pinNumber < 0x3c) {\n          if ((&DAT_0800a908)[pinNumber] == -1) {\n            isValid = false;\n          }\n          else {\n            value = findCharacterIndex();\n            if (value == 0) {\n              isValid = false;\n            }\n            else {\n              value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n              if (value == 1) {\n                isValid = false;\n              }\n            }\n          }\n        }\n        else {\n          isValid = false;\n        }\n        if (isValid) {\n          processData2(pinNumber,0);\n        }\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          value = 0;\n        }\n        else {\n          value = findCharacterIndex();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = checkParamAndString((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        processData2(pinNumber,1);\n        processData3(pinNumber,0);\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          value = findCharacterIndex();\n          if (value == 0) {\n            isValid = false;\n          }\n          else {\n            value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (value == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,4);\n        if (((byte)(&DAT_200001f0)[pinNumber] != 0xff) &&\n           (value = extractedByte(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3),\n           value != 0)) {\n          isValid = false;\n        }\n        if (isValid) {\n          attachServo(pinNumber,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      processData4(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          value = 0;\n        }\n        else {\n          value = findCharacterIndex();\n          if (value == 0) {\n            value = 0;\n          }\n          else {\n            value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (value == 1) {\n              value = 0;\n            }\n            else {\n              value = checkParamAndString((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a69c);\n              if (value == 0) {\n                value = checkParamAndString((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        value = 0;\n      }\n      if (value != 0) {\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          value = findCharacterIndex();\n          if (value == 0) {\n            isValid = false;\n          }\n          else {\n            value = findCharacterIndex((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (value == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        processData2(pinNumber,2);\n        update_memory_value_08002fa8(&DAT_200003d4,pinNumber,0xb);\n        writeParamToMemory(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_pin_mode_080005f8",
                "param_1": "pinNumber",
                "param_2": "mode",
                "iVar1": "value",
                "cVar2": "specificValue",
                "bVar3": "isValid",
                "uVar4": "maskedPin",
                "get_specific_value_from_pointer_08002fa0": "getSpecificValue",
                "initialize_data_080005e0": "initializeData",
                "find_character_index_080036ac": "findCharacterIndex",
                "process_data_08000588": "processData",
                "extracted_byte_080026f8": "extractedByte",
                "process_data_08008990": "processData2",
                "update_bit_08000488": "updateBit",
                "process_data_080088e0": "processData3",
                "write_param_to_memory_08002fc2": "writeParamToMemory",
                "check_param_and_string_0800738a": "checkParamAndString",
                "process_param_08008a24": "processParam",
                "attach_servo_08000500": "attachServo",
                "process_data_08002f14": "processData4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_and_process_pins_08000a64",
            "code": "\nvoid initialize_and_process_pins_08000a64(void)\n\n{\n  int index;\n  uint pin;\n  \n  for (pin = 0; pin < 0x3c; pin = pin + 1 & 0xff) {\n    if (pin < 0x3c) {\n      if ((&DAT_0800a908)[pin] == -1) {\n        index = 0;\n      }\n      else {\n        index = find_character_index();\n        if (index == 0) {\n          index = 0;\n        }\n        else {\n          index = find_character_index((int)(char)(&DAT_0800a908)[pin]);\n          if (index == 1) {\n            index = 0;\n          }\n          else {\n            index = check_parameter_and_string((int)(char)(&DAT_0800a908)[pin],&DAT_0800a69c);\n            if (index == 0) {\n              index = check_parameter_and_string((int)(char)(&DAT_0800a908)[pin],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      index = 0;\n    }\n    if (index != 0) {\n      set_pin_mode(pin,6);\n    }\n  }\n  DAT_20000170 = 1;\n  init_serial_interface(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_and_process_pins_08000a64",
                "iVar1": "index",
                "uVar2": "pin",
                "find_character_index_080036ac": "find_character_index",
                "check_param_and_string_0800738a": "check_parameter_and_string",
                "process_pin_mode_080005f8": "set_pin_mode",
                "initialize_serial_interface_08002a26": "init_serial_interface"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pins_08000aec",
            "code": "\nvoid initialize_pins_08000aec(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint uVar3;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data();\n  }\n  for (uVar3 = 0; uVar3 < 5; uVar3 = uVar3 + 1 & 0xff) {\n    (&DAT_200001e8)[uVar3] = 0;\n    (&DAT_20000174)[uVar3] = 0;\n    (&DAT_20000180)[uVar3] = 0;\n  }\n  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1 & 0xff) {\n    if ((uVar3 - 0x2e & 0xff) < 0xe) {\n      if (uVar3 < 0x3c) {\n        iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = find_character_index(iVar2);\n      if (iVar2 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar3 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_character_index(iVar2);\n        if (iVar2 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      process_pin_mode(uVar3,2);\n    }\n    else {\n      if ((((uVar3 < 0x3c) && ((&DAT_0800a908)[uVar3] != -1)) &&\n          (iVar2 = find_character_index(), iVar2 != 0)) &&\n         (iVar2 = find_character_index((int)(char)(&DAT_0800a908)[uVar3]), iVar2 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        process_pin_mode(uVar3,1);\n      }\n    }\n    (&DAT_200001f0)[uVar3] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pins_08000aec",
                "initialize_data_080005e0": "initialize_data",
                "find_character_index_080036ac": "find_character_index",
                "process_pin_mode_080005f8": "process_pin_mode"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "process_and_update_08000be8",
            "code": "\nvoid process_and_update_08000be8(int input_value,uint mask_value,int condition,undefined4 additional_data)\n\n{\n  undefined1 *pointer_1;\n  undefined1 *filtered_pointer;\n  \n  pointer_1 = &DAT_20000174;\n  filtered_pointer = (undefined1 *)((byte)(&DAT_20000174)[input_value] & mask_value);\n  if ((condition != 0) ||\n     (pointer_1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[input_value], filtered_pointer != pointer_1)) {\n    process_and_decode_08002efe(&DAT_200003d4,input_value,filtered_pointer,pointer_1,additional_data);\n    (&DAT_20000180)[input_value] = (char)filtered_pointer;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "process_and_update_08000be8",
                "param_1": "input_value",
                "param_2": "mask_value",
                "param_3": "condition",
                "param_4": "additional_data",
                "puVar1": "pointer_1",
                "puVar2": "filtered_pointer"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_character_values_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid processCharacterValues_08000ef8(void)\n\n{\n  byte characterFlags;\n  int index;\n  bool checkValue;\n  byte result;\n  \n  characterFlags = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(3);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((characterFlags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = is_value_set_08008a6c(0);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(2);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 2) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(1);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(10);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 4) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(2);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x13);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 8) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(3);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x15);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x10) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(4);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x14);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x20) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(5);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x1a);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x40) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(6);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(8);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x80) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(7);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x80;\n    }\n    process_and_update_08000be8(0,result);\n  }\n  characterFlags = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(9);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((characterFlags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = is_value_set_08008a6c(8);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x27);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 2) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(9);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x16);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 4) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(10);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(7);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 8) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0xb);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(6);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x10) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0xc);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(5);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x20) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0xd);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x19);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x40) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0xe);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x18);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x80) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0xf);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x80;\n    }\n    process_and_update_08000be8(1,result,0);\n  }\n  characterFlags = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(0x2a);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((characterFlags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = is_value_set_08008a6c(0x10);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2c);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 2) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x11);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xd);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 8) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x13);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xe);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x10) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x14);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xf);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x20) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x15);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x17);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x40) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x16);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2d);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x80) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x17);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x80;\n    }\n    process_and_update_08000be8(2,result,0);\n  }\n  characterFlags = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(0x2e);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((characterFlags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = is_value_set_08008a6c(0x18);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2f);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 2) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x19);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x30);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 4) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x1a);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x31);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 8) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x1b);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x22);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x10) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x1c);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x23);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x20) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x1d);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x2b);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x40) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x1e);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x32);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x80) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x1f);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x80;\n    }\n    process_and_update_08000be8(3,result,0);\n  }\n  characterFlags = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_character_index_080036ac(0x29);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((characterFlags & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = is_value_set_08008a6c(0x20);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x28);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 2) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x21);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 2;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x26);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 4) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x22);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 4;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x25);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 8) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x23);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 8;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xc);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x10) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x24);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x10;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0xb);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x20) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x25);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x20;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x1c);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x40) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x26);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x40;\n    }\n    index = find_character_index_080036ac();\n    if (index == 0) {\n      checkValue = false;\n    }\n    else {\n      index = find_character_index_080036ac(0x1b);\n      if (index == 1) {\n        checkValue = false;\n      }\n      else if ((characterFlags & 0x80) == 0) {\n        checkValue = false;\n      }\n      else {\n        index = is_value_set_08008a6c(0x27);\n        if (index == 0) {\n          checkValue = false;\n        }\n        else {\n          checkValue = true;\n        }\n      }\n    }\n    if (checkValue) {\n      result = result | 0x80;\n    }\n    process_and_update_08000be8(4,result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_character_values_08000ef8",
                "bVar1": "characterFlags",
                "iVar2": "index",
                "bVar3": "checkValue",
                "bVar4": "result"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  extractFilePath(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,&LAB_080002ec_1);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,&LAB_08000c18_1);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,&LAB_080001a8_1);\n  setGlobalVariable(&DAT_200003d4,0xf0,0x8001cd1);\n  updateData(&DAT_200003d4,0xff,0x8000aed);\n  initializeSerialComm(&DAT_200003d4,0xe100);\n  initializePins();\n  sendInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "extract_file_path_08002e44": "extractFilePath",
                "update_data_08002f2c": "updateData",
                "set_global_variable_08002f94": "setGlobalVariable",
                "update_data_08002f84": "updateData",
                "initialize_serial_communication_08003048": "initializeSerialComm",
                "initialize_pins_08000aec": "initializePins",
                "send_interrupt_0800018c": "sendInterrupt"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_and_update_data_08001bf8",
            "code": "\nvoid copyAndUpdateData_08001bf8(undefined4 sourceData,undefined4 param2,undefined4 destData,undefined4 param4)\n\n{\n  copy_and_update_data_0800288c(&DAT_20000314,sourceData,destData,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_and_update_data_08001bf8",
                "param_1": "sourceData",
                "param_2": "param2",
                "param_3": "destData",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "extract_byte_from_memory_08001c08",
            "code": "\nundefined extractByteFromMemory_08001c08(void)\n\n{\n  undefined extractedByte;\n  \n  extractedByte = extract_byte_from_memory_08002720(&DAT_20000314);\n  return extractedByte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "extract_byte_from_memory_08001c08",
                "uVar1": "extractedByte"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_i2_c_data_08001c18",
            "code": "\nvoid process_I2C_data_08001c18(undefined4 device_address,uint byte_count,int expected_count,undefined4 function_data)\n\n{\n  undefined byte_value;\n  int difference;\n  int remaining_bytes;\n  bool has_bytes_remaining;\n  \n  if (byte_count == 0xffffffff) {\n    byte_count = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,device_address);\n    copy_and_update_data_08001bf8(byte_count & 0xff);\n    validate_and_initialize_function_08002a58(&DAT_20000314,function_data);\n  }\n  execute_validated_function_08002c14(&DAT_20000314,device_address,expected_count);\n  difference = calculate_difference_0800270c(&DAT_20000314);\n  if (expected_count < difference) {\n    process_data_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_difference_0800270c(&DAT_20000314);\n    if (difference < expected_count) {\n      process_data_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)device_address;\n  DAT_20000131 = (undefined)byte_count;\n  difference = 0;\n  while( true ) {\n    if (difference < expected_count) {\n      remaining_bytes = calculate_difference_0800270c(&DAT_20000314);\n      if (remaining_bytes == 0) {\n        has_bytes_remaining = false;\n      }\n      else {\n        has_bytes_remaining = true;\n      }\n    }\n    else {\n      has_bytes_remaining = false;\n    }\n    if (!has_bytes_remaining) break;\n    byte_value = extract_byte_from_memory_08001c08();\n    (&DAT_20000132)[difference] = byte_value;\n    difference = difference + 1;\n  }\n  process_and_forward_data_08002f0a(&DAT_200003d4,0x77,expected_count + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_i2_c_data_08001c18",
                "param_1": "device_address",
                "param_2": "byte_count",
                "param_3": "expected_count",
                "param_4": "function_data",
                "uVar1": "byte_value",
                "iVar2": "difference",
                "iVar3": "remaining_bytes",
                "bVar4": "has_bytes_remaining"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_command_08001cd0",
            "code": "\nvoid processCommand_08001cd0(undefined4 command,int paramLength,byte *params,undefined4 param4)\n\n{\n  byte param1;\n  byte byteVar1;\n  byte byteVar2;\n  undefined4 result;\n  byte byteVar3;\n  char charVar;\n  int index;\n  int byteIndex;\n  uint loopIndex;\n  uint tempIndex;\n  int tempVar;\n  bool boolVar;\n  \n  switch(command) {\n  case 0x69:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6a);\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      tempIndex = loopIndex - 0x2e & 0xff;\n      if (tempIndex < 0xe) {\n        if (loopIndex < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          tempIndex = 0x7f;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            tempIndex = 0x7f;\n          }\n        }\n      }\n      else {\n        tempIndex = 0x7f;\n      }\n      execute_function_08002f1e(&DAT_200003d4,tempIndex);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6c);\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          boolVar = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            boolVar = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (index == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        execute_function_08002f1e(&DAT_200003d4,0);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,0xb);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((loopIndex - 0x2e & 0xff) < 0xe) {\n        if (loopIndex < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          boolVar = false;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            boolVar = false;\n          }\n          else {\n            boolVar = true;\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        execute_function_08002f1e(&DAT_200003d4,2);\n        execute_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = check_param_and_string_0800738a((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_function_08002f1e(&DAT_200003d4,3);\n        execute_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          boolVar = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            boolVar = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (index == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        execute_function_08002f1e(&DAT_200003d4,4);\n        execute_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = check_param_and_string_0800738a((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a69c);\n              if (index == 0) {\n                index = check_param_and_string_0800738a((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_function_08002f1e(&DAT_200003d4,6);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (paramLength != 0) {\n      param1 = *params;\n      execute_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_function_08002f1e(&DAT_200003d4,param1);\n      if (param1 < 0x3c) {\n        result = get_specific_value_from_pointer_08002fa0(&DAT_200003d4,param1);\n        execute_function_08002f1e(&DAT_200003d4,result);\n        loopIndex = get_offset_value_08002fba(&DAT_200003d4,param1);\n        execute_function_08002f1e(&DAT_200003d4,loopIndex & 0x7f);\n        loopIndex = get_offset_value_08002fba(&DAT_200003d4,param1);\n        if ((loopIndex & 0xff80) != 0) {\n          index = get_offset_value_08002fba(&DAT_200003d4,param1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(index << 0x12) >> 0x19);\n        }\n        loopIndex = get_offset_value_08002fba(&DAT_200003d4,param1);\n        if ((loopIndex & 0xc000) != 0) {\n          index = get_offset_value_08002fba(&DAT_200003d4,param1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(index << 0xb) >> 0x19);\n        }\n      }\n      execute_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < paramLength) {\n      loopIndex = (uint)params[1];\n      if (2 < paramLength) {\n        loopIndex = loopIndex | (uint)params[2] << 7;\n      }\n      if (3 < paramLength) {\n        loopIndex = loopIndex | (uint)params[3] << 0xe;\n      }\n      process_and_write_data_08000214(*params,loopIndex);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < paramLength) {\n      loopIndex = (uint)*params;\n      param1 = params[1];\n      byteVar3 = params[2];\n      byteVar1 = params[3];\n      byteVar2 = params[4];\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          boolVar = false;\n        }\n        else {\n          index = find_character_index_080036ac();\n          if (index == 0) {\n            boolVar = false;\n          }\n          else {\n            index = find_character_index_080036ac((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (index == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        if ((byte)(&DAT_200001f0)[loopIndex] < 0xc) {\n          index = extracted_byte_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[loopIndex] * 3);\n        }\n        else {\n          index = 0;\n        }\n        if (index != 0) {\n          process_data_08000588(loopIndex);\n        }\n        attach_servo_08000500(loopIndex,(uint)param1 + (uint)byteVar3 * 0x80,(uint)byteVar1 + (uint)byteVar2 * 0x80);\n        process_pin_mode_080005f8(loopIndex,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    param1 = params[1];\n    byteVar3 = param1 & 0x18;\n    if ((param1 & 0x20) != 0) {\n      process_data_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byteVar3,param1,param4);\n      return;\n    }\n    byteVar1 = *params;\n    boolVar = (param1 & 0x40) == 0;\n    if (byteVar3 < 0x19) {\n      switch(byteVar3) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,byteVar1);\n        for (loopIndex = 2; (int)loopIndex < paramLength; loopIndex = loopIndex + 2 & 0xff) {\n          copy_and_update_data_08001bf8(params[loopIndex + 1] * -0x80 + params[loopIndex]);\n        }\n        initialize_and_validate_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (paramLength == 6) {\n          index = (uint)params[2] + (uint)params[3] * 0x80;\n          charVar = params[4] + params[5] * -0x80;\n        }\n        else {\n          charVar = params[2] + params[3] * -0x80;\n          index = -1;\n        }\n        process_i2_c_data_08001c18(byteVar1,index,charVar);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (paramLength == 6) {\n            index = (uint)params[2] + (uint)params[3] * 0x80;\n            charVar = params[4] + params[5] * -0x80;\n          }\n          else {\n            charVar = params[2] + params[3] * -0x80;\n            index = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          byteIndex = (int)DAT_20000004;\n          tempVar = byteIndex * 0xc;\n          (&DAT_20000188)[tempVar] = byteVar1;\n          (&DAT_2000018c)[byteIndex * 3] = index;\n          (&DAT_20000190)[tempVar] = charVar;\n          (&DAT_20000191)[tempVar] = boolVar;\n          return;\n        }\n        process_data_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolVar,param4);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (loopIndex = 0; index = DAT_20000004 + 1, (int)loopIndex < index; loopIndex = loopIndex + 1 & 0xff) {\n        if (byteVar1 == (&DAT_20000188)[loopIndex * 0xc]) goto LAB_08001e66;\n      }\n      loopIndex = 0;\nLAB_08001e66:\n      for (; (int)loopIndex < index; loopIndex = loopIndex + 1 & 0xff) {\n        if (loopIndex < 8) {\n          byteIndex = (loopIndex + 1) * 0xc;\n          tempVar = loopIndex * 0xc;\n          (&DAT_20000188)[tempVar] = (&DAT_20000188)[byteIndex];\n          (&DAT_2000018c)[loopIndex * 3] = (&DAT_2000018c)[(loopIndex + 1) * 3];\n          (&DAT_20000190)[tempVar] = (&DAT_20000190)[byteIndex];\n          (&DAT_20000191)[tempVar] = (&DAT_20000191)[byteIndex];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    index = (uint)*params + (uint)params[1] * 0x80;\n    if ((1 < paramLength) && (index != 0)) {\n      DAT_2000012c = index;\n    }\n    if (DAT_20000170 == '\\0') {\n      initialize_and_process_pins_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < paramLength) &&\n       (DAT_20000008 = (uint)*params + (uint)params[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_command_08001cd0",
                "param_1": "command",
                "param_2": "paramLength",
                "param_3": "params",
                "param_4": "param4",
                "bVar1": "param1",
                "bVar2": "byteVar1",
                "bVar3": "byteVar2",
                "uVar4": "result",
                "bVar5": "byteVar3",
                "cVar6": "charVar",
                "iVar7": "index",
                "iVar8": "byteIndex",
                "uVar9": "loopIndex",
                "uVar10": "tempIndex",
                "iVar11": "tempVar",
                "bVar12": "boolVar"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_character_values_080022f8",
            "code": "\nvoid process_character_values_080022f8(void)\n\n{\n  bool isCharacterFound;\n  int index;\n  undefined4 specificValue;\n  uint outerLoopCounter;\n  uint innerLoopCounter;\n  \n  process_character_values_080022f8_08000ef8();\n  while (index = execute_function_08002ec4(&DAT_200003d4), index != 0) {\n    process_data_08002ed2(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_global_data_08008abc();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (outerLoopCounter = 0; outerLoopCounter < 0x3c; outerLoopCounter = outerLoopCounter + 1 & 0xff) {\n      innerLoopCounter = outerLoopCounter - 0x2e & 0xff;\n      if (innerLoopCounter < 0xe) {\n        if (outerLoopCounter < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[outerLoopCounter];\n        }\n        else {\n          index = -1;\n        }\n        index = find_character_index_080036ac(index);\n        if (index == 0) {\n          isCharacterFound = false;\n        }\n        else {\n          if (outerLoopCounter < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[outerLoopCounter];\n          }\n          else {\n            index = -1;\n          }\n          index = find_character_index_080036ac(index);\n          if (index == 1) {\n            isCharacterFound = false;\n          }\n          else {\n            index = get_specific_value_from_pointer_08002fa0(&DAT_200003d4,outerLoopCounter);\n            if (index == 2) {\n              isCharacterFound = true;\n            }\n            else {\n              isCharacterFound = false;\n            }\n          }\n        }\n      }\n      else {\n        isCharacterFound = false;\n      }\n      if ((isCharacterFound) && ((DAT_20000114 >> innerLoopCounter & 1U) != 0)) {\n        specificValue = retrieve_value_08008880(innerLoopCounter);\n        process_and_execute_data_08002ef2(&DAT_200003d4,innerLoopCounter,specificValue);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (outerLoopCounter = 0; (int)outerLoopCounter < DAT_20000004 + 1; outerLoopCounter = outerLoopCounter + 1 & 0xff) {\n        index = outerLoopCounter * 0xc;\n        process_i2_c_data_08001c18((&DAT_20000188)[index],(&DAT_2000018c)[outerLoopCounter * 3],(&DAT_20000190)[index],\n                     (&DAT_20000191)[index]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_character_values_080022f8",
                "iVar2": "index",
                "bVar1": "isCharacterFound",
                "uVar3": "specificValue",
                "uVar4": "outerLoopCounter",
                "uVar5": "innerLoopCounter"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "is_bit_set_08002400",
            "code": "\nundefined4 is_bit_set_08002400(int value)\n\n{\n  uint index;\n  \n  index = 0;\n  while( true ) {\n    if (0xb < index) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(value * 0xc + index) * 8] & 0x40) != 0) break;\n    index = index + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "is_bit_set_08002400",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_data_0800242c",
            "code": "\nvoid initialize_data_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_data_0800242c_08007648(param1,60000,0x5dc,&label_08002444_1,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_data_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "LAB_08002444_1": "label_08002444_1"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_timer_08002578",
            "code": "\nvoid initialize_timer_08002578(void)\n\n{\n  initialize_timer_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_timer_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "set_byte_value_08002580",
            "code": "\nvoid setByteValue_08002580(byte *byteArray)\n\n{\n  char nextByte;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *byteArray = 0xff;\n    return;\n  }\n  nextByte = DAT_20000250 + 1;\n  *byteArray = DAT_20000250;\n  DAT_20000250 = nextByte;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "set_byte_value_08002580",
                "param_1": "byteArray",
                "cVar1": "nextByte",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_data_080025ac",
            "code": "\nbyte process_data_080025ac(byte *data_ptr,uint data_size,int param,int param2)\n\n{\n  uint masked_data;\n  uint data_index;\n  uint divided_data;\n  int calculated_value;\n  \n  if (*data_ptr < 0xc) {\n    process_data_080025ac_08008990(data_size,1,param,*data_ptr,param2);\n    data_index = (uint)*data_ptr;\n    masked_data = (byte)(&DAT_20000258)[data_index * 8] & 0xffffffc0 | data_size & 0x3f;\n    (&DAT_20000258)[data_index * 8] = (char)masked_data;\n    calculated_value = -param + 0x220;\n    if (calculated_value < 0) {\n      calculated_value = -param + 0x223;\n    }\n    data_ptr[1] = (byte)((uint)(calculated_value << 0x16) >> 0x18);\n    calculated_value = -param2 + 0x960;\n    if (calculated_value < 0) {\n      calculated_value = -param2 + 0x963;\n    }\n    data_ptr[2] = (byte)((uint)(calculated_value << 0x16) >> 0x18);\n    divided_data = *data_ptr / 0xc;\n    calculated_value = check_bit_set(divided_data,masked_data,data_index,(uint)*data_ptr * -0x55555555);\n    if (calculated_value == 0) {\n      DAT_200002fc = (undefined)divided_data;\n      initialize_data();\n    }\n    (&DAT_20000258)[(uint)*data_ptr * 8] = (&DAT_20000258)[(uint)*data_ptr * 8] | 0x40;\n  }\n  return *data_ptr;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_data_080025ac",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param",
                "param_4": "param2",
                "uVar1": "masked_data",
                "uVar2": "data_index",
                "uVar3": "divided_data",
                "iVar4": "calculated_value",
                "initialize_data_0800242c": "initialize_data",
                "is_bit_set_08002400": "check_bit_set"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "process_and_store_data_08002634",
            "code": "\nvoid process_and_store_data_08002634(undefined4 input_param,undefined4 output_param,undefined4 param_3,undefined4 param_4)\n\n{\n  process_data_080025ac(input_param,output_param,0x220,0x960,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "process_and_store_data_08002634",
                "param_1": "input_param",
                "param_2": "output_param"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "process_data_08002644",
            "code": "\nvoid processData_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteVal;\n  uint firstByte;\n  int result;\n  \n  firstByte = (uint)*data;\n  byteVal = (&DAT_20000258)[firstByte * 8];\n  (&DAT_20000258)[firstByte * 8] = byteVal & 0xbf;\n  result = is_bit_set_08002400(firstByte / 0xc,param2,byteVal & 0xbf,firstByte * -0x55555555,param4);\n  if (result == 0) {\n    initialize_timer_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "process_data_08002644",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteVal",
                "uVar2": "firstByte",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_value_0800267c",
            "code": "\nvoid updateArrayValue_0800267c(byte *array,int value)\n\n{\n  int newValue;\n  \n  if (*array < 0xc) {\n    newValue = (0x88 - (char)array[1]) * 4;\n    if ((newValue - value == 0 || newValue < value) &&\n       (newValue = (600 - (char)array[2]) * 4,\n       value == newValue || value + (600 - (char)array[2]) * -4 < 0 != SBORROW4(value,newValue)))\n    {\n      newValue = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_value_0800267c",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "newValue"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "update_and_calculate_080026b0",
            "code": "\nvoid updateAndCalculate_080026b0(int inputParam,int limit)\n\n{\n  if (limit < 0x220) {\n    if (limit < 0) {\n      limit = 0;\n    }\n    else if (0xb4 < limit) {\n      limit = 0xb4;\n    }\n    limit = calculateValue(limit,0,0xb4,(0x88 - *(char *)(inputParam + 1)) * 4,\n                           (600 - *(char *)(inputParam + 2)) * 4);\n  }\n  updateArrayValue(inputParam,limit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "update_and_calculate_080026b0",
                "param_1": "inputParam",
                "param_2": "limit",
                "calculate_08008ef4": "calculateValue",
                "update_array_value_0800267c": "updateArrayValue"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extracted_byte_080026f8",
            "code": "\nunsignedInt extractedByte_080026f8(byte *inputByte)\n\n{\n  return ((unsignedInt)(byte)(&DAT_20000258)[(unsignedInt)*inputByte * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extracted_byte_080026f8",
                "param_1": "inputByte",
                "uint": "unsignedInt"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "extract_byte_from_memory_08002720",
            "code": "\nuint extractByteFromMemory_08002720(void)\n\n{\n  uint currentIndex;\n  \n  currentIndex = (uint)DAT_200003b5;\n  if (currentIndex < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + currentIndex);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "extract_byte_from_memory_08002720",
                "uVar1": "currentIndex"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "process_data_080027f0",
            "code": "\nuint processData_080027f0(int inputOffset,undefined4 dataPtr,uint dataLength)\n\n{\n  int copyResult;\n  uint newDataLength;\n  \n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_08007ede(inputOffset + 0x14,dataPtr,dataLength & 0xffff);\n    if (copyResult == 0) {\n      return dataLength;\n    }\n    return 0;\n  }\n  newDataLength = DAT_200003b8 + dataLength;\n  if (DAT_200003c5 < newDataLength) {\n    if (newDataLength < 0x20) {\n      newDataLength = 0x20;\n    }\n    DAT_200003cc = perform_memory_operation_08009908(DAT_200003cc,newDataLength);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)newDataLength;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(inputOffset + 4) = 1;\n    return 0;\n  }\n  copy_bytes_to_destination_080091b0((uint)DAT_200003b6 + DAT_200003cc,dataPtr,dataLength);\n  DAT_200003b6 = DAT_200003b6 + (char)dataLength;\n  DAT_200003b8 = DAT_200003b6;\n  return dataLength;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "inputOffset",
                "param_2": "dataPtr",
                "param_3": "dataLength",
                "iVar1": "copyResult",
                "uVar2": "newDataLength"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_and_update_data_0800288c",
            "code": "\nundefined4 copyAndUpdateData_0800288c(int inputDataAddress,undefined inputCharacter)\n\n{\n  undefined4 returnValue;\n  int copyResult;\n  uint newDataSize;\n  undefined updatedCharacter;\n  \n  updatedCharacter = inputCharacter;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_08007ede(inputDataAddress + 0x14,&updatedCharacter,1);\n    if (copyResult == 0) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    newDataSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newDataSize) {\n      if (newDataSize < 0x20) {\n        newDataSize = 0x20;\n      }\n      DAT_200003cc = perform_memory_operation_08009908(DAT_200003cc,newDataSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newDataSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(inputDataAddress + 4) = 1;\n      returnValue = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = updatedCharacter;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      returnValue = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_and_update_data_0800288c",
                "param_1": "inputDataAddress",
                "param_2": "inputCharacter",
                "uVar1": "returnValue",
                "iVar2": "copyResult",
                "uVar3": "newDataSize",
                "local_11": "updatedCharacter"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_parameters_0800291c",
            "code": "\nvoid initializeParameters_0800291c(undefined4 *parameters)\n\n{\n  parameter1 = 0;\n  parameter2 = 1000;\n  *parameters = &PTR_copy_and_update_data_0800288c_1_0800a5a0;\n  *(undefined *)(parameters + 0x1b) = 0x19;\n  *(undefined *)((int)parameters + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters",
                "param_1[1]": "parameter1",
                "param_1[2]": "parameter2"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_parameters_if_needed_08002948",
            "code": "\nvoid initialize_parameters_if_needed_08002948(int status_flag,int value)\n\n{\n  if (status_flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_parameters_0800291c(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_parameters_if_needed_08002948",
                "param_1": "status_flag",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_serial_interface_08002968",
            "code": "\nvoid initialize_serial_interface_08002968(int interface_address,uint interface_mode)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_with_byte_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_with_byte_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  iVar1 = (interface_mode & 0x7f) << 1;\n  *(char *)(interface_address + 0x10) = (char)iVar1;\n  if (interface_mode == 0x33) {\n    *(undefined *)(interface_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(interface_address + 0x11) = 0;\n  }\n  iVar2 = interface_address + 0x14;\n  initialize_i2_c_080077b0(iVar2,100000,0x4000,iVar1,*(undefined *)(interface_address + 0x11));\n  if (*(char *)(interface_address + 0x11) == '\\0') {\n    update_pointer_and_initialize_08007f8e(iVar2,&LAB_08002774_1);\n    update_pointer_value_08007f7c(iVar2,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_serial_interface_08002968",
                "param_1": "interface_address",
                "param_2": "interface_mode"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_serial_interface_08002a1c",
            "code": "\nvoid initialize_serial_interface_08002a1c(undefined4 config_param,undefined undefined_param,undefined4 buffer_param,undefined4 data_param)\n\n{\n  initialize_serial_interface_08002a1c_08002968(config_param,undefined_param,buffer_param,data_param,data_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_serial_interface_08002a1c",
                "param_1": "config_param",
                "param_2": "undefined_param",
                "param_3": "buffer_param",
                "param_4": "data_param"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_serial_interface_08002a26",
            "code": "\nvoid initialize_serial_interface_08002a26(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_serial_interface_08002a26_08002a1c(param_1,0x33,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_serial_interface_08002a26"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 param,int value)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(value << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "param",
                "param_2": "value"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "validate_and_initialize_function_08002a58",
            "code": "\nundefined4 validate_and_initialize_function_08002a58(int input_parameter)\n\n{\n  int validation_result;\n  undefined4 return_value;\n  \n  if (*(char *)(input_parameter + 0x11) == '\\0') {\n    return_value = 4;\n  }\n  else {\n    validation_result = validate_and_initialize_08007e74(input_parameter + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (validation_result == 0) {\n      return_value = 0;\n    }\n    else if (validation_result == 1) {\n      return_value = 1;\n    }\n    else {\n      return_value = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_with_byte_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "validate_and_initialize_function_08002a58",
                "param_1": "input_parameter",
                "iVar1": "validation_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "initialize_and_validate_08002ac0",
            "code": "\nvoid initialize_and_validate_08002ac0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  validate_and_initialize_function_08002a58(input_1,1,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "initialize_and_validate_08002ac0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "improve_and_set_memory_size_08002acc",
            "code": "\nvoid improveAndSetMemorySize_08002acc(uint requestedSize,undefined4 unusedParam1,undefined4 unusedParam2,undefined4 unusedParam3)\n\n{\n  if (DAT_200003c4 < requestedSize) {\n    if (requestedSize < 0x20) {\n      requestedSize = 0x20;\n    }\n    DAT_200003c8 = perform_memory_operation_08009908(DAT_200003c8,requestedSize,unusedParam2,(uint)DAT_200003c4,unusedParam3);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requestedSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "improve_and_set_memory_size_08002acc",
                "param_1": "requestedSize",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "param_4": "unusedParam3"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "validate_and_execute_08002b68",
            "code": "\nundefined4\nvalidate_and_execute_08002b68(undefined4 *function_pointer,uint input_size,undefined4 memory_base,uint param4,byte byte_value)\n\n{\n  int check_result;\n  uint loop_counter;\n  uint param4_copy;\n  \n  loop_counter = (uint)byte_value;\n  if (*(char *)((int)function_pointer + 0x11) == '\\0') {\n    return 0;\n  }\n  param4_copy = param4;\n  improve_and_set_memory_size_08002acc(memory_base);\n  if (DAT_200003c8 != 0) {\n    if (loop_counter != 0) {\n      initialize_data_08002a30(function_pointer,input_size);\n      if (3 < loop_counter) {\n        loop_counter = 3;\n      }\n      while( true ) {\n        if (loop_counter == 0) break;\n        (**(code **)*function_pointer)(function_pointer,param4 >> ((loop_counter - 1 & 0x1f) << 3) & 0xff);\n        loop_counter = loop_counter - 1 & 0xff;\n      }\n      validate_and_initialize_function_08002a58(function_pointer,0);\n    }\n    check_result = check_param_validity_08007f0e(function_pointer + 5,(input_size & 0x7f) << 1,DAT_200003c8,memory_base,param4_copy);\n    if (check_result != 0) {\n      memory_base = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)memory_base;\n    return memory_base;\n  }\n  function_pointer[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "validate_and_execute_08002b68",
                "param_1": "function_pointer",
                "param_2": "input_size",
                "param_3": "memory_base",
                "param_4": "param4",
                "param_5": "byte_value",
                "iVar1": "check_result",
                "uVar2": "loop_counter",
                "uVar3": "param4_copy"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "execute_validated_function_08002c00",
            "code": "\nvoid execute_validated_function_08002c00(void)\n\n{\n  validate_and_execute();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "execute_validated_function_08002c00",
                "validate_and_execute_08002b68": "validate_and_execute"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "execute_validated_function_08002c14",
            "code": "\nvoid execute_validated_function_08002c14(void)\n\n{\n  execute_validated_function_08002c14();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "execute_validated_function_08002c14",
                "execute_validated_function_08002c00": "execute_validated_function"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_parameters_if_needed_08002c1e",
            "code": "\nvoid initializeParametersIfNeeded_08002c1e(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_parameters_if_needed_08002948(1,0xffff,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_parameters_if_needed_08002c1e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_configure_08002ce0",
            "code": "\nint initialize_and_configure_08002ce0(int base_address)\n\n{\n  int offset;\n  \n  initialize_memory(base_address + 0x40);\n  offset = base_address + 0x44;\n  initialize_parameters(offset,base_address,0x40);\n  *(undefined *)(base_address + 0xc4) = 0;\n  *(undefined4 *)(base_address + 200) = 0;\n  *(undefined *)(base_address + 0x1f8) = 0;\n  set_parameter_value(offset,0xe0,callback_function + 1,0);\n  set_parameter_value(offset,0x90,label_1,0);\n  set_parameter_value(offset,0xc0,label_2,0);\n  set_parameter_value(offset,0xd0,label_3,0);\n  set_parameter_value(offset,0xf4,label_4,0);\n  set_parameter_value(offset,0xf5,label_5,0);\n  update_data(offset,0x71,label_6,0);\n  set_parameters_08003370(offset,0xf0,label_7,0);\n  set_parameters(offset,0x79,label_8,base_address);\n  update_parameters(offset,0xf9,label_9,base_address);\n  update_parameters(offset,0xff,label_10,0);\n  return base_address;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_configure_08002ce0",
                "param_1": "base_address",
                "iVar1": "offset",
                "initialize_memory_0800314e": "initialize_memory",
                "initialize_params_080032bc": "initialize_parameters",
                "set_param_values_08003306": "set_parameter_value",
                "set_parameters_08003346": "set_parameters",
                "update_data_08003366": "update_data",
                "update_parameters_08003350": "update_parameters",
                "execute_callback_08002c2c": "callback_function",
                "&LAB_08002c40_1": "label_1",
                "&LAB_08002c7c_1": "label_2",
                "&LAB_08002c90_1": "label_3",
                "&LAB_08002c54_1": "label_4",
                "&LAB_08002c68_1": "label_5",
                "&LAB_08002ca4_1": "label_6",
                "&LAB_08002cb8_1": "label_7",
                "&LAB_08002e1a_1": "label_8",
                "&LAB_08002dea_1": "label_9",
                "&LAB_08002cd0_1": "label_10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_if_param_is_one_08002dbc",
            "code": "\nvoid initializeIfParamIsOne_08002dbc(int param_one,int param_two)\n\n{\n  if (param_one != 1) {\n    return;\n  }\n  if (param_two == 0xffff) {\n    initializeAndConfigure(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_if_param_is_one_08002dbc",
                "param_1": "param_one",
                "param_2": "param_two",
                "initialize_and_configure_08002ce0": "initializeAndConfigure"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_and_increment_08002ddc",
            "code": "\nvoid execute_and_increment_08002ddc(int base_address,undefined4 constant_1,undefined4 constant_2,undefined4 argument)\n\n{\n  execute_with_arguments(base_address + 0x40,2,5,argument,argument);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_and_increment_08002ddc",
                "param_1": "base_address",
                "param_2": "constant_1",
                "param_3": "constant_2",
                "param_4": "argument",
                "execute_function_0800322c": "execute_with_arguments"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "decode_and_process_data_08002df6",
            "code": "\nvoid decodeAndProcessData_08002df6(int input)\n\n{\n  undefined *dataPointer;\n  \n  if (*(byte *)(input + 0xc4) == 0) {\n    return;\n  }\n  dataPointer = *(undefined **)(input + 200);\n  decode_and_process_data_080031ce(input + 0x40,*dataPointer,dataPointer[1],*(byte *)(input + 0xc4) - 2,dataPointer + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "decode_and_process_data_08002df6",
                "param_1": "input",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "copy_and_process_data_08002e26",
            "code": "\nvoid copyAndProcessData_08002e26(int dataPointer,undefined4 newValue)\n\n{\n  *(undefined4 *)(dataPointer + 0xc0) = newValue;\n  copyData(dataPointer + 0x40);\n  execute(dataPointer);\n  decodeAndProcessData(dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "copy_and_process_data_08002e26",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "copy_value_08003154": "copyData",
                "execute_and_increment_08002ddc": "execute",
                "decode_and_process_data_08002df6": "decodeAndProcessData"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_path_08002e44",
            "code": "\nvoid extractFilePath_08002e44(int destBuffer,int sourcePath,undefined undefined1,undefined undefined2)\n\n{\n  byte stringLength;\n  char stringEndChar;\n  int substringIndex;\n  int lastSlashIndex;\n  undefined *newBuffer;\n  \n  substringIndex = find_substring_080099a4(sourcePath,\".cpp\");\n  lastSlashIndex = find_last_occurrence_0800997e(sourcePath,0x2f);\n  if (lastSlashIndex == 0) {\n    lastSlashIndex = find_last_occurrence_0800997e(sourcePath,0x5c);\n  }\n  if (lastSlashIndex != 0) {\n    sourcePath = lastSlashIndex + 1;\n  }\n  if (substringIndex == 0) {\n    stringEndChar = find_string_end_08000178(sourcePath);\n    *(char *)(destBuffer + 0xc4) = stringEndChar + '\\x02';\n  }\n  else {\n    *(char *)(destBuffer + 0xc4) = ((char)substringIndex - (char)sourcePath) + '\\x02';\n  }\n  insert_element_into_data_080091a0(*(undefined4 *)(destBuffer + 200));\n  stringLength = *(byte *)(destBuffer + 0xc4);\n  newBuffer = (undefined *)allocate_memory_08009190(stringLength + 1);\n  *(undefined **)(destBuffer + 200) = newBuffer;\n  newBuffer[stringLength] = 0;\n  *newBuffer = undefined1;\n  newBuffer[1] = undefined2;\n  copy_string_08009954(newBuffer + 2,sourcePath,*(byte *)(destBuffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_path_08002e44",
                "param_1": "destBuffer",
                "param_2": "sourcePath",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "bVar1": "stringLength",
                "cVar2": "stringEndChar",
                "iVar3": "substringIndex",
                "iVar4": "lastSlashIndex",
                "puVar5": "newBuffer"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid executeFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_data_08002ed2",
            "code": "\nvoid process_data_08002ed2(int input)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(input + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_data_08002ed2_08003474(input + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_data_08002ed2",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "process_and_execute_data_08002ef2",
            "code": "\nvoid process_and_execute_data_08002ef2(int data_start_index,undefined4 param_2,undefined2 param_3,undefined4 param_4)\n\n{\n  execute_data_processing(data_start_index + 0x40,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "process_and_execute_data_08002ef2",
                "param_1": "data_start_index",
                "process_data_08003158": "execute_data_processing"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "process_and_decode_08002efe",
            "code": "\nvoid process_and_decode_08002efe(int input_addr,undefined4 param_2,undefined2 param_3,undefined4 param_4)\n\n{\n  process_and_decode_08002efe_0800319e(input_addr + 0x40,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "process_and_decode_08002efe",
                "param_1": "input_addr"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "process_and_forward_data_08002f0a",
            "code": "\nvoid process_and_forward_data_08002f0a(int input_data)\n\n{\n  process_data(input_data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "process_and_forward_data_08002f0a",
                "param_1": "input_data",
                "process_data_0800325a": "process_data"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "process_data_08002f14",
            "code": "\nvoid process_data_08002f14(int input)\n\n{\n  process_data_08002f14_helper(input + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "process_data_08002f14",
                "param_1": "input",
                "process_data_080032a2": "process_data_helper"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_function_08002f1e",
            "code": "\nvoid executeFunction_08002f1e(int functionPointer)\n\n{\n  (**(code **)**(undefined4 **)(functionPointer + 0xc0))();\n  void;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_function_08002f1e",
                "param_1": "functionPointer",
                "return": "void"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 tempVar;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    tempVar = param3;\n    if ((param2 != 0xf5) && (tempVar = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = tempVar;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "tempVar"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_data_08002f84",
            "code": "\nvoid update_data_08002f84(undefined4 unused_param,int value,undefined4 new_value)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_data_08002f84",
                "param_1": "unused_param",
                "param_2": "value",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_global_variable_08002f94",
            "code": "\nvoid set_global_variable_08002f94(undefined4 input_param1,undefined4 input_param2,undefined4 new_value)\n\n{\n  DAT_200005d0 = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_global_variable_08002f94",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "new_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_specific_value_from_pointer_08002fa0",
            "code": "\nundefined getSpecificValueFromPointer_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_specific_value_from_pointer_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_memory_value_08002fa8",
            "code": "\nvoid updateMemoryValue_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_memory_value_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_offset_value_08002fba",
            "code": "\nundefined4 getOffsetValue_08002fba(int baseAddress,int offset)\n\n{\n  return *(undefined4 *)(baseAddress + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_offset_value_08002fba",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "write_param_to_memory_08002fc2",
            "code": "\nvoid writeParamToMemory_08002fc2(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (offset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "write_param_to_memory_08002fc2",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "process_params_08002fca",
            "code": "\nvoid process_params_08002fca(undefined4 param_1,undefined4 param_2,int num_iterations,undefined4 param_4,\n                 undefined4 param_5)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < num_iterations; iteration_count = iteration_count + 1 & 0xff) {\n    FUNC_08008ac4(param_5);\n    process_param_08008a24(param_2,1);\n    FUNC_08008ac4(param_4);\n    process_param_08008a24(param_2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "process_params_08002fca",
                "param_3": "num_iterations",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_data_08003002",
            "code": "\nvoid processData_08003002(int dataPointer)\n\n{\n  if (*(char *)(dataPointer + 0x1f8) != '\\0') {\n    return;\n  }\n  processData_08003002Helper1(0xd,1);\n  processParams(dataPointer,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  processParams(dataPointer,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_data_08003002",
                "param_1": "dataPointer",
                "process_data_08008990": "processDataHelper1",
                "process_params_08002fca": "processParams"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_serial_communication_08003048",
            "code": "\nvoid initializeSerialCommunication_08003048(undefined4 data,undefined4 config,undefined4 param_3,undefined4 param_4)\n\n{\n  configureHardwareSerial(&DAT_20000700,config,6,param_4,param_4);\n  processData(data);\n  copyAndProcessData(data,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_serial_communication_08003048",
                "param_1": "data",
                "param_2": "config",
                "configure_hardware_serial_08008c44": "configureHardwareSerial",
                "process_data_08003002": "processData",
                "copy_and_process_data_08002e26": "copyAndProcessData"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_process_0800307a",
            "code": "\nvoid decodeAndProcess_0800307a(undefined4 *functionPointer,uint inputSize,byte *inputData,uint maxIterations)\n\n{\n  uint currentByte;\n  uint bitPosition;\n  uint iterationCount;\n  uint currentIndex;\n  \n  currentByte = (uint)*inputData;\n  if (maxIterations == 0) {\n    maxIterations = 0xffffffff;\n  }\n  currentIndex = 0;\n  bitPosition = 0;\n  iterationCount = 0;\n  while ((currentIndex < inputSize && (iterationCount < maxIterations))) {\n    (***(code ***)(undefined4 *)*functionPointer)\n              ((undefined4 *)*functionPointer,((uint)inputData[currentIndex] << (bitPosition & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)inputData[currentIndex] >> (7 - bitPosition & 0xff) & 0xff;\n    bitPosition = bitPosition + 1;\n    while ((iterationCount = iterationCount + 1, 6 < bitPosition && (iterationCount < maxIterations))) {\n      (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitPosition = bitPosition - 7;\n    }\n    currentIndex = currentIndex + 1;\n  }\n  if ((bitPosition != 0) && (iterationCount < maxIterations)) {\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,(1 << (bitPosition & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_process_0800307a",
                "param_1": "functionPointer",
                "param_2": "inputSize",
                "param_3": "inputData",
                "param_4": "maxIterations",
                "uVar1": "currentByte",
                "uVar2": "bitPosition",
                "uVar3": "iterationCount",
                "uVar4": "currentIndex"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "process_paramters_08003106",
            "code": "\nvoid process_paramters_08003106(undefined4 *ptr_parameter_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 *ptr_var_1;\n  \n  ptr_var_1 = (undefined4 *)*ptr_parameter_1;\n  if (ptr_var_1 != (undefined4 *)0x0) {\n    (**(code **)*ptr_var_1)(ptr_var_1,0xf0);\n    (***(code ***)(undefined4 *)*ptr_parameter_1)((undefined4 *)*ptr_parameter_1,0x6f);\n    (***(code ***)(undefined4 *)*ptr_parameter_1)((undefined4 *)*ptr_parameter_1,param_2);\n    decode_and_process_0800307a(ptr_parameter_1,param_3,param_4,param_3);\n    (***(code ***)(undefined4 *)*ptr_parameter_1)((undefined4 *)*ptr_parameter_1,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "process_paramters_08003106",
                "param_1": "ptr_parameter_1",
                "puVar1": "ptr_var_1"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_memory_0800314e",
            "code": "\nvoid initializeMemory_0800314e(undefined4 *memoryPtr)\n\n{\n  *memoryPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_memory_0800314e",
                "param_1": "memoryPtr"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_08003154",
            "code": "\nvoid copyValue_08003154(undefined4 *destination,undefined4 valueToCopy)\n\n{\n  *destination = valueToCopy;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_08003154",
                "param_1": "destination",
                "param_2": "valueToCopy"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_data_08003158",
            "code": "\nvoid process_data_08003158(undefined4 *data_ptr,uint num_elements,ushort input_value)\n\n{\n  undefined4 *func_ptr;\n  ushort decoded_value;\n  \n  func_ptr = (undefined4 *)*data_ptr;\n  if (func_ptr != (undefined4 *)0x0) {\n    decoded_value = input_value;\n    if (((int)num_elements < 0x10) && (input_value < 0x4000)) {\n      (**(code **)*func_ptr)(func_ptr,num_elements | 0xe0);\n      decode_and_process_0800307a(data_ptr,2,&decoded_value);\n    }\n    else {\n      process_paramters_08003106(data_ptr,num_elements,2,&decoded_value);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "data_ptr",
                "param_2": "num_elements",
                "param_3": "input_value",
                "puVar1": "func_ptr",
                "local_a": "decoded_value"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "process_and_decode_0800319e",
            "code": "\nvoid process_and_decode_0800319e(undefined4 *input_ptr,uint input_size,undefined2 input_data)\n\n{\n  undefined4 *function_ptr;\n  undefined2 decoded_input;\n  \n  function_ptr = (undefined4 *)*input_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    decoded_input = input_data;\n    (**(code **)*function_ptr)(function_ptr,input_size & 0xf | 0x90);\n    decode_and_process_0800307a(input_ptr,2,&decoded_input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "process_and_decode_0800319e",
                "param_1": "input_ptr",
                "param_2": "input_size",
                "param_3": "input_data",
                "puVar1": "function_ptr",
                "local_a": "decoded_input"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "decode_and_process_data_080031ce",
            "code": "\nvoid decode_and_process_data_080031ce(undefined4 *data_ptr,undefined4 param_2,undefined4 param_3,uint data_count,int param_5\n                 )\n\n{\n  undefined4 *ptr;\n  uint index;\n  \n  ptr = (undefined4 *)*data_ptr;\n  if (ptr != (undefined4 *)0x0) {\n    (**(code **)*ptr)(ptr,0xf0,param_3,*(code **)*ptr,data_count);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_3);\n    for (index = 0; index < data_count; index = index + 1) {\n      decode_and_process_0800307a(data_ptr,1,param_5 + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "decode_and_process_data_080031ce",
                "param_1": "data_ptr",
                "param_4": "data_count",
                "puVar1": "ptr",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 *nextFunctionPointer;\n  \n  nextFunctionPointer = (undefined4 *)*functionPointer;\n  if (nextFunctionPointer != (undefined4 *)0x0) {\n    (**(code **)*nextFunctionPointer)(nextFunctionPointer,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,arg1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,arg2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "puVar1": "nextFunctionPointer"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "process_data_0800325a",
            "code": "\nvoid processData_0800325a(undefined4 *dataPointer,undefined4 value,uint count,int offset)\n\n{\n  undefined4 *functionPointer;\n  uint iterator;\n  \n  functionPointer = (undefined4 *)*dataPointer;\n  if (functionPointer != (undefined4 *)0x0) {\n    (**(code **)*functionPointer)(functionPointer,0xf0);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,value);\n    for (iterator = 0; iterator < count; iterator = iterator + 1) {\n      decode_and_process_0800307a(dataPointer,1,offset + iterator,0);\n    }\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "process_data_0800325a",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "count",
                "param_4": "offset",
                "puVar1": "functionPointer",
                "uVar2": "iterator"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "process_data_080032a2",
            "code": "\nvoid process_data_080032a2(undefined4 input_param,undefined4 string_param,undefined4 unused_param,undefined4 output_param)\n\n{\n  undefined4 string_end_index;\n  \n  string_end_index = find_string_end_08000178(string_param);\n  process_data_080032a2_0800325a(input_param,0x71,string_end_index,string_param,output_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "process_data_080032a2",
                "param_1": "input_param",
                "param_2": "string_param",
                "param_3": "unused_param",
                "param_4": "output_param",
                "uVar1": "string_end_index"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_params_080032bc",
            "code": "\nvoid initializeParams_080032bc(int paramBuffer,int paramValue,undefined4 param3Value)\n\n{\n  *(int *)(paramBuffer + 4) = paramValue;\n  *(undefined4 *)(paramBuffer + 8) = param3Value;\n  *(undefined *)(paramBuffer + 0xc) = 0;\n  *(undefined *)(paramBuffer + 0xd) = 0;\n  *(undefined4 *)(paramBuffer + 0x10) = 0;\n  *(undefined *)(paramBuffer + 0x14) = 0;\n  *(undefined4 *)(paramBuffer + 0x18) = 0;\n  *(undefined4 *)(paramBuffer + 0x1c) = 0;\n  *(undefined4 *)(paramBuffer + 0x20) = 0;\n  *(undefined4 *)(paramBuffer + 0x24) = 0;\n  *(undefined4 *)(paramBuffer + 0x28) = 0;\n  *(undefined4 *)(paramBuffer + 0x2c) = 0;\n  *(undefined4 *)(paramBuffer + 0x30) = 0;\n  *(undefined4 *)(paramBuffer + 0x34) = 0;\n  *(undefined4 *)(paramBuffer + 0x38) = 0;\n  *(undefined4 *)(paramBuffer + 0x3c) = 0;\n  *(undefined4 *)(paramBuffer + 0x40) = 0;\n  *(undefined4 *)(paramBuffer + 0x44) = 0;\n  *(undefined4 *)(paramBuffer + 0x48) = 0;\n  *(undefined4 *)(paramBuffer + 0x4c) = 0;\n  *(undefined4 *)(paramBuffer + 0x50) = 0;\n  *(undefined4 *)(paramBuffer + 0x54) = 0;\n  *(undefined4 *)(paramBuffer + 0x58) = 0;\n  *(undefined4 *)(paramBuffer + 0x5c) = 0;\n  *(undefined4 *)(paramBuffer + 0x60) = 0;\n  *(undefined4 *)(paramBuffer + 100) = 0;\n  *(undefined4 *)(paramBuffer + 0x68) = 0;\n  *(undefined4 *)(paramBuffer + 0x6c) = 0;\n  *(undefined4 *)(paramBuffer + 0x70) = 0;\n  *(undefined4 *)(paramBuffer + 0x74) = 0;\n  *(undefined4 *)(paramBuffer + 0x78) = 0;\n  *(bool *)paramBuffer = paramValue == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_params_080032bc",
                "param_1": "paramBuffer",
                "param_2": "paramValue",
                "param_3": "param3Value"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "set_param_values_08003306",
            "code": "\nvoid setParamValues_08003306(int objectAddress,uint paramCode,undefined4 value1,undefined4 value2)\n\n{\n  if (paramCode == 0xd0) {\n    *(undefined4 *)(objectAddress + 0x58) = value1;\n    *(undefined4 *)(objectAddress + 0x28) = value2;\n    return;\n  }\n  if (0xd0 < paramCode) {\n    if (paramCode == 0xf4) {\n      *(undefined4 *)(objectAddress + 0x5c) = value1;\n      *(undefined4 *)(objectAddress + 0x2c) = value2;\n      return;\n    }\n    if (paramCode == 0xf5) {\n      *(undefined4 *)(objectAddress + 0x60) = value1;\n      *(undefined4 *)(objectAddress + 0x30) = value2;\n    }\n    else if (paramCode == 0xe0) {\n      *(undefined4 *)(objectAddress + 0x4c) = value1;\n      *(undefined4 *)(objectAddress + 0x1c) = value2;\n      return;\n    }\n    return;\n  }\n  if (paramCode == 0x90) {\n    *(undefined4 *)(objectAddress + 0x50) = value1;\n    *(undefined4 *)(objectAddress + 0x20) = value2;\n    return;\n  }\n  if (paramCode == 0xc0) {\n    *(undefined4 *)(objectAddress + 0x54) = value1;\n    *(undefined4 *)(objectAddress + 0x24) = value2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "set_param_values_08003306",
                "param_1": "objectAddress",
                "param_2": "paramCode",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "set_parameters_08003346",
            "code": "\nvoid setParameters_08003346(int objectAddress,int value,undefined4 parameter1,undefined4 parameter2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(objectAddress + 0x70) = parameter1;\n    *(undefined4 *)(objectAddress + 0x34) = parameter2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "set_parameters_08003346",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "parameter1",
                "param_4": "parameter2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_parameters_08003350",
            "code": "\nvoid updateParameters_08003350(int objectAddress,int paramCode,undefined4 value1,undefined4 value2)\n\n{\n  if (paramCode == 0xf9) {\n    *(undefined4 *)(objectAddress + 0x74) = value1;\n    *(undefined4 *)(objectAddress + 0x38) = value2;\n    return;\n  }\n  if (paramCode != 0xff) {\n    return;\n  }\n  *(undefined4 *)(objectAddress + 0x78) = value1;\n  *(undefined4 *)(objectAddress + 0x48) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "objectAddress",
                "param_2": "paramCode",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_data_08003366",
            "code": "\nvoid updateData_08003366(int baseAddress,int value,undefined4 data1,undefined4 data2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = data1;\n    *(undefined4 *)(baseAddress + 0x40) = data2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_data_08003366",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_parameters_08003370",
            "code": "\nvoid setParameters_08003370(int objectPointer,undefined4 unusedParam1,undefined4 newParam,undefined4 anotherParam)\n\n{\n  *(undefined4 *)(objectPointer + 0x6c) = newParam;\n  *(undefined4 *)(objectPointer + 0x44) = anotherParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "objectPointer",
                "param_2": "unusedParam1",
                "param_3": "newParam",
                "param_4": "anotherParam"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_data_08003376",
            "code": "\nvoid updateData_08003376(undefined *data,undefined value,uint index)\n\n{\n  bool isIndexValid;\n  \n  if (index < *(uint *)(data + 8)) {\n    isIndexValid = false;\n  }\n  else {\n    isIndexValid = true;\n    if (*(code **)(data + 100) != (code *)0x0) {\n      *data = 1;\n      (**(code **)(data + 100))(*(undefined4 *)(data + 0x3c));\n      if (index < *(uint *)(data + 8)) {\n        isIndexValid = false;\n      }\n      else {\n        isIndexValid = true;\n      }\n    }\n  }\n  if (!isIndexValid) {\n    *(undefined *)(*(int *)(data + 4) + index) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_data_08003376",
                "param_1": "data",
                "param_2": "value",
                "param_3": "index",
                "bVar1": "isIndexValid"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bytes_080033a8",
            "code": "\nvoid copyAndShiftBytes_080033a8(undefined4 undefined4,uint numBytes,int byteArray)\n\n{\n  byte currentByte;\n  int newIndex;\n  uint currentIndex;\n  \n  newIndex = 0;\n  for (currentIndex = 0; currentIndex < numBytes; currentIndex = currentIndex + 2) {\n    currentByte = *(byte *)(byteArray + currentIndex);\n    *(byte *)(byteArray + newIndex) = currentByte;\n    *(byte *)(byteArray + newIndex) = *(char *)(byteArray + currentIndex + 1) << 7 | currentByte;\n    newIndex = newIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bytes_080033a8",
                "param_1": "undefined4",
                "param_2": "numBytes",
                "param_3": "byteArray",
                "bVar1": "currentByte",
                "iVar2": "newIndex",
                "uVar3": "currentIndex"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_data_080033cc",
            "code": "\nvoid processData_080033cc(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int result;\n  char *charPointer;\n  \n  charPointer = *(char **)(inputData + 4);\n  firstChar = *charPointer;\n  if (firstChar == 'q') {\n    if (*(int *)(inputData + 0x68) != 0) {\n      result = copy_and_shift_bytes_080033a8(inputData,*(int *)(inputData + 0x18) + -1,charPointer + 1,charPointer,param4);\n      update_data_08003376(inputData,0,result + 1);\n      (**(code **)(inputData + 0x68))(*(undefined4 *)(inputData + 0x40),*(int *)(inputData + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputData + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputData + 0x18) < 3) {\n        (**(code **)(inputData + 0x70))(*(undefined4 *)(inputData + 0x34),0,0);\n        return;\n      }\n      result = copy_and_shift_bytes_080033a8(inputData,*(uint *)(inputData + 0x18) - 3,charPointer + 3,charPointer,param4);\n      update_data_08003376(inputData,0,result + 3);\n      result = *(int *)(inputData + 4);\n      (**(code **)(inputData + 0x70))\n                (*(undefined4 *)(inputData + 0x34),*(undefined *)(result + 1),*(undefined *)(result + 2)\n                 ,result + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputData + 0x6c) != (code *)0x0) {\n    (**(code **)(inputData + 0x6c))\n              (*(undefined4 *)(inputData + 0x44),firstChar,*(int *)(inputData + 0x18) + -1,charPointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_data_080033cc",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "result",
                "pcVar3": "charPointer"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "reset_data_0800344a",
            "code": "\nvoid resetData_0800344a(int dataPtr)\n\n{\n  uint index;\n  \n  *(undefined4 *)(dataPtr + 0x10) = 0;\n  *(undefined *)(dataPtr + 0xc) = 0;\n  *(undefined *)(dataPtr + 0xd) = 0;\n  for (index = 0; index < *(uint *)(dataPtr + 8); index = index + 1) {\n    *(undefined *)(*(int *)(dataPtr + 4) + index) = 0;\n  }\n  *(undefined *)(dataPtr + 0x14) = 0;\n  *(undefined4 *)(dataPtr + 0x18) = 0;\n  if (*(code **)(dataPtr + 0x78) != (code *)0x0) {\n    (**(code **)(dataPtr + 0x78))(*(undefined4 *)(dataPtr + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "reset_data_0800344a",
                "param_1": "dataPtr",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_data_08003474",
            "code": "\nvoid process_data_08003474(int data,uint value)\n\n{\n  byte tempByte;\n  \n  if (*(char *)(data + 0x14) != '\\0') {\n    if (value != 0xf7) {\n      update_data_08003376(data,value,*(undefined4 *)(data + 0x18));\n      *(int *)(data + 0x18) = *(int *)(data + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(data + 0x14) = 0;\n    process_data_08003474_080033cc();\n    return;\n  }\n  if ((*(int *)(data + 0x10) == 0) || (0x7f < (int)value)) {\n    if ((int)value < 0xf0) {\n      *(byte *)(data + 0xd) = (byte)value & 0xf;\n      value = value & 0xf0;\n    }\n    if (value == 0xf0) {\n      *(undefined *)(data + 0x14) = 1;\n      *(undefined4 *)(data + 0x18) = 0;\n      return;\n    }\n    if (value < 0xf1) {\n      if (value != 0xc0) {\n        if (value < 0xc1) {\n          if (value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (value == 0xd0) goto LAB_0800359c;\n          if (value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(data + 0x10) = 2;\n        *(char *)(data + 0xc) = (char)value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(data + 0x10) = 1;\n      *(char *)(data + 0xc) = (char)value;\n      return;\n    }\n    if (value != 0xf9) {\n      if (0xf9 < value) {\n        if (value == 0xff) {\n          reset_data_0800344a(data);\n          return;\n        }\n        return;\n      }\n      if (1 < value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(data + 0x74) != (code *)0x0) {\n      (**(code **)(data + 0x74))(*(undefined4 *)(data + 0x38));\n    }\n  }\n  else {\n    *(int *)(data + 0x10) = *(int *)(data + 0x10) + -1;\n    update_data_08003376();\n    if ((*(int *)(data + 0x10) == 0) && (tempByte = *(byte *)(data + 0xc), tempByte != 0)) {\n      if (tempByte == 0xd0) {\n        if (*(code **)(data + 0x58) != (code *)0x0) {\n          (**(code **)(data + 0x58))\n                    (*(undefined4 *)(data + 0x28),*(undefined *)(data + 0xd),\n                     **(undefined **)(data + 4));\n        }\n      }\n      else if (tempByte < 0xd1) {\n        if (tempByte == 0x90) {\n          if (*(code **)(data + 0x50) != (code *)0x0) {\n            (**(code **)(data + 0x50))\n                      (*(undefined4 *)(data + 0x20),*(undefined *)(data + 0xd),\n                       (uint)(*(byte **)(data + 4))[1] + (uint)**(byte **)(data + 4) * 0x80);\n          }\n        }\n        else if ((tempByte == 0xc0) && (*(code **)(data + 0x54) != (code *)0x0)) {\n          (**(code **)(data + 0x54))\n                    (*(undefined4 *)(data + 0x24),*(undefined *)(data + 0xd),\n                     **(undefined **)(data + 4));\n        }\n      }\n      else if (tempByte == 0xf4) {\n        if (*(code **)(data + 0x5c) != (code *)0x0) {\n          (**(code **)(data + 0x5c))\n                    (*(undefined4 *)(data + 0x2c),(*(undefined **)(data + 4))[1],\n                     **(undefined **)(data + 4));\n        }\n      }\n      else if (tempByte == 0xf5) {\n        if (*(code **)(data + 0x60) != (code *)0x0) {\n          (**(code **)(data + 0x60))\n                    (*(undefined4 *)(data + 0x30),(*(undefined **)(data + 4))[1],\n                     **(undefined **)(data + 4));\n        }\n      }\n      else if ((tempByte == 0xe0) && (*(code **)(data + 0x4c) != (code *)0x0)) {\n        (**(code **)(data + 0x4c))\n                  (*(undefined4 *)(data + 0x1c),*(undefined *)(data + 0xd),\n                   (uint)(*(byte **)(data + 4))[1] + (uint)**(byte **)(data + 4) * 0x80);\n      }\n      *(undefined *)(data + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_data_08003474",
                "param_1": "data",
                "param_2": "value",
                "bVar1": "tempByte"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_system_080035b8",
            "code": "\nvoid initializeSystem_080035b8(void)\n\n{\n  int result;\n  uint dataValue;\n  undefined4 config1 [2];\n  undefined4 config2;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  undefined4 data5;\n  undefined4 inputFlags [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  \n  inputFlags[0] = 2;\n  flag1 = 1;\n  flag2 = 0x10;\n  flag3 = 2;\n  flag4 = 0;\n  flag5 = 0x380000;\n  result = process_flags_08005460(inputFlags);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  data1 = 0xf;\n  data2 = 2;\n  data3 = 0;\n  data4 = 0x400;\n  data5 = 0;\n  result = update_data_and_calculate_execution_time_080058ac(&data1);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  config1[0] = 2;\n  config2 = 0x8000;\n  result = update_config_08005aa4(config1);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  dataValue = get_data_08005a1c();\n  validate_input_08003fd8(dataValue / 1000);\n  set_flag_08004024(4);\n  process_data_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_system_080035b8",
                "local_30": "inputFlags",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "flag5",
                "iVar1": "result",
                "local_44": "data1",
                "local_40": "data2",
                "local_3c": "data3",
                "local_38": "data4",
                "local_34": "data5",
                "local_54": "config1",
                "local_4c": "config2",
                "uVar2": "dataValue"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  configure_registers_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  execute_infinite_loop_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_and_process_system_080036a2",
            "code": "\nvoid initialize_and_process_system_080036a2(void)\n\n{\n  initialize_and_process_system_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_and_process_system_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_character_index_080036ac",
            "code": "\nuint find_character_index_080036ac(int character)\n\n{\n  uint index;\n  \n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "validate_and_process_data_080036d8",
            "code": "\nundefined4 validate_and_process_data_080036d8(uint data)\n\n{\n  int validation_result;\n  \n  validation_result = validate_input_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (validation_result != 0) {\n    return 1;\n  }\n  if (0xf < data) {\n    return 1;\n  }\n  process_data_08003f30(0xffffffff,data,0);\n  DAT_20000010 = data;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "validate_and_process_data_080036d8",
                "param_1": "data",
                "iVar1": "validation_result"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "set_flag_and_process_data_08003724",
            "code": "\n\n\nundefined4 setFlagAndProcessData_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateValue(3);\n  validateAndProcessData(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "set_flag_and_process_data_08003724",
                "update_value_08003f0c": "updateValue",
                "validate_and_process_data_080036d8": "validateAndProcessData"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_and_add_value_08003748",
            "code": "\nvoid updateAndAddValue_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_and_add_value_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_global_data_08003760",
            "code": "\nundefined4 getGlobalData_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_global_data_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_status_0800376c",
            "code": "\nundefined4 calculateStatus_0800376c(uint **statusParams,uint maxParam)\n\n{\n  int globalData;\n  uint value;\n  int tempVar;\n  undefined4 result;\n  uint *paramPtr;\n  uint calculationResult;\n  uint counter;\n  \n  counter = 0;\n  globalData = get_global_data_08003760();\n  calculationResult = DAT_20000018;\n  paramPtr = *statusParams;\n  if ((paramPtr[2] & 0x100) == 0) {\n    if (((paramPtr[1] & 0x100) == 0) && ((paramPtr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**statusParams & 2) != 0) goto LAB_0800387e;\n      } while ((maxParam == 0xffffffff) ||\n              ((maxParam != 0 && (tempVar = get_global_data_08003760(), (uint)(tempVar - globalData) <= maxParam))));\n      statusParams[10] = (uint *)((uint)statusParams[10] | 4);\n      *(undefined *)(statusParams + 9) = 0;\n      result = 3;\n    }\n    else {\n      value = calculate_value_08005bb8(2);\n      paramPtr = *statusParams;\n      if (((paramPtr[4] & 0x24924924) == 0) && ((paramPtr[3] & 0x924924) == 0)) {\n        if ((paramPtr[4] & 0x12492492) == 0) {\n          if ((paramPtr[3] & 0x492492) == 0) {\n            tempVar = 0x14;\n          }\n          else {\n            tempVar = 0x29;\n          }\n        }\n        else {\n          tempVar = 0x29;\n        }\n      }\n      else if (((paramPtr[4] & 0x12492492) == 0) && ((paramPtr[3] & 0x492492) == 0)) {\n        tempVar = 0x54;\n      }\n      else if ((paramPtr[4] & 0x249249) == 0) {\n        if ((paramPtr[3] & 0x249249) == 0) {\n          tempVar = 0x54;\n        }\n        else {\n          tempVar = 0xfc;\n        }\n      }\n      else {\n        tempVar = 0xfc;\n      }\n      calculationResult = (calculationResult / value) * tempVar;\n      for (; counter <= calculationResult && calculationResult - counter != 0; counter = counter + 1) {\n        if ((maxParam != 0xffffffff) &&\n           ((maxParam == 0 || (tempVar = get_global_data_08003760(), maxParam < (uint)(tempVar - globalData))))) {\n          statusParams[10] = (uint *)((uint)statusParams[10] | 4);\n          *(undefined *)(statusParams + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **statusParams = 0xffffffed;\n      statusParams[10] = (uint *)((uint)statusParams[10] | 0x200);\n      if (((*statusParams)[2] & 0xe0000) == 0xe0000) {\n        if (statusParams[3] == (uint *)0x0) {\n          statusParams[10] = (uint *)((uint)statusParams[10] & 0xfffffeff);\n          if (((uint)statusParams[10] & 0x1000) == 0) {\n            statusParams[10] = (uint *)((uint)statusParams[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    statusParams[10] = (uint *)((uint)statusParams[10] | 0x20);\n    *(undefined *)(statusParams + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_status_0800376c",
                "param_1": "statusParams",
                "param_2": "maxParam",
                "iVar1": "globalData",
                "uVar2": "value",
                "iVar3": "tempVar",
                "uVar4": "result",
                "puVar5": "paramPtr",
                "uVar6": "calculationResult",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_memory_address_080038dc",
            "code": "\nundefined4 getMemoryAddress_080038dc(int *memoryPointer)\n\n{\n  return *(undefined4 *)(*memoryPointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_memory_address_080038dc",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_settings_080038e4",
            "code": "\nundefined4 updateSettings_080038e4(int *settings,uint *values)\n\n{\n  undefined4 result;\n  uint temp;\n  int count;\n  \n  if (*(char *)(settings + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(settings + 9) = 1;\n    temp = values[1];\n    if (temp < 7) {\n      temp = temp * 5 - 5;\n      *(uint *)(*settings + 0x34) =\n           *values << (temp & 0xff) | *(uint *)(*settings + 0x34) & ~(0x1f << (temp & 0xff));\n    }\n    else if (temp < 0xd) {\n      temp = temp * 5 - 0x23;\n      *(uint *)(*settings + 0x30) =\n           *values << (temp & 0xff) | *(uint *)(*settings + 0x30) & ~(0x1f << (temp & 0xff));\n    }\n    else {\n      temp = temp * 5 - 0x41;\n      *(uint *)(*settings + 0x2c) =\n           *values << (temp & 0xff) | *(uint *)(*settings + 0x2c) & ~(0x1f << (temp & 0xff));\n    }\n    temp = *values;\n    if (temp < 10) {\n      *(uint *)(*settings + 0x10) =\n           values[2] << (temp * 3 & 0xff) |\n           *(uint *)(*settings + 0x10) & ~(7 << (temp * 3 & 0xff));\n    }\n    else {\n      temp = temp * 3 - 0x1e;\n      *(uint *)(*settings + 0xc) =\n           values[2] << (temp & 0xff) | *(uint *)(*settings + 0xc) & ~(7 << (temp & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*settings == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (count = (DAT_20000018 / 1000000) * 10; count != 0; count = count + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        settings[10] = settings[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(settings + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_settings_080038e4",
                "param_1": "settings",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "temp",
                "local_c": "count"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_pointer_offset_08003a1c",
            "code": "\nundefined4 getPointerOffset_08003a1c(int initialAddress)\n\n{\n  return *(undefined4 *)(initialAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_pointer_offset_08003a1c",
                "param_1": "initialAddress"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "enable_data_read_08003a20",
            "code": "\nundefined4 enableDataRead_08003a20(int *dataPtr,undefined4 param)\n\n{\n  int dataDiff;\n  undefined4 uVar2;\n  int dataValue;\n  uint delay;\n  \n  dataValue = *dataPtr;\n  if ((*(uint *)(dataValue + 8) & 1) == 0) {\n    *(uint *)(dataValue + 8) = *(uint *)(dataValue + 8) | 1;\n    for (delay = DAT_20000018 / 1000000; delay != 0; delay = delay - 1) {\n    }\n    dataValue = get_global_data_08003760(dataPtr,param,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPtr + 8) & 1) != 0) {\n        return 0;\n      }\n      dataDiff = get_global_data_08003760();\n    } while ((uint)(dataDiff - dataValue) < 3);\n    dataPtr[10] = dataPtr[10] | 0x10;\n    dataPtr[0xb] = dataPtr[0xb] | 1;\n    *(undefined *)(dataPtr + 9) = 0;\n    uVar2 = 1;\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "enable_data_read_08003a20",
                "param_1": "dataPtr",
                "param_2": "param",
                "iVar1": "dataDiff",
                "iVar3": "dataValue",
                "local_14": "delay"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_data_access_08003aa0",
            "code": "\n\n\nint initializeDataAccess_08003aa0(int *dataAccessStruct)\n\n{\n  int result;\n  undefined4 *ptr;\n  int data;\n  \n  if (*(char *)(dataAccessStruct + 9) != '\\x01') {\n    *(undefined *)(dataAccessStruct + 9) = 1;\n    result = enable_data_read_08003a20();\n    if (result == 0) {\n      dataAccessStruct[10] = dataAccessStruct[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*dataAccessStruct;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        dataAccessStruct[10] = dataAccessStruct[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          dataAccessStruct[10] = dataAccessStruct[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        dataAccessStruct[10] = dataAccessStruct[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          dataAccessStruct[10] = dataAccessStruct[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((dataAccessStruct[10] & 0x1000U) == 0) {\n        dataAccessStruct[0xb] = 0;\n      }\n      else {\n        dataAccessStruct[0xb] = dataAccessStruct[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(dataAccessStruct + 9) = 0;\n      *ptr = 0xfffffffd;\n      data = *dataAccessStruct;\n      if (((*(uint *)(data + 8) & 0xe0000) == 0xe0000) &&\n         ((data != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(data + 8) = *(uint *)(data + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(data + 8) = *(uint *)(data + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(dataAccessStruct + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_data_access_08003aa0",
                "param_1": "dataAccessStruct",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "data"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_and_update_data_08003b8c",
            "code": "\nundefined4 checkAndUpdateData_08003b8c(int *data_ptr)\n\n{\n  int global_data_1;\n  int global_data_2;\n  \n  global_data_2 = *data_ptr;\n  if ((*(uint *)(global_data_2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(global_data_2 + 8) = *(uint *)(global_data_2 + 8) & 0xfffffffe;\n  global_data_2 = get_global_data_08003760();\n  do {\n    if ((*(uint *)(*data_ptr + 8) & 1) == 0) {\n      return 0;\n    }\n    global_data_1 = get_global_data_08003760();\n  } while ((uint)(global_data_1 - global_data_2) < 3);\n  data_ptr[10] = data_ptr[10] | 0x10;\n  data_ptr[0xb] = data_ptr[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_and_update_data_08003b8c",
                "param_1": "data_ptr",
                "iVar1": "global_data_1",
                "iVar2": "global_data_2"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_flags_and_bits_08003bd8",
            "code": "\nundefined4 updateFlagsAndBits_08003bd8(int *input)\n\n{\n  int result;\n  uint combinedVars1;\n  uint combinedVars2;\n  \n  if (input == (int *)0x0) {\n    return 1;\n  }\n  if (input[10] == 0) {\n    input[0xb] = 0;\n    *(undefined *)(input + 9) = 0;\n    updateFlagAndBits();\n  }\n  result = checkAndUpdateData(input);\n  if (((input[10] & 0x10U) == 0) && (result == 0)) {\n    input[10] = input[10] & 0xffffeefdU | 2;\n    combinedVars1 = input[1] | input[7] | input[3] << 1;\n    if (input[2] == 0x100) {\n      combinedVars2 = 0x100;\n    }\n    else {\n      combinedVars2 = 0;\n      if (input[2] == 1) {\n        combinedVars2 = 0x100;\n      }\n    }\n    if (input[5] == 1) {\n      if (input[3] == 0) {\n        combinedVars2 = combinedVars2 | (input[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        input[10] = input[10] | 0x20;\n        input[0xb] = input[0xb] | 1;\n      }\n    }\n    *(uint *)(*input + 4) = combinedVars2 | *(uint *)(*input + 4) & 0xffff16ff;\n    *(uint *)(*input + 8) = *(uint *)(*input + 8) & 0xffe1f7fd | combinedVars1;\n    if ((input[2] == 0x100) || (input[2] == 1)) {\n      combinedVars2 = (input[4] + -1) * 0x100000;\n    }\n    else {\n      combinedVars2 = 0;\n    }\n    *(uint *)(*input + 0x2c) = combinedVars2 | *(uint *)(*input + 0x2c) & 0xff0fffff;\n    if (combinedVars1 != (*(uint *)(*input + 8) & 0xff1f0efe)) {\n      input[10] = input[10] & 0xffffffedU | 0x10;\n      input[0xb] = input[0xb] | 1;\n      return 1;\n    }\n    input[0xb] = 0;\n    input[10] = input[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  input[10] = input[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_flags_and_bits_08003bd8",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "combinedVars1",
                "uVar3": "combinedVars2",
                "check_and_update_data_08003b8c": "checkAndUpdateData",
                "update_flag_and_bits_08006ca8": "updateFlagAndBits"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "sanitize_data_08003ce8",
            "code": "\nint sanitizeData_08003ce8(int *data_ptr)\n\n{\n  int result;\n  \n  if (data_ptr == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    data_ptr[10] = data_ptr[10] | 2;\n    result = checkAndUpdateData();\n    if (result == 0) {\n      *(undefined4 *)*data_ptr = 0xffffffe0;\n      *(uint *)(*data_ptr + 4) = *(uint *)(*data_ptr + 4) & 0xff3f0000;\n      *(uint *)(*data_ptr + 8) = *(uint *)(*data_ptr + 8) & 0xff0106f0;\n      *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xff000000;\n      *(uint *)(*data_ptr + 0x10) = *(uint *)(*data_ptr + 0x10) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x14) = *(uint *)(*data_ptr + 0x14) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x20) = *(uint *)(*data_ptr + 0x20) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x24) = *(uint *)(*data_ptr + 0x24) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x28) = *(uint *)(*data_ptr + 0x28) & 0xfffff000;\n      *(uint *)(*data_ptr + 0x2c) = *(uint *)(*data_ptr + 0x2c) & 0xff000000;\n      *(uint *)(*data_ptr + 0x2c) = *(uint *)(*data_ptr + 0x2c) & 0xff000000;\n      *(uint *)(*data_ptr + 0x30) = *(uint *)(*data_ptr + 0x30) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x34) = *(uint *)(*data_ptr + 0x34) & 0xc0000000;\n      *(uint *)(*data_ptr + 0x38) = *(uint *)(*data_ptr + 0x38) & 0xffc00000;\n      *(uint *)(*data_ptr + 0x38) = *(uint *)(*data_ptr + 0x38) & 0xffc00000;\n      updateData(data_ptr);\n      data_ptr[0xb] = 0;\n      data_ptr[10] = 0;\n    }\n    *(undefined *)(data_ptr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "sanitize_data_08003ce8",
                "param_1": "data_ptr",
                "iVar1": "result",
                "check_and_update_data_08003b8c": "checkAndUpdateData",
                "update_data_08006d24": "updateData"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_data_08003de4",
            "code": "\nint updateData_08003de4(int dataPointer)\n\n{\n  int result;\n  \n  if (*(char *)(dataPointer + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(dataPointer + 0x24) = 1;\n  result = checkAndUpdateData();\n  if (result == 0) {\n    *(uint *)(dataPointer + 0x28) = *(uint *)(dataPointer + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(dataPointer + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_data_08003de4",
                "param_1": "dataPointer",
                "iVar1": "result",
                "check_and_update_data_08003b8c": "checkAndUpdateData"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "process_data_08003e20",
            "code": "\nint processData_08003e20(int *data)\n\n{\n  uint constant;\n  int result;\n  uint value;\n  int startCount;\n  int currentCount;\n  int loopCount;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = check_and_update_data_08003b8c();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    constant = DAT_20000018;\n    value = calculate_value_08005bb8(2);\n    for (loopCount = constant / value << 1; loopCount != 0; loopCount = loopCount + -1) {\n    }\n    enable_data_read_08003a20(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    startCount = get_global_data_08003760();\n    while (currentCount = *data, (*(uint *)(currentCount + 8) & 8) != 0) {\n      currentCount = get_global_data_08003760();\n      if (10 < (uint)(currentCount - startCount)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentCount + 8) = *(uint *)(currentCount + 8) | 4;\n    startCount = get_global_data_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      currentCount = get_global_data_08003760();\n      if (10 < (uint)(currentCount - startCount)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data",
                "uVar1": "constant",
                "uVar3": "value",
                "iVar2": "result",
                "iVar4": "startCount",
                "iVar5": "currentCount",
                "local_14": "loopCount"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_value_08003f0c",
            "code": "\n\n\nvoid updateValue_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_value_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "process_data_08003f30",
            "code": "\n\n\nvoid processData_08003f30(uint inputFlag,uint mask1,uint mask2)\n\n{\n  uint shiftedValue;\n  uint shiftCount;\n  \n  shiftedValue = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftCount = 7 - shiftedValue;\n  if (3 < shiftCount) {\n    shiftCount = 4;\n  }\n  if (shiftedValue + 4 < 7) {\n    shiftedValue = 0;\n  }\n  else {\n    shiftedValue = shiftedValue - 3;\n  }\n  shiftedValue = (mask1 & (1 << (shiftCount & 0xff)) - 1U) << (shiftedValue & 0xff) |\n          (1 << (shiftedValue & 0xff)) - 1U & mask2;\n  if ((int)inputFlag < 0) {\n    *(char *)((inputFlag & 0xf) + 0xe000ed14) = (char)(shiftedValue << 4);\n  }\n  else {\n    *(char *)(inputFlag + 0xe000e400) = (char)(shiftedValue << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "process_data_08003f30",
                "param_1": "inputFlag",
                "param_2": "mask1",
                "param_3": "mask2",
                "uVar1": "shiftedValue",
                "uVar2": "shiftCount"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_value_08003f94",
            "code": "\nvoid setBitValue_08003f94(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_value_08003f94",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_at_index_08003fb0",
            "code": "\nvoid setBitAtIndex_08003fb0(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n    syncData(0xf);\n    syncInstructions(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_at_index_08003fb0",
                "param_1": "index",
                "DataSynchronizationBarrier": "syncData",
                "InstructionSynchronizationBarrier": "syncInstructions"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "validate_input_08003fd8",
            "code": "\n\n\nundefined4 validate_input_08003fd8(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "validate_input_08003fd8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_in_memory_08004004",
            "code": "\nvoid setBitInMemory_08004004(uint position)\n\n{\n  if (-1 < (int)position) {\n    *(int *)(((position >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (position & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_in_memory_08004004",
                "param_1": "position"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "set_flag_08004024",
            "code": "\n\n\nvoid setFlag_08004024(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_08004046",
            "code": "\nvoid initialize_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "set_dat_value_08004050",
            "code": "\n\n\nundefined4 set_dat_value_08004050(uint **params)\n\n{\n  uint *ptr_value;\n  \n  if (*(char *)((int)params + 0x21) != '\\x02') {\n    params[14] = (uint *)0x4;\n    return 1;\n  }\n  **params = **params & 0xfffffff1;\n  **params = **params & 0xfffffffe;\n  ptr_value = *params;\n  if (ptr_value == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (ptr_value == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (ptr_value == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (ptr_value == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (ptr_value == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (ptr_value == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)params + 0x21) = 1;\n  *(undefined *)(params + 8) = 0;\n  if (callback_function != (uint *)0x0) {\n    (*(code *)callback_function)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "set_dat_value_08004050",
                "param_1": "params",
                "param_1[0xe]": "params[14]",
                "param_1[0xd]": "callback_function",
                "puVar1": "ptr_value"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_bits_080040e8",
            "code": "\n\n\nvoid updateBits_080040e8(uint *bitArray1,uint *bitArray2)\n\n{\n  uint *resultPtr;\n  uint bitMask;\n  uint bitValue;\n  uint bitIndex;\n  uint switchValue;\n  uint bitUpdate;\n  int bitShift;\n  int arrIndex;\n  \n  bitUpdate = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    bitValue = *bitArray2 & bitMask;\n    if (bitMask == bitValue) {\n      switchValue = bitArray2[1];\n      if (switchValue == 0x12) {\n        bitUpdate = bitArray2[3] + 0xc;\n      }\n      else if (switchValue < 0x13) {\n        if (switchValue == 2) {\n          bitUpdate = bitArray2[3] + 8;\n        }\n        else if (switchValue < 3) {\n          if (switchValue == 0) goto LAB_0800423a;\n          if (switchValue == 1) {\n            bitUpdate = bitArray2[3];\n          }\n        }\n        else if (switchValue == 3) {\n          bitUpdate = 0;\n        }\n        else if (switchValue == 0x11) {\n          bitUpdate = bitArray2[3] + 4;\n        }\n      }\n      else if (switchValue == 0x10210000) {\nLAB_0800423a:\n        if (bitArray2[2] == 0) {\n          bitUpdate = 4;\n        }\n        else if (bitArray2[2] == 1) {\n          bitArray1[4] = bitMask;\n          bitUpdate = 8;\n        }\n        else {\n          bitArray1[5] = bitMask;\n          bitUpdate = 8;\n        }\n      }\n      else if (switchValue < 0x10210001) {\n        if ((switchValue == 0x10110000) || (switchValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((switchValue == 0x10310000) || ((switchValue == 0x10320000 || (switchValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = bitIndex;\n      resultPtr = bitArray1;\n      if (0xff < bitValue) {\n        bitMask = bitIndex - 8;\n        resultPtr = bitArray1 + 1;\n      }\n      *resultPtr = *resultPtr & ~(0xf << (bitMask << 2 & 0xff)) | bitUpdate << (bitMask << 2 & 0xff);\n      if ((bitArray2[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitShift = (bitIndex & 3) << 2;\n        if (bitArray1 == (uint *)0x40010800) {\n          arrIndex = 0;\n        }\n        else if (bitArray1 == (uint *)0x40010c00) {\n          arrIndex = 1;\n        }\n        else if (bitArray1 == (uint *)0x40011000) {\n          arrIndex = 2;\n        }\n        else if (bitArray1 == (uint *)0x40011400) {\n          arrIndex = 3;\n        }\n        else {\n          arrIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bitShift) | arrIndex << bitShift;\n        if ((bitArray2[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if ((bitArray2[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if ((bitArray2[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if ((bitArray2[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_bits_080040e8",
                "param_1": "bitArray1",
                "param_2": "bitArray2",
                "puVar1": "resultPtr",
                "uVar2": "bitMask",
                "uVar3": "bitValue",
                "uVar4": "bitIndex",
                "uVar5": "switchValue",
                "uVar6": "bitUpdate",
                "iVar7": "bitShift",
                "iVar8": "arrIndex"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int input,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input + 8)) == 0) {\n    result 0;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input",
                "param_2": "bit_mask",
                "return": "result"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_scaled_value_080042e2",
            "code": "\nvoid setScaledValue_080042e2(int destination,int value,int isScaled)\n\n{\n  if (isScaled == 0) {\n    *(int *)(destination + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(destination + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_scaled_value_080042e2",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "isScaled"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "process_data_if_flag_set_080042f0",
            "code": "\n\n\nvoid process_data_if_flag_set_080042f0(uint flag)\n\n{\n  if ((_DAT_40010414 & flag) != 0) {\n    _DAT_40010414 = flag;\n    check_and_process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "process_data_if_flag_set_080042f0",
                "param_1": "flag",
                "check_and_process_data_08009094": "check_and_process_data"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_flag_value_0800430c",
            "code": "\nundefined4 updateFlagValue_0800430c(int *flagData)\n\n{\n  if (*(char *)((int)flagData + 0x3e) == '@') {\n    if (flagValue == 0) {\n      *(uint *)(*flagData + 0x10) = flagMask & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagMask & 0xffU | 1;\n    }\n  }\n  else if (flagData[4] == 0x4000) {\n    if (*(char *)((int)flagData + 0x3d) == '!') {\n      *(uint *)(*flagData + 0x10) = flagMask & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagMask & 0xffU | 1;\n    }\n  }\n  else if (flagValue == 0) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagMask << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flagValue == 1) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagMask << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_flag_value_0800430c",
                "param_1": "flagData",
                "param_1[0x14]": "flagValue",
                "param_1[0x11]": "flagMask"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "update_byte_value_08004396",
            "code": "\nundefined4 update_byte_value_08004396(int *ptr_data)\n\n{\n  *(uint *)(*ptr_data + 0x10) = byte_value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "update_byte_value_08004396",
                "param_1": "ptr_data",
                "param_1[0x11]": "byte_value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_flags_and_values_080043a2",
            "code": "\nundefined4 updateFlagsAndValues_080043a2(uint **params)\n\n{\n  uint *ptr;\n  \n  ptr = param1_b;\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((param1_14 != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((param1_14 == (uint *)0x0) && (param1_4 == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      param1_14 = (uint *)((int)param1_14 + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (ptr == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          ptr = *params;\n          if ((ptr[1] & 0x800) == 0) {\n            *ptr = *ptr | 0x200;\n          }\n          else {\n            *ptr = *ptr & 0xfffffbff;\n          }\n        }\n        else if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) ||\n                (params[0xc] == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (param1_b == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (param1_b == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        ptr = *params;\n        if ((ptr[1] & 0x800) != 0) {\n          ptr[1] = ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        ptr = *params;\n        if ((ptr[1] & 0x800) != 0) {\n          ptr[1] = ptr[1] | 0x1000;\n        }\n      }\n      param1_14 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_flags_and_values_080043a2",
                "param_1": "params",
                "puVar1": "ptr",
                "param_1[0x14]": "param1_14",
                "param_1[4]": "param1_4",
                "param_1[0xb]": "param1_b"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_0800457c",
            "code": "\nundefined4 updateData_0800457c(int *data)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_0800457c",
                "param_1": "data",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_and_decrement_value_0800459c",
            "code": "\nundefined4 updateAndDecrementValue_0800459c(int *paramArray)\n\n{\n  undefined *tempPtr;\n  \n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    tempPtr = (undefined *)paramArray[9];\n    paramArray[9] = (int)(tempPtr + 1);\n    *tempPtr = (char)*(undefined4 *)(*paramArray + 0x10);\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_and_decrement_value_0800459c",
                "param_1": "paramArray",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "initialize_data_080045c0",
            "code": "\nundefined4 initializeData_080045c0(uint **dataPtr)\n\n{\n  bool isConditionMet;\n  uint shiftedData;\n  uint *valuePtr;\n  uint calculatedValue;\n  \n  if (dataPtr == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)dataPtr + 0x3d) == '\\0') {\n    *(undefined *)(dataPtr + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)dataPtr + 0x3d) = 0x24;\n  **dataPtr = **dataPtr & 0xfffffffe;\n  shiftedData = get_shifted_data_08005a28();\n  if (dataPtr[1] < (uint *)0x186a1) {\n    if (shiftedData < 2000000) {\n      isConditionMet = true;\n    }\n    else {\n      isConditionMet = false;\n    }\n  }\n  else {\n    isConditionMet = shiftedData < 4000000;\n  }\n  if (isConditionMet) {\n    return 1;\n  }\n  calculatedValue = shiftedData / 1000000;\n  (*dataPtr)[1] = calculatedValue;\n  if ((uint *)0x186a0 < dataPtr[1]) {\n    calculatedValue = (calculatedValue * 300) / 1000;\n  }\n  (*dataPtr)[8] = calculatedValue + 1;\n  valuePtr = dataPtr[1];\n  if (valuePtr < (uint *)0x186a1) {\n    shiftedData = (shiftedData - 1) / (uint)((int)valuePtr << 1) + 1 & 0xfff;\n    if (shiftedData < 4) {\n      shiftedData = 4;\n    }\n  }\n  else {\n    if (dataPtr[2] == (uint *)0x0) {\n      calculatedValue = (shiftedData - 1) / (uint)((int)valuePtr * 3);\n    }\n    else {\n      calculatedValue = (shiftedData - 1) / (uint)((int)valuePtr * 0x19);\n    }\n    if ((calculatedValue + 1 & 0xfff) == 0) {\n      shiftedData = 1;\n    }\n    else if (dataPtr[2] == (uint *)0x0) {\n      shiftedData = (shiftedData - 1) / (uint)((int)valuePtr * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shiftedData = (shiftedData - 1) / (uint)((int)valuePtr * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*dataPtr)[7] = shiftedData;\n  **dataPtr = (uint)dataPtr[7] | (uint)dataPtr[8];\n  (*dataPtr)[2] = (uint)dataPtr[4] | (uint)dataPtr[3];\n  (*dataPtr)[3] = (uint)dataPtr[5] | (uint)dataPtr[6];\n  **dataPtr = **dataPtr | 1;\n  dataPtr[0x10] = (uint *)0x0;\n  *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n  dataPtr[0xc] = (uint *)0x0;\n  *(undefined *)((int)dataPtr + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "initialize_data_080045c0",
                "param_1": "dataPtr",
                "bVar1": "isConditionMet",
                "uVar2": "shiftedData",
                "puVar3": "valuePtr",
                "uVar4": "calculatedValue"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "validate_and_initialize_08004728",
            "code": "\nundefined4 validateAndInitialize_08004728(uint **inputParams,uint *param2Ptr,uint *param3Ptr,undefined2 param4)\n\n{\n  undefined4 returnValue;\n  uint *dataPtr;\n  int loopCounter;\n  \n  if (*(char *)((int)inputParams + 0x3d) == ' ') {\n    loopCounter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (loopCounter == 0) {\n        inputParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputParams + 0x3d) = 0x20;\n        *(undefined *)(inputParams + 0xf) = 0;\n        return 3;\n      }\n      dataPtr = *inputParams;\n      loopCounter = loopCounter + -1;\n    } while ((dataPtr[6] & 2) != 0);\n    if (*(char *)(inputParams + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputParams + 0xf) = 1;\n      if ((*dataPtr & 1) == 0) {\n        *dataPtr = *dataPtr | 1;\n      }\n      **inputParams = **inputParams & 0xfffff7ff;\n      *(undefined *)((int)inputParams + 0x3d) = 0x21;\n      *(undefined *)((int)inputParams + 0x3e) = 0x10;\n      returnValue = 0;\n      inputParams[0x10] = (uint *)0x0;\n      inputParams[9] = param3Ptr;\n      *(undefined2 *)((int)inputParams + 0x2a) = param4;\n      inputParams[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputParams + 10) = *(undefined2 *)((int)inputParams + 0x2a);\n      inputParams[0x11] = param2Ptr;\n      **inputParams = **inputParams | 0x100;\n      *(undefined *)(inputParams + 0xf) = 0;\n      (*inputParams)[1] = (*inputParams)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004728": "validate_and_initialize_08004728",
                "param_1": "inputParams",
                "param_2": "param2Ptr",
                "param_3": "param3Ptr",
                "param_4": "param4",
                "uVar1": "returnValue",
                "puVar2": "dataPtr",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_params_080047f4",
            "code": "\nundefined4 processParams_080047f4(uint **paramList,uint *param2,uint *param3,undefined2 param4)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)paramList + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        paramList[0xc] = (uint *)0x0;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        *(undefined *)(paramList + 0xf) = 0;\n        return 3;\n      }\n      ptr = *paramList;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(paramList + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramList + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **paramList = **paramList & 0xfffff7ff;\n      *(undefined *)((int)paramList + 0x3d) = 0x22;\n      *(undefined *)((int)paramList + 0x3e) = 0x10;\n      result = 0;\n      paramList[0x10] = (uint *)0x0;\n      paramList[9] = param3;\n      *(undefined2 *)((int)paramList + 0x2a) = param4;\n      paramList[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(paramList + 10) = *(undefined2 *)((int)paramList + 0x2a);\n      paramList[0x11] = param2;\n      **paramList = **paramList | 0x400;\n      **paramList = **paramList | 0x100;\n      *(undefined *)(paramList + 0xf) = 0;\n      (*paramList)[1] = (*paramList)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_params_080047f4",
                "param_1": "paramList",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "process_parameters_080048c8",
            "code": "\nundefined4 processParameters_080048c8(uint **paramArray,uint *inputParam,int paramCount,uint *outputParam)\n\n{\n  undefined4 result;\n  uint *ptrVar;\n  \n  if (*(char *)((int)paramArray + 0x3d) == '(') {\n    if (inputParam == (uint *)0x0) {\n      result = 1;\n    }\n    else if (paramCount == 0) {\n      result = 1;\n    }\n    else if (*(char *)(paramArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramArray + 0xf) = 1;\n      ptrVar = *paramArray;\n      if ((*ptrVar & 1) == 0) {\n        *ptrVar = *ptrVar | 1;\n      }\n      **paramArray = **paramArray & 0xfffff7ff;\n      *(undefined *)((int)paramArray + 0x3d) = 0x29;\n      *(undefined *)((int)paramArray + 0x3e) = 0x20;\n      result = 0;\n      paramArray[0x10] = (uint *)0x0;\n      paramArray[9] = inputParam;\n      *(short *)((int)paramArray + 0x2a) = (short)paramCount;\n      paramArray[0xb] = outputParam;\n      *(undefined2 *)(paramArray + 10) = *(undefined2 *)((int)paramArray + 0x2a);\n      *(undefined *)(paramArray + 0xf) = 0;\n      (*paramArray)[1] = (*paramArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "process_parameters_080048c8",
                "param_1": "paramArray",
                "param_2": "inputParam",
                "param_3": "paramCount",
                "param_4": "outputParam",
                "uVar1": "result",
                "puVar2": "ptrVar"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_function_08004954",
            "code": "\nundefined4 validateFunction_08004954(uint **paramContainer,uint *dataPtr,int size,uint *resultPtr)\n\n{\n  undefined4 isValid;\n  uint *paramValuePtr;\n  \n  if (*(char *)((int)paramContainer + 0x3d) == '(') {\n    if (dataPtr == (uint *)0x0) {\n      isValid = 1;\n    }\n    else if (size == 0) {\n      isValid = 1;\n    }\n    else if (*(char *)(paramContainer + 0xf) == '\\x01') {\n      isValid = 2;\n    }\n    else {\n      *(undefined *)(paramContainer + 0xf) = 1;\n      paramValuePtr = *paramContainer;\n      if ((*paramValuePtr & 1) == 0) {\n        *paramValuePtr = *paramValuePtr | 1;\n      }\n      **paramContainer = **paramContainer & 0xfffff7ff;\n      *(undefined *)((int)paramContainer + 0x3d) = 0x2a;\n      *(undefined *)((int)paramContainer + 0x3e) = 0x20;\n      isValid = 0;\n      paramContainer[0x10] = (uint *)0x0;\n      paramContainer[9] = dataPtr;\n      *(short *)((int)paramContainer + 0x2a) = (short)size;\n      paramContainer[0xb] = resultPtr;\n      *(undefined2 *)(paramContainer + 10) = *(undefined2 *)((int)paramContainer + 0x2a);\n      *(undefined *)(paramContainer + 0xf) = 0;\n      (*paramContainer)[1] = (*paramContainer)[1] | 0x700;\n    }\n  }\n  else {\n    isValid = 2;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_function_08004954",
                "param_1": "paramContainer",
                "param_2": "dataPtr",
                "param_3": "size",
                "param_4": "resultPtr",
                "uVar1": "isValid",
                "puVar2": "paramValuePtr"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_pointer_080049e0",
            "code": "\nundefined4 initializePointer_080049e0(uint **pointer)\n\n{\n  uint *dataPtr;\n  \n  if (*(char *)((int)pointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)pointer + 0x3d) = 0x28;\n  dataPtr = *pointer;\n  if ((*dataPtr & 1) == 0) {\n    *dataPtr = *dataPtr | 1;\n  }\n  **pointer = **pointer | 0x400;\n  (*pointer)[1] = (*pointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_pointer_080049e0",
                "param_1": "pointer",
                "puVar1": "dataPtr"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 process_data_08004a24(int *data_array)\n\n{\n  char character;\n  byte *byte_pointer;\n  \n  character = *(char *)((int)data_array + 0x3d);\n  if (*(short *)((int)data_array + 0x2a) != 0) {\n    byte_pointer = (byte *)data_array[9];\n    data_array[9] = (int)(byte_pointer + 1);\n    *(uint *)(*data_array + 0x10) = (uint)*byte_pointer;\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n    if ((*(short *)((int)data_array + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data_array + 4) = *(uint *)(*data_array + 4) & 0xfffffbff;\n      data_array[0xc] = 0x21;\n      *(undefined *)((int)data_array + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data_array",
                "cVar1": "character",
                "pbVar2": "byte_pointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_data_08004a76",
            "code": "\nundefined4 updateData_08004a76(int *data)\n\n{\n  char character;\n  undefined *bytePtrUpdate;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtrUpdate = (undefined *)data[9];\n    data[9] = (int)(bytePtrUpdate + 1);\n    *bytePtrUpdate = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      indexValue = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_data_08004a76",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "bytePtrUpdate",
                "param_1[0xc]": "indexValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_and_return_value_08004ac2",
            "code": "\nundefined4 process_and_return_value_08004ac2(int *input_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 value;\n  uint flags;\n  \n  flags = *(uint *)(*input_ptr + 0x18);\n  if ((flags & 0x80) == 0) {\n    value = *(undefined2 *)(input_ptr + 3);\n  }\n  else {\n    value = *(undefined2 *)(input_ptr + 6);\n  }\n  process_parameters_08007fa0(input_ptr,(*(uint *)(*input_ptr + 0x18) & 4) == 0,value,flags,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_and_return_value_08004ac2",
                "param_1": "input_ptr",
                "uVar1": "value",
                "uVar2": "flags"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "process_flags_08004aec",
            "code": "\nundefined4 process_flags_08004aec(uint **params)\n\n{\n  if (((params[0xb] == (uint *)0x4) || (params[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)params + 0x3d) == '(')) {\n    params[0xb] = (uint *)0xffff0000;\n    (*params)[1] = (*params)[1] & 0xfffff8ff;\n    (*params)[5] = 0xfffffbff;\n    **params = **params & 0xfffffbff;\n    params[0xc] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    initialize_and_execute_08007ff0();\n  }\n  else if (*(char *)((int)params + 0x3d) == '!') {\n    params[0xb] = (uint *)0xffff0000;\n    params[0xc] = (uint *)0x21;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    (*params)[1] = (*params)[1] & 0xfffff8ff;\n    (*params)[5] = 0xfffffbff;\n    **params = **params & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*params)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "process_flags_08004aec",
                "param_1": "params"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_function_08004b82",
            "code": "\nundefined4 processFunction_08004b82(uint **parameters)\n\n{\n  char character;\n  uint *pointerVar;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  pointerVar = parameters[0xb];\n  if ((*(short *)(parameters + 10) == 0) && (character == '!')) {\n    if ((pointerVar == (uint *)0x4) || ((pointerVar == (uint *)0x8 || (pointerVar == (uint *)0xffff0000)))) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      **parameters = **parameters | 0x200;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      if (*(char *)((int)parameters + 0x3e) == '@') {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      parameters[0xc] = (uint *)0x11;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)parameters + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)parameters + 0x3e) == '@') {\n      if (parameters[0x14] == (uint *)0x0) {\n        if (parameters[0x13] == (uint *)0x1) {\n          (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 2);\n        }\n        else {\n          (*parameters)[4] = (uint)((int)parameters[0x12] << 0x10) >> 0x18;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n        }\n      }\n      else if (parameters[0x14] == (uint *)0x1) {\n        (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n        parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n      }\n      else if (parameters[0x14] == (uint *)0x2) {\n        if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n          **parameters = **parameters | 0x100;\n        }\n        else if (*(char *)((int)parameters + 0x3d) == '!') {\n          pointerVar = parameters[9];\n          parameters[9] = (uint *)((int)pointerVar + 1);\n          (*parameters)[4] = (uint)*(byte *)pointerVar;\n          *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointerVar = parameters[9];\n      parameters[9] = (uint *)((int)pointerVar + 1);\n      (*parameters)[4] = (uint)*(byte *)pointerVar;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_function_08004b82",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_parameter_08004ccc",
            "code": "\nundefined4 processParameter_08004ccc(uint **parameters)\n\n{\n  uint *tempPtr;\n  \n  tempPtr = tempPtr2;\n  if (*(char *)((int)parameters + 0x3d) == '!') {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) || (tempPtr == (uint *)0xffff0000)) {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        **parameters = **parameters | 0x200;\n        outputPtr = (uint *)0x0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        if (*(char *)((int)parameters + 0x3e) == 'atSymbol') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        outputPtr = (uint *)0x11;\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      tempPtr = parameters[9];\n      parameters[9] = (uint *)((int)tempPtr + 1);\n      (*parameters)[4] = (uint)*(byte *)tempPtr;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_parameter_08004ccc",
                "param_1": "parameters",
                "puVar1": "tempPtr",
                "param_1[0xb]": "tempPtr2",
                "param_1[0xc]": "outputPtr",
                "@": "atSymbol"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "process_data_08004d6c",
            "code": "\nundefined4 processData_08004d6c(uint **inputArray)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)inputArray + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)inputArray + 0x2a) < 4) {\n      if (*(ushort *)((int)inputArray + 0x2a) - 2 < 2) {\n        if (paramB == (uint *)0x2) {\n          **inputArray = **inputArray | 0x400;\n        }\n        else {\n          **inputArray = **inputArray & 0xfffffbff;\n          **inputArray = **inputArray | 0x800;\n        }\n        (*inputArray)[1] = (*inputArray)[1] & 0xfffffbff;\n      }\n      else {\n        if (paramB == (uint *)0x2) {\n          **inputArray = **inputArray | 0x400;\n        }\n        else {\n          **inputArray = **inputArray & 0xfffffbff;\n        }\n        (*inputArray)[1] = (*inputArray)[1] & 0xfffff8ff;\n        tempPtr = ptr;\n        ptr = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*inputArray)[4];\n        *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n        *(undefined *)((int)inputArray + 0x3d) = 0x20;\n        paramC = (uint *)0x0;\n        if (*(char *)((int)inputArray + 0x3e) == '@') {\n          *(undefined *)((int)inputArray + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)inputArray + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempPtr = ptr;\n      ptr = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*inputArray)[4];\n      *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "process_data_08004d6c",
                "param_1": "inputArray",
                "puVar1": "tempPtr",
                "param_1[0xb]": "paramB",
                "param_1[9]": "ptr",
                "param_1[0xc]": "paramC"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_data_08004e3c",
            "code": "\nundefined4 process_data_08004e3c(uint **data_array)\n\n{\n  uint *current_value;\n  \n  current_value = data_array[0xb];\n  if (*(short *)((int)data_array + 0x2a) == 3) {\n    if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n      **data_array = **data_array & 0xfffffbff;\n    }\n    current_value = data_array[9];\n    data_array[9] = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*data_array)[4];\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data_array + 0x2a) == 2) {\n    if (((current_value == (uint *)0x4) || (current_value == (uint *)0x8)) || (current_value == (uint *)0xffff0000)) {\n      (*data_array)[1] = (*data_array)[1] & 0xfffffcff;\n      **data_array = **data_array | 0x200;\n    }\n    else {\n      if (current_value == (uint *)0x2) {\n        **data_array = **data_array | 0x400;\n      }\n      else {\n        **data_array = **data_array & 0xfffffbff;\n      }\n      (*data_array)[1] = (*data_array)[1] & 0xfffffcff;\n    }\n    current_value = data_array[9];\n    data_array[9] = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*data_array)[4];\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n    current_value = data_array[9];\n    data_array[9] = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*data_array)[4];\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n    *(undefined *)((int)data_array + 0x3d) = 0x20;\n    data_array[0xc] = (uint *)0x0;\n    if (*(char *)((int)data_array + 0x3e) == '@') {\n      *(undefined *)((int)data_array + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data_array + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    current_value = data_array[9];\n    data_array[9] = (uint *)((int)current_value + 1);\n    *(char *)current_value = (char)(*data_array)[4];\n    *(short *)((int)data_array + 0x2a) = *(short *)((int)data_array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data_array",
                "puVar1": "current_value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_08004f3c",
            "code": "\nvoid processData_08004f3c(uint **data)\n\n{\n  int result;\n  uint *ptr;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr = data[9];\n        data[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08004f3a(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr = data[9];\n        data[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)ptr2[4];\n      }\n      check_and_initialize_pointer_08008020(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = set_dat_value_08004050(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = set_dat_value_08004050(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    initialize_and_execute_08007ff0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_data_08005084",
            "code": "\nundefined4 processData_08005084(uint **data)\n\n{\n  char charValue;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      initialize_and_execute_08007ff0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    process_data_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_data_operations_08005188",
            "code": "\nvoid process_data_operations_08005188(int *data_ptr)\n\n{\n  int data;\n  uint value1;\n  uint value2;\n  uint value3;\n  \n  data = *data_ptr;\n  value3 = *(uint *)(data + 0x18);\n  value1 = *(uint *)(data + 0x14);\n  value2 = *(uint *)(data + 4);\n  if ((*(char *)((int)data_ptr + 0x3e) == '\\x10') || (*(char *)((int)data_ptr + 0x3e) == '@')) {\n    if (((value1 & 0x10001) == 0) || ((value2 & 0x200) == 0)) {\n      if (((value1 & 0x10008) == 0) || ((value2 & 0x200) == 0)) {\n        if (((value1 & 0x10002) != 0) && ((value2 & 0x200) != 0)) {\n          update_flags_and_values_080043a2(data_ptr);\n        }\n      }\n      else {\n        update_byte_value_08004396(data_ptr);\n      }\n    }\n    else {\n      update_flag_value_0800430c(data_ptr);\n    }\n    if ((value3 & 0x100004) == 0) {\n      if ((((value1 & 0x10040) != 0) && ((value2 & 0x400) != 0)) && ((value1 & 0x10004) == 0)) {\n        process_data_08004d6c(data_ptr);\n        return;\n      }\n      if (((value1 & 0x10004) != 0) && ((value2 & 0x200) != 0)) {\n        process_data_08004e3c(data_ptr);\n        return;\n      }\n    }\n    else {\n      if ((((value1 & 0x10080) != 0) && ((value2 & 0x400) != 0)) && ((value1 & 0x10004) == 0)) {\n        process_function_08004b82(data_ptr);\n        return;\n      }\n      if (((value1 & 0x10004) != 0) && ((value2 & 0x200) != 0)) {\n        process_parameter_08004ccc(data_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if (((value1 & 0x10002) != 0) && ((value2 & 0x200) != 0)) {\n      process_and_return_value_08004ac2();\n      return;\n    }\n    if (((value1 & 0x10010) != 0) && ((value2 & 0x200) != 0)) {\n      process_data_08005084(data_ptr);\n      return;\n    }\n    if ((value3 & 0x100004) == 0) {\n      if ((((value1 & 0x10040) != 0) && ((value2 & 0x400) != 0)) && ((value1 & 0x10004) == 0)) {\n        update_data_08004a76(data_ptr);\n        return;\n      }\n      if (((value1 & 0x10004) != 0) && ((value2 & 0x200) != 0)) {\n        update_and_decrement_value_0800459c(data_ptr);\n      }\n    }\n    else {\n      if ((((value1 & 0x10080) != 0) && ((value2 & 0x400) != 0)) && ((value1 & 0x10004) == 0)) {\n        process_data_08004a24(data_ptr);\n        return;\n      }\n      if (((value1 & 0x10004) != 0) && ((value2 & 0x200) != 0)) {\n        update_data_0800457c(data_ptr);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_data_operations_08005188",
                "param_1": "data_ptr",
                "iVar1": "data",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "process_flags_080052f0",
            "code": "\nvoid process_flags_080052f0(uint **param_list)\n\n{\n  char flag1;\n  uint *ptr1;\n  uint flag2;\n  uint flag3;\n  \n  ptr1 = *param_list;\n  flag2 = ptr1[5];\n  flag3 = ptr1[1];\n  if (((flag2 & 0x10100) != 0) && ((flag3 & 0x100) != 0)) {\n    param_list[0x10] = (uint *)((uint)param_list[0x10] | 1);\n    ptr1[5] = 0xfffffeff;\n    **param_list = **param_list | 0x8000;\n  }\n  if (((flag2 & 0x10200) != 0) && ((flag3 & 0x100) != 0)) {\n    param_list[0x10] = (uint *)((uint)param_list[0x10] | 2);\n    (*param_list)[5] = 0xfffffdff;\n  }\n  if (((flag2 & 0x10400) != 0) && ((flag3 & 0x100) != 0)) {\n    flag1 = *(char *)((int)param_list + 0x3d);\n    if (((*(char *)((int)param_list + 0x3e) == ' ') && (*(short *)((int)param_list + 0x2a) == 0)) &&\n       (((flag1 == '!' || (flag1 == ')')) || ((flag1 == '(' && (param_list[0xc] == (uint *)0x21)))))) {\n      process_flags_080052f0_08004aec(param_list);\n    }\n    else {\n      param_list[0x10] = (uint *)((uint)param_list[0x10] | 4);\n      if (*(char *)((int)param_list + 0x3e) == '\\x10') {\n        **param_list = **param_list | 0x200;\n      }\n      (*param_list)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag2 & 0x10800) != 0) && ((flag3 & 0x100) != 0)) {\n    param_list[0x10] = (uint *)((uint)param_list[0x10] | 8);\n    (*param_list)[5] = 0xfffff7ff;\n  }\n  if (param_list[0x10] != (uint *)0x0) {\n    process_data_08004f3c(param_list);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "process_flags_080052f0",
                "param_1": "param_list",
                "cVar1": "flag1",
                "puVar2": "ptr1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_memory_value_0800542a",
            "code": "\nundefined getMemoryValue_0800542a(int address)\n\n{\n  return *(undefined *)(address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_memory_value_0800542a",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_value_at_offset_08005430",
            "code": "\nundefined4 get_value_at_offset_08005430(int address)\n\n{\n  return *(undefined4 *)(address + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int delayTime)\n\n{\n  bool isNotZero;\n  int remainingIterations;\n  \n  remainingIterations = delayTime * (DAT_20000018 / 8000);\n  do {\n    isNotZero = remainingIterations != 0;\n    remainingIterations = remainingIterations + -1;\n  } while (isNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "delayTime",
                "local_4": "remainingIterations",
                "bVar1": "isNotZero"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "process_flags_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 processFlags_08005460(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint temp;\n  bool isFlagSet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp = flags[1];\n      if (temp == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (temp == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (temp == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        startTime = get_global_data_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_global_data_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_global_data_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_global_data_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = get_global_data_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = get_global_data_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = get_global_data_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = get_global_data_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_global_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      delay_function_08005434(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_global_data_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_data_08003760();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    temp = flags[3];\n    if (temp == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (temp == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (temp == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      startTime = get_global_data_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_global_data_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = get_global_data_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        startTime = get_global_data_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_global_data_08003760();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = get_global_data_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = get_global_data_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_global_data_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "process_flags_08005460",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "temp",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_execution_time_08005840",
            "code": "\n\n\nuint calculateExecutionTime_08005840(void)\n\n{\n  uint uVar1;\n  undefined2 value5;\n  undefined4 value4;\n  undefined4 value3;\n  undefined4 value2;\n  undefined4 value1;\n  \n  value1 = 0x10100f0e;\n  value2 = 0xd0c0b0a;\n  value3 = 0x9080706;\n  value4 = 0x5040302;\n  value5 = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&value4 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&value5 - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_execution_time_08005840",
                "uStack_c": "value1",
                "uStack_10": "value2",
                "uStack_14": "value3",
                "uStack_18": "value4",
                "local_1c": "value5"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "update_data_and_calculate_execution_time_080058ac",
            "code": "\n\n\nundefined4 updateDataAndCalculateExecutionTime_080058ac(uint *data,uint length)\n\n{\n  int iVar1;\n  int iVar2;\n  uint type;\n  \n  if ((_DAT_40022000 & 7) < length) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | length;\n    if (length != (length & 7)) {\n      return 1;\n    }\n  }\n  if ((*data & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data[2];\n  }\n  if ((*data & 1) != 0) {\n    type = data[1];\n    if (type == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((type != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = type | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getCurrentTime();\n    if (data[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getCurrentTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (data[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getCurrentTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getCurrentTime();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (length < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | length;\n    if (length != (length & 7)) {\n      return 1;\n    }\n  }\n  if ((*data & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data[3];\n  }\n  if ((*data & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data[4] << 3;\n  }\n  type = calculateExecutionTime();\n  DAT_20000018 = type >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_process_data_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "update_data_and_calculate_execution_time_080058ac",
                "param_1": "data",
                "param_2": "length",
                "uVar3": "type",
                "get_global_data_08003760": "getCurrentTime",
                "calculate_execution_time_08005840": "calculateExecutionTime"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "execute_data_processing_080058d2",
            "code": "\n\n\nundefined4 executeDataProcessing_080058d2(uint *flags,uint limit)\n\n{\n  int initialTime;\n  int currentTime;\n  uint executionTime;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    executionTime = flags[1];\n    if (executionTime == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((executionTime != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = executionTime | _DAT_40021004 & 0xfffffffc;\n    initialTime = get_global_data_08003760();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = get_global_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (limit < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | limit;\n    if (limit != (limit & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  executionTime = calculateExecutionTime();\n  DAT_20000018 = executionTime >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validateAndProcessData(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "execute_data_processing_080058d2",
                "param_1": "flags",
                "param_2": "limit",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "executionTime",
                "calculate_execution_time_08005840": "calculateExecutionTime",
                "validate_and_process_data_080036d8": "validateAndProcessData"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_08005a1c",
            "code": "\nundefined4 get_data_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_data_08005a28",
            "code": "\n\n\nuint get_shifted_data_08005a28(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_data_08005a28",
                "uVar1": "data",
                "get_data_08005a1c": "get_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "extracted_data_right_shift_08005a48",
            "code": "\n\n\nuint extracted_data_right_shift_08005a48(void)\n\n{\n  uint extracted_data;\n  \n  extracted_data = get_extracted_data();\n  return extracted_data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "extracted_data_right_shift_08005a48",
                "uVar1": "extracted_data",
                "get_data_08005a1c": "get_extracted_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_data_08005a68",
            "code": "\n\n\nvoid initializeData_08005a68(undefined4 *outputArray,uint *statusFlags)\n\n{\n  *outputArray = 0xf;\n  outputArray[1] = _DAT_40021004 & 3;\n  outputArray[2] = _DAT_40021004 & 0xf0;\n  outputArray[3] = _DAT_40021004 & 0x700;\n  outputArray[4] = _DAT_40021004 >> 3 & 0x700;\n  *statusFlags = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_data_08005a68",
                "param_1": "outputArray",
                "param_2": "statusFlags"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_config_08005aa4",
            "code": "\n\n\nundefined4 updateConfig_08005aa4(uint *config)\n\n{\n  uint temp1;\n  uint temp2;\n  int start;\n  int current;\n  bool isFlagSet;\n  \n  if ((*config & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start = get_global_data_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current = get_global_data_08003760();\n        if (100 < (uint)(current - start)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (config[1] & 0x300))) {\n      temp2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp2;\n      if (temp1 != 0) {\n        start = get_global_data_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          current = get_global_data_08003760();\n          if (5000 < (uint)(current - start)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | config[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | config[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_config_08005aa4",
                "param_1": "config",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "start",
                "iVar4": "current",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_value_08005bb8",
            "code": "\n\n\nuint calculateValue_08005bb8(int inputValue)\n\n{\n  uint result;\n  undefined2 temp1;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value4 = 0x10100f0e;\n  value3 = 0xd0c0b0a;\n  value2 = 0x9080706;\n  value1 = 0x5040302;\n  temp1 = 0x201;\n  if (inputValue == 2) {\n    result = extracted_data_right_shift_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputValue == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&temp1 - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&value1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (inputValue == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "inputValue",
                "uVar1": "result",
                "local_24": "temp1",
                "uStack_20": "value1",
                "uStack_1c": "value2",
                "uStack_18": "value3",
                "uStack_14": "value4"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "execute_with_callback_08005cb4",
            "code": "\n\n\nvoid execute_with_callback_08005cb4(uint **callback_arguments)\n\n{\n  if (((**callback_arguments & 2) != 0) && (((*callback_arguments)[1] & 2) != 0)) {\n    execute_callback();\n    (*callback_arguments)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)callback_arguments + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "execute_with_callback_08005cb4",
                "param_1": "callback_arguments",
                "execute_callback_function_080073c0": "execute_callback"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_params_08005cec",
            "code": "\nvoid updateParams_08005cec(int paramPtr,uint *paramArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramPtr + 0x20) = *(uint *)(paramPtr + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(paramPtr + 4);\n  updatedValue3 = *paramArray;\n  updatedValue1 = *(uint *)(paramPtr + 0x20) & 0xfffffffd | paramArray[2];\n  if (paramPtr == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | paramArray[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | paramArray[5] | paramArray[6];\n  }\n  *(uint *)(paramPtr + 4) = updatedValue2;\n  *(uint *)(paramPtr + 0x18) = *(uint *)(paramPtr + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramPtr + 0x34) = paramArray[1];\n  *(uint *)(paramPtr + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_params_08005cec",
                "param_1": "paramPtr",
                "param_2": "paramArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_parameters_08005d48",
            "code": "\nvoid updateParameters_08005d48(int address,uint *paramsArray)\n\n{\n  uint modifiedVal1;\n  uint modifiedVal2;\n  uint modifiedVal3;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  modifiedVal2 = *(uint *)(address + 4);\n  modifiedVal3 = *paramsArray;\n  modifiedVal1 = *(uint *)(address + 0x20) & 0xfffffdff | paramsArray[2] << 8;\n  if (address == 0x40012c00) {\n    modifiedVal1 = (modifiedVal1 & 0xfffff7ff | paramsArray[3] << 8) & 0xfffffbff;\n    modifiedVal2 = modifiedVal2 & 0xffffcfff | paramsArray[5] << 4 | paramsArray[6] << 4;\n  }\n  *(uint *)(address + 4) = modifiedVal2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | modifiedVal3;\n  *(uint *)(address + 0x3c) = paramsArray[1];\n  *(uint *)(address + 0x20) = modifiedVal1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_parameters_08005d48",
                "param_1": "address",
                "param_2": "paramsArray",
                "uVar1": "modifiedVal1",
                "uVar2": "modifiedVal2",
                "uVar3": "modifiedVal3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_data_08005dac",
            "code": "\nvoid updateData_08005dac(int dataAddress,int *data)\n\n{\n  uint originalData;\n  int param2Var1;\n  int param2Var2;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  originalData = *(uint *)(dataAddress + 4);\n  param2Var1 = *data;\n  param2Var2 = data[2];\n  if (dataAddress == 0x40012c00) {\n    originalData = originalData & 0xffffbfff | data[5] << 6;\n  }\n  *(uint *)(dataAddress + 4) = originalData;\n  *(uint *)(dataAddress + 0x1c) = *(uint *)(dataAddress + 0x1c) & 0xffff8cff | param2Var1 << 8;\n  *(int *)(dataAddress + 0x40) = data[1];\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffdfff | param2Var2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "dataAddress",
                "param_2": "data",
                "uVar1": "originalData",
                "iVar2": "param2Var1",
                "iVar3": "param2Var2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "update_and_reset_memory_08005df4",
            "code": "\nvoid updateAndResetMemory_08005df4(uint **paramArray)\n\n{\n  uint *firstElement;\n  \n  *(undefined *)((int)paramArray + 0x3d) = 2;\n  firstElement = *paramArray;\n  if ((firstElement[8] & 0x1111) == 0) {\n    if ((firstElement[8] & 0x444) == 0) {\n      *firstElement = *firstElement & 0xfffffffe;\n    }\n  }\n  updateMemoryValues(paramArray);\n  *(undefined *)((int)paramArray + 0x3d) = 0;\n  *(undefined *)(paramArray + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "update_and_reset_memory_08005df4",
                "param_1": "paramArray",
                "puVar1": "firstElement",
                "update_memory_values_08007710": "updateMemoryValues"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "update_memory_values_08005e2e",
            "code": "\nvoid updateMemoryValues_08005e2e(uint **param)\n\n{\n  uint *pointer;\n  \n  *(undefined *)((int)param + 0x3d) = 2;\n  pointer = *param;\n  if ((pointer[8] & 0x1111) == 0) {\n    if ((pointer[8] & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  update_memory_values_08007110(param);\n  *(undefined *)((int)param + 0x3d) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "update_memory_values_08005e2e",
                "param_1": "param",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_data_08005e6e",
            "code": "\nvoid process_data_08005e6e(int *data)\n\n{\n  int value;\n  \n  value = *data;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      execute_condition_met();\n      FUNC_08005e6a(data);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      execute_condition_met(data);\n      FUNC_08005e6a(data);\n    }\n    else {\n      FUNC_08005e68(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      execute_condition_met(data);\n      FUNC_08005e6a(data);\n    }\n    else {\n      FUNC_08005e68(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      execute_condition_met(data);\n      FUNC_08005e6a(data);\n    }\n    else {\n      FUNC_08005e68(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    execute_optional_func(data);\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_080064ae(data);\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(data);\n  }\n  value = *data;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_080064ac(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_data_08005e6e",
                "param_1": "data",
                "iVar1": "value",
                "execute_function_if_condition_met_0800771c": "execute_condition_met",
                "execute_optional_function_08007736": "execute_optional_func"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "set_register_values_08005fe8",
            "code": "\nvoid setRegisterValues_08005fe8(uint *register_1,uint *register_2)\n\n{\n  uint value_1;\n  \n  value_1 = *register_1;\n  if ((((register_1 == (uint *)0x40012c00) || (register_1 == (uint *)0x40000000)) ||\n      (register_1 == (uint *)0x40000400)) || (register_1 == (uint *)0x40000800)) {\n    value_1 = value_1 & 0xffffff8f | register_2[1];\n  }\n  if (((register_1 == (uint *)0x40012c00) || (register_1 == (uint *)0x40000000)) ||\n     ((register_1 == (uint *)0x40000400 || (register_1 == (uint *)0x40000800)))) {\n    value_1 = value_1 & 0xfffffcff | register_2[3];\n  }\n  *register_1 = value_1 & 0xffffff7f | register_2[5];\n  register_1[0xb] = register_2[2];\n  register_1[10] = *register_2;\n  if (register_1 == (uint *)0x40012c00) {\n    value_at_40012c30 = register_2[4];\n  }\n  register_1[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "set_register_values_08005fe8",
                "param_1": "register_1",
                "param_2": "register_2",
                "uVar1": "value_1",
                "uRam40012c30": "value_at_40012c30"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_function_08006060",
            "code": "\nundefined4 initialize_function_08006060(undefined4 *function_data)\n\n{\n  if (function_data != (undefined4 *)0x0) {\n    if (*(char *)((int)function_data + 0x3d) == '\\0') {\n      *(undefined *)(function_data + 0xf) = 0;\n      initialize_flags();\n    }\n    *(undefined *)((int)function_data + 0x3d) = 2;\n    set_register_values(*function_data,function_data + 1);\n    *(undefined *)((int)function_data + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_function_08006060",
                "param_1": "function_data",
                "initialize_flags_08007708": "initialize_flags",
                "set_register_values_08005fe8": "set_register_values"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_flags_08006092",
            "code": "\nundefined4 initialize_flags_08006092(undefined4 *flags)\n\n{\n  if (flags != (undefined4 *)0x0) {\n    if (*(char *)((int)flags + 0x3d) == '\\0') {\n      *(undefined *)(flags + 0xf) = 0;\n      initialize_and_set_flags();\n    }\n    *(undefined *)((int)flags + 0x3d) = 2;\n    set_register_values(*flags,flags + 1);\n    *(undefined *)((int)flags + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_flags_08006092",
                "param_1": "flags",
                "initialize_and_set_flags_08006e68": "initialize_and_set_flags",
                "set_register_values_08005fe8": "set_register_values"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_flags_and_values_080060c4",
            "code": "\nvoid updateFlagsAndValues_080060c4(int address,int *values)\n\n{\n  uint updatedFlag;\n  uint updatedValue;\n  int inputValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffffef;\n  updatedValue = *(uint *)(address + 4);\n  inputValue = *values;\n  updatedFlag = *(uint *)(address + 0x20) & 0xffffffdf | values[2] << 4;\n  if (address == 0x40012c00) {\n    updatedFlag = (updatedFlag & 0xffffff7f | values[3] << 4) & 0xffffffbf;\n    updatedValue = updatedValue & 0xfffff3ff | values[5] << 2 | values[6] << 2;\n  }\n  *(uint *)(address + 4) = updatedValue;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(address + 0x38) = values[1];\n  *(uint *)(address + 0x20) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_flags_and_values_080060c4",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedFlag",
                "uVar2": "updatedValue",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "process_function_08006128",
            "code": "\nundefined4 process_function_08006128(undefined4 *array,undefined4 param2,undefined4 param3)\n\n{\n  if (*(char *)(array + 0xf) != '\\x01') {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    switch(param3) {\n    case 0:\n      update_params_08005cec(*array);\n      break;\n    case 4:\n      update_flags_and_values_080060c4(*array);\n      break;\n    case 8:\n      update_parameters_08005d48(*array);\n      break;\n    case 0xc:\n      update_data_08005dac(*array);\n    }\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "process_function_08006128",
                "param_1": "array",
                "param_2": "param2",
                "param_3": "param3",
                "switch(param_3)": "switch(param3)"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_params_and_return_status_08006186",
            "code": "\nundefined4 updateParamsAndReturnStatus_08006186(int *parameterArray,int offset,undefined4 updateType)\n\n{\n  if (*(char *)(parameterArray + 0xf) != '\\x01') {\n    *(undefined *)(parameterArray + 0xf) = 1;\n    *(undefined *)((int)parameterArray + 0x3d) = 2;\n    switch(updateType) {\n    case 0:\n      updateParameters(*parameterArray);\n      *(uint *)(*parameterArray + 0x18) = *(uint *)(*parameterArray + 0x18) | 8;\n      *(uint *)(*parameterArray + 0x18) = *(uint *)(*parameterArray + 0x18) & 0xfffffffb;\n      *(uint *)(*parameterArray + 0x18) = *(uint *)(*parameterArray + 0x18) | *(uint *)(offset + 0x10);\n      break;\n    case 4:\n      updateFlagsAndValues(*parameterArray);\n      *(uint *)(*parameterArray + 0x18) = *(uint *)(*parameterArray + 0x18) | 0x800;\n      *(uint *)(*parameterArray + 0x18) = *(uint *)(*parameterArray + 0x18) & 0xfffffbff;\n      *(uint *)(*parameterArray + 0x18) = *(uint *)(*parameterArray + 0x18) | *(int *)(offset + 0x10) << 8;\n      break;\n    case 8:\n      updateParameters2(*parameterArray);\n      *(uint *)(*parameterArray + 0x1c) = *(uint *)(*parameterArray + 0x1c) | 8;\n      *(uint *)(*parameterArray + 0x1c) = *(uint *)(*parameterArray + 0x1c) & 0xfffffffb;\n      *(uint *)(*parameterArray + 0x1c) = *(uint *)(*parameterArray + 0x1c) | *(uint *)(offset + 0x10);\n      break;\n    case 0xc:\n      updateData(*parameterArray);\n      *(uint *)(*parameterArray + 0x1c) = *(uint *)(*parameterArray + 0x1c) | 0x800;\n      *(uint *)(*parameterArray + 0x1c) = *(uint *)(*parameterArray + 0x1c) & 0xfffffbff;\n      *(uint *)(*parameterArray + 0x1c) = *(uint *)(*parameterArray + 0x1c) | *(int *)(offset + 0x10) << 8;\n    }\n    *(undefined *)((int)parameterArray + 0x3d) = 1;\n    *(undefined *)(parameterArray + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_params_and_return_status_08006186",
                "param_1": "parameterArray",
                "param_2": "offset",
                "param_3": "updateType",
                "update_params_08005cec": "updateParameters",
                "update_flags_and_values_080060c4": "updateFlagsAndValues",
                "update_parameters_08005d48": "updateParameters2",
                "update_data_08005dac": "updateData"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bitwise_value_08006262",
            "code": "\nvoid updateBitwiseValue_08006262(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bitwise_value_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "modify_flags_and_update_08006280",
            "code": "\nundefined4 modifyFlagsAndUpdate_08006280(uint **ptrToPtrArray,undefined4 flagValue)\n\n{\n  switch(flagValue) {\n  case 0:\n    (*ptrToPtrArray)[3] = (*ptrToPtrArray)[3] | 2;\n    break;\n  case 4:\n    (*ptrToPtrArray)[3] = (*ptrToPtrArray)[3] | 4;\n    break;\n  case 8:\n    (*ptrToPtrArray)[3] = (*ptrToPtrArray)[3] | 8;\n    break;\n  case 0xc:\n    (*ptrToPtrArray)[3] = (*ptrToPtrArray)[3] | 0x10;\n  }\n  updateBitwiseValue(*ptrToPtrArray,flagValue,1);\n  if (*ptrToPtrArray == (uint *)0x40012c00) {\n    data_uRam40012c44 = data_uRam40012c44 | 0x8000;\n  }\n  **ptrToPtrArray = **ptrToPtrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "modify_flags_and_update_08006280",
                "param_1": "ptrToPtrArray",
                "param_2": "flagValue",
                "update_bitwise_value_08006262": "updateBitwiseValue",
                "uRam40012c44": "data_uRam40012c44"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_bitwise_value_080062f4",
            "code": "\nundefined4 updateBitwiseValue_080062f4(uint **pointerToUnsignedIntArray,undefined4 valueToUpdate)\n\n{\n  uint *pointerToUnsignedInt;\n  \n  switch(valueToUpdate) {\n  case 0:\n    (*pointerToUnsignedIntArray)[3] = (*pointerToUnsignedIntArray)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*pointerToUnsignedIntArray)[3] = (*pointerToUnsignedIntArray)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*pointerToUnsignedIntArray)[3] = (*pointerToUnsignedIntArray)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*pointerToUnsignedIntArray)[3] = (*pointerToUnsignedIntArray)[3] & 0xffffffef;\n  }\n  update_bitwise_value_08006262(*pointerToUnsignedIntArray,valueToUpdate,0);\n  if (((*pointerToUnsignedIntArray == (uint *)0x40012c00) && ((constant2 & 0x1111) == 0)) &&\n     ((constant2 & 0x444) == 0)) {\n    constant3 = constant3 & 0xffff7fff;\n  }\n  pointerToUnsignedInt = *pointerToUnsignedIntArray;\n  if (((pointerToUnsignedInt[8] & 0x1111) == 0) && ((pointerToUnsignedInt[8] & 0x444) == 0)) {\n    *pointerToUnsignedInt = *pointerToUnsignedInt & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_bitwise_value_080062f4",
                "param_1": "pointerToUnsignedIntArray",
                "param_2": "valueToUpdate",
                "puVar1": "pointerToUnsignedInt",
                "uRam40012c20": "constant2",
                "uRam40012c44": "constant3"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "set_bit_and_update_value_08006390",
            "code": "\nundefined4 set_bit_and_update_value_08006390(uint **bitwise_value_ptr,undefined4 new_value)\n\n{\n  update_bitwise_value(*bitwise_value_ptr,new_value,1);\n  if (*bitwise_value_ptr == (uint *)0x40012c00) {\n    status_register = status_register | 0x8000;\n  }\n  **bitwise_value_ptr = **bitwise_value_ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "set_bit_and_update_value_08006390",
                "param_1": "bitwise_value_ptr",
                "param_2": "new_value",
                "uRam40012c44": "status_register",
                "update_bitwise_value_08006262": "update_bitwise_value"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_parameters_080063c0",
            "code": "\nundefined4 update_parameters_080063c0(uint **parameter1,undefined4 parameter2)\n\n{\n  uint *pointer1;\n  \n  update_bitwise_value_08006262(*parameter1,parameter2,0);\n  if (((*parameter1 == (uint *)0x40012c00) && ((memory2 & 0x1111) == 0)) &&\n     ((memory2 & 0x444) == 0)) {\n    memory3 = memory3 & 0xffff7fff;\n  }\n  pointer1 = *parameter1;\n  if (((pointer1[8] & 0x1111) == 0) && ((pointer1[8] & 0x444) == 0)) {\n    *pointer1 = *pointer1 & 0xfffffffe;\n  }\n  *(undefined *)((int)parameter1 + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_parameters_080063c0",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "puVar1": "pointer1",
                "uRam40012c20": "memory2",
                "uRam40012c44": "memory3"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_bits_08006420",
            "code": "\nvoid updateBits_08006420(int data,uint bitPosition,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_bits_08006420",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_flags_and_values_0800643c",
            "code": "\nundefined4 setFlagsAndValues_0800643c(uint **data,undefined4 value)\n\n{\n  updateBits(*data,value,4);\n  (*data)[0x11] = (*data)[0x11] | 0x8000;\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_flags_and_values_0800643c",
                "param_1": "data",
                "param_2": "value",
                "update_bits_08006420": "updateBits"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_and_check_flags_08006460",
            "code": "\nundefined4 updateAndCheckFlags_08006460(uint **data,undefined4 flag)\n\n{\n  uint *ptr;\n  \n  update_bits_08006420(*data,flag,0);\n  ptr = *data;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    ptr[0x11] = ptr[0x11] & 0xffff7fff;\n  }\n  ptr = *data;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_and_check_flags_08006460",
                "param_1": "data",
                "param_2": "flag",
                "puVar1": "ptr"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "set_flags_and_values_080064b0",
            "code": "\nvoid setFlagsAndValues_080064b0(int *arrayPointer)\n\n{\n  *(uint *)(*arrayPointer + 0xc) = *(uint *)(*arrayPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*arrayPointer + 0x14) = *(uint *)(*arrayPointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)arrayPointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "set_flags_and_values_080064b0",
                "param_1": "arrayPointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *data)\n\n{\n  short count;\n  byte *ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    ptr = (byte *)data[8];\n    data[8] = (int)(ptr + 1);\n    *(uint *)(*data + 4) = (uint)*ptr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "ptr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_and_set_values_08006538",
            "code": "\nvoid calculateAndSetValues_08006538(int *inputArray)\n\n{\n  int shiftedData1;\n  int shiftedData2;\n  int shiftedData3;\n  int shiftedData4;\n  int shiftedData5;\n  int shiftedData6;\n  int shiftedData7;\n  int shiftedData8;\n  int shiftedData9;\n  int basePointer;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  basePointer = *inputArray;\n  if (basePointer != 0x40013800) {\n    shiftedData1 = get_shifted_data_08005a28();\n    shiftedData6 = inputArray[1];\n    shiftedData2 = get_shifted_data_08005a28();\n    shiftedData7 = inputArray[1];\n    shiftedData3 = get_shifted_data_08005a28();\n    shiftedData8 = inputArray[1];\n    shiftedData4 = get_shifted_data_08005a28();\n    shiftedData9 = inputArray[1];\n    shiftedData5 = get_shifted_data_08005a28();\n    *(uint *)(basePointer + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedData4 * 0x19) / (uint)(shiftedData9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedData5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedData2 * 0x19) / (uint)(shiftedData7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedData3 * 0x19) / (ulonglong)(uint)(shiftedData8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedData1 * 0x19) / (ulonglong)(uint)(shiftedData6 << 2)) / 100) * 0x10;\n    return;\n  }\n  basePointer = extracted_data_right_shift_08005a48();\n  shiftedData5 = inputArray[1];\n  shiftedData1 = extracted_data_right_shift_08005a48();\n  shiftedData6 = inputArray[1];\n  shiftedData2 = extracted_data_right_shift_08005a48();\n  shiftedData7 = inputArray[1];\n  shiftedData3 = extracted_data_right_shift_08005a48();\n  shiftedData8 = inputArray[1];\n  shiftedData4 = extracted_data_right_shift_08005a48();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedData3 * 0x19) / (uint)(shiftedData8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedData4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedData1 * 0x19) / (uint)(shiftedData6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedData2 * 0x19) / (ulonglong)(uint)(shiftedData7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(basePointer * 0x19) / (ulonglong)(uint)(shiftedData5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_and_set_values_08006538",
                "param_1": "inputArray",
                "iVar1": "shiftedData1",
                "iVar2": "shiftedData2",
                "iVar3": "shiftedData3",
                "iVar4": "shiftedData4",
                "iVar5": "shiftedData5",
                "iVar6": "shiftedData6",
                "iVar7": "shiftedData7",
                "iVar8": "shiftedData8",
                "iVar9": "shiftedData9",
                "iVar10": "basePointer"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_compatibility_080066e8",
            "code": "\nundefined4 checkCompatibility_080066e8(uint **pointerArray,uint mask,uint expectedResult,int dataOffset,uint maxDifference)\n\n{\n  int globalDataOffset;\n  \n  do {\n    if (((mask & ~**pointerArray) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((maxDifference == 0xffffffff) ||\n          ((maxDifference != 0 && (globalDataOffset = get_global_data_08003760(), (uint)(globalDataOffset - dataOffset) <= maxDifference))));\n  (*pointerArray)[3] = (*pointerArray)[3] & 0xfffffe5f;\n  (*pointerArray)[5] = (*pointerArray)[5] & 0xfffffffe;\n  *(undefined *)((int)pointerArray + 0x39) = 0x20;\n  *(undefined *)((int)pointerArray + 0x3a) = 0x20;\n  *(undefined *)(pointerArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_compatibility_080066e8",
                "param_1": "pointerArray",
                "param_2": "mask",
                "param_3": "expectedResult",
                "param_4": "dataOffset",
                "param_5": "maxDifference",
                "iVar1": "globalDataOffset"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "set_values_0800674e",
            "code": "\nundefined4 set_values_0800674e(int *input_array)\n\n{\n  if (input_array != (int *)0x0) {\n    if (*(char *)((int)input_array + 0x39) == '\\0') {\n      *(undefined *)(input_array + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)input_array + 0x39) = 0x24;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) & 0xffffdfff;\n    calculate_and_set_values_0800674e(input_array);\n    *(uint *)(*input_array + 0x10) = *(uint *)(*input_array + 0x10) & 0xffffb7ff;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xffffffd5;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x2000;\n    flag = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x20;\n    *(undefined *)((int)input_array + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "set_values_0800674e",
                "param_1": "input_array",
                "calculate_and_set_values_08006538": "calculate_and_set_values",
                "param_1[0xf]": "flag"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 processData_080067ac(int *pointer1,ushort *pointer2,int length,undefined4 data)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)pointer1 + 0x39) == ' ') {\n    if (pointer2 == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (length == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(pointer1 + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(pointer1 + 0xe) = 1;\n      pointer1[0xf] = 0;\n      *(undefined *)((int)pointer1 + 0x39) = 0x21;\n      returnValue = get_global_data_08003760();\n      *(short *)(pointer1 + 9) = (short)length;\n      *(short *)((int)pointer1 + 0x26) = (short)length;\n      while (*(short *)((int)pointer1 + 0x26) != 0) {\n        *(short *)((int)pointer1 + 0x26) = *(short *)((int)pointer1 + 0x26) + -1;\n        if (pointer1[2] == 0x1000) {\n          result = check_compatibility_080066e8(pointer1,0x80,0,returnValue,data);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*pointer1 + 4) = *pointer2 & 0x1ff;\n          if (pointer1[4] == 0) {\n            pointer2 = pointer2 + 1;\n          }\n          else {\n            pointer2 = (ushort *)((int)pointer2 + 1);\n          }\n        }\n        else {\n          result = check_compatibility_080066e8(pointer1,0x80,0,returnValue,data);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*pointer1 + 4) = (uint)*(byte *)pointer2;\n          pointer2 = (ushort *)((int)pointer2 + 1);\n        }\n      }\n      result = check_compatibility_080066e8(pointer1,0x40,0,returnValue,data);\n      if (result == 0) {\n        *(undefined *)((int)pointer1 + 0x39) = 0x20;\n        *(undefined *)(pointer1 + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "param_3": "length",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "initialize_data_0800688e",
            "code": "\nundefined4 initializeData_0800688e(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    dataElement8 = value1;\n    *(short *)(data + 9) = (short)value2;\n    *(short *)((int)data + 0x26) = (short)value2;\n    dataElementF = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "initialize_data_0800688e",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "dataElement8",
                "param_1[0xf]": "dataElementF"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "check_and_set_values_080068d6",
            "code": "\nundefined4 checkAndSetValues_080068d6(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array[10] = value1;\n    *(short *)(array + 0xb) = (short)value2;\n    *(short *)((int)array + 0x2e) = (short)value2;\n    array[0xf] = 0;\n    *(undefined *)((int)array + 0x3a) = 0x22;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x100;\n    *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) | 1;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "check_and_set_values_080068d6",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "initialize_element_08006932",
            "code": "\nundefined4 initializeElement_08006932(int *elementPtr)\n\n{\n  *(uint *)(*elementPtr + 0xc) = *(uint *)(*elementPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)elementPtr + 0x39) = 0x20;\n  processElement;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "initialize_element_08006932",
                "param_1": "elementPtr",
                "process_element_08008730()": "processElement"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_extracted_binary_0800694c",
            "code": "\nundefined4 processExtractedBinary_0800694c(int *binaryData)\n\n{\n  byte *bytePtr;\n  short elementCount;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)binaryData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (binaryData[2] == 0x1000) {\n    if (binaryData[4] == 0) {\n      *(ushort *)binaryData[10] = (ushort)((uint)(*(int *)(*binaryData + 4) << 0x17) >> 0x17);\n      binaryData[10] = binaryData[10] + 2;\n    }\n    else {\n      *(ushort *)binaryData[10] = (ushort)*(undefined4 *)(*binaryData + 4) & 0xff;\n      binaryData[10] = binaryData[10] + 1;\n    }\n  }\n  else if (binaryData[4] == 0) {\n    undefinedPtr = (undefined *)binaryData[10];\n    binaryData[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*binaryData + 4);\n  }\n  else {\n    bytePtr = (byte *)binaryData[10];\n    binaryData[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*binaryData + 4) & 0x7f;\n  }\n  elementCount = *(short *)((int)binaryData + 0x2e) + -1;\n  *(short *)((int)binaryData + 0x2e) = elementCount;\n  if (elementCount != 0) {\n    return 0;\n  }\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xffffffdf;\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xfffffeff;\n  *(uint *)(*binaryData + 0x14) = *(uint *)(*binaryData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)binaryData + 0x3a) = 0x20;\n  execute_element_function_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_extracted_binary_0800694c",
                "param_1": "binaryData",
                "pbVar1": "bytePtr",
                "sVar2": "elementCount",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_conditions_and_update_state_080069ec",
            "code": "\nvoid process_conditions_and_update_state_080069ec(uint **parameters)\n\n{\n  int index;\n  uint value;\n  uint *pointer;\n  uint flag;\n  uint flags;\n  \n  pointer = *parameters;\n  flags = *pointer;\n  value = pointer[3];\n  if ((((flags & 0xf) == 0) && ((flags & 0x20) != 0)) && ((value & 0x20) != 0)) {\n    process_extracted_binary_0800694c(parameters);\n    return;\n  }\n  if (((flags & 0xf) == 0) || ((flag = pointer[5] & 1, flag == 0 && ((value & 0x120) == 0)))) {\n    if (((flags & 0x80) != 0) && ((value & 0x80) != 0)) {\n      process_data_080064cc(parameters);\n      return;\n    }\n    if (((flags & 0x40) != 0) && ((value & 0x40) != 0)) {\n      initialize_element_08006932(parameters);\n    }\n  }\n  else {\n    if (((flags & 1) != 0) && ((value & 0x100) != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 1);\n    }\n    if (((flags & 4) != 0) && (flag != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n    }\n    if (((flags & 2) != 0) && (flag != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n    }\n    if (((flags & 8) != 0) && (flag != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n    }\n    if (parameters[0xf] != (uint *)0x0) {\n      if (((flags & 0x20) != 0) && ((value & 0x20) != 0)) {\n        process_extracted_binary_0800694c(parameters);\n      }\n      if ((((uint)parameters[0xf] & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_0800877c(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags_and_values_080064b0(parameters);\n      pointer = *parameters;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_0800877c(parameters);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (parameters[0xd] == (uint *)0x0) {\n        FUNC_0800877c(parameters);\n        return;\n      }\n      parameters[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      index = set_dat_value_08004050(parameters[0xd]);\n      if (index != 0) {\n        (*(code *)parameters[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_conditions_and_update_state_080069ec",
                "param_1": "parameters",
                "iVar1": "index",
                "uVar2": "value",
                "puVar3": "pointer",
                "uVar4": "flag",
                "uVar5": "flags"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "get_bit_value_08006b28",
            "code": "\nuint getBitValue_08006b28(uint value,int baseAddress)\n\n{\n  return *(uint *)(baseAddress + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "get_bit_value_08006b28",
                "param_1": "value",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_bit_in_array_08006b3e",
            "code": "\nvoid setBitInArray_08006b3e(uint index,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (index << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (index & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_bit_in_array_08006b5c",
            "code": "\nvoid updateBitInArray_08006b5c(uint bitPosition,int dataArray)\n\n{\n  uint byteOffset;\n  \n  byteOffset = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(dataArray + byteOffset * 4) = *(uint *)(dataArray + byteOffset * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_bit_in_array_08006b5c",
                "param_1": "bitPosition",
                "param_2": "dataArray",
                "uVar1": "byteOffset"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "map_param_to_address_08006b7c",
            "code": "\nundefined4 mapParamToAddress_08006b7c(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "map_param_to_address_08006b7c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_flag_and_return_address_08006bb8",
            "code": "\n\n\nundefined4 setFlagAndReturnAddress_08006bb8(undefined4 flag)\n\n{\n  undefined4 returnAddress;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnAddress = 0x40011800;\n    break;\n  default:\n    returnAddress = 0;\n  }\n  return returnAddress;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_flag_and_return_address_08006bb8",
                "param_1": "flag",
                "uVar1": "returnAddress"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_shifted_value_08006c60",
            "code": "\nuint getShiftedValue_08006c60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int index;\n  uint shiftedValue;\n  \n  index = get_index_or_neg_one_08007376(input1,&DAT_0800a5b8,input3,input4,input4);\n  shiftedValue = (uint)(index << 0xc) >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_shifted_value_08006c60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "index",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_shifted_value_08006c7c",
            "code": "\nundefined4 get_shifted_value_08006c7c(undefined4 input_value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint shifted_value;\n  \n  index = get_index_or_neg_one_08007376(input_value,&DAT_0800a6cc,param_3,param_4,param_4);\n  shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_shifted_value_08006c7c",
                "param_1": "input_value",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_flag_and_bits_08006ca8",
            "code": "\n\n\nvoid update_flag_and_bits_08006ca8(int *input_ptr,undefined4 param_value)\n\n{\n  undefined4 result;\n  uint flag_value;\n  int flag_mask;\n  uint bit_mask;\n  undefined4 bit_count;\n  undefined4 bit_offset;\n  \n  flag_mask = *input_ptr;\n  if (flag_mask == 0x40012400) {\n    flag_value = _DAT_40021018 | 0x200;\n    flag_mask = 0x200;\n    _DAT_40021018 = flag_value;\n  }\n  else {\n    flag_value = 0x40012800;\n    if (flag_mask == 0x40012800) {\n      flag_value = _DAT_40021018 | 0x400;\n      flag_mask = 0x400;\n      _DAT_40021018 = flag_value;\n    }\n  }\n  result = set_flag_and_get_address((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param_value,flag_value,flag_mask);\n  bit_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  bit_count = 3;\n  bit_offset = 0;\n  update_bits(result,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_flag_and_bits_08006ca8",
                "param_1": "input_ptr",
                "param_2": "param_value",
                "uVar1": "result",
                "uVar2": "flag_value",
                "iVar3": "flag_mask",
                "local_18": "bit_mask",
                "local_14": "bit_count",
                "local_10": "bit_offset",
                "set_flag_and_return_address_08006bb8": "set_flag_and_get_address",
                "update_bits_080040e8": "update_bits"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_data_08006d24",
            "code": "\n\n\nvoid updateData_08006d24(int *ptrValue)\n\n{\n  if (*ptrValue != 0x40012400) {\n    if (*ptrValue == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_data_08006d24",
                "param_1": "ptrValue"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "find_value_or_zero_08006d80",
            "code": "\nundefined2 findValueOrZero_08006d80(undefined4 input)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint shiftedValue;\n  undefined4 flag1;\n  undefined4 flag2;\n  int value;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  \n  fill_memory_with_byte_080091c6(&value,0,0x30);\n  shiftedValue = 0;\n  flag1 = 0;\n  flag2 = 0;\n  result = 0;\n  value = find_value_or_zero_08007320(input,&DAT_0800a5b8);\n  if (value == 0) {\n    result = 0;\n  }\n  else {\n    temp1 = 0;\n    temp2 = 0;\n    temp3 = 0;\n    temp5 = 0;\n    temp7 = 0xe0000;\n    temp8 = 0;\n    temp4 = 1;\n    temp6 = 0;\n    DAT_20000014 = (undefined)input;\n    iVar1 = update_flags_and_bits_08003bd8(&value);\n    if (iVar1 == 0) {\n      shiftedValue = get_shifted_value_08006c60(input);\n      if (shiftedValue < 0x12) {\n        flag1 = 1;\n        flag2 = 2;\n        iVar1 = update_settings_080038e4(&value,&shiftedValue);\n        if (iVar1 == 0) {\n          iVar1 = process_data_08003e20(&value);\n          if (iVar1 == 0) {\n            iVar1 = initialize_data_access_08003aa0(&value);\n            if (iVar1 == 0) {\n              iVar1 = calculate_status_0800376c(&value,10);\n              if (iVar1 == 0) {\n                uVar2 = get_pointer_offset_08003a1c(&value);\n                if ((uVar2 & 0x200) != 0) {\n                  result = get_memory_address_080038dc(&value);\n                }\n                iVar1 = update_data_08003de4(&value);\n                if (iVar1 == 0) {\n                  iVar1 = sanitize_data_08003ce8(&value);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "find_value_or_zero_08006d80",
                "param_1": "input",
                "local_46": "result",
                "local_44": "shiftedValue",
                "local_40": "flag1",
                "local_3c": "flag2",
                "local_38": "value",
                "local_34": "temp1",
                "local_30": "temp2",
                "local_2c": "temp3",
                "local_28": "temp4",
                "local_24": "temp5",
                "local_20": "temp6",
                "local_1c": "temp7",
                "local_10": "temp8"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_and_set_flags_08006e68",
            "code": "\n\n\nvoid initializeAndSetFlags_08006e68(undefined4 input)\n\n{\n  int index;\n  undefined4 address;\n  uint bitValue;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  index = get_index_or_neg_one_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  initialize_flags_08007438(input);\n  address = set_flag_and_return_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  value1 = 2;\n  value2 = 0;\n  value3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(index << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  bitValue = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_bits_080040e8(address,&bitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_and_set_flags_08006e68",
                "param_1": "input",
                "iVar1": "index",
                "uVar2": "address",
                "local_20": "bitValue",
                "local_1c": "value1",
                "local_18": "value2",
                "local_14": "value3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "update_memory_values_08007110",
            "code": "\nvoid update_memory_values_08007110(void)\n\n{\n  update_memory_values_08007110_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "update_memory_values_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_and_update_params_08007118",
            "code": "\nvoid initialize_and_update_params_08007118(undefined4 value,uint divisor,int offset,undefined4 param,char flag)\n\n{\n  uint uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 shifted_value;\n  undefined4 newValue;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  undefined4 unused5;\n  int value_or_zero;\n  int quotient;\n  undefined4 unused6;\n  int offset_minus_one;\n  undefined4 unused7;\n  undefined4 unused8;\n  undefined unused9;\n  \n  fill_memory(&value_or_zero,0,0x40);\n  shifted_value = 0;\n  newValue = 0;\n  unused1 = 0;\n  unused2 = 0;\n  unused3 = 0;\n  unused4 = 0;\n  unused5 = 0;\n  value_or_zero = find_value_or_zero(value,&DAT_0800a6cc);\n  if (value_or_zero != 0) {\n    uVar1 = calculate_shifted_value();\n    quotient = uVar1 / divisor - 1;\n    offset_minus_one = offset + -1;\n    unused7 = 0;\n    unused6 = 0;\n    unused8 = 0;\n    unused9 = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)value;\n      iVar2 = initialize_flags(&value_or_zero);\n      if (iVar2 != 0) {\n        return;\n      }\n    }\n    iVar2 = get_shifted_value(value);\n    if ((((iVar2 == 0) || (iVar2 == 4)) || (iVar2 == 8)) || ((iVar2 == 0xc || (iVar2 == 0x18)))) {\n      shifted_value = 0x60;\n      unused1 = 0;\n      unused3 = 0;\n      unused2 = 0;\n      unused5 = 0;\n      unused4 = 0;\n      newValue = param;\n      iVar3 = update_params_and_return_status(&value_or_zero,&shifted_value,iVar2);\n      if (iVar3 == 0) {\n        uVar1 = get_index_or_neg_one(value,&DAT_0800a6cc);\n        if ((uVar1 & 0x100000) == 0) {\n          set_bit_and_update_value(&value_or_zero,iVar2);\n        }\n        else {\n          set_flags_and_values(&value_or_zero,iVar2);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_and_update_params_08007118",
                "param_1": "value",
                "param_2": "divisor",
                "param_3": "offset",
                "param_4": "param",
                "param_5": "flag",
                "local_74": "shifted_value",
                "local_70": "newValue",
                "local_6c": "unused1",
                "local_68": "unused2",
                "local_64": "unused3",
                "local_60": "unused4",
                "local_5c": "unused5",
                "local_58": "value_or_zero",
                "local_54": "quotient",
                "local_50": "unused6",
                "local_4c": "offset_minus_one",
                "local_48": "unused7",
                "local_44": "unused8",
                "local_1b": "unused9",
                "fill_memory_with_byte_080091c6": "fill_memory",
                "find_value_or_zero_08007320": "find_value_or_zero",
                "calculate_shifted_value_080075dc": "calculate_shifted_value",
                "initialize_flags_08006092": "initialize_flags",
                "get_shifted_value_08006c7c": "get_shifted_value",
                "update_params_and_return_status_08006186": "update_params_and_return_status",
                "get_index_or_neg_one_08007376": "get_index_or_neg_one",
                "set_bit_and_update_value_08006390": "set_bit_and_update_value",
                "set_flags_and_values_0800643c": "set_flags_and_values"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_data_080071e4",
            "code": "\nvoid processData_080071e4(undefined4 inputData)\n\n{\n  int shiftedValue;\n  uint indexValue;\n  int resultArray [17];\n  \n  resultArray[0] = find_value_or_zero_08007320(inputData,&DAT_0800a6cc);\n  if ((resultArray[0] != 0) &&\n     ((((shiftedValue = get_shifted_value_08006c7c(inputData), shiftedValue == 0 || (shiftedValue == 4)) || (shiftedValue == 8)) ||\n      ((shiftedValue == 0xc || (shiftedValue == 0x18)))))) {\n    indexValue = get_index_or_neg_one_08007376(inputData,&DAT_0800a6cc);\n    if ((indexValue & 0x100000) == 0) {\n      update_parameters_080063c0(resultArray,shiftedValue);\n    }\n    else {\n      update_and_check_flags_08006460(resultArray,shiftedValue);\n    }\n    update_memory_values_08005e2e(resultArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_data_080071e4",
                "param_1": "inputData",
                "local_50": "resultArray",
                "iVar1": "shiftedValue",
                "uVar2": "indexValue"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_global_data_0800723c",
            "code": "\nvoid initializeGlobalData_0800723c(void)\n\n{\n  getGlobalData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_global_data_0800723c",
                "get_global_data_08003760": "getGlobalData"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_and_process_data_08007246",
            "code": "\nvoid initialize_and_process_data_08007246(void)\n\n{\n  update_and_add_value();\n  initialize_variables();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_and_process_data_08007246",
                "update_and_add_value_08003748": "update_and_add_value",
                "initialize_08004046": "initialize_variables"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_flag_and_address_08007258",
            "code": "\n\n\nvoid initializeFlagAndAddress_08007258(uint inputValue,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 flagAddress;\n  uint bitMask;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  flagAddress = set_flag_and_return_address_08006bb8((inputValue << 0x18) >> 0x1c);\n  bitMask = 1 << (inputValue & 0xf) & 0xffff;\n  localVar3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((inputValue - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((inputValue == 0xf) || (inputValue == 0x13)) || (inputValue == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localVar1 = param2;\n  localVar2 = param3;\n  update_bits_080040e8(flagAddress,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_flag_and_address_08007258",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "flagAddress",
                "local_20": "bitMask",
                "local_1c": "localVar1",
                "local_18": "localVar2",
                "local_14": "localVar3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_scaled_value_based_on_param_080072d8",
            "code": "\nvoid set_scaled_value_based_on_param_080072d8(undefined4 buffer,undefined2 value,int condition,undefined4 length)\n\n{\n  if (condition == 0) {\n    set_scaled_value_080042e2(buffer,value,0,length,length);\n    return;\n  }\n  set_scaled_value_080042e2(buffer,value,1,length,length);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_scaled_value_based_on_param_080072d8",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "condition",
                "param_4": "length"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "check_bit_wrapper_080072f0",
            "code": "\nvoid check_bit_wrapper_080072f0(undefined4 param_1,undefined2 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  check_bit_080042d4(param_1,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "check_bit_wrapper_080072f0"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_and_process_system_080072fa",
            "code": "\nvoid initialize_and_process_system_080072fa(void)\n\n{\n  set_flag_and_process_data();\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_and_process_system_080072fa",
                "set_flag_and_process_data_08003724": "set_flag_and_process_data",
                "initialize_system_080035b8": "initialize_system"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_sequence_08007306",
            "code": "\nundefined4 find_value_in_sequence_08007306(int value,char *sequence)\n\n{\n  while( true ) {\n    if (*sequence == -1) {\n      return 0;\n    }\n    if (*sequence == value) break;\n    sequence = sequence + 0xc;\n  }\n  return *(undefined4 *)(sequence + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_sequence_08007306",
                "param_1": "value",
                "param_2": "sequence"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_value_or_zero_08007320",
            "code": "\nundefined4 find_value_or_zero_08007320(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_in_sequence_08007306();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_value_or_zero_08007320",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_in_list_08007332",
            "code": "\nint find_value_in_list_08007332(int target_value,char *list_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(list_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(list_ptr + 4) == target_value) break;\n    list_ptr = list_ptr + 0xc;\n  }\n  return (int)*list_ptr;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_in_list_08007332",
                "param_1": "target_value",
                "param_2": "list_ptr"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_value_or_default_0800734a",
            "code": "\nundefined4 find_value_or_default_0800734a(int value_to_find)\n\n{\n  undefined4 found_value;\n  \n  if (value_to_find != 0) {\n    found_value = find_value_in_list_08007332();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_value_or_default_0800734a",
                "param_1": "value_to_find",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_index_0800735a",
            "code": "\nundefined4 find_index_0800735a(int target,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == target) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_index_0800735a",
                "param_1": "target",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "get_index_or_neg_one_08007376",
            "code": "\nundefined4 get_index_or_neg_one_08007376(int input_value)\n\n{\n  undefined4 index;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  index = find_index_0800735a();\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08007376": "get_index_or_neg_one_08007376",
                "param_1": "input_value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_param_and_string_0800738a",
            "code": "\nundefined4 check_param_and_string_0800738a(int parameter,char *string)\n\n{\n  if (parameter == -1) {\n    result 0;\n  }\n  while( true ) {\n    if (*string == -1) {\n      result 0;\n    }\n    if (parameter == *string) break;\n    string = string + 0xc;\n  }\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_param_and_string_0800738a",
                "param_1": "parameter",
                "param_2": "string",
                "return": "result"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_smaller_080073ae",
            "code": "\nint compare_and_return_smaller_080073ae(int first_param,int second_param)\n\n{\n  if (first_param != second_param) {\n    if (first_param == 0) {\n      return second_param;\n    }\n    if (second_param == 0) {\n      return first_param;\n    }\n    first_param = 0;\n  }\n  return first_param;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_smaller_080073ae",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_function_080073c0",
            "code": "\nvoid execute_callback_function_080073c0(void)\n\n{\n  if (DAT_200005f4 != (callback_function *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_function_080073c0",
                "code": "callback_function"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "configure_registers_080073ec",
            "code": "\n\n\nvoid configureRegisters_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "configure_registers_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "initialize_flags_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid initializeFlags_08007438(int *input)\n\n{\n  if (*input == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = input;\n  }\n  if (*input == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = input;\n  }\n  if (*input == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = input;\n  }\n  if (*input == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = input;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "initialize_flags_08007438",
                "param_1": "input"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_values_080074e0",
            "code": "\n\n\nvoid updateMemoryValues_080074e0(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_values_080074e0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_status_08007544",
            "code": "\nundefined4 getTimerIRQnStatus_08007544(uint irqn)\n\n{\n  if (irqn == 0xffffffff) {\n    return 0;\n  }\n  if (irqn == 0x40000400) {\n    return 0x1d;\n  }\n  if (irqn < 0x40000401) {\n    if (irqn == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (irqn == 0x40000800) {\n      return 0x1e;\n    }\n    if (irqn == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  logUnknownIRQn(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_status_08007544",
                "param_1": "irqn",
                "initialize_and_parse_080098d8": "logUnknownIRQn"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initializeAndParseErrorMessage(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "initialize_and_parse_080098d8": "initializeAndParseErrorMessage"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_shifted_value_080075dc",
            "code": "\nint calculateShiftedValue_080075dc(undefined4 inputValue)\n\n{\n  uint shiftedValue;\n  int returnValue;\n  uint clockSource;\n  undefined4 initializedData1;\n  undefined4 initializedData2;\n  undefined4 initializedData3;\n  undefined4 initializedData4;\n  uint localVar1;\n  uint localVar2;\n  \n  initializedData2 = 0;\n  initializedData3 = 0;\n  initializedData4 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  initializedData1 = 0;\n  initialize_data_08005a68(&initializedData2,&initializedData1);\n  returnValue = check_timer_instance_08007594(inputValue);\n  shiftedValue = localVar2;\n  clockSource = localVar1;\n  if (returnValue == 1) {\n    returnValue = get_shifted_data_08005a28();\n  }\n  else if (returnValue == 2) {\n    returnValue = extracted_data_right_shift_08005a48();\n    clockSource = shiftedValue;\n  }\n  else {\n    initialize_and_parse_080098d8(\"TIM: Unknown clock source\");\n    returnValue = 0;\n    clockSource = 0;\n  }\n  if (clockSource != 0x500) {\n    if (clockSource < 0x501) {\n      if (clockSource != 0x400) {\n        return returnValue;\n      }\n    }\n    else if ((clockSource != 0x600) && (clockSource != 0x700)) {\n      return returnValue;\n    }\n  }\n  return returnValue << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_shifted_value_080075dc",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "iVar2": "returnValue",
                "uVar3": "clockSource",
                "local_20": "initializedData1",
                "local_1c": "initializedData2",
                "local_18": "initializedData3",
                "local_14": "initializedData4",
                "local_10": "localVar1",
                "local_c": "localVar2"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_data_08007648",
            "code": "\nvoid initializeData_08007648(undefined4 *data,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  char status;\n  uint shiftedValue;\n  int result;\n  undefined4 *nextData;\n  undefined4 local1;\n  undefined4 local2;\n  undefined4 local3;\n  undefined4 local4;\n  undefined4 local5;\n  undefined4 local6;\n  undefined4 local7;\n  \n  local1 = 0;\n  local2 = 0;\n  local3 = 0;\n  local4 = 0;\n  local5 = 0;\n  local6 = 0;\n  local7 = 0;\n  nextData = data + 1;\n  *data = 0x40000000;\n  data[1] = 0x40000000;\n  data[4] = value2;\n  shiftedValue = calculate_shifted_value_080075dc();\n  data[2] = shiftedValue / 1000000 - 1;\n  data[5] = 0;\n  data[3] = 0;\n  data[6] = 0;\n  data[0x13] = value4;\n  local1 = 0;\n  local3 = 0;\n  local5 = 0;\n  local4 = 0;\n  local6 = 0;\n  local7 = 0;\n  local2 = value3;\n  status = get_timer_ir_qn_status_08007544(*data);\n  process_data_08003f30((int)status,0xe,0);\n  status = get_timer_ir_qn_status_08007544(*data);\n  set_bit_value_08003f94((int)status);\n  result = initialize_function_08006060(nextData);\n  if ((result == 0) && (result = process_function_08006128(nextData,&local1,0), result == 0)) {\n    modify_flags_and_update_08006280(nextData,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_data_08007648",
                "param_1": "data",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "cVar1": "status",
                "uVar2": "shiftedValue",
                "iVar3": "result",
                "puVar4": "nextData",
                "local_34": "local1",
                "local_30": "local2",
                "local_2c": "local3",
                "local_28": "local4",
                "local_24": "local5",
                "local_20": "local6",
                "local_1c": "local7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_timer_080076e0",
            "code": "\nvoid initializeTimer_080076e0(undefined4 *timerParams)\n\n{\n  char qnStatus;\n  int memoryUpdateStatus;\n  \n  timerParams[0x13] = 0;\n  qnStatus = get_timer_ir_qn_status_08007544(*timerParams);\n  set_bit_at_index_08003fb0((int)qnStatus);\n  memoryUpdateStatus = update_and_reset_memory_08005df4(timerParams + 1);\n  if (memoryUpdateStatus == 0) {\n    update_bitwise_value_080062f4(timerParams + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_timer_080076e0",
                "param_1": "timerParams",
                "cVar1": "qnStatus",
                "iVar2": "memoryUpdateStatus"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_flags_08007708",
            "code": "\nvoid initialize_flags_08007708(void)\n\n{\n  initialize_flags_08007708_08007438();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_flags_08007708"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "update_memory_values_08007710",
            "code": "\nvoid update_memory_values_08007710(void)\n\n{\n  update_memory_values_08007710_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "update_memory_values_08007710"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtract_four_08007718(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_function_if_condition_met_0800771c",
            "code": "\nvoid executeFunctionIfConditionMet_0800771c(int inputParam)\n\n{\n  int returnValue;\n  \n  returnValue = getFunctionPointer();\n  if ((*(functionPointer **)(returnValue + 0x4c) != (functionPointer *)0x0) && (*(char *)(inputParam + 0x1c) == '\\x01')) {\n    (**(functionPointer **)(returnValue + 0x4c))(returnValue,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_function_if_condition_met_0800771c",
                "param_1": "inputParam",
                "iVar1": "returnValue",
                "subtract_four_08007718": "getFunctionPointer",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_optional_function_08007736",
            "code": "\nvoid execute_optional_function_08007736(void)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_optional_function_08007736",
                "iVar1": "result",
                "subtract_four_08007718": "get_function_pointer"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_four_bytes_08007744",
            "code": "\nundefined4 get_four_bytes_08007744(int input_value)\n\n{\n  return *(undefined4 *)(*(int *)(input_value + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_four_bytes_08007744",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "store_value_to_offset_0800774a",
            "code": "\nvoid storeValueToOffset_0800774a(int pointerToStruct,undefined4 valueToStore)\n\n{\n  *(undefined4 *)(*(int *)(pointerToStruct + 4) + 0x24) = valueToStore;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "store_value_to_offset_0800774a",
                "param_1": "pointerToStruct",
                "param_2": "valueToStore"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "set_int_value_at_offset_08007750",
            "code": "\nvoid setIntValueAtOffset_08007750(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(baseAddress + 4) + 0x34 + index * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "set_int_value_at_offset_08007750",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n\nvoid initializeI2C_080077b0(int *pinConfig,int param2,int param3,int param4,undefined param5)\n\n{\n  int pin1Value;\n  int pin2Value;\n  undefined4 flagAddress;\n  uint tempVar1;\n  uint tempVar2;\n  int *pinConfigPlusOne;\n  uint mask1;\n  uint mask2;\n  uint mask3;\n  undefined4 constant3;\n  \n  if (pinConfig != (int *)0x0) {\n    pinConfigPlusOne = pinConfig + 1;\n    pin1Value = find_value_or_zero_08007320((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n    pin2Value = find_value_or_zero_08007320((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n    if ((pin1Value == 0) || (pin2Value == 0)) {\n      initialize_and_parse_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pin1Value = compare_and_return_smaller_080073ae(pin1Value,pin2Value);\n      *pinConfig = pin1Value;\n      if (pin1Value == 0) {\n        initialize_and_parse_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pin1Value == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x1f;\n          *(undefined *)((int)pinConfig + 0x5b) = 0x20;\n          DAT_20000668 = pinConfigPlusOne;\n        }\n        if (*pinConfig == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x21;\n          *(undefined *)((int)pinConfig + 0x5b) = 0x22;\n          DAT_2000066c = pinConfigPlusOne;\n        }\n        flagAddress = set_flag_and_return_address_08006bb8((uint)((int)*(char *)((int)pinConfig + 0x59) << 0x18) >> 0x1c);\n        mask1 = 1 << ((int)*(char *)((int)pinConfig + 0x59) & 0xfU) & 0xffff;\n        tempVar1 = get_index_or_neg_one_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        tempVar2 = get_index_or_neg_one_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        mask2 = (tempVar1 >> 3 & 1) << 4 | tempVar2 & 7;\n        constant3 = 3;\n        pin1Value = get_index_or_neg_one_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        mask3 = (uint)(pin1Value << 0x1a) >> 0x1e;\n        pin1Value = get_index_or_neg_one_08007376((int)*(char *)((int)pinConfig + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        tempVar2 = 1;\n        tempVar1 = _DAT_40021018;\n        switch((uint)(pin1Value << 0x11) >> 0x19) {\n        case 1:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 2:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 3:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 4:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 5:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 6:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 7:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 8:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 9:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xb:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xc:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xd:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xe:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xf:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x11:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x12:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x13:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x14:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x15:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x16:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x17:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1b:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1c:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x21:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x22:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x23:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x24:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = tempVar2;\n        }\n        update_bits_080040e8(flagAddress,&mask1,tempVar1,tempVar2);\n        flagAddress = set_flag_and_return_address_08006bb8((uint)((int)*(char *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        mask1 = 1 << ((int)*(char *)(pinConfig + 0x16) & 0xfU) & 0xffff;\n        tempVar1 = get_index_or_neg_one_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        tempVar2 = get_index_or_neg_one_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        mask2 = (tempVar1 >> 3 & 1) << 4 | tempVar2 & 7;\n        constant3 = 3;\n        pin1Value = get_index_or_neg_one_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        mask3 = (uint)(pin1Value << 0x1a) >> 0x1e;\n        pin1Value = get_index_or_neg_one_08007376((int)*(char *)(pinConfig + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        tempVar2 = 1;\n        tempVar1 = _DAT_40021018;\n        switch((uint)(pin1Value << 0x11) >> 0x19) {\n        case 1:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 2:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 3:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 4:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 5:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 6:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 7:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 8:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 9:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xb:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xc:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xd:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xe:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xf:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x11:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x12:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x13:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x14:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x15:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x16:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x17:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1b:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1c:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x21:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x22:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x23:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x24:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = tempVar2;\n        }\n        update_bits_080040e8(flagAddress,&mask1,tempVar1,tempVar2);\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = param2;\n        pinConfig[3] = 0;\n        pinConfig[4] = param4;\n        pinConfig[7] = 0xff;\n        pinConfig[5] = param3;\n        pinConfig[6] = 0;\n        pinConfig[8] = 0;\n        pinConfig[9] = 0;\n        *(undefined *)((int)pinConfig + 0x41) = 0;\n        process_data_08003f30((int)*(char *)((int)pinConfig + 0x5a),0,1);\n        set_bit_value_08003f94((int)*(char *)((int)pinConfig + 0x5a));\n        process_data_08003f30((int)*(char *)((int)pinConfig + 0x5b),0,1);\n        set_bit_value_08003f94((int)*(char *)((int)pinConfig + 0x5b));\n        initialize_data_080045c0(pinConfigPlusOne);\n        *(undefined *)((int)pinConfig + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "pinConfig",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "pin1Value",
                "iVar2": "pin2Value",
                "uVar3": "flagAddress",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "piVar6": "pinConfigPlusOne",
                "local_38": "mask1",
                "local_34": "mask2",
                "local_30": "mask3",
                "local_2c": "constant3"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "validate_and_initialize_08007e74",
            "code": "\nint validateAndInitialize_08007e74(int input,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int globalData;\n  int result;\n  uint difference;\n  int status;\n  int offset;\n  undefined4 param4Value;\n  \n  param4Value = value3;\n  globalData = get_global_data_08003760();\n  difference = 0;\n  status = 2;\n  do {\n    offset = input + 4;\n    result = validate_and_initialize_08004728(offset,value1,value2,value3,param4Value);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_memory_value_0800542a(offset), result != 0x20 && (status == 0))) {\n        result = get_global_data_08003760();\n        difference = result - globalData;\n        if (difference < 0x65) {\n          result = get_value_at_offset_08005430(offset);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_value_at_offset_08005430(offset);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "validate_and_initialize_08007e74",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "globalData",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "offset",
                "uVar6": "param4Value"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copyData_08007ede(int dstAddr,int srcAddr,uint length)\n\n{\n  uint index;\n  \n  if (0x20 < length) {\n    return 2;\n  }\n  for (index = 0; index < length; index = index + 1 & 0xff) {\n    *(undefined *)(dstAddr + index + 0x68) = *(undefined *)(srcAddr + index);\n    *(char *)(dstAddr + 0x88) = *(char *)(dstAddr + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "dstAddr",
                "param_2": "srcAddr",
                "param_3": "length",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "check_param_validity_08007f0e",
            "code": "\nint checkParamValidity_08007f0e(int inputAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int globalDataStart;\n  int result;\n  uint difference;\n  int status;\n  int tempAddress;\n  undefined4 newParam4;\n  \n  newParam4 = param4;\n  globalDataStart = get_global_data_08003760();\n  difference = 0;\n  status = 2;\n  do {\n    tempAddress = inputAddress + 4;\n    result = process_params_080047f4(tempAddress,param2,param3,param4,newParam4);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_memory_value_0800542a(tempAddress), result != 0x20 && (status == 0))) {\n        result = get_global_data_08003760();\n        difference = result - globalDataStart;\n        if (difference < 0x65) {\n          result = get_value_at_offset_08005430(tempAddress);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_value_at_offset_08005430(tempAddress);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "check_param_validity_08007f0e",
                "param_1": "inputAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "globalDataStart",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "tempAddress",
                "uVar6": "newParam4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtractFour_08007f78(int number)\n\n{\n  return number + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "number"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_pointer_value_08007f7c",
            "code": "\nvoid updatePointerValue_08007f7c(int pointer,int value)\n\n{\n  if (pointer != 0) {\n    if (value != 0) {\n      *(int *)(pointer + 0x60) = value;\n      initializeNextPointer(pointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_pointer_value_08007f7c",
                "param_1": "pointer",
                "param_2": "value",
                "initialize_pointer_080049e0": "initializeNextPointer"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_pointer_and_initialize_08007f8e",
            "code": "\nvoid updatePointerAndInitialize_08007f8e(int pointer,int value)\n\n{\n  if (pointer != 0) {\n    if (value != 0) {\n      *(int *)(pointer + 100) = value;\n      initializePointer(pointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_pointer_and_initialize_08007f8e",
                "param_1": "pointer",
                "param_2": "value",
                "initialize_pointer_080049e0": "initializePointer"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_parameters_08007fa0",
            "code": "\nvoid process_parameters_08007fa0(int input_param,int flag,int check_value,undefined4 undefined_val)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (check_value == *(int *)(input_param + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      process_parameters_08007fa0_080048c8(input_param,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validate_function_08004954(input_param,result + 0x68,0x20,8,undefined_val);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_parameters_08007fa0",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "check_value",
                "param_4": "undefined_val",
                "iVar1": "result",
                "subtract_four_08007f78": "subtract_four"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_08007ff0",
            "code": "\nvoid initialize_and_execute_08007ff0(undefined4 input_param)\n\n{\n  int result;\n  \n  result = get_function_address();\n  if (((*(function_ptr **)(result + 0x60) != (function_ptr *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function_ptr **)(result + 0x60))(result + 0x68);\n  }\n  initialize_pointer(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_08007ff0",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_four_08007f78": "get_function_address",
                "code": "function_ptr",
                "initialize_pointer_080049e0": "initialize_pointer"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "check_and_initialize_pointer_08008020",
            "code": "\nvoid checkAndInitializePointer_08008020(undefined4 inputValue)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_pointer_080049e0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "check_and_initialize_pointer_08008020",
                "param_1": "inputValue",
                "iVar1": "result",
                "subtract_four_08007f78": "subtractFour"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "configure_uart_pins_08008078",
            "code": "\n\n\nvoid configureUARTPins_08008078(int *pinConfiguration)\n\n{\n  int uartPin1Value;\n  int uartPin2Value;\n  undefined4 uartPin1ValueFlag;\n  uint uartPin2Index;\n  uint uartPin1Mask;\n  uint uartPin2Mask;\n  uint uartPin2Bit;\n  undefined4 uartFlag;\n  \n  if (pinConfiguration != (int *)0x0) {\n    uartPin1Value = find_value_or_zero_08007320((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a864);\n    uartPin2Value = find_value_or_zero_08007320((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a81c);\n    if ((uartPin2Value == 0) || (uartPin1Value == 0)) {\n      initialize_and_parse_080098d8(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2Value);\n    }\n    else {\n      uartPin1Value = compare_and_return_smaller_080073ae(uartPin1Value);\n      *pinConfiguration = uartPin1Value;\n      if (uartPin1Value == 0) {\n        initialize_and_parse_080098d8(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1Value == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pinConfiguration + 0x11) = 0;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x25;\n        }\n        else if (uartPin1Value == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pinConfiguration + 0x11) = 1;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x26;\n        }\n        else if (uartPin1Value == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pinConfiguration + 0x11) = 2;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x27;\n        }\n        uartPin1ValueFlag = setUARTFlag((uint)((int)*(char *)((int)pinConfiguration + 0x59) << 0x18) >> 0x1c);\n        uartPin2Index = getUARTIndex((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a81c);\n        uartPin1Mask = 1 << (*(byte *)((int)pinConfiguration + 0x59) & 0xf) & 0xffff;\n        uartPin2Mask = (uartPin2Index >> 3 & 1) << 4 | uartPin2Index & 7;\n        uartPin2Bit = (uartPin2Index << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((uartPin2Index << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        uartFlag = 3;\n        updateBits(uartPin1ValueFlag,&uartPin1Mask);\n        uartPin1ValueFlag = setUARTFlag((uint)((int)*(char *)(pinConfiguration + 0x16) << 0x18) >> 0x1c);\n        uartPin2Index = getUARTIndex((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a864);\n        uartPin1Mask = 1 << (*(byte *)(pinConfiguration + 0x16) & 0xf) & 0xffff;\n        uartPin2Mask = (uartPin2Index >> 3 & 1) << 4 | uartPin2Index & 7;\n        uartPin2Bit = (uartPin2Index << 0x1a) >> 0x1e;\n        updateBits(uartPin1ValueFlag,&uartPin1Mask);\n        (&DAT_200006c0)[*(byte *)(pinConfiguration + 0x11)] = pinConfiguration + 1;\n        pinConfiguration[1] = *pinConfiguration;\n        pinConfiguration[2] = pinConfiguration[0x12];\n        pinConfiguration[3] = pinConfiguration[0x13];\n        pinConfiguration[4] = pinConfiguration[0x14];\n        pinConfiguration[5] = pinConfiguration[0x15];\n        pinConfiguration[6] = 0xc;\n        pinConfiguration[7] = 0;\n        pinConfiguration[8] = 0;\n        set_values_0800674e(pinConfiguration + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "configure_uart_pins_08008078",
                "param_1": "pinConfiguration",
                "iVar1": "uartPin1Value",
                "iVar2": "uartPin2Value",
                "uVar3": "uartPin1ValueFlag",
                "uVar4": "uartPin2Index",
                "local_20": "uartPin1Mask",
                "local_1c": "uartPin2Mask",
                "local_18": "uartPin2Bit",
                "local_14": "uartFlag",
                "set_flag_and_return_address_08006bb8": "setUARTFlag",
                "get_index_or_neg_one_08007376": "getUARTIndex",
                "update_bits_080040e8": "updateBits"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initializeUart_080084b0(void)\n\n{\n  int value1;\n  undefined4 value2;\n  \n  value1 = find_value_or_zero_08007320(2,&DAT_0800a864);\n  if (value1 != 0) {\n    value2 = find_value_or_zero_08007320(2,&DAT_0800a864);\n    DAT_20000075 = find_value_or_default_0800734a(value2,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    configure_uart_pins_08008078(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_and_validate_data_08008500",
            "code": "\nuint process_and_validate_data_08008500(undefined4 input_data,uint input_length)\n\n{\n  int global_data;\n  int value_found;\n  uint index;\n  \n  global_data = get_global_data_08003760();\n  value_found = find_value_or_zero_08007320(2,&DAT_0800a864);\n  if (value_found == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (value_found = find_value_or_zero_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != value_found))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_uart(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    value_found = process_data((&DAT_200006c0)[index],input_data,input_length & 0xffff,1000);\n    if (value_found == 0) {\n      return input_length;\n    }\n    value_found = get_global_data_08003760();\n  } while ((uint)(value_found - global_data) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_and_validate_data_08008500",
                "param_1": "input_data",
                "param_2": "input_length",
                "iVar1": "global_data",
                "iVar2": "value_found",
                "uVar3": "index",
                "initialize_uart_080084b0": "initialize_uart",
                "process_data_080067ac": "process_data"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_combination_080085b8",
            "code": "\nbool check_combination_080085b8(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_combination_080085b8",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_desirable_value_080085dc",
            "code": "\nbool isDesirableValue_080085dc(int inputValue)\n\n{\n  uint combinedBytesValue;\n  \n  combinedBytesValue = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytesValue & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_desirable_value_080085dc",
                "param_1": "inputValue",
                "uVar1": "combinedBytesValue"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "process_combination_08008600",
            "code": "\nundefined4 process_combination_08008600(int input,undefined *output,undefined4 param_3,undefined4 param_4)\n\n{\n  int combination_check_result;\n  \n  if (input == 0) {\n    return 0xffffffff;\n  }\n  combination_check_result = check_combination_080085b8();\n  if (combination_check_result == 0) {\n    *output = *(undefined *)(input + 0x45);\n    check_and_set_values_080068d6((&DAT_200006c0)[*(byte *)(input + 0x44)],input + 0x45,1,&DAT_200006c0,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "process_combination_08008600",
                "param_1": "input",
                "param_2": "output",
                "iVar1": "combination_check_result"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "process_combination_0800863c",
            "code": "\nvoid processCombination_0800863c(int input,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  uint index;\n  \n  if (input != 0) {\n    result = check_combination_080085b8();\n    if (result == 0) {\n      index = (uint)*(byte *)(input + 0x44);\n      *(undefined4 *)(&DAT_20000670 + index * 4) = value1;\n      *(int *)(&DAT_20000684 + index * 4) = input;\n      process_data_08003f30((int)*(char *)(input + 0x5a),0,1,index,value3);\n      set_bit_value_08003f94((int)*(char *)(input + 0x5a));\n      check_and_set_values_080068d6((&DAT_200006c0)[*(byte *)(input + 0x44)],input + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "process_combination_0800863c",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_data_08008694",
            "code": "\nvoid updateData_08008694(int dataPointer,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPointer != 0) {\n    byteValue = *(byte *)(dataPointer + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = dataPointer;\n    process_data_08003f30((int)*(char *)(dataPointer + 0x5a),0,2);\n    set_bit_value_08003f94((int)*(char *)(dataPointer + 0x5a));\n    initialize_data_0800688e((&DAT_200006c0)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 100) + (uint)*(ushort *)(dataPointer + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_element_index_080086e8",
            "code": "\nuint find_element_index_080086e8(int element)\n\n{\n  uint index;\n  \n  if (element == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (element == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_element_index_080086e8",
                "param_1": "element",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_element_function_0800870c",
            "code": "\nvoid executeElementFunction_0800870c(void)\n\n{\n  uint elementIndex;\n  \n  elementIndex = getElementIndex();\n  if (elementIndex < 5) {\n    (**(code **)(&DAT_20000670 + elementIndex * 4))(*(undefined4 *)(&DAT_20000684 + elementIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_element_function_0800870c",
                "uVar1": "elementIndex",
                "find_element_index_080086e8": "getElementIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "process_element_08008730",
            "code": "\nvoid processElement_08008730(void)\n\n{\n  uint elementIndex;\n  int returnValue;\n  int elementValue;\n  \n  elementIndex = find_element_index_080086e8();\n  elementValue = *(int *)(&DAT_200006ac + elementIndex * 4);\n  if ((elementIndex < 5) && (returnValue = (**(code **)(&DAT_20000698 + elementIndex * 4))(elementValue), returnValue != -1)) {\n    initialize_data_0800688e((&DAT_200006c0)[*(byte *)(elementValue + 0x44)],\n                 *(int *)(elementValue + 100) + (uint)*(ushort *)(elementValue + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "process_element_08008730",
                "uVar1": "elementIndex",
                "iVar2": "returnValue",
                "iVar3": "elementValue"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocate_memory_08008804(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocated_memory = DAT_200006d4;\n  if (DAT_200006d4 + size <= stack_boundary) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocated_memory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "stack_boundary"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_error_code_08008840",
            "code": "\nundefined4 get_error_code_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_error_code_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_memory_08008846",
            "code": "\nunsignedInt initializeMemory_08008846(unsignedInt param1,int param2)\n\n{\n  *(unsignedInt *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_memory_08008846",
                "param_1": "param1",
                "param_2": "param2",
                "undefined4": "unsignedInt"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "check_return_value_08008850",
            "code": "\nundefined4 check_return_value_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "check_return_value_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "get_default_value_08008854",
            "code": "\nundefined4 getDefaultValue_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "get_default_value_08008854"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "get_zero_08008858",
            "code": "\nuint32_t get_zero_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "get_zero_08008858",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_and_validate_data_0800885c",
            "code": "\nvoid process_and_validate_data_0800885c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_and_validate_data_0800885c_08008500(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_and_validate_data_0800885c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "initialize_return_status_0800887c",
            "code": "\nundefined4 initializeReturnStatus_0800887c(void)\n\n{\n  status 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "initialize_return_status_0800887c",
                "return": "status"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "retrieve_value_08008880",
            "code": "\nuint retrieve_value_08008880(uint input_value)\n\n{\n  bool is_less_than;\n  char result;\n  uint computed_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than = true;\n    }\n    else {\n      is_less_than = false;\n    }\n  }\n  else {\n    is_less_than = input_value < 0x3c;\n  }\n  if (is_less_than) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    result = (&DAT_0800a908)[input_value];\n  }\n  else {\n    result = -1;\n  }\n  if (result == -1) {\n    computed_value = 0;\n  }\n  else {\n    computed_value = find_value_or_zero_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return computed_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return computed_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return computed_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "retrieve_value_08008880",
                "param_1": "input_value",
                "bVar1": "is_less_than",
                "cVar2": "result",
                "uVar3": "computed_value"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_data_080088e0",
            "code": "\nvoid process_data_080088e0(uint input_param_1,uint input_param_2)\n\n{\n  int check_result;\n  int char_index;\n  \n  if (input_param_1 < 0x3c) {\n    char_index = (int)(char)(&DAT_0800a908)[input_param_1];\n  }\n  else {\n    char_index = -1;\n  }\n  if (char_index != -1) {\n    check_result = check_param_and_string_0800738a(char_index,&DAT_0800a6cc);\n    if (check_result == 0) {\n      process_data_080088e0_helper(input_param_1,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          input_param_2 = input_param_2 << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          input_param_2 = input_param_2 >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (input_param_2 < 0x80) {\n        process_param_helper(input_param_1,0);\n      }\n      else {\n        process_param_helper(input_param_1,1);\n      }\n    }\n    else {\n      check_result = get_bit_value(char_index,&DAT_200006d8);\n      if (check_result == 0) {\n        set_bit_in_array(char_index,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          input_param_2 = input_param_2 << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          input_param_2 = input_param_2 >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initialize_and_update_params(char_index,0x3e418,0xff,input_param_2,check_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "iVar1": "check_result",
                "iVar2": "char_index",
                "process_data_08008990": "process_data_helper",
                "process_param_08008a24": "process_param_helper",
                "get_bit_value_08006b28": "get_bit_value",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "initialize_and_update_params_08007118": "initialize_and_update_params"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "process_data_08008990",
            "code": "\nvoid processData_08008990(uint inputIndex,undefined4 flagType,undefined4 paramValue,undefined1 *dataPtr)\n\n{\n  int bitValue;\n  undefined1 *arrayPtr;\n  int value;\n  \n  if (inputIndex < 0x3c) {\n    value = (int)(char)(&DAT_0800a908)[inputIndex];\n    arrayPtr = &DAT_0800a908;\n  }\n  else {\n    value = -1;\n    arrayPtr = dataPtr;\n  }\n  if (value != -1) {\n    bitValue = getBitValue(value,&DAT_200006d8,paramValue,arrayPtr,dataPtr);\n    if (bitValue != 0) {\n      bitValue = checkParamAndString(value,&DAT_0800a6cc);\n      if (bitValue != 0) {\n        processData_08008990(value);\n      }\n      updateBitInArray(value,&DAT_200006d8);\n    }\n    switch(flagType) {\n    case 0:\n      initializeFlagAndAddress(value,0);\n      break;\n    case 1:\n      initializeFlagAndAddress(value,1,0);\n      break;\n    case 2:\n      initializeFlagAndAddress(value,0,1);\n      break;\n    case 3:\n      initializeFlagAndAddress(value,0,2);\n    }\n    setBitInArray(value,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "inputIndex",
                "param_2": "flagType",
                "param_3": "paramValue",
                "param_4": "dataPtr",
                "iVar1": "bitValue",
                "puVar2": "arrayPtr",
                "iVar3": "value",
                "initialize_flag_and_address_08007258": "initializeFlagAndAddress",
                "get_bit_value_08006b28": "getBitValue",
                "check_param_and_string_0800738a": "checkParamAndString",
                "process_data_080071e4": "processData",
                "update_bit_in_array_08006b5c": "updateBitInArray",
                "set_bit_in_array_08006b3e": "setBitInArray"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "process_param_08008a24",
            "code": "\nvoid processParam_08008a24(uint paramIndex,undefined4 value1,undefined4 value2,undefined1 *data)\n\n{\n  int bitValue;\n  undefined4 address;\n  undefined1 *ptrData;\n  uint bitMask;\n  \n  if (paramIndex < 0x3c) {\n    bitMask = (uint)(char)(&DAT_0800a908)[paramIndex];\n    ptrData = &DAT_0800a908;\n  }\n  else {\n    bitMask = 0xffffffff;\n    ptrData = data;\n  }\n  if ((bitMask != 0xffffffff) &&\n     (bitValue = get_bit_value_08006b28(bitMask,&DAT_200006ec,value2,ptrData,data), bitValue != 0)) {\n    address = map_param_to_address_08006b7c((bitMask << 0x18) >> 0x1c);\n    set_scaled_value_based_on_param_080072d8(address,1 << (bitMask & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "process_param_08008a24",
                "param_1": "paramIndex",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "bitValue",
                "uVar2": "address",
                "puVar3": "ptrData",
                "uVar4": "bitMask"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "is_value_set_08008a6c",
            "code": "\nchar isValueSet_08008a6c(uint value)\n\n{\n  char isSet;\n  int bitValue;\n  undefined4 address;\n  uint index;\n  \n  if (value < 0x3c) {\n    index = (uint)(char)(&DAT_0800a908)[value];\n  }\n  else {\n    index = 0xffffffff;\n  }\n  if (index == 0xffffffff) {\n    isSet = '\\0';\n  }\n  else {\n    bitValue = get_bit_value_08006b28(index,&DAT_200006ec);\n    if (bitValue == 0) {\n      isSet = '\\0';\n    }\n    else {\n      address = map_param_to_address_08006b7c((index << 0x18) >> 0x1c);\n      isSet = check_bit_wrapper_080072f0(address,1 << (index & 0xf) & 0xffff);\n    }\n  }\n  if (isSet != '\\0') {\n    isSet = '\\x01';\n  }\n  return isSet;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "is_value_set_08008a6c",
                "param_1": "value",
                "cVar1": "isSet",
                "iVar2": "bitValue",
                "uVar3": "address",
                "uVar4": "index"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_global_data_08008abc",
            "code": "\nvoid initialize_global_data_08008abc(void)\n\n{\n  initialize_global_data_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_global_data_08008abc"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_and_mask_08008afa",
            "code": "\nushort calculateAndMask_08008afa(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x134) + 0x40) - *(short *)(inputValue + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_and_mask_08008afa",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_value_and_index_08008b66",
            "code": "\nvoid updateValueAndIndex_08008b66(int input)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = process_combination_08008600(input,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(input + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = newValue;\n    *(ushort *)(input + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_value_and_index_08008b66",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_parameters_08008c20",
            "code": "\nvoid initializeParameters_08008c20(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_parameters_08008c20",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "configure_hardware_serial_08008c44",
            "code": "\nvoid configureHardwareSerial_08008c44(int serial_port,undefined4 baud_rate,byte serial_config)\n\n{\n  uint configuration_error;\n  byte serial_config_bits;\n  int uart_mode;\n  code *jump_table;\n  \n  *(undefined4 *)(serial_port + 0x11c) = baud_rate;\n  *(byte *)(serial_port + 0x140) = serial_config;\n  serial_config_bits = serial_config & 7;\n  if (serial_config_bits == 4) {\n    uart_mode = 7;\n  }\n  else if (serial_config_bits == 6) {\n    uart_mode = 8;\n  }\n  else if (serial_config_bits == 2) {\n    uart_mode = 6;\n  }\n  else {\n    uart_mode = 0;\n  }\n  if ((serial_config & 0x30) == 0x30) {\n    *(undefined4 *)(serial_port + 0x128) = 0x600;\n    uart_mode = uart_mode + 1;\n  }\n  else if ((serial_config & 0x20) == 0) {\n    *(undefined4 *)(serial_port + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x128) = 0x400;\n    uart_mode = uart_mode + 1;\n  }\n  if ((serial_config & 8) == 0) {\n    *(undefined4 *)(serial_port + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serial_port + 0x124) = 0x2000;\n  }\n  if (uart_mode == 8) {\n    *(undefined4 *)(serial_port + 0x120) = 0;\n  }\n  else if (uart_mode == 9) {\n    *(undefined4 *)(serial_port + 0x120) = 0x1000;\n  }\n  else {\n    uart_mode = 0;\n  }\n  if (uart_mode != 0) {\n    configure_uart_pins_08008078(serial_port + 0xd4);\n    process_combination_0800863c(serial_port + 0xd4,0x8008b67);\n    return;\n  }\n  jump_table = (code *)0x8008cee;\n  assertion_failed_handler_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (configuration_error < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[configuration_error];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0,configuration_error,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "configure_hardware_serial_08008c44",
                "param_1": "serial_port",
                "param_2": "baud_rate",
                "param_3": "serial_config",
                "extraout_r1": "configuration_error",
                "bVar1": "serial_config_bits",
                "iVar2": "uart_mode",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_byte_value_08008d00",
            "code": "\nvoid setByteValue_08008d00(int memoryAddress,uint index)\n\n{\n  undefined byteValue;\n  code *jumpTable;\n  \n  if (index < 0x3c) {\n    byteValue = (&DAT_0800a908)[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(memoryAddress + 0x12d) = byteValue;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_byte_value_08008d00",
                "param_1": "memoryAddress",
                "param_2": "index",
                "uVar1": "byteValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_at_offset_08008d18",
            "code": "\nvoid setByteAtOffset_08008d18(int baseAddress,uint offset)\n\n{\n  undefined byteValue;\n  \n  if (offset < 0x3c) {\n    byteValue = (&DAT_0800a908)[offset];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = byteValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_at_offset_08008d18",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "byteValue"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_data_structure_08008d30",
            "code": "\nundefined4 *\ninitialize_data_structure_08008d30(undefined4 *data_structure,undefined4 value,undefined4 offset,undefined4 byte_value)\n\n{\n  undefined default_value;\n  \n  data_structure[1] = 0;\n  data_structure[2] = 1000;\n  *data_structure = &PTR_LAB_08008ba4_1_0800aab8;\n  if (data_structure == (undefined4 *)&DAT_20000700) {\n    set_byte_value(&DAT_20000700,0,offset,&DAT_20000700,byte_value);\n    set_byte_at_offset(&DAT_20000700,1);\n  }\n  else {\n    default_value = find_value_or_default(value,&DAT_0800a81c);\n    *(undefined *)((int)data_structure + 0x12d) = default_value;\n    default_value = find_value_or_default(value,&DAT_0800a864);\n    *(undefined *)(data_structure + 0x4b) = default_value;\n  }\n  initialize_parameters(data_structure);\n  return data_structure;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_data_structure_08008d30",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "offset",
                "param_4": "byte_value",
                "uVar1": "default_value",
                "set_byte_value_08008d00": "set_byte_value",
                "set_byte_at_offset_08008d18": "set_byte_at_offset",
                "find_value_or_default_0800734a": "find_value_or_default",
                "initialize_parameters_08008c20": "initialize_parameters"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_if_param_is_1_08008d8c",
            "code": "\nvoid initialize_if_param_is_1_08008d8c(int param,int data,undefined4 structure,undefined4 param_4)\n\n{\n  if (param != 1) {\n    return;\n  }\n  if (data == 0xffff) {\n    initialize_data_structure(&DAT_20000700,0x40004400,structure,0xffff,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_if_param_is_1_08008d8c",
                "param_1": "param",
                "param_2": "data",
                "param_3": "structure",
                "initialize_data_structure_08008d30": "initialize_data_structure"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataPtr,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPtr = &DAT_0800ab0c;\n  *(undefined *)(dataPtr + 1) = value1;\n  *(undefined *)((int)dataPtr + 5) = value2;\n  *(undefined *)((int)dataPtr + 6) = value3;\n  *(undefined *)((int)dataPtr + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_condition_met_08008e14",
            "code": "\nvoid initialize_data_if_condition_met_08008e14(int input_1,int input_2)\n\n{\n  if ((input_1 == 1) && (input_2 == 0xffff)) {\n    initialize_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_condition_met_08008e14",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_08008ef4",
            "code": "\nint calculate_08008ef4(int start_value,int previous_value,int end_value,int start_output,int end_output)\n\n{\n  return (uint)((end_output - start_output) * (start_value - previous_value)) / (uint)(end_value - previous_value) + start_output;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_08008ef4",
                "param_1": "start_value",
                "param_2": "previous_value",
                "param_3": "end_value",
                "param_4": "start_output",
                "param_5": "end_output"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_and_process_system_08008f0e",
            "code": "\nvoid initialize_and_process_system_08008f0e(void)\n\n{\n  update_value(3);\n  initialize_and_process_system_08008f0e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_and_process_system_08008f0e",
                "update_value_08003f0c": "update_value",
                "initialize_and_process_system_080036a2": "initialize_and_process_system"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "execute_infinite_loop_08008f1c",
            "code": "\nvoid execute_infinite_loop_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_character_values();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "execute_infinite_loop_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_character_values_080022f8": "process_character_values"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_bits_set_08008f3c",
            "code": "\nchar count_bits_set_08008f3c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_bits_set_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initializeData_08008f78(int flag,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_unsigned_long_long_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_data_08009084",
            "code": "\nvoid processData_08009084(int inputData)\n\n{\n  int bitCount;\n  \n  if (*(int *)(inputData + 8) != 0) {\n    (**(code **)(inputData + 0xc))();\n    return;\n  }\n  handleData();\n  bitCount = countSetBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "inputData",
                "iVar1": "bitCount",
                "handle_data_0800a18c": "handleData",
                "count_bits_set_08008f3c": "countSetBits"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "bitCount",
                "count_bits_set_08008f3c": "countSetBits",
                "process_data_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_unsigned_long_long_080090c2",
            "code": "\nvoid shift_unsigned_long_long_080090c2(undefined4 source_ptr,undefined4 destination_ptr)\n\n{\n  shift_unsigned_long_long_080090c2_08009108(destination_ptr,source_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_unsigned_long_long_080090c2",
                "param_1": "source_ptr",
                "param_2": "destination_ptr"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "assertion_failed_handler_080090cc",
            "code": "\nvoid assertion_failed_handler_080090cc(undefined4 file_name,undefined4 line_number,char *assertion_message,undefined4 function_name)\n\n{\n  undefined4 file_name_ptr;\n  char *delimiter;\n  undefined8 processed_data;\n  undefined4 function_name_ptr;\n  \n  file_name_ptr = *(undefined4 *)(DAT_20000090 + 0xc);\n  function_name_ptr = function_name;\n  if (assertion_message == (char *)0x0) goto LAB_080090f0;\n  delimiter = \", function: \";\n  do {\n    parse_format_data_08009124(file_name_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,file_name,line_number\n                 ,delimiter,assertion_message,function_name_ptr);\n    processed_data = process_and_handle_data_08009b5c();\n    line_number = (undefined4)((ulonglong)processed_data >> 0x20);\n    file_name_ptr = (undefined4)processed_data;\nLAB_080090f0:\n    assertion_message = \"\";\n    delimiter = assertion_message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "assertion_failed_handler_080090cc",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "assertion_message",
                "param_4": "function_name",
                "uVar1": "file_name_ptr",
                "pcVar2": "delimiter",
                "uVar3": "processed_data",
                "uVar4": "function_name_ptr"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_unsigned_long_long_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftUnsignedLongLong_08009108(undefined4 flags,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_unsigned_long_long_08009108",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "parse_format_data_08009124",
            "code": "\nvoid parse_format_data_08009124(undefined4 format_data,undefined4 param_2,undefined4 param_3,undefined4 ptr_2)\n\n{\n  undefined4 stack_param_1;\n  undefined4 stack_param_2;\n  \n  stack_param_1 = param_3;\n  stack_param_2 = ptr_2;\n  parse_format_data_08009124_0800937c(DAT_20000090,format_data,param_2,&stack_param_1,format_data,&stack_param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "parse_format_data_08009124",
                "param_1": "format_data",
                "param_4": "ptr_2",
                "uStack_8": "stack_param_1",
                "uStack_4": "stack_param_2"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid allocateMemory_08009190(undefined4 param)\n\n{\n  allocateMemory_08009190Function(DAT_20000090,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "param_1": "param",
                "allocate_memory_08009270": "allocateMemoryFunction"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "insert_element_into_data_080091a0",
            "code": "\nvoid insert_element_into_data_080091a0(undefined4 element)\n\n{\n  insert_element_080091d8(DAT_20000090,element);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "insert_element_into_data_080091a0",
                "param_1": "element"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_bytes_to_destination_080091b0",
            "code": "\nvoid copy_bytes_to_destination_080091b0(int destination_offset,undefined *source_bytes,int num_bytes)\n\n{\n  undefined *end_of_source;\n  undefined *current_destination;\n  \n  current_destination = (undefined *)(destination_offset + -1);\n  end_of_source = source_bytes + num_bytes;\n  for (; source_bytes != end_of_source; source_bytes = source_bytes + 1) {\n    current_destination = current_destination + 1;\n    *current_destination = *source_bytes;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_bytes_to_destination_080091b0",
                "param_1": "destination_offset",
                "param_2": "source_bytes",
                "param_3": "num_bytes",
                "puVar1": "end_of_source",
                "puVar2": "current_destination"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_with_byte_080091c6",
            "code": "\nvoid fillMemoryWithByte_080091c6(undefined *destination,undefined byteToFill,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + size;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = byteToFill;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_with_byte_080091c6",
                "param_1": "destination",
                "param_2": "byteToFill",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "insert_element_080091d8",
            "code": "\nvoid insertElement_080091d8(undefined4 *array,int size,undefined4 input1,undefined4 input2)\n\n{\n  int **temp;\n  int **current;\n  int **next;\n  int *offset;\n  int **previous;\n  int **newElement;\n  \n  if (size == 0) {\n    return;\n  }\n  newElement = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newElement = (int **)((int)newElement + *(int *)(size + -4));\n  }\n  FUNC_08009f48();\n  next = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    newElement[1] = (int *)0x0;\n    current = temp;\n    DAT_2000098c = newElement;\n  }\n  else {\n    next = DAT_2000098c;\n    if (newElement < DAT_2000098c) {\n      current = (int **)*newElement;\n      next = (int **)((int)newElement + (int)current);\n      if (DAT_2000098c == next) {\n        offset = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        next = (int **)((int)offset + (int)current);\n        *newElement = (int *)next;\n      }\n      newElement[1] = (int *)DAT_2000098c;\n      DAT_2000098c = newElement;\n    }\n    else {\n      do {\n        previous = next;\n        next = (int **)previous[1];\n        if (next == (int **)0x0) break;\n      } while (next <= newElement);\n      current = (int **)*previous;\n      if ((int **)((int)previous + (int)current) == newElement) {\n        current = (int **)((int)current + (int)*newElement);\n        *previous = (int *)current;\n        if (next == (int **)((int)previous + (int)current)) {\n          offset = *next;\n          next = (int **)next[1];\n          current = (int **)((int)current + (int)offset);\n          *previous = (int *)current;\n          previous[1] = (int *)next;\n        }\n      }\n      else if (newElement < (int **)((int)previous + (int)current)) {\n        *array = 0xc;\n      }\n      else {\n        current = (int **)((int)newElement + (int)*newElement);\n        if (next == current) {\n          offset = *next;\n          next = (int **)next[1];\n          current = (int **)((int)offset + (int)*newElement);\n          *newElement = (int *)current;\n        }\n        newElement[1] = (int *)next;\n        previous[1] = (int *)newElement;\n      }\n    }\n  }\n  FUNC_08009f4a(array,current,next,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "insert_element_080091d8",
                "param_1": "array",
                "param_2": "size",
                "param_3": "input1",
                "param_4": "input2",
                "extraout_r1": "temp",
                "ppiVar1": "current",
                "ppiVar2": "next",
                "piVar3": "offset",
                "ppiVar4": "previous",
                "ppiVar5": "newElement"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *output_buffer,uint input_size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint block_size_difference;\n  uint *new_block;\n  uint new_buffer_size;\n  \n  new_buffer_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (new_buffer_size < 0xc) {\n    new_buffer_size = 0xc;\n  }\n  if (((int)new_buffer_size < 0) || (new_buffer_size < input_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    new_block = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_size_difference = *previous_block - new_buffer_size;\n      if (-1 < (int)block_size_difference) {\n        if (block_size_difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_size_difference;\n          *(uint *)((int)previous_block + block_size_difference) = new_buffer_size;\n          new_block = (uint *)((int)previous_block + block_size_difference);\n        }\n        goto LAB_080092d4;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = initialize_memory_allocation_08009918(output_buffer);\n    }\n    current_block = (uint *)initialize_memory_allocation_08009918(output_buffer,new_buffer_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (offset = initialize_memory_allocation_08009918(output_buffer,(int)new_block - (int)current_block), offset != -1)))) {\n      *new_block = new_buffer_size;\nLAB_080092d4:\n      FUNC_08009f4a(output_buffer);\n      new_buffer_size = (int)new_block + 0xbU & 0xfffffff8;\n      offset = new_buffer_size - (int)(new_block + 1);\n      if (offset != 0) {\n        *(int *)((int)new_block + offset) = -offset;\n        return new_buffer_size;\n      }\n      return new_buffer_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_08009f4a(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "previous_block",
                "uVar4": "block_size_difference",
                "puVar5": "new_block",
                "uVar6": "new_buffer_size"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int data_structure,byte input_byte,byte **data_ptrs)\n\n{\n  int temp_var_1;\n  byte *temp_var_2;\n  byte *temp_var_3;\n  uint return_value;\n  \n  temp_var_2 = data_ptrs[2] + -1;\n  data_ptrs[2] = temp_var_2;\n  if ((-1 < (int)temp_var_2) ||\n     (((int)data_ptrs[6] <= (int)temp_var_2 && (temp_var_2 = (byte *)(uint)input_byte, temp_var_2 != (byte *)0xa))))\n  {\n    temp_var_2 = *data_ptrs;\n    *data_ptrs = temp_var_2 + 1;\n    *temp_var_2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((data_structure != 0) && (*(int *)(data_structure + 0x18) == 0)) {\n    initialize_data_structure_08009d50();\n  }\n  if (data_ptrs == (byte **)&DAT_0800aba4) {\n    data_ptrs = *(byte ***)(data_structure + 4);\n  }\n  else if (data_ptrs == (byte **)&DAT_0800abc4) {\n    data_ptrs = *(byte ***)(data_structure + 8);\n  }\n  else if (data_ptrs == (byte **)&DAT_0800ab84) {\n    data_ptrs = *(byte ***)(data_structure + 0xc);\n  }\n  data_ptrs[2] = data_ptrs[6];\n  temp_var_3 = (byte *)(uint)*(ushort *)(data_ptrs + 3);\n  temp_var_1 = (int)temp_var_3 << 0x1c;\n  if (((temp_var_1 < 0) && (temp_var_3 = data_ptrs[4], temp_var_3 != (byte *)0x0)) ||\n     (temp_var_1 = process_data_08009a80(data_structure,data_ptrs,temp_var_1,temp_var_3,temp_var_2), temp_var_1 == 0)) {\n    return_value = (uint)input_byte;\n    temp_var_1 = (int)*data_ptrs - (int)data_ptrs[4];\n    if ((temp_var_1 < (int)data_ptrs[5]) || (temp_var_1 = process_input_0800932c_data_08009c7c(data_structure,data_ptrs), temp_var_1 == 0)) {\n      data_ptrs[2] = data_ptrs[2] + -1;\n      temp_var_2 = *data_ptrs;\n      *data_ptrs = temp_var_2 + 1;\n      *temp_var_2 = input_byte;\n      if ((byte *)(temp_var_1 + 1) != data_ptrs[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_ptrs + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      temp_var_1 = process_input_0800932c_data_08009c7c(data_structure,data_ptrs);\n      if (temp_var_1 == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "data_structure",
                "param_2": "input_byte",
                "param_3": "data_ptrs",
                "iVar1": "temp_var_1",
                "pbVar2": "temp_var_2",
                "pbVar3": "temp_var_3",
                "uVar4": "return_value"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_input_and_return_result_08009358",
            "code": "\nint process_input_and_return_result_08009358(undefined4 param_address,undefined4 input_value,undefined *data,int data_length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int current_length;\n  \n  end_of_data = data + data_length;\n  current_length = data_length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = process_input_0800932c(param_address,*data,input_value,data_length,current_length);\n    data_length = result + 1;\n    data = data + 1;\n  } while (data_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_input_and_return_result_08009358",
                "param_1": "param_address",
                "param_2": "input_value",
                "param_3": "data",
                "param_4": "data_length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "current_length"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "parse_format_data_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint parseFormatData_0800937c(int data_1,undefined4 *data_2,byte *inputString,int *output)\n\n{\n  int result;\n  int *pointer;\n  bool boolFlag;\n  byte *ptr1;\n  byte *ptr2;\n  int temp;\n  int counter;\n  int *outputPointer;\n  uint flags;\n  int integer1;\n  undefined4 integer2;\n  int integer3;\n  int totalLength;\n  byte character;\n  undefined constant1;\n  undefined constant2;\n  undefined constant3;\n  undefined4 constant4;\n  \n  outputPointer = output;\n  if ((data_1 != 0) && (*(int *)(data_1 + 0x18) == 0)) {\n    initialize_data_structure_08009d50();\n  }\n  if (data_2 == &DAT_0800aba4) {\n    data_2 = *(undefined4 **)(data_1 + 4);\n  }\n  else if (data_2 == (undefined4 *)&DAT_0800abc4) {\n    data_2 = *(undefined4 **)(data_1 + 8);\n  }\n  else if (data_2 == (undefined4 *)&DAT_0800ab84) {\n    data_2 = *(undefined4 **)(data_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(data_2 + 3) << 0x1c)) || (data_2[4] == 0)) &&\n     (counter = process_data_08009a80(data_1,data_2), counter != 0)) {\n    return -1;\n  }\n  totalLength = 0;\n  constant1 = 0x20;\n  constant2 = 0x30;\n  ptr1 = inputString;\nLAB_080093be:\n  ptr2 = ptr1;\n  if (*ptr2 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  ptr1 = ptr2 + 1;\n  if (*ptr2 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  counter = (int)ptr2 - (int)inputString;\n  if (counter != 0) {\n    result = process_input_and_return_result_08009358(data_1,data_2,inputString,counter);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(data_2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + counter;\n  }\n  if (*ptr2 == 0) goto LAB_08009568;\n  flags = 0;\n  integer3 = 0;\n  integer1 = -1;\n  integer2 = 0;\n  constant3 = 0;\n  constant4 = 0;\n  ptr1 = ptr2 + 1;\n  while( true ) {\n    counter = find_character_08009f2c(\"#-0+ \",*ptr1);\n    inputString = ptr1 + 1;\n    if (counter == 0) break;\n    flags = 1 << (counter + 0xf7ff54b0U & 0xff) | flags;\n    ptr1 = inputString;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    constant3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    constant3 = 0x2b;\n  }\n  if (*ptr1 == 0x2a) {\n    pointer = outputPointer + 1;\n    counter = *outputPointer;\n    outputPointer = pointer;\n    if (counter < 0) {\n      integer3 = -counter;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    boolFlag = false;\n    counter = integer3;\n    inputString = ptr1;\n    while( true ) {\n      if (9 < *inputString - 0x30) break;\n      counter = counter * 10 + (*inputString - 0x30);\n      boolFlag = true;\n      inputString = inputString + 1;\n    }\n    if (!boolFlag) goto LAB_080094a6;\n  }\n  integer3 = counter;\nLAB_080094a6:\n  if (*inputString == 0x2e) {\n    if (inputString[1] == 0x2a) {\n      inputString = inputString + 2;\n      pointer = outputPointer + 1;\n      integer1 = *outputPointer;\n      outputPointer = pointer;\n      if (integer1 < 0) {\n        integer1 = -1;\n      }\n    }\n    else {\n      boolFlag = false;\n      counter = 0;\n      integer1 = 0;\n      while( true ) {\n        inputString = inputString + 1;\n        if (9 < *inputString - 0x30) break;\n        counter = counter * 10 + (*inputString - 0x30);\n        boolFlag = true;\n      }\n      if (boolFlag) {\n        integer1 = counter;\n      }\n    }\n  }\n  counter = find_character_08009f2c(&DAT_0800ab56,*inputString,3);\n  if (counter != 0) {\n    inputString = inputString + 1;\n    flags = flags | 0x40 << (counter + 0xf7ff54aaU & 0xff);\n  }\n  character = *inputString;\n  inputString = inputString + 1;\n  counter = find_character_08009f2c(\"efgEFG\",character,6);\n  if (counter == 0) {\n    temp = parse_and_format_number_08009698(data_1,&flags,data_2,0x8009359,&outputPointer);\n    if (temp == -1) goto LAB_08009568;\n  }\n  else {\n    outputPointer = (int *)(((int)outputPointer + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + temp;\n  ptr1 = inputString;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "parse_format_data_0800937c",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "inputString",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "pointer",
                "bVar3": "boolFlag",
                "pbVar4": "ptr1",
                "pbVar5": "ptr2",
                "unaff_r9": "temp",
                "iVar6": "counter",
                "local_8c": "outputPointer",
                "local_88": "flags",
                "local_84": "integer1",
                "local_80": "integer2",
                "local_7c": "integer3",
                "local_74": "totalLength",
                "local_70": "character",
                "local_6f": "constant1",
                "local_6e": "constant2",
                "local_45": "constant3",
                "local_30": "constant4"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "calculate_output_length_080095a8",
            "code": "\nundefined4\ncalculate_output_length_080095a8(undefined4 input,uint *params,uint *output_length,undefined4 param_4,code *output_fn)\n\n{\n  int i;\n  int j;\n  uint max_length;\n  uint additional_length;\n  bool flag;\n  \n  max_length = params[4];\n  if ((int)params[4] < (int)params[2]) {\n    max_length = params[2];\n  }\n  *output_length = max_length;\n  if (*(char *)((int)params + 0x43) != '\\0') {\n    *output_length = max_length + 1;\n  }\n  if ((int)(*params << 0x1a) < 0) {\n    *output_length = *output_length + 2;\n  }\n  if ((*params & 6) == 0) {\n    for (i = 0; i < (int)(params[3] - *output_length); i = i + 1) {\n      j = (*output_fn)(input,param_4,(int)params + 0x19,1);\n      if (j == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_length = (uint)*(byte *)((int)params + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  additional_length = max_length;\n  if ((int)(*params << 0x1a) < 0) {\n    *(undefined *)((int)params + max_length + 0x43) = 0x30;\n    additional_length = max_length + 2;\n    *(undefined *)((int)params + max_length + 0x44) = *(undefined *)((int)params + 0x45);\n  }\n  i = (*output_fn)(input,param_4,(int)params + 0x43,additional_length);\n  if (i != -1) {\n    max_length = params[3];\n    flag = (*params & 6) != 4;\n    if (flag) {\n      max_length = 0;\n    }\n    additional_length = 0;\n    if (!flag) {\n      max_length = max_length - *output_length;\n    }\n    if (!flag) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    if ((int)params[4] < (int)params[2]) {\n      max_length = max_length + (params[2] - params[4]);\n    }\n    while( true ) {\n      if (max_length == additional_length) {\n        return 0;\n      }\n      i = (*output_fn)(input,param_4,(int)params + 0x1a,1);\n      if (i == -1) break;\n      additional_length = additional_length + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "calculate_output_length_080095a8",
                "param_1": "input",
                "param_2": "params",
                "param_3": "output_length",
                "param_5": "output_fn",
                "iVar1": "i",
                "iVar2": "j",
                "uVar3": "max_length",
                "uVar4": "additional_length",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "parse_and_format_number_08009698",
            "code": "\nuint parseAndFormatNumber_08009698(undefined4 result,uint *input,undefined4 size,code *outputFunction,uint **outputParams)\n\n{\n  byte typeByte;\n  int index;\n  uint *ptr;\n  int innerIndex;\n  char *hexArray;\n  uint number;\n  uint **outputParamsPtr;\n  char **stringPtr;\n  uint temp;\n  uint temp2;\n  char *formattedNum;\n  char *inputData;\n  uint resultInfo [2];\n  \n  typeByte = *(byte *)(input + 6);\n  inputData = (char *)((int)input + 0x43);\n  if (typeByte != 0x6e) {\n    if (typeByte < 0x6f) {\n      if (typeByte != 99) {\n        if (typeByte < 100) {\n          if (typeByte == 0) goto LAB_08009852;\n          if (typeByte != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)input + 0x45) = 0x58;\n          hexArray = \"0123456789ABCDEF\";\nLAB_080097e2:\n          number = *input;\n          ptr = *outputParams;\n          *outputParams = ptr + 1;\n          if (((number & 0x80) == 0) && ((int)(number << 0x19) < 0)) {\n            temp = (uint)*(ushort *)ptr;\n          }\n          else {\n            temp = *ptr;\n          }\n          if ((int)(number << 0x1f) < 0) {\n            *input = number | 0x20;\n          }\n          if (temp == 0) {\n            *input = *input & 0xffffffdf;\n          }\n          number = 0x10;\nLAB_08009778:\n          *(undefined *)((int)input + 0x43) = 0;\n        }\n        else {\n          if ((typeByte != 100) && (typeByte != 0x69)) goto LAB_080096c8;\n          temp = *input;\n          ptr = *outputParams;\n          if ((temp & 0x80) == 0) {\n            *outputParams = ptr + 1;\n            if ((temp & 0x40) == 0) goto LAB_080096e8;\n            temp = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *outputParams = ptr + 1;\nLAB_080096e8:\n            temp = *ptr;\n          }\n          if ((int)temp < 0) {\n            temp = -temp;\n            *(undefined *)((int)input + 0x43) = 0x2d;\n          }\n          hexArray = \"0123456789ABCDEF\";\n          number = 10;\n        }\n        temp2 = input[1];\n        input[2] = temp2;\n        formattedNum = inputData;\n        if ((int)temp2 < 0) {\n          if (temp != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)input + 0x42) = *hexArray;\n          formattedNum = (char *)((int)input + 0x42);\n        }\n        else {\n          *input = *input & 0xfffffffb;\n          if (temp == 0) {\n            if (temp2 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp2 = temp / number;\n              formattedNum = formattedNum + -1;\n              *formattedNum = hexArray[temp - number * temp2];\n              temp = temp2;\n            } while (temp2 != 0);\n          }\n        }\n        if (((number == 8) && ((int)(*input << 0x1f) < 0)) && ((int)input[1] <= (int)input[4]))\n        {\n          formattedNum[-1] = '0';\n          formattedNum = formattedNum + -1;\n        }\n        input[4] = (int)inputData - (int)formattedNum;\n        inputData = formattedNum;\n        goto LAB_080097be;\n      }\n      ptr = *outputParams;\n      *outputParams = ptr + 1;\n      *(char *)((int)input + 0x42) = (char)*ptr;\nLAB_08009728:\n      inputData = (char *)((int)input + 0x42);\n      temp = 1;\n    }\n    else {\n      if (typeByte != 0x73) {\n        if (typeByte < 0x74) {\n          if (typeByte == 0x6f) {\nLAB_0800974e:\n            temp = *input;\n            ptr = *outputParams;\n            if ((temp & 0x80) == 0) {\n              *outputParams = ptr + 1;\n              if ((temp & 0x40) == 0) goto LAB_0800975c;\n              temp = (uint)*(ushort *)ptr;\n            }\n            else {\n              *outputParams = ptr + 1;\nLAB_0800975c:\n              temp = *ptr;\n            }\n            if (typeByte == 0x6f) {\n              number = 8;\n            }\n            else {\n              number = 10;\n            }\n            hexArray = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (typeByte == 0x70) {\n            *input = *input | 0x20;\nLAB_0800970e:\n            hexArray = \"0123456789abcdef\";\n            *(undefined *)((int)input + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (typeByte == 0x75) goto LAB_0800974e;\n          if (typeByte == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)input + 0x42) = typeByte;\n        goto LAB_08009728;\n      }\n      stringPtr = (char **)*outputParams;\n      *outputParams = (uint *)(stringPtr + 1);\n      inputData = *stringPtr;\n      index = find_character_08009f2c(inputData,0,input[1]);\n      if (index != 0) {\n        input[1] = index - (int)inputData;\n      }\n      temp = input[1];\n    }\n    input[4] = temp;\n    *(undefined *)((int)input + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  temp = *input;\n  outputParamsPtr = (uint **)*outputParams;\n  number = input[5];\n  if ((temp & 0x80) == 0) {\n    *outputParams = (uint *)(outputParamsPtr + 1);\n    ptr = *outputParamsPtr;\n    if ((temp & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)number;\n  }\n  else {\n    *outputParams = (uint *)(outputParamsPtr + 1);\n    ptr = *outputParamsPtr;\nLAB_0800983e:\n    *ptr = number;\n  }\nLAB_08009852:\n  input[4] = 0;\nLAB_080097be:\n  index = calculate_output_length_080095a8(result,input,resultInfo,size,outputFunction);\n  if ((index == -1) || (index = (*outputFunction)(result,size,inputData,input[4]), index == -1)) {\nLAB_080097d2:\n    temp = 0xffffffff;\n  }\n  else {\n    if ((int)(*input << 0x1e) < 0) {\n      for (index = 0; index < (int)(input[3] - resultInfo[0]); index = index + 1) {\n        innerIndex = (*outputFunction)(result,size,(int)input + 0x19,1);\n        if (innerIndex == -1) goto LAB_080097d2;\n      }\n    }\n    temp = input[3];\n    if ((int)input[3] < (int)resultInfo[0]) {\n      temp = resultInfo[0];\n    }\n  }\n  return temp;\n}\n\n",
            "renaming": {
                "FUN_08009698": "parse_and_format_number_08009698",
                "param_1": "result",
                "param_2": "input",
                "param_3": "size",
                "param_4": "outputFunction",
                "param_5": "outputParams",
                "bVar1": "typeByte",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "innerIndex",
                "pcVar5": "hexArray",
                "uVar6": "number",
                "uVar9": "temp",
                "uVar10": "temp2",
                "pcVar11": "formattedNum",
                "pcVar12": "inputData",
                "local_24": "resultInfo",
                "ppuVar7": "outputParamsPtr",
                "ppcVar8": "stringPtr"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "initialize_and_parse_080098d8",
            "code": "\nvoid initialize_and_parse_080098d8(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int data_address;\n  undefined4 param_copy;\n  undefined4 stack_param1;\n  undefined4 stack_param2;\n  undefined4 stack_param3;\n  \n  data_address = DAT_20000090;\n  param_copy = input_param1;\n  stack_param1 = input_param2;\n  stack_param2 = input_param3;\n  stack_param3 = input_param4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_structure_08009d50(DAT_20000090);\n  }\n  parse_format_data_0800937c(data_address,*(undefined4 *)(data_address + 8),input_param1,&stack_param1,param_copy,&stack_param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "initialize_and_parse_080098d8",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "data_address",
                "uVar2": "param_copy",
                "uStack_c": "stack_param1",
                "uStack_8": "stack_param2",
                "uStack_4": "stack_param3"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "perform_memory_operation_08009908",
            "code": "\nint performMemoryOperation_08009908(int input,uint size)\n\n{\n  undefined4 memoryAddress;\n  int result;\n  uint sum;\n  \n  memoryAddress = DAT_20000090;\n  if (input != 0) {\n    if (size == 0) {\n      insertElement();\n      result = 0;\n    }\n    else {\n      sum = calculateSum();\n      result = input;\n      if ((sum < size) && (result = allocateMemory(memoryAddress,size), result != 0)) {\n        copyBytesToDestination(result,input,size);\n        insertElement(memoryAddress,input);\n      }\n    }\n    return result;\n  }\n  result = allocateMemory(DAT_20000090,size,size,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "perform_memory_operation_08009908",
                "param_1": "input",
                "param_2": "size",
                "uVar1": "memoryAddress",
                "iVar2": "result",
                "uVar3": "sum",
                "insert_element_080091d8": "insertElement",
                "calculate_sum_0800a154": "calculateSum",
                "allocate_memory_08009270": "allocateMemory",
                "copy_bytes_to_destination_080091b0": "copyBytesToDestination"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "initialize_memory_allocation_08009918",
            "code": "\nvoid initializeMemoryAllocation_08009918(int *resultPointer,undefined4 memorySize)\n\n{\n  int allocationResult;\n  \n  DAT_20000a38 = 0;\n  allocationResult = allocate_memory_08008804(memorySize);\n  if ((allocationResult == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "initialize_memory_allocation_08009918",
                "param_1": "resultPointer",
                "param_2": "memorySize",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *input_string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = input_string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    input_string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "input_string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *currentDestination;\n  \n  do {\n    currentDestination = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = currentDestination + 1;\n    *currentDestination = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != currentDestination + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "currentDestination"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int string,int length,undefined4 search_char,undefined4 special_char)\n\n{\n  int occurrence;\n  int last_occurrence;\n  \n  if (length != 0) {\n    last_occurrence = 0;\n    while (occurrence = find_character_08009938(string,length,search_char,string,special_char), occurrence != 0) {\n      string = occurrence + 1;\n      last_occurrence = occurrence;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = find_character_08009938();\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "string",
                "param_2": "length",
                "param_3": "search_char",
                "param_4": "special_char",
                "iVar1": "occurrence",
                "iVar2": "last_occurrence"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *str1,char *str2)\n\n{\n  char *current_char;\n  char *compared_char;\n  char *str2_char;\n  \n  if (*str1 == '\\0') {\n    if (*str2 != '\\0') {\n      str1 = (char *)0x0;\n    }\n    return str1;\n  }\n  do {\n    current_char = str1;\n    if (*current_char == '\\0') {\n      return (char *)0x0;\n    }\n    str2_char = str2 + -1;\n    compared_char = current_char + -1;\n    do {\n      str2_char = str2_char + 1;\n      if (*str2_char == '\\0') {\n        return current_char;\n      }\n      compared_char = compared_char + 1;\n      str1 = current_char + 1;\n    } while (*compared_char == *str2_char);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "str1",
                "param_2": "str2",
                "pcVar1": "current_char",
                "pcVar2": "compared_char",
                "pcVar3": "str2_char"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint processData_08009a80(undefined4 *outputValue,undefined4 *inputArray)\n\n{\n  int dataAddress;\n  uint result;\n  ushort element;\n  \n  dataAddress = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_structure_08009d50(DAT_20000090);\n  }\n  if (inputArray == &DAT_0800aba4) {\n    inputArray = *(undefined4 **)(dataAddress + 4);\n  }\n  else if (inputArray == (undefined4 *)&DAT_0800abc4) {\n    inputArray = *(undefined4 **)(dataAddress + 8);\n  }\n  else if (inputArray == (undefined4 *)&DAT_0800ab84) {\n    inputArray = *(undefined4 **)(dataAddress + 0xc);\n  }\n  element = *(ushort *)(inputArray + 3);\n  result = (uint)element;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputValue = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputArray[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputArray[0xd] != inputArray + 0x11) {\n          insertElement(outputValue);\n        }\n        inputArray[0xd] = 0;\n      }\n      *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) & 0xffdb;\n      inputArray[1] = 0;\n      *inputArray = inputArray[4];\n    }\n    *(ushort *)(inputArray + 3) = *(ushort *)(inputArray + 3) | 8;\n  }\n  if ((inputArray[4] == 0) && ((*(ushort *)(inputArray + 3) & 0x280) != 0x200)) {\n    allocateAndUpdateMemory(outputValue,inputArray);\n  }\n  element = *(ushort *)(inputArray + 3);\n  result = element & 1;\n  if ((element & 1) == 0) {\n    if (-1 < (int)((uint)element << 0x1e)) {\n      result = inputArray[5];\n    }\n    inputArray[2] = result;\n  }\n  else {\n    inputArray[2] = 0;\n    inputArray[6] = -inputArray[5];\n  }\n  if (inputArray[4] == 0) {\n    element = *(ushort *)(inputArray + 3);\n    result = (int)(short)element & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(inputArray + 3) = element | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "outputValue",
                "param_2": "inputArray",
                "iVar1": "dataAddress",
                "uVar2": "result",
                "uVar3": "element",
                "insert_element_080091d8": "insertElement",
                "allocate_and_update_memory_08009eac": "allocateAndUpdateMemory"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_element_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_update_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_and_handle_data_08009b5c",
            "code": "\nvoid processAndHandleData_08009b5c(void)\n\n{\n  uint *dataPointer;\n  int offset;\n  int *structPointer;\n  int *otherStructPointer;\n  uint ushortValue;\n  ushort ushortFlag;\n  int tempValue;\n  code *functionPointer;\n  int tempVar;\n  uint tempUIntValue;\n  code *jumpTableFunc;\n  bool boolValue;\n  undefined8 returnValue;\n  \n  process_data_08009fe8(6);\n  jumpTableFunc = (code *)0x8009b6b;\n  returnValue = infinite_loop_08008868(1);\n  structPointer = (int *)((ulonglong)returnValue >> 0x20);\n  dataPointer = (uint *)returnValue;\n  ushortFlag = *(ushort *)(structPointer + 3);\n  ushortValue = (uint)ushortFlag;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    offset = structPointer[4];\n    if (offset != 0) {\n      tempValue = ushortValue << 0x1e;\n      boolValue = tempValue != 0;\n      if (boolValue) {\n        tempValue = 0;\n      }\n      tempVar = *structPointer;\n      if (!boolValue) {\n        tempValue = structPointer[5];\n      }\n      *structPointer = offset;\n      structPointer[2] = tempValue;\n      for (tempVar = tempVar - offset; 0 < tempVar; tempVar = tempVar - tempValue) {\n        tempValue = (*(code *)structPointer[10])(dataPointer,structPointer[8],offset,tempVar);\n        if (tempValue < 1) {\n          ushortFlag = *(ushort *)(structPointer + 3);\n          goto LAB_08009c62;\n        }\n        offset = offset + tempValue;\n      }\n    }\n  }\n  else if (((0 < structPointer[1]) || (0 < structPointer[0x10])) &&\n          (functionPointer = (code *)structPointer[0xb], functionPointer != (code *)0x0)) {\n    tempUIntValue = *dataPointer;\n    *dataPointer = 0;\n    if ((ushortFlag & 0x1000) == 0) {\n      offset = (*functionPointer)(dataPointer,structPointer[8],ushortValue & 0x1000,1);\n      if ((offset == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(structPointer + 3) = *(ushort *)(structPointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTableFunc)();\n          return;\n        }\n        *dataPointer = tempUIntValue;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      offset = structPointer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(structPointer + 3) << 0x1d) < 0) &&\n       (offset = offset - structPointer[1], structPointer[0xd] != 0)) {\n      offset = offset - structPointer[0x10];\n    }\n    offset = (*(code *)structPointer[0xb])(dataPointer,structPointer[8],offset,0);\n    ushortFlag = *(ushort *)(structPointer + 3);\n    if ((offset == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(structPointer + 3) = ushortFlag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)(0xffffffff);\n      return;\n    }\n    structPointer[1] = 0;\n    *structPointer = structPointer[4];\n    if (((int)((uint)ushortFlag << 0x13) < 0) && ((offset != -1 || (*dataPointer == 0)))) {\n      structPointer[0x15] = offset;\n    }\n    otherStructPointer = (int *)structPointer[0xd];\n    *dataPointer = tempUIntValue;\n    if (otherStructPointer != (int *)0x0) {\n      if (otherStructPointer != structPointer + 0x11) {\n        insert_element_080091d8(dataPointer);\n      }\n      structPointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTableFunc)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunc)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_and_handle_data_08009b5c",
                "puVar1": "dataPointer",
                "iVar2": "offset",
                "piVar3": "structPointer",
                "piVar4": "otherStructPointer",
                "uVar5": "ushortValue",
                "uVar6": "ushortFlag",
                "iVar7": "tempValue",
                "pcVar8": "functionPointer",
                "iVar9": "tempVar",
                "uVar10": "tempUIntValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTableFunc",
                "bVar11": "boolValue",
                "uVar12": "returnValue"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_input_data_08009c7c",
            "code": "\nundefined4 processInputData_08009c7c(uint *inputParams,int *outputParams)\n\n{\n  undefined4 returnValue;\n  int paramLength;\n  int *tempPtr;\n  uint tempValue1;\n  ushort tempValue2;\n  int tempValue3;\n  undefined4 unaffValue1;\n  undefined4 unaffValue2;\n  code *functionPtr;\n  int tempVar;\n  uint tempVar2;\n  code *unrecoveredTable;\n  bool bVar10;\n  \n  if (outputParams[4] != 0) {\n    if ((inputParams != (uint *)0x0) && (inputParams[6] == 0)) {\n      initialize_data_structure_08009d50();\n    }\n    if (outputParams == &DAT_0800aba4) {\n      outputParams = (int *)inputParams[1];\n    }\n    else if (outputParams == (int *)&DAT_0800abc4) {\n      outputParams = (int *)inputParams[2];\n    }\n    else if (outputParams == (int *)&DAT_0800ab84) {\n      outputParams = (int *)inputParams[3];\n    }\n    if (*(short *)(outputParams + 3) != 0) {\n      tempValue2 = *(ushort *)(outputParams + 3);\n      tempValue1 = (uint)tempValue2;\n      if ((int)(tempValue1 << 0x1c) < 0) {\n        paramLength = outputParams[4];\n        if (paramLength != 0) {\n          tempValue3 = tempValue1 << 0x1e;\n          bVar10 = tempValue3 != 0;\n          if (bVar10) {\n            tempValue3 = 0;\n          }\n          tempVar = *outputParams;\n          if (!bVar10) {\n            tempValue3 = outputParams[5];\n          }\n          *outputParams = paramLength;\n          outputParams[2] = tempValue3;\n          for (tempVar = tempVar - paramLength; 0 < tempVar; tempVar = tempVar - tempValue3) {\n            tempValue3 = (*(code *)outputParams[10])(inputParams,outputParams[8],paramLength,tempVar,unaffValue1,unaffValue2);\n            if (tempValue3 < 1) {\n              tempValue2 = *(ushort *)(outputParams + 3);\n              goto LAB_08009c62;\n            }\n            paramLength = paramLength + tempValue3;\n          }\n        }\n      }\n      else if (((0 < outputParams[1]) || (0 < outputParams[0x10])) &&\n              (functionPtr = (code *)outputParams[0xb], functionPtr != (code *)0x0)) {\n        tempVar2 = *inputParams;\n        *inputParams = 0;\n        if ((tempValue2 & 0x1000) == 0) {\n          paramLength = (*functionPtr)(inputParams,outputParams[8],tempValue1 & 0x1000,1);\n          if ((paramLength == -1) && (tempValue1 = *inputParams, tempValue1 != 0)) {\n            if ((tempValue1 != 0x1d) && (tempValue1 != 0x16)) {\n              *(ushort *)(outputParams + 3) = *(ushort *)(outputParams + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*unrecoveredTable)();\n              return returnValue;\n            }\n            *inputParams = tempVar2;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          paramLength = outputParams[0x15];\n        }\n        if (((int)((uint)*(ushort *)(outputParams + 3) << 0x1d) < 0) &&\n           (paramLength = paramLength - outputParams[1], outputParams[0xd] != 0)) {\n          paramLength = paramLength - outputParams[0x10];\n        }\n        paramLength = (*(code *)outputParams[0xb])(inputParams,outputParams[8],paramLength,0);\n        tempValue2 = *(ushort *)(outputParams + 3);\n        if ((paramLength == -1) &&\n           ((0x1d < *inputParams || (-1 < (int)((0x20400001U >> (*inputParams & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(outputParams + 3) = tempValue2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*unrecoveredTable)(0xffffffff);\n          return returnValue;\n        }\n        outputParams[1] = 0;\n        *outputParams = outputParams[4];\n        if (((int)((uint)tempValue2 << 0x13) < 0) && ((paramLength != -1 || (*inputParams == 0)))) {\n          outputParams[0x15] = paramLength;\n        }\n        tempPtr = (int *)outputParams[0xd];\n        *inputParams = tempVar2;\n        if (tempPtr != (int *)0x0) {\n          if (tempPtr != outputParams + 0x11) {\n            insert_element_080091d8(inputParams);\n          }\n          outputParams[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*unrecoveredTable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*unrecoveredTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_input_data_08009c7c",
                "param_1": "inputParams",
                "param_2": "outputParams",
                "uVar1": "returnValue",
                "iVar2": "paramLength",
                "piVar3": "tempPtr",
                "uVar4": "tempValue1",
                "uVar5": "tempValue2",
                "iVar6": "tempValue3",
                "unaff_r4": "unaffValue1",
                "unaff_r5": "unaffValue2",
                "pcVar7": "functionPtr",
                "iVar8": "tempVar",
                "uVar9": "tempVar2",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredTable"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_element_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initializeDataStructure_08009cdc(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[6] = 0;\n  fillMemoryWithZeroes(dataStructure + 0x17,0,8);\n  dataStructure[8] = dataStructure;\n  dataStructure[9] = 0x800a021;\n  dataStructure[10] = 0x800a043;\n  dataStructure[0xb] = 0x800a07b;\n  dataStructure[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_with_byte_080091c6": "fillMemoryWithZeroes",
                "LAB_0800a09e_1": "label"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_and_initialize_memory_08009d24",
            "code": "\nundefined4 * allocate_and_initialize_memory_08009d24(undefined4 ptr_input,int count)\n\n{\n  undefined4 *ptr_result;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  ptr_result = (undefined4 *)allocate_memory_08009270(ptr_input,offset + 0x74);\n  if (ptr_result != (undefined4 *)0x0) {\n    *ptr_result = 0;\n    ptr_result[1] = count;\n    ptr_result[2] = ptr_result + 3;\n    fill_memory_with_byte_080091c6(ptr_result + 3,0,offset + 0x68);\n  }\n  return ptr_result;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_08009d24",
                "param_1": "ptr_input",
                "param_2": "count",
                "puVar1": "ptr_result",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_structure_08009d50",
            "code": "\nvoid initializeDataStructure_08009d50(undefined4 *structurePointer)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointerVar;\n  \n  if (structurePointer[6] == 0) {\n    structurePointer[0x12] = 0;\n    structurePointer[0x13] = 0;\n    structurePointer[0x14] = 0;\n    pointerVar = &DAT_20000094;\n    structurePointer[10] = &LAB_08009cd0_1;\n    if (structurePointer == &DAT_20000094) {\n      pointerVar = (undefined4 *)0x1;\n    }\n    if (structurePointer == &DAT_20000094) {\n      structurePointer[6] = pointerVar;\n    }\n    returnValue = initialize_data_structure_08009db0();\n    structurePointer[1] = returnValue;\n    returnValue = initialize_data_structure_08009db0(structurePointer);\n    structurePointer[2] = returnValue;\n    returnValue = initialize_data_structure_08009db0(structurePointer);\n    structurePointer[3] = returnValue;\n    initialize_data_structure_08009cdc(structurePointer[1],4,0);\n    initialize_data_structure_08009cdc(structurePointer[2],9,1);\n    initialize_data_structure_08009cdc(structurePointer[3],0x12,2);\n    structurePointer[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_structure_08009d50",
                "param_1": "structurePointer",
                "uVar1": "returnValue",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_structure_08009db0",
            "code": "\nint * initializeDataStructure_08009db0(undefined4 *errorCode,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPointer;\n  int *innerPointer;\n  int **dataStructurePointer;\n  \n  if (DAT_200000ac == 0) {\n    initialize_data_structure_08009d50(&DAT_20000094);\n  }\n  dataStructurePointer = (int **)&DAT_200000dc;\n  do {\n    innerPointer = dataStructurePointer[2];\n    currentPointer = dataStructurePointer[1];\n    while (currentPointer = (int *)((int)currentPointer + -1), -1 < (int)currentPointer) {\n      if (*(short *)(innerPointer + 3) == 0) {\n        *(undefined2 *)((int)innerPointer + 0xe) = 0xffff;\n        innerPointer[0x19] = 0;\n        *(undefined2 *)(innerPointer + 3) = 1;\n        *innerPointer = 0;\n        innerPointer[2] = 0;\n        innerPointer[1] = 0;\n        innerPointer[4] = 0;\n        innerPointer[5] = 0;\n        innerPointer[6] = 0;\n        fill_memory_with_byte_080091c6(innerPointer + 0x17,0,8,1,param4);\n        innerPointer[0xd] = 0;\n        innerPointer[0xe] = 0;\n        innerPointer[0x12] = 0;\n        innerPointer[0x13] = 0;\n        return innerPointer;\n      }\n      innerPointer = innerPointer + 0x1a;\n    }\n    if (*dataStructurePointer == (int *)0x0) {\n      currentPointer = (int *)allocate_and_initialize_memory_08009d24(errorCode,4);\n      *dataStructurePointer = currentPointer;\n      if (currentPointer == (int *)0x0) {\n        *errorCode = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataStructurePointer = (int **)*dataStructurePointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_structure_08009db0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPointer",
                "piVar2": "innerPointer",
                "ppiVar3": "dataStructurePointer"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_byte_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_memory_08009e64",
            "code": "\nundefined4 check_memory_08009e64(undefined4 result,int input,undefined4 *output,uint *flag)\n\n{\n  int status;\n  undefined4 value;\n  undefined stack [4];\n  uint temp;\n  \n  if ((*(short *)(input + 0xe) < 0) ||\n     (status = initialize_memory_0800a0ec(result,(int)*(short *)(input + 0xe),stack), status < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n      value = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *flag = (uint)((temp & 0xf000) == 0x2000);\n  }\n  value = 0x400;\nLAB_08009ea4:\n  *output = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_memory_08009e64",
                "param_1": "result",
                "param_2": "input",
                "param_3": "output",
                "param_4": "flag",
                "iVar1": "status",
                "uVar2": "value",
                "auStack_4c": "stack",
                "local_48": "temp"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "allocate_and_update_memory_08009eac",
            "code": "\nvoid allocateAndUpdateMemory_08009eac(int memoryStartAddress,int *memoryBlock)\n\n{\n  ushort updatedValue;\n  int allocatedMemory;\n  int localMemorySize;\n  int *updatedMemoryBlock;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryBlock + 3) << 0x1e)) {\n    localMemorySize = memoryStartAddress;\n    updatedMemoryBlock = memoryBlock;\n    updatedValue = check_memory_08009e64(memoryStartAddress,memoryBlock,&localMemorySize,&updatedMemoryBlock);\n    allocatedMemory = allocate_memory_08009270(memoryStartAddress,localMemorySize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(memoryStartAddress + 0x28) = &LAB_08009cd0_1;\n      *memoryBlock = allocatedMemory;\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x80;\n      memoryBlock[4] = allocatedMemory;\n      memoryBlock[5] = localMemorySize;\n      if ((updatedMemoryBlock != (int *)0x0) &&\n         (allocatedMemory = update_return_value_0800a110(memoryStartAddress,(int)*(short *)((int)memoryBlock + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryBlock + 3) = updatedValue | *(ushort *)(memoryBlock + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryBlock + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 2;\n  }\n  *memoryBlock = (int)memoryBlock + 0x47;\n  memoryBlock[4] = (int)memoryBlock + 0x47;\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "allocate_and_update_memory_08009eac",
                "param_1": "memoryStartAddress",
                "param_2": "memoryBlock",
                "uVar1": "updatedValue",
                "iVar2": "allocatedMemory",
                "local_18": "localMemorySize",
                "local_14": "updatedMemoryBlock"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_08009f2c",
            "code": "\nchar * find_character_08009f2c(char *string,char target_character,int string_length)\n\n{\n  char *current_character;\n  char *found_character;\n  \n  current_character = string;\n  do {\n    found_character = current_character;\n    if (found_character == string + string_length) {\n      return (char *)0x0;\n    }\n    current_character = found_character + 1;\n  } while (*found_character != target_character);\n  return found_character;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "target_character",
                "param_3": "string_length",
                "pcVar1": "current_character",
                "pcVar2": "found_character"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_data_08009fe8",
            "code": "\nint processData_08009fe8(uint input)\n\n{\n  int *dataPtr;\n  undefined4 returnStatus;\n  int index;\n  code *functionPtr;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 *dataPtrPtr;\n  \n  dataPtr = DAT_20000090;\n  dataPtrPtr = &DAT_20000090;\n  if (0x1f < input) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  index = DAT_20000090[0x11];\n  if ((index != 0) && (functionPtr = *(code **)(index + input * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + input * 4) = 0;\n      (*functionPtr)(input);\n    }\n    return 0;\n  }\n  returnStatus = thunk_initialize_return_status_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  index = initialize_data_0800886c(returnStatus,input,input,0,dataPtrPtr,unused1,unused2,unused3);\n  if ((index == -1) && (DAT_20000a38 != 0)) {\n    *dataPtr = DAT_20000a38;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "process_data_08009fe8",
                "param_1": "input",
                "piVar1": "dataPtr",
                "uVar2": "returnStatus",
                "iVar3": "index",
                "pcVar4": "functionPtr",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "puVar5": "dataPtrPtr"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_return_value_thunk_0800887c",
            "code": "\nundefined4 getReturnValue_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_value_0800a020",
            "code": "\nvoid updateValue_0800a020(undefined4 input,int data)\n\n{\n  int result;\n  uint newValue;\n  bool isValid;\n  \n  result = validate_and_set_value_0800a168(input,(int)*(short *)(data + 0xe));\n  isValid = -1 < result;\n  if (isValid) {\n    newValue = *(int *)(data + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isValid) {\n    *(uint *)(data + 0x54) = newValue;\n  }\n  if (!isValid) {\n    *(short *)(data + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_value_0800a020",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isValid"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_and_update_data_0800a042",
            "code": "\nvoid processAndUpdateData_0800a042(int *outputArray,int dataPointer,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 linkRegister;\n  \n  if ((int)((uint)*(ushort *)(dataPointer + 0xc) << 0x17) < 0) {\n    update_param_if_default_0800a130(outputArray,(int)*(short *)(dataPointer + 0xe),0,2);\n  }\n  *(ushort *)(dataPointer + 0xc) = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  result = process_and_validate_data_0800885c((int)*(short *)(dataPointer + 0xe),param3,param4,param4,param4,var1,\n                       var2,linkRegister);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *outputArray = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_and_update_data_0800a042",
                "param_1": "outputArray",
                "param_2": "dataPointer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "unaff_r4": "var1",
                "unaff_r5": "var2",
                "in_lr": "linkRegister"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_param_0800a07a",
            "code": "\nvoid updateParam_0800a07a(undefined4 param1,int param2)\n\n{\n  int updatedParam;\n  ushort newFlags;\n  bool isUpdatedParamNegative;\n  \n  updatedParam = update_param_if_default_0800a130(param1,(int)*(short *)(param2 + 0xe));\n  isUpdatedParamNegative = updatedParam == -1;\n  if (isUpdatedParamNegative) {\n    newFlags = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = updatedParam;\n    newFlags = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isUpdatedParamNegative) {\n    *(ushort *)(param2 + 0xc) = newFlags;\n  }\n  if (!isUpdatedParamNegative) {\n    *(ushort *)(param2 + 0xc) = newFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_param_0800a07a",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "updatedParam",
                "uVar2": "newFlags",
                "bVar3": "isUpdatedParamNegative"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "initialize_memory_0800a0ec",
            "code": "\nvoid initializeMemory_0800a0ec(int *output,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  \n  DAT_20000a38 = 0;\n  returnValue = initializeMemory_0800a0ecHelper(param2,param3,param3,0,param4);\n  if ((returnValue == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "initialize_memory_0800a0ec",
                "param_1": "output",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_memory_08008846": "initializeMemoryHelper",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "update_return_value_0800a110",
            "code": "\nvoid updateReturnValue_0800a110(int *output,undefined4 input)\n\n{\n  int checkResult;\n  \n  DAT_20000a38 = 0;\n  checkResult = check_return_value_08008850(input);\n  if ((checkResult == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "update_return_value_0800a110",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "update_param_if_default_0800a130",
            "code": "\nvoid updateParamIfDefault_0800a130(int *value,undefined4 defaultValue1,undefined4 defaultValue2,undefined4 defaultValue3)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = get_default_value_08008854(defaultValue1,defaultValue2,defaultValue3,defaultValue3,defaultValue3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *value = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "update_param_if_default_0800a130",
                "param_1": "value",
                "param_2": "defaultValue1",
                "param_3": "defaultValue2",
                "param_4": "defaultValue3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 result,int array)\n\n{\n  int index;\n  \n  index = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    index = index + *(int *)(array + index);\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "validate_and_set_value_0800a168",
            "code": "\nvoid validate_and_set_value_0800a168(int *output_ptr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = get_zero_08008858(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *output_ptr = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "validate_and_set_value_0800a168",
                "param_1": "output_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "handle_data_0800a18c",
            "code": "\nvoid handle_data_0800a18c(void)\n\n{\n  code *jump_table;\n  \n  jump_table = handle_data_0800a18c;\n  process_and_handle_data_0800a18c_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "handle_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 206249,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}