{
    "functions": {
        "FUN_08007246": {
            "renaming": {
                "FUN_08007246": "calculate_and_return_value_08007246",
                "calculate_new_value_of_pointer_08003748": "calculate_new_value_of_pointer",
                "do_nothing_and_return_08004046": "do_nothing_and_return",
                "do_nothing_08007244": "do_nothing"
            },
            "code": "void calculate_and_return_value_08007246(void)\n{\n  calculate_new_value_of_pointer();\n  do_nothing_and_return();\n  do_nothing();\n  return;\n}",
            "called": [
                "FUN_08007244",
                "FUN_08004046",
                "FUN_08003748"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007246",
            "calling": [],
            "imported": false,
            "current_name": "calculate_and_return_value_08007246"
        },
        "FUN_0800a042": {
            "renaming": {
                "FUN_0800a042": "process_user_input_0800a042",
                "param_1": "output",
                "param_2": "input_address",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "sVar1": "input_value",
                "puVar2": "PTR_DAT_0800a0c8",
                "iVar3": "validation_result",
                "unaff_r4": "unused_param_3",
                "unaff_r5": "unused_param_4",
                "in_lr": "unused_param_5",
                "process_data_0800a130": "process_data",
                "validate_user_input_wrapper_0800885c": "validate_user_input"
            },
            "code": "void process_user_input_0800a042(int *output, int input_address, undefined4 unused_param_1, undefined4 unused_param_2)\n{\n  short input_value = *(short *)(input_address + 0xe);\n  uint16_t flag_value = *(uint16_t *)(input_address + 0xc);\n  flag_value &= 0xefff;\n\n  if ((int)(flag_value << 0x17) < 0) {\n    process_data(output, (int)input_value, 0, 2);\n  }\n\n  int validation_result = validate_user_input((int)input_value, unused_param_1, unused_param_2, unused_param_2, unused_param_2);\n  if (validation_result == -1 && (*PTR_DAT_0800a0c8 != 0)) {\n    *output = *PTR_DAT_0800a0c8;\n  }\n}\n",
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a042",
            "calling": [],
            "imported": false,
            "current_name": "process_user_input_0800a042"
        },
        "FUN_08008694": {
            "renaming": {
                "FUN_08008694": "update_data_08008694",
                "param_1": "data_id",
                "param_2": "new_value",
                "bVar1": "data_index",
                "PTR_DAT_080086dc": "data_values",
                "PTR_DAT_080086e0": "data_ids",
                "set_bits_in_register_08003f30": "set_data_bits",
                "set_bit_in_array_08003f94": "set_data_flag",
                "check_and_set_values_0800688e": "check_and_update_values",
                "*(byte *)(param_1 + 0x44)": "*(byte *)(data_id + DATA_OFFSET)",
                "*(undefined4 *)(PTR_DAT_080086dc + (uint)bVar1 * 4)": "data_values[data_index]",
                "*(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4)": "data_ids[data_index]",
                "*(char *)(param_1 + 0x5a)": "*(char *)(data_id + 90)",
                "*(undefined4 *)(PTR_DAT_080086e4 + (uint)*(byte *)(param_1 + 0x44) * 4)": "data_ids[data_index]",
                "*(int *)(param_1 + 100)": "*(int *)(data_id + 100)",
                "*(ushort *)(param_1 + 0x6a)": "*(ushort *)(data_id + 106)"
            },
            "code": "void update_data_08008694(int data_id, int new_value) {\n  if (data_id != 0) {\n    int data_index = *(byte *)(data_id + DATA_OFFSET);\n    *(undefined4 *)(PTR_DAT_080086dc + (uint)bVar1 * 4) = new_value;\n    *(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4) = data_id;\n    set_data_bits(data_id);\n    set_data_flag(data_id);\n    check_and_update_values(*(int *)(PTR_DAT_080086e0 + (uint)bVar1 * 4), *(int *)(data_id + 100) + *(ushort *)(data_id + 106), 1);\n  }\n}",
            "called": [
                "FUN_0800688e",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008694",
            "calling": [],
            "imported": false,
            "current_name": "update_data_08008694"
        },
        "FUN_08002ce0": {
            "renaming": {
                "FUN_08002ce0": "initialize_data_08002ce0",
                "param_1": "data_start_address",
                "iVar1": "data_end_address",
                "set_param_to_zero_0800314e": "set_memory_to_zero",
                "initialize_data_structure_080032bc": "initialize_data_structure",
                "PTR_execute_function_08002c2c_1_08002d90": "PTR_execute_function_08002c2c_1_08002d90",
                "PTR_LAB_08002c40_1_08002d94": "PTR_LAB_08002c40_1_08002d94",
                "PTR_LAB_08002c7c_1_08002d98": "PTR_LAB_08002c7c_1_08002d98",
                "PTR_LAB_08002c90_1_08002d9c": "PTR_LAB_08002c90_1_08002d9c",
                "PTR_LAB_08002c54_1_08002da0": "PTR_LAB_08002c54_1_08002da0",
                "PTR_LAB_08002c68_1_08002da4": "PTR_LAB_08002c68_1_08002da4",
                "set_values_if_param2_is_113_08003366": "set_values_if_param2_is_113",
                "PTR_LAB_08002ca4_1_08002da8": "PTR_LAB_08002ca4_1_08002da8",
                "set_values_08003370": "set_values",
                "PTR_LAB_08002cb8_1_08002dac": "PTR_LAB_08002cb8_1_08002dac",
                "set_parameters_if_flag_08003346": "set_parameters_if_flag",
                "PTR_LAB_08002e1a_1_08002db0": "PTR_LAB_08002e1a_1_08002db0",
                "set_values_08003350": "set_values",
                "PTR_LAB_08002dea_1_08002db4": "PTR_LAB_08002dea_1_08002db4",
                "PTR_LAB_08002cd0_1_08002db8": "PTR_LAB_08002cd0_1_08002db8"
            },
            "code": "int initialize_data_08002ce0(int data_start_address){\n  int data_end_address = data_start_address + 0x44;\n  set_memory_to_zero(data_start_address + 0x40);\n  initialize_data_08002ce0_structure(data_end_address, data_start_address, 0x40);\n  *(undefined *)(data_start_address + 0xc4) = 0;\n  *(undefined4 *)(data_start_address + 200) = 0;\n  *(undefined *)(data_start_address + 0x1f8) = 0;\n  set_values_at_offset(data_end_address, 0xe0, PTR_execute_function_08002c2c_1_08002d90, 0);\n  set_values_at_offset(data_end_address, 0x90, PTR_LAB_08002c40_1_08002d94, 0);\n  set_values_at_offset(data_end_address, 0xc0, PTR_LAB_08002c7c_1_08002d98, 0);\n  set_values_at_offset(data_end_address, 0xd0, PTR_LAB_08002c90_1_08002d9c, 0);\n  set_values_at_offset(data_end_address, 0xf4, PTR_LAB_08002c54_1_08002da0, 0);\n  set_values_at_offset(data_end_address, 0xf5, PTR_LAB_08002c68_1_08002da4, 0);\n  set_values_if_param2_is_113(data_end_address, 0x71, PTR_LAB_08002ca4_1_08002da8, 0);\n  set_values(data_end_address, 0xf0, PTR_LAB_08002cb8_1_08002dac, 0);\n  set_parameters_if_flag(data_end_address, 0x79, PTR_LAB_08002e1a_1_08002db0, data_start_address);\n  set_values(data_end_address, 0xf9, PTR_LAB_08002dea_1_08002db4, data_start_address);\n  set_values(data_end_address, 0xff, PTR_LAB_08002cd0_1_08002db8, 0);\n  return data_start_address;\n}",
            "called": [
                "FUN_08003306",
                "FUN_08003350",
                "FUN_08003366",
                "FUN_080032bc",
                "FUN_08003346",
                "FUN_08003370",
                "FUN_0800314e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ce0",
            "calling": [
                "FUN_08002dbc"
            ],
            "imported": false,
            "current_name": "initialize_data_08002ce0"
        },
        "FUN_08005188": {
            "renaming": {
                "FUN_08005188": "process_input_08005188",
                "param_1": "input_ptr",
                "iVar1": "input_val",
                "uVar2": "flag2",
                "uVar3": "flag3",
                "uVar4": "flag1",
                "(int)param_1 + 0x3e": "input_char",
                "DAT_080052e8": "flag1",
                "DAT_080052d4": "flag1",
                "DAT_080052dc": "flag4",
                "DAT_080052ec": "flag5",
                "DAT_080052e4": "flag6",
                "process_input_080043a2": "process_input_a",
                "set_param_value_08004396": "set_param_value",
                "set_device_status_0800430c": "set_device_status",
                "set_flag_if_condition_met_08004d6c": "set_flag_if_condition_met",
                "process_data_08004e3c": "process_data",
                "process_input_08004b82": "process_input_b",
                "process_input_08004ccc": "process_input_c",
                "validate_and_return_input_08004ac2": "validate_and_return_input",
                "process_input_08005084": "process_input_d",
                "process_input_08004a76": "process_input_e",
                "increment_and_store_char_0800459c": "increment_and_store_char",
                "process_data_08004a24": "process_data_b",
                "increment_byte_at_pointer_if_short_not_zero_0800457c": "increment_byte_at_pointer_if_short_not_zero"
            },
            "code": "void process_input_08005188(int *input_ptr) {\n  int input_val = *input_ptr;\n  uint DAT_080052e8 = *(uint *)(input_val + 0x18);\n  uint flag2 = *(uint *)(input_val + 0x14);\n  uint flag3 = *(uint *)(input_val + 4);\n  char input_char = *(char *)((int)input_ptr + 0x3e);\n  \n  if (input_char == '\\x10' || input_char == '@') {\n    if ((flag2 & 0x10001) == 0 || (flag3 & 0x200) == 0) {\n      if ((DAT_080052e8 & flag2) == 0 || (flag3 & 0x200) == 0) {\n        if ((flag2 & DAT_080052d4) != 0 && (flag3 & 0x200) != 0) {\n          process_input_08005188_080043a2(input_ptr);\n        }\n      }\n      else {\n        set_param_value_08004396(input_ptr);\n      }\n    }\n    else {\n      set_device_status_0800430c(input_ptr);\n    }\n    if ((DAT_080052e8 & DAT_080052dc) == 0) {\n      if ((flag2 & DAT_080052ec) != 0 && (flag3 & 0x400) != 0 && (flag2 & DAT_080052e4) == 0) {\n        set_flag_if_condition_met_08004d6c(input_ptr);\n        return;\n      }\n      if ((flag2 & DAT_080052e4) != 0 && (flag3 & 0x200) != 0) {\n        process_data_08004e3c(input_ptr);\n        return;\n      }\n    }\n    else {\n      if ((flag2 & DAT_080052e0) != 0 && (flag3 & 0x400) != 0 && (flag2 & DAT_080052e4) == 0) {\n        process_input_08005188_08004b82(input_ptr);\n        return;\n      }\n      if ((flag2 & DAT_080052e4) != 0 && (flag3 & 0x200) != 0) {\n        process_input_08005188_08004ccc(input_ptr);\n        return;\n      }\n    }\n  }\n  else {\n    if ((flag2 & DAT_080052d4) != 0 && (flag3 & 0x200) != 0) {\n      validate_and_return_input_08004ac2();\n      return;\n    }\n    if ((flag2 & DAT_080052d8) != 0 && (flag3 & 0x200) != 0) {\n      process_input_08005188_08005084(input_ptr);\n      return;\n    }\n    if ((DAT_080052e8 & DAT_080052dc) == 0) {\n      if ((flag2 & DAT_080052ec) != 0 && (flag3 & 0x400) != 0 && (flag2 & DAT_080052e4) == 0) {\n        process_input_08005188_08004a76(input_ptr);\n        return;\n      }\n      if ((flag2 & DAT_080052e4) != 0 && (flag3 & 0x200) != 0) {\n        increment_and_store_char_0800459c(input_ptr);\n      }\n    }\n    else {\n      if ((flag2 & DAT_080052e0) != 0 && (flag3 & 0x400) != 0 && (flag2 & DAT_080052e4) == 0) {\n        process_data_08004a24(input_ptr);\n        return;\n      }\n      if ((flag2 & DAT_080052e4) != 0 && (flag3 & 0x200) != 0) {\n        increment_byte_at_pointer_if_short_not_zero_0800457c(input_ptr);\n        return;\n      }\n    }\n  }\n}",
            "called": [
                "FUN_08004ccc",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004396",
                "FUN_08005084",
                "FUN_0800459c",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_08004a76",
                "FUN_08004a24",
                "FUN_0800430c",
                "FUN_08004e3c",
                "FUN_080043a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005188",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08005188"
        },
        "FUN_08007244": {
            "renaming": {
                "FUN_08007244": "do_nothing_08007244"
            },
            "code": "\nvoid do_nothing_08007244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007244",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_08007244"
        },
        "FUN_08009db0": {
            "renaming": {
                "FUN_08009db0": "find_empty_slot_08009db0",
                "param_1": "error_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "fill_value",
                "piVar1": "empty_slot",
                "piVar2": "current_slot",
                "iVar3": "list_start",
                "ppiVar4": "list_ptr",
                "PTR_PTR_DAT_08009e24": "list_pointer"
            },
            "code": "int * find_empty_slot_08009db0(undefined4 *error_code, undefined4 param_2, undefined4 param_3, undefined4 fill_value)\\n\\\n    {\\n\\\n        int *empty_slot;\\n\\\n        int *current_slot;\\n\\\n        int list_start = *(int *)PTR_PTR_DAT_08009e24;\\n\\\n        if (*(int *)(list_start + 0x18) == 0)\\n\\\n        {\\n\\\n            initialize_list(list_start);\\n\\\n        }\\n\\\n        int **list_ptr = (int **)(list_start + 0x48);\\n\\\n        do\\n\\\n        {\\n\\\n            current_slot = list_ptr[2];\\n\\\n            empty_slot = list_ptr[1];\\n\\\n            while (empty_slot = (int *)((int)empty_slot + -1), -1 < (int)empty_slot)\\n\\\n            {\\n\\\n                if (*(short *)(current_slot + 3) == 0)\\n\\\n                {\\n\\\n                    *(undefined2 *)((int)current_slot + 0xe) = 0xffff;\\n\\\n                    current_slot[0x19] = 0;\\n\\\n                    *(undefined2 *)(current_slot + 3) = 1;\\n\\\n                    *current_slot = 0;\\n\\\n                    current_slot[2] = 0;\\n\\\n                    current_slot[1] = 0;\\n\\\n                    current_slot[4] = 0;\\n\\\n                    current_slot[5] = 0;\\n\\\n                    current_slot[6] = 0;\\n\\\n                    fill_memory_with_value(current_slot + 0x17, 0, 8, 1, fill_value);\\n\\\n                    current_slot[0xd] = 0;\\n\\\n                    current_slot[0xe] = 0;\\n\\\n                    current_slot[0x12] = 0;\\n\\\n                    current_slot[0x13] = 0;\\n\\\n                    return current_slot;\\n\\\n                }\\n\\\n                current_slot = current_slot + 0x1a;\\n\\\n            }\\n\\\n            if (*list_ptr == (int *)0x0)\\n\\\n            {\\n\\\n                empty_slot = (int *)allocate_and_initialize_memory_block(error_code, 4);\\n\\\n                *list_ptr = empty_slot;\\n\\\n                if (empty_slot == (int *)0x0)\\n\\\n                {\\n\\\n                    *error_code = 0xc;\\n\\\n                    return (int *)0x0;\\n\\\n                }\\n\\\n            }\\n\\\n            list_ptr = (int **)*list_ptr;\\n\\\n        } while(true);\\n\\\n    }",
            "called": [
                "FUN_08009d24",
                "FUN_080091c6",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009db0",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "find_empty_slot_08009db0",
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int iVar3;\n  int **ppiVar4;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009e24;\n  if (*(int *)(iVar3 + 0x18) == 0) {\n    FUNC_08009d50(iVar3);\n  }\n  ppiVar4 = (int **)(iVar3 + 0x48);\n  do {\n    piVar2 = ppiVar4[2];\n    piVar1 = ppiVar4[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar4 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_block_08009d24(param_1,4);\n      *ppiVar4 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar4 = (int **)*ppiVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_08002c2c": {
            "renaming": {
                "FUN_08002c2c": "execute_function_08002c2c",
                "param_1": "function_pointer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "pcVar1": "function_pointer",
                "PTR_DAT_08002c3c": "function_pointer_data"
            },
            "code": "void execute_function_08002c2c(code* function_pointer, int param1, int param2, int param3, int param4) {\n  if (function_pointer != NULL) {\n    (*function_pointer)(param1, param2, param3, function_pointer, param4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c2c",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_08002c2c"
        },
        "FUN_08001bf8": {
            "renaming": {
                "FUN_08001bf8": "insert_data_into_linked_list_at_end_08001bf8",
                "param_1": "data",
                "param_2": "next_node",
                "param_3": "prev_node",
                "param_4": "unused_param",
                "PTR_DAT_08001c04": "list_head"
            },
            "code": "void insert_data_into_linked_list_at_end_08001bf8(void* PTR_DAT_08001c04, int data, void* next_node, void* prev_node) { insert_data_into_linked_list_0800288c(PTR_DAT_08001c04, data, next_node, prev_node, prev_node); }",
            "called": [
                "FUN_0800288c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001bf8",
            "calling": [
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "insert_data_into_linked_list_at_end_08001bf8"
        },
        "FUN_080072f0": {
            "renaming": {
                "FUN_080072f0": "check_bit_in_pointer_offset_080072f0",
                "param_1": "ptr1",
                "param_2": "offset",
                "param_3": "bit_flag",
                "param_4": "ptr2",
                "is_param2_bit_set_in_ptr1_plus_8_080042d4": "is_bit_set_in_ptr_plus_offset"
            },
            "code": "void check_bit_in_pointer_offset_080072f0(void* ptr1, int offset, int bit_flag, void* ptr2) {\n    is_bit_set_in_ptr_plus_offset(ptr1, offset, bit_flag, ptr2, ptr2);\n    return;\n}",
            "called": [
                "FUN_080042d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072f0",
            "calling": [
                "FUN_08008a6c"
            ],
            "imported": false,
            "current_name": "check_bit_in_pointer_offset_080072f0"
        },
        "FUN_08000178": {
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "pcVar3": "current_char",
                "pcVar2": "next_char",
                "cVar1": "current_char_value"
            },
            "code": "char* find_end_of_string_08000178(char* input_string) {\n  char* current_char = input_string;\n  while (*current_char != '\\0') {\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000178",
            "calling": [
                "FUN_080032a2",
                "FUN_08002e44",
                "FUN_08008e7c"
            ],
            "imported": false,
            "current_name": "find_end_of_string_08000178"
        },
        "FUN_080069ec": {
            "renaming": {
                "FUN_080069ec": "process_input_080069ec",
                "param_1": "input",
                "iVar1": "value",
                "uVar2": "flag2",
                "puVar3": "input_ptr",
                "uVar4": "flag3",
                "uVar5": "flag1"
            },
            "code": "void process_input_080069ec(uint **input)\n{\n  uint *input_ptr = *input;\n  uint flag1 = *input_ptr;\n  uint flag2 = input_ptr[3];\n  \n  if (flag1 & 0x20 && flag2 & 0x20 && (flag1 & 0xf) == 0) {\n    process_string(input);\n    return;\n  }\n  \n  if ((flag1 & 0xf) == 0 || (input_ptr[5] & 1) == 0 && (flag2 & 0x120) == 0) {\n    if (flag1 & 0x80 && flag2 & 0x80) {\n      process_input_080069ec(input);\n      return;\n    }\n    if (flag1 & 0x40 && flag2 & 0x40) {\n      set_flag_and_update_values(input);\n    }\n  }\n  else {\n    if (flag1 & 1 && flag2 & 0x100) {\n      input[0xf] = (uint *)((uint)input[0xf] | 1);\n    }\n    if (flag1 & 4 && (input_ptr[5] & 1) == 0) {\n      input[0xf] = (uint *)((uint)input[0xf] | 2);\n    }\n    if (flag1 & 2 && (input_ptr[5] & 1) == 0) {\n      input[0xf] = (uint *)((uint)input[0xf] | 4);\n    }\n    if (flag1 & 8 && (input_ptr[5] & 1) == 0) {\n      input[0xf] = (uint *)((uint)input[0xf] | 8);\n    }\n    if (input[0xf] != (uint *)0x0) {\n      if (flag1 & 0x20 && flag2 & 0x20) {\n        process_string(input);\n      }\n      if ((uint)input[0xf] & 8 == 0 && (input_ptr[5] & 0x40) == 0) {\n        do_nothing(input);\n        input[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags_and_value_of_param(input);\n      input_ptr = *input;\n      if ((input_ptr[5] & 0x40) == 0) {\n        do_nothing(input);\n        return;\n      }\n      input_ptr[5] = input_ptr[5] & 0xffffffbf;\n      if (input[0xd] == (uint *)0x0) {\n        do_nothing(input);\n        return;\n      }\n      input[0xd][0xd] = (uint)LAB_08006b0c_1_08006b08;\n      int value = get_value(input[0xd]);\n      if (value != 0) {\n        (*(code *)input[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_0800694c",
                "FUN_080064cc",
                "FUN_08006932",
                "FUN_080064b0",
                "FUN_08004050",
                "FUN_0800877c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069ec",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080069ec"
        },
        "FUN_0800a168": {
            "renaming": {
                "FUN_0800a168": "processReturnValue_0800a168",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr",
                "iVar2": "returnVal"
            },
            "code": "void processReturnValue_0800a168(int *result, undefined4 arg1, undefined4 arg2, undefined4 arg3) {\n  undefined *ptr = PTR_DAT_0800a188;\n  *(undefined4 *)PTR_DAT_0800a188 = 0;\n  int returnVal = return_zero_08008858(arg1, arg2, arg3, arg3, arg3);\n  if ((returnVal == -1) && (*(int *)ptr != 0)) {\n    *result = *(int *)ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008858"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a168",
            "calling": [
                "FUN_0800a020"
            ],
            "imported": false,
            "current_name": "processReturnValue_0800a168"
        },
        "FUN_080067ac": {
            "renaming": {
                "FUN_080067ac": "validate_input_080067ac",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "data_length",
                "param_4": "param_4",
                "uVar1": "ptr_dat_value",
                "iVar2": "validation_result"
            },
            "code": "int validate_input_080067ac(int *input_ptr, ushort *data_ptr, int data_length, undefined4 param_4) {\n  undefined4 uVar1;\n  int validation_result;\n  \n  if (*(char *)((int)input_ptr + 0x39) == ' ') {\n    if (data_ptr == (ushort *)0x0) {\n      validation_result = 1;\n    }\n    else if (data_length == 0) {\n      validation_result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xe) == '\\x01') {\n      validation_result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xe) = 1;\n      input_ptr[0xf] = 0;\n      *(undefined *)((int)input_ptr + 0x39) = 0x21;\n      uVar1 = get_ptr_dat_value_08003760();\n      *(short *)(input_ptr + 9) = (short)data_length;\n      *(short *)((int)input_ptr + 0x26) = (short)data_length;\n      while (*(short *)((int)input_ptr + 0x26) != 0) {\n        *(short *)((int)input_ptr + 0x26) = *(short *)((int)input_ptr + 0x26) + -1;\n        if (input_ptr[2] == 0x1000) {\n          validation_result = check_validity_of_input_080066e8(input_ptr, 0x80, 0, uVar1, param_4);\n          if (validation_result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_ptr + 4) = *data_ptr & 0x1ff;\n          if (input_ptr[4] == 0) {\n            data_ptr = data_ptr + 1;\n          }\n          else {\n            data_ptr = (ushort *)((int)data_ptr + 1);\n          }\n        }\n        else {\n          validation_result = check_validity_of_input_080066e8(input_ptr, 0x80, 0, uVar1, param_4);\n          if (validation_result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_ptr + 4) = (uint)*(byte *)data_ptr;\n          data_ptr = (ushort *)((int)data_ptr + 1);\n        }\n      }\n      validation_result = check_validity_of_input_080066e8(input_ptr, 0x40, 0, uVar1, param_4);\n      if (validation_result == 0) {\n        *(undefined *)((int)input_ptr + 0x39) = 0x20;\n        *(undefined *)(input_ptr + 0xe) = 0;\n      }\n      else {\n        validation_result = 3;\n      }\n    }\n  }\n  else {\n    validation_result = 2;\n  }\n  return validation_result;\n}",
            "called": [
                "FUN_08003760",
                "FUN_080066e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080067ac",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "validate_input_080067ac"
        },
        "FUN_0800735a": {
            "renaming": {
                "FUN_0800735a": "find_character_in_string_0800735a",
                "param_1": "character",
                "param_2": "string",
                "*param_2": "*string",
                "0xffffffff": "0xffffffff",
                "*(undefined4 *)(param_2 + 8)": "*(unsigned int *)(string + 8)"
            },
            "code": "unsigned int find_character_in_string_0800735a(int character, char *string)\n{\n  while(*string != -1)\n  {\n    if (*string == character)\n    {\n      return *(unsigned int *)(string + 8);\n    }\n    string += 12;\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800735a",
            "calling": [
                "FUN_08007376",
                "FUN_0800735a"
            ],
            "imported": false,
            "current_name": "find_character_in_string_0800735a"
        },
        "FUN_08008c20": {
            "renaming": {
                "FUN_08008c20": "initialize_struct_08008c20",
                "param_1": "struct_ptr",
                "*(int *)(param_1 + 0x130)": "first_field_ptr",
                "param_1 + 0x11": "first_field_value",
                "*(undefined2 *)(param_1 + 0x134)": "second_field_ptr",
                "*(undefined2 *)(param_1 + 0x136)": "third_field_ptr",
                "*(int *)(param_1 + 0x138)": "fourth_field_ptr",
                "param_1 + 0x51": "fourth_field_value",
                "*(undefined2 *)(param_1 + 0x13c)": "fifth_field_ptr",
                "*(undefined2 *)(param_1 + 0x13e)": "sixth_field_ptr"
            },
            "code": "void initialize_struct_08008c20(int struct_ptr)\n{\n    int* first_field_ptr = (int*)(struct_ptr + 0x130);\n    *first_field_ptr = struct_ptr + 0x11;\n    \n    short* second_field_ptr = (short*)(struct_ptr + 0x134);\n    *second_field_ptr = 0;\n    \n    short* third_field_ptr = (short*)(struct_ptr + 0x136);\n    *third_field_ptr = 0;\n    \n    int* fourth_field_ptr = (int*)(struct_ptr + 0x138);\n    *fourth_field_ptr = struct_ptr + 0x51;\n    \n    short* fifth_field_ptr = (short*)(struct_ptr + 0x13c);\n    *fifth_field_ptr = 0;\n    \n    short* sixth_field_ptr = (short*)(struct_ptr + 0x13e);\n    *sixth_field_ptr = 0;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c20",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "initialize_struct_08008c20"
        },
        "FUN_08000a64": {
            "renaming": {
                "FUN_08000a64": "check_and_mark_characters_08000a64",
                "iVar1": "character_index",
                "uVar2": "index"
            },
            "code": "void check_and_mark_characters_08000a64() {\n  int character_index;\n  uint index;\n  for (index = 0; index < 0x3c; index = (index + 1) & 0xff) {\n    if (index < 0x3c) {\n      if (PTR_DAT_08000ad8[index] == -1) {\n        character_index = 0;\n      }\n      else {\n        character_index = find_character_index_080036ac();\n        if (character_index == 0) {\n          character_index = 0;\n        }\n        else {\n          character_index = find_character_index_080036ac((int)(char)PTR_DAT_08000ad8[index]);\n          if (character_index == 1) {\n            character_index = 0;\n          }\n          else {\n            character_index = is_character_present_at_index_0800738a((int)(char)PTR_DAT_08000ad8[index], PTR_DAT_08000adc);\n            if (character_index == 0) {\n              character_index = is_character_present_at_index_0800738a((int)(char)PTR_DAT_08000ad8[index], PTR_DAT_08000ae0);\n            }\n          }\n        }\n      }\n    }\n    else {\n      character_index = 0;\n    }\n    if (character_index != 0) {\n      FUNC_080005f8(index, 6);\n    }\n  }\n  *PTR_DAT_08000ae4 = 1;\n  initialize_data_with_value_08002a26(PTR_DAT_08000ae8);\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08002a26",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a64",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "check_and_mark_characters_08000a64"
        },
        "FUN_0800723c": {
            "renaming": {
                "FUN_0800723c": "get_and_print_data_value_0800723c",
                "get_ptr_dat_value_08003760": "get_data_value",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "void get_and_print_data_value_0800723c(void)\n{\n  get_data_value();\n  print_data_value();\n  return;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800723c",
            "calling": [
                "FUN_08008abc"
            ],
            "imported": false,
            "current_name": "get_and_print_data_value_0800723c"
        },
        "FUN_080043a2": {
            "renaming": {
                "FUN_080043a2": "process_input_080043a2",
                "param_1": "input",
                "puVar1": "flag",
                "DAT_0800463d": "char_value",
                "DAT_0800463e": "char_value_2",
                "PTR_DAT_0800462a": "flag_value",
                "PTR_DAT_08004630": "flag_value_2"
            },
            "code": "uint32_t process_input_080043a2(uint32_t **input)\n{\n    uint32_t *flag = input[11];\n    if ((*(char *)((int)input + 0x3d) == '\"') && ((input[20] != (uint32_t *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n        if ((input[20] == (uint32_t *)0x0) && (input[4] == (uint32_t *)0xc000)) {\n            **input = **input | 0x100;\n            input[20] = (uint32_t *)((int)input[20] + 1);\n        }\n        else {\n            uint32_t PTR_DAT_0800462a = *(uint16_t *)((int)input + 0x2a);\n            if (PTR_DAT_0800462a == 0) {\n                **input = **input | 0x200;\n            }\n            else if (PTR_DAT_0800462a == 1) {\n                if (flag == (uint32_t *)0xffff0000) {\n                    **input = **input & 0xfffffbff;\n                    flag = *input;\n                    if ((flag[1] & 0x800) == 0) {\n                        *flag = *flag | 0x200;\n                    }\n                    else {\n                        *flag = *flag & 0xfffffbff;\n                    }\n                }\n                else if (((flag == (uint32_t *)0x4) || (flag == (uint32_t *)0x8)) || (input[12] == (uint32_t *)0x12)) {\n                    **input = **input & 0xfffffbff;\n                    **input = **input | 0x200;\n                }\n                else if (input[11] == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input & 0xfffffbff;\n                }\n            }\n            else if (PTR_DAT_0800462a == 2) {\n                if (input[11] == (uint32_t *)0x2) {\n                    **input = **input | 0x400;\n                }\n                else {\n                    **input = **input | 0x800;\n                    **input = **input & 0xfffffbff;\n                }\n                flag = *input;\n                if ((flag[1] & 0x800) != 0) {\n                    flag[1] = flag[1] | 0x1000;\n                }\n            }\n            else {\n                **input = **input | 0x400;\n                flag = *input;\n                if ((flag[1] & 0x800) != 0) {\n                    flag[1] = flag[1] | 0x1000;\n                }\n            }\n            input[20] = (uint32_t *)0x0;\n        }\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043a2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_080043a2"
        },
        "FUN_0800694c": {
            "renaming": {
                "FUN_0800694c": "process_string_0800694c",
                "param_1": "param_array",
                "pbVar1": "output_byte_ptr",
                "sVar2": "count",
                "puVar3": "output_char_ptr",
                "first_char": "first_char",
                "section": "section",
                "data": "data",
                "data_shifted": "data_shifted",
                "output_ptr": "output_ptr",
                "output_length": "output_length"
            },
            "code": "int process_string_0800694c(int *param_array){\n  char first_char = *(char *)((int)param_array + 0x3a);\n  if (first_char != '\"') {\n    return 2;\n  }\n  int section = param_array[2];\n  int data = *(int *)(*param_array + 4);\n  int data_shifted = data << 0x17;\n  int *output_ptr = (int *)param_array[10];\n  int output_length = *output_ptr;\n  short count = *(short *)((int)param_array + 0x2e);\n  count--;\n  *(short *)((int)param_array + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*param_array + 0xc) &= 0xffffffdf;\n  *(uint *)(*param_array + 0xc) &= 0xfffffeff;\n  *(uint *)(*param_array + 0x14) &= 0xfffffffe;\n  *(char *)((int)param_array + 0x3a) = ' ';\n  execute_function_0800870c();\n  return 0;\n}\n",
            "called": [
                "FUN_0800870c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800694c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_string_0800694c"
        },
        "FUN_08006280": {
            "renaming": {
                "FUN_08006280": "update_flags_and_bits_08006280",
                "param_1": "data_ptr",
                "param_2": "bit_pos",
                "puVar1": "data",
                "DAT_080062f0": "PTR_080062f0"
            },
            "code": "int update_flags_and_bits_08006280(uint **data_ptr, uint bit_pos)\n{\n    uint *data = *data_ptr;\n    switch(bit_pos) {\n        case 0:\n            data[3] |= 2;\n            break;\n        case 4:\n            data[3] |= 4;\n            break;\n        case 8:\n            data[3] |= 8;\n            break;\n        case 12:\n            data[3] |= 0x10;\n    }\n    update_bit_in_uint_array_08006262(data_ptr, bit_pos, 1);\n    if (data == DAT_080062f0) {\n        data[0x11] |= 0x8000;\n    }\n    **data_ptr |= 1;\n    return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006280",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "update_flags_and_bits_08006280"
        },
        "FUN_08007258": {
            "renaming": {
                "FUN_08007258": "set_flag_and_decode_08007258",
                "param_1": "flag",
                "param_2": "param_2",
                "param_3": "param_3",
                "uVar1": "flag_val",
                "local_20": "bit_mask",
                "local_1c": "param_2_loc",
                "local_18": "param_3_loc",
                "local_14": "mem_offset",
                "DAT_080072d0": "mem_loc",
                "DAT_080072d4": "mem_loc2"
            },
            "code": "void set_flag_and_decode_08007258(uint8_t flag, uint32_t param_2, uint32_t param_3)\n{\n  uint8_t flag_val = set_flag(flag);\n  uint16_t bit_mask = (1 << (flag & 0xf)) & 0xffff;\n  uint32_t mem_offset = 0x18;\n  uint32_t* DAT_080072d0 = &mem_offset;\n  *DAT_080072d0 |= 1;\n  uint32_t* DAT_080072d4 = (uint32_t*)0x080072d4 + 4;\n  if ((flag - 0xd & 0xff) < 2) {\n    *DAT_080072d4 &= 0xf8ffffff;\n    *DAT_080072d4 |= 0x4000000;\n  }\n  if ((flag == 0xf) || (flag == 0x13) || (flag == 0x14)) {\n    *DAT_080072d4 &= 0xf8ffffff;\n    *DAT_080072d4 |= 0x2000000;\n  }\n  uint32_t* param_2_loc = &param_2;\n  uint32_t* param_3_loc = &param_3;\n  decode(flag_val, &bit_mask);\n}\n",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007258",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_flag_and_decode_08007258"
        },
        "FUN_0800a0ec": {
            "renaming": {
                "FUN_0800a0ec": "set_memory_permissions_and_check_return_value_0800a0ec",
                "param_1": "return_value",
                "param_2": "address",
                "param_3": "size",
                "param_4": "protection",
                "puVar1": "pointer_to_pointer_to_data",
                "iVar2": "return_code"
            },
            "code": "void set_memory_permissions_and_check_return_value_0800a0ec(int *return_value, void *address, size_t size, int protection, int flags){\n    void **pointer_to_pointer_to_data = PTR_DAT_0800a10c;\n    **pointer_to_pointer_to_data = NULL;\n    int return_code = set_memory_permissions_08008846(address, size, size, protection, flags);\n    if(return_code == -1 && **pointer_to_pointer_to_data != NULL){\n        *return_value = **pointer_to_pointer_to_data;\n    }\n    return;\n}",
            "called": [
                "FUN_08008846"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a0ec",
            "calling": [
                "FUN_08009e64"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_and_check_return_value_0800a0ec"
        },
        "FUN_08008df8": {
            "renaming": {
                "FUN_08008df8": "initialize_data_structure_08008df8",
                "param_1": "ptr_data_structure",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "param_5": "data_4"
            },
            "code": "void initialize_data_structure_08008df8(undefined4 *ptr_data_structure, undefined data_1, undefined data_2, undefined data_3, undefined data_4)\n{\n    *ptr_data_structure = PTR_PTR_LAB_08008dbe_1_08008e10;\n    *(undefined *)(ptr_data_structure + 1) = data_1;\n    *(undefined *)((int)ptr_data_structure + 5) = data_2;\n    *(undefined *)((int)ptr_data_structure + 6) = data_3;\n    *(undefined *)((int)ptr_data_structure + 7) = data_4;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008df8",
            "calling": [
                "FUN_08008e14"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_08008df8"
        },
        "FUN_08009f4a": {
            "renaming": {
                "FUN_08009f4a": "do_nothing_08009f4a"
            },
            "code": "\nvoid do_nothing_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f4a",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f4a"
        },
        "FUN_08006c7c": {
            "renaming": {
                "FUN_08006c7c": "find_character_index_08006c7c",
                "param_1": "character",
                "param_2": "string",
                "param_3": "string_length",
                "param_4": "index",
                "iVar1": "index_of_character",
                "uVar2": "shifted_index"
            },
            "code": "int find_character_index_08006c7c(char character, char *string, int string_length, int index, int index2) {\n  int index_of_character = find_character_or_return_minus_one_08007376(character, string, string_length, index, index2);\n  uint shifted_index = (uint)(index_of_character << 0xc) >> 0x1b;\n  if (shifted_index == 3) {\n    return 8;\n  }\n  if (shifted_index != 4) {\n    if (shifted_index != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c7c",
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_character_index_08006c7c"
        },
        "FUN_08006b5c": {
            "renaming": {
                "FUN_08006b5c": "set_bit_to_zero_08006b5c",
                "param_1": "bit_position",
                "param_2": "array",
                "uVar1": "array_index",
                "*(uint *)(param_2 + uVar1 * 4)": "array_element",
                "*(uint *)(param_2 + uVar1 * 4) & ~(1 << (param_1 & 0xf))": "*array_element &= ~mask",
                "mask": "mask"
            },
            "code": "void set_bit_to_zero_08006b5c(uint bit_position, int* array) {\n  uint array_index = (bit_position << 0x18) >> 0x1c;\n  uint* array_element = (uint*)(array + array_index * 4);\n  uint mask = 1 << (bit_position & 0xf);\n  *array_element &= ~mask;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b5c",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_to_zero_08006b5c"
        },
        "FUN_08007376": {
            "renaming": {
                "FUN_08007376": "find_character_or_return_minus_one_08007376",
                "param_1": "character",
                "uVar1": "character_index",
                "find_character_in_string_0800735a": "find_character_in_string"
            },
            "code": "int find_character_or_return_minus_one_08007376(int character) {\n  if (character == -1) {\n    return -1;\n  }\n  int character_index = find_character_in_string();\n  return character_index;\n}",
            "called": [
                "FUN_0800735a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007376",
            "calling": [
                "FUN_080077b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08006e68",
                "FUN_08006c7c",
                "FUN_08006c60",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_character_or_return_minus_one_08007376"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "trigger_software_interrupt_08000188",
                "PTR_": "<unchanged>",
                "DAT_": "<unchanged>"
            },
            "code": "void trigger_software_interrupt_08000188(void)\n{\n  software_interrupt(SOFTWARE_INTERRUPT_CODE);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [
                "FUN_0800018c"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_08000188"
        },
        "FUN_08004f3c": {
            "renaming": {
                "FUN_08004f3c": "execute_08004f3c",
                "param_1": "params",
                "iVar1": "value",
                "puVar2": "param_ptr2",
                "puVar3": "param_ptr1"
            },
            "code": "void execute_08004f3c(uint **params)\n{\n  int value;\n  uint *param_ptr1;\n  uint *param_ptr2;\n  \n  if (*(byte *)((int)params + 0x3d) - 0x29 < 2)\n  {\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x28;\n  }\n  else\n  {\n    if ((*(char *)((int)params + 0x3d) != '`') && (((*params)[1] & 0x800) == 0))\n    {\n      *(undefined *)((int)params + 0x3d) = 0x20;\n    }\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3e) = 0;\n  }\n  **params = **params & 0xfffff7ff;\n  param_ptr1 = *params;\n  if ((param_ptr1[1] & 0x800) == 0)\n  {\n    if (*(char *)((int)params + 0x3d) == '`')\n    {\n      *(undefined *)((int)params + 0x3d) = 0x20;\n      params[16] = (uint *)0x0;\n      if ((param_ptr1[5] & 0x40) != 0)\n      {\n        param_ptr2 = params[9];\n        params[9] = (uint *)((int)param_ptr2 + 1);\n        *(char *)param_ptr2 = (char)param_ptr1[4];\n      }\n      **params = **params & 0xfffffffe;\n      do_nothing(params);\n    }\n    else\n    {\n      if ((param_ptr1[5] & 0x40) != 0)\n      {\n        param_ptr2 = params[9];\n        params[9] = (uint *)((int)param_ptr2 + 1);\n        *(char *)param_ptr2 = (char)param_ptr1[4];\n      }\n      check_and_update_param_value(params);\n    }\n  }\n  else\n  {\n    param_ptr1[1] = param_ptr1[1] & 0xfffff7ff;\n    if (*(char *)((int)params[13] + 0x21) == '\\x01')\n    {\n      params[14][13] = (uint)PTR_LAB_080053cc_1_0800507c;\n      value = get_value(params[14]);\n      if (value != 0)\n      {\n        if (((*params)[5] & 0x40) != 0)\n        {\n          param_ptr1 = params[9];\n          params[9] = (uint *)((int)param_ptr1 + 1);\n          *(char *)param_ptr1 = (char)(*params)[4];\n        }\n        **params = **params & 0xfffffffe;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        (*(code *)params[14][13])();\n      }\n    }\n    else\n    {\n      params[13][13] = (uint)PTR_LAB_080053cc_1_0800507c;\n      value = get_value(params[13]);\n      if (value != 0)\n      {\n        **params = **params & 0xfffffffe;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        (*(code *)params[13][13])();\n      }\n    }\n  }\n  if ((*(char *)((int)params + 0x3d) == '(') && (((uint)params[16] & 4) != 0))\n  {\n    params[11] = DAT_08005080;\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    execute_08004f3c_function(params);\n  }\n  return;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08008020",
                "FUN_08004f3a",
                "FUN_08004050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3c",
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "execute_08004f3c"
        },
        "FUN_080033cc": {
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "input_buffer",
                "param_2": "callback1",
                "param_3": "callback2",
                "param_4": "callback3",
                "pcVar3": "input",
                "cVar1": "first_char",
                "iVar2": "bytes_copied",
                "**(code **)(param_1 + 0x68)": "*(code *)(*(int *)(input_buffer + 0x68))",
                "**(code **)(param_1 + 0x70)": "*(code **)(input_buffer + 0x70)",
                "**(code **)(param_1 + 0x6c)": "*(code **)(input_buffer + 0x6c)",
                "update_buffer_if_larger_08003376": "update_buffer_if_larger",
                "copy_and_shift_bits_080033a8": "copy_and_shift_bits",
                "*(undefined4 *)(param_1 + 0x40)": "*(int *)(input_buffer + 0x40)",
                "*(undefined4 *)(param_1 + 0x34)": "*(int *)(input_buffer + 0x34)",
                "*(undefined *)(iVar2 + 1)": "*(char *)(input_offset + 1)",
                "*(undefined *)(iVar2 + 2)": "*(char *)(input_offset + 2)"
            },
            "code": "void process_input_080033cc(int input_buffer, int callback1, int callback2, int callback3) {\n    char first_char = *(char *)(input_buffer + 4);\n    char *input = *(char **)(input_buffer + 4);\n    if (first_char == 'q') {\n        if (*(int *)(input_buffer + 0x68) != 0) {\n            int bytes_copied = copy_and_shift_bits(input_buffer, *(int *)(input_buffer + 0x18) - 1, input + 1, input, callback3);\n            update_buffer_if_larger(input_buffer, 0, bytes_copied + 1);\n            (*(code *)(*(int *)(input_buffer + 0x68)))(*(int *)(input_buffer + 0x40), *(int *)(input_buffer + 4) + 1);\n            return;\n        }\n    }\n    else if (first_char == 'y') {\n        if (*(code **)(input_buffer + 0x70) != (code *)0x0) {\n            if (*(uint *)(input_buffer + 0x18) < 3) {\n                (*(code *)(*(int *)(input_buffer + 0x70)))(*(int *)(input_buffer + 0x34), 0, 0);\n                return;\n            }\n            int bytes_copied = copy_and_shift_bits(input_buffer, *(uint *)(input_buffer + 0x18) - 3, input + 3, input, callback3);\n            update_buffer_if_larger(input_buffer, 0, bytes_copied + 3);\n            int input_offset = *(int *)(input_buffer + 4);\n            (*(code *)(*(int *)(input_buffer + 0x70)))(*(int *)(input_buffer + 0x34), *(char *)(input_offset + 1), *(char *)(input_offset + 2), input_offset + 3);\n            return;\n        }\n    }\n    else if (*(code **)(input_buffer + 0x6c) != (code *)0x0) {\n        (*(code *)(*(int *)(input_buffer + 0x6c)))(*(int *)(input_buffer + 0x44), first_char, *(int *)(input_buffer + 0x18) - 1, input + 1);\n    }\n    return;\n}",
            "called": [
                "FUN_080033a8",
                "FUN_08003376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033cc",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "process_input_080033cc"
        },
        "FUN_08003de4": {
            "renaming": {
                "FUN_08003de4": "check_and_set_flag_08003de4",
                "param_1": "input_param",
                "iVar1": "flag_check_result",
                "*(char *)(param_1 + 0x24)": "*flag_ptr",
                "return 2": "return 2",
                "*(undefined *)(param_1 + 0x24)": "*flag_ptr = 1",
                "check_and_set_flag_08003b8c()": "check_flag_08003b8c()",
                "iVar1 == 0": "flag_check_result == 0",
                "*(uint *)(param_1 + 0x28)": "*flag_value_ptr",
                "(*flag_value_ptr & 0xffffeefe) | 1": "(*flag_value_ptr & 0xffffeefe) | 1",
                "*(undefined *)(param_1 + 0x24) = 0": "*flag_ptr = 0",
                "return iVar1": "return flag_check_result"
            },
            "code": "int check_and_set_flag_08003de4(int input_param)\n{\n  int flag_check_result;\n  char *flag_ptr = (char *)(input_param + 0x24);\n  uint *flag_value_ptr = (uint *)(input_param + 0x28);\n  if (*flag_ptr == '\\x01') {\n    return 2;\n  }\n  *flag_ptr = 1;\n  flag_check_result = check_flag_08003b8c();\n  if (flag_check_result == 0) {\n    *flag_value_ptr = (*flag_value_ptr & 0xffffeefe) | 1;\n  }\n  *flag_ptr = 0;\n  return flag_check_result;\n}",
            "called": [
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003de4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08003de4"
        },
        "FUN_08004f3a": {
            "renaming": {
                "FUN_08004f3a": "do_nothing_08004f3a"
            },
            "code": "\nvoid do_nothing_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f3a",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f3a"
        },
        "FUN_08000500": {
            "renaming": {
                "FUN_08000500": "update_character_stats_08000500",
                "param_1": "character_index",
                "param_2": "strength",
                "param_3": "agility",
                "param_4": "max_servos_attached",
                "bVar1": "num_attached_servos",
                "PTR_DAT_0800056c": "servo_count_ptr",
                "PTR_DAT_08000584": "max_servos_attached_msg",
                "PTR_s_Max_servos_attached_08000580": "max_servos_attached",
                "bVar2": "character_index_in_use",
                "PTR_DAT_08000570": "character_index_in_use_ptr",
                "PTR_DAT_08000578": "servo_count_per_character",
                "PTR_DAT_08000574": "character_stats_ptr"
            },
            "code": "void update_character_stats_08000500(int character_index, int strength, int agility, uint8_t PTR_s_Max_servos_attached_08000580) {\n  uint8_t num_attached_servos = *PTR_DAT_0800056c;\n  if (num_attached_servos > 11) {\n    send_encoded_data(PTR_s_Max_servos_attached_08000580, PTR_DAT_08000584, character_index, PTR_s_Max_servos_attached_08000580, PTR_s_Max_servos_attached_08000580);\n    return;\n  }\n  uint8_t character_index_in_use = *PTR_DAT_08000570;\n  if (character_index_in_use == 0) {\n    PTR_DAT_08000578[character_index] = num_attached_servos;\n    *PTR_DAT_0800056c = num_attached_servos + 1;\n  }\n  else {\n    PTR_DAT_08000578[character_index] = PTR_DAT_08000578[character_index_in_use - 1];\n    *PTR_DAT_08000570 = character_index_in_use - 1;\n  }\n  if ((strength > 0) && (agility > 0)) {\n    update_character_stats_08000500_with_params(PTR_DAT_08000574 + (uint8_t)PTR_DAT_08000578[character_index] * 3, character_index, strength, agility);\n    return;\n  }\n  update_character_stats_08000500_with_params(PTR_DAT_08000574 + (uint8_t)PTR_DAT_08000578[character_index] * 3, character_index);\n  return;\n}",
            "called": [
                "FUN_08002f14",
                "FUN_080025ac",
                "FUN_08002634"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000500",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_character_stats_08000500"
        },
        "FUN_08009d24": {
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_block_08009d24",
                "param_1": "memory_block",
                "param_2": "block_size",
                "puVar1": "memory_ptr",
                "iVar2": "block_offset"
            },
            "code": "undefined4 * allocate_and_initialize_memory_block_08009d24(undefined4 memory_block, int block_size)\n{\n  undefined4 *memory_ptr;\n  int block_offset;\n  \n  block_offset = (block_size - 1) * 0x68;\n  memory_ptr = (undefined4 *)allocate_memory_block_08009270(memory_block, block_offset + 0x74);\n  if (memory_ptr != (undefined4 *)0x0) {\n    *memory_ptr = 0;\n    memory_ptr[1] = block_size;\n    memory_ptr[2] = memory_ptr + 3;\n    fill_memory_with_value_080091c6(memory_ptr + 3, 0, block_offset + 0x68);\n  }\n  return memory_ptr;\n}",
            "called": [
                "FUN_08009270",
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d24",
            "calling": [
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_block_08009d24"
        },
        "FUN_0800344a": {
            "renaming": {
                "FUN_0800344a": "initialize_data_struct_0800344a",
                "param_1": "data_struct_ptr",
                "uVar1": "index",
                "*(undefined4 *)(param_1 + 0x10)": "*(undefined4 *)(data_struct_ptr + 0x10)",
                "*(undefined *)(param_1 + 0xc)": "*(undefined *)(data_struct_ptr + 0xc)",
                "*(undefined *)(param_1 + 0xd)": "*(undefined *)(data_struct_ptr + 0xd)",
                "*(uint *)(param_1 + 8)": "*(uint *)(data_struct_ptr + 8)",
                "*(undefined *)(*(int *)(param_1 + 4) + uVar1)": "*(undefined *)(*(int *)(data_struct_ptr + 4) + index)",
                "*(undefined *)(param_1 + 0x14)": "*(undefined *)(data_struct_ptr + 0x14)",
                "*(undefined4 *)(param_1 + 0x18)": "*(undefined4 *)(data_struct_ptr + 0x18)",
                "*(code **)(param_1 + 0x78)": "*(code **)(data_struct_ptr + 0x78)",
                "(code *)0x0": "(code *)0x0",
                "(**(code **)(param_1 + 0x78))(*(undefined4 *)(param_1 + 0x48))": "(**(code **)(data_struct_ptr + 0x78))(*(undefined4 *)(data_struct_ptr + 0x48))"
            },
            "code": "void initialize_data_struct_0800344a(int data_struct_ptr) {\n  uint index;\n  *(undefined4 *)(data_struct_ptr + 0x10) = 0;\n  *(undefined *)(data_struct_ptr + 0xc) = 0;\n  *(undefined *)(data_struct_ptr + 0xd) = 0;\n  for (index = 0; index < *(uint *)(data_struct_ptr + 8); index++) {\n    *(undefined *)(*(int *)(data_struct_ptr + 4) + index) = 0;\n  }\n  *(undefined *)(data_struct_ptr + 0x14) = 0;\n  *(undefined4 *)(data_struct_ptr + 0x18) = 0;\n  if (*(code **)(data_struct_ptr + 0x78) != (code *)0x0) {\n    (**(code **)(data_struct_ptr + 0x78))(*(undefined4 *)(data_struct_ptr + 0x48));\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800344a",
            "calling": [
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_0800344a"
        },
        "FUN_080071e4": {
            "renaming": {
                "FUN_080071e4": "update_character_stats_080071e4",
                "param_1": "character_id",
                "local_50": "character_data",
                "find_value_08007320": "find_value",
                "PTR_DAT_08007238": "character_data",
                "find_character_index_08006c7c": "find_character_index",
                "find_character_or_return_minus_one_08007376": "find_character_or_return_minus_one",
                "update_bits_in_array_080063c0": "update_character_bits",
                "update_value_and_check_08006460": "update_character_value_and_check",
                "set_bit_08005e2e": "set_character_bit"
            },
            "code": "void update_character_stats_080071e4(uint character_id) {\n  int character_value = find_value(character_id, PTR_DAT_08007238);\n  if ((character_value != 0) &&\n     ((((int character_index = find_character_index(character_id), character_index == 0 || (character_index == 4)) || (character_index == 8)) ||\n      ((character_index == 0xc || (character_index == 0x18)))))) {\n    uint PTR_DAT_08007238_flags = find_character_or_return_minus_one(character_id, PTR_DAT_08007238);\n    if ((PTR_DAT_08007238_flags & 0x100000) == 0) {\n      update_character_bits(character_value, character_index);\n    }\n    else {\n      update_character_value_and_check(character_value, character_index);\n    }\n    set_character_bit(character_value);\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08006460",
                "FUN_080063c0",
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071e4",
            "calling": [
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "update_character_stats_080071e4"
        },
        "FUN_08008e72": {
            "renaming": {
                "FUN_08008e72": "execute_function_pointer_08008e72",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_08008e72(void *function_pointer) {\n  (**(void (**)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e72",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_08008e72"
        },
        "FUN_080022f8": {
            "renaming": {
                "FUN_080022f8": "process_and_send_data_080022f8",
                "bVar1": "is_valid_character",
                "iVar2": "data_value",
                "uVar3": "value_and_flags",
                "uVar4": "i",
                "uVar5": "character_position",
                "PTR_DAT_080023e0": "input_data_pointer",
                "PTR_DAT_080023e4": "output_data_pointer",
                "PTR_DAT_080023e8": "offset_pointer",
                "PTR_DAT_080023ec": "limit_pointer",
                "PTR_DAT_080023f0": "flags_pointer",
                "PTR_DAT_080023f4": "character_array_pointer",
                "PTR_DAT_080023f8": "character_count_pointer",
                "PTR_DAT_080023fc": "i2c_request_pointer"
            },
            "code": "void process_and_send_data_080022f8() {\n  bool is_valid_character;\n  int data_value, character_index;\n  undefined4 value_and_flags;\n  uint i, character_position;\n  FUNC_08000ef8();\n  while (character_index = call_function_pointer_08002ec4(PTR_DAT_080023e0), character_index != 0) {\n    process_input_from_code_pointer_08002ed2(PTR_DAT_080023e0);\n  }\n  data_value = print_data_value_08008abc();\n  *(int*)PTR_DAT_080023e4 = data_value;\n  if (*(uint*)PTR_DAT_080023ec < (uint)(data_value - *(int*)PTR_DAT_080023e8)) {\n    *(uint*)PTR_DAT_080023e8 = *(int*)PTR_DAT_080023e8 + *(uint*)PTR_DAT_080023ec;\n    for (i = 0; i < 0x3c; i = i + 1 & 0xff) {\n      character_position = i - 0x2e & 0xff;\n      if (character_position < 0xe) {\n        if (i < 0x3c) {\n          data_value = (int)(char)PTR_DAT_080023f4[i];\n        }\n        else {\n          data_value = -1;\n        }\n        character_index = find_character_index_080036ac(data_value);\n        if (character_index == 0) {\n          is_valid_character = false;\n        }\n        else {\n          if (i < 0x3c) {\n            data_value = (int)(char)PTR_DAT_080023f4[i];\n          }\n          else {\n            data_value = -1;\n          }\n          character_index = find_character_index_080036ac(data_value);\n          if (character_index == 1) {\n            is_valid_character = false;\n          }\n          else {\n            data_value = get_data_at_offset_08002fa0(PTR_DAT_080023e0,i);\n            if (data_value == 2) {\n              is_valid_character = true;\n            }\n            else {\n              is_valid_character = false;\n            }\n          }\n        }\n      }\n      else {\n        is_valid_character = false;\n      }\n      if ((is_valid_character) && ((*(int*)PTR_DAT_080023f0 >> character_position & 1U) != 0)) {\n        value_and_flags = find_value_and_set_flags_08006d80_08008880(character_position);\n        encode_data_08002ef2(PTR_DAT_080023e0,character_position,value_and_flags);\n      }\n    }\n    if (-1 < (char)*PTR_DAT_080023f8) {\n      for (i = 0; (int)i < (char)*PTR_DAT_080023f8 + 1; i = i + 1 & 0xff) {\n        data_value = i * 0xc;\n        process_i2c_request_and_send_response_08001c18(PTR_DAT_080023fc[data_value],*(undefined4*)(PTR_DAT_080023fc + data_value + 4),PTR_DAT_080023fc[data_value + 8],PTR_DAT_080023fc[data_value + 9]);\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08002fa0",
                "FUN_08002ec4",
                "FUN_080036ac",
                "FUN_08001c18",
                "FUN_08000ef8",
                "FUN_08008880",
                "FUN_08008abc",
                "FUN_08002ed2",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022f8",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_and_send_data_080022f8"
        },
        "FUN_080072fa": {
            "renaming": {
                "FUN_080072fa": "initialize_device_and_register_settings_080072fa",
                "set_register_and_update_08003724": "set_register_and_update",
                "initialize_device_settings_080035b8": "initialize_device_settings"
            },
            "code": "void initialize_device_and_register_settings_080072fa() {\n  set_register_and_update();\n  initialize_device_settings();\n  return;\n}",
            "called": [
                "FUN_080035b8",
                "FUN_08003724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072fa",
            "calling": [
                "FUN_080036a2"
            ],
            "imported": false,
            "current_name": "initialize_device_and_register_settings_080072fa"
        },
        "FUN_08005084": {
            "renaming": {
                "FUN_08005084": "process_input_08005084",
                "param_1": "input_data",
                "cVar1": "current_char",
                "puVar2": "ptr_input_data",
                "puVar3": "ptr_input_data_9"
            },
            "code": "int process_input_08005084(uint **input_data)\n{\n    char current_char = *(char *)((int)input_data + 0x3d);\n    (*input_data)[1] &= 0xfffff8ff;\n    **input_data |= 1;\n    **input_data &= 0xfffffbff;\n    uint *ptr_input_data = *input_data;\n    if ((ptr_input_data[1] & 0x800) != 0) {\n        if ((current_char == '\"') || (current_char == '*')) {\n            *(short *)((int)input_data + 0x2a) = (short)*(undefined4 *)(*input_data[0xe] + 4);\n        }\n        else {\n            *(short *)((int)input_data + 0x2a) = (short)*(undefined4 *)(*input_data[0xd] + 4);\n        }\n    }\n    if (*(short *)((int)input_data + 0x2a) != 0) {\n        if ((ptr_input_data[5] & 4) != 0) {\n            uint *ptr_input_data_9 = input_data[9];\n            input_data[9] = (uint *)((int)ptr_input_data_9 + 1);\n            *(char *)ptr_input_data_9 = (char)ptr_input_data[4];\n            *(short *)((int)input_data + 0x2a) -= 1;\n        }\n        if (((*input_data)[5] & 0x40) != 0) {\n            uint *ptr_input_data_9 = input_data[9];\n            input_data[9] = (uint *)((int)ptr_input_data_9 + 1);\n            *(char *)ptr_input_data_9 = (char)(*input_data)[4];\n            *(short *)((int)input_data + 0x2a) -= 1;\n        }\n        input_data[0x10] = (uint *)((uint)input_data[0x10] | 4);\n    }\n    if (input_data[0x10] == (uint *)0x0) {\n        if (((current_char == '(') || (current_char == '*')) || (current_char == ')')) {\n            input_data[0xb] = PTR_DAT_08005184;\n            input_data[0xc] = (uint *)0x0;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            execute_function_if_conditions_met_08007ff0();\n        }\n        else if ((input_data[0xc] == (uint *)0x22) || (current_char == '\"')) {\n            input_data[0xc] = (uint *)0x0;\n            *(undefined *)((int)input_data + 0x3d) = 0x20;\n            *(undefined *)((int)input_data + 0x3e) = 0;\n            do_nothing_08004a74();\n        }\n    }\n    else {\n        execute_08004f3c();\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a74",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005084",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08005084"
        },
        "FUN_0800291c": {
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters",
                "puVar1": "pointer_to_data"
            },
            "code": "void initialize_parameters_0800291c(undefined4 *parameters)\n{\n  undefined *pointer_to_data;\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = PTR_PTR_FUNCTION_1_2;\n  pointer_to_data = PTR_DATA_1;\n  *(undefined *)(parameters + 0x1b) = PTR_DATA_1[0xe];\n  *(undefined *)((int)parameters + 0x6d) = pointer_to_data[0xf];\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800291c",
            "calling": [
                "FUN_08002948"
            ],
            "imported": false,
            "current_name": "initialize_parameters_0800291c"
        },
        "FUN_08002ac0": {
            "renaming": {
                "FUN_08002ac0": "send_request_with_flag_and_params_08002ac0",
                "param_1": "request",
                "param_2": "flag",
                "param_3": "param1",
                "param_4": "param2",
                "<original_variable_name_1>": "param3",
                "send_request_08002a58": "send_request"
            },
            "code": "void send_request_with_flag_and_params_08002ac0(int* request, int flag, int* param1, int* param2, int* param3)\n{\n  send_request(request, flag, param1, param2, param3);\n  return;\n}",
            "called": [
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ac0",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "send_request_with_flag_and_params_08002ac0"
        },
        "FUN_08003346": {
            "renaming": {
                "FUN_08003346": "set_parameters_if_flag_08003346",
                "param_1": "base_address",
                "param_2": "flag",
                "param_3": "parameter1",
                "param_4": "parameter2"
            },
            "code": "void set_parameters_if_flag_08003346(int base_address, int flag, int parameter1, int parameter2)\n{\n  if (flag == 121) {\n    *(int *)(base_address + 112) = parameter1;\n    *(int *)(base_address + 52) = parameter2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003346",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_parameters_if_flag_08003346"
        },
        "FUN_080032bc": {
            "renaming": {
                "FUN_080032bc": "initialize_data_structure_080032bc",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "leading_zeroes",
                "*param_1": "data_structure[0x0]",
                "*(undefined4 *)(param_1 + 4)": "data_structure[0x4]",
                "*(undefined4 *)(param_1 + 8)": "data_structure[0x8]",
                "param_1[0xc]": "data_structure[0xc]",
                "param_1[0xd]": "data_structure[0xd]",
                "*(undefined4 *)(param_1 + 0x10)": "data_structure[0x10]",
                "param_1[0x14]": "data_structure[0x14]",
                "*(undefined4 *)(param_1 + 0x18)": "data_structure[0x18]",
                "*(undefined4 *)(param_1 + 0x1c)": "data_structure[0x1c]",
                "*(undefined4 *)(param_1 + 0x20)": "data_structure[0x20]",
                "*(undefined4 *)(param_1 + 0x24)": "data_structure[0x24]",
                "*(undefined4 *)(param_1 + 0x28)": "data_structure[0x28]",
                "*(undefined4 *)(param_1 + 0x2c)": "data_structure[0x2c]",
                "*(undefined4 *)(param_1 + 0x30)": "data_structure[0x30]",
                "*(undefined4 *)(param_1 + 0x34)": "data_structure[0x34]",
                "*(undefined4 *)(param_1 + 0x38)": "data_structure[0x38]",
                "*(undefined4 *)(param_1 + 0x3c)": "data_structure[0x3c]",
                "*(undefined4 *)(param_1 + 0x40)": "data_structure[0x40]",
                "*(undefined4 *)(param_1 + 0x44)": "data_structure[0x44]",
                "*(undefined4 *)(param_1 + 0x48)": "data_structure[0x48]",
                "*(undefined4 *)(param_1 + 0x4c)": "data_structure[0x4c]",
                "*(undefined4 *)(param_1 + 0x50)": "data_structure[0x50]",
                "*(undefined4 *)(param_1 + 0x54)": "data_structure[0x54]",
                "*(undefined4 *)(param_1 + 0x58)": "data_structure[0x58]",
                "*(undefined4 *)(param_1 + 0x5c)": "data_structure[0x5c]",
                "*(undefined4 *)(param_1 + 0x60)": "data_structure[0x60]",
                "*(undefined4 *)(param_1 + 100)": "data_structure[0x64]",
                "*(undefined4 *)(param_1 + 0x68)": "data_structure[0x68]",
                "*(undefined4 *)(param_1 + 0x6c)": "data_structure[0x6c]",
                "*(undefined4 *)(param_1 + 0x70)": "data_structure[0x70]",
                "*(undefined4 *)(param_1 + 0x74)": "data_structure[0x74]",
                "*(undefined4 *)(param_1 + 0x78)": "data_structure[0x78]"
            },
            "code": "void initialize_data_structure_080032bc(int* data_structure, int value1, int value2)\n{\n    // Initialize data structure\n    memset(data_structure, 0, 112);\n    data_structure[0x0] = (char)(count_leading_zeroes(value1) >> 5);\n    data_structure[0x4] = value1;\n    data_structure[0x8] = value2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032bc",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_080032bc"
        },
        "FUN_08003106": {
            "renaming": {
                "FUN_08003106": "process_data_08003106",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "func_ptr"
            },
            "code": "void process_data_08003106(uint32_t *data_ptr, uint32_t data_size, uint32_t param_3, uint32_t param_4)\n{\n  uint32_t *func_ptr;\n  func_ptr = (uint32_t *)*data_ptr;\n  if (func_ptr != NULL) {\n    (**(void (**)(uint32_t *, uint32_t)) *func_ptr)(func_ptr, 0xf0);\n    (***(void (***)(uint32_t *)) (uint32_t *)*data_ptr)((uint32_t *)*data_ptr, 0x6f);\n    (***(void (***)(uint32_t *)) (uint32_t *)*data_ptr)((uint32_t *)*data_ptr, data_size);\n    encode_data(data_ptr, param_3, param_4, param_3);\n    (***(void (***)(uint32_t *)) (uint32_t *)*data_ptr)((uint32_t *)*data_ptr, 0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003106",
            "calling": [
                "FUN_08003158"
            ],
            "imported": false,
            "current_name": "process_data_08003106"
        },
        "FUN_080077b0": {
            "renaming": {
                "FUN_080077b0": "FUNC_080077b0"
            },
            "code": "\nvoid FUNC_080077b0(int *param_1,int param_2,int param_3,int param_4,undefined param_5)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  uint local_38;\n  uint local_34;\n  uint local_30;\n  undefined4 local_2c;\n  \n  if (param_1 != (int *)0x0) {\n    piVar9 = param_1 + 1;\n    iVar2 = find_value_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n    iVar3 = find_value_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n    if ((iVar2 == 0) || (iVar3 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_I2C_pin_has_n_08007a88);\n    }\n    else {\n      iVar3 = compare_and_return_080073ae(iVar2,iVar3);\n      *param_1 = iVar3;\n      iVar2 = DAT_08007a7c;\n      if (iVar3 == 0) {\n        process_data_080098d8(PTR_s_ERROR__I2C_pins_mismatch_08007a8c);\n      }\n      else {\n        if (iVar3 == DAT_08007a7c) {\n          *(uint *)(DAT_08007a7c + 0x1bc1c) = *(uint *)(DAT_08007a7c + 0x1bc1c) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) | 0x200000;\n          *(uint *)(iVar2 + 0x1bc10) = *(uint *)(iVar2 + 0x1bc10) & 0xffdfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x1f;\n          *(undefined *)((int)param_1 + 0x5b) = 0x20;\n          *(int **)PTR_DAT_08007a90 = piVar9;\n        }\n        iVar2 = DAT_08007a80;\n        if (*param_1 == DAT_08007a80) {\n          *(uint *)(DAT_08007a80 + 0x1b81c) = *(uint *)(DAT_08007a80 + 0x1b81c) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) | 0x400000;\n          *(uint *)(iVar2 + 0x1b810) = *(uint *)(iVar2 + 0x1b810) & 0xffbfffff;\n          *(undefined *)((int)param_1 + 0x5a) = 0x21;\n          *(undefined *)((int)param_1 + 0x5b) = 0x22;\n          *(int **)(PTR_DAT_08007a90 + 4) = piVar9;\n        }\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a78;\n        local_38 = 1 << ((int)*(char *)((int)param_1 + 0x59) & 0xfU) & 0xffff;\n        uVar5 = find_character_or_return_minus_one_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08007a78);\n        uVar6 = find_character_or_return_minus_one_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_character_or_return_minus_one_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_character_or_return_minus_one_08007376((int)*(char *)((int)param_1 + 0x59),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007d4c;\n        uVar5 = DAT_08007a94;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000001;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000002;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007a94 + 4) | 0x7000004;\n          *(uint *)(DAT_08007a94 + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000300;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000c00;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7001000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7008000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        decode_080040e8(uVar4,&local_38,uVar7,uVar8);\n        uVar4 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        puVar1 = PTR_DAT_08007a74;\n        local_38 = 1 << ((int)*(char *)(param_1 + 0x16) & 0xfU) & 0xffff;\n        uVar5 = find_character_or_return_minus_one_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08007a74);\n        uVar6 = find_character_or_return_minus_one_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_34 = (uVar5 >> 3 & 1) << 4 | uVar6 & 7;\n        local_2c = 3;\n        iVar2 = find_character_or_return_minus_one_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        local_30 = (uint)(iVar2 << 0x1a) >> 0x1e;\n        iVar3 = find_character_or_return_minus_one_08007376((int)*(char *)(param_1 + 0x16),puVar1);\n        iVar2 = DAT_08007a84;\n        uVar7 = *(uint *)(DAT_08007a84 + 0x18) | 1;\n        *(uint *)(DAT_08007a84 + 0x18) = uVar7;\n        uVar6 = DAT_08007e70;\n        uVar5 = DAT_08007d4c;\n        uVar8 = *(uint *)(iVar2 + 0x18) & 1;\n        switch((uint)(iVar3 << 0x11) >> 0x19) {\n        case 1:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000001;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 2:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffe | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 3:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000002;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 4:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffd | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 5:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000004;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 6:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffffb | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 7:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000008;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 8:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xfffffff7 | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 9:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x7000030;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 10:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000010;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xb:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) & 0xffffffcf | 0x7000000;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xc:\n          uVar8 = *(uint *)(DAT_08007d4c + 4) | 0x70000c0;\n          *(uint *)(DAT_08007d4c + 4) = uVar8;\n          uVar7 = uVar5;\n          break;\n        case 0xd:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000040;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xe:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffff3f | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0xf:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000300;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x10:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000200;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x11:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000100;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x12:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffffcff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x13:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7000c00;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x14:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000800;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x15:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xfffff3ff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x16:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7001000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x17:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffffefff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1b:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) | 0x7008000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x1c:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xffff7fff | 0x7000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x21:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x22:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x1000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x23:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x2000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n          break;\n        case 0x24:\n          uVar8 = *(uint *)(DAT_08007e70 + 4) & 0xf8ffffff | 0x4000000;\n          *(uint *)(DAT_08007e70 + 4) = uVar8;\n          uVar7 = uVar6;\n        }\n        decode_080040e8(uVar4,&local_38,uVar7,uVar8);\n        param_1[1] = *param_1;\n        param_1[2] = param_2;\n        param_1[3] = 0;\n        param_1[4] = param_4;\n        param_1[7] = 0xff;\n        param_1[5] = param_3;\n        param_1[6] = 0;\n        param_1[8] = 0;\n        param_1[9] = 0;\n        *(undefined *)((int)param_1 + 0x41) = 0;\n        set_bits_in_register_08003f30((int)*(char *)((int)param_1 + 0x5a),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)param_1 + 0x5a));\n        set_bits_in_register_08003f30((int)*(char *)((int)param_1 + 0x5b),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)param_1 + 0x5b));\n        calculate_result_080045c0(piVar9);\n        *(undefined *)((int)param_1 + 0x5d) = param_5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080045c0",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080077b0",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "FUNC_080077b0"
        },
        "FUN_08007708": {
            "renaming": {
                "FUN_08007708": "set_flags_and_return_08007708"
            },
            "code": "void set_flags_and_return_08007708(void)\n{\n  set_flags();\n  return;\n}",
            "called": [
                "FUN_08007438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007708",
            "calling": [
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "set_flags_and_return_08007708"
        },
        "FUN_0800018c": {
            "renaming": {
                "FUN_0800018c": "software_interrupt_handler_0800018c",
                "param_1": "interrupt_param_1",
                "param_2": "interrupt_param_2",
                "param_3": "interrupt_param_3",
                "param_4": "interrupt_param_4",
                "uVar1": "result"
            },
            "code": "int software_interrupt_handler_0800018c(int interrupt_type, int param_1, int param_2, int param_3, int param_4) {\n  int result;\n  if (*(int *)PTR_DAT_080001a4 != 0) {\n    result = 0;\n  }\n  else {\n    result = trigger_software_interrupt_08000188(interrupt_type, param_1, param_2, param_3, param_4);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000188"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800018c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "software_interrupt_handler_0800018c"
        },
        "FUN_08003f94": {
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "bit_pos",
                "DAT_08003fac": "array_base"
            },
            "code": "void set_bit_in_array_08003f94(uint bit_pos){\n  if (bit_pos >= 0) {\n    int array_index = bit_pos >> 5;\n    int bit_offset = bit_pos & 0x1f;\n    int* array_ptr = (int*)(DAT_08003fac + array_index * 4);\n    *array_ptr = 1 << bit_offset;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f94",
            "calling": [
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003f94"
        },
        "FUN_08008c44": {
            "renaming": {
                "FUN_08008c44": "process_data_08008c44",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "flag_mask",
                "iVar2": "num_flags_set",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08008d14": "jump_table_data",
                "process_and_execute_data_080090cc": "process_and_execute_data",
                "uRam08008cfc": "input_data",
                "uRam08008cf8": "input_data_length",
                "uRam08008cf4": "stack_data",
                "FUNC_08008078": "initialize_input_data",
                "store_input_data_0800863c": "store_input_data"
            },
            "code": "void process_data_08008c44(int data, int value, byte flags)\n{\n  int num_flags_set = 0;\n  int jump_table_index;\n  int permissions = 0;\n  int input_data_address = data + 0xd4;\n  \n  *(int *)(data + 0x11c) = value;\n  *(byte *)(data + 0x140) = flags;\n  \n  switch (flags & 7) {\n    case 4:\n      num_flags_set = 7;\n      break;\n    case 6:\n      num_flags_set = 8;\n      break;\n    case 2:\n      num_flags_set = 6;\n      break;\n  }\n  \n  if ((flags & 0x30) == 0x30) {\n    *(int *)(data + 0x128) = 0x600;\n    num_flags_set++;\n  }\n  else if ((flags & 0x20) == 0) {\n    *(int *)(data + 0x128) = 0;\n  }\n  else {\n    *(int *)(data + 0x128) = 0x400;\n    num_flags_set++;\n  }\n  \n  if ((flags & 8) == 0) {\n    *(int *)(data + 0x124) = 0;\n  }\n  else {\n    *(int *)(data + 0x124) = 0x2000;\n  }\n  \n  if (num_flags_set == 8) {\n    *(int *)(data + 0x120) = 0;\n  }\n  else if (num_flags_set == 9) {\n    *(int *)(data + 0x120) = 0x1000;\n  }\n  else {\n    num_flags_set = 0;\n  }\n  \n  if (num_flags_set != 0) {\n    initialize_input_data(input_data_address);\n    store_input_data(input_data_address, input_data);\n    return;\n  }\n  \n  jump_table_index = process_and_execute_data(process_data_08008c44, 299, input_data, input_data_length);\n  \n  if (jump_table_index < 0x3c) {\n    uRam0000012d = PTR_DAT_08008d14[jump_table_index];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n  \n  UNRECOVERED_JUMPTABLE = (code *)0x8008cee;\n  (*UNRECOVERED_JUMPTABLE)(0, jump_table_index, &stack0x00000148);\n  return;\n}",
            "called": [
                "FUN_08008078",
                "FUN_0800863c",
                "FUN_080090cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c44",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "process_data_08008c44"
        },
        "FUN_08002a26": {
            "renaming": {
                "FUN_08002a26": "initialize_data_with_value_08002a26",
                "param_1": "buffer",
                "0x33": "size",
                "param_3": "param_3",
                "param_4": "param_4",
                "initialize_data_08002a1c": "initialize_data"
            },
            "code": "void initialize_data_with_value_08002a26(void* buffer, int size, void* param_3, void* param_4)\n{\n  initialize_data(buffer, size, param_3, param_4, param_4);\n  return;\n}\n",
            "called": [
                "FUN_08002a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a26",
            "calling": [
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "initialize_data_with_value_08002a26"
        },
        "FUN_0800430c": {
            "renaming": {
                "FUN_0800430c": "set_device_status_0800430c",
                "param_1": "device_info",
                "PTR_": "device_ptr",
                "DAT_": "device_flags",
                "char": "device_char",
                "char2": "device_char2"
            },
            "code": "int set_device_status_0800430c(int *device_info)\n{\n    int device_type = device_info[0x14];\n    int DAT_ = device_info[0x11];\n    int *PTR_ = (int *)*device_info;\n    char device_char = *(char *)((int)device_info + 0x3e);\n    char device_char2 = *(char *)((int)device_info + 0x3d);\n\n    if (device_char == '@') {\n        if (DAT_ == 0) {\n            *(uint *)(PTR_ + 0x10) = DAT_ & 0xfe;\n        }\n        else {\n            *(uint *)(PTR_ + 0x10) = DAT_ & 0xffU | 1;\n        }\n    }\n    else if (device_type == 0x4000) {\n        if (device_char2 == '!') {\n            *(uint *)(PTR_ + 0x10) = DAT_ & 0xfe;\n        }\n        else {\n            *(uint *)(PTR_ + 0x10) = DAT_ & 0xffU | 1;\n        }\n    }\n    else if (DAT_ == 0) {\n        *(uint *)(PTR_ + 0x10) = (DAT_ << 0x10) >> 0x17 & 6 | 0xf0;\n    }\n    else if (DAT_ == 1) {\n        *(uint *)(PTR_ + 0x10) = (DAT_ << 0x10) >> 0x17 & 6 | 0xf1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800430c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_device_status_0800430c"
        },
        "FUN_08006060": {
            "renaming": {
                "FUN_08006060": "check_and_update_data_08006060",
                "param_1": "data_ptr"
            },
            "code": "int check_and_update_data_08006060(undefined4 *data_ptr)\\n{\\n    if (data_ptr != NULL)\\n    {\\n        if (*(char *)((int)data_ptr + 0x3d) == \"\\0\")\\n        {\\n            *(undefined *)(data_ptr + 0xf) = 0;\\n            set_flags_and_return_08007708();\\n        }\\n        *(undefined *)((int)data_ptr + 0x3d) = 2;\\n        update_memory_08005fe8(*data_ptr, data_ptr + 1);\\n        *(undefined *)((int)data_ptr + 0x3d) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006060",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "check_and_update_data_08006060"
        },
        "FUN_08003350": {
            "renaming": {
                "FUN_08003350": "set_values_08003350",
                "param_1": "base_address",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "*(undefined4 *)(param_1 + 0x74)": "*(int *)(base_address + 116)",
                "*(undefined4 *)(param_1 + 0x38)": "*(int *)(base_address + 56)",
                "*(undefined4 *)(param_1 + 0x78)": "*(int *)(base_address + 120)",
                "*(undefined4 *)(param_1 + 0x48)": "*(int *)(base_address + 72)"
            },
            "code": "void set_values_08003350(int base_address, int value_1, int value_2, int value_3, int value_4)\n{\n    if (value_2 == 249)\n    {\n        *(int *)(base_address + 116) = value_3;\n        *(int *)(base_address + 56) = value_4;\n    }\n    else if (value_2 == 255)\n    {\n        *(int *)(base_address + 120) = value_3;\n        *(int *)(base_address + 72) = value_4;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003350",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003350"
        },
        "FUN_08009698": {
            "renaming": {
                "FUN_08009698": "FUNC_08009698"
            },
            "code": "\nuint FUNC_08009698(undefined4 param_1,uint *param_2,undefined4 param_3,code *param_4,uint **param_5)\n\n{\n  byte bVar1;\n  int iVar2;\n  uint *puVar3;\n  int iVar4;\n  undefined *puVar5;\n  uint uVar6;\n  uint **ppuVar7;\n  uint uVar8;\n  uint uVar9;\n  undefined *puVar10;\n  undefined *puVar11;\n  uint local_24 [2];\n  \n  bVar1 = *(byte *)(param_2 + 6);\n  puVar11 = (undefined *)((int)param_2 + 0x43);\n  if (bVar1 != 0x6e) {\n    if (bVar1 < 0x6f) {\n      if (bVar1 != 99) {\n        if (bVar1 < 100) {\n          if (bVar1 == 0) goto LAB_08009852;\n          if (bVar1 != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)param_2 + 0x45) = 0x58;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\nLAB_080097e2:\n          uVar6 = *param_2;\n          puVar3 = *param_5;\n          *param_5 = puVar3 + 1;\n          if (((uVar6 & 0x80) == 0) && ((int)(uVar6 << 0x19) < 0)) {\n            uVar8 = (uint)*(ushort *)puVar3;\n          }\n          else {\n            uVar8 = *puVar3;\n          }\n          if ((int)(uVar6 << 0x1f) < 0) {\n            *param_2 = uVar6 | 0x20;\n          }\n          if (uVar8 == 0) {\n            *param_2 = *param_2 & 0xffffffdf;\n          }\n          uVar6 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)param_2 + 0x43) = 0;\n        }\n        else {\n          if ((bVar1 != 100) && (bVar1 != 0x69)) goto LAB_080096c8;\n          uVar8 = *param_2;\n          puVar3 = *param_5;\n          if ((uVar8 & 0x80) == 0) {\n            *param_5 = puVar3 + 1;\n            if ((uVar8 & 0x40) == 0) goto LAB_080096e8;\n            uVar8 = (uint)(short)*(ushort *)puVar3;\n          }\n          else {\n            *param_5 = puVar3 + 1;\nLAB_080096e8:\n            uVar8 = *puVar3;\n          }\n          if ((int)uVar8 < 0) {\n            uVar8 = -uVar8;\n            *(undefined *)((int)param_2 + 0x43) = 0x2d;\n          }\n          uVar6 = 10;\n          puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n        }\n        uVar9 = param_2[1];\n        param_2[2] = uVar9;\n        puVar10 = puVar11;\n        if ((int)uVar9 < 0) {\n          if (uVar8 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(undefined *)((int)param_2 + 0x42) = *puVar5;\n          puVar10 = (undefined *)((int)param_2 + 0x42);\n        }\n        else {\n          *param_2 = *param_2 & 0xfffffffb;\n          if (uVar8 == 0) {\n            if (uVar9 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              uVar9 = uVar8 / uVar6;\n              puVar10 = puVar10 + -1;\n              *puVar10 = puVar5[uVar8 - uVar6 * uVar9];\n              uVar8 = uVar9;\n            } while (uVar9 != 0);\n          }\n        }\n        if (((uVar6 == 8) && ((int)(*param_2 << 0x1f) < 0)) && ((int)param_2[1] <= (int)param_2[4]))\n        {\n          puVar10[-1] = 0x30;\n          puVar10 = puVar10 + -1;\n        }\n        param_2[4] = (int)puVar11 - (int)puVar10;\n        puVar11 = puVar10;\n        goto LAB_080097be;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      *(char *)((int)param_2 + 0x42) = (char)*puVar3;\nLAB_08009728:\n      puVar11 = (undefined *)((int)param_2 + 0x42);\n      uVar8 = 1;\n    }\n    else {\n      if (bVar1 != 0x73) {\n        if (bVar1 < 0x74) {\n          if (bVar1 == 0x6f) {\nLAB_0800974e:\n            uVar8 = *param_2;\n            puVar3 = *param_5;\n            if ((uVar8 & 0x80) == 0) {\n              *param_5 = puVar3 + 1;\n              if ((uVar8 & 0x40) == 0) goto LAB_0800975c;\n              uVar8 = (uint)*(ushort *)puVar3;\n            }\n            else {\n              *param_5 = puVar3 + 1;\nLAB_0800975c:\n              uVar8 = *puVar3;\n            }\n            puVar5 = PTR_s_0123456789ABCDEF_080098d4;\n            if (bVar1 == 0x6f) {\n              uVar6 = 8;\n            }\n            else {\n              uVar6 = 10;\n            }\n            goto LAB_08009778;\n          }\n          if (bVar1 == 0x70) {\n            *param_2 = *param_2 | 0x20;\nLAB_0800970e:\n            puVar5 = PTR_s_0123456789abcdef_080098d0;\n            *(undefined *)((int)param_2 + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (bVar1 == 0x75) goto LAB_0800974e;\n          if (bVar1 == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)param_2 + 0x42) = bVar1;\n        goto LAB_08009728;\n      }\n      puVar3 = *param_5;\n      *param_5 = puVar3 + 1;\n      puVar11 = (undefined *)*puVar3;\n      iVar2 = find_char_in_string_08009f2c(puVar11,0,param_2[1]);\n      if (iVar2 != 0) {\n        param_2[1] = iVar2 - (int)puVar11;\n      }\n      uVar8 = param_2[1];\n    }\n    param_2[4] = uVar8;\n    *(undefined *)((int)param_2 + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  uVar8 = *param_2;\n  ppuVar7 = (uint **)*param_5;\n  uVar6 = param_2[5];\n  if ((uVar8 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\n    if ((uVar8 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)puVar3 = (short)uVar6;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    puVar3 = *ppuVar7;\nLAB_0800983e:\n    *puVar3 = uVar6;\n  }\nLAB_08009852:\n  param_2[4] = 0;\nLAB_080097be:\n  iVar2 = process_data_080095a8(param_1,param_2,local_24,param_3,param_4);\n  if ((iVar2 == -1) || (iVar2 = (*param_4)(param_1,param_3,puVar11,param_2[4]), iVar2 == -1)) {\nLAB_080097d2:\n    uVar8 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param_2 << 0x1e) < 0) {\n      for (iVar2 = 0; iVar2 < (int)(param_2[3] - local_24[0]); iVar2 = iVar2 + 1) {\n        iVar4 = (*param_4)(param_1,param_3,(int)param_2 + 0x19,1);\n        if (iVar4 == -1) goto LAB_080097d2;\n      }\n    }\n    uVar8 = param_2[3];\n    if ((int)param_2[3] < (int)local_24[0]) {\n      uVar8 = local_24[0];\n    }\n  }\n  return uVar8;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_080095a8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08009698",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "FUNC_08009698"
        },
        "FUN_08006186": {
            "renaming": {
                "FUN_08006186": "configure_device_08006186",
                "param_1": "device_info",
                "param_2": "data_info",
                "param_3": "configuration_type",
                "set_configuration_08005cec": "set_device_configuration",
                "update_data_080060c4": "update_device_data",
                "update_data_structure_08005d48": "update_device_data_structure",
                "update_data_08005dac": "update_device_data"
            },
            "code": "int configure_device_08006186(int *device_info, int data_info, int configuration_type) {\n  if (*(char *)(device_info + 0xf) != '\\x01') {\n    *(undefined *)(device_info + 0xf) = 1;\n    *(undefined *)((int)device_info + 0x3d) = 2;\n    switch(configuration_type) {\n    case 0:\n      set_device_configuration(*device_info);\n      *(uint *)(*device_info + 0x18) |= 8;\n      *(uint *)(*device_info + 0x18) &= 0xfffffffb;\n      *(uint *)(*device_info + 0x18) |= *(uint *)(data_info + 0x10);\n      break;\n    case 4:\n      update_device_data(*device_info);\n      *(uint *)(*device_info + 0x18) |= 0x800;\n      *(uint *)(*device_info + 0x18) &= 0xfffffbff;\n      *(uint *)(*device_info + 0x18) |= *(int *)(data_info + 0x10) << 8;\n      break;\n    case 8:\n      update_device_data_structure(*device_info);\n      *(uint *)(*device_info + 0x1c) |= 8;\n      *(uint *)(*device_info + 0x1c) &= 0xfffffffb;\n      *(uint *)(*device_info + 0x1c) |= *(uint *)(data_info + 0x10);\n      break;\n    case 0xc:\n      update_device_data(*device_info);\n      *(uint *)(*device_info + 0x1c) |= 0x800;\n      *(uint *)(*device_info + 0x1c) &= 0xfffffbff;\n      *(uint *)(*device_info + 0x1c) |= *(int *)(data_info + 0x10) << 8;\n    }\n    *(undefined *)((int)device_info + 0x3d) = 1;\n    *(undefined *)(device_info + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006186",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "configure_device_08006186"
        },
        "FUN_08007710": {
            "renaming": {
                "FUN_08007710": "update_bits_and_return_08007710",
                "update_bits_080074e0": "update_bits"
            },
            "code": "void update_bits_and_return_08007710(void)\n{\n  update_bits();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007710",
            "calling": [
                "FUN_08005df4"
            ],
            "imported": false,
            "current_name": "update_bits_and_return_08007710"
        },
        "FUN_08003474": {
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "input_index",
                "param_2": "input_value",
                "bVar1": "byte_value",
                "update_buffer_if_larger_08003376": "update_buffer_if_larger",
                "process_input_080033cc": "process_input_080033cc",
                "LAB_0800359c": "LAB_0800359c",
                "initialize_data_struct_0800344a": "initialize_data_struct"
            },
            "code": "void process_input_08003474(int input_index, uint input_value) {\n  byte byte_value;\n  if (*(char *)(input_index + 0x14) != '\\0') {\n    if (input_value != 0xf7) {\n      update_buffer_if_larger(input_index, input_value, *(undefined4 *)(input_index + 0x18));\n      *(int *)(input_index + 0x18) = *(int *)(input_index + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(input_index + 0x14) = 0;\n    process_input_08003474_080033cc();\n    return;\n  }\n  if ((*(int *)(input_index + 0x10) == 0) || (0x7f < (int)input_value)) {\n    if ((int)input_value < 0xf0) {\n      *(byte *)(input_index + 0xd) = (byte)input_value & 0xf;\n      input_value = input_value & 0xf0;\n    }\n    if (input_value == 0xf0) {\n      *(undefined *)(input_index + 0x14) = 1;\n      *(undefined4 *)(input_index + 0x18) = 0;\n      return;\n    }\n    if (input_value < 0xf1) {\n      if (input_value != 0xc0) {\n        if (input_value < 0xc1) {\n          if (input_value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (input_value == 0xd0) goto LAB_0800359c;\n          if (input_value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(input_index + 0x10) = 2;\n        *(char *)(input_index + 0xc) = (char)input_value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(input_index + 0x10) = 1;\n      *(char *)(input_index + 0xc) = (char)input_value;\n      return;\n    }\n    if (input_value != 0xf9) {\n      if (0xf9 < input_value) {\n        if (input_value == 0xff) {\n          initialize_data_struct(input_index);\n          return;\n        }\n        return;\n      }\n      if (1 < input_value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(input_index + 0x74) != (code *)0x0) {\n      (**(code **)(input_index + 0x74))(*(undefined4 *)(input_index + 0x38));\n    }\n  }\n  else {\n    *(int *)(input_index + 0x10) = *(int *)(input_index + 0x10) + -1;\n    update_buffer_if_larger();\n    if ((*(int *)(input_index + 0x10) == 0) && (byte_value = *(byte *)(input_index + 0xc), byte_value != 0)) {\n      if (byte_value == 0xd0) {\n        if (*(code **)(input_index + 0x58) != (code *)0x0) {\n          (**(code **)(input_index + 0x58))(*(undefined4 *)(input_index + 0x28),*(undefined *)(input_index + 0xd),**(undefined **)(input_index + 4));\n        }\n      }\n      else if (byte_value < 0xd1) {\n        if (byte_value == 0x90) {\n          if (*(code **)(input_index + 0x50) != (code *)0x0) {\n            (**(code **)(input_index + 0x50))(*(undefined4 *)(input_index + 0x20),*(undefined *)(input_index + 0xd),(uint)(*(byte **)(input_index + 4))[1] + (uint)**(byte **)(input_index + 4) * 0x80);\n          }\n        }\n        else if ((byte_value == 0xc0) && (*(code **)(input_index + 0x54) != (code *)0x0)) {\n          (**(code **)(input_index + 0x54))(*(undefined4 *)(input_index + 0x24),*(undefined *)(input_index + 0xd),**(undefined **)(input_index + 4));\n        }\n      }\n      else if (byte_value == 0xf4) {\n        if (*(code **)(input_index + 0x5c) != (code *)0x0) {\n          (**(code **)(input_index + 0x5c))(*(undefined4 *)(input_index + 0x2c),(*(undefined **)(input_index + 4))[1],**(undefined **)(input_index + 4));\n        }\n      }\n      else if (byte_value == 0xf5) {\n        if (*(code **)(input_index + 0x60) != (code *)0x0) {\n          (**(code **)(input_index + 0x60))(*(undefined4 *)(input_index + 0x30),(*(undefined **)(input_index + 4))[1],**(undefined **)(input_index + 4));\n        }\n      }\n      else if ((byte_value == 0xe0) && (*(code **)(input_index + 0x4c) != (code *)0x0)) {\n        (**(code **)(input_index + 0x4c))(*(undefined4 *)(input_index + 0x1c),*(undefined *)(input_index + 0xd),(uint)(*(byte **)(input_index + 4))[1] + (uint)**(byte **)(input_index + 4) * 0x80);\n      }\n      *(undefined *)(input_index + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n",
            "called": [
                "FUN_080033cc",
                "FUN_08003376",
                "FUN_0800344a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003474",
            "calling": [
                "FUN_08002ed2"
            ],
            "imported": false,
            "current_name": "process_input_08003474"
        },
        "FUN_08006b7c": {
            "renaming": {
                "FUN_08006b7c": "get_dat_value_08006b7c",
                "param_1": "param"
            },
            "code": "uint32_t get_dat_value_08006b7c(uint32_t param) {\n  switch(param) {\n    case 0:\n      return DAT_08006ba4;\n    case 1:\n      return DAT_08006bb4;\n    case 2:\n      return DAT_08006ba8;\n    case 3:\n      return DAT_08006bac;\n    case 4:\n      return DAT_08006bb0;\n    default:\n      return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b7c",
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_dat_value_08006b7c"
        },
        "FUN_08008e7c": {
            "renaming": {
                "FUN_08008e7c": "convert_base_08008e7c",
                "param_1": "ptr_num",
                "param_2": "num",
                "param_3": "base",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "p_digit",
                "cVar1": "digit",
                "local_15": "reversed_digits"
            },
            "code": "undefined4 convert_base_08008e7c(int *ptr_num, uint num, uint base) {\n  char digit;\n  undefined4 result;\n  uint quotient;\n  uint remainder;\n  char reversed_digits[9];\n  reversed_digits[0] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  char *p_digit = reversed_digits + 1;\n  do {\n    quotient = num / base;\n    remainder = (num & 0xff) - (quotient * base & 0xff) & 0xff;\n    p_digit = p_digit + -1;\n    if (remainder < 10) {\n      digit = remainder + '0';\n    }\n    else {\n      digit = remainder + '7';\n    }\n    *p_digit = digit;\n    num = quotient;\n  } while (quotient != 0);\n  if (p_digit == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    uint len = find_end_of_string_08000178(p_digit);\n    result = (**(code **)(*ptr_num + 4))(ptr_num, p_digit, len);\n  }\n  return result;\n}",
            "called": [
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e7c",
            "calling": [
                "FUN_08008ed6"
            ],
            "imported": false,
            "current_name": "convert_base_08008e7c"
        },
        "FUN_08003aa0": {
            "renaming": {
                "FUN_08003aa0": "check_and_set_flag_if_not_set_08003aa0",
                "param_1": "input_array",
                "iVar1": "result",
                "puVar2": "ptr2",
                "DAT_08003b84": "PTR_DAT_08003b84",
                "DAT_08003b88": "PTR_DAT_08003b88"
            },
            "code": "int check_and_set_flag_if_not_set_08003aa0();\n\nint check_and_set_flag_if_not_set_08003aa0(int* input_array)\n{\n  int result = 2;\n  int* ptr = input_array;\n  char flag = *(char *)(ptr + 9);\n  if (flag != '\\x01') {\n    *(char *)(ptr + 9) = 1;\n    int flag_check_result = check_and_set_flag_if_not_set_08003aa0();\n    if (flag_check_result == 0) {\n      ptr[10] = (ptr[10] & 0xfffffcfe) | 0x100;\n      int* ptr2 = (int *)*ptr;\n      if ((ptr2 == DAT_08003b84) && ((DAT_08003b84[-0xff] & 0xf0000) != 0)) {\n        ptr[10] |= 0x100000;\n        if ((*(uint *)(DAT_08003b88 + 4) & 0x400) != 0) {\n          ptr[10] = (ptr[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      else {\n        ptr[10] &= 0xffefffff;\n        if ((ptr2[1] & 0x400) != 0) {\n          ptr[10] = (ptr[10] & 0xffffcfff) | 0x1000;\n        }\n      }\n      if ((ptr[10] & 0x1000) == 0) {\n        ptr[11] = 0;\n      }\n      else {\n        ptr[11] &= 0xfffffff9;\n      }\n      *(char *)(ptr + 9) = 0;\n      *ptr2 = 0xfffffffd;\n      ptr = (int *)*ptr;\n      if (((ptr[2] & 0xe0000) == 0xe0000) && ((ptr != DAT_08003b84 || ((DAT_08003b84[-0xff] & 0xf0000) == 0)))) {\n        ptr[2] |= 0x500000;\n      }\n      else {\n        ptr[2] |= 0x100000;\n      }\n      result = 0;\n    }\n    else {\n      *(char *)(ptr + 9) = 0;\n    }\n  }\n  return result;\n}",
            "called": [
                "FUN_08003a20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003aa0",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_if_not_set_08003aa0"
        },
        "FUN_08003ce8": {
            "renaming": {
                "FUN_08003ce8": "set_flags_if_valid_08003ce8",
                "param_1": "param_array",
                "iVar1": "is_valid",
                "check_and_set_flag_08003b8c": "check_and_set_flag",
                "DAT_08003ddc": "DAT_08003ddc",
                "DAT_08003de0": "DAT_08003de0"
            },
            "code": "int set_flags_if_valid_08003ce8(int *param_array)\n{\n    int is_valid;\n    if (param_array == NULL)\n    {\n        is_valid = 1;\n    }\n    else\n    {\n        param_array[10] |= 2;\n        is_valid = check_and_set_flag();\n        if (is_valid == 0)\n        {\n            *(int *)*param_array = -32;\n            *(unsigned int *)(*param_array + 4) &= DAT_08003ddc;\n            *(unsigned int *)(*param_array + 8) &= DAT_08003de0;\n            *(unsigned int *)(*param_array + 12) &= 0xff000000;\n            *(unsigned int *)(*param_array + 16) &= 0xc0000000;\n            *(unsigned int *)(*param_array + 20) &= 0xfffff000;\n            *(unsigned int *)(*param_array + 24) &= 0xfffff000;\n            *(unsigned int *)(*param_array + 28) &= 0xfffff000;\n            *(unsigned int *)(*param_array + 32) &= 0xfffff000;\n            *(unsigned int *)(*param_array + 36) &= 0xfffff000;\n            *(unsigned int *)(*param_array + 40) &= 0xfffff000;\n            *(unsigned int *)(*param_array + 44) &= 0xff000000;\n            *(unsigned int *)(*param_array + 48) &= 0xff000000;\n            *(unsigned int *)(*param_array + 52) &= 0xc0000000;\n            *(unsigned int *)(*param_array + 56) &= 0xc0000000;\n            *(unsigned int *)(*param_array + 60) &= 0xffc00000;\n            *(unsigned int *)(*param_array + 64) &= 0xffc00000;\n            set_bit(param_array);\n            param_array[11] = 0;\n            param_array[10] = 0;\n        }\n        *(char *)(param_array + 9) = 0;\n    }\n    return is_valid;\n}",
            "called": [
                "FUN_08006d24",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ce8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "set_flags_if_valid_08003ce8"
        },
        "FUN_08005fe8": {
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memory",
                "param_2": "data",
                "uVar1": "current_value",
                "DAT_0800605c": "ptr_1",
                "0x40000000": "ptr_2",
                "ptr_1 + -0x4a00": "ptr_3",
                "ptr_1 + -0x4900": "ptr_4"
            },
            "code": "void update_memory_08005fe8(uint *memory, uint *data)\n{\n  uint current_value = *memory;\n  if ((((memory == DAT_0800605c) || (memory == ptr_2)) || (memory == ptr_3)) || (memory == ptr_4)) {\n    current_value = current_value & 0xffffff8f | data[1];\n  }\n  if (((memory == DAT_0800605c) || (memory == ptr_2)) || ((memory == ptr_3 || (memory == ptr_4)))) {\n    current_value = current_value & 0xfffffcff | data[3];\n  }\n  *memory = current_value & 0xffffff7f | data[5];\n  memory[11] = data[2];\n  memory[10] = *data;\n  if (memory == DAT_0800605c) {\n    memory[12] = data[4];\n  }\n  memory[5] = 1;\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005fe8",
            "calling": [
                "FUN_08006092",
                "FUN_08006060"
            ],
            "imported": false,
            "current_name": "update_memory_08005fe8"
        },
        "FUN_08008804": {
            "renaming": {
                "FUN_08008804": "getNextAvailableIndex_08008804",
                "param_1": "currentIndex",
                "iVar1": "nextIndex",
                "puVar2": "stackPointer"
            },
            "code": "int getNextAvailableIndex_08008804(int currentIndex) {\n  int nextIndex;\n  undefined *stackPointer;\n  if (*(int *)currentPointer == 0) {\n    *(undefined **)currentPointer = nextPointer;\n  }\n  nextIndex = *(int *)currentPointer;\n  stackPointer = (undefined *)(currentIndex + nextIndex);\n  if (stackPointer <= &stack0x00000000) {\n    *(undefined **)currentPointer = stackPointer;\n    return nextIndex;\n  }\n  *(undefined4 *)errorFlag = 0xc;\n  return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008804",
            "calling": [
                "FUN_08009918"
            ],
            "imported": false,
            "current_name": "getNextAvailableIndex_08008804"
        },
        "FUN_0800738a": {
            "renaming": {
                "FUN_0800738a": "is_character_present_at_index_0800738a",
                "param_1": "character",
                "param_2": "string",
                "*param_2": "*string"
            },
            "code": "int is_character_present_at_index_0800738a(int character, char *string)\n{\n  if (character == -1) {\n    return 0;\n  }\n  while( *string != -1 ) {\n    if (character == *string) return 1;\n    string = string + 0xc;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738a",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08001cd0",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "is_character_present_at_index_0800738a"
        },
        "FUN_08004e3c": {
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "ptr1",
                "PTR_DAT_0000002c": "*(short *)((int)data + 42)",
                "PTR_DAT_00000020": "(*data)[4]",
                "PTR_DAT_00000034": "*(char *)((int)data + 62)",
                "PTR_DAT_0000003d": "*(undefined *)((int)data + 61)",
                "PTR_DAT_0000003e": "*(undefined *)((int)data + 62)",
                "PTR_DAT_00000030": "data[9]",
                "PTR_DAT_0000002e": "data[11]",
                "PTR_DAT_00000038": "data[12]"
            },
            "code": "int process_data_08004e3c(uint **data){\n  uint *ptr1;\n  ptr1 = PTR_DAT_0000002e;\n  if (PTR_DAT_0000002c == 3) {\n    if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) || (ptr1 == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    uint *ptr2 = PTR_DAT_00000030;\n    PTR_DAT_00000030 = (uint *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)PTR_DAT_00000020;\n    PTR_DAT_0000002c = PTR_DAT_0000002c + -1;\n  }\n  else if (PTR_DAT_0000002c == 2) {\n    if (((ptr1 == (uint *)0x4) || (ptr1 == (uint *)0x8)) || (ptr1 == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (ptr1 == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    uint *ptr2 = PTR_DAT_00000030;\n    PTR_DAT_00000030 = (uint *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)PTR_DAT_00000020;\n    PTR_DAT_0000002c = PTR_DAT_0000002c + -1;\n    ptr2 = PTR_DAT_00000030;\n    PTR_DAT_00000030 = (uint *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)PTR_DAT_00000020;\n    PTR_DAT_0000003d = 0x20;\n    PTR_DAT_00000038 = (uint *)0x0;\n    if (PTR_DAT_00000034 == '@') {\n      PTR_DAT_0000003e = 0;\n      do_nothing_08004d6a();\n    }\n    else {\n      PTR_DAT_0000003e = 0;\n      do_nothing_08004a20();\n    }\n  }\n  else {\n    uint *ptr2 = PTR_DAT_00000030;\n    PTR_DAT_00000030 = (uint *)((int)ptr2 + 1);\n    *(char *)ptr2 = (char)PTR_DAT_00000020;\n    PTR_DAT_0000002c = PTR_DAT_0000002c + -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e3c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004e3c"
        },
        "FUN_080091a0": {
            "renaming": {
                "FUN_080091a0": "insert_value_into_linked_list_080091a0",
                "param_1": "value",
                "PTR_PTR_DAT_080091ac": "linked_list_head",
                "insert_into_linked_list_080091d8": "insert"
            },
            "code": "void insert_value_into_linked_list_080091a0(void* PTR_PTR_DAT_080091ac, int value)\n{\n  insert(PTR_PTR_DAT_080091ac, value);\n  return;\n}",
            "called": [
                "FUN_080091d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091a0",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "insert_value_into_linked_list_080091a0"
        },
        "FUN_08002a1c": {
            "renaming": {
                "FUN_08002a1c": "initialize_data_08002a1c",
                "param_1": "data",
                "param_2": "size",
                "param_3": "ptr1",
                "param_4": "ptr2"
            },
            "code": "void initialize_data_08002a1c(void *data, int size, int *ptr1, int *ptr2) {\n  initialize_data_08002a1c_08002968(data, size, ptr1, ptr2, ptr2);\n  return;\n}",
            "called": [
                "FUN_08002968"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a1c",
            "calling": [
                "FUN_08002a26"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a1c"
        },
        "FUN_08007718": {
            "renaming": {
                "FUN_08007718": "subtract_four_from_value_08007718",
                "param_1": "value_to_subtract_from",
                "return": "result"
            },
            "code": "int subtract_four_from_value_08007718(int value_to_subtract_from) {\n    int result = value_to_subtract_from - 4;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007718",
            "calling": [
                "FUN_0800771c",
                "FUN_08007736"
            ],
            "imported": false,
            "current_name": "subtract_four_from_value_08007718"
        },
        "FUN_08002948": {
            "renaming": {
                "FUN_08002948": "check_and_initialize_08002948",
                "param_1": "is_one",
                "param_2": "value",
                "initialize_parameters_0800291c": "initialize_parameters",
                "PTR_DAT_08002964": "PTR_DAT_08002964"
            },
            "code": "void check_and_initialize_08002948(int is_one, int value)\n{\n    if (is_one != 1) {\n        return;\n    }\n    if (value == 0xffff) {\n        initialize_parameters(PTR_DAT_08002964);\n    }\n    return;\n}",
            "called": [
                "FUN_0800291c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002948",
            "calling": [
                "FUN_08002c1e"
            ],
            "imported": false,
            "current_name": "check_and_initialize_08002948"
        },
        "FUN_08009e64": {
            "renaming": {
                "FUN_08009e64": "check_permissions_and_return_value_08009e64",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "result_value",
                "param_4": "memory_permissions",
                "iVar1": "permission_check_result",
                "uVar2": "memory_permission_flags",
                "auStack_4c": "permission_flags_stack",
                "local_48": "permission_flags"
            },
            "code": "int check_permissions_and_return_value_08009e64(void* base_address, int size, uint* result_value, uint* memory_permissions) {\n  int permission_check_result;\n  uint permission_flags;\n  if (*(short*)(size + 0xE) < 0 || (permission_check_result = set_memory_permissions_and_check_return_value_0800a0ec(base_address, (int)*(short*)(size + 0xE), &permission_flags), permission_check_result < 0)) {\n    *result_value = 0;\n    if ((int)((uint)*(ushort*)(size + 0xC) << 0x18) < 0) {\n      *memory_permissions = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *result_value = (uint)((permission_flags & 0xF000) == 0x2000);\n  }\n  *memory_permissions = 0x400;\n  LAB_08009ea4:\n  return 0;\n}",
            "called": [
                "FUN_0800a0ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009e64",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "check_permissions_and_return_value_08009e64"
        },
        "FUN_08002acc": {
            "renaming": {
                "FUN_08002acc": "allocate_and_insert_into_linked_list_08002acc",
                "param_1": "node_size",
                "param_2": "requested_size",
                "param_3": "data",
                "param_4": "current_size",
                "puVar1": "list_ptr",
                "iVar2": "inserted_node",
                "uVar3": "uVar3",
                "*PTR_DAT_08002afc": "*list_ptr",
                "*PTR_DAT_08002af8": "*current_size_ptr"
            },
            "code": "void allocate_and_insert_into_linked_list_08002acc(uint32_t node_size, uint32_t requested_size, void *data, uint32_t current_size) {\n  uint32_t *PTR_DAT_08002afc = PTR_DAT_08002afc;\n  uint8_t *PTR_DAT_08002af8 = PTR_DAT_08002af8;\n  if (*PTR_DAT_08002af8 < requested_size) {\n    if (requested_size < 0x20) {\n      requested_size = 0x20;\n    }\n    uint32_t inserted_node = allocate_and_insert_into_linked_list_08002acc_08009908(*PTR_DAT_08002afc, requested_size, data, current_size, param_4);\n    *(uint32_t *)list_ptr = inserted_node;\n    if (inserted_node == 0) {\n      uint8_t uVar3 = 0;\n      *PTR_DAT_08002af8 = uVar3;\n    }\n    else {\n      *PTR_DAT_08002af8 = (uint8_t)requested_size;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002acc",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "allocate_and_insert_into_linked_list_08002acc"
        },
        "FUN_08002a30": {
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "data",
                "param_2": "shift_amount",
                "*PTR_DAT_08002a48": "*data_flag",
                "*PTR_DAT_08002a4c": "*data_shifted",
                "*PTR_DAT_08002a50": "*data_counter",
                "*PTR_DAT_08002a54": "*data_sum"
            },
            "code": "void initialize_data_08002a30(int data, int shift_amount) {\n    *PTR_DAT_08002a48 = 1;\n    *PTR_DAT_08002a4c = (char)(shift_amount << 1);\n    *PTR_DAT_08002a50 = 0;\n    *PTR_DAT_08002a54 = 0;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a30",
            "calling": [
                "FUN_08002b68",
                "FUN_08001cd0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "initialize_data_08002a30"
        },
        "FUN_0800932c": {
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_length",
                "param_2": "input_byte",
                "param_3": "input_array",
                "iVar1": "array_index",
                "pbVar2": "current_byte",
                "pbVar3": "short_pointer",
                "uVar4": "return_value"
            },
            "code": "uint process_input_0800932c(int input_length, byte input_byte, byte **input_array) {\n  int array_index = input_array[2] - 1;\n  input_array[2] = array_index;\n  if ((array_index >= -1) || ((input_array[6] <= array_index) && (input_byte != 0xa))) {\n    byte *current_byte = *input_array;\n    *input_array = current_byte + 1;\n    *current_byte = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_length != 0) && (*(int *)(input_length + 0x18) == 0)) {\n    initialize_data_for_object_08009d50();\n  }\n  if (input_array == (byte **)PTR_DAT_08009a74) {\n    input_array = *(byte ***)(input_length + 4);\n  }\n  else if (input_array == (byte **)PTR_DAT_08009a78) {\n    input_array = *(byte ***)(input_length + 8);\n  }\n  else if (input_array == (byte **)PTR_DAT_08009a7c) {\n    input_array = *(byte ***)(input_length + 0xc);\n  }\n  input_array[2] = input_array[6];\n  byte *short_pointer = (byte *)(uint)*(ushort *)(input_array + 3);\n  int shifted_pointer = (int)short_pointer << 0x1c;\n  if (((shifted_pointer < 0) && (short_pointer = input_array[4], short_pointer != (byte *)0x0)) || (process_data(input_length, input_array, shifted_pointer, short_pointer, current_byte) == 0)) {\n    uint return_value = (uint)input_byte;\n    int difference = (int)*input_array - (int)input_array[4];\n    if ((difference < (int)input_array[5]) || (process_data_08009c7c(input_length, input_array) == 0)) {\n      input_array[2] = input_array[2] - 1;\n      byte *current_byte = *input_array;\n      *input_array = current_byte + 1;\n      *current_byte = input_byte;\n      if ((byte *)(process_data_08009c7c(input_length, input_array) + 1) != input_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_array + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      if (process_data_08009c7c(input_length, input_array) == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}",
            "called": [
                "FUN_08009c7c",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800932c",
            "calling": [
                "FUN_08009358"
            ],
            "imported": false,
            "current_name": "process_input_0800932c"
        },
        "FUN_0800322c": {
            "renaming": {
                "FUN_0800322c": "execute_function_with_params_0800322c",
                "param_1": "function_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "puVar1": "function_ptr_2"
            },
            "code": "void execute_function_with_params_0800322c(undefined4 *function_ptr, undefined4 param1, undefined4 param2)\n{\n  undefined4 *function_ptr_2;\n  function_ptr_2 = (undefined4 *)*function_ptr;\n  if (function_ptr_2 != (undefined4 *)0x0) {\n    (**(code **)*function_ptr_2)(function_ptr_2, 0xf9);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr, param1);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr, param2);\n    return;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800322c",
            "calling": [
                "FUN_08002ddc"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_0800322c"
        },
        "FUN_080099a4": {
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "current_char_in_str",
                "param_2": "sub_str",
                "pcVar1": "current_char_in_str",
                "pcVar2": "str_last_char",
                "pcVar3": "sub_str_last_char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "char* find_substring_080099a4(char* str, char* sub_str) {\n    char* current_char_in_str = str;\n    char* current_char_in_sub_str;\n    \n    if (*str == '\\0') {\n        if (*sub_str != '\\0') {\n            str = NULL;\n        }\n        return str;\n    }\n    \n    do {\n        current_char_in_sub_str = sub_str;\n        if (*current_char_in_str == '\\0') {\n            return NULL;\n        }\n        char* sub_str_last_char = sub_str - 1;\n        char* str_last_char = current_char_in_str - 1;\n        do {\n            sub_str_last_char++;\n            if (*sub_str_last_char == '\\0') {\n                return current_char_in_str;\n            }\n            str_last_char++;\n            current_char_in_str++;\n        } while (*str_last_char == *sub_str_last_char);\n    } while (true);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080099a4",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_substring_080099a4"
        },
        "FUN_08005a1c": {
            "renaming": {
                "FUN_08005a1c": "get_first_value_from_pointer_08005a1c",
                "PTR_DAT_08005a24": "PTR_FIRST_VALUE_POINTER"
            },
            "code": "int get_first_value_from_pointer_08005a1c() {\n    return *(int *)PTR_DAT_08005a24;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a1c",
            "calling": [
                "FUN_080035b8",
                "FUN_08005a48",
                "FUN_08005a28"
            ],
            "imported": false,
            "current_name": "get_first_value_from_pointer_08005a1c"
        },
        "FUN_08001cd0": {
            "renaming": {
                "FUN_08001cd0": "FUNC_08001cd0"
            },
            "code": "\nvoid FUNC_08001cd0(undefined4 param_1,int param_2,byte *param_3,undefined4 param_4)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte bVar3;\n  undefined *puVar4;\n  undefined *puVar5;\n  undefined4 uVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  int iVar10;\n  char cVar11;\n  uint uVar12;\n  uint uVar13;\n  int iVar14;\n  bool bVar15;\n  \n  puVar5 = PTR_DAT_080022e8;\n  puVar4 = PTR_DAT_08002044;\n  switch(param_1) {\n  case 0x69:\n    execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n    execute_function_at_address_in_pointer_08002f1e(puVar5,0x6a);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      uVar13 = uVar12 - 0x2e & 0xff;\n      if (uVar13 < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_character_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          uVar13 = 0x7f;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_080022e4[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_character_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            uVar13 = 0x7f;\n          }\n        }\n      }\n      else {\n        uVar13 = 0x7f;\n      }\n      execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,uVar13);\n    }\n    execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    break;\n  case 0x6b:\n    execute_function_at_address_in_pointer_08002f1e(PTR_DAT_08002044,0xf0);\n    execute_function_at_address_in_pointer_08002f1e(puVar4,0x6c);\n    for (uVar12 = 0; uVar12 < 0x3c; uVar12 = uVar12 + 1 & 0xff) {\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_08002044;\n      if (bVar15) {\n        execute_function_at_address_in_pointer_08002f1e(PTR_DAT_08002044,0);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,1);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,0xb);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,1);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,1);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,1);\n      }\n      if ((uVar12 - 0x2e & 0xff) < 0xe) {\n        if (uVar12 < 0x3c) {\n          iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n        }\n        else {\n          iVar9 = -1;\n        }\n        iVar9 = find_character_index_080036ac(iVar9);\n        if (iVar9 == 0) {\n          bVar15 = false;\n        }\n        else {\n          if (uVar12 < 0x3c) {\n            iVar9 = (int)(char)PTR_DAT_08002060[uVar12];\n          }\n          else {\n            iVar9 = -1;\n          }\n          iVar9 = find_character_index_080036ac(iVar9);\n          if (iVar9 == 1) {\n            bVar15 = false;\n          }\n          else {\n            bVar15 = true;\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,2);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,10);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = is_character_present_at_index_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022ec);\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,3);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,8);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (bVar15) {\n        execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,4);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,0xe);\n      }\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_080022e4[uVar12] == -1) {\n          iVar9 = 0;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            iVar9 = 0;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_080022e4[uVar12]);\n            if (iVar9 == 1) {\n              iVar9 = 0;\n            }\n            else {\n              iVar9 = is_character_present_at_index_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f0);\n              if (iVar9 == 0) {\n                iVar9 = is_character_present_at_index_0800738a((int)(char)PTR_DAT_080022e4[uVar12],PTR_DAT_080022f4);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar9 = 0;\n      }\n      puVar4 = PTR_DAT_080022e8;\n      if (iVar9 != 0) {\n        execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,6);\n        execute_function_at_address_in_pointer_08002f1e(puVar4,1);\n      }\n      execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,0x7f);\n    }\n    execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n    return;\n  case 0x6d:\n    if (param_2 != 0) {\n      bVar1 = *param_3;\n      execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,0xf0);\n      execute_function_at_address_in_pointer_08002f1e(puVar5,0x6e);\n      execute_function_at_address_in_pointer_08002f1e(puVar5,bVar1);\n      if (bVar1 < 0x3c) {\n        uVar6 = get_data_at_offset_08002fa0(puVar5,bVar1);\n        execute_function_at_address_in_pointer_08002f1e(puVar5,uVar6);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        execute_function_at_address_in_pointer_08002f1e(puVar5,uVar12 & 0x7f);\n        uVar12 = get_value_at_offset_08002fba(puVar5,bVar1);\n        if ((uVar12 & 0xff80) != 0) {\n          iVar9 = get_value_at_offset_08002fba(puVar5,bVar1);\n          execute_function_at_address_in_pointer_08002f1e(puVar5,(uint)(iVar9 << 0x12) >> 0x19);\n        }\n        uVar12 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n        puVar4 = PTR_DAT_080022e8;\n        if ((uVar12 & 0xc000) != 0) {\n          iVar9 = get_value_at_offset_08002fba(PTR_DAT_080022e8,bVar1);\n          execute_function_at_address_in_pointer_08002f1e(puVar4,(uint)(iVar9 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_at_address_in_pointer_08002f1e(PTR_DAT_080022e8,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < param_2) {\n      uVar12 = (uint)param_3[1];\n      if (2 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[2] << 7;\n      }\n      if (3 < param_2) {\n        uVar12 = uVar12 | (uint)param_3[3] << 0xe;\n      }\n      decode_and_store_08000214(*param_3,uVar12);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < param_2) {\n      uVar12 = (uint)*param_3;\n      bVar1 = param_3[1];\n      bVar7 = param_3[2];\n      bVar2 = param_3[3];\n      bVar3 = param_3[4];\n      if (uVar12 < 0x3c) {\n        if (PTR_DAT_08002060[uVar12] == -1) {\n          bVar15 = false;\n        }\n        else {\n          iVar9 = find_character_index_080036ac();\n          if (iVar9 == 0) {\n            bVar15 = false;\n          }\n          else {\n            iVar9 = find_character_index_080036ac((int)(char)PTR_DAT_08002060[uVar12]);\n            if (iVar9 == 1) {\n              bVar15 = false;\n            }\n            else {\n              bVar15 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar15 = false;\n      }\n      if (bVar15) {\n        if ((byte)PTR_DAT_08002064[uVar12] < 0xc) {\n          iVar9 = get_byte_value_times_eight_080026f8(PTR_DAT_08002068 + (uint)(byte)PTR_DAT_08002064[uVar12] * 3);\n        }\n        else {\n          iVar9 = 0;\n        }\n        if (iVar9 != 0) {\n          process_data_08000588(uVar12);\n        }\n        update_character_stats_08000500(uVar12,(uint)bVar1 + (uint)bVar7 * 0x80,(uint)bVar2 + (uint)bVar3 * 0x80);\n        FUNC_080005f8(uVar12,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    bVar1 = param_3[1];\n    bVar7 = bVar1 & 0x18;\n    if ((bVar1 & 0x20) != 0) {\n      send_encoded_data_08002f14(PTR_DAT_08002044,PTR_s_10_bit_addressing_not_supported_08002040,bVar7,bVar1,\n                   param_4);\n      return;\n    }\n    bVar2 = *param_3;\n    bVar15 = (bVar1 & 0x40) == 0;\n    if (bVar7 < 0x19) {\n      switch(bVar7) {\n      case 0:\n        initialize_data_08002a30(PTR_DAT_08002048,bVar2);\n        for (uVar12 = 2; (int)uVar12 < param_2; uVar12 = uVar12 + 2 & 0xff) {\n          insert_data_into_linked_list_at_end_08001bf8(param_3[uVar12 + 1] * -0x80 + param_3[uVar12]);\n        }\n        send_request_with_flag_and_params_08002ac0(PTR_DAT_08002048);\n        return;\n      case 8:\n        if (param_2 == 6) {\n          iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n          cVar8 = param_3[4] + param_3[5] * -0x80;\n        }\n        else {\n          cVar8 = param_3[2] + param_3[3] * -0x80;\n          iVar9 = -1;\n        }\n        process_i2c_request_and_send_response_08001c18(bVar2,iVar9,cVar8);\n        return;\n      case 0x10:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 + 1 < 8) {\n          if (param_2 == 6) {\n            iVar9 = (uint)param_3[2] + (uint)param_3[3] * 0x80;\n            cVar11 = param_3[4] + param_3[5] * -0x80;\n          }\n          else {\n            cVar11 = param_3[2] + param_3[3] * -0x80;\n            iVar9 = -1;\n          }\n          *PTR_DAT_0800204c = cVar8 + '\\x01';\n          puVar4 = PTR_DAT_08002050;\n          iVar10 = (char)(cVar8 + '\\x01') * 0xc;\n          PTR_DAT_08002050[iVar10] = bVar2;\n          *(int *)(puVar4 + iVar10 + 4) = iVar9;\n          puVar4[iVar10 + 8] = cVar11;\n          puVar4[iVar10 + 9] = bVar15;\n          return;\n        }\n        send_encoded_data_08002f14(PTR_DAT_08002044,PTR_s_too_many_queries_08002054,(int)cVar8,bVar15,param_4);\n        return;\n      case 0x18:\n        cVar8 = *PTR_DAT_0800204c;\n        if (cVar8 < 1) {\n          *PTR_DAT_0800204c = 0xff;\n          return;\n        }\n      }\n      for (uVar12 = 0; iVar9 = cVar8 + 1, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (bVar2 == PTR_DAT_08002050[uVar12 * 0xc]) goto LAB_08001e66;\n      }\n      uVar12 = 0;\nLAB_08001e66:\n      for (; puVar4 = PTR_DAT_08002050, (int)uVar12 < iVar9; uVar12 = uVar12 + 1 & 0xff) {\n        if (uVar12 < 8) {\n          iVar10 = (uVar12 + 1) * 0xc;\n          iVar14 = uVar12 * 0xc;\n          PTR_DAT_08002050[iVar14] = PTR_DAT_08002050[iVar10];\n          *(undefined4 *)(puVar4 + iVar14 + 4) = *(undefined4 *)(puVar4 + iVar10 + 4);\n          puVar4[iVar14 + 8] = puVar4[iVar10 + 8];\n          puVar4[iVar14 + 9] = puVar4[iVar10 + 9];\n        }\n      }\n      *PTR_DAT_0800204c = cVar8 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80;\n    if ((1 < param_2) && (iVar9 != 0)) {\n      *(int *)PTR_DAT_08002058 = iVar9;\n    }\n    if (*PTR_DAT_0800205c == '\\0') {\n      check_and_mark_characters_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < param_2) &&\n       (iVar9 = (uint)*param_3 + (uint)param_3[1] * 0x80, *(int *)PTR_DAT_0800206c = iVar9,\n       iVar9 == 0)) {\n      *(undefined4 *)PTR_DAT_0800206c = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fba",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_08002ac0",
                "FUN_0800738a",
                "FUN_08002f1e",
                "FUN_080026f8",
                "FUN_08000588",
                "FUN_08000214",
                "FUN_08001bf8",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_08002a30",
                "FUN_08001c18",
                "FUN_08000a64",
                "FUN_080005f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_08001cd0"
        },
        "FUN_08003760": {
            "renaming": {
                "FUN_08003760": "get_ptr_dat_value_08003760",
                "PTR_DAT_08003768": "ptr_dat_value"
            },
            "code": "uint32_t get_ptr_dat_value_08003760(void)\n{\n  uint32_t* PTR_DAT_08003768 = (uint32_t*)PTR_DAT_08003768;\n  return *PTR_DAT_08003768;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003760",
            "calling": [
                "FUN_08008500",
                "FUN_080058d2",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_080067ac",
                "FUN_08005460",
                "FUN_08007e74",
                "FUN_08003e20",
                "FUN_08003a20",
                "FUN_08005aa4",
                "FUN_0800376c",
                "FUN_08003b8c",
                "FUN_080066e8"
            ],
            "imported": false,
            "current_name": "get_ptr_dat_value_08003760"
        },
        "FUN_08007320": {
            "renaming": {
                "FUN_08007320": "find_value_08007320",
                "param_1": "value_to_find",
                "uVar1": "found_value",
                "find_value_in_array_08007306": "search_array"
            },
            "code": "int find_value_08007320(int value_to_find)\n{\n  int found_value = 0;\n  if (value_to_find != -1) {\n    found_value = search_array();\n  }\n  return found_value;\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007320",
            "calling": [
                "FUN_080077b0",
                "FUN_08006d80",
                "FUN_08008500",
                "FUN_080084b0",
                "FUN_080071e4",
                "FUN_08008078",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "find_value_08007320"
        },
        "FUN_08000be8": {
            "renaming": {
                "FUN_08000be8": "calculate_and_call_function_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param_4",
                "puVar1": "ptr_2",
                "puVar2": "ptr_1"
            },
            "code": "void calculate_and_call_function_08000be8(uint8_t index, uint32_t mask, int condition, uint32_t param_4)\n{\n  uint8_t* ptr_1 = (uint8_t*)((uint8_t)PTR_DAT_08000c0c[index] & mask);\n  uint8_t* ptr_2 = PTR_DAT_08000c0c;\n  if ((condition != 0) || (ptr_2 = (uint8_t*)(uint8_t)PTR_DAT_08000c10[index], ptr_1 != ptr_2)) {\n    calculate_data_and_call_function_08002efe(PTR_DAT_08000c14, index, ptr_1, ptr_2, param_4);\n    PTR_DAT_08000c10[index] = (char)ptr_1;\n  }\n  return;\n}",
            "called": [
                "FUN_08002efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000be8",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "calculate_and_call_function_08000be8"
        },
        "FUN_08003fd8": {
            "renaming": {
                "FUN_08003fd8": "validate_input_length_08003fd8",
                "param_1": "input_length",
                "puVar1": "ptr_input_length"
            },
            "code": "int validate_input_length_08003fd8(unsigned int input_length)\n{\n    unsigned int *ptr_input_length = DAT_08003ffc;\n    if (input_length - 1U < 0x1000000) {\n        ptr_input_length[1] = input_length - 1U;\n        *(unsigned char *)(DAT_08004000 + 0x23) = 0xf0;\n        ptr_input_length[2] = 0;\n        *ptr_input_length = 7;\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd8",
            "calling": [
                "FUN_080035b8",
                "FUN_080036d8"
            ],
            "imported": false,
            "current_name": "validate_input_length_08003fd8"
        },
        "FUN_0800307a": {
            "renaming": {
                "FUN_0800307a": "encode_data_0800307a",
                "param_1": "function_ptr",
                "param_2": "data_length",
                "param_3": "data",
                "param_4": "max_length",
                "uVar1": "current_byte",
                "uVar2": "bit_index",
                "uVar3": "encoded_byte",
                "uVar4": "byte_index"
            },
            "code": "void encode_data_0800307a(uint32_t *function_ptr, uint32_t data_length, uint8_t *data, uint32_t max_length)\n{\n  uint32_t current_byte = (uint32_t)*data;\n  if (max_length == 0) {\n    max_length = 0xffffffff;\n  }\n  uint32_t byte_index = 0;\n  uint32_t bit_index = 0;\n  uint32_t encoded_byte = 0;\n  while ((byte_index < data_length && (encoded_byte < max_length))) {\n    (***(code ***)(uint32_t *)*function_ptr)\n              ((uint32_t *)*function_ptr,((uint32_t)data[byte_index] << (bit_index & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint32_t)data[byte_index] >> (7 - bit_index & 0xff) & 0xff;\n    bit_index = bit_index + 1;\n    while ((encoded_byte = encoded_byte + 1, 6 < bit_index && (encoded_byte < max_length))) {\n      (***(code ***)(uint32_t *)*function_ptr)((uint32_t *)*function_ptr,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_index = bit_index - 7;\n    }\n    byte_index = byte_index + 1;\n  }\n  if ((bit_index != 0) && (encoded_byte < max_length)) {\n    (***(code ***)(uint32_t *)*function_ptr)((uint32_t *)*function_ptr,(1 << (bit_index & 0xff)) - 1U & current_byte);\n  }\n  return;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800307a",
            "calling": [
                "FUN_080031ce",
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_08003106",
                "FUN_0800319e"
            ],
            "imported": false,
            "current_name": "encode_data_0800307a"
        },
        "FUN_08004b80": {
            "renaming": {
                "FUN_08004b80": "do_nothing_08004b80"
            },
            "code": "\nvoid do_nothing_08004b80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b80",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004b80"
        },
        "FUN_0800319e": {
            "renaming": {
                "FUN_0800319e": "call_function_with_data_0800319e",
                "param_1": "function_ptr",
                "param_2": "data",
                "param_3": "encoding",
                "puVar1": "function",
                "local_a": "encoded_data"
            },
            "code": "void call_function_with_data_0800319e(void *function_ptr, uint32_t data, uint16_t encoding) {\n  void (*function)(void *, uint32_t) = *(void (**)(void *, uint32_t))function_ptr;\n  if (function != NULL) {\n    uint8_t encoded_data[2];\n    encoded_data[0] = encoding & 0xFF;\n    encoded_data[1] = (encoding >> 8) & 0xFF;\n    function(function_ptr, (data & 0xF) | 0x90);\n    encode_data(encoded_data, 2);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800319e",
            "calling": [
                "FUN_08002efe"
            ],
            "imported": false,
            "current_name": "call_function_with_data_0800319e"
        },
        "FUN_08008d00": {
            "renaming": {
                "FUN_08008d00": "set_value_at_address_based_on_lookup_table_08008d00",
                "param_1": "address",
                "param_2": "lookup_index",
                "uVar1": "value_to_set",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "code": "void set_value_at_address_based_on_lookup_table_08008d00(int address, uint lookup_index)\n{\n  undefined value_to_set;\n  code *jump_table;\n  if (lookup_index < 0x3c) {\n    value_to_set = PTR_DAT_08008d14[lookup_index];\n  }\n  else {\n    value_to_set = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = value_to_set;\n  (*jump_table)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d00",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_value_at_address_based_on_lookup_table_08008d00"
        },
        "FUN_08009190": {
            "renaming": {
                "FUN_08009190": "allocate_memory_block_08009190",
                "param_1": "size",
                "PTR_PTR_DAT_0800919c": "ptr_ptr_dat",
                "allocate_memory_block_08009270": "allocate_memory_block_08009270"
            },
            "code": "void allocate_memory_block_08009190(void* ptr, size_t size)\n{\n  allocate_memory_block_08009190_08009270(*(void **)PTR_PTR_DAT_0800919c, size);\n  return;\n}",
            "called": [
                "FUN_08009270"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009190",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009190"
        },
        "FUN_08004b82": {
            "renaming": {
                "FUN_08004b82": "process_input_08004b82",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "temp_ptr"
            },
            "code": "uint32_t process_input_08004b82(uint32_t **input)\n{\n  char current_char;\n  uint32_t *temp_ptr;\n  \n  current_char = *(char *)((int)input + 0x3d);\n  temp_ptr = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (current_char == '!')) {\n    if ((temp_ptr == (uint32_t *)0x4) || ((temp_ptr == (uint32_t *)0x8 || (temp_ptr == (uint32_t *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint32_t *)0x0;\n      *(char *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(char *)((int)input + 0x3e) = 0;\n        do_nothing_08004b80();\n      }\n      else {\n        *(char *)((int)input + 0x3e) = 0;\n        do_nothing_08004a1e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint32_t *)0x11;\n      *(char *)((int)input + 0x3e) = 0;\n      *(char *)((int)input + 0x3d) = 0x20;\n      do_nothing_08004a1e();\n    }\n  }\n  else if ((current_char == '!') || ((*(char *)((int)input + 0x3e) == '@' && (current_char == '\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint32_t *)0x0) {\n        if (input[0x13] == (uint32_t *)0x1) {\n          (*input)[4] = (uint32_t)input[0x12] & 0xff;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint32_t)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint32_t *)0x1) {\n        (*input)[4] = (uint32_t)input[0x12] & 0xff;\n        input[0x14] = (uint32_t *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint32_t *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          temp_ptr = input[9];\n          input[9] = (uint32_t *)((int)temp_ptr + 1);\n          (*input)[4] = (uint32_t)*(uint8_t *)temp_ptr;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      temp_ptr = input[9];\n      input[9] = (uint32_t *)((int)temp_ptr + 1);\n      (*input)[4] = (uint32_t)*(uint8_t *)temp_ptr;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004b82",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004b82"
        },
        "FUN_0800997e": {
            "renaming": {
                "FUN_0800997e": "find_last_occurence_of_character_in_string_0800997e",
                "param_1": "string_start",
                "param_2": "string_length",
                "param_3": "character_to_find",
                "param_4": "string_offset",
                "iVar1": "character_index",
                "iVar2": "last_occurence_index"
            },
            "code": "int find_last_occurence_of_character_in_string_0800997e(int string_start, int string_length, char character_to_find, int string_offset, char null_terminator) {\n  int last_occurence_index = 0;\n  if (string_length != 0) {\n    while (int character_index = find_character_in_string_08009938(string_start, string_length, character_to_find, string_offset, null_terminator), character_index != 0) {\n      string_start = character_index + 1;\n      last_occurence_index = character_index;\n    }\n    return last_occurence_index;\n  }\n  last_occurence_index = find_character_in_string_08009938(string_start, string_length, character_to_find, string_offset, null_terminator);\n  return last_occurence_index;\n}",
            "called": [
                "FUN_08009938"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800997e",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "find_last_occurence_of_character_in_string_0800997e"
        },
        "FUN_08002dbc": {
            "renaming": {
                "FUN_08002dbc": "initialize_if_param_is_one_08002dbc",
                "param_1": "param1",
                "param_2": "param2",
                "initialize_data_08002ce0": "initialize_data"
            },
            "code": "void initialize_if_param_is_one_08002dbc(int param1, int param2) {\n    if (param1 != 1) {\n        return;\n    }\n    if (param2 == 0xffff) {\n        initialize_data(PTR_DAT_08002dd8);\n    }\n    return;\n}",
            "called": [
                "FUN_08002ce0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002dbc",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_param_is_one_08002dbc"
        },
        "FUN_08002e44": {
            "renaming": {
                "FUN_08002e44": "process_input_08002e44",
                "param_1": "output_buffer_ptr",
                "param_2": "input_buffer_ptr",
                "param_3": "input_terminator",
                "param_4": "output_terminator",
                "bVar1": "string_length",
                "cVar2": "character",
                "iVar3": "substring_index",
                "iVar4": "last_path_separator_index",
                "puVar5": "output_buffer",
                "PTR_s__cpp_08002ec0": "CPP_STRING",
                "0x2f": "PATH_SEPARATOR",
                "0x5c": "ALT_PATH_SEPARATOR",
                "*(char *)(param_1 + 0xc4)": "*(char *)(output_buffer_ptr + OUTPUT_LENGTH_OFFSET)",
                "*(undefined4 *)(param_1 + 200)": "*(undefined4 *)(output_buffer_ptr + LINKED_LIST_OFFSET)",
                "*(undefined **)(param_1 + 200)": "*(undefined **)(output_buffer_ptr + LINKED_LIST_OFFSET)",
                "*(byte *)(param_1 + 0xc4)": "*(byte *)(output_buffer_ptr + OUTPUT_LENGTH_OFFSET)"
            },
            "code": "void process_input_08002e44(int input_buffer_ptr, int output_buffer_ptr, undefined input_terminator, undefined output_terminator)\n{\n    byte string_length;\n    char character;\n    int substring_index;\n    int last_path_separator_index;\n    undefined *output_buffer;\n    \n    substring_index = find_substring(input_buffer_ptr, PTR_s__cpp_08002ec0);\n    last_path_separator_index = find_last_occurence_of_character(input_buffer_ptr, PATH_SEPARATOR);\n    if (last_path_separator_index == 0) {\n        last_path_separator_index = find_last_occurence_of_character(input_buffer_ptr, ALT_PATH_SEPARATOR);\n    }\n    if (last_path_separator_index != 0) {\n        input_buffer_ptr = last_path_separator_index + 1;\n    }\n    if (substring_index == 0) {\n        character = find_end_of_string(input_buffer_ptr);\n        *(char *)(output_buffer_ptr + OUTPUT_LENGTH_OFFSET) = character + 2;\n    }\n    else {\n        *(char *)(output_buffer_ptr + OUTPUT_LENGTH_OFFSET) = ((char)substring_index - (char)input_buffer_ptr) + 2;\n    }\n    insert_value_into_linked_list(*(undefined4 *)(output_buffer_ptr + LINKED_LIST_OFFSET));\n    string_length = *(byte *)(output_buffer_ptr + OUTPUT_LENGTH_OFFSET);\n    output_buffer = (undefined *)allocate_memory_block(string_length + 1);\n    *(undefined **)(output_buffer_ptr + LINKED_LIST_OFFSET) = output_buffer;\n    output_buffer[string_length] = 0;\n    *output_buffer = input_terminator;\n    output_buffer[1] = output_terminator;\n    copy_string(output_buffer + 2, input_buffer_ptr, *(byte *)(output_buffer_ptr + OUTPUT_LENGTH_OFFSET) - 2);\n    return;\n}",
            "called": [
                "FUN_080099a4",
                "FUN_08009190",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_0800997e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e44",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_input_08002e44"
        },
        "FUN_0800242c": {
            "renaming": {
                "FUN_0800242c": "initialize_clock_and_data_0800242c",
                "param_1": "initial_value",
                "param_2": "interval",
                "param_3": "value_limit",
                "param_4": "data_size",
                "PTR_LAB_08002444_1_08002440": "data_array"
            },
            "code": "void initialize_clock_and_data_0800242c(unsigned int initial_value, unsigned int interval, unsigned int value_limit, unsigned char* PTR_LAB_08002444_1_08002440, unsigned int data_size) {\n    initialize_clock_and_data_0800242c_08007648(initial_value, interval, value_limit, PTR_LAB_08002444_1_08002440, data_size);\n    return;\n}",
            "called": [
                "FUN_08007648"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800242c",
            "calling": [
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "initialize_clock_and_data_0800242c"
        },
        "FUN_080058d2": {
            "renaming": {
                "FUN_080058d2": "perform_task_080058d2",
                "param_1": "flags",
                "param_2": "length",
                "puVar1": "data_ptr",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result",
                "DAT_08005a10": "task_data",
                "DAT_08005a0c": "task_data_ptr",
                "PTR_DAT_08005a18": "task_data_output",
                "PTR_DAT_08005a14": "task_data_output_shift"
            },
            "code": "uint32_t perform_task_080058d2(uint32_t *flags, uint32_t length)\n{\n  uint32_t *data_ptr;\n  int start_time;\n  int current_time;\n  uint32_t result;\n  \n  if ((*flags & 2) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffff0f | flags[2];\n  }\n  \n  if ((*flags & 1) != 0) {\n    uint32_t task_type = flags[1];\n    if (task_type == 1) {\n      if ((DAT_08005a10[0] & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((task_type != 2) && ((DAT_08005a10[0] & 2) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffffffc | task_type;\n    start_time = get_current_time();\n    if (task_type == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (task_type == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint32_t)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  \n  data_ptr = DAT_08005a0c;\n  if ((length < (*DAT_08005a0c & 7)) && (*DAT_08005a0c = *DAT_08005a0c & 0xfffffff8 | length, length != (*data_ptr & 7))) {\n    return 1;\n  }\n  \n  if ((*flags & 4) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xfffff8ff | flags[3];\n  }\n  \n  if ((*flags & 8) != 0) {\n    DAT_08005a10[1] = DAT_08005a10[1] & 0xffffc7ff | flags[4] << 3;\n  }\n  result = calculate_result();\n  *(uint32_t *)PTR_DAT_08005a18 = result >> PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  set_input_length(0xf);\n  return 0;\n}",
            "called": [
                "FUN_08005840",
                "FUN_08003760",
                "FUN_080036d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058d2",
            "calling": [
                "FUN_080058ac"
            ],
            "imported": false,
            "current_name": "perform_task_080058d2"
        },
        "FUN_08002c00": {
            "renaming": {
                "FUN_08002c00": "process_request_08002c00",
                "process_request_08002b68": "execute_request"
            },
            "code": "void process_request_08002c00(void)\n{\n  execute_request();\n  return;\n}",
            "called": [
                "FUN_08002b68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c00",
            "calling": [
                "FUN_08002c14"
            ],
            "imported": false,
            "current_name": "process_request_08002c00"
        },
        "FUN_08003f30": {
            "renaming": {
                "FUN_08003f30": "set_bits_in_register_08003f30",
                "param_1": "register_address",
                "param_2": "bit_mask",
                "param_3": "bits_to_set",
                "uVar1": "shift_amount",
                "uVar2": "bits_to_shift",
                "DAT_08003f8c": "data_address_1",
                "DAT_08003f90": "data_address_2"
            },
            "code": "void set_bits_in_register_08003f30(uint register_address, uint bit_mask, uint bits_to_set) {\n  uint shift_amount = (*(int *)(DAT_08003f8c + 0xc) << 0x15) >> 0x1d;\n  uint bits_to_shift = 7 - shift_amount;\n  if (bits_to_shift > 3) {\n    bits_to_shift = 4;\n  }\n  if (shift_amount + 4 < 7) {\n    shift_amount = 0;\n  }\n  else {\n    shift_amount = shift_amount - 3;\n  }\n  uint shifted_bits = (bit_mask & (1 << (bits_to_shift & 0xff)) - 1U) << (shift_amount & 0xff) | (1 << (shift_amount & 0xff)) - 1U & bits_to_set;\n  if ((int)register_address < 0) {\n    *(char *)(DAT_08003f90 + (register_address & 0xf)) = (char)(shifted_bits << 4);\n  }\n  else {\n    *(char *)(register_address + 0xe000e400) = (char)(shifted_bits << 4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f30",
            "calling": [
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_080036d8",
                "FUN_0800863c",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "set_bits_in_register_08003f30"
        },
        "FUN_08007f78": {
            "renaming": {
                "FUN_08007f78": "subtract_four_from_param_08007f78",
                "param_1": "input_parameter",
                "return": "result"
            },
            "code": "int subtract_four_from_param_08007f78(int input_parameter)\n{\n  int result = input_parameter - 4;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f78",
            "calling": [
                "FUN_08007fa0",
                "FUN_08007ff0",
                "FUN_08008020"
            ],
            "imported": false,
            "current_name": "subtract_four_from_param_08007f78"
        },
        "FUN_08006b28": {
            "renaming": {
                "FUN_08006b28": "get_bit_08006b28",
                "param_1": "num",
                "param_2": "bit_index",
                "PTR_": "ptr",
                "DAT_": "masked_num"
            },
            "code": "uint get_bit_08006b28(uint num, int bit_index) {\n    uint* PTR_ = (uint*)(bit_index + ((num << 0x18) >> 0x1c) * 4);\n    uint DAT_ = num & 0xf;\n    uint result = (*PTR_ >> DAT_) & 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b28",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990",
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "get_bit_08006b28"
        },
        "FUN_080085dc": {
            "renaming": {
                "FUN_080085dc": "is_combination_valid_080085dc",
                "param_1": "index",
                "uVar1": "combined_bytes"
            },
            "code": "bool is_combination_valid_080085dc(int index)\n{\n  uint16_t combined_bytes = combine_bytes(get_pointer(PTR_DAT_080085fc + (uint16_t)*(byte *)(index + 0x44) * 4));\n  return (combined_bytes & 0x0021) == 0x0021;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085dc",
            "calling": [],
            "imported": false,
            "current_name": "is_combination_valid_080085dc"
        },
        "FUN_08006b1c": {
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address",
                "* (byte *) (param_1 + 0x3a)": "byte1",
                "* (byte *) (param_1 + 0x39)": "byte2"
            },
            "code": "byte combine_bytes_08006b1c(int address)\n{\n  byte byte1 = *(byte *)(address + 0x3a);\n  byte byte2 = *(byte *)(address + 0x39);\n  return byte1 | byte2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b1c",
            "calling": [
                "FUN_080085dc",
                "FUN_080085b8"
            ],
            "imported": false,
            "current_name": "combine_bytes_08006b1c"
        },
        "FUN_08008ed6": {
            "renaming": {
                "FUN_08008ed6": "convert_or_call_func_08008ed6",
                "param_1": "func_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "convert_base_08008e7c": "convert_base"
            },
            "code": "void convert_or_call_func_08008ed6(void* func_ptr, uint32_t arg1, uint32_t arg2, void* arg3) {\n  if (arg2 != 0) {\n    convert_base(func_ptr, arg1, arg2 & 0xff);\n    return;\n  }\n  (**(void (**)(void*, uint32_t, uint32_t, void*))func_ptr)(func_ptr, arg1 & 0xff, 0, *(void (**)(void*, uint32_t, uint32_t, void*))func_ptr, arg3);\n  return;\n}",
            "called": [
                "FUN_08008e7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ed6",
            "calling": [
                "FUN_08008eec"
            ],
            "imported": false,
            "current_name": "convert_or_call_func_08008ed6"
        },
        "FUN_0800a130": {
            "renaming": {
                "FUN_0800a130": "process_data_0800a130",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "puVar1": "data_ptr",
                "iVar2": "return_value"
            },
            "code": "void process_data_0800a130(int *result, undefined4 param_2, undefined4 param_3, undefined4 param_4) {\n  undefined *data_ptr;\n  int return_value;\n  data_ptr = PTR_DAT_0800a150;\n  *(undefined4 *)PTR_DAT_0800a150 = 0;\n  return_value = calculate_result(param_2, param_3, param_4, param_4, param_4);\n  if ((return_value == -1) && (*(int *)data_ptr != 0)) {\n    *result = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a130",
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "process_data_0800a130"
        },
        "FUN_08008f3c": {
            "renaming": {
                "FUN_08008f3c": "calculate_bit_position_08008f3c",
                "param_1": "number",
                "cVar1": "bit_position"
            },
            "code": "char calculate_bit_position_08008f3c(uint number) {\n  char bit_position = 0;\n  while (number != 1) {\n    bit_position++;\n    number = number >> 1;\n  }\n  return bit_position;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f3c",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "calculate_bit_position_08008f3c"
        },
        "FUN_08002ef2": {
            "renaming": {
                "FUN_08002ef2": "encode_data_08002ef2",
                "param_1": "data_offset",
                "param_2": "data_size",
                "param_3": "data_type",
                "param_4": "param_4"
            },
            "code": "void encode_data_08002ef2(int data_offset, undefined4 data_size, undefined2 data_type, undefined4 param_4){\n  encode_or_process_data_08003158(data_offset + 0x40, data_size, data_type, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_08003158"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef2",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "encode_data_08002ef2"
        },
        "FUN_08007332": {
            "renaming": {
                "FUN_08007332": "find_param_value_08007332",
                "param_1": "target_param",
                "param_2": "param_list",
                "*param_2": "*param_list",
                "*(int *)(param_2 + 4)": "*(int *)(param_list + 4)"
            },
            "code": "int find_param_value_08007332(int target_param, char *param_list) {\n  while (true) {\n    int current_param = *(int *)(param_list + 4);\n    if (current_param == 0) {\n      return -1;\n    }\n    if (current_param == target_param) {\n      return (int)*param_list;\n    }\n    param_list = param_list + 0xc;\n  }\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007332",
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "imported": false,
            "current_name": "find_param_value_08007332"
        },
        "FUN_08006128": {
            "renaming": {
                "FUN_08006128": "handle_data_request_08006128",
                "param_1": "data_ptr",
                "param_2": "request_type",
                "param_3": "data_size",
                "*(char *)(param_1 + 0xf)": "*(char *)(data_ptr + 0xf)",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_ptr + 0x3d)",
                "set_configuration_08005cec": "set_configuration",
                "update_data_080060c4": "update_data",
                "update_data_structure_08005d48": "update_data_structure",
                "update_data_08005dac": "update_data"
            },
            "code": "int handle_data_request_08006128(int *data_ptr, int request_type, int data_size) {\n  if (*(char *)(data_ptr + 0xf) != '\\x01') {\n    *(char *)(data_ptr + 0xf) = 1;\n    *(char *)((int)data_ptr + 0x3d) = 2;\n    switch(request_type) {\n      case 0:\n        set_configuration(*data_ptr);\n        break;\n      case 4:\n        update_data(*data_ptr);\n        break;\n      case 8:\n        update_data_structure(*data_ptr);\n        break;\n      case 0xc:\n        update_data(*data_ptr);\n    }\n    *(char *)((int)data_ptr + 0x3d) = 1;\n    *(char *)(data_ptr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}",
            "called": [
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec",
                "FUN_08005dac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006128",
            "calling": [
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "handle_data_request_08006128"
        },
        "FUN_08003658": {
            "renaming": {
                "FUN_08003658": "copy_data_and_reset_stats_08003658",
                "iVar1": "i",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_08003698": "PTR_DATA_COPY_START",
                "PTR_DAT_08003690": "PTR_DATA_START",
                "PTR_DAT_08003694": "PTR_DATA_END",
                "DAT_0800368c": "DATA_COPY_START",
                "PTR_DAT_0800369c": "PTR_ZERO_END",
                "set_bit_and_mask_080073ec": "set_bit_and_mask",
                "execute_functions_08009148": "execute_functions",
                "process_data_and_update_stats_08008f1c": "process_data_and_update_stats"
            },
            "code": "void copy_data_and_reset_stats_08003658(void)\n{\n  int i;\n  undefined4 *ptr;\n  code *jump_table;\n  for (i = 0; PTR_DAT_08003690 + i < PTR_DAT_08003694; i += 4)\n  {\n    *(undefined4 *)(PTR_DAT_08003690 + i) = *(undefined4 *)(DAT_0800368c + i);\n  }\n  for (ptr = PTR_ZERO_START; ptr < PTR_DAT_0800369c; ptr++)\n  {\n    *ptr = 0;\n  }\n  set_bit_and_mask();\n  execute_functions();\n  jump_table = (code *)0x800368a;\n  process_data_and_update_stats();\n  (*jump_table)();\n  return;\n}",
            "called": [
                "FUN_08008f1c",
                "FUN_08009148",
                "FUN_080073ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003658",
            "calling": [],
            "imported": false,
            "current_name": "copy_data_and_reset_stats_08003658"
        },
        "FUN_08009a80": {
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "*param_1": "*output",
                "*param_2": "*input",
                "uVar1": "result",
                "uVar2": "flags",
                "iVar3": "linked_list_ptr"
            },
            "code": "uint process_data_08009a80(undefined4 *output, undefined4 *input)\n{\n  uint result;\n  ushort flags;\n  int linked_list_ptr;\n\n  linked_list_ptr = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((linked_list_ptr != 0) && (*(int *)(linked_list_ptr + 0x18) == 0)) {\n    cleanup(linked_list_ptr);\n  }\n  if (input == (undefined4 *)PTR_DAT_08009b50) {\n    input = *(undefined4 **)(linked_list_ptr + 4);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b54) {\n    input = *(undefined4 **)(linked_list_ptr + 8);\n  }\n  else if (input == (undefined4 *)PTR_DAT_08009b58) {\n    input = *(undefined4 **)(linked_list_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          insert_into_linked_list(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_process_data_08009a80(output, input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08009eac",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009a80",
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009a80",
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  uint uVar1;\n  ushort uVar2;\n  int iVar3;\n  \n  iVar3 = *(int *)PTR_PTR_DAT_08009b4c;\n  if ((iVar3 != 0) && (*(int *)(iVar3 + 0x18) == 0)) {\n    FUNC_08009d50(iVar3);\n  }\n  if (param_2 == (undefined4 *)PTR_DAT_08009b50) {\n    param_2 = *(undefined4 **)(iVar3 + 4);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b54) {\n    param_2 = *(undefined4 **)(iVar3 + 8);\n  }\n  else if (param_2 == (undefined4 *)PTR_DAT_08009b58) {\n    param_2 = *(undefined4 **)(iVar3 + 0xc);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = (uint)uVar2;\n  if (-1 < (int)(uVar1 << 0x1c)) {\n    if (-1 < (int)(uVar1 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar1 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          insert_into_linked_list_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_process_data_08009eac(param_1,param_2);\n  }\n  uVar2 = *(ushort *)(param_2 + 3);\n  uVar1 = uVar2 & 1;\n  if ((uVar2 & 1) == 0) {\n    if (-1 < (int)((uint)uVar2 << 0x1e)) {\n      uVar1 = param_2[5];\n    }\n    param_2[2] = uVar1;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar2 = *(ushort *)(param_2 + 3);\n    uVar1 = (int)(short)uVar2 & 0x80;\n    if (uVar1 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar2 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n"
        },
        "FUN_08004a74": {
            "renaming": {
                "FUN_08004a74": "do_nothing_08004a74"
            },
            "code": "\nvoid do_nothing_08004a74(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a74",
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a74"
        },
        "FUN_080062f4": {
            "renaming": {
                "FUN_080062f4": "clear_bit_in_uint_array_080062f4",
                "param_1": "array_ptr",
                "param_2": "bit_index",
                "puVar1": "array",
                "DAT_0800638c": "DAT_0800638c"
            },
            "code": "uint32_t clear_bit_in_uint_array_080062f4(uint32_t **array_ptr, uint32_t bit_index)\\n\\\n    {\\n\\\n        uint32_t *array = *array_ptr;\\n\\\n        switch(bit_index)\\n\\\n        {\\n\\\n            case 0:\\n\\\n                array[3] &= 0xfffffffd;\\n\\\n                break;\\n\\\n            case 4:\\n\\\n                array[3] &= 0xfffffffb;\\n\\\n                break;\\n\\\n            case 8:\\n\\\n                array[3] &= 0xfffffff7;\\n\\\n                break;\\n\\\n            case 0xc:\\n\\\n                array[3] &= 0xffffffef;\\n\\\n                break;\\n\\\n        }\\n\\\n        update_bit_in_uint_array(array_ptr, bit_index, 0);\\n\\\n        uint32_t *DAT_0800638c = (uint32_t*)0x0800638c;\\n\\\n        if (((array == DAT_0800638c) && ((array[8] & 0x1111) == 0)) && ((array[8] & 0x444) == 0)) {\\n\\\n            array[0x11] &= 0xffff7fff;\\n\\\n        }\\n\\\n        if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\\n\\\n            *array &= 0xfffffffe;\\n\\\n        }\\n\\\n        return 0;\\n\\\n    }",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080062f4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "clear_bit_in_uint_array_080062f4"
        },
        "FUN_080073e8": {
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "code": "void infinite_loop_080073e8(void)\n{\n  while(true) {\n    //Do nothing\n  }\n}",
            "called": [
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073e8",
            "calling": [
                "FUN_080035b8",
                "FUN_080073e8"
            ],
            "imported": false,
            "current_name": "infinite_loop_080073e8"
        },
        "FUN_08004a76": {
            "renaming": {
                "FUN_08004a76": "process_input_08004a76",
                "param_1": "input",
                "cVar1": "current_char",
                "puVar2": "string",
                "do_nothing_08004a74": "do_nothing"
            },
            "code": "int process_input_08004a76(int *input)\n{\n    char current_char = *(char *)((int)input + 0x3d);\n    if (*(short *)((int)input + 0x2a) != 0)\n    {\n        undefined *string = (undefined *)input[9];\n        input[9] = (int)(string + 1);\n        *string = (char)*(undefined4 *)(*input + 0x10);\n        *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        if ((*(short *)((int)input + 0x2a) == 0) && (current_char == '*'))\n        {\n            *(uint *)(*input + 4) = *(uint *)(*input + 4) & 0xfffffbff;\n            input[0xc] = 0x22;\n            *(undefined *)((int)input + 0x3d) = 0x28;\n            do_nothing();\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a76",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004a76"
        },
        "FUN_0800877c": {
            "renaming": {
                "FUN_0800877c": "do_nothing_0800877c"
            },
            "code": "\nvoid do_nothing_0800877c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800877c",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "do_nothing_0800877c"
        },
        "FUN_0800267c": {
            "renaming": {
                "FUN_0800267c": "calculate_and_store_value_0800267c",
                "param_1": "input_array",
                "param_2": "value",
                "iVar1": "calculated_value",
                "first_calculation": "first_calculation_result",
                "second_calculation": "second_calculation_result"
            },
            "code": "void calculate_and_store_value_0800267c(byte *input_array, int value)\n{\n    int calculated_value;\n    if (*input_array < 0xc) {\n        int first_calculation = (0x88 - (char)input_array[1]) * 4;\n        int second_calculation = (600 - (char)input_array[2]) * 4;\n        if ((first_calculation - value == 0 || first_calculation < value) && (value == second_calculation || value + (600 - (char)input_array[2]) * -4 < 0 != SBORROW4(value, second_calculation))) {\n            calculated_value = value;\n        }\n        *(int *)(PTR_DAT_080026ac + (uint)*input_array * 8 + 4) = calculated_value;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800267c",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_and_store_value_0800267c"
        },
        "FUN_080047f4": {
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "count"
            },
            "code": "int process_data_080047f4(uint **data, uint *param1, uint *param2, uint16_t param3)\n{\n    int result;\n    uint *ptr;\n    int count = 0;\n\n    if ((*data)[61] == ' ')\n    {\n        count = (uint)((unsigned long long)global_constant * ((*(uint **)data)[15] >> 3)) >> 40 * 25;\n\n        while (((*data)[6] & 2) != 0)\n        {\n            ptr = *data;\n            count--;\n\n            if (count == 0)\n            {\n                (*data)[12] = NULL;\n                (*data)[61] = ' ';\n                (*data)[15] = 0;\n                return 3;\n            }\n        }\n\n        if ((*data)[15] == 1)\n        {\n            result = 2;\n        }\n        else\n        {\n            (*data)[15] = 1;\n\n            if ((*ptr & 1) == 0)\n            {\n                *ptr |= 1;\n            }\n\n            **data &= 0xFFFFF7FF;\n            (*data)[61] = '\"';\n            (*data)[62] = 16;\n            (*data)[16] = NULL;\n            (*data)[11] = param2;\n            (*data)[10] = param3;\n            (*data)[13] = global_constant2;\n            (*data)[12] = NULL;\n            (*data)[17] = param1;\n            **data |= 0x400;\n            **data |= 0x100;\n            (*data)[15] = 0;\n            (*data)[1] |= 0x700;\n            result = 0;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080047f4",
            "calling": [
                "FUN_08007f0e"
            ],
            "imported": false,
            "current_name": "process_data_080047f4"
        },
        "FUN_0800376c": {
            "renaming": {
                "FUN_0800376c": "calculate_0800376c",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "start_time",
                "uVar2": "temp",
                "iVar3": "temp",
                "uVar4": "result",
                "puVar5": "ptr",
                "uVar6": "var1",
                "local_1c": "i"
            },
            "code": "uint32_t calculate_0800376c(uint32_t **data, uint32_t length) {\n    int start_time = get_start_time();\n    uint32_t *ptr = *data;\n    uint32_t result = 0;\n    uint32_t temp = 0;\n\n    if ((ptr[2] & 0x100) == 0) {\n        if (((ptr[1] & 0x100) == 0) && ((ptr[0xb] & 0xf00000) == 0)) {\n            while ((**data & 2) == 0) {\n                if ((length != 0xffffffff) && ((length != 0) && ((get_start_time() - start_time) > length))) {\n                    (*data)[10] |= 4;\n                    (*data)[9] = 0;\n                    return 3;\n                }\n            }\n            (*data)[10] |= 4;\n            (*data)[9] = 0;\n            result = 3;\n        }\n        else {\n            uint32_t var1 = *(uint32_t*)PTR_DAT_080038c8;\n            uint32_t var2 = calculate_0800376c_value_08005bb8(2);\n            ptr = *data;\n            if (((ptr[4] & DAT_080038cc) == 0) && ((ptr[3] & DAT_080038cc + 0xdc000000) == 0)) {\n                if ((ptr[4] & DAT_080038d0) == 0) {\n                    if ((ptr[3] & DAT_080038d4) == 0) {\n                        temp = 0x14;\n                    }\n                    else {\n                        temp = 0x29;\n                    }\n                }\n                else {\n                    temp = 0x29;\n                }\n            }\n            else if (((ptr[4] & DAT_080038d0) == 0) && ((ptr[3] & DAT_080038d0 + 0xee000000) == 0)) {\n                temp = 0x54;\n            }\n            else if ((DAT_080038d8 & ptr[4]) == 0) {\n                if ((DAT_080038d8 & ptr[3]) == 0) {\n                    temp = 0x54;\n                }\n                else {\n                    temp = 0xfc;\n                }\n            }\n            else {\n                temp = 0xfc;\n            }\n\n            uint32_t var3 = (var1 / var2) * temp;\n            for (uint32_t i = 0; i <= var3; i++) {\n                if ((length != 0xffffffff) && ((length != 0) && ((get_start_time() - start_time) > length))) {\n                    (*data)[10] |= 4;\n                    (*data)[9] = 0;\n                    return 3;\n                }\n            }\n            (*data)[0] = 0xffffffed;\n            (*data)[10] |= 0x200;\n            if (((*data)[2] & 0xe0000) == 0xe0000) {\n                if ((*data)[3] == NULL) {\n                    (*data)[10] &= 0xfffffeff;\n                    if (((*data)[10] & 0x1000) == 0) {\n                        (*data)[10] |= 1;\n                        result = 0;\n                    }\n                    else {\n                        result = 0;\n                    }\n                }\n                else {\n                    result = 0;\n                }\n            }\n            else {\n                result = 0;\n            }\n        }\n    }\n    else {\n        (*data)[10] |= 0x20;\n        (*data)[9] = 0;\n        result = 1;\n    }\n    return result;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800376c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "calculate_0800376c"
        },
        "FUN_08003e20": {
            "renaming": {
                "FUN_08003e20": "check_and_set_flag_08003e20",
                "param_1": "param_array",
                "iVar1": "flag_check",
                "uVar2": "calculate_value(2)",
                "local_14": "i",
                "PTR_DAT_08003f08": "PTR_DAT",
                "set_flag_if_not_set_08003a20": "set_flag_if_not_set",
                "get_ptr_dat_value_08003760": "get_ptr_dat_value"
            },
            "code": "int check_and_set_flag_08003e20(int *param_array)\n{\n    int flag_check = check_and_set_flag_08003e20_helper();\n    if (*(char *)(param_array + 9) == '\\x01') {\n        return 2;\n    }\n    *(undefined *)(param_array + 9) = 1;\n    if (flag_check == 0) {\n        param_array[10] = (param_array[10] & 0xffffeefdU) | 2;\n        uint uVar5 = *(uint *)PTR_DAT_08003f08_08003f08;\n        uint uVar2 = calculate_value(2);\n        for (int i = uVar5 / uVar2 << 1; i != 0; i--) {\n        }\n        set_flag_if_not_set(param_array);\n        *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) | 8;\n        int iVar3 = get_ptr_dat_value();\n        while (1) {\n            int iVar4 = *param_array;\n            if ((*(uint *)(iVar4 + 8) & 8) == 0) {\n                break;\n            }\n            iVar4 = get_ptr_dat_value();\n            if (10 < (uint)(iVar4 - iVar3)) {\n                param_array[10] = (param_array[10] & 0xffffffedU) | 0x10;\n                *(undefined *)(param_array + 9) = 0;\n                return 1;\n            }\n        }\n        *(uint *)(iVar4 + 8) = *(uint *)(iVar4 + 8) | 4;\n        iVar3 = get_ptr_dat_value();\n        while ((*(uint *)(*param_array + 8) & 4) != 0) {\n            iVar4 = get_ptr_dat_value();\n            if (10 < (uint)(iVar4 - iVar3)) {\n                param_array[10] = (param_array[10] & 0xffffffedU) | 0x10;\n                *(undefined *)(param_array + 9) = 0;\n                return 1;\n            }\n        }\n        param_array[10] = (param_array[10] & 0xfffffffcU) | 1;\n    }\n    *(undefined *)(param_array + 9) = 0;\n    return flag_check;\n}",
            "called": [
                "FUN_08005bb8",
                "FUN_08003760",
                "FUN_08003a20",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003e20",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08003e20"
        },
        "FUN_08005a48": {
            "renaming": {
                "FUN_08005a48": "get_first_value_and_shift_08005a48",
                "uVar1": "first_value",
                "get_first_value_from_pointer_08005a1c": "get_first_value_from_pointer",
                "PTR_DAT_08005a64": "PTR_DATA",
                "DAT_08005a60": "data_pointer"
            },
            "code": "uint get_first_value_and_shift_08005a48(void)\n{\n  uint first_value = get_first_value_from_pointer();\n  uint shift_amount = *(int *)(DAT_08005a60 + 4) << 0x12;\n  uint index = shift_amount >> 0x1d;\n  uint shifted_value = first_value >> PTR_DAT_08005a64[index];\n  return shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a48",
            "calling": [
                "FUN_08006538",
                "FUN_08005bb8",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_first_value_and_shift_08005a48"
        },
        "FUN_080033a8": {
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "dest",
                "param_2": "length",
                "param_3": "src",
                "iVar2": "i",
                "uVar3": "current_index",
                "bVar1": "current_byte"
            },
            "code": "void copy_and_shift_bits_080033a8(uint8_t* dest, const uint8_t* src, size_t length) {\n  uint8_t current_byte;\n  uint8_t next_byte;\n  for (size_t i = 0; i < length; i += 2) {\n    current_byte = *(src + i);\n    next_byte = *(src + i + 1);\n    *(dest + i) = current_byte;\n    *(dest + i + 1) = (next_byte << 7) | current_byte;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080033a8",
            "calling": [
                "FUN_080033cc"
            ],
            "imported": false,
            "current_name": "copy_and_shift_bits_080033a8"
        },
        "FUN_08002c14": {
            "renaming": {
                "FUN_08002c14": "process_request_08002c14",
                "process_request_08002c00": "execute_request"
            },
            "code": "void process_request_08002c14() {\n  execute_request();\n  return;\n}",
            "called": [
                "FUN_08002c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c14",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "process_request_08002c14"
        },
        "FUN_08008d18": {
            "renaming": {
                "FUN_08008d18": "set_byte_at_offset_08008d18",
                "param_1": "offset",
                "param_2": "value",
                "uVar1": "byte_value"
            },
            "code": "void set_byte_at_offset_08008d18(int offset, uint8_t value) {\n  uint8_t byte_value;\n  if (value < 0x3c) {\n    byte_value = PTR_DAT_08008d2c[value];\n  }\n  else {\n    byte_value = 0xff;\n  }\n  *(uint8_t *)(offset + 300) = byte_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d18",
            "calling": [
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "set_byte_at_offset_08008d18"
        },
        "FUN_08009084": {
            "renaming": {
                "FUN_08009084": "execute_function_08009084",
                "param_1": "input_param",
                "iVar1": "bit_position"
            },
            "code": "void execute_function_08009084(int input_param)\n{\n  int bit_position;\n  if (*(int *)(input_param + 8) != 0) {\n    (**(code **)(input_param + 0xc))();\n    return;\n  }\n  execute_and_update_flags();\n  bit_position = calculate_bit_position();\n  if (*(int *)(PTR_DAT_080090b0 + bit_position * 0x14 + 0xc) != 0) {\n    execute_function_08009084();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a18c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009084",
            "calling": [
                "FUN_08009094"
            ],
            "imported": false,
            "current_name": "execute_function_08009084"
        },
        "FUN_0800a020": {
            "renaming": {
                "FUN_0800a020": "processReturnValueAndUpdate_0800a020",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "processResult",
                "bVar3": "isProcessResultPositive",
                "uVar2": "updatedValue"
            },
            "code": "void processReturnValueAndUpdate_0800a020(uint32_t value, int32_t* data) {\n  int32_t processResult = processReturnValue(value, (int32_t)*(short *)(data + 0xe));\n  bool isProcessResultPositive = processResult >= 0;\n  uint32_t updatedValue = isProcessResultPositive ? *(uint32_t *)(data + 0x54) + processResult : *(uint16_t *)(data + 0xc) & 0xffffefff;\n  if (isProcessResultPositive) {\n    *(uint32_t *)(data + 0x54) = updatedValue;\n  }\n  if (!isProcessResultPositive) {\n    *(short *)(data + 0xc) = (short)updatedValue;\n  }\n  return;\n}",
            "called": [
                "FUN_0800a168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a020",
            "calling": [],
            "imported": false,
            "current_name": "processReturnValueAndUpdate_0800a020"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "uVar1": "result",
                "uVar2": "bitmask",
                "local_1c": "value_1",
                "abStack_18": "array",
                "uStack_14": "data_3",
                "uStack_10": "data_2",
                "uStack_c": "data_1"
            },
            "code": "uint calculate_result_08005840(void)\n{\n  uint result;\n  uint bitmask;\n  undefined2 value_1;\n  byte array[4];\n  undefined4 data_3;\n  undefined4 data_2;\n  undefined4 data_1;\n  \n  data_1 = *(undefined4 *)(PTR_DAT_0800589c + 8);\n  data_2 = *(undefined4 *)(PTR_DAT_0800589c + 4);\n  data_3 = *(undefined4 *)PTR_DAT_0800589c;\n  value_1 = *(undefined2 *)(PTR_DAT_0800589c + 0x10);\n  bitmask = *(uint *)(DAT_080058a0 + 4);\n  result = DAT_080058a8;\n  if ((bitmask & 0xc) == 8) {\n    if ((bitmask & 0x10000) == 0) {\n      result = DAT_080058a4 * (uint)array[(bitmask << 10) >> 0x1c];\n    }\n    else {\n      result = (DAT_080058a8 * array[(bitmask << 10) >> 0x1c]) / (uint)*(byte *)((int)&value_1 - ((*(int *)(DAT_080058a0 + 4) << 0xe) >> 0x1f));\n    }\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "calculate_result_08005840"
        },
        "FUN_08007f7c": {
            "renaming": {
                "FUN_08007f7c": "set_param_value_08007f7c",
                "param_1": "param_address",
                "param_2": "value",
                "PTR_": "param_",
                "DAT_": "data_"
            },
            "code": "void set_param_value_08007f7c(int PTR_address, int value) {\n  if (PTR_address != 0) {\n    if (value != 0) {\n      *(int *)(PTR_address + PARAM_VALUE_OFFSET) = value;\n      update_PTR_status(PTR_address + PARAM_STATUS_OFFSET);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f7c",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "set_param_value_08007f7c"
        },
        "FUN_08006d80": {
            "renaming": {
                "FUN_08006d80": "find_value_and_set_flags_08006d80",
                "param_1": "value_to_find",
                "local_46": "result",
                "local_44": "character_index",
                "local_40": "flag_value_set",
                "local_3c": "flag_value_check",
                "local_38": "found_index",
                "local_34": "write_data_offset",
                "local_30": "write_data_value",
                "local_2c": "value_at_offset",
                "local_28": "flag_value",
                "local_24": "flag_value_check",
                "local_20": "flag_value_check_and_set",
                "local_1c": "flag_value_set_if_not_set",
                "local_10": "flag_value_set_if_valid"
            },
            "code": "int find_value_and_set_flags_08006d80(int value_to_find)\n{\n    int found_index = 0;\n    int flags_set = 0;\n    int flag_check_result = 0;\n    int write_result = 0;\n    int calc_result = 0;\n    uint value_at_offset = 0;\n    uint flag_value = 0;\n    uint flag_value_check = 0;\n    uint flag_value_check_and_set = 0;\n    uint flag_value_set_if_not_set = 0;\n    uint flag_value_set_if_valid = 0;\n    uint flag_value_set = 1;\n    uint write_data = 0;\n    uint character_index = 0;\n    uint memory_fill_value = 0;\n    uint write_data_value = 0;\n    uint write_data_offset = 0;\n    uint memory_fill_start = (uint)&found_index;\n    uint memory_fill_size = 0x30;\n    char* character_pointer = (char*)&value_to_find;\n\n    memset((void*)memory_fill_start, memory_fill_value, memory_fill_size);\n\n    found_index = find_character_index(character_pointer);\n\n    if (found_index >= 0 && found_index < 0x12) {\n        write_data_offset = (uint)&found_index;\n        write_data_value = (uint)&write_data;\n        write_result = write_data_to_memory(write_data_value, write_data_offset);\n        if (write_result == 0) {\n            flag_value_check_and_set = check_and_set_flag(&found_index);\n            if (flag_value_check_and_set == 0) {\n                flag_value_set_if_not_set = check_and_set_flag_if_not_set(&found_index);\n                if (flag_value_set_if_not_set == 0) {\n                    calc_result = calculate(&found_index, 10);\n                    if (calc_result == 0) {\n                        value_at_offset = get_value_at_offset(&found_index);\n                        flag_value = 0x200;\n                        flag_value_check = value_at_offset & flag_value;\n                        if (flag_value_check != 0) {\n                            local_46 = get_value_at_offset(&found_index);\n                            flag_value_set_if_valid = set_flags_if_valid(&found_index);\n                            if (flag_value_set_if_valid == 0) {\n                                local_46 = 0;\n                            }\n                        }\n                        else {\n                            local_46 = 0;\n                        }\n                    }\n                    else {\n                        local_46 = 0;\n                    }\n                }\n                else {\n                    local_46 = 0;\n                }\n            }\n            else {\n                local_46 = 0;\n            }\n        }\n        else {\n            local_46 = 0;\n        }\n    }\n    else {\n        local_46 = 0;\n    }\n    return local_46;\n}",
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_080038dc",
                "FUN_080091c6",
                "FUN_080038e4",
                "FUN_08003a1c",
                "FUN_08007320",
                "FUN_08003e20",
                "FUN_08003aa0",
                "FUN_0800376c",
                "FUN_08006c60",
                "FUN_08003bd8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d80",
            "calling": [
                "FUN_08008880"
            ],
            "imported": false,
            "current_name": "find_value_and_set_flags_08006d80"
        },
        "FUN_08006c60": {
            "renaming": {
                "FUN_08006c60": "find_character_index_08006c60",
                "param_1": "character",
                "param_2": "string",
                "param_3": "string_length",
                "param_4": "start_index",
                "iVar1": "index",
                "uVar2": "index_shifted"
            },
            "code": "uint find_character_index_08006c60(char character, char* string, int string_length, int start_index) {\n  int index = find_character_or_return_minus_one_08007376(character, string, string_length, start_index, start_index);\n  uint index_shifted = (uint)(index << 0xc) >> 0x1b;\n  if (index_shifted < 1 || index_shifted > 0x10) {\n    index_shifted = 0;\n  }\n  return index_shifted;\n}",
            "called": [
                "FUN_08007376"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c60",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "find_character_index_08006c60"
        },
        "FUN_08003306": {
            "renaming": {
                "FUN_08003306": "set_values_at_offset_08003306",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_at_offset_08003306(int base_address, uint8_t offset, int value1, int value2) {\n    switch(offset) {\n        case 0x50:\n            *(int *)(base_address + 0x50) = value1;\n            *(int *)(base_address + 0x20) = value2;\n            break;\n        case 0x54:\n            *(int *)(base_address + 0x54) = value1;\n            *(int *)(base_address + 0x24) = value2;\n            break;\n        case 0x58:\n            *(int *)(base_address + 0x58) = value1;\n            *(int *)(base_address + 0x28) = value2;\n            break;\n        case 0x5c:\n            *(int *)(base_address + 0x5c) = value1;\n            *(int *)(base_address + 0x2c) = value2;\n            break;\n        case 0x60:\n            *(int *)(base_address + 0x60) = value1;\n            *(int *)(base_address + 0x30) = value2;\n            break;\n        case 0x4c:\n            *(int *)(base_address + 0x4c) = value1;\n            *(int *)(base_address + 0x1c) = value2;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003306",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_at_offset_08003306"
        },
        "FUN_08002578": {
            "renaming": {
                "FUN_08002578": "update_bits_in_memory_08002578",
                "update_bits_080076e0": "update_bits"
            },
            "code": "void update_bits_in_memory_08002578(void)\n{\n  update_bits();\n  return;\n}",
            "called": [
                "FUN_080076e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002578",
            "calling": [
                "FUN_08002644"
            ],
            "imported": false,
            "current_name": "update_bits_in_memory_08002578"
        },
        "FUN_08006932": {
            "renaming": {
                "FUN_08006932": "set_flag_and_update_values_08006932",
                "param_1": "ptr_param1",
                "*param_1": "*ptr_param1",
                "uint": "unsigned int",
                "int": "signed int",
                "update_values_based_on_index_08008730": "update_values_based_on_index",
                "(int)param_1 + 0x39": "(char *)ptr_param1 + 0x39",
                "undefined": "void",
                "*(uint *)(*param_1 + 0xc)": "*ptr1",
                "*(undefined *)((int)param_1 + 0x39)": "*ptr2"
            },
            "code": "int set_flag_and_update_values_08006932(int *ptr_param1) {\n    uint *ptr1 = (uint *)(*ptr_param1 + 0xc);\n    *ptr1 &= 0xffffffbf;\n    char *ptr2 = (char *)ptr_param1 + 0x39;\n    *ptr2 = 0x20;\n    update_values_based_on_index_08008730();\n    return 0;\n}",
            "called": [
                "FUN_08008730"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006932",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_values_08006932"
        },
        "FUN_080060c4": {
            "renaming": {
                "FUN_080060c4": "update_data_080060c4",
                "param_1": "data_ptr",
                "param_2": "data_values",
                "uVar1": "flags2",
                "uVar2": "param2_value",
                "iVar3": "data_val1"
            },
            "code": "void update_data_080060c4(int data_ptr, int *data_values)\n{\n    uint32_t flags = *(uint32_t *)(data_ptr + 0x20);\n    flags = flags & 0xffffffef;\n    uint32_t param2_value = *(uint32_t *)(data_ptr + 4);\n    int data_val1 = *data_values;\n    uint32_t flags2 = (flags & 0xffffffdf) | (data_values[2] << 4);\n    if (data_ptr == DAT_08006124)\n    {\n        flags2 = (flags2 & 0xffffff7f) | (data_values[3] << 4);\n        param2_value = (param2_value & 0xfffff3ff) | (data_values[5] << 2) | (data_values[6] << 2);\n    }\n    *(uint32_t *)(data_ptr + 4) = param2_value;\n    *(uint32_t *)(data_ptr + 0x18) = (flags & 0xffff8cff) | (data_val1 << 8);\n    *(int *)(data_ptr + 0x38) = data_values[1];\n    *(uint32_t *)(data_ptr + 0x20) = flags2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080060c4",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_080060c4"
        },
        "FUN_08009eac": {
            "renaming": {
                "FUN_08009eac": "allocate_and_process_data_08009eac",
                "param_1": "process_id",
                "param_2": "data",
                "uVar1": "permissions",
                "iVar2": "allocated_memory_size",
                "local_18": "original_data_size",
                "local_14": "original_data_pointer"
            },
            "code": "void allocate_and_process_data_08009eac(int process_id, int *data)\n{\n  ushort permissions;\n  int allocated_memory_size;\n  int original_data_size;\n  int *original_data_pointer;\n\n  if ((uint)*(ushort *)(data + 3) << 0x1e > -1)\n  {\n    original_data_size = process_id;\n    original_data_pointer = data;\n    permissions = check_permissions_and_return_value(process_id, data, &original_data_size, &original_data_pointer);\n    allocated_memory_size = allocate_memory_block(process_id, original_data_size);\n    if (allocated_memory_size != 0)\n    {\n      *(undefined **)(process_id + 0x28) = PTR_LAB_08009cd0_1_08009f28;\n      *data = allocated_memory_size;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[4] = allocated_memory_size;\n      data[5] = original_data_size;\n      if ((original_data_pointer != (int *)0x0) && (process_data(process_id, (int)*(short *)((int)data + 0xe)) != 0))\n      {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = permissions | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 >= 0)\n    {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n    }\n    return;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}",
            "called": [
                "FUN_08009270",
                "FUN_0800a110",
                "FUN_08009e64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009eac",
            "calling": [
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "allocate_and_process_data_08009eac"
        },
        "FUN_080072d8": {
            "renaming": {
                "FUN_080072d8": "set_param_to_1_if_not_zero_080072d8",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "is_zero",
                "param_4": "some_parameter",
                "set_param_080042e2": "set_parameter"
            },
            "code": "void set_param_to_1_if_not_zero_080072d8(int param_1, int param_2, int param_3, int param_4) {\n  if (param_3 == 0) {\n    set_param_080042e2(param_1, param_2, 0, param_4, param_4);\n    return;\n  }\n  set_param_080042e2(param_1, param_2, 1, param_4, param_4);\n  return;\n}",
            "called": [
                "FUN_080042e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d8",
            "calling": [
                "FUN_08008a24"
            ],
            "imported": false,
            "current_name": "set_param_to_1_if_not_zero_080072d8"
        },
        "FUN_080045c0": {
            "renaming": {
                "FUN_080045c0": "calculate_result_080045c0",
                "param_1": "input",
                "bVar1": "is_valid_input",
                "uVar2": "first_value",
                "puVar3": "ptr1",
                "uVar4": "result",
                "DAT_08004714": "threshold_value_1",
                "param_1[1]": "threshold_value_2",
                "DAT_08004720": "max_value_1",
                "DAT_08004718": "min_value_1",
                "DAT_0800471c": "constant_value_1",
                "DAT_08004724": "constant_value_2",
                "param_1[8]": "result_2",
                "param_1[2]": "ptr2",
                "count_leading_zeroes": "count_leading_zeroes",
                "input[0][0]": "result_3",
                "input[0][8]": "result_4",
                "input[0][3]": "result_5",
                "input[0][5]": "result_6",
                "input[0][6]": "result_7",
                "input[0][2]": "result_8",
                "input[0][4]": "result_9",
                "input[0x10]": "null_pointer_1",
                "input[0xc]": "null_pointer_2",
                "input[0xf]": "value_1",
                "input[0x3d]": "value_2",
                "input[0x3e]": "value_3"
            },
            "code": "uint32_t calculate_result_080045c0(uint32_t **input)\n{\n    bool is_valid_input;\n    uint32_t first_value, second_value, result, quotient, shift, count_leading_zeroes_result;\n    uint32_t *ptr1, *ptr2;\n    \n    if (input == NULL) {\n        return 1;\n    }\n    \n    is_valid_input = (input[1] <= DAT_08004714) ? (get_first_value_divided_by_shifted_value_08005a28() > DAT_08004718) : (get_first_value_divided_by_shifted_value_08005a28() <= DAT_08004720);\n    if (is_valid_input) {\n        return 1;\n    }\n    \n    result = (uint32_t)((uint64_t)DAT_0800471c * (uint64_t)get_first_value_divided_by_shifted_value_08005a28() >> 0x32);\n    input[1][1] = result;\n    if (input[1] > DAT_08004714) {\n        quotient = result * 300;\n        shift = 0x26;\n        if (input[2] != NULL) {\n            quotient *= 0x19;\n            shift = 0x2b;\n        }\n        result = (uint32_t)((uint64_t)DAT_08004724 * (uint64_t)quotient >> shift);\n    }\n    input[1][8] = result + 1;\n    ptr1 = input[1];\n    if (ptr1 > DAT_08004714) {\n        if (input[2] == NULL) {\n            quotient = (get_first_value_divided_by_shifted_value_08005a28() - 1) / ((int)ptr1 * 3) + 1 & 0xfff;\n        }\n        else {\n            quotient = (get_first_value_divided_by_shifted_value_08005a28() - 1) / ((int)ptr1 * 0x19) + 1 & 0xfff;\n        }\n        count_leading_zeroes_result = count_leading_zeroes(quotient);\n        if (count_leading_zeroes_result >> 5 == 0) {\n            quotient |= (input[2] == NULL) ? 0x8000 : 0xc000;\n        }\n        else {\n            quotient = 1;\n        }\n    }\n    else {\n        quotient = (get_first_value_divided_by_shifted_value_08005a28() - 1) / ((int)ptr1 << 1) + 1 & 0xfff;\n        if (quotient < 4) {\n            quotient = 4;\n        }\n    }\n    input[0][0] = quotient | input[0][8];\n    input[0][3] = input[0][5] | input[0][6];\n    input[0][2] = input[0][4] | input[0][3];\n    input[0][0] |= 1;\n    input[0x10] = NULL;\n    input[0xc] = NULL;\n    input[0xf] = 0;\n    input[0x3d] = 0x24;\n    input[0x3e] = 0;\n    \n    return 0;\n}",
            "called": [
                "FUN_080045bc",
                "FUN_08005a28"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045c0",
            "calling": [
                "FUN_080077b0"
            ],
            "imported": false,
            "current_name": "calculate_result_080045c0"
        },
        "FUN_08007e74": {
            "renaming": {
                "FUN_08007e74": "send_data_and_check_response_08007e74",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "start_address",
                "uVar3": "offset_diff",
                "iVar4": "response",
                "iVar5": "address_plus_four",
                "iVar2": "send_result/value_at_address/byte_value/current_address"
            },
            "code": "int send_data_and_check_response_08007e74(int address, int value1, int value2, int value3) {\n    int start_address = get_ptr_dat_value();\n    uint offset_diff = 0;\n    int response = 2;\n    do {\n        int address_plus_four = address + 4;\n        int send_result = send_data(address_plus_four, value1, value2, value3);\n        if (send_result == 0) {\n            response = 0;\n            int byte_value = 0;\n            while ((byte_value = get_byte_from_address_offset(address_plus_four), byte_value != 0x20 && (response == 0))) {\n                int current_address = get_ptr_dat_value();\n                offset_diff = current_address - start_address;\n                if (offset_diff < 0x65) {\n                    int value_at_address = get_value_at_offset(address_plus_four);\n                    if (value_at_address != 0) {\n                        response = 2;\n                    }\n                }\n                else {\n                    response = 1;\n                }\n            }\n        }\n        int value_at_address = get_value_at_offset(address_plus_four);\n    } while ((value_at_address == 4) && (offset_diff < 100));\n    return response;\n}",
            "called": [
                "FUN_08004728",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e74",
            "calling": [
                "FUN_08002a58"
            ],
            "imported": false,
            "current_name": "send_data_and_check_response_08007e74"
        },
        "FUN_08002efe": {
            "renaming": {
                "FUN_08002efe": "calculate_data_and_call_function_08002efe",
                "param_1": "data",
                "param_2": "size",
                "param_3": "flag",
                "param_4": "arg1",
                "<unnamed>": "arg2",
                "call_function_with_data_0800319e": "call_function_with_data"
            },
            "code": "void calculate_data_and_call_function_08002efe(int data, int size, int flag, int arg1, int arg2) {\n    call_function_with_data(data + 0x40, size, flag, arg1, arg2);\n    return;\n}",
            "called": [
                "FUN_0800319e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002efe",
            "calling": [
                "FUN_08000be8"
            ],
            "imported": false,
            "current_name": "calculate_data_and_call_function_08002efe"
        },
        "FUN_08002f84": {
            "renaming": {
                "FUN_08002f84": "store_value_if_param2_is_0xff_08002f84",
                "param_1": "store_location",
                "param_2": "param_value",
                "param_3": "value_to_store"
            },
            "code": "void store_value_if_param2_is_0xff_08002f84(undefined4 store_location, int param_value, undefined4 value_to_store) {\n  if (param_value == 0xff) {\n    *(undefined4 *)PTR_DAT_08002f90 = value_to_store;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f84",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_value_if_param2_is_0xff_08002f84"
        },
        "FUN_08002ddc": {
            "renaming": {
                "FUN_08002ddc": "execute_with_params_08002ddc",
                "param_1": "param_offset",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "execute_function_with_params_0800322c": "execute_function_with_params"
            },
            "code": "void execute_with_params_08002ddc(int param_offset, int param1, int param2, undefined4 param3, undefined4 param4){\n  execute_function_with_params_0800322c(param_offset + param1, param2, 5, param3, param4);\n  return;\n}",
            "called": [
                "FUN_0800322c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ddc",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "execute_with_params_08002ddc"
        },
        "FUN_08009094": {
            "renaming": {
                "FUN_08009094": "checkBitPositionAndExecuteFunction_08009094",
                "iVar1": "bitPosition",
                "calculate_bit_position_08008f3c": "calculateBitPosition",
                "PTR_DAT_080090b0": "PTR_DATA_080090b0",
                "execute_function_08009084": "executeFunction"
            },
            "code": "void checkBitPositionAndExecuteFunction_08009094(void)\n{\n  int bitPosition = calculateBitPosition();\n  if (*(int *)(PTR_DAT_080090b0 + bitPosition * 0x14 + 0xc) != 0) {\n    executeFunction();\n  }\n  return;\n}",
            "called": [
                "FUN_08009084",
                "FUN_08008f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009094",
            "calling": [
                "FUN_080042f0"
            ],
            "imported": false,
            "current_name": "checkBitPositionAndExecuteFunction_08009094"
        },
        "FUN_08009f2c": {
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "param_1": "str",
                "param_2": "c",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "previous_char"
            },
            "code": "char* find_char_in_string_08009f2c(char* str, char c, int length) {\n  char* current_char = str;\n  while (*current_char != c) {\n    if (current_char == str + length) {\n      return NULL;\n    }\n    current_char++;\n  }\n  return current_char;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f2c",
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "find_char_in_string_08009f2c"
        },
        "FUN_0800a154": {
            "renaming": {
                "FUN_0800a154": "calculate_value_0800a154",
                "param_1": "previous_value",
                "param_2": "value_array",
                "iVar1": "current_index"
            },
            "code": "int calculate_value_0800a154(int previous_value, int* value_array) {\n  int current_index = previous_value - 4;\n  if (previous_value < 0) {\n    current_index += value_array[current_index];\n  }\n  return current_index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a154",
            "calling": [
                "FUN_08009908"
            ],
            "imported": false,
            "current_name": "calculate_value_0800a154"
        },
        "FUN_08002580": {
            "renaming": {
                "FUN_08002580": "increment_byte_and_store_08002580",
                "param_1": "output",
                "bVar1": "current_byte"
            },
            "code": "void increment_byte_and_store_08002580(byte *output){\n  byte current_byte = *PTR_DAT_080025a4;\n  if(current_byte > 11){\n    *output = 0xff;\n    return;\n  }\n  *PTR_DAT_080025a4 = current_byte + 1;\n  *output = current_byte;\n  *(undefined4 *)(PTR_DAT_080025a8 + (uint)current_byte * 8 + 4) = 0x5dc;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002580",
            "calling": [
                "FUN_080004d4"
            ],
            "imported": false,
            "current_name": "increment_byte_and_store_08002580"
        },
        "FUN_08007f8e": {
            "renaming": {
                "FUN_08007f8e": "update_values_if_not_null_08007f8e",
                "param_1": "value_address",
                "param_2": "new_value",
                "*(int *)(param_1 + 100)": "*(int *)(value_address + 100)",
                "set_bit_and_update_values_080049e0": "set_bit_and_update_values_080049e0",
                "param_1 + 4": "value_address + 4"
            },
            "code": "void update_values_if_not_null_08007f8e(int value_address, int new_value) {\n  if (value_address != 0) {\n    if (new_value != 0) {\n      *(int *)(value_address + 100) = new_value;\n      set_bit_and_update_values_080049e0(value_address + 4);\n    }\n  }\n}",
            "called": [
                "FUN_080049e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f8e",
            "calling": [
                "FUN_08002968"
            ],
            "imported": false,
            "current_name": "update_values_if_not_null_08007f8e"
        },
        "FUN_08006b3e": {
            "renaming": {
                "FUN_08006b3e": "set_bit_at_position_08006b3e",
                "param_1": "position",
                "param_2": "array",
                "uVar1": "shifted_position",
                "PTR_": "array",
                "DAT_": "bit_mask"
            },
            "code": "void set_bit_at_position_08006b3e(uint position, int* PTR_){\n  uint shifted_position = (position << 0x18) >> 0x1c;\n  uint* target_location = PTR_ + shifted_position;\n  uint DAT_ = 1 << (position & 0xf);\n  *target_location = *target_location | DAT_;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b3e",
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_08006b3e"
        },
        "FUN_08006262": {
            "renaming": {
                "FUN_08006262": "update_bit_in_uint_array_08006262",
                "param_1": "uint_array",
                "param_2": "bit_index",
                "param_3": "new_bit_value",
                "*(uint *)(param_1 + 0x20)": "uint_array_ptr[5]",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void update_bit_in_uint_array_08006262(uint_array, bit_index, new_bit_value) {\n\tuint* uint_array_ptr = (uint*)uint_array;\n\tuint bit_mask = 1 << (bit_index & 0xff);\n\tuint_array_ptr[5] = uint_array_ptr[5] & ~bit_mask;\n\tuint_array_ptr[5] = uint_array_ptr[5] | (new_bit_value << (bit_index & 0xff));\n\treturn;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006262",
            "calling": [
                "FUN_08006280",
                "FUN_080062f4",
                "FUN_080063c0",
                "FUN_08006390"
            ],
            "imported": false,
            "current_name": "update_bit_in_uint_array_08006262"
        },
        "FUN_08007110": {
            "renaming": {
                "FUN_08007110": "update_bits_in_memory_08007110",
                "update_bits_080074e0": "update_bits"
            },
            "code": "void update_bits_in_memory_08007110() {\n  update_bits();\n  return;\n}",
            "called": [
                "FUN_080074e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007110",
            "calling": [
                "FUN_08005e2e"
            ],
            "imported": false,
            "current_name": "update_bits_in_memory_08007110"
        },
        "FUN_08007594": {
            "renaming": {
                "FUN_08007594": "check_param_08007594",
                "param_1": "param",
                "DAT_080075d0": "timer_instance",
                "DAT_080075d4": "timer_instance_offset",
                "PTR_s_TIM__Unknown_timer_instance_080075d8": "timer_instance_pointer"
            },
            "code": "int check_param_08007594(uint32_t param) {\n    if (param == UINT32_MAX) {\n        return 0;\n    }\n    if (param == DAT_080075d0) {\n        return 1;\n    }\n    if (DAT_080075d0 < param) {\n        if (param == DAT_080075d4) {\n            return 1;\n        }\n        if (param == DAT_080075d4 + 0x12400) {\n            return 2;\n        }\n    }\n    else if (param == 0x40000000) {\n        return 1;\n    }\n    process_data(PTR_s_TIM__Unknown_DAT_080075d0_080075d8);\n    return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007594",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "check_param_08007594"
        },
        "FUN_080073ec": {
            "renaming": {
                "FUN_080073ec": "set_bit_and_mask_080073ec",
                "puVar1": "ptr",
                "DAT_0800742c": "data",
                "DAT_08007430": "mask",
                "undefined4": "uint"
            },
            "code": "void set_bit_and_mask_080073ec(uint *DAT_0800742c)\n{\n  uint *ptr = DAT_0800742c;\n  *ptr |= 1;\n  ptr[1] &= 0xffff & ptr[3];\n  *ptr &= 0xfef6ffff;\n  *ptr &= 0xfffbffff;\n  ptr[1] &= 0xff80ffff;\n  ptr[2] = 0x9f0000;\n  *(uint *)(DAT_0800742c + 0x8) = 0x8000000;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ec",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "set_bit_and_mask_080073ec"
        },
        "FUN_08008ef4": {
            "renaming": {
                "FUN_08008ef4": "calculate_position_08008ef4",
                "param_1": "current_position",
                "param_2": "previous_position",
                "param_3": "final_position",
                "param_4": "current_value",
                "param_5": "previous_value",
                "uint": "unsigned int"
            },
            "code": "int calculate_position_08008ef4(int current_position, int previous_position, int final_position, int current_value, int previous_value)\n{\n    int position_difference = final_position - previous_position;\n    int value_difference = current_value - previous_value;\n    int position_value_ratio = value_difference / position_difference;\n    int current_position_value = position_value_ratio * (current_position - previous_position) + previous_value;\n    return current_position_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ef4",
            "calling": [
                "FUN_080026b0"
            ],
            "imported": false,
            "current_name": "calculate_position_08008ef4"
        },
        "FUN_08002df6": {
            "renaming": {
                "FUN_08002df6": "send_encoded_data_if_not_empty_08002df6",
                "param_1": "device_data",
                "puVar1": "data",
                "PTR_08002f90": "encode_and_send_data_to_device_080031ce",
                "DAT_08002df0": "0xc4",
                "DAT_08002df4": "0x40"
            },
            "code": "void send_encoded_data_if_not_empty_08002df6(int device_data)\n{\n  if (*(byte *)(device_data + DAT_08002df0) == 0) {\n    return;\n  }\n  undefined *data = *(undefined **)(device_data + 200);\n  int data_size = *(byte *)(device_data + DAT_08002df0) - 2;\n  PTR_08002f90(device_data + DAT_08002df4, *data, data[1], data_size, data + 2);\n  return;\n}",
            "called": [
                "FUN_080031ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002df6",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "send_encoded_data_if_not_empty_08002df6"
        },
        "FUN_080045bc": {
            "renaming": {
                "FUN_080045bc": "do_nothing_080045bc"
            },
            "code": "\nvoid do_nothing_080045bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080045bc",
            "calling": [
                "FUN_080045c0"
            ],
            "imported": false,
            "current_name": "do_nothing_080045bc"
        },
        "FUN_08007118": {
            "renaming": {
                "FUN_08007118": "configure_device_08007118",
                "param_1": "device_id",
                "param_2": "clock_speed",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "local_74": "clock_divisor",
                "local_70": "local_70",
                "local_6c": "local_6c",
                "local_68": "local_68",
                "local_64": "local_64",
                "local_60": "local_60",
                "local_5c": "local_5c",
                "local_58": "device_bits",
                "local_54": "find_value_result",
                "local_50": "local_48",
                "local_4c": "local_4c",
                "local_48": "local_48",
                "local_44": "local_44",
                "local_1b": "local_1b",
                "PTR_DAT_080071dc": "DEVICE_IDS",
                "PTR_DAT_080071e0": "DEVICE_ID",
                "fill_memory_with_value_080091c6": "memset",
                "process_clock_source_080075dc": "process_clock_source",
                "check_data_integrity_08006092": "check_data_integrity",
                "find_character_index_08006c7c": "find_character_index",
                "configure_device_08006186": "configure_device",
                "find_character_or_return_minus_one_08007376": "find_character_or_return_minus_one",
                "set_bit_in_uint_array_08006390": "set_bit_in_uint_array",
                "set_flag_and_update_value_at_index_0800643c": "set_flag_and_update_value_at_index"
            },
            "code": "void configure_device_08007118(uint8_t device_id, uint32_t clock_speed, int param_3, uint32_t param_4, char param_5)\n{\n  uint32_t clock_divisor;\n  int device_index;\n  int check_integrity_result;\n  uint32_t local_74;\n  uint32_t local_70;\n  uint32_t local_6c;\n  uint32_t local_68;\n  uint32_t local_64;\n  uint32_t local_60;\n  uint32_t local_5c;\n  int find_value_result;\n  int local_4c;\n  uint32_t local_48;\n  uint32_t local_44;\n  uint8_t local_1b;\n  uint32_t device_config_result;\n  uint32_t find_character_result;\n  uint8_t device_bits[16];\n\n  memset(device_bits, 0, sizeof(device_bits));\n  find_value_result = find_value(device_id, PTR_DAT_080071dc);\n  if (find_value_result != -1) {\n    clock_divisor = process_clock_source();\n    local_70 = param_4;\n    local_68 = 0;\n    local_60 = 0;\n    local_5c = 0;\n    local_64 = 0;\n    local_6c = 0;\n    local_74 = 0;\n    local_4c = param_3 - 1;\n    local_48 = 0;\n    local_44 = 0;\n    local_1b = 0;\n    if (param_5 == 0x01) {\n      *PTR_DAT_080071e0 = device_id;\n      check_integrity_result = check_data_integrity(device_bits);\n      if (check_integrity_result != 0) {\n        return;\n      }\n    }\n    device_index = find_character_index(device_id);\n    if (device_index == 0 || device_index == 4 || device_index == 8 || device_index == 0xC || device_index == 0x18) {\n      local_74 = 0x60;\n      local_6c = 0;\n      local_64 = 0;\n      local_68 = 0;\n      local_5c = 0;\n      local_60 = 0;\n      device_config_result = configure_device_08007118(device_bits, &local_74, device_index);\n      if (device_config_result == 0) {\n        find_character_result = find_character_or_return_minus_one(device_id, PTR_DAT_080071dc);\n        if ((find_character_result & 0x100000) == 0) {\n          set_bit_in_uint_array(device_bits, device_index);\n        }\n        else {\n          set_flag_and_update_value_at_index(device_bits, device_index);\n        }\n      }\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08007376",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007320",
                "FUN_0800643c",
                "FUN_08006390",
                "FUN_080075dc",
                "FUN_08006c7c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007118",
            "calling": [
                "FUN_080088e0"
            ],
            "imported": false,
            "current_name": "configure_device_08007118"
        },
        "FUN_08009fe8": {
            "renaming": {
                "FUN_08009fe8": "execute_function_08009fe8",
                "param_1": "function_id",
                "puVar1": "result_ptr",
                "uVar2": "function_result",
                "piVar3": "function_table",
                "iVar4": "set_value_result",
                "pcVar5": "function_id_function_ptr",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "puVar6": "function_table_ptr"
            },
            "code": "int execute_function_08009fe8(uint function_id) {\n    int *function_table = *(int **)function_table_ptr_ptr;\n    if (function_id > 0x1f) {\n        *function_table = 0x16;\n        return -1;\n    }\n    int function_address = function_table[0x11];\n    if ((function_address != 0) && (function_id_function_ptr = *(code **)(function_address + function_id * 4), function_id_function_ptr != (code *)0x0)) {\n        if (function_id_function_ptr != (code *)0x1) {\n            if (function_id_function_ptr == (code *)0xffffffff) {\n                *function_table = 0x16;\n                return 1;\n            }\n            *(undefined4 *)(function_address + function_id * 4) = 0;\n            (*function_id_function_ptr)(function_id);\n        }\n        return 0;\n    }\n    undefined *function_table_ptr = function_table_ptr_ptr;\n    undefined4 function_result = thunk_return_one(function_table);\n    undefined *result_ptr = result_ptr_ptr;\n    *(undefined4 *)result_ptr = 0;\n    int set_value_result = set_value_to_22(function_result, function_id, function_id, 0, function_table_ptr, unaff_r4, unaff_r5, in_lr);\n    if ((set_value_result == -1) && (*(int *)result_ptr != 0)) {\n        *function_table = *(int *)result_ptr;\n    }\n    return set_value_result;\n}",
            "called": [
                "thunk_FUN_0800887c",
                "FUN_0800886c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009fe8",
            "calling": [
                "FUN_08009b5c"
            ],
            "imported": false,
            "current_name": "execute_function_08009fe8"
        },
        "FUN_08002c1e": {
            "renaming": {
                "FUN_08002c1e": "initialize_check_08002c1e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "check_and_initialize_08002948": "check_and_initialize"
            },
            "code": "void initialize_check_08002c1e(int arg1, int arg2, int arg3, int arg4) {\n  check_and_initialize(1, 0xffff, arg3, arg4, arg4);\n  return;\n}",
            "called": [
                "FUN_08002948"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c1e",
            "calling": [],
            "imported": false,
            "current_name": "initialize_check_08002c1e"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "extract_info_08005a68",
                "param_1": "output",
                "param_2": "info",
                "iVar1": "data_ptr",
                "*param_1": "output[0]",
                "param_1[1]": "output[1]",
                "param_1[2]": "output[2]",
                "param_1[3]": "output[3]",
                "param_1[4]": "output[4]",
                "*param_2": "*info",
                "*DAT_08005a9c": "data_ptr[0]",
                "*DAT_08005aa0": "info[0]"
            },
            "code": "void extract_info_08005a68(uint8_t *output, uint32_t *info)\n{\n    uint32_t *data_ptr = (uint32_t*)DAT_08005a9c;\n    output[0] = 0xf;\n    output[1] = data_ptr[1] & 3;\n    output[2] = data_ptr[1] & 0xf0;\n    output[3] = data_ptr[1] & 0x700;\n    output[4] = data_ptr[1] >> 3 & 0x700;\n    *info = *DAT_08005aa0 & 7;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "extract_info_08005a68"
        },
        "FUN_08008f78": {
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "param_3": "input_parameter_3",
                "param_4": "input_parameter_4",
                "puVar1": "data_pointer",
                "PTR_DAT_08009018": "data_array_pointer",
                "PTR_LAB_08008f50_1_08009020": "label_pointer",
                "PTR_DAT_0800901c": "data_array_pointer_1"
            },
            "code": "void initialize_data_08008f78(int param_1, int param_2, undefined4 param_3, undefined4 param_4)\n{\n    undefined *data_pointer;\n    data_pointer = PTR_DAT_08009018;\n    if (param_1 != 1) {\n        return;\n    }\n    if (param_2 == 0xffff) {\n        *PTR_DAT_08009018 = 6;\n        *(undefined4 *)(data_pointer + 0xc) = 0;\n        data_pointer[0x14] = 7;\n        *(undefined4 *)(data_pointer + 0x20) = 0;\n        data_pointer[0x28] = 8;\n        *(undefined4 *)(data_pointer + 0x34) = 0;\n        data_pointer[0x3c] = 9;\n        *(undefined4 *)(data_pointer + 0x48) = 0;\n        data_pointer[0x50] = 10;\n        *(undefined4 *)(data_pointer + 0x5c) = 0;\n        data_pointer[100] = 0x17;\n        *(undefined4 *)(data_pointer + 0x70) = 0;\n        data_pointer[0x78] = 0x17;\n        *(undefined4 *)(data_pointer + 0x84) = 0;\n        data_pointer[0x8c] = 0x17;\n        *(undefined4 *)(data_pointer + 0x98) = 0;\n        data_pointer[0xa0] = 0x17;\n        *(undefined4 *)(data_pointer + 0xac) = 0;\n        data_pointer[0xb4] = 0x17;\n        *(undefined4 *)(data_pointer + 0xc0) = 0;\n        data_pointer[200] = 0x28;\n        *(undefined4 *)(data_pointer + 0xd4) = 0;\n        data_pointer[0xdc] = 0x28;\n        *(undefined4 *)(data_pointer + 0xe8) = 0;\n        data_pointer[0xf0] = 0x28;\n        *(undefined4 *)(data_pointer + 0xfc) = 0;\n        data_pointer[0x104] = 0x28;\n        *(undefined4 *)(data_pointer + 0x110) = 0;\n        data_pointer[0x118] = 0x28;\n        *(undefined4 *)(data_pointer + 0x124) = 0;\n        data_pointer[300] = 0x28;\n        *(undefined4 *)(data_pointer + 0x138) = 0;\n        calculate_result_and_swap_params(0, PTR_LAB_08008f50_1_08009020, PTR_DAT_0800901c, data_pointer, param_4);\n    }\n    return;\n}",
            "called": [
                "FUN_080090c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f78",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_08008f78"
        },
        "FUN_08008d30": {
            "renaming": {
                "FUN_08008d30": "initialize_struct_and_set_values_08008d30",
                "param_1": "struct_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "uVar1": "byte_value",
                "*param_1": "struct_ptr->field0",
                "param_1[1]": "struct_ptr->field1",
                "param_1[2]": "struct_ptr->field2",
                "PTR_PTR_LAB_08008ba4_1_08008d7c": "PTR_PTR_LAB_08008ba4_1_08008d7c",
                "PTR_DAT_08008d80": "PTR_DAT_08008d80",
                "set_value_at_address_based_on_lookup_table_08008d00": "set_value_at_address_based_on_lookup_table_08008d00",
                "set_byte_at_offset_08008d18": "set_byte_at_offset_08008d18",
                "get_param_value_0800734a": "get_param_value_0800734a",
                "PTR_DAT_08008d84": "PTR_DAT_08008d84",
                "PTR_DAT_08008d88": "PTR_DAT_08008d88",
                "initialize_struct_08008c20": "initialize_struct_08008c20"
            },
            "code": "undefined4 *initialize_struct_and_set_values_08008d30(undefined4 *struct_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  undefined byte_value;\n  struct_ptr->field1 = 0;\n  struct_ptr->field2 = 1000;\n  struct_ptr->field0 = PTR_PTR_LAB_08008ba4_1_08008d7c;\n  if (struct_ptr == (undefined4 *)PTR_DAT_08008d80) {\n    set_value_at_address_based_on_lookup_table_08008d00(struct_ptr,0,param_3,PTR_DAT_08008d80,param_4);\n    set_byte_at_offset_08008d18(struct_ptr,1);\n  }\n  else {\n    byte_value = get_param_value_0800734a(param_2,PTR_DAT_08008d84);\n    *(undefined *)((int)struct_ptr + 0x12d) = byte_value;\n    byte_value = get_param_value_0800734a(param_2,PTR_DAT_08008d88);\n    *(undefined *)(struct_ptr + 0x4b) = byte_value;\n  }\n  initialize_struct_08008c20(struct_ptr);\n  return struct_ptr;\n}",
            "called": [
                "FUN_08008d18",
                "FUN_08008d00",
                "FUN_0800734a",
                "FUN_08008c20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d30",
            "calling": [
                "FUN_08008d8c"
            ],
            "imported": false,
            "current_name": "initialize_struct_and_set_values_08008d30"
        },
        "FUN_08002f94": {
            "renaming": {
                "FUN_08002f94": "store_parameter_in_pointer_08002f94",
                "param_1": "pointer",
                "param_2": "unused",
                "param_3": "parameter",
                "PTR_DAT_08002f9c": "pointer"
            },
            "code": "void store_parameter_in_pointer_08002f94(void* PTR_DAT_08002f9c, int parameter) {\n  *(int*)PTR_DAT_08002f9c = parameter;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f94",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "store_parameter_in_pointer_08002f94"
        },
        "FUN_0800734a": {
            "renaming": {
                "FUN_0800734a": "get_param_value_0800734a",
                "param_1": "param",
                "uVar1": "param_value",
                "find_param_value_08007332": "find_param_value"
            },
            "code": "int get_param_value_0800734a(int param) {\n  int param_value;\n  if (param != 0) {\n    param_value = find_param_value();\n    return param_value;\n  }\n  return -1;\n}",
            "called": [
                "FUN_08007332"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800734a",
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "imported": false,
            "current_name": "get_param_value_0800734a"
        },
        "FUN_08000aec": {
            "renaming": {
                "FUN_08000aec": "check_characters_08000aec",
                "bVar1": "is_valid_character",
                "iVar2": "character_index",
                "uVar3": "counter",
                "PTR_DAT_08000bc0": "ptr_dat_08000bc0",
                "PTR_DAT_08000bc4": "ptr_dat_08000bc4",
                "clear_memory_080005e0": "clear_memory",
                "PTR_DAT_08000bc8": "ptr_dat_08000bc8",
                "PTR_DAT_08000bcc": "ptr_dat_08000bcc",
                "PTR_DAT_08000bd0": "ptr_dat_08000bd0",
                "PTR_DAT_08000bd4": "ptr_dat_08000bd4",
                "find_character_index_080036ac": "find_character_index",
                "print_character_080005f8": "print_character",
                "PTR_DAT_08000bd8": "ptr_dat_08000bd8",
                "PTR_DAT_08000bdc": "ptr_dat_08000bdc",
                "PTR_DAT_08000be0": "ptr_dat_08000be0",
                "PTR_DAT_08000be4": "ptr_dat_08000be4"
            },
            "code": "void check_characters_08000aec(void)\n{\n  bool is_valid_character;\n  int character_index;\n  uint counter;\n  *PTR_DAT_08000bc0 = 1;\n  if (*PTR_DAT_08000bc4 != '\\0') {\n    clear_memory_080005e0();\n  }\n  for (counter = 0; counter < 5; counter = (counter + 1) & 0xff) {\n    PTR_DAT_08000bc8[counter] = 0;\n    PTR_DAT_08000bcc[counter] = 0;\n    PTR_DAT_08000bd0[counter] = 0;\n  }\n  for (counter = 0; counter < 0x3c; counter = (counter + 1) & 0xff) {\n    if ((counter - 0x2e & 0xff) < 0xe) {\n      if (counter < 0x3c) {\n        character_index = (int)(char)PTR_DAT_08000bd4[counter];\n      }\n      else {\n        character_index = -1;\n      }\n      character_index = find_character_index(character_index);\n      if (character_index == 0) {\n        is_valid_character = false;\n      }\n      else {\n        if (counter < 0x3c) {\n          character_index = (int)(char)PTR_DAT_08000bd4[counter];\n        }\n        else {\n          character_index = -1;\n        }\n        character_index = find_character_index(character_index);\n        if (character_index == 1) {\n          is_valid_character = false;\n        }\n        else {\n          is_valid_character = true;\n        }\n      }\n    }\n    else {\n      is_valid_character = false;\n    }\n    if (is_valid_character) {\n      print_character(counter, 2);\n    }\n    else {\n      if (counter < 0x3c) {\n        if (((PTR_DAT_08000bd4[counter] != -1) && (character_index = find_character_index(), character_index != 0)) &&\n           (character_index = find_character_index((int)(char)PTR_DAT_08000bd4[counter]), character_index != 1)) {\n          is_valid_character = true;\n        }\n      }\n      if (is_valid_character) {\n        print_character(counter, 1);\n      }\n    }\n    PTR_DAT_08000bd8[counter] = 0xff;\n  }\n  *(undefined4 *)PTR_DAT_08000bdc = 0;\n  *PTR_DAT_08000be0 = 0;\n  *PTR_DAT_08000be4 = 0;\n  *PTR_DAT_08000bc0 = 0;\n  return;\n}",
            "called": [
                "FUN_080036ac",
                "FUN_080005e0",
                "FUN_080005f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000aec",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "check_characters_08000aec"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "call_conversion_or_function_08008eec_08008eec",
                "convert_or_call_func_08008ed6": "convert_or_call_func_08008ed6"
            },
            "code": "void call_conversion_or_function_08008eec_08008eec(void)\n{\n  convert_or_call_func_08008ed6();\n  return;\n}",
            "called": [
                "FUN_08008ed6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [],
            "imported": false,
            "current_name": "call_conversion_or_function_08008eec_08008eec"
        },
        "FUN_080068d6": {
            "renaming": {
                "FUN_080068d6": "check_input_080068d6",
                "param_1": "input_array",
                "param_2": "array_size",
                "param_3": "param_3",
                "*(char *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(char *)(param_1 + 0xe)": "input_array[14]",
                "param_1[10]": "input_array[10]",
                "*(short *)(param_1 + 0xb)": "input_array[11]",
                "*(short *)((int)param_1 + 0x2e)": "input_array[46]",
                "param_1[0xf]": "input_array[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "input_array[58]",
                "*(undefined *)(param_1 + 0xe)": "input_array[14]",
                "*(uint *)(*param_1 + 0xc)": "*(uint *)(*input_array + 12)",
                "*(uint *)(*param_1 + 0x14)": "*(uint *)(*input_array + 20)"
            },
            "code": "int check_input_080068d6(int *input_array, int array_size, int param_3)\n{\n    if (input_array[58] != ' ') {\n        return 2;\n    }\n    if (array_size == 0) {\n        return 1;\n    }\n    if (param_3 == 0) {\n        return 1;\n    }\n    if (input_array[14] != 1) {\n        input_array[10] = array_size;\n        input_array[11] = (short)param_3;\n        input_array[46] = (short)param_3;\n        input_array[15] = 0;\n        input_array[58] = 0x22;\n        input_array[14] = 0;\n        *(uint *)(*input_array + 12) |= 0x100;\n        *(uint *)(*input_array + 20) |= 1;\n        *(uint *)(*input_array + 12) |= 0x20;\n        return 0;\n    }\n    return 2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080068d6",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "check_input_080068d6"
        },
        "FUN_080032a2": {
            "renaming": {
                "FUN_080032a2": "send_encoded_data_to_server_080032a2",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "data_length",
                "param_4": "buffer",
                "uVar1": "end_of_string",
                "find_end_of_string_08000178": "find_end_of_string",
                "encode_and_send_data_0800325a": "encode_and_send_data"
            },
            "code": "void send_encoded_data_to_server_080032a2(undefined4 socket, undefined4 data, undefined4 data_length, undefined4 buffer){\n  undefined4 end_of_string = find_end_of_string(data);\n  encode_and_send_data(socket, 0x71, end_of_string, data, buffer);\n  return;\n}",
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080032a2",
            "calling": [
                "FUN_08002f14"
            ],
            "imported": false,
            "current_name": "send_encoded_data_to_server_080032a2"
        },
        "FUN_08001b48": {
            "renaming": {
                "FUN_08001b48": "process_and_update_stats_08001b48",
                "PTR_DAT_08001bc0": "input_buffer",
                "PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4": "firmware_data",
                "PTR_FUN_08000214_1_08001bc8": "function_pointer_1",
                "PTR_LAB_080002ec_1_08001bcc": "label_pointer_1",
                "DAT_08001bd0": "constant_data_1",
                "PTR_LAB_08000c18_1_08001bd4": "label_pointer_2",
                "DAT_08001bd8": "constant_data_2",
                "PTR_LAB_080001a8_1_08001bdc": "label_pointer_3",
                "PTR_FUNC_08001cd0_1_08001be0": "function_pointer_2",
                "DAT_08001be4": "constant_data_3"
            },
            "code": "void process_and_update_stats_08001b48(void)\n{\n  undefined *PTR_DAT_08001bc0_pointer;\n  PTR_DAT_08001bc0_pointer = PTR_DAT_08001bc0;\n  process_input(PTR_DAT_08001bc0_pointer, PTR_s__home_bo_p2im_p2im_real_firmware_08001bc4, 2, 5);\n  update_value(PTR_DAT_08001bc0_pointer, 0xe0, PTR_decode_and_store_08000214_1_08001bc8);\n  update_value(PTR_DAT_08001bc0_pointer, 0x90, PTR_LAB_080002ec_1_08001bcc);\n  update_value(PTR_DAT_08001bc0_pointer, 0xc0, DAT_08001bd0);\n  update_value(PTR_DAT_08001bc0_pointer, 0xd0, PTR_LAB_08000c18_1_08001bd4);\n  update_value(PTR_DAT_08001bc0_pointer, 0xf4, DAT_08001bd8);\n  update_value(PTR_DAT_08001bc0_pointer, 0xf5, PTR_LAB_080001a8_1_08001bdc);\n  store_parameter_in_pointer(PTR_DAT_08001bc0_pointer, 0xf0, PTR_FUNC_08001cd0_1_08001be0);\n  store_value_if_param2_is_0xff(PTR_DAT_08001bc0_pointer, 0xff, DAT_08001be4);\n  process_data_and_update_stats(PTR_DAT_08001bc0_pointer, 0xe100);\n  check_characters();\n  software_interrupt_handler(0);\n  return;\n}",
            "called": [
                "FUN_08000aec",
                "FUN_08002f94",
                "FUN_08002f2c",
                "FUN_08002f84",
                "FUN_0800018c",
                "FUN_08003048",
                "FUN_08002e44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b48",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "process_and_update_stats_08001b48"
        },
        "FUN_08006390": {
            "renaming": {
                "FUN_08006390": "set_bit_in_uint_array_08006390",
                "param_1": "uint_array",
                "param_2": "index",
                "puVar1": "array_ptr",
                "DAT_080063bc": "DAT_end_of_array"
            },
            "code": "void set_bit_in_uint_array_08006390(uint **uint_array, uint index, uint value) {\n  uint *array_ptr = *uint_array;\n  update_bit_in_uint_array(array_ptr, index, value);\n  if (array_ptr == DAT_080063bc) {\n    array_ptr[0x11] = array_ptr[0x11] | 0x8000;\n  }\n  **uint_array = **uint_array | 1;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006390",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_bit_in_uint_array_08006390"
        },
        "FUN_08009f48": {
            "renaming": {
                "FUN_08009f48": "do_nothing_08009f48"
            },
            "code": "\nvoid do_nothing_08009f48(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009f48",
            "calling": [
                "FUN_080091d8",
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "do_nothing_08009f48"
        },
        "FUN_08004d6a": {
            "renaming": {
                "FUN_08004d6a": "do_nothing_08004d6a"
            },
            "code": "\nvoid do_nothing_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6a",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004d6a"
        },
        "FUN_08008730": {
            "renaming": {
                "FUN_08008730": "update_values_based_on_index_08008730",
                "uVar1": "index",
                "iVar2": "ptr_to_value",
                "iVar3": "ptr_to_value",
                "PTR_DAT_08008770": "ptr_to_data_1",
                "PTR_DAT_08008774": "ptr_to_data_2",
                "PTR_DAT_08008778": "ptr_to_data_3",
                "check_and_set_values_0800688e": "check_and_update",
                "*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(iVar3 + 0x44) * 4)": "byte_val",
                "*(int *)(iVar3 + 100) + (uint)*(ushort *)(iVar3 + 0x6a)": "value_to_set"
            },
            "code": "void update_values_based_on_index_08008730(void)\n{\n  uint index = find_index();\n  int ptr_to_value = *(int *)(PTR_DAT_08008770 + index * 4);\n  if ((index < 5) && (ptr_to_value = (**(code **)(PTR_DAT_08008774 + index * 4))(ptr_to_value), ptr_to_value != -1)) {\n    uint *(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(iVar3 + 0x44) * 4) = *(byte *)(ptr_to_value + 0x44);\n    uint ushort_val = *(ushort *)(ptr_to_value + 0x6a);\n    uint value_to_set = *(int *)(ptr_to_value + 100) + ushort_val;\n    check_and_update(*(undefined4 *)(PTR_DAT_08008778 + (uint)*(byte *)(iVar3 + 0x44) * 4), value_to_set, 1);\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008730",
            "calling": [
                "FUN_08006932"
            ],
            "imported": false,
            "current_name": "update_values_based_on_index_08008730"
        },
        "FUN_08005df4": {
            "renaming": {
                "FUN_08005df4": "update_bits_and_return_08005df4",
                "param_1": "params",
                "puVar1": "params_pointer"
            },
            "code": "void update_bits_and_return_08005df4(uint** params) {\n  uint* params_pointer = *params;\n  *(undefined *)((int)params + 0x3d) = 2;\n  if ((params_pointer[8] & 0x1111) == 0) {\n    if ((params_pointer[8] & 0x444) == 0) {\n      *params_pointer = *params_pointer & 0xfffffffe;\n    }\n  }\n  update_bits_and_return_08005df4_08007710(params);\n  *(undefined *)((int)params + 0x3d) = 0;\n  *(undefined *)(params + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005df4",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "update_bits_and_return_08005df4"
        },
        "FUN_08009148": {
            "renaming": {
                "FUN_08009148": "execute_functions_08009148"
            },
            "code": "void execute_functions_08009148(void)\n{\n  undefined *function_ptrs_start = PTR_DAT_08009180;\n  int function_ptrs_size = (int)PTR_DAT_08009184 - (int)PTR_DAT_08009180;\n  for (int i = 0; i < function_ptrs_size / 4; i++) {\n    (**(code **)(function_ptrs_start + i * 4))();\n  }\n  do_nothing_0800a424();\n  function_ptrs_start = PTR_DAT_08009188;\n  function_ptrs_size = (int)PTR_DAT_0800918c - (int)PTR_DAT_08009188;\n  for (int i = 0; i < function_ptrs_size / 4; i++) {\n    (**(code **)(function_ptrs_start + i * 4))();\n  }\n  return;\n}",
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009148",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "execute_functions_08009148"
        },
        "FUN_08005460": {
            "renaming": {
                "FUN_08005460": "FUNC_08005460"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined4 FUNC_08005460(uint *param_1)\n\n{\n  uint *puVar1;\n  uint *puVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  bool bVar7;\n  \n  puVar1 = DAT_08005720;\n  if ((*param_1 & 1) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 4) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) != 0)))) {\n      if (((*DAT_08005720 & 0x20000) != 0) && (param_1[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      uVar6 = param_1[1];\n      if (uVar6 == 0x10000) {\n        *DAT_08005720 = *DAT_08005720 | 0x10000;\n      }\n      else if (uVar6 == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (uVar6 == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        *DAT_08005720 = *DAT_08005720 & 0xfffeffff;\n        *puVar1 = *puVar1 & 0xfffbffff;\n      }\n      if (param_1[1] == 0) {\n        iVar3 = get_ptr_dat_value_08003760();\n        while ((*DAT_08005720 & 0x20000) != 0) {\n          iVar4 = get_ptr_dat_value_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar3 = get_ptr_dat_value_08003760();\n        while ((*DAT_08005720 & 0x20000) == 0) {\n          iVar4 = get_ptr_dat_value_08003760();\n          if (100 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param_1 & 2) != 0) {\n    if (((DAT_08005720[1] & 0xc) == 0) ||\n       (((DAT_08005720[1] & 0xc) == 8 && ((DAT_08005720[1] & 0x10000) == 0)))) {\n      if (((*DAT_08005720 & 2) != 0) && (param_1[4] != 1)) {\n        return 1;\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n    else if (param_1[4] == 0) {\n      *DAT_08005724 = 0;\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((*DAT_08005720 & 2) != 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005724 = 1;\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((*DAT_08005720 & 2) == 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      *DAT_08005720 = *DAT_08005720 & 0xffffff07 | param_1[5] << 3;\n    }\n  }\n  if ((*param_1 & 8) != 0) {\n    if (param_1[6] == 0) {\n      *DAT_08005728 = 0;\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((DAT_08005720[9] & 2) != 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005728 = 1;\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((DAT_08005720[9] & 2) == 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (2 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n      count_down_08005434(1);\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    bVar7 = (DAT_08005720[7] & 0x10000000) == 0;\n    if (bVar7) {\n      DAT_08005720[7] = DAT_08005720[7] | 0x10000000;\n    }\n    if ((*DAT_0800572c & 0x100) == 0) {\n      *DAT_0800572c = *DAT_0800572c | 0x100;\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((*DAT_0800572c & 0x100) == 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    puVar2 = DAT_08005838;\n    puVar1 = DAT_08005720;\n    uVar6 = param_1[3];\n    if (uVar6 == 1) {\n      DAT_08005720[8] = DAT_08005720[8] | 1;\n    }\n    else if (uVar6 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (uVar6 == 5) {\n      DAT_08005838[8] = DAT_08005838[8] | 4;\n      puVar2[8] = puVar2[8] | 1;\n    }\n    else {\n      DAT_08005720[8] = DAT_08005720[8] & 0xfffffffe;\n      puVar1[8] = puVar1[8] & 0xfffffffb;\n    }\n    if (param_1[3] == 0) {\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((DAT_08005838[8] & 2) != 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar3 = get_ptr_dat_value_08003760();\n      while ((DAT_08005720[8] & 2) == 0) {\n        iVar4 = get_ptr_dat_value_08003760();\n        if (5000 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (bVar7) {\n      DAT_08005838[7] = DAT_08005838[7] & 0xefffffff;\n    }\n  }\n  if (param_1[7] == 0) {\n    uVar5 = 0;\n  }\n  else if ((DAT_08005838[1] & 0xc) == 8) {\n    uVar5 = 1;\n  }\n  else if (param_1[7] == 2) {\n    *DAT_0800583c = 0;\n    iVar3 = get_ptr_dat_value_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        if (param_1[8] == 0x10000) {\n          DAT_08005838[1] = DAT_08005838[1] & 0xfffdffff | param_1[2];\n        }\n        DAT_08005838[1] = DAT_08005838[1] & 0xffc2ffff | param_1[8] | param_1[9];\n        *DAT_0800583c = 1;\n        iVar3 = get_ptr_dat_value_08003760();\n        do {\n          if ((*DAT_08005838 & 0x2000000) != 0) {\n            return 0;\n          }\n          iVar4 = get_ptr_dat_value_08003760();\n        } while ((uint)(iVar4 - iVar3) < 3);\n        return 3;\n      }\n      iVar4 = get_ptr_dat_value_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  else {\n    *DAT_0800583c = 0;\n    iVar3 = get_ptr_dat_value_08003760();\n    do {\n      if ((*DAT_08005838 & 0x2000000) == 0) {\n        return 0;\n      }\n      iVar4 = get_ptr_dat_value_08003760();\n    } while ((uint)(iVar4 - iVar3) < 3);\n    uVar5 = 3;\n  }\n  return uVar5;\n}\n\n",
            "called": [
                "FUN_08005434",
                "FUN_08003760"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005460",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "FUNC_08005460"
        },
        "FUN_08008854": {
            "renaming": {
                "FUN_08008854": "return_zero_08008854"
            },
            "code": "int return_zero_08008854(void) {\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008854",
            "calling": [
                "FUN_0800a130"
            ],
            "imported": false,
            "current_name": "return_zero_08008854"
        },
        "FUN_080064cc": {
            "renaming": {
                "FUN_080064cc": "process_input_080064cc",
                "param_1": "input",
                "sVar1": "count",
                "pbVar2": "input_data",
                "first_char": "first_char",
                "input_type": "input_type",
                "output": "output",
                "input_data": "input_data",
                "value": "value"
            },
            "code": "int process_input_080064cc(int *input)\n{\n    char first_char = *(char *)((int)input + 0x39);\n    if (first_char != '!') {\n        return 2;\n    }\n    int input_type = input[2];\n    int *output = (int *)*input;\n    if (input_type == 0x1000) {\n        int *input_data = (int *)input[8];\n        int value = *(ushort *)input_data & 0x1ff;\n        if (input[4] == 0) {\n            input[8] = (int)(input_data + 2);\n        }\n        else {\n            input[8] = (int)(input_data + 1);\n        }\n        *(uint *)(output + 4) = value;\n    }\n    else {\n        byte *input_data = (byte *)input[8];\n        input[8] = (int)(input_data + 1);\n        *(uint *)(output + 4) = (uint)*input_data;\n    }\n    short count = *(short *)((int)input + 0x26) + -1;\n    *(short *)((int)input + 0x26) = count;\n    if (count == 0) {\n        *(uint *)(output + 0xc) &= 0xffffff7f;\n        *(uint *)(output + 0xc) |= 0x40;\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064cc",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "process_input_080064cc"
        },
        "FUN_08004d6c": {
            "renaming": {
                "FUN_08004d6c": "set_flag_if_condition_met_08004d6c",
                "param_1": "params",
                "puVar1": "ptr4",
                "char1": "char_quote",
                "ushort1": "ushort_num",
                "ptr2": "flag_ptr",
                "ptr3": "null_ptr",
                "char2": "char_at",
                "param_1 + 0x3d": "char_quote",
                "param_1 + 0x2a": "ushort_num",
                "param_1[0xb]": "flag_ptr",
                "param_1[0xc]": "null_ptr",
                "param_1 + 0x3e": "char_at",
                "param_1[9]": "ptr4",
                "*(char *)((int)param_1 + 0x3d)": "char_quote",
                "*(ushort *)((int)param_1 + 0x2a)": "ushort_num",
                "param_1[0xb] == (uint *)0x2": "flag_ptr == 2",
                "**param_1": "value_at_params",
                "(*param_1)[1]": "value_at_params_plus_1",
                "*(char *)puVar1": "char_at_ptr4",
                "*(short *)((int)param_1 + 0x2a)": "ushort_num",
                "*(undefined *)((int)param_1 + 0x3d)": "space_char",
                "param_1[0xc] = (uint *)0x0": "null_ptr = 0",
                "*(undefined *)((int)param_1 + 0x3e)": "char_at",
                "*(char *)(params + 0x3d)": "char_quote",
                "*(ushort *)(params + 0x2a)": "ushort_num",
                "params[0xb]": "flag_ptr",
                "params[0xc]": "null_ptr",
                "*(char *)(params + 0x3e)": "char_at",
                "params[9]": "ptr4",
                "params[0xb] == (uint *)0x2": "flag_ptr == 2",
                "**params": "value_at_params",
                "(*params)[1]": "value_at_params_plus_1",
                "*(undefined *)((int)params + 0x3d)": "space_char",
                "*(undefined *)((int)params + 0x3e)": "char_at"
            },
            "code": "uint set_flag_if_condition_met_08004d6c(uint **params)\n{\n  uint *ptr1 = params[0];\n  char char1 = *(char *)(params + 0x3d);\n  ushort ushort1 = *(ushort *)(params + 0x2a);\n  uint *ptr2 = params[0xb];\n  uint *ptr3 = params[0xc];\n  char char2 = *(char *)(params + 0x3e);\n  uint *ptr4 = params[9];\n  if (char1 == '\"') {\n    if (ushort1 < 4) {\n      if (ushort1 - 2 < 2) {\n        if (ptr2 == (uint *)0x2) {\n          **params |= 0x400;\n        }\n        else {\n          **params &= 0xfffffbff;\n          **params |= 0x800;\n        }\n        (*params)[1] &= 0xfffffbff;\n      }\n      else {\n        if (ptr2 == (uint *)0x2) {\n          **params |= 0x400;\n        }\n        else {\n          **params &= 0xfffffbff;\n        }\n        (*params)[1] &= 0xfffff8ff;\n        *ptr4++ = (uint)(*params)[4];\n        params[9] = ptr4;\n        ushort1--;\n        *(char *)(params + 0x3d) = 0x20;\n        *ptr3 = (uint *)0x0;\n        if (char2 == '@') {\n          *(char *)(params + 0x3e) = 0;\n          do_nothing_08004d6a();\n        }\n        else {\n          *(char *)(params + 0x3e) = 0;\n          do_nothing_08004a20();\n        }\n      }\n    }\n    else {\n      *ptr4++ = (uint)(*params)[4];\n      params[9] = ptr4;\n      ushort1--;\n    }\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d6c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_flag_if_condition_met_08004d6c"
        },
        "FUN_08004ac2": {
            "renaming": {
                "FUN_08004ac2": "validate_and_return_input_08004ac2",
                "param_1": "input_array",
                "param_2": "input_flag",
                "param_3": "input_length",
                "param_4": "input_mask",
                "uVar1": "input_value",
                "uVar2": "input_status"
            },
            "code": "int validate_and_return_input_08004ac2(int *input_array, int input_flag, int input_length, int input_mask) {\n  int input_value;\n  int input_status = *(int *)(*input_array + 0x18);\n  if ((input_status & 0x80) == 0) {\n    input_value = *(int *)(input_array + 3);\n  }\n  else {\n    input_value = *(int *)(input_array + 6);\n  }\n  validate_input(input_array, (input_status & 4) == 0, input_value, input_length, input_mask);\n  return 0;\n}",
            "called": [
                "FUN_08007fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ac2",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "validate_and_return_input_08004ac2"
        },
        "FUN_08008850": {
            "renaming": {
                "FUN_08008850": "return_one_08008850"
            },
            "code": "int return_one_08008850(void)\n{\n  int result = 1;\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008850",
            "calling": [
                "FUN_0800a110"
            ],
            "imported": false,
            "current_name": "return_one_08008850"
        },
        "FUN_08006ca8": {
            "renaming": {
                "FUN_08006ca8": "decode_and_set_flag_08006ca8",
                "param_1": "flag_value",
                "param_2": "flag_param",
                "iVar2": "flag_var_1",
                "uVar3": "flag_set",
                "uVar4": "flag_mask",
                "uVar5": "current_flag",
                "local_18": "flag_bit",
                "local_14": "flag_arg_1",
                "local_10": "flag_arg_2",
                "DAT_08006d14": "FLAG_VAL_1",
                "DAT_08006d18": "FLAG_VAL_2",
                "DAT_08006d20": "FLAG_PTR_1",
                "PTR_DAT_08006d1c": "FLAG_PTR_2",
                "set_flag_08006bb8": "set_flag",
                "decode_080040e8": "decode"
            },
            "code": "void decode_and_set_flag_08006ca8(uint *flag_value, undefined4 flag_param)\n{\n  uint current_flag = *flag_value;\n  uint flag_mask = 0;\n  uint flag_check = 0;\n  if (current_flag == DAT_08006d14) {\n    flag_mask = *(uint *)(DAT_08006d20 + 0x18) | 0x200;\n    *(uint *)(DAT_08006d20 + 0x18) = flag_mask;\n    flag_check = *(uint *)(DAT_08006d20 + 0x18) & 0x200;\n  }\n  else {\n    if (current_flag == DAT_08006d18) {\n      flag_mask = *(uint *)(DAT_08006d20 + 0x18) | 0x400;\n      *(uint *)(DAT_08006d20 + 0x18) = flag_mask;\n      flag_check = *(uint *)(DAT_08006d20 + 0x18) & 0x400;\n    }\n  }\n  undefined *flag_ptr = PTR_DAT_08006d1c;\n  undefined4 flag_set = set_flag((uint)((int)(char)*PTR_DAT_08006d1c << 0x18) >> 0x1c, flag_param, flag_mask, flag_check);\n  uint flag_bit = 1 << ((byte)*flag_ptr & 0xf) & 0xffff;\n  uint flag_arg_1 = 3;\n  uint flag_arg_2 = 0;\n  decode(flag_set, &flag_bit);\n  return;\n}",
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ca8",
            "calling": [
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "decode_and_set_flag_08006ca8"
        },
        "FUN_08002fc2": {
            "renaming": {
                "FUN_08002fc2": "set_value_at_index_08002fc2",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_08002fc2(int* array, int index, int value) {\n    *(array + (index + 0x42) * 4) = value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fc2",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_value_at_index_08002fc2"
        },
        "FUN_08008afa": {
            "renaming": {
                "FUN_08008afa": "calculate_value_at_offset_08008afa",
                "param_1": "base_address",
                "*(short *)(param_1 + 0x134)": "value_at_offset_1",
                "*(short *)(param_1 + 0x136)": "value_at_offset_2",
                "result": "result"
            },
            "code": "ushort calculate_value_at_offset_08008afa(int base_address)\n{\n    ushort value_at_offset_1 = *(ushort *)(base_address + 0x134);\n    ushort value_at_offset_2 = *(ushort *)(base_address + 0x136);\n    ushort result = (value_at_offset_1 + 0x40) - value_at_offset_2;\n    return result & 0x3f;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008afa",
            "calling": [
                "FUN_08008bf4"
            ],
            "imported": false,
            "current_name": "calculate_value_at_offset_08008afa"
        },
        "FUN_08003048": {
            "renaming": {
                "FUN_08003048": "process_data_and_update_stats_08003048",
                "param_1": "data",
                "param_2": "length",
                "param_3": "param_3",
                "param_4": "param_4",
                "puVar1": "data_ptr",
                "PTR_DAT_08003068": "data_ptr",
                "process_data_08008c44": "process_data",
                "update_and_decode_character_stats_08003002": "update_stats",
                "set_data_and_execute_08002e26": "execute_data"
            },
            "code": "void process_data_and_update_stats_08003048(undefined4 data, undefined4 length, undefined4 param_3, undefined4 param_4)\n{\n  undefined *PTR_DAT_08003068 = PTR_DAT_08003068;\n  process_data_08008c44(PTR_DAT_08003068, length, 6, param_4, param_4);\n  update_and_decode_character_stats_08003002(data);\n  set_data_and_execute_08002e26(data, PTR_DAT_08003068);\n  return;\n}",
            "called": [
                "FUN_08003002",
                "FUN_08008c44",
                "FUN_08002e26"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003048",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "process_data_and_update_stats_08003048"
        },
        "FUN_0800937c": {
            "renaming": {
                "FUN_0800937c": "FUNC_0800937c"
            },
            "code": "\nint FUNC_0800937c(int param_1,undefined *param_2,byte *param_3,int *param_4)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  int *piVar3;\n  bool bVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  int unaff_r9;\n  int iVar7;\n  int *local_8c;\n  uint local_88;\n  int local_84;\n  undefined4 local_80;\n  int local_7c;\n  int local_74;\n  byte local_70;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  local_8c = param_4;\n  if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n    initialize_data_for_object_08009d50();\n  }\n  if (param_2 == PTR_DAT_08009588) {\n    param_2 = *(undefined **)(param_1 + 4);\n  }\n  else if (param_2 == PTR_DAT_08009590) {\n    param_2 = *(undefined **)(param_1 + 8);\n  }\n  else if (param_2 == PTR_DAT_08009594) {\n    param_2 = *(undefined **)(param_1 + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x1c)) || (*(int *)(param_2 + 0x10) == 0)) &&\n     (iVar7 = process_data_08009a80(param_1,param_2), iVar7 != 0)) {\n    return -1;\n  }\n  local_74 = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  pbVar5 = param_3;\nLAB_080093be:\n  pbVar6 = pbVar5;\n  if (*pbVar6 != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  pbVar5 = pbVar6 + 1;\n  if (*pbVar6 != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  iVar7 = (int)pbVar6 - (int)param_3;\n  if (iVar7 != 0) {\n    iVar2 = process_input_and_return_last_index_08009358(param_1,param_2,param_3,iVar7);\n    if (iVar2 == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n        return -1;\n      }\n      return local_74;\n    }\n    local_74 = local_74 + iVar7;\n  }\n  if (*pbVar6 == 0) goto LAB_08009568;\n  local_88 = 0;\n  local_7c = 0;\n  local_84 = -1;\n  local_80 = 0;\n  local_45 = 0;\n  local_30 = 0;\n  pbVar5 = pbVar6 + 1;\n  while( true ) {\n    iVar7 = find_char_in_string_08009f2c(PTR_s___0__0800958c,*pbVar5);\n    puVar1 = PTR_DAT_08009598;\n    param_3 = pbVar5 + 1;\n    if (iVar7 == 0) break;\n    local_88 = 1 << (iVar7 - (int)PTR_s___0__0800958c & 0xffU) | local_88;\n    pbVar5 = param_3;\n  }\n  if ((int)(local_88 << 0x1b) < 0) {\n    local_45 = 0x20;\n  }\n  if ((int)(local_88 << 0x1c) < 0) {\n    local_45 = 0x2b;\n  }\n  if (*pbVar5 == 0x2a) {\n    piVar3 = local_8c + 1;\n    iVar7 = *local_8c;\n    local_8c = piVar3;\n    if (-1 < iVar7) goto LAB_08009498;\n    local_7c = -iVar7;\n    local_88 = local_88 | 2;\n  }\n  else {\n    bVar4 = false;\n    iVar7 = local_7c;\n    param_3 = pbVar5;\n    while( true ) {\n      if (9 < *param_3 - 0x30) break;\n      iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n      bVar4 = true;\n      param_3 = param_3 + 1;\n    }\n    if (bVar4) {\nLAB_08009498:\n      local_7c = iVar7;\n    }\n  }\n  if (*param_3 == 0x2e) {\n    if (param_3[1] == 0x2a) {\n      param_3 = param_3 + 2;\n      piVar3 = local_8c + 1;\n      local_84 = *local_8c;\n      local_8c = piVar3;\n      if (local_84 < 0) {\n        local_84 = -1;\n      }\n    }\n    else {\n      bVar4 = false;\n      iVar7 = 0;\n      local_84 = 0;\n      while( true ) {\n        param_3 = param_3 + 1;\n        if (9 < *param_3 - 0x30) break;\n        iVar7 = iVar7 * 10 + (*param_3 - 0x30);\n        bVar4 = true;\n      }\n      if (bVar4) {\n        local_84 = iVar7;\n      }\n    }\n  }\n  iVar7 = find_char_in_string_08009f2c(PTR_DAT_08009598,*param_3,3);\n  if (iVar7 != 0) {\n    param_3 = param_3 + 1;\n    local_88 = local_88 | 0x40 << (iVar7 - (int)puVar1 & 0xffU);\n  }\n  local_70 = *param_3;\n  param_3 = param_3 + 1;\n  iVar7 = find_char_in_string_08009f2c(PTR_s_efgEFG_0800959c,local_70,6);\n  if (iVar7 == 0) {\n    iVar7 = FUNC_08009698(param_1,&local_88,param_2,DAT_080095a4,&local_8c);\n  }\n  else {\n    iVar7 = param_1;\n    if (DAT_080095a0 == 0) {\n      local_8c = (int *)(((int)local_8c + 7U & 0xfffffff8) + 8);\n      iVar7 = unaff_r9;\n      goto LAB_0800951a;\n    }\n  }\n  if (iVar7 == -1) goto LAB_08009568;\nLAB_0800951a:\n  local_74 = local_74 + iVar7;\n  pbVar5 = param_3;\n  unaff_r9 = iVar7;\n  goto LAB_080093be;\n}\n\n",
            "called": [
                "FUN_08009f2c",
                "FUN_08009698",
                "FUN_08009358",
                "FUN_08009a80",
                "FUN_08009d50"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800937c",
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "imported": false,
            "current_name": "FUNC_0800937c"
        },
        "FUN_08000214": {
            "renaming": {
                "FUN_08000214": "decode_and_store_08000214",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data",
                "param_4": "positions",
                "PTR_DAT_080002d8": "data",
                "PTR_DAT_080002dc": "character_data",
                "PTR_DAT_080002e0": "position_data",
                "PTR_DAT_080002e4": "position_array",
                "PTR_DAT_080002e8": "character_array",
                "get_data_at_offset_08002fa0": "get_data_at_offset",
                "find_character_index_080036ac": "find_character_index",
                "is_character_present_at_index_0800738a": "is_character_present_at_index",
                "decode_character_080088e0": "decode_character",
                "set_value_at_index_08002fc2": "set_value_at_index",
                "calculate_and_store_position_080026b0": "calculate_and_store_position"
            },
            "code": "void decode_and_store_08000214(uint index, uint value, uint[] PTR_DAT_080002d8, uint[] positions){\n    if(index > 59){\n        return;\n    }\n    uint PTR_DAT_080002d8Value = get_PTR_DAT_080002d8_at_offset_08002fa0(PTR_DAT_080002d8, index, 0, 0, 0);\n    if(PTR_DAT_080002d8Value == 3){\n        uint character = PTR_DAT_080002d8[index];\n        if(index < 60 && character != -1){\n            uint characterIndex = find_character_index_080036ac((int)(char)character);\n            if(characterIndex == 2){\n                if(is_character_present_at_index_0800738a((int)(char)character, positions)){\n                    decode_character_080088e0(index, value);\n                }\n            }\n        }\n        set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n    }\n    else if(PTR_DAT_080002d8Value == 4){\n        uint character = PTR_DAT_080002d8[index];\n        if(index < 60 && character != -1){\n            uint characterIndex = find_character_index_080036ac((int)(char)character);\n            if(characterIndex == 2){\n                calculate_and_store_position_080026b0(positions + (uint)(byte)PTR_DAT_080002d8[index + 1] * 3, value);\n            }\n        }\n        set_value_at_index_08002fc2(PTR_DAT_080002d8, index, value);\n    }\n}",
            "called": [
                "FUN_0800021a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000214",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "decode_and_store_08000214"
        },
        "FUN_08003724": {
            "renaming": {
                "FUN_08003724": "set_register_and_update_08003724",
                "update_register_08003f0c": "update_register",
                "set_input_length_080036d8": "set_input_length",
                "do_nothing_080036d4": "do_nothing",
                "DAT_08003744": "data_pointer"
            },
            "code": "int set_register_and_update_08003724() {\n  *DAT_08003744 = *DAT_08003744 | 0x10;\n  update_register(3);\n  set_input_length(0xf);\n  do_nothing();\n  return 0;\n}",
            "called": [
                "FUN_08003f0c",
                "FUN_080036d8",
                "FUN_080036d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003724",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "set_register_and_update_08003724"
        },
        "FUN_080038dc": {
            "renaming": {
                "FUN_080038dc": "get_value_at_offset_080038dc",
                "param_1": "base_address",
                "*param_1": "*base_address",
                "PTR_": "base_",
                "DAT_": "data_"
            },
            "code": "int get_value_at_offset_080038dc(int *PTR_address)\n{\n  int offset = 0x4c;\n  int *address = PTR_address + offset;\n  int value = *address;\n  return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038dc",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_080038dc"
        },
        "FUN_080025ac": {
            "renaming": {
                "FUN_080025ac": "update_character_stats_080025ac",
                "*param_1": "character_stats",
                "param_2": "character_id",
                "param_3": "stat1",
                "param_4": "stat2",
                "uVar1": "character_stat_mask",
                "uVar2": "character_index",
                "uVar3": "bit_check_val",
                "iVar4": "adjusted_stat1/adjusted_stat2/bit_check_result"
            },
            "code": "byte update_character_stats_080025ac(byte *character_stats, uint character_id, int stat1, int stat2)\n{\n  uint character_index = (uint)(*character_stats);\n  if (character_index < 0xc) {\n    update_character_stats_080025ac_08008990(character_id, 1, stat1, character_index, stat2);\n    uint stat_mask = (byte)PTR_DAT_08002628[character_index * 8] & 0xffffffc0 | character_id & 0x3f;\n    PTR_DAT_08002628[character_index * 8] = (char)stat_mask;\n    int adjusted_stat1 = -stat1 + 0x220;\n    if (adjusted_stat1 < 0) {\n      adjusted_stat1 = -stat1 + 0x223;\n    }\n    character_stats[1] = (byte)((uint)(adjusted_stat1 << 0x16) >> 0x18);\n    int adjusted_stat2 = -stat2 + 0x960;\n    if (adjusted_stat2 < 0) {\n      adjusted_stat2 = -stat2 + 0x963;\n    }\n    character_stats[2] = (byte)((uint)(adjusted_stat2 << 0x16) >> 0x18);\n    uint bit_check_val = (uint)((ulonglong)DAT_0800262c * (ulonglong)character_index >> 0x23);\n    int bit_check_result = check_if_bit_set_at_index_08002400(bit_check_val, stat_mask, character_index, (int)((ulonglong)DAT_0800262c * (ulonglong)character_index));\n    if (bit_check_result == 0) {\n      PTR_DAT_08002630[0x44] = (char)bit_check_val;\n      initialize_clock_and_data_0800242c();\n    }\n    PTR_DAT_08002628[character_index * 8] = PTR_DAT_08002628[character_index * 8] | 0x40;\n  }\n  return *character_stats;\n}",
            "called": [
                "FUN_0800242c",
                "FUN_08008990",
                "FUN_08002400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025ac",
            "calling": [
                "FUN_08000500",
                "FUN_08002634"
            ],
            "imported": false,
            "current_name": "update_character_stats_080025ac"
        },
        "FUN_08002634": {
            "renaming": {
                "FUN_08002634": "update_character_stats_with_params_08002634",
                "param_1": "strength",
                "param_2": "dexterity",
                "param_3": "max_health",
                "param_4": "max_mana",
                "update_character_stats_080025ac": "update_character_stats"
            },
            "code": "void update_character_stats_with_params_08002634(int strength, int dexterity, int max_health, int max_mana, int level) {\n  update_character_stats(strength, dexterity, max_health, max_mana, level);\n  return;\n}",
            "called": [
                "FUN_080025ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002634",
            "calling": [
                "FUN_08000500"
            ],
            "imported": false,
            "current_name": "update_character_stats_with_params_08002634"
        },
        "FUN_08002f0a": {
            "renaming": {
                "FUN_08002f0a": "send_encoded_data_08002f0a",
                "param_1": "data_to_encode",
                "encode_and_send_data_0800325a": "encode_and_send_data"
            },
            "code": "void send_encoded_data_08002f0a(int data_to_encode) {\n  int encoded_data = data_to_encode + 0x40;\n  encode_and_send_data(encoded_data);\n  return;\n}",
            "called": [
                "FUN_0800325a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f0a",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "send_encoded_data_08002f0a"
        },
        "FUN_08005bb8": {
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "value1",
                "abStack_20": "array1",
                "uStack_1c": "var1",
                "uStack_18": "var2",
                "uStack_14": "var3"
            },
            "code": "uint calculate_value_08005bb8(int input)\n{\n  uint result;\n  undefined2 value1;\n  byte array1[4];\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  \n  var3 = *(undefined4 *)(PTR_DAT_08005ca0 + 8);\n  var2 = *(undefined4 *)(PTR_DAT_08005ca0 + 4);\n  var1 = *(undefined4 *)PTR_DAT_08005ca0;\n  value1 = *(undefined2 *)(PTR_DAT_08005ca0 + 0x10);\n  if (input == 2) {\n    result = get_first_value_and_shift_08005a48();\n    result = result / ((((DAT_08005ca4[1] << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((*DAT_08005ca4 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      result = DAT_08005cb0;\n      if ((DAT_08005ca4[1] & 0x10000) != 0) {\n        result = DAT_08005ca8 / *(byte *)((int)&value1 - ((int)(DAT_08005ca4[1] << 0xe) >> 0x1f));\n      }\n      result = result * array1[(DAT_08005ca4[1] << 10) >> 0x1c];\n      if ((DAT_08005ca4[1] & 0x400000) == 0) {\n        result = (uint)((ulonglong)DAT_08005cac * (ulonglong)(result * 2) >> 0x21);\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((DAT_08005ca4[8] & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else {\n      result = DAT_08005ca4[8] & 0x300;\n      if ((result == 0x200) && ((DAT_08005ca4[9] & 2) != 0)) {\n        result = 32000;\n      }\n      else if (result == 0x300) {\n        if ((*DAT_08005ca4 & 0x20000) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0xf424;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}",
            "called": [
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bb8",
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "imported": false,
            "current_name": "calculate_value_08005bb8"
        },
        "FUN_08007648": {
            "renaming": {
                "FUN_08007648": "initialize_clock_and_data_08007648",
                "param_1": "clock_and_data",
                "param_2": "clock_source",
                "param_3": "data_request",
                "param_4": "data_update",
                "uVar2": "clock_cycles",
                "iVar3": "data_check",
                "puVar4": "data_ptr",
                "local_34": "data_zero",
                "local_30": "data_one",
                "local_2c": "data_two",
                "local_28": "data_three",
                "local_24": "data_four",
                "local_20": "data_five",
                "cVar1": "value"
            },
            "code": "void initialize_clock_and_data_08007648(undefined4 *clock_and_data, undefined4 clock_source, undefined4 data_request, undefined4 data_update){\n  char value;\n  uint clock_cycles;\n  int data_check;\n  undefined4 *data_ptr;\n  undefined4 data_zero;\n  undefined4 data_one;\n  undefined4 data_two;\n  undefined4 data_three;\n  undefined4 data_four;\n  undefined4 data_five;\n  \n  data_zero = 0;\n  data_one = 0;\n  data_two = 0;\n  data_three = 0;\n  data_four = 0;\n  data_five = 0;\n  data_ptr = clock_and_data + 1;\n  *clock_and_data = 0x40000000;\n  clock_and_data[1] = 0x40000000;\n  clock_and_data[4] = clock_source;\n  clock_cycles = process_clock_source();\n  clock_and_data[2] = (uint)((ulonglong)PTR_DAT_080076dc * (ulonglong)clock_cycles >> 0x32) - 1;\n  clock_and_data[5] = 0;\n  clock_and_data[3] = 0;\n  clock_and_data[6] = 0;\n  clock_and_data[0x13] = data_update;\n  data_zero = 0;\n  data_two = 0;\n  data_four = 0;\n  data_three = 0;\n  data_five = 0;\n  data_one = data_request;\n  value = determine_value(*clock_and_data);\n  set_bits_in_register((int)value, 0xe, 0);\n  value = determine_value(*clock_and_data);\n  set_bit_in_array((int)value);\n  data_check = check_and_update_data(data_ptr);\n  if ((data_check == 0) && (data_check = handle_data_request(data_ptr, &data_zero, 0), data_check == 0)) {\n    update_flags_and_bits(data_ptr, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08006128",
                "FUN_08006280",
                "FUN_08007544",
                "FUN_08003f30",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08006060"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007648",
            "calling": [
                "FUN_0800242c"
            ],
            "imported": false,
            "current_name": "initialize_clock_and_data_08007648"
        },
        "FUN_08008858": {
            "renaming": {
                "FUN_08008858": "return_zero_08008858"
            },
            "code": "int return_zero_08008858(void)\n{\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008858",
            "calling": [
                "FUN_0800a168"
            ],
            "imported": false,
            "current_name": "return_zero_08008858"
        },
        "FUN_08004a20": {
            "renaming": {
                "FUN_08004a20": "do_nothing_08004a20"
            },
            "code": "\nvoid do_nothing_08004a20(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a20",
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a20"
        },
        "FUN_080063c0": {
            "renaming": {
                "FUN_080063c0": "update_bits_in_array_080063c0",
                "param_1": "bit_array",
                "param_2": "bit_value",
                "puVar1": "array_ptr"
            },
            "code": "uint32_t update_bits_in_array_080063c0(uint32_t **bit_array, uint32_t bit_value, uint32_t bit_index) {\n  uint32_t *array_ptr = *bit_array;\n  update_bit_in_uint_array_08006262(array_ptr, bit_index, bit_value);\n  if (((array_ptr == DAT_0800641c) && ((array_ptr[8] & 0x1111) == 0)) && ((array_ptr[8] & 0x444) == 0)) {\n    array_ptr[17] &= 0xffff7fff;\n  }\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    *array_ptr &= 0xfffffffe;\n  }\n  *(uint8_t *)((int)bit_array + 0x3d) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08006262"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080063c0",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_bits_in_array_080063c0"
        },
        "FUN_08004a24": {
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "pbVar2": "data_ptr",
                "cVar1": "closing_parenthesis"
            },
            "code": "int process_data_08004a24(int *data){\n  char closing_parenthesis;\n  byte *data_ptr;\n  \n  closing_parenthesis = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    data_ptr = (byte *)data[9];\n    data[9] = (int)(data_ptr + 1);\n    *(uint *)(*data + 0x10) = (uint)*data_ptr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (closing_parenthesis == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      do_nothing_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}",
            "called": [
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a24",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_data_08004a24"
        },
        "FUN_08004a22": {
            "renaming": {
                "FUN_08004a22": "do_nothing_08004a22"
            },
            "code": "\nvoid do_nothing_08004a22(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a22",
            "calling": [
                "FUN_08004aec",
                "FUN_08004a24"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a22"
        },
        "FUN_08002fba": {
            "renaming": {
                "FUN_08002fba": "get_value_at_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int get_value_at_offset_08002fba(int base_address, int offset) {\n    int* value_ptr = (int*)(base_address + (offset + 0x42) * 4);\n    return *value_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fba",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08002fba"
        },
        "FUN_080090cc": {
            "renaming": {
                "FUN_080090cc": "process_and_execute_data_080090cc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "arg4",
                "uVar1": "var1",
                "puVar2": "str1",
                "uVar3": "var2",
                "uVar4": "var3"
            },
            "code": "void process_and_execute_data_080090cc(undefined4 arg1, undefined4 arg2, undefined* data, undefined4 arg4)\n{\n  undefined4 var1;\n  undefined* str1;\n  undefined8 var2;\n  undefined4 var3;\n\n  var1 = *(undefined4 *)(*(int *)global_var_ptr + 0xc);\n  str1 = global_string_ptr;\n  var3 = arg4;\n  if (data == NULL) {\n    return;\n  }\n  do {\n    process_data(var1, str1, arg4, arg1, arg2, global_string_ptr, data, var3);\n    var2 = execute_command();\n    arg2 = (undefined4)((ulonglong)var2 >> 0x20);\n    var1 = (undefined4)var2;\n  } while (true);\n}",
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090cc",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "process_and_execute_data_080090cc"
        },
        "FUN_080049e0": {
            "renaming": {
                "FUN_080049e0": "set_bit_and_update_values_080049e0",
                "param_1": "input_array",
                "puVar1": "ptr",
                "*(char *)((int)param_1 + 0x3d)": "first_char",
                "*(undefined *)((int)param_1 + 0x3d)": "opening_parenthesis",
                "*puVar1": "ptr_value",
                "**param_1": "array_value",
                "(*param_1)[1]": "second_array_value"
            },
            "code": "int set_bit_and_update_values_080049e0(uint **input_array) {\n  char first_char = *((char *)(input_array) + 0x3d);\n  if (first_char != ' ') {\n    return 2;\n  }\n  *((char *)(input_array) + 0x3d) = '(';\n  uint *ptr = *input_array;\n  if ((*ptr & 1) == 0) {\n    *ptr = *ptr | 1;\n  }\n  **input_array = **input_array | 0x400;\n  (*input_array)[1] = (*input_array)[1] | 0x300;\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080049e0",
            "calling": [
                "FUN_08007ff0",
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e"
            ],
            "imported": false,
            "current_name": "set_bit_and_update_values_080049e0"
        },
        "FUN_08006d24": {
            "renaming": {
                "FUN_08006d24": "set_bit_08006d24",
                "param_1": "bit_field",
                "DAT_08006d7c": "base_ptr",
                "DAT_08006d74": "bit_field_value_1",
                "DAT_08006d78": "bit_field_value_2",
                "iVar1": "temp_ptr",
                "mask": "bit_mask"
            },
            "code": "void set_bit_08006d24(uint32_t *bit_field, uint32_t bit_position) {\n  uint32_t *DAT_08006d7c = PTR_DAT_08006d7c;\n  uint32_t mask = 1 << bit_position;\n  if (*bit_field != PTR_DAT_08006d74) {\n    if (*bit_field == PTR_DAT_08006d78) {\n      DAT_08006d7c[3] |= 0x400;\n      DAT_08006d7c[3] &= ~0x400;\n      DAT_08006d7c[6] &= ~0x400;\n      DAT_08006d7c[6] &= ~0x400;\n    }\n    return;\n  }\n  DAT_08006d7c[3] |= 0x200;\n  DAT_08006d7c[3] &= ~0x200;\n  DAT_08006d7c[6] &= ~0x200;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d24",
            "calling": [
                "FUN_08003ce8"
            ],
            "imported": false,
            "current_name": "set_bit_08006d24"
        },
        "FUN_080098d8": {
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "iVar1": "var1",
                "uVar2": "var2",
                "uStack_c": "stack_var1",
                "uStack_8": "stack_var2",
                "uStack_4": "stack_var3",
                "PTR_PTR_DAT_08009904": "PTR_PTR_DAT_08009904"
            },
            "code": "void process_data_080098d8(undefined4 data_1, undefined4 data_2, undefined4 data_3, undefined4 data_4)\n{\n  int var1;\n  undefined4 var2;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  \n  var1 = *(int *)PTR_PTR_DAT_08009904;\n  var2 = data_1;\n  stack_var1 = data_2;\n  stack_var2 = data_3;\n  stack_var3 = data_4;\n  if ((var1 != 0) && (*(int *)(var1 + 0x18) == 0)) {\n    close_file(var1);\n  }\n  process_input(var1, *(undefined4 *)(var1 + 8), data_1, &stack_var1, var2, &stack_var3);\n  return;\n}",
            "called": [
                "FUN_0800937c",
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d8",
            "calling": [
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08007594",
                "FUN_08008078",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "process_data_080098d8",
            "code_backup": "\nvoid FUN_080098d8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  iVar1 = *(int *)PTR_PTR_DAT_08009904;\n  uVar2 = param_1;\n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  if ((iVar1 != 0) && (*(int *)(iVar1 + 0x18) == 0)) {\n    FUNC_08009d50(iVar1);\n  }\n  FUNC_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),param_1,&uStack_c,uVar2,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_08009270": {
            "renaming": {
                "FUN_08009270": "allocate_memory_block_08009270",
                "param_1": "out",
                "param_2": "size",
                "puVar1": "next_ptr",
                "uVar2": "next_index",
                "puVar3": "curr_ptr",
                "iVar4": "block_size",
                "puVar5": "prev_ptr",
                "uVar6": "diff",
                "puVar7": "prev_ptr",
                "uVar8": "aligned_size"
            },
            "code": "uint allocate_memory_block_08009270(undefined4 *out, uint size)\n{\n  uint aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out = 0xc;\n  }\n  else {\n    do_nothing_08009f48();\n    uint *prev_ptr = *(uint **)PTR_DAT_08009324;\n    uint *curr_ptr = prev_ptr;\n    while (curr_ptr != (uint *)0x0) {\n      uint diff = *curr_ptr - aligned_size;\n      if (-1 < (int)diff) {\n        if (diff < 0xc) {\n          if (prev_ptr == curr_ptr) {\n            uint next_ptr = prev_ptr[1];\n            *(uint *)PTR_DAT_08009324 = next_ptr;\n          }\n          else {\n            uint next_ptr = curr_ptr[1];\n          \n            prev_ptr[1] = next_ptr;\n            prev_ptr = curr_ptr;\n          }\n        }\n        else {\n          *curr_ptr = diff;\n          *(uint *)((int)curr_ptr + diff) = aligned_size;\n          prev_ptr = (uint *)((int)curr_ptr + diff);\n        }\n        goto LAB_080092d4;\n      }\n      prev_ptr = curr_ptr;\n      curr_ptr = (uint *)curr_ptr[1];\n    }\n    if (*(int *)PTR_DAT_08009328 == 0) {\n      uint next_index = get_next_available_index_08009918(out);\n      *(undefined4 *)PTR_DAT_08009328 = next_index;\n    }\n    curr_ptr = (uint *)get_next_available_index_08009918(out, aligned_size);\n    if ((curr_ptr != (uint *)0xffffffff) && ((prev_ptr = (uint *)((int)curr_ptr + 3U & 0xfffffffc), curr_ptr == prev_ptr || (get_next_available_index_08009918(out, (int)prev_ptr - (int)curr_ptr) != -1)))) {\n      *prev_ptr = aligned_size;\nLAB_080092d4:\n      do_nothing_08009f4a(out);\n      uint block_end = (int)prev_ptr + 0xbU & 0xfffffff8;\n      int block_size = block_end - (int)(prev_ptr + 1);\n      if (block_size != 0) {\n        *(int *)((int)prev_ptr + block_size) = -block_size;\n        return block_end;\n      }\n      return block_end;\n    }\n    *out = 0xc;\n    do_nothing_08009f4a(out);\n  }\n  return 0;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a",
                "FUN_08009918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009270",
            "calling": [
                "FUN_08009d24",
                "FUN_08009190",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_08009270"
        },
        "FUN_08005e6c": {
            "renaming": {
                "FUN_08005e6c": "do_nothing_08005e6c"
            },
            "code": "\nvoid do_nothing_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6c"
        },
        "FUN_08008500": {
            "renaming": {
                "FUN_08008500": "validate_user_input_08008500",
                "param_1": "user_input",
                "param_2": "input_length",
                "cVar1": "second_char",
                "iVar2": "ptr_dat_value",
                "iVar3": "found_value",
                "uVar4": "index"
            },
            "code": "uint validate_user_input_08008500(undefined4 user_input, uint input_length)\n{\n  int ptr_dat_value = get_ptr_dat_value();\n  char second_char = PTR_DAT_080085a8[1];\n  int found_value = find_value((int)second_char, PTR_DAT_080085ac);\n  if (found_value == 0) {\n    return 0;\n  }\n  uint index = 0;\n  while ((index < 5 &&\n         ((*(int *)(PTR_DAT_080085b0 + index * 4) == 0 ||\n          (found_value = find_value((int)second_char,PTR_DAT_080085ac),\n          **(int **)(PTR_DAT_080085b0 + index * 4) != found_value))))) {\n    index = index + 1 & 0xff;\n  }\n  if (4 < index) {\n    if ((4 < (byte)PTR_DAT_080085b4[0x44]) && (process_value(), 4 < (byte)PTR_DAT_080085b4[0x44])) {\n      return 0;\n    }\n    index = (uint)(byte)PTR_DAT_080085b4[0x44];\n  }\n  do {\n    found_value = validate_user_input_08008500_080067ac(*(undefined4 *)(PTR_DAT_080085b0 + index * 4), user_input, input_length & 0xffff, 1000);\n    if (found_value == 0) {\n      return input_length;\n    }\n    found_value = get_ptr_dat_value();\n  } while ((uint)(found_value - ptr_dat_value) < 1000);\n  return 0;\n}",
            "called": [
                "FUN_080067ac",
                "FUN_080084b0",
                "FUN_08007320",
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008500",
            "calling": [
                "FUN_0800885c"
            ],
            "imported": false,
            "current_name": "validate_user_input_08008500"
        },
        "FUN_080048c8": {
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_data_len",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "input_ptr_content"
            },
            "code": "int validate_input_080048c8(uint **input_ptr, uint *input_data, int input_data_len, uint *output_data) {\n  int result;\n  uint *input_ptr_content;\n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (input_data_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      input_ptr_content = *input_ptr;\n      if ((*input_ptr_content & 1) == 0) {\n        *input_ptr_content |= 1;\n      }\n      **input_ptr &= 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_data_len;\n      input_ptr[0xb] = output_data;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] |= 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080048c8",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_080048c8"
        },
        "FUN_08009954": {
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "current_char",
                "iVar2": "remaining_length",
                "pcVar3": "destination_ptr"
            },
            "code": "void copy_string_08009954(char *destination, char *source, int length)\n{\n    char current_char;\n    int remaining_length;\n    char *destination_ptr;\n    \n    do {\n        destination_ptr = destination;\n        remaining_length = length;\n        if (remaining_length == 0) {\n            return;\n        }\n        current_char = *source;\n        destination = destination_ptr + 1;\n        *destination_ptr = current_char;\n        source = source + 1;\n        length = remaining_length - 1;\n    } while (current_char != '\\0');\n    for (; destination != destination_ptr + remaining_length; destination = destination + 1) {\n        *destination = '\\0';\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009954",
            "calling": [
                "FUN_08002e44"
            ],
            "imported": false,
            "current_name": "copy_string_08009954"
        },
        "FUN_08005aa4": {
            "renaming": {
                "FUN_08005aa4": "update_device_settings_08005aa4",
                "param_1": "settings",
                "puVar1": "pointer1",
                "iVar2": "variable1",
                "iVar3": "variable2",
                "uVar4": "variable3",
                "bVar5": "flag1",
                "DAT_08005bac": "data1",
                "DAT_08005bb0": "data2",
                "DAT_08005bb4": "data3",
                "get_ptr_dat_value_08003760": "get_elapsed_time",
                "undefined4": "int",
                "bool": "bool",
                "uint": "unsigned int"
            },
            "code": "int update_device_settings_08005aa4(uint *settings)\n{\n  int time_start;\n  int time_current;\n  uint current_settings;\n  bool bit_flag;\n  \n  if ((settings[0] & 1) != 0) {\n    bit_flag = (*(uint *)(DAT_08005bac + 0x1c) & 0x10000000) == 0;\n    if (bit_flag) {\n      *(uint *)(DAT_08005bac + 0x1c) |= 0x10000000;\n    }\n    if ((*DAT_08005bb0 & 0x100) == 0) {\n      *DAT_08005bb0 |= 0x100;\n      time_start = get_elapsed_time();\n      while ((*DAT_08005bb0 & 0x100) == 0) {\n        time_current = get_elapsed_time();\n        if (100 < (uint)(time_current - time_start)) {\n          return 3;\n        }\n      }\n    }\n    current_settings = *(uint *)(DAT_08005bac + 0x20) & 0x300;\n    if ((current_settings != 0) && (current_settings != (settings[1] & 0x300))) {\n      current_settings = *(uint *)(DAT_08005bac + 0x20);\n      *DAT_08005bb4 = 1;\n      *DAT_08005bb8 = 0;\n      *(uint *)(DAT_08005bac + 0x20) = current_settings & 0xfffffcff;\n      if ((current_settings & 1) != 0) {\n        time_start = get_elapsed_time();\n        while ((*(uint *)(DAT_08005bac + 0x20) & 2) == 0) {\n          time_current = get_elapsed_time();\n          if (5000 < (uint)(time_current - time_start)) {\n            return 3;\n          }\n        }\n      }\n    }\n    *(uint *)(DAT_08005bac + 0x20) = *(uint *)(DAT_08005bac + 0x20) & 0xfffffcff | settings[1];\n    if (bit_flag) {\n      *(uint *)(DAT_08005bac + 0x1c) &= 0xefffffff;\n    }\n  }\n  if ((settings[0] & 2) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffff3fff | settings[2];\n  }\n  if ((settings[0] & 0x10) != 0) {\n    *(uint *)(DAT_08005bac + 4) = *(uint *)(DAT_08005bac + 4) & 0xffbfffff | settings[3];\n  }\n  return 0;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005aa4",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "update_device_settings_08005aa4"
        },
        "FUN_08005e6e": {
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "param_1": "flag_ptr",
                "iVar1": "current_flag_value"
            },
            "code": "void process_flags_08005e6e(int *flag_ptr)\n{\n  int current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 2) != 0) && ((*(uint *)(current_flag_value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xfffffffd;\n    *(undefined *)(flag_ptr + 7) = 1;\n    if ((*(uint *)(*flag_ptr + 0x18) & 3) == 0) {\n      execute_callback_if_flag_set_0800771c();\n      do_nothing_08005e6a(flag_ptr);\n    }\n    else {\n      do_nothing_08005e68();\n    }\n    *(undefined *)(flag_ptr + 7) = 0;\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 4) != 0) && ((*(uint *)(current_flag_value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xfffffffb;\n    *(undefined *)(flag_ptr + 7) = 2;\n    if ((*(uint *)(*flag_ptr + 0x18) & 0x300) == 0) {\n      execute_callback_if_flag_set_0800771c(flag_ptr);\n      do_nothing_08005e6a(flag_ptr);\n    }\n    else {\n      do_nothing_08005e68(flag_ptr);\n    }\n    *(undefined *)(flag_ptr + 7) = 0;\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 8) != 0) && ((*(uint *)(current_flag_value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xfffffff7;\n    *(undefined *)(flag_ptr + 7) = 4;\n    if ((*(uint *)(*flag_ptr + 0x1c) & 3) == 0) {\n      execute_callback_if_flag_set_0800771c(flag_ptr);\n      do_nothing_08005e6a(flag_ptr);\n    }\n    else {\n      do_nothing_08005e68(flag_ptr);\n    }\n    *(undefined *)(flag_ptr + 7) = 0;\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 0x10) != 0) && ((*(uint *)(current_flag_value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xffffffef;\n    *(undefined *)(flag_ptr + 7) = 8;\n    if ((*(uint *)(*flag_ptr + 0x1c) & 0x300) == 0) {\n      execute_callback_if_flag_set_0800771c(flag_ptr);\n      do_nothing_08005e6a(flag_ptr);\n    }\n    else {\n      do_nothing_08005e68(flag_ptr);\n    }\n    *(undefined *)(flag_ptr + 7) = 0;\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 1) != 0) && ((*(uint *)(current_flag_value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xfffffffe;\n    execute_subtracted_value_08007736(flag_ptr);\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 0x80) != 0) && ((*(uint *)(current_flag_value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xffffff7f;\n    do_nothing_080064ae(flag_ptr);\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 0x40) != 0) && ((*(uint *)(current_flag_value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xffffffbf;\n    do_nothing_08005e6c(flag_ptr);\n  }\n  current_flag_value = *flag_ptr;\n  if (((*(uint *)(current_flag_value + 0x10) & 0x20) != 0) && ((*(uint *)(current_flag_value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_flag_value + 0x10) = 0xffffffdf;\n    do_nothing_080064ac(flag_ptr);\n  }\n  return;\n}\n",
            "called": [
                "FUN_08005e6c",
                "FUN_080064ac",
                "FUN_0800771c",
                "FUN_080064ae",
                "FUN_08007736",
                "FUN_08005e6a",
                "FUN_08005e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6e",
            "calling": [],
            "imported": false,
            "current_name": "process_flags_08005e6e"
        },
        "FUN_08004024": {
            "renaming": {
                "FUN_08004024": "set_flag_if_param_is_four_08004024",
                "param_1": "param",
                "*DAT_08004040": "*flag_ptr"
            },
            "code": "void set_flag_if_param_is_four_08004024(int param) {\n  if (param == 4) {\n    *DAT_08004040 = *DAT_08004040 | 4;\n  }\n  else {\n    *DAT_08004040 = *DAT_08004040 & 0xfffffffb;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004024",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "set_flag_if_param_is_four_08004024"
        },
        "FUN_08005e6a": {
            "renaming": {
                "FUN_08005e6a": "do_nothing_08005e6a"
            },
            "code": "\nvoid do_nothing_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e6a",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e6a"
        },
        "FUN_08002400": {
            "renaming": {
                "FUN_08002400": "check_if_bit_set_at_index_08002400",
                "param_1": "index",
                "uVar1": "i",
                "PTR_DAT_08002428": "data_array",
                "0xb": "MAX_INDEX",
                "0xc": "ELEMENT_SIZE",
                "0x40": "BIT_MASK"
            },
            "code": "int check_if_bit_set_at_index_08002400(int index) {\n    int bit_set = 0;\n    for (int i = 0; i <= 11; i++) {\n        if ((PTR_DAT_08002428[(index * 0xc + i) * 8] & 0x40) != 0) {\n            bit_set = 1;\n            break;\n        }\n    }\n    return bit_set;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002400",
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "imported": false,
            "current_name": "check_if_bit_set_at_index_08002400"
        },
        "FUN_08004a1e": {
            "renaming": {
                "FUN_08004a1e": "do_nothing_08004a1e"
            },
            "code": "\nvoid do_nothing_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a1e",
            "calling": [
                "FUN_08004b82",
                "FUN_08004ccc"
            ],
            "imported": false,
            "current_name": "do_nothing_08004a1e"
        },
        "FUN_08000588": {
            "renaming": {
                "FUN_08000588": "process_data_08000588",
                "param_1": "data_index",
                "cVar1": "current_char",
                "cVar2": "previous_char",
                "puVar3": "data",
                "PTR_DAT_080005cc": "lookup_table",
                "process_byte_08002644": "process_byte",
                "PTR_DAT_080005d0": "data_offset",
                "PTR_DAT_080005d4": "last_char",
                "PTR_DAT_080005d8": "next_available_index",
                "PTR_DAT_080005dc": "data_buffer"
            },
            "code": "void process_data_08000588(int data_index) {\n  char current_char = data[data_index];\n  process_byte(PTR_DAT_080005cc[current_char]);\n  char previous_char = *PTR_DAT_080005d4;\n  if ((current_char == previous_char) && (previous_char != '\\0')) {\n    *PTR_DAT_080005d4 = previous_char - 1;\n  }\n  else if (previous_char != '\\0') {\n    char next_index = *PTR_DAT_080005d8;\n    *PTR_DAT_080005d8 = next_index + 1U;\n    PTR_DAT_080005dc[next_index] = current_char;\n  }\n  data[data_index] = 0xff;\n  return;\n}",
            "called": [
                "FUN_08002644"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000588",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "process_data_08000588"
        },
        "FUN_08002644": {
            "renaming": {
                "FUN_08002644": "process_byte_08002644",
                "*param_1": "input",
                "param_2": "input_length",
                "param_3": "param_2",
                "param_4": "param_3",
                "bVar1": "processed_byte",
                "uVar2": "first_byte",
                "iVar3": "is_bit_set"
            },
            "code": "void process_byte_08002644(byte *input, uint input_length, uint param_2, uint param_3)\n{\n  uint first_byte = (uint)*input;\n  byte processed_byte = PTR_DAT_08002670[first_byte * 8];\n  PTR_DAT_08002670[first_byte * 8] = processed_byte & 0xbf;\n  int is_bit_set = check_if_bit_set_at_index_08002400((uint)((ulonglong)DAT_08002674 * (ulonglong)first_byte >> 0x23), param_2, processed_byte & 0xbf, (int)((ulonglong)DAT_08002674 * (ulonglong)first_byte), param_3);\n  if (is_bit_set == 0) {\n    update_bits_in_memory_08002578(PTR_DAT_08002678);\n  }\n  return;\n}",
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002644",
            "calling": [
                "FUN_08000588"
            ],
            "imported": false,
            "current_name": "process_byte_08002644"
        },
        "FUN_08008868": {
            "renaming": {
                "FUN_08008868": "wait_forever_08008868"
            },
            "code": "void wait_forever_08008868(void)\n{\n    while(true)\n    {\n        // Do nothing\n    }\n}",
            "called": [
                "FUN_08008868"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008868",
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "imported": false,
            "current_name": "wait_forever_08008868"
        },
        "FUN_080036ac": {
            "renaming": {
                "FUN_080036ac": "find_character_index_080036ac",
                "param_1": "character",
                "uVar1": "index",
                "PTR_DAT_080036d0": "char_array"
            },
            "code": "uint find_character_index_080036ac(int character) {\n  uint index;\n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)PTR_DAT_080036d0[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036ac",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "find_character_index_080036ac"
        },
        "FUN_08002f1e": {
            "renaming": {
                "FUN_08002f1e": "execute_function_at_address_in_pointer_08002f1e",
                "param_1": "pointer_address"
            },
            "code": "void execute_function_at_address_in_pointer_08002f1e(int pointer_address){\n  (**(code **)**(undefined4 **)(pointer_address + 0xc0))();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f1e",
            "calling": [
                "FUN_08001cd0"
            ],
            "imported": false,
            "current_name": "execute_function_at_address_in_pointer_08002f1e"
        },
        "FUN_0800885c": {
            "renaming": {
                "FUN_0800885c": "validate_user_input_wrapper_0800885c",
                "param_1": "N/A",
                "param_2": "user_input_1",
                "param_3": "user_input_2",
                "param_4": "user_input_3",
                "PTR_": "N/A",
                "DAT_": "N/A"
            },
            "code": "void validate_user_input_wrapper_0800885c(undefined4 user_input_1, undefined4 user_input_2, undefined4 user_input_3, undefined4 user_input_4)\n{\n    validate_user_input_08008500(user_input_1, user_input_2, user_input_3, user_input_4, user_input_4);\n    return;\n}",
            "called": [
                "FUN_08008500"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800885c",
            "calling": [
                "FUN_0800a042"
            ],
            "imported": false,
            "current_name": "validate_user_input_wrapper_0800885c"
        },
        "FUN_0800643c": {
            "renaming": {
                "FUN_0800643c": "set_flag_and_update_value_at_index_0800643c",
                "param_1": "data",
                "param_2": "index",
                "update_value_at_index_08006420": "update_value_at_index",
                "DAT_080482dc": "0x8000",
                "**param_1": "**data",
                "PTR_DAT_080482d0": "17"
            },
            "code": "uint32_t set_flag_and_update_value_at_index_0800643c(uint32_t **data, uint32_t index, uint32_t value) {\n    update_value_at_index(*data, index, value);\n    (*data)[PTR_DAT_080482d0] |= DAT_080482dc;\n    **data |= 0x1;\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800643c",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "set_flag_and_update_value_at_index_0800643c"
        },
        "FUN_08002fca": {
            "renaming": {
                "FUN_08002fca": "decode_and_do_nothing_08002fca",
                "param_1": "data",
                "param_2": "key",
                "param_3": "length",
                "param_4": "param_4",
                "param_5": "param_5",
                "uVar1": "i",
                "decode_value_08008a24": "decode_value",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void decode_and_do_nothing_08002fca(uint8_t* data, uint8_t* key, int length, uint8_t* param_4, uint8_t* param_5)\n{\n  uint8_t i;\n  for (i = 0; i < length; i++) {\n    do_nothing(param_5);\n    uint8_t value = decode_value(key, 1);\n    do_nothing(param_4);\n    decode_value(key, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fca",
            "calling": [
                "FUN_08003002"
            ],
            "imported": false,
            "current_name": "decode_and_do_nothing_08002fca"
        },
        "FUN_08009c7c": {
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "result",
                "iVar2": "data_size",
                "piVar3": "param_ptr",
                "uVar4": "flag_value",
                "uVar5": "flag_value",
                "iVar6": "func_param7",
                "unaff_r4": "func_param3",
                "unaff_r5": "func_param4",
                "pcVar7": "func_param5",
                "iVar8": "func_param2",
                "uVar9": "func_result",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00",
                "bVar10": "flag"
            },
            "code": "uint32_t process_data_08009c7c(uint32_t *data, int *params){\n    uint32_t result;\n    int *param_ptr;\n    uint32_t param_value;\n    uint32_t flag_value;\n    uint32_t func_result;\n    uint32_t data_size;\n    uint32_t func_param1;\n    uint32_t func_param2;\n    uint32_t func_param3;\n    uint32_t func_param4;\n    uint32_t func_param5;\n    uint32_t func_param6;\n    uint32_t func_param7;\n    uint32_t func_param8;\n    uint32_t func_param9;\n    uint32_t func_param10;\n    uint32_t func_param11;\n    uint32_t func_param12;\n    uint32_t func_param13;\n    uint32_t func_param14;\n    uint32_t func_param15;\n    uint32_t func_param16;\n    uint32_t func_param17;\n    uint32_t func_param18;\n    uint32_t func_param19;\n    uint32_t func_param20;\n    bool flag;\n    if (params[4] != 0){\n        if ((data != NULL) && (data[6] == 0)){\n            init_data();\n        }\n        if (params == (int *)PTR_DAT_08009cc4){\n            param_ptr = (int *)data[1];\n        }\n        else if (params == (int *)PTR_DAT_08009cc8){\n            param_ptr = (int *)data[2];\n        }\n        else if (params == (int *)PTR_DAT_08009ccc){\n            param_ptr = (int *)data[3];\n        }\n        if (*(uint16_t *)(param_ptr + 3) != 0){\n            flag_value = *(uint16_t *)(param_ptr + 3);\n            data_size = (uint32_t)flag_value;\n            if ((int)(data_size << 0x1c) < 0){\n                func_param1 = params[4];\n                if (func_param1 != 0){\n                    func_param7 = data_size << 0x1e;\n                    flag = func_param7 == 0;\n                    if (flag){\n                        func_param7 = 0;\n                    }\n                    func_param2 = *param_ptr;\n                    if (!flag){\n                        func_param7 = param_ptr[5];\n                    }\n                    *param_ptr = func_param1;\n                    param_ptr[2] = func_param7;\n                    for (func_param2 = func_param2 - func_param1; func_param2 > 0; func_param2 = func_param2 - func_param7){\n                        func_result = (*(code *)param_ptr[10])(data, param_ptr[8], func_param1, func_param2, func_param3, func_param4);\n                        if (func_result < 1){\n                            flag_value = *(uint16_t *)(param_ptr + 3);\n                            goto LAB_08009c62;\n                        }\n                        func_param1 = func_param1 + func_result;\n                    }\n                }\n            }\n            else{\n                if (((params[1] > 0) || (params[0x10] > 0)) && ((func_param5 = (uint32_t)param_ptr[0xb]) != 0)){\n                    func_param6 = *data;\n                    *data = 0;\n                    if ((flag_value & 0x1000) == 0){\n                        func_result = (*(code *)func_param5)(data, param_ptr[8], flag_value & 0x1000, 1);\n                        if ((func_result == -1) && ((param_value = *data) != 0)){\n                            if ((param_value != 0x1d) && (param_value != 0x16)){\n                                flag_value = *(uint16_t *)(param_ptr + 3);\n                                flag_value = flag_value | 0x40;\n                                goto UNRECOVERED_JUMPTABLE_00;\n                            }\n                            *data = func_param6;\n                            goto LAB_08009b86;\n                        }\n                    }\n                    else{\n                        func_result = params[0x15];\n                    }\n                    if (((int)((uint)flag_value << 0x1d) < 0) && ((func_param5 = func_param5 - params[1]), param_ptr[0xd] != 0)){\n                        func_param5 = func_param5 - params[0x10];\n                    }\n                    func_result = (*(code *)param_ptr[0xb])(data, param_ptr[8], func_param5, 0);\n                    flag_value = *(uint16_t *)(param_ptr + 3);\n                    if ((func_result == -1) && ((param_value = *data) > 0x1d || (-1 < (int)((DAT_08009c78 >> (param_value & 0xff)) << 0x1f)))){\n                        goto LAB_08009c62;\n                    }\n                    param_ptr[1] = 0;\n                    *param_ptr = params[4];\n                    if (((int)((uint)flag_value << 0x13) < 0) && ((func_result != -1) || (*data == 0))){\n                        param_ptr[0x15] = func_result;\n                    }\n                    func_param4 = (uint32_t)param_ptr[0xd];\n                    *data = func_param6;\n                    if (func_param4 != 0){\n                        if (func_param4 != param_ptr + 0x11){\n                            insert_into_linked_list(data);\n                        }\n                        param_ptr[0xd] = 0;\n                        flag_value = (*(code *)param_ptr[0x12])();\n                        goto UNRECOVERED_JUMPTABLE_00;\n                    }\n                }\n            }\n        }\n    }\n    result = 0;\n    return result;\n    UNRECOVERED_JUMPTABLE_00:\n    result = (*(code *)UNRECOVERED_JUMPTABLE_00)(flag_value);\n    return result;\n    LAB_08009b86:\n    result = (*(code *)params[0x14])(0);\n    return result;\n    LAB_08009c62:\n    flag_value = flag_value | 0x40;\n    result = (*(code *)UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n    return result;\n}",
            "called": [
                "FUN_08009d50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009c7c",
            "calling": [
                "FUN_0800932c"
            ],
            "imported": false,
            "current_name": "process_data_08009c7c",
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == (int *)PTR_DAT_08009cc4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009cc8) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)PTR_DAT_08009ccc) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((DAT_08009c78 >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            insert_into_linked_list_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009b5c": {
            "renaming": {
                "FUN_08009b5c": "execute_command_08009b5c",
                "puVar1": "command_data_ptr",
                "iVar2": "command_data_len",
                "piVar3": "command_info_ptr",
                "piVar4": "command_info_ptr_2",
                "uVar5": "command_flags",
                "uVar6": "command_type",
                "iVar7": "command_offset",
                "pcVar8": "command_handler",
                "iVar9": "command_handler_retval",
                "uVar10": "command_handler_flags",
                "UNRECOVERED_JUMPTABLE_00": "jumptable",
                "bVar11": "should_call_jumptable",
                "uVar12": "wait_forever_retval"
            },
            "code": "void execute_command_08009b5c() {\n  uint *command_data_ptr;\n  int command_data_len;\n  int *command_info_ptr;\n  int *command_info_ptr_2;\n  uint command_flags;\n  ushort command_type;\n  int command_offset;\n  code *command_handler;\n  int command_handler_retval;\n  uint command_handler_flags;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool should_call_jumptable;\n  undefined8 wait_forever_retval;\n  \n  execute_function_08009fe8(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x8009b6b;\n  wait_forever_retval = wait_forever_08008868(1);\n  command_info_ptr = (int *)((ulonglong)wait_forever_retval >> 0x20);\n  command_data_ptr = (uint *)wait_forever_retval;\n  command_type = *(ushort *)(command_info_ptr + 3);\n  command_flags = (uint)command_type;\n  if ((int)(command_flags << 0x1c) < 0) {\n    command_data_len = command_info_ptr[4];\n    if (command_data_len != 0) {\n      command_offset = command_flags << 0x1e;\n      should_call_jumptable = command_offset == 0;\n      if (should_call_jumptable) {\n        command_offset = 0;\n      }\n      command_handler_flags = *command_info_ptr;\n      if (!should_call_jumptable) {\n        command_offset = command_info_ptr[5];\n      }\n      *command_info_ptr = command_data_len;\n      command_info_ptr[2] = command_offset;\n      for (command_handler_retval = command_handler_flags - command_data_len; command_handler_retval > 0; command_handler_retval -= command_offset) {\n        command_offset = (*(code *)command_info_ptr[10])(command_data_ptr, command_info_ptr[8], command_data_len, command_handler_retval);\n        if (command_offset < 1) {\n          command_type = *(ushort *)(command_info_ptr + 3);\n          goto LAB_08009c62;\n        }\n        command_data_len += command_offset;\n      }\n    }\n  }\n  else if (((0 < command_info_ptr[1]) || (0 < command_info_ptr[0x10])) &&\n          (command_handler = (code *)command_info_ptr[0xb], command_handler != (code *)0x0)) {\n    command_handler_flags = *command_data_ptr;\n    *command_data_ptr = 0;\n    if ((command_type & 0x1000) == 0) {\n      command_handler_retval = (*command_handler)(command_data_ptr, command_info_ptr[8], command_flags & 0x1000, 1);\n      if ((command_handler_retval == -1) && (*command_data_ptr != 0)) {\n        if ((*command_data_ptr != 0x1d) && (*command_data_ptr != 0x16)) {\n          *(ushort *)(command_info_ptr + 3) = *(ushort *)(command_info_ptr + 3) | 0x40;\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *command_data_ptr = command_handler_flags;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      command_handler_retval = command_info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(command_info_ptr + 3) << 0x1d) < 0) &&\n       (command_handler_retval = command_handler_retval - command_info_ptr[1], command_info_ptr[0xd] != 0)) {\n      command_handler_retval = command_handler_retval - command_info_ptr[0x10];\n    }\n    command_handler_retval = (*(code *)command_info_ptr[0xb])(command_data_ptr, command_info_ptr[8], command_handler_retval, 0);\n    command_type = *(ushort *)(command_info_ptr + 3);\n    if ((command_handler_retval == -1) &&\n       ((0x1d < *command_data_ptr || (-1 < (int)((DAT_08009c78 >> (*command_data_ptr & 0xff)) << 0x1f)))) {\n      goto LAB_08009c62;\n    }\n    command_info_ptr[1] = 0;\n    *command_info_ptr = command_info_ptr[4];\n    if (((int)((uint)command_type << 0x13) < 0) && ((command_handler_retval != -1 || (*command_data_ptr == 0)))) {\n      command_info_ptr[0x15] = command_handler_retval;\n    }\n    command_info_ptr_2 = (int *)command_info_ptr[0xd];\n    *command_data_ptr = command_handler_flags;\n    if (command_info_ptr_2 != (int *)0x0) {\n      if (command_info_ptr_2 != command_info_ptr + 0x11) {\n        insert_into_linked_list_080091d8(command_data_ptr);\n      }\n      command_info_ptr[0xd] = 0;\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_08009b86:\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}",
            "called": [
                "FUN_080091d8",
                "FUN_08008868",
                "FUN_08009fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b5c",
            "calling": [
                "FUN_0800a18c",
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "execute_command_08009b5c"
        },
        "FUN_0800021a": {
            "renaming": {
                "FUN_0800021a": "decode_and_set_character_0800021a",
                "param_1": "character_index",
                "param_2": "value",
                "param_3": "data_array",
                "param_4": "character_array",
                "bVar1": "is_character_present",
                "iVar2": "character_index",
                "PTR_DAT_080002d8": "PTR_DATA_ARRAY",
                "PTR_DAT_080002dc": "PTR_CHARACTER_ARRAY",
                "PTR_DAT_080002e4": "PTR_POSITION_ARRAY",
                "PTR_DAT_080002e8": "PTR_POSITION_ARRAY_2",
                "get_data_at_offset_08002fa0": "get_data_at_offset",
                "find_character_index_080036ac": "find_character_index",
                "is_character_present_at_index_0800738a": "is_character_present_at_index",
                "decode_character_080088e0": "decode_character",
                "set_value_at_index_08002fc2": "set_value_at_index",
                "calculate_and_store_position_080026b0": "calculate_and_store_position"
            },
            "code": "void decode_and_set_character_0800021a(uint character_index, uint value, uint* data_array, uint* character_array, uint* position_array) {\n  uint data_value = get_data_at_offset(PTR_DAT_080002d8, character_index, value, value, value);\n  if (data_value == 3) {\n    if (character_index < 60) {\n      int character = character_array[character_index];\n      if (character == -1) {\n        character = 0;\n      }\n      else {\n        int character_index = find_character_index(character);\n        if (character_index == 0) {\n          character = 0;\n        }\n        else {\n          character_index = find_character_index(character_array[character_index]);\n          if (character_index == 1) {\n            character = 0;\n          }\n          else {\n            character = is_character_present_at_index(character_array[character_index], position_array);\n          }\n        }\n      }\n      if (character != 0) {\n        decode_character(character_index, value);\n      }\n      set_value_at_index(PTR_DAT_080002d8, character_index, value);\n    }\n  }\n  else if (data_value == 4) {\n    if (character_index < 60) {\n      int character = character_array[character_index];\n      if (character == -1) {\n        return;\n      }\n      else {\n        int character_index = find_character_index(character);\n        if (character_index == 0) {\n          return;\n        }\n        else {\n          character_index = find_character_index(character_array[character_index]);\n          if (character_index == 1) {\n            return;\n          }\n          else {\n            calculate_and_store_position(position_array + (byte)PTR_DAT_080002dc[character_index] * 3, value);\n          }\n        }\n      }\n      set_value_at_index(PTR_DAT_080002d8, character_index, value);\n      return;\n    }\n  }\n}",
            "called": [
                "FUN_080088e0",
                "FUN_08002fc2",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_080026b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800021a",
            "calling": [
                "FUN_08000214"
            ],
            "imported": false,
            "current_name": "decode_and_set_character_0800021a"
        },
        "FUN_08008a6c": {
            "renaming": {
                "FUN_08008a6c": "check_bit_in_dat_08008a6c",
                "param_1": "index",
                "cVar1": "result",
                "iVar2": "bit",
                "uVar3": "dat_value",
                "uVar4": "value"
            },
            "code": "char check_bit_in_dat_08008a6c(uint index)\n{\n    char result = 0;\n    uint value = (index < 0x3c) ? (uint)(char)PTR_DAT_08008ab4[index] : 0xffffffff;\n    if (value != 0xffffffff)\n    {\n        int bit = get_bit_08006b28(value, PTR_DAT_08008ab8);\n        if (bit != 0)\n        {\n            uint dat_value = get_dat_value_08006b7c((value << 0x18) >> 0x1c);\n            result = check_bit_in_pointer_offset_080072f0(dat_value, 1 << (value & 0xf) & 0xffff);\n        }\n    }\n    return (result != 0) ? 1 : 0;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a6c",
            "calling": [
                "FUN_08000ef8"
            ],
            "imported": false,
            "current_name": "check_bit_in_dat_08008a6c"
        },
        "FUN_080026f8": {
            "renaming": {
                "FUN_080026f8": "get_byte_value_times_eight_080026f8",
                "*param_1": "byte_array",
                "PTR_DAT_08002708": "PTR_DAT_08002708",
                "*": "byte_value",
                "uint": "uint",
                "byte": "byte",
                ">> 0x1f": ">> 0x1f",
                "<< 0x19": "<< 0x19",
                "result": "result",
                "shifted_value": "shifted_value",
                "ptr_value": "ptr_value"
            },
            "code": "uint get_byte_value_times_eight_080026f8(byte *byte_array) {\n    uint byte_value = (uint)*byte_array;\n    uint ptr_value = (uint)PTR_DAT_08002708[byte_value * 8];\n    uint shifted_value = ptr_value << 0x19;\n    uint result = shifted_value >> 0x1f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026f8",
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_byte_value_times_eight_080026f8"
        },
        "FUN_080085b8": {
            "renaming": {
                "FUN_080085b8": "is_valid_input_080085b8",
                "param_1": "input_index",
                "uVar1": "combined_bytes",
                "PTR_DAT_080085d8": "ptr_dat_values",
                "byte": "input_byte"
            },
            "code": "bool is_valid_input_080085b8(int input_index) {\n  uint16_t combined_bytes = combine_bytes(get_ptr_dat_value(input_index));\n  return (combined_bytes & 0x22) == 0x22;\n}",
            "called": [
                "FUN_08006b1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080085b8",
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "imported": false,
            "current_name": "is_valid_input_080085b8"
        },
        "FUN_08001c08": {
            "renaming": {
                "FUN_08001c08": "get_next_byte_from_ptr_dat_08001c08",
                "uVar1": "next_byte"
            },
            "code": "unsigned char get_next_byte_from_ptr_dat_08001c08(void)\n{\n  unsigned char next_byte = get_next_byte_08002720(PTR_DAT_08001c14);\n  return next_byte;\n}",
            "called": [
                "FUN_08002720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c08",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "get_next_byte_from_ptr_dat_08001c08"
        },
        "FUN_080075dc": {
            "renaming": {
                "FUN_080075dc": "process_clock_source_080075dc",
                "param_1": "clock_source_id",
                "local_20": "val5",
                "local_1c": "zero",
                "local_18": "val4",
                "local_14": "val3",
                "local_10": "extracted_val",
                "local_c": "val2",
                "extract_info_08005a68": "extract_info",
                "check_param_08007594": "check_param",
                "get_first_value_divided_by_shifted_value_08005a28": "get_first_value_divided_by_shifted_value",
                "get_first_value_and_shift_08005a48": "get_first_value_and_shift",
                "process_data_080098d8": "process_data",
                "PTR_s_TIM__Unknown_clock_source_08007644": "PTR_s_TIM__Unknown_clock_source"
            },
            "code": "int process_clock_source_080075dc(uint clock_source_id)\n{\n  uint first_val;\n  int result;\n  uint extracted_val;\n  undefined4 zero = 0;\n  uint val1 = 0;\n  uint val2 = 0;\n  undefined4 val3 = 0;\n  undefined4 val4 = 0;\n  undefined4 val5 = 0;\n  extract_info(&val1,&val3);\n  result = check_param(clock_source_id);\n  first_val = val2;\n  extracted_val = val1;\n  if (result == 1) {\n    first_val = get_first_value_divided_by_shifted_value();\n  }\n  else if (result == 2) {\n    first_val = get_first_value_and_shift();\n    extracted_val = val2;\n  }\n  else {\n    process_data(PTR_s_TIM__Unknown_clock_source_08007644_08007644);\n    result = 0;\n    extracted_val = 0;\n  }\n  if (extracted_val != 0x500) {\n    if (extracted_val < 0x501) {\n      if (extracted_val != 0x400) {\n        return result;\n      }\n    }\n    else if ((extracted_val != 0x600) && (extracted_val != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}",
            "called": [
                "FUN_080098d8",
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080075dc",
            "calling": [
                "FUN_08007118",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "process_clock_source_080075dc"
        },
        "FUN_08007544": {
            "renaming": {
                "FUN_08007544": "determine_value_08007544",
                "param_1": "input",
                "DAT_08007588": "known_value_1",
                "DAT_0800758c": "known_value_2",
                "PTR_s_TIM__Unknown_timer_IRQn_08007590": "timer_interrupt_handler"
            },
            "code": "uint8_t determine_value_08007544(uint32_t input) {\n  if (input == 0xffffffff) {\n    return 0;\n  }\n  if (input == DAT_08007588) {\n    return 0x1d;\n  }\n  if (DAT_08007588 < input) {\n    if (input == DAT_0800758c) {\n      return 0x1e;\n    }\n    if (input == DAT_0800758c + 0x12400) {\n      return 0x19;\n    }\n  }\n  else if (input == 0x40000000) {\n    return 0x1c;\n  }\n  process_data(PTR_s_TIM__Unknown_timer_IRQn_08007590);\n  return 0;\n}",
            "called": [
                "FUN_080098d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007544",
            "calling": [
                "FUN_080076e0",
                "FUN_08007648"
            ],
            "imported": false,
            "current_name": "determine_value_08007544"
        },
        "FUN_08007ff0": {
            "renaming": {
                "FUN_08007ff0": "execute_function_if_conditions_met_08007ff0",
                "param_1": "param",
                "iVar1": "subtracted_value",
                "subtract_four_from_param_08007f78": "subtract_four_from_param",
                "*(code **)(iVar1 + 0x60)": "function_pointer",
                "*(char *)(iVar1 + 0x5c)": "character_value",
                "*(char *)(iVar1 + 0x2c)": "another_character_value",
                "set_bit_and_update_values_080049e0": "set_bit_and_update_values"
            },
            "code": "void execute_function_if_conditions_met_08007ff0(int param) {\n  int subtracted_value = subtract_four_from_param();\n  if (((*(code **)(subtracted_value + 0x60) != (code *)0x0) && (*(char *)(subtracted_value + 0x5c) == '\\x01')) &&\n     (*(char *)(subtracted_value + 0x2c) != ' ')) {\n    (**(code **)(subtracted_value + 0x60))(subtracted_value + 0x68);\n  }\n  set_bit_and_update_values(param);\n  return;\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ff0",
            "calling": [
                "FUN_08004aec",
                "FUN_08004f3c",
                "FUN_08005084"
            ],
            "imported": false,
            "current_name": "execute_function_if_conditions_met_08007ff0"
        },
        "FUN_08008990": {
            "renaming": {
                "FUN_08008990": "update_character_stats_08008990",
                "param_1": "character_index",
                "param_2": "flag_value",
                "param_3": "flag_position",
                "param_4": "character_data_array",
                "iVar1": "is_bit_set",
                "puVar2": "character_data_ptr",
                "iVar3": "character_id",
                "is_character_present": "is_character_present",
                "is_bit_set": "is_bit_set",
                "get_bit_08006b28": "get_bit_value",
                "is_character_present_at_index_0800738a": "is_character_present_at_index",
                "update_character_stats_080071e4": "update_character_stats_080071e4",
                "set_bit_to_zero_08006b5c": "set_bit_to_zero",
                "set_flag_and_decode_08007258": "set_flag_and_decode",
                "set_bit_at_position_08006b3e": "set_bit_at_position",
                "PTR_DAT_08008a14": "PTR_DAT_08008a14",
                "PTR_DAT_08008a18": "PTR_DAT_08008a18",
                "PTR_DAT_08008a1c": "PTR_DAT_08008a1c",
                "PTR_DAT_08008a20": "PTR_DAT_08008a20"
            },
            "code": "void update_character_stats_08008990(uint character_index, uint flag_value, uint flag_position, uint8_t *character_data_array) {\n    int character_id;\n    uint8_t *character_data_ptr;\n    int bit_index;\n    int is_character_present;\n    int is_bit_set;\n    \n    if (character_index < 0x3c) {\n        character_id = (int)(char)PTR_DAT_08008a14[character_index];\n        character_data_ptr = PTR_DAT_08008a14;\n    }\n    else {\n        character_id = -1;\n        character_data_ptr = character_data_array;\n    }\n    \n    if (character_id != -1) {\n        is_bit_set = get_bit_value(character_id, PTR_DAT_08008a18, flag_position, character_data_ptr, character_data_array);\n        if (is_bit_set) {\n            is_character_present = is_character_present_at_index(character_id, PTR_DAT_08008a1c);\n            if (is_character_present) {\n                update_character_stats_08008990_080071e4(character_id);\n            }\n            set_bit_to_zero(character_id, PTR_DAT_08008a18);\n        }\n        switch(flag_value) {\n            case 0:\n                set_flag_and_decode(character_id, 0);\n                break;\n            case 1:\n                set_flag_and_decode(character_id, 1, 0);\n                break;\n            case 2:\n                set_flag_and_decode(character_id, 0, 1);\n                break;\n            case 3:\n                set_flag_and_decode(character_id, 0, 2);\n        }\n        set_bit_at_position(character_id, PTR_DAT_08008a20);\n    }\n}\n",
            "called": [
                "FUN_08006b3e",
                "FUN_08007258",
                "FUN_08006b28",
                "FUN_0800738a",
                "FUN_080071e4",
                "FUN_08006b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008990",
            "calling": [
                "FUN_080088e0",
                "FUN_08003002",
                "FUN_080025ac",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "update_character_stats_08008990"
        },
        "FUN_08008078": {
            "renaming": {
                "FUN_08008078": "FUNC_08008078"
            },
            "code": "\nvoid FUNC_08008078(int *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  int iVar4;\n  undefined4 uVar5;\n  uint uVar6;\n  uint local_20;\n  uint local_1c;\n  uint local_18;\n  undefined4 local_14;\n  \n  if (param_1 != (int *)0x0) {\n    iVar2 = find_value_08007320((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n    iVar3 = find_value_08007320((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n    if ((iVar3 == 0) || (iVar2 == 0)) {\n      process_data_080098d8(PTR_s_ERROR__at_least_one_UART_pin_has_08008348,iVar3);\n    }\n    else {\n      iVar4 = compare_and_return_080073ae(iVar2);\n      *param_1 = iVar4;\n      iVar1 = DAT_08008340;\n      iVar3 = DAT_0800833c;\n      iVar2 = DAT_08008338;\n      if (iVar4 == 0) {\n        process_data_080098d8(PTR_s_ERROR__U_S_ART_pins_mismatch_0800834c);\n      }\n      else {\n        if (iVar4 == DAT_08008338) {\n          *(uint *)(DAT_08008338 + 0xd80c) = *(uint *)(DAT_08008338 + 0xd80c) | 0x4000;\n          *(uint *)(iVar2 + 0xd80c) = *(uint *)(iVar2 + 0xd80c) & 0xffffbfff;\n          *(uint *)(iVar2 + 0xd818) = *(uint *)(iVar2 + 0xd818) | 0x4000;\n          *(undefined *)(param_1 + 0x11) = 0;\n          *(undefined *)((int)param_1 + 0x5a) = 0x25;\n        }\n        else if (iVar4 == DAT_0800833c) {\n          *(uint *)(DAT_0800833c + 0x1cc10) = *(uint *)(DAT_0800833c + 0x1cc10) | 0x20000;\n          *(uint *)(iVar3 + 0x1cc10) = *(uint *)(iVar3 + 0x1cc10) & 0xfffdffff;\n          *(uint *)(iVar3 + 0x1cc1c) = *(uint *)(iVar3 + 0x1cc1c) | 0x20000;\n          *(undefined *)(param_1 + 0x11) = 1;\n          *(undefined *)((int)param_1 + 0x5a) = 0x26;\n        }\n        else if (iVar4 == DAT_08008340) {\n          *(uint *)(DAT_08008340 + 0x1c810) = *(uint *)(DAT_08008340 + 0x1c810) | 0x40000;\n          *(uint *)(iVar1 + 0x1c810) = *(uint *)(iVar1 + 0x1c810) & 0xfffbffff;\n          *(uint *)(iVar1 + 0x1c81c) = *(uint *)(iVar1 + 0x1c81c) | 0x40000;\n          *(undefined *)(param_1 + 0x11) = 2;\n          *(undefined *)((int)param_1 + 0x5a) = 0x27;\n        }\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)((int)param_1 + 0x59) << 0x18) >> 0x1c);\n        uVar6 = find_character_or_return_minus_one_08007376((int)*(char *)((int)param_1 + 0x59),PTR_DAT_08008334);\n        local_20 = 1 << (*(byte *)((int)param_1 + 0x59) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        *(uint *)(DAT_08008344 + 0x18) = *(uint *)(DAT_08008344 + 0x18) | 1;\n        switch((uVar6 << 0x11) >> 0x19) {\n        case 1:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000001;\n          break;\n        case 2:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000002;\n          break;\n        case 4:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000004;\n          break;\n        case 6:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000008;\n          break;\n        case 8:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          *(uint *)(DAT_08008350 + 4) = *(uint *)(DAT_08008350 + 4) | 0x7000030;\n          break;\n        case 10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x70000c0;\n          break;\n        case 0xd:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000300;\n          break;\n        case 0x10:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7000c00;\n          break;\n        case 0x14:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7001000;\n          break;\n        case 0x17:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) | 0x7008000;\n          break;\n        case 0x1c:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff;\n          break;\n        case 0x22:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          *(uint *)(DAT_080084ac + 4) = *(uint *)(DAT_080084ac + 4) & 0xf8ffffff | 0x4000000;\n        }\n        local_14 = 3;\n        decode_080040e8(uVar5,&local_20);\n        uVar5 = set_flag_08006bb8((uint)((int)*(char *)(param_1 + 0x16) << 0x18) >> 0x1c);\n        uVar6 = find_character_or_return_minus_one_08007376((int)*(char *)(param_1 + 0x16),PTR_DAT_08008330);\n        local_20 = 1 << (*(byte *)(param_1 + 0x16) & 0xf) & 0xffff;\n        local_1c = (uVar6 >> 3 & 1) << 4 | uVar6 & 7;\n        local_18 = (uVar6 << 0x1a) >> 0x1e;\n        decode_080040e8(uVar5,&local_20);\n        *(int **)(PTR_DAT_08008354 + (uint)*(byte *)(param_1 + 0x11) * 4) = param_1 + 1;\n        param_1[1] = *param_1;\n        param_1[2] = param_1[0x12];\n        param_1[3] = param_1[0x13];\n        param_1[4] = param_1[0x14];\n        param_1[5] = param_1[0x15];\n        param_1[6] = 0xc;\n        param_1[7] = 0;\n        param_1[8] = 0;\n        initialize_device_0800674e(param_1 + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080098d8",
                "FUN_080040e8",
                "FUN_08007320",
                "FUN_08006bb8",
                "FUN_080073ae",
                "FUN_0800674e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08008078",
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "FUNC_08008078"
        },
        "FUN_08004396": {
            "renaming": {
                "FUN_08004396": "set_param_value_08004396",
                "param_1": "param_list",
                "*(uint *)(*param_1 + 0x10)": "*(uint *)(param_list[16] + 0x10)",
                "param_1[0x11]": "param_list[17]"
            },
            "code": "void set_param_value_08004396(int *param_list)\n{\n    uint8_t value = param_list[17] & 0xff;\n    *(uint *)(param_list[16] + 0x10) = value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004396",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "set_param_value_08004396"
        },
        "FUN_08003fb0": {
            "renaming": {
                "FUN_08003fb0": "set_bit_in_array_08003fb0",
                "param_1": "bit_index",
                "DAT_08003fd4": "array_base_ptr"
            },
            "code": "void set_bit_in_array_08003fb0(uint bit_index)\n{\n    if (bit_index >= 0)\n    {\n        uint array_index = (bit_index >> 5) + 0x20;\n        uint* array_ptr = (uint*)(DAT_08003fd4 + array_index * 4);\n        uint bit_mask = 1 << (bit_index & 0x1f);\n        *array_ptr = bit_mask;\n        DataSynchronizationBarrier(0xf);\n        InstructionSynchronizationBarrier(0xf);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fb0",
            "calling": [
                "FUN_080076e0"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_08003fb0"
        },
        "FUN_080052f0": {
            "renaming": {
                "FUN_080052f0": "execute_conditions_080052f0",
                "param_1": "params",
                "puVar2": "param_values",
                "uVar3": "condition_1",
                "uVar4": "condition_2",
                "DAT_080053c8": "MASK_1",
                "execute_conditions_and_update_08004aec": "execute_conditions_and_update",
                "*(char *)((int)params + 0x3d)": "condition_3_char",
                "*(char *)((int)params + 0x3e)": "condition_3_char_2",
                "*(short *)((int)params + 0x2a)": "condition_3_short",
                "params[0xc]": "condition_3_param",
                "DAT_080053cc": "MASK_2",
                "DAT_080053d0": "MASK_3",
                "DAT_080053d4": "MASK_4",
                "execute_08004f3c": "execute"
            },
            "code": "void execute_conditions_080052f0(uint **params) {\n  uint *param_values = *params;\n  uint condition_1 = param_values[5];\n  uint condition_2 = param_values[1];\n\n  if (((condition_1 & DAT_080053c8) != 0) && ((condition_2 & 0x100) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 1);\n    param_values[5] = CONDITION_1_MASK;\n    **params = **params | 0x8000;\n  }\n  if (((condition_1 & DAT_080053cc) != 0) && ((condition_2 & 0x100) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 2);\n    (*params)[5] = CONDITION_2_MASK;\n  }\n  if (((condition_1 & DAT_080053d0) != 0) && ((condition_2 & 0x100) != 0)) {\n    char condition_3_char = *(char *)((int)params + 0x3d);\n    if (((*(char *)((int)params + 0x3e) == ' ') && (*(short *)((int)params + 0x2a) == 0)) && (((condition_3_char == '!' || (condition_3_char == ')')) || ((condition_3_char == '(' && (params[12] == (uint *)0x21)))))) {\n      execute_conditions_080052f0_and_update(params);\n    }\n    else {\n      params[16] = (uint *)((uint)params[16] | 4);\n      if (*(char *)((int)params + 0x3e) == '\\x10') {\n        **params = **params | 0x200;\n      }\n      (*params)[5] = CONDITION_3_MASK;\n    }\n  }\n  if (((condition_1 & DAT_080053d4) != 0) && ((condition_2 & 0x100) != 0)) {\n    params[16] = (uint *)((uint)params[16] | 8);\n    (*params)[5] = CONDITION_4_MASK;\n  }\n  if (params[16] != (uint *)0x0) {\n    execute(params);\n  }\n}",
            "called": [
                "FUN_08004aec",
                "FUN_08004f3c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052f0",
            "calling": [],
            "imported": false,
            "current_name": "execute_conditions_080052f0"
        },
        "FUN_08008f0c": {
            "renaming": {
                "FUN_08008f0c": "do_nothing_08008f0c"
            },
            "code": "\nvoid do_nothing_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0c",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "do_nothing_08008f0c"
        },
        "FUN_08002ec4": {
            "renaming": {
                "FUN_08002ec4": "call_function_pointer_08002ec4",
                "param_1": "param_1",
                "**(int **)(param_1 + 0xc0) + 8": "function_to_call",
                "**(code **)(**(int **)(param_1 + 0xc0) + 8))()": "function()"
            },
            "code": "void call_function_pointer_08002ec4(int param_1)\n{\n    int function_pointer = *(int *)(param_1 + 0xc0);\n    int function_to_call = *(int *)(function_pointer + 8);\n    void (*function)(void) = *(void (**)(void))(function_to_call);\n    function();\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec4",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "call_function_pointer_08002ec4"
        },
        "FUN_08007306": {
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value",
                "param_2": "array",
                "*param_2": "*array",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int find_value_in_array_08007306(int value, char* array){\n   while(*array != -1){\n      if(*array == value){\n         break;\n      }\n      array += 0xc;\n   }\n   return *(int*)(array + 4);\n}",
            "called": [
                "FUN_08007306"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007306",
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "imported": false,
            "current_name": "find_value_in_array_08007306"
        },
        "FUN_08008f0e": {
            "renaming": {
                "FUN_08008f0e": "initialize_and_configure_device_08008f0e",
                "update_register_08003f0c": "update_register",
                "initialize_device_and_register_settings_080036a2": "initialize_device_and_register_settings"
            },
            "code": "void initialize_and_configure_device_08008f0e(void)\n{\n  update_register(3);\n  initialize_device_and_register_settings();\n  return;\n}",
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f0e",
            "calling": [
                "FUN_08009148"
            ],
            "imported": false,
            "current_name": "initialize_and_configure_device_08008f0e"
        },
        "FUN_08002f2c": {
            "renaming": {
                "FUN_08002f2c": "update_value_08002f2c",
                "param_1": "value_type",
                "param_2": "value",
                "param_3": "N/A",
                "PTR_DAT_08002f70": "PTR_VALUE_0xc0",
                "PTR_DAT_08002f74": "PTR_VALUE_0x90",
                "PTR_DAT_08002f78": "PTR_VALUE_0xd0",
                "PTR_DAT_08002f7c": "PTR_VALUE_0xf4",
                "PTR_DAT_08002f80": "PTR_VALUE_0xf5",
                "undefined4": "N/A",
                "uint": "uint32_t",
                "*(undefined4 *)": "*(uint32_t *)"
            },
            "code": "void update_value_08002f2c(uint8_t value_type, uint32_t value) {\n    switch(value_type) {\n        case 0x90:\n            *(uint32_t *)PTR_DAT_08002f74 = value;\n            break;\n        case 0xc0:\n            *(uint32_t *)PTR_DAT_08002f70 = value;\n            break;\n        case 0xd0:\n            *(uint32_t *)PTR_DAT_08002f78 = value;\n            break;\n        case 0xe0:\n            *(uint32_t *)PTR_VALUE_0xe0 = value;\n            break;\n        case 0xf4:\n            *(uint32_t *)PTR_DAT_08002f7c = value;\n            break;\n        case 0xf5:\n            *(uint32_t *)PTR_DAT_08002f80 = value;\n            break;\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f2c",
            "calling": [
                "FUN_08001b48"
            ],
            "imported": false,
            "current_name": "update_value_08002f2c"
        },
        "FUN_08004954": {
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_ptr",
                "param_2": "input_data",
                "param_3": "input_len",
                "param_4": "output_ptr",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "code": "uint32_t validate_input_08004954(uint32_t **input_ptr, uint32_t *input_data, int input_len, uint32_t *output_ptr)\n{\n  uint32_t result = 0;\n  uint32_t *ptr;\n  \n  if (*(char *)((int)input_ptr + 0x3d) == '(') {\n    if (input_data == NULL) {\n      result = 1;\n    }\n    else if (input_len == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_ptr + 0xf) = 1;\n      ptr = *input_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input_ptr = **input_ptr & 0xfffff7ff;\n      *(undefined *)((int)input_ptr + 0x3d) = 0x2a;\n      *(undefined *)((int)input_ptr + 0x3e) = 0x20;\n      result = 0;\n      input_ptr[0x10] = NULL;\n      input_ptr[9] = input_data;\n      *(short *)((int)input_ptr + 0x2a) = (short)input_len;\n      input_ptr[0xb] = output_ptr;\n      *(undefined2 *)(input_ptr + 10) = *(undefined2 *)((int)input_ptr + 0x2a);\n      *(undefined *)(input_ptr + 0xf) = 0;\n      (*input_ptr)[1] = (*input_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004954",
            "calling": [
                "FUN_08007fa0"
            ],
            "imported": false,
            "current_name": "validate_input_08004954"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "set_configuration_08005cec",
                "param_1": "device_config",
                "param_2": "config_data",
                "uVar1": "device_config1",
                "uVar2": "device_config2",
                "uVar3": "config_data1",
                "bitmask1": "bitmask1",
                "bitmask2": "bitmask2",
                "bitmask3": "bitmask3",
                "bitmask4": "bitmask4",
                "DAT_08005d44": "DAT_08005d44"
            },
            "code": "void set_configuration_08005cec(int device_config, uint *config_data)\n{\n  uint bitmask1 = 0xfffffffe;\n  uint bitmask2 = 0xfffffffd;\n  uint bitmask3 = 0xfffffff7;\n  uint bitmask4 = 0xfffffffb;\n  uint device_config1 = *(uint *)(device_config + 0x20);\n  uint device_config2 = *(uint *)(device_config + 4);\n  uint config_data1 = *config_data;\n  uint config_data2 = config_data[1];\n  uint config_data3 = config_data[2];\n  uint config_data4 = config_data[3];\n  uint config_data5 = config_data[4];\n  uint config_data6 = config_data[5];\n  uint config_data7 = config_data[6];\n  \n  device_config1 = device_config1 & bitmask1;\n  device_config2 = (device_config == DAT_08005d44) ? (device_config2 & 0xfffffcff | config_data5 | config_data6) : device_config2;\n  device_config1 = device_config1 & bitmask2 | config_data3;\n  device_config1 = (device_config == DAT_08005d44) ? (device_config1 & bitmask4 | config_data4) : device_config1;\n  *(uint *)(device_config + 4) = device_config2;\n  *(uint *)(device_config + 0x18) = *(uint *)(device_config + 0x18) & 0xffffff8c | config_data1;\n  *(uint *)(device_config + 0x20) = device_config1;\n  *(uint *)(device_config + 0x34) = config_data2;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "set_configuration_08005cec"
        },
        "FUN_0800886c": {
            "renaming": {
                "FUN_0800886c": "set_value_to_22_0800886c",
                "PTR_DAT_08008878": "ptr_value"
            },
            "code": "void set_value_to_22_0800886c(void)\n{\n    int* PTR_DAT_08008878 = (int*)PTR_DAT_08008878;\n    *PTR_DAT_08008878 = 22;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800886c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "set_value_to_22_0800886c"
        },
        "FUN_08003748": {
            "renaming": {
                "FUN_08003748": "calculate_new_value_of_pointer_08003748",
                "PTR_DAT_08003758": "ptr_uint",
                "PTR_DAT_0800375c": "ptr_byte",
                "uint": "unsigned_integer",
                "byte": "unsigned_char",
                "int": "integer"
            },
            "code": "void calculate_new_value_of_pointer_08003748(void)\n{\n    uint* PTR_DAT_08003758 = (uint*)PTR_DAT_08003758;\n    byte* PTR_DAT_0800375c = (byte*)PTR_DAT_0800375c;\n    int* ptr_int = (int*)PTR_DAT_08003758;\n    *PTR_DAT_08003758 = (uint)(*PTR_DAT_0800375c) + (*ptr_int);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003748",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "calculate_new_value_of_pointer_08003748"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "decode_080040e8",
                "param_1": "bits",
                "param_2": "params",
                "puVar1": "bit_ptr",
                "uVar2": "mask",
                "uVar3": "bit",
                "uVar4": "value",
                "uVar5": "offset",
                "uVar6": "param",
                "uVar7": "i",
                "iVar8": "bit",
                "iVar10": "param",
                "uVar9": "param",
                "DAT_080042bc": "PTR_DAT_080042bc",
                "DAT_080042c0": "PTR_DAT_080042c0",
                "DAT_080042c4": "PTR_DAT_080042c4",
                "DAT_080042c8": "PTR_DAT_080042c8",
                "DAT_080042cc": "PTR_DAT_080042cc",
                "DAT_080042d0": "PTR_DAT_080042d0"
            },
            "code": "void decode_080040e8(uint *bits, uint *params)\n{\n    uint *bit_ptr;\n    uint mask;\n    uint bit;\n    uint value;\n    uint offset;\n    uint i;\n    uint param;\n    uint *output;\n\n    offset = 0;\n    for (i = 0; i <= 0xf; i++) {\n        if (i > 0xf) {\n            return;\n        }\n        mask = 1 << (i & 0xff);\n        bit = *params & mask;\n        if (mask == bit) {\n            value = params[1];\n            if (value == 0x12) {\n                output = params[3] + 0xc;\n            }\n            else if (value < 0x13) {\n                if (value == 2) {\n                    output = params[3] + 8;\n                }\n                else if (value < 3) {\n                    if (value == 0) {\n                        goto LAB_0800423a;\n                    }\n                    if (value == 1) {\n                        output = params[3];\n                    }\n                }\n                else if (value == 3) {\n                    output = 0;\n                }\n                else if (value == 0x11) {\n                    output = params[3] + 4;\n                }\n            }\n            else {\n                if (value != DAT_080042c8) {\n                    if (DAT_080042c8 < value) {\n                        if (value == DAT_080042cc) {\n                            goto LAB_0800423a;\n                        }\n                        param = DAT_080042cc + 0x10000;\n                        bit_ptr = DAT_080042cc;\n                    }\n                    else {\n                        param = DAT_080042c8 - 0x100000;\n                        bit_ptr = DAT_080042c8;\n                    }\n                    if ((value != param) && (value != bit_ptr - 0xf0000)) {\n                        goto LAB_080040fe;\n                    }\n                }\n                output = params[2] == 0 ? 4 : params[2] == 1 ? bits[4] = mask, 8 : bits[5] = mask, 8;\n            }\n        }\n        param = i;\n        output = bits;\n        if (0xff < bit) {\n            param = i - 8;\n            output = bits + 1;\n        }\n        *output = *output & ~(0xf << (param << 2 & 0xff)) | output << (param << 2 & 0xff);\n        if ((params[1] & 0x10000000) != 0) {\n            *(uint *)(DAT_080042bc + 0x18) = *(uint *)(DAT_080042bc + 0x18) | 1;\n            bit = (i & 3) << 2;\n            if (bits == DAT_080042d0) {\n                param = 0;\n            }\n            else if (bits == DAT_080042d0 + 0x100) {\n                param = 1;\n            }\n            else if (bits == DAT_080042d0 + 0x200) {\n                param = 2;\n            }\n            else if (bits == DAT_080042d0 + 0x300) {\n                param = 3;\n            }\n            else {\n                param = 4;\n            }\n            *(uint *)(DAT_080042c0 + ((i >> 2) + 2) * 4) = *(uint *)(DAT_080042c0 + ((i >> 2) + 2) * 4) & ~(0xf << bit) | param << bit;\n            if ((params[1] & 0x10000) == 0) {\n                *DAT_080042c4 = *DAT_080042c4 & ~mask;\n            }\n            else {\n                *DAT_080042c4 = *DAT_080042c4 | mask;\n            }\n            if ((params[1] & 0x20000) == 0) {\n                DAT_080042c4[1] = DAT_080042c4[1] & ~mask;\n            }\n            else {\n                DAT_080042c4[1] = DAT_080042c4[1] | mask;\n            }\n            if ((params[1] & 0x100000) == 0) {\n                DAT_080042c4[2] = DAT_080042c4[2] & ~mask;\n            }\n            else {\n                DAT_080042c4[2] = DAT_080042c4[2] | mask;\n            }\n            if ((params[1] & 0x200000) == 0) {\n                DAT_080042c4[3] = DAT_080042c4[3] & ~mask;\n            }\n            else {\n                DAT_080042c4[3] = mask | DAT_080042c4[3];\n            }\n        }\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "decode_080040e8"
        },
        "FUN_080036d4": {
            "renaming": {
                "FUN_080036d4": "do_nothing_080036d4"
            },
            "code": "\nvoid do_nothing_080036d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d4",
            "calling": [
                "FUN_08003724"
            ],
            "imported": false,
            "current_name": "do_nothing_080036d4"
        },
        "FUN_0800288c": {
            "renaming": {
                "FUN_0800288c": "insert_data_into_linked_list_0800288c",
                "param_1": "address",
                "param_2": "data",
                "puVar1": "list_ptr",
                "iVar2": "result",
                "uVar3": "return_value",
                "cVar4": "list_index",
                "uVar5": "unused",
                "uVar6": "list_length",
                "local_11": "local_data"
            },
            "code": "int insert_data_into_linked_list_0800288c(int address, char data) {\n    int* list_ptr = PTR_DAT_08002914;\n    char* data_ptr = PTR_DAT_08002918;\n    char* list_length_ptr = PTR_DAT_0800290c;\n    char* list_index_ptr = PTR_DAT_08002910;\n    char* is_list_empty_ptr = PTR_DAT_08002908;\n    char local_data = data;\n    if (*is_list_empty_ptr == '\\0') {\n        int copy_result = copy_data_to_address_08007ede(address + 0x14, &local_data, 1);\n        if (copy_result == 0) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    else {\n        uint8_t list_length = (uint8_t)*list_length_ptr + 1;\n        if (list_length < 0x20) {\n            list_length = 0x20;\n        }\n        int list_insert_result = allocate_and_insert_into_linked_list_08009908(*(int*)list_ptr, list_length);\n        *list_ptr = list_insert_result;\n        if (list_insert_result == 0) {\n            return 0;\n        }\n        else {\n            *data_ptr = local_data;\n            *(list_insert_result + (uint8_t)*data_ptr) = local_data;\n            char list_index = *list_index_ptr + 1;\n            *list_index_ptr = list_index;\n            *list_length_ptr = list_index;\n            return 1;\n        }\n    }\n}",
            "called": [
                "FUN_08007ede",
                "FUN_08009908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800288c",
            "calling": [
                "FUN_08001bf8"
            ],
            "imported": false,
            "current_name": "insert_data_into_linked_list_0800288c"
        },
        "FUN_0800010c": {
            "renaming": {
                "FUN_0800010c": "check_and_set_flag_if_unset_0800010c",
                "param_1": "input_string",
                "*PTR_DAT_08000124": "*flag_pointer",
                "DAT_08000128": "some_data",
                "PTR_FUN_0800012c": "function_pointer"
            },
            "code": "undefined *check_and_set_flag_if_unset_0800010c(undefined *input_string) {\\n  if (*PTR_DAT_08000124 == \"\\0\") {\\n    if (DAT_08000128 != 0) {\\n      input_string = PTR_FUN_0800012c;\\n    }\\n    *PTR_DAT_08000124 = 1;\\n  }\\n  return input_string;\\n}",
            "called": [
                "FUN_0800a424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800010c",
            "calling": [],
            "imported": false,
            "current_name": "check_and_set_flag_if_unset_0800010c"
        },
        "FUN_08002e26": {
            "renaming": {
                "FUN_08002e26": "set_data_and_execute_08002e26",
                "param_1": "data",
                "param_2": "param",
                "set_value_to_pointer_08003154": "set_pointer_value",
                "execute_with_params_08002ddc": "execute_with_params",
                "send_encoded_data_if_not_empty_08002df6": "send_encoded_data_if_not_empty"
            },
            "code": "void set_data_and_execute_08002e26(int data, undefined4 param)\n{\n  *(undefined4 *)(data + 0xc0) = param;\n  set_pointer_value(data + 0x40);\n  execute_with_params(data);\n  send_encoded_data_if_not_empty(data);\n  return;\n}",
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e26",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "set_data_and_execute_08002e26"
        },
        "FUN_080036d8": {
            "renaming": {
                "FUN_080036d8": "set_input_length_080036d8",
                "param_1": "input_length",
                "iVar1": "max_input_length",
                "validate_input_length_08003fd8": "validate_input_length",
                "0xf": "MAX_INPUT_LENGTH",
                "set_bits_in_register_08003f30": "set_bits_in_register",
                "PTR_DAT_0800371c": "ptr_dat_1",
                "PTR_DAT_08003718": "ptr_dat_2",
                "PTR_DAT_08003720": "ptr_dat_3"
            },
            "code": "int set_input_length_080036d8(int input_length) {\n    int max_input_length = *(unsigned int *)PTR_DAT_0800371c / (1000 / (unsigned char)*PTR_DAT_08003718);\n    if (input_length > max_input_length) {\n        return 1;\n    }\n    return 0;\n}\n\nint set_input_length_080036d8(uint input_length) {\n    if (input_length > 15) {\n        return 1;\n    }\n    set_bits_in_register(0xffffffff, input_length, 0);\n    *(unsigned int *)PTR_DAT_08003720 = input_length;\n    return 0;\n}",
            "called": [
                "FUN_08003fd8",
                "FUN_08003f30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036d8",
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "imported": false,
            "current_name": "set_input_length_080036d8"
        },
        "FUN_08006e68": {
            "renaming": {
                "FUN_08006e68": "FUNC_08006e68"
            },
            "code": "\nvoid FUNC_08006e68(undefined4 param_1)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint local_20;\n  undefined4 local_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  \n  puVar1 = PTR_DAT_08007100;\n  iVar2 = find_character_or_return_minus_one_08007376((int)(char)*PTR_DAT_08007100,PTR_DAT_08007104);\n  set_flags_08007438(param_1);\n  uVar3 = set_flag_08006bb8((uint)((int)(char)*puVar1 << 0x18) >> 0x1c);\n  local_1c = 2;\n  local_18 = 0;\n  local_14 = 3;\n  *(uint *)(DAT_08007108 + 0x18) = *(uint *)(DAT_08007108 + 0x18) | 1;\n  switch((uint)(iVar2 << 0x11) >> 0x19) {\n  case 1:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000001;\n    break;\n  case 2:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000002;\n    break;\n  case 4:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000004;\n    break;\n  case 6:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000008;\n    break;\n  case 8:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000030;\n    break;\n  case 10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x70000c0;\n    break;\n  case 0xd:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000300;\n    break;\n  case 0x10:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7000c00;\n    break;\n  case 0x14:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7001000;\n    break;\n  case 0x17:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) | 0x7008000;\n    break;\n  case 0x1c:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff;\n    break;\n  case 0x22:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    *(uint *)(DAT_0800710c + 4) = *(uint *)(DAT_0800710c + 4) & 0xf8ffffff | 0x4000000;\n  }\n  local_20 = 1 << ((byte)*PTR_DAT_08007100 & 0xf) & 0xffff;\n  decode_080040e8(uVar3,&local_20);\n  return;\n}\n\n",
            "called": [
                "FUN_08007376",
                "FUN_080040e8",
                "FUN_08006bb8",
                "FUN_08007438"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006e68",
            "calling": [
                "FUN_08006092"
            ],
            "imported": false,
            "current_name": "FUNC_08006e68"
        },
        "FUN_080086e8": {
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "search_value",
                "uVar1": "index"
            },
            "code": "uint find_index_080086e8(int search_value){\n  uint index;\n  if (search_value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (search_value == *(int *)(PTR_DAT_08008708 + index * 4)) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080086e8",
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "find_index_080086e8"
        },
        "FUN_0800a110": {
            "renaming": {
                "FUN_0800a110": "process_data_0800a110",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "data_ptr",
                "iVar2": "return_value"
            },
            "code": "void process_data_0800a110(int *output, undefined4 input) {\n  undefined *data_ptr;\n  int return_value;\n  data_ptr = PTR_DAT_0800a12c;\n  *(undefined4 *)PTR_DAT_0800a12c = 0;\n  return_value = get_return_value(input);\n  if ((return_value == -1) && (*(int *)data_ptr != 0)) {\n    *output = *(int *)data_ptr;\n  }\n  return;\n}",
            "called": [
                "FUN_08008850"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a110",
            "calling": [
                "FUN_08009eac"
            ],
            "imported": false,
            "current_name": "process_data_0800a110"
        },
        "FUN_08003b8c": {
            "renaming": {
                "FUN_08003b8c": "check_and_set_flag_08003b8c",
                "param_1": "data",
                "iVar1": "current_value",
                "iVar2": "current_ptr",
                "get_ptr_dat_value_08003760": "get_start_value_08003760"
            },
            "code": "int check_and_set_flag_08003b8c(int *data)\n{\n    int current_ptr = *data;\n    if ((*(uint *)(current_ptr + 8) & 1) == 0) {\n        return 0;\n    }\n    *(uint *)(current_ptr + 8) = *(uint *)(current_ptr + 8) & 0xfffffffe;\n    int start_value = get_start_value_08003760();\n    do {\n        if ((*(uint *)(*data + 8) & 1) == 0) {\n            return 0;\n        }\n        int current_value = get_start_value_08003760();\n    } while ((uint)(current_value - start_value) < 3);\n    data[10] = data[10] | 0x10;\n    data[0xb] = data[0xb] | 1;\n    return 1;\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b8c",
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08003b8c"
        },
        "FUN_080035b8": {
            "renaming": {
                "FUN_080035b8": "initialize_device_settings_080035b8",
                "local_54": "device_settings",
                "local_4c": "device_settings_1",
                "local_44": "bits_to_set",
                "local_40": "instruction",
                "local_3c": "instruction_param",
                "local_38": "instruction_param_1",
                "local_34": "instruction_param_2",
                "local_30": "device_settings_0",
                "local_20": "instruction_param_3",
                "local_1c": "instruction_param_4",
                "local_14": "instruction_param_5",
                "local_10": "instruction_param_6",
                "local_c": "instruction_param_7",
                "iVar1": "status",
                "uVar2": "first_value"
            },
            "code": "void initialize_device_settings_080035b8(void)\n{\n  int status;\n  uint32_t first_value;\n  uint32_t input_length;\n  uint32_t flag;\n  uint32_t bits_to_set;\n  uint32_t device_settings[2];\n  device_settings[0] = 2;\n  device_settings[1] = 0x8000;\n  input_length = get_first_value_from_pointer();\n  input_length = (uint32_t)((uint64_t)DAT_08003650 * (uint64_t)input_length >> 0x26);\n  validate_input_length(input_length);\n  flag = set_flag_if_param_is_four(4);\n  bits_to_set = 0xffffffff;\n  status = execute_instruction(&bits_to_set, 0x400, 0, 2, 0xf);\n  if (status != 0) {\n    infinite_loop(\"s__home_bo__arduino15_packages_STM_08003654\", 0x95);\n  }\n  status = update_device_settings(device_settings);\n  if (status != 0) {\n    infinite_loop(\"s__home_bo__arduino15_packages_STM_08003654\", 0x9c);\n  }\n  return;\n}",
            "called": [
                "FUN_08005460",
                "FUN_08003fd8",
                "FUN_08005a1c",
                "FUN_080058ac",
                "FUN_08004024",
                "FUN_08005aa4",
                "FUN_08003f30",
                "FUN_080073e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035b8",
            "calling": [
                "FUN_080072fa"
            ],
            "imported": false,
            "current_name": "initialize_device_settings_080035b8"
        },
        "FUN_08001c18": {
            "renaming": {
                "FUN_08001c18": "process_i2c_request_and_send_response_08001c18",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data_length",
                "param_4": "response_address",
                "puVar1": "data_address",
                "uVar2": "next_byte",
                "iVar3": "received_length",
                "iVar4": "expected_length",
                "bVar5": "buffer_not_empty"
            },
            "code": "void process_i2c_request_and_send_response_08001c18(uint8_t device_address, uint32_t register_address, int data_length, uint32_t response_address)\n{\n  uint8_t* data_address;\n  uint8_t next_byte;\n  int received_length;\n  int expected_length;\n\n  if (data_length == 0xffffffff) {\n    data_length = 0;\n  }\n  else {\n    initialize_i2c_data_buffer(PTR_DAT_08001cbc,device_address);\n    insert_byte_into_i2c_data_buffer(register_address & 0xff);\n    send_i2c_request(PTR_DAT_08001cbc,response_address);\n  }\n  process_i2c_request(PTR_DAT_08001cbc,device_address,data_length);\n  received_length = get_i2c_data_buffer_length(PTR_DAT_08001cbc);\n  expected_length = data_length + 2;\n  if (data_length < received_length) {\n    send_encoded_data_08002f14(PTR_DAT_08001cc4,PTR_s_I2C__Too_many_bytes_received_08001cc0);\n  }\n  else if (received_length < expected_length) {\n    send_encoded_data_08002f14(PTR_DAT_08001cc4,PTR_s_I2C__Too_few_bytes_received_08001ccc);\n  }\n  else {\n    data_address = PTR_DAT_08001cc8;\n    *data_address = (char)device_address;\n    data_address[1] = (char)register_address;\n    for (int i = 0; i < data_length; i++) {\n      next_byte = get_next_byte_from_i2c_data_buffer();\n      data_address[i + 2] = next_byte;\n    }\n    send_encoded_data_08002f0a(PTR_DAT_08001cc4,0x77,(uint8_t)(data_length + 2),PTR_DAT_08001cc8);\n  }\n}",
            "called": [
                "FUN_0800270c",
                "FUN_08001bf8",
                "FUN_08002f0a",
                "FUN_08002f14",
                "FUN_08001c08",
                "FUN_08002a58",
                "FUN_08002a30",
                "FUN_08002c14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001c18",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_i2c_request_and_send_response_08001c18"
        },
        "FUN_08006460": {
            "renaming": {
                "FUN_08006460": "update_value_and_check_08006460",
                "param_1": "values",
                "param_2": "new_value",
                "puVar1": "value_array"
            },
            "code": "int update_value_and_check_08006460(uint **values, int new_value)\n{\n    uint *value_array = *values;\n    update_value_at_index(value_array, new_value, 0);\n    if (((value_array[8] & 0x1111) == 0) && ((value_array[8] & 0x444) == 0)) {\n        value_array[17] &= 0xffff7fff;\n    }\n    if (((value_array[8] & 0x1111) == 0) && ((value_array[8] & 0x444) == 0)) {\n        *value_array &= 0xfffffffe;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08006420"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006460",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "update_value_and_check_08006460"
        },
        "FUN_08004046": {
            "renaming": {
                "FUN_08004046": "do_nothing_and_return_08004046",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void do_nothing_and_return_08004046(void)\n{\n  do_nothing_08004044();\n  return;\n}",
            "called": [
                "FUN_08004044"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004046",
            "calling": [
                "FUN_08007246"
            ],
            "imported": false,
            "current_name": "do_nothing_and_return_08004046"
        },
        "FUN_08008880": {
            "renaming": {
                "FUN_08008880": "find_value_and_set_flags_08006d80_08008880",
                "param_1": "input_value",
                "bVar1": "is_valid_input",
                "cVar2": "input_char",
                "uVar3": "output_value",
                "uVar4": "shift_amount"
            },
            "code": "uint find_value_and_set_flags_08006d80_08008880(uint input_value) {\n    bool is_valid_input = false;\n    char input_char;\n    uint output_value;\n    uint shift_amount;\n\n    if (input_value < 14) {\n        if (input_value + 46 < 60) {\n            is_valid_input = true;\n        }\n    }\n    else {\n        is_valid_input = input_value < 60;\n    }\n\n    if (is_valid_input) {\n        if (input_value < 14) {\n            input_value += 46;\n        }\n        input_char = PTR_DAT_080088d8[input_value];\n    }\n    else {\n        input_char = -1;\n    }\n\n    if (input_char == -1) {\n        output_value = 0;\n    }\n    else {\n        output_value = find_value_and_set_flags_08006d80_08008880(input_char);\n        shift_amount = *(uint *)PTR_DAT_080088dc;\n\n        if (shift_amount != 12) {\n            if (shift_amount < 12) {\n                output_value >>= (12 - shift_amount);\n            }\n            else {\n                output_value <<= (shift_amount - 12);\n            }\n        }\n    }\n\n    return output_value;\n}",
            "called": [
                "FUN_08006d80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008880",
            "calling": [
                "FUN_080022f8",
                "FUN_08000488"
            ],
            "imported": false,
            "current_name": "find_value_and_set_flags_08006d80_08008880"
        },
        "FUN_08004044": {
            "renaming": {
                "FUN_08004044": "do_nothing_08004044"
            },
            "code": "\nvoid do_nothing_08004044(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004044",
            "calling": [
                "FUN_08004046"
            ],
            "imported": false,
            "current_name": "do_nothing_08004044"
        },
        "FUN_08002ed2": {
            "renaming": {
                "FUN_08002ed2": "process_input_from_code_pointer_08002ed2",
                "param_1": "input_pointer",
                "uVar1": "code_pointer",
                "process_input_08003474": "process_input_data"
            },
            "code": "void process_input_from_code_pointer_08002ed2(int input_pointer)\n{\n  uint32_t code_pointer = (**(code **)(**(int **)(input_pointer + 0xc0) + 0xc))();\n  if (code_pointer != 0xffffffff) {\n    process_input_data(input_pointer + 0x44, code_pointer & 0xff);\n  }\n  return;\n}",
            "called": [
                "FUN_08003474"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed2",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "process_input_from_code_pointer_08002ed2"
        },
        "FUN_080073ae": {
            "renaming": {
                "FUN_080073ae": "compare_and_return_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "code": "int compare_and_return_080073ae(int value1, int value2) {\n    if (value1 != value2) {\n        if (value1 == 0) {\n            return value2;\n        }\n        if (value2 == 0) {\n            return value1;\n        }\n        value1 = 0;\n    }\n    return value1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073ae",
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "compare_and_return_080073ae"
        },
        "FUN_08000488": {
            "renaming": {
                "FUN_08000488": "set_bit_08000488",
                "param_1": "bit_position",
                "param_2": "bit_value",
                "PTR_DAT_080004c8": "bit_array",
                "PTR_DAT_080004cc": "is_data_encoded",
                "uVar1": "value",
                "find_value_and_set_flags_08006d80_08008880": "find_value_and_set_flags",
                "encode_data_08002ef2": "encode_data",
                "PTR_DAT_080004d0": "data_pointer"
            },
            "code": "void set_bit_08000488(uint bit_position, int bit_value) {\n  if (bit_position < 0xe) {\n    if (bit_value == 0) {\n      *PTR_DAT_080004c8 &= ~(1 << (bit_position & 0xff));\n      return;\n    }\n    *PTR_DAT_080004c8 = 1 << (bit_position & 0xff) | *PTR_DAT_080004c8;\n    if (!PTR_DAT_080004cc) {\n      uint value = find_value_and_set_flags();\n      encode_data(PTR_DAT_080004d0, bit_position, value);\n      return;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000488",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "set_bit_08000488"
        },
        "FUN_08003f0c": {
            "renaming": {
                "FUN_08003f0c": "update_register_08003f0c",
                "param_1": "input_value",
                "*(uint *)(DAT_08003f2c + 0xc)": "register_ptr",
                "DAT_08003f2c": "register_start_address",
                "register_value": "register_value",
                "masked_value": "masked_value",
                "new_value": "new_value"
            },
            "code": "void update_register_08003f0c(uint input_value) {\n  uint* *(uint *)(DAT_08003f2c + 0xc) = (uint *)(DAT_08003f2c + 0xc);\n  uint register_value = **(uint *)(DAT_08003f2c + 0xc);\n  uint masked_value = register_value & 0xf8ff;\n  uint new_value = (input_value & 7) << 8 | masked_value | 0x5fa0000;\n  **(uint *)(DAT_08003f2c + 0xc) = new_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0c",
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "update_register_08003f0c"
        },
        "FUN_08008f1c": {
            "renaming": {
                "FUN_08008f1c": "process_data_and_update_stats_08008f1c",
                "process_and_update_stats_08001b48": "update_stats",
                "do_nothing_08008f0c": "do_nothing",
                "process_and_send_data_080022f8": "process_and_send",
                "calculate_value_if_not_zero_08008bf4": "calculate_value_if_not_zero",
                "DAT_08008f38": "data_available"
            },
            "code": "void process_data_and_update_stats_08008f1c(void)\n{\n  do_nothing();\n  update_stats();\n  while( true )\n  {\n    while (DAT_08008f38())\n    {\n      process_and_send();\n    }\n    calculate_value_if_not_zero();\n  }\n}",
            "called": [
                "FUN_08008bf4",
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_080022f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008f1c",
            "calling": [
                "FUN_08003658"
            ],
            "imported": false,
            "current_name": "process_data_and_update_stats_08008f1c"
        },
        "FUN_080058ac": {
            "renaming": {
                "FUN_080058ac": "execute_instruction_080058ac",
                "param_1": "instruction",
                "param_2": "instruction_length",
                "puVar1": "memory_address",
                "iVar2": "start_time",
                "iVar3": "current_time",
                "uVar4": "result"
            },
            "code": "uint32_t execute_instruction_080058ac(uint32_t *instruction, uint32_t instruction_length) {\n  uint32_t *memory_address = DAT_08005a0c;\n  uint32_t memory_value = *memory_address;\n  uint32_t instruction_type = instruction[0];\n  uint32_t instruction_operand = instruction[1];\n  uint32_t instruction_operand_2 = instruction[2];\n  uint32_t instruction_operand_3 = instruction[3];\n  uint32_t instruction_operand_4 = instruction[4];\n  uint32_t result;\n\n  if ((memory_value & 7) < instruction_length) {\n    memory_value = (memory_value & 0xfffffff8) | instruction_length;\n    if (instruction_length != (memory_value & 7)) {\n      return 1;\n    }\n  }\n\n  if ((instruction_type & 2) != 0) {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffff0f) | instruction_operand_2;\n  }\n\n  if ((instruction_type & 1) != 0) {\n    if (instruction_operand == 1) {\n      if ((*DAT_08005a10 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((instruction_operand != 2) && ((*DAT_08005a10 & 2) == 0)) {\n      return 1;\n    }\n    DAT_08005a10[1] = instruction_operand | (DAT_08005a10[1] & 0xfffffffc);\n    uint32_t start_time = get_time_in_ms();\n    if (instruction_operand == 1) {\n      while ((DAT_08005a10[1] & 0xc) != 4) {\n        uint32_t current_time = get_time_in_ms();\n        if ((current_time - start_time) > 5000) {\n          return 3;\n        }\n      }\n    }\n    else if (instruction_operand == 2) {\n      while ((DAT_08005a10[1] & 0xc) != 8) {\n        uint32_t current_time = get_time_in_ms();\n        if ((current_time - start_time) > 5000) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((DAT_08005a10[1] & 0xc) != 0) {\n        uint32_t current_time = get_time_in_ms();\n        if ((current_time - start_time) > 5000) {\n          return 3;\n        }\n      }\n    }\n  }\n\n  if (instruction_length < (memory_value & 7)) {\n    memory_value = (memory_value & 0xfffffff8) | instruction_length;\n    if (instruction_length != (memory_value & 7)) {\n      return 1;\n    }\n  }\n\n  if ((instruction_type & 4) != 0) {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xfffff8ff) | instruction_operand_3;\n  }\n\n  if ((instruction_type & 8) != 0) {\n    DAT_08005a10[1] = (DAT_08005a10[1] & 0xffffc7ff) | (instruction_operand_4 << 3);\n  }\n\n  result = calculate_result_08005840();\n  uint32_t shift_amount = PTR_DAT_08005a14[(DAT_08005a10[1] << 0x18) >> 0x1c];\n  *(uint32_t *)PTR_DAT_08005a18 = result >> shift_amount;\n  set_input_length_080036d8(0xf);\n  return 0;\n}",
            "called": [
                "FUN_080058d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058ac",
            "calling": [
                "FUN_080035b8"
            ],
            "imported": false,
            "current_name": "execute_instruction_080058ac"
        },
        "FUN_08006bb8": {
            "renaming": {
                "FUN_08006bb8": "set_flag_08006bb8",
                "param_1": "flag",
                "DAT_08006c48": "data_ptr",
                "DAT_08006c4c": "return_val_0",
                "DAT_08006c50": "return_val_1",
                "DAT_08006c54": "return_val_2",
                "DAT_08006c58": "return_val_3",
                "DAT_08006c5c": "return_val_4"
            },
            "code": "uint32_t set_flag_08006bb8(uint32_t flag)\n{\n  uint32_t* DAT_08006c48 = (uint32_t*)DAT_08006c48;\n  switch(flag) {\n  case 0:\n    DAT_08006c48[3] |= 0x04;\n    return DAT_08006c4c;\n  case 1:\n    DAT_08006c48[3] |= 0x08;\n    return DAT_08006c50;\n  case 2:\n    DAT_08006c48[3] |= 0x10;\n    return DAT_08006c54;\n  case 3:\n    DAT_08006c48[3] |= 0x20;\n    return DAT_08006c58;\n  case 4:\n    DAT_08006c48[3] |= 0x40;\n    return DAT_08006c5c;\n  default:\n    return 0;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006bb8",
            "calling": [
                "FUN_08007258",
                "FUN_080077b0",
                "FUN_08006ca8",
                "FUN_08008078",
                "FUN_08006e68"
            ],
            "imported": false,
            "current_name": "set_flag_08006bb8"
        },
        "FUN_08007438": {
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "param_1": "flag_value",
                "*param_1": "*flag_value",
                "DAT_080074d0": "FLAG_A",
                "DAT_080074d4": "FLAG_C",
                "DAT_080074d8": "FLAG_D",
                "PTR_DAT_080074dc": "PTR_FLAG_PTR",
                "_DAT_4002101c": "*_DAT_4002101c",
                "0x40000000": "FLAG_B",
                "0xe418": "FLAG_A_BIT",
                "0x20c1c": "FLAG_C_BIT",
                "0x2081c": "FLAG_D_BIT"
            },
            "code": "void set_flags_08007438(int *flag_value)\n{\n    if (*flag_value == DAT_080074d0)\n    {\n        *(uint *)(DAT_080074d0 + 0xe418) |= DAT_080074d0_BIT;\n        *(int **)PTR_DAT_080074dc = flag_value;\n    }\n\n    if (*flag_value == FLAG_B)\n    {\n        _DAT_4002101c |= FLAG_B_BIT;\n        *(int **)(PTR_DAT_080074dc + 4) = flag_value;\n    }\n\n    if (*flag_value == DAT_080074d4)\n    {\n        *(uint *)(DAT_080074d4 + 0x20c1c) |= DAT_080074d4_BIT;\n        *(int **)(PTR_DAT_080074dc + 8) = flag_value;\n    }\n\n    if (*flag_value == DAT_080074d8)\n    {\n        *(uint *)(DAT_080074d8 + 0x2081c) |= DAT_080074d8_BIT;\n        *(int **)(PTR_DAT_080074dc + 0xc) = flag_value;\n    }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007438",
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "imported": false,
            "current_name": "set_flags_08007438"
        },
        "FUN_08004aec": {
            "renaming": {
                "FUN_08004aec": "execute_conditions_and_update_08004aec",
                "param_1": "ptr_param",
                "param_1[0xb]": "ptr_b",
                "param_1[0xc]": "ptr_c",
                "*(char *)((int)param_1 + 0x3d)": "c",
                "DAT_08004b7c": "PTR_DAT_08004b7c_",
                "uint": "unsigned int"
            },
            "code": "int execute_conditions_and_update_08004aec(uint **ptr_param)\n{\n    uint *ptr_b = ptr_param[11];\n    char c = *(char *)((int)ptr_param + 0x3d);\n    if ((ptr_b == DAT_08004b7c4 || ptr_b == DAT_08004b7c8) && c == '(')\n    {\n        ptr_param[11] = DAT_08004b7c0;\n        (*ptr_param)[1] &= 0xfffff8ff;\n        (*ptr_param)[5] = 0xfffffbff;\n        **ptr_param &= 0xfffffbff;\n        ptr_param[12] = PTR_DAT_00000000;\n        *(undefined *)((int)ptr_param + 0x3d) = ' ';\n        *(undefined *)((int)ptr_param + 0x3e) = 0;\n        execute_function_if_conditions_met_08007ff0();\n    }\n    else if (c == '!')\n    {\n        ptr_param[11] = DAT_08004b7c0;\n        ptr_param[12] = PTR_DAT_00000021;\n        *(undefined *)((int)ptr_param + 0x3d) = ' ';\n        *(undefined *)((int)ptr_param + 0x3e) = 0;\n        (*ptr_param)[1] &= 0xfffff8ff;\n        (*ptr_param)[5] = 0xfffffbff;\n        **ptr_param &= 0xfffffbff;\n        do_nothing_08004a22();\n    }\n    else\n    {\n        (*ptr_param)[5] = 0xfffffbff;\n    }\n    return 0;\n}",
            "called": [
                "FUN_08007ff0",
                "FUN_08004a22"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004aec",
            "calling": [
                "FUN_080052f0"
            ],
            "imported": false,
            "current_name": "execute_conditions_and_update_08004aec"
        },
        "FUN_0800887c": {
            "renaming": {
                "FUN_0800887c": "return_one_0800887c"
            },
            "code": "int return_one_0800887c() {\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800887c",
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "imported": false,
            "current_name": "return_one_0800887c"
        },
        "FUN_08004728": {
            "renaming": {
                "FUN_08004728": "send_data_08004728",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr1",
                "local_c": "count"
            },
            "code": "uint32_t send_data_08004728(uint32_t **data, uint32_t *param1, uint32_t *param2, uint16_t param3)\n{\n    uint32_t result;\n    uint32_t *ptr1;\n    int count = 0;\n    \n    if ((*data)[0x3d] == ' ')\n    {\n        count = (uint32_t)((uint64_t)global_data_080047ec * (uint64_t)((*global_ptr_080047e8) >> 3) >> 0x28) * 0x19;\n        \n        do\n        {\n            if (count == 0)\n            {\n                (*data)[0xc] = NULL;\n                (*data)[0xf] = 0;\n                (*data)[0x3d] = 0x20;\n                result = 3;\n                break;\n            }\n            ptr1 = *data;\n            count--;\n        } while ((ptr1[6] & 2) != 0);\n        \n        if ((*data)[0xf] == 0x01)\n        {\n            result = 2;\n        }\n        else\n        {\n            (*data)[0xf] = 1;\n            if ((*ptr1 & 1) == 0)\n            {\n                *ptr1 = *ptr1 | 1;\n            }\n            **data = **data & 0xfffff7ff;\n            (*data)[0x3d] = 0x21;\n            (*data)[0x3e] = 0x10;\n            (*data)[0x10] = NULL;\n            (*data)[9] = param2;\n            (*data)[0xb] = global_data_080047f0;\n            (*data)[10] = param3;\n            (*data)[0x11] = param1;\n            **data = **data | 0x100;\n            (*data)[0xf] = 0;\n            (*data)[1] = (*data)[1] | 0x700;\n            result = 0;\n        }\n    }\n    else\n    {\n        result = 2;\n    }\n    \n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004728",
            "calling": [
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "send_data_08004728"
        },
        "FUN_08007ede": {
            "renaming": {
                "FUN_08007ede": "copy_data_to_address_08007ede",
                "param_1": "destination_address",
                "param_2": "source_address",
                "param_3": "data_size",
                "uVar1": "current_byte_index"
            },
            "code": "int copy_data_to_address_08007ede(int destination_address, int source_address, uint data_size)\n{\n  uint current_byte_index;\n  if (data_size > 32) {\n    return 2;\n  }\n  for (current_byte_index = 0; current_byte_index < data_size; current_byte_index++) {\n    *(undefined *)(destination_address + current_byte_index + 0x68) = *(undefined *)(source_address + current_byte_index);\n    *(char *)(destination_address + 0x88) = *(char *)(destination_address + 0x88) + 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ede",
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "copy_data_to_address_08007ede"
        },
        "FUN_0800863c": {
            "renaming": {
                "FUN_0800863c": "store_input_data_0800863c",
                "param_1": "input_data",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "iVar1": "valid_input",
                "uVar2": "index",
                "PTR_DAT_08008688": "input_data_array",
                "PTR_DAT_0800868c": "input_data_array2",
                "set_bits_in_register_08003f30": "set_bits",
                "set_bit_in_array_08003f94": "set_bit_in_array",
                "check_input_080068d6": "check_input_data",
                "PTR_DAT_08008690": "input_data_array3"
            },
            "code": "void store_input_data_0800863c(int input_data, int data1, int data2, int data3)\n{\n  if (input_data != 0) {\n    int valid_input = is_valid_input();\n    if (valid_input == 0) {\n      uint index = (uint)*(byte *)(input_data + 0x44);\n      *(int *)(PTR_DAT_08008688 + index * 4) = data1;\n      *(int *)(PTR_DAT_0800868c + index * 4) = input_data;\n      set_bits((int)*(char *)(input_data + 0x5a),0,1,index,data3);\n      set_bit_in_array((int)*(char *)(input_data + 0x5a));\n      check_input_data(*(int *)(PTR_DAT_08008690 + (uint)*(byte *)(input_data + 0x44) * 4),input_data + 0x45,1);\n    }\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8",
                "FUN_08003f30",
                "FUN_08003f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800863c",
            "calling": [
                "FUN_08008c44"
            ],
            "imported": false,
            "current_name": "store_input_data_0800863c"
        },
        "thunk_FUN_0800887c": {
            "renaming": {
                "thunk_FUN_0800887c": "get_value_thunk_0800887c"
            },
            "code": "int get_value_thunk_0800887c(void)\n{\n    return 1;\n}",
            "called": [
                "FUN_0800887c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a01c",
            "calling": [
                "FUN_08009fe8"
            ],
            "imported": false,
            "current_name": "get_value_thunk_0800887c"
        },
        "FUN_080074e0": {
            "renaming": {
                "FUN_080074e0": "update_bits_080074e0",
                "param_1": "bit_value",
                "*param_1": "*bit_value",
                "DAT_08007534": "BIT_FLAG_A",
                "DAT_08007538": "BIT_FLAG_C",
                "DAT_0800753c": "BIT_FLAG_D",
                "DAT_08007540": "data",
                "*(uint *)(DAT_08007540 + 0x18)": "data[3]",
                "*(uint *)(DAT_08007540 + 0x1c)": "data[4]"
            },
            "code": "void update_bits_080074e0(int *bit_value)\n{\n  uint32_t *DAT_08007540 = (uint32_t *)DAT_08007540;\n  if (*bit_value == DAT_08007534)\n  {\n    *(uint *)(DAT_08007540 + 0x18) &= ~(1 << 11);\n  }\n  if (*bit_value == BIT_FLAG_B)\n  {\n    *(uint *)(DAT_08007540 + 0x18) &= ~(1 << 1);\n  }\n  if (*bit_value == DAT_08007538)\n  {\n    *(uint *)(DAT_08007540 + 0x18) &= ~(1 << 2);\n  }\n  if (*bit_value == DAT_0800753c)\n  {\n    *(uint *)(DAT_08007540 + 0x18) &= ~(1 << 3);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074e0",
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "imported": false,
            "current_name": "update_bits_080074e0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "execute_code_if_not_null_080073c0",
                "PTR_DAT_080073d0": "code_pointer_data",
                "PTR_DAT_080073d4": "data_pointer"
            },
            "code": "void execute_code_if_not_null_080073c0(void)\n{\n  code* code_pointer = *(code**)PTR_DAT_080073d0;\n  if (code_pointer != NULL) {\n    code_pointer(*(int*)PTR_DAT_080073d4);\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_08005cb4"
            ],
            "imported": false,
            "current_name": "execute_code_if_not_null_080073c0"
        },
        "FUN_080084b0": {
            "renaming": {
                "FUN_080084b0": "process_value_080084b0",
                "PTR_DAT_080084f0": "value_array",
                "PTR_DAT_080084f4": "param_array",
                "PTR_DAT_080084f8": "param_values",
                "PTR_DAT_080084fc": "result_array",
                "cVar1": "value_to_process",
                "iVar4": "value_index",
                "uVar5": "param_index",
                "uVar3": "processed_value"
            },
            "code": "void process_value_080084b0(void)\n{\n  char value_to_process = PTR_DAT_080084f0[1];\n  int value_index = find_value_index(value_to_process, PTR_DAT_080084f0);\n  if (value_index != 0) {\n    int param_index = find_value_index(value_to_process, PTR_DAT_080084f4);\n    int processed_value = get_param_value(param_index, PTR_DAT_080084f8);\n    PTR_DAT_080084fc[89] = processed_value;\n    PTR_DAT_080084fc[88] = value_to_process;\n    PTR_DAT_080084fc[72] = 9600;\n    PTR_DAT_080084fc[84] = 0;\n    PTR_DAT_080084fc[76] = 0;\n    PTR_DAT_080084fc[80] = 0;\n    execute_function(PTR_DAT_080084fc);\n  }\n  return;\n}",
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080084b0",
            "calling": [
                "FUN_08008500"
            ],
            "imported": false,
            "current_name": "process_value_080084b0"
        },
        "FUN_08004050": {
            "renaming": {
                "FUN_08004050": "get_value_08004050",
                "param_1": "param_array",
                "uVar1": "value",
                "puVar2": "param",
                "DAT_080040e0": "PTR_DAT_080040e0",
                "DAT_080040e4": "PTR_DAT_080040e4"
            },
            "code": "uint get_value_08004050(uint **param_array)\n{\n    uint value;\n    uint *param = *param_array;\n    if (*(char *)((int)param_array + 0x21) != '\\x02') {\n        param_array[0xe] = (uint *)0x4;\n        return 1;\n    }\n    value = **param_array;\n    value = value & 0xfffffff1;\n    value = value & 0xfffffffe;\n    if (param == DAT_080040e0) {\n        value = 1;\n    }\n    else if (param == DAT_080040e0 + 5) {\n        value = 0x10;\n    }\n    else if (param == DAT_080040e0 + 10) {\n        value = 0x100;\n    }\n    else if (param == DAT_080040e0 + 0xf) {\n        value = 0x1000;\n    }\n    else if (param == DAT_080040e0 + 0x14) {\n        value = 0x10000;\n    }\n    else if (param == DAT_080040e0 + 0x19) {\n        value = 0x100000;\n    }\n    else {\n        value = 0x1000000;\n    }\n    *(uint *)(DAT_080040e4 + 4) = value;\n    *(char *)((int)param_array + 0x21) = 1;\n    *(uint *)(param_array + 8) = 0;\n    if (param_array[0xd] != (uint *)0x0) {\n        (*(void (*)())param_array[0xd])();\n        return 0;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004050",
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "get_value_08004050"
        },
        "FUN_08008e14": {
            "renaming": {
                "FUN_08008e14": "initialize_data_structure_if_valid_08008e14",
                "param_1": "input_1",
                "param_2": "input_2",
                "PTR_DAT_08008e3c": "PTR_data_structure"
            },
            "code": "void initialize_data_structure_if_valid_08008e14(int input_1, int input_2)\n{\n    if ((input_1 == 1) && (input_2 == 0xffff)) {\n        initialize_data_structure(PTR_DAT_08008e3c, 0, 0, 0, 0);\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_08008df8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e14",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structure_if_valid_08008e14"
        },
        "FUN_08005a28": {
            "renaming": {
                "FUN_08005a28": "get_first_value_divided_by_shifted_value_08005a28",
                "uVar1": "value",
                "PTR_DAT_08005a44": "PTR_DATA_08005a44",
                "DAT_08005a40": "DATA_08005a40",
                "index": "index",
                "shifted_value": "shifted_value",
                "get_first_value_from_pointer_08005a1c": "get_first_value_from_pointer"
            },
            "code": "unsigned int get_first_value_divided_by_shifted_value_08005a28() {\n    unsigned int value = get_first_value_from_pointer();\n    unsigned int shift = *(int *)(DAT_08005a40 + 4) << 0x15;\n    unsigned int index = shift >> 0x1d;\n    unsigned int shifted_value = PTR_DAT_08005a44[index];\n    return value >> shifted_value;\n}",
            "called": [
                "FUN_08005a1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a28",
            "calling": [
                "FUN_08006538",
                "FUN_080045c0",
                "FUN_080075dc"
            ],
            "imported": false,
            "current_name": "get_first_value_divided_by_shifted_value_08005a28"
        },
        "FUN_080095a8": {
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "data_start",
                "param_2": "data_ptr",
                "param_3": "data_end",
                "param_4": "data_flag",
                "param_5": "callback",
                "iVar1": "cb_ret",
                "uVar2": "data_size",
                "uVar3": "min_size",
                "bVar4": "is_offset_4",
                "data_offset": "data_offset",
                "flag_offset": "flag_offset",
                "flag_size": "flag_size",
                "data_remaining": "data_remaining",
                "data_offset_2": "data_offset_2",
                "ret_val": "ret_val"
            },
            "code": "int process_data_080095a8(uint32_t data_start, uint32_t* data_ptr, uint32_t* data_end, uint32_t data_flag, code* callback)\\n\\\n{\\n\\\n  int ret_val = 0;\\n\\\n  uint32_t data_size = data_ptr[4];\\n\\\n  uint32_t min_size = data_ptr[2];\\n\\\n  if ((int)data_ptr[4] < (int)data_ptr[2]) {\\n\\\n    data_size = data_ptr[2];\\n\\\n  }\\n\\\n  *data_end = data_size;\\n\\\n  if (*(char *)((int)data_ptr + 0x43) != \"\\0\") {\\n\\\n    *data_end = data_size + 1;\\n\\\n  }\\n\\\n  if ((int)(*data_ptr << 0x1a) < 0) {\\n\\\n    *data_end = *data_end + 2;\\n\\\n  }\\n\\\n  uint32_t data_offset = *data_ptr & 6;\\n\\\n  if (data_offset == 0) {\\n\\\n    for (; (int)data_offset < (int)(data_ptr[3] - *data_end); data_offset++) {\\n\\\n      int cb_ret = (*callback)(data_start, data_flag, (int)data_ptr + 0x19, 1);\\n\\\n      if (cb_ret == -1) {\\n\\\n        return -1;\\n\\\n      }\\n\\\n    }\\n\\\n  }\\n\\\n  uint32_t flag_offset = (uint32_t)*(byte *)((int)data_ptr + 0x43);\\n\\\n  if (flag_offset != 0) {\\n\\\n    flag_offset = 1;\\n\\\n  }\\n\\\n  uint32_t flag_size = flag_offset;\\n\\\n  if ((int)(*data_ptr << 0x1a) < 0) {\\n\\\n    *(undefined *)((int)data_ptr + flag_offset + 0x43) = 0x30;\\n\\\n    flag_size = flag_offset + 2;\\n\\\n    *(undefined *)((int)data_ptr + flag_offset + 0x44) = *(undefined *)((int)data_ptr + 0x45);\\n\\\n  }\\n\\\n  int cb_ret = (*callback)(data_start, data_flag, (int)data_ptr + 0x43, flag_size);\\n\\\n  if (cb_ret != -1) {\\n\\\n    uint32_t data_remaining = data_ptr[3];\\n\\\n    bool is_offset_4 = (*data_ptr & 6) != 4;\\n\\\n    if (is_offset_4) {\\n\\\n      data_remaining = 0;\\n\\\n    }\\n\\\n    uint32_t data_offset_2 = 0;\\n\\\n    if (!is_offset_4) {\\n\\\n      data_remaining = data_remaining - *data_end;\\n\\\n    }\\n\\\n    if (!is_offset_4) {\\n\\\n      data_remaining = data_remaining & ~((int)data_remaining >> 0x1f);\\n\\\n    }\\n\\\n    if ((int)data_ptr[4] < (int)data_ptr[2]) {\\n\\\n      data_remaining = data_remaining + (data_ptr[2] - data_ptr[4]);\\n\\\n    }\\n\\\n    while( true ) {\\n\\\n      if (data_remaining == data_offset_2) {\\n\\\n        break;\\n\\\n      }\\n\\\n      cb_ret = (*callback)(data_start, data_flag, (int)data_ptr + 0x1a, 1);\\n\\\n      if (cb_ret == -1) {\\n\\\n        return -1;\\n\\\n      }\\n\\\n      data_offset_2++;\\n\\\n    }\\n\\\n    ret_val = 0;\\n\\\n  }\\n\\\n  else {\\n\\\n    ret_val = -1;\\n\\\n  }\\n\\\n  return ret_val;\\n\\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095a8",
            "calling": [
                "FUN_08009698"
            ],
            "imported": false,
            "current_name": "process_data_080095a8"
        },
        "FUN_08003002": {
            "renaming": {
                "FUN_08003002": "update_and_decode_character_stats_08003002",
                "param_1": "character_data",
                "update_character_stats_08008990": "update_character_stats",
                "decode_and_do_nothing_08002fca": "decode_and_do_nothing",
                "do_nothing_08008ac4": "do_nothing"
            },
            "code": "void update_and_decode_character_stats_08003002(int character_data){\n    char* character_stats = character_data + 0x1f8;\n    if (*character_stats != '\\0'){\n        return;\n    }\n    update_character_stats(0xd,1);\n    decode_and_do_nothing(character_data,0xd,2,0x28,0xd2);\n    do_nothing(0xfa);\n    decode_and_do_nothing(character_data,0xd,5,0x28,0xd2);\n    do_nothing(0x7d);\n}\n",
            "called": [
                "FUN_08008ac4",
                "FUN_08008990",
                "FUN_08002fca"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003002",
            "calling": [
                "FUN_08003048"
            ],
            "imported": false,
            "current_name": "update_and_decode_character_stats_08003002"
        },
        "FUN_08008ac4": {
            "renaming": {
                "FUN_08008ac4": "do_nothing_08008ac4"
            },
            "code": "\nvoid do_nothing_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ac4",
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "do_nothing_08008ac4"
        },
        "FUN_08003bd8": {
            "renaming": {
                "FUN_08003bd8": "check_and_set_flag_08003bd8",
                "param_1": "flag_array",
                "iVar1": "flag_check",
                "uVar2": "u_var_2",
                "uVar3": "u_var_3",
                "PTR_DAT_08003ce0": "ptr_dat_08003ce0",
                "PTR_DAT_08003ce4": "ptr_dat_08003ce4"
            },
            "code": "int check_and_set_flag_08003bd8(int *flag_array)\n{\n    int flag_check = check_flag(flag_array);\n    uint flag_value = flag_array[10] & 0x10;\n    \n    if (flag_array == NULL) {\n        return 1;\n    }\n    \n    if (flag_array[10] == 0) {\n        flag_array[0xb] = 0;\n        *(undefined *)(flag_array + 9) = 0;\n        decode_and_set_flag();\n    }\n    \n    if (flag_value == 0 && flag_check == 0) {\n        flag_array[10] = flag_array[10] & 0xffffeefdU | 2;\n        uint uVar2 = flag_array[1] | flag_array[7] | flag_array[3] << 1;\n        uint uVar3 = 0;\n        if (flag_array[2] == 0x100 || flag_array[2] == 1) {\n            uVar3 = (flag_array[4] - 1) * 0x100000;\n        }\n        if (flag_array[5] == 1) {\n            if (flag_array[3] == 0) {\n                uVar3 = uVar3 | (flag_array[6] - 1) * 0x2000 | 0x800;\n            }\n            else {\n                flag_array[10] = flag_array[10] | 0x20;\n                flag_array[0xb] = flag_array[0xb] | 1;\n            }\n        }\n        *(uint *)(*flag_array + 4) = uVar3 | *(uint *)(*flag_array + 4) & 0xffff16ff;\n        *(uint *)(*flag_array + 8) = PTR_DAT_08003ce0 & *(uint *)(*flag_array + 8) | uVar2;\n        \n        if (uVar2 != (PTR_DAT_08003ce4 & *(uint *)(*flag_array + 8))) {\n            flag_array[10] = flag_array[10] & 0xffffffedU | 0x10;\n            flag_array[0xb] = flag_array[0xb] | 1;\n            return 1;\n        }\n        \n        flag_array[0xb] = 0;\n        flag_array[10] = flag_array[10] & 0xfffffffcU | 1;\n        return 0;\n    }\n    \n    flag_array[10] = flag_array[10] | 0x10;\n    return 1;\n}",
            "called": [
                "FUN_08006ca8",
                "FUN_08003b8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003bd8",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "check_and_set_flag_08003bd8"
        },
        "FUN_08009d50": {
            "renaming": {
                "FUN_08009d50": "initialize_data_for_object_08009d50",
                "param_1": "object_index",
                "iVar2": "global_object_index",
                "bVar3": "is_global_object",
                "PTR_PTR_DAT_08009da8": "global_object_index_ptr_ptr",
                "PTR_LAB_08009cd0_1_08009dac": "global_object_label_1_ptr",
                "find_empty_slot_08009db0": "find_empty_slot",
                "initialize_data_08009cdc": "initialize_data"
            },
            "code": "void initialize_data_for_object_08009d50(int object_index)\n{\n    if (*(int *)(object_index + 0x18) == 0) {\n        *(undefined4 *)(object_index + 0x48) = 0;\n        *(undefined4 *)(object_index + 0x4c) = 0;\n        *(undefined4 *)(object_index + 0x50) = 0;\n        int global_object_index = *(int *)PTR_PTR_DAT_08009da8;\n        *(undefined **)(object_index + 0x28) = PTR_LAB_08009cd0_1_08009dac;\n        bool is_global_object = object_index == global_object_index;\n        if (is_global_object) {\n            global_object_index = 1;\n        }\n        if (is_global_object) {\n            *(int *)(object_index + 0x18) = global_object_index;\n        }\n        undefined4 empty_slot_index = find_empty_slot();\n        *(undefined4 *)(object_index + 4) = empty_slot_index;\n        empty_slot_index = find_empty_slot(object_index);\n        *(undefined4 *)(object_index + 8) = empty_slot_index;\n        empty_slot_index = find_empty_slot(object_index);\n        *(undefined4 *)(object_index + 0xc) = empty_slot_index;\n        initialize_data(*(undefined4 *)(object_index + 4), 4, 0);\n        initialize_data(*(undefined4 *)(object_index + 8), 9, 1);\n        initialize_data(*(undefined4 *)(object_index + 0xc), 0x12, 2);\n        *(int *)(object_index + 0x18) = 1;\n    }\n    return;\n}",
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d50",
            "calling": [
                "FUN_0800937c",
                "FUN_080098d8",
                "FUN_08009c7c",
                "FUN_0800932c",
                "FUN_08009a80",
                "FUN_08009db0"
            ],
            "imported": false,
            "current_name": "initialize_data_for_object_08009d50"
        },
        "FUN_08003366": {
            "renaming": {
                "FUN_08003366": "set_values_if_param2_is_113_08003366",
                "param_1": "object_address",
                "param_2": "param2_value",
                "param_3": "value1",
                "param_4": "value2"
            },
            "code": "void set_values_if_param2_is_113_08003366(int object_address, int param2_value, undefined4 value1, undefined4 value2)\n{\n  if (param2_value == 0x71) {\n    *(undefined4 *)(object_address + 0x68) = value1;\n    *(undefined4 *)(object_address + 0x40) = value2;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003366",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_if_param2_is_113_08003366"
        },
        "FUN_080091b0": {
            "renaming": {
                "FUN_080091b0": "copy_string_080091b0",
                "param_1": "start",
                "param_2": "dest",
                "param_3": "length",
                "puVar1": "source_ptr",
                "puVar2": "dest_ptr"
            },
            "code": "void copy_string_080091b0(int start, char* dest, int length)\n{\n  char* source_ptr;\n  char* dest_ptr;\n  source_ptr = dest + length;\n  dest_ptr = (char*)(start - 1);\n  for (; dest != source_ptr; dest++) {\n    dest_ptr++;\n    *dest_ptr = *dest;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091b0",
            "calling": [
                "FUN_08009908",
                "FUN_080027f0"
            ],
            "imported": false,
            "current_name": "copy_string_080091b0"
        },
        "FUN_08009108": {
            "renaming": {
                "FUN_08009108": "calculate_result_08009108",
                "param_1": "flag",
                "param_2": "value",
                "DAT_08009120": "is_initialized"
            },
            "code": "longlong calculate_result_08009108(undefined4 flag, uint value)\n{\n  if (DAT_08009120 != 0) {\n    return CONCAT44(flag, 2);\n  }\n  return (ulonglong)value << 0x20;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009108",
            "calling": [
                "FUN_080090c2"
            ],
            "imported": false,
            "current_name": "calculate_result_08009108"
        },
        "FUN_0800a18c": {
            "renaming": {
                "FUN_0800a18c": "execute_and_update_flags_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "PTR_DAT_0800a228": "flag_1",
                "PTR_DAT_0800a22c": "flag_2",
                "PTR_DAT_0800a230": "flag_3",
                "PTR_DAT_0800a234": "flag_4",
                "PTR_DAT_0800a238": "flag_5",
                "PTR_DAT_0800a23c": "flag_6",
                "PTR_DAT_0800a240": "flag_7",
                "PTR_DAT_0800a244": "flag_8",
                "PTR_DAT_0800a248": "flag_9",
                "PTR_DAT_0800a24c": "flag_10",
                "PTR_DAT_0800a250": "flag_11",
                "PTR_DAT_0800a254": "flag_12"
            },
            "code": "void execute_and_update_flags_0800a18c(void)\n{\n    code *jump_table = execute_and_update_flags_0800a18c;\n    execute_command();\n    update_flag(PTR_DAT_0800a228);\n    update_flag(PTR_DAT_0800a22c);\n    update_flag(PTR_DAT_0800a230);\n    update_flag(PTR_DAT_0800a234);\n    update_flag(PTR_DAT_0800a238);\n    update_flag(PTR_DAT_0800a23c);\n    update_flag(PTR_DAT_0800a240);\n    update_flag(PTR_DAT_0800a244);\n    update_flag(PTR_DAT_0800a248);\n    update_flag(PTR_DAT_0800a24c);\n    update_flag(PTR_DAT_0800a250);\n    update_flag(PTR_DAT_0800a254);\n    (*jump_table)();\n}\n",
            "called": [
                "FUN_08009b5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a18c",
            "calling": [
                "FUN_08009084"
            ],
            "imported": false,
            "current_name": "execute_and_update_flags_0800a18c"
        },
        "FUN_08009908": {
            "renaming": {
                "FUN_08009908": "allocate_and_insert_into_linked_list_08009908",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "memory_block_size",
                "uVar2": "size",
                "uVar3": "calculated_size"
            },
            "code": "uint allocate_and_insert_into_linked_list_08009908(uint data, uint size)\n{\n  undefined4 memory_block_size = *(undefined4 *)PTR_PTR_DAT_08009914;\n  if (data != 0) {\n    if (size == 0) {\n      insert_into_linked_list_080091d8();\n      return size;\n    }\n    else {\n      uint calculated_size = calculate_size_0800a154();\n      if ((calculated_size < size) && (size = allocate_memory_block_08009270(memory_block_size, size), size != 0)) {\n        copy_string_080091b0(size, data, size);\n        insert_into_linked_list_080091d8(memory_block_size, data);\n      }\n      return data;\n    }\n  }\n  else {\n    uint allocated_memory_block = allocate_memory_block_08009270(memory_block_size, size, size, PTR_PTR_DAT_08009914);\n    return allocated_memory_block;\n  }\n}",
            "called": [
                "FUN_080091d8",
                "FUN_0800a154",
                "FUN_08009270",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009908",
            "calling": [
                "FUN_08002acc",
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "imported": false,
            "current_name": "allocate_and_insert_into_linked_list_08009908"
        },
        "FUN_08008a24": {
            "renaming": {
                "FUN_08008a24": "decode_value_08008a24",
                "param_1": "index",
                "param_2": "bit_mask",
                "param_3": "value",
                "param_4": "data",
                "iVar1": "bit_result",
                "uVar2": "dat_value",
                "puVar3": "data_ptr",
                "uVar4": "character",
                "PTR_DAT_08008a64": "character_array",
                "PTR_DAT_08008a68": "bit_array",
                "get_bit_08006b28": "get_bit",
                "get_dat_value_08006b7c": "get_dat_value",
                "set_param_to_1_if_not_zero_080072d8": "set_bit_to_1_if_not_zero"
            },
            "code": "void decode_value_08008a24(uint8_t index, uint32_t bit_mask, uint32_t value, uint8_t* data)\n{\n    uint32_t character;\n    uint8_t* data_ptr;\n    if (index < 0x3c) {\n        character = (uint32_t)(char)PTR_DAT_08008a64[index];\n        data_ptr = PTR_DAT_08008a64;\n    }\n    else {\n        character = 0xffffffff;\n        data_ptr = data;\n    }\n    if ((character != 0xffffffff) && (get_bit(character, bit_mask, value, data_ptr, data) != 0)) {\n        uint32_t dat_value = get_dat_value(character);\n        set_bit_to_1_if_not_zero(dat_value, 1 << (character & 0xf) & 0xffff, data);\n    }\n    return;\n}",
            "called": [
                "FUN_08006b7c",
                "FUN_08006b28",
                "FUN_080072d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a24",
            "calling": [
                "FUN_080088e0",
                "FUN_080005f8",
                "FUN_08002fca"
            ],
            "imported": false,
            "current_name": "decode_value_08008a24"
        },
        "FUN_08008abc": {
            "renaming": {
                "FUN_08008abc": "print_data_value_08008abc",
                "get_and_print_data_value_0800723c": "get_and_print_data_value"
            },
            "code": "void print_data_value_08008abc(void)\n{\n  get_and_print_data_value_08008abc();\n  return;\n}",
            "called": [
                "FUN_0800723c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008abc",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "print_data_value_08008abc"
        },
        "FUN_08002b68": {
            "renaming": {
                "FUN_08002b68": "process_request_08002b68",
                "param_1": "request_buffer",
                "param_2": "request_buffer_size",
                "param_3": "data",
                "param_4": "data_size",
                "param_5": "flags",
                "iVar1": "result",
                "uVar2": "num_bytes_to_process",
                "uVar3": "data_size",
                "allocate_and_insert_into_linked_list_08002acc": "allocate_and_insert_into_linked_list",
                "initialize_data_08002a30": "initialize_data",
                "send_request_08002a58": "send_request",
                "process_and_validate_data_08007f0e": "process_and_validate_data"
            },
            "code": "int process_request_08002b68(uint32_t* request_buffer, uint32_t request_buffer_size, uint32_t data, uint32_t data_size, uint8_t flags) {\n  int result = 0;\n  uint8_t num_bytes_to_process = (uint8_t)flags;\n  if (request_buffer[4] == 0) {\n    return 0;\n  }\n  allocate_and_insert_into_linked_list(request_buffer[2]);\n  if (*(int*)PTR_DAT_08002bf4 != 0) {\n    if (num_bytes_to_process != 0) {\n      initialize_data(request_buffer, request_buffer_size);\n      if (num_bytes_to_process > 3) {\n        num_bytes_to_process = 3;\n      }\n      while (num_bytes_to_process > 0) {\n        (**(code**)*request_buffer)(request_buffer, data >> ((num_bytes_to_process - 1 & 0x1f) << 3) & 0xff);\n        num_bytes_to_process--;\n      }\n      send_request(request_buffer, 0);\n    }\n    result = process_and_validate_data(request_buffer + 5, (request_buffer_size & 0x7f) << 1, *(int*)PTR_DAT_08002bf4, request_buffer[2], data_size);\n    if (result != 0) {\n      data_size = 0;\n    }\n    *PTR_DAT_08002bf8 = 0;\n    *PTR_DAT_08002bfc = (char)data_size;\n    return data_size;\n  }\n  request_buffer[1] = 1;\n  return 0;\n}\n",
            "called": [
                "FUN_08007f0e",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08002a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b68",
            "calling": [
                "FUN_08002c00"
            ],
            "imported": false,
            "current_name": "process_request_08002b68"
        },
        "FUN_080005e0": {
            "renaming": {
                "FUN_080005e0": "clear_memory_080005e0",
                "PTR_DAT_080005f0": "memory_start",
                "PTR_DAT_080005f4": "memory_end"
            },
            "code": "void clear_memory_080005e0(void)\n{\n  *PTR_DAT_080005f0 = 0;\n  *PTR_DAT_080005f4 = 255;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005e0",
            "calling": [
                "FUN_08000aec",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "clear_memory_080005e0"
        },
        "FUN_08008020": {
            "renaming": {
                "FUN_08008020": "check_and_update_param_value_08008020",
                "param_1": "param_value",
                "iVar1": "subtracted_value",
                "subtract_four_from_param_08007f78": "get_subtracted_value",
                "set_bit_and_update_values_080049e0": "set_bit_and_update_values"
            },
            "code": "void check_and_update_param_value_08008020(undefined4 param_value) {\\n  int subtracted_value = get_subtracted_value();\\n  if (*(char *)(subtracted_value + 0x5d) == \"\\0\") {\\n    set_bit_and_update_values(param_value);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_080049e0",
                "FUN_08007f78"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008020",
            "calling": [
                "FUN_08004f3c"
            ],
            "imported": false,
            "current_name": "check_and_update_param_value_08008020"
        },
        "FUN_0800674c": {
            "renaming": {
                "FUN_0800674c": "do_nothing_0800674c"
            },
            "code": "\nvoid do_nothing_0800674c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674c",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "do_nothing_0800674c"
        },
        "FUN_08005dac": {
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "temp_data",
                "iVar2": "data_array0",
                "iVar3": "data_array2",
                "DAT_08005df0": "special_address",
                "*(uint *)(param_1 + 0x20)": "data1",
                "*(uint *)(param_1 + 4)": "data2",
                "*(uint *)(param_1 + 0x1c)": "data3",
                "*(int *)(param_1 + 0x40)": "data4",
                "*(uint *)(param_1 + 0x20) & 0xffffefff": "mask1",
                "*(uint *)(param_1 + 4) & 0xffffbfff": "mask2",
                "*(uint *)(param_1 + 0x1c) & 0xffff8cff": "mask3"
            },
            "code": "void update_data_08005dac(int data_address, int* data_array) {\n    uint32_t mask1 = 0xffffefff;\n    uint32_t mask2 = 0xffffbfff;\n    uint32_t mask3 = 0xffff8cff;\n\n    uint32_t* data1 = (uint32_t*)(data_address + 0x20);\n    uint32_t* data2 = (uint32_t*)(data_address + 4);\n    uint32_t* data3 = (uint32_t*)(data_address + 0x1c);\n    int* data4 = (int*)(data_address + 0x40);\n\n    *data1 &= mask1;\n\n    uint32_t uVar1 = *data2;\n    int iVar2 = data_array[0];\n    int iVar3 = data_array[2];\n\n    if (data_address == DAT_08005df0) {\n        uVar1 &= mask2;\n        uVar1 |= data_array[5] << 6;\n    }\n    *data2 = uVar1;\n    *data3 &= mask3;\n    *data3 |= iVar2 << 8;\n    *data4 = data_array[1];\n    *data1 &= 0xffffdfff;\n    *data1 |= iVar3 << 0xc;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005dac",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_08005dac"
        },
        "FUN_0800674e": {
            "renaming": {
                "FUN_0800674e": "initialize_device_0800674e",
                "param_1": "device",
                "*(char *)((int)param_1 + 0x39)": "device[9]",
                "*(undefined *)(param_1 + 0xe)": "device[14]",
                "do_nothing_0800674c": "do_nothing",
                "*(undefined *)((int)param_1 + 0x39)": "device[9]",
                "*(uint *)(*param_1 + 0xc)": "device[3]",
                "calculate_values_08006538": "calculate_values",
                "*(uint *)(*param_1 + 0x10)": "device[4]",
                "*(uint *)(*param_1 + 0x14)": "device[5]",
                "param_1[0xf]": "device[15]",
                "*(undefined *)((int)param_1 + 0x3a)": "device[10]"
            },
            "code": "int initialize_device_0800674e(int *device)\n{\n    if (device != NULL)\n    {\n        if (device[9] == 0)\n        {\n            device[14] = 0;\n            do_nothing();\n        }\n        device[9] = 0x24;\n        device[3] &= ~(1 << 14);\n        calculate_values(device);\n        device[4] &= ~(1 << 11);\n        device[5] &= ~(1 << 3);\n        device[3] |= 1 << 13;\n        device[15] = 0;\n        device[9] = 0x20;\n        device[10] = 0x20;\n        return 0;\n    }\n    return 1;\n}",
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800674e",
            "calling": [
                "FUN_08008078"
            ],
            "imported": false,
            "current_name": "initialize_device_0800674e"
        },
        "FUN_0800771c": {
            "renaming": {
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c",
                "param_1": "flag_value",
                "iVar1": "callback_address",
                "subtract_four_from_value_08007718": "subtract_four_from_value"
            },
            "code": "void execute_callback_if_flag_set_0800771c(int flag_value){\n                    int callback_address;\n                    callback_address = subtract_four_from_value();\n                    if ((*(code **)(callback_address + 0x4c) != (code *)0x0) && (*(char *)(flag_value + 0x1c) == '\\x01')) {\n                        (**(code **)(callback_address + 0x4c))(callback_address,0);\n                    }\n                    return;\n                }",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800771c",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_callback_if_flag_set_0800771c"
        },
        "FUN_080066e8": {
            "renaming": {
                "FUN_080066e8": "check_validity_of_param_080066e8",
                "param_1": "ptr_param",
                "param_2": "param2",
                "param_3": "expected_val",
                "param_4": "param4",
                "param_5": "max_val",
                "iVar1": "diff",
                "get_ptr_dat_value_08003760": "get_dat_value"
            },
            "code": "int check_validity_of_param_080066e8(uint **ptr_param, uint param2, uint expected_val, int param4, uint max_val)\\n\\\n    {\\n\\\n        int diff;\\n\\\n        do {\\n\\\n            diff = param2 & ~**ptr_param;\\n\\\n            if ((diff == 0) != expected_val) {\\n\\\n                return 0;\\n\\\n            }\\n\\\n        } while ((max_val == 0xffffffff) || (max_val != 0 && abs(get_dat_value() - param4) <= max_val));\\n\\\n        (*ptr_param)[3] &= 0xfffffe5f;\\n\\\n        (*ptr_param)[5] &= 0xfffffffe;\\n\\\n        *((unsigned char *)(ptr_param) + 0x39) = 0x20;\\n\\\n        *((unsigned char *)(ptr_param) + 0x3a) = 0x20;\\n\\\n        *((uint *)(ptr_param) + 0xe) = 0;\\n\\\n        return 3;\\n\\\n    }",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066e8",
            "calling": [
                "FUN_080067ac"
            ],
            "imported": false,
            "current_name": "check_validity_of_param_080066e8"
        },
        "FUN_08009358": {
            "renaming": {
                "FUN_08009358": "process_input_and_return_last_index_08009358",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_array",
                "param_4": "array_length",
                "puVar2": "end_of_array_ptr",
                "iVar3": "current_index",
                "iVar1": "result"
            },
            "code": "int process_input_and_return_last_index_08009358(undefined4 input_1, undefined4 input_2, undefined* input_array, int array_length){\n                      int current_index = 0;\n                      undefined* current_element_ptr = input_array;\n                      while(current_index < array_length){\n                          if(current_element_ptr == input_array + array_length){\n                              return 0;\n                          }\n                          int result = process_input_0800932c(input_1, *current_element_ptr, input_2, array_length, current_index);\n                          current_index = result + 1;\n                          current_element_ptr = current_element_ptr + 1;\n                      }\n                      return result;\n                  }",
            "called": [
                "FUN_0800932c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009358",
            "calling": [
                "FUN_0800937c"
            ],
            "imported": false,
            "current_name": "process_input_and_return_last_index_08009358"
        },
        "FUN_0800270c": {
            "renaming": {
                "FUN_0800270c": "difference_between_pointers_0800270c",
                "*PTR_DAT_08002718": "first_pointer",
                "*PTR_DAT_0800271c": "second_pointer",
                "(uint)(byte)": "type_cast_to_uint8_t"
            },
            "code": "int difference_between_pointers_0800270c(void)\n{\n    uint8_t* *PTR_DAT_08002718 = PTR_DAT_08002718;\n    uint8_t* *PTR_DAT_0800271c = PTR_DAT_0800271c;\n    uint difference = (uint)(byte)**PTR_DAT_08002718 - (uint)(byte)**PTR_DAT_0800271c;\n    return difference;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800270c",
            "calling": [
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "difference_between_pointers_0800270c"
        },
        "FUN_08003370": {
            "renaming": {
                "FUN_08003370": "set_values_08003370",
                "param_1": "object_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "code": "void set_values_08003370(int object_address, int value1, int value2, int value3){\n  *(int *)(object_address + 0x6c) = value2;\n  *(int *)(object_address + 0x44) = value3;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003370",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_values_08003370"
        },
        "FUN_08007fa0": {
            "renaming": {
                "FUN_08007fa0": "validate_input_08007fa0",
                "param_1": "input_ptr",
                "param_2": "input_flag",
                "param_3": "input_size",
                "param_4": "validation_flag",
                "iVar1": "sub_res"
            },
            "code": "void validate_input_08007fa0(int input_ptr,int input_flag,int input_size,undefined4 validation_flag) {\n  int sub_res = subtract_four_from_param();\n  if (input_size == *(int *)(input_ptr + 0xc)) {\n    if (input_flag == 0) {\n      *(undefined *)(sub_res + 0x88) = 0;\n      *(undefined *)(sub_res + 0x5c) = 0;\n      if (*(code **)(sub_res + 100) != (code *)0x0) {\n        (**(code **)(sub_res + 100))();\n      }\n      validate_input_08007fa0_080048c8(input_ptr,sub_res + 0x68,*(undefined *)(sub_res + 0x88),8);\n      return;\n    }\n    *(undefined *)(sub_res + 0x5c) = 1;\n    validate_input_08007fa0_08004954(input_ptr,sub_res + 0x68,0x20,8,validation_flag);\n  }\n  return;\n}",
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007fa0",
            "calling": [
                "FUN_08004ac2"
            ],
            "imported": false,
            "current_name": "validate_input_08007fa0"
        },
        "FUN_08003376": {
            "renaming": {
                "FUN_08003376": "update_buffer_if_larger_08003376",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "size",
                "bVar1": "is_larger"
            },
            "code": "void update_buffer_if_larger_08003376(uint8_t *buffer, uint8_t byte, uint size)\n{\n  bool is_larger = size >= *(uint *)(buffer + 8);\n  if (is_larger && *(code **)(buffer + 100) != (code *)0x0) {\n    *buffer = 1;\n    (**(code **)(buffer + 100))(*(uint32_t *)(buffer + 0x3c));\n    is_larger = size >= *(uint *)(buffer + 8);\n  }\n  if (!is_larger) {\n    *(buffer + *(int *)(buffer + 4) + size) = byte;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003376",
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "imported": false,
            "current_name": "update_buffer_if_larger_08003376"
        },
        "FUN_08008bf4": {
            "renaming": {
                "FUN_08008bf4": "calculate_value_if_not_zero_08008bf4",
                "DAT_08008c18": "value_offset",
                "PTR_DAT_08008c1c": "value_ptr",
                "calculate_value_at_offset_08008afa": "calculate_value_at_offset"
            },
            "code": "void calculate_value_if_not_zero_08008bf4() {\n  if (DAT_08008c18 != 0) {\n    calculate_value_at_offset(PTR_DAT_08008c1c);\n  }\n  return;\n}",
            "called": [
                "FUN_08008afa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf4",
            "calling": [
                "FUN_08008f1c"
            ],
            "imported": false,
            "current_name": "calculate_value_if_not_zero_08008bf4"
        },
        "FUN_08005430": {
            "renaming": {
                "FUN_08005430": "get_value_at_offset_08005430",
                "param_1": "base_address",
                "PTR_": "ptr_",
                "DAT_": "dat_"
            },
            "code": "int get_value_at_offset_08005430(int base_address)\n{\n    int value = *(int *)(base_address + 0x40);\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005430",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08005430"
        },
        "FUN_08002720": {
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "PTR_DAT_08002740": "data_index_ptr",
                "PTR_DAT_08002744": "data_length_ptr",
                "*(byte *)(*(int *)PTR_DAT_08002748 + (uint)bVar1)": "*(byte *)(*(int *)data_ptr + current_byte_index)",
                "bVar1": "current_byte_index",
                "bVar2": "next_byte"
            },
            "code": "uint get_next_byte_08002720(void)\n{\n  uint current_byte_index = *PTR_DAT_08002740;\n  if (current_byte_index < (uint)(byte)*PTR_DAT_08002744) {\n    byte next_byte = *(byte *)(*(int *)PTR_DAT_08002748 + (uint)bVar1);\n    *PTR_DAT_08002740 = current_byte_index + 1;\n    return (uint)next_byte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002720",
            "calling": [
                "FUN_08001c08"
            ],
            "imported": false,
            "current_name": "get_next_byte_08002720"
        },
        "FUN_080031ce": {
            "renaming": {
                "FUN_080031ce": "encode_and_send_data_to_device_080031ce",
                "param_1": "data_buffer",
                "param_2": "data_size",
                "param_3": "device_address",
                "param_4": "num_of_retries",
                "param_5": "delay_between_retries_ms",
                "puVar1": "device_ptr",
                "uVar2": "retry_counter",
                "encode_data_0800307a": "encode_data"
            },
            "code": "void encode_and_send_data_to_device_080031ce(uint8_t *data_buffer, uint8_t data_size, uint8_t device_address, uint8_t num_of_retries, int delay_between_retries_ms)\n{\n  uint8_t *device_ptr;\n  uint8_t retry_counter;\n  device_ptr = (uint8_t *)*data_buffer;\n  if (device_ptr != NULL)\n  {\n    (**(void (**)(uint8_t *, uint8_t, uint8_t, void *, uint8_t))(void *)*device_ptr)(device_ptr, 240, device_address, *(void **)device_ptr, num_of_retries);\n    (***(void (***)(uint8_t *))data_buffer)((uint8_t *)*data_buffer, 121);\n    (***(void (***)(uint8_t *))data_buffer)((uint8_t *)*data_buffer, data_size);\n    (***(void (***)(uint8_t *))data_buffer)((uint8_t *)*data_buffer, device_address);\n    for (retry_counter = 0; retry_counter < num_of_retries; retry_counter++)\n    {\n      encode_data(data_buffer, 1, delay_between_retries_ms + retry_counter, 0);\n    }\n    (***(void (***)(uint8_t *))data_buffer)((uint8_t *)*data_buffer, 247);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080031ce",
            "calling": [
                "FUN_08002df6"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_to_device_080031ce"
        },
        "FUN_08009918": {
            "renaming": {
                "FUN_08009918": "get_next_available_index_08009918",
                "param_1": "output_array",
                "param_2": "input_value",
                "puVar1": "ptr_to_dat",
                "iVar2": "index"
            },
            "code": "void get_next_available_index_08009918(int *output_array, undefined4 input_value) {\n  undefined *ptr_to_dat = PTR_DAT_08009934;\n  *(undefined4 *)PTR_DAT_08009934 = 0;\n  int index = getNextAvailableIndex_08008804(input_value);\n  if ((index == -1) && (*(int *)ptr_to_dat != 0)) {\n    *output_array = *(int *)ptr_to_dat;\n  }\n  return;\n}",
            "called": [
                "FUN_08008804"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009918",
            "calling": [
                "FUN_08009270"
            ],
            "imported": false,
            "current_name": "get_next_available_index_08009918"
        },
        "FUN_08005434": {
            "renaming": {
                "FUN_08005434": "count_down_08005434",
                "param_1": "num",
                "local_4": "countdown_length",
                "DAT_0800545c": "constant_multiplier",
                "PTR_DAT_08005458": "data_pointer"
            },
            "code": "void count_down_08005434(int num) {\n  int countdown_length = num * (uint64_t)DAT_0800545c * (uint64_t)*PTR_DAT_08005458 >> 0x29;\n  while (countdown_length > 0) {\n    countdown_length--;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005434",
            "calling": [
                "FUN_08005460"
            ],
            "imported": false,
            "current_name": "count_down_08005434"
        },
        "FUN_08005e2e": {
            "renaming": {
                "FUN_08005e2e": "set_bit_08005e2e",
                "param_1": "bits",
                "puVar1": "bit_array"
            },
            "code": "void set_bit_08005e2e(uint **bits)\n{\n  uint *bit_array = *bits;\n  *(undefined *)((int)bits + 0x3d) = 2;\n  if ((bit_array[8] & 0x1111) == 0) {\n    if ((bit_array[8] & 0x444) == 0) {\n      *bit_array = *bit_array & 0xfffffffe;\n    }\n  }\n  update_bits_in_memory_08007110(bits);\n  *(undefined *)((int)bits + 0x3d) = 0;\n  *(undefined *)(bits + 0xf) = 0;\n  return;\n}",
            "called": [
                "FUN_08007110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e2e",
            "calling": [
                "FUN_080071e4"
            ],
            "imported": false,
            "current_name": "set_bit_08005e2e"
        },
        "FUN_08007736": {
            "renaming": {
                "FUN_08007736": "execute_subtracted_value_08007736",
                "iVar1": "subtracted_value",
                "subtract_four_from_value_08007718": "subtract_four_from_value"
            },
            "code": "void execute_subtracted_value_08007736(void)\n{\n  int subtracted_value = subtract_four_from_value();\n  if (*(code **)(subtracted_value + 0x48) != (code *)0x0) {\n    (**(code **)(subtracted_value + 0x48))();\n  }\n  return;\n}",
            "called": [
                "FUN_08007718"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007736",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "execute_subtracted_value_08007736"
        },
        "FUN_08002968": {
            "renaming": {
                "FUN_08002968": "initialize_data_08002968",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "iVar1": "index",
                "iVar2": "offset",
                "ptr_data_f4": "PTR_DAT_080029f4",
                "ptr_data_a04": "PTR_DAT_08002a04",
                "ptr_data_f11": "ptr_data_f11",
                "ptr_data_f10": "ptr_data_f10",
                "DAT_08002a10": "DAT_08002a10",
                "PTR_LAB_08002774_1_08002a14": "PTR_LAB_08002774_1_08002a14",
                "PTR_LAB_08002b00_1_08002a18": "PTR_LAB_08002b00_1_08002a18"
            },
            "code": "void initialize_data_08002968(int data_ptr, uint data_size) {\n  int index;\n  int offset;\n  int value;\n  int *ptr_data_f4 = (int *) PTR_DAT_080029f4;\n  int *ptr_data_a04 = (int *) PTR_DAT_08002a04;\n  char *ptr_data_f11 = (char *) (data_ptr + 0x11);\n  char *ptr_data_f10 = (char *) (data_ptr + 0x10);\n\n  *PTR_DAT_080029ec = 0;\n  *PTR_DAT_080029f0 = 0;\n\n  if (*ptr_data_f4 != 0) {\n    fill_memory_with_value_080091c6(*ptr_data_f4, 0, *PTR_DAT_080029f8);\n  }\n\n  *PTR_DAT_080029fc = 0;\n  *PTR_DAT_08002a00 = 0;\n\n  if (*ptr_data_a04 != 0) {\n    fill_memory_with_value_080091c6(*ptr_data_a04, 0, *PTR_DAT_08002a08);\n  }\n\n  *PTR_DAT_08002a0c = 0;\n  index = (data_size & 0x7f) << 1;\n  *ptr_data_f10 = (char) index;\n\n  if (data_size == 0x33) {\n    *ptr_data_f11 = 1;\n  }\n  else {\n    *ptr_data_f11 = 0;\n  }\n\n  offset = data_ptr + 0x14;\n  FUNC_080077b0(offset, DAT_08002a10, 0x4000, index, *ptr_data_f11);\n\n  if (*ptr_data_f11 == 0) {\n    update_values_if_not_null_08007f8e(offset, PTR_LAB_08002774_1_08002a14);\n    set_param_value_08007f7c(offset, PTR_LAB_08002b00_1_08002a18);\n  }\n}\n",
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002968",
            "calling": [
                "FUN_08002a1c"
            ],
            "imported": false,
            "current_name": "initialize_data_08002968"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "process_input_08004ccc",
                "param_1": "input",
                "puVar1": "flag_ptr",
                "DAT_08004d3c": "current_char",
                "PTR_DAT_08004d44": "counter_ptr",
                "PTR_DAT_08004d48": "state_ptr"
            },
            "code": "uint32_t process_input_08004ccc(uint32_t **input)\n{\n    uint32_t *flag_ptr;\n    uint32_t *PTR_DAT_08004d44;\n    uint32_t *PTR_DAT_08004d48;\n    uint8_t DAT_08004d3c;\n\n    flag_ptr = input[11];\n    PTR_DAT_08004d44 = input[9];\n    PTR_DAT_08004d48 = *input;\n\n    if (*(char *)((int)input + 0x3d) == '!') {\n        if (*(short *)((int)input + 0x2a) == 0) {\n            if (((flag_ptr == (uint32_t *)0x4) || (flag_ptr == (uint32_t *)0x8)) || (flag_ptr == (uint32_t *)0xffff0000)) {\n                PTR_DAT_08004d48[1] = PTR_DAT_08004d48[1] & 0xfffff8ff;\n                *PTR_DAT_08004d48 = *PTR_DAT_08004d48 | 0x200;\n                input[12] = (uint32_t *)0x0;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                if (*(char *)((int)input + 0x3e) == '@') {\n                    *(undefined *)((int)input + 0x3e) = 0;\n                    do_nothing_08004b80();\n                }\n                else {\n                    *(undefined *)((int)input + 0x3e) = 0;\n                    do_nothing_08004a1e();\n                }\n            }\n            else {\n                PTR_DAT_08004d48[1] = PTR_DAT_08004d48[1] & 0xfffff8ff;\n                input[12] = (uint32_t *)0x11;\n                *(undefined *)((int)input + 0x3e) = 0;\n                *(undefined *)((int)input + 0x3d) = 0x20;\n                do_nothing_08004a1e();\n            }\n        }\n        else {\n            DAT_08004d3c = *(uint8_t *)PTR_DAT_08004d44;\n            PTR_DAT_08004d44 = (uint32_t *)((int)PTR_DAT_08004d44 + 1);\n            PTR_DAT_08004d48[4] = (uint32_t)DAT_08004d3c;\n            *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n    }\n    return 0;\n}",
            "called": [
                "FUN_08004b80",
                "FUN_08004a1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "process_input_08004ccc"
        },
        "FUN_080042d4": {
            "renaming": {
                "FUN_080042d4": "is_param2_bit_set_in_ptr1_plus_8_080042d4",
                "param_1": "ptr1",
                "param_2": "param2",
                "PTR_": "ptr",
                "DAT_": "data",
                "uint": "uint32_t"
            },
            "code": "int is_param2_bit_set_in_ptr1_plus_8_080042d4(uint32_t *PTR_1, uint32_t param2)\n{\n    uint32_t mask = *(PTR_1 + 2);\n    if ((param2 & mask) == 0) {\n        return 0;\n    }\n    return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042d4",
            "calling": [
                "FUN_080072f0"
            ],
            "imported": false,
            "current_name": "is_param2_bit_set_in_ptr1_plus_8_080042d4"
        },
        "FUN_0800542a": {
            "renaming": {
                "FUN_0800542a": "get_byte_from_address_offset_0800542a",
                "param_1": "address",
                "*(undefined *)(param_1 + 0x3d)": "offset",
                "undefined": "unsigned char",
                "PTR_": "ptr",
                "DAT_": "data"
            },
            "code": "unsigned char get_byte_from_address_offset_0800542a(unsigned int address, unsigned int offset) {\n    unsigned char* PTR_ = (unsigned char*)(address + offset);\n    return *PTR_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800542a",
            "calling": [
                "FUN_08007f0e",
                "FUN_08007e74"
            ],
            "imported": false,
            "current_name": "get_byte_from_address_offset_0800542a"
        },
        "FUN_0800457c": {
            "renaming": {
                "FUN_0800457c": "increment_byte_at_pointer_if_short_not_zero_0800457c",
                "param_1": "ptr_param_1",
                "pbVar1": "byte_ptr",
                "*(short *)((int)param_1 + 0x2a)": "*short_ptr",
                "uint": "uint",
                "*(uint *)(*param_1 + 0x10)": "*uint_ptr"
            },
            "code": "int increment_byte_at_pointer_if_short_not_zero_0800457c(int *ptr_param_1)\n{\n  short *short_ptr = (short *)((int)ptr_param_1 + 0x2a);\n  if (*short_ptr != 0) {\n    byte *byte_ptr = (byte *)ptr_param_1[9];\n    ptr_param_1[9] = (int)(byte_ptr + 1);\n    uint *uint_ptr = (uint *)(*ptr_param_1 + 0x10);\n    *uint_ptr = (uint)*byte_ptr;\n    *short_ptr = *short_ptr - 1;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800457c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_byte_at_pointer_if_short_not_zero_0800457c"
        },
        "FUN_080091c6": {
            "renaming": {
                "FUN_080091c6": "fill_memory_with_value_080091c6",
                "param_1": "memory_start",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "memory_end"
            },
            "code": "void fill_memory_with_value_080091c6(unsigned char* memory_start, unsigned char value, int length) {\n    unsigned char* memory_end = memory_start + length;\n    for (; memory_start != memory_end; memory_start++) {\n        *memory_start = value;\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091c6",
            "calling": [
                "FUN_08006d80",
                "FUN_08009d24",
                "FUN_08009cdc",
                "FUN_08002a58",
                "FUN_08009db0",
                "FUN_08002968",
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "fill_memory_with_value_080091c6"
        },
        "FUN_0800a07a": {
            "renaming": {
                "FUN_0800a07a": "process_and_update_data_0800a07a",
                "param_1": "data",
                "param_2": "data_info",
                "iVar1": "processed_data",
                "uVar2": "updated_data_info",
                "bVar3": "is_data_processed"
            },
            "code": "void process_and_update_data_0800a07a(undefined4 data, int data_info)\n{\n    int processed_data = process_data(data, (int)*(short *)(data_info + 0xe));\n    bool is_data_processed = processed_data == -1;\n    ushort updated_data_info;\n    if (is_data_processed) {\n        updated_data_info = *(ushort *)(data_info + 0xc) & 0xefff;\n    }\n    else {\n        *(int *)(data_info + 0x54) = processed_data;\n        updated_data_info = *(ushort *)(data_info + 0xc) | 0x1000;\n    }\n    *(ushort *)(data_info + 0xc) = updated_data_info;\n}\n",
            "called": [
                "FUN_0800a130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a07a",
            "calling": [],
            "imported": false,
            "current_name": "process_and_update_data_0800a07a"
        },
        "FUN_08003a20": {
            "renaming": {
                "FUN_08003a20": "set_flag_if_not_set_08003a20",
                "param_1": "data",
                "param_2": "flag",
                "iVar1": "current_data_value",
                "uVar2": "return_value",
                "iVar3": "data_ptr",
                "local_14": "iterations",
                "PTR_DAT_08003a98": "PTR_DATA_CONSTANT_2",
                "DAT_08003a9c": "DATA_CONSTANT_1"
            },
            "code": "int set_flag_if_not_set_08003a20(int *data, uint flag) {\n  int data_ptr = *data;\n  if ((*(uint *)(data_ptr + 8) & 1) == 0) {\n    *(uint *)(data_ptr + 8) = *(uint *)(data_ptr + 8) | 1;\n    uint iterations = (uint)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98 >> 0x32);\n    for (uint i = iterations; i != 0; i--) {\n    }\n    int initial_data_value = get_data_value(data, flag, (int)((ulonglong)DAT_08003a9c * (ulonglong)*(uint *)PTR_DAT_08003a98));\n    do {\n      if ((*(uint *)(*data + 8) & 1) != 0) {\n        return 0;\n      }\n      int current_data_value = get_data_value();\n    } while ((uint)(current_data_value - initial_data_value) < 3);\n    data[10] = data[10] | 0x10;\n    data[0xb] = data[0xb] | 1;\n    *(undefined *)(data + 9) = 0;\n    return 1;\n  }\n  else {\n    return 0;\n  }\n}",
            "called": [
                "FUN_08003760"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a20",
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "imported": false,
            "current_name": "set_flag_if_not_set_08003a20"
        },
        "FUN_080064b0": {
            "renaming": {
                "FUN_080064b0": "set_flags_and_value_of_param_080064b0",
                "*param_1": "*param_pointer",
                "*(uint *)(*param_1 + 0xc)": "*param_value_c",
                "*(uint *)(*param_1 + 0x14)": "*param_value_14",
                "*(undefined *)((int)param_1 + 0x3a)": "*param_1_plus_0x3a"
            },
            "code": "void set_flags_and_value_of_param_080064b0(int *param_pointer) {\n  uint *param_value_c = (uint *)(*param_pointer + 0xc);\n  uint *param_value_14 = (uint *)(*param_pointer + 0x14);\n  *param_value_c &= 0xfffffedf;\n  *param_value_14 &= 0xfffffffe;\n  char *param_1_plus_0x3a = (char *)(param_pointer + 0x3a);\n  *param_1_plus_0x3a = ' ';\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064b0",
            "calling": [
                "FUN_080069ec"
            ],
            "imported": false,
            "current_name": "set_flags_and_value_of_param_080064b0"
        },
        "FUN_08009cdc": {
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "code": "void initialize_data_08009cdc(undefined4 *data, undefined2 value1, undefined2 value2)\n{\n    *data = 0;\n    data[1] = 0;\n    data[2] = 0;\n    *(undefined2 *)(data + 3) = value1;\n    data[0x19] = 0;\n    *(undefined2 *)((int)data + 0xe) = value2;\n    data[4] = 0;\n    data[5] = 0;\n    data[6] = 0;\n    fill_memory_with_value_080091c6(data + 0x17, 0, 8);\n    data[8] = data;\n    data[9] = DAT_08009d14;\n    data[10] = PTR_process_user_input_0800a042_1_08009d18;\n    data[0xb] = PTR_process_and_update_data_0800a07a_1_08009d1c;\n    data[0xc] = PTR_LAB_0800a09e_1_08009d20;\n    return;\n}",
            "called": [
                "FUN_080091c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009cdc",
            "calling": [
                "FUN_08009d50"
            ],
            "imported": false,
            "current_name": "initialize_data_08009cdc"
        },
        "FUN_08002a58": {
            "renaming": {
                "FUN_08002a58": "send_request_08002a58",
                "param_1": "request_id",
                "iVar1": "response_code",
                "uVar2": "response_status",
                "PTR_DAT_08002ab0": "server_address",
                "PTR_DAT_08002aac": "server_port",
                "PTR_DAT_08002aa8": "timeout",
                "PTR_DAT_08002ab4": "buffer_size",
                "PTR_DAT_08002ab8": "response_buffer"
            },
            "code": "int send_request_08002a58(int request_id)\n{\n  int response_code;\n  if (*(char *)(request_id + 0x11) == '\\0') {\n    response_code = 4;\n  }\n  else {\n    response_code = send_data_and_check_response(request_id + 0x14, PTR_DAT_08002ab0, PTR_DAT_08002aac, PTR_DAT_08002aa8);\n    if (response_code == 0) {\n      response_code = 0;\n    }\n    else if (response_code == 1) {\n      response_code = 1;\n    }\n    else {\n      response_code = 4;\n    }\n    if (*(int *)PTR_DAT_08002aac != 0) {\n      fill_memory_with_value(*(int *)PTR_DAT_08002aac, 0, PTR_DAT_08002ab4);\n    }\n    *PTR_DAT_08002ab8 = 0;\n    *PTR_DAT_08002aac = 0;\n    *PTR_DAT_08002aa8 = 0;\n  }\n  return response_code;\n}\n",
            "called": [
                "FUN_080091c6",
                "FUN_08007e74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a58",
            "calling": [
                "FUN_08002b68",
                "FUN_08002ac0",
                "FUN_08001c18"
            ],
            "imported": false,
            "current_name": "send_request_08002a58"
        },
        "FUN_080026b0": {
            "renaming": {
                "FUN_080026b0": "calculate_and_store_position_080026b0",
                "param_1": "position",
                "param_2": "limit",
                "calculate_position_08008ef4": "calculate_position",
                "calculate_and_store_value_0800267c": "calculate_and_store_value"
            },
            "code": "void calculate_and_store_position_080026b0(int position,int limit)\n{\n    if (limit < 544) {\n        if (limit < 0) {\n            limit = 0;\n        }\n        else if (180 < limit) {\n            limit = 180;\n        }\n        limit = calculate_position(limit,0,180,(136 - *(char *)(position + 1)) * 4,(600 - *(char *)(position + 2)) * 4);\n    }\n    calculate_and_store_value(position,limit);\n    return;\n}",
            "called": [
                "FUN_0800267c",
                "FUN_08008ef4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080026b0",
            "calling": [
                "FUN_0800021a"
            ],
            "imported": false,
            "current_name": "calculate_and_store_position_080026b0"
        },
        "FUN_08006092": {
            "renaming": {
                "FUN_08006092": "check_data_integrity_08006092",
                "param_1": "data_array",
                "PTR_": "data_array_",
                "DAT_": "data_",
                "*param_1": "*data_array",
                "data_array + 1": "data_array_next",
                "*(char *)((int)param_1 + 0x3d)": "*(char *)((int)data_array + 0x3d)",
                "*(undefined *)(param_1 + 0xf)": "*(undefined *)(data_array + 0xf)",
                "FUNC_08006e68": "execute_data_validation",
                "update_memory_08005fe8": "update_memory"
            },
            "code": "int check_data_integrity_08006092(int *DAT_array)\\n{\\n    if (DAT_array != NULL) {\\n        if (*(char *)((int)DAT_array + 0x3d) == \"\\0\") {\\n            *(undefined *)(DAT_array + 0xf) = 0;\\n            execute_DAT_validation();\\n        }\\n        *(undefined *)((int)DAT_array + 0x3d) = 2;\\n        update_memory(*DAT_array, DAT_array + 1);\\n        *(undefined *)((int)DAT_array + 0x3d) = 1;\\n        return 0;\\n    }\\n    return 1;\\n}",
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006092",
            "calling": [
                "FUN_08007118"
            ],
            "imported": false,
            "current_name": "check_data_integrity_08006092"
        },
        "FUN_08008d8c": {
            "renaming": {
                "FUN_08008d8c": "initialize_struct_if_param1_equals_one_08008d8c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2",
                "PTR_DAT_08008dac": "PTR_DAT_08008dac",
                "DAT_08008da8": "DAT_08008da8"
            },
            "code": "void initialize_struct_if_param1_equals_one_08008d8c(int param1, int param2, int value1, int value2, int value3){\n  if (param1 == 1) {\n    if (param2 == 0xffff) {\n      initialize_struct_and_set_values(PTR_DAT_08008dac, DAT_08008da8, value1, value2, value3);\n    }\n  }\n}",
            "called": [
                "FUN_08008d30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008d8c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_struct_if_param1_equals_one_08008d8c"
        },
        "FUN_080004d4": {
            "renaming": {
                "FUN_080004d4": "process_input_080004d4",
                "param_1": "input",
                "param_2": "value",
                "iVar1": "i",
                "puVar2": "ptr",
                "increment_byte_and_store_08002580": "increment_byte_and_store"
            },
            "code": "void process_input_080004d4(unsigned char* ptr)\n{\n  (*ptr)++;\n  unsigned char* ptr2 = ptr + 1;\n  (*ptr2)++;\n  unsigned char* ptr3 = ptr + 2;\n  (*ptr3)++;\n}\n\nvoid process_input_080004d4(int input, int value)\n{\n  if (input == 1 && value == 0xffff)\n  {\n    unsigned char* ptr = PTR_DAT_080004fc;\n    for (int i = 0; i < 11; i++)\n    {\n      process_input_080004d4(ptr);\n      ptr += 3;\n    }\n  }\n}\n",
            "called": [
                "FUN_08002580"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d4",
            "calling": [],
            "imported": false,
            "current_name": "process_input_080004d4"
        },
        "FUN_080005f8": {
            "renaming": {
                "FUN_080005f8": "FUNC_080005f8"
            },
            "code": "\nvoid FUNC_080005f8(uint param_1,int param_2)\n\n{\n  undefined *puVar1;\n  int iVar2;\n  char cVar3;\n  bool bVar4;\n  uint uVar5;\n  \n  iVar2 = get_data_at_offset_08002fa0(PTR_DAT_08000874,param_1);\n  if (iVar2 != 0x7f) {\n    iVar2 = get_data_at_offset_08002fa0(PTR_DAT_08000874,param_1);\n    if (iVar2 == 6) {\n      cVar3 = *PTR_DAT_0800087c;\n      if (cVar3 == '\\0') {\n        cVar3 = '\\0';\n      }\n      else if (param_2 == 6) {\n        cVar3 = '\\0';\n      }\n    }\n    else {\n      cVar3 = '\\0';\n    }\n    if (cVar3 != '\\0') {\n      clear_memory_080005e0();\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else if (param_2 == 4) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((byte)PTR_DAT_08000880[param_1] < 0xc) {\n        iVar2 = get_byte_value_times_eight_080026f8(PTR_DAT_08000884 + (uint)(byte)PTR_DAT_08000880[param_1] * 3);\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        process_data_08000588(param_1);\n      }\n    }\n    uVar5 = param_1 - 0x2e & 0xff;\n    if (uVar5 < 0xe) {\n      if (param_1 < 0x3c) {\n        iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = find_character_index_080036ac(iVar2);\n      if (iVar2 == 0) {\n        bVar4 = false;\n      }\n      else {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_character_index_080036ac(iVar2);\n        if (iVar2 == 1) {\n          bVar4 = false;\n        }\n        else {\n          bVar4 = true;\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      set_bit_08000488(uVar5,param_2 == 2);\n    }\n    if (param_1 < 0x3c) {\n      if (PTR_DAT_08000878[param_1] == -1) {\n        bVar4 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac();\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n    }\n    else {\n      bVar4 = false;\n    }\n    if (bVar4) {\n      if ((param_2 == 0) || (param_2 == 0xb)) {\n        PTR_DAT_08000888[param_1 >> 3] = PTR_DAT_08000888[param_1 >> 3] | (byte)(1 << (param_1 & 7))\n        ;\n      }\n      else {\n        PTR_DAT_08000888[param_1 >> 3] =\n             PTR_DAT_08000888[param_1 >> 3] & ~(byte)(1 << (param_1 & 7));\n      }\n    }\n    set_value_at_index_08002fc2(PTR_DAT_08000874,param_1,0);\n    switch(param_2) {\n    case 0:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        update_character_stats_08008990(param_1,0);\n        check_and_update_value_08002fa8(PTR_DAT_08000874,param_1,0);\n        return;\n      }\n      break;\n    case 1:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        iVar2 = get_data_at_offset_08002fa0(PTR_DAT_08000a44,param_1);\n        if (iVar2 == 3) {\n          decode_value_08008a24(param_1,0);\n        }\n        update_character_stats_08008990(param_1,1);\n        check_and_update_value_08002fa8(PTR_DAT_08000a44,param_1,1);\n        return;\n      }\n      break;\n    case 2:\n      if (uVar5 < 0xe) {\n        if (param_1 < 0x3c) {\n          iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = find_character_index_080036ac(iVar2);\n        if (iVar2 == 0) {\n          bVar4 = false;\n        }\n        else {\n          if (param_1 < 0x3c) {\n            iVar2 = (int)(char)PTR_DAT_08000878[param_1];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = find_character_index_080036ac(iVar2);\n          if (iVar2 == 1) {\n            bVar4 = false;\n          }\n          else {\n            bVar4 = true;\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        if (param_1 < 0x3c) {\n          if (PTR_DAT_08000878[param_1] == -1) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac();\n            if (iVar2 == 0) {\n              bVar4 = false;\n            }\n            else {\n              iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n              if (iVar2 == 1) {\n                bVar4 = false;\n              }\n            }\n          }\n        }\n        else {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          update_character_stats_08008990(param_1,0);\n        }\n        check_and_update_value_08002fa8(PTR_DAT_08000874,param_1,2);\n        return;\n      }\n      break;\n    case 3:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = is_character_present_at_index_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a4c);\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        update_character_stats_08008990(param_1,1);\n        decode_character_080088e0(param_1,0);\n        check_and_update_value_08002fa8(PTR_DAT_08000a44,param_1,3);\n        return;\n      }\n      break;\n    case 4:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        check_and_update_value_08002fa8(PTR_DAT_08000a44,param_1,4);\n        if (((byte)PTR_DAT_08000a50[param_1] != 0xff) &&\n           (iVar2 = get_byte_value_times_eight_080026f8(PTR_DAT_08000a54 + (uint)(byte)PTR_DAT_08000a50[param_1] * 3),\n           iVar2 != 0)) {\n          bVar4 = false;\n        }\n        if (bVar4) {\n          update_character_stats_08000500(param_1,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_encoded_data_08002f14(PTR_DAT_08000a44,PTR_s_Unknown_pin_mode_08000a60);\n      break;\n    case 6:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000a48[param_1] == -1) {\n          iVar2 = 0;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            iVar2 = 0;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000a48[param_1]);\n            if (iVar2 == 1) {\n              iVar2 = 0;\n            }\n            else {\n              iVar2 = is_character_present_at_index_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a58);\n              if (iVar2 == 0) {\n                iVar2 = is_character_present_at_index_0800738a((int)(char)PTR_DAT_08000a48[param_1],PTR_DAT_08000a5c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        iVar2 = 0;\n      }\n      if (iVar2 != 0) {\n        check_and_update_value_08002fa8(PTR_DAT_08000a44,param_1,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (param_1 < 0x3c) {\n        if (PTR_DAT_08000878[param_1] == -1) {\n          bVar4 = false;\n        }\n        else {\n          iVar2 = find_character_index_080036ac();\n          if (iVar2 == 0) {\n            bVar4 = false;\n          }\n          else {\n            iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08000878[param_1]);\n            if (iVar2 == 1) {\n              bVar4 = false;\n            }\n            else {\n              bVar4 = true;\n            }\n          }\n        }\n      }\n      else {\n        bVar4 = false;\n      }\n      if (bVar4) {\n        update_character_stats_08008990(param_1,2);\n        puVar1 = PTR_DAT_08000a44;\n        check_and_update_value_08002fa8(PTR_DAT_08000a44,param_1,0xb);\n        set_value_at_index_08002fc2(puVar1,param_1,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080088e0",
                "FUN_08002fa0",
                "FUN_080036ac",
                "FUN_0800738a",
                "FUN_08008990",
                "FUN_080026f8",
                "FUN_08002fa8",
                "FUN_08000588",
                "FUN_08002fc2",
                "FUN_08002f14",
                "FUN_08000500",
                "FUN_080005e0",
                "FUN_08008a24",
                "FUN_08000488"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080005f8",
            "calling": [
                "FUN_08000aec",
                "FUN_08001cd0",
                "FUN_08000a64"
            ],
            "imported": false,
            "current_name": "FUNC_080005f8"
        },
        "FUN_08009124": {
            "renaming": {
                "FUN_08009124": "process_data_08009124",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "uStack_8": "stack_data1",
                "uStack_4": "stack_data2",
                "PTR_PTR_DAT_08009144": "PTR_PTR_DATA",
                "FUNC_0800937c": "call_function"
            },
            "code": "void process_data_08009124(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4)\n{\n  undefined4 stack_data1;\n  undefined4 stack_data2;\n  stack_data1 = data3;\n  stack_data2 = data4;\n  call_function(*(undefined4 *)PTR_PTR_DAT_08009144,&data1,&data2,&stack_data1,&data1,&stack_data1);\n  return;\n}",
            "called": [
                "FUN_0800937c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009124",
            "calling": [
                "FUN_080090cc"
            ],
            "imported": false,
            "current_name": "process_data_08009124"
        },
        "FUN_08002fa0": {
            "renaming": {
                "FUN_08002fa0": "get_data_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "data",
                "undefined": "unsigned char",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "unsigned char get_data_at_offset_08002fa0(int offset, unsigned char *data) {\n    return *(unsigned char *)(data + offset + 0xcc);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa0",
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8",
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "get_data_at_offset_08002fa0"
        },
        "FUN_080064ae": {
            "renaming": {
                "FUN_080064ae": "do_nothing_080064ae"
            },
            "code": "\nvoid do_nothing_080064ae(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ae",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ae"
        },
        "FUN_0800a424": {
            "renaming": {
                "FUN_0800a424": "do_nothing_0800a424"
            },
            "code": "\nvoid do_nothing_0800a424(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a424",
            "calling": [
                "FUN_08009148",
                "FUN_0800010c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800a424"
        },
        "FUN_08003a1c": {
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "address"
            },
            "code": "int get_value_at_offset_08003a1c(int address) {\n    return *(int *)(address + 0x28);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a1c",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "get_value_at_offset_08003a1c"
        },
        "FUN_080064ac": {
            "renaming": {
                "FUN_080064ac": "do_nothing_080064ac"
            },
            "code": "\nvoid do_nothing_080064ac(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ac",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_080064ac"
        },
        "FUN_08005cb4": {
            "renaming": {
                "FUN_08005cb4": "execute_if_flags_set_08005cb4",
                "param_1": "flags_ptr",
                "**param_1": "flags",
                "(*param_1)[1]": "second_flag",
                "DAT_08005ce8": "DAT_08005ce8",
                "*(undefined4 *)(DAT_08005ce8 + 0x14)": "*(uint *)(DAT_08005ce8 + 0x14)",
                "*(undefined *)((int)param_1 + 0x11)": "*(uchar *)((int)flags_ptr + 0x11)"
            },
            "code": "void execute_if_flags_set_08005cb4(uint **flags_ptr)\n{\n  uint flags = **flags_ptr;\n  uint second_flag = (*flags_ptr)[1];\n  if ((flags & 2) && (second_flag & 2)) {\n    execute_code_if_not_null_080073c0();\n    (*flags_ptr)[1] = 0xfffffffd;\n  }\n  *(undefined4 *)(DAT_08005ce8 + 0x14) = 0x20000;\n  *(uchar *)((int)flags_ptr + 0x11) = 1;\n  return;\n}",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cb4",
            "calling": [],
            "imported": false,
            "current_name": "execute_if_flags_set_08005cb4"
        },
        "FUN_08007744": {
            "renaming": {
                "FUN_08007744": "get_value_from_struct_08007744",
                "param_1": "struct_ptr",
                "PTR_": "inner_",
                "DAT_": "value"
            },
            "code": "unsigned int get_value_from_struct_08007744(int struct_ptr) {\n    int PTR_ptr = *(int *)(struct_ptr + 4);\n    unsigned int DAT_ = *(unsigned int *)(PTR_ptr + 0x24);\n    return DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007744",
            "calling": [],
            "imported": false,
            "current_name": "get_value_from_struct_08007744"
        },
        "FUN_08006538": {
            "renaming": {
                "FUN_08006538": "calculate_values_08006538",
                "param_1": "param_array",
                "*param_1": "*param_array",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "first_calculation",
                "iVar4": "fourth_calculation",
                "iVar5": "fifth_calculation",
                "iVar6": "sixth_calculation",
                "iVar7": "seventh_calculation",
                "iVar8": "second_calculation",
                "iVar9": "fourth_calculation",
                "iVar10": "fifth_calculation",
                "iVar11": "sixth_calculation",
                "iVar12": "ptr1",
                "PTR_DAT_080066e0": "DAT_value1",
                "PTR_DAT_080066e4": "DAT_value2"
            },
            "code": "void calculate_values_08006538(int *param_array)\n{\n    uint first_value = param_array[2];\n    uint second_value = param_array[4];\n    uint third_value = param_array[5];\n    uint *ptr1 = (uint *)(*param_array + 0xc);\n    *ptr1 = (first_value | second_value | third_value | (*ptr1 & 0xffffe9f3));\n    uint fourth_value = param_array[3];\n    uint *ptr2 = (uint *)(*param_array + 0x10);\n    *ptr2 = (*ptr2 & 0xffffcfff) | fourth_value;\n    uint fifth_value = param_array[6];\n    uint *ptr3 = (uint *)(*param_array + 0x14);\n    *ptr3 = (*ptr3 & 0xfffffcff) | fifth_value;\n    int *ptr4 = param_array;\n    if (*ptr4 != PTR_DAT_080066e0) {\n        uint first_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint second_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint third_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint fourth_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint fifth_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint sixth_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint seventh_calculation = get_first_value_divided_by_shifted_value_08005a28();\n        uint multiplication1 = PTR_DAT_080066e4 * ((uint)(sixth_calculation * 0x19) / (uint)(param_array[1] << 2) + ((PTR_DAT_080066e4 * ((uint)(seventh_calculation * 0x19) / (uint)(param_array[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32;\n        uint multiplication2 = PTR_DAT_080066e4 * ((uint)(fourth_calculation * 0x19) / (uint)(param_array[1] << 2) + ((PTR_DAT_080066e4 * ((uint)(fifth_calculation * 0x19) / (uint)(param_array[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32;\n        uint multiplication3 = PTR_DAT_080066e4 * ((uint)(first_calculation * 0x19) / (uint)(param_array[1] << 2)) >> 0x25;\n        uint result = ((uint)((int)(multiplication1 >> 0x20) << 0x17) >> 0x1c) + ((uint)(multiplication2 >> 0x25) & 0xf0) + (multiplication3 * 0x10);\n        *(uint *)(*param_array + 8) = result;\n    }\n    else {\n        uint first_calculation = get_first_value_and_shift_08005a48();\n        uint second_calculation = get_first_value_and_shift_08005a48();\n        uint third_calculation = get_first_value_and_shift_08005a48();\n        uint fourth_calculation = get_first_value_and_shift_08005a48();\n        uint fifth_calculation = get_first_value_and_shift_08005a48();\n        uint sixth_calculation = get_first_value_and_shift_08005a48();\n        uint seventh_calculation = get_first_value_and_shift_08005a48();\n        uint multiplication1 = PTR_DAT_080066e4 * ((uint)(sixth_calculation * 0x19) / (uint)(param_array[1] << 2) + ((PTR_DAT_080066e4 * ((uint)(seventh_calculation * 0x19) / (uint)(param_array[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32;\n        uint multiplication2 = PTR_DAT_080066e4 * ((uint)(fourth_calculation * 0x19) / (uint)(param_array[1] << 2) + ((PTR_DAT_080066e4 * ((uint)(fifth_calculation * 0x19) / (uint)(param_array[1] << 2))) >> 0x25) * -100) * 0x10 + 0x32;\n        uint multiplication3 = PTR_DAT_080066e4 * ((uint)(first_calculation * 0x19) / (uint)(param_array[1] << 2)) >> 0x25;\n        uint result = ((uint)((int)(multiplication1 >> 0x20) << 0x17) >> 0x1c) + ((uint)(multiplication2 >> 0x25) & 0xf0) + (multiplication3 * 0x10);\n        *(uint *)(*param_array + 8) = result;\n    }\n}",
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006538",
            "calling": [
                "FUN_0800674e"
            ],
            "imported": false,
            "current_name": "calculate_values_08006538"
        },
        "FUN_080042e2": {
            "renaming": {
                "FUN_080042e2": "set_param_080042e2",
                "param_1": "param_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "*(int *)(param_1 + 0x10)": "*(int *)(param_address + 0x10)"
            },
            "code": "void set_param_080042e2(int param_address, int value, int is_shifted) {\n  if (is_shifted == 0) {\n    *(int *)(param_address + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(param_address + 0x10) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042e2",
            "calling": [
                "FUN_080072d8"
            ],
            "imported": false,
            "current_name": "set_param_080042e2"
        },
        "FUN_08002fa8": {
            "renaming": {
                "FUN_08002fa8": "check_and_update_value_08002fa8",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "new_value"
            },
            "code": "void check_and_update_value_08002fa8(int base_address, int offset, undefined new_value) {\n  if (*(char *)(base_address + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(base_address + offset + 0xcc) = new_value;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fa8",
            "calling": [
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "check_and_update_value_08002fa8"
        },
        "FUN_0800325a": {
            "renaming": {
                "FUN_0800325a": "encode_and_send_data_0800325a",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_3": "num_data",
                "param_4": "offset",
                "puVar1": "function_ptr",
                "uVar2": "i"
            },
            "code": "void encode_and_send_data_0800325a(undefined4 *data_ptr, undefined4 data_size, uint num_data, int offset)\n{\n  undefined4 *function_ptr;\n  uint i;\n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,data_size);\n    for (i = 0; i < num_data; i++) {\n      encode_data_0800307a(data_ptr,1,offset + i,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}",
            "called": [
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800325a",
            "calling": [
                "FUN_080032a2",
                "FUN_08002f0a"
            ],
            "imported": false,
            "current_name": "encode_and_send_data_0800325a"
        },
        "FUN_080091d8": {
            "renaming": {
                "FUN_080091d8": "insert_into_linked_list_080091d8",
                "param_1": "new_element",
                "param_2": "list_size",
                "param_3": "error_code",
                "param_4": "unused_param",
                "puVar1": "current_element_ptr",
                "extraout_r1": "next_element_ptr",
                "ppiVar2": "prev_element_ptr",
                "ppiVar3": "current_element_ptr",
                "piVar4": "element",
                "ppiVar5": "next_element_ptr",
                "ppiVar6": "prev_element_ptr",
                "ppiVar7": "current_element_ptr"
            },
            "code": "void insert_into_linked_list_080091d8(int *new_element, int list_size, int error_code, int unused_param)\n{\n  int **current_element_ptr;\n  int **next_element_ptr;\n  int **prev_element_ptr;\n  \n  if (list_size == 0) {\n    return;\n  }\n  \n  current_element_ptr = (int **)(list_size - 4);\n  if (*(int *)(list_size - 4) < 0) {\n    current_element_ptr = (int **)((int)current_element_ptr + *(int *)(list_size - 4));\n  }\n  do_nothing_1();\n  next_element_ptr = *(int ***)PTR_DAT_0800926c;\n  if (next_element_ptr == (int **)0x0) {\n    current_element_ptr[1] = (int *)0x0;\n    *(int ***)PTR_DAT_0800926c = current_element_ptr;\n    prev_element_ptr = new_element;\n    current_element_ptr = (int **)PTR_DAT_0800926c;\n  }\n  else if (current_element_ptr < next_element_ptr) {\n    prev_element_ptr = (int **)*current_element_ptr;\n    current_element_ptr = (int **)((int)current_element_ptr + (int)prev_element_ptr);\n    if (next_element_ptr == current_element_ptr) {\n      int *element = *next_element_ptr;\n      next_element_ptr = (int **)next_element_ptr[1];\n      current_element_ptr = (int **)((int)element + (int)prev_element_ptr);\n      *current_element_ptr = (int *)next_element_ptr;\n    }\n    current_element_ptr[1] = (int *)next_element_ptr;\n    *(int ***)PTR_DAT_0800926c = current_element_ptr;\n  }\n  else {\n    do {\n      prev_element_ptr = next_element_ptr;\n      current_element_ptr = (int **)prev_element_ptr[1];\n      if (current_element_ptr == (int **)0x0) break;\n      next_element_ptr = current_element_ptr;\n    } while (current_element_ptr <= current_element_ptr);\n    prev_element_ptr = (int **)*prev_element_ptr;\n    if ((int **)((int)prev_element_ptr + (int)prev_element_ptr) == current_element_ptr) {\n      prev_element_ptr = (int **)((int)prev_element_ptr + (int)*current_element_ptr);\n      *prev_element_ptr = (int *)((int)prev_element_ptr + (int)new_element);\n      if (current_element_ptr == (int **)((int)prev_element_ptr + (int)*prev_element_ptr)) {\n        int *element = *current_element_ptr;\n        current_element_ptr = (int **)current_element_ptr[1];\n        prev_element_ptr = (int **)((int)prev_element_ptr + (int)element);\n        *prev_element_ptr = (int *)current_element_ptr;\n        prev_element_ptr[1] = (int *)element;\n      }\n    }\n    else if (current_element_ptr < (int **)((int)prev_element_ptr + (int)prev_element_ptr)) {\n      *new_element = 0xc;\n    }\n    else {\n      current_element_ptr = (int **)((int)current_element_ptr + (int)*current_element_ptr);\n      if (current_element_ptr == (int **)prev_element_ptr[1]) {\n        int *element = *current_element_ptr;\n        current_element_ptr = (int **)current_element_ptr[1];\n        prev_element_ptr = (int **)((int)element + (int)*current_element_ptr);\n        *new_element = (int *)((int)prev_element_ptr + (int)new_element);\n      }\n      current_element_ptr[1] = (int *)current_element_ptr;\n      prev_element_ptr[1] = (int *)current_element_ptr;\n    }\n  }\n  do_nothing_2(error_code,prev_element_ptr,current_element_ptr,unused_param);\n  return;\n}",
            "called": [
                "FUN_08009f48",
                "FUN_08009f4a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091d8",
            "calling": [
                "FUN_08009b5c",
                "FUN_08009908",
                "FUN_080091a0",
                "FUN_08009a80"
            ],
            "imported": false,
            "current_name": "insert_into_linked_list_080091d8"
        },
        "FUN_0800688e": {
            "renaming": {
                "FUN_0800688e": "check_and_set_values_0800688e",
                "param_1": "data",
                "param_2": "value_1",
                "param_3": "value_2",
                "PTR_": "",
                "DAT_": ""
            },
            "code": "int check_and_set_values_0800688e(int *data, int value_1, int value_2) {\\n \\\n    if (*(char *)((int)data + 0x39) != \" \") {\\n \\\n        return 2;\\n \\\n    }\\n \\\n    if (value_1 == 0 || value_2 == 0) {\\n \\\n        return 1;\\n \\\n    }\\n \\\n    if (*(char *)(data + 0xe) != \"\\x01\") {\\n \\\n        data[8] = value_1;\\n \\\n        *(short *)(data + 9) = (short)value_2;\\n \\\n        *(short *)((int)data + 0x26) = (short)value_2;\\n \\\n        data[0xf] = 0;\\n \\\n        *(undefined *)((int)data + 0x39) = 0x21;\\n \\\n        *(undefined *)(data + 0xe) = 0;\\n \\\n        *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\\n \\\n        return 0;\\n \\\n    }\\n \\\n    return 2;\\n \\\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800688e",
            "calling": [
                "FUN_08008694",
                "FUN_08008730"
            ],
            "imported": false,
            "current_name": "check_and_set_values_0800688e"
        },
        "FUN_080088e0": {
            "renaming": {
                "FUN_080088e0": "decode_character_080088e0",
                "param_1": "character_index",
                "param_2": "input_value",
                "iVar1": "bit_value",
                "uVar2": "bit_mask",
                "iVar3": "character_value",
                "is_character_present_at_index_0800738a": "get_bit_position",
                "update_character_stats_08008990": "update_character_stats",
                "decode_value_08008a24": "decode_value",
                "get_bit_08006b28": "get_bit",
                "set_bit_at_position_08006b3e": "set_bit_at_position",
                "configure_device_08007118": "configure_device",
                "PTR_DAT_0800897c": "character_array",
                "PTR_DAT_08008980": "bit_array",
                "PTR_DAT_08008984": "bit_position_array",
                "PTR_DAT_08008988": "bit_mask",
                "DAT_0800898c": "device_config_array"
            },
            "code": "void decode_character_080088e0(uint character_index, uint input_value) {\n    int character_value;\n    uint bit_position;\n    int bit_value;\n    if (character_index < 0x3c) {\n        character_value = (int)(char)PTR_DAT_0800897c[character_index];\n    }\n    else {\n        character_value = -1;\n    }\n    if (character_value != -1) {\n        bit_position = get_bit_position(character_value, PTR_DAT_08008980);\n        if (bit_position == 0) {\n            update_character_stats(character_index, 1);\n            if (*(uint *)PTR_DAT_08008988 != 8) {\n                if (*(uint *)PTR_DAT_08008988 < 9) {\n                    input_value = input_value << (8 - *(uint *)PTR_DAT_08008988 & 0xff);\n                }\n                else {\n                    input_value = input_value >> (*(uint *)PTR_DAT_08008988 - 8 & 0xff);\n                }\n            }\n            if (input_value < 0x80) {\n                decode_value(character_index, 0);\n            }\n            else {\n                decode_value(character_index, 1);\n            }\n        }\n        else {\n            bit_value = get_bit(bit_position, PTR_DAT_08008980);\n            if (bit_value == 0) {\n                set_bit_at_position(bit_position, PTR_DAT_08008980);\n            }\n            if (*(uint *)PTR_DAT_08008988 != 8) {\n                if (*(uint *)PTR_DAT_08008988 < 9) {\n                    input_value = input_value << (8 - *(uint *)PTR_DAT_08008988 & 0xff);\n                }\n                else {\n                    input_value = input_value >> (*(uint *)PTR_DAT_08008988 - 8 & 0xff);\n                }\n            }\n            configure_device(character_value, DAT_0800898c, 0xff, input_value, bit_value == 0);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_08008990",
                "FUN_0800738a",
                "FUN_08008a24",
                "FUN_08007118"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080088e0",
            "calling": [
                "FUN_0800021a",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "decode_character_080088e0"
        },
        "FUN_08008b66": {
            "renaming": {
                "FUN_08008b66": "process_input_08008b66",
                "param_1": "input",
                "iVar1": "is_valid_input",
                "uVar2": "incremented_value",
                "local_9": "local_variable"
            },
            "code": "void process_input_08008b66(int input)\n{\n  int is_valid_input;\n  ushort incremented_value;\n  undefined local_variable;\n  is_valid_input = check_valid_input(input,&local_variable);\n  if ((is_valid_input == 0) &&\n     (incremented_value = *(short *)(input + 0x60) + 1U & 0x3f, incremented_value != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = local_variable;\n    *(ushort *)(input + 0x60) = incremented_value;\n  }\n  return;\n}",
            "called": [
                "FUN_08008600"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b66",
            "calling": [],
            "imported": false,
            "current_name": "process_input_08008b66"
        },
        "FUN_0800870c": {
            "renaming": {
                "FUN_0800870c": "execute_function_0800870c",
                "uVar1": "function_index",
                "find_index_080086e8": "find_function_index",
                "PTR_DAT_08008728": "function_table",
                "PTR_DAT_0800872c": "parameter_table"
            },
            "code": "void execute_function_0800870c(void)\n{\n  uint32_t function_index = find_function_index();\n  if (function_index < 5) {\n    (*(code **)(PTR_DAT_08008728 + function_index * 4))(*(uint32_t *)(PTR_DAT_0800872c + function_index * 4));\n  }\n  return;\n}",
            "called": [
                "FUN_080086e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800870c",
            "calling": [
                "FUN_0800694c"
            ],
            "imported": false,
            "current_name": "execute_function_0800870c"
        },
        "FUN_08008840": {
            "renaming": {
                "FUN_08008840": "returnNegativeOne_08008840"
            },
            "code": "int32_t returnNegativeOne_08008840(void) {\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008840",
            "calling": [],
            "imported": false,
            "current_name": "returnNegativeOne_08008840"
        },
        "FUN_08008600": {
            "renaming": {
                "FUN_08008600": "check_valid_input_08008600",
                "param_1": "input_length",
                "param_2": "input_buffer",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "is_input_valid"
            },
            "code": "int check_valid_input_08008600(int input_length, char* input_buffer, int param_3, int param_4)\n{\n    if (input_length == 0) {\n        return -1;\n    }\n    int is_input_valid = is_valid_input();\n    if (is_input_valid == 0) {\n        *input_buffer = *(char*)(input_length + 0x45);\n        check_input(*(int*)(PTR_DAT_08008638 + (uint)*(byte*)(input_length + 0x44) * 4), input_length + 0x45, 1, PTR_DAT_08008638, param_4);\n        return 0;\n    }\n    return -1;\n}",
            "called": [
                "FUN_080068d6",
                "FUN_080085b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008600",
            "calling": [
                "FUN_08008b66"
            ],
            "imported": false,
            "current_name": "check_valid_input_08008600"
        },
        "FUN_08003154": {
            "renaming": {
                "FUN_08003154": "set_value_to_pointer_08003154",
                "param_1": "pointer",
                "param_2": "value",
                "*param_1": "*pointer"
            },
            "code": "void set_value_to_pointer_08003154(int *pointer, int value) {\n  *pointer = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003154",
            "calling": [
                "FUN_08002e26"
            ],
            "imported": false,
            "current_name": "set_value_to_pointer_08003154"
        },
        "FUN_08006420": {
            "renaming": {
                "FUN_08006420": "update_value_at_index_08006420",
                "param_1": "array_ptr",
                "param_2": "index",
                "param_3": "new_value",
                "*(uint *)(param_1 + 0x20)": "current_value",
                "bitmask": "bitmask",
                "4": "bit_shift_amount"
            },
            "code": "void update_value_at_index_08006420(int array_ptr, uint index, int new_value)\n{\n  uint bitmask = ~(4 << (index & 0xff));\n  uint current_value = *(uint *)(array_ptr + 0x20);\n  current_value = current_value & bitmask;\n  current_value = current_value | new_value << (index & 0xff);\n  *(uint *)(array_ptr + 0x20) = current_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006420",
            "calling": [
                "FUN_08006460",
                "FUN_0800643c"
            ],
            "imported": false,
            "current_name": "update_value_at_index_08006420"
        },
        "FUN_08007750": {
            "renaming": {
                "FUN_08007750": "store_value_at_index_08007750",
                "param_1": "array_ptr",
                "param_2": "index",
                "param_3": "value",
                "PTR_": "array_",
                "DAT_": "data_"
            },
            "code": "void store_value_at_index_08007750(int PTR_ptr, int index, int value) {\n  int* array = *(int *)(PTR_ptr + 4);\n  int* index_ptr = array + 0x34 + (index * 4);\n  *index_ptr = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007750",
            "calling": [],
            "imported": false,
            "current_name": "store_value_at_index_08007750"
        },
        "FUN_08009938": {
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "str",
                "param_2": "ch",
                "pcVar1": "current_char_ptr"
            },
            "code": "char* find_character_in_string_08009938(char* str, char ch) {\n  char* current_char_ptr;\n  do {\n    current_char_ptr = str;\n    if (*current_char_ptr == '\\0') {\n      if (ch != '\\0') {\n        current_char_ptr = NULL;\n      }\n      return current_char_ptr;\n    }\n    str = current_char_ptr + 1;\n  } while (ch != *current_char_ptr);\n  return current_char_ptr;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009938",
            "calling": [
                "FUN_0800997e"
            ],
            "imported": false,
            "current_name": "find_character_in_string_08009938"
        },
        "FUN_08007f0e": {
            "renaming": {
                "FUN_08007f0e": "process_and_validate_data_08007f0e",
                "param_1": "data_ptr",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "iVar1": "start_ptr",
                "iVar2": "process_result",
                "uVar3": "offset_diff",
                "iVar4": "validation_result",
                "iVar5": "data_ptr_offset",
                "uVar6": "param_4",
                "get_ptr_dat_value_08003760": "get_ptr_dat_value",
                "process_data_080047f4": "process_data",
                "get_byte_from_address_offset_0800542a": "get_byte_from_address_offset",
                "get_value_at_offset_08005430": "get_value_at_offset"
            },
            "code": "int process_and_validate_data_08007f0e(int data_ptr, undefined4 param_2, undefined4 param_3, undefined4 param_4)\n{\n  int start_ptr = get_ptr_dat_value();\n  uint offset_diff = 0;\n  int validation_result = 2;\n  do {\n    int data_ptr_offset = data_ptr + 4;\n    int process_result = process_data(data_ptr_offset, param_2, param_3, param_4);\n    if (process_result == 0) {\n      validation_result = 0;\n      int byte_value;\n      int check_result = 0;\n      do {\n        byte_value = get_byte_from_address_offset(data_ptr_offset);\n        if (byte_value != 0x20 && check_result == 0) {\n          int current_ptr = get_ptr_dat_value();\n          offset_diff = current_ptr - start_ptr;\n          if (offset_diff < 0x65) {\n            int value_at_offset = get_value_at_offset(data_ptr_offset);\n            if (value_at_offset != 0) {\n              check_result = 2;\n            }\n          }\n          else {\n            check_result = 1;\n          }\n        }\n      } while (byte_value != 0x20 && check_result == 0);\n    }\n    int value_at_offset = get_value_at_offset(data_ptr_offset);\n  } while (value_at_offset == 4 && offset_diff < 100);\n  return validation_result;\n}",
            "called": [
                "FUN_080047f4",
                "FUN_08003760",
                "FUN_08005430",
                "FUN_0800542a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f0e",
            "calling": [
                "FUN_08002b68"
            ],
            "imported": false,
            "current_name": "process_and_validate_data_08007f0e"
        },
        "FUN_08004004": {
            "renaming": {
                "FUN_08004004": "set_bit_in_array_08004004",
                "param_1": "index",
                "DAT_08004020": "array_start_ptr"
            },
            "code": "void set_bit_in_array_08004004(uint index)\n{\n  if (index >= 0) {\n    uint array_index = (index >> 5) + 0x60;\n    uint* array_ptr = (uint*)(DAT_08004020 + array_index * 4);\n    uint bit_index = index & 0x1f;\n    uint bit_mask = 1 << bit_index;\n    *array_ptr = bit_mask;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004004",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_array_08004004"
        },
        "FUN_08003158": {
            "renaming": {
                "FUN_08003158": "encode_or_process_data_08003158",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "param_3": "data_value",
                "puVar1": "function_ptr",
                "local_a": "encoded_data"
            },
            "code": "void encode_or_process_data_08003158(undefined4 *data_ptr, uint data_length, ushort data_value){\n    undefined4 *function_ptr;\n    ushort encoded_data;\n    \n    function_ptr = (undefined4 *)*data_ptr;\n    if (function_ptr != (undefined4 *)0x0) {\n        encoded_data = data_value;\n        if (((int)data_length < 0x10) && (data_value < 0x4000)) {\n            (**(code **)*function_ptr)(function_ptr,data_length | 0xe0);\n            encode_data(data_ptr,2,&encoded_data);\n        }\n        else {\n            process_data(data_ptr,data_length,2,&encoded_data);\n        }\n    }\n    return;\n}",
            "called": [
                "FUN_08003106",
                "FUN_0800307a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003158",
            "calling": [
                "FUN_08002ef2"
            ],
            "imported": false,
            "current_name": "encode_or_process_data_08003158"
        },
        "FUN_080090c2": {
            "renaming": {
                "FUN_080090c2": "calculate_result_and_swap_params_080090c2",
                "param_1": "num1",
                "param_2": "num2",
                "calculate_result_08009108": "calculate_result"
            },
            "code": "void calculate_result_and_swap_params_080090c2(int num1, int num2)\n{\n  calculate_result(num2, num1);\n  return;\n}",
            "called": [
                "FUN_08009108"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080090c2",
            "calling": [
                "FUN_08008f78"
            ],
            "imported": false,
            "current_name": "calculate_result_and_swap_params_080090c2"
        },
        "FUN_08000ef8": {
            "renaming": {
                "FUN_08000ef8": "FUNC_08000ef8"
            },
            "code": "\nvoid FUNC_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  if (*PTR_DAT_08001188 != '\\0') {\n    bVar1 = *PTR_DAT_0800118c;\n    if (*PTR_DAT_08001190 == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)*PTR_DAT_08001190);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001190[1] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[1]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(1);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001190[2] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[2]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(2);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001190[3] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[3]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(3);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001190[4] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[4]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(4);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001190[5] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[5]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(5);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001190[6] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[6]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(6);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001190[7] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001190[7]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(7);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    calculate_and_call_function_08000be8(0,bVar4);\n  }\n  if (PTR_DAT_08001188[1] != '\\0') {\n    bVar1 = PTR_DAT_0800118c[1];\n    if (PTR_DAT_08001190[8] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[8]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(8);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001424[9] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[9]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(9);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001424[10] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[10]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(10);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001424[0xb] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xb]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0xb);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001424[0xc] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xc]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0xc);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001424[0xd] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xd]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0xd);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001424[0xe] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xe]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0xe);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001424[0xf] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0xf]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0xf);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    calculate_and_call_function_08000be8(1,bVar4,0);\n  }\n  if (PTR_DAT_08001428[2] != '\\0') {\n    bVar1 = PTR_DAT_0800142c[2];\n    if (PTR_DAT_08001424[0x10] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001424[0x10]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x10);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x11] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x11]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x11);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_080016c4[0x12] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x12]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x12);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_080016c4[0x13] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x13]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x13);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_080016c4[0x14] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x14]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x14);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_080016c4[0x15] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x15]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x15);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_080016c4[0x16] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x16]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x16);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_080016c4[0x17] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x17]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x17);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    calculate_and_call_function_08000be8(2,bVar4,0);\n  }\n  if (PTR_DAT_080016c8[3] != '\\0') {\n    bVar1 = PTR_DAT_080016cc[3];\n    if (PTR_DAT_080016c4[0x18] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_080016c4[0x18]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x18);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_080016c4[0x19] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x19]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x19);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001960[0x1a] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1a]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x1a);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001960[0x1b] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1b]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x1b);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001960[0x1c] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1c]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x1c);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001960[0x1d] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1d]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x1d);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001960[0x1e] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1e]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x1e);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001960[0x1f] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x1f]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x1f);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    calculate_and_call_function_08000be8(3,bVar4,0);\n  }\n  if (PTR_DAT_08001964[4] != '\\0') {\n    bVar1 = PTR_DAT_08001968[4];\n    if (PTR_DAT_08001960[0x20] == -1) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x20]);\n        if (iVar2 == 1) {\n          bVar4 = 0;\n        }\n        else if ((bVar1 & 1) == 0) {\n          bVar4 = 0;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x20);\n          if (iVar2 == 0) {\n            bVar4 = 0;\n          }\n          else {\n            bVar4 = 1;\n          }\n        }\n      }\n    }\n    if (PTR_DAT_08001960[0x21] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001960[0x21]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 2) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x21);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    if (PTR_DAT_08001b44[0x22] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x22]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 4) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x22);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    if (PTR_DAT_08001b44[0x23] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x23]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 8) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x23);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    if (PTR_DAT_08001b44[0x24] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x24]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x10) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x24);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    if (PTR_DAT_08001b44[0x25] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x25]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x20) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x25);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    if (PTR_DAT_08001b44[0x26] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x26]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x40) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x26);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    if (PTR_DAT_08001b44[0x27] == -1) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = find_character_index_080036ac();\n      if (iVar2 == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = find_character_index_080036ac((int)(char)PTR_DAT_08001b44[0x27]);\n        if (iVar2 == 1) {\n          bVar3 = false;\n        }\n        else if ((bVar1 & 0x80) == 0) {\n          bVar3 = false;\n        }\n        else {\n          iVar2 = check_bit_in_dat_08008a6c(0x27);\n          if (iVar2 == 0) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n          }\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    calculate_and_call_function_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08000ef8",
            "calling": [
                "FUN_080022f8"
            ],
            "imported": false,
            "current_name": "FUNC_08000ef8"
        },
        "FUN_08008846": {
            "renaming": {
                "FUN_08008846": "set_memory_permissions_08008846",
                "param_1": "address",
                "param_2": "size_in_bytes",
                "*(undefined4 *)(param_2 + 4)": "*(int *)(address + 4)",
                "undefined4": "void",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "void set_memory_permissions_08008846(void *address, int size_in_bytes) {\n    int permissions = 0x2000;\n    *(int *)(address + 4) = permissions;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008846",
            "calling": [
                "FUN_0800a0ec"
            ],
            "imported": false,
            "current_name": "set_memory_permissions_08008846"
        },
        "FUN_0800a430": {
            "renaming": {
                "FUN_0800a430": "do_nothing_0800a430"
            },
            "code": "\nvoid do_nothing_0800a430(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a430",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800a430"
        },
        "FUN_0800459c": {
            "renaming": {
                "FUN_0800459c": "increment_and_store_char_0800459c",
                "param_1": "param_array",
                "puVar1": "char_ptr",
                "PTR_080482c4": "short_ptr"
            },
            "code": "int increment_and_store_char_0800459c(int *param_array){\n    short *PTR_080482c4 = (short *)((int)param_array + 0x2a);\n    if (*PTR_080482c4 != 0) {\n        char *char_ptr = (char *)param_array[9];\n        param_array[9] = (int)(char_ptr + 1);\n        *char_ptr = (char)*(int *)(*param_array + 0x10);\n        *PTR_080482c4 -= 1;\n    }\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800459c",
            "calling": [
                "FUN_08005188"
            ],
            "imported": false,
            "current_name": "increment_and_store_char_0800459c"
        },
        "FUN_0800774a": {
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "obj_addr",
                "param_2": "param_value",
                "PTR_": "ptr",
                "DAT_": "param_addr"
            },
            "code": "void set_param_value_0800774a(int obj_addr, int param_value){\n    int PTR_ = *(int *)(obj_addr + 4);\n    int DAT_ = PTR_ + 0x24;\n    *(int *)(DAT_) = param_value;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800774a",
            "calling": [],
            "imported": false,
            "current_name": "set_param_value_0800774a"
        },
        "FUN_080042f0": {
            "renaming": {
                "FUN_080042f0": "updateBitAndExecuteFunction_080042f0",
                "param_1": "bitPosition",
                "PTR_DAT_08004308": "DAT_08004308",
                "DAT_08004308": "dataBlock",
                "PTR_dat_08004308_14": "ptr_dat_08004308_14",
                "*(uint *)(DAT_08004308 + 0x14)": "*ptr_dat_08004308_14",
                "checkBitPositionAndExecuteFunction_08009094": "checkBitPositionAndExecuteFunction",
                "bitMask": "bitMask"
            },
            "code": "void updateBitAndExecuteFunction_080042f0(uint bitPosition)\n{\n  uint* PTR_dat_08004308_14 = (uint*)(PTR_DAT_08004308 + 0x14);\n  uint bitMask = 1 << bitPosition;\n  if ((*(uint *)(PTR_DAT_08004308 + 0x14) & bitMask) == 0)\n  {\n    *(uint *)(PTR_DAT_08004308 + 0x14) |= bitMask;\n    checkBitPositionAndExecuteFunction_08009094();\n  }\n  return;\n}",
            "called": [
                "FUN_08009094"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080042f0",
            "calling": [],
            "imported": false,
            "current_name": "updateBitAndExecuteFunction_080042f0"
        },
        "FUN_080027f0": {
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "address",
                "param_2": "data",
                "param_3": "length",
                "cVar1": "character",
                "puVar2": "pointer",
                "iVar3": "result",
                "uVar4": "value",
                "uVar5": "total_length"
            },
            "code": "uint process_data_080027f0(int address, undefined4 data, uint length)\n{\n  char character;\n  undefined *pointer;\n  int result;\n  undefined value;\n  uint total_length;\n  \n  pointer = PTR_DAT_08002884;\n  if (*PTR_DAT_08002878 == '\\0') {\n    result = copy_data_to_address_08007ede(address + 0x14, data, length & 0xffff);\n    if (result != 0) {\n      return 0;\n    }\n    return length;\n  }\n  total_length = (byte)*PTR_DAT_0800287c + length;\n  if ((byte)*PTR_DAT_08002880 < total_length) {\n    if (total_length < 0x20) {\n      total_length = 0x20;\n    }\n    result = allocate_and_insert_into_linked_list_08009908(*(undefined4 *)PTR_DAT_08002884, total_length);\n    *(int *)pointer = result;\n    if (result == 0) {\n      value = 0;\n    }\n    else {\n      value = (undefined)total_length;\n    }\n    *PTR_DAT_08002880 = value;\n  }\n  pointer = PTR_DAT_08002888;\n  if (*(int *)PTR_DAT_08002884 != 0) {\n    copy_string_080091b0((uint)(byte)*PTR_DAT_08002888 + *(int *)PTR_DAT_08002884, data, length);\n    character = *pointer + (char)length;\n    *pointer = character;\n    *PTR_DAT_0800287c = character;\n    return length;\n  }\n  *(undefined4 *)(address + 4) = 1;\n  return 0;\n}",
            "called": [
                "FUN_08009908",
                "FUN_08007ede",
                "FUN_080091b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080027f0",
            "calling": [],
            "imported": false,
            "current_name": "process_data_080027f0"
        },
        "FUN_0800314e": {
            "renaming": {
                "FUN_0800314e": "set_param_to_zero_0800314e",
                "param_1": "param_pointer"
            },
            "code": "void set_param_to_zero_0800314e(int *param_pointer) {\n  *param_pointer = 0;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800314e",
            "calling": [
                "FUN_08002ce0"
            ],
            "imported": false,
            "current_name": "set_param_to_zero_0800314e"
        },
        "FUN_080076e0": {
            "renaming": {
                "FUN_080076e0": "update_bits_080076e0",
                "*param_1": "*data",
                "cVar1": "value",
                "determine_value_08007544": "determine_value",
                "set_bit_in_array_08003fb0": "set_bit",
                "iVar2": "result",
                "update_bits_and_return_08005df4": "update_bits_and_return",
                "clear_bit_in_uint_array_080062f4": "clear_bit"
            },
            "code": "void update_bits_080076e0(undefined4 *data)\n{\n  char value = determine_value(*data);\n  set_bit(value);\n  int result = update_bits_080076e0_and_return(data + 1);\n  if (result == 0) {\n    clear_bit(data + 1, 0);\n  }\n  return;\n}",
            "called": [
                "FUN_080062f4",
                "FUN_08007544",
                "FUN_08005df4",
                "FUN_08003fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076e0",
            "calling": [
                "FUN_08002578"
            ],
            "imported": false,
            "current_name": "update_bits_080076e0"
        },
        "FUN_08002f14": {
            "renaming": {
                "FUN_08002f14": "send_encoded_data_08002f14",
                "param_1": "data",
                "send_encoded_data_to_server_080032a2": "send_encoded_data_to_server"
            },
            "code": "void send_encoded_data_08002f14(int data)\n{\n    int encoded_data = data + 0x40;\n    send_encoded_data_08002f14_to_server(encoded_data);\n    return;\n}",
            "called": [
                "FUN_080032a2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f14",
            "calling": [
                "FUN_08001cd0",
                "FUN_08000500",
                "FUN_08001c18",
                "FUN_080005f8"
            ],
            "imported": false,
            "current_name": "send_encoded_data_08002f14"
        },
        "FUN_080036a2": {
            "renaming": {
                "FUN_080036a2": "initialize_device_and_register_settings_080036a2",
                "PTR_": "",
                "DAT_": "",
                "initialize_device_and_register_settings_080072fa": "initialize_device_and_register_settings",
                "initialize_device": "initialize_device",
                "register_settings": "register_settings"
            },
            "code": "void initialize_device_and_register_settings_080036a2()\n{\n    initialize_device();\n    register_settings();\n    return;\n}",
            "called": [
                "FUN_080072fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036a2",
            "calling": [
                "FUN_08008f0e"
            ],
            "imported": false,
            "current_name": "initialize_device_and_register_settings_080036a2"
        },
        "FUN_080038e4": {
            "renaming": {
                "FUN_080038e4": "write_data_to_memory_080038e4",
                "param_1": "memory_address",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "data_index",
                "iVar3": "memory_index",
                "local_c": "i"
            },
            "code": "int write_data_to_memory_080038e4(int *memory_address, uint *data)\n{\n    int result = 0;\n    uint data_index = data[1];\n    int memory_index = *memory_address;\n    if (*(char *)(memory_address + 9) == '\\x01')\n    {\n        result = 2;\n    }\n    else\n    {\n        *(undefined *)(memory_address + 9) = 1;\n        if (data_index < 7)\n        {\n            data_index = data_index * 5 - 5;\n            *(uint *)(memory_index + 0x34) = data[0] << (data_index & 0xff) | *(uint *)(memory_index + 0x34) & ~(0x1f << (data_index & 0xff));\n        }\n        else if (data_index < 0xd)\n        {\n            data_index = data_index * 5 - 0x23;\n            *(uint *)(memory_index + 0x30) = data[0] << (data_index & 0xff) | *(uint *)(memory_index + 0x30) & ~(0x1f << (data_index & 0xff));\n        }\n        else\n        {\n            data_index = data_index * 5 - 0x41;\n            *(uint *)(memory_index + 0x2c) = data[0] << (data_index & 0xff) | *(uint *)(memory_index + 0x2c) & ~(0x1f << (data_index & 0xff));\n        }\n        data_index = data[0];\n        if (data_index < 10)\n        {\n            *(uint *)(memory_index + 0x10) = data[2] << (data_index * 3 & 0xff) | *(uint *)(memory_index + 0x10) & ~(7 << (data_index * 3 & 0xff));\n        }\n        else\n        {\n            data_index = data_index * 3 - 0x1e;\n            *(uint *)(memory_index + 0xc) = data[2] << (data_index & 0xff) | *(uint *)(memory_index + 0xc) & ~(7 << (data_index & 0xff));\n        }\n        if (data[0] - 0x10 < 2)\n        {\n            if (memory_index == DAT_08003a10)\n            {\n                if ((*(uint *)(memory_index + 8) & 0x800000) == 0)\n                {\n                    *(uint *)(memory_index + 8) = *(uint *)(memory_index + 8) | 0x800000;\n                    if (data[0] == 0x10)\n                    {\n                        for (int i = (uint)((ulonglong)DAT_08003a18 * (ulonglong)*PTR_DAT_08003a14 >> 0x32) * 10; i != 0; i = i + -1)\n                        {\n                        }\n                        result = 0;\n                    }\n                    else\n                    {\n                        result = 0;\n                    }\n                }\n                else\n                {\n                    result = 0;\n                }\n            }\n            else\n            {\n                memory_address[10] = memory_address[10] | 0x20;\n                result = 1;\n            }\n        }\n        *(undefined *)(memory_address + 9) = 0;\n    }\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080038e4",
            "calling": [
                "FUN_08006d80"
            ],
            "imported": false,
            "current_name": "write_data_to_memory_080038e4"
        },
        "FUN_08005e68": {
            "renaming": {
                "FUN_08005e68": "do_nothing_08005e68"
            },
            "code": "\nvoid do_nothing_08005e68(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005e68",
            "calling": [
                "FUN_08005e6e"
            ],
            "imported": false,
            "current_name": "do_nothing_08005e68"
        },
        "FUN_08005d48": {
            "renaming": {
                "FUN_08005d48": "update_data_structure_08005d48",
                "param_1": "struct_address",
                "param_2": "input_data",
                "uVar1": "new_value1",
                "uVar2": "new_value2",
                "uVar3": "new_value3",
                "mask1": "mask1",
                "mask2": "mask2",
                "mask3": "mask3",
                "mask4": "mask4",
                "DAT_08005da8": "PTR_DAT_08005da8"
            },
            "code": "void update_data_structure_08005d48(int struct_address, uint *input_data){\n  uint mask1 = 0xfffffeff;\n  uint mask2 = 0xfffffdff;\n  uint mask3 = 0xfffff7ff;\n  uint mask4 = 0xfffffbff;\n  uint new_value1 = (*(uint *)(struct_address + 0x20) & mask1) | (input_data[2] << 8);\n  uint new_value2 = *(uint *)(struct_address + 4);\n  uint new_value3 = input_data[1];\n  uint new_value4 = (*(uint *)(struct_address + 0x1c) & 0xffffff8c) | input_data[0];\n  uint new_value5 = input_data[2];\n  if (struct_address == DAT_08005da8) {\n    new_value1 = (new_value1 & mask3) | (input_data[3] << 8);\n    new_value2 = (new_value2 & 0xffffcfff) | (input_data[5] << 4) | (input_data[6] << 4);\n    new_value5 = input_data[3];\n  }\n  *(uint *)(struct_address + 0x20) = new_value1;\n  *(uint *)(struct_address + 4) = new_value2;\n  *(uint *)(struct_address + 0x1c) = new_value4;\n  *(uint *)(struct_address + 0x3c) = new_value3;\n  *(uint *)(struct_address + 0x28) = new_value5;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005d48",
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "imported": false,
            "current_name": "update_data_structure_08005d48"
        }
    },
    "used_tokens": 288329,
    "layers": [
        [
            "FUN_08002c2c",
            "FUN_08000178",
            "FUN_0800735a",
            "FUN_08008c20",
            "FUN_080043a2",
            "FUN_08008df8",
            "FUN_08006b5c",
            "FUN_08000188",
            "FUN_0800344a",
            "FUN_08008e72",
            "FUN_0800291c",
            "FUN_08003346",
            "FUN_080032bc",
            "FUN_08003f94",
            "FUN_0800430c",
            "FUN_08003350",
            "FUN_08006b7c",
            "FUN_08005fe8",
            "FUN_08008804",
            "FUN_0800738a",
            "FUN_08004e3c",
            "FUN_08007718",
            "FUN_08002a30",
            "FUN_0800322c",
            "FUN_080099a4",
            "FUN_08005a1c",
            "FUN_08003760",
            "FUN_08003fd8",
            "FUN_0800307a",
            "FUN_08008d00",
            "FUN_08004b82",
            "FUN_08003f30",
            "FUN_08007f78",
            "FUN_08006b28",
            "FUN_08006b1c",
            "FUN_08008f3c",
            "FUN_08007332",
            "FUN_080073e8",
            "FUN_08004a76",
            "FUN_0800267c",
            "FUN_080047f4",
            "FUN_080033a8",
            "FUN_08008d18",
            "FUN_08005840",
            "FUN_08003306",
            "FUN_080060c4",
            "FUN_08002f84",
            "FUN_08009f2c",
            "FUN_0800a154",
            "FUN_08002580",
            "FUN_08006b3e",
            "FUN_08006262",
            "FUN_080073ec",
            "FUN_08008ef4",
            "FUN_08005a68",
            "FUN_08002f94",
            "FUN_080068d6",
            "FUN_08009148",
            "FUN_08008854",
            "FUN_080064cc",
            "FUN_08004d6c",
            "FUN_08008850",
            "FUN_08002fc2",
            "FUN_08008afa",
            "FUN_080038dc",
            "FUN_08008858",
            "FUN_08004a24",
            "FUN_08002fba",
            "FUN_080049e0",
            "FUN_08006d24",
            "FUN_080048c8",
            "FUN_08009954",
            "FUN_08004024",
            "FUN_08002400",
            "FUN_08008868",
            "FUN_080036ac",
            "FUN_08002f1e",
            "FUN_080026f8",
            "FUN_08004396",
            "FUN_08003fb0",
            "FUN_08002ec4",
            "FUN_08007306",
            "FUN_08002f2c",
            "FUN_08004954",
            "FUN_08005cec",
            "FUN_0800886c",
            "FUN_08003748",
            "FUN_080040e8",
            "FUN_0800010c",
            "FUN_080086e8",
            "FUN_08004046",
            "FUN_080073ae",
            "FUN_08003f0c",
            "FUN_08006bb8",
            "FUN_08007438",
            "FUN_0800887c",
            "FUN_08004728",
            "FUN_08007ede",
            "thunk_FUN_0800887c",
            "FUN_080074e0",
            "FUN_080073c0",
            "FUN_08004050",
            "FUN_080095a8",
            "FUN_08003366",
            "FUN_080091b0",
            "FUN_08009108",
            "FUN_080005e0",
            "FUN_08005dac",
            "FUN_0800270c",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_08005430",
            "FUN_08002720",
            "FUN_08005434",
            "FUN_08004ccc",
            "FUN_080042d4",
            "FUN_0800542a",
            "FUN_0800457c",
            "FUN_080091c6",
            "FUN_080064b0",
            "FUN_08009124",
            "FUN_08002fa0",
            "FUN_08003a1c",
            "FUN_08007744",
            "FUN_080042e2",
            "FUN_08002fa8",
            "FUN_080091d8",
            "FUN_0800688e",
            "FUN_08008840",
            "FUN_08003154",
            "FUN_08006420",
            "FUN_08007750",
            "FUN_08009938",
            "FUN_08004004",
            "FUN_08008846",
            "FUN_0800459c",
            "FUN_0800774a",
            "FUN_0800314e",
            "FUN_080038e4",
            "FUN_08005d48"
        ],
        [
            "FUN_08007246",
            "FUN_08008694",
            "FUN_08002ce0",
            "FUN_080072f0",
            "FUN_0800a168",
            "FUN_0800723c",
            "FUN_08006280",
            "FUN_08007258",
            "FUN_0800a0ec",
            "FUN_08007376",
            "FUN_080033cc",
            "FUN_08003106",
            "FUN_08007708",
            "FUN_0800018c",
            "FUN_08006186",
            "FUN_08007710",
            "FUN_08008e7c",
            "FUN_080091a0",
            "FUN_08002948",
            "FUN_08007320",
            "FUN_0800319e",
            "FUN_0800997e",
            "FUN_080085dc",
            "FUN_0800a130",
            "FUN_08006128",
            "FUN_080062f4",
            "FUN_08005a48",
            "FUN_08007f7c",
            "FUN_080072d8",
            "FUN_08007e74",
            "FUN_08002ddc",
            "FUN_08007f8e",
            "FUN_08007110",
            "FUN_08009fe8",
            "FUN_0800734a",
            "FUN_08000aec",
            "FUN_08006390",
            "FUN_08008730",
            "FUN_08006ca8",
            "FUN_080063c0",
            "FUN_08005aa4",
            "FUN_0800643c",
            "FUN_080085b8",
            "FUN_08001c08",
            "FUN_08007ff0",
            "FUN_080036d8",
            "FUN_0800a110",
            "FUN_08003b8c",
            "FUN_08006460",
            "FUN_08008e14",
            "FUN_08005a28",
            "FUN_08008020",
            "FUN_0800771c",
            "FUN_080066e8",
            "FUN_08007fa0",
            "FUN_08008bf4",
            "FUN_080031ce",
            "FUN_08009918",
            "FUN_08007736",
            "FUN_08003a20",
            "FUN_08009cdc",
            "FUN_080026b0",
            "FUN_08006092",
            "FUN_080004d4",
            "FUN_08005cb4",
            "FUN_0800325a",
            "FUN_0800870c",
            "FUN_08007f0e",
            "FUN_080090c2"
        ],
        [
            "FUN_080067ac",
            "FUN_0800694c",
            "FUN_08006c7c",
            "FUN_08004f3c",
            "FUN_08003de4",
            "FUN_08006060",
            "FUN_08003474",
            "FUN_08003aa0",
            "FUN_08003ce8",
            "FUN_08009e64",
            "FUN_08002dbc",
            "FUN_080058d2",
            "FUN_08008ed6",
            "FUN_0800a020",
            "FUN_08006c60",
            "FUN_08006932",
            "FUN_080045c0",
            "FUN_08002efe",
            "FUN_08002df6",
            "FUN_08002c1e",
            "FUN_08008f78",
            "FUN_08008d30",
            "FUN_080032a2",
            "FUN_08005df4",
            "FUN_08004ac2",
            "FUN_08003724",
            "FUN_08002f0a",
            "FUN_08005bb8",
            "FUN_08009270",
            "FUN_08005e6e",
            "FUN_08009b5c",
            "FUN_08008a6c",
            "FUN_080058ac",
            "FUN_08004aec",
            "FUN_0800863c",
            "FUN_080084b0",
            "FUN_08003bd8",
            "FUN_08008a24",
            "FUN_08008abc",
            "FUN_08005e2e",
            "FUN_08002968",
            "FUN_0800a07a",
            "FUN_08002a58",
            "FUN_08006538",
            "FUN_08008600",
            "FUN_08003158"
        ],
        [
            "FUN_080069ec",
            "FUN_08009d24",
            "FUN_080071e4",
            "FUN_08005084",
            "FUN_08002ac0",
            "FUN_08002a1c",
            "FUN_08000be8",
            "FUN_08009190",
            "FUN_08002ef2",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08009eac",
            "FUN_08008eec",
            "FUN_080090cc",
            "FUN_08008500",
            "FUN_08002fca",
            "FUN_080052f0",
            "FUN_08002e26",
            "FUN_080035b8",
            "FUN_08002ed2",
            "FUN_08009908",
            "FUN_0800674e",
            "FUN_08008d8c",
            "FUN_08008b66",
            "FUN_08002f14"
        ],
        [
            "FUN_08005188",
            "FUN_080072fa",
            "FUN_08008c44",
            "FUN_08002a26",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08006d80",
            "FUN_0800885c",
            "FUN_08008990",
            "FUN_0800288c",
            "FUN_080027f0"
        ],
        [
            "FUN_0800a042",
            "FUN_08001bf8",
            "FUN_08000a64",
            "FUN_08008880",
            "FUN_08003002",
            "FUN_08002b68",
            "FUN_080036a2"
        ],
        [
            "FUN_08002c00",
            "FUN_08003048",
            "FUN_08008f0e",
            "FUN_08000488"
        ],
        [
            "FUN_08002c14",
            "FUN_08001b48"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_08008f1c"
        ],
        [
            "FUN_08003658"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009db0",
            "FUN_08009a80",
            "FUN_080098d8",
            "FUN_08009c7c"
        ],
        [
            "FUN_08007594",
            "FUN_08007544",
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c",
            "FUN_080075dc",
            "FUN_080076e0"
        ],
        [
            "FUN_08002578",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08009358"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_080025ac",
            "FUN_08000588",
            "FUN_0800021a"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ]
    ],
    "locked_functions": []
}