{
    "functions": {
        "FUN_000817c8": {
            "renaming": {
                "FUN_000817c8": "copy_param_to_stack_and_call_func_000817c8",
                "param_1": "original_param",
                "param_2": "stack_param_1",
                "param_3": "stack_param_2",
                "param_4": "stack_param_3",
                "uStack_c": "stack_param_2",
                "uStack_8": "stack_param_3",
                "uStack_4": "stack_param_4",
                "*DAT_000817ec": "function_pointer",
                "*(undefined4 *)(*DAT_000817ec + 8)": "second_param_of_func"
            },
            "code": "void copy_param_to_stack_and_call_func_000817c8(int param_1, int param_2, int param_3, int param_4)\n{\n  int stack_param_2 = param_2;\n  int stack_param_3 = param_3;\n  int stack_param_4 = param_4;\n  call_func_with_params(**DAT_000817ec, *(int *)(**DAT_000817ec + 8), param_1, &stack_param_2);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817c8",
            "calling": [
                "FUN_00080eec"
            ],
            "imported": false,
            "current_name": "copy_param_to_stack_and_call_func_000817c8"
        },
        "FUN_00081560": {
            "renaming": {
                "FUN_00081560": "compare_and_call_00081560",
                "param_1": "value1",
                "param_2": "value2",
                "FUN_0008151c": "call_error_handler"
            },
            "code": "int compare_and_call_00081560(int value1, int value2)\n{\n  if (value1 != value2) {\n    call_error_handler();\n  }\n  return value1;\n}",
            "called": [
                "FUN_0008151c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081560",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "compare_and_call_00081560"
        },
        "FUN_00083980": {
            "renaming": {
                "FUN_00083980": "do_nothing_00083980"
            },
            "code": "\nvoid do_nothing_00083980(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083980",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_00083980"
        },
        "FUN_00081684": {
            "renaming": {
                "FUN_00081684": "find_matching_bits_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "pattern",
                "param_4": "length",
                "iVar1": "matches"
            },
            "code": "int find_matching_bits_00081684(uint *data, uint mask, uint pattern, int length) {\n  int matches = 0;\n  while (length-- > 0) {\n    if ((*data & mask) != pattern) {\n      int i = length;\n      while (i-- > 0) {\n        if ((*data & mask) == pattern) {\n          return matches;\n        }\n        matches++;\n        data++;\n      }\n      return 0;\n    }\n    matches++;\n    data++;\n  }\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081684",
            "calling": [
                "FUN_00081624"
            ],
            "imported": false,
            "current_name": "find_matching_bits_00081684"
        },
        "FUN_000825cc": {
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_source_ptr",
                "puVar4": "source_ptr",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "destination_ptr",
                "bVar8": "is_short_zero"
            },
            "code": "void copy_string_000825cc(uint *destination, uint *source)\n{\n    char current_char;\n    ushort current_short;\n    uint *source_ptr;\n    uint *destination_ptr;\n    bool is_short_zero;\n\n    if ((((uint)destination ^ (uint)source) & 3) != 0) {\n        do {\n            current_char = *(char *)source;\n            *(char *)destination = current_char;\n            source = (uint *)((int)source + 1);\n            destination = (uint *)((int)destination + 1);\n        } while (current_char != '\\0');\n        return;\n    }\n\n    if (((uint)source & 3) != 0) {\n        source_ptr = source;\n        if (((uint)source & 1) != 0) {\n            source_ptr = (uint *)((int)source + 1);\n            current_char = *(char *)source;\n            *(char *)destination = current_char;\n            destination = (uint *)((int)destination + 1);\n            if (current_char == '\\0') {\n                return;\n            }\n        }\n        source = source_ptr;\n        if (((uint)source_ptr & 2) != 0) {\n            source = (uint *)((int)source_ptr + 2);\n            current_short = *(ushort *)source_ptr;\n            is_short_zero = (current_short & 0xff) == 0;\n            if (is_short_zero) {\n                *(char *)destination = (char)current_short;\n            }\n            else {\n                *(ushort *)destination = current_short;\n                is_short_zero = (current_short & 0xff00) == 0;\n                destination = (uint *)((int)destination + 2);\n            }\n            if (is_short_zero) {\n                return;\n            }\n        }\n    }\n\n    uint current_uint = *source;\n    source_ptr = source + 1;\n    destination_ptr = destination;\n\n    if (((uint)source & 4) != 0) {\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) {\n            goto LAB_00082630;\n        }\n        destination_ptr = destination + 1;\n        *destination = current_uint;\n        source_ptr = source + 2;\n        current_uint = source[1];\n    }\n\n    while (true) {\n        uint *next_source_ptr = source_ptr + 1;\n        uint next_uint = *source_ptr;\n        destination = destination_ptr;\n\n        if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) {\n            break;\n        }\n\n        destination_ptr = destination + 1;\n        *destination = current_uint;\n        current_uint = next_uint;\n\n        if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) {\n            break;\n        }\n\n        source_ptr = source_ptr + 2;\n        destination_ptr = destination + 2;\n        *destination = next_uint;\n    }\n\nLAB_00082630:\n    do {\n        *(char *)destination = (char)current_uint;\n        uint current_byte = current_uint & 0xff;\n        current_uint = current_uint >> 8 | current_uint << 0x18;\n        destination = (uint *)((int)destination + 1);\n    } while (current_byte != 0);\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825cc",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0",
                "FUN_0008151c"
            ],
            "imported": false,
            "current_name": "copy_string_000825cc"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_if_not_null_00080118",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "DAT_00080134": "should_use_default_param",
                "PTR_DAT_0008013c": "default_param",
                "DAT_00080140": "function_pointer",
                "DAT_00080144": "function_code"
            },
            "code": "void execute_function_if_not_null_00080118(int param1, char* param2, int param3, int* param4)\n{\n    if (DAT_00080134)\n    {\n        param2 = PTR_DAT_0008013c;\n    }\n    if ((*DAT_00080140 != NULL) && (DAT_00080144 != NULL))\n    {\n        (*DAT_00080144)(DAT_00080140, param2, param3, DAT_00080144, param4);\n    }\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "execute_function_if_not_null_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "bit_position",
                "uVar1": "mask"
            },
            "code": "int check_bit_and_set_00080aa8(uint8_t bit_position){\n  uint32_t mask;\n  if (bit_position < 45) {\n    if (bit_position < 32) {\n      mask = 1 << bit_position;\n      if ((mask & *(uint32_t *)(DAT_00080ae8 + 0x18)) != mask) {\n        *(uint32_t *)(DAT_00080ae8 + 0x10) = mask;\n      }\n    }\n    else {\n      mask = 1 << (bit_position - 32);\n      if ((mask & *(uint32_t *)(DAT_00080ae8 + 0x108)) != mask) {\n        *(uint32_t *)(DAT_00080ae8 + 0x100) = mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_000803fc",
                "FUN_000813dc",
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "check_bit_and_set_00080aa8"
        },
        "FUN_00080f0c": {
            "renaming": {
                "FUN_00080f0c": "check_param_00080f0c",
                "param_1": "index",
                "param_2": "param",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "bitmask",
                "uVar5": "flags",
                "uVar6": "uVar3",
                "uVar7": "uVar4",
                "uVar8": "uVar5",
                "uVar9": "uVar6",
                "uVar10": "uVar7",
                "uVar11": "uVar8",
                "uVar12": "uVar9",
                "uVar13": "uVar10",
                "uVar14": "uVar11",
                "uVar15": "uVar12"
            },
            "code": "int check_param_00080f0c(int index, int param) {\n  uint32_t bitmask;\n  uint8_t flags;\n  uint32_t uVar3;\n  uint32_t uVar4;\n  uint32_t uVar5;\n  uint32_t uVar6;\n  uint32_t uVar7;\n  uint32_t uVar8;\n  uint32_t uVar9;\n  uint32_t uVar10;\n  uint32_t uVar11;\n  uint32_t uVar12;\n  uint32_t uVar13;\n  uint32_t uVar14;\n  uint32_t uVar15;\n  undefined *data_ptr_1 = PTR_DAT_00081008;\n  undefined *data_ptr_2 = PTR_DAT_0008100c;\n  int result = index;\n  if (data_ptr_1[index * 0x1c + 0xc] != 0) {\n    if ((data_ptr_2[index] & 0xf) == 4) {\n      result = FUN_00080d58(DAT_00081010, data_ptr_1[index * 0x1c + 0x19]);\n    }\n    flags = data_ptr_2[index] & 0xf;\n    if (flags < 3 && data_ptr_2[index] != 0) {\n      if (flags == 2 && param == 0) {\n        return result;\n      }\n      else if (flags == 1 && param == 2) {\n        return result;\n      }\n      else if (flags == 3) {\n        if (param == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (param != 1) {\nLAB_00080f68:\n      if (param == 0) {\n        int data_ptr_index = index * 0x1c;\n        FUN_00080aa8(*(uint32_t *)(data_ptr_1 + data_ptr_index + 8));\n        uVar3 = FUN_00080a30(*(uint32_t *)(data_ptr_1 + data_ptr_index), 3, *(uint32_t *)(data_ptr_1 + data_ptr_index + 4), 0);\n        flags = data_ptr_2[index] & 0xf0 | 2;\n      }\n      else {\n        if (param != 2) {\n          return result;\n        }\n        int data_ptr_index = index * 0x1c;\n        FUN_00080aa8(*(uint32_t *)(data_ptr_1 + data_ptr_index + 8));\n        uVar3 = FUN_00080a30(*(uint32_t *)(data_ptr_1 + data_ptr_index), 3, *(uint32_t *)(data_ptr_1 + data_ptr_index + 4), 1);\n        flags = data_ptr_2[index] & 0xf0 | 1;\n      }\n      data_ptr_2[index] = flags;\n      return uVar3;\n    }\n    int data_ptr_index = index * 0x1c;\n    uVar4 = *(uint32_t *)(data_ptr_1 + data_ptr_index);\n    if (data_ptr_2[index] >> 4 == 0) {\n      uVar5 = 4;\n    }\n    else {\n      uVar5 = 5;\n    }\n    uVar6 = *(uint32_t *)(data_ptr_1 + data_ptr_index + 4);\n    uVar7 = *(uint32_t *)(data_ptr_1 + data_ptr_index + 0x10);\n    uVar8 = FUN_00080a30(uVar4, uVar5, uVar6, uVar7);\n    data_ptr_2[index] = data_ptr_2[index] & 0xf0 | 3;\n    if (*(int *)(uVar4 + 0x18) == -1) {\n      uVar9 = *(uint32_t *)(data_ptr_1 + data_ptr_index + 8);\n      if (uVar9 > 0x2c) {\n        return 1;\n      }\n      if (uVar9 < 0x20) {\n        uVar9 = 1 << (uVar9 & 0xff);\n        uVar10 = *(uint32_t *)(DAT_00080b28 + 0x18) & uVar9;\n        if (uVar10 == uVar9) {\n          *(uint32_t *)(DAT_00080b28 + 0x14) = uVar10;\n        }\n      }\n      else {\n        uVar9 = 1 << (uVar9 - 0x20 & 0xff);\n        uVar10 = *(uint32_t *)(DAT_00080b28 + 0x108) & uVar9;\n        if (uVar10 == uVar9) {\n          *(uint32_t *)(DAT_00080b28 + 0x104) = uVar10;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f0c",
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "check_param_00080f0c"
        },
        "FUN_00083a74": {
            "renaming": {
                "FUN_00083a74": "allocate_memory_block_00083a74",
                "param_1": "memory_pool_start",
                "param_2": "requested_size",
                "iVar1": "data_segment_start",
                "puVar2": "ptr_dat_00083b08",
                "iVar3": "data_segment_end",
                "uVar4": "header_word",
                "iVar5": "block_start"
            },
            "code": "int allocate_memory_block_00083a74(void *memory_pool_start, int requested_size) {\n  int data_segment_start = DAT_00083b04;\n  do_nothing_00081f94();\n  uint32_t header_word = *(uint32_t *)(*(int *)(data_segment_start + 8) + 4) & 0xfffffffc;\n  int block_start = ((header_word - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < block_start) {\n    int free_block = FUN_0008236c(memory_pool_start, 0);\n    if (free_block == *(int *)(data_segment_start + 8) + header_word) {\n      free_block = FUN_0008236c(memory_pool_start, -block_start);\n      undefined *ptr_dat_00083b08 = PTR_DAT_00083b08;\n      if (free_block != -1) {\n        int data_segment_end = *(int *)PTR_DAT_00083b08;\n        *(uint32_t *)(*(int *)(data_segment_start + 8) + 4) = header_word - block_start | 1;\n        *(int *)ptr_dat_00083b08 = data_segment_end - block_start;\n        do_nothing_00081f98(memory_pool_start);\n        return 1;\n      }\n      block_start = FUN_0008236c(memory_pool_start, 0);\n      undefined *ptr_dat_00083b08_00 = PTR_DAT_00083b08;\n      uint32_t block_size = block_start - *(int *)(data_segment_start + 8);\n      if (0xf < (int)block_size) {\n        int *dat_00083b0c = DAT_00083b0c;\n        *(uint32_t *)(*(int *)(data_segment_start + 8) + 4) = block_size | 1;\n        *(int *)ptr_dat_00083b08_00 = block_start - *dat_00083b0c;\n      }\n    }\n  }\n  do_nothing_00081f98(memory_pool_start);\n  return 0;\n}",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083a74",
            "calling": [
                "FUN_00083b10"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083a74"
        },
        "FUN_000844e0": {
            "renaming": {
                "FUN_000844e0": "findValueFromPointer_000844e0",
                "param_1": "outputValue",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "pointerToValue",
                "iVar2": "resultOfFunction"
            },
            "code": "void findValueFromPointer_000844e0(int *outputValue, undefined4 input1, undefined4 input2, undefined4 input3) {\n  undefined *pointerToValue = PTR_DAT_00084504;\n  *(undefined4 *)pointerToValue = 0;\n  int resultOfFunction = FUN_00080ebe(input1, input2, input3);\n  if (resultOfFunction == -1 && *(int *)pointerToValue != 0) {\n    *outputValue = *(int *)pointerToValue;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ebe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844e0",
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "imported": false,
            "current_name": "findValueFromPointer_000844e0"
        },
        "FUN_00083b10": {
            "renaming": {
                "FUN_00083b10": "allocate_memory_block_00083b10",
                "param_1": "heap_start",
                "param_2": "block_size",
                "iVar1": "prev_block",
                "uVar2": "block_header",
                "iVar3": "next_block",
                "uVar4": "block_size_aligned",
                "iVar5": "block_start",
                "iVar6": "block_index",
                "iVar8": "heap_end",
                "uVar7": "block_footer",
                "prev_block_size": "prev_block_size",
                "next_block_prev": "next_block_prev",
                "heap_bitmap": "heap_bitmap",
                "heap_bitmap_index": "heap_bitmap_index",
                "heap_bitmap_block": "heap_bitmap_block",
                "block_size_shifted": "block_size_shifted",
                "new_block_size": "new_block_size",
                "block_end": "block_end",
                "block_footer": "block_footer",
                "block_start": "block_start",
                "block_header": "block_header",
                "heap_size": "heap_size",
                "block_size_aligned": "block_size_aligned"
            },
            "code": "void allocate_memory_block_00083b10(uintptr_t heap_start, size_t block_size)\\n\\\n{\\n\\\n    if (block_size == 0) {\\n\\\n        return;\\n\\\n    }\\n\\\n    do_nothing_00081f94();\\n\\\n    int heap_end = DAT_00083c98;\\n\\\n    uint block_header = *(uint *)(block_size + heap_start - 4);\\n\\\n    int block_start = heap_start + block_header - 8;\\n\\\n    uint block_size_aligned = block_header & 0xfffffffe;\\n\\\n    int block_end = block_start + block_size_aligned;\\n\\\n    uint block_footer = *(uint *)(block_end + 4) & 0xfffffffc;\\n\\\n    if (*(int *)(DAT_00083c98 + 8) == block_end) {\\n\\\n        block_footer = block_footer + block_size_aligned;\\n\\\n        if (-1 < (int)(block_header << 0x1f)) {\\n\\\n            block_start = block_start - *(int *)(block_size - 8 + heap_start);\\n\\\n            int prev_block = *(int *)(block_start + 0xc);\\n\\\n            int next_block = *(int *)(block_start + 8);\\n\\\n            block_footer = block_footer + *(int *)(block_size - 8 + heap_start);\\n\\\n            *(int *)(next_block + 0xc) = prev_block;\\n\\\n            *(int *)(prev_block + 8) = next_block;\\n\\\n        }\\n\\\n        uint heap_size = *DAT_00083ca0;\\n\\\n        *(uint *)(block_size - 8 + heap_start + 4) = block_footer | 1;\\n\\\n        *(int *)(heap_end + 8) = block_size - 8 + heap_start;\\n\\\n        if (heap_size <= block_footer) {\\n\\\n            FUN_00083a74(heap_start, *(undefined4 *)PTR_DAT_00083ca4);\\n\\\n        }\\n\\\n    }\\n\\\n    else {\\n\\\n        block_header = block_header & 1;\\n\\\n        *(uint *)(block_end + 4) = block_footer;\\n\\\n        if (block_header == 0) {\\n\\\n            block_start = block_start - *(int *)(block_size - 8 + heap_start);\\n\\\n            int prev_block = *(int *)(block_start + 8);\\n\\\n            uint prev_block_size = block_size_aligned + *(int *)(block_size - 8 + heap_start);\\n\\\n            if (prev_block == heap_end + 8) {\\n\\\n                block_header = 1;\\n\\\n            }\\n\\\n            else {\\n\\\n                int next_block = *(int *)(block_start + 0xc);\\n\\\n                *(int *)(prev_block + 0xc) = next_block;\\n\\\n                *(int *)(next_block + 8) = prev_block;\\n\\\n            }\\n\\\n        }\\n\\\n        else {\\n\\\n            block_header = 0;\\n\\\n        }\\n\\\n        if (-1 < *(int *)(block_end + block_footer + 4) << 0x1f) {\\n\\\n            uint new_block_size = block_size_aligned + block_footer;\\n\\\n            int next_block = *(int *)(block_end + 8);\\n\\\n            if ((block_header == 0) && (next_block == DAT_00083c9c)) {\\n\\\n                *(int *)(heap_end + 0x14) = block_start;\\n\\\n                *(int *)(heap_end + 0x10) = block_start;\\n\\\n                *(int *)(block_start + 0xc) = next_block;\\n\\\n                *(int *)(block_start + 8) = next_block;\\n\\\n                *(uint *)(block_start + 4) = new_block_size | 1;\\n\\\n                *(uint *)(block_start + new_block_size) = new_block_size;\\n\\\n                goto LAB_00083ba4;\\n\\\n            }\\n\\\n            int next_block_prev = *(int *)(block_end + 0xc);\\n\\\n            *(int *)(next_block + 0xc) = next_block_prev;\\n\\\n            *(int *)(next_block_prev + 8) = next_block;\\n\\\n        }\\n\\\n        *(uint *)(block_size - 8 + heap_start + 4) = block_size_aligned | 1;\\n\\\n        *(uint *)(block_size - 8 + heap_start + block_size_aligned) = block_size_aligned;\\n\\\n        if (block_header == 0) {\\n\\\n            if (block_size_aligned < 0x200) {\\n\\\n                uint heap_bitmap = *(uint *)(heap_end + 4);\\n\\\n                int heap_bitmap_index = heap_end + (block_size_aligned & 0xfffffff8);\\n\\\n                int heap_bitmap_block = *(int *)(heap_bitmap_index + 8);\\n\\\n                *(int *)(block_start + 8) = heap_bitmap_block;\\n\\\n                *(int *)(block_start + 0xc) = heap_bitmap_index;\\n\\\n                *(uint *)(heap_end + 4) = heap_bitmap | 1 << ((int)(block_size_aligned >> 3) >> 2 & 0xffU);\\n\\\n                *(int *)(heap_bitmap_index + 8) = block_start;\\n\\\n                *(int *)(heap_bitmap_block + 0xc) = block_start;\\n\\\n                do_nothing_00081f98(heap_start);\\n\\\n                return;\\n\\\n            }\\n\\\n            uint block_size_shifted = block_size_aligned >> 9;\\n\\\n            if (block_size_shifted < 5) {\\n\\\n                int block_index = (block_size_aligned >> 6) + 0x38;\\n\\\n                int heap_bitmap_index = block_index * 2;\\n\\\n            }\\n\\\n            else if (block_size_shifted < 0x15) {\\n\\\n                int block_index = block_size_shifted + 0x5b;\\n\\\n                int heap_bitmap_index = block_index * 2;\\n\\\n            }\\n\\\n            else if (block_size_shifted < 0x55) {\\n\\\n                int block_index = (block_size_aligned >> 0xc) + 0x6e;\\n\\\n                int heap_bitmap_index = block_index * 2;\\n\\\n            }\\n\\\n            else if (block_size_shifted < 0x155) {\\n\\\n                int block_index = (block_size_aligned >> 0xf) + 0x77;\\n\\\n                int heap_bitmap_index = block_index * 2;\\n\\\n            }\\n\\\n            else if (block_size_shifted < 0x555) {\\n\\\n                int block_index = (block_size_aligned >> 0x12) + 0x7c;\\n\\\n                int heap_bitmap_index = block_index * 2;\\n\\\n            }\\n\\\n            else {\\n\\\n                int heap_bitmap_index = 0xfc;\\n\\\n                int block_index = 0x7e;\\n\\\n            }\\n\\\n            int heap_bitmap_block = heap_end + heap_bitmap_index * 4;\\n\\\n            int next_block = *(int *)(heap_bitmap_block + 8);\\n\\\n            if (next_block == heap_bitmap_block) {\\n\\\n                *(uint *)(DAT_00083c98 + 4) = *(uint *)(DAT_00083c98 + 4) | 1 << (block_index >> 2 & 0xffU);\\n\\\n                heap_bitmap_block = next_block;\\n\\\n            }\\n\\\n            else {\\n\\\n                do {\\n\\\n                    if ((*(uint *)(next_block + 4) & 0xfffffffc) <= block_size_aligned) break;\\n\\\n                    next_block = *(int *)(next_block + 8);\\n\\\n                } while (heap_bitmap_block != next_block);\\n\\\n                heap_bitmap_block = *(int *)(next_block + 0xc);\\n\\\n            }\\n\\\n            *(int *)(block_start + 0xc) = heap_bitmap_block;\\n\\\n            *(int *)(block_start + 8) = next_block;\\n\\\n            *(int *)(heap_bitmap_block + 8) = block_start;\\n\\\n            *(int *)(next_block + 0xc) = block_start;\\n\\\n        }\\n\\\n    }\\n\\\nLAB_00083ba4:\\n\\\n    do_nothing_00081f98(heap_start);\\n\\\n    return;\\n\\\n}",
            "called": [
                "FUN_00083a74",
                "FUN_00081f98",
                "FUN_00081f94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b10",
            "calling": [
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00083b10"
        },
        "FUN_00080e80": {
            "renaming": {
                "FUN_00080e80": "get_default_value_00080e80",
                "undefined4": "int",
                "PTR_": "PTR_",
                "DAT_": "DAT_"
            },
            "code": "int get_default_value_00080e80(void)\n{\n    int default_value = 0;\n    return default_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e80",
            "calling": [],
            "imported": false,
            "current_name": "get_default_value_00080e80"
        },
        "thunk_FUN_0008113a": {
            "renaming": {
                "thunk_FUN_0008113a": "format_number_thunk_0008113a",
                "param_1": "format_func",
                "param_2": "num",
                "param_3": "base",
                "param_4": "extra",
                "iVar1": "result",
                "iVar2": "minus",
                "FUN_000810cc": "format_minus",
                "FUN_000810fc": "format_number_base"
            },
            "code": "int format_number_thunk_0008113a(void* format_func, uint32_t num, uint8_t base, void* extra) {\n    int result;\n    if (base == 0) {\n        result = (**(code **)*format_func)(format_func,num & 0xff);\n        return result;\n    }\n    if (base == 10) {\n        if ((int)num < 0) {\n            int minus = FUN_000810cc(format_func,0x2d);\n            int abs_num = FUN_000810fc(format_func,-num,10);\n            result = abs_num + minus;\n            return result;\n        }\n    }\n    else {\n        base = base & 0xff;\n    }\n    result = FUN_000810fc(format_func,num,base,extra);\n    return result;\n}",
            "called": [
                "FUN_0008113a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081176",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "format_number_thunk_0008113a"
        },
        "FUN_0008236c": {
            "renaming": {
                "FUN_0008236c": "findAndSetParam_0008236c",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "puVar1": "ptr",
                "iVar2": "result"
            },
            "code": "void findAndSetParam_0008236c(int *outputParam, undefined4 inputParam)\n{\n  undefined *ptr = PTR_DAT_0008238c;\n  *(undefined4 *)ptr = 0;\n  int result = findValue(inputParam);\n  if ((result == -1) && (*(int *)ptr != 0)) {\n    *outputParam = *(int *)ptr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008236c",
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "findAndSetParam_0008236c"
        },
        "FUN_00080d62": {
            "renaming": {
                "FUN_00080d62": "setDefaultValues_00080d62",
                "param_1": "memoryAddress",
                "*(undefined4 *)(param_1 + 0x14)": "*(int *)(memoryAddress + 0x14)"
            },
            "code": "void setDefaultValues_00080d62(int memoryAddress)\n{\n    *(int *)(memoryAddress + 0x14) = 65535;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d62",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "setDefaultValues_00080d62"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "data_size",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "uVar1": "data_short",
                "uVar2": "data_uint",
                "puVar3": "buffer_ptr",
                "iVar4": "buffer_start",
                "FUN_00083888": "initialize_data",
                "FUN_0008356c": "process_data_helper",
                "FUN_00083850": "finalize_data"
            },
            "code": "uint process_data_000842a4(int data_size, uint data, undefined4 *buffer, undefined4 buffer_size)\n{\n  ushort data_short;\n  uint data_uint;\n  undefined *buffer_ptr;\n  int buffer_start;\n  \n  if ((data_size != 0) && (*(int *)(data_size + 0x38) == 0)) {\n    initialize_data();\n  }\n  data_short = *(ushort *)(buffer + 3);\n  data_uint = (uint)data_short;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(data_uint << 0x1c)) || (buffer_start = buffer[4], buffer_start == 0)) {\n    buffer_start = process_data_000842a4_helper(data_size, buffer, data_short, data_uint, buffer_size);\n    if (buffer_start != 0) {\n      return 0xffffffff;\n    }\n    data_short = *(ushort *)(buffer + 3);\n    buffer_start = buffer[4];\n    data_uint = (uint)data_short;\n  }\n  data = data & 0xff;\n  if ((int)(data_uint << 0x12) < 0) {\n    buffer_ptr = (undefined *)*buffer;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)buffer[5]) {\nLAB_000842d6:\n      buffer_start = buffer_start + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = data_short | 0x2000;\n    buffer_start = (int)buffer_ptr - buffer_start;\n    if (buffer_start < (int)buffer[5]) goto LAB_000842d6;\n  }\n  buffer_start = finalize_data(data_size, buffer);\n  if (buffer_start != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*buffer;\n  buffer_start = 1;\nLAB_000842d8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)data;\n  if (((buffer[5] == buffer_start) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (buffer_start = finalize_data(data_size, buffer), buffer_start != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_000842a4"
        },
        "FUN_000814f6": {
            "renaming": {
                "FUN_000814f6": "initialize_array_with_zeroes_000814f6",
                "param_1": "array_ptr",
                "param_2": "array_size",
                "uVar1": "temp_var",
                "FUN_00082688": "calculate_value",
                "FUN_000814d0": "set_array_values"
            },
            "code": "undefined4 *initialize_array_with_zeroes_000814f6(undefined4 *array_ptr, int array_size)\n{\n  undefined4 temp_var;\n  array_ptr[0] = 0;\n  array_ptr[1] = 0;\n  array_ptr[2] = 0;\n  if (array_size != 0) {\n    temp_var = calculate_value(array_size);\n    set_array_values(array_ptr, array_size, temp_var);\n  }\n  return array_ptr;\n}",
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814f6",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "initialize_array_with_zeroes_000814f6"
        },
        "FUN_0008397c": {
            "renaming": {
                "FUN_0008397c": "do_nothing_0008397c"
            },
            "code": "\nvoid do_nothing_0008397c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008397c",
            "calling": [
                "FUN_00084484"
            ],
            "imported": false,
            "current_name": "do_nothing_0008397c"
        },
        "FUN_0008074a": {
            "renaming": {
                "FUN_0008074a": "do_nothing_0008074a"
            },
            "code": "\nvoid do_nothing_0008074a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074a"
        },
        "FUN_00080e88": {
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "new_value",
                "puVar1": "data_pointer",
                "iVar2": "current_value"
            },
            "code": "int calculate_sum_00080e88(int new_value) {\n  undefined *data_pointer;\n  int current_value;\n  data_pointer = PTR_DAT_00080e9c;\n  if (*(int *)PTR_DAT_00080e9c == 0) {\n    *(undefined4 *)PTR_DAT_00080e9c = DAT_00080ea0;\n  }\n  current_value = *(int *)data_pointer;\n  *(int *)data_pointer = new_value + current_value;\n  return current_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e88",
            "calling": [
                "FUN_0008236c"
            ],
            "imported": false,
            "current_name": "calculate_sum_00080e88"
        },
        "FUN_0008074c": {
            "renaming": {
                "FUN_0008074c": "do_nothing_0008074c"
            },
            "code": "\nvoid do_nothing_0008074c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008074c",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008074c"
        },
        "FUN_000836d8": {
            "renaming": {
                "FUN_000836d8": "process_data_000836d8",
                "PTR_DAT_000836e8": "DATA_START_PTR",
                "DAT_000836e4": "DATA_COUNT",
                "PTR_DAT_000836d0": "DATA_BUFFER_PTR",
                "JUMP_TABLE_OFFSET": "JUMP_TABLE_OFFSET",
                "JUMP_TABLE_START_OFFSET": "JUMP_TABLE_START_OFFSET",
                "MAX_DATA_COUNT": "MAX_DATA_COUNT",
                "DAT_000836d4": "DATA_BUFFER_OVERFLOW",
                "FUN_000817f0": "allocate_memory",
                "UNRECOVERED_JUMPTABLE_00": "UNRECOVERED_JUMPTABLE_00"
            },
            "code": "void process_data_000836d8(void)\n{\n  char *data_ptr;\n  int data_count;\n  void (*function_ptr)(int);\n  int jump_table_offset;\n  int data_buffer_offset;\n  int *jump_table_ptr;\n  int *data_buffer_ptr;\n  \n  data_ptr = PTR_DAT_000836e8;\n  if (DAT_000836e4 == 0) {\n    return;\n  }\n  data_buffer_offset = *(int *)PTR_DAT_000836d0;\n  jump_table_ptr = *(int **)(data_buffer_offset + JUMP_TABLE_OFFSET);\n  if (jump_table_ptr == (int *)0x0) {\n    jump_table_ptr = (int *)(data_buffer_offset + JUMP_TABLE_START_OFFSET);\n    *(int **)(data_buffer_offset + JUMP_TABLE_OFFSET) = jump_table_ptr;\n  }\n  data_count = jump_table_ptr[1];\n  if (MAX_DAT_000836e4 < data_count) {\n    if ((DAT_000836d4 == 0) ||\n       (jump_table_ptr = (int *)allocate_memory(400), jump_table_ptr == (int *)0x0)) {\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    *jump_table_ptr = *(int *)(data_buffer_offset + JUMP_TABLE_OFFSET);\n    jump_table_ptr[1] = 0;\n    data_count = 0;\n    *(int **)(data_buffer_offset + JUMP_TABLE_OFFSET) = jump_table_ptr;\n    jump_table_ptr[98] = 0;\n    jump_table_ptr[99] = 0;\n  }\n  jump_table_ptr[1] = data_count + 1;\n  data_buffer_ptr[data_count + 2] = data_ptr;\n  (*function_ptr)(0);\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836d8",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "process_data_000836d8"
        },
        "FUN_000812b8": {
            "renaming": {
                "FUN_000812b8": "addValueToData_000812b8",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "data",
                "uVar2": "mask",
                "dataHeader": "dataHeader",
                "data": "data",
                "DAT_00081308": "DAT_00081308"
            },
            "code": "int addValueToData_000812b8(int dataPointer, int value) {\n  int data = *(int *)(dataPointer + 0x14);\n  int dataHeader = *(int *)(dataPointer + 0x18);\n  if ((*(int *)(dataHeader + 0x14) << 0x1e < 0) && (*(int *)(data + 0x84) == *(int *)(data + 0x80))) {\n    *(int *)(dataHeader + 0x1c) = value;\n  }\n  else {\n    uint mask = DAT_00081308 & (*(int *)(data + 0x80) + 1U);\n    if ((int)mask < 0) {\n      mask = (mask - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data + 0x84) == mask);\n    *(char *)(data + *(int *)(data + 0x80)) = (char)value;\n    *(uint *)(dataPointer + 0x14 + 0x80) = mask;\n    *(int *)(dataHeader + 8) = 2;\n  }\n  return 1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000812b8",
            "calling": [],
            "imported": false,
            "current_name": "addValueToData_000812b8"
        },
        "thunk_FUN_00080efe": {
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe",
                "undefined4": "int32_t"
            },
            "code": "int32_t get_error_code_thunk_00080efe(void)\n{\n    return -1;\n}",
            "called": [
                "FUN_00080efe"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008421c",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "get_error_code_thunk_00080efe"
        },
        "FUN_000839b4": {
            "renaming": {
                "FUN_000839b4": "process_input_000839b4",
                "param_1": "current_byte",
                "param_2": "input_length",
                "param_3": "input_buffer",
                "uVar1": "result",
                "iVar2": "index",
                "uVar3": "current_byte",
                "pbVar4": "output_buffer",
                "uVar5": "index",
                "local_1c": "current_byte",
                "abStack_1b": "temp_buffer"
            },
            "code": "uint process_input_000839b4(uint input_length, uint8_t **input_buffer) {\n  uint result = 0;\n  int index = 0;\n  uint8_t current_byte;\n  uint8_t temp_buffer[3];\n  uint8_t *output_buffer = *input_buffer;\n  uint8_t *temp_buffer_ptr = temp_buffer;\n\n  if ((uint)(*(ushort *)(input_buffer + 3)) << 0x12 > 0xffffffff) {\n    *(ushort *)(input_buffer + 3) |= 0x2000;\n    input_buffer[0x19] = (uint8_t *)((uint)input_buffer[0x19] | 0x2000);\n  }\n\n  uint result = FUN_0008400c();\n  if (result == 1 && input_length - 1 < 0xff) {\n    current_byte = (uint8_t)(input_length & 0xff);\n  }\n  else {\n    result = FUN_0008434c(current_byte, &current_byte, input_length, input_buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(input_buffer + 3) |= 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return input_length;\n    }\n  }\n\n  while (true) {\n    output_buffer--;\n    if (output_buffer < input_buffer[2]) {\n      if ((int)input_buffer[6] <= (int)output_buffer) {\n        **input_buffer = current_byte;\n        output_buffer = *input_buffer;\n        current_byte = *output_buffer;\n        if (current_byte != 10) {\n          index = FUN_000842a4(current_byte, current_byte, input_buffer);\n          if (index == -1) {\n            return 0xffffffff;\n          }\n        }\n      }\n      else {\n        **input_buffer = current_byte;\n        output_buffer = *input_buffer;\n      }\n      if (result <= index + 1) {\n        return input_length;\n      }\n      current_byte = temp_buffer[index];\n      index++;\n    }\n    else {\n      **input_buffer = current_byte;\n    }\n  }\n}",
            "called": [
                "FUN_0008400c",
                "FUN_0008434c",
                "FUN_000842a4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000839b4",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "process_input_000839b4"
        },
        "FUN_00081570": {
            "renaming": {
                "FUN_00081570": "transfer_data_00081570",
                "param_1": "data",
                "param_2": "data_len",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "current_offset",
                "FUN_000814ae": "copy_data",
                "FUN_000825cc": "write_to_device"
            },
            "code": "int transfer_data_00081570(int *data, int data_len, int offset) {\n  int current_offset = data[2];\n  if (data_len == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    int result = copy_data(data, current_offset + offset);\n    if (result == 0) {\n      return 0;\n    }\n    write_to_device(*data + data[2], data_len);\n    data[2] = current_offset + offset;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081570",
            "calling": [
                "FUN_0008159e"
            ],
            "imported": false,
            "current_name": "transfer_data_00081570"
        },
        "FUN_000803fc": {
            "renaming": {
                "FUN_000803fc": "set_channel_state_000803fc",
                "param_1": "channel_id",
                "param_2": "channel_state",
                "param_3": "channel_type",
                "param_4": "bit_position",
                "unaff_r4": "channel_type_ptr",
                "in_lr": "channel_info_ptr",
                "uVar1": "channel_info",
                "FUN_00080aa8": "set_channel_type",
                "FUN_00080b2c": "set_channel_bit",
                "FUN_00080b90": "set_channel_bit",
                "DAT_00080448": "bit_array_start",
                "PTR_s____source_tc_c_00080b80": "source_ptr",
                "PTR_s_TC_Start_00080b84": "start_ptr",
                "PTR_s_dwChannel____sizeof__pTc__TC_CHA_00080b88": "channel_ptr",
                "*DAT_00080b8c": "get_channel_info"
            },
            "code": "void set_channel_state_000803fc(int channel_id, uint32_t channel_state, uint32_t channel_type, uint32_t bit_position)\n{\n  uint64_t channel_info = ((uint64_t)channel_state << 32) | channel_id;\n  set_channel_type(channel_type);\n  set_channel_bit(channel_id, channel_state, 0xc002);\n  set_channel_bit(channel_id, channel_state, 0xa41);\n  uint32_t* bit_array_ptr = (uint32_t*)(0x00080448 + (bit_position >> 5) * 4);\n  *bit_array_ptr = 1 << (bit_position & 0x1f);\n  uint32_t* channel_info_ptr = (uint32_t*)(channel_id + channel_state * 0x40 + 0x24);\n  *channel_info_ptr = 4;\n  if (channel_state > 2) {\n    uint64_t* channel_info_ptr_64 = (uint64_t*)channel_info_ptr;\n    *channel_info_ptr_64 = *DAT_00080b8c();\n    *(channel_info_ptr_64 + 1) = 5;\n  }\n}\n",
            "called": [
                "FUN_00080b2c",
                "FUN_00080b90",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803fc",
            "calling": [
                "FUN_000806a0"
            ],
            "imported": false,
            "current_name": "set_channel_state_000803fc"
        },
        "FUN_00080eb0": {
            "renaming": {
                "FUN_00080eb0": "set_flag_at_offset_00080eb0",
                "param_1": "buffer",
                "param_2": "offset",
                "*(undefined4 *)(param_2 + 4)": "*flag_ptr",
                "0x2000": "flag"
            },
            "code": "void set_flag_at_offset_00080eb0(int* buffer, int offset) {\n    int flag = 0x2000;\n    int* flag_ptr = buffer + 1;\n    *flag_ptr = flag;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eb0",
            "calling": [
                "FUN_00084494"
            ],
            "imported": false,
            "current_name": "set_flag_at_offset_00080eb0"
        },
        "FUN_00081214": {
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "data_buffer",
                "param_2": "lookup_table",
                "param_3": "lookup_table_size",
                "uVar1": "current_lookup_index",
                "FUN_000814f6": "initialize_lookup_table",
                "FUN_000811e8": "get_next_lookup_index",
                "FUN_0008159e": "process_byte"
            },
            "code": "void process_data_00081214(uint8_t* data_buffer, uint8_t* lookup_table, uint lookup_table_size)\n{\n  uint8_t* current_byte_ptr;\n  uint current_lookup_index;\n  \n  initialize_lookup_table(data_buffer, lookup_table, lookup_table_size);\n  while ((current_lookup_index = get_next_lookup_index(current_byte_ptr), current_lookup_index != -1 && current_lookup_index != lookup_table_size)) {\n    process_byte(data_buffer, current_byte_ptr, current_lookup_index);\n  }\n  return;\n}",
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081214",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_00081214"
        },
        "FUN_0008439c": {
            "renaming": {
                "FUN_0008439c": "write_byte_to_buffer_0008439c",
                "param_1": "buffer",
                "param_2": "byte",
                "param_3": "buffer_size",
                "*param_1": "*buffer",
                "*param_2": "*byte"
            },
            "code": "int write_byte_to_buffer_0008439c(uint8_t *buffer, uint8_t byte, uint buffer_size) {\n    if (buffer == NULL) {\n        return 0;\n    }\n    if (buffer_size < 256) {\n        *buffer = byte;\n        return 1;\n    }\n    *buffer = 0x8a;\n    return -1;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008439c",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "write_byte_to_buffer_0008439c"
        },
        "FUN_00082824": {
            "renaming": {
                "FUN_00082824": "perform_operation_00082824",
                "param_1": "value",
                "param_2": "length",
                "param_3": "data",
                "piVar1": "current_data",
                "iVar2": "result",
                "piVar3": "current_data_length",
                "uVar4": "i",
                "puVar5": "current_data_ptr",
                "uVar6": "data_length",
                "uVar7": "j"
            },
            "code": "int perform_operation_00082824(undefined4 value, int length, int **data)\n{\n  int *current_data;\n  int result;\n  int *current_data_length;\n  uint data_length;\n  undefined4 *current_data_ptr;\n  uint i;\n  uint j;\n  \n  if (-1 < *(int *)(length + 100) << 0x12) {\n    result = FUNC_00083ca8();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  current_data_length = data[2];\n  current_data = *data;\n  while (current_data_length != (int *)0x0) {\n    j = current_data[1];\n    data_length = j >> 2;\n    if (data_length != 0) {\n      current_data_ptr = (undefined4 *)(*current_data + -4);\n      i = 0;\n      do {\n        current_data_ptr = current_data_ptr + 1;\n        result = FUN_000839b4(value,*current_data_ptr,length);\n        i = i + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (data_length != i);\n      current_data_length = data[2];\n    }\n    current_data_length = (int *)((int)current_data_length - (j & 0xfffffffc));\n    data[2] = current_data_length;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}",
            "called": [
                "FUN_000839b4",
                "FUN_00083ca8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082824",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "perform_operation_00082824"
        },
        "FUN_0008427c": {
            "renaming": {
                "FUN_0008427c": "update_status_0008427c",
                "param_1": "device_id",
                "param_2": "status_address",
                "iVar1": "device_status",
                "uVar2": "updated_status"
            },
            "code": "void update_status_0008427c(int device_id, int status_address)\n{\n    int device_status = get_device_status(device_id, *(short *)(status_address + 0xe));\n    ushort updated_status;\n    if (device_status == -1) {\n        updated_status = *(ushort *)(status_address + 0xc) & 0xefff;\n    }\n    else {\n        updated_status = *(ushort *)(status_address + 0xc) | 0x1000;\n    }\n    if (device_status != -1) {\n        *(int *)(status_address + 0x50) = device_status;\n    }\n    *(ushort *)(status_address + 0xc) = updated_status;\n}",
            "called": [
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008427c",
            "calling": [],
            "imported": false,
            "current_name": "update_status_0008427c"
        },
        "FUN_000809be": {
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "data_address",
                "param_2": "update_type",
                "param_3": "update_value",
                "uVar1": "updated_data"
            },
            "code": "void update_data_000809be(int data_address, uint32_t update_type, uint32_t update_value)\n{\n  uint32_t updated_data;\n  *(uint32_t *)(data_address + 0x44) = update_value;\n  switch(update_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_data = *(uint32_t *)(data_address + 0x70) & *(uint32_t *)(data_address + 0x70) & ~update_value;\n    break;\n  case 2:\n    updated_data = *(uint32_t *)(data_address + 0x70) | update_value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint32_t *)(data_address + 0x70) = updated_data;\nswitchD_000809c4_caseD_6:\n  *(uint32_t *)(data_address + 4) = update_value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809be",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "update_data_000809be"
        },
        "FUN_00080a94": {
            "renaming": {
                "FUN_00080a94": "check_params_00080a94",
                "param_1": "param_offset",
                "param_2": "mask",
                "uVar1": "filtered_mask"
            },
            "code": "uint check_params_00080a94(int param_offset, uint mask) {\n  uint filtered_mask = *(uint *)(param_offset + 8) & mask;\n  if (filtered_mask != 0) {\n    if ((mask & *(uint *)(param_offset + 0x18)) == 0) {\n      filtered_mask = 0;\n    }\n    else {\n      filtered_mask = 1;\n    }\n  }\n  return filtered_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a94",
            "calling": [
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "check_params_00080a94"
        },
        "FUN_00081618": {
            "renaming": {
                "FUN_00081618": "set_flag_00081618",
                "DAT_00081620": "flag_data",
                "PTR_": "No renaming"
            },
            "code": "void set_flag_00081618(void)\n{\n    int* flag_ptr = (int*)(DAT_00081620 + 4);\n    *flag_ptr = 0x8000;\n    return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081618",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "set_flag_00081618"
        },
        "FUN_0008455c": {
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "factor1",
                "param_4": "factor2",
                "param_5": "difference",
                "uVar1": "product"
            },
            "code": "void calculate_difference_0008455c(uint input1, int input2, uint factor1, uint factor2, int *difference) {\n  uint product = input1 * ((long long) factor2 << 32 | factor1);\n  *difference = input1 - product;\n  *difference = input2 - ((int)(product >> 32) - (input1 < product));\n  return;\n}",
            "called": [
                "FUN_000845c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008455c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008455c"
        },
        "FUN_000840f8": {
            "renaming": {
                "FUN_000840f8": "find_char_in_array_000840f8",
                "param_1": "array",
                "param_2": "character",
                "param_3": "array_end",
                "puVar1": "current_element",
                "uVar2": "element_value",
                "pcVar3": "current_char",
                "pcVar4": "last_char",
                "bVar5": "character_found"
            },
            "code": "uint *find_char_in_array_000840f8(uint *array, char character, uint *array_end)\n{\n  uint *current_element;\n  uint element_value;\n  char *current_char;\n  char *last_char;\n  bool character_found;\n  \n  if (((uint)array & 3) == 0) {\n    current_element = array;\n    if ((uint *)0x3 < array_end) {\n      do {\n        element_value = *array ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        current_element = array;\n        if ((element_value + 0xfefefeff & ~element_value & 0x80808080) != 0) break;\n        array_end = array_end + -1;\n        current_element = array + 1;\n        array = array + 1;\n      } while ((uint *)0x3 < array_end);\n    }\n    array = array_end;\n    last_char = (char *)((int)array + -1);\n    if ((array != (uint *)0x0) && (array = current_element, *(char *)current_element != character)) {\n      current_char = (char *)0x0;\n      do {\n        array = (uint *)((int)array + 1);\n        character_found = current_char == last_char;\n        current_char = current_char + 1;\n        if (character_found) goto LAB_00084150;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (array_end == (uint *)0x0) {\nLAB_00084150:\n    current_element = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    current_element = (uint *)((int)array + 1);\n    array_end = (uint *)((int)array_end + -1);\n    do {\n      array = current_element;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (array_end == (uint *)0x0) goto LAB_00084150;\n      current_element = (uint *)((int)array + 1);\n      array_end = (uint *)((int)array_end + -1);\n    } while (*(char *)array != character);\n  }\n  return current_element;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000840f8",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "find_char_in_array_000840f8"
        },
        "FUN_0008289c": {
            "renaming": {
                "FUN_0008289c": "FUNC_0008289c"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_0008289c(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    iVar11 = FUN_0008356c(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_000834f0(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_000828ee:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082902:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082952;\n        }\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082952:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082976:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_0008297a:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082984_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_00082e50;\n      if (bVar1 == false) goto LAB_00082efa;\nLAB_00082d1a:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082688(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_000840f8(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__000834e8;\nLAB_00082d76:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!bVar1) goto LAB_00082ce0;\nLAB_00082bc6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_00083128;\n      if (bVar1 != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082adc:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082b04;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084530((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084530((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_000830e2;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082824(param_1,param_2,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082afe:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00082e4c;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083474;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_00083142;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_00083142;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_00083470;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_000831f2:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_00083218:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_s_0000000000000000_0008312c;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_0008302a:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_000831be;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_00083142;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00082fe6:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_0008300e:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_000831be:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083130;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000834ec;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_0008307a:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_000830a2:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      iVar11 = FUN_00082824(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082824(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "called": [
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00083888",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00082824",
                "FUN_000840f8"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008289c",
            "calling": [
                "FUN_00081750",
                "FUN_000834f0",
                "FUN_000817c8"
            ],
            "imported": false,
            "current_name": "FUNC_0008289c"
        },
        "FUN_00081f00": {
            "renaming": {
                "FUN_00081f00": "memset_aligned_word_00081f00",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "p_destination",
                "puVar2": "p_destination_2",
                "uVar3": "value_word",
                "uVar4": "remaining_size",
                "bVar5": "is_last_byte"
            },
            "code": "void memset_aligned_word_00081f00(uint32_t *destination, uint8_t value, uint32_t size) {\n  uint32_t *p_aligned_destination;\n  uint32_t value_word = (value << 24) | (value << 16) | (value << 8) | value;\n  uint32_t remaining_size;\n  if (((uint32_t)destination & 3) != 0) {\n    remaining_size = size - 1;\n    if (remaining_size == 0) {\n      return;\n    }\n    *destination = value;\n    destination++;\n  }\n  p_aligned_destination = destination;\n  remaining_size = size >> 4;\n  while (remaining_size--) {\n    *p_aligned_destination++ = value_word;\n    *p_aligned_destination++ = value_word;\n    *p_aligned_destination++ = value_word;\n    *p_aligned_destination++ = value_word;\n  }\n  remaining_size = size & 0xF;\n  if (remaining_size != 0) {\n    do {\n      *p_aligned_destination++ = value;\n    } while (--remaining_size != 0);\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f00",
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "imported": false,
            "current_name": "memset_aligned_word_00081f00"
        },
        "FUN_00080eaa": {
            "renaming": {
                "FUN_00080eaa": "return_max_int_00080eaa"
            },
            "code": "int32_t return_max_int_00080eaa(void) {\n    return INT32_MAX;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eaa",
            "calling": [],
            "imported": false,
            "current_name": "return_max_int_00080eaa"
        },
        "FUN_00081d48": {
            "renaming": {
                "FUN_00081d48": "copy_memory_block_00081d48",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr_aligned",
                "puVar3": "src_ptr_aligned",
                "uVar4": "size_remaining",
                "uVar5": "block_remaining",
                "bVar6": "block_remaining_gt_0",
                "*(undefined *)puVar3": "*(uchar *)src",
                "*(undefined *)(undefined4 *)((int)puVar3 + 1)": "*(uchar *)((int)src + 1)",
                "*(undefined *)((int)puVar3 + 2)": "*(uchar *)((int)src + 2)",
                "*(undefined *)((int)puVar3 + 3)": "*(uchar *)((int)src + 3)",
                "puVar2[1]": "*dest++",
                "puVar2[2]": "*dest++",
                "puVar2[3]": "*dest++",
                "puVar2[4]": "*dest++",
                "puVar2[5]": "*dest++",
                "puVar2[6]": "*dest++",
                "puVar2[7]": "*dest++",
                "puVar2[8]": "*dest++",
                "puVar2[9]": "*dest++",
                "puVar2[10]": "*dest++",
                "puVar2[0xb]": "*dest++",
                "puVar2[0xc]": "*dest++",
                "puVar2[0xd]": "*dest++",
                "puVar2[0xe]": "*dest++",
                "puVar2[0xf]": "*dest++",
                "puVar2 + 0x10": "*dest++",
                "param_2 + 0x10": "*src++",
                "puVar1 + 1": "*dest++",
                "puVar3 + 1": "*src++",
                "uVar5 != 0": "block_remaining_gt_0",
                "(undefined4 *)((int)puVar3 + 1)": "(undefined4 *)((uchar *)src + 1)",
                "(undefined4 *)((int)puVar1 + 1)": "(undefined4 *)((uchar *)dest + 1)",
                "(uVar5 & 2) != 0": "block_remaining_gt_2",
                "(uVar5 & 1) != 0": "block_remaining_gt_1",
                "*(undefined2 *)puVar1": "*(ushort *)dest",
                "*(undefined2 *)puVar3": "*(ushort *)src"
            },
            "code": "undefined4 * copy_memory_block_00081d48(undefined4 *dest, undefined4 *src, uint size)\n{\n  uint i;\n  uint remainder;\n  bool src_aligned = ((uint)src & 3) == 0;\n  bool dest_aligned = ((uint)dest & 3) == 0;\n  if (!src_aligned && !dest_aligned) {\n    remainder = 4 - ((uint)dest & 3);\n    size -= remainder;\n    for (i = 0; i < remainder; i++) {\n      *(uchar *)dest = *(uchar *)src;\n      dest = (undefined4 *)((uchar *)dest + 1);\n      src = (undefined4 *)((uchar *)src + 1);\n    }\n  }\n  while (size >= 0x40) {\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    size -= 0x40;\n  }\n  for (i = 0; i < size - 0xf; i += 0x10) {\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n    *dest++ = *src++;\n  }\n  remainder = size + 0xc;\n  if (remainder & 8) {\n    *dest++ = *src++;\n    *dest++ = *src++;\n  }\n  if (remainder & 4) {\n    *dest++ = *src++;\n  }\n  if (remainder & 2) {\n    *(ushort *)dest = *(ushort *)src;\n  }\n  if (remainder & 1) {\n    *(uchar *)dest = *(uchar *)src;\n  }\n  return dest;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d48",
            "calling": [
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_block_00081d48"
        },
        "FUN_00084494": {
            "renaming": {
                "FUN_00084494": "findValue_00084494",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "dataPtr",
                "iVar2": "returnValue"
            },
            "code": "void findValue_00084494(int *result, undefined4 param1, undefined4 param2, undefined4 param3) {\n    undefined *dataPtr;\n    int returnValue;\n    dataPtr = PTR_DAT_000844b8;\n    *(undefined4 *)PTR_DAT_000844b8 = 0;\n    returnValue = calculateValue(param1, param2, param2, 0, param3);\n    if ((returnValue == -1) && (*(int *)dataPtr != 0)) {\n        *result = *(int *)dataPtr;\n        return;\n    }\n    return;\n}",
            "called": [
                "FUN_00080eb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084494",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "findValue_00084494"
        },
        "FUN_00084530": {
            "renaming": {
                "FUN_00084530": "check_params_00084530",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "FUN_0008458c": "perform_check"
            },
            "code": "int check_params_00084530(int input_1, int input_2, int input_3, int input_4)\n{\n  int result;\n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    result = input_1;\n  }\n  else {\n    result = perform_check();\n  }\n  return result;\n}",
            "called": [
                "FUN_0008458c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084530",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "check_params_00084530"
        },
        "FUN_00080970": {
            "renaming": {
                "FUN_00080970": "check_pointers_00080970",
                "iVar1": "result",
                "FUN_00081248": "check_pointer",
                "PTR_DAT_000809a4": "pointer1",
                "PTR_DAT_000809a8": "pointer2",
                "PTR_DAT_000809ac": "pointer3",
                "PTR_DAT_000809b0": "pointer4"
            },
            "code": "void check_pointers_00080970(void)\n{\n  int result;\n  result = check_pointer(PTR_DAT_000809a4);\n  if (result != 0) {\n    do_nothing_0008073a();\n  }\n  result = check_pointer(PTR_DAT_000809a8);\n  if (result != 0) {\n    do_nothing_00080748();\n  }\n  result = check_pointer(PTR_DAT_000809ac);\n  if (result != 0) {\n    do_nothing_0008074a();\n  }\n  result = check_pointer(PTR_DAT_000809b0);\n  if (result != 0) {\n    do_nothing_0008074c();\n  }\n  return;\n}",
            "called": [
                "FUN_0008073a",
                "FUN_00080748",
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_0008074a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080970",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_pointers_00080970"
        },
        "FUN_00084018": {
            "renaming": {
                "FUN_00084018": "checkValidity_00084018",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "inputShort",
                "iVar2": "result",
                "iVar3": "isValid",
                "uVar4": "inputUint",
                "bVar5": "is2000",
                "auStack_54": "stack",
                "local_50": "localVariable"
            },
            "code": "void checkValidity_00084018(int input, int *output)\n{\n  ushort inputShort = *(ushort *)(output + 3);\n  uint inputUint = (uint)inputShort;\n  bool isValid = false;\n  undefined auStack_54 [4];\n  uint local_50;\n  if ((int)(inputUint << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    int iVar2 = FUN_00084494(input,(int)*(short *)((int)output + 0xe),auStack_54);\n    if (-1 < iVar2) {\n      bool is2000 = (local_50 & 0xf000) == 0x2000;\n      if (((local_50 & 0xf000) == 0x8000) && ((undefined *)output[10] == PTR_FUN_0008427c_1_000840f4)) {\n        iVar2 = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        iVar2 = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    inputShort = *(ushort *)(output + 3);\n    inputUint = (uint)inputShort;\n  }\n  *(ushort *)(output + 3) = inputShort | 0x800;\n  if ((inputUint & 0x80) == 0) {\n    iVar2 = 0x400;\n  }\n  else {\n    iVar2 = 0x40;\n  }\n  isValid = false;\nLAB_00084074:\n  int result = FUNC_00081810(input,iVar2);\n  inputShort = *(ushort *)(output + 3);\n  if (result == 0) {\n    if (-1 < (int)((uint)inputShort << 0x16)) {\n      *(ushort *)(output + 3) = inputShort | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = PTR_LAB_0008387c_1_000840f0;\n    *(ushort *)(output + 3) = inputShort | 0x80;\n    *output = result;\n    output[4] = result;\n    output[5] = iVar2;\n    if ((is2000) && (result = FUN_000844bc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}",
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084018",
            "calling": [
                "FUN_0008356c"
            ],
            "imported": false,
            "current_name": "checkValidity_00084018"
        },
        "FUN_000815de": {
            "renaming": {
                "FUN_000815de": "parse_integer_from_string_000815de",
                "param_1": "string_ptr",
                "bVar1": "lookup_result",
                "bVar2": "has_sign",
                "uVar3": "result",
                "pbVar4": "current_char",
                "uVar5": "current_byte",
                "pbVar6": "previous_char",
                "iVar7": "offset",
                "iVar8": "digit_count",
                "uVar9": "max_div_10",
                "uVar10": "max_value"
            },
            "code": "uint parse_integer_from_string_000815de(byte **string_ptr)\n{\n  if (*string_ptr == NULL) {\n    return 0;\n  }\n  byte *current_char = *string_ptr;\n  byte current_byte = *current_char;\n  uint sign = 1;\n  if (current_byte == 0x2d) {\n    sign = -1;\n    current_char++;\n    current_byte = *current_char;\n  }\n  else if (current_byte == 0x2b) {\n    current_char++;\n    current_byte = *current_char;\n  }\n  uint max_value = (sign == 1) ? 0x7fffffff : 0x80000000;\n  uint max_div_10 = max_value / 10;\n  int digit_count = 0;\n  uint result = 0;\n  while (current_byte != 0) {\n    byte lookup_result = *(byte *)(*DAT_000827f8 + current_byte + 1);\n    if ((lookup_result & 4) == 0) {\n      if ((lookup_result & 3) == 0) {\n        if (digit_count == 0) {\n          return 0;\n        }\n        else {\n          break;\n        }\n      }\n      int offset = (lookup_result & 3) == 1 ? 0x37 : 0x57;\n      offset = current_byte - offset;\n    }\n    else {\n      offset = current_byte - 0x30;\n    }\n    if (offset > 9) {\n      if (digit_count == 0) {\n        return 0;\n      }\n      else {\n        break;\n      }\n    }\n    if (digit_count != -1) {\n      if ((max_div_10 <= result && result != max_div_10) || ((result == max_div_10 && ((int)(max_value % 10) < offset))))\n      {\n        digit_count = -1;\n      }\n      else {\n        result = result * 10 + offset;\n        digit_count = 1;\n      }\n    }\n    current_char++;\n    current_byte = *current_char;\n  }\n  if (digit_count == -1) {\n    return (sign == 1) ? 0x7fffffff : 0x80000000;\n  }\n  else {\n    return result * sign;\n  }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815de",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_000815de"
        },
        "FUN_000834f0": {
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "input_param",
                "param_2": "data_param",
                "iVar1": "result",
                "iVar2": "func_result",
                "local_488": "stack_array",
                "local_480": "mem_value_3",
                "local_47c": "bit_masked_value",
                "local_47a": "mem_value_2",
                "local_478": "stack_pointer",
                "local_474": "mem_value_4",
                "local_470": "mem_value_1",
                "local_46c": "mem_value_5",
                "local_464": "mem_value_6",
                "local_424": "mem_value_7",
                "auStack_420": "stack_mem"
            },
            "code": "int process_data_000834f0(undefined4 input_param, int data_param) {\n    int result = 0;\n    int func_result = 0;\n    undefined *stack_array [2];\n    undefined4 mem_value_1;\n    ushort bit_masked_value;\n    undefined2 mem_value_2;\n    undefined *stack_pointer;\n    undefined4 mem_value_3;\n    undefined4 mem_value_4;\n    undefined4 mem_value_5;\n    undefined4 mem_value_6;\n    undefined4 mem_value_7;\n    undefined stack_mem [1024];\n\n    mem_value_7 = *(undefined4 *)(data_param + 100);\n    mem_value_5 = *(undefined4 *)(data_param + 0x1c);\n    mem_value_2 = *(undefined2 *)(data_param + 0xe);\n    mem_value_6 = *(undefined4 *)(data_param + 0x24);\n    stack_array[0] = stack_mem;\n    bit_masked_value = *(ushort *)(data_param + 0xc) & 0xfffd;\n    mem_value_3 = 0x400;\n    mem_value_4 = 0x400;\n    mem_value_1 = 0;\n    stack_pointer = stack_array[0];\n    result = FUNC_0008289c(input_param, stack_array);\n    if ((result >= -1) && (func_result = FUN_00083850(input_param, stack_array), func_result == 0)) {\n        result = -1;\n    }\n    if ((int)((uint)bit_masked_value << 0x19) < 0) {\n        *(ushort *)(data_param + 0xc) = *(ushort *)(data_param + 0xc) | 0x40;\n    }\n    return result;\n}",
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000834f0",
            "calling": [
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "process_data_000834f0"
        },
        "FUN_000841e4": {
            "renaming": {
                "FUN_000841e4": "process_input_000841e4",
                "param_1": "input",
                "puVar1": "pointer",
                "uVar2": "result",
                "piVar3": "pointer",
                "iVar4": "pointer_value",
                "pcVar5": "function_pointer",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr",
                "ppiVar6": "pointer_to_pointer",
                "*DAT_000841f0": "global_pointer",
                "PTR_DAT_00084218": "pointer_to_zero"
            },
            "code": "int process_input_000841e4(uint input) {\n  int **pointer_to_pointer = **DAT_000841f0;\n  if (input > 31) {\n    *pointer_to_pointer = 22;\n    return -1;\n  }\n  int *pointer = pointer_to_pointer[183];\n  if ((pointer == 0) || (*(code **)(pointer + input * 4) == (code *)0)) {\n    int result = do_nothing(thunk(*DAT_000841f0), input, input, 0, &pointer_to_pointer, unaff_r4, unaff_r5, in_lr);\n    if ((result == -1) && (**DAT_000841f0 != 0)) {\n      *pointer = **DAT_000841f0;\n      return -1;\n    }\n    return result;\n  }\n  if (*(code **)(pointer + input * 4) == (code *)1) {\n    return 0;\n  }\n  if (*(code **)(pointer + input * 4) != (code *)-1) {\n    *(undefined4 *)(pointer + input * 4) = 0;\n    (*(code **)(pointer + input * 4))(input);\n    return 0;\n  }\n  *pointer = 22;\n  return 1;\n}",
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000841e4",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "process_input_000841e4"
        },
        "FUN_0008113a": {
            "renaming": {
                "FUN_0008113a": "convert_uint_to_string_with_base_0008113a",
                "param_1": "input",
                "param_2": "input_len",
                "param_3": "base",
                "param_4": "output",
                "iVar1": "output_len",
                "iVar2": "temp_len"
            },
            "code": "int convert_uint_to_string_with_base_0008113a(uint *input, uint input_len, uint base, char *output)\n{\n    int output_len = 0;\n    if (input_len == 0)\n    {\n        output[output_len++] = (**(char **)*input)(*input & 0xff);\n    }\n    else if (input_len == 10)\n    {\n        if ((int)base < 0)\n        {\n            output[output_len++] = '-';\n            output_len += convert_uint_to_string_with_base_0008113a(input, 0, -base, output + output_len);\n        }\n    }\n    else\n    {\n        base = base & 0xff;\n    }\n    output_len += convert_uint_to_string_with_base_0008113a(input + 1, input_len - 1, base, output + output_len);\n    return output_len;\n}",
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008113a",
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "convert_uint_to_string_with_base_0008113a"
        },
        "FUN_0008400c": {
            "renaming": {
                "FUN_0008400c": "get_first_value_0008400c",
                "DAT_00084014": "PTR_FIRST_VALUE"
            },
            "code": "int get_first_value_0008400c() {\n    return *DAT_00084014;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008400c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "get_first_value_0008400c"
        },
        "FUN_000814d0": {
            "renaming": {
                "FUN_000814d0": "validate_and_process_input_000814d0",
                "param_1": "input_array",
                "param_2": "input_value",
                "param_3": "input_length",
                "iVar1": "validation_result",
                "FUN_000814ae": "validate_input",
                "FUN_00081480": "process_valid_input",
                "FUN_000825cc": "perform_computation"
            },
            "code": "undefined4 * validate_and_process_input_000814d0(undefined4 *input_array, undefined4 input_value, undefined4 input_length)\n{\n  int validation_result = validate_input(input_array, input_length);\n  if (validation_result == 0) {\n    process_valid_input(input_array);\n  }\n  else {\n    input_array[2] = input_value;\n    perform_computation(*input_array, input_length);\n  }\n  return input_array;\n}",
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814d0",
            "calling": [
                "FUN_000814f6"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_000814d0"
        },
        "FUN_00080c20": {
            "renaming": {
                "FUN_00080c20": "initialize_memory_00080c20",
                "puVar1": "rel_array",
                "puVar2": "dat_array",
                "iVar3": "i",
                "puVar4": "dat_ptr",
                "dat_ptr_2": "dat_ptr_2"
            },
            "code": "void initialize_memory_00080c20(void)\n{\n    undefined *rel_array = PTR_Elf32_Rel_ARRAY_00080c7c;\n    undefined *dat_array = DAT_00080c78;\n    int i = 0;\n    undefined4 *dat_ptr = (undefined4 *)PTR_DAT_00080c80;\n    if (DAT_00080c78 != PTR_Elf32_Rel_ARRAY_00080c7c)\n    {\n        for (; rel_array + i < PTR_DAT_00080c84; i += 4)\n        {\n            *(undefined4 *)(rel_array + i) = *(undefined4 *)(dat_array + i);\n        }\n    }\n    for (; dat_ptr < DAT_00080c88; dat_ptr++)\n    {\n        *dat_ptr = 0;\n    }\n    undefined *dat_ptr_2 = PTR_DAT_00080c8c + -0x20000000;\n    *(uint *)(DAT_00080c90 + 8) = (uint)PTR_DAT_00080c8c & 0x1fffff80;\n    if (dat_ptr_2 < (undefined *)0x100000)\n    {\n        *(uint *)(DAT_00080c90 + 8) = *(uint *)(DAT_00080c90 + 8) | 0x20000000;\n    }\n    (*DAT_00080c94)();\n    while (1);\n}",
            "called": [
                "FUN_000815ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c20",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_00080c20"
        },
        "FUN_00080efc": {
            "renaming": {
                "FUN_00080efc": "do_nothing_00080efc"
            },
            "code": "\nvoid do_nothing_00080efc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efc",
            "calling": [
                "FUN_000841e4"
            ],
            "imported": false,
            "current_name": "do_nothing_00080efc"
        },
        "FUN_0008044c": {
            "renaming": {
                "FUN_0008044c": "process_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "PTR_DAT_00080544": "ptr3",
                "PTR_DAT_00080548": "ptr4",
                "PTR_DAT_00080554": "max_value",
                "*PTR_DAT_00080554": "max_value",
                "*DAT_0008054c": "constant",
                "iVar6": "index_times_12",
                "bVar1": "max_value",
                "puVar2": "ptr1",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "uVar5": "new_value"
            },
            "code": "void process_data_0008044c(int index, uint8_t *data, int offset)\n{\n  uint8_t *ptr1 = data;\n  uint8_t *ptr2 = data + 0x10;\n  uint8_t *PTR_DAT_00080544 = PTR_DAT_00080544;\n  uint8_t *PTR_DAT_00080548 = PTR_DAT_00080548;\n  uint8_t PTR_DAT_00080554 = *PTR_DAT_00080554;\n  int *DAT_0008054c = *DAT_0008054c / DAT_00080550;\n  int param_3 = offset * 0x40;\n  \n  if ((PTR_DAT_00080544[index] & 0x80) == 0) {\n    int index_times_12 = index * 0xc;\n    if ((ptr1[index] + index_times_12 < PTR_DAT_00080554) && (PTR_DAT_00080548[(ptr1[index] + index_times_12) * 8 + 4] << 0x19 < 0)) {\n      FUN_00081014(PTR_DAT_00080548[(index_times_12 + ptr1[index]) * 8] & 0x3f, 0);\n    }\n  }\n  else {\n    *(uint *)(data + param_3) |= 4;\n  }\n  ptr2[index]++;\n  int index_times_12 = index * 0xc;\n  if ((ptr2[index] + index_times_12 < PTR_DAT_00080554) && (PTR_DAT_00080544[index] < 0x0c)) {\n    *(int *)(data + param_3 + 0x14) = *(int *)(data + param_3 + 0x10) + *(int *)(PTR_DAT_00080548 + ((PTR_DAT_00080544[index] + index_times_12) * 8 + 4));\n    if (PTR_DAT_00080548[(PTR_DAT_00080544[index] + index_times_12) * 8] << 0x19 >= 0) {\n      return;\n    }\n    FUN_00081014(PTR_DAT_00080548[(index_times_12 + PTR_DAT_00080544[index]) * 8] & 0x3f, 1);\n    return;\n  }\n  uint32_t new_value = (uint32_t)(*DAT_0008054c * 20000) >> 5;\n  if (new_value <= *(int *)(data + param_3 + 0x10) + 4U) {\n    new_value = *(int *)(data + param_3 + 0x10) + 4;\n  }\n  *(uint *)(data + param_3 + 0x14) = new_value;\n  ptr2[index] = 0xff;\n}",
            "called": [
                "FUN_00081014"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008044c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_0008044c"
        },
        "FUN_000810d8": {
            "renaming": {
                "FUN_000810d8": "processDataAndReturn_000810d8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4"
            },
            "code": "void processDataAndReturn_000810d8(undefined4 data1, undefined4 data2, undefined4 data3, undefined4 data4) {\n  processData(data1, PTR_DATA_000810e4, data3, data4, data4);\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810d8",
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "imported": false,
            "current_name": "processDataAndReturn_000810d8"
        },
        "FUN_00080efe": {
            "renaming": {
                "FUN_00080efe": "return_error_code_00080efe"
            },
            "code": "int32_t return_error_code_00080efe(void) { \n    return -1; \n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080efe",
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "imported": false,
            "current_name": "return_error_code_00080efe"
        },
        "FUN_00081e34": {
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "i",
                "puVar2": "destination_ptr",
                "puVar3": "source_ptr",
                "puVar4": "end_ptr",
                "uVar5": "blocks_remaining",
                "puVar6": "temp_ptr",
                "uVar7": "temp_size"
            },
            "code": "void copy_memory_00081e34(void* destination, const void* source, size_t size) {\n    if (destination < source && (char*)destination + size > (char*)source) {\n        char* destination_end = (char*)destination + size;\n        size_t i = size - 1;\n        do {\n            --destination_end;\n            --i;\n            *destination_end = *(char*)(source + i);\n        } while (i != SIZE_MAX);\n    } else {\n        if (size >= 16 && ((uintptr_t)destination | (uintptr_t)source) % 4 == 0) {\n            uintptr_t destination_end = (uintptr_t)destination + (size - 16 & ~15) + 16;\n            const uintptr_t source_end = (uintptr_t)source + (size - 16 & ~15) + 16;\n            do {\n                *(uintptr_t*)destination = *(uintptr_t*)source;\n                *(uintptr_t*)(destination + 4) = *(uintptr_t*)(source + 4);\n                *(uintptr_t*)(destination + 8) = *(uintptr_t*)(source + 8);\n                *(uintptr_t*)(destination + 12) = *(uintptr_t*)(source + 12);\n                destination += 16;\n                source += 16;\n            } while (destination != (void*)destination_end);\n            size_t blocks_remaining = size & 15;\n            if (blocks_remaining == 0) {\n                return;\n            }\n            destination_end = (uintptr_t)destination + blocks_remaining;\n            source_end = (uintptr_t)source + blocks_remaining;\n        }\n        do {\n            *(char*)destination = *(char*)source;\n            ++destination;\n            ++source;\n        } while (destination != (void*)((uintptr_t)destination_end & ~(uintptr_t)7) + (size & 7));\n    }\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e34",
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "copy_memory_00081e34"
        },
        "FUN_000805a8": {
            "renaming": {
                "FUN_000805a8": "update_byte_array_000805a8",
                "*param_1": "*array_to_update",
                "bVar1": "current_byte",
                "*PTR_DAT_000805d8": "*byte_counter_ptr",
                "PTR_DAT_000805d8": "byte_counter_ptr",
                "DAT_000805dc": "data_array_ptr",
                "*puVar2": "*data_ptr",
                "PTR_DAT_000805e4": "other_data_ptr",
                "DAT_000805e0": "data_divisor"
            },
            "code": "void update_byte_array_000805a8(byte *array_to_update)\n{\n  byte current_byte = *PTR_DAT_000805d8;\n  if (current_byte < 0x3c) {\n    *PTR_DAT_000805d8 = current_byte + 1;\n    uint *data_ptr = DAT_000805dc;\n    *array_to_update = current_byte;\n    *(uint *)(PTR_DAT_000805e4 + (uint)current_byte * 8 + 4) = (*data_ptr / DAT_000805e0) * 0x5dc >> 5;\n    return;\n  }\n  *array_to_update = 0xff;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805a8",
            "calling": [],
            "imported": false,
            "current_name": "update_byte_array_000805a8"
        },
        "FUN_00080f08": {
            "renaming": {
                "FUN_00080f08": "do_nothing_00080f08"
            },
            "code": "\nvoid do_nothing_00080f08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f08",
            "calling": [
                "FUN_000815ec",
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080f08"
        },
        "FUN_000810cc": {
            "renaming": {
                "FUN_000810cc": "execute_function_pointer_000810cc",
                "param_1": "function_pointer"
            },
            "code": "void execute_function_pointer_000810cc(void* function_pointer){\n  (**(void(*)(void))function_pointer)();\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810cc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "execute_function_pointer_000810cc"
        },
        "FUN_00081276": {
            "renaming": {
                "FUN_00081276": "get_next_byte_from_buffer_00081276",
                "param_1": "buffer_address",
                "bVar1": "next_byte",
                "iVar2": "buffer_ptr",
                "*(int *)(param_1 + 0x10)": "buffer_ptr",
                "*(int *)(iVar2 + 0x80)": "read_ptr",
                "*(int *)(iVar2 + 0x84)": "write_ptr",
                "*(byte *)(iVar2 + *(int *)(iVar2 + 0x84))": "next_byte",
                "*(uint *)(iVar2 + 0x84)": "write_ptr"
            },
            "code": "uint get_next_byte_from_buffer_00081276(int buffer_address)\n{\n  int buffer_ptr = *(int *)(buffer_address + 0x10);\n  int read_ptr = *(int *)(buffer_ptr + 0x80);\n  int write_ptr = *(int *)(buffer_ptr + 0x84);\n\n  if (read_ptr != write_ptr) {\n    byte next_byte = *(byte *)(buffer_ptr + read_ptr);\n    *(int *)(buffer_ptr + 0x84) = (write_ptr + 1) & 0x7f;\n    return (uint)next_byte;\n  }\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081276",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "get_next_byte_from_buffer_00081276"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "getInteger_000844bc",
                "param_1": "result",
                "param_2": "input",
                "puVar1": "dataPtr",
                "iVar2": "status"
            },
            "code": "void getInteger_000844bc(int *result, undefined4 input) {\n  undefined *dataPtr;\n  int status;\n  dataPtr = PTR_DAT_000844dc;\n  *(undefined4 *)PTR_DAT_000844dc = 0;\n  status = parseInteger(input);\n  if ((status == -1) && (*(int *)dataPtr != 0)) {\n    *result = *(int *)dataPtr;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080eba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "getInteger_000844bc"
        },
        "FUN_00083850": {
            "renaming": {
                "FUN_00083850": "decode_00083850",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "piVar1": "chunk_header",
                "iVar2": "chunk_data_size",
                "uVar3": "chunk_flags",
                "uVar4": "chunk_size",
                "iVar5": "remaining_data_size",
                "pcVar6": "decode_function",
                "unaff_r4": "result",
                "iVar7": "input_buffer_size"
            },
            "code": "undefined4 decode_00083850(int *input_buffer, int *output_buffer) {\n  int *chunk_header;\n  int chunk_data_size;\n  int remaining_data_size;\n  int *decode_00083850_function;\n  ushort chunk_flags;\n  uint chunk_size;\n  int input_buffer_size;\n  int output_buffer_size;\n  undefined4 result;\n  \n  if ((input_buffer != NULL) && (input_buffer[14] == 0)) {\n    initialize();\n  }\n  if (*(short *)(output_buffer + 6) == 0) {\n    return 0;\n  }\n  chunk_flags = *(ushort *)(output_buffer + 6);\n  if ((int)((uint)chunk_flags << 0x1c) < 0) {\n    chunk_header = output_buffer + 4;\n    if (*chunk_header == 0) {\n      return 0;\n    }\n    chunk_size = *output_buffer;\n    if ((chunk_flags & 3) == 0) {\n      chunk_data_size = output_buffer[5];\n    }\n    else {\n      chunk_data_size = 0;\n    }\n    *output_buffer = *chunk_header;\n    remaining_data_size = chunk_size - *chunk_header;\n    output_buffer[2] = chunk_data_size;\n    do {\n      if (remaining_data_size < 1) {\n        return 0;\n      }\n      chunk_data_size = (*(code *)output_buffer[9])(input_buffer, output_buffer[7], *chunk_header, remaining_data_size, result);\n      remaining_data_size = remaining_data_size - chunk_data_size;\n      *chunk_header = *chunk_header + chunk_data_size;\n    } while (0 < chunk_data_size);\n    *(ushort *)(output_buffer + 6) = chunk_flags | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_buffer + 6) = chunk_flags | 0x800;\n  input_buffer_size = output_buffer[1];\n  output_buffer_size = output_buffer[15];\n  if ((input_buffer_size < 1) && (output_buffer[0xf] < 1)) {\n    return 0;\n  }\n  decode_00083850_function = (code *)output_buffer[10];\n  if (decode_00083850_function == NULL) {\n    return 0;\n  }\n  chunk_size = (uint)(chunk_flags | 0x800);\n  result = 0;\n  output_buffer[0] = 0;\n  if ((chunk_flags & 0x1000) == 0) {\n    chunk_data_size = (*decode_00083850_function)(input_buffer, output_buffer[7], chunk_size & 0x1000, 1);\n    if ((chunk_data_size == -1) && (remaining_data_size = *input_buffer, remaining_data_size != 0)) {\n      if ((remaining_data_size == 0x1d) || (remaining_data_size == 0x16)) {\n        *input_buffer = output_buffer[0];\n        return 0;\n      }\n      *(ushort *)(output_buffer + 6) = chunk_flags | 0x40;\n      return 0xffffffff;\n    }\n    chunk_flags = *(ushort *)(output_buffer + 6);\n    decode_00083850_function = (code *)output_buffer[10];\n  }\n  else {\n    chunk_data_size = output_buffer[0x14];\n  }\n  if (((int)(chunk_flags << 0x1d) < 0) && (chunk_data_size = chunk_data_size - output_buffer[1], output_buffer[0xc] != 0)) {\n    chunk_data_size = chunk_data_size - output_buffer[0xf];\n  }\n  chunk_data_size = (*decode_00083850_function)(input_buffer, output_buffer[7], chunk_data_size, 0);\n  if (chunk_data_size == -1) {\n    remaining_data_size = *input_buffer;\n    if (remaining_data_size != 0) {\n      if ((remaining_data_size != 0x1d) && (remaining_data_size != 0x16)) {\n        *(ushort *)(output_buffer + 6) = chunk_flags | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_buffer + 6) = chunk_flags & 0xf7ff;\n      *output_buffer = output_buffer[4];\n      output_buffer[1] = 0;\n      goto LAB_00083774;\n    }\n    chunk_flags = *(ushort *)(output_buffer + 6) & 0xf7ff;\n    output_buffer[1] = 0;\n    *(ushort *)(output_buffer + 6) = chunk_flags;\n    *output_buffer = output_buffer[4];\n  }\n  else {\n    chunk_flags = *(ushort *)(output_buffer + 6) & 0xf7ff;\n    *output_buffer = output_buffer[4];\n    *(ushort *)(output_buffer + 6) = chunk_flags;\n    output_buffer[1] = 0;\n  }\n  if ((int)((uint)chunk_flags << 0x13) < 0) {\n    output_buffer[0x14] = chunk_data_size;\n  }\nLAB_00083774:\n  chunk_header = output_buffer + 0xc;\n  result = 0;\n  if (chunk_header == NULL) {\n    return 0;\n  }\n  if (chunk_header != output_buffer + 0x10) {\n    cleanup(input_buffer);\n  }\n  output_buffer[0xc] = 0;\n  return 0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083850",
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "decode_00083850"
        },
        "FUN_000815ec": {
            "renaming": {
                "FUN_000815ec": "main_loop_000815ec",
                "FUN_00081618": "initialize",
                "FUN_00080774": "setup_io",
                "do_nothing_000815e8": "do_nothing",
                "do_nothing_00080f08": "enable_interrupts",
                "FUN_000801e0": "start_timer",
                "DAT_00081614": "input_available",
                "FUN_00080250": "check_input",
                "FUN_00080970": "process_input"
            },
            "code": "void main_loop_000815ec() {\n  initialize();\n  setup_io();\n  do_nothing();\n  enable_interrupts();\n  start_timer();\n  do {\n    do {\n      check_input();\n    } while (is_DAT_00081614() == 0);\n    process_input();\n  } while (true);\n}",
            "called": [
                "FUN_00080970",
                "FUN_00080f08",
                "FUN_000815e8",
                "FUN_00080250",
                "FUN_00081618",
                "FUN_00080774",
                "FUN_000801e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ec",
            "calling": [
                "FUN_00080c20"
            ],
            "imported": false,
            "current_name": "main_loop_000815ec"
        },
        "FUN_00080d3e": {
            "renaming": {
                "FUN_00080d3e": "update_values_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value3",
                "param_4": "value2",
                "PTR_": "ptr_to_",
                "DAT_": "mask_"
            },
            "code": "void update_values_00080d3e(int base_address, uint32_t value1, uint32_t value2, uint32_t value3)\n{\n    uint32_t* PTR_value = (uint32_t*)(base_address + 4);\n    uint32_t mask1 = 0xF000000u;\n    uint32_t mask2 = 0x30000000u;\n    *PTR_value = value3 | *PTR_value | ((value1 & mask1) << 0x4) | ((value2 & mask2) << 0x2);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d3e",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_values_00080d3e"
        },
        "FUN_00081438": {
            "renaming": {
                "FUN_00081438": "set_pointer_and_value_00081438",
                "param_1": "pointer_array",
                "param_2": "value"
            },
            "code": "undefined4 *set_pointer_and_value_00081438(undefined4 *pointer_array, undefined4 value) {\n  execute_some_function();\n  *pointer_array = PTR_PTR_FUN_000812b8_1_00081458;\n  pointer_array[9] = value;\n  return pointer_array;\n}",
            "called": [
                "FUN_00081348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081438",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "set_pointer_and_value_00081438"
        },
        "FUN_00080b90": {
            "renaming": {
                "FUN_00080b90": "set_value_at_index_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "code": "void set_value_at_index_00080b90(int base_address, int index, int value) {\n  int offset = index * 0x40 + 0x14;\n  int *address = (int *)(base_address + offset);\n  *address = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b90",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "set_value_at_index_00080b90"
        },
        "FUN_00080748": {
            "renaming": {
                "FUN_00080748": "do_nothing_00080748"
            },
            "code": "\nvoid do_nothing_00080748(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080748",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_00080748"
        },
        "FUN_0008356c": {
            "renaming": {
                "FUN_0008356c": "check_data_0008356c",
                "param_1": "data",
                "param_2": "param",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "*DAT_0008362c": "*ptr1",
                "*(int *)(*DAT_0008362c + 0x38)": "*ptr2",
                "FUN_00083888": "function1",
                "*(uint16_t *)(param + 3)": "var6",
                "param[4]": "var2",
                "-1": "minusOne",
                "(int)(uVar3 << 0x1c)": "condition1",
                "(int)(uVar3 << 0x1b)": "condition2",
                "(int)(uVar3 << 0x1d)": "condition3",
                "(int *)param[0xc]": "ptr3",
                "param + 0x10": "ptr4",
                "FUN_00083b10": "function2",
                "uVar5": "temp5",
                "param[5]": "var3",
                "param[2]": "var4",
                "param[6]": "var5",
                "(int)((uint32_t)*(uint16_t *)(param + 3) << 0x18)": "condition4",
                "FUN_00084018": "function3"
            },
            "code": "int check_data_0008356c(uint16_t *data, int *param) {\n  uint16_t uVar1;\n  int iVar2;\n  uint32_t uVar3;\n  uint16_t uVar4;\n  \n  if ((*PTR_DAT_0008362c != 0) && (*(int *)(*PTR_DAT_0008362c + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  uVar4 = *(uint16_t *)(param + 3);\n  uVar3 = (uint32_t)uVar4;\n  if ((int)(uVar3 << 0x1c) < 0) {\n    iVar2 = param[4];\n  }\n  else {\n    if (-1 < (int)(uVar3 << 0x1b)) {\n      *data = 9;\n      *(uint16_t *)(param + 3) = uVar4 | 0x40;\n      return -1;\n    }\n    if ((int)(uVar3 << 0x1d) < 0) {\n      if ((int *)param[0xc] != (int *)0x0) {\n        if ((int *)param[0xc] != param + 0x10) {\n          FUN_00083b10(data);\n          uVar4 = *(uint16_t *)(param + 3);\n        }\n        param[0xc] = 0;\n      }\n      iVar2 = param[4];\n      uVar4 = uVar4 & 0xffdb;\n      *param = iVar2;\n      param[1] = 0;\n    }\n    else {\n      iVar2 = param[4];\n    }\n    *(uint16_t *)(param + 3) = uVar4 | 8;\n    uVar3 = (uint32_t)(uVar4 | 8);\n  }\n  if ((iVar2 == 0) && ((uVar3 & 0x280) != 0x200)) {\n    FUN_00084018(data,param);\n    uVar3 = (uint32_t)*(uint16_t *)(param + 3);\n    iVar2 = param[4];\n  }\n  uint32_t uVar5 = uVar3 & 1;\n  if (uVar5 == 0) {\n    if (-1 < (int)(uVar3 << 0x1e)) {\n      uVar5 = param[5];\n    }\n    param[2] = uVar5;\n  }\n  else {\n    param[6] = -param[5];\n    param[2] = 0;\n  }\n  if ((iVar2 == 0) && ((int)((uint32_t)*(uint16_t *)(param + 3) << 0x18) < 0)) {\n    *(uint16_t *)(param + 3) = *(uint16_t *)(param + 3) | 0x40;\n    return -1;\n  }\n  return 0;\n}",
            "called": [
                "FUN_00083888",
                "FUN_00083b10",
                "FUN_00084018"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008356c",
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "check_data_0008356c"
        },
        "FUN_00080b98": {
            "renaming": {
                "FUN_00080b98": "initialize_device_00080b98",
                "puVar1": "device_ptr",
                "iVar2": "device_offset",
                "DAT_00080c04": "device_constant_ptr",
                "DAT_00080c08": "device_control_offset",
                "DAT_00080c10": "device_control_value_1",
                "DAT_00080c0c": "device_control_value_2",
                "DAT_00080c14": "device_control_value_3",
                "DAT_00080c1c": "device_status_ptr",
                "DAT_00080c18": "device_status_value"
            },
            "code": "void initialize_device_00080b98(void)\n{\n  uint32_t *device_ptr;\n  int32_t device_offset;\n  device_ptr = DAT_00080c04;\n  *DAT_00080c04 = 0x400;\n  DAT_00080c04[0x80] = 0x400;\n  device_offset = DAT_00080c08;\n  if (-1 < *(int32_t *)(DAT_00080c08 + 0x20) << 7) {\n    *(uint32_t *)(DAT_00080c08 + 0x20) = DAT_00080c10;\n    do {\n    } while (-1 < *(int32_t *)(device_offset + 0x68) << 0x1f);\n  }\n  *(uint32_t *)(device_offset + 0x20) = DAT_00080c0c;\n  do {\n  } while (-1 < *(int32_t *)(device_offset + 0x68) << 0xf);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = *(uint32_t *)(DAT_00080c08 + 0x30) & 0xfffffffc | 1;\n  do {\n  } while (-1 < *(int32_t *)(device_offset + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080c08 + 0x28) = DAT_00080c14;\n  do {\n  } while (-1 < *(int32_t *)(device_offset + 0x68) << 0x1e);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = 0x11;\n  do {\n  } while (-1 < *(int32_t *)(device_offset + 0x68) << 0x1c);\n  *(uint32_t *)(DAT_00080c08 + 0x30) = 0x12;\n  do {\n  } while (-1 < *(int32_t *)(device_offset + 0x68) << 0x1c);\n  *DAT_00080c1c = DAT_00080c18;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "initialize_device_00080b98"
        },
        "FUN_000810e8": {
            "renaming": {
                "FUN_000810e8": "sum_of_functions_results_000810e8",
                "param_1": "param",
                "iVar1": "result_of_first_function",
                "iVar2": "result_of_second_function",
                "FUN_000810a6": "get_result_of_first_function",
                "FUN_000810d8": "get_result_of_second_function"
            },
            "code": "int sum_of_functions_results_000810e8(int param){\n                      int result_of_first_function = get_result_of_first_function();\n                      int result_of_second_function = get_result_of_second_function(param);\n                      return result_of_first_function + result_of_second_function;\n                    }",
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810e8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "sum_of_functions_results_000810e8"
        },
        "FUN_0008073a": {
            "renaming": {
                "FUN_0008073a": "do_nothing_0008073a"
            },
            "code": "\nvoid do_nothing_0008073a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008073a",
            "calling": [
                "FUN_00080970"
            ],
            "imported": false,
            "current_name": "do_nothing_0008073a"
        },
        "FUN_00080d58": {
            "renaming": {
                "FUN_00080d58": "set_bit_00080d58",
                "param_1": "address",
                "param_2": "bit_position",
                "*(int *)(param_1 + 0x14)": "*address",
                "1 << (param_2 & 0xff)": "bit_mask"
            },
            "code": "void set_bit_00080d58(int* address, uint8_t bit_position) {\n    int bit_mask = 1 << (bit_position & 0xff);\n    *address |= bit_mask;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d58",
            "calling": [
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "set_bit_00080d58"
        },
        "FUN_00081480": {
            "renaming": {
                "FUN_00081480": "resetPointerValues_00081480",
                "*param_1": "*pointer",
                "FUN_00081800": "doSomething",
                "param_1[2]": "pointer[2]",
                "param_1[1]": "pointer[1]"
            },
            "code": "void resetPointerValues_00081480(int *pointer)\n{\n  if (*pointer != 0) {\n    doSomething();\n  }\n  *pointer = 0;\n  pointer[2] = 0;\n  pointer[1] = 0;\n  return;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081480",
            "calling": [
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "resetPointerValues_00081480"
        },
        "FUN_00081f9c": {
            "renaming": {
                "FUN_00081f9c": "execute_function_with_params_00081f9c",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "*DAT_00081fa8": "function_ptr"
            },
            "code": "void execute_function_with_params_00081f9c(int **DAT_00081fa8, int parameter_1, int parameter_2)\n{\n  (**DAT_00081fa8)(parameter_1, parameter_2);\n  return;\n}",
            "called": [
                "FUN_00081fac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f9c",
            "calling": [
                "FUN_00081496"
            ],
            "imported": false,
            "current_name": "execute_function_with_params_00081f9c"
        },
        "FUN_00085844": {
            "renaming": {
                "FUN_00085844": "do_nothing_00085844"
            },
            "code": "\nvoid do_nothing_00085844(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085844",
            "calling": [
                "FUN_00081778"
            ],
            "imported": false,
            "current_name": "do_nothing_00085844"
        },
        "FUN_00081248": {
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input_param",
                "*(int *)(param_1 + 0x10)": "ptr_1",
                "*(int *)(ptr_1 + 0x80)": "ptr_2",
                "*(int *)(ptr_1 + 0x84)": "ptr_3",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x80)": "*(ptr_1 + 0x80)",
                "*(int *)(*(int *)(param_1 + 0x10) + 0x84)": "*(ptr_1 + 0x84)"
            },
            "code": "uint calculate_difference_00081248(int input_param)\n{\n    int* ptr_1 = *(int *)(input_param + 0x10);\n    int* ptr_2 = *(int *)(ptr_1 + 0x80);\n    int* ptr_3 = *(int *)(ptr_1 + 0x84);\n    int result = (*ptr_2) - (*ptr_3) & 0x7f;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081248",
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_difference_00081248"
        },
        "FUN_00081800": {
            "renaming": {
                "FUN_00081800": "call_function_with_param_00081800",
                "DAT_0008180c": "function_ptr",
                "param_1": "param_1"
            },
            "code": "void call_function_with_param_00081800(void* DAT_0008180c, undefined4 param_1)\n{\n  DAT_0008180c(param_1);\n  return;\n}",
            "called": [
                "FUN_00083b10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081800",
            "calling": [
                "FUN_00081472",
                "FUN_0008151c",
                "FUN_00081480"
            ],
            "imported": false,
            "current_name": "call_function_with_param_00081800"
        },
        "FUN_0008458c": {
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "initial_value",
                "param_2": "second_value",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_buffer",
                "lVar2": "multiplied_value",
                "uVar1": "low_result"
            },
            "code": "void calculate_difference_0008458c(uint32_t initial_value, int32_t second_value, uint32_t multiplier_low, uint32_t multiplier_high, int32_t* result_buffer)\n{\n  uint64_t multiplied_value = (uint64_t)multiplier_high << 32 | multiplier_low;\n  uint32_t low_result = initial_value - (uint32_t)multiplied_value;\n  uint32_t high_result = second_value - (int32_t)(multiplied_value >> 32) - (uint32_t)(initial_value < (uint32_t)multiplied_value);\n  *result_buffer = (int32_t)low_result;\n  *(result_buffer + 1) = (int32_t)high_result;\n  return;\n}",
            "called": [
                "FUN_00084860"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008458c",
            "calling": [
                "FUN_00084530"
            ],
            "imported": false,
            "current_name": "calculate_difference_0008458c"
        },
        "FUN_0008434c": {
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "param_3",
                "param_4": "result",
                "uVar1": "func_result",
                "iVar2": "status",
                "pcVar3": "func_pointer",
                "auStack_24": "stack_buffer"
            },
            "code": "void process_data_0008434c(undefined4 *data, int data_size, undefined4 param_3, undefined4 *result){\n  undefined4 func_result;\n  int status;\n  code *func_pointer;\n  undefined stack_buffer[12];\n  \n  if (data_size == 0) {\n    func_pointer = *DAT_00084398;\n    func_result = get_func_result();\n    status = (*func_pointer)(data, stack_buffer, 0, func_result, result);\n  }\n  else {\n    func_pointer = *DAT_00084398;\n    func_result = get_func_result();\n    status = (*func_pointer)(data, data_size, param_3, func_result, result);\n  }\n  if (status == -1) {\n    *result = 0;\n    *data = 0x8a;\n  }\n  return;\n}",
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008434c",
            "calling": [
                "FUN_000839b4"
            ],
            "imported": false,
            "current_name": "process_data_0008434c"
        },
        "FUN_000845c0": {
            "renaming": {
                "FUN_000845c0": "FUNC_000845c0"
            },
            "code": "\nundefined8 FUNC_000845c0(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool bVar13;\n  \n  if ((int)param_2 < 0) {\n    bVar13 = param_1 != 0;\n    param_1 = -param_1;\n    param_2 = -param_2 - (uint)bVar13;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)param_4 < 0) {\n    uVar9 = ~uVar9;\n    bVar13 = param_3 != 0;\n    param_3 = -param_3;\n    param_4 = -param_4 - (uint)bVar13;\n  }\n  if (param_4 == 0) {\n    if (param_2 < param_3) {\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 != 0) {\n        uVar2 = param_1 >> (0x20 - uVar5 & 0xff);\n        param_3 = param_3 << (uVar5 & 0xff);\n        param_1 = param_1 << (uVar5 & 0xff);\n        param_2 = param_2 << (uVar5 & 0xff) | uVar2;\n      }\n      uVar2 = param_3 >> 0x10;\n      uVar3 = param_2 / uVar2;\n      uVar6 = (param_3 & 0xffff) * uVar3;\n      uVar10 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar10 <= uVar6 && uVar6 - uVar10 != 0) {\n        bVar13 = CARRY4(uVar10,param_3);\n        uVar10 = uVar10 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar10 <= uVar6 && uVar6 - uVar10 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar10 = uVar10 + param_3;\n        }\n      }\n      uVar7 = (uVar10 - uVar6) / uVar2;\n      uVar3 = (param_3 & 0xffff) * uVar7;\n      uVar6 = param_1 & 0xffff | ((uVar10 - uVar6) - uVar2 * uVar7) * 0x10000;\n      uVar2 = uVar7;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        uVar2 = uVar7 - 1;\n        if ((CARRY4(uVar6,param_3) == false) &&\n           (uVar6 + param_3 <= uVar3 && uVar3 - (uVar6 + param_3) != 0)) {\n          uVar2 = uVar7 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n      uVar10 = 0;\n    }\n    else {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar5 = count_leading_zeroes(param_3);\n      if (uVar5 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar12 = param_3 & 0xffff;\n        uVar10 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar5 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar5 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar10 = uVar3 / uVar2;\n        uVar12 = param_3 & 0xffff;\n        uVar6 = uVar12 * uVar10;\n        uVar7 = param_1 >> (0x20 - uVar5 & 0xff) | param_2 << (uVar5 & 0xff);\n        uVar3 = uVar7 >> 0x10 | (uVar3 - uVar2 * uVar10) * 0x10000;\n        param_1 = param_1 << (uVar5 & 0xff);\n        uVar5 = uVar10;\n        if (uVar3 <= uVar6 && uVar6 - uVar3 != 0) {\n          bVar13 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar5 = uVar10 - 1;\n          if ((bVar13 == false) && (uVar3 <= uVar6 && uVar6 - uVar3 != 0)) {\n            uVar5 = uVar10 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar8 = (uVar3 - uVar6) / uVar2;\n        uVar4 = uVar12 * uVar8;\n        param_2 = uVar7 & 0xffff | ((uVar3 - uVar6) - uVar2 * uVar8) * 0x10000;\n        uVar10 = uVar8;\n        if (param_2 <= uVar4 && uVar4 - param_2 != 0) {\n          bVar13 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar10 = uVar8 - 1;\n          if ((bVar13 == false) && (param_2 <= uVar4 && uVar4 - param_2 != 0)) {\n            uVar10 = uVar8 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar4;\n        uVar10 = uVar10 | uVar5 << 0x10;\n      }\n      uVar3 = param_2 / uVar2;\n      uVar6 = uVar12 * uVar3;\n      uVar7 = param_1 >> 0x10 | (param_2 - uVar2 * uVar3) * 0x10000;\n      uVar5 = uVar3;\n      if (uVar7 <= uVar6 && uVar6 - uVar7 != 0) {\n        bVar13 = CARRY4(uVar7,param_3);\n        uVar7 = uVar7 + param_3;\n        uVar5 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar7 <= uVar6 && uVar6 - uVar7 != 0)) {\n          uVar5 = uVar3 - 2;\n          uVar7 = uVar7 + param_3;\n        }\n      }\n      uVar4 = (uVar7 - uVar6) / uVar2;\n      uVar12 = uVar12 * uVar4;\n      uVar3 = param_1 & 0xffff | ((uVar7 - uVar6) - uVar2 * uVar4) * 0x10000;\n      uVar2 = uVar4;\n      if (uVar3 <= uVar12 && uVar12 - uVar3 != 0) {\n        uVar2 = uVar4 - 1;\n        if ((CARRY4(uVar3,param_3) == false) &&\n           (uVar3 + param_3 <= uVar12 && uVar12 - (uVar3 + param_3) != 0)) {\n          uVar2 = uVar4 - 2;\n        }\n      }\n      uVar3 = uVar2 | uVar5 << 0x10;\n    }\n  }\n  else if (param_2 < param_4) {\n    uVar3 = 0;\n    uVar10 = 0;\n  }\n  else {\n    uVar5 = count_leading_zeroes(param_4);\n    if (uVar5 == 0) {\n      if ((param_4 < param_2) || (uVar3 = uVar5, uVar10 = uVar5, param_3 <= param_1)) {\n        uVar3 = 1;\n        uVar10 = 0;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar5;\n      uVar6 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_3 >> (uVar2 & 0xff) | param_4 << (uVar5 & 0xff);\n      uVar7 = uVar4 >> 0x10;\n      uVar3 = uVar6 / uVar7;\n      uVar12 = (uVar4 & 0xffff) * uVar3;\n      uVar10 = param_2 << (uVar5 & 0xff) | param_1 >> (uVar2 & 0xff);\n      uVar6 = uVar10 >> 0x10 | (uVar6 - uVar7 * uVar3) * 0x10000;\n      uVar2 = uVar3;\n      if (uVar6 <= uVar12 && uVar12 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar2 = uVar3 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar12 && uVar12 - uVar6 != 0)) {\n          uVar2 = uVar3 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar8 = (uVar6 - uVar12) / uVar7;\n      uVar11 = (uVar4 & 0xffff) * uVar8;\n      uVar6 = uVar10 & 0xffff | ((uVar6 - uVar12) - uVar7 * uVar8) * 0x10000;\n      uVar3 = uVar8;\n      if (uVar6 <= uVar11 && uVar11 - uVar6 != 0) {\n        bVar13 = CARRY4(uVar6,uVar4);\n        uVar6 = uVar6 + uVar4;\n        uVar3 = uVar8 - 1;\n        if ((bVar13 == false) && (uVar6 <= uVar11 && uVar11 - uVar6 != 0)) {\n          uVar3 = uVar8 - 2;\n          uVar6 = uVar6 + uVar4;\n        }\n      }\n      uVar3 = uVar3 | uVar2 << 0x10;\n      lVar1 = (ulonglong)uVar3 * (ulonglong)(param_3 << (uVar5 & 0xff));\n      uVar2 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar6 - uVar11 < uVar2) ||\n         ((uVar10 = 0, uVar6 - uVar11 == uVar2 && (param_1 << (uVar5 & 0xff) < (uint)lVar1)))) {\n        uVar3 = uVar3 - 1;\n        uVar10 = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    bVar13 = uVar3 != 0;\n    uVar3 = -uVar3;\n    uVar10 = -uVar10 - (uint)bVar13;\n  }\n  return CONCAT44(uVar10,uVar3);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000845c0",
            "calling": [
                "FUN_0008455c"
            ],
            "imported": false,
            "current_name": "FUNC_000845c0"
        },
        "FUN_0008159e": {
            "renaming": {
                "FUN_0008159e": "send_data_to_device_0008159e",
                "param_1": "device",
                "param_2": "data",
                "param_3": "buffer",
                "local_c": "masked_data",
                "uStack_8": "data_buffer"
            },
            "code": "void send_data_to_device_0008159e(void* device, uint16_t data, void* buffer)\n{\n  uint16_t masked_data = data & 0xffff00ff;\n  void* data_buffer = buffer;\n  send_data(device, &masked_data, 1, 0, device);\n  return;\n}",
            "called": [
                "FUN_00081570"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008159e",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "send_data_to_device_0008159e"
        },
        "FUN_000806a0": {
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "*param_1": "*data_array",
                "param_2": "size",
                "bVar1": "result",
                "puVar2": "data_ptr",
                "uVar3": "temp_var",
                "uVar4": "index_1",
                "uVar5": "index_2",
                "iVar6": "index_2",
                "uVar7": "index_1",
                "PTR_DAT_00080694": "PTR_DAT_data_ptr",
                "DAT_00080698": "DAT_temp_var",
                "DAT_0008069c": "DAT_temp_var_2"
            },
            "code": "byte process_data_000806a0(byte *data_array, undefined4 size)\n{\n  byte result;\n  undefined *data_ptr;\n  undefined4 temp_var;\n  uint index_1;\n  undefined4 index_2;\n  uint index_3;\n  \n  if (0x3b < *data_array) {\n    goto LABEL_00080660;\n  }\n  \n  // Function call with parameters\n  FUN_00080f0c(size, 1, 0x220, *data_array, 0x960);\n  \n  data_ptr = PTR_DAT_00080694;\n  index_1 = (uint)*data_array;\n  result = PTR_DAT_00080694[index_1 * 8];\n  data_array[2] = 0;\n  index_3 = index_1 / 0xc;\n  data_ptr[index_1 * 8] = result & 0xc0 | (byte)size & 0x3f;\n  data_array[1] = 0;\n  index_2 = 0;\n  \n  // Loop with index variable\n  while (index_2 != 0xc) {\n    if ((int)((uint)(byte)data_ptr[(index_2 + index_3 * 0xc) * 8] << 0x19) < 0) {\n      goto LABEL_00080652;\n    }\n    index_2 = index_2 + 1;\n  }\n  \n  // If-else statements\n  temp_var = DAT_00080698;\n  if (index_3 == 0) {\n    index_2 = 0x1e;\n  }\n  else {\n    if (index_3 == 1) {\n      index_2 = 0x1f;\n    }\n    else if (index_3 == 2) {\n      index_2 = 0x20;\n    }\n    else if (index_3 == 3) {\n      index_3 = 2;\n      index_2 = 0x1d;\n    }\n    else if (index_3 == 4) {\n      index_3 = 0;\n      index_2 = 0x1b;\n    }\n  }\n  \n  // Function call with parameters\n  FUN_000803fc(temp_var, index_3, index_2, index_2);\n  \n  data_ptr[(uint)*data_array * 8] = data_ptr[(uint)*data_array * 8] | 0x40;\n  \nLABEL_00080660:\n  return *data_array;\n}",
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806a0",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "process_data_000806a0"
        },
        "FUN_0008151c": {
            "renaming": {
                "FUN_0008151c": "update_params_0008151c",
                "param_1": "old_params",
                "param_2": "new_params",
                "PTR_DAT_0008155c": "PTR_DAT",
                "update_values": "update_values",
                "reset_params": "reset_params"
            },
            "code": "void update_params_0008151c(int *old_params, int *new_params)\n{\n    if (*old_params != 0) {\n        if ((*new_params != 0) && (PTR_DAT_0008155c_0008155c != (undefined *)0x0)) {\n            if ((uint)new_params[2] <= (uint)old_params[1]) {\n                update_values();\n                old_params[2] = new_params[2];\n                goto END;\n            }\n        }\n        reset_params();\n    }\n    *old_params = *new_params;\n    old_params[1] = new_params[1];\n    old_params[2] = new_params[2];\n    *new_params = 0;\n    new_params[1] = 0;\nEND:\n    new_params[2] = 0;\n    return;\n}",
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008151c",
            "calling": [
                "FUN_00081560"
            ],
            "imported": false,
            "current_name": "update_params_0008151c"
        },
        "FUN_000816f8": {
            "renaming": {
                "FUN_000816f8": "validate_and_run_function_000816f8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "message",
                "param_4": "param_4",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "function_name",
                "uVar4": "current_time"
            },
            "code": "void validate_and_run_function_000816f8(int input1, int input2, char *message, int param_4){\n  int var1 = *(int *)(*DAT_00081724 + 0xc);\n  int var2 = param_4;\n  char *function_name = \"assertion (%s) failed: file \"%s\", line %d\\n\";\n  if (message == NULL) \n    goto END;\n  do {\n    param_4 = input1;\n    validate_and_print_error(var1, function_name, var2, input1, input2, \"assertion\", message);\n    unsigned long long current_time = get_current_time();\n    input2 = (int)(current_time >> 0x20);\n    var1 = (int)current_time;\n    END:\n    message = \"\";\n    var2 = param_4;\n  } while( true );\n}",
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816f8",
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "validate_and_run_function_000816f8"
        },
        "FUN_00084484": {
            "renaming": {
                "FUN_00084484": "process_data_00084484",
                "param_1": "data",
                "uVar1": "result",
                "iVar2": "result_helper",
                "iVar3": "data_ptr",
                "PTR_00084490": "PTR_DATA",
                "OFFSET_DATA": "OFFSET_DATA",
                "OFFSET_DATA_2": "OFFSET_DATA_2",
                "OFFSET_DATA_3": "OFFSET_DATA_3",
                "OFFSET_DATA_4": "OFFSET_DATA_4",
                "OFFSET_DATA_5": "OFFSET_DATA_5",
                "OFFSET_DATA_6": "OFFSET_DATA_6",
                "OFFSET_DATA_7": "OFFSET_DATA_7",
                "OFFSET_DATA_8": "OFFSET_DATA_8"
            },
            "code": "int process_data_00084484(int data)\n{\n  int result;\n  int data_ptr;\n  int zero = 0;\n  \n  data_ptr = *PTR_00084490;\n  if (data != 0) {\n    if ((data_ptr != 0) && (*(int *)(data_ptr + OFFSET_DATA) == 0)) {\n      initialize_data();\n    }\n    if (*(short *)(data + OFFSET_DATA_2) != 0) {\n      result = process_data_00084484_helper(data_ptr, data);\n      if ((*(code **)(data + OFFSET_DATA_3) != (code *)0x0) &&\n         (result = (**(code **)(data + OFFSET_DATA_3))(data_ptr,*(int *)(data + OFFSET_DATA_4)), result < 0))\n      {\n        result = -1;\n      }\n      if ((int)((uint)*(ushort *)(data + OFFSET_DATA_2) << 0x18) < 0) {\n        update_data(data_ptr,*(int *)(data + OFFSET_DATA_5));\n      }\n      if (*(int *)(data + OFFSET_DATA_6) != 0) {\n        if (*(int *)(data + OFFSET_DATA_6) != data + OFFSET_DATA_7) {\n          update_data(data_ptr);\n        }\n        *(int *)(data + OFFSET_DATA_6) = 0;\n      }\n      if (*(int *)(data + OFFSET_DATA_8) != 0) {\n        update_data(data_ptr);\n        *(int *)(data + OFFSET_DATA_8) = 0;\n      }\n      do_nothing_1();\n      *(short *)(data + OFFSET_DATA_2) = 0;\n      do_nothing_2();\n      return result;\n    }\n  }\n  return zero;\n}",
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084484",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084484"
        },
        "FUN_000811ca": {
            "renaming": {
                "FUN_000811ca": "update_data_000811ca",
                "param_1": "data_ptr",
                "param_2": "new_data",
                "uVar1": "updated_ptr"
            },
            "code": "void update_data_000811ca(int data_ptr, undefined new_data)\n{\n  uint updated_ptr;\n  updated_ptr = *(int *)(data_ptr + 0x80) + 1U & 0x7f;\n  if (updated_ptr != *(uint *)(data_ptr + 0x84)) {\n    *(undefined *)(data_ptr + *(int *)(data_ptr + 0x80)) = new_data;\n    *(uint *)(data_ptr + 0x80) = updated_ptr;\n  }\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ca",
            "calling": [],
            "imported": false,
            "current_name": "update_data_000811ca"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "send_data_to_device_00080164",
                "param_1": "device_address",
                "param_2": "data_length",
                "param_3": "data_buffer",
                "param_4": "additional_data_buffer",
                "PTR_DAT_0008017c": "packet_header",
                "PTR_DAT_00080180": "send_packet"
            },
            "code": "void send_data_to_device_00080164(uint32_t device_address, uint32_t data_length, uint32_t* data_buffer, uint32_t* additional_data_buffer)\n{\n    PTR_DAT_00080180(device_address, 0x5a);\n    PTR_DAT_00080180(device_address, 0x5a, data_length, data_buffer, additional_data_buffer);\n    return;\n}",
            "called": [
                "FUN_000806f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "send_data_to_device_00080164"
        },
        "FUN_00084244": {
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "result",
                "param_2": "data_ptr",
                "param_3": "zero",
                "param_4": "two",
                "sVar1": "data",
                "puVar2": "data_ptr2",
                "iVar3": "status",
                "uVar4": "flag"
            },
            "code": "void process_data_00084244(int *result, int data_ptr, int zero, int two) {\n  short data = *(short *)(data_ptr + 0xe);\n  ushort flag = *(ushort *)(data_ptr + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    FUN_000844e0(result, (int)data, 0, 2);\n    flag = *(ushort *)(data_ptr + 0xc);\n  }\n  *(ushort *)(data_ptr + 0xc) = flag & 0xefff;\n  undefined *data_ptr2 = PTR_DAT_000843dc;\n  *(undefined4 *)PTR_DAT_000843dc = 0;\n  int status = FUN_00080ec8((int)data, zero, two, two, unaff_r4, unaff_r5, unaff_r6, in_lr);\n  if ((status == -1) && (*(int *)data_ptr2 != 0)) {\n    *result = *(int *)data_ptr2;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084244",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084244"
        },
        "FUN_00081496": {
            "renaming": {
                "FUN_00081496": "update_array_00081496",
                "param_1": "array_ptr",
                "param_2": "array_size",
                "iVar1": "updated_value",
                "FUN_00081f9c": "calculate_new_value"
            },
            "code": "int update_array_00081496(int *array_ptr, int array_size, undefined4 param_3, undefined4 param_4) {\n  int updated_value;\n  updated_value = calculate_new_value(*array_ptr, array_size + 1, param_3, param_4, param_4);\n  if (updated_value != 0) {\n    *array_ptr = updated_value;\n    array_ptr[1] = array_size;\n    updated_value = 1;\n  }\n  return updated_value;\n}",
            "called": [
                "FUN_00081f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081496",
            "calling": [
                "FUN_000814ae"
            ],
            "imported": false,
            "current_name": "update_array_00081496"
        },
        "FUN_00084004": {
            "renaming": {
                "FUN_00084004": "get_dat_value_00084004",
                "DAT_00084008": "data_value"
            },
            "code": "int get_dat_value_00084004() {\n  return DAT_00084008;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084004",
            "calling": [
                "FUN_0008434c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084004"
        },
        "FUN_00081014": {
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param_3",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "iVar3": "result",
                "uVar4": "data_value",
                "iVar5": "data_index"
            },
            "code": "void update_data_00081014(int index, int value, undefined4 param_3)\\n{\\n  undefined *data_ptr_2 = PTR_DAT_00081080;\\n  undefined *data_ptr_1 = PTR_DAT_0008107c;\\n  if (data_ptr_1[index * 0x1c + 0xc] != \"\\0\") {\\n    if ((data_ptr_2[index] & 0xf) == 5) {\\n      call_function(index,1,param_3,5,index,value,param_3);\\n    }\\n    data_ptr_2[index] = data_ptr_2[index] & 0xf | (byte)(value << 4);\\n    int data_index = *(int *)(data_ptr_1 + index * 0x1c);\\n    undefined4 data_value = *(undefined4 *)(data_ptr_1 + index * 0x1c + 4);\\n    int result = check_data(data_index,data_value);\\n    if (result == 0) {\\n      if (value != 0) {\\n        *(undefined4 *)(data_index + 100) = data_value;\\n        return;\\n      }\\n      *(undefined4 *)(data_index + 0x60) = data_value;\\n      return;\\n    }\\n    update_data_00081014(data_index,data_value,value,0,1);\\n  }\\n  return;\\n}",
            "called": [
                "FUN_00080a94",
                "FUN_00080a0a",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081014",
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_data_00081014"
        },
        "FUN_000816ec": {
            "renaming": {
                "FUN_000816ec": "addDataToBuffer_000816ec",
                "param_1": "data",
                "param_2": "bufferIndex",
                "param_3": "flag",
                "puVar1": "buffer",
                "uVar2": "bufferLength",
                "iVar3": "PTR_DAT_000836d0",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "DAT_000836d4": "memoryAllocationFlag",
                "*puVar1": "*buffer",
                "puVar1[1]": "buffer[1]",
                "puVar1[0x62]": "flagBuffer",
                "puVar1[99]": "dataBuffer",
                "uVar4": "flagBit",
                "puVar1[uVar2 + 0x22]": "buffer[bufferLength + 0x22]",
                "puVar1[uVar2 + 0x42]": "buffer[bufferLength + 0x42]",
                "puVar1[uVar2 + 2]": "buffer[bufferLength + 2]",
                "*UNRECOVERED_JUMPTABLE_00": "jumpTable(0)"
            },
            "code": "void addDataToBuffer_000816ec(int data, int bufferIndex, int flag)\n{\n  int* buffer = *(int **)(PTR_DAT_000836d0 + 0x148);\n  if (buffer == (int *)0x0) {\n    buffer = (int *)(PTR_DAT_000836d0 + 0x14c);\n    *(int **)(PTR_DAT_000836d0 + 0x148) = buffer;\n  }\n  uint bufferLength = buffer[1];\n  if (bufferLength > 31) {\n    if ((DAT_000836d4 == 0) || (buffer = (int *)allocateMemory(400), buffer == (int *)0x0)) {\n      abort();\n      return;\n    }\n    *buffer = *(int *)(PTR_DAT_000836d0 + 0x148);\n    buffer[1] = 0;\n    bufferLength = 0;\n    *(int **)(PTR_DAT_000836d0 + 0x148) = buffer;\n    buffer[0x62] = 0;\n    buffer[99] = 0;\n  }\n  uint flagBit = 1 << (bufferLength & 0xff);\n  buffer[bufferLength + 0x22] = data;\n  buffer[0x62] |= flagBit;\n  buffer[bufferLength + 0x42] = flag;\n  buffer[99] |= flagBit;\n  buffer[1] = bufferLength + 1;\n  jumpTable(0);\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816ec",
            "calling": [],
            "imported": false,
            "current_name": "addDataToBuffer_000816ec"
        },
        "FUN_00083ca8": {
            "renaming": {
                "FUN_00083ca8": "FUNC_00083ca8"
            },
            "code": "\nundefined4 FUNC_00083ca8(undefined4 *param_1,uint *param_2,uint **param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint *puVar5;\n  uint *puVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint local_2c;\n  \n  if (param_3[2] != (uint *)0x0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar4 = (uint)uVar3;\n    if (((int)(uVar4 << 0x1c) < 0) && (param_2[4] != 0)) {\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    else {\n      iVar1 = FUN_0008356c(param_1,param_2);\n      if (iVar1 != 0) {\n        return 0xffffffff;\n      }\n      uVar3 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar3;\n      puVar6 = *param_3;\n      uVar2 = DAT_00083fb8;\n    }\n    DAT_00083fb8 = uVar2;\n    if ((uVar3 & 2) == 0) {\n      uVar2 = uVar4 & 2;\n      uVar8 = uVar4 & 1;\n      uVar7 = uVar2;\n      uVar10 = uVar2;\n      local_2c = uVar2;\n      uVar9 = uVar8;\n      if (uVar8 == 0) {\n        while( true ) {\n          while (uVar8 == 0) {\n            uVar9 = *puVar6;\n            puVar5 = puVar6 + 1;\n            puVar6 = puVar6 + 2;\n            uVar8 = *puVar5;\n          }\n          uVar2 = param_2[2];\n          if ((int)(uVar4 << 0x16) < 0) {\n            if (uVar8 < uVar2) {\n              uVar4 = *param_2;\n              uVar2 = uVar8;\n            }\n            else if ((uVar4 & 0x480) == 0) {\n              uVar4 = *param_2;\n            }\n            else {\n              iVar1 = *param_2 - param_2[4];\n              uVar2 = iVar1 + 1 + uVar8;\n              uVar7 = (int)(param_2[5] * 3) / 2;\n              if (uVar2 <= uVar7) {\n                uVar2 = uVar7;\n              }\n              if ((int)(uVar4 << 0x15) < 0) {\n                uVar7 = FUNC_00081810(param_1,uVar2);\n                if (uVar7 == 0) {\n                  *param_1 = 0xc;\n                  uVar3 = *(ushort *)(param_2 + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(uVar7,param_2[4],iVar1);\n                *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                uVar7 = FUNC_00081fac(param_1);\n                if (uVar7 == 0) {\n                  FUN_00083b10(param_1,param_2[4]);\n                  uVar3 = *(ushort *)(param_2 + 3) & 0xff7f;\n                  *param_1 = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              uVar4 = uVar7 + iVar1;\n              param_2[4] = uVar7;\n              param_2[5] = uVar2;\n              *param_2 = uVar4;\n              param_2[2] = uVar2 - iVar1;\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(uVar4,uVar9,uVar2);\n            param_2[2] = param_2[2] - uVar2;\n            *param_2 = *param_2 + uVar2;\n            uVar2 = uVar8;\n          }\n          else if ((param_2[4] < *param_2) || (uVar4 = param_2[5], uVar8 < uVar4)) {\n            if (uVar8 < uVar2) {\n              uVar2 = uVar8;\n            }\n            FUN_00081e34(*param_2,uVar9,uVar2);\n            uVar4 = param_2[2];\n            param_2[2] = uVar4 - uVar2;\n            *param_2 = *param_2 + uVar2;\n            if ((uVar4 - uVar2 == 0) && (iVar1 = FUN_00083850(param_1,param_2), iVar1 != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            uVar2 = 0x7fffffff;\n            if (uVar8 < 0x7fffffff) {\n              uVar2 = uVar8;\n            }\n            uVar2 = (*(code *)param_2[9])(param_1,param_2[7],uVar9,(uVar2 / uVar4) * uVar4);\n            if ((int)uVar2 < 1) goto LAB_00083da2;\n          }\n          puVar5 = param_3[2];\n          uVar8 = uVar8 - uVar2;\n          param_3[2] = (uint *)((int)puVar5 - uVar2);\n          if ((uint *)((int)puVar5 - uVar2) == (uint *)0x0) break;\n          uVar4 = (uint)*(ushort *)(param_2 + 3);\n          uVar9 = uVar9 + uVar2;\n        }\n      }\n      else {\n        do {\n          while (uVar2 == 0) {\n            uVar10 = *puVar6;\n            uVar2 = puVar6[1];\n            local_2c = 0;\n            puVar6 = puVar6 + 2;\n          }\n          if (local_2c == 0) {\n            iVar1 = FUN_000840f8(uVar10,10,uVar2);\n            if (iVar1 == 0) {\n              uVar7 = uVar2 + 1;\n              local_2c = 1;\n            }\n            else {\n              uVar7 = (iVar1 + 1) - uVar10;\n              local_2c = 1;\n            }\n          }\n          uVar8 = *param_2;\n          uVar4 = uVar7;\n          if (uVar2 <= uVar7) {\n            uVar4 = uVar2;\n          }\n          uVar9 = param_2[5];\n          if ((param_2[4] < uVar8) && (uVar11 = param_2[2] + uVar9, (int)uVar11 < (int)uVar4)) {\n            FUN_00081e34(uVar8,uVar10,uVar11);\n            *param_2 = *param_2 + uVar11;\n            iVar1 = FUN_00083850(param_1,param_2);\n            if (iVar1 != 0) goto LAB_00083da2;\n          }\n          else if ((int)uVar4 < (int)uVar9) {\n            FUN_00081e34(uVar8,uVar10,uVar4);\n            param_2[2] = param_2[2] - uVar4;\n            *param_2 = uVar4 + *param_2;\n            uVar11 = uVar4;\n          }\n          else {\n            uVar11 = (*(code *)param_2[9])(param_1,param_2[7],uVar10,uVar9);\n            if ((int)uVar11 < 1) goto LAB_00083da2;\n          }\n          uVar7 = uVar7 - uVar11;\n          if ((uVar7 == 0) && (iVar1 = FUN_00083850(param_1,param_2), local_2c = uVar7, iVar1 != 0))\n          goto LAB_00083da2;\n          puVar5 = param_3[2];\n          uVar10 = uVar10 + uVar11;\n          uVar2 = uVar2 - uVar11;\n          param_3[2] = (uint *)((int)puVar5 - uVar11);\n        } while ((uint *)((int)puVar5 - uVar11) != (uint *)0x0);\n      }\n    }\n    else {\n      uVar7 = 0;\n      uVar4 = 0;\n      do {\n        while( true ) {\n          uVar10 = uVar4;\n          if (uVar2 <= uVar4) {\n            uVar10 = uVar2;\n          }\n          if (uVar4 != 0) break;\n          uVar7 = *puVar6;\n          uVar4 = puVar6[1];\n          puVar6 = puVar6 + 2;\n        }\n        iVar1 = (*(code *)param_2[9])(param_1,param_2[7],uVar7,uVar10);\n        if (iVar1 < 1) {\nLAB_00083da2:\n          uVar3 = *(ushort *)(param_2 + 3);\nLAB_00083da4:\n          *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n          return 0xffffffff;\n        }\n        puVar5 = param_3[2];\n        uVar7 = uVar7 + iVar1;\n        uVar4 = uVar4 - iVar1;\n        param_3[2] = (uint *)((int)puVar5 - iVar1);\n      } while ((uint *)((int)puVar5 - iVar1) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081d48",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00083ca8",
            "calling": [
                "FUN_00082824"
            ],
            "imported": false,
            "current_name": "FUNC_00083ca8"
        },
        "FUN_00081810": {
            "renaming": {
                "FUN_00081810": "FUNC_00081810"
            },
            "code": "\nint * FUNC_00081810(undefined4 *param_1,uint param_2)\n\n{\n  uint uVar1;\n  uint *puVar2;\n  undefined *puVar3;\n  int iVar4;\n  uint uVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  int *piVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  int *piVar14;\n  uint uVar15;\n  int *piVar16;\n  uint uVar17;\n  uint uVar18;\n  \n  if (param_2 + 0xb < 0x17) {\n    uVar15 = 0x10;\n    if (0x10 < param_2) goto LAB_00081876;\n  }\n  else {\n    uVar15 = param_2 + 0xb & 0xfffffff8;\n    if (((int)uVar15 < 0) || (uVar15 < param_2)) {\nLAB_00081876:\n      *param_1 = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00081f94(param_1);\n  uVar1 = DAT_00081b3c;\n  if (uVar15 < 0x1f8) {\n    iVar13 = *(int *)(DAT_00081b3c + uVar15 + 0xc);\n    if ((iVar13 != DAT_00081b3c + uVar15) ||\n       (iVar4 = iVar13 + 8, iVar13 = *(int *)(iVar13 + 0x14), iVar4 != iVar13)) {\n      iVar7 = *(int *)(iVar13 + 0xc);\n      iVar9 = (*(uint *)(iVar13 + 4) & 0xfffffffc) + iVar13;\n      uVar15 = *(uint *)(iVar9 + 4);\n      iVar4 = *(int *)(iVar13 + 8);\n      *(int *)(iVar4 + 0xc) = iVar7;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar9 + 4) = uVar15 | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    uVar18 = (uVar15 >> 3) + 2;\n  }\n  else {\n    uVar18 = uVar15 >> 9;\n    if (uVar18 == 0) {\n      iVar4 = 0x7e;\n      iVar13 = 0x3f;\n    }\n    else if (uVar18 < 5) {\n      iVar13 = (uVar15 >> 6) + 0x38;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x15) {\n      iVar13 = uVar18 + 0x5b;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x55) {\n      iVar13 = (uVar15 >> 0xc) + 0x6e;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x155) {\n      iVar13 = (uVar15 >> 0xf) + 0x77;\n      iVar4 = iVar13 * 2;\n    }\n    else if (uVar18 < 0x555) {\n      iVar13 = (uVar15 >> 0x12) + 0x7c;\n      iVar4 = iVar13 * 2;\n    }\n    else {\n      iVar4 = 0xfc;\n      iVar13 = 0x7e;\n    }\n    iVar7 = DAT_00081b3c + iVar4 * 4;\n    for (iVar4 = *(int *)(iVar7 + 0xc); iVar7 != iVar4; iVar4 = *(int *)(iVar4 + 0xc)) {\n      uVar18 = *(uint *)(iVar4 + 4) & 0xfffffffc;\n      iVar9 = uVar18 - uVar15;\n      if (0xf < iVar9) {\n        iVar13 = iVar13 + -1;\n        break;\n      }\n      if (-1 < iVar9) {\n        iVar7 = uVar18 + iVar4;\n        uVar15 = *(uint *)(iVar7 + 4);\n        iVar9 = *(int *)(iVar4 + 0xc);\n        iVar13 = *(int *)(iVar4 + 8);\n        *(int *)(iVar13 + 0xc) = iVar9;\n        *(int *)(iVar9 + 8) = iVar13;\n        *(uint *)(iVar7 + 4) = uVar15 | 1;\n        do_nothing_00081f98(param_1);\n        return (int *)(iVar4 + 8);\n      }\n    }\n    uVar18 = iVar13 + 1;\n  }\n  iVar13 = *(int *)(DAT_00081b3c + 0x10);\n  iVar4 = DAT_00081b3c + 8;\n  if (iVar13 == iVar4) {\n    uVar5 = *(uint *)(DAT_00081b3c + 4);\n  }\n  else {\n    uVar5 = *(uint *)(iVar13 + 4);\n    uVar6 = uVar5 & 0xfffffffc;\n    uVar8 = uVar6 - uVar15;\n    if (0xf < (int)uVar8) {\n      iVar7 = uVar15 + iVar13;\n      *(uint *)(iVar13 + 4) = uVar15 | 1;\n      *(int *)(uVar1 + 0x14) = iVar7;\n      *(int *)(uVar1 + 0x10) = iVar7;\n      *(int *)(iVar7 + 0xc) = iVar4;\n      *(int *)(iVar7 + 8) = iVar4;\n      *(uint *)(iVar7 + 4) = uVar8 | 1;\n      *(uint *)(iVar7 + uVar8) = uVar8;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    *(int *)(DAT_00081b3c + 0x14) = iVar4;\n    *(int *)(uVar1 + 0x10) = iVar4;\n    if (-1 < (int)uVar8) {\n      *(uint *)(uVar6 + iVar13 + 4) = *(uint *)(uVar6 + iVar13 + 4) | 1;\n      do_nothing_00081f98(param_1);\n      return (int *)(iVar13 + 8);\n    }\n    if (uVar6 < 0x200) {\n      iVar9 = uVar1 + (uVar5 & 0xfffffff8);\n      iVar7 = *(int *)(iVar9 + 8);\n      uVar5 = 1 << ((int)(uVar5 >> 3) >> 2 & 0xffU) | *(uint *)(uVar1 + 4);\n      *(int *)(iVar13 + 8) = iVar7;\n      *(int *)(iVar13 + 0xc) = iVar9;\n      *(uint *)(uVar1 + 4) = uVar5;\n      *(int *)(iVar9 + 8) = iVar13;\n      *(int *)(iVar7 + 0xc) = iVar13;\n    }\n    else {\n      uVar8 = uVar5 >> 9;\n      if (uVar8 < 5) {\n        iVar9 = (uVar5 >> 6) + 0x38;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x15) {\n        iVar9 = uVar8 + 0x5b;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x55) {\n        iVar9 = (uVar5 >> 0xc) + 0x6e;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x155) {\n        iVar9 = (uVar5 >> 0xf) + 0x77;\n        iVar7 = iVar9 * 2;\n      }\n      else if (uVar8 < 0x555) {\n        iVar9 = (uVar5 >> 0x12) + 0x7c;\n        iVar7 = iVar9 * 2;\n      }\n      else {\n        iVar7 = 0xfc;\n        iVar9 = 0x7e;\n      }\n      iVar7 = uVar1 + iVar7 * 4;\n      iVar12 = *(int *)(iVar7 + 8);\n      if (iVar12 == iVar7) {\n        uVar5 = *(uint *)(DAT_00081d44 + 4) | 1 << (iVar9 >> 2 & 0xffU);\n        *(uint *)(DAT_00081d44 + 4) = uVar5;\n        iVar9 = iVar12;\n      }\n      else {\n        do {\n          iVar9 = iVar12;\n          if ((*(uint *)(iVar12 + 4) & 0xfffffffc) <= uVar6) break;\n          iVar12 = *(int *)(iVar12 + 8);\n          iVar9 = iVar12;\n        } while (iVar7 != iVar12);\n        iVar12 = *(int *)(iVar9 + 0xc);\n        uVar5 = *(uint *)(uVar1 + 4);\n      }\n      *(int *)(iVar13 + 0xc) = iVar12;\n      *(int *)(iVar13 + 8) = iVar9;\n      *(int *)(iVar12 + 8) = iVar13;\n      *(int *)(iVar9 + 0xc) = iVar13;\n    }\n  }\n  uVar6 = 1 << ((int)uVar18 >> 2 & 0xffU);\n  if (uVar6 <= uVar5) {\n    if ((uVar5 & uVar6) == 0) {\n      uVar18 = uVar18 & 0xfffffffc;\n      do {\n        uVar6 = uVar6 << 1;\n        uVar18 = uVar18 + 4;\n      } while ((uVar5 & uVar6) == 0);\n    }\n    do {\n      piVar16 = (int *)(uVar1 + uVar18 * 8);\n      piVar14 = piVar16;\n      uVar5 = uVar18;\n      do {\n        for (piVar10 = (int *)piVar14[3]; piVar14 != piVar10; piVar10 = (int *)piVar10[3]) {\n          uVar8 = piVar10[1] & 0xfffffffc;\n          uVar17 = uVar8 - uVar15;\n          if (0xf < (int)uVar17) {\n            iVar9 = piVar10[2];\n            iVar13 = piVar10[3];\n            iVar7 = uVar15 + (int)piVar10;\n            piVar10[1] = uVar15 | 1;\n            *(int *)(iVar9 + 0xc) = iVar13;\n            *(int *)(iVar13 + 8) = iVar9;\n            *(int *)(uVar1 + 0x14) = iVar7;\n            *(int *)(uVar1 + 0x10) = iVar7;\n            *(int *)(iVar7 + 0xc) = iVar4;\n            *(int *)(iVar7 + 8) = iVar4;\n            *(uint *)(iVar7 + 4) = uVar17 | 1;\n            *(uint *)(iVar7 + uVar17) = uVar17;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n          if (-1 < (int)uVar17) {\n            iVar13 = piVar10[2];\n            iVar4 = piVar10[3];\n            *(uint *)((int)piVar10 + uVar8 + 4) = *(uint *)((int)piVar10 + uVar8 + 4) | 1;\n            *(int *)(iVar13 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = iVar13;\n            do_nothing_00081f98(param_1);\n            return piVar10 + 2;\n          }\n        }\n        uVar5 = uVar5 + 1;\n        piVar14 = piVar14 + 2;\n      } while ((uVar5 & 3) != 0);\n      do {\n        uVar8 = uVar18 & 3;\n        piVar14 = piVar16 + -2;\n        uVar18 = uVar18 - 1;\n        if (uVar8 == 0) {\n          uVar8 = *(uint *)(uVar1 + 4) & ~uVar6;\n          *(uint *)(uVar1 + 4) = uVar8;\n          goto LAB_00081c5e;\n        }\n        piVar16 = (int *)*piVar16;\n      } while (piVar16 == piVar14);\n      uVar8 = *(uint *)(uVar1 + 4);\nLAB_00081c5e:\n      uVar6 = uVar6 * 2;\n      if ((uVar8 <= uVar6 && uVar6 - uVar8 != 0) || (uVar18 = uVar5, uVar6 == 0)) break;\n      for (; (uVar8 & uVar6) == 0; uVar6 = uVar6 << 1) {\n        uVar18 = uVar18 + 4;\n      }\n    } while( true );\n  }\n  puVar2 = DAT_00081b44;\n  uVar18 = *(uint *)(uVar1 + 8);\n  uVar5 = *(uint *)(uVar18 + 4) & 0xfffffffc;\n  if ((uVar15 <= uVar5) && (uVar8 = uVar5 - uVar15, uVar6 = uVar18, 0xf < (int)uVar8))\n  goto LAB_00081b1a;\n  uVar8 = uVar18 + uVar5;\n  if (*DAT_00081b44 == 0xffffffff) {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x10;\n  }\n  else {\n    uVar17 = uVar15 + *(int *)PTR_DAT_00081b40 + 0x100f & 0xfffff000;\n  }\n  uVar6 = FUN_0008236c(param_1,uVar17);\n  puVar3 = PTR_DAT_00081b50;\n  if ((uVar6 == 0xffffffff) || ((uVar6 < uVar8 && (uVar18 != uVar1)))) {\n    uVar6 = *(uint *)(uVar1 + 8);\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\n  else {\n    uVar11 = *(int *)PTR_DAT_00081b50 + uVar17;\n    *(uint *)PTR_DAT_00081b50 = uVar11;\n    if ((uVar8 == uVar6) && ((uVar8 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(uVar1 + 8) + 4) = uVar17 + uVar5 | 1;\n    }\n    else {\n      if (*puVar2 == 0xffffffff) {\n        *DAT_00081b44 = uVar6;\n      }\n      else {\n        *(uint *)puVar3 = uVar11 + (uVar6 - uVar8);\n      }\n      uVar8 = uVar6 & 7;\n      if (uVar8 == 0) {\n        iVar13 = 0x1000;\n      }\n      else {\n        uVar6 = uVar6 + (8 - uVar8);\n        iVar13 = 0x1008 - uVar8;\n      }\n      iVar13 = iVar13 - (uVar17 + uVar6 & 0xfff);\n      iVar4 = FUN_0008236c(param_1,iVar13);\n      if (iVar4 == -1) {\n        uVar8 = 1;\n        iVar13 = 0;\n      }\n      else {\n        uVar8 = (iVar4 - uVar6) + iVar13 | 1;\n      }\n      uVar11 = *(int *)puVar3 + iVar13;\n      *(uint *)(uVar1 + 8) = uVar6;\n      *(uint *)puVar3 = uVar11;\n      *(uint *)(uVar6 + 4) = uVar8;\n      puVar3 = PTR_DAT_00081b50;\n      if (uVar18 != uVar1) {\n        if (uVar5 < 0x10) {\n          *(undefined4 *)(uVar6 + 4) = 1;\n          uVar18 = 0;\n          goto LAB_00081b04;\n        }\n        uVar5 = uVar5 - 0xc & 0xfffffff8;\n        *(uint *)(uVar18 + 4) = uVar5 | *(uint *)(uVar18 + 4) & 1;\n        *(undefined4 *)(uVar18 + uVar5 + 4) = 5;\n        *(undefined4 *)(uVar18 + uVar5 + 8) = 5;\n        if (0xf < uVar5) {\n          FUN_00083b10(param_1,uVar18 + 8);\n          uVar11 = *(uint *)puVar3;\n        }\n      }\n    }\n    uVar6 = *(uint *)(uVar1 + 8);\n    if (*(uint *)PTR_DAT_00081b48 < uVar11) {\n      *(uint *)PTR_DAT_00081b48 = uVar11;\n    }\n    if (*(uint *)PTR_DAT_00081b4c < uVar11) {\n      *(uint *)PTR_DAT_00081b4c = uVar11;\n    }\n    uVar18 = *(uint *)(uVar6 + 4) & 0xfffffffc;\n  }\nLAB_00081b04:\n  uVar8 = uVar18 - uVar15;\n  if ((uVar18 < uVar15) || ((int)uVar8 < 0x10)) {\n    do_nothing_00081f98(param_1);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  *(uint *)(uVar6 + 4) = uVar15 | 1;\n  *(uint *)(uVar1 + 8) = uVar15 + uVar6;\n  *(uint *)(uVar15 + uVar6 + 4) = uVar8 | 1;\n  do_nothing_00081f98(param_1);\n  return (int *)(uVar6 + 8);\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00083b10"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081810",
            "calling": [
                "FUN_000817f0",
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00084018"
            ],
            "imported": false,
            "current_name": "FUNC_00081810"
        },
        "FUN_000814ae": {
            "renaming": {
                "FUN_000814ae": "check_if_valid_000814ae",
                "param_1": "ptr_arr",
                "param_2": "size",
                "*param_1": "first_elem",
                "(uint)param_1[1]": "second_elem",
                "iVar1": "result"
            },
            "code": "int check_if_valid_000814ae(int *ptr_arr, uint size)\n{\n    int first_elem = *ptr_arr;\n    uint second_elem = (uint)ptr_arr[1];\n    if (first_elem == 0 || second_elem < size)\n    {\n        int result = FUN_00081496(ptr_arr);\n        if (result == 0)\n        {\n            return 0;\n        }\n        if (ptr_arr[2] == 0)\n        {\n            *(undefined *)*ptr_arr = 0;\n        }\n    }\n    return 1;\n}",
            "called": [
                "FUN_00081496"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814ae",
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "imported": false,
            "current_name": "check_if_valid_000814ae"
        },
        "FUN_00081778": {
            "renaming": {
                "FUN_00081778": "execute_functions_and_do_nothing_00081778",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "iVar3": "i",
                "ppcVar4": "function_ptr",
                "iVar5": "num_functions"
            },
            "code": "void execute_functions_and_do_nothing_00081778(void)\n{\n  int num_functions = (int)PTR_functions_end - (int)PTR_functions_start >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(PTR_functions_start + -4);\n    int i = 0;\n    do {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    } while (num_functions != i);\n  }\n  undefined *ptr1 = PTR_data_start;\n  undefined *ptr2 = PTR_label_start;\n  do_nothing();\n  num_functions = (int)ptr2 - (int)ptr1 >> 2;\n  if (num_functions != 0) {\n    code **function_ptr = (code **)(ptr1 + -4);\n    int i = 0;\n    do {\n      i++;\n      function_ptr++;\n      (**function_ptr)();\n    } while (num_functions != i);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081778",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "execute_functions_and_do_nothing_00081778"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "get_data_if_not_empty_000800f4",
                "param_1": "data",
                "*PTR_DAT_0008010c": "data_pointer",
                "DAT_00080110": "data_flag",
                "DAT_00080114": "data_value"
            },
            "code": "int get_data_if_not_empty_000800f4(int data) {\n    if (**PTR_DAT_0008010c == '\\0') {\n        if (DAT_00080110 != 0) {\n            data = DAT_00080114;\n        }\n        **PTR_DAT_0008010c = 1;\n    }\n    return data;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "get_data_if_not_empty_000800f4"
        },
        "FUN_000810c4": {
            "renaming": {
                "FUN_000810c4": "initialize_system_000810c4",
                "FUN_000810a6": "setup_hardware"
            },
            "code": "void initialize_system_000810c4(void)\n{\n  setup_hardware();\n  return;\n}",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810c4",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "initialize_system_000810c4"
        },
        "FUN_00080d30": {
            "renaming": {
                "FUN_00080d30": "update_register_00080d30",
                "param_1": "register_ptr",
                "param_2": "value",
                "param_3": "bit_flag",
                "PTR_": "",
                "DAT_": "",
                "uint": "uint32_t",
                "*(": "*",
                ")*": "*",
                "+ 4": "value_ptr",
                "(param_1 + 4)": "register_value_ptr",
                ") = param_2": "value",
                "*(uint *)(param_1 + 4)": "current_register_value",
                "| (param_3 & 1) << 7": "bit_flag",
                "| *(uint *)(param_1 + 4)": "value",
                "*(uint *)(param_1 + 4) | (param_3 & 1) << 7": "updated_register_value",
                "*(uint *)(param_1 + 4) = param_2 | *(uint *)(param_1 + 4) | (param_3 & 1) << 7;": "*register_value_ptr = updated_register_value;"
            },
            "code": "void update_register_00080d30(uint32_t* register_ptr, uint32_t value, uint32_t bit_flag) {\n    uint32_t* register_value_ptr = register_ptr + 4;\n    uint32_t current_register_value = *register_value_ptr;\n    uint32_t updated_register_value = current_register_value | value | (bit_flag & 1) << 7;\n    *register_value_ptr = updated_register_value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d30",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "update_register_00080d30"
        },
        "FUN_00080c98": {
            "renaming": {
                "FUN_00080c98": "find_index_of_value_00080c98",
                "param_1": "result",
                "param_2": "length",
                "param_3": "divisor",
                "param_4": "value_to_find",
                "local_58": "local_values",
                "uVar1": "num_of_divisor_pairs",
                "uVar2": "index"
            },
            "code": "uint32_t find_index_of_value_00080c98(uint32_t *result, uint32_t length, int divisor, int value_to_find) {\n  uint32_t local_values[16];\n  local_values[0] = *(uint32_t*)PTR_DAT_00080d28;\n  local_values[1] = *(uint32_t*)(PTR_DAT_00080d28 + 4);\n  local_values[2] = *(uint32_t*)(PTR_DAT_00080d28 + 8);\n  local_values[3] = *(uint32_t*)(PTR_DAT_00080d28 + 0xc);\n  local_values[4] = *(uint32_t*)(PTR_DAT_00080d28 + 0x10);\n  local_values[5] = *(uint32_t*)(PTR_DAT_00080d28 + 0x14);\n  local_values[6] = *(uint32_t*)(PTR_DAT_00080d28 + 0x18);\n  local_values[7] = *(uint32_t*)(PTR_DAT_00080d28 + 0x1c);\n  local_values[8] = *(uint32_t*)(PTR_DAT_00080d28 + 0x20);\n  local_values[9] = *(uint32_t*)(PTR_DAT_00080d28 + 0x24);\n  local_values[10] = *(uint32_t*)(PTR_DAT_00080d28 + 0x28);\n  local_values[11] = *(uint32_t*)(PTR_DAT_00080d28 + 0x2c);\n  local_values[12] = *(uint32_t*)(PTR_DAT_00080d28 + 0x30);\n  local_values[13] = *(uint32_t*)(PTR_DAT_00080d28 + 0x34);\n  local_values[14] = *(uint32_t*)(PTR_DAT_00080d28 + 0x38);\n  local_values[15] = *(uint32_t*)(PTR_DAT_00080d28 + 0x3c);\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  uint32_t num_of_divisor_pairs = length / (uint32_t)(divisor * 2);\n  if (length == divisor * 2 * num_of_divisor_pairs) {\n    num_of_divisor_pairs--;\n  }\n  uint32_t index = 0;\n  do {\n    if ((uint32_t)(value_to_find * (int)(((uint64_t)length / (uint64_t)((num_of_divisor_pairs + 1) * 2)) / (uint64_t)DAT_00080d2c)) <= local_values[index]) {\n      result[1] = (index & 0xf) << 0x10 | (num_of_divisor_pairs & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index++;\n  } while (index != 0x10);\n  return 0xffffffff;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c98",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "find_index_of_value_00080c98"
        },
        "FUN_00080eec": {
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status_code",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "PTR_s_Exiting_with_status__d__00080ef8": "exit_msg"
            },
            "code": "void exit_with_status_00080eec(int status_code, int param_2, int param_3, int param_4)\n{\n    const char* PTR_s_Exiting_with_status__d__00080ef8 = \"Exiting with status: %d\\n\";\n    printf(PTR_s_Exiting_with_status__d__00080ef8, status_code);\n    while(1) {\n        // Infinite loop\n    }\n}",
            "called": [
                "FUN_000817c8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eec",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "exit_with_status_00080eec"
        },
        "FUN_000811e8": {
            "renaming": {
                "FUN_000811e8": "calculate_result_000811e8",
                "param_1": "input_array",
                "iVar1": "current_value",
                "thunk_FUN_000816d8": "thunk_get_initial_value"
            },
            "code": "int calculate_result_000811e8(int *input_array)\n{\n    int current_value;\n    int initial_value = thunk_get_initial_value();\n    input_array[3] = initial_value;\n    do {\n        current_value = (**(code **)(*input_array + 0xc))(input_array);\n        if (current_value >= 0) {\n            return current_value;\n        }\n        current_value = thunk_get_initial_value();\n    } while ((uint)(current_value - input_array[3]) < (uint)input_array[2]);\n    return -1;\n}",
            "called": [
                "thunk_FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811e8",
            "calling": [
                "FUN_00081214"
            ],
            "imported": false,
            "current_name": "calculate_result_000811e8"
        },
        "FUN_000815e8": {
            "renaming": {
                "FUN_000815e8": "do_nothing_000815e8"
            },
            "code": "\nvoid do_nothing_000815e8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815e8",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "do_nothing_000815e8"
        },
        "FUN_000806f8": {
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "truncated_length",
                "FUN_0008145c": "process_truncated_data",
                "PTR_DAT_000806f4": "PTR_DAT",
                "*DAT_000806ec": "DAT1",
                "DAT_000806f0": "DAT2"
            },
            "code": "void process_data_000806f8(byte *data, uint data_length) {\n  uint truncated_length;\n  uint max_length = 0xb4;\n  if ((int)data_length < 0x220) {\n    truncated_length = data_length & ~(data_length >> 0x1f);\n    if (0xb3 < (int)data_length) {\n      truncated_length = 0xb4;\n    }\n    data_length = process_truncated_data(truncated_length, (0x88 - (char)data[1]) * 4, (600 - (char)data[2]) * 4, data_length);\n  }\n  if (*data < 0x3c) {\n    uint length1 = (0x88 - (char)data[1]) * 4;\n    uint length2 = (600 - (char)data[2]) * 4;\n    if (((int)(data_length + length1 * -1) < 0 == SBORROW4(data_length, length1)) && (data_length <= length2)) {\n      max_length = data_length;\n    }\n    *(uint *)(PTR_DAT_000806f4_000806f4 + (uint)*data * 8 + 4) = (*DAT_000806ec / DAT_000806f0) * (max_length - 2) >> 5;\n  }\n}\n",
            "called": [
                "FUN_0008145c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000806f8",
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "process_data_000806f8"
        },
        "FUN_00082390": {
            "renaming": {
                "FUN_00082390": "FUNC_00082390"
            },
            "code": "\nint FUNC_00082390(uint *param_1,uint *param_2)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint *puVar3;\n  uint *puVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  \n  if ((((uint)param_1 | (uint)param_2) & 7) != 0) {\n    puVar1 = param_1;\n    if (((uint)param_1 & 3) != 0) {\n      puVar1 = (uint *)((uint)param_1 & 0xfffffffc) + 1;\n      uVar5 = *(uint *)((uint)param_1 & 0xfffffffc);\n      puVar3 = param_2;\n      if (((uint)param_1 & 1) == 0) {\nLAB_00082410:\n        puVar4 = (uint *)((int)puVar3 + 1);\n        uVar6 = uVar5 >> 0x10 & 0xff;\n        iVar2 = uVar6 - *(byte *)puVar3;\n        if (iVar2 != 0) {\n          return iVar2;\n        }\n        if (uVar6 == 0) {\n          return 0;\n        }\n      }\n      else {\n        puVar4 = param_2;\n        if (((uint)param_1 & 2) == 0) {\n          puVar3 = (uint *)((int)param_2 + 1);\n          uVar6 = uVar5 >> 8 & 0xff;\n          iVar2 = uVar6 - *(byte *)param_2;\n          if (iVar2 != 0) {\n            return iVar2;\n          }\n          if (uVar6 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      param_2 = (uint *)((int)puVar4 + 1);\n      iVar2 = (uVar5 >> 0x18) - (uint)*(byte *)puVar4;\n      if ((iVar2 != 0) || (uVar5 >> 0x18 == 0)) {\n        return iVar2;\n      }\n    }\n    uVar5 = (uint)param_2 & 3;\n    if (uVar5 != 0) {\n      param_2 = (uint *)((uint)param_2 & 0xfffffffc);\n      if (uVar5 == 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x10;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffff;\n          if ((uVar8 & 0x8080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x10000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else if (uVar5 < 2) {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 8;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xffffff;\n          if ((uVar8 & 0x808080) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x1000000;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      else {\n        uVar5 = *param_2;\n        do {\n          param_2 = param_2 + 1;\n          uVar7 = *puVar1;\n          uVar5 = uVar5 >> 0x18;\n          uVar8 = uVar7 + 0xfefefeff & ~uVar7;\n          uVar9 = uVar8 & 0x80808080;\n          uVar6 = uVar7 & 0xff;\n          if ((uVar8 & 0x80) != 0 || uVar6 != uVar5) goto LAB_0008258e;\n          uVar5 = *param_2;\n          uVar6 = uVar6 ^ uVar7;\n          uVar7 = uVar5 * 0x100;\n          puVar1 = puVar1 + 1;\n        } while (uVar9 == 0 && uVar6 == uVar7);\n      }\n      uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 |\n              uVar6 >> 0x18;\n      uVar5 = (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 | uVar7 >> 0x18;\n      goto LAB_0008259e;\n    }\n    param_1 = puVar1;\n    puVar3 = param_2;\n    if (((uint)puVar1 & 4) != 0) {\n      param_1 = puVar1 + 1;\n      uVar5 = *puVar1;\n      puVar3 = param_2 + 1;\n      uVar7 = *param_2;\n      uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n      if (uVar5 != uVar7 || uVar9 != 0) {\nLAB_0008259a:\n        uVar6 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 |\n                uVar5 >> 0x18;\n        uVar5 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n                uVar7 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    param_2 = puVar3;\n    if (((uint)puVar3 & 4) != 0) {\n      uVar5 = *puVar3;\n      puVar1 = puVar3 + 1;\n      do {\n        uVar6 = *param_1;\n        uVar7 = param_1[1];\n        uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n        if (uVar6 != uVar5 || uVar9 != 0) goto LAB_0008258e;\n        uVar8 = *puVar1;\n        uVar5 = puVar1[1];\n        uVar9 = uVar7 + 0xfefefeff & ~uVar7 & 0x80808080;\n        param_1 = param_1 + 2;\n        puVar1 = puVar1 + 2;\n      } while (uVar7 == uVar8 && uVar9 == 0);\n      uVar6 = uVar7 << 0x18 | (uVar7 >> 8 & 0xff) << 0x10 | (uVar7 >> 0x10 & 0xff) << 8 |\n              uVar7 >> 0x18;\n      uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 |\n              uVar8 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    uVar5 = *param_1;\n    uVar6 = param_1[1];\n    uVar7 = *param_2;\n    uVar8 = param_2[1];\n    uVar9 = uVar5 + 0xfefefeff & ~uVar5 & 0x80808080;\n    if (uVar5 != uVar7 || uVar9 != 0) goto LAB_0008259a;\n    uVar9 = uVar6 + 0xfefefeff & ~uVar6 & 0x80808080;\n    param_1 = param_1 + 2;\n    param_2 = param_2 + 2;\n  } while (uVar6 == uVar8 && uVar9 == 0);\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar8 << 0x18 | (uVar8 >> 8 & 0xff) << 0x10 | (uVar8 >> 0x10 & 0xff) << 8 | uVar8 >> 0x18;\nLAB_0008259e:\n  uVar7 = uVar9 << 0x18 | (uVar9 >> 8 & 0xff) << 0x10 | (uVar9 >> 0x10 & 0xff) << 8 | uVar9 >> 0x18;\n  if (uVar7 != 0) {\n    iVar2 = count_leading_zeroes(uVar7);\n    uVar6 = uVar6 >> (0x18U - iVar2 & 0xff);\n    uVar5 = uVar5 >> (0x18U - iVar2 & 0xff);\n  }\n  iVar2 = 1;\n  if (uVar6 <= uVar5) {\n    iVar2 = -(uint)(uVar6 < uVar5);\n  }\n  return iVar2;\nLAB_0008258e:\n  uVar6 = uVar6 << 0x18 | (uVar6 >> 8 & 0xff) << 0x10 | (uVar6 >> 0x10 & 0xff) << 8 | uVar6 >> 0x18;\n  uVar5 = uVar5 << 0x18 | (uVar5 >> 8 & 0xff) << 0x10 | (uVar5 >> 0x10 & 0xff) << 8 | uVar5 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082390",
            "calling": [
                "FUN_000815b8"
            ],
            "imported": false,
            "current_name": "FUNC_00082390"
        },
        "FUN_000810fc": {
            "renaming": {
                "FUN_000810fc": "convert_to_base_n_000810fc",
                "param_1": "result",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_char",
                "uVar2": "quotient",
                "pcVar3": "result_start",
                "cVar4": "current_digit",
                "uVar5": "temp",
                "local_15": "digits"
            },
            "code": "void convert_to_base_n_000810fc(unsigned int number, unsigned int base, char *result)\n{\n    char *current_char;\n    unsigned int quotient;\n    char *result_start;\n    char current_digit;\n    char digits[] = \"0123456789ABCDEF\";\n    result_start = result;\n    *result = 0;\n    if (base < 2) {\n        base = 10;\n    }\n    do {\n        current_char = result;\n        quotient = number / base;\n        current_digit = digits[number - base * quotient];\n        if (number < base) {\n            current_digit = digits[number];\n        }\n        *current_char = current_digit;\n        number = quotient;\n        result--;\n    } while (quotient != 0);\n    print_string(result + 1);\n}\n",
            "called": [
                "FUN_000810a6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810fc",
            "calling": [
                "FUN_0008113a"
            ],
            "imported": false,
            "current_name": "convert_to_base_n_000810fc"
        },
        "FUN_00080250": {
            "renaming": {
                "FUN_00080250": "control_vehicle_00080250",
                "puVar1": "ptr_undefined_1",
                "uVar2": "control_mode",
                "uVar3": "motor_speed",
                "iVar4": "loop_counter",
                "puVar5": "ptr_undefined_2",
                "auStack_1c": "stack_array",
                "PTR_DAT_000803bc": "ptr_control_mode",
                "PTR_DAT_000803c0": "ptr_mode_toggle",
                "do_nothing_00080f08": "delay_ms",
                "FUN_00081014": "print_message",
                "PTR_DAT_000803cc": "ptr_control_mode_flag",
                "FUN_00080164": "send_motor_command",
                "FUN_000810e8": "set_autonomous_control_mode",
                "PTR_DAT_000803c8": "ptr_steering_control",
                "PTR_DAT_000803d0": "msg_manual_control_mode",
                "FUN_00081624": "get_motor_speed",
                "FUN_0008145c": "update_motor_speed",
                "PTR_DAT_000803d4": "ptr_motor_speed",
                "PTR_DAT_000803d8": "ptr_updated_motor_speed",
                "FUN_00081248": "get_motor_speed",
                "FUN_00081276": "update_motor_speed",
                "thunk_FUN_0008113a": "send_motor_command",
                "FUN_000810c4": "set_steering_angle",
                "PTR_DAT_000803dc": "msg_steer_angle",
                "FUN_0008117a": "send_motor_command",
                "FUN_000806f8": "send_motor_command",
                "PTR_DAT_000803e0": "ptr_final_motor_speed",
                "PTR_DAT_000803e4": "ptr_final_steer_angle",
                "PTR_DAT_000803ec": "msg_motor_speed",
                "PTR_s_steer_000803f4": "msg_steer_angle_command",
                "PTR_DAT_000803f0": "msg_steer_angle",
                "PTR_s_motor_000803f8": "msg_motor_speed_command",
                "control_mode": "control_mode",
                "ptr_undefined_1": "ptr_undefined_1",
                "motor_speed": "motor_speed",
                "ptr_undefined_2": "ptr_undefined_2",
                "loop_counter": "loop_counter",
                "stack_array": "stack_array"
            },
            "code": "void control_vehicle_00080250(void)\n{\n  uint32_t control_mode = get_control_mode();\n  if (control_mode < 0x641) {\n    if (control_mode - 0x385U < 299) {\n      if (is_manual_control_mode()) {\n        disable_manual_control_mode();\n        print_message(\"Entered manual control mode.\");\n        set_autonomous_control_mode(false);\n      }\n      delay_ms(10);\n      uint32_t motor_speed = get_motor_speed();\n      uint32_t steer_angle = get_steer_angle();\n      while (motor_speed > 0) {\n        motor_speed = update_motor_speed(motor_speed);\n        send_motor_command(motor_speed);\n        set_steering_angle(steer_angle);\n        delay_ms(10);\n      }\n      set_motor_speed(0);\n      set_steering_angle(0);\n    }\n    else {\n      if (!is_autonomous_control_mode()) {\n        enable_autonomous_control_mode();\n        print_message(\"Entered autonomous control mode.\");\n      }\n      set_autonomous_control_mode(true);\n    }\n  }\n  else {\n    print_message(\"Error: Invalid control mode.\");\n    set_autonomous_control_mode(false);\n  }\n}",
            "called": [
                "FUN_0008145c",
                "FUN_00081276",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_00081014",
                "FUN_000815b8",
                "thunk_FUN_0008113a",
                "FUN_00081248",
                "FUN_00081214",
                "FUN_000810e8",
                "FUN_00080164",
                "FUN_0008117a",
                "FUN_000806f8",
                "FUN_000810c4",
                "FUN_000815de",
                "FUN_00081560",
                "FUN_00081624"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080250",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "control_vehicle_00080250"
        },
        "FUN_00080d6a": {
            "renaming": {
                "FUN_00080d6a": "set_parameter_at_offset_00080d6a",
                "param_1": "base_address",
                "param_2": "value",
                "*(undefined4 *)(param_1 + 0x28)": "*(int *)(base_address + offset)"
            },
            "code": "void set_parameter_at_offset_00080d6a(int base_address, int offset, int value) {\n  *(int *)(base_address + offset) = value;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d6a",
            "calling": [
                "FUN_00080774"
            ],
            "imported": false,
            "current_name": "set_parameter_at_offset_00080d6a"
        },
        "FUN_000813dc": {
            "renaming": {
                "FUN_000813dc": "initialize_device_000813dc",
                "param_1": "device_address",
                "param_2": "clock_divider",
                "puVar1": "device_register",
                "iVar2": "device_register_address",
                "puVar3": "device_configuration_register"
            },
            "code": "void initialize_device_000813dc(int device_address, uint32_t clock_divider)\n{\n  uint32_t *device_register;\n  int device_register_address;\n  undefined4 *device_configuration_register;\n  \n  enable_device_clock(*(undefined4 *)(device_address + 0x20));\n  device_configuration_register = *(undefined4 **)(device_address + 0x18);\n  device_configuration_register[0x48] = 0x202;\n  *device_configuration_register = 0xac;\n  device_register = DAT_000813d4;\n  device_configuration_register[1] = 0x800;\n  device_configuration_register[8] = *device_register / clock_divider >> 4;\n  device_configuration_register[3] = 0xffffffff;\n  device_configuration_register[2] = 0x61;\n  *(int *)(DAT_000813d8 + ((uint32_t)(int32_t)(char)*(byte *)(device_address + 0x1c) >> 5) * 4) = 1 << (uint32_t)(*(byte *)(device_address + 0x1c) & 0x1f);\n  device_register_address = *(int *)(device_address + 0x10);\n  *(undefined4 *)(device_register_address + 0x84) = 0;\n  *(undefined4 *)(device_register_address + 0x80) = 0;\n  device_register_address = *(int *)(device_address + 0x14);\n  *(undefined4 *)(device_register_address + 0x84) = 0;\n  *(undefined4 *)(device_register_address + 0x80) = 0;\n  *device_configuration_register = 0x50;\n  return;\n}\n",
            "called": [
                "FUN_00080aa8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813dc",
            "calling": [
                "FUN_000801e0"
            ],
            "imported": false,
            "current_name": "initialize_device_000813dc"
        },
        "FUN_00080a0a": {
            "renaming": {
                "FUN_00080a0a": "set_params_00080a0a",
                "param_1": "param_array",
                "param_2": "new_param",
                "param_3": "has_param_1",
                "param_4": "has_param_2",
                "param_5": "has_param_3",
                "param_1[0xc]": "param_array[0xc]",
                "param_1[0xd]": "param_array[0xd]",
                "param_1[0x14]": "param_array[0x14]",
                "param_1[0x15]": "param_array[0x15]",
                "param_1[0x18]": "param_array[0x18]",
                "param_1[0x19]": "param_array[0x19]",
                "param_1[0]": "param_array[0]",
                "param_1[4]": "param_array[4]"
            },
            "code": "void set_params_00080a0a(undefined4 *param_array, undefined4 new_param, int has_param_1, int has_param_2, int has_param_3, int has_param_4, int has_param_5) {\n  param_array[0] = new_param;\n  param_array[4] = new_param;\n  if (has_param_1) {\n    param_array[0xc] = new_param;\n  }\n  else {\n    param_array[0xd] = new_param;\n  }\n  if (has_param_2) {\n    param_array[0x14] = new_param;\n  }\n  else {\n    param_array[0x15] = new_param;\n  }\n  if (has_param_3) {\n    param_array[0x18] = new_param;\n  }\n  else {\n    param_array[0x19] = new_param;\n  }\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a0a",
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "imported": false,
            "current_name": "set_params_00080a0a"
        },
        "FUN_00080b2c": {
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "channel_id",
                "param_2": "num_channels",
                "param_3": "tc_config",
                "iVar1": "channel_offset",
                "iVar2": "channel_address",
                "uVar3": "channel_id_and_num_channels"
            },
            "code": "void configure_tc_channel_00080b2c(uint32_t channel_id, uint32_t num_channels, char* tc_config)\n{\n    uint64_t channel_id_and_num_channels = ((uint64_t)num_channels << 32) | channel_id;\n    if (num_channels > 2) {\n        tc_config = DEFAULT_TC_CONFIG;\n        channel_id_and_num_channels = (*TC_CONFIGURE_FUNC)(DEFAULT_TC_SOURCE, TC_CONFIG_SIZE, DEFAULT_TC_CONFIG, sizeof(TC_CHANNEL));\n    }\n    uint32_t channel_offset = (uint32_t)(channel_id_and_num_channels >> 32) * TC_CHANNEL_SIZE;\n    uint32_t channel_address = (uint32_t)channel_id_and_num_channels + channel_offset;\n    *(uint32_t*)(channel_address) = 2;\n    *(uint32_t*)(channel_address + TC_CHANNEL_OFFSET) = 0xffffffff;\n    *(char**)(channel_address + TC_CONFIG_OFFSET) = tc_config;\n}",
            "called": [
                "FUN_000816f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080b2c",
            "calling": [
                "FUN_000803fc"
            ],
            "imported": false,
            "current_name": "configure_tc_channel_00080b2c"
        },
        "FUN_00080774": {
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "puVar1": "system_clock",
                "puVar2": "device_control",
                "iVar3": "gpio_pull",
                "iVar4": "gpio_direction",
                "iVar5": "gpio_address",
                "iVar6": "gpio_function_select",
                "iVar7": "i",
                "iVar8": "i_plus_one",
                "DAT_00080878": "system_clock_address",
                "DAT_0008087c": "device_control_address",
                "DAT_00080880": "device_control_address_2",
                "DAT_00080884": "gpio_pull_array",
                "DAT_00080888": "gpio_direction_array",
                "DAT_0008088c": "gpio_address_array",
                "DAT_00080890": "gpio_function_select_array",
                "DAT_00080894": "device_control_address_3",
                "DAT_00080898": "device_control_address_4"
            },
            "code": "void initialize_system_00080774(void)\n{\n  uint *system_clock = DAT_00080878;\n  setup_system_clock();\n  undefined4 *device_control = DAT_0008087c;\n  device_control[1] = *system_clock / 1000 - 1;\n  *(undefined *)(DAT_0008087c + 0x23) = 0xf0;\n  device_control[2] = 0;\n  *device_control = 7;\n  setup_leds();\n  int i = 0;\n  do {\n    setup_gpio(i);\n    int gpio_address = DAT_0008088c[i];\n    int gpio_direction = DAT_00080888[i];\n    int gpio_function_select = DAT_00080890[i];\n    int gpio_pull = DAT_00080884[i];\n    i++;\n  } while (i != 0x4f);\n  *(undefined4 *)(gpio_function_select + 0xa0) = 0xffffffff;\n  *(undefined4 *)(gpio_pull + 0xa0) = 0xffffffff;\n  *(undefined4 *)(gpio_address + 0xa0) = 0xffffffff;\n  *(undefined4 *)(gpio_direction + 0xa0) = 0xffffffff;\n  set_gpio_pull(gpio_pull, 1, 0x300, 0);\n  setup_gpio(0);\n  set_gpio_pull(gpio_pull, 1, 0xc00, 0);\n  set_gpio_pull(gpio_pull, 1, 0x3000, 0);\n  set_gpio_function(gpio_function_select, 2, 0x30, 0);\n  set_gpio_pull(gpio_pull, 1, 0xc00, 0);\n  set_gpio_pull(gpio_pull, 1, 3, 0);\n  set_gpio_pull(gpio_pull, 1, 0xc000, 0);\n  set_led(0x25);\n  set_device_address(DAT_0008087c, system_clock, DAT_00080880, 0xc);\n  set_device_data(DAT_0008087c, 0, 0x300000, 1);\n  set_device_data(DAT_0008087c, 0, 0);\n  set_device_data(DAT_0008087c, 0xffffffff);\n  set_device_data(DAT_0008087c);\n}\n",
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d30",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080b98",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080d62",
                "FUN_00080c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080774",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "initialize_system_00080774"
        },
        "FUN_00080ec2": {
            "renaming": {
                "FUN_00080ec2": "return_zero_00080ec2"
            },
            "code": "int return_zero_00080ec2(){\n    return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec2",
            "calling": [
                "FUN_00084508"
            ],
            "imported": false,
            "current_name": "return_zero_00080ec2"
        },
        "FUN_00083888": {
            "renaming": {
                "FUN_00083888": "initialize_00083888",
                "param_1": "parameter_1",
                "puVar1": "pointer_variable_1",
                "uVar2": "unsigned_variable_2",
                "puVar3": "pointer_variable_3",
                "puVar4": "pointer_variable_4",
                "puVar5": "pointer_variable_5",
                "puVar6": "pointer_variable_6"
            },
            "code": "void initialize_00083888(int param_1)\n{\n  if (*(int *)(param_1 + 0x38) == 0) {\n    undefined4 *first_array = *(undefined4 **)(param_1 + 4);\n    *(undefined **)(param_1 + 0x3c) = string_1;\n    *(undefined4 *)(param_1 + 0x2e4) = 3;\n    *(int *)(param_1 + 0x2e8) = param_1 + 0x2ec;\n    *(undefined4 *)(param_1 + 0x2e0) = 0;\n    *(undefined2 *)(first_array + 3) = 4;\n    *first_array = 0;\n    first_array[1] = 0;\n    first_array[2] = 0;\n    first_array[0x19] = 0;\n    *(undefined2 *)((int)first_array + 0xe) = 0;\n    first_array[4] = 0;\n    first_array[5] = 0;\n    first_array[6] = 0;\n    set_to_zero(first_array + 0x17, 0, 8);\n    undefined *string_2 = string_2;\n    undefined *function_1 = function_1;\n    undefined4 constant = constant;\n    undefined *function_2 = function_2;\n    undefined *string_3 = string_3;\n    undefined4 *second_array = *(undefined4 **)(param_1 + 8);\n    second_array[7] = second_array;\n    second_array[8] = function_1;\n    second_array[9] = constant;\n    second_array[10] = function_2;\n    second_array[0xb] = string_3;\n    *(undefined2 *)((int)second_array + 0xe) = 1;\n    *(undefined2 *)(second_array + 3) = 9;\n    *second_array = 0;\n    second_array[1] = 0;\n    second_array[2] = 0;\n    second_array[0x19] = 0;\n    second_array[4] = 0;\n    second_array[5] = 0;\n    second_array[6] = 0;\n    set_to_zero(second_array + 0x17, 0, 8);\n    undefined4 *third_array = *(undefined4 **)(param_1 + 0xc);\n    second_array[7] = second_array;\n    second_array[8] = function_1;\n    second_array[9] = constant;\n    second_array[10] = function_2;\n    second_array[0xb] = string_3;\n    *(undefined2 *)(third_array + 3) = 0x12;\n    *(undefined2 *)((int)third_array + 0xe) = 2;\n    *third_array = 0;\n    third_array[1] = 0;\n    third_array[2] = 0;\n    third_array[0x19] = 0;\n    third_array[4] = 0;\n    third_array[5] = 0;\n    third_array[6] = 0;\n    set_to_zero(third_array + 0x17, 0, 8);\n    third_array[7] = third_array;\n    third_array[8] = function_1;\n    third_array[9] = constant;\n    third_array[10] = function_2;\n    third_array[0xb] = string_3;\n    *(undefined4 *)(param_1 + 0x38) = 1;\n  }\n  return;\n}\n",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083888",
            "calling": [
                "FUN_00083850",
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "initialize_00083888"
        },
        "FUN_00081348": {
            "renaming": {
                "FUN_00081348": "initialize_params_00081348",
                "param_1": "params",
                "param_2": "param_2",
                "param_3": "param_3",
                "param_4": "param_4",
                "param_5": "param_5",
                "param_6": "param_6",
                "puVar1": "ptr_fun"
            },
            "code": "void initialize_params_00081348(undefined4 *params, undefined4 param_2, undefined param_3, undefined4 param_4, undefined4 param_5, undefined4 param_6)\n{\n  undefined *ptr_fun = PTR_PTR_FUN_000812b8_1_00081368;\n  params[0] = ptr_fun;\n  params[1] = 0;\n  params[2] = 1000;\n  params[3] = param_2;\n  params[4] = param_4;\n  *(undefined *)(params + 5) = param_3;\n  params[6] = param_5;\n  params[7] = 0;\n  params[8] = param_6;\n}\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081348",
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_params_00081348"
        },
        "FUN_00081624": {
            "renaming": {
                "FUN_00081624": "calculate_time_difference_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "param_4",
                "puVar1": "frequency",
                "iVar2": "result",
                "uVar3": "time"
            },
            "code": "int calculate_time_difference_00081624(int index, int flag, int value, undefined4 param_4) {\n  uint *frequency = DAT_0008167c;\n  undefined4 time = *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4);\n  if (flag == 0) {\n    time = 0;\n  }\n  int result = FUN_00081684(*(int *)(PTR_DAT_00081678 + index * 0x1c) + 0x3c, *(undefined4 *)(PTR_DAT_00081678 + index * 0x1c + 4), time, ((*DAT_0008167c / DAT_00081680) * value) / 0x12, param_4);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) / ((ulonglong)*frequency / 1000));\n  }\n  return result;\n}",
            "called": [
                "FUN_00081684"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081624",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_time_difference_00081624"
        },
        "FUN_00080ec8": {
            "renaming": {
                "FUN_00080ec8": "copy_bytes_to_data_00080ec8",
                "param_1": "data_ptr",
                "param_2": "source_ptr",
                "param_3": "num_bytes",
                "DAT_00080ee8": "data_ptr"
            },
            "code": "uint copy_bytes_to_data_00080ec8(uint DAT_00080ee8, int source_ptr, uint num_bytes){\n  int i;\n  for (i = 0; i < (int)num_bytes; i = i + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_00080ee8 + 0x14) << 0x1e);\n    *(uint *)(DAT_00080ee8 + 0x1c) = (uint)*(byte *)(source_ptr + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ec8",
            "calling": [
                "FUN_00084244"
            ],
            "imported": false,
            "current_name": "copy_bytes_to_data_00080ec8"
        },
        "FUN_0008117a": {
            "renaming": {
                "FUN_0008117a": "calculate_sum_of_values_0008117a",
                "param_1": "input_value",
                "iVar1": "first_value",
                "iVar2": "second_value",
                "FUN_0008113a": "get_first_value",
                "FUN_000810d8": "calculate_second_value"
            },
            "code": "int calculate_sum_of_values_0008117a(int input_value)\n{\n  int first_value = get_first_value();\n  int second_value = calculate_second_value(input_value);\n  return second_value + first_value;\n}",
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008117a",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "calculate_sum_of_values_0008117a"
        },
        "FUN_000801e0": {
            "renaming": {
                "FUN_000801e0": "check_for_interrupt_and_return_000801e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "FUN_000813dc": "check_and_set_interrupt",
                "FUN_00080f0c": "set_bit_in_register",
                "PTR_DAT_00080244": "interrupt_register",
                "PTR_DAT_00080248": "register_1",
                "PTR_DAT_0008024c": "register_2",
                "FUN_00080164": "initialize_data_at_PTR_DAT_00080164",
                "do_nothing_00080f08": "wait_for_1000_cycles",
                "PTR_DAT_00080160": "interrupt_flag",
                "software_interrupt": "trigger_interrupt"
            },
            "code": "int check_for_interrupt_and_return_000801e0(int param1, int param2, int param3, int param4) {\n    check_and_set_interrupt(PTR_DAT_00080244, 0xe100, param3, param4, param4);\n    set_bit_in_register(0xd, 1);\n    set_bit_in_register(6, 1);\n    set_bit_in_register(0x39, 0);\n    set_bit_in_register(4, 0);\n    set_bit_in_register(3, 0);\n    set_bit_in_register(2, 0);\n    set_bit_in_register(PTR_DAT_00080248, 5);\n    set_bit_in_register(PTR_DAT_0008024c, 6);\n    initialize_data_at_PTR_DAT_00080164();\n    wait_for_1000_cycles(do_nothing_00080f08);\n    if (*(int *)PTR_DAT_00080160 == 0) {\n        software_interrupt(0x3f);\n        return 1;\n    }\n    return 0;\n}",
            "called": [
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000806a0",
                "FUN_000813dc",
                "FUN_00080f0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801e0",
            "calling": [
                "FUN_000815ec"
            ],
            "imported": false,
            "current_name": "check_for_interrupt_and_return_000801e0"
        },
        "FUN_000811b0": {
            "renaming": {
                "FUN_000811b0": "initialize_buffer_000811b0",
                "param_1": "buffer_address",
                "FUN_00081f00": "set_buffer",
                "PTR_": "",
                "DAT_": "",
                "undefined4": "int",
                "0x80": "128",
                "0x84": "132"
            },
            "code": "int initialize_buffer_000811b0(int buffer_address)\n{\n    set_buffer(buffer_address, 0, 128);\n    *(int *)(buffer_address + 128) = 0;\n    *(int *)(buffer_address + 132) = 0;\n    return buffer_address;\n}",
            "called": [
                "FUN_00081f00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b0",
            "calling": [
                "FUN_0008089c"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000811b0"
        },
        "FUN_000817f0": {
            "renaming": {
                "FUN_000817f0": "call_function_with_param_000817f0",
                "param_1": "parameter",
                "*DAT_000817fc": "function_ptr"
            },
            "code": "void call_function_with_param_000817f0(void* *DAT_000817fc, int parameter) {\n  *DAT_000817fc(parameter);\n  return;\n}",
            "called": [
                "FUN_00081810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000817f0",
            "calling": [
                "FUN_000836ec"
            ],
            "imported": false,
            "current_name": "call_function_with_param_000817f0"
        },
        "FUN_0008145c": {
            "renaming": {
                "FUN_0008145c": "calculate_param_value_0008145c",
                "param_1": "start_value",
                "param_2": "end_value",
                "param_3": "start_range",
                "param_4": "end_range",
                "param_5": "current_range",
                "uint": "unsigned int"
            },
            "code": "int calculate_param_value_0008145c(int start_value, int end_value, int start_range, int end_range, int current_range) {\n    int range_diff = end_range - start_range;\n    int value_diff = start_value - end_value;\n    int current_range_diff = current_range - start_range;\n    int value_range_ratio = value_diff * current_range_diff;\n    int result = value_range_ratio / range_diff + end_value;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008145c",
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "imported": false,
            "current_name": "calculate_param_value_0008145c"
        },
        "FUN_00081f94": {
            "renaming": {
                "FUN_00081f94": "do_nothing_00081f94"
            },
            "code": "\nvoid do_nothing_00081f94(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f94",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f94"
        },
        "FUN_00080eba": {
            "renaming": {
                "FUN_00080eba": "get_one_00080eba",
                "undefined4": "int"
            },
            "code": "int get_one_00080eba() {\n    int result = 1;\n    return result;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080eba",
            "calling": [
                "FUN_000844bc"
            ],
            "imported": false,
            "current_name": "get_one_00080eba"
        },
        "FUN_00081f98": {
            "renaming": {
                "FUN_00081f98": "do_nothing_00081f98"
            },
            "code": "\nvoid do_nothing_00081f98(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081f98",
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "imported": false,
            "current_name": "do_nothing_00081f98"
        },
        "FUN_00081fac": {
            "renaming": {
                "FUN_00081fac": "FUNC_00081fac"
            },
            "code": "\nint * FUNC_00081fac(undefined4 *param_1,int *param_2,uint param_3)\n\n{\n  int iVar1;\n  int *piVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int *piVar6;\n  uint uVar7;\n  uint uVar8;\n  int *piVar9;\n  int iVar10;\n  \n  if (param_2 == (int *)0x0) {\n    piVar2 = (int *)FUNC_00081810(param_1,param_3);\n    return piVar2;\n  }\n  do_nothing_00081f94();\n  iVar4 = DAT_00082368;\n  uVar5 = param_2[-1];\n  uVar7 = uVar5 & 0xfffffffc;\n  piVar2 = param_2 + -2;\n  if (param_3 + 0xb < 0x17) {\n    uVar8 = 0x10;\n  }\n  else {\n    uVar8 = param_3 + 0xb & 0xfffffff8;\n    if ((int)uVar8 < 0) goto LAB_00082078;\n  }\n  if (uVar8 < param_3) {\nLAB_00082078:\n    *param_1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)uVar7 < (int)uVar8) {\n    iVar1 = (int)piVar2 + uVar7;\n    iVar10 = *(int *)(DAT_00082368 + 8);\n    if (iVar10 == iVar1) {\n      uVar3 = *(uint *)(iVar10 + 4) & 0xfffffffc;\n      iVar1 = iVar10;\n      if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar7)) {\n        *(uint *)(DAT_00082368 + 8) = (int)piVar2 + uVar8;\n        *(uint *)((int)piVar2 + uVar8 + 4) = (uVar3 + uVar7) - uVar8 | 1;\n        param_2[-1] = uVar8 | param_2[-1] & 1U;\n        do_nothing_00081f98(param_1);\n        return param_2;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(iVar1 + 4) & 0xfffffffe) + iVar1 + 4) & 1) == 0) {\n      uVar3 = *(uint *)(iVar1 + 4) & 0xfffffffc;\n      if ((int)uVar8 <= (int)(uVar3 + uVar7)) {\n        iVar10 = *(int *)(iVar1 + 0xc);\n        iVar4 = *(int *)(iVar1 + 8);\n        *(int *)(iVar4 + 0xc) = iVar10;\n        *(int *)(iVar10 + 8) = iVar4;\n        uVar7 = uVar3 + uVar7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      uVar3 = 0;\n      iVar1 = 0;\n    }\n    if (-1 < (int)(uVar5 << 0x1f)) {\n      piVar9 = (int *)((int)piVar2 - param_2[-2]);\n      uVar5 = (piVar9[1] & 0xfffffffcU) + uVar7;\n      if (iVar1 != 0) {\n        if (iVar1 == iVar10) {\n          if ((int)(uVar8 + 0x10) <= (int)(uVar3 + uVar5)) {\n            piVar2 = piVar9 + 2;\n            iVar1 = *piVar2;\n            iVar10 = piVar9[3];\n            uVar7 = uVar7 - 4;\n            *(int *)(iVar1 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar1;\n            if (uVar7 < 0x25) {\n              piVar6 = piVar2;\n              if (0x13 < uVar7) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar7 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar6 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar7 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar6 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar6;\n                    piVar6 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar6 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar6 = *param_2;\n              piVar6[1] = param_2[1];\n              piVar6[2] = param_2[2];\n            }\n            else {\n              FUN_00081e34(piVar2,param_2);\n            }\n            *(uint *)(iVar4 + 8) = (int)piVar9 + uVar8;\n            *(uint *)((int)piVar9 + uVar8 + 4) = (uVar3 + uVar5) - uVar8 | 1;\n            piVar9[1] = uVar8 | piVar9[1] & 1U;\n            do_nothing_00081f98(param_1);\n            return piVar2;\n          }\n        }\n        else {\n          uVar3 = uVar3 + uVar5;\n          if ((int)uVar8 <= (int)uVar3) {\n            iVar10 = *(int *)(iVar1 + 0xc);\n            iVar4 = *(int *)(iVar1 + 8);\n            *(int *)(iVar4 + 0xc) = iVar10;\n            *(int *)(iVar10 + 8) = iVar4;\n            piVar6 = piVar9 + 2;\n            iVar4 = *piVar6;\n            iVar1 = piVar9[3];\n            uVar5 = uVar7 - 4;\n            *(int *)(iVar4 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = iVar4;\n            uVar7 = uVar3;\n            if (uVar5 < 0x25) {\n              piVar2 = piVar6;\n              if (0x13 < uVar5) {\n                piVar9[2] = *param_2;\n                piVar9[3] = param_2[1];\n                if (uVar5 < 0x1c) {\n                  param_2 = param_2 + 2;\n                  piVar2 = piVar9 + 4;\n                }\n                else {\n                  piVar9[4] = param_2[2];\n                  piVar9[5] = param_2[3];\n                  if (uVar5 == 0x24) {\n                    piVar9[6] = param_2[4];\n                    piVar2 = param_2 + 5;\n                    param_2 = param_2 + 6;\n                    piVar9[7] = *piVar2;\n                    piVar2 = piVar9 + 8;\n                  }\n                  else {\n                    param_2 = param_2 + 4;\n                    piVar2 = piVar9 + 6;\n                  }\n                }\n              }\n              *piVar2 = *param_2;\n              piVar2[1] = param_2[1];\n              piVar2[2] = param_2[2];\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            else {\n              FUN_00081e34(piVar6,param_2);\n              uVar5 = piVar9[1];\n              piVar2 = piVar9;\n              param_2 = piVar6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)uVar8 <= (int)uVar5) {\n        piVar6 = piVar9 + 2;\n        iVar4 = *piVar6;\n        iVar1 = piVar9[3];\n        uVar3 = uVar7 - 4;\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        uVar7 = uVar5;\n        if (uVar3 < 0x25) {\n          piVar2 = piVar6;\n          if (0x13 < uVar3) {\n            piVar9[2] = *param_2;\n            piVar9[3] = param_2[1];\n            if (uVar3 < 0x1c) {\n              param_2 = param_2 + 2;\n              piVar2 = piVar9 + 4;\n            }\n            else {\n              piVar9[4] = param_2[2];\n              piVar9[5] = param_2[3];\n              if (uVar3 == 0x24) {\n                piVar9[6] = param_2[4];\n                piVar2 = param_2 + 5;\n                param_2 = param_2 + 6;\n                piVar9[7] = *piVar2;\n                piVar2 = piVar9 + 8;\n              }\n              else {\n                param_2 = param_2 + 4;\n                piVar2 = piVar9 + 6;\n              }\n            }\n          }\n          *piVar2 = *param_2;\n          piVar2[1] = param_2[1];\n          piVar2[2] = param_2[2];\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        else {\n          FUN_00081e34(piVar6,param_2);\n          uVar5 = piVar9[1];\n          piVar2 = piVar9;\n          param_2 = piVar6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    piVar9 = (int *)FUNC_00081810(param_1,param_3);\n    if (piVar9 == (int *)0x0) goto LAB_000820a0;\n    uVar5 = param_2[-1];\n    if (piVar9 + -2 != (int *)((uVar5 & 0xfffffffe) + (int)piVar2)) {\n      uVar7 = uVar7 - 4;\n      if (uVar7 < 0x25) {\n        piVar2 = param_2;\n        piVar6 = piVar9;\n        if (0x13 < uVar7) {\n          *piVar9 = *param_2;\n          piVar9[1] = param_2[1];\n          if (uVar7 < 0x1c) {\n            piVar2 = param_2 + 2;\n            piVar6 = piVar9 + 2;\n          }\n          else {\n            piVar9[2] = param_2[2];\n            piVar9[3] = param_2[3];\n            if (uVar7 == 0x24) {\n              piVar9[4] = param_2[4];\n              piVar9[5] = param_2[5];\n              piVar2 = param_2 + 6;\n              piVar6 = piVar9 + 6;\n            }\n            else {\n              piVar2 = param_2 + 4;\n              piVar6 = piVar9 + 4;\n            }\n          }\n        }\n        *piVar6 = *piVar2;\n        piVar6[1] = piVar2[1];\n        piVar6[2] = piVar2[2];\n      }\n      else {\n        FUN_00081e34(piVar9,param_2);\n      }\n      FUN_00083b10(param_1,param_2);\n      goto LAB_000820a0;\n    }\n    uVar7 = uVar7 + (piVar9[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  uVar3 = uVar7 - uVar8;\n  piVar9 = param_2;\n  if (uVar3 < 0x10) {\n    piVar2[1] = uVar5 & 1 | uVar7;\n    *(uint *)((int)piVar2 + uVar7 + 4) = *(uint *)((int)piVar2 + uVar7 + 4) | 1;\n  }\n  else {\n    piVar2[1] = uVar5 & 1 | uVar8;\n    *(uint *)((int)piVar2 + uVar8 + 4) = uVar3 | 1;\n    *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) = *(uint *)((int)piVar2 + uVar3 + uVar8 + 4) | 1;\n    FUN_00083b10(param_1,(int)piVar2 + uVar8 + 8);\n  }\nLAB_000820a0:\n  do_nothing_00081f98(param_1);\n  return piVar9;\n}\n\n",
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081810"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081fac",
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "imported": false,
            "current_name": "FUNC_00081fac"
        },
        "FUN_00081190": {
            "renaming": {
                "FUN_00081190": "decrement_and_call_if_zero_00081190",
                "iVar1": "count"
            },
            "code": "void decrement_and_call_if_zero_00081190(void)\n{\n  int count = *DAT_000811a8;\n  if ((count != -1) && (--count == 0)) {\n    (*DAT_000811ac)();\n  }\n  *DAT_000811a8 = count;\n  return;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081190",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_call_if_zero_00081190"
        },
        "FUN_000809e4": {
            "renaming": {
                "FUN_000809e4": "set_values_for_array_000809e4",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "is_negative",
                "PTR_": "array",
                "DAT_": "value"
            },
            "code": "void set_values_for_array_000809e4(uint32_t *PTR_, uint32_t DAT_, uint32_t flags)\n{\n  bool is_negative = (int)(flags << 0x1f) < 0;\n  PTR_[17] = DAT_;\n  if (is_negative) {\n    PTR_[25] = DAT_;\n  }\n  if (!is_negative) {\n    PTR_[24] = DAT_;\n  }\n  bool is_bit_set = (flags & 0x0A) != 0;\n  if (is_bit_set) {\n    PTR_[8] = DAT_;\n  }\n  if (!is_bit_set) {\n    PTR_[9] = DAT_;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    PTR_[32] = DAT_;\n  }\n  PTR_[5] = DAT_;\n  *PTR_ = DAT_;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000809e4",
            "calling": [
                "FUN_00080a30"
            ],
            "imported": false,
            "current_name": "set_values_for_array_000809e4"
        },
        "FUN_00080ebe": {
            "renaming": {
                "FUN_00080ebe": "return_zero_00080ebe"
            },
            "code": "int return_zero_00080ebe() {\n  return 0;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ebe",
            "calling": [
                "FUN_000844e0"
            ],
            "imported": false,
            "current_name": "return_zero_00080ebe"
        },
        "thunk_FUN_000816d8": {
            "renaming": {
                "thunk_FUN_000816d8": "getValueFromPtrDat_thunk_000816d8",
                "undefined4": "int",
                "*": "",
                "PTR_DAT_000816e0": "ptrDat"
            },
            "code": "int getValueFromPtrDat_thunk_000816d8() {\n    int value = *(int *)PTR_DAT_000816e0;\n    return value;\n}",
            "called": [
                "FUN_000816d8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f04",
            "calling": [
                "FUN_000811e8"
            ],
            "imported": false,
            "current_name": "getValueFromPtrDat_thunk_000816d8"
        },
        "FUN_000816d8": {
            "renaming": {
                "FUN_000816d8": "get_value_from_pointer_000816d8",
                "PTR_DAT_000816e0": "value_ptr"
            },
            "code": "int get_value_from_pointer_000816d8() {\n    int* PTR_DAT_000816e0 = (int*)PTR_DAT_000816e0;\n    int value = *PTR_DAT_000816e0;\n    return value;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d8",
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "imported": false,
            "current_name": "get_value_from_pointer_000816d8"
        },
        "FUN_000815b8": {
            "renaming": {
                "FUN_000815b8": "check_param_000815b8",
                "param_1": "param_list",
                "param_2": "param_value",
                "uVar1": "param_length",
                "iVar2": "result"
            },
            "code": "int check_param_000815b8(byte **param_list, byte *param_value) {\n    uint param_length;\n    int result;\n    \n    if (param_list[2] == NULL) {\n        if (param_value == NULL) {\n            return 1;\n        }\n    }\n    else {\n        if (param_value != NULL) {\n            param_length = get_param_length(*param_list);\n            goto LAB_000815d4;\n        }\n        param_value = *param_list;\n    }\n    param_length = (uint)*param_value;\n    \nLAB_000815d4:\n    result = 1 - param_length;\n    if (param_length > 1) {\n        result = 0;\n    }\n    return result;\n}",
            "called": [
                "FUN_00082390"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815b8",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "check_param_000815b8"
        },
        "FUN_00084220": {
            "renaming": {
                "FUN_00084220": "process_data_00084220",
                "param_1": "buffer_start",
                "param_2": "buffer_offset",
                "iVar1": "data_size",
                "FUN_00084508": "get_data_size"
            },
            "code": "void process_data_00084220(undefined4 buffer_start,int buffer_offset){\n  int data_size;\n  \n  data_size = get_data_size(buffer_start,(int)*(short *)(buffer_offset + 0xe));\n  if (-1 < data_size) {\n    *(int *)(buffer_offset + 0x50) = *(int *)(buffer_offset + 0x50) + data_size;\n    return;\n  }\n  *(ushort *)(buffer_offset + 0xc) = *(ushort *)(buffer_offset + 0xc) & 0xefff;\n  return;\n}",
            "called": [
                "FUN_00084508"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084220",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084220"
        },
        "FUN_00081472": {
            "renaming": {
                "FUN_00081472": "reverse_and_return_ptr_00081472",
                "param_1": "input_ptr",
                "*param_1": "*input_ptr",
                "FUN_00081800": "reverse_string"
            },
            "code": "undefined4 * reverse_and_return_ptr_00081472(undefined4 *input_ptr)\n{\n  reverse_string(*input_ptr);\n  return input_ptr;\n}",
            "called": [
                "FUN_00081800"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081472",
            "calling": [
                "FUN_00080250"
            ],
            "imported": false,
            "current_name": "reverse_and_return_ptr_00081472"
        },
        "FUN_00084860": {
            "renaming": {
                "FUN_00084860": "FUNC_00084860"
            },
            "code": "\nundefined8 FUNC_00084860(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  longlong lVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  bool bVar11;\n  \n  if (param_4 == 0) {\n    if (param_3 <= param_2) {\n      if (param_3 == 0) {\n        param_3 = 1 / 0;\n      }\n      uVar9 = count_leading_zeroes(param_3);\n      if (uVar9 == 0) {\n        param_2 = param_2 - param_3;\n        uVar2 = param_3 >> 0x10;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = 1;\n      }\n      else {\n        param_3 = param_3 << (uVar9 & 0xff);\n        uVar3 = param_2 >> (0x20 - uVar9 & 0xff);\n        uVar2 = param_3 >> 0x10;\n        uVar8 = uVar3 / uVar2;\n        uVar4 = param_3 & 0xffff;\n        uVar7 = uVar4 * uVar8;\n        uVar5 = param_1 >> (0x20 - uVar9 & 0xff) | param_2 << (uVar9 & 0xff);\n        uVar3 = uVar5 >> 0x10 | (uVar3 - uVar2 * uVar8) * 0x10000;\n        param_1 = param_1 << (uVar9 & 0xff);\n        uVar9 = uVar8;\n        if (uVar3 <= uVar7 && uVar7 - uVar3 != 0) {\n          bVar11 = CARRY4(uVar3,param_3);\n          uVar3 = uVar3 + param_3;\n          uVar9 = uVar8 - 1;\n          if ((bVar11 == false) && (uVar3 <= uVar7 && uVar7 - uVar3 != 0)) {\n            uVar9 = uVar8 - 2;\n            uVar3 = uVar3 + param_3;\n          }\n        }\n        uVar6 = (uVar3 - uVar7) / uVar2;\n        uVar8 = uVar4 * uVar6;\n        param_2 = uVar5 & 0xffff | ((uVar3 - uVar7) - uVar2 * uVar6) * 0x10000;\n        uVar7 = uVar6;\n        if (param_2 <= uVar8 && uVar8 - param_2 != 0) {\n          bVar11 = CARRY4(param_2,param_3);\n          param_2 = param_2 + param_3;\n          uVar7 = uVar6 - 1;\n          if ((bVar11 == false) && (param_2 <= uVar8 && uVar8 - param_2 != 0)) {\n            uVar7 = uVar6 - 2;\n            param_2 = param_2 + param_3;\n          }\n        }\n        param_2 = param_2 - uVar8;\n        uVar7 = uVar7 | uVar9 << 0x10;\n      }\n      uVar8 = param_2 / uVar2;\n      uVar3 = uVar4 * uVar8;\n      uVar5 = param_1 >> 0x10 | (param_2 - uVar2 * uVar8) * 0x10000;\n      uVar9 = uVar8;\n      if (uVar5 <= uVar3 && uVar3 - uVar5 != 0) {\n        bVar11 = CARRY4(uVar5,param_3);\n        uVar5 = uVar5 + param_3;\n        uVar9 = uVar8 - 1;\n        if ((bVar11 == false) && (uVar5 <= uVar3 && uVar3 - uVar5 != 0)) {\n          uVar9 = uVar8 - 2;\n          uVar5 = uVar5 + param_3;\n        }\n      }\n      uVar8 = (uVar5 - uVar3) / uVar2;\n      uVar4 = uVar4 * uVar8;\n      uVar5 = param_1 & 0xffff | ((uVar5 - uVar3) - uVar2 * uVar8) * 0x10000;\n      uVar2 = uVar8;\n      if (uVar5 <= uVar4 && uVar4 - uVar5 != 0) {\n        uVar2 = uVar8 - 1;\n        if ((CARRY4(uVar5,param_3) == false) &&\n           (uVar5 + param_3 <= uVar4 && uVar4 - (uVar5 + param_3) != 0)) {\n          uVar2 = uVar8 - 2;\n        }\n      }\n      return CONCAT44(uVar7,uVar2 | uVar9 << 0x10);\n    }\n    uVar9 = count_leading_zeroes(param_3);\n    if (uVar9 != 0) {\n      uVar7 = param_1 >> (0x20 - uVar9 & 0xff);\n      param_3 = param_3 << (uVar9 & 0xff);\n      param_1 = param_1 << (uVar9 & 0xff);\n      param_2 = uVar7 | param_2 << (uVar9 & 0xff);\n    }\n    uVar7 = param_3 >> 0x10;\n    uVar2 = param_2 / uVar7;\n    uVar4 = (param_3 & 0xffff) * uVar2;\n    uVar8 = param_1 >> 0x10 | (param_2 - uVar7 * uVar2) * 0x10000;\n    uVar9 = uVar2;\n    if (uVar8 <= uVar4 && uVar4 - uVar8 != 0) {\n      bVar11 = CARRY4(uVar8,param_3);\n      uVar8 = uVar8 + param_3;\n      uVar9 = uVar2 - 1;\n      if ((bVar11 == false) && (uVar8 <= uVar4 && uVar4 - uVar8 != 0)) {\n        uVar9 = uVar2 - 2;\n        uVar8 = uVar8 + param_3;\n      }\n    }\n    uVar5 = (uVar8 - uVar4) / uVar7;\n    uVar2 = (param_3 & 0xffff) * uVar5;\n    uVar4 = param_1 & 0xffff | ((uVar8 - uVar4) - uVar7 * uVar5) * 0x10000;\n    uVar7 = uVar5;\n    if (uVar4 <= uVar2 && uVar2 - uVar4 != 0) {\n      uVar7 = uVar5 - 1;\n      if ((CARRY4(uVar4,param_3) == false) &&\n         (uVar4 + param_3 <= uVar2 && uVar2 - (uVar4 + param_3) != 0)) {\n        uVar7 = uVar5 - 2;\n      }\n    }\n    uVar9 = uVar7 | uVar9 << 0x10;\n    uVar7 = 0;\n  }\n  else {\n    if (param_2 < param_4) {\n      return 0;\n    }\n    uVar9 = count_leading_zeroes(param_4);\n    if (uVar9 == 0) {\n      if ((param_4 < param_2) || (uVar7 = uVar9, param_3 <= param_1)) {\n        return 1;\n      }\n    }\n    else {\n      uVar2 = 0x20 - uVar9;\n      uVar7 = param_2 >> (uVar2 & 0xff);\n      uVar4 = param_4 << (uVar9 & 0xff) | param_3 >> (uVar2 & 0xff);\n      uVar8 = uVar4 >> 0x10;\n      uVar6 = uVar7 / uVar8;\n      uVar5 = (uVar4 & 0xffff) * uVar6;\n      uVar3 = param_1 >> (uVar2 & 0xff) | param_2 << (uVar9 & 0xff);\n      uVar2 = uVar3 >> 0x10 | (uVar7 - uVar8 * uVar6) * 0x10000;\n      uVar7 = uVar6;\n      if (uVar2 <= uVar5 && uVar5 - uVar2 != 0) {\n        bVar11 = CARRY4(uVar2,uVar4);\n        uVar2 = uVar2 + uVar4;\n        uVar7 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar2 <= uVar5 && uVar5 - uVar2 != 0)) {\n          uVar7 = uVar6 - 2;\n          uVar2 = uVar2 + uVar4;\n        }\n      }\n      uVar6 = (uVar2 - uVar5) / uVar8;\n      uVar10 = (uVar4 & 0xffff) * uVar6;\n      uVar8 = uVar3 & 0xffff | ((uVar2 - uVar5) - uVar8 * uVar6) * 0x10000;\n      uVar2 = uVar6;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        bVar11 = CARRY4(uVar8,uVar4);\n        uVar8 = uVar8 + uVar4;\n        uVar2 = uVar6 - 1;\n        if ((bVar11 == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar2 = uVar6 - 2;\n          uVar8 = uVar8 + uVar4;\n        }\n      }\n      uVar2 = uVar2 | uVar7 << 0x10;\n      lVar1 = (ulonglong)uVar2 * (ulonglong)(param_3 << (uVar9 & 0xff));\n      uVar7 = (uint)((ulonglong)lVar1 >> 0x20);\n      if ((uVar8 - uVar10 < uVar7) ||\n         ((uVar8 - uVar10 == uVar7 && (param_1 << (uVar9 & 0xff) < (uint)lVar1)))) {\n        uVar9 = uVar2 - 1;\n        uVar7 = 0;\n      }\n      else {\n        uVar9 = uVar2;\n        uVar7 = 0;\n      }\n    }\n  }\n  return CONCAT44(uVar7,uVar9);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00084860",
            "calling": [
                "FUN_0008458c"
            ],
            "imported": false,
            "current_name": "FUNC_00084860"
        },
        "FUN_000836ec": {
            "renaming": {
                "FUN_000836ec": "add_value_to_list_000836ec",
                "uVar1": "value",
                "puVar2": "list",
                "iVar3": "list_size",
                "iVar4": "list_ptr_address",
                "UNRECOVERED_JUMPTABLE_00": "execute_function",
                "PTR_DAT_000836d0": "list_ptr_address",
                "DAT_000836d4": "memory_allocation_status",
                "FUN_00080eec": "get_value",
                "FUN_000817f0": "allocate_memory"
            },
            "code": "void add_value_to_list_000836ec(void)\n{\n  int value = get_value();\n  int *list = *(int **)PTR_DAT_000836d0;\n  if (list == NULL) {\n    list = (int *)(*(int *)PTR_DAT_000836d0 + 0x14c);\n    *(int **)PTR_DAT_000836d0 = list;\n  }\n  int list_size = list[1];\n  if (list_size > 0x1f) {\n    if (can_allocate_memory() == NULL) {\n      handle_out_of_memory_error();\n      return;\n    }\n    int *new_list = allocate_memory(400);\n    new_list[0] = *(int **)PTR_DAT_000836d0;\n    new_list[1] = 0;\n    list_size = 0;\n    *(int **)PTR_DAT_000836d0 = new_list;\n    new_list[0x62] = 0;\n    new_list[99] = 0;\n  }\n  list[1] = list_size + 1;\n  list[list_size + 2] = value;\n  execute_function(0);\n  return;\n}",
            "called": [
                "FUN_000841e4",
                "FUN_000817f0",
                "FUN_00080eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000836ec",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "add_value_to_list_000836ec"
        },
        "FUN_00081750": {
            "renaming": {
                "FUN_00081750": "process_data_and_call_function_00081750",
                "param_1": "data_buffer",
                "param_2": "data_size",
                "param_3": "arg1",
                "param_4": "arg2",
                "uStack_8": "buffer_ptr",
                "uStack_4": "size",
                "*DAT_00081774": "function_ptr",
                "FUNC_0008289c": "function_call",
                "&uStack_8": "&arg1_ptr"
            },
            "code": "void process_data_and_call_function_00081750(void* data_buffer, size_t data_size, void* arg1, void* arg2)\n{\n  void* buffer_ptr = data_buffer;\n  size_t size = data_size;\n  void* arg1_ptr = arg1;\n  void* arg2_ptr = arg2;\n  function_call(**DAT_00081774, buffer_ptr, size, &arg1_ptr);\n  return;\n}",
            "called": [
                "FUN_0008289c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081750",
            "calling": [
                "FUN_000816f8"
            ],
            "imported": false,
            "current_name": "process_data_and_call_function_00081750"
        },
        "FUN_00082688": {
            "renaming": {
                "FUN_00082688": "calculateStringLength_00082688",
                "param_1": "address",
                "iVar1": "length",
                "puVar2": "address_ptr",
                "uVar3": "word",
                "bVar4": "end_of_string_reached"
            },
            "code": "int calculateStringLength_00082688(uint32_t address) {\n  int length = 0;\n  uint32_t *address_ptr = (uint32_t *)(address & 0xfffffffc);\n  int alignment_offset = -(address & 3);\n  uint32_t word = *address_ptr;\n  if ((address & 3) != 0) {\n    word = word | 0xffffffffU >> ((alignment_offset + 4U & 0x1f) << 3);\n  }\n  while (address_ptr = address_ptr + 1, (word + 0xfefefeff & ~word & 0x80808080) == 0) {\n    alignment_offset = alignment_offset + 4;\n    word = *address_ptr;\n  }\n  bool end_of_string_reached = (word & 0xff) == 0;\n  if (!end_of_string_reached) {\n    alignment_offset = alignment_offset + 1;\n    end_of_string_reached = (word & 0xff00) == 0;\n  }\n  if (!end_of_string_reached) {\n    alignment_offset = alignment_offset + 1;\n    end_of_string_reached = (word & 0xff0000) == 0;\n  }\n  if (!end_of_string_reached) {\n    alignment_offset = alignment_offset + 1;\n  }\n  return alignment_offset;\n}",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082688",
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "imported": false,
            "current_name": "calculateStringLength_00082688"
        },
        "FUN_00084508": {
            "renaming": {
                "FUN_00084508": "getReturnValue_00084508",
                "param_1": "returnValue",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "dataPointer",
                "iVar2": "functionReturnValue"
            },
            "code": "void getReturnValue_00084508(int *returnValue, undefined4 arg2, undefined4 arg3, undefined4 arg4) {\n  undefined *dataPointer = PTR_DAT_0008452c;\n  *(undefined4 *)PTR_DAT_0008452c = 0;\n  int functionReturnValue = FUN_00080ec2(arg2, arg3, arg4);\n  if ((functionReturnValue == -1) && (*(int *)dataPointer != 0)) {\n    *returnValue = *(int *)dataPointer;\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00080ec2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084508",
            "calling": [
                "FUN_00084220"
            ],
            "imported": false,
            "current_name": "getReturnValue_00084508"
        },
        "FUN_00080a30": {
            "renaming": {
                "FUN_00080a30": "process_data_00080a30",
                "param_1": "data_ptr",
                "param_2": "data_type",
                "param_3": "data_value",
                "param_4": "data_flags",
                "bVar1": "is_negative"
            },
            "code": "int process_data_00080a30(int data_ptr, int data_type, int data_value, uint32_t data_flags) {\n  bool is_negative = (int)(data_flags << 0x1f) < 0;\n  switch(data_type) {\n    case 1:\n    case 2:\n      (*data_ptr)(data_value, data_type, data_flags);\n      *(int *)(data_ptr + 0x44) = data_value;\n      if (is_negative) {\n        *(int *)(data_ptr + 100) = data_value;\n      }\n      if (!is_negative) {\n        *(int *)(data_ptr + 0x60) = data_value;\n      }\n      break;\n    case 3:\n      (*data_ptr)(data_value, data_flags, data_ptr);\n      break;\n    case 4:\n    case 5:\n      (*data_ptr)(data_value, data_type == 5, (data_flags << 0x1d) >> 0x1f, data_flags & 1, data_type, data_value);\n      break;\n    default:\n      return 0;\n  }\n  return 1;\n}",
            "called": [
                "FUN_000809be",
                "FUN_00080a0a",
                "FUN_000809e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a30",
            "calling": [
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "imported": false,
            "current_name": "process_data_00080a30"
        },
        "FUN_0008089c": {
            "renaming": {
                "FUN_0008089c": "initialize_data_structures_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "puVar5": "ptr5",
                "puVar6": "ptr6",
                "PTR_DAT_00080930": "ptr_DAT_00080930",
                "PTR_DAT_00080934": "ptr_DAT_00080934",
                "PTR_DAT_0008093c": "ptr_DAT_0008093c",
                "PTR_DAT_00080940": "ptr_DAT_00080940",
                "PTR_DAT_00080944": "ptr_DAT_00080944",
                "PTR_DAT_00080948": "ptr_DAT_00080948",
                "PTR_DAT_0008094c": "ptr_DAT_0008094c",
                "PTR_DAT_00080954": "ptr_DAT_00080954",
                "PTR_DAT_0008095c": "ptr_DAT_0008095c",
                "PTR_DAT_00080964": "ptr_DAT_00080964",
                "PTR_DAT_00080968": "ptr_DAT_00080968",
                "DAT_00080938": "DAT_00080938",
                "DAT_00080950": "DAT_00080950",
                "DAT_00080958": "DAT_00080958",
                "DAT_00080960": "DAT_00080960"
            },
            "code": "void initialize_data_structures_0008089c(undefined4 param_1, undefined4 param_2, undefined4 param_3)\n{\n  undefined *ptr1;\n  undefined *ptr2;\n  undefined *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined *ptr6;\n  ptr2 = PTR_DAT_00080934;\n  ptr1 = PTR_DAT_00080930;\n  initialize(PTR_DAT_00080930);\n  initialize(ptr2);\n  ptr5 = PTR_DAT_00080968;\n  ptr3 = PTR_DAT_0008093c;\n  setup_data_structures(PTR_DAT_00080940, DAT_00080938, 8, 8, ptr1, ptr2, param_3);\n  ptr1 = PTR_DAT_00080944;\n  initialize(ptr5);\n  ptr6 = ptr_DAT_0008096c;\n  initialize(ptr3);\n  ptr2 = PTR_DAT_00080948;\n  initialize(ptr1);\n  ptr4 = PTR_DAT_0008094c;\n  initialize(ptr6);\n  initialize(ptr2);\n  initialize(ptr4);\n  setup_data_structures(PTR_DAT_00080954, DAT_00080950, 0x11, 0x11, ptr5, ptr6);\n  setup_data_structures(PTR_DAT_0008095c, DAT_00080958, 0x12, 0x12, ptr3, ptr2);\n  setup_data_structures(PTR_DAT_00080964, DAT_00080960, 0x14, 0x14, ptr1, ptr4);\n  return;\n}",
            "called": [
                "FUN_00081348",
                "FUN_000811b0",
                "FUN_00081438"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008089c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_structures_0008089c"
        },
        "FUN_000810a6": {
            "renaming": {
                "FUN_000810a6": "process_data_000810a6",
                "param_1": "data_ptr",
                "param_2": "num_elements",
                "uVar1": "new_element_size"
            },
            "code": "void process_data_000810a6(int *data_ptr, int num_elements, undefined4 param_3, undefined4 param_4)\n{\n  undefined4 new_element_size;\n  if (num_elements != 0) {\n    new_element_size = calculate_new_element_size(num_elements);\n    (**(code **)(*data_ptr + 4))(data_ptr, num_elements, new_element_size, *(code **)(*data_ptr + 4), param_4);\n    return;\n  }\n  return;\n}",
            "called": [
                "FUN_00082688"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810a6",
            "calling": [
                "FUN_000810e8",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810c4"
            ],
            "imported": false,
            "current_name": "process_data_000810a6"
        }
    },
    "used_tokens": 110435,
    "layers": [
        [
            "FUN_000817c8",
            "FUN_00081560",
            "FUN_00081684",
            "FUN_000825cc",
            "FUN_00080118",
            "FUN_00080aa8",
            "FUN_00080f0c",
            "FUN_00083a74",
            "FUN_000844e0",
            "FUN_00083b10",
            "FUN_00080e80",
            "thunk_FUN_0008113a",
            "FUN_0008236c",
            "FUN_00080d62",
            "FUN_000842a4",
            "FUN_000814f6",
            "FUN_00080e88",
            "FUN_000836d8",
            "FUN_000812b8",
            "thunk_FUN_00080efe",
            "FUN_000839b4",
            "FUN_00081570",
            "FUN_000803fc",
            "FUN_00080eb0",
            "FUN_00081214",
            "FUN_0008439c",
            "FUN_00082824",
            "FUN_0008427c",
            "FUN_000809be",
            "FUN_00080a94",
            "FUN_00081618",
            "FUN_0008455c",
            "FUN_000840f8",
            "FUN_00081f00",
            "FUN_00080eaa",
            "FUN_00081d48",
            "FUN_00084494",
            "FUN_00084530",
            "FUN_00080970",
            "FUN_00084018",
            "FUN_000815de",
            "FUN_000834f0",
            "FUN_000841e4",
            "FUN_0008113a",
            "FUN_0008400c",
            "FUN_000814d0",
            "FUN_00080c20",
            "FUN_0008044c",
            "FUN_000810d8",
            "FUN_00080efe",
            "FUN_00081e34",
            "FUN_000805a8",
            "FUN_000810cc",
            "FUN_00081276",
            "FUN_000844bc",
            "FUN_00083850",
            "FUN_000815ec",
            "FUN_00080d3e",
            "FUN_00081438",
            "FUN_00080b90",
            "FUN_0008356c",
            "FUN_00080b98",
            "FUN_000810e8",
            "FUN_00080d58",
            "FUN_00081480",
            "FUN_00081f9c",
            "FUN_00081248",
            "FUN_00081800",
            "FUN_0008458c",
            "FUN_0008434c",
            "FUN_0008159e",
            "FUN_000806a0",
            "FUN_0008151c",
            "FUN_000816f8",
            "FUN_00084484",
            "FUN_000811ca",
            "FUN_00080164",
            "FUN_00084244",
            "FUN_00081496",
            "FUN_00084004",
            "FUN_00081014",
            "FUN_000816ec",
            "FUN_000814ae",
            "FUN_00081778",
            "FUN_000800f4",
            "FUN_000810c4",
            "FUN_00080d30",
            "FUN_00080c98",
            "FUN_00080eec",
            "FUN_000811e8",
            "FUN_000806f8",
            "FUN_000810fc",
            "FUN_00080250",
            "FUN_00080d6a",
            "FUN_000813dc",
            "FUN_00080a0a",
            "FUN_00080b2c",
            "FUN_00080774",
            "FUN_00080ec2",
            "FUN_00083888",
            "FUN_00081348",
            "FUN_00081624",
            "FUN_00080ec8",
            "FUN_0008117a",
            "FUN_000801e0",
            "FUN_000811b0",
            "FUN_000817f0",
            "FUN_0008145c",
            "FUN_00080eba",
            "FUN_00081190",
            "FUN_000809e4",
            "FUN_00080ebe",
            "thunk_FUN_000816d8",
            "FUN_000816d8",
            "FUN_000815b8",
            "FUN_00084220",
            "FUN_00081472",
            "FUN_000836ec",
            "FUN_00081750",
            "FUN_00082688",
            "FUN_00084508",
            "FUN_00080a30",
            "FUN_0008089c",
            "FUN_000810a6"
        ]
    ],
    "locked_functions": []
}